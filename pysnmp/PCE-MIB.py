# SNMP MIB module (PCE-MIB) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file:///Users/lextm/pysnmp.com/mibs.pysnmp.com/asn1/PCE-MIB
# Produced by pysmi-1.5.4 at Mon Oct 14 22:37:06 2024
# On host MacBook-Pro.local platform Darwin version 24.0.0 by user lextm
# Using Python version 3.12.0 (main, Nov 14 2023, 23:52:11) [Clang 15.0.0 (clang-1500.0.40.1)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint,
 ConstraintsUnion) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint",
    "ConstraintsUnion")

# Import SMI symbols from the MIBs this MIB depends on

(ModuleCompliance,
 NotificationGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup")

(Bits,
 Counter32,
 Counter64,
 Gauge32,
 Integer32,
 IpAddress,
 ModuleIdentity,
 MibIdentifier,
 NotificationType,
 ObjectIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 NotificationType,
 TimeTicks,
 Unsigned32,
 enterprises,
 iso) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Bits",
    "Counter32",
    "Counter64",
    "Gauge32",
    "Integer32",
    "IpAddress",
    "ModuleIdentity",
    "MibIdentifier",
    "NotificationType",
    "ObjectIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "NotificationType",
    "TimeTicks",
    "Unsigned32",
    "enterprises",
    "iso")

(DisplayString,
 PhysAddress,
 TextualConvention) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "DisplayString",
    "PhysAddress",
    "TextualConvention")


# MODULE-IDENTITY


# Types definitions


# TEXTUAL-CONVENTIONS



# MIB Managed Objects in the order of their OIDs

_Pce_ObjectIdentity = ObjectIdentity
pce = _Pce_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866)
)
_Products_ObjectIdentity = ObjectIdentity
products = _Products_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1)
)
_CompacV9toV11_ObjectIdentity = ObjectIdentity
compacV9toV11 = _CompacV9toV11_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 1)
)
_TransProduct_ObjectIdentity = ObjectIdentity
transProduct = _TransProduct_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 10)
)
_NetAccessProduct_ObjectIdentity = ObjectIdentity
netAccessProduct = _NetAccessProduct_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20)
)
_Adaptis_ObjectIdentity = ObjectIdentity
adaptis = _Adaptis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 10)
)
_Vpx10_ObjectIdentity = ObjectIdentity
vpx10 = _Vpx10_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 20)
)
_Vpx20_ObjectIdentity = ObjectIdentity
vpx20 = _Vpx20_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 21)
)
_Mcx103_ObjectIdentity = ObjectIdentity
mcx103 = _Mcx103_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 30)
)
_Mcx104_ObjectIdentity = ObjectIdentity
mcx104 = _Mcx104_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 31)
)
_AtLan_ObjectIdentity = ObjectIdentity
atLan = _AtLan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 40)
)
_Mcx300_ObjectIdentity = ObjectIdentity
mcx300 = _Mcx300_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 50)
)
_Frx300_ObjectIdentity = ObjectIdentity
frx300 = _Frx300_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 60)
)
_Vcx100_ObjectIdentity = ObjectIdentity
vcx100 = _Vcx100_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 90)
)
_Avb1002_EM_ObjectIdentity = ObjectIdentity
avb1002_EM = _Avb1002_EM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 200)
)
_Avb1002_FXS_FXO_ObjectIdentity = ObjectIdentity
avb1002_FXS_FXO = _Avb1002_FXS_FXO_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 201)
)
_Sc103_3W_ObjectIdentity = ObjectIdentity
sc103_3W = _Sc103_3W_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 210)
)
_Sc103_6W_ObjectIdentity = ObjectIdentity
sc103_6W = _Sc103_6W_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 211)
)
_Sc103_6W_M_ObjectIdentity = ObjectIdentity
sc103_6W_M = _Sc103_6W_M_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 212)
)
_Sc104_ObjectIdentity = ObjectIdentity
sc104 = _Sc104_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 220)
)
_Sc106_ObjectIdentity = ObjectIdentity
sc106 = _Sc106_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 225)
)
_Sc112_ObjectIdentity = ObjectIdentity
sc112 = _Sc112_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 226)
)
_Sc300_1W_1E_ObjectIdentity = ObjectIdentity
sc300_1W_1E = _Sc300_1W_1E_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 230)
)
_Sc300_3W_1E_ObjectIdentity = ObjectIdentity
sc300_3W_1E = _Sc300_3W_1E_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 231)
)
_Sc300_4W_ObjectIdentity = ObjectIdentity
sc300_4W = _Sc300_4W_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 232)
)
_Sc310_8W_ObjectIdentity = ObjectIdentity
sc310_8W = _Sc310_8W_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 240)
)
_Sc310_12W_ObjectIdentity = ObjectIdentity
sc310_12W = _Sc310_12W_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 241)
)
_Sc320_4W_1TR_ObjectIdentity = ObjectIdentity
sc320_4W_1TR = _Sc320_4W_1TR_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 250)
)
_Sc320_8W_1TR_ObjectIdentity = ObjectIdentity
sc320_8W_1TR = _Sc320_8W_1TR_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 251)
)
_Sc330_ObjectIdentity = ObjectIdentity
sc330 = _Sc330_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 254)
)
_Sc1200_ObjectIdentity = ObjectIdentity
sc1200 = _Sc1200_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 20, 255)
)
_NetConcentratorProduct_ObjectIdentity = ObjectIdentity
netConcentratorProduct = _NetConcentratorProduct_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 30)
)
_Mcx09_ObjectIdentity = ObjectIdentity
mcx09 = _Mcx09_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 30, 20)
)
_Mcx109_ObjectIdentity = ObjectIdentity
mcx109 = _Mcx109_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 30, 21)
)
_Mcx106_ObjectIdentity = ObjectIdentity
mcx106 = _Mcx106_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 30, 30)
)
_Mcx112_ObjectIdentity = ObjectIdentity
mcx112 = _Mcx112_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 30, 35)
)
_Mcx212_ObjectIdentity = ObjectIdentity
mcx212 = _Mcx212_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 30, 40)
)
_Mcx212Y_ObjectIdentity = ObjectIdentity
mcx212Y = _Mcx212Y_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 30, 41)
)
_Mcx512_ObjectIdentity = ObjectIdentity
mcx512 = _Mcx512_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 30, 45)
)
_Mcx512Y_ObjectIdentity = ObjectIdentity
mcx512Y = _Mcx512Y_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 30, 46)
)
_Lmx506_ObjectIdentity = ObjectIdentity
lmx506 = _Lmx506_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 30, 50)
)
_Frx800_ObjectIdentity = ObjectIdentity
frx800 = _Frx800_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 30, 60)
)
_Sc512_ObjectIdentity = ObjectIdentity
sc512 = _Sc512_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 30, 210)
)
_Sc512Y_ObjectIdentity = ObjectIdentity
sc512Y = _Sc512Y_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 30, 211)
)
_Hpb1025_8W_ObjectIdentity = ObjectIdentity
hpb1025_8W = _Hpb1025_8W_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 30, 220)
)
_Hpb1025_12W_ObjectIdentity = ObjectIdentity
hpb1025_12W = _Hpb1025_12W_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 30, 221)
)
_Spb1033_ObjectIdentity = ObjectIdentity
spb1033 = _Spb1033_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 30, 250)
)
_Dvb1008_ObjectIdentity = ObjectIdentity
dvb1008 = _Dvb1008_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 30, 270)
)
_NetBackboneProduct_ObjectIdentity = ObjectIdentity
netBackboneProduct = _NetBackboneProduct_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 40)
)
_Npx09_ObjectIdentity = ObjectIdentity
npx09 = _Npx09_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 40, 20)
)
_Npx90_ObjectIdentity = ObjectIdentity
npx90 = _Npx90_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 40, 21)
)
_Frx1000_ObjectIdentity = ObjectIdentity
frx1000 = _Frx1000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 40, 60)
)
_Frx2000_ObjectIdentity = ObjectIdentity
frx2000 = _Frx2000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 40, 65)
)
_Frx2000Y_ObjectIdentity = ObjectIdentity
frx2000Y = _Frx2000Y_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 40, 70)
)
_Mmx5000_ObjectIdentity = ObjectIdentity
mmx5000 = _Mmx5000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 40, 100)
)
_Mmx10000_ObjectIdentity = ObjectIdentity
mmx10000 = _Mmx10000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 40, 105)
)
_Sc5000_ObjectIdentity = ObjectIdentity
sc5000 = _Sc5000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 40, 200)
)
_NetCentralSiteProduct_ObjectIdentity = ObjectIdentity
netCentralSiteProduct = _NetCentralSiteProduct_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 50)
)
_Fpb2025_ObjectIdentity = ObjectIdentity
fpb2025 = _Fpb2025_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 50, 200)
)
_Rpb2025_ObjectIdentity = ObjectIdentity
rpb2025 = _Rpb2025_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 50, 201)
)
_Spb2033_ObjectIdentity = ObjectIdentity
spb2033 = _Spb2033_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 50, 250)
)
_Dvb2030_ObjectIdentity = ObjectIdentity
dvb2030 = _Dvb2030_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 1, 50, 270)
)
_Manager_ObjectIdentity = ObjectIdentity
manager = _Manager_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 2)
)
_NodeName_Type = DisplayString
_NodeName_Object = MibScalar
nodeName = _NodeName_Object(
    (1, 3, 6, 1, 4, 1, 866, 2, 1),
    _NodeName_Type()
)
nodeName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nodeName.setStatus("mandatory")


class _NodeStatus_Type(Integer32):
    """Custom type nodeStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("callForBackupAddress", 7),
          ("crippled", 4),
          ("functionOccupied", 6),
          ("inService", 1),
          ("notMonitored", 8),
          ("serviceInterrupted", 2),
          ("unknown", 3))
    )


_NodeStatus_Type.__name__ = "Integer32"
_NodeStatus_Object = MibScalar
nodeStatus = _NodeStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 2, 2),
    _NodeStatus_Type()
)
nodeStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    nodeStatus.setStatus("mandatory")
_PortLabel_Type = DisplayString
_PortLabel_Object = MibScalar
portLabel = _PortLabel_Object(
    (1, 3, 6, 1, 4, 1, 866, 2, 3),
    _PortLabel_Type()
)
portLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portLabel.setStatus("mandatory")
_PortNumber_Type = Integer32
_PortNumber_Object = MibScalar
portNumber = _PortNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 2, 4),
    _PortNumber_Type()
)
portNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portNumber.setStatus("mandatory")


class _PortStatus_Type(Integer32):
    """Custom type portStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              5,
              8)
        )
    )
    namedValues = NamedValues(
        *(("inService", 1),
          ("notMonitored", 8),
          ("serviceInterrupted", 2),
          ("shiftToPstn", 5),
          ("unknown", 3))
    )


_PortStatus_Type.__name__ = "Integer32"
_PortStatus_Object = MibScalar
portStatus = _PortStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 2, 5),
    _PortStatus_Type()
)
portStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portStatus.setStatus("mandatory")
_ChangeDescription_Type = DisplayString
_ChangeDescription_Object = MibScalar
changeDescription = _ChangeDescription_Object(
    (1, 3, 6, 1, 4, 1, 866, 2, 6),
    _ChangeDescription_Type()
)
changeDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    changeDescription.setStatus("mandatory")
_SystemDescription_ObjectIdentity = ObjectIdentity
systemDescription = _SystemDescription_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 3)
)
_Projects_ObjectIdentity = ObjectIdentity
projects = _Projects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 4)
)
_FrxSoftware_ObjectIdentity = ObjectIdentity
frxSoftware = _FrxSoftware_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20)
)
_FrxConfig_ObjectIdentity = ObjectIdentity
frxConfig = _FrxConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1)
)
_FcControl_ObjectIdentity = ObjectIdentity
fcControl = _FcControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1)
)


class _FcCtlConfigurationState_Type(Integer32):
    """Custom type fcCtlConfigurationState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              10,
              11,
              20,
              21)
        )
    )
    namedValues = NamedValues(
        *(("limitedReset", 10),
          ("loadingInProgress", 21),
          ("noChange", 1),
          ("notReady", 2),
          ("reboot", 11),
          ("savingInProgress", 20))
    )


_FcCtlConfigurationState_Type.__name__ = "Integer32"
_FcCtlConfigurationState_Object = MibScalar
fcCtlConfigurationState = _FcCtlConfigurationState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 1),
    _FcCtlConfigurationState_Type()
)
fcCtlConfigurationState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCtlConfigurationState.setStatus("mandatory")


class _FcCtlStateCheckingResults_Type(DisplayString):
    """Custom type fcCtlStateCheckingResults based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_FcCtlStateCheckingResults_Type.__name__ = "DisplayString"
_FcCtlStateCheckingResults_Object = MibScalar
fcCtlStateCheckingResults = _FcCtlStateCheckingResults_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 2),
    _FcCtlStateCheckingResults_Type()
)
fcCtlStateCheckingResults.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCtlStateCheckingResults.setStatus("mandatory")


class _FcCtlConfigurationCommand_Type(Integer32):
    """Custom type fcCtlConfigurationCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              5,
              6,
              7,
              10,
              20)
        )
    )
    namedValues = NamedValues(
        *(("check", 2),
          ("erase", 7),
          ("hotReset", 10),
          ("load", 5),
          ("ready", 1),
          ("reboot", 20),
          ("save", 6))
    )


_FcCtlConfigurationCommand_Type.__name__ = "Integer32"
_FcCtlConfigurationCommand_Object = MibScalar
fcCtlConfigurationCommand = _FcCtlConfigurationCommand_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 10),
    _FcCtlConfigurationCommand_Type()
)
fcCtlConfigurationCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcCtlConfigurationCommand.setStatus("mandatory")


class _FcCtlBootDevice_Type(Integer32):
    """Custom type fcCtlBootDevice based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("backupNvram", 2),
          ("normalNvram", 1),
          ("startCard", 3))
    )


_FcCtlBootDevice_Type.__name__ = "Integer32"
_FcCtlBootDevice_Object = MibScalar
fcCtlBootDevice = _FcCtlBootDevice_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 20),
    _FcCtlBootDevice_Type()
)
fcCtlBootDevice.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcCtlBootDevice.setStatus("mandatory")


class _FcCtlStorageDevice_Type(Integer32):
    """Custom type fcCtlStorageDevice based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("backupNvram", 2),
          ("flashMemory", 4),
          ("normalNvram", 1),
          ("startCard", 3))
    )


_FcCtlStorageDevice_Type.__name__ = "Integer32"
_FcCtlStorageDevice_Object = MibScalar
fcCtlStorageDevice = _FcCtlStorageDevice_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 21),
    _FcCtlStorageDevice_Type()
)
fcCtlStorageDevice.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcCtlStorageDevice.setStatus("mandatory")
_FcCtlAlteredLpTable_Object = MibTable
fcCtlAlteredLpTable = _FcCtlAlteredLpTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 30)
)
if mibBuilder.loadTexts:
    fcCtlAlteredLpTable.setStatus("mandatory")
_FcCtlAlteredLpEntry_Object = MibTableRow
fcCtlAlteredLpEntry = _FcCtlAlteredLpEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 30, 1)
)
fcCtlAlteredLpEntry.setIndexNames(
    (0, "PCE-MIB", "fcCtlAlteredLpId"),
)
if mibBuilder.loadTexts:
    fcCtlAlteredLpEntry.setStatus("mandatory")


class _FcCtlAlteredLpId_Type(Integer32):
    """Custom type fcCtlAlteredLpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FcCtlAlteredLpId_Type.__name__ = "Integer32"
_FcCtlAlteredLpId_Object = MibTableColumn
fcCtlAlteredLpId = _FcCtlAlteredLpId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 30, 1, 1),
    _FcCtlAlteredLpId_Type()
)
fcCtlAlteredLpId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCtlAlteredLpId.setStatus("mandatory")
_FcCtlAlteredDlciTable_Object = MibTable
fcCtlAlteredDlciTable = _FcCtlAlteredDlciTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 31)
)
if mibBuilder.loadTexts:
    fcCtlAlteredDlciTable.setStatus("mandatory")
_FcCtlAlteredDlciEntry_Object = MibTableRow
fcCtlAlteredDlciEntry = _FcCtlAlteredDlciEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 31, 1)
)
fcCtlAlteredDlciEntry.setIndexNames(
    (0, "PCE-MIB", "fcCtlAlteredDlciPpId"),
    (0, "PCE-MIB", "fcCtlAlteredDlciNum"),
)
if mibBuilder.loadTexts:
    fcCtlAlteredDlciEntry.setStatus("mandatory")


class _FcCtlAlteredDlciPpId_Type(Integer32):
    """Custom type fcCtlAlteredDlciPpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FcCtlAlteredDlciPpId_Type.__name__ = "Integer32"
_FcCtlAlteredDlciPpId_Object = MibTableColumn
fcCtlAlteredDlciPpId = _FcCtlAlteredDlciPpId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 31, 1, 1),
    _FcCtlAlteredDlciPpId_Type()
)
fcCtlAlteredDlciPpId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCtlAlteredDlciPpId.setStatus("mandatory")


class _FcCtlAlteredDlciNum_Type(Integer32):
    """Custom type fcCtlAlteredDlciNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1023),
    )


_FcCtlAlteredDlciNum_Type.__name__ = "Integer32"
_FcCtlAlteredDlciNum_Object = MibTableColumn
fcCtlAlteredDlciNum = _FcCtlAlteredDlciNum_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 31, 1, 2),
    _FcCtlAlteredDlciNum_Type()
)
fcCtlAlteredDlciNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCtlAlteredDlciNum.setStatus("mandatory")


class _FcCtlAlteredDlciState_Type(Integer32):
    """Custom type fcCtlAlteredDlciState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("added", 1),
          ("modified", 3),
          ("notchanged", 2),
          ("suppressed", 4))
    )


_FcCtlAlteredDlciState_Type.__name__ = "Integer32"
_FcCtlAlteredDlciState_Object = MibTableColumn
fcCtlAlteredDlciState = _FcCtlAlteredDlciState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 31, 1, 3),
    _FcCtlAlteredDlciState_Type()
)
fcCtlAlteredDlciState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcCtlAlteredDlciState.setStatus("mandatory")
_FcCtlAlteredIfTable_Object = MibTable
fcCtlAlteredIfTable = _FcCtlAlteredIfTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 32)
)
if mibBuilder.loadTexts:
    fcCtlAlteredIfTable.setStatus("mandatory")
_FcCtlAlteredIfEntry_Object = MibTableRow
fcCtlAlteredIfEntry = _FcCtlAlteredIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 32, 1)
)
fcCtlAlteredIfEntry.setIndexNames(
    (0, "PCE-MIB", "fcCtlAlteredIfId"),
)
if mibBuilder.loadTexts:
    fcCtlAlteredIfEntry.setStatus("mandatory")


class _FcCtlAlteredIfId_Type(Integer32):
    """Custom type fcCtlAlteredIfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FcCtlAlteredIfId_Type.__name__ = "Integer32"
_FcCtlAlteredIfId_Object = MibTableColumn
fcCtlAlteredIfId = _FcCtlAlteredIfId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 32, 1, 1),
    _FcCtlAlteredIfId_Type()
)
fcCtlAlteredIfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCtlAlteredIfId.setStatus("mandatory")
_FcCtlErrorTable_Object = MibTable
fcCtlErrorTable = _FcCtlErrorTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 40)
)
if mibBuilder.loadTexts:
    fcCtlErrorTable.setStatus("mandatory")
_FcCtlErrorEntry_Object = MibTableRow
fcCtlErrorEntry = _FcCtlErrorEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 40, 1)
)
fcCtlErrorEntry.setIndexNames(
    (0, "PCE-MIB", "fcCtlErrorIndex"),
)
if mibBuilder.loadTexts:
    fcCtlErrorEntry.setStatus("mandatory")


class _FcCtlErrorIndex_Type(Integer32):
    """Custom type fcCtlErrorIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_FcCtlErrorIndex_Type.__name__ = "Integer32"
_FcCtlErrorIndex_Object = MibTableColumn
fcCtlErrorIndex = _FcCtlErrorIndex_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 40, 1, 1),
    _FcCtlErrorIndex_Type()
)
fcCtlErrorIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCtlErrorIndex.setStatus("mandatory")


class _FcCtlErrorCode_Type(Integer32):
    """Custom type fcCtlErrorCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FcCtlErrorCode_Type.__name__ = "Integer32"
_FcCtlErrorCode_Object = MibTableColumn
fcCtlErrorCode = _FcCtlErrorCode_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 40, 1, 2),
    _FcCtlErrorCode_Type()
)
fcCtlErrorCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCtlErrorCode.setStatus("mandatory")


class _FcCtlErrorMessage_Type(DisplayString):
    """Custom type fcCtlErrorMessage based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_FcCtlErrorMessage_Type.__name__ = "DisplayString"
_FcCtlErrorMessage_Object = MibTableColumn
fcCtlErrorMessage = _FcCtlErrorMessage_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 40, 1, 3),
    _FcCtlErrorMessage_Type()
)
fcCtlErrorMessage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCtlErrorMessage.setStatus("mandatory")
_FcCtlErrorTime_Type = TimeTicks
_FcCtlErrorTime_Object = MibTableColumn
fcCtlErrorTime = _FcCtlErrorTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 40, 1, 4),
    _FcCtlErrorTime_Type()
)
fcCtlErrorTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCtlErrorTime.setStatus("mandatory")
_FcCtlHRCheckMessagesTable_Object = MibTable
fcCtlHRCheckMessagesTable = _FcCtlHRCheckMessagesTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 50)
)
if mibBuilder.loadTexts:
    fcCtlHRCheckMessagesTable.setStatus("mandatory")
_FcCtlHRCheckMessagesEntry_Object = MibTableRow
fcCtlHRCheckMessagesEntry = _FcCtlHRCheckMessagesEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 50, 1)
)
fcCtlHRCheckMessagesEntry.setIndexNames(
    (0, "PCE-MIB", "fcCtlHRCheckMsgIndex"),
)
if mibBuilder.loadTexts:
    fcCtlHRCheckMessagesEntry.setStatus("mandatory")


class _FcCtlHRCheckMsgIndex_Type(Integer32):
    """Custom type fcCtlHRCheckMsgIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_FcCtlHRCheckMsgIndex_Type.__name__ = "Integer32"
_FcCtlHRCheckMsgIndex_Object = MibTableColumn
fcCtlHRCheckMsgIndex = _FcCtlHRCheckMsgIndex_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 50, 1, 1),
    _FcCtlHRCheckMsgIndex_Type()
)
fcCtlHRCheckMsgIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCtlHRCheckMsgIndex.setStatus("mandatory")


class _FcCtlHRCheckMsgCode_Type(OctetString):
    """Custom type fcCtlHRCheckMsgCode based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_FcCtlHRCheckMsgCode_Type.__name__ = "OctetString"
_FcCtlHRCheckMsgCode_Object = MibTableColumn
fcCtlHRCheckMsgCode = _FcCtlHRCheckMsgCode_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 50, 1, 2),
    _FcCtlHRCheckMsgCode_Type()
)
fcCtlHRCheckMsgCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCtlHRCheckMsgCode.setStatus("mandatory")


class _FcCtlHRCheckMessage_Type(DisplayString):
    """Custom type fcCtlHRCheckMessage based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_FcCtlHRCheckMessage_Type.__name__ = "DisplayString"
_FcCtlHRCheckMessage_Object = MibTableColumn
fcCtlHRCheckMessage = _FcCtlHRCheckMessage_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 50, 1, 3),
    _FcCtlHRCheckMessage_Type()
)
fcCtlHRCheckMessage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcCtlHRCheckMessage.setStatus("mandatory")
_FcSystem_ObjectIdentity = ObjectIdentity
fcSystem = _FcSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 2)
)
_FcsConfigDescription_ObjectIdentity = ObjectIdentity
fcsConfigDescription = _FcsConfigDescription_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 1)
)


class _FcsConfigDescName_Type(DisplayString):
    """Custom type fcsConfigDescName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_FcsConfigDescName_Type.__name__ = "DisplayString"
_FcsConfigDescName_Object = MibScalar
fcsConfigDescName = _FcsConfigDescName_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 1, 1),
    _FcsConfigDescName_Type()
)
fcsConfigDescName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsConfigDescName.setStatus("mandatory")


class _FcsConfigDescAuthor_Type(DisplayString):
    """Custom type fcsConfigDescAuthor based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_FcsConfigDescAuthor_Type.__name__ = "DisplayString"
_FcsConfigDescAuthor_Object = MibScalar
fcsConfigDescAuthor = _FcsConfigDescAuthor_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 1, 2),
    _FcsConfigDescAuthor_Type()
)
fcsConfigDescAuthor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsConfigDescAuthor.setStatus("mandatory")


class _FcsConfigDescDate_Type(OctetString):
    """Custom type fcsConfigDescDate based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(3, 3),
    )


_FcsConfigDescDate_Type.__name__ = "OctetString"
_FcsConfigDescDate_Object = MibScalar
fcsConfigDescDate = _FcsConfigDescDate_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 1, 3),
    _FcsConfigDescDate_Type()
)
fcsConfigDescDate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsConfigDescDate.setStatus("mandatory")


class _FcsConfigDescVersion_Type(Integer32):
    """Custom type fcsConfigDescVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_FcsConfigDescVersion_Type.__name__ = "Integer32"
_FcsConfigDescVersion_Object = MibScalar
fcsConfigDescVersion = _FcsConfigDescVersion_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 1, 4),
    _FcsConfigDescVersion_Type()
)
fcsConfigDescVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsConfigDescVersion.setStatus("mandatory")
_FcsHardwareDescription_ObjectIdentity = ObjectIdentity
fcsHardwareDescription = _FcsHardwareDescription_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 2)
)


class _FcsHardDescReplicatedMode_Type(Integer32):
    """Custom type fcsHardDescReplicatedMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onThreeModules", 4),
          ("onTwoModules", 3))
    )


_FcsHardDescReplicatedMode_Type.__name__ = "Integer32"
_FcsHardDescReplicatedMode_Object = MibScalar
fcsHardDescReplicatedMode = _FcsHardDescReplicatedMode_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 2, 1),
    _FcsHardDescReplicatedMode_Type()
)
fcsHardDescReplicatedMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsHardDescReplicatedMode.setStatus("mandatory")
_FcsModuleTable_Object = MibTable
fcsModuleTable = _FcsModuleTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 5)
)
if mibBuilder.loadTexts:
    fcsModuleTable.setStatus("mandatory")
_FcsModuleEntry_Object = MibTableRow
fcsModuleEntry = _FcsModuleEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 5, 1)
)
fcsModuleEntry.setIndexNames(
    (0, "PCE-MIB", "fcsModuleId"),
)
if mibBuilder.loadTexts:
    fcsModuleEntry.setStatus("mandatory")


class _FcsModuleId_Type(Integer32):
    """Custom type fcsModuleId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_FcsModuleId_Type.__name__ = "Integer32"
_FcsModuleId_Object = MibTableColumn
fcsModuleId = _FcsModuleId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 5, 1, 1),
    _FcsModuleId_Type()
)
fcsModuleId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcsModuleId.setStatus("mandatory")


class _FcsModuleSubscriberNumber_Type(OctetString):
    """Custom type fcsModuleSubscriberNumber based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FcsModuleSubscriberNumber_Type.__name__ = "OctetString"
_FcsModuleSubscriberNumber_Object = MibTableColumn
fcsModuleSubscriberNumber = _FcsModuleSubscriberNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 5, 1, 2),
    _FcsModuleSubscriberNumber_Type()
)
fcsModuleSubscriberNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsModuleSubscriberNumber.setStatus("mandatory")


class _FcsModuleBridgeInit_Type(Integer32):
    """Custom type fcsModuleBridgeInit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcsModuleBridgeInit_Type.__name__ = "Integer32"
_FcsModuleBridgeInit_Object = MibTableColumn
fcsModuleBridgeInit = _FcsModuleBridgeInit_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 5, 1, 5),
    _FcsModuleBridgeInit_Type()
)
fcsModuleBridgeInit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsModuleBridgeInit.setStatus("mandatory")


class _FcsModuleIpxRouterInit_Type(Integer32):
    """Custom type fcsModuleIpxRouterInit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcsModuleIpxRouterInit_Type.__name__ = "Integer32"
_FcsModuleIpxRouterInit_Object = MibTableColumn
fcsModuleIpxRouterInit = _FcsModuleIpxRouterInit_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 5, 1, 6),
    _FcsModuleIpxRouterInit_Type()
)
fcsModuleIpxRouterInit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsModuleIpxRouterInit.setStatus("mandatory")


class _FcsModuleClnpRouterInit_Type(Integer32):
    """Custom type fcsModuleClnpRouterInit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcsModuleClnpRouterInit_Type.__name__ = "Integer32"
_FcsModuleClnpRouterInit_Object = MibTableColumn
fcsModuleClnpRouterInit = _FcsModuleClnpRouterInit_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 5, 1, 7),
    _FcsModuleClnpRouterInit_Type()
)
fcsModuleClnpRouterInit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsModuleClnpRouterInit.setStatus("mandatory")
_FcManagement_ObjectIdentity = ObjectIdentity
fcManagement = _FcManagement_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3)
)
_FcmManagementFunctions_ObjectIdentity = ObjectIdentity
fcmManagementFunctions = _FcmManagementFunctions_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1)
)
_FcmMgtFctActivationTable_Object = MibTable
fcmMgtFctActivationTable = _FcmMgtFctActivationTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 1)
)
if mibBuilder.loadTexts:
    fcmMgtFctActivationTable.setStatus("mandatory")
_FcmMgtFctActivationEntry_Object = MibTableRow
fcmMgtFctActivationEntry = _FcmMgtFctActivationEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 1, 1)
)
fcmMgtFctActivationEntry.setIndexNames(
    (0, "PCE-MIB", "fcmMgfActName"),
)
if mibBuilder.loadTexts:
    fcmMgtFctActivationEntry.setStatus("mandatory")


class _FcmMgfActName_Type(Integer32):
    """Custom type fcmMgfActName based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              8,
              10,
              11,
              12,
              17)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 8),
          ("billing", 11),
          ("exploitationAccess", 17),
          ("extendedStatistics", 12),
          ("fileTransfer", 5),
          ("observation", 2),
          ("outstandingEvents", 4),
          ("statistics", 3),
          ("telemaintenance", 6),
          ("trafficGeneration", 1),
          ("userInterface", 10))
    )


_FcmMgfActName_Type.__name__ = "Integer32"
_FcmMgfActName_Object = MibTableColumn
fcmMgfActName = _FcmMgfActName_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 1, 1, 1),
    _FcmMgfActName_Type()
)
fcmMgfActName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcmMgfActName.setStatus("mandatory")


class _FcmMgfActAdminStatus_Type(Integer32):
    """Custom type fcmMgfActAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcmMgfActAdminStatus_Type.__name__ = "Integer32"
_FcmMgfActAdminStatus_Object = MibTableColumn
fcmMgfActAdminStatus = _FcmMgfActAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 1, 1, 2),
    _FcmMgfActAdminStatus_Type()
)
fcmMgfActAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfActAdminStatus.setStatus("mandatory")


class _FcmMgfActPassword_Type(DisplayString):
    """Custom type fcmMgfActPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_FcmMgfActPassword_Type.__name__ = "DisplayString"
_FcmMgfActPassword_Object = MibTableColumn
fcmMgfActPassword = _FcmMgfActPassword_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 1, 1, 3),
    _FcmMgfActPassword_Type()
)
fcmMgfActPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfActPassword.setStatus("mandatory")
_FcmMgtFctParameters_ObjectIdentity = ObjectIdentity
fcmMgtFctParameters = _FcmMgtFctParameters_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2)
)


class _FcmMgfGeneratorCount_Type(Integer32):
    """Custom type fcmMgfGeneratorCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_FcmMgfGeneratorCount_Type.__name__ = "Integer32"
_FcmMgfGeneratorCount_Object = MibScalar
fcmMgfGeneratorCount = _FcmMgfGeneratorCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 1),
    _FcmMgfGeneratorCount_Type()
)
fcmMgfGeneratorCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfGeneratorCount.setStatus("mandatory")


class _FcmMgfGeneratorsAction_Type(Integer32):
    """Custom type fcmMgfGeneratorsAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("input", 2),
          ("output", 1))
    )


_FcmMgfGeneratorsAction_Type.__name__ = "Integer32"
_FcmMgfGeneratorsAction_Object = MibScalar
fcmMgfGeneratorsAction = _FcmMgfGeneratorsAction_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 2),
    _FcmMgfGeneratorsAction_Type()
)
fcmMgfGeneratorsAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfGeneratorsAction.setStatus("mandatory")


class _FcmMgfGeneratorsDelay_Type(Integer32):
    """Custom type fcmMgfGeneratorsDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 98),
    )


_FcmMgfGeneratorsDelay_Type.__name__ = "Integer32"
_FcmMgfGeneratorsDelay_Object = MibScalar
fcmMgfGeneratorsDelay = _FcmMgfGeneratorsDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 3),
    _FcmMgfGeneratorsDelay_Type()
)
fcmMgfGeneratorsDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfGeneratorsDelay.setStatus("mandatory")


class _FcmMgfAlarmsSubscriber1_Type(OctetString):
    """Custom type fcmMgfAlarmsSubscriber1 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FcmMgfAlarmsSubscriber1_Type.__name__ = "OctetString"
_FcmMgfAlarmsSubscriber1_Object = MibScalar
fcmMgfAlarmsSubscriber1 = _FcmMgfAlarmsSubscriber1_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 10),
    _FcmMgfAlarmsSubscriber1_Type()
)
fcmMgfAlarmsSubscriber1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfAlarmsSubscriber1.setStatus("mandatory")


class _FcmMgfAlarmsSubscriber2_Type(OctetString):
    """Custom type fcmMgfAlarmsSubscriber2 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FcmMgfAlarmsSubscriber2_Type.__name__ = "OctetString"
_FcmMgfAlarmsSubscriber2_Object = MibScalar
fcmMgfAlarmsSubscriber2 = _FcmMgfAlarmsSubscriber2_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 11),
    _FcmMgfAlarmsSubscriber2_Type()
)
fcmMgfAlarmsSubscriber2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfAlarmsSubscriber2.setStatus("mandatory")


class _FcmMgfStatSummingPeriod_Type(Integer32):
    """Custom type fcmMgfStatSummingPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 990),
    )


_FcmMgfStatSummingPeriod_Type.__name__ = "Integer32"
_FcmMgfStatSummingPeriod_Object = MibScalar
fcmMgfStatSummingPeriod = _FcmMgfStatSummingPeriod_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 20),
    _FcmMgfStatSummingPeriod_Type()
)
fcmMgfStatSummingPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfStatSummingPeriod.setStatus("mandatory")


class _FcmMgfStatBufferThreshold_Type(Integer32):
    """Custom type fcmMgfStatBufferThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FcmMgfStatBufferThreshold_Type.__name__ = "Integer32"
_FcmMgfStatBufferThreshold_Object = MibScalar
fcmMgfStatBufferThreshold = _FcmMgfStatBufferThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 21),
    _FcmMgfStatBufferThreshold_Type()
)
fcmMgfStatBufferThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfStatBufferThreshold.setStatus("mandatory")


class _FcmMgfStatThroughputSamplingPeriod_Type(Integer32):
    """Custom type fcmMgfStatThroughputSamplingPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 1800),
    )


_FcmMgfStatThroughputSamplingPeriod_Type.__name__ = "Integer32"
_FcmMgfStatThroughputSamplingPeriod_Object = MibScalar
fcmMgfStatThroughputSamplingPeriod = _FcmMgfStatThroughputSamplingPeriod_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 25),
    _FcmMgfStatThroughputSamplingPeriod_Type()
)
fcmMgfStatThroughputSamplingPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfStatThroughputSamplingPeriod.setStatus("mandatory")


class _FcmMgfStatOutputThreshold_Type(Integer32):
    """Custom type fcmMgfStatOutputThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FcmMgfStatOutputThreshold_Type.__name__ = "Integer32"
_FcmMgfStatOutputThreshold_Object = MibScalar
fcmMgfStatOutputThreshold = _FcmMgfStatOutputThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 26),
    _FcmMgfStatOutputThreshold_Type()
)
fcmMgfStatOutputThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfStatOutputThreshold.setStatus("mandatory")


class _FcmMgfStatInputThreshold_Type(Integer32):
    """Custom type fcmMgfStatInputThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FcmMgfStatInputThreshold_Type.__name__ = "Integer32"
_FcmMgfStatInputThreshold_Object = MibScalar
fcmMgfStatInputThreshold = _FcmMgfStatInputThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 27),
    _FcmMgfStatInputThreshold_Type()
)
fcmMgfStatInputThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfStatInputThreshold.setStatus("mandatory")


class _FcmMgfStatLogChannelSamplingPeriod_Type(Integer32):
    """Custom type fcmMgfStatLogChannelSamplingPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 1800),
    )


_FcmMgfStatLogChannelSamplingPeriod_Type.__name__ = "Integer32"
_FcmMgfStatLogChannelSamplingPeriod_Object = MibScalar
fcmMgfStatLogChannelSamplingPeriod = _FcmMgfStatLogChannelSamplingPeriod_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 30),
    _FcmMgfStatLogChannelSamplingPeriod_Type()
)
fcmMgfStatLogChannelSamplingPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfStatLogChannelSamplingPeriod.setStatus("mandatory")


class _FcmMgfStatLogChannelThreshold_Type(Integer32):
    """Custom type fcmMgfStatLogChannelThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FcmMgfStatLogChannelThreshold_Type.__name__ = "Integer32"
_FcmMgfStatLogChannelThreshold_Object = MibScalar
fcmMgfStatLogChannelThreshold = _FcmMgfStatLogChannelThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 31),
    _FcmMgfStatLogChannelThreshold_Type()
)
fcmMgfStatLogChannelThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfStatLogChannelThreshold.setStatus("mandatory")


class _FcmMgfConversionAimedPoint_Type(Integer32):
    """Custom type fcmMgfConversionAimedPoint based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcmMgfConversionAimedPoint_Type.__name__ = "Integer32"
_FcmMgfConversionAimedPoint_Object = MibScalar
fcmMgfConversionAimedPoint = _FcmMgfConversionAimedPoint_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 32),
    _FcmMgfConversionAimedPoint_Type()
)
fcmMgfConversionAimedPoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfConversionAimedPoint.setStatus("mandatory")


class _FcmMgfConversionIncomingCall_Type(Integer32):
    """Custom type fcmMgfConversionIncomingCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("calledAddress", 3),
          ("callingAddress", 2),
          ("callingAddressAndCalledAddress", 4),
          ("off", 1))
    )


_FcmMgfConversionIncomingCall_Type.__name__ = "Integer32"
_FcmMgfConversionIncomingCall_Object = MibScalar
fcmMgfConversionIncomingCall = _FcmMgfConversionIncomingCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 33),
    _FcmMgfConversionIncomingCall_Type()
)
fcmMgfConversionIncomingCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfConversionIncomingCall.setStatus("mandatory")


class _FcmMgfConversionOutgoingCall_Type(Integer32):
    """Custom type fcmMgfConversionOutgoingCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("calledAddress", 3),
          ("callingAddress", 2),
          ("callingAddressAndCalledAddress", 4),
          ("off", 1))
    )


_FcmMgfConversionOutgoingCall_Type.__name__ = "Integer32"
_FcmMgfConversionOutgoingCall_Object = MibScalar
fcmMgfConversionOutgoingCall = _FcmMgfConversionOutgoingCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 34),
    _FcmMgfConversionOutgoingCall_Type()
)
fcmMgfConversionOutgoingCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfConversionOutgoingCall.setStatus("mandatory")


class _FcmMgfConversionAddressCheck_Type(Integer32):
    """Custom type fcmMgfConversionAddressCheck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onIncomingCall", 2),
          ("onIncomingCallAndOutgoingCall", 4),
          ("onOutgoingCall", 3))
    )


_FcmMgfConversionAddressCheck_Type.__name__ = "Integer32"
_FcmMgfConversionAddressCheck_Object = MibScalar
fcmMgfConversionAddressCheck = _FcmMgfConversionAddressCheck_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 35),
    _FcmMgfConversionAddressCheck_Type()
)
fcmMgfConversionAddressCheck.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfConversionAddressCheck.setStatus("mandatory")


class _FcmMgfConvMultiCalledAddrInCall_Type(Integer32):
    """Custom type fcmMgfConvMultiCalledAddrInCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_FcmMgfConvMultiCalledAddrInCall_Type.__name__ = "Integer32"
_FcmMgfConvMultiCalledAddrInCall_Object = MibScalar
fcmMgfConvMultiCalledAddrInCall = _FcmMgfConvMultiCalledAddrInCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 36),
    _FcmMgfConvMultiCalledAddrInCall_Type()
)
fcmMgfConvMultiCalledAddrInCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfConvMultiCalledAddrInCall.setStatus("mandatory")


class _FcmMgfConvMultiCallingAddrInCall_Type(Integer32):
    """Custom type fcmMgfConvMultiCallingAddrInCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_FcmMgfConvMultiCallingAddrInCall_Type.__name__ = "Integer32"
_FcmMgfConvMultiCallingAddrInCall_Object = MibScalar
fcmMgfConvMultiCallingAddrInCall = _FcmMgfConvMultiCallingAddrInCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 37),
    _FcmMgfConvMultiCallingAddrInCall_Type()
)
fcmMgfConvMultiCallingAddrInCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfConvMultiCallingAddrInCall.setStatus("mandatory")


class _FcmMgfConvMultiCalledAddrOutCall_Type(Integer32):
    """Custom type fcmMgfConvMultiCalledAddrOutCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_FcmMgfConvMultiCalledAddrOutCall_Type.__name__ = "Integer32"
_FcmMgfConvMultiCalledAddrOutCall_Object = MibScalar
fcmMgfConvMultiCalledAddrOutCall = _FcmMgfConvMultiCalledAddrOutCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 38),
    _FcmMgfConvMultiCalledAddrOutCall_Type()
)
fcmMgfConvMultiCalledAddrOutCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfConvMultiCalledAddrOutCall.setStatus("mandatory")


class _FcmMgfConvMultiCallingAddrOutCall_Type(Integer32):
    """Custom type fcmMgfConvMultiCallingAddrOutCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_FcmMgfConvMultiCallingAddrOutCall_Type.__name__ = "Integer32"
_FcmMgfConvMultiCallingAddrOutCall_Object = MibScalar
fcmMgfConvMultiCallingAddrOutCall = _FcmMgfConvMultiCallingAddrOutCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 39),
    _FcmMgfConvMultiCallingAddrOutCall_Type()
)
fcmMgfConvMultiCallingAddrOutCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfConvMultiCallingAddrOutCall.setStatus("mandatory")


class _FcmMgfBISDNChannelOpening_Type(Integer32):
    """Custom type fcmMgfBISDNChannelOpening based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcmMgfBISDNChannelOpening_Type.__name__ = "Integer32"
_FcmMgfBISDNChannelOpening_Object = MibScalar
fcmMgfBISDNChannelOpening = _FcmMgfBISDNChannelOpening_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 40),
    _FcmMgfBISDNChannelOpening_Type()
)
fcmMgfBISDNChannelOpening.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfBISDNChannelOpening.setStatus("mandatory")


class _FcmMgfCallAcceptwithReverseCharging_Type(Integer32):
    """Custom type fcmMgfCallAcceptwithReverseCharging based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FcmMgfCallAcceptwithReverseCharging_Type.__name__ = "Integer32"
_FcmMgfCallAcceptwithReverseCharging_Object = MibScalar
fcmMgfCallAcceptwithReverseCharging = _FcmMgfCallAcceptwithReverseCharging_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 41),
    _FcmMgfCallAcceptwithReverseCharging_Type()
)
fcmMgfCallAcceptwithReverseCharging.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfCallAcceptwithReverseCharging.setStatus("mandatory")


class _FcmMgfClosedUserGroup_Type(Integer32):
    """Custom type fcmMgfClosedUserGroup based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("noCheck", 2),
          ("subscribe", 3),
          ("subscribeAndRemove", 4))
    )


_FcmMgfClosedUserGroup_Type.__name__ = "Integer32"
_FcmMgfClosedUserGroup_Object = MibScalar
fcmMgfClosedUserGroup = _FcmMgfClosedUserGroup_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 42),
    _FcmMgfClosedUserGroup_Type()
)
fcmMgfClosedUserGroup.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgfClosedUserGroup.setStatus("mandatory")
_FcmMgtFctCugTable_Object = MibTable
fcmMgtFctCugTable = _FcmMgtFctCugTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 3)
)
if mibBuilder.loadTexts:
    fcmMgtFctCugTable.setStatus("mandatory")
_FcmMgtFctCugEntry_Object = MibTableRow
fcmMgtFctCugEntry = _FcmMgtFctCugEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 3, 1)
)
fcmMgtFctCugEntry.setIndexNames(
    (0, "PCE-MIB", "fcmMgtFctCugFunctionId"),
    (0, "PCE-MIB", "fcmMgtFctCugGroupId"),
)
if mibBuilder.loadTexts:
    fcmMgtFctCugEntry.setStatus("mandatory")


class _FcmMgtFctCugFunctionId_Type(Integer32):
    """Custom type fcmMgtFctCugFunctionId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              7,
              8,
              10,
              11,
              14)
        )
    )
    namedValues = NamedValues(
        *(("alarm", 4),
          ("billing", 10),
          ("configuration", 8),
          ("extendedStatistics", 11),
          ("observation", 1),
          ("outstandingEvents", 3),
          ("pae", 14),
          ("statistics", 2),
          ("telemaintenance", 7),
          ("trafficGeneration", 5))
    )


_FcmMgtFctCugFunctionId_Type.__name__ = "Integer32"
_FcmMgtFctCugFunctionId_Object = MibTableColumn
fcmMgtFctCugFunctionId = _FcmMgtFctCugFunctionId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 3, 1, 1),
    _FcmMgtFctCugFunctionId_Type()
)
fcmMgtFctCugFunctionId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcmMgtFctCugFunctionId.setStatus("mandatory")


class _FcmMgtFctCugGroupId_Type(Integer32):
    """Custom type fcmMgtFctCugGroupId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_FcmMgtFctCugGroupId_Type.__name__ = "Integer32"
_FcmMgtFctCugGroupId_Object = MibTableColumn
fcmMgtFctCugGroupId = _FcmMgtFctCugGroupId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 3, 1, 2),
    _FcmMgtFctCugGroupId_Type()
)
fcmMgtFctCugGroupId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcmMgtFctCugGroupId.setStatus("mandatory")


class _FcmMgtFctCugClosedUserGroupExt_Type(Integer32):
    """Custom type fcmMgtFctCugClosedUserGroupExt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_FcmMgtFctCugClosedUserGroupExt_Type.__name__ = "Integer32"
_FcmMgtFctCugClosedUserGroupExt_Object = MibTableColumn
fcmMgtFctCugClosedUserGroupExt = _FcmMgtFctCugClosedUserGroupExt_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 3, 1, 3),
    _FcmMgtFctCugClosedUserGroupExt_Type()
)
fcmMgtFctCugClosedUserGroupExt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgtFctCugClosedUserGroupExt.setStatus("mandatory")


class _FcmMgtFctCugClosedUserGroupInt_Type(Integer32):
    """Custom type fcmMgtFctCugClosedUserGroupInt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_FcmMgtFctCugClosedUserGroupInt_Type.__name__ = "Integer32"
_FcmMgtFctCugClosedUserGroupInt_Object = MibTableColumn
fcmMgtFctCugClosedUserGroupInt = _FcmMgtFctCugClosedUserGroupInt_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 3, 1, 4),
    _FcmMgtFctCugClosedUserGroupInt_Type()
)
fcmMgtFctCugClosedUserGroupInt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgtFctCugClosedUserGroupInt.setStatus("mandatory")


class _FcmMgtFctCugChecking_Type(Integer32):
    """Custom type fcmMgtFctCugChecking based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("onIncomingCallAndOutgoingCall", 1),
          ("onOutgoingCall", 3))
    )


_FcmMgtFctCugChecking_Type.__name__ = "Integer32"
_FcmMgtFctCugChecking_Object = MibTableColumn
fcmMgtFctCugChecking = _FcmMgtFctCugChecking_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 3, 1, 5),
    _FcmMgtFctCugChecking_Type()
)
fcmMgtFctCugChecking.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmMgtFctCugChecking.setStatus("mandatory")
_FcmAlarms_ObjectIdentity = ObjectIdentity
fcmAlarms = _FcmAlarms_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2)
)
_FcmAlrmEventTable_Object = MibTable
fcmAlrmEventTable = _FcmAlrmEventTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 1)
)
if mibBuilder.loadTexts:
    fcmAlrmEventTable.setStatus("mandatory")
_FcmAlrmEventEntry_Object = MibTableRow
fcmAlrmEventEntry = _FcmAlrmEventEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 1, 1)
)
fcmAlrmEventEntry.setIndexNames(
    (0, "PCE-MIB", "fcmAlrmEvtFamilyId"),
)
if mibBuilder.loadTexts:
    fcmAlrmEventEntry.setStatus("mandatory")


class _FcmAlrmEvtFamilyId_Type(Integer32):
    """Custom type fcmAlrmEvtFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28)
        )
    )
    namedValues = NamedValues(
        *(("asynchronousCommandSyntax-07", 8),
          ("asynchronousProtocolLevel-06", 7),
          ("asynchronousSemanticLevel-08", 9),
          ("compressionProcedure-16", 23),
          ("configurationFunction-18", 25),
          ("dlcBscProcedure-0C", 13),
          ("dlcMtrFrad-15", 22),
          ("dlmFunction-17", 24),
          ("ethernetBridgeAndIpRouterFunctions-14", 21),
          ("frameRelaySna-1B", 28),
          ("isdnDChannelProcedure-12", 19),
          ("linePhysicalLevel-05", 6),
          ("lmiFunction-19", 26),
          ("management-01", 2),
          ("mlp-0D", 14),
          ("ppp-1A", 27),
          ("pstnProcedure-0E", 15),
          ("sdlcProcedure-09", 10),
          ("securizedVcEsv-0F", 16),
          ("securizedVcIr-11", 18),
          ("securizedVcN4-10", 17),
          ("synchronousLink-04", 5),
          ("synchronousSignalling-02", 3),
          ("troubleReport-00", 1),
          ("tvipFradBscProcedure-0B", 12),
          ("vipProcedure-0A", 11),
          ("x25SynchronousProcedure-03", 4),
          ("x29Rerouting-13", 20))
    )


_FcmAlrmEvtFamilyId_Type.__name__ = "Integer32"
_FcmAlrmEvtFamilyId_Object = MibTableColumn
fcmAlrmEvtFamilyId = _FcmAlrmEvtFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 1, 1, 1),
    _FcmAlrmEvtFamilyId_Type()
)
fcmAlrmEvtFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcmAlrmEvtFamilyId.setStatus("mandatory")


class _FcmAlrmEvtEventSelection_Type(Integer32):
    """Custom type fcmAlrmEvtEventSelection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("all", 2),
          ("mentioned", 1))
    )


_FcmAlrmEvtEventSelection_Type.__name__ = "Integer32"
_FcmAlrmEvtEventSelection_Object = MibTableColumn
fcmAlrmEvtEventSelection = _FcmAlrmEvtEventSelection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 1, 1, 2),
    _FcmAlrmEvtEventSelection_Type()
)
fcmAlrmEvtEventSelection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmAlrmEvtEventSelection.setStatus("mandatory")


class _FcmAlrmEvtEvent1_Type(OctetString):
    """Custom type fcmAlrmEvtEvent1 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FcmAlrmEvtEvent1_Type.__name__ = "OctetString"
_FcmAlrmEvtEvent1_Object = MibTableColumn
fcmAlrmEvtEvent1 = _FcmAlrmEvtEvent1_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 1, 1, 3),
    _FcmAlrmEvtEvent1_Type()
)
fcmAlrmEvtEvent1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmAlrmEvtEvent1.setStatus("mandatory")


class _FcmAlrmEvtEvent2_Type(OctetString):
    """Custom type fcmAlrmEvtEvent2 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FcmAlrmEvtEvent2_Type.__name__ = "OctetString"
_FcmAlrmEvtEvent2_Object = MibTableColumn
fcmAlrmEvtEvent2 = _FcmAlrmEvtEvent2_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 1, 1, 4),
    _FcmAlrmEvtEvent2_Type()
)
fcmAlrmEvtEvent2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmAlrmEvtEvent2.setStatus("mandatory")


class _FcmAlrmEvtEvent3_Type(OctetString):
    """Custom type fcmAlrmEvtEvent3 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FcmAlrmEvtEvent3_Type.__name__ = "OctetString"
_FcmAlrmEvtEvent3_Object = MibTableColumn
fcmAlrmEvtEvent3 = _FcmAlrmEvtEvent3_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 1, 1, 5),
    _FcmAlrmEvtEvent3_Type()
)
fcmAlrmEvtEvent3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmAlrmEvtEvent3.setStatus("mandatory")


class _FcmAlrmEvtEvent4_Type(OctetString):
    """Custom type fcmAlrmEvtEvent4 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FcmAlrmEvtEvent4_Type.__name__ = "OctetString"
_FcmAlrmEvtEvent4_Object = MibTableColumn
fcmAlrmEvtEvent4 = _FcmAlrmEvtEvent4_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 1, 1, 6),
    _FcmAlrmEvtEvent4_Type()
)
fcmAlrmEvtEvent4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmAlrmEvtEvent4.setStatus("mandatory")


class _FcmAlrmEvtEvent5_Type(OctetString):
    """Custom type fcmAlrmEvtEvent5 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FcmAlrmEvtEvent5_Type.__name__ = "OctetString"
_FcmAlrmEvtEvent5_Object = MibTableColumn
fcmAlrmEvtEvent5 = _FcmAlrmEvtEvent5_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 1, 1, 7),
    _FcmAlrmEvtEvent5_Type()
)
fcmAlrmEvtEvent5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmAlrmEvtEvent5.setStatus("mandatory")


class _FcmAlrmEvtEvent6_Type(OctetString):
    """Custom type fcmAlrmEvtEvent6 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FcmAlrmEvtEvent6_Type.__name__ = "OctetString"
_FcmAlrmEvtEvent6_Object = MibTableColumn
fcmAlrmEvtEvent6 = _FcmAlrmEvtEvent6_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 1, 1, 8),
    _FcmAlrmEvtEvent6_Type()
)
fcmAlrmEvtEvent6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmAlrmEvtEvent6.setStatus("mandatory")


class _FcmAlrmEvtEvent7_Type(OctetString):
    """Custom type fcmAlrmEvtEvent7 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FcmAlrmEvtEvent7_Type.__name__ = "OctetString"
_FcmAlrmEvtEvent7_Object = MibTableColumn
fcmAlrmEvtEvent7 = _FcmAlrmEvtEvent7_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 1, 1, 9),
    _FcmAlrmEvtEvent7_Type()
)
fcmAlrmEvtEvent7.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmAlrmEvtEvent7.setStatus("mandatory")
_FcmAlrmPhysPortTable_Object = MibTable
fcmAlrmPhysPortTable = _FcmAlrmPhysPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 2)
)
if mibBuilder.loadTexts:
    fcmAlrmPhysPortTable.setStatus("mandatory")
_FcmAlrmPhysPortEntry_Object = MibTableRow
fcmAlrmPhysPortEntry = _FcmAlrmPhysPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 2, 1)
)
fcmAlrmPhysPortEntry.setIndexNames(
    (0, "PCE-MIB", "fcmAlrmPpFamilyId"),
)
if mibBuilder.loadTexts:
    fcmAlrmPhysPortEntry.setStatus("mandatory")


class _FcmAlrmPpFamilyId_Type(Integer32):
    """Custom type fcmAlrmPpFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              19,
              22,
              23,
              24,
              25,
              26,
              27,
              28)
        )
    )
    namedValues = NamedValues(
        *(("asynchronousCommandSyntax-07", 8),
          ("asynchronousProtocolLevel-06", 7),
          ("asynchronousSemanticLevel-08", 9),
          ("compressionProcedure-16", 23),
          ("configurationFunction-18", 25),
          ("dlcBscProcedure-0C", 13),
          ("dlcMtrFrad-15", 22),
          ("dlmFunction-17", 24),
          ("frameRelaySna-1B", 28),
          ("isdnDChannelProcedure-12", 19),
          ("linePhysicalLevel-05", 6),
          ("lmiFunction-19", 26),
          ("management-01", 2),
          ("mlp-0D", 14),
          ("ppp-1A", 27),
          ("pstnProcedure-0E", 15),
          ("sdlcProcedure-09", 10),
          ("synchronousLink-04", 5),
          ("synchronousSignalling-02", 3),
          ("troubleReport-00", 1),
          ("tvipFradBscProcedure-0B", 12),
          ("vipProcedure-0A", 11),
          ("x25SynchronousProcedure-03", 4))
    )


_FcmAlrmPpFamilyId_Type.__name__ = "Integer32"
_FcmAlrmPpFamilyId_Object = MibTableColumn
fcmAlrmPpFamilyId = _FcmAlrmPpFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 2, 1, 1),
    _FcmAlrmPpFamilyId_Type()
)
fcmAlrmPpFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcmAlrmPpFamilyId.setStatus("mandatory")


class _FcmAlrmPpPhysPortSelection_Type(Integer32):
    """Custom type fcmAlrmPpPhysPortSelection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("allExceptMentioned", 2),
          ("mentioned", 1))
    )


_FcmAlrmPpPhysPortSelection_Type.__name__ = "Integer32"
_FcmAlrmPpPhysPortSelection_Object = MibTableColumn
fcmAlrmPpPhysPortSelection = _FcmAlrmPpPhysPortSelection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 2, 1, 2),
    _FcmAlrmPpPhysPortSelection_Type()
)
fcmAlrmPpPhysPortSelection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmAlrmPpPhysPortSelection.setStatus("mandatory")


class _FcmAlrmPpPhysPort1_Type(Integer32):
    """Custom type fcmAlrmPpPhysPort1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcmAlrmPpPhysPort1_Type.__name__ = "Integer32"
_FcmAlrmPpPhysPort1_Object = MibTableColumn
fcmAlrmPpPhysPort1 = _FcmAlrmPpPhysPort1_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 2, 1, 3),
    _FcmAlrmPpPhysPort1_Type()
)
fcmAlrmPpPhysPort1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmAlrmPpPhysPort1.setStatus("mandatory")


class _FcmAlrmPpPhysPort2_Type(Integer32):
    """Custom type fcmAlrmPpPhysPort2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcmAlrmPpPhysPort2_Type.__name__ = "Integer32"
_FcmAlrmPpPhysPort2_Object = MibTableColumn
fcmAlrmPpPhysPort2 = _FcmAlrmPpPhysPort2_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 2, 1, 4),
    _FcmAlrmPpPhysPort2_Type()
)
fcmAlrmPpPhysPort2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmAlrmPpPhysPort2.setStatus("mandatory")


class _FcmAlrmPpPhysPort3_Type(Integer32):
    """Custom type fcmAlrmPpPhysPort3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcmAlrmPpPhysPort3_Type.__name__ = "Integer32"
_FcmAlrmPpPhysPort3_Object = MibTableColumn
fcmAlrmPpPhysPort3 = _FcmAlrmPpPhysPort3_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 2, 1, 5),
    _FcmAlrmPpPhysPort3_Type()
)
fcmAlrmPpPhysPort3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmAlrmPpPhysPort3.setStatus("mandatory")


class _FcmAlrmPpPhysPort4_Type(Integer32):
    """Custom type fcmAlrmPpPhysPort4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcmAlrmPpPhysPort4_Type.__name__ = "Integer32"
_FcmAlrmPpPhysPort4_Object = MibTableColumn
fcmAlrmPpPhysPort4 = _FcmAlrmPpPhysPort4_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 2, 1, 6),
    _FcmAlrmPpPhysPort4_Type()
)
fcmAlrmPpPhysPort4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmAlrmPpPhysPort4.setStatus("mandatory")


class _FcmAlrmPpPhysPort5_Type(Integer32):
    """Custom type fcmAlrmPpPhysPort5 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcmAlrmPpPhysPort5_Type.__name__ = "Integer32"
_FcmAlrmPpPhysPort5_Object = MibTableColumn
fcmAlrmPpPhysPort5 = _FcmAlrmPpPhysPort5_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 2, 1, 7),
    _FcmAlrmPpPhysPort5_Type()
)
fcmAlrmPpPhysPort5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmAlrmPpPhysPort5.setStatus("mandatory")


class _FcmAlrmPpPhysPort6_Type(Integer32):
    """Custom type fcmAlrmPpPhysPort6 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcmAlrmPpPhysPort6_Type.__name__ = "Integer32"
_FcmAlrmPpPhysPort6_Object = MibTableColumn
fcmAlrmPpPhysPort6 = _FcmAlrmPpPhysPort6_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 2, 1, 8),
    _FcmAlrmPpPhysPort6_Type()
)
fcmAlrmPpPhysPort6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmAlrmPpPhysPort6.setStatus("mandatory")


class _FcmAlrmPpPhysPort7_Type(Integer32):
    """Custom type fcmAlrmPpPhysPort7 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcmAlrmPpPhysPort7_Type.__name__ = "Integer32"
_FcmAlrmPpPhysPort7_Object = MibTableColumn
fcmAlrmPpPhysPort7 = _FcmAlrmPpPhysPort7_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 2, 1, 9),
    _FcmAlrmPpPhysPort7_Type()
)
fcmAlrmPpPhysPort7.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcmAlrmPpPhysPort7.setStatus("mandatory")
_FcInterfaces_ObjectIdentity = ObjectIdentity
fcInterfaces = _FcInterfaces_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10)
)
_FcfPhysicalPortTable_Object = MibTable
fcfPhysicalPortTable = _FcfPhysicalPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 1)
)
if mibBuilder.loadTexts:
    fcfPhysicalPortTable.setStatus("mandatory")
_FcfPhysicalPortEntry_Object = MibTableRow
fcfPhysicalPortEntry = _FcfPhysicalPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 1, 1)
)
fcfPhysicalPortEntry.setIndexNames(
    (0, "PCE-MIB", "fcfPhysPortId"),
)
if mibBuilder.loadTexts:
    fcfPhysicalPortEntry.setStatus("mandatory")


class _FcfPhysPortId_Type(Integer32):
    """Custom type fcfPhysPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 36),
    )


_FcfPhysPortId_Type.__name__ = "Integer32"
_FcfPhysPortId_Object = MibTableColumn
fcfPhysPortId = _FcfPhysPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 1, 1, 1),
    _FcfPhysPortId_Type()
)
fcfPhysPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfPhysPortId.setStatus("mandatory")


class _FcfPhysPortConnector_Type(Integer32):
    """Custom type fcfPhysPortConnector based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("db25orRj45", 2),
          ("db9orRj45", 4),
          ("ethernet", 1),
          ("link", 3))
    )


_FcfPhysPortConnector_Type.__name__ = "Integer32"
_FcfPhysPortConnector_Object = MibTableColumn
fcfPhysPortConnector = _FcfPhysPortConnector_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 1, 1, 2),
    _FcfPhysPortConnector_Type()
)
fcfPhysPortConnector.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfPhysPortConnector.setStatus("mandatory")


class _FcfInterfaceType_Type(Integer32):
    """Custom type fcfInterfaceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("ds1", 10),
          ("e1", 9),
          ("ethernet10baseT", 3),
          ("ethernetAui", 4),
          ("ethernetAuto", 2),
          ("interUnitLinks", 8),
          ("isdnBChannel", 6),
          ("isdnDChannel", 7),
          ("isdnPri", 11),
          ("line", 5),
          ("lineorB", 12),
          ("tokenRing", 13),
          ("unUsed", 1))
    )


_FcfInterfaceType_Type.__name__ = "Integer32"
_FcfInterfaceType_Object = MibTableColumn
fcfInterfaceType = _FcfInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 1, 1, 3),
    _FcfInterfaceType_Type()
)
fcfInterfaceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfInterfaceType.setStatus("mandatory")
_FcfLines_ObjectIdentity = ObjectIdentity
fcfLines = _FcfLines_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2)
)
_FcfLineTable_Object = MibTable
fcfLineTable = _FcfLineTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 1)
)
if mibBuilder.loadTexts:
    fcfLineTable.setStatus("mandatory")
_FcfLineEntry_Object = MibTableRow
fcfLineEntry = _FcfLineEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 1, 1)
)
fcfLineEntry.setIndexNames(
    (0, "PCE-MIB", "fcfLineInterfaceId"),
)
if mibBuilder.loadTexts:
    fcfLineEntry.setStatus("mandatory")


class _FcfLineInterfaceId_Type(Integer32):
    """Custom type fcfLineInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcfLineInterfaceId_Type.__name__ = "Integer32"
_FcfLineInterfaceId_Object = MibTableColumn
fcfLineInterfaceId = _FcfLineInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 1, 1, 1),
    _FcfLineInterfaceId_Type()
)
fcfLineInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfLineInterfaceId.setStatus("mandatory")


class _FcfLineType_Type(Integer32):
    """Custom type fcfLineType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("asynchroneV28Dce", 4),
          ("asynchroneV28Dte", 3),
          ("g703", 9),
          ("synchroneV28Dce", 2),
          ("synchroneV28Dte", 1),
          ("v11Dce", 6),
          ("v11Dte", 5),
          ("v35Dce", 8),
          ("v35Dte", 7))
    )


_FcfLineType_Type.__name__ = "Integer32"
_FcfLineType_Object = MibTableColumn
fcfLineType = _FcfLineType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 1, 1, 2),
    _FcfLineType_Type()
)
fcfLineType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineType.setStatus("mandatory")


class _FcfLineModemManagement_Type(Integer32):
    """Custom type fcfLineModemManagement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcfLineModemManagement_Type.__name__ = "Integer32"
_FcfLineModemManagement_Object = MibTableColumn
fcfLineModemManagement = _FcfLineModemManagement_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 1, 1, 3),
    _FcfLineModemManagement_Type()
)
fcfLineModemManagement.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineModemManagement.setStatus("mandatory")


class _FcfLineSpeed_Type(Integer32):
    """Custom type fcfLineSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26)
        )
    )
    namedValues = NamedValues(
        *(("s1024000", 21),
          ("s115200", 25),
          ("s1200", 3),
          ("s128000", 17),
          ("s14400", 9),
          ("s144000", 18),
          ("s19200", 11),
          ("s2048000", 22),
          ("s2400", 6),
          ("s256000", 19),
          ("s28800", 26),
          ("s300", 23),
          ("s3200", 7),
          ("s38400", 12),
          ("s4800", 8),
          ("s48000", 13),
          ("s512000", 20),
          ("s56000", 14),
          ("s57600", 24),
          ("s600", 2),
          ("s64000", 15),
          ("s72000", 16),
          ("s9600", 10))
    )


_FcfLineSpeed_Type.__name__ = "Integer32"
_FcfLineSpeed_Object = MibTableColumn
fcfLineSpeed = _FcfLineSpeed_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 1, 1, 4),
    _FcfLineSpeed_Type()
)
fcfLineSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineSpeed.setStatus("mandatory")


class _FcfLineLinkCheckPeriod_Type(Integer32):
    """Custom type fcfLineLinkCheckPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(200, 50800),
    )


_FcfLineLinkCheckPeriod_Type.__name__ = "Integer32"
_FcfLineLinkCheckPeriod_Object = MibTableColumn
fcfLineLinkCheckPeriod = _FcfLineLinkCheckPeriod_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 1, 1, 5),
    _FcfLineLinkCheckPeriod_Type()
)
fcfLineLinkCheckPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineLinkCheckPeriod.setStatus("mandatory")


class _FcfLineCheckPeriodCount_Type(Integer32):
    """Custom type fcfLineCheckPeriodCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 250),
    )


_FcfLineCheckPeriodCount_Type.__name__ = "Integer32"
_FcfLineCheckPeriodCount_Object = MibTableColumn
fcfLineCheckPeriodCount = _FcfLineCheckPeriodCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 1, 1, 6),
    _FcfLineCheckPeriodCount_Type()
)
fcfLineCheckPeriodCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineCheckPeriodCount.setStatus("mandatory")
_FcfLineV28AsynOutDteSignalTable_Object = MibTable
fcfLineV28AsynOutDteSignalTable = _FcfLineV28AsynOutDteSignalTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 5)
)
if mibBuilder.loadTexts:
    fcfLineV28AsynOutDteSignalTable.setStatus("mandatory")
_FcfLineV28AsynOutDteSignalEntry_Object = MibTableRow
fcfLineV28AsynOutDteSignalEntry = _FcfLineV28AsynOutDteSignalEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 5, 1)
)
fcfLineV28AsynOutDteSignalEntry.setIndexNames(
    (0, "PCE-MIB", "fcfLineV28AsynOutDteInterfaceId"),
)
if mibBuilder.loadTexts:
    fcfLineV28AsynOutDteSignalEntry.setStatus("mandatory")


class _FcfLineV28AsynOutDteInterfaceId_Type(Integer32):
    """Custom type fcfLineV28AsynOutDteInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcfLineV28AsynOutDteInterfaceId_Type.__name__ = "Integer32"
_FcfLineV28AsynOutDteInterfaceId_Object = MibTableColumn
fcfLineV28AsynOutDteInterfaceId = _FcfLineV28AsynOutDteInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 5, 1, 1),
    _FcfLineV28AsynOutDteInterfaceId_Type()
)
fcfLineV28AsynOutDteInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfLineV28AsynOutDteInterfaceId.setStatus("mandatory")


class _FcfLineV28AsynOutDteRts105_Type(Integer32):
    """Custom type fcfLineV28AsynOutDteRts105 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcfLineV28AsynOutDteRts105_Type.__name__ = "Integer32"
_FcfLineV28AsynOutDteRts105_Object = MibTableColumn
fcfLineV28AsynOutDteRts105 = _FcfLineV28AsynOutDteRts105_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 5, 1, 2),
    _FcfLineV28AsynOutDteRts105_Type()
)
fcfLineV28AsynOutDteRts105.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28AsynOutDteRts105.setStatus("mandatory")


class _FcfLineV28AsynOutDteDtr108_Type(Integer32):
    """Custom type fcfLineV28AsynOutDteDtr108 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcfLineV28AsynOutDteDtr108_Type.__name__ = "Integer32"
_FcfLineV28AsynOutDteDtr108_Object = MibTableColumn
fcfLineV28AsynOutDteDtr108 = _FcfLineV28AsynOutDteDtr108_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 5, 1, 3),
    _FcfLineV28AsynOutDteDtr108_Type()
)
fcfLineV28AsynOutDteDtr108.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28AsynOutDteDtr108.setStatus("mandatory")


class _FcfLineV28AsynOutDteDrs111_Type(Integer32):
    """Custom type fcfLineV28AsynOutDteDrs111 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcfLineV28AsynOutDteDrs111_Type.__name__ = "Integer32"
_FcfLineV28AsynOutDteDrs111_Object = MibTableColumn
fcfLineV28AsynOutDteDrs111 = _FcfLineV28AsynOutDteDrs111_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 5, 1, 4),
    _FcfLineV28AsynOutDteDrs111_Type()
)
fcfLineV28AsynOutDteDrs111.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28AsynOutDteDrs111.setStatus("mandatory")


class _FcfLineV28AsynOutDteRil140_Type(Integer32):
    """Custom type fcfLineV28AsynOutDteRil140 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcfLineV28AsynOutDteRil140_Type.__name__ = "Integer32"
_FcfLineV28AsynOutDteRil140_Object = MibTableColumn
fcfLineV28AsynOutDteRil140 = _FcfLineV28AsynOutDteRil140_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 5, 1, 5),
    _FcfLineV28AsynOutDteRil140_Type()
)
fcfLineV28AsynOutDteRil140.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28AsynOutDteRil140.setStatus("mandatory")


class _FcfLineV28AsynOutDteLl141_Type(Integer32):
    """Custom type fcfLineV28AsynOutDteLl141 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcfLineV28AsynOutDteLl141_Type.__name__ = "Integer32"
_FcfLineV28AsynOutDteLl141_Object = MibTableColumn
fcfLineV28AsynOutDteLl141 = _FcfLineV28AsynOutDteLl141_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 5, 1, 6),
    _FcfLineV28AsynOutDteLl141_Type()
)
fcfLineV28AsynOutDteLl141.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28AsynOutDteLl141.setStatus("mandatory")
_FcfLineV28AsynOutDceSignalTable_Object = MibTable
fcfLineV28AsynOutDceSignalTable = _FcfLineV28AsynOutDceSignalTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 6)
)
if mibBuilder.loadTexts:
    fcfLineV28AsynOutDceSignalTable.setStatus("mandatory")
_FcfLineV28AsynOutDceSignalEntry_Object = MibTableRow
fcfLineV28AsynOutDceSignalEntry = _FcfLineV28AsynOutDceSignalEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 6, 1)
)
fcfLineV28AsynOutDceSignalEntry.setIndexNames(
    (0, "PCE-MIB", "fcfLineV28AsynOutDceInterfaceId"),
)
if mibBuilder.loadTexts:
    fcfLineV28AsynOutDceSignalEntry.setStatus("mandatory")


class _FcfLineV28AsynOutDceInterfaceId_Type(Integer32):
    """Custom type fcfLineV28AsynOutDceInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcfLineV28AsynOutDceInterfaceId_Type.__name__ = "Integer32"
_FcfLineV28AsynOutDceInterfaceId_Object = MibTableColumn
fcfLineV28AsynOutDceInterfaceId = _FcfLineV28AsynOutDceInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 6, 1, 1),
    _FcfLineV28AsynOutDceInterfaceId_Type()
)
fcfLineV28AsynOutDceInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfLineV28AsynOutDceInterfaceId.setStatus("mandatory")


class _FcfLineV28AsynOutDceCts106_Type(Integer32):
    """Custom type fcfLineV28AsynOutDceCts106 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcfLineV28AsynOutDceCts106_Type.__name__ = "Integer32"
_FcfLineV28AsynOutDceCts106_Object = MibTableColumn
fcfLineV28AsynOutDceCts106 = _FcfLineV28AsynOutDceCts106_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 6, 1, 2),
    _FcfLineV28AsynOutDceCts106_Type()
)
fcfLineV28AsynOutDceCts106.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28AsynOutDceCts106.setStatus("mandatory")


class _FcfLineV28AsynOutDceDsr107_Type(Integer32):
    """Custom type fcfLineV28AsynOutDceDsr107 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcfLineV28AsynOutDceDsr107_Type.__name__ = "Integer32"
_FcfLineV28AsynOutDceDsr107_Object = MibTableColumn
fcfLineV28AsynOutDceDsr107 = _FcfLineV28AsynOutDceDsr107_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 6, 1, 3),
    _FcfLineV28AsynOutDceDsr107_Type()
)
fcfLineV28AsynOutDceDsr107.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28AsynOutDceDsr107.setStatus("mandatory")


class _FcfLineV28AsynOutDceDcd109_Type(Integer32):
    """Custom type fcfLineV28AsynOutDceDcd109 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcfLineV28AsynOutDceDcd109_Type.__name__ = "Integer32"
_FcfLineV28AsynOutDceDcd109_Object = MibTableColumn
fcfLineV28AsynOutDceDcd109 = _FcfLineV28AsynOutDceDcd109_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 6, 1, 4),
    _FcfLineV28AsynOutDceDcd109_Type()
)
fcfLineV28AsynOutDceDcd109.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28AsynOutDceDcd109.setStatus("mandatory")


class _FcfLineV28AsynOutDceSi117_Type(Integer32):
    """Custom type fcfLineV28AsynOutDceSi117 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcfLineV28AsynOutDceSi117_Type.__name__ = "Integer32"
_FcfLineV28AsynOutDceSi117_Object = MibTableColumn
fcfLineV28AsynOutDceSi117 = _FcfLineV28AsynOutDceSi117_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 6, 1, 5),
    _FcfLineV28AsynOutDceSi117_Type()
)
fcfLineV28AsynOutDceSi117.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28AsynOutDceSi117.setStatus("mandatory")


class _FcfLineV28AsynOutDceTi142_Type(Integer32):
    """Custom type fcfLineV28AsynOutDceTi142 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcfLineV28AsynOutDceTi142_Type.__name__ = "Integer32"
_FcfLineV28AsynOutDceTi142_Object = MibTableColumn
fcfLineV28AsynOutDceTi142 = _FcfLineV28AsynOutDceTi142_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 6, 1, 6),
    _FcfLineV28AsynOutDceTi142_Type()
)
fcfLineV28AsynOutDceTi142.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28AsynOutDceTi142.setStatus("mandatory")
_FcfLineV28AsynInDteSignalTable_Object = MibTable
fcfLineV28AsynInDteSignalTable = _FcfLineV28AsynInDteSignalTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 7)
)
if mibBuilder.loadTexts:
    fcfLineV28AsynInDteSignalTable.setStatus("mandatory")
_FcfLineV28AsynInDteSignalEntry_Object = MibTableRow
fcfLineV28AsynInDteSignalEntry = _FcfLineV28AsynInDteSignalEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 7, 1)
)
fcfLineV28AsynInDteSignalEntry.setIndexNames(
    (0, "PCE-MIB", "fcfLineV28AsynInDteInterfaceId"),
)
if mibBuilder.loadTexts:
    fcfLineV28AsynInDteSignalEntry.setStatus("mandatory")


class _FcfLineV28AsynInDteInterfaceId_Type(Integer32):
    """Custom type fcfLineV28AsynInDteInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcfLineV28AsynInDteInterfaceId_Type.__name__ = "Integer32"
_FcfLineV28AsynInDteInterfaceId_Object = MibTableColumn
fcfLineV28AsynInDteInterfaceId = _FcfLineV28AsynInDteInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 7, 1, 1),
    _FcfLineV28AsynInDteInterfaceId_Type()
)
fcfLineV28AsynInDteInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfLineV28AsynInDteInterfaceId.setStatus("mandatory")


class _FcfLineV28AsynInDteEnablingSig1_Type(Integer32):
    """Custom type fcfLineV28AsynInDteEnablingSig1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              9,
              10,
              33,
              34,
              41,
              42)
        )
    )
    namedValues = NamedValues(
        *(("cts106", 33),
          ("cts106-dcd109", 41),
          ("cts106-dsr107", 34),
          ("cts106-dsr107-dcd109", 42),
          ("dcd109", 9),
          ("dsr107", 2),
          ("dsr107-dcd109", 10),
          ("none", 1))
    )


_FcfLineV28AsynInDteEnablingSig1_Type.__name__ = "Integer32"
_FcfLineV28AsynInDteEnablingSig1_Object = MibTableColumn
fcfLineV28AsynInDteEnablingSig1 = _FcfLineV28AsynInDteEnablingSig1_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 7, 1, 2),
    _FcfLineV28AsynInDteEnablingSig1_Type()
)
fcfLineV28AsynInDteEnablingSig1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28AsynInDteEnablingSig1.setStatus("mandatory")


class _FcfLineV28AsynInDteEnablingSig2_Type(Integer32):
    """Custom type fcfLineV28AsynInDteEnablingSig2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              5)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("si117", 5),
          ("ti142", 3))
    )


_FcfLineV28AsynInDteEnablingSig2_Type.__name__ = "Integer32"
_FcfLineV28AsynInDteEnablingSig2_Object = MibTableColumn
fcfLineV28AsynInDteEnablingSig2 = _FcfLineV28AsynInDteEnablingSig2_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 7, 1, 3),
    _FcfLineV28AsynInDteEnablingSig2_Type()
)
fcfLineV28AsynInDteEnablingSig2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28AsynInDteEnablingSig2.setStatus("mandatory")


class _FcfLineV28AsynInDteSigMonitored1_Type(Integer32):
    """Custom type fcfLineV28AsynInDteSigMonitored1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              9,
              10,
              33,
              34,
              41,
              42)
        )
    )
    namedValues = NamedValues(
        *(("cts106", 33),
          ("cts106-dcd109", 41),
          ("cts106-dsr107", 34),
          ("cts106-dsr107-dcd109", 42),
          ("dcd109", 9),
          ("dsr107", 2),
          ("dsr107-dcd109", 10),
          ("none", 1))
    )


_FcfLineV28AsynInDteSigMonitored1_Type.__name__ = "Integer32"
_FcfLineV28AsynInDteSigMonitored1_Object = MibTableColumn
fcfLineV28AsynInDteSigMonitored1 = _FcfLineV28AsynInDteSigMonitored1_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 7, 1, 4),
    _FcfLineV28AsynInDteSigMonitored1_Type()
)
fcfLineV28AsynInDteSigMonitored1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28AsynInDteSigMonitored1.setStatus("mandatory")


class _FcfLineV28AsynInDteSigMonitored2_Type(Integer32):
    """Custom type fcfLineV28AsynInDteSigMonitored2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              5)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("si117", 5),
          ("ti142", 3))
    )


_FcfLineV28AsynInDteSigMonitored2_Type.__name__ = "Integer32"
_FcfLineV28AsynInDteSigMonitored2_Object = MibTableColumn
fcfLineV28AsynInDteSigMonitored2 = _FcfLineV28AsynInDteSigMonitored2_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 7, 1, 5),
    _FcfLineV28AsynInDteSigMonitored2_Type()
)
fcfLineV28AsynInDteSigMonitored2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28AsynInDteSigMonitored2.setStatus("mandatory")
_FcfLineV28AsynInDceSignalTable_Object = MibTable
fcfLineV28AsynInDceSignalTable = _FcfLineV28AsynInDceSignalTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 8)
)
if mibBuilder.loadTexts:
    fcfLineV28AsynInDceSignalTable.setStatus("mandatory")
_FcfLineV28AsynInDceSignalEntry_Object = MibTableRow
fcfLineV28AsynInDceSignalEntry = _FcfLineV28AsynInDceSignalEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 8, 1)
)
fcfLineV28AsynInDceSignalEntry.setIndexNames(
    (0, "PCE-MIB", "fcfLineV28AsynInDceInterfaceId"),
)
if mibBuilder.loadTexts:
    fcfLineV28AsynInDceSignalEntry.setStatus("mandatory")


class _FcfLineV28AsynInDceInterfaceId_Type(Integer32):
    """Custom type fcfLineV28AsynInDceInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcfLineV28AsynInDceInterfaceId_Type.__name__ = "Integer32"
_FcfLineV28AsynInDceInterfaceId_Object = MibTableColumn
fcfLineV28AsynInDceInterfaceId = _FcfLineV28AsynInDceInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 8, 1, 1),
    _FcfLineV28AsynInDceInterfaceId_Type()
)
fcfLineV28AsynInDceInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfLineV28AsynInDceInterfaceId.setStatus("mandatory")


class _FcfLineV28AsynInDceEnablingSig1_Type(Integer32):
    """Custom type fcfLineV28AsynInDceEnablingSig1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              9,
              33,
              41)
        )
    )
    namedValues = NamedValues(
        *(("dtr108", 33),
          ("none", 1),
          ("rts105", 9),
          ("rts105-dtr108", 41))
    )


_FcfLineV28AsynInDceEnablingSig1_Type.__name__ = "Integer32"
_FcfLineV28AsynInDceEnablingSig1_Object = MibTableColumn
fcfLineV28AsynInDceEnablingSig1 = _FcfLineV28AsynInDceEnablingSig1_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 8, 1, 2),
    _FcfLineV28AsynInDceEnablingSig1_Type()
)
fcfLineV28AsynInDceEnablingSig1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28AsynInDceEnablingSig1.setStatus("mandatory")


class _FcfLineV28AsynInDceEnablingSig2_Type(Integer32):
    """Custom type fcfLineV28AsynInDceEnablingSig2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              5)
        )
    )
    namedValues = NamedValues(
        *(("drs111", 2),
          ("ll141", 5),
          ("none", 1),
          ("ril140", 3))
    )


_FcfLineV28AsynInDceEnablingSig2_Type.__name__ = "Integer32"
_FcfLineV28AsynInDceEnablingSig2_Object = MibTableColumn
fcfLineV28AsynInDceEnablingSig2 = _FcfLineV28AsynInDceEnablingSig2_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 8, 1, 3),
    _FcfLineV28AsynInDceEnablingSig2_Type()
)
fcfLineV28AsynInDceEnablingSig2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28AsynInDceEnablingSig2.setStatus("mandatory")


class _FcfLineV28AsynInDceSigMonitored1_Type(Integer32):
    """Custom type fcfLineV28AsynInDceSigMonitored1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              9,
              33,
              41)
        )
    )
    namedValues = NamedValues(
        *(("dtr108", 33),
          ("none", 1),
          ("rts105", 9),
          ("rts105-dtr108", 41))
    )


_FcfLineV28AsynInDceSigMonitored1_Type.__name__ = "Integer32"
_FcfLineV28AsynInDceSigMonitored1_Object = MibTableColumn
fcfLineV28AsynInDceSigMonitored1 = _FcfLineV28AsynInDceSigMonitored1_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 8, 1, 4),
    _FcfLineV28AsynInDceSigMonitored1_Type()
)
fcfLineV28AsynInDceSigMonitored1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28AsynInDceSigMonitored1.setStatus("mandatory")


class _FcfLineV28AsynInDceSigMonitored2_Type(Integer32):
    """Custom type fcfLineV28AsynInDceSigMonitored2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              5)
        )
    )
    namedValues = NamedValues(
        *(("ll141", 5),
          ("none", 1),
          ("ril140", 3),
          ("rts111", 2))
    )


_FcfLineV28AsynInDceSigMonitored2_Type.__name__ = "Integer32"
_FcfLineV28AsynInDceSigMonitored2_Object = MibTableColumn
fcfLineV28AsynInDceSigMonitored2 = _FcfLineV28AsynInDceSigMonitored2_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 8, 1, 5),
    _FcfLineV28AsynInDceSigMonitored2_Type()
)
fcfLineV28AsynInDceSigMonitored2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28AsynInDceSigMonitored2.setStatus("mandatory")
_FcfLineV28DteSignalTable_Object = MibTable
fcfLineV28DteSignalTable = _FcfLineV28DteSignalTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 11)
)
if mibBuilder.loadTexts:
    fcfLineV28DteSignalTable.setStatus("mandatory")
_FcfLineV28DteSignalEntry_Object = MibTableRow
fcfLineV28DteSignalEntry = _FcfLineV28DteSignalEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 11, 1)
)
fcfLineV28DteSignalEntry.setIndexNames(
    (0, "PCE-MIB", "fcfLineV28DteInterfaceId"),
)
if mibBuilder.loadTexts:
    fcfLineV28DteSignalEntry.setStatus("mandatory")


class _FcfLineV28DteInterfaceId_Type(Integer32):
    """Custom type fcfLineV28DteInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcfLineV28DteInterfaceId_Type.__name__ = "Integer32"
_FcfLineV28DteInterfaceId_Object = MibTableColumn
fcfLineV28DteInterfaceId = _FcfLineV28DteInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 11, 1, 1),
    _FcfLineV28DteInterfaceId_Type()
)
fcfLineV28DteInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfLineV28DteInterfaceId.setStatus("mandatory")


class _FcfLineV28DteCts106_Type(Integer32):
    """Custom type fcfLineV28DteCts106 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("monitoredNotSignificant", 2),
          ("monitoredOff", 3),
          ("monitoredOn", 4),
          ("notMonitored", 1))
    )


_FcfLineV28DteCts106_Type.__name__ = "Integer32"
_FcfLineV28DteCts106_Object = MibTableColumn
fcfLineV28DteCts106 = _FcfLineV28DteCts106_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 11, 1, 2),
    _FcfLineV28DteCts106_Type()
)
fcfLineV28DteCts106.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28DteCts106.setStatus("mandatory")


class _FcfLineV28DteDsr107_Type(Integer32):
    """Custom type fcfLineV28DteDsr107 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("monitoredNotSignificant", 2),
          ("monitoredOff", 3),
          ("monitoredOn", 4),
          ("notMonitored", 1))
    )


_FcfLineV28DteDsr107_Type.__name__ = "Integer32"
_FcfLineV28DteDsr107_Object = MibTableColumn
fcfLineV28DteDsr107 = _FcfLineV28DteDsr107_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 11, 1, 3),
    _FcfLineV28DteDsr107_Type()
)
fcfLineV28DteDsr107.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28DteDsr107.setStatus("mandatory")


class _FcfLineV28DteDcd109_Type(Integer32):
    """Custom type fcfLineV28DteDcd109 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("monitoredNotSignificant", 2),
          ("monitoredOff", 3),
          ("monitoredOn", 4),
          ("notMonitored", 1))
    )


_FcfLineV28DteDcd109_Type.__name__ = "Integer32"
_FcfLineV28DteDcd109_Object = MibTableColumn
fcfLineV28DteDcd109 = _FcfLineV28DteDcd109_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 11, 1, 4),
    _FcfLineV28DteDcd109_Type()
)
fcfLineV28DteDcd109.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28DteDcd109.setStatus("mandatory")


class _FcfLineV28DteSi117_Type(Integer32):
    """Custom type fcfLineV28DteSi117 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("monitoredNotSignificant", 2),
          ("monitoredOff", 3),
          ("monitoredOn", 4),
          ("notMonitored", 1))
    )


_FcfLineV28DteSi117_Type.__name__ = "Integer32"
_FcfLineV28DteSi117_Object = MibTableColumn
fcfLineV28DteSi117 = _FcfLineV28DteSi117_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 11, 1, 5),
    _FcfLineV28DteSi117_Type()
)
fcfLineV28DteSi117.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28DteSi117.setStatus("mandatory")


class _FcfLineV28DteTi142_Type(Integer32):
    """Custom type fcfLineV28DteTi142 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("monitoredNotSignificant", 2),
          ("monitoredOff", 3),
          ("monitoredOn", 4),
          ("notMonitored", 1))
    )


_FcfLineV28DteTi142_Type.__name__ = "Integer32"
_FcfLineV28DteTi142_Object = MibTableColumn
fcfLineV28DteTi142 = _FcfLineV28DteTi142_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 11, 1, 6),
    _FcfLineV28DteTi142_Type()
)
fcfLineV28DteTi142.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28DteTi142.setStatus("mandatory")


class _FcfLineV28DteSyn_Type(Integer32):
    """Custom type fcfLineV28DteSyn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("monitoredOff", 2),
          ("monitoredOn", 3),
          ("notMonitored", 1))
    )


_FcfLineV28DteSyn_Type.__name__ = "Integer32"
_FcfLineV28DteSyn_Object = MibTableColumn
fcfLineV28DteSyn = _FcfLineV28DteSyn_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 11, 1, 7),
    _FcfLineV28DteSyn_Type()
)
fcfLineV28DteSyn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28DteSyn.setStatus("mandatory")
_FcfLineV28DceSignalTable_Object = MibTable
fcfLineV28DceSignalTable = _FcfLineV28DceSignalTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 12)
)
if mibBuilder.loadTexts:
    fcfLineV28DceSignalTable.setStatus("mandatory")
_FcfLineV28DceSignalEntry_Object = MibTableRow
fcfLineV28DceSignalEntry = _FcfLineV28DceSignalEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 12, 1)
)
fcfLineV28DceSignalEntry.setIndexNames(
    (0, "PCE-MIB", "fcfLineV28DceInterfaceId"),
)
if mibBuilder.loadTexts:
    fcfLineV28DceSignalEntry.setStatus("mandatory")


class _FcfLineV28DceInterfaceId_Type(Integer32):
    """Custom type fcfLineV28DceInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcfLineV28DceInterfaceId_Type.__name__ = "Integer32"
_FcfLineV28DceInterfaceId_Object = MibTableColumn
fcfLineV28DceInterfaceId = _FcfLineV28DceInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 12, 1, 1),
    _FcfLineV28DceInterfaceId_Type()
)
fcfLineV28DceInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfLineV28DceInterfaceId.setStatus("mandatory")


class _FcfLineV28DceRts105_Type(Integer32):
    """Custom type fcfLineV28DceRts105 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("monitoredNotSignificant", 2),
          ("monitoredOff", 3),
          ("monitoredOn", 4),
          ("notMonitored", 1))
    )


_FcfLineV28DceRts105_Type.__name__ = "Integer32"
_FcfLineV28DceRts105_Object = MibTableColumn
fcfLineV28DceRts105 = _FcfLineV28DceRts105_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 12, 1, 2),
    _FcfLineV28DceRts105_Type()
)
fcfLineV28DceRts105.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28DceRts105.setStatus("mandatory")


class _FcfLineV28DceDtr108_Type(Integer32):
    """Custom type fcfLineV28DceDtr108 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("monitoredNotSignificant", 2),
          ("monitoredOff", 3),
          ("monitoredOn", 4),
          ("notMonitored", 1))
    )


_FcfLineV28DceDtr108_Type.__name__ = "Integer32"
_FcfLineV28DceDtr108_Object = MibTableColumn
fcfLineV28DceDtr108 = _FcfLineV28DceDtr108_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 12, 1, 3),
    _FcfLineV28DceDtr108_Type()
)
fcfLineV28DceDtr108.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28DceDtr108.setStatus("mandatory")


class _FcfLineV28DceDrs111_Type(Integer32):
    """Custom type fcfLineV28DceDrs111 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("monitoredNotSignificant", 2),
          ("monitoredOff", 3),
          ("monitoredOn", 4),
          ("notMonitored", 1))
    )


_FcfLineV28DceDrs111_Type.__name__ = "Integer32"
_FcfLineV28DceDrs111_Object = MibTableColumn
fcfLineV28DceDrs111 = _FcfLineV28DceDrs111_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 12, 1, 4),
    _FcfLineV28DceDrs111_Type()
)
fcfLineV28DceDrs111.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28DceDrs111.setStatus("mandatory")


class _FcfLineV28DceRil140_Type(Integer32):
    """Custom type fcfLineV28DceRil140 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("monitoredNotSignificant", 2),
          ("monitoredOff", 3),
          ("monitoredOn", 4),
          ("notMonitored", 1))
    )


_FcfLineV28DceRil140_Type.__name__ = "Integer32"
_FcfLineV28DceRil140_Object = MibTableColumn
fcfLineV28DceRil140 = _FcfLineV28DceRil140_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 12, 1, 5),
    _FcfLineV28DceRil140_Type()
)
fcfLineV28DceRil140.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28DceRil140.setStatus("mandatory")


class _FcfLineV28DceLl141_Type(Integer32):
    """Custom type fcfLineV28DceLl141 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("monitoredNotSignificant", 2),
          ("monitoredOff", 3),
          ("monitoredOn", 4),
          ("notMonitored", 1))
    )


_FcfLineV28DceLl141_Type.__name__ = "Integer32"
_FcfLineV28DceLl141_Object = MibTableColumn
fcfLineV28DceLl141 = _FcfLineV28DceLl141_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 12, 1, 6),
    _FcfLineV28DceLl141_Type()
)
fcfLineV28DceLl141.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28DceLl141.setStatus("mandatory")


class _FcfLineV28DceSyn_Type(Integer32):
    """Custom type fcfLineV28DceSyn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("monitoredOff", 2),
          ("monitoredOn", 3),
          ("notMonitored", 1))
    )


_FcfLineV28DceSyn_Type.__name__ = "Integer32"
_FcfLineV28DceSyn_Object = MibTableColumn
fcfLineV28DceSyn = _FcfLineV28DceSyn_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 12, 1, 7),
    _FcfLineV28DceSyn_Type()
)
fcfLineV28DceSyn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV28DceSyn.setStatus("mandatory")
_FcfLineV11DteSignalTable_Object = MibTable
fcfLineV11DteSignalTable = _FcfLineV11DteSignalTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 15)
)
if mibBuilder.loadTexts:
    fcfLineV11DteSignalTable.setStatus("mandatory")
_FcfLineV11DteSignalEntry_Object = MibTableRow
fcfLineV11DteSignalEntry = _FcfLineV11DteSignalEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 15, 1)
)
fcfLineV11DteSignalEntry.setIndexNames(
    (0, "PCE-MIB", "fcfLineV11DteInterfaceId"),
)
if mibBuilder.loadTexts:
    fcfLineV11DteSignalEntry.setStatus("mandatory")


class _FcfLineV11DteInterfaceId_Type(Integer32):
    """Custom type fcfLineV11DteInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcfLineV11DteInterfaceId_Type.__name__ = "Integer32"
_FcfLineV11DteInterfaceId_Object = MibTableColumn
fcfLineV11DteInterfaceId = _FcfLineV11DteInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 15, 1, 1),
    _FcfLineV11DteInterfaceId_Type()
)
fcfLineV11DteInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfLineV11DteInterfaceId.setStatus("mandatory")


class _FcfLineV11DteIndication109_Type(Integer32):
    """Custom type fcfLineV11DteIndication109 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("monitoredNotSignificant", 2),
          ("monitoredOff", 3),
          ("monitoredOn", 4),
          ("notMonitored", 1))
    )


_FcfLineV11DteIndication109_Type.__name__ = "Integer32"
_FcfLineV11DteIndication109_Object = MibTableColumn
fcfLineV11DteIndication109 = _FcfLineV11DteIndication109_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 15, 1, 2),
    _FcfLineV11DteIndication109_Type()
)
fcfLineV11DteIndication109.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV11DteIndication109.setStatus("mandatory")


class _FcfLineV11DteSyn_Type(Integer32):
    """Custom type fcfLineV11DteSyn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("monitoredOff", 2),
          ("monitoredOn", 3),
          ("notMonitored", 1))
    )


_FcfLineV11DteSyn_Type.__name__ = "Integer32"
_FcfLineV11DteSyn_Object = MibTableColumn
fcfLineV11DteSyn = _FcfLineV11DteSyn_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 15, 1, 3),
    _FcfLineV11DteSyn_Type()
)
fcfLineV11DteSyn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV11DteSyn.setStatus("mandatory")
_FcfLineV11DceSignalTable_Object = MibTable
fcfLineV11DceSignalTable = _FcfLineV11DceSignalTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 16)
)
if mibBuilder.loadTexts:
    fcfLineV11DceSignalTable.setStatus("mandatory")
_FcfLineV11DceSignalEntry_Object = MibTableRow
fcfLineV11DceSignalEntry = _FcfLineV11DceSignalEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 16, 1)
)
fcfLineV11DceSignalEntry.setIndexNames(
    (0, "PCE-MIB", "fcfLineV11DceInterfaceId"),
)
if mibBuilder.loadTexts:
    fcfLineV11DceSignalEntry.setStatus("mandatory")


class _FcfLineV11DceInterfaceId_Type(Integer32):
    """Custom type fcfLineV11DceInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcfLineV11DceInterfaceId_Type.__name__ = "Integer32"
_FcfLineV11DceInterfaceId_Object = MibTableColumn
fcfLineV11DceInterfaceId = _FcfLineV11DceInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 16, 1, 1),
    _FcfLineV11DceInterfaceId_Type()
)
fcfLineV11DceInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfLineV11DceInterfaceId.setStatus("mandatory")


class _FcfLineV11DceControl105_Type(Integer32):
    """Custom type fcfLineV11DceControl105 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("monitoredNotSignificant", 2),
          ("monitoredOff", 3),
          ("monitoredOn", 4),
          ("notMonitored", 1))
    )


_FcfLineV11DceControl105_Type.__name__ = "Integer32"
_FcfLineV11DceControl105_Object = MibTableColumn
fcfLineV11DceControl105 = _FcfLineV11DceControl105_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 16, 1, 2),
    _FcfLineV11DceControl105_Type()
)
fcfLineV11DceControl105.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV11DceControl105.setStatus("mandatory")


class _FcfLineV11DceSyn_Type(Integer32):
    """Custom type fcfLineV11DceSyn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("monitoredOff", 2),
          ("monitoredOn", 3),
          ("notMonitored", 1))
    )


_FcfLineV11DceSyn_Type.__name__ = "Integer32"
_FcfLineV11DceSyn_Object = MibTableColumn
fcfLineV11DceSyn = _FcfLineV11DceSyn_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 16, 1, 3),
    _FcfLineV11DceSyn_Type()
)
fcfLineV11DceSyn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV11DceSyn.setStatus("mandatory")
_FcfLineV35DteSignalTable_Object = MibTable
fcfLineV35DteSignalTable = _FcfLineV35DteSignalTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 19)
)
if mibBuilder.loadTexts:
    fcfLineV35DteSignalTable.setStatus("mandatory")
_FcfLineV35DteSignalEntry_Object = MibTableRow
fcfLineV35DteSignalEntry = _FcfLineV35DteSignalEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 19, 1)
)
fcfLineV35DteSignalEntry.setIndexNames(
    (0, "PCE-MIB", "fcfLineV35DteInterfaceId"),
)
if mibBuilder.loadTexts:
    fcfLineV35DteSignalEntry.setStatus("mandatory")


class _FcfLineV35DteInterfaceId_Type(Integer32):
    """Custom type fcfLineV35DteInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcfLineV35DteInterfaceId_Type.__name__ = "Integer32"
_FcfLineV35DteInterfaceId_Object = MibTableColumn
fcfLineV35DteInterfaceId = _FcfLineV35DteInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 19, 1, 1),
    _FcfLineV35DteInterfaceId_Type()
)
fcfLineV35DteInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfLineV35DteInterfaceId.setStatus("mandatory")


class _FcfLineV35DteD106_Type(Integer32):
    """Custom type fcfLineV35DteD106 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("monitoredNotSignificant", 2),
          ("monitoredOff", 3),
          ("monitoredOn", 4),
          ("notMonitored", 1))
    )


_FcfLineV35DteD106_Type.__name__ = "Integer32"
_FcfLineV35DteD106_Object = MibTableColumn
fcfLineV35DteD106 = _FcfLineV35DteD106_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 19, 1, 2),
    _FcfLineV35DteD106_Type()
)
fcfLineV35DteD106.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV35DteD106.setStatus("mandatory")


class _FcfLineV35DteE107_Type(Integer32):
    """Custom type fcfLineV35DteE107 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("monitoredNotSignificant", 2),
          ("monitoredOff", 3),
          ("monitoredOn", 4),
          ("notMonitored", 1))
    )


_FcfLineV35DteE107_Type.__name__ = "Integer32"
_FcfLineV35DteE107_Object = MibTableColumn
fcfLineV35DteE107 = _FcfLineV35DteE107_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 19, 1, 3),
    _FcfLineV35DteE107_Type()
)
fcfLineV35DteE107.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV35DteE107.setStatus("mandatory")


class _FcfLineV35DteF109_Type(Integer32):
    """Custom type fcfLineV35DteF109 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("monitoredNotSignificant", 2),
          ("monitoredOff", 3),
          ("monitoredOn", 4),
          ("notMonitored", 1))
    )


_FcfLineV35DteF109_Type.__name__ = "Integer32"
_FcfLineV35DteF109_Object = MibTableColumn
fcfLineV35DteF109 = _FcfLineV35DteF109_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 19, 1, 4),
    _FcfLineV35DteF109_Type()
)
fcfLineV35DteF109.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV35DteF109.setStatus("mandatory")


class _FcfLineV35DteTi142_Type(Integer32):
    """Custom type fcfLineV35DteTi142 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("monitoredNotSignificant", 2),
          ("monitoredOff", 3),
          ("monitoredOn", 4),
          ("notMonitored", 1))
    )


_FcfLineV35DteTi142_Type.__name__ = "Integer32"
_FcfLineV35DteTi142_Object = MibTableColumn
fcfLineV35DteTi142 = _FcfLineV35DteTi142_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 19, 1, 5),
    _FcfLineV35DteTi142_Type()
)
fcfLineV35DteTi142.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV35DteTi142.setStatus("mandatory")


class _FcfLineV35DteSyn_Type(Integer32):
    """Custom type fcfLineV35DteSyn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("monitoredOff", 2),
          ("monitoredOn", 3),
          ("notMonitored", 1))
    )


_FcfLineV35DteSyn_Type.__name__ = "Integer32"
_FcfLineV35DteSyn_Object = MibTableColumn
fcfLineV35DteSyn = _FcfLineV35DteSyn_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 19, 1, 6),
    _FcfLineV35DteSyn_Type()
)
fcfLineV35DteSyn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV35DteSyn.setStatus("mandatory")
_FcfLineV35DceSignalTable_Object = MibTable
fcfLineV35DceSignalTable = _FcfLineV35DceSignalTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 20)
)
if mibBuilder.loadTexts:
    fcfLineV35DceSignalTable.setStatus("mandatory")
_FcfLineV35DceSignalEntry_Object = MibTableRow
fcfLineV35DceSignalEntry = _FcfLineV35DceSignalEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 20, 1)
)
fcfLineV35DceSignalEntry.setIndexNames(
    (0, "PCE-MIB", "fcfLineV35DceInterfaceId"),
)
if mibBuilder.loadTexts:
    fcfLineV35DceSignalEntry.setStatus("mandatory")


class _FcfLineV35DceInterfaceId_Type(Integer32):
    """Custom type fcfLineV35DceInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcfLineV35DceInterfaceId_Type.__name__ = "Integer32"
_FcfLineV35DceInterfaceId_Object = MibTableColumn
fcfLineV35DceInterfaceId = _FcfLineV35DceInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 20, 1, 1),
    _FcfLineV35DceInterfaceId_Type()
)
fcfLineV35DceInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfLineV35DceInterfaceId.setStatus("mandatory")


class _FcfLineV35DceC105_Type(Integer32):
    """Custom type fcfLineV35DceC105 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("monitoredNotSignificant", 2),
          ("monitoredOff", 3),
          ("monitoredOn", 4),
          ("notMonitored", 1))
    )


_FcfLineV35DceC105_Type.__name__ = "Integer32"
_FcfLineV35DceC105_Object = MibTableColumn
fcfLineV35DceC105 = _FcfLineV35DceC105_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 20, 1, 2),
    _FcfLineV35DceC105_Type()
)
fcfLineV35DceC105.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV35DceC105.setStatus("mandatory")


class _FcfLineV35DceH108_Type(Integer32):
    """Custom type fcfLineV35DceH108 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("monitoredNotSignificant", 2),
          ("monitoredOff", 3),
          ("monitoredOn", 4),
          ("notMonitored", 1))
    )


_FcfLineV35DceH108_Type.__name__ = "Integer32"
_FcfLineV35DceH108_Object = MibTableColumn
fcfLineV35DceH108 = _FcfLineV35DceH108_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 20, 1, 3),
    _FcfLineV35DceH108_Type()
)
fcfLineV35DceH108.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV35DceH108.setStatus("mandatory")


class _FcfLineV35DceRil140_Type(Integer32):
    """Custom type fcfLineV35DceRil140 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("monitoredNotSignificant", 2),
          ("monitoredOff", 3),
          ("monitoredOn", 4),
          ("notMonitored", 1))
    )


_FcfLineV35DceRil140_Type.__name__ = "Integer32"
_FcfLineV35DceRil140_Object = MibTableColumn
fcfLineV35DceRil140 = _FcfLineV35DceRil140_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 20, 1, 4),
    _FcfLineV35DceRil140_Type()
)
fcfLineV35DceRil140.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV35DceRil140.setStatus("mandatory")


class _FcfLineV35DceLl141_Type(Integer32):
    """Custom type fcfLineV35DceLl141 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("monitoredNotSignificant", 2),
          ("monitoredOff", 3),
          ("monitoredOn", 4),
          ("notMonitored", 1))
    )


_FcfLineV35DceLl141_Type.__name__ = "Integer32"
_FcfLineV35DceLl141_Object = MibTableColumn
fcfLineV35DceLl141 = _FcfLineV35DceLl141_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 20, 1, 5),
    _FcfLineV35DceLl141_Type()
)
fcfLineV35DceLl141.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV35DceLl141.setStatus("mandatory")


class _FcfLineV35DceSyn_Type(Integer32):
    """Custom type fcfLineV35DceSyn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("monitoredOff", 2),
          ("monitoredOn", 3),
          ("notMonitored", 1))
    )


_FcfLineV35DceSyn_Type.__name__ = "Integer32"
_FcfLineV35DceSyn_Object = MibTableColumn
fcfLineV35DceSyn = _FcfLineV35DceSyn_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 20, 1, 6),
    _FcfLineV35DceSyn_Type()
)
fcfLineV35DceSyn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineV35DceSyn.setStatus("mandatory")
_FcfLineModem_ObjectIdentity = ObjectIdentity
fcfLineModem = _FcfLineModem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30)
)
_FcfLineModemTable_Object = MibTable
fcfLineModemTable = _FcfLineModemTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1)
)
if mibBuilder.loadTexts:
    fcfLineModemTable.setStatus("mandatory")
_FcfLineModemEntry_Object = MibTableRow
fcfLineModemEntry = _FcfLineModemEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1)
)
fcfLineModemEntry.setIndexNames(
    (0, "PCE-MIB", "fcfLineModInterfaceId"),
)
if mibBuilder.loadTexts:
    fcfLineModemEntry.setStatus("mandatory")


class _FcfLineModInterfaceId_Type(Integer32):
    """Custom type fcfLineModInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcfLineModInterfaceId_Type.__name__ = "Integer32"
_FcfLineModInterfaceId_Object = MibTableColumn
fcfLineModInterfaceId = _FcfLineModInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 1),
    _FcfLineModInterfaceId_Type()
)
fcfLineModInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfLineModInterfaceId.setStatus("mandatory")


class _FcfLineModType_Type(Integer32):
    """Custom type fcfLineModType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("addressedAt", 2),
          ("addressedV25Bis", 3),
          ("direct", 1))
    )


_FcfLineModType_Type.__name__ = "Integer32"
_FcfLineModType_Object = MibTableColumn
fcfLineModType = _FcfLineModType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 2),
    _FcfLineModType_Type()
)
fcfLineModType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineModType.setStatus("mandatory")


class _FcfLineModLinkUpTimer_Type(Integer32):
    """Custom type fcfLineModLinkUpTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 250),
    )


_FcfLineModLinkUpTimer_Type.__name__ = "Integer32"
_FcfLineModLinkUpTimer_Object = MibTableColumn
fcfLineModLinkUpTimer = _FcfLineModLinkUpTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 3),
    _FcfLineModLinkUpTimer_Type()
)
fcfLineModLinkUpTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineModLinkUpTimer.setStatus("mandatory")


class _FcfLineModNewDiallingTimer_Type(Integer32):
    """Custom type fcfLineModNewDiallingTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2500),
    )


_FcfLineModNewDiallingTimer_Type.__name__ = "Integer32"
_FcfLineModNewDiallingTimer_Object = MibTableColumn
fcfLineModNewDiallingTimer = _FcfLineModNewDiallingTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 4),
    _FcfLineModNewDiallingTimer_Type()
)
fcfLineModNewDiallingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineModNewDiallingTimer.setStatus("mandatory")


class _FcfLineModDiallingCount_Type(Integer32):
    """Custom type fcfLineModDiallingCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FcfLineModDiallingCount_Type.__name__ = "Integer32"
_FcfLineModDiallingCount_Object = MibTableColumn
fcfLineModDiallingCount = _FcfLineModDiallingCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 5),
    _FcfLineModDiallingCount_Type()
)
fcfLineModDiallingCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineModDiallingCount.setStatus("mandatory")


class _FcfLineModUnuseTimer_Type(Integer32):
    """Custom type fcfLineModUnuseTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_FcfLineModUnuseTimer_Type.__name__ = "Integer32"
_FcfLineModUnuseTimer_Object = MibTableColumn
fcfLineModUnuseTimer = _FcfLineModUnuseTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 6),
    _FcfLineModUnuseTimer_Type()
)
fcfLineModUnuseTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineModUnuseTimer.setStatus("mandatory")


class _FcfLineModSpeed_Type(Integer32):
    """Custom type fcfLineModSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              9,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("s115200", 16),
          ("s1200", 4),
          ("s150", 1),
          ("s19200", 12),
          ("s2400", 5),
          ("s28800", 13),
          ("s300", 2),
          ("s38400", 14),
          ("s4800", 9),
          ("s57600", 15),
          ("s600", 3),
          ("s9600", 11))
    )


_FcfLineModSpeed_Type.__name__ = "Integer32"
_FcfLineModSpeed_Object = MibTableColumn
fcfLineModSpeed = _FcfLineModSpeed_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 7),
    _FcfLineModSpeed_Type()
)
fcfLineModSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineModSpeed.setStatus("mandatory")


class _FcfLineModCallDirection_Type(Integer32):
    """Custom type fcfLineModCallDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("called", 2),
          ("calling", 3))
    )


_FcfLineModCallDirection_Type.__name__ = "Integer32"
_FcfLineModCallDirection_Object = MibTableColumn
fcfLineModCallDirection = _FcfLineModCallDirection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 8),
    _FcfLineModCallDirection_Type()
)
fcfLineModCallDirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineModCallDirection.setStatus("mandatory")


class _FcfLineModInitString_Type(DisplayString):
    """Custom type fcfLineModInitString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 50),
    )


_FcfLineModInitString_Type.__name__ = "DisplayString"
_FcfLineModInitString_Object = MibTableColumn
fcfLineModInitString = _FcfLineModInitString_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 9),
    _FcfLineModInitString_Type()
)
fcfLineModInitString.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineModInitString.setStatus("mandatory")


class _FcfLineModOutputXidString_Type(Integer32):
    """Custom type fcfLineModOutputXidString based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcfLineModOutputXidString_Type.__name__ = "Integer32"
_FcfLineModOutputXidString_Object = MibTableColumn
fcfLineModOutputXidString = _FcfLineModOutputXidString_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 10),
    _FcfLineModOutputXidString_Type()
)
fcfLineModOutputXidString.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineModOutputXidString.setStatus("mandatory")


class _FcfLineModOutputXidStringId_Type(Integer32):
    """Custom type fcfLineModOutputXidStringId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_FcfLineModOutputXidStringId_Type.__name__ = "Integer32"
_FcfLineModOutputXidStringId_Object = MibTableColumn
fcfLineModOutputXidStringId = _FcfLineModOutputXidStringId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 11),
    _FcfLineModOutputXidStringId_Type()
)
fcfLineModOutputXidStringId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineModOutputXidStringId.setStatus("mandatory")


class _FcfLineModInputXidString_Type(Integer32):
    """Custom type fcfLineModInputXidString based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcfLineModInputXidString_Type.__name__ = "Integer32"
_FcfLineModInputXidString_Object = MibTableColumn
fcfLineModInputXidString = _FcfLineModInputXidString_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 12),
    _FcfLineModInputXidString_Type()
)
fcfLineModInputXidString.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineModInputXidString.setStatus("mandatory")


class _FcfLineModInputXidStringCount_Type(Integer32):
    """Custom type fcfLineModInputXidStringCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FcfLineModInputXidStringCount_Type.__name__ = "Integer32"
_FcfLineModInputXidStringCount_Object = MibTableColumn
fcfLineModInputXidStringCount = _FcfLineModInputXidStringCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 13),
    _FcfLineModInputXidStringCount_Type()
)
fcfLineModInputXidStringCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineModInputXidStringCount.setStatus("mandatory")
_FcfLineModXidStringTable_Object = MibTable
fcfLineModXidStringTable = _FcfLineModXidStringTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 2)
)
if mibBuilder.loadTexts:
    fcfLineModXidStringTable.setStatus("mandatory")
_FcfLineModXidStringEntry_Object = MibTableRow
fcfLineModXidStringEntry = _FcfLineModXidStringEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 2, 1)
)
fcfLineModXidStringEntry.setIndexNames(
    (0, "PCE-MIB", "fcfLineModXidStringId"),
    (0, "PCE-MIB", "fcfLineModXidStringEltNum"),
)
if mibBuilder.loadTexts:
    fcfLineModXidStringEntry.setStatus("mandatory")


class _FcfLineModXidStringId_Type(Integer32):
    """Custom type fcfLineModXidStringId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_FcfLineModXidStringId_Type.__name__ = "Integer32"
_FcfLineModXidStringId_Object = MibTableColumn
fcfLineModXidStringId = _FcfLineModXidStringId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 2, 1, 1),
    _FcfLineModXidStringId_Type()
)
fcfLineModXidStringId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfLineModXidStringId.setStatus("mandatory")


class _FcfLineModXidStringEltNum_Type(Integer32):
    """Custom type fcfLineModXidStringEltNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_FcfLineModXidStringEltNum_Type.__name__ = "Integer32"
_FcfLineModXidStringEltNum_Object = MibTableColumn
fcfLineModXidStringEltNum = _FcfLineModXidStringEltNum_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 2, 1, 2),
    _FcfLineModXidStringEltNum_Type()
)
fcfLineModXidStringEltNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfLineModXidStringEltNum.setStatus("mandatory")


class _FcfLineModXidStringEltStatus_Type(Integer32):
    """Custom type fcfLineModXidStringEltStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcfLineModXidStringEltStatus_Type.__name__ = "Integer32"
_FcfLineModXidStringEltStatus_Object = MibTableColumn
fcfLineModXidStringEltStatus = _FcfLineModXidStringEltStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 2, 1, 3),
    _FcfLineModXidStringEltStatus_Type()
)
fcfLineModXidStringEltStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineModXidStringEltStatus.setStatus("mandatory")


class _FcfLineModXidStringElement_Type(OctetString):
    """Custom type fcfLineModXidStringElement based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(33, 33),
    )


_FcfLineModXidStringElement_Type.__name__ = "OctetString"
_FcfLineModXidStringElement_Object = MibTableColumn
fcfLineModXidStringElement = _FcfLineModXidStringElement_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 2, 1, 4),
    _FcfLineModXidStringElement_Type()
)
fcfLineModXidStringElement.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineModXidStringElement.setStatus("mandatory")
_FcfLineDVBTable_Object = MibTable
fcfLineDVBTable = _FcfLineDVBTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 31)
)
if mibBuilder.loadTexts:
    fcfLineDVBTable.setStatus("mandatory")
_FcfLineDVBEntry_Object = MibTableRow
fcfLineDVBEntry = _FcfLineDVBEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 31, 1)
)
fcfLineDVBEntry.setIndexNames(
    (0, "PCE-MIB", "fcfLineDVBInterfaceId"),
)
if mibBuilder.loadTexts:
    fcfLineDVBEntry.setStatus("mandatory")


class _FcfLineDVBInterfaceId_Type(Integer32):
    """Custom type fcfLineDVBInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcfLineDVBInterfaceId_Type.__name__ = "Integer32"
_FcfLineDVBInterfaceId_Object = MibTableColumn
fcfLineDVBInterfaceId = _FcfLineDVBInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 31, 1, 1),
    _FcfLineDVBInterfaceId_Type()
)
fcfLineDVBInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfLineDVBInterfaceId.setStatus("mandatory")


class _FcfLineDVBStatus_Type(Integer32):
    """Custom type fcfLineDVBStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcfLineDVBStatus_Type.__name__ = "Integer32"
_FcfLineDVBStatus_Object = MibTableColumn
fcfLineDVBStatus = _FcfLineDVBStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 31, 1, 2),
    _FcfLineDVBStatus_Type()
)
fcfLineDVBStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineDVBStatus.setStatus("mandatory")


class _FcfLineDVBConnection_Type(Integer32):
    """Custom type fcfLineDVBConnection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("lsForDvb1", 2),
          ("lsForDvb2", 3),
          ("none", 1))
    )


_FcfLineDVBConnection_Type.__name__ = "Integer32"
_FcfLineDVBConnection_Object = MibTableColumn
fcfLineDVBConnection = _FcfLineDVBConnection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 31, 1, 3),
    _FcfLineDVBConnection_Type()
)
fcfLineDVBConnection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfLineDVBConnection.setStatus("mandatory")
_FcfIsdn_ObjectIdentity = ObjectIdentity
fcfIsdn = _FcfIsdn_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5)
)
_FcfIsdnBasicRateInterfaceTable_Object = MibTable
fcfIsdnBasicRateInterfaceTable = _FcfIsdnBasicRateInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 1)
)
if mibBuilder.loadTexts:
    fcfIsdnBasicRateInterfaceTable.setStatus("mandatory")
_FcfIsdnBasicRateInterfaceEntry_Object = MibTableRow
fcfIsdnBasicRateInterfaceEntry = _FcfIsdnBasicRateInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 1, 1)
)
fcfIsdnBasicRateInterfaceEntry.setIndexNames(
    (0, "PCE-MIB", "fcfIsdnBasicRateInterfaceId"),
)
if mibBuilder.loadTexts:
    fcfIsdnBasicRateInterfaceEntry.setStatus("mandatory")


class _FcfIsdnBasicRateInterfaceId_Type(Integer32):
    """Custom type fcfIsdnBasicRateInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcfIsdnBasicRateInterfaceId_Type.__name__ = "Integer32"
_FcfIsdnBasicRateInterfaceId_Object = MibTableColumn
fcfIsdnBasicRateInterfaceId = _FcfIsdnBasicRateInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 1, 1, 1),
    _FcfIsdnBasicRateInterfaceId_Type()
)
fcfIsdnBasicRateInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfIsdnBasicRateInterfaceId.setStatus("mandatory")


class _FcfIsdnBriSignalling_Type(Integer32):
    """Custom type fcfIsdnBriSignalling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcfIsdnBriSignalling_Type.__name__ = "Integer32"
_FcfIsdnBriSignalling_Object = MibTableColumn
fcfIsdnBriSignalling = _FcfIsdnBriSignalling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 1, 1, 2),
    _FcfIsdnBriSignalling_Type()
)
fcfIsdnBriSignalling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnBriSignalling.setStatus("mandatory")


class _FcfIsdnBriCountry_Type(Integer32):
    """Custom type fcfIsdnBriCountry based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("europeanIsdn", 5),
          ("franceVn2", 1),
          ("franceVn3", 2),
          ("japan", 6),
          ("switzerland", 4),
          ("unitedKingdom", 3))
    )


_FcfIsdnBriCountry_Type.__name__ = "Integer32"
_FcfIsdnBriCountry_Object = MibTableColumn
fcfIsdnBriCountry = _FcfIsdnBriCountry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 1, 1, 3),
    _FcfIsdnBriCountry_Type()
)
fcfIsdnBriCountry.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnBriCountry.setStatus("mandatory")


class _FcfIsdnBriInterfaceCheckPeriod_Type(Integer32):
    """Custom type fcfIsdnBriInterfaceCheckPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 51000),
    )


_FcfIsdnBriInterfaceCheckPeriod_Type.__name__ = "Integer32"
_FcfIsdnBriInterfaceCheckPeriod_Object = MibTableColumn
fcfIsdnBriInterfaceCheckPeriod = _FcfIsdnBriInterfaceCheckPeriod_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 1, 1, 4),
    _FcfIsdnBriInterfaceCheckPeriod_Type()
)
fcfIsdnBriInterfaceCheckPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnBriInterfaceCheckPeriod.setStatus("mandatory")


class _FcfIsdnBriFilterRepeatCount_Type(Integer32):
    """Custom type fcfIsdnBriFilterRepeatCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FcfIsdnBriFilterRepeatCount_Type.__name__ = "Integer32"
_FcfIsdnBriFilterRepeatCount_Object = MibTableColumn
fcfIsdnBriFilterRepeatCount = _FcfIsdnBriFilterRepeatCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 1, 1, 5),
    _FcfIsdnBriFilterRepeatCount_Type()
)
fcfIsdnBriFilterRepeatCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnBriFilterRepeatCount.setStatus("mandatory")


class _FcfIsdnBriEnablingTimer_Type(Integer32):
    """Custom type fcfIsdnBriEnablingTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(200, 30000),
    )


_FcfIsdnBriEnablingTimer_Type.__name__ = "Integer32"
_FcfIsdnBriEnablingTimer_Object = MibTableColumn
fcfIsdnBriEnablingTimer = _FcfIsdnBriEnablingTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 1, 1, 6),
    _FcfIsdnBriEnablingTimer_Type()
)
fcfIsdnBriEnablingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnBriEnablingTimer.setStatus("mandatory")


class _FcfIsdnBriDisablingTimer_Type(Integer32):
    """Custom type fcfIsdnBriDisablingTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_FcfIsdnBriDisablingTimer_Type.__name__ = "Integer32"
_FcfIsdnBriDisablingTimer_Object = MibTableColumn
fcfIsdnBriDisablingTimer = _FcfIsdnBriDisablingTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 1, 1, 7),
    _FcfIsdnBriDisablingTimer_Type()
)
fcfIsdnBriDisablingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnBriDisablingTimer.setStatus("mandatory")
_FcfIsdnPrimaryRateInterfaceTable_Object = MibTable
fcfIsdnPrimaryRateInterfaceTable = _FcfIsdnPrimaryRateInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 2)
)
if mibBuilder.loadTexts:
    fcfIsdnPrimaryRateInterfaceTable.setStatus("mandatory")
_FcfIsdnPrimaryRateInterfaceEntry_Object = MibTableRow
fcfIsdnPrimaryRateInterfaceEntry = _FcfIsdnPrimaryRateInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 2, 1)
)
fcfIsdnPrimaryRateInterfaceEntry.setIndexNames(
    (0, "PCE-MIB", "fcfIsdnPrimaryRateInterfaceId"),
)
if mibBuilder.loadTexts:
    fcfIsdnPrimaryRateInterfaceEntry.setStatus("mandatory")


class _FcfIsdnPrimaryRateInterfaceId_Type(Integer32):
    """Custom type fcfIsdnPrimaryRateInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcfIsdnPrimaryRateInterfaceId_Type.__name__ = "Integer32"
_FcfIsdnPrimaryRateInterfaceId_Object = MibTableColumn
fcfIsdnPrimaryRateInterfaceId = _FcfIsdnPrimaryRateInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 2, 1, 1),
    _FcfIsdnPrimaryRateInterfaceId_Type()
)
fcfIsdnPrimaryRateInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfIsdnPrimaryRateInterfaceId.setStatus("mandatory")


class _FcfIsdnPriSignalling_Type(Integer32):
    """Custom type fcfIsdnPriSignalling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcfIsdnPriSignalling_Type.__name__ = "Integer32"
_FcfIsdnPriSignalling_Object = MibTableColumn
fcfIsdnPriSignalling = _FcfIsdnPriSignalling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 2, 1, 2),
    _FcfIsdnPriSignalling_Type()
)
fcfIsdnPriSignalling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnPriSignalling.setStatus("mandatory")


class _FcfIsdnPriCountry_Type(Integer32):
    """Custom type fcfIsdnPriCountry based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("europeanIsdn", 5),
          ("franceVn2", 1),
          ("franceVn3", 2),
          ("switzerland", 4),
          ("unitedKingdom", 3))
    )


_FcfIsdnPriCountry_Type.__name__ = "Integer32"
_FcfIsdnPriCountry_Object = MibTableColumn
fcfIsdnPriCountry = _FcfIsdnPriCountry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 2, 1, 3),
    _FcfIsdnPriCountry_Type()
)
fcfIsdnPriCountry.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnPriCountry.setStatus("mandatory")


class _FcfIsdnPriINbBChannel_Type(Integer32):
    """Custom type fcfIsdnPriINbBChannel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30),
    )


_FcfIsdnPriINbBChannel_Type.__name__ = "Integer32"
_FcfIsdnPriINbBChannel_Object = MibTableColumn
fcfIsdnPriINbBChannel = _FcfIsdnPriINbBChannel_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 2, 1, 10),
    _FcfIsdnPriINbBChannel_Type()
)
fcfIsdnPriINbBChannel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnPriINbBChannel.setStatus("mandatory")


class _FcfIsdnPriCrc4_Type(Integer32):
    """Custom type fcfIsdnPriCrc4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcfIsdnPriCrc4_Type.__name__ = "Integer32"
_FcfIsdnPriCrc4_Object = MibTableColumn
fcfIsdnPriCrc4 = _FcfIsdnPriCrc4_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 2, 1, 11),
    _FcfIsdnPriCrc4_Type()
)
fcfIsdnPriCrc4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnPriCrc4.setStatus("mandatory")
_FcfIsdnDChannelSignallingTable_Object = MibTable
fcfIsdnDChannelSignallingTable = _FcfIsdnDChannelSignallingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10)
)
if mibBuilder.loadTexts:
    fcfIsdnDChannelSignallingTable.setStatus("mandatory")
_FcfIsdnDChannelSignallingEntry_Object = MibTableRow
fcfIsdnDChannelSignallingEntry = _FcfIsdnDChannelSignallingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1)
)
fcfIsdnDChannelSignallingEntry.setIndexNames(
    (0, "PCE-MIB", "fcfIsdnDSigIsdnInterfaceId"),
)
if mibBuilder.loadTexts:
    fcfIsdnDChannelSignallingEntry.setStatus("mandatory")


class _FcfIsdnDSigIsdnInterfaceId_Type(Integer32):
    """Custom type fcfIsdnDSigIsdnInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcfIsdnDSigIsdnInterfaceId_Type.__name__ = "Integer32"
_FcfIsdnDSigIsdnInterfaceId_Object = MibTableColumn
fcfIsdnDSigIsdnInterfaceId = _FcfIsdnDSigIsdnInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 1),
    _FcfIsdnDSigIsdnInterfaceId_Type()
)
fcfIsdnDSigIsdnInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfIsdnDSigIsdnInterfaceId.setStatus("mandatory")


class _FcfIsdnDSigIsdnNumber_Type(OctetString):
    """Custom type fcfIsdnDSigIsdnNumber based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(11, 11),
    )


_FcfIsdnDSigIsdnNumber_Type.__name__ = "OctetString"
_FcfIsdnDSigIsdnNumber_Object = MibTableColumn
fcfIsdnDSigIsdnNumber = _FcfIsdnDSigIsdnNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 2),
    _FcfIsdnDSigIsdnNumber_Type()
)
fcfIsdnDSigIsdnNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnDSigIsdnNumber.setStatus("mandatory")


class _FcfIsdnDSigUnuseTimer_Type(Integer32):
    """Custom type fcfIsdnDSigUnuseTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2550),
    )


_FcfIsdnDSigUnuseTimer_Type.__name__ = "Integer32"
_FcfIsdnDSigUnuseTimer_Object = MibTableColumn
fcfIsdnDSigUnuseTimer = _FcfIsdnDSigUnuseTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 3),
    _FcfIsdnDSigUnuseTimer_Type()
)
fcfIsdnDSigUnuseTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnDSigUnuseTimer.setStatus("mandatory")


class _FcfIsdnDSigCalledSubAddressCheck_Type(Integer32):
    """Custom type fcfIsdnDSigCalledSubAddressCheck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcfIsdnDSigCalledSubAddressCheck_Type.__name__ = "Integer32"
_FcfIsdnDSigCalledSubAddressCheck_Object = MibTableColumn
fcfIsdnDSigCalledSubAddressCheck = _FcfIsdnDSigCalledSubAddressCheck_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 4),
    _FcfIsdnDSigCalledSubAddressCheck_Type()
)
fcfIsdnDSigCalledSubAddressCheck.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnDSigCalledSubAddressCheck.setStatus("mandatory")


class _FcfIsdnDSigDirectInwardDialingCheck_Type(Integer32):
    """Custom type fcfIsdnDSigDirectInwardDialingCheck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcfIsdnDSigDirectInwardDialingCheck_Type.__name__ = "Integer32"
_FcfIsdnDSigDirectInwardDialingCheck_Object = MibTableColumn
fcfIsdnDSigDirectInwardDialingCheck = _FcfIsdnDSigDirectInwardDialingCheck_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 5),
    _FcfIsdnDSigDirectInwardDialingCheck_Type()
)
fcfIsdnDSigDirectInwardDialingCheck.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnDSigDirectInwardDialingCheck.setStatus("mandatory")


class _FcfIsdnDSigInactivityTimer_Type(Integer32):
    """Custom type fcfIsdnDSigInactivityTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 120),
    )


_FcfIsdnDSigInactivityTimer_Type.__name__ = "Integer32"
_FcfIsdnDSigInactivityTimer_Object = MibTableColumn
fcfIsdnDSigInactivityTimer = _FcfIsdnDSigInactivityTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 6),
    _FcfIsdnDSigInactivityTimer_Type()
)
fcfIsdnDSigInactivityTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnDSigInactivityTimer.setStatus("mandatory")


class _FcfIsdnDSigMulDialsRetryTimer_Type(Integer32):
    """Custom type fcfIsdnDSigMulDialsRetryTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_FcfIsdnDSigMulDialsRetryTimer_Type.__name__ = "Integer32"
_FcfIsdnDSigMulDialsRetryTimer_Object = MibTableColumn
fcfIsdnDSigMulDialsRetryTimer = _FcfIsdnDSigMulDialsRetryTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 10),
    _FcfIsdnDSigMulDialsRetryTimer_Type()
)
fcfIsdnDSigMulDialsRetryTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnDSigMulDialsRetryTimer.setStatus("mandatory")


class _FcfIsdnDSigMulDialsCycleTimer_Type(Integer32):
    """Custom type fcfIsdnDSigMulDialsCycleTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_FcfIsdnDSigMulDialsCycleTimer_Type.__name__ = "Integer32"
_FcfIsdnDSigMulDialsCycleTimer_Object = MibTableColumn
fcfIsdnDSigMulDialsCycleTimer = _FcfIsdnDSigMulDialsCycleTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 11),
    _FcfIsdnDSigMulDialsCycleTimer_Type()
)
fcfIsdnDSigMulDialsCycleTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnDSigMulDialsCycleTimer.setStatus("mandatory")


class _FcfIsdnDSigMulDialsCycleCount_Type(Integer32):
    """Custom type fcfIsdnDSigMulDialsCycleCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FcfIsdnDSigMulDialsCycleCount_Type.__name__ = "Integer32"
_FcfIsdnDSigMulDialsCycleCount_Object = MibTableColumn
fcfIsdnDSigMulDialsCycleCount = _FcfIsdnDSigMulDialsCycleCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 12),
    _FcfIsdnDSigMulDialsCycleCount_Type()
)
fcfIsdnDSigMulDialsCycleCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnDSigMulDialsCycleCount.setStatus("mandatory")


class _FcfIsdnDSigMulDialsTotalDuration_Type(Integer32):
    """Custom type fcfIsdnDSigMulDialsTotalDuration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 100),
    )


_FcfIsdnDSigMulDialsTotalDuration_Type.__name__ = "Integer32"
_FcfIsdnDSigMulDialsTotalDuration_Object = MibTableColumn
fcfIsdnDSigMulDialsTotalDuration = _FcfIsdnDSigMulDialsTotalDuration_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 13),
    _FcfIsdnDSigMulDialsTotalDuration_Type()
)
fcfIsdnDSigMulDialsTotalDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnDSigMulDialsTotalDuration.setStatus("mandatory")


class _FcfIsdnDSigLowLayerCompatibility_Type(Integer32):
    """Custom type fcfIsdnDSigLowLayerCompatibility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notTransmittedAndChecked", 3),
          ("notTransmittedAndNotChecked", 1),
          ("transmittedAndChecked", 4),
          ("transmittedAndNotChecked", 2))
    )


_FcfIsdnDSigLowLayerCompatibility_Type.__name__ = "Integer32"
_FcfIsdnDSigLowLayerCompatibility_Object = MibTableColumn
fcfIsdnDSigLowLayerCompatibility = _FcfIsdnDSigLowLayerCompatibility_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 20),
    _FcfIsdnDSigLowLayerCompatibility_Type()
)
fcfIsdnDSigLowLayerCompatibility.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnDSigLowLayerCompatibility.setStatus("mandatory")


class _FcfIsdnDSigHighLayerCompatibility_Type(Integer32):
    """Custom type fcfIsdnDSigHighLayerCompatibility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notTransmittedAndChecked", 3),
          ("notTransmittedAndNotChecked", 1),
          ("transmittedAndChecked", 4),
          ("transmittedAndNotChecked", 2))
    )


_FcfIsdnDSigHighLayerCompatibility_Type.__name__ = "Integer32"
_FcfIsdnDSigHighLayerCompatibility_Object = MibTableColumn
fcfIsdnDSigHighLayerCompatibility = _FcfIsdnDSigHighLayerCompatibility_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 21),
    _FcfIsdnDSigHighLayerCompatibility_Type()
)
fcfIsdnDSigHighLayerCompatibility.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnDSigHighLayerCompatibility.setStatus("mandatory")


class _FcfIsdnDSigHighLayerCharactIdent_Type(Integer32):
    """Custom type fcfIsdnDSigHighLayerCharactIdent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(128,
              193,
              255)
        )
    )
    namedValues = NamedValues(
        *(("ccittOsiApplication", 193),
          ("nationalNotStandardizedApplication", 255),
          ("nationalUnknownNetworkedService", 128))
    )


_FcfIsdnDSigHighLayerCharactIdent_Type.__name__ = "Integer32"
_FcfIsdnDSigHighLayerCharactIdent_Object = MibTableColumn
fcfIsdnDSigHighLayerCharactIdent = _FcfIsdnDSigHighLayerCharactIdent_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 22),
    _FcfIsdnDSigHighLayerCharactIdent_Type()
)
fcfIsdnDSigHighLayerCharactIdent.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnDSigHighLayerCharactIdent.setStatus("mandatory")
_FcfIsdnDChannelSigTimerTable_Object = MibTable
fcfIsdnDChannelSigTimerTable = _FcfIsdnDChannelSigTimerTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 11)
)
if mibBuilder.loadTexts:
    fcfIsdnDChannelSigTimerTable.setStatus("mandatory")
_FcfIsdnDChannelSigTimerEntry_Object = MibTableRow
fcfIsdnDChannelSigTimerEntry = _FcfIsdnDChannelSigTimerEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 11, 1)
)
fcfIsdnDChannelSigTimerEntry.setIndexNames(
    (0, "PCE-MIB", "fcfIsdnDTimIsdnInterfaceId"),
)
if mibBuilder.loadTexts:
    fcfIsdnDChannelSigTimerEntry.setStatus("mandatory")


class _FcfIsdnDTimIsdnInterfaceId_Type(Integer32):
    """Custom type fcfIsdnDTimIsdnInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcfIsdnDTimIsdnInterfaceId_Type.__name__ = "Integer32"
_FcfIsdnDTimIsdnInterfaceId_Object = MibTableColumn
fcfIsdnDTimIsdnInterfaceId = _FcfIsdnDTimIsdnInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 11, 1, 1),
    _FcfIsdnDTimIsdnInterfaceId_Type()
)
fcfIsdnDTimIsdnInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfIsdnDTimIsdnInterfaceId.setStatus("mandatory")


class _FcfIsdnDTimBChannelUpTimer_Type(Integer32):
    """Custom type fcfIsdnDTimBChannelUpTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2550),
    )


_FcfIsdnDTimBChannelUpTimer_Type.__name__ = "Integer32"
_FcfIsdnDTimBChannelUpTimer_Object = MibTableColumn
fcfIsdnDTimBChannelUpTimer = _FcfIsdnDTimBChannelUpTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 11, 1, 2),
    _FcfIsdnDTimBChannelUpTimer_Type()
)
fcfIsdnDTimBChannelUpTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnDTimBChannelUpTimer.setStatus("mandatory")


class _FcfIsdnDTimT301AlertConnectTimer_Type(Integer32):
    """Custom type fcfIsdnDTimT301AlertConnectTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2550),
    )


_FcfIsdnDTimT301AlertConnectTimer_Type.__name__ = "Integer32"
_FcfIsdnDTimT301AlertConnectTimer_Object = MibTableColumn
fcfIsdnDTimT301AlertConnectTimer = _FcfIsdnDTimT301AlertConnectTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 11, 1, 10),
    _FcfIsdnDTimT301AlertConnectTimer_Type()
)
fcfIsdnDTimT301AlertConnectTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnDTimT301AlertConnectTimer.setStatus("mandatory")


class _FcfIsdnDTimT303SetupResponseTimer_Type(Integer32):
    """Custom type fcfIsdnDTimT303SetupResponseTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FcfIsdnDTimT303SetupResponseTimer_Type.__name__ = "Integer32"
_FcfIsdnDTimT303SetupResponseTimer_Object = MibTableColumn
fcfIsdnDTimT303SetupResponseTimer = _FcfIsdnDTimT303SetupResponseTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 11, 1, 11),
    _FcfIsdnDTimT303SetupResponseTimer_Type()
)
fcfIsdnDTimT303SetupResponseTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnDTimT303SetupResponseTimer.setStatus("mandatory")


class _FcfIsdnDTimT305DisconnectResponseTimer_Type(Integer32):
    """Custom type fcfIsdnDTimT305DisconnectResponseTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FcfIsdnDTimT305DisconnectResponseTimer_Type.__name__ = "Integer32"
_FcfIsdnDTimT305DisconnectResponseTimer_Object = MibTableColumn
fcfIsdnDTimT305DisconnectResponseTimer = _FcfIsdnDTimT305DisconnectResponseTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 11, 1, 12),
    _FcfIsdnDTimT305DisconnectResponseTimer_Type()
)
fcfIsdnDTimT305DisconnectResponseTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnDTimT305DisconnectResponseTimer.setStatus("mandatory")


class _FcfIsdnDTimT308ReleaseResponseTimer_Type(Integer32):
    """Custom type fcfIsdnDTimT308ReleaseResponseTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FcfIsdnDTimT308ReleaseResponseTimer_Type.__name__ = "Integer32"
_FcfIsdnDTimT308ReleaseResponseTimer_Object = MibTableColumn
fcfIsdnDTimT308ReleaseResponseTimer = _FcfIsdnDTimT308ReleaseResponseTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 11, 1, 13),
    _FcfIsdnDTimT308ReleaseResponseTimer_Type()
)
fcfIsdnDTimT308ReleaseResponseTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnDTimT308ReleaseResponseTimer.setStatus("mandatory")


class _FcfIsdnDTimT309DataLinkFailureTimer_Type(Integer32):
    """Custom type fcfIsdnDTimT309DataLinkFailureTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 180),
    )


_FcfIsdnDTimT309DataLinkFailureTimer_Type.__name__ = "Integer32"
_FcfIsdnDTimT309DataLinkFailureTimer_Object = MibTableColumn
fcfIsdnDTimT309DataLinkFailureTimer = _FcfIsdnDTimT309DataLinkFailureTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 11, 1, 14),
    _FcfIsdnDTimT309DataLinkFailureTimer_Type()
)
fcfIsdnDTimT309DataLinkFailureTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnDTimT309DataLinkFailureTimer.setStatus("mandatory")


class _FcfIsdnDTimT310CallProceedingTimer_Type(Integer32):
    """Custom type fcfIsdnDTimT310CallProceedingTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FcfIsdnDTimT310CallProceedingTimer_Type.__name__ = "Integer32"
_FcfIsdnDTimT310CallProceedingTimer_Object = MibTableColumn
fcfIsdnDTimT310CallProceedingTimer = _FcfIsdnDTimT310CallProceedingTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 11, 1, 15),
    _FcfIsdnDTimT310CallProceedingTimer_Type()
)
fcfIsdnDTimT310CallProceedingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnDTimT310CallProceedingTimer.setStatus("mandatory")


class _FcfIsdnDTimT313ConnectAcknowledgeTimer_Type(Integer32):
    """Custom type fcfIsdnDTimT313ConnectAcknowledgeTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FcfIsdnDTimT313ConnectAcknowledgeTimer_Type.__name__ = "Integer32"
_FcfIsdnDTimT313ConnectAcknowledgeTimer_Object = MibTableColumn
fcfIsdnDTimT313ConnectAcknowledgeTimer = _FcfIsdnDTimT313ConnectAcknowledgeTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 11, 1, 16),
    _FcfIsdnDTimT313ConnectAcknowledgeTimer_Type()
)
fcfIsdnDTimT313ConnectAcknowledgeTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnDTimT313ConnectAcknowledgeTimer.setStatus("mandatory")
_FcfIsdnRemotePeerTable_Object = MibTable
fcfIsdnRemotePeerTable = _FcfIsdnRemotePeerTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 20)
)
if mibBuilder.loadTexts:
    fcfIsdnRemotePeerTable.setStatus("mandatory")
_FcfIsdnRemotePeerEntry_Object = MibTableRow
fcfIsdnRemotePeerEntry = _FcfIsdnRemotePeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 20, 1)
)
fcfIsdnRemotePeerEntry.setIndexNames(
    (0, "PCE-MIB", "fcfIsdnRemRemotePeerId"),
)
if mibBuilder.loadTexts:
    fcfIsdnRemotePeerEntry.setStatus("mandatory")


class _FcfIsdnRemRemotePeerId_Type(Integer32):
    """Custom type fcfIsdnRemRemotePeerId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 999),
    )


_FcfIsdnRemRemotePeerId_Type.__name__ = "Integer32"
_FcfIsdnRemRemotePeerId_Object = MibTableColumn
fcfIsdnRemRemotePeerId = _FcfIsdnRemRemotePeerId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 20, 1, 1),
    _FcfIsdnRemRemotePeerId_Type()
)
fcfIsdnRemRemotePeerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfIsdnRemRemotePeerId.setStatus("mandatory")


class _FcfIsdnRemStatus_Type(Integer32):
    """Custom type fcfIsdnRemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcfIsdnRemStatus_Type.__name__ = "Integer32"
_FcfIsdnRemStatus_Object = MibTableColumn
fcfIsdnRemStatus = _FcfIsdnRemStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 20, 1, 2),
    _FcfIsdnRemStatus_Type()
)
fcfIsdnRemStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnRemStatus.setStatus("mandatory")


class _FcfIsdnRemIsdnNumber_Type(OctetString):
    """Custom type fcfIsdnRemIsdnNumber based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(11, 11),
    )


_FcfIsdnRemIsdnNumber_Type.__name__ = "OctetString"
_FcfIsdnRemIsdnNumber_Object = MibTableColumn
fcfIsdnRemIsdnNumber = _FcfIsdnRemIsdnNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 20, 1, 3),
    _FcfIsdnRemIsdnNumber_Type()
)
fcfIsdnRemIsdnNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnRemIsdnNumber.setStatus("mandatory")


class _FcfIsdnRemCallDirection_Type(Integer32):
    """Custom type fcfIsdnRemCallDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(16,
              32,
              48)
        )
    )
    namedValues = NamedValues(
        *(("auto", 48),
          ("called", 16),
          ("calling", 32))
    )


_FcfIsdnRemCallDirection_Type.__name__ = "Integer32"
_FcfIsdnRemCallDirection_Object = MibTableColumn
fcfIsdnRemCallDirection = _FcfIsdnRemCallDirection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 20, 1, 4),
    _FcfIsdnRemCallDirection_Type()
)
fcfIsdnRemCallDirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfIsdnRemCallDirection.setStatus("mandatory")
_FcfE1Ds1_ObjectIdentity = ObjectIdentity
fcfE1Ds1 = _FcfE1Ds1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15)
)
_FcfE1Ds1PhysTable_Object = MibTable
fcfE1Ds1PhysTable = _FcfE1Ds1PhysTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 1)
)
if mibBuilder.loadTexts:
    fcfE1Ds1PhysTable.setStatus("mandatory")
_FcfE1Ds1PhysEntry_Object = MibTableRow
fcfE1Ds1PhysEntry = _FcfE1Ds1PhysEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 1, 1)
)
fcfE1Ds1PhysEntry.setIndexNames(
    (0, "PCE-MIB", "fcfE1Ds1PhysIfId"),
)
if mibBuilder.loadTexts:
    fcfE1Ds1PhysEntry.setStatus("mandatory")


class _FcfE1Ds1PhysIfId_Type(Integer32):
    """Custom type fcfE1Ds1PhysIfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcfE1Ds1PhysIfId_Type.__name__ = "Integer32"
_FcfE1Ds1PhysIfId_Object = MibTableColumn
fcfE1Ds1PhysIfId = _FcfE1Ds1PhysIfId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 1, 1, 1),
    _FcfE1Ds1PhysIfId_Type()
)
fcfE1Ds1PhysIfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfE1Ds1PhysIfId.setStatus("mandatory")


class _FcfE1Ds1PhysStatus_Type(Integer32):
    """Custom type fcfE1Ds1PhysStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcfE1Ds1PhysStatus_Type.__name__ = "Integer32"
_FcfE1Ds1PhysStatus_Object = MibTableColumn
fcfE1Ds1PhysStatus = _FcfE1Ds1PhysStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 1, 1, 2),
    _FcfE1Ds1PhysStatus_Type()
)
fcfE1Ds1PhysStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfE1Ds1PhysStatus.setStatus("mandatory")


class _FcfE1Ds1PhysPhysicalPort_Type(Integer32):
    """Custom type fcfE1Ds1PhysPhysicalPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcfE1Ds1PhysPhysicalPort_Type.__name__ = "Integer32"
_FcfE1Ds1PhysPhysicalPort_Object = MibTableColumn
fcfE1Ds1PhysPhysicalPort = _FcfE1Ds1PhysPhysicalPort_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 1, 1, 3),
    _FcfE1Ds1PhysPhysicalPort_Type()
)
fcfE1Ds1PhysPhysicalPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfE1Ds1PhysPhysicalPort.setStatus("mandatory")
_FcfE1PhysPortTable_Object = MibTable
fcfE1PhysPortTable = _FcfE1PhysPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 3)
)
if mibBuilder.loadTexts:
    fcfE1PhysPortTable.setStatus("mandatory")
_FcfE1PhysPortEntry_Object = MibTableRow
fcfE1PhysPortEntry = _FcfE1PhysPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 3, 1)
)
fcfE1PhysPortEntry.setIndexNames(
    (0, "PCE-MIB", "fcfE1PhysPortId"),
)
if mibBuilder.loadTexts:
    fcfE1PhysPortEntry.setStatus("mandatory")


class _FcfE1PhysPortId_Type(Integer32):
    """Custom type fcfE1PhysPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcfE1PhysPortId_Type.__name__ = "Integer32"
_FcfE1PhysPortId_Object = MibTableColumn
fcfE1PhysPortId = _FcfE1PhysPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 3, 1, 1),
    _FcfE1PhysPortId_Type()
)
fcfE1PhysPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfE1PhysPortId.setStatus("mandatory")


class _FcfE1PhysPortSynchSrc_Type(Integer32):
    """Custom type fcfE1PhysPortSynchSrc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("freeRun", 2),
          ("network", 1))
    )


_FcfE1PhysPortSynchSrc_Type.__name__ = "Integer32"
_FcfE1PhysPortSynchSrc_Object = MibTableColumn
fcfE1PhysPortSynchSrc = _FcfE1PhysPortSynchSrc_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 3, 1, 2),
    _FcfE1PhysPortSynchSrc_Type()
)
fcfE1PhysPortSynchSrc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfE1PhysPortSynchSrc.setStatus("mandatory")


class _FcfE1PhysPortFraming_Type(Integer32):
    """Custom type fcfE1PhysPortFraming based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("doubleframe", 1),
          ("extendedCrc4", 3),
          ("multiframeWithCrc4", 2))
    )


_FcfE1PhysPortFraming_Type.__name__ = "Integer32"
_FcfE1PhysPortFraming_Object = MibTableColumn
fcfE1PhysPortFraming = _FcfE1PhysPortFraming_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 3, 1, 3),
    _FcfE1PhysPortFraming_Type()
)
fcfE1PhysPortFraming.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfE1PhysPortFraming.setStatus("mandatory")


class _FcfE1PhysPortFlowType_Type(Integer32):
    """Custom type fcfE1PhysPortFlowType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("data", 1),
          ("voice", 2),
          ("voiceAndData", 3))
    )


_FcfE1PhysPortFlowType_Type.__name__ = "Integer32"
_FcfE1PhysPortFlowType_Object = MibTableColumn
fcfE1PhysPortFlowType = _FcfE1PhysPortFlowType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 3, 1, 4),
    _FcfE1PhysPortFlowType_Type()
)
fcfE1PhysPortFlowType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfE1PhysPortFlowType.setStatus("mandatory")
_FcfE1Ds1ChannelTable_Object = MibTable
fcfE1Ds1ChannelTable = _FcfE1Ds1ChannelTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 5)
)
if mibBuilder.loadTexts:
    fcfE1Ds1ChannelTable.setStatus("mandatory")
_FcfE1Ds1ChannelEntry_Object = MibTableRow
fcfE1Ds1ChannelEntry = _FcfE1Ds1ChannelEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 5, 1)
)
fcfE1Ds1ChannelEntry.setIndexNames(
    (0, "PCE-MIB", "fcfE1Ds1ChannelIfId"),
)
if mibBuilder.loadTexts:
    fcfE1Ds1ChannelEntry.setStatus("mandatory")


class _FcfE1Ds1ChannelIfId_Type(Integer32):
    """Custom type fcfE1Ds1ChannelIfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(42, 181),
    )


_FcfE1Ds1ChannelIfId_Type.__name__ = "Integer32"
_FcfE1Ds1ChannelIfId_Object = MibTableColumn
fcfE1Ds1ChannelIfId = _FcfE1Ds1ChannelIfId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 5, 1, 1),
    _FcfE1Ds1ChannelIfId_Type()
)
fcfE1Ds1ChannelIfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfE1Ds1ChannelIfId.setStatus("mandatory")


class _FcfE1Ds1ChannelStatus_Type(Integer32):
    """Custom type fcfE1Ds1ChannelStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcfE1Ds1ChannelStatus_Type.__name__ = "Integer32"
_FcfE1Ds1ChannelStatus_Object = MibTableColumn
fcfE1Ds1ChannelStatus = _FcfE1Ds1ChannelStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 5, 1, 2),
    _FcfE1Ds1ChannelStatus_Type()
)
fcfE1Ds1ChannelStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfE1Ds1ChannelStatus.setStatus("mandatory")


class _FcfE1Ds1ChannelPhysIf_Type(Integer32):
    """Custom type fcfE1Ds1ChannelPhysIf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcfE1Ds1ChannelPhysIf_Type.__name__ = "Integer32"
_FcfE1Ds1ChannelPhysIf_Object = MibTableColumn
fcfE1Ds1ChannelPhysIf = _FcfE1Ds1ChannelPhysIf_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 5, 1, 3),
    _FcfE1Ds1ChannelPhysIf_Type()
)
fcfE1Ds1ChannelPhysIf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfE1Ds1ChannelPhysIf.setStatus("mandatory")


class _FcfE1Ds1ChannelSlots_Type(DisplayString):
    """Custom type fcfE1Ds1ChannelSlots based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 24),
    )


_FcfE1Ds1ChannelSlots_Type.__name__ = "DisplayString"
_FcfE1Ds1ChannelSlots_Object = MibTableColumn
fcfE1Ds1ChannelSlots = _FcfE1Ds1ChannelSlots_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 5, 1, 4),
    _FcfE1Ds1ChannelSlots_Type()
)
fcfE1Ds1ChannelSlots.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfE1Ds1ChannelSlots.setStatus("mandatory")
_FcfE1Ds1DropInsertTable_Object = MibTable
fcfE1Ds1DropInsertTable = _FcfE1Ds1DropInsertTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 10)
)
if mibBuilder.loadTexts:
    fcfE1Ds1DropInsertTable.setStatus("mandatory")
_FcfE1Ds1DropInsertEntry_Object = MibTableRow
fcfE1Ds1DropInsertEntry = _FcfE1Ds1DropInsertEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 10, 1)
)
fcfE1Ds1DropInsertEntry.setIndexNames(
    (0, "PCE-MIB", "fcfE1Ds1DropInsertIf1"),
    (0, "PCE-MIB", "fcfE1Ds1DropInsertIf2"),
)
if mibBuilder.loadTexts:
    fcfE1Ds1DropInsertEntry.setStatus("mandatory")


class _FcfE1Ds1DropInsertIf1_Type(Integer32):
    """Custom type fcfE1Ds1DropInsertIf1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(42, 181),
    )


_FcfE1Ds1DropInsertIf1_Type.__name__ = "Integer32"
_FcfE1Ds1DropInsertIf1_Object = MibTableColumn
fcfE1Ds1DropInsertIf1 = _FcfE1Ds1DropInsertIf1_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 10, 1, 1),
    _FcfE1Ds1DropInsertIf1_Type()
)
fcfE1Ds1DropInsertIf1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfE1Ds1DropInsertIf1.setStatus("mandatory")


class _FcfE1Ds1DropInsertIf2_Type(Integer32):
    """Custom type fcfE1Ds1DropInsertIf2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(42, 181),
    )


_FcfE1Ds1DropInsertIf2_Type.__name__ = "Integer32"
_FcfE1Ds1DropInsertIf2_Object = MibTableColumn
fcfE1Ds1DropInsertIf2 = _FcfE1Ds1DropInsertIf2_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 10, 1, 2),
    _FcfE1Ds1DropInsertIf2_Type()
)
fcfE1Ds1DropInsertIf2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfE1Ds1DropInsertIf2.setStatus("mandatory")


class _FcfE1Ds1DropInsertStatus_Type(Integer32):
    """Custom type fcfE1Ds1DropInsertStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcfE1Ds1DropInsertStatus_Type.__name__ = "Integer32"
_FcfE1Ds1DropInsertStatus_Object = MibTableColumn
fcfE1Ds1DropInsertStatus = _FcfE1Ds1DropInsertStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 10, 1, 3),
    _FcfE1Ds1DropInsertStatus_Type()
)
fcfE1Ds1DropInsertStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfE1Ds1DropInsertStatus.setStatus("mandatory")
_FcfTokenRing_ObjectIdentity = ObjectIdentity
fcfTokenRing = _FcfTokenRing_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 20)
)
_FcfTokenRingTable_Object = MibTable
fcfTokenRingTable = _FcfTokenRingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 20, 1)
)
if mibBuilder.loadTexts:
    fcfTokenRingTable.setStatus("mandatory")
_FcfTokenRingEntry_Object = MibTableRow
fcfTokenRingEntry = _FcfTokenRingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 20, 1, 1)
)
fcfTokenRingEntry.setIndexNames(
    (0, "PCE-MIB", "fcfTokenRingInterfaceId"),
)
if mibBuilder.loadTexts:
    fcfTokenRingEntry.setStatus("mandatory")


class _FcfTokenRingInterfaceId_Type(Integer32):
    """Custom type fcfTokenRingInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcfTokenRingInterfaceId_Type.__name__ = "Integer32"
_FcfTokenRingInterfaceId_Object = MibTableColumn
fcfTokenRingInterfaceId = _FcfTokenRingInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 20, 1, 1, 1),
    _FcfTokenRingInterfaceId_Type()
)
fcfTokenRingInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcfTokenRingInterfaceId.setStatus("mandatory")


class _FcfTokenRingSpeed_Type(Integer32):
    """Custom type fcfTokenRingSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("s16000000", 2),
          ("s4000000", 1))
    )


_FcfTokenRingSpeed_Type.__name__ = "Integer32"
_FcfTokenRingSpeed_Object = MibTableColumn
fcfTokenRingSpeed = _FcfTokenRingSpeed_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 20, 1, 1, 2),
    _FcfTokenRingSpeed_Type()
)
fcfTokenRingSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfTokenRingSpeed.setStatus("mandatory")


class _FcfTokenRingLinkCheckPeriod_Type(Integer32):
    """Custom type fcfTokenRingLinkCheckPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FcfTokenRingLinkCheckPeriod_Type.__name__ = "Integer32"
_FcfTokenRingLinkCheckPeriod_Object = MibTableColumn
fcfTokenRingLinkCheckPeriod = _FcfTokenRingLinkCheckPeriod_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 20, 1, 1, 3),
    _FcfTokenRingLinkCheckPeriod_Type()
)
fcfTokenRingLinkCheckPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfTokenRingLinkCheckPeriod.setStatus("mandatory")


class _FcfTokenRingCheckPeriodCount_Type(Integer32):
    """Custom type fcfTokenRingCheckPeriodCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 250),
    )


_FcfTokenRingCheckPeriodCount_Type.__name__ = "Integer32"
_FcfTokenRingCheckPeriodCount_Object = MibTableColumn
fcfTokenRingCheckPeriodCount = _FcfTokenRingCheckPeriodCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 20, 1, 1, 4),
    _FcfTokenRingCheckPeriodCount_Type()
)
fcfTokenRingCheckPeriodCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcfTokenRingCheckPeriodCount.setStatus("mandatory")
_FcFrameRelaySwitch_ObjectIdentity = ObjectIdentity
fcFrameRelaySwitch = _FcFrameRelaySwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 15)
)
_FcFrSwitchingTable_Object = MibTable
fcFrSwitchingTable = _FcFrSwitchingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 15, 1)
)
if mibBuilder.loadTexts:
    fcFrSwitchingTable.setStatus("mandatory")
_FcFrSwitchingEntry_Object = MibTableRow
fcFrSwitchingEntry = _FcFrSwitchingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 15, 1, 1)
)
fcFrSwitchingEntry.setIndexNames(
    (0, "PCE-MIB", "fcFrSwInputInterfaceId"),
    (0, "PCE-MIB", "fcFrSwInputDlci"),
)
if mibBuilder.loadTexts:
    fcFrSwitchingEntry.setStatus("mandatory")


class _FcFrSwInputInterfaceId_Type(Integer32):
    """Custom type fcFrSwInputInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcFrSwInputInterfaceId_Type.__name__ = "Integer32"
_FcFrSwInputInterfaceId_Object = MibTableColumn
fcFrSwInputInterfaceId = _FcFrSwInputInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 15, 1, 1, 1),
    _FcFrSwInputInterfaceId_Type()
)
fcFrSwInputInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcFrSwInputInterfaceId.setStatus("mandatory")


class _FcFrSwInputDlci_Type(Integer32):
    """Custom type fcFrSwInputDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 991),
    )


_FcFrSwInputDlci_Type.__name__ = "Integer32"
_FcFrSwInputDlci_Object = MibTableColumn
fcFrSwInputDlci = _FcFrSwInputDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 15, 1, 1, 2),
    _FcFrSwInputDlci_Type()
)
fcFrSwInputDlci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcFrSwInputDlci.setStatus("mandatory")


class _FcFrSwStatus_Type(Integer32):
    """Custom type fcFrSwStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcFrSwStatus_Type.__name__ = "Integer32"
_FcFrSwStatus_Object = MibTableColumn
fcFrSwStatus = _FcFrSwStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 15, 1, 1, 3),
    _FcFrSwStatus_Type()
)
fcFrSwStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcFrSwStatus.setStatus("mandatory")


class _FcFrSwOutputInterfaceId_Type(Integer32):
    """Custom type fcFrSwOutputInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FcFrSwOutputInterfaceId_Type.__name__ = "Integer32"
_FcFrSwOutputInterfaceId_Object = MibTableColumn
fcFrSwOutputInterfaceId = _FcFrSwOutputInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 15, 1, 1, 4),
    _FcFrSwOutputInterfaceId_Type()
)
fcFrSwOutputInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcFrSwOutputInterfaceId.setStatus("mandatory")


class _FcFrSwOutputDlci_Type(Integer32):
    """Custom type fcFrSwOutputDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 991),
    )


_FcFrSwOutputDlci_Type.__name__ = "Integer32"
_FcFrSwOutputDlci_Object = MibTableColumn
fcFrSwOutputDlci = _FcFrSwOutputDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 15, 1, 1, 5),
    _FcFrSwOutputDlci_Type()
)
fcFrSwOutputDlci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcFrSwOutputDlci.setStatus("mandatory")


class _FcFrSwPriority_Type(Integer32):
    """Custom type fcFrSwPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcFrSwPriority_Type.__name__ = "Integer32"
_FcFrSwPriority_Object = MibTableColumn
fcFrSwPriority = _FcFrSwPriority_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 15, 1, 1, 6),
    _FcFrSwPriority_Type()
)
fcFrSwPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcFrSwPriority.setStatus("mandatory")
_FcLogicalPorts_ObjectIdentity = ObjectIdentity
fcLogicalPorts = _FcLogicalPorts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20)
)
_FclLogicalPortTable_Object = MibTable
fclLogicalPortTable = _FclLogicalPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 1)
)
if mibBuilder.loadTexts:
    fclLogicalPortTable.setStatus("mandatory")
_FclLogicalPortEntry_Object = MibTableRow
fclLogicalPortEntry = _FclLogicalPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 1, 1)
)
fclLogicalPortEntry.setIndexNames(
    (0, "PCE-MIB", "fclLogPortId"),
)
if mibBuilder.loadTexts:
    fclLogicalPortEntry.setStatus("mandatory")


class _FclLogPortId_Type(Integer32):
    """Custom type fclLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclLogPortId_Type.__name__ = "Integer32"
_FclLogPortId_Object = MibTableColumn
fclLogPortId = _FclLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 1, 1, 1),
    _FclLogPortId_Type()
)
fclLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclLogPortId.setStatus("mandatory")


class _FclLogPortStatus_Type(Integer32):
    """Custom type fclLogPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclLogPortStatus_Type.__name__ = "Integer32"
_FclLogPortStatus_Object = MibTableColumn
fclLogPortStatus = _FclLogPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 1, 1, 2),
    _FclLogPortStatus_Type()
)
fclLogPortStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclLogPortStatus.setStatus("mandatory")


class _FclLogPortType_Type(Integer32):
    """Custom type fclLogPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              20,
              21,
              22,
              23,
              24,
              25,
              30,
              31,
              32,
              40,
              41,
              42,
              45,
              50)
        )
    )
    namedValues = NamedValues(
        *(("asynchronous", 10),
          ("bsc2780or3780", 16),
          ("bsc3270", 15),
          ("bscSCT", 17),
          ("ethernet-tr", 1),
          ("frCe", 40),
          ("frSe", 42),
          ("frSeInBIsdn", 45),
          ("frTe", 41),
          ("fra", 11),
          ("hdlc", 12),
          ("interUnitLink", 50),
          ("pppIsdn", 32),
          ("pppPstn", 31),
          ("pppSerialLink", 30),
          ("sdlc", 13),
          ("vip", 14),
          ("x25Access", 20),
          ("x25InBIsdn", 22),
          ("x25InDIsdn", 21),
          ("x25InPstn", 23),
          ("x25InterNode", 24),
          ("x25Mlp", 25))
    )


_FclLogPortType_Type.__name__ = "Integer32"
_FclLogPortType_Object = MibTableColumn
fclLogPortType = _FclLogPortType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 1, 1, 3),
    _FclLogPortType_Type()
)
fclLogPortType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclLogPortType.setStatus("mandatory")
_FclEthernet_ObjectIdentity = ObjectIdentity
fclEthernet = _FclEthernet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 2)
)
_FclEthernetTable_Object = MibTable
fclEthernetTable = _FclEthernetTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 2, 1)
)
if mibBuilder.loadTexts:
    fclEthernetTable.setStatus("mandatory")
_FclEthernetEntry_Object = MibTableRow
fclEthernetEntry = _FclEthernetEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 2, 1, 1)
)
fclEthernetEntry.setIndexNames(
    (0, "PCE-MIB", "fclEthLogPortId"),
)
if mibBuilder.loadTexts:
    fclEthernetEntry.setStatus("mandatory")


class _FclEthLogPortId_Type(Integer32):
    """Custom type fclEthLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclEthLogPortId_Type.__name__ = "Integer32"
_FclEthLogPortId_Object = MibTableColumn
fclEthLogPortId = _FclEthLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 2, 1, 1, 1),
    _FclEthLogPortId_Type()
)
fclEthLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclEthLogPortId.setStatus("mandatory")


class _FclEthInterfaceId_Type(Integer32):
    """Custom type fclEthInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclEthInterfaceId_Type.__name__ = "Integer32"
_FclEthInterfaceId_Object = MibTableColumn
fclEthInterfaceId = _FclEthInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 2, 1, 1, 2),
    _FclEthInterfaceId_Type()
)
fclEthInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclEthInterfaceId.setStatus("mandatory")
_FclAsynchronousAccessLogPort_ObjectIdentity = ObjectIdentity
fclAsynchronousAccessLogPort = _FclAsynchronousAccessLogPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5)
)
_FclAsynLogPortTable_Object = MibTable
fclAsynLogPortTable = _FclAsynLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 1)
)
if mibBuilder.loadTexts:
    fclAsynLogPortTable.setStatus("mandatory")
_FclAsynLogPortEntry_Object = MibTableRow
fclAsynLogPortEntry = _FclAsynLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 1, 1)
)
fclAsynLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "fclAsynLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclAsynLogPortEntry.setStatus("mandatory")


class _FclAsynLpLogPortId_Type(Integer32):
    """Custom type fclAsynLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclAsynLpLogPortId_Type.__name__ = "Integer32"
_FclAsynLpLogPortId_Object = MibTableColumn
fclAsynLpLogPortId = _FclAsynLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 1, 1, 1),
    _FclAsynLpLogPortId_Type()
)
fclAsynLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynLpLogPortId.setStatus("mandatory")


class _FclAsynLpInterfaceId_Type(Integer32):
    """Custom type fclAsynLpInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclAsynLpInterfaceId_Type.__name__ = "Integer32"
_FclAsynLpInterfaceId_Object = MibTableColumn
fclAsynLpInterfaceId = _FclAsynLpInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 1, 1, 2),
    _FclAsynLpInterfaceId_Type()
)
fclAsynLpInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynLpInterfaceId.setStatus("mandatory")


class _FclAsynLpSubscriberNumber_Type(OctetString):
    """Custom type fclAsynLpSubscriberNumber based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FclAsynLpSubscriberNumber_Type.__name__ = "OctetString"
_FclAsynLpSubscriberNumber_Object = MibTableColumn
fclAsynLpSubscriberNumber = _FclAsynLpSubscriberNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 1, 1, 3),
    _FclAsynLpSubscriberNumber_Type()
)
fclAsynLpSubscriberNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynLpSubscriberNumber.setStatus("mandatory")


class _FclAsynLpConfigId_Type(Integer32):
    """Custom type fclAsynLpConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclAsynLpConfigId_Type.__name__ = "Integer32"
_FclAsynLpConfigId_Object = MibTableColumn
fclAsynLpConfigId = _FclAsynLpConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 1, 1, 4),
    _FclAsynLpConfigId_Type()
)
fclAsynLpConfigId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynLpConfigId.setStatus("mandatory")


class _FclAsynLpTerminalType_Type(Integer32):
    """Custom type fclAsynLpTerminalType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              6,
              7,
              20)
        )
    )
    namedValues = NamedValues(
        *(("kioskClient", 7),
          ("lowSpeedComputerPort", 3),
          ("lowSpeedComputerPortWithAutoCalls", 4),
          ("multiStandardPad", 6),
          ("pad", 1),
          ("videotext", 2),
          ("x28Plus", 20))
    )


_FclAsynLpTerminalType_Type.__name__ = "Integer32"
_FclAsynLpTerminalType_Object = MibTableColumn
fclAsynLpTerminalType = _FclAsynLpTerminalType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 1, 1, 5),
    _FclAsynLpTerminalType_Type()
)
fclAsynLpTerminalType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynLpTerminalType.setStatus("mandatory")
_FclAsynPadLogPort_ObjectIdentity = ObjectIdentity
fclAsynPadLogPort = _FclAsynPadLogPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2)
)
_FclAsynPadLpTable_Object = MibTable
fclAsynPadLpTable = _FclAsynPadLpTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 1)
)
if mibBuilder.loadTexts:
    fclAsynPadLpTable.setStatus("mandatory")
_FclAsynPadLpEntry_Object = MibTableRow
fclAsynPadLpEntry = _FclAsynPadLpEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 1, 1)
)
fclAsynPadLpEntry.setIndexNames(
    (0, "PCE-MIB", "fclAsynPadLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclAsynPadLpEntry.setStatus("mandatory")


class _FclAsynPadLpLogPortId_Type(Integer32):
    """Custom type fclAsynPadLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclAsynPadLpLogPortId_Type.__name__ = "Integer32"
_FclAsynPadLpLogPortId_Object = MibTableColumn
fclAsynPadLpLogPortId = _FclAsynPadLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 1, 1, 1),
    _FclAsynPadLpLogPortId_Type()
)
fclAsynPadLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynPadLpLogPortId.setStatus("mandatory")


class _FclAsynPadLpLink_Type(Integer32):
    """Custom type fclAsynPadLpLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("direct", 3),
          ("directWithRtsCtsFlowCtrl", 4),
          ("leasedLine", 2),
          ("pstn", 1),
          ("pstnV25bis", 5))
    )


_FclAsynPadLpLink_Type.__name__ = "Integer32"
_FclAsynPadLpLink_Object = MibTableColumn
fclAsynPadLpLink = _FclAsynPadLpLink_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 1, 1, 2),
    _FclAsynPadLpLink_Type()
)
fclAsynPadLpLink.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynPadLpLink.setStatus("mandatory")


class _FclAsynPadLpSpeedDetection_Type(Integer32):
    """Custom type fclAsynPadLpSpeedDetection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclAsynPadLpSpeedDetection_Type.__name__ = "Integer32"
_FclAsynPadLpSpeedDetection_Object = MibTableColumn
fclAsynPadLpSpeedDetection = _FclAsynPadLpSpeedDetection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 1, 1, 3),
    _FclAsynPadLpSpeedDetection_Type()
)
fclAsynPadLpSpeedDetection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynPadLpSpeedDetection.setStatus("mandatory")


class _FclAsynPadLpEquipment_Type(Integer32):
    """Custom type fclAsynPadLpEquipment based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("hpHost", 2),
          ("hpTerminal", 3),
          ("other", 1))
    )


_FclAsynPadLpEquipment_Type.__name__ = "Integer32"
_FclAsynPadLpEquipment_Object = MibTableColumn
fclAsynPadLpEquipment = _FclAsynPadLpEquipment_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 1, 1, 4),
    _FclAsynPadLpEquipment_Type()
)
fclAsynPadLpEquipment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynPadLpEquipment.setStatus("mandatory")


class _FclAsynPadLpMnemonicType_Type(Integer32):
    """Custom type fclAsynPadLpMnemonicType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("pad", 1),
          ("vdxLocalAuth", 4),
          ("vdxRemoteAuth", 2),
          ("vdxTeletel", 3))
    )


_FclAsynPadLpMnemonicType_Type.__name__ = "Integer32"
_FclAsynPadLpMnemonicType_Object = MibTableColumn
fclAsynPadLpMnemonicType = _FclAsynPadLpMnemonicType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 1, 1, 5),
    _FclAsynPadLpMnemonicType_Type()
)
fclAsynPadLpMnemonicType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynPadLpMnemonicType.setStatus("mandatory")


class _FclAsynPadLpNui_Type(Integer32):
    """Custom type fclAsynPadLpNui based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              11)
        )
    )
    namedValues = NamedValues(
        *(("command-transmitOrRc", 11),
          ("mandatory-check", 2),
          ("mandatory-check-nua", 3),
          ("mandatory-transmit", 5),
          ("none", 1),
          ("none-rc", 7),
          ("optional-checkNuaOrRc", 4),
          ("optional-transmitOrRc", 6))
    )


_FclAsynPadLpNui_Type.__name__ = "Integer32"
_FclAsynPadLpNui_Object = MibTableColumn
fclAsynPadLpNui = _FclAsynPadLpNui_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 1, 1, 6),
    _FclAsynPadLpNui_Type()
)
fclAsynPadLpNui.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynPadLpNui.setStatus("mandatory")


class _FclAsynPadLpCombinedFlowCtrl_Type(Integer32):
    """Custom type fclAsynPadLpCombinedFlowCtrl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclAsynPadLpCombinedFlowCtrl_Type.__name__ = "Integer32"
_FclAsynPadLpCombinedFlowCtrl_Object = MibTableColumn
fclAsynPadLpCombinedFlowCtrl = _FclAsynPadLpCombinedFlowCtrl_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 1, 1, 7),
    _FclAsynPadLpCombinedFlowCtrl_Type()
)
fclAsynPadLpCombinedFlowCtrl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynPadLpCombinedFlowCtrl.setStatus("mandatory")
_FclAsynPadHomePageTable_Object = MibTable
fclAsynPadHomePageTable = _FclAsynPadHomePageTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 10)
)
if mibBuilder.loadTexts:
    fclAsynPadHomePageTable.setStatus("mandatory")
_FclAsynPadHomePageEntry_Object = MibTableRow
fclAsynPadHomePageEntry = _FclAsynPadHomePageEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 10, 1)
)
fclAsynPadHomePageEntry.setIndexNames(
    (0, "PCE-MIB", "fclAsynPadPageBlocId"),
)
if mibBuilder.loadTexts:
    fclAsynPadHomePageEntry.setStatus("mandatory")


class _FclAsynPadPageBlocId_Type(Integer32):
    """Custom type fclAsynPadPageBlocId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 19),
    )


_FclAsynPadPageBlocId_Type.__name__ = "Integer32"
_FclAsynPadPageBlocId_Object = MibTableColumn
fclAsynPadPageBlocId = _FclAsynPadPageBlocId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 10, 1, 1),
    _FclAsynPadPageBlocId_Type()
)
fclAsynPadPageBlocId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynPadPageBlocId.setStatus("mandatory")


class _FclAsynPadPageStatus_Type(Integer32):
    """Custom type fclAsynPadPageStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclAsynPadPageStatus_Type.__name__ = "Integer32"
_FclAsynPadPageStatus_Object = MibTableColumn
fclAsynPadPageStatus = _FclAsynPadPageStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 10, 1, 2),
    _FclAsynPadPageStatus_Type()
)
fclAsynPadPageStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynPadPageStatus.setStatus("mandatory")


class _FclAsynPadPageMessage_Type(DisplayString):
    """Custom type fclAsynPadPageMessage based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 12),
    )


_FclAsynPadPageMessage_Type.__name__ = "DisplayString"
_FclAsynPadPageMessage_Object = MibTableColumn
fclAsynPadPageMessage = _FclAsynPadPageMessage_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 10, 1, 3),
    _FclAsynPadPageMessage_Type()
)
fclAsynPadPageMessage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynPadPageMessage.setStatus("mandatory")


class _FclAsynPadPageAttributes_Type(OctetString):
    """Custom type fclAsynPadPageAttributes based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(11, 11),
    )


_FclAsynPadPageAttributes_Type.__name__ = "OctetString"
_FclAsynPadPageAttributes_Object = MibTableColumn
fclAsynPadPageAttributes = _FclAsynPadPageAttributes_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 10, 1, 4),
    _FclAsynPadPageAttributes_Type()
)
fclAsynPadPageAttributes.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynPadPageAttributes.setStatus("mandatory")
_FclAsynVdxLogPort_ObjectIdentity = ObjectIdentity
fclAsynVdxLogPort = _FclAsynVdxLogPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3)
)
_FclAsynVdxLpTable_Object = MibTable
fclAsynVdxLpTable = _FclAsynVdxLpTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 1)
)
if mibBuilder.loadTexts:
    fclAsynVdxLpTable.setStatus("mandatory")
_FclAsynVdxLpEntry_Object = MibTableRow
fclAsynVdxLpEntry = _FclAsynVdxLpEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 1, 1)
)
fclAsynVdxLpEntry.setIndexNames(
    (0, "PCE-MIB", "fclAsynVdxLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclAsynVdxLpEntry.setStatus("mandatory")


class _FclAsynVdxLpLogPortId_Type(Integer32):
    """Custom type fclAsynVdxLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclAsynVdxLpLogPortId_Type.__name__ = "Integer32"
_FclAsynVdxLpLogPortId_Object = MibTableColumn
fclAsynVdxLpLogPortId = _FclAsynVdxLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 1, 1, 1),
    _FclAsynVdxLpLogPortId_Type()
)
fclAsynVdxLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynVdxLpLogPortId.setStatus("mandatory")


class _FclAsynVdxLpLink_Type(Integer32):
    """Custom type fclAsynVdxLpLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("direct", 3),
          ("directWithRtsCtsFlowCtrl", 4),
          ("leasedLine", 2),
          ("pstn", 1),
          ("pstnV25bis", 5))
    )


_FclAsynVdxLpLink_Type.__name__ = "Integer32"
_FclAsynVdxLpLink_Object = MibTableColumn
fclAsynVdxLpLink = _FclAsynVdxLpLink_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 1, 1, 2),
    _FclAsynVdxLpLink_Type()
)
fclAsynVdxLpLink.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynVdxLpLink.setStatus("mandatory")


class _FclAsynVdxLpMnemonicType_Type(Integer32):
    """Custom type fclAsynVdxLpMnemonicType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("pad", 1),
          ("vdxLocalAuth", 4),
          ("vdxRemoteAuth", 2),
          ("vdxTeletel", 3))
    )


_FclAsynVdxLpMnemonicType_Type.__name__ = "Integer32"
_FclAsynVdxLpMnemonicType_Object = MibTableColumn
fclAsynVdxLpMnemonicType = _FclAsynVdxLpMnemonicType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 1, 1, 5),
    _FclAsynVdxLpMnemonicType_Type()
)
fclAsynVdxLpMnemonicType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynVdxLpMnemonicType.setStatus("mandatory")


class _FclAsynVdxLpNui_Type(Integer32):
    """Custom type fclAsynVdxLpNui based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              11)
        )
    )
    namedValues = NamedValues(
        *(("command-transmitOrRc", 11),
          ("mandatory-check", 2),
          ("mandatory-check-nua", 3),
          ("mandatory-transmit", 5),
          ("none", 1),
          ("none-rc", 7),
          ("optional-checkNuaOrRc", 4),
          ("optional-transmitOrRc", 6))
    )


_FclAsynVdxLpNui_Type.__name__ = "Integer32"
_FclAsynVdxLpNui_Object = MibTableColumn
fclAsynVdxLpNui = _FclAsynVdxLpNui_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 1, 1, 6),
    _FclAsynVdxLpNui_Type()
)
fclAsynVdxLpNui.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynVdxLpNui.setStatus("mandatory")


class _FclAsynVdxLpParityBit_Type(Integer32):
    """Custom type fclAsynVdxLpParityBit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("setTo1", 2))
    )


_FclAsynVdxLpParityBit_Type.__name__ = "Integer32"
_FclAsynVdxLpParityBit_Object = MibTableColumn
fclAsynVdxLpParityBit = _FclAsynVdxLpParityBit_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 1, 1, 10),
    _FclAsynVdxLpParityBit_Type()
)
fclAsynVdxLpParityBit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynVdxLpParityBit.setStatus("mandatory")


class _FclAsynVdxLpPceSubThreshold_Type(Integer32):
    """Custom type fclAsynVdxLpPceSubThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_FclAsynVdxLpPceSubThreshold_Type.__name__ = "Integer32"
_FclAsynVdxLpPceSubThreshold_Object = MibTableColumn
fclAsynVdxLpPceSubThreshold = _FclAsynVdxLpPceSubThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 1, 1, 11),
    _FclAsynVdxLpPceSubThreshold_Type()
)
fclAsynVdxLpPceSubThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynVdxLpPceSubThreshold.setStatus("mandatory")


class _FclAsynVdxLpPceNackTimer_Type(Integer32):
    """Custom type fclAsynVdxLpPceNackTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 25400),
    )


_FclAsynVdxLpPceNackTimer_Type.__name__ = "Integer32"
_FclAsynVdxLpPceNackTimer_Object = MibTableColumn
fclAsynVdxLpPceNackTimer = _FclAsynVdxLpPceNackTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 1, 1, 12),
    _FclAsynVdxLpPceNackTimer_Type()
)
fclAsynVdxLpPceNackTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynVdxLpPceNackTimer.setStatus("mandatory")
_FclAsynVdxHomePageTable_Object = MibTable
fclAsynVdxHomePageTable = _FclAsynVdxHomePageTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 10)
)
if mibBuilder.loadTexts:
    fclAsynVdxHomePageTable.setStatus("mandatory")
_FclAsynVdxHomePageEntry_Object = MibTableRow
fclAsynVdxHomePageEntry = _FclAsynVdxHomePageEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 10, 1)
)
fclAsynVdxHomePageEntry.setIndexNames(
    (0, "PCE-MIB", "fclAsynVdxPageBlocId"),
)
if mibBuilder.loadTexts:
    fclAsynVdxHomePageEntry.setStatus("mandatory")


class _FclAsynVdxPageBlocId_Type(Integer32):
    """Custom type fclAsynVdxPageBlocId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_FclAsynVdxPageBlocId_Type.__name__ = "Integer32"
_FclAsynVdxPageBlocId_Object = MibTableColumn
fclAsynVdxPageBlocId = _FclAsynVdxPageBlocId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 10, 1, 1),
    _FclAsynVdxPageBlocId_Type()
)
fclAsynVdxPageBlocId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynVdxPageBlocId.setStatus("mandatory")


class _FclAsynVdxPageStatus_Type(Integer32):
    """Custom type fclAsynVdxPageStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclAsynVdxPageStatus_Type.__name__ = "Integer32"
_FclAsynVdxPageStatus_Object = MibTableColumn
fclAsynVdxPageStatus = _FclAsynVdxPageStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 10, 1, 2),
    _FclAsynVdxPageStatus_Type()
)
fclAsynVdxPageStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynVdxPageStatus.setStatus("mandatory")


class _FclAsynVdxPageMessage_Type(DisplayString):
    """Custom type fclAsynVdxPageMessage based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 12),
    )


_FclAsynVdxPageMessage_Type.__name__ = "DisplayString"
_FclAsynVdxPageMessage_Object = MibTableColumn
fclAsynVdxPageMessage = _FclAsynVdxPageMessage_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 10, 1, 3),
    _FclAsynVdxPageMessage_Type()
)
fclAsynVdxPageMessage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynVdxPageMessage.setStatus("mandatory")


class _FclAsynVdxPageAttributes_Type(OctetString):
    """Custom type fclAsynVdxPageAttributes based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(11, 11),
    )


_FclAsynVdxPageAttributes_Type.__name__ = "OctetString"
_FclAsynVdxPageAttributes_Object = MibTableColumn
fclAsynVdxPageAttributes = _FclAsynVdxPageAttributes_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 10, 1, 4),
    _FclAsynVdxPageAttributes_Type()
)
fclAsynVdxPageAttributes.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynVdxPageAttributes.setStatus("mandatory")
_FclAsynLowSpeedCpLogPort_ObjectIdentity = ObjectIdentity
fclAsynLowSpeedCpLogPort = _FclAsynLowSpeedCpLogPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 4)
)
_FclAsynLscpLpTable_Object = MibTable
fclAsynLscpLpTable = _FclAsynLscpLpTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 4, 1)
)
if mibBuilder.loadTexts:
    fclAsynLscpLpTable.setStatus("mandatory")
_FclAsynLscpLpEntry_Object = MibTableRow
fclAsynLscpLpEntry = _FclAsynLscpLpEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 4, 1, 1)
)
fclAsynLscpLpEntry.setIndexNames(
    (0, "PCE-MIB", "fclAsynLscpLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclAsynLscpLpEntry.setStatus("mandatory")


class _FclAsynLscpLpLogPortId_Type(Integer32):
    """Custom type fclAsynLscpLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclAsynLscpLpLogPortId_Type.__name__ = "Integer32"
_FclAsynLscpLpLogPortId_Object = MibTableColumn
fclAsynLscpLpLogPortId = _FclAsynLscpLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 4, 1, 1, 1),
    _FclAsynLscpLpLogPortId_Type()
)
fclAsynLscpLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynLscpLpLogPortId.setStatus("mandatory")


class _FclAsynLscpLpLink_Type(Integer32):
    """Custom type fclAsynLscpLpLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("direct", 3),
          ("leasedLine", 2))
    )


_FclAsynLscpLpLink_Type.__name__ = "Integer32"
_FclAsynLscpLpLink_Object = MibTableColumn
fclAsynLscpLpLink = _FclAsynLscpLpLink_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 4, 1, 1, 2),
    _FclAsynLscpLpLink_Type()
)
fclAsynLscpLpLink.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynLscpLpLink.setStatus("mandatory")


class _FclAsynLscpLpEquipment_Type(Integer32):
    """Custom type fclAsynLscpLpEquipment based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("hpHost", 2),
          ("hpTerminal", 3),
          ("other", 1))
    )


_FclAsynLscpLpEquipment_Type.__name__ = "Integer32"
_FclAsynLscpLpEquipment_Object = MibTableColumn
fclAsynLscpLpEquipment = _FclAsynLscpLpEquipment_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 4, 1, 1, 4),
    _FclAsynLscpLpEquipment_Type()
)
fclAsynLscpLpEquipment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynLscpLpEquipment.setStatus("mandatory")
_FclAsynMultiStandardPadLogPort_ObjectIdentity = ObjectIdentity
fclAsynMultiStandardPadLogPort = _FclAsynMultiStandardPadLogPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 5)
)
_FclAsynMultiLpTable_Object = MibTable
fclAsynMultiLpTable = _FclAsynMultiLpTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 5, 1)
)
if mibBuilder.loadTexts:
    fclAsynMultiLpTable.setStatus("mandatory")
_FclAsynMultiLpEntry_Object = MibTableRow
fclAsynMultiLpEntry = _FclAsynMultiLpEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 5, 1, 1)
)
fclAsynMultiLpEntry.setIndexNames(
    (0, "PCE-MIB", "fclAsynMultiLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclAsynMultiLpEntry.setStatus("mandatory")


class _FclAsynMultiLpLogPortId_Type(Integer32):
    """Custom type fclAsynMultiLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclAsynMultiLpLogPortId_Type.__name__ = "Integer32"
_FclAsynMultiLpLogPortId_Object = MibTableColumn
fclAsynMultiLpLogPortId = _FclAsynMultiLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 5, 1, 1, 1),
    _FclAsynMultiLpLogPortId_Type()
)
fclAsynMultiLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynMultiLpLogPortId.setStatus("mandatory")


class _FclAsynMultiLpAuthStep1_Type(Integer32):
    """Custom type fclAsynMultiLpAuthStep1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("enquire", 4),
          ("ter", 5),
          ("tfi-evenParity", 3),
          ("tfi-noParity", 2),
          ("undefined", 1))
    )


_FclAsynMultiLpAuthStep1_Type.__name__ = "Integer32"
_FclAsynMultiLpAuthStep1_Object = MibTableColumn
fclAsynMultiLpAuthStep1 = _FclAsynMultiLpAuthStep1_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 5, 1, 1, 10),
    _FclAsynMultiLpAuthStep1_Type()
)
fclAsynMultiLpAuthStep1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynMultiLpAuthStep1.setStatus("mandatory")


class _FclAsynMultiLpAuthStep2_Type(Integer32):
    """Custom type fclAsynMultiLpAuthStep2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("enquire", 4),
          ("ter", 5),
          ("tfi-evenParity", 3),
          ("tfi-noParity", 2),
          ("undefined", 1))
    )


_FclAsynMultiLpAuthStep2_Type.__name__ = "Integer32"
_FclAsynMultiLpAuthStep2_Object = MibTableColumn
fclAsynMultiLpAuthStep2 = _FclAsynMultiLpAuthStep2_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 5, 1, 1, 11),
    _FclAsynMultiLpAuthStep2_Type()
)
fclAsynMultiLpAuthStep2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynMultiLpAuthStep2.setStatus("mandatory")


class _FclAsynMultiLpAuthStep3_Type(Integer32):
    """Custom type fclAsynMultiLpAuthStep3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("enquire", 4),
          ("ter", 5),
          ("tfi-evenParity", 3),
          ("tfi-noParity", 2),
          ("undefined", 1))
    )


_FclAsynMultiLpAuthStep3_Type.__name__ = "Integer32"
_FclAsynMultiLpAuthStep3_Object = MibTableColumn
fclAsynMultiLpAuthStep3 = _FclAsynMultiLpAuthStep3_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 5, 1, 1, 12),
    _FclAsynMultiLpAuthStep3_Type()
)
fclAsynMultiLpAuthStep3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynMultiLpAuthStep3.setStatus("mandatory")


class _FclAsynMultiLpAuthStep4_Type(Integer32):
    """Custom type fclAsynMultiLpAuthStep4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("enquire", 4),
          ("ter", 5),
          ("tfi-evenParity", 3),
          ("tfi-noParity", 2),
          ("undefined", 1))
    )


_FclAsynMultiLpAuthStep4_Type.__name__ = "Integer32"
_FclAsynMultiLpAuthStep4_Object = MibTableColumn
fclAsynMultiLpAuthStep4 = _FclAsynMultiLpAuthStep4_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 5, 1, 1, 13),
    _FclAsynMultiLpAuthStep4_Type()
)
fclAsynMultiLpAuthStep4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynMultiLpAuthStep4.setStatus("mandatory")
_FclAsynX28PlusLogPort_ObjectIdentity = ObjectIdentity
fclAsynX28PlusLogPort = _FclAsynX28PlusLogPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6)
)
_FclAsynX28PlusLpTable_Object = MibTable
fclAsynX28PlusLpTable = _FclAsynX28PlusLpTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1)
)
if mibBuilder.loadTexts:
    fclAsynX28PlusLpTable.setStatus("mandatory")
_FclAsynX28PlusLpEntry_Object = MibTableRow
fclAsynX28PlusLpEntry = _FclAsynX28PlusLpEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1)
)
fclAsynX28PlusLpEntry.setIndexNames(
    (0, "PCE-MIB", "fclAsynX28PlusLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclAsynX28PlusLpEntry.setStatus("mandatory")


class _FclAsynX28PlusLpLogPortId_Type(Integer32):
    """Custom type fclAsynX28PlusLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclAsynX28PlusLpLogPortId_Type.__name__ = "Integer32"
_FclAsynX28PlusLpLogPortId_Object = MibTableColumn
fclAsynX28PlusLpLogPortId = _FclAsynX28PlusLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 1),
    _FclAsynX28PlusLpLogPortId_Type()
)
fclAsynX28PlusLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynX28PlusLpLogPortId.setStatus("mandatory")


class _FclAsynX28PlusLpLink_Type(Integer32):
    """Custom type fclAsynX28PlusLpLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("direct", 3),
          ("directWithRtsCtsFlowCtrl", 4),
          ("leasedLine", 2),
          ("pstn", 1),
          ("pstnV25bis", 5))
    )


_FclAsynX28PlusLpLink_Type.__name__ = "Integer32"
_FclAsynX28PlusLpLink_Object = MibTableColumn
fclAsynX28PlusLpLink = _FclAsynX28PlusLpLink_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 2),
    _FclAsynX28PlusLpLink_Type()
)
fclAsynX28PlusLpLink.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusLpLink.setStatus("mandatory")


class _FclAsynX28PlusLpSpeedDetection_Type(Integer32):
    """Custom type fclAsynX28PlusLpSpeedDetection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclAsynX28PlusLpSpeedDetection_Type.__name__ = "Integer32"
_FclAsynX28PlusLpSpeedDetection_Object = MibTableColumn
fclAsynX28PlusLpSpeedDetection = _FclAsynX28PlusLpSpeedDetection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 3),
    _FclAsynX28PlusLpSpeedDetection_Type()
)
fclAsynX28PlusLpSpeedDetection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusLpSpeedDetection.setStatus("mandatory")


class _FclAsynX28PlusLpEquipment_Type(Integer32):
    """Custom type fclAsynX28PlusLpEquipment based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("hpHost", 2),
          ("hpTerminal", 3),
          ("other", 1))
    )


_FclAsynX28PlusLpEquipment_Type.__name__ = "Integer32"
_FclAsynX28PlusLpEquipment_Object = MibTableColumn
fclAsynX28PlusLpEquipment = _FclAsynX28PlusLpEquipment_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 4),
    _FclAsynX28PlusLpEquipment_Type()
)
fclAsynX28PlusLpEquipment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusLpEquipment.setStatus("mandatory")


class _FclAsynX28PlusLpMnemonicType_Type(Integer32):
    """Custom type fclAsynX28PlusLpMnemonicType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("pad", 1),
          ("vdxLocalAuth", 4),
          ("vdxRemoteAuth", 2),
          ("vdxTeletel", 3))
    )


_FclAsynX28PlusLpMnemonicType_Type.__name__ = "Integer32"
_FclAsynX28PlusLpMnemonicType_Object = MibTableColumn
fclAsynX28PlusLpMnemonicType = _FclAsynX28PlusLpMnemonicType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 5),
    _FclAsynX28PlusLpMnemonicType_Type()
)
fclAsynX28PlusLpMnemonicType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusLpMnemonicType.setStatus("mandatory")


class _FclAsynX28PlusLpFullDuplex_Type(Integer32):
    """Custom type fclAsynX28PlusLpFullDuplex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclAsynX28PlusLpFullDuplex_Type.__name__ = "Integer32"
_FclAsynX28PlusLpFullDuplex_Object = MibTableColumn
fclAsynX28PlusLpFullDuplex = _FclAsynX28PlusLpFullDuplex_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 10),
    _FclAsynX28PlusLpFullDuplex_Type()
)
fclAsynX28PlusLpFullDuplex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusLpFullDuplex.setStatus("mandatory")


class _FclAsynX28PlusLpIdleTimerSelection_Type(Integer32):
    """Custom type fclAsynX28PlusLpIdleTimerSelection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclAsynX28PlusLpIdleTimerSelection_Type.__name__ = "Integer32"
_FclAsynX28PlusLpIdleTimerSelection_Object = MibTableColumn
fclAsynX28PlusLpIdleTimerSelection = _FclAsynX28PlusLpIdleTimerSelection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 11),
    _FclAsynX28PlusLpIdleTimerSelection_Type()
)
fclAsynX28PlusLpIdleTimerSelection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusLpIdleTimerSelection.setStatus("mandatory")


class _FclAsynX28PlusLpIdleTimerDelay_Type(Integer32):
    """Custom type fclAsynX28PlusLpIdleTimerDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12750),
    )


_FclAsynX28PlusLpIdleTimerDelay_Type.__name__ = "Integer32"
_FclAsynX28PlusLpIdleTimerDelay_Object = MibTableColumn
fclAsynX28PlusLpIdleTimerDelay = _FclAsynX28PlusLpIdleTimerDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 12),
    _FclAsynX28PlusLpIdleTimerDelay_Type()
)
fclAsynX28PlusLpIdleTimerDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusLpIdleTimerDelay.setStatus("mandatory")


class _FclAsynX28PlusLpX3Mode_Type(Integer32):
    """Custom type fclAsynX28PlusLpX3Mode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("networkVirtualTerminal", 2),
          ("transparent", 1))
    )


_FclAsynX28PlusLpX3Mode_Type.__name__ = "Integer32"
_FclAsynX28PlusLpX3Mode_Object = MibTableColumn
fclAsynX28PlusLpX3Mode = _FclAsynX28PlusLpX3Mode_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 13),
    _FclAsynX28PlusLpX3Mode_Type()
)
fclAsynX28PlusLpX3Mode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusLpX3Mode.setStatus("mandatory")


class _FclAsynX28PlusLpEscapeDigit_Type(Integer32):
    """Custom type fclAsynX28PlusLpEscapeDigit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9),
    )


_FclAsynX28PlusLpEscapeDigit_Type.__name__ = "Integer32"
_FclAsynX28PlusLpEscapeDigit_Object = MibTableColumn
fclAsynX28PlusLpEscapeDigit = _FclAsynX28PlusLpEscapeDigit_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 14),
    _FclAsynX28PlusLpEscapeDigit_Type()
)
fclAsynX28PlusLpEscapeDigit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusLpEscapeDigit.setStatus("mandatory")


class _FclAsynX28PlusLpConIdTelenet_Type(Integer32):
    """Custom type fclAsynX28PlusLpConIdTelenet based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclAsynX28PlusLpConIdTelenet_Type.__name__ = "Integer32"
_FclAsynX28PlusLpConIdTelenet_Object = MibTableColumn
fclAsynX28PlusLpConIdTelenet = _FclAsynX28PlusLpConIdTelenet_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 15),
    _FclAsynX28PlusLpConIdTelenet_Type()
)
fclAsynX28PlusLpConIdTelenet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusLpConIdTelenet.setStatus("mandatory")


class _FclAsynX28PlusLpConIdRemote_Type(Integer32):
    """Custom type fclAsynX28PlusLpConIdRemote based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclAsynX28PlusLpConIdRemote_Type.__name__ = "Integer32"
_FclAsynX28PlusLpConIdRemote_Object = MibTableColumn
fclAsynX28PlusLpConIdRemote = _FclAsynX28PlusLpConIdRemote_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 16),
    _FclAsynX28PlusLpConIdRemote_Type()
)
fclAsynX28PlusLpConIdRemote.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusLpConIdRemote.setStatus("mandatory")


class _FclAsynX28PlusLpRemPrSentOnCalls_Type(Integer32):
    """Custom type fclAsynX28PlusLpRemPrSentOnCalls based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("both", 4),
          ("inBound", 2),
          ("never", 1),
          ("outBound", 3))
    )


_FclAsynX28PlusLpRemPrSentOnCalls_Type.__name__ = "Integer32"
_FclAsynX28PlusLpRemPrSentOnCalls_Object = MibTableColumn
fclAsynX28PlusLpRemPrSentOnCalls = _FclAsynX28PlusLpRemPrSentOnCalls_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 17),
    _FclAsynX28PlusLpRemPrSentOnCalls_Type()
)
fclAsynX28PlusLpRemPrSentOnCalls.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusLpRemPrSentOnCalls.setStatus("mandatory")


class _FclAsynX28PlusLpEasyMnemo_Type(Integer32):
    """Custom type fclAsynX28PlusLpEasyMnemo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclAsynX28PlusLpEasyMnemo_Type.__name__ = "Integer32"
_FclAsynX28PlusLpEasyMnemo_Object = MibTableColumn
fclAsynX28PlusLpEasyMnemo = _FclAsynX28PlusLpEasyMnemo_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 20),
    _FclAsynX28PlusLpEasyMnemo_Type()
)
fclAsynX28PlusLpEasyMnemo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusLpEasyMnemo.setStatus("mandatory")


class _FclAsynX28PlusLpMonSignalCTS_Type(Integer32):
    """Custom type fclAsynX28PlusLpMonSignalCTS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FclAsynX28PlusLpMonSignalCTS_Type.__name__ = "Integer32"
_FclAsynX28PlusLpMonSignalCTS_Object = MibTableColumn
fclAsynX28PlusLpMonSignalCTS = _FclAsynX28PlusLpMonSignalCTS_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 21),
    _FclAsynX28PlusLpMonSignalCTS_Type()
)
fclAsynX28PlusLpMonSignalCTS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusLpMonSignalCTS.setStatus("mandatory")


class _FclAsynX28PlusLpMonSignalDSR_Type(Integer32):
    """Custom type fclAsynX28PlusLpMonSignalDSR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FclAsynX28PlusLpMonSignalDSR_Type.__name__ = "Integer32"
_FclAsynX28PlusLpMonSignalDSR_Object = MibTableColumn
fclAsynX28PlusLpMonSignalDSR = _FclAsynX28PlusLpMonSignalDSR_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 22),
    _FclAsynX28PlusLpMonSignalDSR_Type()
)
fclAsynX28PlusLpMonSignalDSR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusLpMonSignalDSR.setStatus("mandatory")


class _FclAsynX28PlusLpMonSignalDCD_Type(Integer32):
    """Custom type fclAsynX28PlusLpMonSignalDCD based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FclAsynX28PlusLpMonSignalDCD_Type.__name__ = "Integer32"
_FclAsynX28PlusLpMonSignalDCD_Object = MibTableColumn
fclAsynX28PlusLpMonSignalDCD = _FclAsynX28PlusLpMonSignalDCD_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 23),
    _FclAsynX28PlusLpMonSignalDCD_Type()
)
fclAsynX28PlusLpMonSignalDCD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusLpMonSignalDCD.setStatus("mandatory")
_FclAsynX28PlusGeneralParameters_ObjectIdentity = ObjectIdentity
fclAsynX28PlusGeneralParameters = _FclAsynX28PlusGeneralParameters_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 2)
)


class _FclAsynX28PlusGenParDNIC_Type(OctetString):
    """Custom type fclAsynX28PlusGenParDNIC based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_FclAsynX28PlusGenParDNIC_Type.__name__ = "OctetString"
_FclAsynX28PlusGenParDNIC_Object = MibScalar
fclAsynX28PlusGenParDNIC = _FclAsynX28PlusGenParDNIC_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 2, 1),
    _FclAsynX28PlusGenParDNIC_Type()
)
fclAsynX28PlusGenParDNIC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusGenParDNIC.setStatus("mandatory")
_FclAsynX28PlusConfTELENETTable_Object = MibTable
fclAsynX28PlusConfTELENETTable = _FclAsynX28PlusConfTELENETTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 3)
)
if mibBuilder.loadTexts:
    fclAsynX28PlusConfTELENETTable.setStatus("mandatory")
_FclAsynX28PlusConfTELENETEntry_Object = MibTableRow
fclAsynX28PlusConfTELENETEntry = _FclAsynX28PlusConfTELENETEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 3, 1)
)
fclAsynX28PlusConfTELENETEntry.setIndexNames(
    (0, "PCE-MIB", "fclAsynX28PlusCfgTELENETConfigId"),
)
if mibBuilder.loadTexts:
    fclAsynX28PlusConfTELENETEntry.setStatus("mandatory")


class _FclAsynX28PlusCfgTELENETConfigId_Type(Integer32):
    """Custom type fclAsynX28PlusCfgTELENETConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclAsynX28PlusCfgTELENETConfigId_Type.__name__ = "Integer32"
_FclAsynX28PlusCfgTELENETConfigId_Object = MibTableColumn
fclAsynX28PlusCfgTELENETConfigId = _FclAsynX28PlusCfgTELENETConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 3, 1, 1),
    _FclAsynX28PlusCfgTELENETConfigId_Type()
)
fclAsynX28PlusCfgTELENETConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynX28PlusCfgTELENETConfigId.setStatus("mandatory")


class _FclAsynX28PlusCfgTELENETDescription_Type(DisplayString):
    """Custom type fclAsynX28PlusCfgTELENETDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_FclAsynX28PlusCfgTELENETDescription_Type.__name__ = "DisplayString"
_FclAsynX28PlusCfgTELENETDescription_Object = MibTableColumn
fclAsynX28PlusCfgTELENETDescription = _FclAsynX28PlusCfgTELENETDescription_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 3, 1, 2),
    _FclAsynX28PlusCfgTELENETDescription_Type()
)
fclAsynX28PlusCfgTELENETDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusCfgTELENETDescription.setStatus("mandatory")
_FclAsynX28PlusParTELENETTable_Object = MibTable
fclAsynX28PlusParTELENETTable = _FclAsynX28PlusParTELENETTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 4)
)
if mibBuilder.loadTexts:
    fclAsynX28PlusParTELENETTable.setStatus("mandatory")
_FclAsynX28PlusParTELENETEntry_Object = MibTableRow
fclAsynX28PlusParTELENETEntry = _FclAsynX28PlusParTELENETEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 4, 1)
)
fclAsynX28PlusParTELENETEntry.setIndexNames(
    (0, "PCE-MIB", "fclAsynX28PlusParTelConfigId"),
)
if mibBuilder.loadTexts:
    fclAsynX28PlusParTELENETEntry.setStatus("mandatory")


class _FclAsynX28PlusParTelConfigId_Type(Integer32):
    """Custom type fclAsynX28PlusParTelConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclAsynX28PlusParTelConfigId_Type.__name__ = "Integer32"
_FclAsynX28PlusParTelConfigId_Object = MibTableColumn
fclAsynX28PlusParTelConfigId = _FclAsynX28PlusParTelConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 4, 1, 1),
    _FclAsynX28PlusParTelConfigId_Type()
)
fclAsynX28PlusParTelConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynX28PlusParTelConfigId.setStatus("mandatory")


class _FclAsynX28PlusParTelLpFullDuplex_Type(Integer32):
    """Custom type fclAsynX28PlusParTelLpFullDuplex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclAsynX28PlusParTelLpFullDuplex_Type.__name__ = "Integer32"
_FclAsynX28PlusParTelLpFullDuplex_Object = MibTableColumn
fclAsynX28PlusParTelLpFullDuplex = _FclAsynX28PlusParTelLpFullDuplex_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 4, 1, 10),
    _FclAsynX28PlusParTelLpFullDuplex_Type()
)
fclAsynX28PlusParTelLpFullDuplex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusParTelLpFullDuplex.setStatus("mandatory")


class _FclAsynX28PlusParTelLpIdleTimerSelection_Type(Integer32):
    """Custom type fclAsynX28PlusParTelLpIdleTimerSelection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclAsynX28PlusParTelLpIdleTimerSelection_Type.__name__ = "Integer32"
_FclAsynX28PlusParTelLpIdleTimerSelection_Object = MibTableColumn
fclAsynX28PlusParTelLpIdleTimerSelection = _FclAsynX28PlusParTelLpIdleTimerSelection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 4, 1, 11),
    _FclAsynX28PlusParTelLpIdleTimerSelection_Type()
)
fclAsynX28PlusParTelLpIdleTimerSelection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusParTelLpIdleTimerSelection.setStatus("mandatory")


class _FclAsynX28PlusParTelLpIdleTimerDelay_Type(Integer32):
    """Custom type fclAsynX28PlusParTelLpIdleTimerDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12750),
    )


_FclAsynX28PlusParTelLpIdleTimerDelay_Type.__name__ = "Integer32"
_FclAsynX28PlusParTelLpIdleTimerDelay_Object = MibTableColumn
fclAsynX28PlusParTelLpIdleTimerDelay = _FclAsynX28PlusParTelLpIdleTimerDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 4, 1, 12),
    _FclAsynX28PlusParTelLpIdleTimerDelay_Type()
)
fclAsynX28PlusParTelLpIdleTimerDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusParTelLpIdleTimerDelay.setStatus("mandatory")


class _FclAsynX28PlusParTelLpX3Mode_Type(Integer32):
    """Custom type fclAsynX28PlusParTelLpX3Mode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("networkVirtualTerminal", 2),
          ("transparent", 1))
    )


_FclAsynX28PlusParTelLpX3Mode_Type.__name__ = "Integer32"
_FclAsynX28PlusParTelLpX3Mode_Object = MibTableColumn
fclAsynX28PlusParTelLpX3Mode = _FclAsynX28PlusParTelLpX3Mode_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 4, 1, 13),
    _FclAsynX28PlusParTelLpX3Mode_Type()
)
fclAsynX28PlusParTelLpX3Mode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusParTelLpX3Mode.setStatus("mandatory")
_FclAsynX28PlusConfRemoteTable_Object = MibTable
fclAsynX28PlusConfRemoteTable = _FclAsynX28PlusConfRemoteTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 5)
)
if mibBuilder.loadTexts:
    fclAsynX28PlusConfRemoteTable.setStatus("mandatory")
_FclAsynX28PlusConfRemoteEntry_Object = MibTableRow
fclAsynX28PlusConfRemoteEntry = _FclAsynX28PlusConfRemoteEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 5, 1)
)
fclAsynX28PlusConfRemoteEntry.setIndexNames(
    (0, "PCE-MIB", "fclAsynX28PlusRemoteConfigId"),
)
if mibBuilder.loadTexts:
    fclAsynX28PlusConfRemoteEntry.setStatus("mandatory")


class _FclAsynX28PlusRemoteConfigId_Type(Integer32):
    """Custom type fclAsynX28PlusRemoteConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclAsynX28PlusRemoteConfigId_Type.__name__ = "Integer32"
_FclAsynX28PlusRemoteConfigId_Object = MibTableColumn
fclAsynX28PlusRemoteConfigId = _FclAsynX28PlusRemoteConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 5, 1, 1),
    _FclAsynX28PlusRemoteConfigId_Type()
)
fclAsynX28PlusRemoteConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemoteConfigId.setStatus("mandatory")


class _FclAsynX28PlusRemoteCfgDescription_Type(DisplayString):
    """Custom type fclAsynX28PlusRemoteCfgDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_FclAsynX28PlusRemoteCfgDescription_Type.__name__ = "DisplayString"
_FclAsynX28PlusRemoteCfgDescription_Object = MibTableColumn
fclAsynX28PlusRemoteCfgDescription = _FclAsynX28PlusRemoteCfgDescription_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 5, 1, 2),
    _FclAsynX28PlusRemoteCfgDescription_Type()
)
fclAsynX28PlusRemoteCfgDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemoteCfgDescription.setStatus("mandatory")
_FclAsynX28PlusRemoteCfgX3Part1Table_Object = MibTable
fclAsynX28PlusRemoteCfgX3Part1Table = _FclAsynX28PlusRemoteCfgX3Part1Table_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6)
)
if mibBuilder.loadTexts:
    fclAsynX28PlusRemoteCfgX3Part1Table.setStatus("mandatory")
_FclAsynX28PlusRemoteCfgX3Part1Entry_Object = MibTableRow
fclAsynX28PlusRemoteCfgX3Part1Entry = _FclAsynX28PlusRemoteCfgX3Part1Entry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1)
)
fclAsynX28PlusRemoteCfgX3Part1Entry.setIndexNames(
    (0, "PCE-MIB", "fclAsynX28PlusRemConfigId"),
)
if mibBuilder.loadTexts:
    fclAsynX28PlusRemoteCfgX3Part1Entry.setStatus("mandatory")


class _FclAsynX28PlusRemConfigId_Type(Integer32):
    """Custom type fclAsynX28PlusRemConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclAsynX28PlusRemConfigId_Type.__name__ = "Integer32"
_FclAsynX28PlusRemConfigId_Object = MibTableColumn
fclAsynX28PlusRemConfigId = _FclAsynX28PlusRemConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 1),
    _FclAsynX28PlusRemConfigId_Type()
)
fclAsynX28PlusRemConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemConfigId.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3P01EscapeChar_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3P01EscapeChar based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 126),
    )


_FclAsynX28PlusRemCfgX3P01EscapeChar_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3P01EscapeChar_Object = MibTableColumn
fclAsynX28PlusRemCfgX3P01EscapeChar = _FclAsynX28PlusRemCfgX3P01EscapeChar_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 11),
    _FclAsynX28PlusRemCfgX3P01EscapeChar_Type()
)
fclAsynX28PlusRemCfgX3P01EscapeChar.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3P01EscapeChar.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3P02Echo_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3P02Echo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("not-used", 255),
          ("val0-off", 1),
          ("val1-on", 2))
    )


_FclAsynX28PlusRemCfgX3P02Echo_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3P02Echo_Object = MibTableColumn
fclAsynX28PlusRemCfgX3P02Echo = _FclAsynX28PlusRemCfgX3P02Echo_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 12),
    _FclAsynX28PlusRemCfgX3P02Echo_Type()
)
fclAsynX28PlusRemCfgX3P02Echo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3P02Echo.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3P03ForwardingChar_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3P03ForwardingChar based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              7,
              19,
              33,
              127,
              128,
              129,
              254,
              255)
        )
    )
    namedValues = NamedValues(
        *(("not-used", 255),
          ("val0-none", 1),
          ("val126-allCtrlChars", 127),
          ("val127-allChars", 128),
          ("val128-allCtrlChars-vdxFunctionKeys", 129),
          ("val18-crEotEtx", 19),
          ("val2-cr", 3),
          ("val253-encapsCharacSLIP", 254),
          ("val32-htLfVtFf", 33),
          ("val6-crEscBelEnqAck", 7))
    )


_FclAsynX28PlusRemCfgX3P03ForwardingChar_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3P03ForwardingChar_Object = MibTableColumn
fclAsynX28PlusRemCfgX3P03ForwardingChar = _FclAsynX28PlusRemCfgX3P03ForwardingChar_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 13),
    _FclAsynX28PlusRemCfgX3P03ForwardingChar_Type()
)
fclAsynX28PlusRemCfgX3P03ForwardingChar.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3P03ForwardingChar.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3P04IdleTimerDelay_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3P04IdleTimerDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclAsynX28PlusRemCfgX3P04IdleTimerDelay_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3P04IdleTimerDelay_Object = MibTableColumn
fclAsynX28PlusRemCfgX3P04IdleTimerDelay = _FclAsynX28PlusRemCfgX3P04IdleTimerDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 14),
    _FclAsynX28PlusRemCfgX3P04IdleTimerDelay_Type()
)
fclAsynX28PlusRemCfgX3P04IdleTimerDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3P04IdleTimerDelay.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3P05OutputFlowCtrl_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3P05OutputFlowCtrl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              9,
              255)
        )
    )
    namedValues = NamedValues(
        *(("not-used", 255),
          ("val0-none", 1),
          ("val1-xonXoffInTransfer", 2),
          ("val2-xonXoff", 3),
          ("val8-rtsCtsInTransfer", 9))
    )


_FclAsynX28PlusRemCfgX3P05OutputFlowCtrl_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3P05OutputFlowCtrl_Object = MibTableColumn
fclAsynX28PlusRemCfgX3P05OutputFlowCtrl = _FclAsynX28PlusRemCfgX3P05OutputFlowCtrl_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 15),
    _FclAsynX28PlusRemCfgX3P05OutputFlowCtrl_Type()
)
fclAsynX28PlusRemCfgX3P05OutputFlowCtrl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3P05OutputFlowCtrl.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3P06ServiceSignals_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3P06ServiceSignals based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              6,
              10,
              14,
              255)
        )
    )
    namedValues = NamedValues(
        *(("not-used", 255),
          ("val0-none", 1),
          ("val1-servSignal-stdFormat", 2),
          ("val13-servSignalAndPrompt-explicitFormat", 14),
          ("val5-servSignalAndPrompt-stdFormat", 6),
          ("val9-servSignal-explicitFormat", 10))
    )


_FclAsynX28PlusRemCfgX3P06ServiceSignals_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3P06ServiceSignals_Object = MibTableColumn
fclAsynX28PlusRemCfgX3P06ServiceSignals = _FclAsynX28PlusRemCfgX3P06ServiceSignals_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 16),
    _FclAsynX28PlusRemCfgX3P06ServiceSignals_Type()
)
fclAsynX28PlusRemCfgX3P06ServiceSignals.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3P06ServiceSignals.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3P07BreakHandling_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3P07BreakHandling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              5,
              6,
              9,
              22,
              255)
        )
    )
    namedValues = NamedValues(
        *(("not-used", 255),
          ("val0-forwardingChar", 1),
          ("val1-interrupt", 2),
          ("val2-reset", 3),
          ("val21-interrupt-breakIndication-discardOutput", 22),
          ("val4-breakIndication", 5),
          ("val5-interrupt-breakIndication", 6),
          ("val8-escapeFromTransfer", 9))
    )


_FclAsynX28PlusRemCfgX3P07BreakHandling_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3P07BreakHandling_Object = MibTableColumn
fclAsynX28PlusRemCfgX3P07BreakHandling = _FclAsynX28PlusRemCfgX3P07BreakHandling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 17),
    _FclAsynX28PlusRemCfgX3P07BreakHandling_Type()
)
fclAsynX28PlusRemCfgX3P07BreakHandling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3P07BreakHandling.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3P08OutputDiscard_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3P08OutputDiscard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("not-used", 255),
          ("val0-off", 1),
          ("val1-on", 2))
    )


_FclAsynX28PlusRemCfgX3P08OutputDiscard_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3P08OutputDiscard_Object = MibTableColumn
fclAsynX28PlusRemCfgX3P08OutputDiscard = _FclAsynX28PlusRemCfgX3P08OutputDiscard_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 18),
    _FclAsynX28PlusRemCfgX3P08OutputDiscard_Type()
)
fclAsynX28PlusRemCfgX3P08OutputDiscard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3P08OutputDiscard.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3P09CrPadding_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3P09CrPadding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclAsynX28PlusRemCfgX3P09CrPadding_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3P09CrPadding_Object = MibTableColumn
fclAsynX28PlusRemCfgX3P09CrPadding = _FclAsynX28PlusRemCfgX3P09CrPadding_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 19),
    _FclAsynX28PlusRemCfgX3P09CrPadding_Type()
)
fclAsynX28PlusRemCfgX3P09CrPadding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3P09CrPadding.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3P10LineFolding_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3P10LineFolding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclAsynX28PlusRemCfgX3P10LineFolding_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3P10LineFolding_Object = MibTableColumn
fclAsynX28PlusRemCfgX3P10LineFolding = _FclAsynX28PlusRemCfgX3P10LineFolding_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 20),
    _FclAsynX28PlusRemCfgX3P10LineFolding_Type()
)
fclAsynX28PlusRemCfgX3P10LineFolding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3P10LineFolding.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3P11BinarySpeed_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3P11BinarySpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              18,
              21,
              22,
              23,
              24,
              255)
        )
    )
    namedValues = NamedValues(
        *(("not-used", 255),
          ("val0-110", 1),
          ("val1-134-5", 2),
          ("val10-50", 11),
          ("val11-in75Out1200", 12),
          ("val12-2400", 13),
          ("val13-4800", 14),
          ("val14-9600", 15),
          ("val15-19200", 16),
          ("val17-57600", 18),
          ("val2-300", 3),
          ("val20-38400", 21),
          ("val21-out1200In75", 22),
          ("val22-115200", 23),
          ("val23-28800", 24),
          ("val3-1200", 4),
          ("val4-600", 5),
          ("val5-75", 6),
          ("val6-150", 7),
          ("val7-1800", 8),
          ("val8-200", 9),
          ("val9-100", 10))
    )


_FclAsynX28PlusRemCfgX3P11BinarySpeed_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3P11BinarySpeed_Object = MibTableColumn
fclAsynX28PlusRemCfgX3P11BinarySpeed = _FclAsynX28PlusRemCfgX3P11BinarySpeed_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 21),
    _FclAsynX28PlusRemCfgX3P11BinarySpeed_Type()
)
fclAsynX28PlusRemCfgX3P11BinarySpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3P11BinarySpeed.setStatus("mandatory")
_FclAsynX28PlusRemoteCfgX3Part2Table_Object = MibTable
fclAsynX28PlusRemoteCfgX3Part2Table = _FclAsynX28PlusRemoteCfgX3Part2Table_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7)
)
if mibBuilder.loadTexts:
    fclAsynX28PlusRemoteCfgX3Part2Table.setStatus("mandatory")
_FclAsynX28PlusRemoteCfgX3Part2Entry_Object = MibTableRow
fclAsynX28PlusRemoteCfgX3Part2Entry = _FclAsynX28PlusRemoteCfgX3Part2Entry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1)
)
fclAsynX28PlusRemoteCfgX3Part2Entry.setIndexNames(
    (0, "PCE-MIB", "fclAsynX28PlusRemCfgX3Part2ConfigId"),
)
if mibBuilder.loadTexts:
    fclAsynX28PlusRemoteCfgX3Part2Entry.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3Part2ConfigId_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3Part2ConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclAsynX28PlusRemCfgX3Part2ConfigId_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3Part2ConfigId_Object = MibTableColumn
fclAsynX28PlusRemCfgX3Part2ConfigId = _FclAsynX28PlusRemCfgX3Part2ConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 1),
    _FclAsynX28PlusRemCfgX3Part2ConfigId_Type()
)
fclAsynX28PlusRemCfgX3Part2ConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3Part2ConfigId.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3P12InputFlowCtrl_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3P12InputFlowCtrl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              9,
              255)
        )
    )
    namedValues = NamedValues(
        *(("not-used", 255),
          ("val0-none", 1),
          ("val1-xonXoff", 2),
          ("val8-rtsCts", 9))
    )


_FclAsynX28PlusRemCfgX3P12InputFlowCtrl_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3P12InputFlowCtrl_Object = MibTableColumn
fclAsynX28PlusRemCfgX3P12InputFlowCtrl = _FclAsynX28PlusRemCfgX3P12InputFlowCtrl_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 22),
    _FclAsynX28PlusRemCfgX3P12InputFlowCtrl_Type()
)
fclAsynX28PlusRemCfgX3P12InputFlowCtrl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3P12InputFlowCtrl.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3P13LfInsertion_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3P13LfInsertion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              255)
        )
    )
    namedValues = NamedValues(
        *(("not-used", 255),
          ("val0-none", 1),
          ("val1-outCr", 2),
          ("val2-inCr", 3),
          ("val3-outCr-inCr", 4),
          ("val4-outCrEcho", 5),
          ("val5-outCr-outCrEcho", 6),
          ("val6-inCr-outCrEcho", 7),
          ("val7-outCr-inCr-outCrEcho", 8))
    )


_FclAsynX28PlusRemCfgX3P13LfInsertion_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3P13LfInsertion_Object = MibTableColumn
fclAsynX28PlusRemCfgX3P13LfInsertion = _FclAsynX28PlusRemCfgX3P13LfInsertion_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 23),
    _FclAsynX28PlusRemCfgX3P13LfInsertion_Type()
)
fclAsynX28PlusRemCfgX3P13LfInsertion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3P13LfInsertion.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3P14LfPadding_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3P14LfPadding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclAsynX28PlusRemCfgX3P14LfPadding_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3P14LfPadding_Object = MibTableColumn
fclAsynX28PlusRemCfgX3P14LfPadding = _FclAsynX28PlusRemCfgX3P14LfPadding_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 24),
    _FclAsynX28PlusRemCfgX3P14LfPadding_Type()
)
fclAsynX28PlusRemCfgX3P14LfPadding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3P14LfPadding.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3P15Editing_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3P15Editing based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("not-used", 255),
          ("val0-off", 1),
          ("val1-on", 2))
    )


_FclAsynX28PlusRemCfgX3P15Editing_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3P15Editing_Object = MibTableColumn
fclAsynX28PlusRemCfgX3P15Editing = _FclAsynX28PlusRemCfgX3P15Editing_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 25),
    _FclAsynX28PlusRemCfgX3P15Editing_Type()
)
fclAsynX28PlusRemCfgX3P15Editing.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3P15Editing.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3P16CharDelete_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3P16CharDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_FclAsynX28PlusRemCfgX3P16CharDelete_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3P16CharDelete_Object = MibTableColumn
fclAsynX28PlusRemCfgX3P16CharDelete = _FclAsynX28PlusRemCfgX3P16CharDelete_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 26),
    _FclAsynX28PlusRemCfgX3P16CharDelete_Type()
)
fclAsynX28PlusRemCfgX3P16CharDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3P16CharDelete.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3P17LineDelete_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3P17LineDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_FclAsynX28PlusRemCfgX3P17LineDelete_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3P17LineDelete_Object = MibTableColumn
fclAsynX28PlusRemCfgX3P17LineDelete = _FclAsynX28PlusRemCfgX3P17LineDelete_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 27),
    _FclAsynX28PlusRemCfgX3P17LineDelete_Type()
)
fclAsynX28PlusRemCfgX3P17LineDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3P17LineDelete.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3P18LineDisplay_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3P18LineDisplay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 127),
    )


_FclAsynX28PlusRemCfgX3P18LineDisplay_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3P18LineDisplay_Object = MibTableColumn
fclAsynX28PlusRemCfgX3P18LineDisplay = _FclAsynX28PlusRemCfgX3P18LineDisplay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 28),
    _FclAsynX28PlusRemCfgX3P18LineDisplay_Type()
)
fclAsynX28PlusRemCfgX3P18LineDisplay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3P18LineDisplay.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3P19EditingSignal_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3P19EditingSignal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("not-used", 255),
          ("val0-none", 1),
          ("val1-printingTerminal", 2),
          ("val2-displayTerminal", 3))
    )


_FclAsynX28PlusRemCfgX3P19EditingSignal_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3P19EditingSignal_Object = MibTableColumn
fclAsynX28PlusRemCfgX3P19EditingSignal = _FclAsynX28PlusRemCfgX3P19EditingSignal_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 29),
    _FclAsynX28PlusRemCfgX3P19EditingSignal_Type()
)
fclAsynX28PlusRemCfgX3P19EditingSignal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3P19EditingSignal.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3P20EchoMask_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3P20EchoMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FclAsynX28PlusRemCfgX3P20EchoMask_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3P20EchoMask_Object = MibTableColumn
fclAsynX28PlusRemCfgX3P20EchoMask = _FclAsynX28PlusRemCfgX3P20EchoMask_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 30),
    _FclAsynX28PlusRemCfgX3P20EchoMask_Type()
)
fclAsynX28PlusRemCfgX3P20EchoMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3P20EchoMask.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3P21Parity_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3P21Parity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("not-used", 255),
          ("val0-none", 1),
          ("val1-check", 2),
          ("val2-generate", 3),
          ("val3-check-generate", 4))
    )


_FclAsynX28PlusRemCfgX3P21Parity_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3P21Parity_Object = MibTableColumn
fclAsynX28PlusRemCfgX3P21Parity = _FclAsynX28PlusRemCfgX3P21Parity_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 31),
    _FclAsynX28PlusRemCfgX3P21Parity_Type()
)
fclAsynX28PlusRemCfgX3P21Parity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3P21Parity.setStatus("mandatory")


class _FclAsynX28PlusRemCfgX3P22PageWait_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgX3P22PageWait based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 127),
    )


_FclAsynX28PlusRemCfgX3P22PageWait_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgX3P22PageWait_Object = MibTableColumn
fclAsynX28PlusRemCfgX3P22PageWait = _FclAsynX28PlusRemCfgX3P22PageWait_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 32),
    _FclAsynX28PlusRemCfgX3P22PageWait_Type()
)
fclAsynX28PlusRemCfgX3P22PageWait.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgX3P22PageWait.setStatus("mandatory")
_FclAsynX28PlusRemoteTELENETTable_Object = MibTable
fclAsynX28PlusRemoteTELENETTable = _FclAsynX28PlusRemoteTELENETTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 8)
)
if mibBuilder.loadTexts:
    fclAsynX28PlusRemoteTELENETTable.setStatus("mandatory")
_FclAsynX28PlusRemoteTELENETEntry_Object = MibTableRow
fclAsynX28PlusRemoteTELENETEntry = _FclAsynX28PlusRemoteTELENETEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 8, 1)
)
fclAsynX28PlusRemoteTELENETEntry.setIndexNames(
    (0, "PCE-MIB", "fclAsynX28PlusRemCfgTELENETConfigId"),
)
if mibBuilder.loadTexts:
    fclAsynX28PlusRemoteTELENETEntry.setStatus("mandatory")


class _FclAsynX28PlusRemCfgTELENETConfigId_Type(Integer32):
    """Custom type fclAsynX28PlusRemCfgTELENETConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclAsynX28PlusRemCfgTELENETConfigId_Type.__name__ = "Integer32"
_FclAsynX28PlusRemCfgTELENETConfigId_Object = MibTableColumn
fclAsynX28PlusRemCfgTELENETConfigId = _FclAsynX28PlusRemCfgTELENETConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 8, 1, 1),
    _FclAsynX28PlusRemCfgTELENETConfigId_Type()
)
fclAsynX28PlusRemCfgTELENETConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemCfgTELENETConfigId.setStatus("mandatory")


class _FclAsynX28PlusRemLpFullDuplex_Type(Integer32):
    """Custom type fclAsynX28PlusRemLpFullDuplex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("not-used", 255),
          ("off", 1),
          ("on", 2))
    )


_FclAsynX28PlusRemLpFullDuplex_Type.__name__ = "Integer32"
_FclAsynX28PlusRemLpFullDuplex_Object = MibTableColumn
fclAsynX28PlusRemLpFullDuplex = _FclAsynX28PlusRemLpFullDuplex_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 8, 1, 10),
    _FclAsynX28PlusRemLpFullDuplex_Type()
)
fclAsynX28PlusRemLpFullDuplex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemLpFullDuplex.setStatus("mandatory")


class _FclAsynX28PlusRemLpIdleTimerSelection_Type(Integer32):
    """Custom type fclAsynX28PlusRemLpIdleTimerSelection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("not-used", 255),
          ("off", 1),
          ("on", 2))
    )


_FclAsynX28PlusRemLpIdleTimerSelection_Type.__name__ = "Integer32"
_FclAsynX28PlusRemLpIdleTimerSelection_Object = MibTableColumn
fclAsynX28PlusRemLpIdleTimerSelection = _FclAsynX28PlusRemLpIdleTimerSelection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 8, 1, 11),
    _FclAsynX28PlusRemLpIdleTimerSelection_Type()
)
fclAsynX28PlusRemLpIdleTimerSelection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemLpIdleTimerSelection.setStatus("mandatory")


class _FclAsynX28PlusRemLpIdleTimerDelay_Type(Integer32):
    """Custom type fclAsynX28PlusRemLpIdleTimerDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12750),
    )


_FclAsynX28PlusRemLpIdleTimerDelay_Type.__name__ = "Integer32"
_FclAsynX28PlusRemLpIdleTimerDelay_Object = MibTableColumn
fclAsynX28PlusRemLpIdleTimerDelay = _FclAsynX28PlusRemLpIdleTimerDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 8, 1, 12),
    _FclAsynX28PlusRemLpIdleTimerDelay_Type()
)
fclAsynX28PlusRemLpIdleTimerDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemLpIdleTimerDelay.setStatus("mandatory")


class _FclAsynX28PlusRemLpX3Mode_Type(Integer32):
    """Custom type fclAsynX28PlusRemLpX3Mode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("networkVirtualTerminal", 2),
          ("not-used", 255),
          ("transparent", 1))
    )


_FclAsynX28PlusRemLpX3Mode_Type.__name__ = "Integer32"
_FclAsynX28PlusRemLpX3Mode_Object = MibTableColumn
fclAsynX28PlusRemLpX3Mode = _FclAsynX28PlusRemLpX3Mode_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 8, 1, 13),
    _FclAsynX28PlusRemLpX3Mode_Type()
)
fclAsynX28PlusRemLpX3Mode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynX28PlusRemLpX3Mode.setStatus("mandatory")
_FclAsynGeneralParameters_ObjectIdentity = ObjectIdentity
fclAsynGeneralParameters = _FclAsynGeneralParameters_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 7)
)


class _FclAsynGenParLanguageType_Type(Integer32):
    """Custom type fclAsynGenParLanguageType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("english", 2),
          ("french", 1))
    )


_FclAsynGenParLanguageType_Type.__name__ = "Integer32"
_FclAsynGenParLanguageType_Object = MibScalar
fclAsynGenParLanguageType = _FclAsynGenParLanguageType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 7, 1),
    _FclAsynGenParLanguageType_Type()
)
fclAsynGenParLanguageType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynGenParLanguageType.setStatus("mandatory")
_FclAsynConfiguration_ObjectIdentity = ObjectIdentity
fclAsynConfiguration = _FclAsynConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10)
)
_FclAsynCfgConfigTable_Object = MibTable
fclAsynCfgConfigTable = _FclAsynCfgConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 1)
)
if mibBuilder.loadTexts:
    fclAsynCfgConfigTable.setStatus("mandatory")
_FclAsynCfgConfigEntry_Object = MibTableRow
fclAsynCfgConfigEntry = _FclAsynCfgConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 1, 1)
)
fclAsynCfgConfigEntry.setIndexNames(
    (0, "PCE-MIB", "fclAsynCfgConfigId"),
)
if mibBuilder.loadTexts:
    fclAsynCfgConfigEntry.setStatus("mandatory")


class _FclAsynCfgConfigId_Type(Integer32):
    """Custom type fclAsynCfgConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclAsynCfgConfigId_Type.__name__ = "Integer32"
_FclAsynCfgConfigId_Object = MibTableColumn
fclAsynCfgConfigId = _FclAsynCfgConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 1, 1, 1),
    _FclAsynCfgConfigId_Type()
)
fclAsynCfgConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynCfgConfigId.setStatus("mandatory")


class _FclAsynCfgStatus_Type(Integer32):
    """Custom type fclAsynCfgStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclAsynCfgStatus_Type.__name__ = "Integer32"
_FclAsynCfgStatus_Object = MibTableColumn
fclAsynCfgStatus = _FclAsynCfgStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 1, 1, 2),
    _FclAsynCfgStatus_Type()
)
fclAsynCfgStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgStatus.setStatus("mandatory")


class _FclAsynCfgDescription_Type(DisplayString):
    """Custom type fclAsynCfgDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_FclAsynCfgDescription_Type.__name__ = "DisplayString"
_FclAsynCfgDescription_Object = MibTableColumn
fclAsynCfgDescription = _FclAsynCfgDescription_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 1, 1, 3),
    _FclAsynCfgDescription_Type()
)
fclAsynCfgDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgDescription.setStatus("mandatory")


class _FclAsynCfgX3ProfileId_Type(Integer32):
    """Custom type fclAsynCfgX3ProfileId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclAsynCfgX3ProfileId_Type.__name__ = "Integer32"
_FclAsynCfgX3ProfileId_Object = MibTableColumn
fclAsynCfgX3ProfileId = _FclAsynCfgX3ProfileId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 1, 1, 4),
    _FclAsynCfgX3ProfileId_Type()
)
fclAsynCfgX3ProfileId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3ProfileId.setStatus("mandatory")


class _FclAsynCfgX3ModifCount_Type(Integer32):
    """Custom type fclAsynCfgX3ModifCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FclAsynCfgX3ModifCount_Type.__name__ = "Integer32"
_FclAsynCfgX3ModifCount_Object = MibTableColumn
fclAsynCfgX3ModifCount = _FclAsynCfgX3ModifCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 1, 1, 5),
    _FclAsynCfgX3ModifCount_Type()
)
fclAsynCfgX3ModifCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynCfgX3ModifCount.setStatus("mandatory")


class _FclAsynCfgConnectionProfileId_Type(Integer32):
    """Custom type fclAsynCfgConnectionProfileId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclAsynCfgConnectionProfileId_Type.__name__ = "Integer32"
_FclAsynCfgConnectionProfileId_Object = MibTableColumn
fclAsynCfgConnectionProfileId = _FclAsynCfgConnectionProfileId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 1, 1, 6),
    _FclAsynCfgConnectionProfileId_Type()
)
fclAsynCfgConnectionProfileId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgConnectionProfileId.setStatus("mandatory")


class _FclAsynCfgConnModifCount_Type(Integer32):
    """Custom type fclAsynCfgConnModifCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FclAsynCfgConnModifCount_Type.__name__ = "Integer32"
_FclAsynCfgConnModifCount_Object = MibTableColumn
fclAsynCfgConnModifCount = _FclAsynCfgConnModifCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 1, 1, 7),
    _FclAsynCfgConnModifCount_Type()
)
fclAsynCfgConnModifCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynCfgConnModifCount.setStatus("mandatory")
_FclAsynCfgX3Part1Table_Object = MibTable
fclAsynCfgX3Part1Table = _FclAsynCfgX3Part1Table_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11)
)
if mibBuilder.loadTexts:
    fclAsynCfgX3Part1Table.setStatus("mandatory")
_FclAsynCfgX3Part1Entry_Object = MibTableRow
fclAsynCfgX3Part1Entry = _FclAsynCfgX3Part1Entry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1)
)
fclAsynCfgX3Part1Entry.setIndexNames(
    (0, "PCE-MIB", "fclAsynCfgX3Part1ConfigId"),
)
if mibBuilder.loadTexts:
    fclAsynCfgX3Part1Entry.setStatus("mandatory")


class _FclAsynCfgX3Part1ConfigId_Type(Integer32):
    """Custom type fclAsynCfgX3Part1ConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclAsynCfgX3Part1ConfigId_Type.__name__ = "Integer32"
_FclAsynCfgX3Part1ConfigId_Object = MibTableColumn
fclAsynCfgX3Part1ConfigId = _FclAsynCfgX3Part1ConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 1),
    _FclAsynCfgX3Part1ConfigId_Type()
)
fclAsynCfgX3Part1ConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynCfgX3Part1ConfigId.setStatus("mandatory")


class _FclAsynCfgX3Part1ProfileId_Type(Integer32):
    """Custom type fclAsynCfgX3Part1ProfileId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclAsynCfgX3Part1ProfileId_Type.__name__ = "Integer32"
_FclAsynCfgX3Part1ProfileId_Object = MibTableColumn
fclAsynCfgX3Part1ProfileId = _FclAsynCfgX3Part1ProfileId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 2),
    _FclAsynCfgX3Part1ProfileId_Type()
)
fclAsynCfgX3Part1ProfileId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynCfgX3Part1ProfileId.setStatus("mandatory")


class _FclAsynCfgX3P01EscapeChar_Type(Integer32):
    """Custom type fclAsynCfgX3P01EscapeChar based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 126),
    )


_FclAsynCfgX3P01EscapeChar_Type.__name__ = "Integer32"
_FclAsynCfgX3P01EscapeChar_Object = MibTableColumn
fclAsynCfgX3P01EscapeChar = _FclAsynCfgX3P01EscapeChar_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 11),
    _FclAsynCfgX3P01EscapeChar_Type()
)
fclAsynCfgX3P01EscapeChar.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3P01EscapeChar.setStatus("mandatory")


class _FclAsynCfgX3P02Echo_Type(Integer32):
    """Custom type fclAsynCfgX3P02Echo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("val0-off", 1),
          ("val1-on", 2))
    )


_FclAsynCfgX3P02Echo_Type.__name__ = "Integer32"
_FclAsynCfgX3P02Echo_Object = MibTableColumn
fclAsynCfgX3P02Echo = _FclAsynCfgX3P02Echo_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 12),
    _FclAsynCfgX3P02Echo_Type()
)
fclAsynCfgX3P02Echo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3P02Echo.setStatus("mandatory")


class _FclAsynCfgX3P03ForwardingChar_Type(Integer32):
    """Custom type fclAsynCfgX3P03ForwardingChar based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              7,
              19,
              33,
              127,
              128,
              129,
              254,
              255)
        )
    )
    namedValues = NamedValues(
        *(("val0-none", 1),
          ("val126-allCtrlChars", 127),
          ("val127-allChars", 128),
          ("val128-allCtrlChars-vdxFunctionKeys", 129),
          ("val18-crEotEtx", 19),
          ("val2-cr", 3),
          ("val253-encapsCharacSLIP", 254),
          ("val254-encapsCharacPPP", 255),
          ("val32-htLfVtFf", 33),
          ("val6-crEscBelEnqAck", 7))
    )


_FclAsynCfgX3P03ForwardingChar_Type.__name__ = "Integer32"
_FclAsynCfgX3P03ForwardingChar_Object = MibTableColumn
fclAsynCfgX3P03ForwardingChar = _FclAsynCfgX3P03ForwardingChar_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 13),
    _FclAsynCfgX3P03ForwardingChar_Type()
)
fclAsynCfgX3P03ForwardingChar.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3P03ForwardingChar.setStatus("mandatory")


class _FclAsynCfgX3P04IdleTimerDelay_Type(Integer32):
    """Custom type fclAsynCfgX3P04IdleTimerDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclAsynCfgX3P04IdleTimerDelay_Type.__name__ = "Integer32"
_FclAsynCfgX3P04IdleTimerDelay_Object = MibTableColumn
fclAsynCfgX3P04IdleTimerDelay = _FclAsynCfgX3P04IdleTimerDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 14),
    _FclAsynCfgX3P04IdleTimerDelay_Type()
)
fclAsynCfgX3P04IdleTimerDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3P04IdleTimerDelay.setStatus("mandatory")


class _FclAsynCfgX3P05OutputFlowCtrl_Type(Integer32):
    """Custom type fclAsynCfgX3P05OutputFlowCtrl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              9)
        )
    )
    namedValues = NamedValues(
        *(("val0-none", 1),
          ("val1-xonXoffInTransfer", 2),
          ("val2-xonXoff", 3),
          ("val8-rtsCtsInTransfer", 9))
    )


_FclAsynCfgX3P05OutputFlowCtrl_Type.__name__ = "Integer32"
_FclAsynCfgX3P05OutputFlowCtrl_Object = MibTableColumn
fclAsynCfgX3P05OutputFlowCtrl = _FclAsynCfgX3P05OutputFlowCtrl_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 15),
    _FclAsynCfgX3P05OutputFlowCtrl_Type()
)
fclAsynCfgX3P05OutputFlowCtrl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3P05OutputFlowCtrl.setStatus("mandatory")


class _FclAsynCfgX3P06ServiceSignals_Type(Integer32):
    """Custom type fclAsynCfgX3P06ServiceSignals based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              6,
              10,
              14)
        )
    )
    namedValues = NamedValues(
        *(("val0-none", 1),
          ("val1-servSignal-stdFormat", 2),
          ("val13-servSignalAndPrompt-explicitFormat", 14),
          ("val5-servSignalAndPrompt-stdFormat", 6),
          ("val9-servSignal-explicitFormat", 10))
    )


_FclAsynCfgX3P06ServiceSignals_Type.__name__ = "Integer32"
_FclAsynCfgX3P06ServiceSignals_Object = MibTableColumn
fclAsynCfgX3P06ServiceSignals = _FclAsynCfgX3P06ServiceSignals_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 16),
    _FclAsynCfgX3P06ServiceSignals_Type()
)
fclAsynCfgX3P06ServiceSignals.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3P06ServiceSignals.setStatus("mandatory")


class _FclAsynCfgX3P07BreakHandling_Type(Integer32):
    """Custom type fclAsynCfgX3P07BreakHandling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              5,
              6,
              9,
              22)
        )
    )
    namedValues = NamedValues(
        *(("val0-forwardingChar", 1),
          ("val1-interrupt", 2),
          ("val2-reset", 3),
          ("val21-interrupt-breakIndication-discardOutput", 22),
          ("val4-breakIndication", 5),
          ("val5-interrupt-breakIndication", 6),
          ("val8-escapeFromTransfer", 9))
    )


_FclAsynCfgX3P07BreakHandling_Type.__name__ = "Integer32"
_FclAsynCfgX3P07BreakHandling_Object = MibTableColumn
fclAsynCfgX3P07BreakHandling = _FclAsynCfgX3P07BreakHandling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 17),
    _FclAsynCfgX3P07BreakHandling_Type()
)
fclAsynCfgX3P07BreakHandling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3P07BreakHandling.setStatus("mandatory")


class _FclAsynCfgX3P08OutputDiscard_Type(Integer32):
    """Custom type fclAsynCfgX3P08OutputDiscard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("val0-off", 1),
          ("val1-on", 2))
    )


_FclAsynCfgX3P08OutputDiscard_Type.__name__ = "Integer32"
_FclAsynCfgX3P08OutputDiscard_Object = MibTableColumn
fclAsynCfgX3P08OutputDiscard = _FclAsynCfgX3P08OutputDiscard_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 18),
    _FclAsynCfgX3P08OutputDiscard_Type()
)
fclAsynCfgX3P08OutputDiscard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3P08OutputDiscard.setStatus("mandatory")


class _FclAsynCfgX3P09CrPadding_Type(Integer32):
    """Custom type fclAsynCfgX3P09CrPadding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclAsynCfgX3P09CrPadding_Type.__name__ = "Integer32"
_FclAsynCfgX3P09CrPadding_Object = MibTableColumn
fclAsynCfgX3P09CrPadding = _FclAsynCfgX3P09CrPadding_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 19),
    _FclAsynCfgX3P09CrPadding_Type()
)
fclAsynCfgX3P09CrPadding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3P09CrPadding.setStatus("mandatory")


class _FclAsynCfgX3P10LineFolding_Type(Integer32):
    """Custom type fclAsynCfgX3P10LineFolding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclAsynCfgX3P10LineFolding_Type.__name__ = "Integer32"
_FclAsynCfgX3P10LineFolding_Object = MibTableColumn
fclAsynCfgX3P10LineFolding = _FclAsynCfgX3P10LineFolding_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 20),
    _FclAsynCfgX3P10LineFolding_Type()
)
fclAsynCfgX3P10LineFolding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3P10LineFolding.setStatus("mandatory")


class _FclAsynCfgX3P11BinarySpeed_Type(Integer32):
    """Custom type fclAsynCfgX3P11BinarySpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              18,
              21,
              22,
              23,
              24)
        )
    )
    namedValues = NamedValues(
        *(("val0-110", 1),
          ("val1-134-5", 2),
          ("val10-50", 11),
          ("val11-in75Out1200", 12),
          ("val12-2400", 13),
          ("val13-4800", 14),
          ("val14-9600", 15),
          ("val15-19200", 16),
          ("val17-57600", 18),
          ("val2-300", 3),
          ("val20-38400", 21),
          ("val21-out1200In75", 22),
          ("val22-115200", 23),
          ("val23-28800", 24),
          ("val3-1200", 4),
          ("val4-600", 5),
          ("val5-75", 6),
          ("val6-150", 7),
          ("val7-1800", 8),
          ("val8-200", 9),
          ("val9-100", 10))
    )


_FclAsynCfgX3P11BinarySpeed_Type.__name__ = "Integer32"
_FclAsynCfgX3P11BinarySpeed_Object = MibTableColumn
fclAsynCfgX3P11BinarySpeed = _FclAsynCfgX3P11BinarySpeed_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 21),
    _FclAsynCfgX3P11BinarySpeed_Type()
)
fclAsynCfgX3P11BinarySpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3P11BinarySpeed.setStatus("mandatory")
_FclAsynCfgX3Part2Table_Object = MibTable
fclAsynCfgX3Part2Table = _FclAsynCfgX3Part2Table_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12)
)
if mibBuilder.loadTexts:
    fclAsynCfgX3Part2Table.setStatus("mandatory")
_FclAsynCfgX3Part2Entry_Object = MibTableRow
fclAsynCfgX3Part2Entry = _FclAsynCfgX3Part2Entry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1)
)
fclAsynCfgX3Part2Entry.setIndexNames(
    (0, "PCE-MIB", "fclAsynCfgX3Part2ConfigId"),
)
if mibBuilder.loadTexts:
    fclAsynCfgX3Part2Entry.setStatus("mandatory")


class _FclAsynCfgX3Part2ConfigId_Type(Integer32):
    """Custom type fclAsynCfgX3Part2ConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclAsynCfgX3Part2ConfigId_Type.__name__ = "Integer32"
_FclAsynCfgX3Part2ConfigId_Object = MibTableColumn
fclAsynCfgX3Part2ConfigId = _FclAsynCfgX3Part2ConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 1),
    _FclAsynCfgX3Part2ConfigId_Type()
)
fclAsynCfgX3Part2ConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynCfgX3Part2ConfigId.setStatus("mandatory")


class _FclAsynCfgX3Part2ProfileId_Type(Integer32):
    """Custom type fclAsynCfgX3Part2ProfileId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclAsynCfgX3Part2ProfileId_Type.__name__ = "Integer32"
_FclAsynCfgX3Part2ProfileId_Object = MibTableColumn
fclAsynCfgX3Part2ProfileId = _FclAsynCfgX3Part2ProfileId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 2),
    _FclAsynCfgX3Part2ProfileId_Type()
)
fclAsynCfgX3Part2ProfileId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynCfgX3Part2ProfileId.setStatus("mandatory")


class _FclAsynCfgX3P12InputFlowCtrl_Type(Integer32):
    """Custom type fclAsynCfgX3P12InputFlowCtrl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              9)
        )
    )
    namedValues = NamedValues(
        *(("val0-none", 1),
          ("val1-xonXoff", 2),
          ("val8-rtsCts", 9))
    )


_FclAsynCfgX3P12InputFlowCtrl_Type.__name__ = "Integer32"
_FclAsynCfgX3P12InputFlowCtrl_Object = MibTableColumn
fclAsynCfgX3P12InputFlowCtrl = _FclAsynCfgX3P12InputFlowCtrl_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 22),
    _FclAsynCfgX3P12InputFlowCtrl_Type()
)
fclAsynCfgX3P12InputFlowCtrl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3P12InputFlowCtrl.setStatus("mandatory")


class _FclAsynCfgX3P13LfInsertion_Type(Integer32):
    """Custom type fclAsynCfgX3P13LfInsertion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("val0-none", 1),
          ("val1-outCr", 2),
          ("val2-inCr", 3),
          ("val3-outCr-inCr", 4),
          ("val4-outCrEcho", 5),
          ("val5-outCr-outCrEcho", 6),
          ("val6-inCr-outCrEcho", 7),
          ("val7-outCr-inCr-outCrEcho", 8))
    )


_FclAsynCfgX3P13LfInsertion_Type.__name__ = "Integer32"
_FclAsynCfgX3P13LfInsertion_Object = MibTableColumn
fclAsynCfgX3P13LfInsertion = _FclAsynCfgX3P13LfInsertion_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 23),
    _FclAsynCfgX3P13LfInsertion_Type()
)
fclAsynCfgX3P13LfInsertion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3P13LfInsertion.setStatus("mandatory")


class _FclAsynCfgX3P14LfPadding_Type(Integer32):
    """Custom type fclAsynCfgX3P14LfPadding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclAsynCfgX3P14LfPadding_Type.__name__ = "Integer32"
_FclAsynCfgX3P14LfPadding_Object = MibTableColumn
fclAsynCfgX3P14LfPadding = _FclAsynCfgX3P14LfPadding_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 24),
    _FclAsynCfgX3P14LfPadding_Type()
)
fclAsynCfgX3P14LfPadding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3P14LfPadding.setStatus("mandatory")


class _FclAsynCfgX3P15Editing_Type(Integer32):
    """Custom type fclAsynCfgX3P15Editing based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("val0-off", 1),
          ("val1-on", 2))
    )


_FclAsynCfgX3P15Editing_Type.__name__ = "Integer32"
_FclAsynCfgX3P15Editing_Object = MibTableColumn
fclAsynCfgX3P15Editing = _FclAsynCfgX3P15Editing_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 25),
    _FclAsynCfgX3P15Editing_Type()
)
fclAsynCfgX3P15Editing.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3P15Editing.setStatus("mandatory")


class _FclAsynCfgX3P16CharDelete_Type(Integer32):
    """Custom type fclAsynCfgX3P16CharDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_FclAsynCfgX3P16CharDelete_Type.__name__ = "Integer32"
_FclAsynCfgX3P16CharDelete_Object = MibTableColumn
fclAsynCfgX3P16CharDelete = _FclAsynCfgX3P16CharDelete_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 26),
    _FclAsynCfgX3P16CharDelete_Type()
)
fclAsynCfgX3P16CharDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3P16CharDelete.setStatus("mandatory")


class _FclAsynCfgX3P17LineDelete_Type(Integer32):
    """Custom type fclAsynCfgX3P17LineDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_FclAsynCfgX3P17LineDelete_Type.__name__ = "Integer32"
_FclAsynCfgX3P17LineDelete_Object = MibTableColumn
fclAsynCfgX3P17LineDelete = _FclAsynCfgX3P17LineDelete_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 27),
    _FclAsynCfgX3P17LineDelete_Type()
)
fclAsynCfgX3P17LineDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3P17LineDelete.setStatus("mandatory")


class _FclAsynCfgX3P18LineDisplay_Type(Integer32):
    """Custom type fclAsynCfgX3P18LineDisplay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 127),
    )


_FclAsynCfgX3P18LineDisplay_Type.__name__ = "Integer32"
_FclAsynCfgX3P18LineDisplay_Object = MibTableColumn
fclAsynCfgX3P18LineDisplay = _FclAsynCfgX3P18LineDisplay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 28),
    _FclAsynCfgX3P18LineDisplay_Type()
)
fclAsynCfgX3P18LineDisplay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3P18LineDisplay.setStatus("mandatory")


class _FclAsynCfgX3P19EditingSignal_Type(Integer32):
    """Custom type fclAsynCfgX3P19EditingSignal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("val0-none", 1),
          ("val1-printingTerminal", 2),
          ("val2-displayTerminal", 3))
    )


_FclAsynCfgX3P19EditingSignal_Type.__name__ = "Integer32"
_FclAsynCfgX3P19EditingSignal_Object = MibTableColumn
fclAsynCfgX3P19EditingSignal = _FclAsynCfgX3P19EditingSignal_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 29),
    _FclAsynCfgX3P19EditingSignal_Type()
)
fclAsynCfgX3P19EditingSignal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3P19EditingSignal.setStatus("mandatory")


class _FclAsynCfgX3P20EchoMask_Type(Integer32):
    """Custom type fclAsynCfgX3P20EchoMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FclAsynCfgX3P20EchoMask_Type.__name__ = "Integer32"
_FclAsynCfgX3P20EchoMask_Object = MibTableColumn
fclAsynCfgX3P20EchoMask = _FclAsynCfgX3P20EchoMask_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 30),
    _FclAsynCfgX3P20EchoMask_Type()
)
fclAsynCfgX3P20EchoMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3P20EchoMask.setStatus("mandatory")


class _FclAsynCfgX3P21Parity_Type(Integer32):
    """Custom type fclAsynCfgX3P21Parity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("val0-none", 1),
          ("val1-check", 2),
          ("val2-generate", 3),
          ("val3-check-generate", 4))
    )


_FclAsynCfgX3P21Parity_Type.__name__ = "Integer32"
_FclAsynCfgX3P21Parity_Object = MibTableColumn
fclAsynCfgX3P21Parity = _FclAsynCfgX3P21Parity_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 31),
    _FclAsynCfgX3P21Parity_Type()
)
fclAsynCfgX3P21Parity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3P21Parity.setStatus("mandatory")


class _FclAsynCfgX3P22PageWait_Type(Integer32):
    """Custom type fclAsynCfgX3P22PageWait based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 127),
    )


_FclAsynCfgX3P22PageWait_Type.__name__ = "Integer32"
_FclAsynCfgX3P22PageWait_Object = MibTableColumn
fclAsynCfgX3P22PageWait = _FclAsynCfgX3P22PageWait_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 32),
    _FclAsynCfgX3P22PageWait_Type()
)
fclAsynCfgX3P22PageWait.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3P22PageWait.setStatus("mandatory")
_FclAsynCfgX3UserProfilePart1_ObjectIdentity = ObjectIdentity
fclAsynCfgX3UserProfilePart1 = _FclAsynCfgX3UserProfilePart1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15)
)


class _FclAsynCfgX3UserProfileId_Type(Integer32):
    """Custom type fclAsynCfgX3UserProfileId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclAsynCfgX3UserProfileId_Type.__name__ = "Integer32"
_FclAsynCfgX3UserProfileId_Object = MibScalar
fclAsynCfgX3UserProfileId = _FclAsynCfgX3UserProfileId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 3),
    _FclAsynCfgX3UserProfileId_Type()
)
fclAsynCfgX3UserProfileId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserProfileId.setStatus("mandatory")


class _FclAsynCfgX3UserProfileDesc_Type(DisplayString):
    """Custom type fclAsynCfgX3UserProfileDesc based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_FclAsynCfgX3UserProfileDesc_Type.__name__ = "DisplayString"
_FclAsynCfgX3UserProfileDesc_Object = MibScalar
fclAsynCfgX3UserProfileDesc = _FclAsynCfgX3UserProfileDesc_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 4),
    _FclAsynCfgX3UserProfileDesc_Type()
)
fclAsynCfgX3UserProfileDesc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserProfileDesc.setStatus("mandatory")


class _FclAsynCfgX3UserP01EscapeChar_Type(Integer32):
    """Custom type fclAsynCfgX3UserP01EscapeChar based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 126),
    )


_FclAsynCfgX3UserP01EscapeChar_Type.__name__ = "Integer32"
_FclAsynCfgX3UserP01EscapeChar_Object = MibScalar
fclAsynCfgX3UserP01EscapeChar = _FclAsynCfgX3UserP01EscapeChar_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 11),
    _FclAsynCfgX3UserP01EscapeChar_Type()
)
fclAsynCfgX3UserP01EscapeChar.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserP01EscapeChar.setStatus("mandatory")


class _FclAsynCfgX3UserP02Echo_Type(Integer32):
    """Custom type fclAsynCfgX3UserP02Echo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("val0-off", 1),
          ("val1-on", 2))
    )


_FclAsynCfgX3UserP02Echo_Type.__name__ = "Integer32"
_FclAsynCfgX3UserP02Echo_Object = MibScalar
fclAsynCfgX3UserP02Echo = _FclAsynCfgX3UserP02Echo_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 12),
    _FclAsynCfgX3UserP02Echo_Type()
)
fclAsynCfgX3UserP02Echo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserP02Echo.setStatus("mandatory")


class _FclAsynCfgX3UserP03ForwardingChar_Type(Integer32):
    """Custom type fclAsynCfgX3UserP03ForwardingChar based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              7,
              19,
              33,
              127,
              128,
              129,
              254,
              255)
        )
    )
    namedValues = NamedValues(
        *(("val0-none", 1),
          ("val126-allCtrlChars", 127),
          ("val127-allChars", 128),
          ("val128-allCtrlChars-vdxFunctionKeys", 129),
          ("val18-crEotEtx", 19),
          ("val2-cr", 3),
          ("val253-encapsCharacSLIP", 254),
          ("val254-encapsCharacPPP", 255),
          ("val32-htLfVtFf", 33),
          ("val6-crEscBelEnqAck", 7))
    )


_FclAsynCfgX3UserP03ForwardingChar_Type.__name__ = "Integer32"
_FclAsynCfgX3UserP03ForwardingChar_Object = MibScalar
fclAsynCfgX3UserP03ForwardingChar = _FclAsynCfgX3UserP03ForwardingChar_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 13),
    _FclAsynCfgX3UserP03ForwardingChar_Type()
)
fclAsynCfgX3UserP03ForwardingChar.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserP03ForwardingChar.setStatus("mandatory")


class _FclAsynCfgX3UserP04IdleTimerDelay_Type(Integer32):
    """Custom type fclAsynCfgX3UserP04IdleTimerDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclAsynCfgX3UserP04IdleTimerDelay_Type.__name__ = "Integer32"
_FclAsynCfgX3UserP04IdleTimerDelay_Object = MibScalar
fclAsynCfgX3UserP04IdleTimerDelay = _FclAsynCfgX3UserP04IdleTimerDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 14),
    _FclAsynCfgX3UserP04IdleTimerDelay_Type()
)
fclAsynCfgX3UserP04IdleTimerDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserP04IdleTimerDelay.setStatus("mandatory")


class _FclAsynCfgX3UserP05OutputFlowCtrl_Type(Integer32):
    """Custom type fclAsynCfgX3UserP05OutputFlowCtrl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              9)
        )
    )
    namedValues = NamedValues(
        *(("val0-none", 1),
          ("val1-xonXoffInTransfer", 2),
          ("val2-xonXoff", 3),
          ("val8-rtsCtsInTransfer", 9))
    )


_FclAsynCfgX3UserP05OutputFlowCtrl_Type.__name__ = "Integer32"
_FclAsynCfgX3UserP05OutputFlowCtrl_Object = MibScalar
fclAsynCfgX3UserP05OutputFlowCtrl = _FclAsynCfgX3UserP05OutputFlowCtrl_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 15),
    _FclAsynCfgX3UserP05OutputFlowCtrl_Type()
)
fclAsynCfgX3UserP05OutputFlowCtrl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserP05OutputFlowCtrl.setStatus("mandatory")


class _FclAsynCfgX3UserP06ServiceSignals_Type(Integer32):
    """Custom type fclAsynCfgX3UserP06ServiceSignals based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              6,
              10,
              14)
        )
    )
    namedValues = NamedValues(
        *(("val0-none", 1),
          ("val1-servSignal-stdFormat", 2),
          ("val13-servSignalAndPrompt-explicitFormat", 14),
          ("val5-servSignalAndPrompt-stdFormat", 6),
          ("val9-servSignal-explicitFormat", 10))
    )


_FclAsynCfgX3UserP06ServiceSignals_Type.__name__ = "Integer32"
_FclAsynCfgX3UserP06ServiceSignals_Object = MibScalar
fclAsynCfgX3UserP06ServiceSignals = _FclAsynCfgX3UserP06ServiceSignals_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 16),
    _FclAsynCfgX3UserP06ServiceSignals_Type()
)
fclAsynCfgX3UserP06ServiceSignals.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserP06ServiceSignals.setStatus("mandatory")


class _FclAsynCfgX3UserP07BreakHandling_Type(Integer32):
    """Custom type fclAsynCfgX3UserP07BreakHandling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              5,
              6,
              9,
              22)
        )
    )
    namedValues = NamedValues(
        *(("val0-forwardingChar", 1),
          ("val1-interrupt", 2),
          ("val2-reset", 3),
          ("val21-interrupt-breakIndication-discardOutput", 22),
          ("val4-breakIndication", 5),
          ("val5-interrupt-breakIndication", 6),
          ("val8-escapeFromTransfer", 9))
    )


_FclAsynCfgX3UserP07BreakHandling_Type.__name__ = "Integer32"
_FclAsynCfgX3UserP07BreakHandling_Object = MibScalar
fclAsynCfgX3UserP07BreakHandling = _FclAsynCfgX3UserP07BreakHandling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 17),
    _FclAsynCfgX3UserP07BreakHandling_Type()
)
fclAsynCfgX3UserP07BreakHandling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserP07BreakHandling.setStatus("mandatory")


class _FclAsynCfgX3UserP08OutputDiscard_Type(Integer32):
    """Custom type fclAsynCfgX3UserP08OutputDiscard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("val0-off", 1),
          ("val1-on", 2))
    )


_FclAsynCfgX3UserP08OutputDiscard_Type.__name__ = "Integer32"
_FclAsynCfgX3UserP08OutputDiscard_Object = MibScalar
fclAsynCfgX3UserP08OutputDiscard = _FclAsynCfgX3UserP08OutputDiscard_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 18),
    _FclAsynCfgX3UserP08OutputDiscard_Type()
)
fclAsynCfgX3UserP08OutputDiscard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserP08OutputDiscard.setStatus("mandatory")


class _FclAsynCfgX3UserP09CrPadding_Type(Integer32):
    """Custom type fclAsynCfgX3UserP09CrPadding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclAsynCfgX3UserP09CrPadding_Type.__name__ = "Integer32"
_FclAsynCfgX3UserP09CrPadding_Object = MibScalar
fclAsynCfgX3UserP09CrPadding = _FclAsynCfgX3UserP09CrPadding_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 19),
    _FclAsynCfgX3UserP09CrPadding_Type()
)
fclAsynCfgX3UserP09CrPadding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserP09CrPadding.setStatus("mandatory")


class _FclAsynCfgX3UserP10LineFolding_Type(Integer32):
    """Custom type fclAsynCfgX3UserP10LineFolding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclAsynCfgX3UserP10LineFolding_Type.__name__ = "Integer32"
_FclAsynCfgX3UserP10LineFolding_Object = MibScalar
fclAsynCfgX3UserP10LineFolding = _FclAsynCfgX3UserP10LineFolding_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 20),
    _FclAsynCfgX3UserP10LineFolding_Type()
)
fclAsynCfgX3UserP10LineFolding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserP10LineFolding.setStatus("mandatory")


class _FclAsynCfgX3UserP11BinarySpeed_Type(Integer32):
    """Custom type fclAsynCfgX3UserP11BinarySpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              18,
              21,
              22,
              23,
              24)
        )
    )
    namedValues = NamedValues(
        *(("val0-110", 1),
          ("val1-134-5", 2),
          ("val10-50", 11),
          ("val11-75-1200", 12),
          ("val12-2400", 13),
          ("val13-4800", 14),
          ("val14-9600", 15),
          ("val15-19200", 16),
          ("val17-57600", 18),
          ("val2-300", 3),
          ("val20-38400", 21),
          ("val21-1200-75", 22),
          ("val22-115200", 23),
          ("val23-28800", 24),
          ("val3-1200", 4),
          ("val4-600", 5),
          ("val5-75", 6),
          ("val6-150", 7),
          ("val7-1800", 8),
          ("val8-200", 9),
          ("val9-100", 10))
    )


_FclAsynCfgX3UserP11BinarySpeed_Type.__name__ = "Integer32"
_FclAsynCfgX3UserP11BinarySpeed_Object = MibScalar
fclAsynCfgX3UserP11BinarySpeed = _FclAsynCfgX3UserP11BinarySpeed_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 21),
    _FclAsynCfgX3UserP11BinarySpeed_Type()
)
fclAsynCfgX3UserP11BinarySpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserP11BinarySpeed.setStatus("mandatory")
_FclAsynCfgX3UserProfilePart2_ObjectIdentity = ObjectIdentity
fclAsynCfgX3UserProfilePart2 = _FclAsynCfgX3UserProfilePart2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16)
)


class _FclAsynCfgX3UserP12InputFlowCtrl_Type(Integer32):
    """Custom type fclAsynCfgX3UserP12InputFlowCtrl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              9)
        )
    )
    namedValues = NamedValues(
        *(("val0-none", 1),
          ("val1-xonXoff", 2),
          ("val8-rtsCts", 9))
    )


_FclAsynCfgX3UserP12InputFlowCtrl_Type.__name__ = "Integer32"
_FclAsynCfgX3UserP12InputFlowCtrl_Object = MibScalar
fclAsynCfgX3UserP12InputFlowCtrl = _FclAsynCfgX3UserP12InputFlowCtrl_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16, 22),
    _FclAsynCfgX3UserP12InputFlowCtrl_Type()
)
fclAsynCfgX3UserP12InputFlowCtrl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserP12InputFlowCtrl.setStatus("mandatory")


class _FclAsynCfgX3UserP13LfInsertion_Type(Integer32):
    """Custom type fclAsynCfgX3UserP13LfInsertion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("val0-none", 1),
          ("val1-outCr", 2),
          ("val2-inCr", 3),
          ("val3-outCr-inCr", 4),
          ("val4-outCrEcho", 5),
          ("val5-outCr-outCrEcho", 6),
          ("val6-inCr-outCrEcho", 7),
          ("val7-outCr-inCr-outCrEcho", 8))
    )


_FclAsynCfgX3UserP13LfInsertion_Type.__name__ = "Integer32"
_FclAsynCfgX3UserP13LfInsertion_Object = MibScalar
fclAsynCfgX3UserP13LfInsertion = _FclAsynCfgX3UserP13LfInsertion_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16, 23),
    _FclAsynCfgX3UserP13LfInsertion_Type()
)
fclAsynCfgX3UserP13LfInsertion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserP13LfInsertion.setStatus("mandatory")


class _FclAsynCfgX3UserP14LfPadding_Type(Integer32):
    """Custom type fclAsynCfgX3UserP14LfPadding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclAsynCfgX3UserP14LfPadding_Type.__name__ = "Integer32"
_FclAsynCfgX3UserP14LfPadding_Object = MibScalar
fclAsynCfgX3UserP14LfPadding = _FclAsynCfgX3UserP14LfPadding_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16, 24),
    _FclAsynCfgX3UserP14LfPadding_Type()
)
fclAsynCfgX3UserP14LfPadding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserP14LfPadding.setStatus("mandatory")


class _FclAsynCfgX3UserP15Editing_Type(Integer32):
    """Custom type fclAsynCfgX3UserP15Editing based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("val0-off", 1),
          ("val1-on", 2))
    )


_FclAsynCfgX3UserP15Editing_Type.__name__ = "Integer32"
_FclAsynCfgX3UserP15Editing_Object = MibScalar
fclAsynCfgX3UserP15Editing = _FclAsynCfgX3UserP15Editing_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16, 25),
    _FclAsynCfgX3UserP15Editing_Type()
)
fclAsynCfgX3UserP15Editing.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserP15Editing.setStatus("mandatory")


class _FclAsynCfgX3UserP16CharDelete_Type(Integer32):
    """Custom type fclAsynCfgX3UserP16CharDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_FclAsynCfgX3UserP16CharDelete_Type.__name__ = "Integer32"
_FclAsynCfgX3UserP16CharDelete_Object = MibScalar
fclAsynCfgX3UserP16CharDelete = _FclAsynCfgX3UserP16CharDelete_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16, 26),
    _FclAsynCfgX3UserP16CharDelete_Type()
)
fclAsynCfgX3UserP16CharDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserP16CharDelete.setStatus("mandatory")


class _FclAsynCfgX3UserP17LineDelete_Type(Integer32):
    """Custom type fclAsynCfgX3UserP17LineDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_FclAsynCfgX3UserP17LineDelete_Type.__name__ = "Integer32"
_FclAsynCfgX3UserP17LineDelete_Object = MibScalar
fclAsynCfgX3UserP17LineDelete = _FclAsynCfgX3UserP17LineDelete_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16, 27),
    _FclAsynCfgX3UserP17LineDelete_Type()
)
fclAsynCfgX3UserP17LineDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserP17LineDelete.setStatus("mandatory")


class _FclAsynCfgX3UserP18LineDisplay_Type(Integer32):
    """Custom type fclAsynCfgX3UserP18LineDisplay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 127),
    )


_FclAsynCfgX3UserP18LineDisplay_Type.__name__ = "Integer32"
_FclAsynCfgX3UserP18LineDisplay_Object = MibScalar
fclAsynCfgX3UserP18LineDisplay = _FclAsynCfgX3UserP18LineDisplay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16, 28),
    _FclAsynCfgX3UserP18LineDisplay_Type()
)
fclAsynCfgX3UserP18LineDisplay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserP18LineDisplay.setStatus("mandatory")


class _FclAsynCfgX3UserP19EditingSignal_Type(Integer32):
    """Custom type fclAsynCfgX3UserP19EditingSignal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("val0-none", 1),
          ("val1-printingTerminal", 2),
          ("val2-displayTerminal", 3))
    )


_FclAsynCfgX3UserP19EditingSignal_Type.__name__ = "Integer32"
_FclAsynCfgX3UserP19EditingSignal_Object = MibScalar
fclAsynCfgX3UserP19EditingSignal = _FclAsynCfgX3UserP19EditingSignal_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16, 29),
    _FclAsynCfgX3UserP19EditingSignal_Type()
)
fclAsynCfgX3UserP19EditingSignal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserP19EditingSignal.setStatus("mandatory")


class _FclAsynCfgX3UserP20EchoMask_Type(Integer32):
    """Custom type fclAsynCfgX3UserP20EchoMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FclAsynCfgX3UserP20EchoMask_Type.__name__ = "Integer32"
_FclAsynCfgX3UserP20EchoMask_Object = MibScalar
fclAsynCfgX3UserP20EchoMask = _FclAsynCfgX3UserP20EchoMask_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16, 30),
    _FclAsynCfgX3UserP20EchoMask_Type()
)
fclAsynCfgX3UserP20EchoMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserP20EchoMask.setStatus("mandatory")


class _FclAsynCfgX3UserP21Parity_Type(Integer32):
    """Custom type fclAsynCfgX3UserP21Parity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("val0-none", 1),
          ("val1-check", 2),
          ("val2-generate", 3),
          ("val3-check-generate", 4))
    )


_FclAsynCfgX3UserP21Parity_Type.__name__ = "Integer32"
_FclAsynCfgX3UserP21Parity_Object = MibScalar
fclAsynCfgX3UserP21Parity = _FclAsynCfgX3UserP21Parity_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16, 31),
    _FclAsynCfgX3UserP21Parity_Type()
)
fclAsynCfgX3UserP21Parity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserP21Parity.setStatus("mandatory")


class _FclAsynCfgX3UserP22PageWait_Type(Integer32):
    """Custom type fclAsynCfgX3UserP22PageWait based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 127),
    )


_FclAsynCfgX3UserP22PageWait_Type.__name__ = "Integer32"
_FclAsynCfgX3UserP22PageWait_Object = MibScalar
fclAsynCfgX3UserP22PageWait = _FclAsynCfgX3UserP22PageWait_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16, 32),
    _FclAsynCfgX3UserP22PageWait_Type()
)
fclAsynCfgX3UserP22PageWait.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgX3UserP22PageWait.setStatus("mandatory")
_FclAsynCfgConnLinkTable_Object = MibTable
fclAsynCfgConnLinkTable = _FclAsynCfgConnLinkTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21)
)
if mibBuilder.loadTexts:
    fclAsynCfgConnLinkTable.setStatus("mandatory")
_FclAsynCfgConnLinkEntry_Object = MibTableRow
fclAsynCfgConnLinkEntry = _FclAsynCfgConnLinkEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21, 1)
)
fclAsynCfgConnLinkEntry.setIndexNames(
    (0, "PCE-MIB", "fclAsynCfgLinkConfigId"),
)
if mibBuilder.loadTexts:
    fclAsynCfgConnLinkEntry.setStatus("mandatory")


class _FclAsynCfgLinkConfigId_Type(Integer32):
    """Custom type fclAsynCfgLinkConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclAsynCfgLinkConfigId_Type.__name__ = "Integer32"
_FclAsynCfgLinkConfigId_Object = MibTableColumn
fclAsynCfgLinkConfigId = _FclAsynCfgLinkConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21, 1, 1),
    _FclAsynCfgLinkConfigId_Type()
)
fclAsynCfgLinkConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynCfgLinkConfigId.setStatus("mandatory")


class _FclAsynCfgLinkXonXoffParity_Type(Integer32):
    """Custom type fclAsynCfgLinkXonXoffParity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("even", 1),
          ("none", 3),
          ("odd", 2))
    )


_FclAsynCfgLinkXonXoffParity_Type.__name__ = "Integer32"
_FclAsynCfgLinkXonXoffParity_Object = MibTableColumn
fclAsynCfgLinkXonXoffParity = _FclAsynCfgLinkXonXoffParity_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21, 1, 2),
    _FclAsynCfgLinkXonXoffParity_Type()
)
fclAsynCfgLinkXonXoffParity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgLinkXonXoffParity.setStatus("mandatory")


class _FclAsynCfgLinkServSignalParity_Type(Integer32):
    """Custom type fclAsynCfgLinkServSignalParity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("even", 1),
          ("none", 3),
          ("odd", 2))
    )


_FclAsynCfgLinkServSignalParity_Type.__name__ = "Integer32"
_FclAsynCfgLinkServSignalParity_Object = MibTableColumn
fclAsynCfgLinkServSignalParity = _FclAsynCfgLinkServSignalParity_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21, 1, 3),
    _FclAsynCfgLinkServSignalParity_Type()
)
fclAsynCfgLinkServSignalParity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgLinkServSignalParity.setStatus("mandatory")


class _FclAsynCfgLinkDataParity_Type(Integer32):
    """Custom type fclAsynCfgLinkDataParity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("even", 4),
          ("none", 1),
          ("odd", 2))
    )


_FclAsynCfgLinkDataParity_Type.__name__ = "Integer32"
_FclAsynCfgLinkDataParity_Object = MibTableColumn
fclAsynCfgLinkDataParity = _FclAsynCfgLinkDataParity_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21, 1, 4),
    _FclAsynCfgLinkDataParity_Type()
)
fclAsynCfgLinkDataParity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgLinkDataParity.setStatus("mandatory")


class _FclAsynCfgLinkBitCount_Type(Integer32):
    """Custom type fclAsynCfgLinkBitCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(7, 8),
    )


_FclAsynCfgLinkBitCount_Type.__name__ = "Integer32"
_FclAsynCfgLinkBitCount_Object = MibTableColumn
fclAsynCfgLinkBitCount = _FclAsynCfgLinkBitCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21, 1, 5),
    _FclAsynCfgLinkBitCount_Type()
)
fclAsynCfgLinkBitCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgLinkBitCount.setStatus("mandatory")


class _FclAsynCfgLinkStopBitCount_Type(Integer32):
    """Custom type fclAsynCfgLinkStopBitCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              8,
              12)
        )
    )
    namedValues = NamedValues(
        *(("one", 4),
          ("oneAndAHalf", 8),
          ("two", 12))
    )


_FclAsynCfgLinkStopBitCount_Type.__name__ = "Integer32"
_FclAsynCfgLinkStopBitCount_Object = MibTableColumn
fclAsynCfgLinkStopBitCount = _FclAsynCfgLinkStopBitCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21, 1, 6),
    _FclAsynCfgLinkStopBitCount_Type()
)
fclAsynCfgLinkStopBitCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgLinkStopBitCount.setStatus("mandatory")


class _FclAsynCfgLinkXonXoffSignal_Type(Integer32):
    """Custom type fclAsynCfgLinkXonXoffSignal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclAsynCfgLinkXonXoffSignal_Type.__name__ = "Integer32"
_FclAsynCfgLinkXonXoffSignal_Object = MibTableColumn
fclAsynCfgLinkXonXoffSignal = _FclAsynCfgLinkXonXoffSignal_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21, 1, 7),
    _FclAsynCfgLinkXonXoffSignal_Type()
)
fclAsynCfgLinkXonXoffSignal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgLinkXonXoffSignal.setStatus("mandatory")


class _FclAsynCfgLinkInactivityTimer_Type(Integer32):
    """Custom type fclAsynCfgLinkInactivityTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2500),
    )


_FclAsynCfgLinkInactivityTimer_Type.__name__ = "Integer32"
_FclAsynCfgLinkInactivityTimer_Object = MibTableColumn
fclAsynCfgLinkInactivityTimer = _FclAsynCfgLinkInactivityTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21, 1, 8),
    _FclAsynCfgLinkInactivityTimer_Type()
)
fclAsynCfgLinkInactivityTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgLinkInactivityTimer.setStatus("mandatory")


class _FclAsynCfgLinkBlockSize_Type(Integer32):
    """Custom type fclAsynCfgLinkBlockSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 128),
    )


_FclAsynCfgLinkBlockSize_Type.__name__ = "Integer32"
_FclAsynCfgLinkBlockSize_Object = MibTableColumn
fclAsynCfgLinkBlockSize = _FclAsynCfgLinkBlockSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21, 1, 9),
    _FclAsynCfgLinkBlockSize_Type()
)
fclAsynCfgLinkBlockSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgLinkBlockSize.setStatus("mandatory")


class _FclAsynCfgLinkCallResponseTimer_Type(Integer32):
    """Custom type fclAsynCfgLinkCallResponseTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 2500),
    )


_FclAsynCfgLinkCallResponseTimer_Type.__name__ = "Integer32"
_FclAsynCfgLinkCallResponseTimer_Object = MibTableColumn
fclAsynCfgLinkCallResponseTimer = _FclAsynCfgLinkCallResponseTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21, 1, 10),
    _FclAsynCfgLinkCallResponseTimer_Type()
)
fclAsynCfgLinkCallResponseTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgLinkCallResponseTimer.setStatus("mandatory")
_FclAsynCfgConnFacilityTable_Object = MibTable
fclAsynCfgConnFacilityTable = _FclAsynCfgConnFacilityTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25)
)
if mibBuilder.loadTexts:
    fclAsynCfgConnFacilityTable.setStatus("mandatory")
_FclAsynCfgConnFacilityEntry_Object = MibTableRow
fclAsynCfgConnFacilityEntry = _FclAsynCfgConnFacilityEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1)
)
fclAsynCfgConnFacilityEntry.setIndexNames(
    (0, "PCE-MIB", "fclAsynCfgFacConfigId"),
)
if mibBuilder.loadTexts:
    fclAsynCfgConnFacilityEntry.setStatus("mandatory")


class _FclAsynCfgFacConfigId_Type(Integer32):
    """Custom type fclAsynCfgFacConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclAsynCfgFacConfigId_Type.__name__ = "Integer32"
_FclAsynCfgFacConfigId_Object = MibTableColumn
fclAsynCfgFacConfigId = _FclAsynCfgFacConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 1),
    _FclAsynCfgFacConfigId_Type()
)
fclAsynCfgFacConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynCfgFacConfigId.setStatus("mandatory")


class _FclAsynCfgFacClosedUserGroup_Type(Integer32):
    """Custom type fclAsynCfgFacClosedUserGroup based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("noCheck", 2),
          ("subscribe", 3))
    )


_FclAsynCfgFacClosedUserGroup_Type.__name__ = "Integer32"
_FclAsynCfgFacClosedUserGroup_Object = MibTableColumn
fclAsynCfgFacClosedUserGroup = _FclAsynCfgFacClosedUserGroup_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 2),
    _FclAsynCfgFacClosedUserGroup_Type()
)
fclAsynCfgFacClosedUserGroup.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgFacClosedUserGroup.setStatus("mandatory")


class _FclAsynCfgFacReverseCharging_Type(Integer32):
    """Custom type fclAsynCfgFacReverseCharging based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("accept", 2),
          ("refuse", 1))
    )


_FclAsynCfgFacReverseCharging_Type.__name__ = "Integer32"
_FclAsynCfgFacReverseCharging_Object = MibTableColumn
fclAsynCfgFacReverseCharging = _FclAsynCfgFacReverseCharging_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 3),
    _FclAsynCfgFacReverseCharging_Type()
)
fclAsynCfgFacReverseCharging.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgFacReverseCharging.setStatus("mandatory")


class _FclAsynCfgFacThroughputClass_Type(Integer32):
    """Custom type fclAsynCfgFacThroughputClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("subscribe", 2))
    )


_FclAsynCfgFacThroughputClass_Type.__name__ = "Integer32"
_FclAsynCfgFacThroughputClass_Object = MibTableColumn
fclAsynCfgFacThroughputClass = _FclAsynCfgFacThroughputClass_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 10),
    _FclAsynCfgFacThroughputClass_Type()
)
fclAsynCfgFacThroughputClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgFacThroughputClass.setStatus("mandatory")


class _FclAsynCfgFacDefOutThroughputClass_Type(Integer32):
    """Custom type fclAsynCfgFacDefOutThroughputClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("t1200", 7),
          ("t128000", 14),
          ("t150", 4),
          ("t19200", 11),
          ("t192000", 15),
          ("t2400", 8),
          ("t300", 5),
          ("t4800", 9),
          ("t48000", 12),
          ("t600", 6),
          ("t64000", 13),
          ("t75", 3),
          ("t9600", 10))
    )


_FclAsynCfgFacDefOutThroughputClass_Type.__name__ = "Integer32"
_FclAsynCfgFacDefOutThroughputClass_Object = MibTableColumn
fclAsynCfgFacDefOutThroughputClass = _FclAsynCfgFacDefOutThroughputClass_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 11),
    _FclAsynCfgFacDefOutThroughputClass_Type()
)
fclAsynCfgFacDefOutThroughputClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgFacDefOutThroughputClass.setStatus("mandatory")


class _FclAsynCfgFacDefInThroughputClass_Type(Integer32):
    """Custom type fclAsynCfgFacDefInThroughputClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("t1200", 7),
          ("t128000", 14),
          ("t150", 4),
          ("t19200", 11),
          ("t192000", 15),
          ("t2400", 8),
          ("t300", 5),
          ("t4800", 9),
          ("t48000", 12),
          ("t600", 6),
          ("t64000", 13),
          ("t75", 3),
          ("t9600", 10))
    )


_FclAsynCfgFacDefInThroughputClass_Type.__name__ = "Integer32"
_FclAsynCfgFacDefInThroughputClass_Object = MibTableColumn
fclAsynCfgFacDefInThroughputClass = _FclAsynCfgFacDefInThroughputClass_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 12),
    _FclAsynCfgFacDefInThroughputClass_Type()
)
fclAsynCfgFacDefInThroughputClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgFacDefInThroughputClass.setStatus("mandatory")


class _FclAsynCfgFacMaxOutThroughputClass_Type(Integer32):
    """Custom type fclAsynCfgFacMaxOutThroughputClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("t1200", 7),
          ("t128000", 14),
          ("t150", 4),
          ("t19200", 11),
          ("t192000", 15),
          ("t2400", 8),
          ("t300", 5),
          ("t4800", 9),
          ("t48000", 12),
          ("t600", 6),
          ("t64000", 13),
          ("t75", 3),
          ("t9600", 10))
    )


_FclAsynCfgFacMaxOutThroughputClass_Type.__name__ = "Integer32"
_FclAsynCfgFacMaxOutThroughputClass_Object = MibTableColumn
fclAsynCfgFacMaxOutThroughputClass = _FclAsynCfgFacMaxOutThroughputClass_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 13),
    _FclAsynCfgFacMaxOutThroughputClass_Type()
)
fclAsynCfgFacMaxOutThroughputClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgFacMaxOutThroughputClass.setStatus("mandatory")


class _FclAsynCfgFacMaxInThroughputClass_Type(Integer32):
    """Custom type fclAsynCfgFacMaxInThroughputClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("t1200", 7),
          ("t128000", 14),
          ("t150", 4),
          ("t19200", 11),
          ("t192000", 15),
          ("t2400", 8),
          ("t300", 5),
          ("t4800", 9),
          ("t48000", 12),
          ("t600", 6),
          ("t64000", 13),
          ("t75", 3),
          ("t9600", 10))
    )


_FclAsynCfgFacMaxInThroughputClass_Type.__name__ = "Integer32"
_FclAsynCfgFacMaxInThroughputClass_Object = MibTableColumn
fclAsynCfgFacMaxInThroughputClass = _FclAsynCfgFacMaxInThroughputClass_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 14),
    _FclAsynCfgFacMaxInThroughputClass_Type()
)
fclAsynCfgFacMaxInThroughputClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgFacMaxInThroughputClass.setStatus("mandatory")


class _FclAsynCfgFacPacketSize_Type(Integer32):
    """Custom type fclAsynCfgFacPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("subscribe", 2))
    )


_FclAsynCfgFacPacketSize_Type.__name__ = "Integer32"
_FclAsynCfgFacPacketSize_Object = MibTableColumn
fclAsynCfgFacPacketSize = _FclAsynCfgFacPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 20),
    _FclAsynCfgFacPacketSize_Type()
)
fclAsynCfgFacPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgFacPacketSize.setStatus("mandatory")


class _FclAsynCfgFacDefOutPacketSize_Type(Integer32):
    """Custom type fclAsynCfgFacDefOutPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("s1024", 10),
          ("s128", 7),
          ("s16", 4),
          ("s2048", 11),
          ("s256", 8),
          ("s32", 5),
          ("s4096", 12),
          ("s512", 9),
          ("s64", 6),
          ("s8192", 13))
    )


_FclAsynCfgFacDefOutPacketSize_Type.__name__ = "Integer32"
_FclAsynCfgFacDefOutPacketSize_Object = MibTableColumn
fclAsynCfgFacDefOutPacketSize = _FclAsynCfgFacDefOutPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 21),
    _FclAsynCfgFacDefOutPacketSize_Type()
)
fclAsynCfgFacDefOutPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgFacDefOutPacketSize.setStatus("mandatory")


class _FclAsynCfgFacDefInPacketSize_Type(Integer32):
    """Custom type fclAsynCfgFacDefInPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("s1024", 10),
          ("s128", 7),
          ("s16", 4),
          ("s2048", 11),
          ("s256", 8),
          ("s32", 5),
          ("s4096", 12),
          ("s512", 9),
          ("s64", 6),
          ("s8192", 13))
    )


_FclAsynCfgFacDefInPacketSize_Type.__name__ = "Integer32"
_FclAsynCfgFacDefInPacketSize_Object = MibTableColumn
fclAsynCfgFacDefInPacketSize = _FclAsynCfgFacDefInPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 22),
    _FclAsynCfgFacDefInPacketSize_Type()
)
fclAsynCfgFacDefInPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgFacDefInPacketSize.setStatus("mandatory")


class _FclAsynCfgFacMaxOutPacketSize_Type(Integer32):
    """Custom type fclAsynCfgFacMaxOutPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("s1024", 10),
          ("s128", 7),
          ("s16", 4),
          ("s2048", 11),
          ("s256", 8),
          ("s32", 5),
          ("s4096", 12),
          ("s512", 9),
          ("s64", 6),
          ("s8192", 13))
    )


_FclAsynCfgFacMaxOutPacketSize_Type.__name__ = "Integer32"
_FclAsynCfgFacMaxOutPacketSize_Object = MibTableColumn
fclAsynCfgFacMaxOutPacketSize = _FclAsynCfgFacMaxOutPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 23),
    _FclAsynCfgFacMaxOutPacketSize_Type()
)
fclAsynCfgFacMaxOutPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgFacMaxOutPacketSize.setStatus("mandatory")


class _FclAsynCfgFacMaxInPacketSize_Type(Integer32):
    """Custom type fclAsynCfgFacMaxInPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("s1024", 10),
          ("s128", 7),
          ("s16", 4),
          ("s2048", 11),
          ("s256", 8),
          ("s32", 5),
          ("s4096", 12),
          ("s512", 9),
          ("s64", 6),
          ("s8192", 13))
    )


_FclAsynCfgFacMaxInPacketSize_Type.__name__ = "Integer32"
_FclAsynCfgFacMaxInPacketSize_Object = MibTableColumn
fclAsynCfgFacMaxInPacketSize = _FclAsynCfgFacMaxInPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 24),
    _FclAsynCfgFacMaxInPacketSize_Type()
)
fclAsynCfgFacMaxInPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgFacMaxInPacketSize.setStatus("mandatory")


class _FclAsynCfgFacMinOutPacketSize_Type(Integer32):
    """Custom type fclAsynCfgFacMinOutPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("s1024", 10),
          ("s128", 7),
          ("s16", 4),
          ("s2048", 11),
          ("s256", 8),
          ("s32", 5),
          ("s4096", 12),
          ("s512", 9),
          ("s64", 6),
          ("s8192", 13))
    )


_FclAsynCfgFacMinOutPacketSize_Type.__name__ = "Integer32"
_FclAsynCfgFacMinOutPacketSize_Object = MibTableColumn
fclAsynCfgFacMinOutPacketSize = _FclAsynCfgFacMinOutPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 25),
    _FclAsynCfgFacMinOutPacketSize_Type()
)
fclAsynCfgFacMinOutPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgFacMinOutPacketSize.setStatus("mandatory")


class _FclAsynCfgFacMinInPacketSize_Type(Integer32):
    """Custom type fclAsynCfgFacMinInPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("s1024", 10),
          ("s128", 7),
          ("s16", 4),
          ("s2048", 11),
          ("s256", 8),
          ("s32", 5),
          ("s4096", 12),
          ("s512", 9),
          ("s64", 6),
          ("s8192", 13))
    )


_FclAsynCfgFacMinInPacketSize_Type.__name__ = "Integer32"
_FclAsynCfgFacMinInPacketSize_Object = MibTableColumn
fclAsynCfgFacMinInPacketSize = _FclAsynCfgFacMinInPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 26),
    _FclAsynCfgFacMinInPacketSize_Type()
)
fclAsynCfgFacMinInPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgFacMinInPacketSize.setStatus("mandatory")


class _FclAsynCfgFacWindowSize_Type(Integer32):
    """Custom type fclAsynCfgFacWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("subscribe", 2))
    )


_FclAsynCfgFacWindowSize_Type.__name__ = "Integer32"
_FclAsynCfgFacWindowSize_Object = MibTableColumn
fclAsynCfgFacWindowSize = _FclAsynCfgFacWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 30),
    _FclAsynCfgFacWindowSize_Type()
)
fclAsynCfgFacWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgFacWindowSize.setStatus("mandatory")


class _FclAsynCfgFacDefOutWindowSize_Type(Integer32):
    """Custom type fclAsynCfgFacDefOutWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 7),
    )


_FclAsynCfgFacDefOutWindowSize_Type.__name__ = "Integer32"
_FclAsynCfgFacDefOutWindowSize_Object = MibTableColumn
fclAsynCfgFacDefOutWindowSize = _FclAsynCfgFacDefOutWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 31),
    _FclAsynCfgFacDefOutWindowSize_Type()
)
fclAsynCfgFacDefOutWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgFacDefOutWindowSize.setStatus("mandatory")


class _FclAsynCfgFacDefInWindowSize_Type(Integer32):
    """Custom type fclAsynCfgFacDefInWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 7),
    )


_FclAsynCfgFacDefInWindowSize_Type.__name__ = "Integer32"
_FclAsynCfgFacDefInWindowSize_Object = MibTableColumn
fclAsynCfgFacDefInWindowSize = _FclAsynCfgFacDefInWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 32),
    _FclAsynCfgFacDefInWindowSize_Type()
)
fclAsynCfgFacDefInWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgFacDefInWindowSize.setStatus("mandatory")


class _FclAsynCfgFacMaxOutWindowSize_Type(Integer32):
    """Custom type fclAsynCfgFacMaxOutWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 7),
    )


_FclAsynCfgFacMaxOutWindowSize_Type.__name__ = "Integer32"
_FclAsynCfgFacMaxOutWindowSize_Object = MibTableColumn
fclAsynCfgFacMaxOutWindowSize = _FclAsynCfgFacMaxOutWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 33),
    _FclAsynCfgFacMaxOutWindowSize_Type()
)
fclAsynCfgFacMaxOutWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgFacMaxOutWindowSize.setStatus("mandatory")


class _FclAsynCfgFacMaxInWindowSize_Type(Integer32):
    """Custom type fclAsynCfgFacMaxInWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 7),
    )


_FclAsynCfgFacMaxInWindowSize_Type.__name__ = "Integer32"
_FclAsynCfgFacMaxInWindowSize_Object = MibTableColumn
fclAsynCfgFacMaxInWindowSize = _FclAsynCfgFacMaxInWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 34),
    _FclAsynCfgFacMaxInWindowSize_Type()
)
fclAsynCfgFacMaxInWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgFacMaxInWindowSize.setStatus("mandatory")
_FclAsynCfgConnServiceTable_Object = MibTable
fclAsynCfgConnServiceTable = _FclAsynCfgConnServiceTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30)
)
if mibBuilder.loadTexts:
    fclAsynCfgConnServiceTable.setStatus("mandatory")
_FclAsynCfgConnServiceEntry_Object = MibTableRow
fclAsynCfgConnServiceEntry = _FclAsynCfgConnServiceEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1)
)
fclAsynCfgConnServiceEntry.setIndexNames(
    (0, "PCE-MIB", "fclAsynCfgSerConfigId"),
)
if mibBuilder.loadTexts:
    fclAsynCfgConnServiceEntry.setStatus("mandatory")


class _FclAsynCfgSerConfigId_Type(Integer32):
    """Custom type fclAsynCfgSerConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclAsynCfgSerConfigId_Type.__name__ = "Integer32"
_FclAsynCfgSerConfigId_Object = MibTableColumn
fclAsynCfgSerConfigId = _FclAsynCfgSerConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 1),
    _FclAsynCfgSerConfigId_Type()
)
fclAsynCfgSerConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynCfgSerConfigId.setStatus("mandatory")


class _FclAsynCfgSerCompression_Type(Integer32):
    """Custom type fclAsynCfgSerCompression based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bothway", 4),
          ("networkToSubscriber", 2),
          ("off", 1),
          ("subscriberToNetwork", 3))
    )


_FclAsynCfgSerCompression_Type.__name__ = "Integer32"
_FclAsynCfgSerCompression_Object = MibTableColumn
fclAsynCfgSerCompression = _FclAsynCfgSerCompression_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 2),
    _FclAsynCfgSerCompression_Type()
)
fclAsynCfgSerCompression.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgSerCompression.setStatus("mandatory")


class _FclAsynCfgSerCompressNegociation_Type(Integer32):
    """Custom type fclAsynCfgSerCompressNegociation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onMandatoryCompression", 3),
          ("onOptionalCompression", 2))
    )


_FclAsynCfgSerCompressNegociation_Type.__name__ = "Integer32"
_FclAsynCfgSerCompressNegociation_Object = MibTableColumn
fclAsynCfgSerCompressNegociation = _FclAsynCfgSerCompressNegociation_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 3),
    _FclAsynCfgSerCompressNegociation_Type()
)
fclAsynCfgSerCompressNegociation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgSerCompressNegociation.setStatus("mandatory")


class _FclAsynCfgSerCompressScrambling_Type(Integer32):
    """Custom type fclAsynCfgSerCompressScrambling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclAsynCfgSerCompressScrambling_Type.__name__ = "Integer32"
_FclAsynCfgSerCompressScrambling_Object = MibTableColumn
fclAsynCfgSerCompressScrambling = _FclAsynCfgSerCompressScrambling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 4),
    _FclAsynCfgSerCompressScrambling_Type()
)
fclAsynCfgSerCompressScrambling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgSerCompressScrambling.setStatus("mandatory")


class _FclAsynCfgSerCompressMultiPacketsTimer_Type(Integer32):
    """Custom type fclAsynCfgSerCompressMultiPacketsTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1500),
    )


_FclAsynCfgSerCompressMultiPacketsTimer_Type.__name__ = "Integer32"
_FclAsynCfgSerCompressMultiPacketsTimer_Object = MibTableColumn
fclAsynCfgSerCompressMultiPacketsTimer = _FclAsynCfgSerCompressMultiPacketsTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 5),
    _FclAsynCfgSerCompressMultiPacketsTimer_Type()
)
fclAsynCfgSerCompressMultiPacketsTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgSerCompressMultiPacketsTimer.setStatus("mandatory")


class _FclAsynCfgSerX29Reselection_Type(Integer32):
    """Custom type fclAsynCfgSerX29Reselection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclAsynCfgSerX29Reselection_Type.__name__ = "Integer32"
_FclAsynCfgSerX29Reselection_Object = MibTableColumn
fclAsynCfgSerX29Reselection = _FclAsynCfgSerX29Reselection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 6),
    _FclAsynCfgSerX29Reselection_Type()
)
fclAsynCfgSerX29Reselection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgSerX29Reselection.setStatus("mandatory")


class _FclAsynCfgSerCallReturnTransmission_Type(Integer32):
    """Custom type fclAsynCfgSerCallReturnTransmission based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 3))
    )


_FclAsynCfgSerCallReturnTransmission_Type.__name__ = "Integer32"
_FclAsynCfgSerCallReturnTransmission_Object = MibTableColumn
fclAsynCfgSerCallReturnTransmission = _FclAsynCfgSerCallReturnTransmission_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 7),
    _FclAsynCfgSerCallReturnTransmission_Type()
)
fclAsynCfgSerCallReturnTransmission.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgSerCallReturnTransmission.setStatus("mandatory")


class _FclAsynCfgSerDBitModification_Type(Integer32):
    """Custom type fclAsynCfgSerDBitModification based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clear", 2),
          ("off", 1),
          ("on", 3))
    )


_FclAsynCfgSerDBitModification_Type.__name__ = "Integer32"
_FclAsynCfgSerDBitModification_Object = MibTableColumn
fclAsynCfgSerDBitModification = _FclAsynCfgSerDBitModification_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 8),
    _FclAsynCfgSerDBitModification_Type()
)
fclAsynCfgSerDBitModification.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgSerDBitModification.setStatus("mandatory")


class _FclAsynCfgSerReliableVc_Type(Integer32):
    """Custom type fclAsynCfgSerReliableVc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("check", 4),
          ("clear", 3),
          ("off", 1),
          ("subscribe", 2))
    )


_FclAsynCfgSerReliableVc_Type.__name__ = "Integer32"
_FclAsynCfgSerReliableVc_Object = MibTableColumn
fclAsynCfgSerReliableVc = _FclAsynCfgSerReliableVc_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 9),
    _FclAsynCfgSerReliableVc_Type()
)
fclAsynCfgSerReliableVc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgSerReliableVc.setStatus("mandatory")


class _FclAsynCfgSerCos_Type(Integer32):
    """Custom type fclAsynCfgSerCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ubr", 3),
          ("vbr", 1))
    )


_FclAsynCfgSerCos_Type.__name__ = "Integer32"
_FclAsynCfgSerCos_Object = MibTableColumn
fclAsynCfgSerCos = _FclAsynCfgSerCos_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 20),
    _FclAsynCfgSerCos_Type()
)
fclAsynCfgSerCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgSerCos.setStatus("mandatory")


class _FclAsynCfgSerCir_Type(Integer32):
    """Custom type fclAsynCfgSerCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(600, 2048000),
    )


_FclAsynCfgSerCir_Type.__name__ = "Integer32"
_FclAsynCfgSerCir_Object = MibTableColumn
fclAsynCfgSerCir = _FclAsynCfgSerCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 21),
    _FclAsynCfgSerCir_Type()
)
fclAsynCfgSerCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgSerCir.setStatus("mandatory")


class _FclAsynCfgSerMinCir_Type(Integer32):
    """Custom type fclAsynCfgSerMinCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FclAsynCfgSerMinCir_Type.__name__ = "Integer32"
_FclAsynCfgSerMinCir_Object = MibTableColumn
fclAsynCfgSerMinCir = _FclAsynCfgSerMinCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 22),
    _FclAsynCfgSerMinCir_Type()
)
fclAsynCfgSerMinCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgSerMinCir.setStatus("mandatory")


class _FclAsynCfgSerConversionAimedPoint_Type(Integer32):
    """Custom type fclAsynCfgSerConversionAimedPoint based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclAsynCfgSerConversionAimedPoint_Type.__name__ = "Integer32"
_FclAsynCfgSerConversionAimedPoint_Object = MibTableColumn
fclAsynCfgSerConversionAimedPoint = _FclAsynCfgSerConversionAimedPoint_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 30),
    _FclAsynCfgSerConversionAimedPoint_Type()
)
fclAsynCfgSerConversionAimedPoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgSerConversionAimedPoint.setStatus("mandatory")


class _FclAsynCfgSerConversionIncomingCall_Type(Integer32):
    """Custom type fclAsynCfgSerConversionIncomingCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("calledAddress", 3),
          ("callingAddress", 2),
          ("callingAddressAndCalledAddress", 4),
          ("off", 1))
    )


_FclAsynCfgSerConversionIncomingCall_Type.__name__ = "Integer32"
_FclAsynCfgSerConversionIncomingCall_Object = MibTableColumn
fclAsynCfgSerConversionIncomingCall = _FclAsynCfgSerConversionIncomingCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 31),
    _FclAsynCfgSerConversionIncomingCall_Type()
)
fclAsynCfgSerConversionIncomingCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgSerConversionIncomingCall.setStatus("mandatory")


class _FclAsynCfgSerConversionOutgoingCall_Type(Integer32):
    """Custom type fclAsynCfgSerConversionOutgoingCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("calledAddress", 3),
          ("callingAddress", 2),
          ("callingAddressAndCalledAddress", 4),
          ("off", 1))
    )


_FclAsynCfgSerConversionOutgoingCall_Type.__name__ = "Integer32"
_FclAsynCfgSerConversionOutgoingCall_Object = MibTableColumn
fclAsynCfgSerConversionOutgoingCall = _FclAsynCfgSerConversionOutgoingCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 32),
    _FclAsynCfgSerConversionOutgoingCall_Type()
)
fclAsynCfgSerConversionOutgoingCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgSerConversionOutgoingCall.setStatus("mandatory")


class _FclAsynCfgSerConversionAddressCheck_Type(Integer32):
    """Custom type fclAsynCfgSerConversionAddressCheck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onIncomingCall", 2),
          ("onIncomingCallAndOutgoingCall", 4),
          ("onOutgoingCall", 3))
    )


_FclAsynCfgSerConversionAddressCheck_Type.__name__ = "Integer32"
_FclAsynCfgSerConversionAddressCheck_Object = MibTableColumn
fclAsynCfgSerConversionAddressCheck = _FclAsynCfgSerConversionAddressCheck_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 33),
    _FclAsynCfgSerConversionAddressCheck_Type()
)
fclAsynCfgSerConversionAddressCheck.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynCfgSerConversionAddressCheck.setStatus("mandatory")
_FclAsynAutoCalls_ObjectIdentity = ObjectIdentity
fclAsynAutoCalls = _FclAsynAutoCalls_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20)
)
_FclAsynAutoCallTable_Object = MibTable
fclAsynAutoCallTable = _FclAsynAutoCallTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 1)
)
if mibBuilder.loadTexts:
    fclAsynAutoCallTable.setStatus("mandatory")
_FclAsynAutoCallEntry_Object = MibTableRow
fclAsynAutoCallEntry = _FclAsynAutoCallEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 1, 1)
)
fclAsynAutoCallEntry.setIndexNames(
    (0, "PCE-MIB", "fclAsynAutoLogPortId"),
)
if mibBuilder.loadTexts:
    fclAsynAutoCallEntry.setStatus("mandatory")


class _FclAsynAutoLogPortId_Type(Integer32):
    """Custom type fclAsynAutoLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclAsynAutoLogPortId_Type.__name__ = "Integer32"
_FclAsynAutoLogPortId_Object = MibTableColumn
fclAsynAutoLogPortId = _FclAsynAutoLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 1, 1, 1),
    _FclAsynAutoLogPortId_Type()
)
fclAsynAutoLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynAutoLogPortId.setStatus("mandatory")


class _FclAsynAutoStatus_Type(Integer32):
    """Custom type fclAsynAutoStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclAsynAutoStatus_Type.__name__ = "Integer32"
_FclAsynAutoStatus_Object = MibTableColumn
fclAsynAutoStatus = _FclAsynAutoStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 1, 1, 2),
    _FclAsynAutoStatus_Type()
)
fclAsynAutoStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynAutoStatus.setStatus("mandatory")


class _FclAsynAutoCalledAddr_Type(OctetString):
    """Custom type fclAsynAutoCalledAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclAsynAutoCalledAddr_Type.__name__ = "OctetString"
_FclAsynAutoCalledAddr_Object = MibTableColumn
fclAsynAutoCalledAddr = _FclAsynAutoCalledAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 1, 1, 5),
    _FclAsynAutoCalledAddr_Type()
)
fclAsynAutoCalledAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynAutoCalledAddr.setStatus("mandatory")


class _FclAsynAutoFacility_Type(Integer32):
    """Custom type fclAsynAutoFacility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("cug", 3),
          ("none", 1),
          ("reverseCharging", 2),
          ("reverseCharging-cug", 4),
          ("throughputClass", 5))
    )


_FclAsynAutoFacility_Type.__name__ = "Integer32"
_FclAsynAutoFacility_Object = MibTableColumn
fclAsynAutoFacility = _FclAsynAutoFacility_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 1, 1, 6),
    _FclAsynAutoFacility_Type()
)
fclAsynAutoFacility.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynAutoFacility.setStatus("mandatory")


class _FclAsynAutoFacThroughputClass_Type(Integer32):
    """Custom type fclAsynAutoFacThroughputClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("t1200", 7),
          ("t128000", 14),
          ("t150", 4),
          ("t19200", 11),
          ("t192000", 15),
          ("t2400", 8),
          ("t300", 5),
          ("t4800", 9),
          ("t48000", 12),
          ("t600", 6),
          ("t64000", 13),
          ("t75", 3),
          ("t9600", 10))
    )


_FclAsynAutoFacThroughputClass_Type.__name__ = "Integer32"
_FclAsynAutoFacThroughputClass_Object = MibTableColumn
fclAsynAutoFacThroughputClass = _FclAsynAutoFacThroughputClass_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 1, 1, 7),
    _FclAsynAutoFacThroughputClass_Type()
)
fclAsynAutoFacThroughputClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynAutoFacThroughputClass.setStatus("mandatory")


class _FclAsynAutoCallUserDataAscii_Type(DisplayString):
    """Custom type fclAsynAutoCallUserDataAscii based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 12),
    )


_FclAsynAutoCallUserDataAscii_Type.__name__ = "DisplayString"
_FclAsynAutoCallUserDataAscii_Object = MibTableColumn
fclAsynAutoCallUserDataAscii = _FclAsynAutoCallUserDataAscii_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 1, 1, 10),
    _FclAsynAutoCallUserDataAscii_Type()
)
fclAsynAutoCallUserDataAscii.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynAutoCallUserDataAscii.setStatus("mandatory")


class _FclAsynAutoCallUserDataHexa_Type(OctetString):
    """Custom type fclAsynAutoCallUserDataHexa based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(13, 13),
    )


_FclAsynAutoCallUserDataHexa_Type.__name__ = "OctetString"
_FclAsynAutoCallUserDataHexa_Object = MibTableColumn
fclAsynAutoCallUserDataHexa = _FclAsynAutoCallUserDataHexa_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 1, 1, 11),
    _FclAsynAutoCallUserDataHexa_Type()
)
fclAsynAutoCallUserDataHexa.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynAutoCallUserDataHexa.setStatus("mandatory")


class _FclAsynAutoMinimumRecallTimer_Type(Integer32):
    """Custom type fclAsynAutoMinimumRecallTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 990),
    )


_FclAsynAutoMinimumRecallTimer_Type.__name__ = "Integer32"
_FclAsynAutoMinimumRecallTimer_Object = MibTableColumn
fclAsynAutoMinimumRecallTimer = _FclAsynAutoMinimumRecallTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 1, 1, 15),
    _FclAsynAutoMinimumRecallTimer_Type()
)
fclAsynAutoMinimumRecallTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynAutoMinimumRecallTimer.setStatus("mandatory")


class _FclAsynAutoDiscardCharDuringTimer_Type(Integer32):
    """Custom type fclAsynAutoDiscardCharDuringTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclAsynAutoDiscardCharDuringTimer_Type.__name__ = "Integer32"
_FclAsynAutoDiscardCharDuringTimer_Object = MibTableColumn
fclAsynAutoDiscardCharDuringTimer = _FclAsynAutoDiscardCharDuringTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 1, 1, 16),
    _FclAsynAutoDiscardCharDuringTimer_Type()
)
fclAsynAutoDiscardCharDuringTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynAutoDiscardCharDuringTimer.setStatus("mandatory")
_FclAsynAutoVdxKeyTranslationTable_Object = MibTable
fclAsynAutoVdxKeyTranslationTable = _FclAsynAutoVdxKeyTranslationTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 2)
)
if mibBuilder.loadTexts:
    fclAsynAutoVdxKeyTranslationTable.setStatus("mandatory")
_FclAsynAutoVdxKeyTranslationEntry_Object = MibTableRow
fclAsynAutoVdxKeyTranslationEntry = _FclAsynAutoVdxKeyTranslationEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 2, 1)
)
fclAsynAutoVdxKeyTranslationEntry.setIndexNames(
    (0, "PCE-MIB", "fclAsynAutoTransLpId"),
)
if mibBuilder.loadTexts:
    fclAsynAutoVdxKeyTranslationEntry.setStatus("mandatory")


class _FclAsynAutoTransLpId_Type(Integer32):
    """Custom type fclAsynAutoTransLpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclAsynAutoTransLpId_Type.__name__ = "Integer32"
_FclAsynAutoTransLpId_Object = MibTableColumn
fclAsynAutoTransLpId = _FclAsynAutoTransLpId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 2, 1, 1),
    _FclAsynAutoTransLpId_Type()
)
fclAsynAutoTransLpId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynAutoTransLpId.setStatus("mandatory")


class _FclAsynAutoTransTranscoding_Type(Integer32):
    """Custom type fclAsynAutoTransTranscoding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclAsynAutoTransTranscoding_Type.__name__ = "Integer32"
_FclAsynAutoTransTranscoding_Object = MibTableColumn
fclAsynAutoTransTranscoding = _FclAsynAutoTransTranscoding_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 2, 1, 2),
    _FclAsynAutoTransTranscoding_Type()
)
fclAsynAutoTransTranscoding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynAutoTransTranscoding.setStatus("mandatory")


class _FclAsynAutoTransProfile_Type(Integer32):
    """Custom type fclAsynAutoTransProfile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("p1", 1),
          ("p2", 2))
    )


_FclAsynAutoTransProfile_Type.__name__ = "Integer32"
_FclAsynAutoTransProfile_Object = MibTableColumn
fclAsynAutoTransProfile = _FclAsynAutoTransProfile_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 2, 1, 3),
    _FclAsynAutoTransProfile_Type()
)
fclAsynAutoTransProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynAutoTransProfile.setStatus("mandatory")


class _FclAsynAutoTransAutoTermMode_Type(Integer32):
    """Custom type fclAsynAutoTransAutoTermMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclAsynAutoTransAutoTermMode_Type.__name__ = "Integer32"
_FclAsynAutoTransAutoTermMode_Object = MibTableColumn
fclAsynAutoTransAutoTermMode = _FclAsynAutoTransAutoTermMode_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 2, 1, 4),
    _FclAsynAutoTransAutoTermMode_Type()
)
fclAsynAutoTransAutoTermMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynAutoTransAutoTermMode.setStatus("mandatory")


class _FclAsynAutoTransCFKeyHandling_Type(Integer32):
    """Custom type fclAsynAutoTransCFKeyHandling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("local", 1),
          ("remote", 2))
    )


_FclAsynAutoTransCFKeyHandling_Type.__name__ = "Integer32"
_FclAsynAutoTransCFKeyHandling_Object = MibTableColumn
fclAsynAutoTransCFKeyHandling = _FclAsynAutoTransCFKeyHandling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 2, 1, 5),
    _FclAsynAutoTransCFKeyHandling_Type()
)
fclAsynAutoTransCFKeyHandling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynAutoTransCFKeyHandling.setStatus("mandatory")


class _FclAsynAutoTransClearHangUp_Type(Integer32):
    """Custom type fclAsynAutoTransClearHangUp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclAsynAutoTransClearHangUp_Type.__name__ = "Integer32"
_FclAsynAutoTransClearHangUp_Object = MibTableColumn
fclAsynAutoTransClearHangUp = _FclAsynAutoTransClearHangUp_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 2, 1, 6),
    _FclAsynAutoTransClearHangUp_Type()
)
fclAsynAutoTransClearHangUp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynAutoTransClearHangUp.setStatus("mandatory")
_FclAsynMnemonic_ObjectIdentity = ObjectIdentity
fclAsynMnemonic = _FclAsynMnemonic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21)
)
_FclAsynMnemonicTable_Object = MibTable
fclAsynMnemonicTable = _FclAsynMnemonicTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 1)
)
if mibBuilder.loadTexts:
    fclAsynMnemonicTable.setStatus("mandatory")
_FclAsynMnemonicEntry_Object = MibTableRow
fclAsynMnemonicEntry = _FclAsynMnemonicEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 1, 1)
)
fclAsynMnemonicEntry.setIndexNames(
    (0, "PCE-MIB", "fclAsynMneMnemonicId"),
)
if mibBuilder.loadTexts:
    fclAsynMnemonicEntry.setStatus("mandatory")


class _FclAsynMneMnemonicId_Type(Integer32):
    """Custom type fclAsynMneMnemonicId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_FclAsynMneMnemonicId_Type.__name__ = "Integer32"
_FclAsynMneMnemonicId_Object = MibTableColumn
fclAsynMneMnemonicId = _FclAsynMneMnemonicId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 1, 1, 1),
    _FclAsynMneMnemonicId_Type()
)
fclAsynMneMnemonicId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynMneMnemonicId.setStatus("mandatory")


class _FclAsynMneStatus_Type(Integer32):
    """Custom type fclAsynMneStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclAsynMneStatus_Type.__name__ = "Integer32"
_FclAsynMneStatus_Object = MibTableColumn
fclAsynMneStatus = _FclAsynMneStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 1, 1, 2),
    _FclAsynMneStatus_Type()
)
fclAsynMneStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynMneStatus.setStatus("mandatory")


class _FclAsynMneName_Type(DisplayString):
    """Custom type fclAsynMneName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_FclAsynMneName_Type.__name__ = "DisplayString"
_FclAsynMneName_Object = MibTableColumn
fclAsynMneName = _FclAsynMneName_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 1, 1, 3),
    _FclAsynMneName_Type()
)
fclAsynMneName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynMneName.setStatus("mandatory")


class _FclAsynMneCalledAddr_Type(OctetString):
    """Custom type fclAsynMneCalledAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclAsynMneCalledAddr_Type.__name__ = "OctetString"
_FclAsynMneCalledAddr_Object = MibTableColumn
fclAsynMneCalledAddr = _FclAsynMneCalledAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 1, 1, 5),
    _FclAsynMneCalledAddr_Type()
)
fclAsynMneCalledAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynMneCalledAddr.setStatus("mandatory")


class _FclAsynMneFacility_Type(Integer32):
    """Custom type fclAsynMneFacility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("cug", 3),
          ("none", 1),
          ("reverseCharging", 2),
          ("reverseCharging-cug", 4),
          ("throughputClass", 5))
    )


_FclAsynMneFacility_Type.__name__ = "Integer32"
_FclAsynMneFacility_Object = MibTableColumn
fclAsynMneFacility = _FclAsynMneFacility_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 1, 1, 6),
    _FclAsynMneFacility_Type()
)
fclAsynMneFacility.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynMneFacility.setStatus("mandatory")


class _FclAsynMneFacThroughputClass_Type(Integer32):
    """Custom type fclAsynMneFacThroughputClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("t1200", 7),
          ("t128000", 14),
          ("t150", 4),
          ("t19200", 11),
          ("t192000", 15),
          ("t2400", 8),
          ("t300", 5),
          ("t4800", 9),
          ("t48000", 12),
          ("t600", 6),
          ("t64000", 13),
          ("t75", 3),
          ("t9600", 10))
    )


_FclAsynMneFacThroughputClass_Type.__name__ = "Integer32"
_FclAsynMneFacThroughputClass_Object = MibTableColumn
fclAsynMneFacThroughputClass = _FclAsynMneFacThroughputClass_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 1, 1, 7),
    _FclAsynMneFacThroughputClass_Type()
)
fclAsynMneFacThroughputClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynMneFacThroughputClass.setStatus("mandatory")


class _FclAsynMneCallUserDataAscii_Type(DisplayString):
    """Custom type fclAsynMneCallUserDataAscii based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 12),
    )


_FclAsynMneCallUserDataAscii_Type.__name__ = "DisplayString"
_FclAsynMneCallUserDataAscii_Object = MibTableColumn
fclAsynMneCallUserDataAscii = _FclAsynMneCallUserDataAscii_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 1, 1, 10),
    _FclAsynMneCallUserDataAscii_Type()
)
fclAsynMneCallUserDataAscii.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynMneCallUserDataAscii.setStatus("mandatory")


class _FclAsynMneCallUserDataHexa_Type(OctetString):
    """Custom type fclAsynMneCallUserDataHexa based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(13, 13),
    )


_FclAsynMneCallUserDataHexa_Type.__name__ = "OctetString"
_FclAsynMneCallUserDataHexa_Object = MibTableColumn
fclAsynMneCallUserDataHexa = _FclAsynMneCallUserDataHexa_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 1, 1, 11),
    _FclAsynMneCallUserDataHexa_Type()
)
fclAsynMneCallUserDataHexa.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynMneCallUserDataHexa.setStatus("mandatory")
_FclAsynMneVdxKeyTranslationTable_Object = MibTable
fclAsynMneVdxKeyTranslationTable = _FclAsynMneVdxKeyTranslationTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 2)
)
if mibBuilder.loadTexts:
    fclAsynMneVdxKeyTranslationTable.setStatus("mandatory")
_FclAsynMneVdxKeyTranslationEntry_Object = MibTableRow
fclAsynMneVdxKeyTranslationEntry = _FclAsynMneVdxKeyTranslationEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 2, 1)
)
fclAsynMneVdxKeyTranslationEntry.setIndexNames(
    (0, "PCE-MIB", "fclAsynMneTransMnemonicId"),
)
if mibBuilder.loadTexts:
    fclAsynMneVdxKeyTranslationEntry.setStatus("mandatory")


class _FclAsynMneTransMnemonicId_Type(Integer32):
    """Custom type fclAsynMneTransMnemonicId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_FclAsynMneTransMnemonicId_Type.__name__ = "Integer32"
_FclAsynMneTransMnemonicId_Object = MibTableColumn
fclAsynMneTransMnemonicId = _FclAsynMneTransMnemonicId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 2, 1, 1),
    _FclAsynMneTransMnemonicId_Type()
)
fclAsynMneTransMnemonicId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynMneTransMnemonicId.setStatus("mandatory")


class _FclAsynMneTransName_Type(DisplayString):
    """Custom type fclAsynMneTransName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_FclAsynMneTransName_Type.__name__ = "DisplayString"
_FclAsynMneTransName_Object = MibTableColumn
fclAsynMneTransName = _FclAsynMneTransName_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 2, 1, 2),
    _FclAsynMneTransName_Type()
)
fclAsynMneTransName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynMneTransName.setStatus("mandatory")


class _FclAsynMneTransTranscoding_Type(Integer32):
    """Custom type fclAsynMneTransTranscoding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FclAsynMneTransTranscoding_Type.__name__ = "Integer32"
_FclAsynMneTransTranscoding_Object = MibTableColumn
fclAsynMneTransTranscoding = _FclAsynMneTransTranscoding_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 2, 1, 3),
    _FclAsynMneTransTranscoding_Type()
)
fclAsynMneTransTranscoding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynMneTransTranscoding.setStatus("mandatory")


class _FclAsynMneTransProfile_Type(Integer32):
    """Custom type fclAsynMneTransProfile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("p1", 1),
          ("p2", 2))
    )


_FclAsynMneTransProfile_Type.__name__ = "Integer32"
_FclAsynMneTransProfile_Object = MibTableColumn
fclAsynMneTransProfile = _FclAsynMneTransProfile_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 2, 1, 4),
    _FclAsynMneTransProfile_Type()
)
fclAsynMneTransProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynMneTransProfile.setStatus("mandatory")


class _FclAsynMneTransAutoTermMode_Type(Integer32):
    """Custom type fclAsynMneTransAutoTermMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclAsynMneTransAutoTermMode_Type.__name__ = "Integer32"
_FclAsynMneTransAutoTermMode_Object = MibTableColumn
fclAsynMneTransAutoTermMode = _FclAsynMneTransAutoTermMode_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 2, 1, 5),
    _FclAsynMneTransAutoTermMode_Type()
)
fclAsynMneTransAutoTermMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynMneTransAutoTermMode.setStatus("mandatory")


class _FclAsynMneTransCFKeyHandling_Type(Integer32):
    """Custom type fclAsynMneTransCFKeyHandling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("local", 1),
          ("remote", 2))
    )


_FclAsynMneTransCFKeyHandling_Type.__name__ = "Integer32"
_FclAsynMneTransCFKeyHandling_Object = MibTableColumn
fclAsynMneTransCFKeyHandling = _FclAsynMneTransCFKeyHandling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 2, 1, 6),
    _FclAsynMneTransCFKeyHandling_Type()
)
fclAsynMneTransCFKeyHandling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynMneTransCFKeyHandling.setStatus("mandatory")


class _FclAsynMneTransClearHangUp_Type(Integer32):
    """Custom type fclAsynMneTransClearHangUp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclAsynMneTransClearHangUp_Type.__name__ = "Integer32"
_FclAsynMneTransClearHangUp_Object = MibTableColumn
fclAsynMneTransClearHangUp = _FclAsynMneTransClearHangUp_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 2, 1, 7),
    _FclAsynMneTransClearHangUp_Type()
)
fclAsynMneTransClearHangUp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynMneTransClearHangUp.setStatus("mandatory")
_FclAsynPstnRemotePeerTable_Object = MibTable
fclAsynPstnRemotePeerTable = _FclAsynPstnRemotePeerTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 25)
)
if mibBuilder.loadTexts:
    fclAsynPstnRemotePeerTable.setStatus("mandatory")
_FclAsynPstnRemotePeerEntry_Object = MibTableRow
fclAsynPstnRemotePeerEntry = _FclAsynPstnRemotePeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 25, 1)
)
fclAsynPstnRemotePeerEntry.setIndexNames(
    (0, "PCE-MIB", "fclAsynPstnRemX121Addr"),
)
if mibBuilder.loadTexts:
    fclAsynPstnRemotePeerEntry.setStatus("mandatory")


class _FclAsynPstnRemX121Addr_Type(OctetString):
    """Custom type fclAsynPstnRemX121Addr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclAsynPstnRemX121Addr_Type.__name__ = "OctetString"
_FclAsynPstnRemX121Addr_Object = MibTableColumn
fclAsynPstnRemX121Addr = _FclAsynPstnRemX121Addr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 25, 1, 1),
    _FclAsynPstnRemX121Addr_Type()
)
fclAsynPstnRemX121Addr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynPstnRemX121Addr.setStatus("mandatory")


class _FclAsynPstnRemStatus_Type(Integer32):
    """Custom type fclAsynPstnRemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclAsynPstnRemStatus_Type.__name__ = "Integer32"
_FclAsynPstnRemStatus_Object = MibTableColumn
fclAsynPstnRemStatus = _FclAsynPstnRemStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 25, 1, 2),
    _FclAsynPstnRemStatus_Type()
)
fclAsynPstnRemStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynPstnRemStatus.setStatus("mandatory")


class _FclAsynPstnRemPstnNumber_Type(OctetString):
    """Custom type fclAsynPstnRemPstnNumber based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(14, 14),
    )


_FclAsynPstnRemPstnNumber_Type.__name__ = "OctetString"
_FclAsynPstnRemPstnNumber_Object = MibTableColumn
fclAsynPstnRemPstnNumber = _FclAsynPstnRemPstnNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 25, 1, 3),
    _FclAsynPstnRemPstnNumber_Type()
)
fclAsynPstnRemPstnNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynPstnRemPstnNumber.setStatus("mandatory")
_FclAsynNetUserTable_Object = MibTable
fclAsynNetUserTable = _FclAsynNetUserTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 26)
)
if mibBuilder.loadTexts:
    fclAsynNetUserTable.setStatus("mandatory")
_FclAsynNetUserEntry_Object = MibTableRow
fclAsynNetUserEntry = _FclAsynNetUserEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 26, 1)
)
fclAsynNetUserEntry.setIndexNames(
    (0, "PCE-MIB", "fclAsynNetUserId"),
)
if mibBuilder.loadTexts:
    fclAsynNetUserEntry.setStatus("mandatory")


class _FclAsynNetUserId_Type(Integer32):
    """Custom type fclAsynNetUserId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_FclAsynNetUserId_Type.__name__ = "Integer32"
_FclAsynNetUserId_Object = MibTableColumn
fclAsynNetUserId = _FclAsynNetUserId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 26, 1, 1),
    _FclAsynNetUserId_Type()
)
fclAsynNetUserId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclAsynNetUserId.setStatus("mandatory")


class _FclAsynNetStatus_Type(Integer32):
    """Custom type fclAsynNetStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclAsynNetStatus_Type.__name__ = "Integer32"
_FclAsynNetStatus_Object = MibTableColumn
fclAsynNetStatus = _FclAsynNetStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 26, 1, 2),
    _FclAsynNetStatus_Type()
)
fclAsynNetStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynNetStatus.setStatus("mandatory")


class _FclAsynNetNui_Type(DisplayString):
    """Custom type fclAsynNetNui based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_FclAsynNetNui_Type.__name__ = "DisplayString"
_FclAsynNetNui_Object = MibTableColumn
fclAsynNetNui = _FclAsynNetNui_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 26, 1, 3),
    _FclAsynNetNui_Type()
)
fclAsynNetNui.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynNetNui.setStatus("mandatory")


class _FclAsynNetNua_Type(Integer32):
    """Custom type fclAsynNetNua based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9999),
    )


_FclAsynNetNua_Type.__name__ = "Integer32"
_FclAsynNetNua_Object = MibTableColumn
fclAsynNetNua = _FclAsynNetNua_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 26, 1, 4),
    _FclAsynNetNua_Type()
)
fclAsynNetNua.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclAsynNetNua.setStatus("mandatory")
_FclFrameRelayAccessLogPort_ObjectIdentity = ObjectIdentity
fclFrameRelayAccessLogPort = _FclFrameRelayAccessLogPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13)
)
_FclFraLogPortTable_Object = MibTable
fclFraLogPortTable = _FclFraLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1)
)
if mibBuilder.loadTexts:
    fclFraLogPortTable.setStatus("mandatory")
_FclFraLogPortEntry_Object = MibTableRow
fclFraLogPortEntry = _FclFraLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1)
)
fclFraLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "fclFraLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclFraLogPortEntry.setStatus("mandatory")


class _FclFraLpLogPortId_Type(Integer32):
    """Custom type fclFraLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclFraLpLogPortId_Type.__name__ = "Integer32"
_FclFraLpLogPortId_Object = MibTableColumn
fclFraLpLogPortId = _FclFraLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 1),
    _FclFraLpLogPortId_Type()
)
fclFraLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFraLpLogPortId.setStatus("mandatory")


class _FclFraLpInterfaceId_Type(Integer32):
    """Custom type fclFraLpInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclFraLpInterfaceId_Type.__name__ = "Integer32"
_FclFraLpInterfaceId_Object = MibTableColumn
fclFraLpInterfaceId = _FclFraLpInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 2),
    _FclFraLpInterfaceId_Type()
)
fclFraLpInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraLpInterfaceId.setStatus("mandatory")


class _FclFraLpLmi_Type(Integer32):
    """Custom type fclFraLpLmi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("lmiNui", 3),
          ("lmiUni", 2),
          ("off", 1))
    )


_FclFraLpLmi_Type.__name__ = "Integer32"
_FclFraLpLmi_Object = MibTableColumn
fclFraLpLmi = _FclFraLpLmi_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 3),
    _FclFraLpLmi_Type()
)
fclFraLpLmi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraLpLmi.setStatus("mandatory")


class _FclFraLpGroupingThreshold_Type(Integer32):
    """Custom type fclFraLpGroupingThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 97),
    )


_FclFraLpGroupingThreshold_Type.__name__ = "Integer32"
_FclFraLpGroupingThreshold_Object = MibTableColumn
fclFraLpGroupingThreshold = _FclFraLpGroupingThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 5),
    _FclFraLpGroupingThreshold_Type()
)
fclFraLpGroupingThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraLpGroupingThreshold.setStatus("mandatory")


class _FclFraLpFecnBecnThreshold_Type(Integer32):
    """Custom type fclFraLpFecnBecnThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 98),
    )


_FclFraLpFecnBecnThreshold_Type.__name__ = "Integer32"
_FclFraLpFecnBecnThreshold_Object = MibTableColumn
fclFraLpFecnBecnThreshold = _FclFraLpFecnBecnThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 6),
    _FclFraLpFecnBecnThreshold_Type()
)
fclFraLpFecnBecnThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraLpFecnBecnThreshold.setStatus("mandatory")


class _FclFraLpDeDiscardThreshold_Type(Integer32):
    """Custom type fclFraLpDeDiscardThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 99),
    )


_FclFraLpDeDiscardThreshold_Type.__name__ = "Integer32"
_FclFraLpDeDiscardThreshold_Object = MibTableColumn
fclFraLpDeDiscardThreshold = _FclFraLpDeDiscardThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 7),
    _FclFraLpDeDiscardThreshold_Type()
)
fclFraLpDeDiscardThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraLpDeDiscardThreshold.setStatus("mandatory")


class _FclFraLpAllDiscardThreshold_Type(Integer32):
    """Custom type fclFraLpAllDiscardThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 100),
    )


_FclFraLpAllDiscardThreshold_Type.__name__ = "Integer32"
_FclFraLpAllDiscardThreshold_Object = MibTableColumn
fclFraLpAllDiscardThreshold = _FclFraLpAllDiscardThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 8),
    _FclFraLpAllDiscardThreshold_Type()
)
fclFraLpAllDiscardThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraLpAllDiscardThreshold.setStatus("mandatory")


class _FclFraLpX25InterframeFlagCount_Type(Integer32):
    """Custom type fclFraLpX25InterframeFlagCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_FclFraLpX25InterframeFlagCount_Type.__name__ = "Integer32"
_FclFraLpX25InterframeFlagCount_Object = MibTableColumn
fclFraLpX25InterframeFlagCount = _FclFraLpX25InterframeFlagCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 9),
    _FclFraLpX25InterframeFlagCount_Type()
)
fclFraLpX25InterframeFlagCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraLpX25InterframeFlagCount.setStatus("mandatory")


class _FclFraLpInactivityCheckDelay_Type(Integer32):
    """Custom type fclFraLpInactivityCheckDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_FclFraLpInactivityCheckDelay_Type.__name__ = "Integer32"
_FclFraLpInactivityCheckDelay_Object = MibTableColumn
fclFraLpInactivityCheckDelay = _FclFraLpInactivityCheckDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 10),
    _FclFraLpInactivityCheckDelay_Type()
)
fclFraLpInactivityCheckDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraLpInactivityCheckDelay.setStatus("mandatory")


class _FclFraLpCompression_Type(Integer32):
    """Custom type fclFraLpCompression based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bothway", 4),
          ("networkToSubscriber", 2),
          ("off", 1),
          ("subscriberToNetwork", 3))
    )


_FclFraLpCompression_Type.__name__ = "Integer32"
_FclFraLpCompression_Object = MibTableColumn
fclFraLpCompression = _FclFraLpCompression_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 20),
    _FclFraLpCompression_Type()
)
fclFraLpCompression.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraLpCompression.setStatus("mandatory")


class _FclFraLpCompressNegotiation_Type(Integer32):
    """Custom type fclFraLpCompressNegotiation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onMandatoryCompression", 3),
          ("onOptionalCompression", 2))
    )


_FclFraLpCompressNegotiation_Type.__name__ = "Integer32"
_FclFraLpCompressNegotiation_Object = MibTableColumn
fclFraLpCompressNegotiation = _FclFraLpCompressNegotiation_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 21),
    _FclFraLpCompressNegotiation_Type()
)
fclFraLpCompressNegotiation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraLpCompressNegotiation.setStatus("mandatory")


class _FclFraLpCompressScrambling_Type(Integer32):
    """Custom type fclFraLpCompressScrambling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclFraLpCompressScrambling_Type.__name__ = "Integer32"
_FclFraLpCompressScrambling_Object = MibTableColumn
fclFraLpCompressScrambling = _FclFraLpCompressScrambling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 22),
    _FclFraLpCompressScrambling_Type()
)
fclFraLpCompressScrambling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraLpCompressScrambling.setStatus("mandatory")


class _FclFraLpCompressMultiPacketsTimer_Type(Integer32):
    """Custom type fclFraLpCompressMultiPacketsTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1500),
    )


_FclFraLpCompressMultiPacketsTimer_Type.__name__ = "Integer32"
_FclFraLpCompressMultiPacketsTimer_Object = MibTableColumn
fclFraLpCompressMultiPacketsTimer = _FclFraLpCompressMultiPacketsTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 23),
    _FclFraLpCompressMultiPacketsTimer_Type()
)
fclFraLpCompressMultiPacketsTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraLpCompressMultiPacketsTimer.setStatus("mandatory")


class _FclFraLpReliableVc_Type(Integer32):
    """Custom type fclFraLpReliableVc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("check", 4),
          ("clear", 3),
          ("off", 1),
          ("subscribe", 2))
    )


_FclFraLpReliableVc_Type.__name__ = "Integer32"
_FclFraLpReliableVc_Object = MibTableColumn
fclFraLpReliableVc = _FclFraLpReliableVc_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 24),
    _FclFraLpReliableVc_Type()
)
fclFraLpReliableVc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraLpReliableVc.setStatus("mandatory")
_FclFraLmiTable_Object = MibTable
fclFraLmiTable = _FclFraLmiTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 2)
)
if mibBuilder.loadTexts:
    fclFraLmiTable.setStatus("mandatory")
_FclFraLmiEntry_Object = MibTableRow
fclFraLmiEntry = _FclFraLmiEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 2, 1)
)
fclFraLmiEntry.setIndexNames(
    (0, "PCE-MIB", "fclFraLmiLogPortId"),
)
if mibBuilder.loadTexts:
    fclFraLmiEntry.setStatus("mandatory")


class _FclFraLmiLogPortId_Type(Integer32):
    """Custom type fclFraLmiLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclFraLmiLogPortId_Type.__name__ = "Integer32"
_FclFraLmiLogPortId_Object = MibTableColumn
fclFraLmiLogPortId = _FclFraLmiLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 2, 1, 1),
    _FclFraLmiLogPortId_Type()
)
fclFraLmiLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFraLmiLogPortId.setStatus("mandatory")


class _FclFraLmiDlci_Type(Integer32):
    """Custom type fclFraLmiDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dlci0", 1),
          ("dlci1023", 2))
    )


_FclFraLmiDlci_Type.__name__ = "Integer32"
_FclFraLmiDlci_Object = MibTableColumn
fclFraLmiDlci = _FclFraLmiDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 2, 1, 2),
    _FclFraLmiDlci_Type()
)
fclFraLmiDlci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraLmiDlci.setStatus("mandatory")


class _FclFraLmiLmiStandard_Type(Integer32):
    """Custom type fclFraLmiLmiStandard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ansiT1-617d", 1),
          ("itutQ933a", 2))
    )


_FclFraLmiLmiStandard_Type.__name__ = "Integer32"
_FclFraLmiLmiStandard_Object = MibTableColumn
fclFraLmiLmiStandard = _FclFraLmiLmiStandard_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 2, 1, 3),
    _FclFraLmiLmiStandard_Type()
)
fclFraLmiLmiStandard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraLmiLmiStandard.setStatus("mandatory")


class _FclFraLmiAccessibilityCondition_Type(Integer32):
    """Custom type fclFraLmiAccessibilityCondition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fast", 1),
          ("n393", 2))
    )


_FclFraLmiAccessibilityCondition_Type.__name__ = "Integer32"
_FclFraLmiAccessibilityCondition_Object = MibTableColumn
fclFraLmiAccessibilityCondition = _FclFraLmiAccessibilityCondition_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 2, 1, 4),
    _FclFraLmiAccessibilityCondition_Type()
)
fclFraLmiAccessibilityCondition.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraLmiAccessibilityCondition.setStatus("mandatory")


class _FclFraLmiN391FullStatusPollCount_Type(Integer32):
    """Custom type fclFraLmiN391FullStatusPollCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_FclFraLmiN391FullStatusPollCount_Type.__name__ = "Integer32"
_FclFraLmiN391FullStatusPollCount_Object = MibTableColumn
fclFraLmiN391FullStatusPollCount = _FclFraLmiN391FullStatusPollCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 2, 1, 5),
    _FclFraLmiN391FullStatusPollCount_Type()
)
fclFraLmiN391FullStatusPollCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraLmiN391FullStatusPollCount.setStatus("mandatory")


class _FclFraLmiN392ErrorThreshold_Type(Integer32):
    """Custom type fclFraLmiN392ErrorThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_FclFraLmiN392ErrorThreshold_Type.__name__ = "Integer32"
_FclFraLmiN392ErrorThreshold_Object = MibTableColumn
fclFraLmiN392ErrorThreshold = _FclFraLmiN392ErrorThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 2, 1, 6),
    _FclFraLmiN392ErrorThreshold_Type()
)
fclFraLmiN392ErrorThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraLmiN392ErrorThreshold.setStatus("mandatory")


class _FclFraLmiN393MonitoredEventCount_Type(Integer32):
    """Custom type fclFraLmiN393MonitoredEventCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_FclFraLmiN393MonitoredEventCount_Type.__name__ = "Integer32"
_FclFraLmiN393MonitoredEventCount_Object = MibTableColumn
fclFraLmiN393MonitoredEventCount = _FclFraLmiN393MonitoredEventCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 2, 1, 7),
    _FclFraLmiN393MonitoredEventCount_Type()
)
fclFraLmiN393MonitoredEventCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraLmiN393MonitoredEventCount.setStatus("mandatory")


class _FclFraLmiT391LinkIntegPollTimer_Type(Integer32):
    """Custom type fclFraLmiT391LinkIntegPollTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 30),
    )


_FclFraLmiT391LinkIntegPollTimer_Type.__name__ = "Integer32"
_FclFraLmiT391LinkIntegPollTimer_Object = MibTableColumn
fclFraLmiT391LinkIntegPollTimer = _FclFraLmiT391LinkIntegPollTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 2, 1, 8),
    _FclFraLmiT391LinkIntegPollTimer_Type()
)
fclFraLmiT391LinkIntegPollTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraLmiT391LinkIntegPollTimer.setStatus("mandatory")


class _FclFraLmiT392PollingVerifTimer_Type(Integer32):
    """Custom type fclFraLmiT392PollingVerifTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 30),
    )


_FclFraLmiT392PollingVerifTimer_Type.__name__ = "Integer32"
_FclFraLmiT392PollingVerifTimer_Object = MibTableColumn
fclFraLmiT392PollingVerifTimer = _FclFraLmiT392PollingVerifTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 2, 1, 9),
    _FclFraLmiT392PollingVerifTimer_Type()
)
fclFraLmiT392PollingVerifTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraLmiT392PollingVerifTimer.setStatus("mandatory")
_FclFraPvcEndPointTable_Object = MibTable
fclFraPvcEndPointTable = _FclFraPvcEndPointTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 3)
)
if mibBuilder.loadTexts:
    fclFraPvcEndPointTable.setStatus("mandatory")
_FclFraPvcEndPointEntry_Object = MibTableRow
fclFraPvcEndPointEntry = _FclFraPvcEndPointEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 3, 1)
)
fclFraPvcEndPointEntry.setIndexNames(
    (0, "PCE-MIB", "fclFraPvcLogPortId"),
    (0, "PCE-MIB", "fclFraPvcDlci"),
)
if mibBuilder.loadTexts:
    fclFraPvcEndPointEntry.setStatus("mandatory")


class _FclFraPvcLogPortId_Type(Integer32):
    """Custom type fclFraPvcLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclFraPvcLogPortId_Type.__name__ = "Integer32"
_FclFraPvcLogPortId_Object = MibTableColumn
fclFraPvcLogPortId = _FclFraPvcLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 3, 1, 1),
    _FclFraPvcLogPortId_Type()
)
fclFraPvcLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFraPvcLogPortId.setStatus("mandatory")


class _FclFraPvcDlci_Type(Integer32):
    """Custom type fclFraPvcDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 991),
    )


_FclFraPvcDlci_Type.__name__ = "Integer32"
_FclFraPvcDlci_Object = MibTableColumn
fclFraPvcDlci = _FclFraPvcDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 3, 1, 2),
    _FclFraPvcDlci_Type()
)
fclFraPvcDlci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFraPvcDlci.setStatus("mandatory")


class _FclFraPvcStatus_Type(Integer32):
    """Custom type fclFraPvcStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclFraPvcStatus_Type.__name__ = "Integer32"
_FclFraPvcStatus_Object = MibTableColumn
fclFraPvcStatus = _FclFraPvcStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 3, 1, 3),
    _FclFraPvcStatus_Type()
)
fclFraPvcStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraPvcStatus.setStatus("mandatory")


class _FclFraPvcCalledAddr_Type(OctetString):
    """Custom type fclFraPvcCalledAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclFraPvcCalledAddr_Type.__name__ = "OctetString"
_FclFraPvcCalledAddr_Object = MibTableColumn
fclFraPvcCalledAddr = _FclFraPvcCalledAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 3, 1, 5),
    _FclFraPvcCalledAddr_Type()
)
fclFraPvcCalledAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraPvcCalledAddr.setStatus("mandatory")


class _FclFraPvcSubscriberNumber_Type(Integer32):
    """Custom type fclFraPvcSubscriberNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9999),
    )


_FclFraPvcSubscriberNumber_Type.__name__ = "Integer32"
_FclFraPvcSubscriberNumber_Object = MibTableColumn
fclFraPvcSubscriberNumber = _FclFraPvcSubscriberNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 3, 1, 6),
    _FclFraPvcSubscriberNumber_Type()
)
fclFraPvcSubscriberNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraPvcSubscriberNumber.setStatus("mandatory")


class _FclFraPvcCallDirection_Type(Integer32):
    """Custom type fclFraPvcCallDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 3),
          ("called", 2),
          ("calling", 1))
    )


_FclFraPvcCallDirection_Type.__name__ = "Integer32"
_FclFraPvcCallDirection_Object = MibTableColumn
fclFraPvcCallDirection = _FclFraPvcCallDirection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 3, 1, 7),
    _FclFraPvcCallDirection_Type()
)
fclFraPvcCallDirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraPvcCallDirection.setStatus("mandatory")


class _FclFraPvcEncapsulation_Type(Integer32):
    """Custom type fclFraPvcEncapsulation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("fastSelect", 2),
          ("fastSelect-frHeader", 3),
          ("fastSelect-frHeader-grouping", 4),
          ("none", 1))
    )


_FclFraPvcEncapsulation_Type.__name__ = "Integer32"
_FclFraPvcEncapsulation_Object = MibTableColumn
fclFraPvcEncapsulation = _FclFraPvcEncapsulation_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 3, 1, 8),
    _FclFraPvcEncapsulation_Type()
)
fclFraPvcEncapsulation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraPvcEncapsulation.setStatus("mandatory")


class _FclFraPvcMinRecallTimer_Type(Integer32):
    """Custom type fclFraPvcMinRecallTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 990),
    )


_FclFraPvcMinRecallTimer_Type.__name__ = "Integer32"
_FclFraPvcMinRecallTimer_Object = MibTableColumn
fclFraPvcMinRecallTimer = _FclFraPvcMinRecallTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 3, 1, 10),
    _FclFraPvcMinRecallTimer_Type()
)
fclFraPvcMinRecallTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraPvcMinRecallTimer.setStatus("mandatory")


class _FclFraPvcInactivityTimer_Type(Integer32):
    """Custom type fclFraPvcInactivityTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2540),
    )


_FclFraPvcInactivityTimer_Type.__name__ = "Integer32"
_FclFraPvcInactivityTimer_Object = MibTableColumn
fclFraPvcInactivityTimer = _FclFraPvcInactivityTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 3, 1, 11),
    _FclFraPvcInactivityTimer_Type()
)
fclFraPvcInactivityTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFraPvcInactivityTimer.setStatus("mandatory")
_FclHdlcAccessLogPort_ObjectIdentity = ObjectIdentity
fclHdlcAccessLogPort = _FclHdlcAccessLogPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14)
)
_FclHdlcLogPortTable_Object = MibTable
fclHdlcLogPortTable = _FclHdlcLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1)
)
if mibBuilder.loadTexts:
    fclHdlcLogPortTable.setStatus("mandatory")
_FclHdlcLogPortEntry_Object = MibTableRow
fclHdlcLogPortEntry = _FclHdlcLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1)
)
fclHdlcLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "fclHdlcLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclHdlcLogPortEntry.setStatus("mandatory")


class _FclHdlcLpLogPortId_Type(Integer32):
    """Custom type fclHdlcLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclHdlcLpLogPortId_Type.__name__ = "Integer32"
_FclHdlcLpLogPortId_Object = MibTableColumn
fclHdlcLpLogPortId = _FclHdlcLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 1),
    _FclHdlcLpLogPortId_Type()
)
fclHdlcLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclHdlcLpLogPortId.setStatus("mandatory")


class _FclHdlcLpInterfaceId_Type(Integer32):
    """Custom type fclHdlcLpInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclHdlcLpInterfaceId_Type.__name__ = "Integer32"
_FclHdlcLpInterfaceId_Object = MibTableColumn
fclHdlcLpInterfaceId = _FclHdlcLpInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 2),
    _FclHdlcLpInterfaceId_Type()
)
fclHdlcLpInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclHdlcLpInterfaceId.setStatus("mandatory")


class _FclHdlcLpCrcTransport_Type(Integer32):
    """Custom type fclHdlcLpCrcTransport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_FclHdlcLpCrcTransport_Type.__name__ = "Integer32"
_FclHdlcLpCrcTransport_Object = MibTableColumn
fclHdlcLpCrcTransport = _FclHdlcLpCrcTransport_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 3),
    _FclHdlcLpCrcTransport_Type()
)
fclHdlcLpCrcTransport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclHdlcLpCrcTransport.setStatus("mandatory")


class _FclHdlcLpGroupingThreshold_Type(Integer32):
    """Custom type fclHdlcLpGroupingThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 97),
    )


_FclHdlcLpGroupingThreshold_Type.__name__ = "Integer32"
_FclHdlcLpGroupingThreshold_Object = MibTableColumn
fclHdlcLpGroupingThreshold = _FclHdlcLpGroupingThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 5),
    _FclHdlcLpGroupingThreshold_Type()
)
fclHdlcLpGroupingThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclHdlcLpGroupingThreshold.setStatus("mandatory")


class _FclHdlcLpAllDiscardThreshold_Type(Integer32):
    """Custom type fclHdlcLpAllDiscardThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 100),
    )


_FclHdlcLpAllDiscardThreshold_Type.__name__ = "Integer32"
_FclHdlcLpAllDiscardThreshold_Object = MibTableColumn
fclHdlcLpAllDiscardThreshold = _FclHdlcLpAllDiscardThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 8),
    _FclHdlcLpAllDiscardThreshold_Type()
)
fclHdlcLpAllDiscardThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclHdlcLpAllDiscardThreshold.setStatus("mandatory")


class _FclHdlcLpX25InterframeFlagCount_Type(Integer32):
    """Custom type fclHdlcLpX25InterframeFlagCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_FclHdlcLpX25InterframeFlagCount_Type.__name__ = "Integer32"
_FclHdlcLpX25InterframeFlagCount_Object = MibTableColumn
fclHdlcLpX25InterframeFlagCount = _FclHdlcLpX25InterframeFlagCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 9),
    _FclHdlcLpX25InterframeFlagCount_Type()
)
fclHdlcLpX25InterframeFlagCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclHdlcLpX25InterframeFlagCount.setStatus("mandatory")


class _FclHdlcLpInactivityCheckDelay_Type(Integer32):
    """Custom type fclHdlcLpInactivityCheckDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_FclHdlcLpInactivityCheckDelay_Type.__name__ = "Integer32"
_FclHdlcLpInactivityCheckDelay_Object = MibTableColumn
fclHdlcLpInactivityCheckDelay = _FclHdlcLpInactivityCheckDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 10),
    _FclHdlcLpInactivityCheckDelay_Type()
)
fclHdlcLpInactivityCheckDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclHdlcLpInactivityCheckDelay.setStatus("mandatory")


class _FclHdlcLpCompression_Type(Integer32):
    """Custom type fclHdlcLpCompression based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bothway", 4),
          ("networkToSubscriber", 2),
          ("off", 1),
          ("subscriberToNetwork", 3))
    )


_FclHdlcLpCompression_Type.__name__ = "Integer32"
_FclHdlcLpCompression_Object = MibTableColumn
fclHdlcLpCompression = _FclHdlcLpCompression_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 20),
    _FclHdlcLpCompression_Type()
)
fclHdlcLpCompression.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclHdlcLpCompression.setStatus("mandatory")


class _FclHdlcLpCompressNegotiation_Type(Integer32):
    """Custom type fclHdlcLpCompressNegotiation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onMandatoryCompression", 3),
          ("onOptionalCompression", 2))
    )


_FclHdlcLpCompressNegotiation_Type.__name__ = "Integer32"
_FclHdlcLpCompressNegotiation_Object = MibTableColumn
fclHdlcLpCompressNegotiation = _FclHdlcLpCompressNegotiation_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 21),
    _FclHdlcLpCompressNegotiation_Type()
)
fclHdlcLpCompressNegotiation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclHdlcLpCompressNegotiation.setStatus("mandatory")


class _FclHdlcLpCompressScrambling_Type(Integer32):
    """Custom type fclHdlcLpCompressScrambling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclHdlcLpCompressScrambling_Type.__name__ = "Integer32"
_FclHdlcLpCompressScrambling_Object = MibTableColumn
fclHdlcLpCompressScrambling = _FclHdlcLpCompressScrambling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 22),
    _FclHdlcLpCompressScrambling_Type()
)
fclHdlcLpCompressScrambling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclHdlcLpCompressScrambling.setStatus("mandatory")


class _FclHdlcLpCompressMultiPacketsTimer_Type(Integer32):
    """Custom type fclHdlcLpCompressMultiPacketsTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1500),
    )


_FclHdlcLpCompressMultiPacketsTimer_Type.__name__ = "Integer32"
_FclHdlcLpCompressMultiPacketsTimer_Object = MibTableColumn
fclHdlcLpCompressMultiPacketsTimer = _FclHdlcLpCompressMultiPacketsTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 23),
    _FclHdlcLpCompressMultiPacketsTimer_Type()
)
fclHdlcLpCompressMultiPacketsTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclHdlcLpCompressMultiPacketsTimer.setStatus("mandatory")


class _FclHdlcLpReliableVc_Type(Integer32):
    """Custom type fclHdlcLpReliableVc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("check", 4),
          ("clear", 3),
          ("off", 1),
          ("subscribe", 2))
    )


_FclHdlcLpReliableVc_Type.__name__ = "Integer32"
_FclHdlcLpReliableVc_Object = MibTableColumn
fclHdlcLpReliableVc = _FclHdlcLpReliableVc_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 24),
    _FclHdlcLpReliableVc_Type()
)
fclHdlcLpReliableVc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclHdlcLpReliableVc.setStatus("mandatory")


class _FclHdlcLpCos_Type(Integer32):
    """Custom type fclHdlcLpCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ubr", 3),
          ("vbr", 1),
          ("vbr-rt", 2))
    )


_FclHdlcLpCos_Type.__name__ = "Integer32"
_FclHdlcLpCos_Object = MibTableColumn
fclHdlcLpCos = _FclHdlcLpCos_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 30),
    _FclHdlcLpCos_Type()
)
fclHdlcLpCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclHdlcLpCos.setStatus("mandatory")


class _FclHdlcLpCir_Type(Integer32):
    """Custom type fclHdlcLpCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(600, 2048000),
    )


_FclHdlcLpCir_Type.__name__ = "Integer32"
_FclHdlcLpCir_Object = MibTableColumn
fclHdlcLpCir = _FclHdlcLpCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 31),
    _FclHdlcLpCir_Type()
)
fclHdlcLpCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclHdlcLpCir.setStatus("mandatory")


class _FclHdlcLpMinCir_Type(Integer32):
    """Custom type fclHdlcLpMinCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FclHdlcLpMinCir_Type.__name__ = "Integer32"
_FclHdlcLpMinCir_Object = MibTableColumn
fclHdlcLpMinCir = _FclHdlcLpMinCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 32),
    _FclHdlcLpMinCir_Type()
)
fclHdlcLpMinCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclHdlcLpMinCir.setStatus("mandatory")
_FclHdlcAutoCallTable_Object = MibTable
fclHdlcAutoCallTable = _FclHdlcAutoCallTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 2)
)
if mibBuilder.loadTexts:
    fclHdlcAutoCallTable.setStatus("mandatory")
_FclHdlcAutoCallEntry_Object = MibTableRow
fclHdlcAutoCallEntry = _FclHdlcAutoCallEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 2, 1)
)
fclHdlcAutoCallEntry.setIndexNames(
    (0, "PCE-MIB", "fclHdlcAutoLogPortId"),
)
if mibBuilder.loadTexts:
    fclHdlcAutoCallEntry.setStatus("mandatory")


class _FclHdlcAutoLogPortId_Type(Integer32):
    """Custom type fclHdlcAutoLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclHdlcAutoLogPortId_Type.__name__ = "Integer32"
_FclHdlcAutoLogPortId_Object = MibTableColumn
fclHdlcAutoLogPortId = _FclHdlcAutoLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 2, 1, 1),
    _FclHdlcAutoLogPortId_Type()
)
fclHdlcAutoLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclHdlcAutoLogPortId.setStatus("mandatory")


class _FclHdlcAutoCalledAddr_Type(OctetString):
    """Custom type fclHdlcAutoCalledAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclHdlcAutoCalledAddr_Type.__name__ = "OctetString"
_FclHdlcAutoCalledAddr_Object = MibTableColumn
fclHdlcAutoCalledAddr = _FclHdlcAutoCalledAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 2, 1, 5),
    _FclHdlcAutoCalledAddr_Type()
)
fclHdlcAutoCalledAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclHdlcAutoCalledAddr.setStatus("mandatory")


class _FclHdlcAutoSubscriberNumber_Type(Integer32):
    """Custom type fclHdlcAutoSubscriberNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_FclHdlcAutoSubscriberNumber_Type.__name__ = "Integer32"
_FclHdlcAutoSubscriberNumber_Object = MibTableColumn
fclHdlcAutoSubscriberNumber = _FclHdlcAutoSubscriberNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 2, 1, 6),
    _FclHdlcAutoSubscriberNumber_Type()
)
fclHdlcAutoSubscriberNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclHdlcAutoSubscriberNumber.setStatus("mandatory")


class _FclHdlcAutoCallDirection_Type(Integer32):
    """Custom type fclHdlcAutoCallDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 3),
          ("called", 2),
          ("calling", 1))
    )


_FclHdlcAutoCallDirection_Type.__name__ = "Integer32"
_FclHdlcAutoCallDirection_Object = MibTableColumn
fclHdlcAutoCallDirection = _FclHdlcAutoCallDirection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 2, 1, 7),
    _FclHdlcAutoCallDirection_Type()
)
fclHdlcAutoCallDirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclHdlcAutoCallDirection.setStatus("mandatory")


class _FclHdlcAutoEncapsulation_Type(Integer32):
    """Custom type fclHdlcAutoEncapsulation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("fastSelect", 2),
          ("fastSelect-grouping", 4),
          ("none", 1))
    )


_FclHdlcAutoEncapsulation_Type.__name__ = "Integer32"
_FclHdlcAutoEncapsulation_Object = MibTableColumn
fclHdlcAutoEncapsulation = _FclHdlcAutoEncapsulation_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 2, 1, 8),
    _FclHdlcAutoEncapsulation_Type()
)
fclHdlcAutoEncapsulation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclHdlcAutoEncapsulation.setStatus("mandatory")


class _FclHdlcAutoMinRecallTimer_Type(Integer32):
    """Custom type fclHdlcAutoMinRecallTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 990),
    )


_FclHdlcAutoMinRecallTimer_Type.__name__ = "Integer32"
_FclHdlcAutoMinRecallTimer_Object = MibTableColumn
fclHdlcAutoMinRecallTimer = _FclHdlcAutoMinRecallTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 2, 1, 10),
    _FclHdlcAutoMinRecallTimer_Type()
)
fclHdlcAutoMinRecallTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclHdlcAutoMinRecallTimer.setStatus("mandatory")


class _FclHdlcAutoInactivityTimer_Type(Integer32):
    """Custom type fclHdlcAutoInactivityTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2540),
    )


_FclHdlcAutoInactivityTimer_Type.__name__ = "Integer32"
_FclHdlcAutoInactivityTimer_Object = MibTableColumn
fclHdlcAutoInactivityTimer = _FclHdlcAutoInactivityTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 2, 1, 11),
    _FclHdlcAutoInactivityTimer_Type()
)
fclHdlcAutoInactivityTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclHdlcAutoInactivityTimer.setStatus("mandatory")
_FclSdlcLogPort_ObjectIdentity = ObjectIdentity
fclSdlcLogPort = _FclSdlcLogPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15)
)
_FclSdlcLogPortTable_Object = MibTable
fclSdlcLogPortTable = _FclSdlcLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1)
)
if mibBuilder.loadTexts:
    fclSdlcLogPortTable.setStatus("mandatory")
_FclSdlcLogPortEntry_Object = MibTableRow
fclSdlcLogPortEntry = _FclSdlcLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1)
)
fclSdlcLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "fclSdlcLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclSdlcLogPortEntry.setStatus("mandatory")


class _FclSdlcLpLogPortId_Type(Integer32):
    """Custom type fclSdlcLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclSdlcLpLogPortId_Type.__name__ = "Integer32"
_FclSdlcLpLogPortId_Object = MibTableColumn
fclSdlcLpLogPortId = _FclSdlcLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 1),
    _FclSdlcLpLogPortId_Type()
)
fclSdlcLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclSdlcLpLogPortId.setStatus("mandatory")


class _FclSdlcLpInterfaceId_Type(Integer32):
    """Custom type fclSdlcLpInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclSdlcLpInterfaceId_Type.__name__ = "Integer32"
_FclSdlcLpInterfaceId_Object = MibTableColumn
fclSdlcLpInterfaceId = _FclSdlcLpInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 2),
    _FclSdlcLpInterfaceId_Type()
)
fclSdlcLpInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcLpInterfaceId.setStatus("mandatory")


class _FclSdlcLpPhysicalUnitType_Type(Integer32):
    """Custom type fclSdlcLpPhysicalUnitType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(17,
              18)
        )
    )
    namedValues = NamedValues(
        *(("primary", 18),
          ("secondary", 17))
    )


_FclSdlcLpPhysicalUnitType_Type.__name__ = "Integer32"
_FclSdlcLpPhysicalUnitType_Object = MibTableColumn
fclSdlcLpPhysicalUnitType = _FclSdlcLpPhysicalUnitType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 3),
    _FclSdlcLpPhysicalUnitType_Type()
)
fclSdlcLpPhysicalUnitType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcLpPhysicalUnitType.setStatus("mandatory")


class _FclSdlcLpSubscriberNumber_Type(OctetString):
    """Custom type fclSdlcLpSubscriberNumber based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FclSdlcLpSubscriberNumber_Type.__name__ = "OctetString"
_FclSdlcLpSubscriberNumber_Object = MibTableColumn
fclSdlcLpSubscriberNumber = _FclSdlcLpSubscriberNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 4),
    _FclSdlcLpSubscriberNumber_Type()
)
fclSdlcLpSubscriberNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcLpSubscriberNumber.setStatus("mandatory")


class _FclSdlcLpBitEncoding_Type(Integer32):
    """Custom type fclSdlcLpBitEncoding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("nrz", 1),
          ("nrzInverse", 2))
    )


_FclSdlcLpBitEncoding_Type.__name__ = "Integer32"
_FclSdlcLpBitEncoding_Object = MibTableColumn
fclSdlcLpBitEncoding = _FclSdlcLpBitEncoding_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 5),
    _FclSdlcLpBitEncoding_Type()
)
fclSdlcLpBitEncoding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcLpBitEncoding.setStatus("mandatory")


class _FclSdlcLpUnknownPackets_Type(Integer32):
    """Custom type fclSdlcLpUnknownPackets based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("delete", 2))
    )


_FclSdlcLpUnknownPackets_Type.__name__ = "Integer32"
_FclSdlcLpUnknownPackets_Object = MibTableColumn
fclSdlcLpUnknownPackets = _FclSdlcLpUnknownPackets_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 6),
    _FclSdlcLpUnknownPackets_Type()
)
fclSdlcLpUnknownPackets.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcLpUnknownPackets.setStatus("mandatory")


class _FclSdlcLpLogicalLinkProtocol_Type(Integer32):
    """Custom type fclSdlcLpLogicalLinkProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("psh", 2),
          ("qllc", 1))
    )


_FclSdlcLpLogicalLinkProtocol_Type.__name__ = "Integer32"
_FclSdlcLpLogicalLinkProtocol_Object = MibTableColumn
fclSdlcLpLogicalLinkProtocol = _FclSdlcLpLogicalLinkProtocol_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 7),
    _FclSdlcLpLogicalLinkProtocol_Type()
)
fclSdlcLpLogicalLinkProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcLpLogicalLinkProtocol.setStatus("mandatory")


class _FclSdlcLpPacketSize_Type(Integer32):
    """Custom type fclSdlcLpPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("s1024", 10),
          ("s128", 7),
          ("s16", 4),
          ("s2048", 11),
          ("s256", 8),
          ("s32", 5),
          ("s4096", 12),
          ("s512", 9),
          ("s64", 6))
    )


_FclSdlcLpPacketSize_Type.__name__ = "Integer32"
_FclSdlcLpPacketSize_Object = MibTableColumn
fclSdlcLpPacketSize = _FclSdlcLpPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 8),
    _FclSdlcLpPacketSize_Type()
)
fclSdlcLpPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcLpPacketSize.setStatus("mandatory")


class _FclSdlcLpWindowSize_Type(Integer32):
    """Custom type fclSdlcLpWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 7),
    )


_FclSdlcLpWindowSize_Type.__name__ = "Integer32"
_FclSdlcLpWindowSize_Object = MibTableColumn
fclSdlcLpWindowSize = _FclSdlcLpWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 9),
    _FclSdlcLpWindowSize_Type()
)
fclSdlcLpWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcLpWindowSize.setStatus("mandatory")


class _FclSdlcLpCompression_Type(Integer32):
    """Custom type fclSdlcLpCompression based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bothway", 4),
          ("networkToSubscriber", 2),
          ("off", 1),
          ("subscriberToNetwork", 3))
    )


_FclSdlcLpCompression_Type.__name__ = "Integer32"
_FclSdlcLpCompression_Object = MibTableColumn
fclSdlcLpCompression = _FclSdlcLpCompression_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 20),
    _FclSdlcLpCompression_Type()
)
fclSdlcLpCompression.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcLpCompression.setStatus("mandatory")


class _FclSdlcLpCompressNegotiation_Type(Integer32):
    """Custom type fclSdlcLpCompressNegotiation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onMandatoryCompression", 3),
          ("onOptionalCompression", 2))
    )


_FclSdlcLpCompressNegotiation_Type.__name__ = "Integer32"
_FclSdlcLpCompressNegotiation_Object = MibTableColumn
fclSdlcLpCompressNegotiation = _FclSdlcLpCompressNegotiation_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 21),
    _FclSdlcLpCompressNegotiation_Type()
)
fclSdlcLpCompressNegotiation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcLpCompressNegotiation.setStatus("mandatory")


class _FclSdlcLpCompressScrambling_Type(Integer32):
    """Custom type fclSdlcLpCompressScrambling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclSdlcLpCompressScrambling_Type.__name__ = "Integer32"
_FclSdlcLpCompressScrambling_Object = MibTableColumn
fclSdlcLpCompressScrambling = _FclSdlcLpCompressScrambling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 22),
    _FclSdlcLpCompressScrambling_Type()
)
fclSdlcLpCompressScrambling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcLpCompressScrambling.setStatus("mandatory")


class _FclSdlcLpCompressMultiPacketsTimer_Type(Integer32):
    """Custom type fclSdlcLpCompressMultiPacketsTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1500),
    )


_FclSdlcLpCompressMultiPacketsTimer_Type.__name__ = "Integer32"
_FclSdlcLpCompressMultiPacketsTimer_Object = MibTableColumn
fclSdlcLpCompressMultiPacketsTimer = _FclSdlcLpCompressMultiPacketsTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 23),
    _FclSdlcLpCompressMultiPacketsTimer_Type()
)
fclSdlcLpCompressMultiPacketsTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcLpCompressMultiPacketsTimer.setStatus("mandatory")


class _FclSdlcLpReliableVc_Type(Integer32):
    """Custom type fclSdlcLpReliableVc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("check", 4),
          ("clear", 3),
          ("off", 1),
          ("subscribe", 2))
    )


_FclSdlcLpReliableVc_Type.__name__ = "Integer32"
_FclSdlcLpReliableVc_Object = MibTableColumn
fclSdlcLpReliableVc = _FclSdlcLpReliableVc_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 24),
    _FclSdlcLpReliableVc_Type()
)
fclSdlcLpReliableVc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcLpReliableVc.setStatus("mandatory")


class _FclSdlcLpCos_Type(Integer32):
    """Custom type fclSdlcLpCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ubr", 3),
          ("vbr", 1))
    )


_FclSdlcLpCos_Type.__name__ = "Integer32"
_FclSdlcLpCos_Object = MibTableColumn
fclSdlcLpCos = _FclSdlcLpCos_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 30),
    _FclSdlcLpCos_Type()
)
fclSdlcLpCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcLpCos.setStatus("mandatory")


class _FclSdlcLpCir_Type(Integer32):
    """Custom type fclSdlcLpCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(600, 2048000),
    )


_FclSdlcLpCir_Type.__name__ = "Integer32"
_FclSdlcLpCir_Object = MibTableColumn
fclSdlcLpCir = _FclSdlcLpCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 31),
    _FclSdlcLpCir_Type()
)
fclSdlcLpCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcLpCir.setStatus("mandatory")


class _FclSdlcLpMinCir_Type(Integer32):
    """Custom type fclSdlcLpMinCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FclSdlcLpMinCir_Type.__name__ = "Integer32"
_FclSdlcLpMinCir_Object = MibTableColumn
fclSdlcLpMinCir = _FclSdlcLpMinCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 32),
    _FclSdlcLpMinCir_Type()
)
fclSdlcLpMinCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcLpMinCir.setStatus("mandatory")


class _FclSdlcLpBe_Type(Integer32):
    """Custom type fclSdlcLpBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FclSdlcLpBe_Type.__name__ = "Integer32"
_FclSdlcLpBe_Object = MibTableColumn
fclSdlcLpBe = _FclSdlcLpBe_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 33),
    _FclSdlcLpBe_Type()
)
fclSdlcLpBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcLpBe.setStatus("mandatory")
_FclSdlcPrimaryPuLogPort_ObjectIdentity = ObjectIdentity
fclSdlcPrimaryPuLogPort = _FclSdlcPrimaryPuLogPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2)
)
_FclSdlcPriLogPortTable_Object = MibTable
fclSdlcPriLogPortTable = _FclSdlcPriLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 1)
)
if mibBuilder.loadTexts:
    fclSdlcPriLogPortTable.setStatus("mandatory")
_FclSdlcPriLogPortEntry_Object = MibTableRow
fclSdlcPriLogPortEntry = _FclSdlcPriLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 1, 1)
)
fclSdlcPriLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "fclSdlcPriLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclSdlcPriLogPortEntry.setStatus("mandatory")


class _FclSdlcPriLpLogPortId_Type(Integer32):
    """Custom type fclSdlcPriLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclSdlcPriLpLogPortId_Type.__name__ = "Integer32"
_FclSdlcPriLpLogPortId_Object = MibTableColumn
fclSdlcPriLpLogPortId = _FclSdlcPriLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 1, 1, 1),
    _FclSdlcPriLpLogPortId_Type()
)
fclSdlcPriLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclSdlcPriLpLogPortId.setStatus("mandatory")


class _FclSdlcPriLpLinkType_Type(Integer32):
    """Custom type fclSdlcPriLpLinkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(16,
              20,
              22,
              25,
              27,
              30)
        )
    )
    namedValues = NamedValues(
        *(("nixd-pu20", 27),
          ("pu21-pu21", 22),
          ("pu4-pu20", 16),
          ("pu4-pu21", 20),
          ("pu4-pu4", 25),
          ("rwsi-pu20", 30))
    )


_FclSdlcPriLpLinkType_Type.__name__ = "Integer32"
_FclSdlcPriLpLinkType_Object = MibTableColumn
fclSdlcPriLpLinkType = _FclSdlcPriLpLinkType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 1, 1, 2),
    _FclSdlcPriLpLinkType_Type()
)
fclSdlcPriLpLinkType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcPriLpLinkType.setStatus("mandatory")


class _FclSdlcPriLpRemPuIdentification_Type(Integer32):
    """Custom type fclSdlcPriLpRemPuIdentification based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("calledAddr", 2),
          ("proprietary", 1))
    )


_FclSdlcPriLpRemPuIdentification_Type.__name__ = "Integer32"
_FclSdlcPriLpRemPuIdentification_Object = MibTableColumn
fclSdlcPriLpRemPuIdentification = _FclSdlcPriLpRemPuIdentification_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 1, 1, 3),
    _FclSdlcPriLpRemPuIdentification_Type()
)
fclSdlcPriLpRemPuIdentification.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcPriLpRemPuIdentification.setStatus("mandatory")


class _FclSdlcPriLpPollingGroupResponse_Type(Integer32):
    """Custom type fclSdlcPriLpPollingGroupResponse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclSdlcPriLpPollingGroupResponse_Type.__name__ = "Integer32"
_FclSdlcPriLpPollingGroupResponse_Object = MibTableColumn
fclSdlcPriLpPollingGroupResponse = _FclSdlcPriLpPollingGroupResponse_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 1, 1, 4),
    _FclSdlcPriLpPollingGroupResponse_Type()
)
fclSdlcPriLpPollingGroupResponse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcPriLpPollingGroupResponse.setStatus("mandatory")


class _FclSdlcPriLpPollingGroupAddress_Type(OctetString):
    """Custom type fclSdlcPriLpPollingGroupAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FclSdlcPriLpPollingGroupAddress_Type.__name__ = "OctetString"
_FclSdlcPriLpPollingGroupAddress_Object = MibTableColumn
fclSdlcPriLpPollingGroupAddress = _FclSdlcPriLpPollingGroupAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 1, 1, 5),
    _FclSdlcPriLpPollingGroupAddress_Type()
)
fclSdlcPriLpPollingGroupAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcPriLpPollingGroupAddress.setStatus("mandatory")
_FclSdlcPriClusterTable_Object = MibTable
fclSdlcPriClusterTable = _FclSdlcPriClusterTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 2)
)
if mibBuilder.loadTexts:
    fclSdlcPriClusterTable.setStatus("mandatory")
_FclSdlcPriClusterEntry_Object = MibTableRow
fclSdlcPriClusterEntry = _FclSdlcPriClusterEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 2, 1)
)
fclSdlcPriClusterEntry.setIndexNames(
    (0, "PCE-MIB", "fclSdlcPriClusterLogPortId"),
    (0, "PCE-MIB", "fclSdlcPriClusterAddress"),
)
if mibBuilder.loadTexts:
    fclSdlcPriClusterEntry.setStatus("mandatory")


class _FclSdlcPriClusterLogPortId_Type(Integer32):
    """Custom type fclSdlcPriClusterLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclSdlcPriClusterLogPortId_Type.__name__ = "Integer32"
_FclSdlcPriClusterLogPortId_Object = MibTableColumn
fclSdlcPriClusterLogPortId = _FclSdlcPriClusterLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 2, 1, 1),
    _FclSdlcPriClusterLogPortId_Type()
)
fclSdlcPriClusterLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclSdlcPriClusterLogPortId.setStatus("mandatory")


class _FclSdlcPriClusterAddress_Type(OctetString):
    """Custom type fclSdlcPriClusterAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FclSdlcPriClusterAddress_Type.__name__ = "OctetString"
_FclSdlcPriClusterAddress_Object = MibTableColumn
fclSdlcPriClusterAddress = _FclSdlcPriClusterAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 2, 1, 2),
    _FclSdlcPriClusterAddress_Type()
)
fclSdlcPriClusterAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclSdlcPriClusterAddress.setStatus("mandatory")


class _FclSdlcPriClusterStatus_Type(Integer32):
    """Custom type fclSdlcPriClusterStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclSdlcPriClusterStatus_Type.__name__ = "Integer32"
_FclSdlcPriClusterStatus_Object = MibTableColumn
fclSdlcPriClusterStatus = _FclSdlcPriClusterStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 2, 1, 3),
    _FclSdlcPriClusterStatus_Type()
)
fclSdlcPriClusterStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcPriClusterStatus.setStatus("mandatory")


class _FclSdlcPriClusterRemPu2CalledAddr_Type(OctetString):
    """Custom type fclSdlcPriClusterRemPu2CalledAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclSdlcPriClusterRemPu2CalledAddr_Type.__name__ = "OctetString"
_FclSdlcPriClusterRemPu2CalledAddr_Object = MibTableColumn
fclSdlcPriClusterRemPu2CalledAddr = _FclSdlcPriClusterRemPu2CalledAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 2, 1, 5),
    _FclSdlcPriClusterRemPu2CalledAddr_Type()
)
fclSdlcPriClusterRemPu2CalledAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcPriClusterRemPu2CalledAddr.setStatus("mandatory")
_FclSdlcSecondaryPuLogPort_ObjectIdentity = ObjectIdentity
fclSdlcSecondaryPuLogPort = _FclSdlcSecondaryPuLogPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3)
)
_FclSdlcSecLogPortTable_Object = MibTable
fclSdlcSecLogPortTable = _FclSdlcSecLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 1)
)
if mibBuilder.loadTexts:
    fclSdlcSecLogPortTable.setStatus("mandatory")
_FclSdlcSecLogPortEntry_Object = MibTableRow
fclSdlcSecLogPortEntry = _FclSdlcSecLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 1, 1)
)
fclSdlcSecLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "fclSdlcSecLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclSdlcSecLogPortEntry.setStatus("mandatory")


class _FclSdlcSecLpLogPortId_Type(Integer32):
    """Custom type fclSdlcSecLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclSdlcSecLpLogPortId_Type.__name__ = "Integer32"
_FclSdlcSecLpLogPortId_Object = MibTableColumn
fclSdlcSecLpLogPortId = _FclSdlcSecLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 1, 1, 1),
    _FclSdlcSecLpLogPortId_Type()
)
fclSdlcSecLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclSdlcSecLpLogPortId.setStatus("mandatory")


class _FclSdlcSecLpLinkType_Type(Integer32):
    """Custom type fclSdlcSecLpLinkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(17,
              21,
              23,
              26,
              28,
              31,
              34)
        )
    )
    namedValues = NamedValues(
        *(("pu20-nixd", 28),
          ("pu20-pu4", 17),
          ("pu20-rwsi", 31),
          ("pu21-pu21", 23),
          ("pu21-pu4", 21),
          ("pu4-pu4", 26),
          ("terminal-pu4", 34))
    )


_FclSdlcSecLpLinkType_Type.__name__ = "Integer32"
_FclSdlcSecLpLinkType_Object = MibTableColumn
fclSdlcSecLpLinkType = _FclSdlcSecLpLinkType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 1, 1, 2),
    _FclSdlcSecLpLinkType_Type()
)
fclSdlcSecLpLinkType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcSecLpLinkType.setStatus("mandatory")


class _FclSdlcSecLpRemPuIdentification_Type(Integer32):
    """Custom type fclSdlcSecLpRemPuIdentification based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("calledAddr", 2),
          ("proprietary", 1))
    )


_FclSdlcSecLpRemPuIdentification_Type.__name__ = "Integer32"
_FclSdlcSecLpRemPuIdentification_Object = MibTableColumn
fclSdlcSecLpRemPuIdentification = _FclSdlcSecLpRemPuIdentification_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 1, 1, 3),
    _FclSdlcSecLpRemPuIdentification_Type()
)
fclSdlcSecLpRemPuIdentification.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcSecLpRemPuIdentification.setStatus("mandatory")


class _FclSdlcSecLpT1AcknowledgeTimer_Type(Integer32):
    """Custom type fclSdlcSecLpT1AcknowledgeTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(200, 25000),
    )


_FclSdlcSecLpT1AcknowledgeTimer_Type.__name__ = "Integer32"
_FclSdlcSecLpT1AcknowledgeTimer_Object = MibTableColumn
fclSdlcSecLpT1AcknowledgeTimer = _FclSdlcSecLpT1AcknowledgeTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 1, 1, 4),
    _FclSdlcSecLpT1AcknowledgeTimer_Type()
)
fclSdlcSecLpT1AcknowledgeTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcSecLpT1AcknowledgeTimer.setStatus("mandatory")


class _FclSdlcSecLpN2RetryCount_Type(Integer32):
    """Custom type fclSdlcSecLpN2RetryCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 250),
    )


_FclSdlcSecLpN2RetryCount_Type.__name__ = "Integer32"
_FclSdlcSecLpN2RetryCount_Object = MibTableColumn
fclSdlcSecLpN2RetryCount = _FclSdlcSecLpN2RetryCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 1, 1, 5),
    _FclSdlcSecLpN2RetryCount_Type()
)
fclSdlcSecLpN2RetryCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcSecLpN2RetryCount.setStatus("mandatory")


class _FclSdlcSecLpCallRetryCount_Type(Integer32):
    """Custom type fclSdlcSecLpCallRetryCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_FclSdlcSecLpCallRetryCount_Type.__name__ = "Integer32"
_FclSdlcSecLpCallRetryCount_Object = MibTableColumn
fclSdlcSecLpCallRetryCount = _FclSdlcSecLpCallRetryCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 1, 1, 6),
    _FclSdlcSecLpCallRetryCount_Type()
)
fclSdlcSecLpCallRetryCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcSecLpCallRetryCount.setStatus("mandatory")


class _FclSdlcSecLpPollingTimer_Type(Integer32):
    """Custom type fclSdlcSecLpPollingTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12800),
    )


_FclSdlcSecLpPollingTimer_Type.__name__ = "Integer32"
_FclSdlcSecLpPollingTimer_Object = MibTableColumn
fclSdlcSecLpPollingTimer = _FclSdlcSecLpPollingTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 1, 1, 10),
    _FclSdlcSecLpPollingTimer_Type()
)
fclSdlcSecLpPollingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcSecLpPollingTimer.setStatus("mandatory")


class _FclSdlcSecLpPollingMaxCount_Type(Integer32):
    """Custom type fclSdlcSecLpPollingMaxCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FclSdlcSecLpPollingMaxCount_Type.__name__ = "Integer32"
_FclSdlcSecLpPollingMaxCount_Object = MibTableColumn
fclSdlcSecLpPollingMaxCount = _FclSdlcSecLpPollingMaxCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 1, 1, 11),
    _FclSdlcSecLpPollingMaxCount_Type()
)
fclSdlcSecLpPollingMaxCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcSecLpPollingMaxCount.setStatus("mandatory")
_FclSdlcSecClusterTable_Object = MibTable
fclSdlcSecClusterTable = _FclSdlcSecClusterTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2)
)
if mibBuilder.loadTexts:
    fclSdlcSecClusterTable.setStatus("mandatory")
_FclSdlcSecClusterEntry_Object = MibTableRow
fclSdlcSecClusterEntry = _FclSdlcSecClusterEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1)
)
fclSdlcSecClusterEntry.setIndexNames(
    (0, "PCE-MIB", "fclSdlcSecClusterLogPortId"),
    (0, "PCE-MIB", "fclSdlcSecClusterAddress"),
)
if mibBuilder.loadTexts:
    fclSdlcSecClusterEntry.setStatus("mandatory")


class _FclSdlcSecClusterLogPortId_Type(Integer32):
    """Custom type fclSdlcSecClusterLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclSdlcSecClusterLogPortId_Type.__name__ = "Integer32"
_FclSdlcSecClusterLogPortId_Object = MibTableColumn
fclSdlcSecClusterLogPortId = _FclSdlcSecClusterLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 1),
    _FclSdlcSecClusterLogPortId_Type()
)
fclSdlcSecClusterLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclSdlcSecClusterLogPortId.setStatus("mandatory")


class _FclSdlcSecClusterAddress_Type(OctetString):
    """Custom type fclSdlcSecClusterAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FclSdlcSecClusterAddress_Type.__name__ = "OctetString"
_FclSdlcSecClusterAddress_Object = MibTableColumn
fclSdlcSecClusterAddress = _FclSdlcSecClusterAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 2),
    _FclSdlcSecClusterAddress_Type()
)
fclSdlcSecClusterAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclSdlcSecClusterAddress.setStatus("mandatory")


class _FclSdlcSecClusterStatus_Type(Integer32):
    """Custom type fclSdlcSecClusterStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclSdlcSecClusterStatus_Type.__name__ = "Integer32"
_FclSdlcSecClusterStatus_Object = MibTableColumn
fclSdlcSecClusterStatus = _FclSdlcSecClusterStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 3),
    _FclSdlcSecClusterStatus_Type()
)
fclSdlcSecClusterStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcSecClusterStatus.setStatus("mandatory")


class _FclSdlcSecClusterCalledAddr_Type(OctetString):
    """Custom type fclSdlcSecClusterCalledAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclSdlcSecClusterCalledAddr_Type.__name__ = "OctetString"
_FclSdlcSecClusterCalledAddr_Object = MibTableColumn
fclSdlcSecClusterCalledAddr = _FclSdlcSecClusterCalledAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 5),
    _FclSdlcSecClusterCalledAddr_Type()
)
fclSdlcSecClusterCalledAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcSecClusterCalledAddr.setStatus("mandatory")


class _FclSdlcSecClusterFacility_Type(Integer32):
    """Custom type fclSdlcSecClusterFacility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("cug", 3),
          ("none", 1),
          ("reverseCharging", 2),
          ("reverseCharging-cug", 4),
          ("throughputClass", 5))
    )


_FclSdlcSecClusterFacility_Type.__name__ = "Integer32"
_FclSdlcSecClusterFacility_Object = MibTableColumn
fclSdlcSecClusterFacility = _FclSdlcSecClusterFacility_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 6),
    _FclSdlcSecClusterFacility_Type()
)
fclSdlcSecClusterFacility.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcSecClusterFacility.setStatus("mandatory")


class _FclSdlcSecClusterFacThroughputClass_Type(Integer32):
    """Custom type fclSdlcSecClusterFacThroughputClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("t1200", 7),
          ("t128000", 14),
          ("t150", 4),
          ("t19200", 11),
          ("t192000", 15),
          ("t2400", 8),
          ("t300", 5),
          ("t4800", 9),
          ("t48000", 12),
          ("t600", 6),
          ("t64000", 13),
          ("t75", 3),
          ("t9600", 10))
    )


_FclSdlcSecClusterFacThroughputClass_Type.__name__ = "Integer32"
_FclSdlcSecClusterFacThroughputClass_Object = MibTableColumn
fclSdlcSecClusterFacThroughputClass = _FclSdlcSecClusterFacThroughputClass_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 7),
    _FclSdlcSecClusterFacThroughputClass_Type()
)
fclSdlcSecClusterFacThroughputClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcSecClusterFacThroughputClass.setStatus("mandatory")


class _FclSdlcSecClusterMinRecallTimer_Type(Integer32):
    """Custom type fclSdlcSecClusterMinRecallTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 990),
    )


_FclSdlcSecClusterMinRecallTimer_Type.__name__ = "Integer32"
_FclSdlcSecClusterMinRecallTimer_Object = MibTableColumn
fclSdlcSecClusterMinRecallTimer = _FclSdlcSecClusterMinRecallTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 10),
    _FclSdlcSecClusterMinRecallTimer_Type()
)
fclSdlcSecClusterMinRecallTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcSecClusterMinRecallTimer.setStatus("mandatory")


class _FclSdlcSecClusterRemPvcLogChannel_Type(Integer32):
    """Custom type fclSdlcSecClusterRemPvcLogChannel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclSdlcSecClusterRemPvcLogChannel_Type.__name__ = "Integer32"
_FclSdlcSecClusterRemPvcLogChannel_Object = MibTableColumn
fclSdlcSecClusterRemPvcLogChannel = _FclSdlcSecClusterRemPvcLogChannel_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 11),
    _FclSdlcSecClusterRemPvcLogChannel_Type()
)
fclSdlcSecClusterRemPvcLogChannel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcSecClusterRemPvcLogChannel.setStatus("mandatory")


class _FclSdlcSecClusterXidStringResponse_Type(OctetString):
    """Custom type fclSdlcSecClusterXidStringResponse based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_FclSdlcSecClusterXidStringResponse_Type.__name__ = "OctetString"
_FclSdlcSecClusterXidStringResponse_Object = MibTableColumn
fclSdlcSecClusterXidStringResponse = _FclSdlcSecClusterXidStringResponse_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 12),
    _FclSdlcSecClusterXidStringResponse_Type()
)
fclSdlcSecClusterXidStringResponse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcSecClusterXidStringResponse.setStatus("mandatory")


class _FclSdlcSecClusterCos_Type(Integer32):
    """Custom type fclSdlcSecClusterCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ubr", 3),
          ("vbr", 1),
          ("vbr-rt", 2))
    )


_FclSdlcSecClusterCos_Type.__name__ = "Integer32"
_FclSdlcSecClusterCos_Object = MibTableColumn
fclSdlcSecClusterCos = _FclSdlcSecClusterCos_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 20),
    _FclSdlcSecClusterCos_Type()
)
fclSdlcSecClusterCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcSecClusterCos.setStatus("mandatory")


class _FclSdlcSecClusterCir_Type(Integer32):
    """Custom type fclSdlcSecClusterCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FclSdlcSecClusterCir_Type.__name__ = "Integer32"
_FclSdlcSecClusterCir_Object = MibTableColumn
fclSdlcSecClusterCir = _FclSdlcSecClusterCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 21),
    _FclSdlcSecClusterCir_Type()
)
fclSdlcSecClusterCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcSecClusterCir.setStatus("mandatory")


class _FclSdlcSecClusterCirmin_Type(Integer32):
    """Custom type fclSdlcSecClusterCirmin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FclSdlcSecClusterCirmin_Type.__name__ = "Integer32"
_FclSdlcSecClusterCirmin_Object = MibTableColumn
fclSdlcSecClusterCirmin = _FclSdlcSecClusterCirmin_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 22),
    _FclSdlcSecClusterCirmin_Type()
)
fclSdlcSecClusterCirmin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcSecClusterCirmin.setStatus("mandatory")


class _FclSdlcSecClusterBc_Type(Integer32):
    """Custom type fclSdlcSecClusterBc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FclSdlcSecClusterBc_Type.__name__ = "Integer32"
_FclSdlcSecClusterBc_Object = MibTableColumn
fclSdlcSecClusterBc = _FclSdlcSecClusterBc_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 23),
    _FclSdlcSecClusterBc_Type()
)
fclSdlcSecClusterBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcSecClusterBc.setStatus("mandatory")


class _FclSdlcSecClusterBe_Type(Integer32):
    """Custom type fclSdlcSecClusterBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FclSdlcSecClusterBe_Type.__name__ = "Integer32"
_FclSdlcSecClusterBe_Object = MibTableColumn
fclSdlcSecClusterBe = _FclSdlcSecClusterBe_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 24),
    _FclSdlcSecClusterBe_Type()
)
fclSdlcSecClusterBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclSdlcSecClusterBe.setStatus("mandatory")
_FclVipLogPort_ObjectIdentity = ObjectIdentity
fclVipLogPort = _FclVipLogPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16)
)
_FclVipLogPortTable_Object = MibTable
fclVipLogPortTable = _FclVipLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 1)
)
if mibBuilder.loadTexts:
    fclVipLogPortTable.setStatus("mandatory")
_FclVipLogPortEntry_Object = MibTableRow
fclVipLogPortEntry = _FclVipLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 1, 1)
)
fclVipLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "fclVipLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclVipLogPortEntry.setStatus("mandatory")


class _FclVipLpLogPortId_Type(Integer32):
    """Custom type fclVipLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclVipLpLogPortId_Type.__name__ = "Integer32"
_FclVipLpLogPortId_Object = MibTableColumn
fclVipLpLogPortId = _FclVipLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 1, 1, 1),
    _FclVipLpLogPortId_Type()
)
fclVipLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclVipLpLogPortId.setStatus("mandatory")


class _FclVipLpInterfaceId_Type(Integer32):
    """Custom type fclVipLpInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclVipLpInterfaceId_Type.__name__ = "Integer32"
_FclVipLpInterfaceId_Object = MibTableColumn
fclVipLpInterfaceId = _FclVipLpInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 1, 1, 2),
    _FclVipLpInterfaceId_Type()
)
fclVipLpInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipLpInterfaceId.setStatus("mandatory")


class _FclVipLpEmulationType_Type(Integer32):
    """Custom type fclVipLpEmulationType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(50,
              51)
        )
    )
    namedValues = NamedValues(
        *(("hpad", 51),
          ("tpad", 50))
    )


_FclVipLpEmulationType_Type.__name__ = "Integer32"
_FclVipLpEmulationType_Object = MibTableColumn
fclVipLpEmulationType = _FclVipLpEmulationType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 1, 1, 3),
    _FclVipLpEmulationType_Type()
)
fclVipLpEmulationType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipLpEmulationType.setStatus("mandatory")


class _FclVipLpResponseSurveyPollingTimer_Type(Integer32):
    """Custom type fclVipLpResponseSurveyPollingTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 25000),
    )


_FclVipLpResponseSurveyPollingTimer_Type.__name__ = "Integer32"
_FclVipLpResponseSurveyPollingTimer_Object = MibTableColumn
fclVipLpResponseSurveyPollingTimer = _FclVipLpResponseSurveyPollingTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 1, 1, 8),
    _FclVipLpResponseSurveyPollingTimer_Type()
)
fclVipLpResponseSurveyPollingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipLpResponseSurveyPollingTimer.setStatus("mandatory")


class _FclVipLpScreenRetryTimer_Type(Integer32):
    """Custom type fclVipLpScreenRetryTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 2500),
    )


_FclVipLpScreenRetryTimer_Type.__name__ = "Integer32"
_FclVipLpScreenRetryTimer_Object = MibTableColumn
fclVipLpScreenRetryTimer = _FclVipLpScreenRetryTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 1, 1, 9),
    _FclVipLpScreenRetryTimer_Type()
)
fclVipLpScreenRetryTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipLpScreenRetryTimer.setStatus("mandatory")


class _FclVipLpPrinterRetryTimer_Type(Integer32):
    """Custom type fclVipLpPrinterRetryTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 2500),
    )


_FclVipLpPrinterRetryTimer_Type.__name__ = "Integer32"
_FclVipLpPrinterRetryTimer_Object = MibTableColumn
fclVipLpPrinterRetryTimer = _FclVipLpPrinterRetryTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 1, 1, 10),
    _FclVipLpPrinterRetryTimer_Type()
)
fclVipLpPrinterRetryTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipLpPrinterRetryTimer.setStatus("mandatory")


class _FclVipLpMessageRetryNumber_Type(Integer32):
    """Custom type fclVipLpMessageRetryNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 7),
    )


_FclVipLpMessageRetryNumber_Type.__name__ = "Integer32"
_FclVipLpMessageRetryNumber_Object = MibTableColumn
fclVipLpMessageRetryNumber = _FclVipLpMessageRetryNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 1, 1, 11),
    _FclVipLpMessageRetryNumber_Type()
)
fclVipLpMessageRetryNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipLpMessageRetryNumber.setStatus("mandatory")


class _FclVipLpPrinterMessagesManagement_Type(Integer32):
    """Custom type fclVipLpPrinterMessagesManagement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("local", 1),
          ("transparent", 2))
    )


_FclVipLpPrinterMessagesManagement_Type.__name__ = "Integer32"
_FclVipLpPrinterMessagesManagement_Object = MibTableColumn
fclVipLpPrinterMessagesManagement = _FclVipLpPrinterMessagesManagement_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 1, 1, 12),
    _FclVipLpPrinterMessagesManagement_Type()
)
fclVipLpPrinterMessagesManagement.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipLpPrinterMessagesManagement.setStatus("mandatory")
_FclVipHostPadLogPort_ObjectIdentity = ObjectIdentity
fclVipHostPadLogPort = _FclVipHostPadLogPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2)
)
_FclVipHosLogPortTable_Object = MibTable
fclVipHosLogPortTable = _FclVipHosLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 1)
)
if mibBuilder.loadTexts:
    fclVipHosLogPortTable.setStatus("mandatory")
_FclVipHosLogPortEntry_Object = MibTableRow
fclVipHosLogPortEntry = _FclVipHosLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 1, 1)
)
fclVipHosLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "fclVipHosLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclVipHosLogPortEntry.setStatus("mandatory")


class _FclVipHosLpLogPortId_Type(Integer32):
    """Custom type fclVipHosLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclVipHosLpLogPortId_Type.__name__ = "Integer32"
_FclVipHosLpLogPortId_Object = MibTableColumn
fclVipHosLpLogPortId = _FclVipHosLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 1, 1, 1),
    _FclVipHosLpLogPortId_Type()
)
fclVipHosLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclVipHosLpLogPortId.setStatus("mandatory")


class _FclVipHosLpWaitTimeOutForPrinter_Type(Integer32):
    """Custom type fclVipHosLpWaitTimeOutForPrinter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 12800),
    )


_FclVipHosLpWaitTimeOutForPrinter_Type.__name__ = "Integer32"
_FclVipHosLpWaitTimeOutForPrinter_Object = MibTableColumn
fclVipHosLpWaitTimeOutForPrinter = _FclVipHosLpWaitTimeOutForPrinter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 1, 1, 2),
    _FclVipHosLpWaitTimeOutForPrinter_Type()
)
fclVipHosLpWaitTimeOutForPrinter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipHosLpWaitTimeOutForPrinter.setStatus("mandatory")


class _FclVipHosLpRepAEot_Type(Integer32):
    """Custom type fclVipHosLpRepAEot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FclVipHosLpRepAEot_Type.__name__ = "Integer32"
_FclVipHosLpRepAEot_Object = MibTableColumn
fclVipHosLpRepAEot = _FclVipHosLpRepAEot_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 1, 1, 5),
    _FclVipHosLpRepAEot_Type()
)
fclVipHosLpRepAEot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipHosLpRepAEot.setStatus("mandatory")


class _FclVipHosLpFtbcc_Type(Integer32):
    """Custom type fclVipHosLpFtbcc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FclVipHosLpFtbcc_Type.__name__ = "Integer32"
_FclVipHosLpFtbcc_Object = MibTableColumn
fclVipHosLpFtbcc = _FclVipHosLpFtbcc_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 1, 1, 6),
    _FclVipHosLpFtbcc_Type()
)
fclVipHosLpFtbcc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipHosLpFtbcc.setStatus("mandatory")
_FclVipHosElementTable_Object = MibTable
fclVipHosElementTable = _FclVipHosElementTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 2)
)
if mibBuilder.loadTexts:
    fclVipHosElementTable.setStatus("mandatory")
_FclVipHosElementEntry_Object = MibTableRow
fclVipHosElementEntry = _FclVipHosElementEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 2, 1)
)
fclVipHosElementEntry.setIndexNames(
    (0, "PCE-MIB", "fclVipHosElementId"),
)
if mibBuilder.loadTexts:
    fclVipHosElementEntry.setStatus("mandatory")


class _FclVipHosElementId_Type(Integer32):
    """Custom type fclVipHosElementId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 200),
    )


_FclVipHosElementId_Type.__name__ = "Integer32"
_FclVipHosElementId_Object = MibTableColumn
fclVipHosElementId = _FclVipHosElementId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 2, 1, 1),
    _FclVipHosElementId_Type()
)
fclVipHosElementId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclVipHosElementId.setStatus("mandatory")


class _FclVipHosElemStatus_Type(Integer32):
    """Custom type fclVipHosElemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclVipHosElemStatus_Type.__name__ = "Integer32"
_FclVipHosElemStatus_Object = MibTableColumn
fclVipHosElemStatus = _FclVipHosElemStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 2, 1, 2),
    _FclVipHosElemStatus_Type()
)
fclVipHosElemStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipHosElemStatus.setStatus("mandatory")


class _FclVipHosElemLogPortId_Type(Integer32):
    """Custom type fclVipHosElemLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclVipHosElemLogPortId_Type.__name__ = "Integer32"
_FclVipHosElemLogPortId_Object = MibTableColumn
fclVipHosElemLogPortId = _FclVipHosElemLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 2, 1, 3),
    _FclVipHosElemLogPortId_Type()
)
fclVipHosElemLogPortId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipHosElemLogPortId.setStatus("mandatory")


class _FclVipHosElemType_Type(Integer32):
    """Custom type fclVipHosElemType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("cluster", 1),
          ("isolatedstation", 2))
    )


_FclVipHosElemType_Type.__name__ = "Integer32"
_FclVipHosElemType_Object = MibTableColumn
fclVipHosElemType = _FclVipHosElemType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 2, 1, 4),
    _FclVipHosElemType_Type()
)
fclVipHosElemType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipHosElemType.setStatus("mandatory")


class _FclVipHosElemAddress_Type(Integer32):
    """Custom type fclVipHosElemAddress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_FclVipHosElemAddress_Type.__name__ = "Integer32"
_FclVipHosElemAddress_Object = MibTableColumn
fclVipHosElemAddress = _FclVipHosElemAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 2, 1, 5),
    _FclVipHosElemAddress_Type()
)
fclVipHosElemAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipHosElemAddress.setStatus("mandatory")
_FclVipHosStationTable_Object = MibTable
fclVipHosStationTable = _FclVipHosStationTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 3)
)
if mibBuilder.loadTexts:
    fclVipHosStationTable.setStatus("mandatory")
_FclVipHosStationEntry_Object = MibTableRow
fclVipHosStationEntry = _FclVipHosStationEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 3, 1)
)
fclVipHosStationEntry.setIndexNames(
    (0, "PCE-MIB", "fclVipHosStatElementId"),
    (0, "PCE-MIB", "fclVipHosStatStationAddress"),
)
if mibBuilder.loadTexts:
    fclVipHosStationEntry.setStatus("mandatory")


class _FclVipHosStatElementId_Type(Integer32):
    """Custom type fclVipHosStatElementId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 200),
    )


_FclVipHosStatElementId_Type.__name__ = "Integer32"
_FclVipHosStatElementId_Object = MibTableColumn
fclVipHosStatElementId = _FclVipHosStatElementId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 3, 1, 1),
    _FclVipHosStatElementId_Type()
)
fclVipHosStatElementId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclVipHosStatElementId.setStatus("mandatory")


class _FclVipHosStatStationAddress_Type(Integer32):
    """Custom type fclVipHosStatStationAddress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_FclVipHosStatStationAddress_Type.__name__ = "Integer32"
_FclVipHosStatStationAddress_Object = MibTableColumn
fclVipHosStatStationAddress = _FclVipHosStatStationAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 3, 1, 2),
    _FclVipHosStatStationAddress_Type()
)
fclVipHosStatStationAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclVipHosStatStationAddress.setStatus("mandatory")


class _FclVipHosStatStatus_Type(Integer32):
    """Custom type fclVipHosStatStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclVipHosStatStatus_Type.__name__ = "Integer32"
_FclVipHosStatStatus_Object = MibTableColumn
fclVipHosStatStatus = _FclVipHosStatStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 3, 1, 3),
    _FclVipHosStatStatus_Type()
)
fclVipHosStatStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipHosStatStatus.setStatus("mandatory")
_FclVipClusterLogPort_ObjectIdentity = ObjectIdentity
fclVipClusterLogPort = _FclVipClusterLogPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3)
)
_FclVipCluLogPortTable_Object = MibTable
fclVipCluLogPortTable = _FclVipCluLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 1)
)
if mibBuilder.loadTexts:
    fclVipCluLogPortTable.setStatus("mandatory")
_FclVipCluLogPortEntry_Object = MibTableRow
fclVipCluLogPortEntry = _FclVipCluLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 1, 1)
)
fclVipCluLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "fclVipCluLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclVipCluLogPortEntry.setStatus("mandatory")


class _FclVipCluLpLogPortId_Type(Integer32):
    """Custom type fclVipCluLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclVipCluLpLogPortId_Type.__name__ = "Integer32"
_FclVipCluLpLogPortId_Object = MibTableColumn
fclVipCluLpLogPortId = _FclVipCluLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 1, 1, 1),
    _FclVipCluLpLogPortId_Type()
)
fclVipCluLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclVipCluLpLogPortId.setStatus("mandatory")


class _FclVipCluLpPollingTimer_Type(Integer32):
    """Custom type fclVipCluLpPollingTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 12800),
    )


_FclVipCluLpPollingTimer_Type.__name__ = "Integer32"
_FclVipCluLpPollingTimer_Object = MibTableColumn
fclVipCluLpPollingTimer = _FclVipCluLpPollingTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 1, 1, 2),
    _FclVipCluLpPollingTimer_Type()
)
fclVipCluLpPollingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipCluLpPollingTimer.setStatus("mandatory")


class _FclVipCluLpFailedPollingMaxNumber_Type(Integer32):
    """Custom type fclVipCluLpFailedPollingMaxNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 250),
    )


_FclVipCluLpFailedPollingMaxNumber_Type.__name__ = "Integer32"
_FclVipCluLpFailedPollingMaxNumber_Object = MibTableColumn
fclVipCluLpFailedPollingMaxNumber = _FclVipCluLpFailedPollingMaxNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 1, 1, 3),
    _FclVipCluLpFailedPollingMaxNumber_Type()
)
fclVipCluLpFailedPollingMaxNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipCluLpFailedPollingMaxNumber.setStatus("mandatory")


class _FclVipCluLpPollingTypeAfterSelect_Type(Integer32):
    """Custom type fclVipCluLpPollingTypeAfterSelect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clusterPoll", 2),
          ("stationPoll", 1))
    )


_FclVipCluLpPollingTypeAfterSelect_Type.__name__ = "Integer32"
_FclVipCluLpPollingTypeAfterSelect_Object = MibTableColumn
fclVipCluLpPollingTypeAfterSelect = _FclVipCluLpPollingTypeAfterSelect_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 1, 1, 8),
    _FclVipCluLpPollingTypeAfterSelect_Type()
)
fclVipCluLpPollingTypeAfterSelect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipCluLpPollingTypeAfterSelect.setStatus("mandatory")


class _FclVipCluLpScreenKeepTimer_Type(Integer32):
    """Custom type fclVipCluLpScreenKeepTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2550),
    )


_FclVipCluLpScreenKeepTimer_Type.__name__ = "Integer32"
_FclVipCluLpScreenKeepTimer_Object = MibTableColumn
fclVipCluLpScreenKeepTimer = _FclVipCluLpScreenKeepTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 1, 1, 9),
    _FclVipCluLpScreenKeepTimer_Type()
)
fclVipCluLpScreenKeepTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipCluLpScreenKeepTimer.setStatus("mandatory")
_FclVipCluElementTable_Object = MibTable
fclVipCluElementTable = _FclVipCluElementTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 2)
)
if mibBuilder.loadTexts:
    fclVipCluElementTable.setStatus("mandatory")
_FclVipCluElementEntry_Object = MibTableRow
fclVipCluElementEntry = _FclVipCluElementEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 2, 1)
)
fclVipCluElementEntry.setIndexNames(
    (0, "PCE-MIB", "fclVipCluElementId"),
)
if mibBuilder.loadTexts:
    fclVipCluElementEntry.setStatus("mandatory")


class _FclVipCluElementId_Type(Integer32):
    """Custom type fclVipCluElementId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 200),
    )


_FclVipCluElementId_Type.__name__ = "Integer32"
_FclVipCluElementId_Object = MibTableColumn
fclVipCluElementId = _FclVipCluElementId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 2, 1, 1),
    _FclVipCluElementId_Type()
)
fclVipCluElementId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclVipCluElementId.setStatus("mandatory")


class _FclVipCluElemStatus_Type(Integer32):
    """Custom type fclVipCluElemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclVipCluElemStatus_Type.__name__ = "Integer32"
_FclVipCluElemStatus_Object = MibTableColumn
fclVipCluElemStatus = _FclVipCluElemStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 2, 1, 2),
    _FclVipCluElemStatus_Type()
)
fclVipCluElemStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipCluElemStatus.setStatus("mandatory")


class _FclVipCluElemLogPortId_Type(Integer32):
    """Custom type fclVipCluElemLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclVipCluElemLogPortId_Type.__name__ = "Integer32"
_FclVipCluElemLogPortId_Object = MibTableColumn
fclVipCluElemLogPortId = _FclVipCluElemLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 2, 1, 3),
    _FclVipCluElemLogPortId_Type()
)
fclVipCluElemLogPortId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipCluElemLogPortId.setStatus("mandatory")


class _FclVipCluElemType_Type(Integer32):
    """Custom type fclVipCluElemType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("cluster", 1),
          ("isolatedstation", 2))
    )


_FclVipCluElemType_Type.__name__ = "Integer32"
_FclVipCluElemType_Object = MibTableColumn
fclVipCluElemType = _FclVipCluElemType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 2, 1, 4),
    _FclVipCluElemType_Type()
)
fclVipCluElemType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipCluElemType.setStatus("mandatory")


class _FclVipCluElemAddress_Type(Integer32):
    """Custom type fclVipCluElemAddress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_FclVipCluElemAddress_Type.__name__ = "Integer32"
_FclVipCluElemAddress_Object = MibTableColumn
fclVipCluElemAddress = _FclVipCluElemAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 2, 1, 5),
    _FclVipCluElemAddress_Type()
)
fclVipCluElemAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipCluElemAddress.setStatus("mandatory")


class _FclVipCluElemCalledAddr_Type(OctetString):
    """Custom type fclVipCluElemCalledAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclVipCluElemCalledAddr_Type.__name__ = "OctetString"
_FclVipCluElemCalledAddr_Object = MibTableColumn
fclVipCluElemCalledAddr = _FclVipCluElemCalledAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 2, 1, 10),
    _FclVipCluElemCalledAddr_Type()
)
fclVipCluElemCalledAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipCluElemCalledAddr.setStatus("mandatory")


class _FclVipCluElemMinRecallTimer_Type(Integer32):
    """Custom type fclVipCluElemMinRecallTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 990),
    )


_FclVipCluElemMinRecallTimer_Type.__name__ = "Integer32"
_FclVipCluElemMinRecallTimer_Object = MibTableColumn
fclVipCluElemMinRecallTimer = _FclVipCluElemMinRecallTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 2, 1, 11),
    _FclVipCluElemMinRecallTimer_Type()
)
fclVipCluElemMinRecallTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipCluElemMinRecallTimer.setStatus("mandatory")
_FclVipCluStationTable_Object = MibTable
fclVipCluStationTable = _FclVipCluStationTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 3)
)
if mibBuilder.loadTexts:
    fclVipCluStationTable.setStatus("mandatory")
_FclVipCluStationEntry_Object = MibTableRow
fclVipCluStationEntry = _FclVipCluStationEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 3, 1)
)
fclVipCluStationEntry.setIndexNames(
    (0, "PCE-MIB", "fclVipCluStatElementId"),
    (0, "PCE-MIB", "fclVipCluStatStationAddress"),
)
if mibBuilder.loadTexts:
    fclVipCluStationEntry.setStatus("mandatory")


class _FclVipCluStatElementId_Type(Integer32):
    """Custom type fclVipCluStatElementId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 200),
    )


_FclVipCluStatElementId_Type.__name__ = "Integer32"
_FclVipCluStatElementId_Object = MibTableColumn
fclVipCluStatElementId = _FclVipCluStatElementId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 3, 1, 1),
    _FclVipCluStatElementId_Type()
)
fclVipCluStatElementId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclVipCluStatElementId.setStatus("mandatory")


class _FclVipCluStatStationAddress_Type(Integer32):
    """Custom type fclVipCluStatStationAddress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_FclVipCluStatStationAddress_Type.__name__ = "Integer32"
_FclVipCluStatStationAddress_Object = MibTableColumn
fclVipCluStatStationAddress = _FclVipCluStatStationAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 3, 1, 2),
    _FclVipCluStatStationAddress_Type()
)
fclVipCluStatStationAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclVipCluStatStationAddress.setStatus("mandatory")


class _FclVipCluStatStatus_Type(Integer32):
    """Custom type fclVipCluStatStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclVipCluStatStatus_Type.__name__ = "Integer32"
_FclVipCluStatStatus_Object = MibTableColumn
fclVipCluStatStatus = _FclVipCluStatStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 3, 1, 3),
    _FclVipCluStatStatus_Type()
)
fclVipCluStatStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclVipCluStatStatus.setStatus("mandatory")
_FclBsc3270LogPort_ObjectIdentity = ObjectIdentity
fclBsc3270LogPort = _FclBsc3270LogPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17)
)
_FclB3270LogPortTable_Object = MibTable
fclB3270LogPortTable = _FclB3270LogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 1)
)
if mibBuilder.loadTexts:
    fclB3270LogPortTable.setStatus("mandatory")
_FclB3270LogPortEntry_Object = MibTableRow
fclB3270LogPortEntry = _FclB3270LogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 1, 1)
)
fclB3270LogPortEntry.setIndexNames(
    (0, "PCE-MIB", "fclB3270LpLogPortId"),
)
if mibBuilder.loadTexts:
    fclB3270LogPortEntry.setStatus("mandatory")


class _FclB3270LpLogPortId_Type(Integer32):
    """Custom type fclB3270LpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclB3270LpLogPortId_Type.__name__ = "Integer32"
_FclB3270LpLogPortId_Object = MibTableColumn
fclB3270LpLogPortId = _FclB3270LpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 1, 1, 1),
    _FclB3270LpLogPortId_Type()
)
fclB3270LpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclB3270LpLogPortId.setStatus("mandatory")


class _FclB3270LpInterfaceId_Type(Integer32):
    """Custom type fclB3270LpInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclB3270LpInterfaceId_Type.__name__ = "Integer32"
_FclB3270LpInterfaceId_Object = MibTableColumn
fclB3270LpInterfaceId = _FclB3270LpInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 1, 1, 2),
    _FclB3270LpInterfaceId_Type()
)
fclB3270LpInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclB3270LpInterfaceId.setStatus("mandatory")


class _FclB3270LpEmulationType_Type(Integer32):
    """Custom type fclB3270LpEmulationType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(60,
              61)
        )
    )
    namedValues = NamedValues(
        *(("hpad", 61),
          ("tpad", 60))
    )


_FclB3270LpEmulationType_Type.__name__ = "Integer32"
_FclB3270LpEmulationType_Object = MibTableColumn
fclB3270LpEmulationType = _FclB3270LpEmulationType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 1, 1, 3),
    _FclB3270LpEmulationType_Type()
)
fclB3270LpEmulationType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclB3270LpEmulationType.setStatus("mandatory")


class _FclB3270LpCodingParityType_Type(Integer32):
    """Custom type fclB3270LpCodingParityType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("asciioddparity", 2),
          ("ebcdic", 1))
    )


_FclB3270LpCodingParityType_Type.__name__ = "Integer32"
_FclB3270LpCodingParityType_Object = MibTableColumn
fclB3270LpCodingParityType = _FclB3270LpCodingParityType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 1, 1, 4),
    _FclB3270LpCodingParityType_Type()
)
fclB3270LpCodingParityType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclB3270LpCodingParityType.setStatus("mandatory")


class _FclB3270LpNoAnswerWatchDog_Type(Integer32):
    """Custom type fclB3270LpNoAnswerWatchDog based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 25000),
    )


_FclB3270LpNoAnswerWatchDog_Type.__name__ = "Integer32"
_FclB3270LpNoAnswerWatchDog_Object = MibTableColumn
fclB3270LpNoAnswerWatchDog = _FclB3270LpNoAnswerWatchDog_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 1, 1, 5),
    _FclB3270LpNoAnswerWatchDog_Type()
)
fclB3270LpNoAnswerWatchDog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclB3270LpNoAnswerWatchDog.setStatus("mandatory")


class _FclB3270LpMessageRetryNumber_Type(Integer32):
    """Custom type fclB3270LpMessageRetryNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_FclB3270LpMessageRetryNumber_Type.__name__ = "Integer32"
_FclB3270LpMessageRetryNumber_Object = MibTableColumn
fclB3270LpMessageRetryNumber = _FclB3270LpMessageRetryNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 1, 1, 6),
    _FclB3270LpMessageRetryNumber_Type()
)
fclB3270LpMessageRetryNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclB3270LpMessageRetryNumber.setStatus("mandatory")
_FclB3270HostPadLogPort_ObjectIdentity = ObjectIdentity
fclB3270HostPadLogPort = _FclB3270HostPadLogPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2)
)
_FclB3270HosLogPortTable_Object = MibTable
fclB3270HosLogPortTable = _FclB3270HosLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 1)
)
if mibBuilder.loadTexts:
    fclB3270HosLogPortTable.setStatus("mandatory")
_FclB3270HosLogPortEntry_Object = MibTableRow
fclB3270HosLogPortEntry = _FclB3270HosLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 1, 1)
)
fclB3270HosLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "fclB3270HosLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclB3270HosLogPortEntry.setStatus("mandatory")


class _FclB3270HosLpLogPortId_Type(Integer32):
    """Custom type fclB3270HosLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclB3270HosLpLogPortId_Type.__name__ = "Integer32"
_FclB3270HosLpLogPortId_Object = MibTableColumn
fclB3270HosLpLogPortId = _FclB3270HosLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 1, 1, 1),
    _FclB3270HosLpLogPortId_Type()
)
fclB3270HosLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclB3270HosLpLogPortId.setStatus("mandatory")


class _FclB3270HosLpLineWatchDog_Type(Integer32):
    """Custom type fclB3270HosLpLineWatchDog based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 2500),
    )


_FclB3270HosLpLineWatchDog_Type.__name__ = "Integer32"
_FclB3270HosLpLineWatchDog_Object = MibTableColumn
fclB3270HosLpLineWatchDog = _FclB3270HosLpLineWatchDog_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 1, 1, 2),
    _FclB3270HosLpLineWatchDog_Type()
)
fclB3270HosLpLineWatchDog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclB3270HosLpLineWatchDog.setStatus("mandatory")


class _FclB3270HosLpWackTransmission_Type(Integer32):
    """Custom type fclB3270HosLpWackTransmission based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FclB3270HosLpWackTransmission_Type.__name__ = "Integer32"
_FclB3270HosLpWackTransmission_Object = MibTableColumn
fclB3270HosLpWackTransmission = _FclB3270HosLpWackTransmission_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 1, 1, 3),
    _FclB3270HosLpWackTransmission_Type()
)
fclB3270HosLpWackTransmission.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclB3270HosLpWackTransmission.setStatus("mandatory")


class _FclB3270HosLpAnswerToPolling_Type(Integer32):
    """Custom type fclB3270HosLpAnswerToPolling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("always", 1),
          ("onlinkup", 2))
    )


_FclB3270HosLpAnswerToPolling_Type.__name__ = "Integer32"
_FclB3270HosLpAnswerToPolling_Object = MibTableColumn
fclB3270HosLpAnswerToPolling = _FclB3270HosLpAnswerToPolling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 1, 1, 4),
    _FclB3270HosLpAnswerToPolling_Type()
)
fclB3270HosLpAnswerToPolling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclB3270HosLpAnswerToPolling.setStatus("mandatory")
_FclB3270HosClusterTable_Object = MibTable
fclB3270HosClusterTable = _FclB3270HosClusterTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 2)
)
if mibBuilder.loadTexts:
    fclB3270HosClusterTable.setStatus("mandatory")
_FclB3270HosClusterEntry_Object = MibTableRow
fclB3270HosClusterEntry = _FclB3270HosClusterEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 2, 1)
)
fclB3270HosClusterEntry.setIndexNames(
    (0, "PCE-MIB", "fclB3270HosClusterLogPortId"),
    (0, "PCE-MIB", "fclB3270HosClusterCluAdd"),
    (0, "PCE-MIB", "fclB3270HosClusterStaAdd"),
)
if mibBuilder.loadTexts:
    fclB3270HosClusterEntry.setStatus("mandatory")


class _FclB3270HosClusterLogPortId_Type(Integer32):
    """Custom type fclB3270HosClusterLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclB3270HosClusterLogPortId_Type.__name__ = "Integer32"
_FclB3270HosClusterLogPortId_Object = MibTableColumn
fclB3270HosClusterLogPortId = _FclB3270HosClusterLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 2, 1, 1),
    _FclB3270HosClusterLogPortId_Type()
)
fclB3270HosClusterLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclB3270HosClusterLogPortId.setStatus("mandatory")


class _FclB3270HosClusterCluAdd_Type(Integer32):
    """Custom type fclB3270HosClusterCluAdd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_FclB3270HosClusterCluAdd_Type.__name__ = "Integer32"
_FclB3270HosClusterCluAdd_Object = MibTableColumn
fclB3270HosClusterCluAdd = _FclB3270HosClusterCluAdd_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 2, 1, 2),
    _FclB3270HosClusterCluAdd_Type()
)
fclB3270HosClusterCluAdd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclB3270HosClusterCluAdd.setStatus("mandatory")


class _FclB3270HosClusterStaAdd_Type(Integer32):
    """Custom type fclB3270HosClusterStaAdd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_FclB3270HosClusterStaAdd_Type.__name__ = "Integer32"
_FclB3270HosClusterStaAdd_Object = MibTableColumn
fclB3270HosClusterStaAdd = _FclB3270HosClusterStaAdd_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 2, 1, 3),
    _FclB3270HosClusterStaAdd_Type()
)
fclB3270HosClusterStaAdd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclB3270HosClusterStaAdd.setStatus("mandatory")


class _FclB3270HosClusterStatus_Type(Integer32):
    """Custom type fclB3270HosClusterStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclB3270HosClusterStatus_Type.__name__ = "Integer32"
_FclB3270HosClusterStatus_Object = MibTableColumn
fclB3270HosClusterStatus = _FclB3270HosClusterStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 2, 1, 4),
    _FclB3270HosClusterStatus_Type()
)
fclB3270HosClusterStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclB3270HosClusterStatus.setStatus("mandatory")
_FclB3270ClusterLogPort_ObjectIdentity = ObjectIdentity
fclB3270ClusterLogPort = _FclB3270ClusterLogPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3)
)
_FclB3270CluLogPortTable_Object = MibTable
fclB3270CluLogPortTable = _FclB3270CluLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 1)
)
if mibBuilder.loadTexts:
    fclB3270CluLogPortTable.setStatus("mandatory")
_FclB3270CluLogPortEntry_Object = MibTableRow
fclB3270CluLogPortEntry = _FclB3270CluLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 1, 1)
)
fclB3270CluLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "fclB3270CluLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclB3270CluLogPortEntry.setStatus("mandatory")


class _FclB3270CluLpLogPortId_Type(Integer32):
    """Custom type fclB3270CluLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclB3270CluLpLogPortId_Type.__name__ = "Integer32"
_FclB3270CluLpLogPortId_Object = MibTableColumn
fclB3270CluLpLogPortId = _FclB3270CluLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 1, 1, 1),
    _FclB3270CluLpLogPortId_Type()
)
fclB3270CluLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclB3270CluLpLogPortId.setStatus("mandatory")


class _FclB3270CluLpPollingTimer_Type(Integer32):
    """Custom type fclB3270CluLpPollingTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 25000),
    )


_FclB3270CluLpPollingTimer_Type.__name__ = "Integer32"
_FclB3270CluLpPollingTimer_Object = MibTableColumn
fclB3270CluLpPollingTimer = _FclB3270CluLpPollingTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 1, 1, 10),
    _FclB3270CluLpPollingTimer_Type()
)
fclB3270CluLpPollingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclB3270CluLpPollingTimer.setStatus("mandatory")


class _FclB3270CluLpMaxNumberOfUnwPolls_Type(Integer32):
    """Custom type fclB3270CluLpMaxNumberOfUnwPolls based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_FclB3270CluLpMaxNumberOfUnwPolls_Type.__name__ = "Integer32"
_FclB3270CluLpMaxNumberOfUnwPolls_Object = MibTableColumn
fclB3270CluLpMaxNumberOfUnwPolls = _FclB3270CluLpMaxNumberOfUnwPolls_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 1, 1, 11),
    _FclB3270CluLpMaxNumberOfUnwPolls_Type()
)
fclB3270CluLpMaxNumberOfUnwPolls.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclB3270CluLpMaxNumberOfUnwPolls.setStatus("mandatory")


class _FclB3270CluLpReconnectionType_Type(Integer32):
    """Custom type fclB3270CluLpReconnectionType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("ondata", 2))
    )


_FclB3270CluLpReconnectionType_Type.__name__ = "Integer32"
_FclB3270CluLpReconnectionType_Object = MibTableColumn
fclB3270CluLpReconnectionType = _FclB3270CluLpReconnectionType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 1, 1, 12),
    _FclB3270CluLpReconnectionType_Type()
)
fclB3270CluLpReconnectionType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclB3270CluLpReconnectionType.setStatus("mandatory")
_FclB3270CluClusterTable_Object = MibTable
fclB3270CluClusterTable = _FclB3270CluClusterTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 2)
)
if mibBuilder.loadTexts:
    fclB3270CluClusterTable.setStatus("mandatory")
_FclB3270CluClusterEntry_Object = MibTableRow
fclB3270CluClusterEntry = _FclB3270CluClusterEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 2, 1)
)
fclB3270CluClusterEntry.setIndexNames(
    (0, "PCE-MIB", "fclB3270CluClusterLogPortId"),
    (0, "PCE-MIB", "fclB3270CluClusterCluAdd"),
    (0, "PCE-MIB", "fclB3270CluClusterStaAdd"),
)
if mibBuilder.loadTexts:
    fclB3270CluClusterEntry.setStatus("mandatory")


class _FclB3270CluClusterLogPortId_Type(Integer32):
    """Custom type fclB3270CluClusterLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclB3270CluClusterLogPortId_Type.__name__ = "Integer32"
_FclB3270CluClusterLogPortId_Object = MibTableColumn
fclB3270CluClusterLogPortId = _FclB3270CluClusterLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 2, 1, 1),
    _FclB3270CluClusterLogPortId_Type()
)
fclB3270CluClusterLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclB3270CluClusterLogPortId.setStatus("mandatory")


class _FclB3270CluClusterCluAdd_Type(Integer32):
    """Custom type fclB3270CluClusterCluAdd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_FclB3270CluClusterCluAdd_Type.__name__ = "Integer32"
_FclB3270CluClusterCluAdd_Object = MibTableColumn
fclB3270CluClusterCluAdd = _FclB3270CluClusterCluAdd_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 2, 1, 2),
    _FclB3270CluClusterCluAdd_Type()
)
fclB3270CluClusterCluAdd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclB3270CluClusterCluAdd.setStatus("mandatory")


class _FclB3270CluClusterStaAdd_Type(Integer32):
    """Custom type fclB3270CluClusterStaAdd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_FclB3270CluClusterStaAdd_Type.__name__ = "Integer32"
_FclB3270CluClusterStaAdd_Object = MibTableColumn
fclB3270CluClusterStaAdd = _FclB3270CluClusterStaAdd_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 2, 1, 3),
    _FclB3270CluClusterStaAdd_Type()
)
fclB3270CluClusterStaAdd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclB3270CluClusterStaAdd.setStatus("mandatory")


class _FclB3270CluClusterStatus_Type(Integer32):
    """Custom type fclB3270CluClusterStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclB3270CluClusterStatus_Type.__name__ = "Integer32"
_FclB3270CluClusterStatus_Object = MibTableColumn
fclB3270CluClusterStatus = _FclB3270CluClusterStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 2, 1, 4),
    _FclB3270CluClusterStatus_Type()
)
fclB3270CluClusterStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclB3270CluClusterStatus.setStatus("mandatory")
_FclB3270CluCallTable_Object = MibTable
fclB3270CluCallTable = _FclB3270CluCallTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 3)
)
if mibBuilder.loadTexts:
    fclB3270CluCallTable.setStatus("mandatory")
_FclB3270CluCallEntry_Object = MibTableRow
fclB3270CluCallEntry = _FclB3270CluCallEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 3, 1)
)
fclB3270CluCallEntry.setIndexNames(
    (0, "PCE-MIB", "fclB3270CluCallLogPortId"),
    (0, "PCE-MIB", "fclB3270CluCallCluAdd"),
)
if mibBuilder.loadTexts:
    fclB3270CluCallEntry.setStatus("mandatory")


class _FclB3270CluCallLogPortId_Type(Integer32):
    """Custom type fclB3270CluCallLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclB3270CluCallLogPortId_Type.__name__ = "Integer32"
_FclB3270CluCallLogPortId_Object = MibTableColumn
fclB3270CluCallLogPortId = _FclB3270CluCallLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 3, 1, 1),
    _FclB3270CluCallLogPortId_Type()
)
fclB3270CluCallLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclB3270CluCallLogPortId.setStatus("mandatory")


class _FclB3270CluCallCluAdd_Type(Integer32):
    """Custom type fclB3270CluCallCluAdd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_FclB3270CluCallCluAdd_Type.__name__ = "Integer32"
_FclB3270CluCallCluAdd_Object = MibTableColumn
fclB3270CluCallCluAdd = _FclB3270CluCallCluAdd_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 3, 1, 2),
    _FclB3270CluCallCluAdd_Type()
)
fclB3270CluCallCluAdd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclB3270CluCallCluAdd.setStatus("mandatory")


class _FclB3270CluCallStatus_Type(Integer32):
    """Custom type fclB3270CluCallStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclB3270CluCallStatus_Type.__name__ = "Integer32"
_FclB3270CluCallStatus_Object = MibTableColumn
fclB3270CluCallStatus = _FclB3270CluCallStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 3, 1, 3),
    _FclB3270CluCallStatus_Type()
)
fclB3270CluCallStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclB3270CluCallStatus.setStatus("mandatory")


class _FclB3270CluCallCallAddr_Type(OctetString):
    """Custom type fclB3270CluCallCallAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclB3270CluCallCallAddr_Type.__name__ = "OctetString"
_FclB3270CluCallCallAddr_Object = MibTableColumn
fclB3270CluCallCallAddr = _FclB3270CluCallCallAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 3, 1, 5),
    _FclB3270CluCallCallAddr_Type()
)
fclB3270CluCallCallAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclB3270CluCallCallAddr.setStatus("mandatory")


class _FclB3270CluCallMinRecallTimer_Type(Integer32):
    """Custom type fclB3270CluCallMinRecallTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 990),
    )


_FclB3270CluCallMinRecallTimer_Type.__name__ = "Integer32"
_FclB3270CluCallMinRecallTimer_Object = MibTableColumn
fclB3270CluCallMinRecallTimer = _FclB3270CluCallMinRecallTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 3, 1, 10),
    _FclB3270CluCallMinRecallTimer_Type()
)
fclB3270CluCallMinRecallTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclB3270CluCallMinRecallTimer.setStatus("mandatory")
_FclBscX780LogPort_ObjectIdentity = ObjectIdentity
fclBscX780LogPort = _FclBscX780LogPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18)
)
_FclBX780LogPortTable_Object = MibTable
fclBX780LogPortTable = _FclBX780LogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1)
)
if mibBuilder.loadTexts:
    fclBX780LogPortTable.setStatus("mandatory")
_FclBX780LogPortEntry_Object = MibTableRow
fclBX780LogPortEntry = _FclBX780LogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1)
)
fclBX780LogPortEntry.setIndexNames(
    (0, "PCE-MIB", "fclBX780LpLogPortId"),
)
if mibBuilder.loadTexts:
    fclBX780LogPortEntry.setStatus("mandatory")


class _FclBX780LpLogPortId_Type(Integer32):
    """Custom type fclBX780LpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclBX780LpLogPortId_Type.__name__ = "Integer32"
_FclBX780LpLogPortId_Object = MibTableColumn
fclBX780LpLogPortId = _FclBX780LpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 1),
    _FclBX780LpLogPortId_Type()
)
fclBX780LpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclBX780LpLogPortId.setStatus("mandatory")


class _FclBX780LpInterfaceId_Type(Integer32):
    """Custom type fclBX780LpInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclBX780LpInterfaceId_Type.__name__ = "Integer32"
_FclBX780LpInterfaceId_Object = MibTableColumn
fclBX780LpInterfaceId = _FclBX780LpInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 2),
    _FclBX780LpInterfaceId_Type()
)
fclBX780LpInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBX780LpInterfaceId.setStatus("mandatory")


class _FclBX780LpProtocolType_Type(Integer32):
    """Custom type fclBX780LpProtocolType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bsc2780", 1),
          ("bsc3780", 2),
          ("bsc3780onPSTN", 3))
    )


_FclBX780LpProtocolType_Type.__name__ = "Integer32"
_FclBX780LpProtocolType_Object = MibTableColumn
fclBX780LpProtocolType = _FclBX780LpProtocolType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 3),
    _FclBX780LpProtocolType_Type()
)
fclBX780LpProtocolType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBX780LpProtocolType.setStatus("mandatory")


class _FclBX780LpCallDirection_Type(Integer32):
    """Custom type fclBX780LpCallDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("called", 2),
          ("calling", 1))
    )


_FclBX780LpCallDirection_Type.__name__ = "Integer32"
_FclBX780LpCallDirection_Object = MibTableColumn
fclBX780LpCallDirection = _FclBX780LpCallDirection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 4),
    _FclBX780LpCallDirection_Type()
)
fclBX780LpCallDirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBX780LpCallDirection.setStatus("mandatory")


class _FclBX780LpDeconnectTimer_Type(Integer32):
    """Custom type fclBX780LpDeconnectTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2500),
    )


_FclBX780LpDeconnectTimer_Type.__name__ = "Integer32"
_FclBX780LpDeconnectTimer_Object = MibTableColumn
fclBX780LpDeconnectTimer = _FclBX780LpDeconnectTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 5),
    _FclBX780LpDeconnectTimer_Type()
)
fclBX780LpDeconnectTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBX780LpDeconnectTimer.setStatus("mandatory")


class _FclBX780LpSurveyTimer_Type(Integer32):
    """Custom type fclBX780LpSurveyTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2500),
    )


_FclBX780LpSurveyTimer_Type.__name__ = "Integer32"
_FclBX780LpSurveyTimer_Object = MibTableColumn
fclBX780LpSurveyTimer = _FclBX780LpSurveyTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 6),
    _FclBX780LpSurveyTimer_Type()
)
fclBX780LpSurveyTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBX780LpSurveyTimer.setStatus("mandatory")


class _FclBX780LpCodingParityType_Type(Integer32):
    """Custom type fclBX780LpCodingParityType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("asciioddparity", 2),
          ("ebcdic", 1))
    )


_FclBX780LpCodingParityType_Type.__name__ = "Integer32"
_FclBX780LpCodingParityType_Object = MibTableColumn
fclBX780LpCodingParityType = _FclBX780LpCodingParityType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 7),
    _FclBX780LpCodingParityType_Type()
)
fclBX780LpCodingParityType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBX780LpCodingParityType.setStatus("mandatory")


class _FclBX780LpEquipementType_Type(Integer32):
    """Custom type fclBX780LpEquipementType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("cpu-cpu", 3),
          ("cpu-term", 4),
          ("term-cpu", 2),
          ("term-term", 1))
    )


_FclBX780LpEquipementType_Type.__name__ = "Integer32"
_FclBX780LpEquipementType_Object = MibTableColumn
fclBX780LpEquipementType = _FclBX780LpEquipementType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 8),
    _FclBX780LpEquipementType_Type()
)
fclBX780LpEquipementType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBX780LpEquipementType.setStatus("mandatory")


class _FclBX780LpENQRetransTimer_Type(Integer32):
    """Custom type fclBX780LpENQRetransTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 25000),
    )


_FclBX780LpENQRetransTimer_Type.__name__ = "Integer32"
_FclBX780LpENQRetransTimer_Object = MibTableColumn
fclBX780LpENQRetransTimer = _FclBX780LpENQRetransTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 9),
    _FclBX780LpENQRetransTimer_Type()
)
fclBX780LpENQRetransTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBX780LpENQRetransTimer.setStatus("mandatory")


class _FclBX780LpAuthorAnswerTimer_Type(Integer32):
    """Custom type fclBX780LpAuthorAnswerTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 25000),
    )


_FclBX780LpAuthorAnswerTimer_Type.__name__ = "Integer32"
_FclBX780LpAuthorAnswerTimer_Object = MibTableColumn
fclBX780LpAuthorAnswerTimer = _FclBX780LpAuthorAnswerTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 10),
    _FclBX780LpAuthorAnswerTimer_Type()
)
fclBX780LpAuthorAnswerTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBX780LpAuthorAnswerTimer.setStatus("mandatory")


class _FclBX780LpNoAnswerWatchDog_Type(Integer32):
    """Custom type fclBX780LpNoAnswerWatchDog based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 25000),
    )


_FclBX780LpNoAnswerWatchDog_Type.__name__ = "Integer32"
_FclBX780LpNoAnswerWatchDog_Object = MibTableColumn
fclBX780LpNoAnswerWatchDog = _FclBX780LpNoAnswerWatchDog_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 11),
    _FclBX780LpNoAnswerWatchDog_Type()
)
fclBX780LpNoAnswerWatchDog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBX780LpNoAnswerWatchDog.setStatus("mandatory")


class _FclBX780LpMessageRetryNumber_Type(Integer32):
    """Custom type fclBX780LpMessageRetryNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_FclBX780LpMessageRetryNumber_Type.__name__ = "Integer32"
_FclBX780LpMessageRetryNumber_Object = MibTableColumn
fclBX780LpMessageRetryNumber = _FclBX780LpMessageRetryNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 12),
    _FclBX780LpMessageRetryNumber_Type()
)
fclBX780LpMessageRetryNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBX780LpMessageRetryNumber.setStatus("mandatory")
_FclBX780ConnectionTable_Object = MibTable
fclBX780ConnectionTable = _FclBX780ConnectionTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 2)
)
if mibBuilder.loadTexts:
    fclBX780ConnectionTable.setStatus("mandatory")
_FclBX780ConnectionEntry_Object = MibTableRow
fclBX780ConnectionEntry = _FclBX780ConnectionEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 2, 1)
)
fclBX780ConnectionEntry.setIndexNames(
    (0, "PCE-MIB", "fclBX780ConnLogPortId"),
)
if mibBuilder.loadTexts:
    fclBX780ConnectionEntry.setStatus("mandatory")


class _FclBX780ConnLogPortId_Type(Integer32):
    """Custom type fclBX780ConnLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclBX780ConnLogPortId_Type.__name__ = "Integer32"
_FclBX780ConnLogPortId_Object = MibTableColumn
fclBX780ConnLogPortId = _FclBX780ConnLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 2, 1, 1),
    _FclBX780ConnLogPortId_Type()
)
fclBX780ConnLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclBX780ConnLogPortId.setStatus("mandatory")


class _FclBX780ConnCalledAddr_Type(OctetString):
    """Custom type fclBX780ConnCalledAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclBX780ConnCalledAddr_Type.__name__ = "OctetString"
_FclBX780ConnCalledAddr_Object = MibTableColumn
fclBX780ConnCalledAddr = _FclBX780ConnCalledAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 2, 1, 2),
    _FclBX780ConnCalledAddr_Type()
)
fclBX780ConnCalledAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBX780ConnCalledAddr.setStatus("mandatory")


class _FclBX780ConnMinimumRecallTimer_Type(Integer32):
    """Custom type fclBX780ConnMinimumRecallTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 990),
    )


_FclBX780ConnMinimumRecallTimer_Type.__name__ = "Integer32"
_FclBX780ConnMinimumRecallTimer_Object = MibTableColumn
fclBX780ConnMinimumRecallTimer = _FclBX780ConnMinimumRecallTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 2, 1, 3),
    _FclBX780ConnMinimumRecallTimer_Type()
)
fclBX780ConnMinimumRecallTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBX780ConnMinimumRecallTimer.setStatus("mandatory")
_FclBX780IdentTable_Object = MibTable
fclBX780IdentTable = _FclBX780IdentTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 3)
)
if mibBuilder.loadTexts:
    fclBX780IdentTable.setStatus("mandatory")
_FclBX780IdentEntry_Object = MibTableRow
fclBX780IdentEntry = _FclBX780IdentEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 3, 1)
)
fclBX780IdentEntry.setIndexNames(
    (0, "PCE-MIB", "fclBX780IdentLogPortId"),
    (0, "PCE-MIB", "fclBX780IdentTermId"),
)
if mibBuilder.loadTexts:
    fclBX780IdentEntry.setStatus("mandatory")


class _FclBX780IdentLogPortId_Type(Integer32):
    """Custom type fclBX780IdentLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclBX780IdentLogPortId_Type.__name__ = "Integer32"
_FclBX780IdentLogPortId_Object = MibTableColumn
fclBX780IdentLogPortId = _FclBX780IdentLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 3, 1, 1),
    _FclBX780IdentLogPortId_Type()
)
fclBX780IdentLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclBX780IdentLogPortId.setStatus("mandatory")


class _FclBX780IdentTermId_Type(OctetString):
    """Custom type fclBX780IdentTermId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_FclBX780IdentTermId_Type.__name__ = "OctetString"
_FclBX780IdentTermId_Object = MibTableColumn
fclBX780IdentTermId = _FclBX780IdentTermId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 3, 1, 2),
    _FclBX780IdentTermId_Type()
)
fclBX780IdentTermId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclBX780IdentTermId.setStatus("mandatory")


class _FclBX780IdentStatus_Type(Integer32):
    """Custom type fclBX780IdentStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclBX780IdentStatus_Type.__name__ = "Integer32"
_FclBX780IdentStatus_Object = MibTableColumn
fclBX780IdentStatus = _FclBX780IdentStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 3, 1, 3),
    _FclBX780IdentStatus_Type()
)
fclBX780IdentStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBX780IdentStatus.setStatus("mandatory")
_FclBscSctLogPort_ObjectIdentity = ObjectIdentity
fclBscSctLogPort = _FclBscSctLogPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19)
)
_FclBSctLogPortTable_Object = MibTable
fclBSctLogPortTable = _FclBSctLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 1)
)
if mibBuilder.loadTexts:
    fclBSctLogPortTable.setStatus("mandatory")
_FclBSctLogPortEntry_Object = MibTableRow
fclBSctLogPortEntry = _FclBSctLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 1, 1)
)
fclBSctLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "fclBSctLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclBSctLogPortEntry.setStatus("mandatory")


class _FclBSctLpLogPortId_Type(Integer32):
    """Custom type fclBSctLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclBSctLpLogPortId_Type.__name__ = "Integer32"
_FclBSctLpLogPortId_Object = MibTableColumn
fclBSctLpLogPortId = _FclBSctLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 1, 1, 1),
    _FclBSctLpLogPortId_Type()
)
fclBSctLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclBSctLpLogPortId.setStatus("mandatory")


class _FclBSctLpInterfaceId_Type(Integer32):
    """Custom type fclBSctLpInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclBSctLpInterfaceId_Type.__name__ = "Integer32"
_FclBSctLpInterfaceId_Object = MibTableColumn
fclBSctLpInterfaceId = _FclBSctLpInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 1, 1, 2),
    _FclBSctLpInterfaceId_Type()
)
fclBSctLpInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctLpInterfaceId.setStatus("mandatory")


class _FclBSctLpLinkType_Type(Integer32):
    """Custom type fclBSctLpLinkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dce", 2),
          ("dte", 1),
          ("tpc", 3))
    )


_FclBSctLpLinkType_Type.__name__ = "Integer32"
_FclBSctLpLinkType_Object = MibTableColumn
fclBSctLpLinkType = _FclBSctLpLinkType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 1, 1, 3),
    _FclBSctLpLinkType_Type()
)
fclBSctLpLinkType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctLpLinkType.setStatus("mandatory")


class _FclBSctLpNumberOfSYN_Type(Integer32):
    """Custom type fclBSctLpNumberOfSYN based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("trans-of-2-SYN", 2),
          ("trans-of-4-SYN", 4))
    )


_FclBSctLpNumberOfSYN_Type.__name__ = "Integer32"
_FclBSctLpNumberOfSYN_Object = MibTableColumn
fclBSctLpNumberOfSYN = _FclBSctLpNumberOfSYN_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 1, 1, 4),
    _FclBSctLpNumberOfSYN_Type()
)
fclBSctLpNumberOfSYN.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctLpNumberOfSYN.setStatus("mandatory")


class _FclBSctLpSignalEnvelope_Type(Integer32):
    """Custom type fclBSctLpSignalEnvelope based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclBSctLpSignalEnvelope_Type.__name__ = "Integer32"
_FclBSctLpSignalEnvelope_Object = MibTableColumn
fclBSctLpSignalEnvelope = _FclBSctLpSignalEnvelope_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 1, 1, 5),
    _FclBSctLpSignalEnvelope_Type()
)
fclBSctLpSignalEnvelope.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctLpSignalEnvelope.setStatus("mandatory")


class _FclBSctLpCodingParityType_Type(Integer32):
    """Custom type fclBSctLpCodingParityType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("asciioddparity", 2),
          ("ebcdic", 1))
    )


_FclBSctLpCodingParityType_Type.__name__ = "Integer32"
_FclBSctLpCodingParityType_Object = MibTableColumn
fclBSctLpCodingParityType = _FclBSctLpCodingParityType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 1, 1, 6),
    _FclBSctLpCodingParityType_Type()
)
fclBSctLpCodingParityType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctLpCodingParityType.setStatus("mandatory")


class _FclBSctLpMaxFrameNumberIn_Type(Integer32):
    """Custom type fclBSctLpMaxFrameNumberIn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_FclBSctLpMaxFrameNumberIn_Type.__name__ = "Integer32"
_FclBSctLpMaxFrameNumberIn_Object = MibTableColumn
fclBSctLpMaxFrameNumberIn = _FclBSctLpMaxFrameNumberIn_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 1, 1, 7),
    _FclBSctLpMaxFrameNumberIn_Type()
)
fclBSctLpMaxFrameNumberIn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctLpMaxFrameNumberIn.setStatus("mandatory")


class _FclBSctLpUnderrunManagement_Type(Integer32):
    """Custom type fclBSctLpUnderrunManagement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclBSctLpUnderrunManagement_Type.__name__ = "Integer32"
_FclBSctLpUnderrunManagement_Object = MibTableColumn
fclBSctLpUnderrunManagement = _FclBSctLpUnderrunManagement_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 1, 1, 8),
    _FclBSctLpUnderrunManagement_Type()
)
fclBSctLpUnderrunManagement.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctLpUnderrunManagement.setStatus("mandatory")


class _FclBSctLpOnePadSuppressed_Type(Integer32):
    """Custom type fclBSctLpOnePadSuppressed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclBSctLpOnePadSuppressed_Type.__name__ = "Integer32"
_FclBSctLpOnePadSuppressed_Object = MibTableColumn
fclBSctLpOnePadSuppressed = _FclBSctLpOnePadSuppressed_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 1, 1, 9),
    _FclBSctLpOnePadSuppressed_Type()
)
fclBSctLpOnePadSuppressed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctLpOnePadSuppressed.setStatus("mandatory")
_FclBSctConnectionTable_Object = MibTable
fclBSctConnectionTable = _FclBSctConnectionTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 2)
)
if mibBuilder.loadTexts:
    fclBSctConnectionTable.setStatus("mandatory")
_FclBSctConnectionEntry_Object = MibTableRow
fclBSctConnectionEntry = _FclBSctConnectionEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 2, 1)
)
fclBSctConnectionEntry.setIndexNames(
    (0, "PCE-MIB", "fclBSctConnLogPortId"),
)
if mibBuilder.loadTexts:
    fclBSctConnectionEntry.setStatus("mandatory")


class _FclBSctConnLogPortId_Type(Integer32):
    """Custom type fclBSctConnLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclBSctConnLogPortId_Type.__name__ = "Integer32"
_FclBSctConnLogPortId_Object = MibTableColumn
fclBSctConnLogPortId = _FclBSctConnLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 2, 1, 1),
    _FclBSctConnLogPortId_Type()
)
fclBSctConnLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclBSctConnLogPortId.setStatus("mandatory")


class _FclBSctConnCalledAddr_Type(OctetString):
    """Custom type fclBSctConnCalledAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclBSctConnCalledAddr_Type.__name__ = "OctetString"
_FclBSctConnCalledAddr_Object = MibTableColumn
fclBSctConnCalledAddr = _FclBSctConnCalledAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 2, 1, 2),
    _FclBSctConnCalledAddr_Type()
)
fclBSctConnCalledAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctConnCalledAddr.setStatus("mandatory")


class _FclBSctConnCallDirection_Type(Integer32):
    """Custom type fclBSctConnCallDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("auto", 3),
          ("called", 2),
          ("calling", 1),
          ("datagram", 4))
    )


_FclBSctConnCallDirection_Type.__name__ = "Integer32"
_FclBSctConnCallDirection_Object = MibTableColumn
fclBSctConnCallDirection = _FclBSctConnCallDirection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 2, 1, 3),
    _FclBSctConnCallDirection_Type()
)
fclBSctConnCallDirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctConnCallDirection.setStatus("mandatory")


class _FclBSctConnSubscriberNumber_Type(Integer32):
    """Custom type fclBSctConnSubscriberNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9999),
    )


_FclBSctConnSubscriberNumber_Type.__name__ = "Integer32"
_FclBSctConnSubscriberNumber_Object = MibTableColumn
fclBSctConnSubscriberNumber = _FclBSctConnSubscriberNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 2, 1, 4),
    _FclBSctConnSubscriberNumber_Type()
)
fclBSctConnSubscriberNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctConnSubscriberNumber.setStatus("mandatory")


class _FclBSctConnMinimumRecallTimer_Type(Integer32):
    """Custom type fclBSctConnMinimumRecallTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 990),
    )


_FclBSctConnMinimumRecallTimer_Type.__name__ = "Integer32"
_FclBSctConnMinimumRecallTimer_Object = MibTableColumn
fclBSctConnMinimumRecallTimer = _FclBSctConnMinimumRecallTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 2, 1, 5),
    _FclBSctConnMinimumRecallTimer_Type()
)
fclBSctConnMinimumRecallTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctConnMinimumRecallTimer.setStatus("mandatory")
_FclBSctProtocolDefinition1Table_Object = MibTable
fclBSctProtocolDefinition1Table = _FclBSctProtocolDefinition1Table_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3)
)
if mibBuilder.loadTexts:
    fclBSctProtocolDefinition1Table.setStatus("mandatory")
_FclBSctProtocolDefinition1Entry_Object = MibTableRow
fclBSctProtocolDefinition1Entry = _FclBSctProtocolDefinition1Entry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1)
)
fclBSctProtocolDefinition1Entry.setIndexNames(
    (0, "PCE-MIB", "fclBSctProtDef1LogPortId"),
)
if mibBuilder.loadTexts:
    fclBSctProtocolDefinition1Entry.setStatus("mandatory")


class _FclBSctProtDef1LogPortId_Type(Integer32):
    """Custom type fclBSctProtDef1LogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclBSctProtDef1LogPortId_Type.__name__ = "Integer32"
_FclBSctProtDef1LogPortId_Object = MibTableColumn
fclBSctProtDef1LogPortId = _FclBSctProtDef1LogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 1),
    _FclBSctProtDef1LogPortId_Type()
)
fclBSctProtDef1LogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclBSctProtDef1LogPortId.setStatus("mandatory")


class _FclBSctProtDef1PermanentDelimiter1_Type(Integer32):
    """Custom type fclBSctProtDef1PermanentDelimiter1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("ack", 10),
          ("bel", 13),
          ("dle", 11),
          ("enq", 2),
          ("eot", 4),
          ("esc", 12),
          ("etb", 8),
          ("etx", 7),
          ("nak", 3),
          ("none", 1),
          ("pad", 9),
          ("soh", 6),
          ("stx", 5))
    )


_FclBSctProtDef1PermanentDelimiter1_Type.__name__ = "Integer32"
_FclBSctProtDef1PermanentDelimiter1_Object = MibTableColumn
fclBSctProtDef1PermanentDelimiter1 = _FclBSctProtDef1PermanentDelimiter1_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 2),
    _FclBSctProtDef1PermanentDelimiter1_Type()
)
fclBSctProtDef1PermanentDelimiter1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctProtDef1PermanentDelimiter1.setStatus("mandatory")


class _FclBSctProtDef1PermanentDelimiter2_Type(Integer32):
    """Custom type fclBSctProtDef1PermanentDelimiter2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("ack", 10),
          ("bel", 13),
          ("dle", 11),
          ("enq", 2),
          ("eot", 4),
          ("esc", 12),
          ("etb", 8),
          ("etx", 7),
          ("nak", 3),
          ("none", 1),
          ("pad", 9),
          ("soh", 6),
          ("stx", 5))
    )


_FclBSctProtDef1PermanentDelimiter2_Type.__name__ = "Integer32"
_FclBSctProtDef1PermanentDelimiter2_Object = MibTableColumn
fclBSctProtDef1PermanentDelimiter2 = _FclBSctProtDef1PermanentDelimiter2_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 3),
    _FclBSctProtDef1PermanentDelimiter2_Type()
)
fclBSctProtDef1PermanentDelimiter2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctProtDef1PermanentDelimiter2.setStatus("mandatory")


class _FclBSctProtDef1PermanentDelimiter3_Type(Integer32):
    """Custom type fclBSctProtDef1PermanentDelimiter3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("ack", 10),
          ("bel", 13),
          ("dle", 11),
          ("enq", 2),
          ("eot", 4),
          ("esc", 12),
          ("etb", 8),
          ("etx", 7),
          ("nak", 3),
          ("none", 1),
          ("pad", 9),
          ("soh", 6),
          ("stx", 5))
    )


_FclBSctProtDef1PermanentDelimiter3_Type.__name__ = "Integer32"
_FclBSctProtDef1PermanentDelimiter3_Object = MibTableColumn
fclBSctProtDef1PermanentDelimiter3 = _FclBSctProtDef1PermanentDelimiter3_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 4),
    _FclBSctProtDef1PermanentDelimiter3_Type()
)
fclBSctProtDef1PermanentDelimiter3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctProtDef1PermanentDelimiter3.setStatus("mandatory")


class _FclBSctProtDef1PermanentDelimiter4_Type(Integer32):
    """Custom type fclBSctProtDef1PermanentDelimiter4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("ack", 10),
          ("bel", 13),
          ("dle", 11),
          ("enq", 2),
          ("eot", 4),
          ("esc", 12),
          ("etb", 8),
          ("etx", 7),
          ("nak", 3),
          ("none", 1),
          ("pad", 9),
          ("soh", 6),
          ("stx", 5))
    )


_FclBSctProtDef1PermanentDelimiter4_Type.__name__ = "Integer32"
_FclBSctProtDef1PermanentDelimiter4_Object = MibTableColumn
fclBSctProtDef1PermanentDelimiter4 = _FclBSctProtDef1PermanentDelimiter4_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 5),
    _FclBSctProtDef1PermanentDelimiter4_Type()
)
fclBSctProtDef1PermanentDelimiter4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctProtDef1PermanentDelimiter4.setStatus("mandatory")


class _FclBSctProtDef1PermanentDelimiter5_Type(Integer32):
    """Custom type fclBSctProtDef1PermanentDelimiter5 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("ack", 10),
          ("bel", 13),
          ("dle", 11),
          ("enq", 2),
          ("eot", 4),
          ("esc", 12),
          ("etb", 8),
          ("etx", 7),
          ("nak", 3),
          ("none", 1),
          ("pad", 9),
          ("soh", 6),
          ("stx", 5))
    )


_FclBSctProtDef1PermanentDelimiter5_Type.__name__ = "Integer32"
_FclBSctProtDef1PermanentDelimiter5_Object = MibTableColumn
fclBSctProtDef1PermanentDelimiter5 = _FclBSctProtDef1PermanentDelimiter5_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 6),
    _FclBSctProtDef1PermanentDelimiter5_Type()
)
fclBSctProtDef1PermanentDelimiter5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctProtDef1PermanentDelimiter5.setStatus("mandatory")


class _FclBSctProtDef1StartFrameDelimiter1_Type(Integer32):
    """Custom type fclBSctProtDef1StartFrameDelimiter1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("ack", 10),
          ("bel", 13),
          ("dle", 11),
          ("enq", 2),
          ("eot", 4),
          ("esc", 12),
          ("etb", 8),
          ("etx", 7),
          ("nak", 3),
          ("none", 1),
          ("pad", 9),
          ("soh", 6),
          ("stx", 5))
    )


_FclBSctProtDef1StartFrameDelimiter1_Type.__name__ = "Integer32"
_FclBSctProtDef1StartFrameDelimiter1_Object = MibTableColumn
fclBSctProtDef1StartFrameDelimiter1 = _FclBSctProtDef1StartFrameDelimiter1_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 7),
    _FclBSctProtDef1StartFrameDelimiter1_Type()
)
fclBSctProtDef1StartFrameDelimiter1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctProtDef1StartFrameDelimiter1.setStatus("mandatory")


class _FclBSctProtDef1StartFrameDelimiter2_Type(Integer32):
    """Custom type fclBSctProtDef1StartFrameDelimiter2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("ack", 10),
          ("bel", 13),
          ("dle", 11),
          ("enq", 2),
          ("eot", 4),
          ("esc", 12),
          ("etb", 8),
          ("etx", 7),
          ("nak", 3),
          ("none", 1),
          ("pad", 9),
          ("soh", 6),
          ("stx", 5))
    )


_FclBSctProtDef1StartFrameDelimiter2_Type.__name__ = "Integer32"
_FclBSctProtDef1StartFrameDelimiter2_Object = MibTableColumn
fclBSctProtDef1StartFrameDelimiter2 = _FclBSctProtDef1StartFrameDelimiter2_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 8),
    _FclBSctProtDef1StartFrameDelimiter2_Type()
)
fclBSctProtDef1StartFrameDelimiter2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctProtDef1StartFrameDelimiter2.setStatus("mandatory")


class _FclBSctProtDef1StartFrameDelimiter3_Type(Integer32):
    """Custom type fclBSctProtDef1StartFrameDelimiter3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("ack", 10),
          ("bel", 13),
          ("dle", 11),
          ("enq", 2),
          ("eot", 4),
          ("esc", 12),
          ("etb", 8),
          ("etx", 7),
          ("nak", 3),
          ("none", 1),
          ("pad", 9),
          ("soh", 6),
          ("stx", 5))
    )


_FclBSctProtDef1StartFrameDelimiter3_Type.__name__ = "Integer32"
_FclBSctProtDef1StartFrameDelimiter3_Object = MibTableColumn
fclBSctProtDef1StartFrameDelimiter3 = _FclBSctProtDef1StartFrameDelimiter3_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 9),
    _FclBSctProtDef1StartFrameDelimiter3_Type()
)
fclBSctProtDef1StartFrameDelimiter3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctProtDef1StartFrameDelimiter3.setStatus("mandatory")


class _FclBSctProtDef1NbCharInhibited_Type(Integer32):
    """Custom type fclBSctProtDef1NbCharInhibited based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_FclBSctProtDef1NbCharInhibited_Type.__name__ = "Integer32"
_FclBSctProtDef1NbCharInhibited_Object = MibTableColumn
fclBSctProtDef1NbCharInhibited = _FclBSctProtDef1NbCharInhibited_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 10),
    _FclBSctProtDef1NbCharInhibited_Type()
)
fclBSctProtDef1NbCharInhibited.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctProtDef1NbCharInhibited.setStatus("mandatory")


class _FclBSctProtDef1StFrDelimiterInhib1_Type(Integer32):
    """Custom type fclBSctProtDef1StFrDelimiterInhib1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("ack", 10),
          ("bel", 13),
          ("dle", 11),
          ("enq", 2),
          ("eot", 4),
          ("esc", 12),
          ("etb", 8),
          ("etx", 7),
          ("nak", 3),
          ("none", 1),
          ("pad", 9),
          ("soh", 6),
          ("stx", 5))
    )


_FclBSctProtDef1StFrDelimiterInhib1_Type.__name__ = "Integer32"
_FclBSctProtDef1StFrDelimiterInhib1_Object = MibTableColumn
fclBSctProtDef1StFrDelimiterInhib1 = _FclBSctProtDef1StFrDelimiterInhib1_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 11),
    _FclBSctProtDef1StFrDelimiterInhib1_Type()
)
fclBSctProtDef1StFrDelimiterInhib1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctProtDef1StFrDelimiterInhib1.setStatus("mandatory")


class _FclBSctProtDef1StFrDelimiterInhib2_Type(Integer32):
    """Custom type fclBSctProtDef1StFrDelimiterInhib2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("ack", 10),
          ("bel", 13),
          ("dle", 11),
          ("enq", 2),
          ("eot", 4),
          ("esc", 12),
          ("etb", 8),
          ("etx", 7),
          ("nak", 3),
          ("none", 1),
          ("pad", 9),
          ("soh", 6),
          ("stx", 5))
    )


_FclBSctProtDef1StFrDelimiterInhib2_Type.__name__ = "Integer32"
_FclBSctProtDef1StFrDelimiterInhib2_Object = MibTableColumn
fclBSctProtDef1StFrDelimiterInhib2 = _FclBSctProtDef1StFrDelimiterInhib2_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 12),
    _FclBSctProtDef1StFrDelimiterInhib2_Type()
)
fclBSctProtDef1StFrDelimiterInhib2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctProtDef1StFrDelimiterInhib2.setStatus("mandatory")
_FclBSctProtocolDefinition2Table_Object = MibTable
fclBSctProtocolDefinition2Table = _FclBSctProtocolDefinition2Table_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4)
)
if mibBuilder.loadTexts:
    fclBSctProtocolDefinition2Table.setStatus("mandatory")
_FclBSctProtocolDefinition2Entry_Object = MibTableRow
fclBSctProtocolDefinition2Entry = _FclBSctProtocolDefinition2Entry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1)
)
fclBSctProtocolDefinition2Entry.setIndexNames(
    (0, "PCE-MIB", "fclBSctProtDef2LogPortId"),
)
if mibBuilder.loadTexts:
    fclBSctProtocolDefinition2Entry.setStatus("mandatory")


class _FclBSctProtDef2LogPortId_Type(Integer32):
    """Custom type fclBSctProtDef2LogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclBSctProtDef2LogPortId_Type.__name__ = "Integer32"
_FclBSctProtDef2LogPortId_Object = MibTableColumn
fclBSctProtDef2LogPortId = _FclBSctProtDef2LogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1, 1),
    _FclBSctProtDef2LogPortId_Type()
)
fclBSctProtDef2LogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclBSctProtDef2LogPortId.setStatus("mandatory")


class _FclBSctProtDef2DataFrameTerminator1_Type(Integer32):
    """Custom type fclBSctProtDef2DataFrameTerminator1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("ack", 10),
          ("bel", 13),
          ("dle", 11),
          ("enq", 2),
          ("eot", 4),
          ("esc", 12),
          ("etb", 8),
          ("etx", 7),
          ("nak", 3),
          ("none", 1),
          ("pad", 9),
          ("soh", 6),
          ("stx", 5))
    )


_FclBSctProtDef2DataFrameTerminator1_Type.__name__ = "Integer32"
_FclBSctProtDef2DataFrameTerminator1_Object = MibTableColumn
fclBSctProtDef2DataFrameTerminator1 = _FclBSctProtDef2DataFrameTerminator1_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1, 2),
    _FclBSctProtDef2DataFrameTerminator1_Type()
)
fclBSctProtDef2DataFrameTerminator1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctProtDef2DataFrameTerminator1.setStatus("mandatory")


class _FclBSctProtDef2DataFrameTerminator2_Type(Integer32):
    """Custom type fclBSctProtDef2DataFrameTerminator2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("ack", 10),
          ("bel", 13),
          ("dle", 11),
          ("enq", 2),
          ("eot", 4),
          ("esc", 12),
          ("etb", 8),
          ("etx", 7),
          ("nak", 3),
          ("none", 1),
          ("pad", 9),
          ("soh", 6),
          ("stx", 5))
    )


_FclBSctProtDef2DataFrameTerminator2_Type.__name__ = "Integer32"
_FclBSctProtDef2DataFrameTerminator2_Object = MibTableColumn
fclBSctProtDef2DataFrameTerminator2 = _FclBSctProtDef2DataFrameTerminator2_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1, 3),
    _FclBSctProtDef2DataFrameTerminator2_Type()
)
fclBSctProtDef2DataFrameTerminator2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctProtDef2DataFrameTerminator2.setStatus("mandatory")


class _FclBSctProtDef2DataFrameTerminator3_Type(Integer32):
    """Custom type fclBSctProtDef2DataFrameTerminator3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("ack", 10),
          ("bel", 13),
          ("dle", 11),
          ("enq", 2),
          ("eot", 4),
          ("esc", 12),
          ("etb", 8),
          ("etx", 7),
          ("nak", 3),
          ("none", 1),
          ("pad", 9),
          ("soh", 6),
          ("stx", 5))
    )


_FclBSctProtDef2DataFrameTerminator3_Type.__name__ = "Integer32"
_FclBSctProtDef2DataFrameTerminator3_Object = MibTableColumn
fclBSctProtDef2DataFrameTerminator3 = _FclBSctProtDef2DataFrameTerminator3_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1, 4),
    _FclBSctProtDef2DataFrameTerminator3_Type()
)
fclBSctProtDef2DataFrameTerminator3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctProtDef2DataFrameTerminator3.setStatus("mandatory")


class _FclBSctProtDef2ControlFrameTerminator1_Type(Integer32):
    """Custom type fclBSctProtDef2ControlFrameTerminator1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("ack", 10),
          ("bel", 13),
          ("dle", 11),
          ("enq", 2),
          ("eot", 4),
          ("esc", 12),
          ("etb", 8),
          ("etx", 7),
          ("nak", 3),
          ("none", 1),
          ("pad", 9),
          ("soh", 6),
          ("stx", 5))
    )


_FclBSctProtDef2ControlFrameTerminator1_Type.__name__ = "Integer32"
_FclBSctProtDef2ControlFrameTerminator1_Object = MibTableColumn
fclBSctProtDef2ControlFrameTerminator1 = _FclBSctProtDef2ControlFrameTerminator1_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1, 5),
    _FclBSctProtDef2ControlFrameTerminator1_Type()
)
fclBSctProtDef2ControlFrameTerminator1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctProtDef2ControlFrameTerminator1.setStatus("mandatory")


class _FclBSctProtDef2ControlFrameTerminator2_Type(Integer32):
    """Custom type fclBSctProtDef2ControlFrameTerminator2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("ack", 10),
          ("bel", 13),
          ("dle", 11),
          ("enq", 2),
          ("eot", 4),
          ("esc", 12),
          ("etb", 8),
          ("etx", 7),
          ("nak", 3),
          ("none", 1),
          ("pad", 9),
          ("soh", 6),
          ("stx", 5))
    )


_FclBSctProtDef2ControlFrameTerminator2_Type.__name__ = "Integer32"
_FclBSctProtDef2ControlFrameTerminator2_Object = MibTableColumn
fclBSctProtDef2ControlFrameTerminator2 = _FclBSctProtDef2ControlFrameTerminator2_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1, 6),
    _FclBSctProtDef2ControlFrameTerminator2_Type()
)
fclBSctProtDef2ControlFrameTerminator2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctProtDef2ControlFrameTerminator2.setStatus("mandatory")


class _FclBSctProtDef2ACK0_Type(Integer32):
    """Custom type fclBSctProtDef2ACK0 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FclBSctProtDef2ACK0_Type.__name__ = "Integer32"
_FclBSctProtDef2ACK0_Object = MibTableColumn
fclBSctProtDef2ACK0 = _FclBSctProtDef2ACK0_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1, 7),
    _FclBSctProtDef2ACK0_Type()
)
fclBSctProtDef2ACK0.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctProtDef2ACK0.setStatus("mandatory")


class _FclBSctProtDef2ACK1_Type(Integer32):
    """Custom type fclBSctProtDef2ACK1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FclBSctProtDef2ACK1_Type.__name__ = "Integer32"
_FclBSctProtDef2ACK1_Object = MibTableColumn
fclBSctProtDef2ACK1 = _FclBSctProtDef2ACK1_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1, 8),
    _FclBSctProtDef2ACK1_Type()
)
fclBSctProtDef2ACK1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctProtDef2ACK1.setStatus("mandatory")


class _FclBSctProtDef2WACK_Type(Integer32):
    """Custom type fclBSctProtDef2WACK based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FclBSctProtDef2WACK_Type.__name__ = "Integer32"
_FclBSctProtDef2WACK_Object = MibTableColumn
fclBSctProtDef2WACK = _FclBSctProtDef2WACK_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1, 9),
    _FclBSctProtDef2WACK_Type()
)
fclBSctProtDef2WACK.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctProtDef2WACK.setStatus("mandatory")


class _FclBSctProtDef2RVI_Type(Integer32):
    """Custom type fclBSctProtDef2RVI based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FclBSctProtDef2RVI_Type.__name__ = "Integer32"
_FclBSctProtDef2RVI_Object = MibTableColumn
fclBSctProtDef2RVI = _FclBSctProtDef2RVI_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1, 10),
    _FclBSctProtDef2RVI_Type()
)
fclBSctProtDef2RVI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctProtDef2RVI.setStatus("mandatory")


class _FclBSctProtDef2WABT_Type(Integer32):
    """Custom type fclBSctProtDef2WABT based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FclBSctProtDef2WABT_Type.__name__ = "Integer32"
_FclBSctProtDef2WABT_Object = MibTableColumn
fclBSctProtDef2WABT = _FclBSctProtDef2WABT_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1, 11),
    _FclBSctProtDef2WABT_Type()
)
fclBSctProtDef2WABT.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclBSctProtDef2WABT.setStatus("mandatory")
_FclX25SlpAccess_ObjectIdentity = ObjectIdentity
fclX25SlpAccess = _FclX25SlpAccess_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20)
)
_FclX25SlpAccessTable_Object = MibTable
fclX25SlpAccessTable = _FclX25SlpAccessTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 1)
)
if mibBuilder.loadTexts:
    fclX25SlpAccessTable.setStatus("mandatory")
_FclX25SlpAccessEntry_Object = MibTableRow
fclX25SlpAccessEntry = _FclX25SlpAccessEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 1, 1)
)
fclX25SlpAccessEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25AccLogPortId"),
)
if mibBuilder.loadTexts:
    fclX25SlpAccessEntry.setStatus("mandatory")


class _FclX25AccLogPortId_Type(Integer32):
    """Custom type fclX25AccLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25AccLogPortId_Type.__name__ = "Integer32"
_FclX25AccLogPortId_Object = MibTableColumn
fclX25AccLogPortId = _FclX25AccLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 1, 1, 1),
    _FclX25AccLogPortId_Type()
)
fclX25AccLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25AccLogPortId.setStatus("mandatory")


class _FclX25AccInterfaceId_Type(Integer32):
    """Custom type fclX25AccInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclX25AccInterfaceId_Type.__name__ = "Integer32"
_FclX25AccInterfaceId_Object = MibTableColumn
fclX25AccInterfaceId = _FclX25AccInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 1, 1, 2),
    _FclX25AccInterfaceId_Type()
)
fclX25AccInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccInterfaceId.setStatus("mandatory")


class _FclX25AccConnectionType_Type(Integer32):
    """Custom type fclX25AccConnectionType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("publicNetwork", 2),
          ("subscriber", 1))
    )


_FclX25AccConnectionType_Type.__name__ = "Integer32"
_FclX25AccConnectionType_Object = MibTableColumn
fclX25AccConnectionType = _FclX25AccConnectionType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 1, 1, 3),
    _FclX25AccConnectionType_Type()
)
fclX25AccConnectionType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccConnectionType.setStatus("mandatory")


class _FclX25AccSubscriberNumber_Type(OctetString):
    """Custom type fclX25AccSubscriberNumber based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FclX25AccSubscriberNumber_Type.__name__ = "OctetString"
_FclX25AccSubscriberNumber_Object = MibTableColumn
fclX25AccSubscriberNumber = _FclX25AccSubscriberNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 1, 1, 4),
    _FclX25AccSubscriberNumber_Type()
)
fclX25AccSubscriberNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccSubscriberNumber.setStatus("mandatory")


class _FclX25AccPdnLinkAddress_Type(OctetString):
    """Custom type fclX25AccPdnLinkAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclX25AccPdnLinkAddress_Type.__name__ = "OctetString"
_FclX25AccPdnLinkAddress_Object = MibTableColumn
fclX25AccPdnLinkAddress = _FclX25AccPdnLinkAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 1, 1, 5),
    _FclX25AccPdnLinkAddress_Type()
)
fclX25AccPdnLinkAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccPdnLinkAddress.setStatus("mandatory")


class _FclX25AccX25AccessConfigId_Type(Integer32):
    """Custom type fclX25AccX25AccessConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25AccX25AccessConfigId_Type.__name__ = "Integer32"
_FclX25AccX25AccessConfigId_Object = MibTableColumn
fclX25AccX25AccessConfigId = _FclX25AccX25AccessConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 1, 1, 6),
    _FclX25AccX25AccessConfigId_Type()
)
fclX25AccX25AccessConfigId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccX25AccessConfigId.setStatus("mandatory")


class _FclX25AccIsdnBackupEnabling_Type(Integer32):
    """Custom type fclX25AccIsdnBackupEnabling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              7)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onWhileActivity", 2),
          ("onWhileExcessTraffic", 7),
          ("onWhileLpDown", 3))
    )


_FclX25AccIsdnBackupEnabling_Type.__name__ = "Integer32"
_FclX25AccIsdnBackupEnabling_Object = MibTableColumn
fclX25AccIsdnBackupEnabling = _FclX25AccIsdnBackupEnabling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 1, 1, 7),
    _FclX25AccIsdnBackupEnabling_Type()
)
fclX25AccIsdnBackupEnabling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccIsdnBackupEnabling.setStatus("mandatory")


class _FclX25AccPstnBackupEnabling_Type(Integer32):
    """Custom type fclX25AccPstnBackupEnabling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              7)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onWhileActivity", 2),
          ("onWhileExcessTraffic", 7),
          ("onWhileLpDown", 3))
    )


_FclX25AccPstnBackupEnabling_Type.__name__ = "Integer32"
_FclX25AccPstnBackupEnabling_Object = MibTableColumn
fclX25AccPstnBackupEnabling = _FclX25AccPstnBackupEnabling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 1, 1, 8),
    _FclX25AccPstnBackupEnabling_Type()
)
fclX25AccPstnBackupEnabling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccPstnBackupEnabling.setStatus("mandatory")
_FclX25AccPrivateNetTable_Object = MibTable
fclX25AccPrivateNetTable = _FclX25AccPrivateNetTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 2)
)
if mibBuilder.loadTexts:
    fclX25AccPrivateNetTable.setStatus("mandatory")
_FclX25AccPrivateNetEntry_Object = MibTableRow
fclX25AccPrivateNetEntry = _FclX25AccPrivateNetEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 2, 1)
)
fclX25AccPrivateNetEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25AccPrivLogPortId"),
)
if mibBuilder.loadTexts:
    fclX25AccPrivateNetEntry.setStatus("mandatory")


class _FclX25AccPrivLogPortId_Type(Integer32):
    """Custom type fclX25AccPrivLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25AccPrivLogPortId_Type.__name__ = "Integer32"
_FclX25AccPrivLogPortId_Object = MibTableColumn
fclX25AccPrivLogPortId = _FclX25AccPrivLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 2, 1, 1),
    _FclX25AccPrivLogPortId_Type()
)
fclX25AccPrivLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25AccPrivLogPortId.setStatus("mandatory")


class _FclX25AccPrivX25FieldsSave_Type(Integer32):
    """Custom type fclX25AccPrivX25FieldsSave based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              4,
              8,
              16)
        )
    )
    namedValues = NamedValues(
        *(("addr", 4),
          ("addrCug", 8),
          ("addrCugRc", 16),
          ("off", 1))
    )


_FclX25AccPrivX25FieldsSave_Type.__name__ = "Integer32"
_FclX25AccPrivX25FieldsSave_Object = MibTableColumn
fclX25AccPrivX25FieldsSave = _FclX25AccPrivX25FieldsSave_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 2, 1, 2),
    _FclX25AccPrivX25FieldsSave_Type()
)
fclX25AccPrivX25FieldsSave.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccPrivX25FieldsSave.setStatus("mandatory")


class _FclX25AccPrivX25FieldsChanges_Type(OctetString):
    """Custom type fclX25AccPrivX25FieldsChanges based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(25, 25),
    )


_FclX25AccPrivX25FieldsChanges_Type.__name__ = "OctetString"
_FclX25AccPrivX25FieldsChanges_Object = MibTableColumn
fclX25AccPrivX25FieldsChanges = _FclX25AccPrivX25FieldsChanges_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 2, 1, 3),
    _FclX25AccPrivX25FieldsChanges_Type()
)
fclX25AccPrivX25FieldsChanges.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccPrivX25FieldsChanges.setStatus("mandatory")
_FclX25AccPermanentVcTable_Object = MibTable
fclX25AccPermanentVcTable = _FclX25AccPermanentVcTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 3)
)
if mibBuilder.loadTexts:
    fclX25AccPermanentVcTable.setStatus("mandatory")
_FclX25AccPermanentVcEntry_Object = MibTableRow
fclX25AccPermanentVcEntry = _FclX25AccPermanentVcEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 3, 1)
)
fclX25AccPermanentVcEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25AccPvcLogPortId"),
    (0, "PCE-MIB", "fclX25AccPvcLocalLogChannel"),
)
if mibBuilder.loadTexts:
    fclX25AccPermanentVcEntry.setStatus("mandatory")


class _FclX25AccPvcLogPortId_Type(Integer32):
    """Custom type fclX25AccPvcLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25AccPvcLogPortId_Type.__name__ = "Integer32"
_FclX25AccPvcLogPortId_Object = MibTableColumn
fclX25AccPvcLogPortId = _FclX25AccPvcLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 3, 1, 1),
    _FclX25AccPvcLogPortId_Type()
)
fclX25AccPvcLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25AccPvcLogPortId.setStatus("mandatory")


class _FclX25AccPvcLocalLogChannel_Type(Integer32):
    """Custom type fclX25AccPvcLocalLogChannel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclX25AccPvcLocalLogChannel_Type.__name__ = "Integer32"
_FclX25AccPvcLocalLogChannel_Object = MibTableColumn
fclX25AccPvcLocalLogChannel = _FclX25AccPvcLocalLogChannel_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 3, 1, 2),
    _FclX25AccPvcLocalLogChannel_Type()
)
fclX25AccPvcLocalLogChannel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25AccPvcLocalLogChannel.setStatus("mandatory")


class _FclX25AccPvcStatus_Type(Integer32):
    """Custom type fclX25AccPvcStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclX25AccPvcStatus_Type.__name__ = "Integer32"
_FclX25AccPvcStatus_Object = MibTableColumn
fclX25AccPvcStatus = _FclX25AccPvcStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 3, 1, 3),
    _FclX25AccPvcStatus_Type()
)
fclX25AccPvcStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccPvcStatus.setStatus("mandatory")


class _FclX25AccPvcCalledAddr_Type(OctetString):
    """Custom type fclX25AccPvcCalledAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclX25AccPvcCalledAddr_Type.__name__ = "OctetString"
_FclX25AccPvcCalledAddr_Object = MibTableColumn
fclX25AccPvcCalledAddr = _FclX25AccPvcCalledAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 3, 1, 4),
    _FclX25AccPvcCalledAddr_Type()
)
fclX25AccPvcCalledAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccPvcCalledAddr.setStatus("mandatory")


class _FclX25AccPvcRemoteLogChannel_Type(Integer32):
    """Custom type fclX25AccPvcRemoteLogChannel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclX25AccPvcRemoteLogChannel_Type.__name__ = "Integer32"
_FclX25AccPvcRemoteLogChannel_Object = MibTableColumn
fclX25AccPvcRemoteLogChannel = _FclX25AccPvcRemoteLogChannel_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 3, 1, 5),
    _FclX25AccPvcRemoteLogChannel_Type()
)
fclX25AccPvcRemoteLogChannel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccPvcRemoteLogChannel.setStatus("mandatory")


class _FclX25AccPvcMinimumRecallTimer_Type(Integer32):
    """Custom type fclX25AccPvcMinimumRecallTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 990),
    )


_FclX25AccPvcMinimumRecallTimer_Type.__name__ = "Integer32"
_FclX25AccPvcMinimumRecallTimer_Object = MibTableColumn
fclX25AccPvcMinimumRecallTimer = _FclX25AccPvcMinimumRecallTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 3, 1, 6),
    _FclX25AccPvcMinimumRecallTimer_Type()
)
fclX25AccPvcMinimumRecallTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccPvcMinimumRecallTimer.setStatus("mandatory")


class _FclX25AccPvcCallDirection_Type(Integer32):
    """Custom type fclX25AccPvcCallDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 3),
          ("called", 2),
          ("calling", 1))
    )


_FclX25AccPvcCallDirection_Type.__name__ = "Integer32"
_FclX25AccPvcCallDirection_Object = MibTableColumn
fclX25AccPvcCallDirection = _FclX25AccPvcCallDirection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 3, 1, 7),
    _FclX25AccPvcCallDirection_Type()
)
fclX25AccPvcCallDirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccPvcCallDirection.setStatus("mandatory")


class _FclX25AccPvcFacility_Type(Integer32):
    """Custom type fclX25AccPvcFacility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("throughputClass", 2))
    )


_FclX25AccPvcFacility_Type.__name__ = "Integer32"
_FclX25AccPvcFacility_Object = MibTableColumn
fclX25AccPvcFacility = _FclX25AccPvcFacility_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 3, 1, 8),
    _FclX25AccPvcFacility_Type()
)
fclX25AccPvcFacility.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccPvcFacility.setStatus("mandatory")


class _FclX25AccPvcFacThroughputClass_Type(Integer32):
    """Custom type fclX25AccPvcFacThroughputClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("t1200", 7),
          ("t128000", 14),
          ("t150", 4),
          ("t19200", 11),
          ("t192000", 15),
          ("t2400", 8),
          ("t300", 5),
          ("t4800", 9),
          ("t48000", 12),
          ("t600", 6),
          ("t64000", 13),
          ("t75", 3),
          ("t9600", 10))
    )


_FclX25AccPvcFacThroughputClass_Type.__name__ = "Integer32"
_FclX25AccPvcFacThroughputClass_Object = MibTableColumn
fclX25AccPvcFacThroughputClass = _FclX25AccPvcFacThroughputClass_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 3, 1, 9),
    _FclX25AccPvcFacThroughputClass_Type()
)
fclX25AccPvcFacThroughputClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccPvcFacThroughputClass.setStatus("mandatory")
_FclX25AccSwitchOverTable_Object = MibTable
fclX25AccSwitchOverTable = _FclX25AccSwitchOverTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 4)
)
if mibBuilder.loadTexts:
    fclX25AccSwitchOverTable.setStatus("mandatory")
_FclX25AccSwitchOverEntry_Object = MibTableRow
fclX25AccSwitchOverEntry = _FclX25AccSwitchOverEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 4, 1)
)
fclX25AccSwitchOverEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25AccSwLogPortId"),
)
if mibBuilder.loadTexts:
    fclX25AccSwitchOverEntry.setStatus("mandatory")


class _FclX25AccSwLogPortId_Type(Integer32):
    """Custom type fclX25AccSwLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25AccSwLogPortId_Type.__name__ = "Integer32"
_FclX25AccSwLogPortId_Object = MibTableColumn
fclX25AccSwLogPortId = _FclX25AccSwLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 4, 1, 1),
    _FclX25AccSwLogPortId_Type()
)
fclX25AccSwLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25AccSwLogPortId.setStatus("mandatory")


class _FclX25AccSwMeasureCount_Type(Integer32):
    """Custom type fclX25AccSwMeasureCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 249),
    )


_FclX25AccSwMeasureCount_Type.__name__ = "Integer32"
_FclX25AccSwMeasureCount_Object = MibTableColumn
fclX25AccSwMeasureCount = _FclX25AccSwMeasureCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 4, 1, 2),
    _FclX25AccSwMeasureCount_Type()
)
fclX25AccSwMeasureCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccSwMeasureCount.setStatus("mandatory")


class _FclX25AccSwSwitchThreshold_Type(Integer32):
    """Custom type fclX25AccSwSwitchThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FclX25AccSwSwitchThreshold_Type.__name__ = "Integer32"
_FclX25AccSwSwitchThreshold_Object = MibTableColumn
fclX25AccSwSwitchThreshold = _FclX25AccSwSwitchThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 4, 1, 3),
    _FclX25AccSwSwitchThreshold_Type()
)
fclX25AccSwSwitchThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccSwSwitchThreshold.setStatus("mandatory")


class _FclX25AccSwSwitchBackThreshold_Type(Integer32):
    """Custom type fclX25AccSwSwitchBackThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FclX25AccSwSwitchBackThreshold_Type.__name__ = "Integer32"
_FclX25AccSwSwitchBackThreshold_Object = MibTableColumn
fclX25AccSwSwitchBackThreshold = _FclX25AccSwSwitchBackThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 4, 1, 4),
    _FclX25AccSwSwitchBackThreshold_Type()
)
fclX25AccSwSwitchBackThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccSwSwitchBackThreshold.setStatus("mandatory")
_FclX25AccIsdnBackupTable_Object = MibTable
fclX25AccIsdnBackupTable = _FclX25AccIsdnBackupTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 5)
)
if mibBuilder.loadTexts:
    fclX25AccIsdnBackupTable.setStatus("mandatory")
_FclX25AccIsdnBackupEntry_Object = MibTableRow
fclX25AccIsdnBackupEntry = _FclX25AccIsdnBackupEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 5, 1)
)
fclX25AccIsdnBackupEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25AccIsdnBackLogPortId"),
    (0, "PCE-MIB", "fclX25AccIsdnBackIsdnInterfaceId"),
)
if mibBuilder.loadTexts:
    fclX25AccIsdnBackupEntry.setStatus("mandatory")


class _FclX25AccIsdnBackLogPortId_Type(Integer32):
    """Custom type fclX25AccIsdnBackLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25AccIsdnBackLogPortId_Type.__name__ = "Integer32"
_FclX25AccIsdnBackLogPortId_Object = MibTableColumn
fclX25AccIsdnBackLogPortId = _FclX25AccIsdnBackLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 5, 1, 1),
    _FclX25AccIsdnBackLogPortId_Type()
)
fclX25AccIsdnBackLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25AccIsdnBackLogPortId.setStatus("mandatory")


class _FclX25AccIsdnBackIsdnInterfaceId_Type(Integer32):
    """Custom type fclX25AccIsdnBackIsdnInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclX25AccIsdnBackIsdnInterfaceId_Type.__name__ = "Integer32"
_FclX25AccIsdnBackIsdnInterfaceId_Object = MibTableColumn
fclX25AccIsdnBackIsdnInterfaceId = _FclX25AccIsdnBackIsdnInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 5, 1, 2),
    _FclX25AccIsdnBackIsdnInterfaceId_Type()
)
fclX25AccIsdnBackIsdnInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25AccIsdnBackIsdnInterfaceId.setStatus("mandatory")


class _FclX25AccIsdnBackStatus_Type(Integer32):
    """Custom type fclX25AccIsdnBackStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclX25AccIsdnBackStatus_Type.__name__ = "Integer32"
_FclX25AccIsdnBackStatus_Object = MibTableColumn
fclX25AccIsdnBackStatus = _FclX25AccIsdnBackStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 5, 1, 3),
    _FclX25AccIsdnBackStatus_Type()
)
fclX25AccIsdnBackStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccIsdnBackStatus.setStatus("mandatory")
_FclX25AccIsdnRemotePeerTable_Object = MibTable
fclX25AccIsdnRemotePeerTable = _FclX25AccIsdnRemotePeerTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 6)
)
if mibBuilder.loadTexts:
    fclX25AccIsdnRemotePeerTable.setStatus("mandatory")
_FclX25AccIsdnRemotePeerEntry_Object = MibTableRow
fclX25AccIsdnRemotePeerEntry = _FclX25AccIsdnRemotePeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 6, 1)
)
fclX25AccIsdnRemotePeerEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25AccIsdnRemLogPortId"),
    (0, "PCE-MIB", "fclX25AccIsdnRemIsdnInterfaceId"),
)
if mibBuilder.loadTexts:
    fclX25AccIsdnRemotePeerEntry.setStatus("mandatory")


class _FclX25AccIsdnRemLogPortId_Type(Integer32):
    """Custom type fclX25AccIsdnRemLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25AccIsdnRemLogPortId_Type.__name__ = "Integer32"
_FclX25AccIsdnRemLogPortId_Object = MibTableColumn
fclX25AccIsdnRemLogPortId = _FclX25AccIsdnRemLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 6, 1, 1),
    _FclX25AccIsdnRemLogPortId_Type()
)
fclX25AccIsdnRemLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25AccIsdnRemLogPortId.setStatus("mandatory")


class _FclX25AccIsdnRemIsdnInterfaceId_Type(Integer32):
    """Custom type fclX25AccIsdnRemIsdnInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclX25AccIsdnRemIsdnInterfaceId_Type.__name__ = "Integer32"
_FclX25AccIsdnRemIsdnInterfaceId_Object = MibTableColumn
fclX25AccIsdnRemIsdnInterfaceId = _FclX25AccIsdnRemIsdnInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 6, 1, 2),
    _FclX25AccIsdnRemIsdnInterfaceId_Type()
)
fclX25AccIsdnRemIsdnInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25AccIsdnRemIsdnInterfaceId.setStatus("mandatory")


class _FclX25AccIsdnRemStatus_Type(Integer32):
    """Custom type fclX25AccIsdnRemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclX25AccIsdnRemStatus_Type.__name__ = "Integer32"
_FclX25AccIsdnRemStatus_Object = MibTableColumn
fclX25AccIsdnRemStatus = _FclX25AccIsdnRemStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 6, 1, 3),
    _FclX25AccIsdnRemStatus_Type()
)
fclX25AccIsdnRemStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccIsdnRemStatus.setStatus("mandatory")


class _FclX25AccIsdnRemX25AccessConfigId_Type(Integer32):
    """Custom type fclX25AccIsdnRemX25AccessConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25AccIsdnRemX25AccessConfigId_Type.__name__ = "Integer32"
_FclX25AccIsdnRemX25AccessConfigId_Object = MibTableColumn
fclX25AccIsdnRemX25AccessConfigId = _FclX25AccIsdnRemX25AccessConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 6, 1, 4),
    _FclX25AccIsdnRemX25AccessConfigId_Type()
)
fclX25AccIsdnRemX25AccessConfigId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccIsdnRemX25AccessConfigId.setStatus("mandatory")


class _FclX25AccIsdnRemPriority_Type(Integer32):
    """Custom type fclX25AccIsdnRemPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_FclX25AccIsdnRemPriority_Type.__name__ = "Integer32"
_FclX25AccIsdnRemPriority_Object = MibTableColumn
fclX25AccIsdnRemPriority = _FclX25AccIsdnRemPriority_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 6, 1, 5),
    _FclX25AccIsdnRemPriority_Type()
)
fclX25AccIsdnRemPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccIsdnRemPriority.setStatus("mandatory")


class _FclX25AccIsdnRemCallRetryCount_Type(Integer32):
    """Custom type fclX25AccIsdnRemCallRetryCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_FclX25AccIsdnRemCallRetryCount_Type.__name__ = "Integer32"
_FclX25AccIsdnRemCallRetryCount_Object = MibTableColumn
fclX25AccIsdnRemCallRetryCount = _FclX25AccIsdnRemCallRetryCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 6, 1, 6),
    _FclX25AccIsdnRemCallRetryCount_Type()
)
fclX25AccIsdnRemCallRetryCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccIsdnRemCallRetryCount.setStatus("mandatory")
_FclX25AccPstnBackupTable_Object = MibTable
fclX25AccPstnBackupTable = _FclX25AccPstnBackupTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 7)
)
if mibBuilder.loadTexts:
    fclX25AccPstnBackupTable.setStatus("mandatory")
_FclX25AccPstnBackupEntry_Object = MibTableRow
fclX25AccPstnBackupEntry = _FclX25AccPstnBackupEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 7, 1)
)
fclX25AccPstnBackupEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25AccPstnBackLogPortId"),
)
if mibBuilder.loadTexts:
    fclX25AccPstnBackupEntry.setStatus("mandatory")


class _FclX25AccPstnBackLogPortId_Type(Integer32):
    """Custom type fclX25AccPstnBackLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25AccPstnBackLogPortId_Type.__name__ = "Integer32"
_FclX25AccPstnBackLogPortId_Object = MibTableColumn
fclX25AccPstnBackLogPortId = _FclX25AccPstnBackLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 7, 1, 1),
    _FclX25AccPstnBackLogPortId_Type()
)
fclX25AccPstnBackLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25AccPstnBackLogPortId.setStatus("mandatory")


class _FclX25AccPstnBackStatus_Type(Integer32):
    """Custom type fclX25AccPstnBackStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclX25AccPstnBackStatus_Type.__name__ = "Integer32"
_FclX25AccPstnBackStatus_Object = MibTableColumn
fclX25AccPstnBackStatus = _FclX25AccPstnBackStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 7, 1, 2),
    _FclX25AccPstnBackStatus_Type()
)
fclX25AccPstnBackStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccPstnBackStatus.setStatus("mandatory")


class _FclX25AccPstnBackInterfaceId_Type(Integer32):
    """Custom type fclX25AccPstnBackInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclX25AccPstnBackInterfaceId_Type.__name__ = "Integer32"
_FclX25AccPstnBackInterfaceId_Object = MibTableColumn
fclX25AccPstnBackInterfaceId = _FclX25AccPstnBackInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 7, 1, 3),
    _FclX25AccPstnBackInterfaceId_Type()
)
fclX25AccPstnBackInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccPstnBackInterfaceId.setStatus("mandatory")


class _FclX25AccPstnBackPstnNumber_Type(OctetString):
    """Custom type fclX25AccPstnBackPstnNumber based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(14, 14),
    )


_FclX25AccPstnBackPstnNumber_Type.__name__ = "OctetString"
_FclX25AccPstnBackPstnNumber_Object = MibTableColumn
fclX25AccPstnBackPstnNumber = _FclX25AccPstnBackPstnNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 7, 1, 4),
    _FclX25AccPstnBackPstnNumber_Type()
)
fclX25AccPstnBackPstnNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccPstnBackPstnNumber.setStatus("mandatory")


class _FclX25AccPstnBackX25AccessConfigId_Type(Integer32):
    """Custom type fclX25AccPstnBackX25AccessConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25AccPstnBackX25AccessConfigId_Type.__name__ = "Integer32"
_FclX25AccPstnBackX25AccessConfigId_Object = MibTableColumn
fclX25AccPstnBackX25AccessConfigId = _FclX25AccPstnBackX25AccessConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 7, 1, 5),
    _FclX25AccPstnBackX25AccessConfigId_Type()
)
fclX25AccPstnBackX25AccessConfigId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25AccPstnBackX25AccessConfigId.setStatus("mandatory")
_FclX25InDIsdn_ObjectIdentity = ObjectIdentity
fclX25InDIsdn = _FclX25InDIsdn_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21)
)
_FclX25InDIsdnTable_Object = MibTable
fclX25InDIsdnTable = _FclX25InDIsdnTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1)
)
if mibBuilder.loadTexts:
    fclX25InDIsdnTable.setStatus("mandatory")
_FclX25InDIsdnEntry_Object = MibTableRow
fclX25InDIsdnEntry = _FclX25InDIsdnEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1, 1)
)
fclX25InDIsdnEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25InDLogPortId"),
)
if mibBuilder.loadTexts:
    fclX25InDIsdnEntry.setStatus("mandatory")


class _FclX25InDLogPortId_Type(Integer32):
    """Custom type fclX25InDLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25InDLogPortId_Type.__name__ = "Integer32"
_FclX25InDLogPortId_Object = MibTableColumn
fclX25InDLogPortId = _FclX25InDLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1, 1, 1),
    _FclX25InDLogPortId_Type()
)
fclX25InDLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25InDLogPortId.setStatus("mandatory")


class _FclX25InDIsdnInterfaceId_Type(Integer32):
    """Custom type fclX25InDIsdnInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclX25InDIsdnInterfaceId_Type.__name__ = "Integer32"
_FclX25InDIsdnInterfaceId_Object = MibTableColumn
fclX25InDIsdnInterfaceId = _FclX25InDIsdnInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1, 1, 2),
    _FclX25InDIsdnInterfaceId_Type()
)
fclX25InDIsdnInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InDIsdnInterfaceId.setStatus("mandatory")


class _FclX25InDTei_Type(Integer32):
    """Custom type fclX25InDTei based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 63),
    )


_FclX25InDTei_Type.__name__ = "Integer32"
_FclX25InDTei_Object = MibTableColumn
fclX25InDTei = _FclX25InDTei_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1, 1, 3),
    _FclX25InDTei_Type()
)
fclX25InDTei.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InDTei.setStatus("mandatory")


class _FclX25InDBackupEnabling_Type(Integer32):
    """Custom type fclX25InDBackupEnabling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              7)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onWhileActivity", 2),
          ("onWhileExcessTraffic", 7),
          ("onWhileLpDown", 3))
    )


_FclX25InDBackupEnabling_Type.__name__ = "Integer32"
_FclX25InDBackupEnabling_Object = MibTableColumn
fclX25InDBackupEnabling = _FclX25InDBackupEnabling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1, 1, 4),
    _FclX25InDBackupEnabling_Type()
)
fclX25InDBackupEnabling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InDBackupEnabling.setStatus("mandatory")


class _FclX25InDConnectionType_Type(Integer32):
    """Custom type fclX25InDConnectionType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("publicNetwork", 2),
          ("subscriber", 1))
    )


_FclX25InDConnectionType_Type.__name__ = "Integer32"
_FclX25InDConnectionType_Object = MibTableColumn
fclX25InDConnectionType = _FclX25InDConnectionType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1, 1, 5),
    _FclX25InDConnectionType_Type()
)
fclX25InDConnectionType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InDConnectionType.setStatus("mandatory")


class _FclX25InDSubscriberNumber_Type(OctetString):
    """Custom type fclX25InDSubscriberNumber based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FclX25InDSubscriberNumber_Type.__name__ = "OctetString"
_FclX25InDSubscriberNumber_Object = MibTableColumn
fclX25InDSubscriberNumber = _FclX25InDSubscriberNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1, 1, 6),
    _FclX25InDSubscriberNumber_Type()
)
fclX25InDSubscriberNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InDSubscriberNumber.setStatus("mandatory")


class _FclX25InDPdnLinkAddress_Type(OctetString):
    """Custom type fclX25InDPdnLinkAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclX25InDPdnLinkAddress_Type.__name__ = "OctetString"
_FclX25InDPdnLinkAddress_Object = MibTableColumn
fclX25InDPdnLinkAddress = _FclX25InDPdnLinkAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1, 1, 7),
    _FclX25InDPdnLinkAddress_Type()
)
fclX25InDPdnLinkAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InDPdnLinkAddress.setStatus("mandatory")


class _FclX25InDX25AccessConfigId_Type(Integer32):
    """Custom type fclX25InDX25AccessConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25InDX25AccessConfigId_Type.__name__ = "Integer32"
_FclX25InDX25AccessConfigId_Object = MibTableColumn
fclX25InDX25AccessConfigId = _FclX25InDX25AccessConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1, 1, 8),
    _FclX25InDX25AccessConfigId_Type()
)
fclX25InDX25AccessConfigId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InDX25AccessConfigId.setStatus("mandatory")


class _FclX25InDInactivityTimer_Type(Integer32):
    """Custom type fclX25InDInactivityTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclX25InDInactivityTimer_Type.__name__ = "Integer32"
_FclX25InDInactivityTimer_Object = MibTableColumn
fclX25InDInactivityTimer = _FclX25InDInactivityTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1, 1, 9),
    _FclX25InDInactivityTimer_Type()
)
fclX25InDInactivityTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InDInactivityTimer.setStatus("mandatory")


class _FclX25InDActiveLinkAtBootTime_Type(Integer32):
    """Custom type fclX25InDActiveLinkAtBootTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclX25InDActiveLinkAtBootTime_Type.__name__ = "Integer32"
_FclX25InDActiveLinkAtBootTime_Object = MibTableColumn
fclX25InDActiveLinkAtBootTime = _FclX25InDActiveLinkAtBootTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1, 1, 10),
    _FclX25InDActiveLinkAtBootTime_Type()
)
fclX25InDActiveLinkAtBootTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InDActiveLinkAtBootTime.setStatus("mandatory")
_FclX25InDSwitchOverTable_Object = MibTable
fclX25InDSwitchOverTable = _FclX25InDSwitchOverTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 2)
)
if mibBuilder.loadTexts:
    fclX25InDSwitchOverTable.setStatus("mandatory")
_FclX25InDSwitchOverEntry_Object = MibTableRow
fclX25InDSwitchOverEntry = _FclX25InDSwitchOverEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 2, 1)
)
fclX25InDSwitchOverEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25InDSwLogPortId"),
)
if mibBuilder.loadTexts:
    fclX25InDSwitchOverEntry.setStatus("mandatory")


class _FclX25InDSwLogPortId_Type(Integer32):
    """Custom type fclX25InDSwLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25InDSwLogPortId_Type.__name__ = "Integer32"
_FclX25InDSwLogPortId_Object = MibTableColumn
fclX25InDSwLogPortId = _FclX25InDSwLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 2, 1, 1),
    _FclX25InDSwLogPortId_Type()
)
fclX25InDSwLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25InDSwLogPortId.setStatus("mandatory")


class _FclX25InDSwMeasureCount_Type(Integer32):
    """Custom type fclX25InDSwMeasureCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 249),
    )


_FclX25InDSwMeasureCount_Type.__name__ = "Integer32"
_FclX25InDSwMeasureCount_Object = MibTableColumn
fclX25InDSwMeasureCount = _FclX25InDSwMeasureCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 2, 1, 2),
    _FclX25InDSwMeasureCount_Type()
)
fclX25InDSwMeasureCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InDSwMeasureCount.setStatus("mandatory")


class _FclX25InDSwSwitchThreshold_Type(Integer32):
    """Custom type fclX25InDSwSwitchThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FclX25InDSwSwitchThreshold_Type.__name__ = "Integer32"
_FclX25InDSwSwitchThreshold_Object = MibTableColumn
fclX25InDSwSwitchThreshold = _FclX25InDSwSwitchThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 2, 1, 3),
    _FclX25InDSwSwitchThreshold_Type()
)
fclX25InDSwSwitchThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InDSwSwitchThreshold.setStatus("mandatory")


class _FclX25InDSwSwitchBackThreshold_Type(Integer32):
    """Custom type fclX25InDSwSwitchBackThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FclX25InDSwSwitchBackThreshold_Type.__name__ = "Integer32"
_FclX25InDSwSwitchBackThreshold_Object = MibTableColumn
fclX25InDSwSwitchBackThreshold = _FclX25InDSwSwitchBackThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 2, 1, 4),
    _FclX25InDSwSwitchBackThreshold_Type()
)
fclX25InDSwSwitchBackThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InDSwSwitchBackThreshold.setStatus("mandatory")
_FclX25InDIsdnBackupTable_Object = MibTable
fclX25InDIsdnBackupTable = _FclX25InDIsdnBackupTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 3)
)
if mibBuilder.loadTexts:
    fclX25InDIsdnBackupTable.setStatus("mandatory")
_FclX25InDIsdnBackupEntry_Object = MibTableRow
fclX25InDIsdnBackupEntry = _FclX25InDIsdnBackupEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 3, 1)
)
fclX25InDIsdnBackupEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25InDIsdnBackLogPortId"),
    (0, "PCE-MIB", "fclX25InDIsdnBackIsdnInterfaceId"),
)
if mibBuilder.loadTexts:
    fclX25InDIsdnBackupEntry.setStatus("mandatory")


class _FclX25InDIsdnBackLogPortId_Type(Integer32):
    """Custom type fclX25InDIsdnBackLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25InDIsdnBackLogPortId_Type.__name__ = "Integer32"
_FclX25InDIsdnBackLogPortId_Object = MibTableColumn
fclX25InDIsdnBackLogPortId = _FclX25InDIsdnBackLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 3, 1, 1),
    _FclX25InDIsdnBackLogPortId_Type()
)
fclX25InDIsdnBackLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25InDIsdnBackLogPortId.setStatus("mandatory")


class _FclX25InDIsdnBackIsdnInterfaceId_Type(Integer32):
    """Custom type fclX25InDIsdnBackIsdnInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclX25InDIsdnBackIsdnInterfaceId_Type.__name__ = "Integer32"
_FclX25InDIsdnBackIsdnInterfaceId_Object = MibTableColumn
fclX25InDIsdnBackIsdnInterfaceId = _FclX25InDIsdnBackIsdnInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 3, 1, 2),
    _FclX25InDIsdnBackIsdnInterfaceId_Type()
)
fclX25InDIsdnBackIsdnInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25InDIsdnBackIsdnInterfaceId.setStatus("mandatory")


class _FclX25InDIsdnBackStatus_Type(Integer32):
    """Custom type fclX25InDIsdnBackStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclX25InDIsdnBackStatus_Type.__name__ = "Integer32"
_FclX25InDIsdnBackStatus_Object = MibTableColumn
fclX25InDIsdnBackStatus = _FclX25InDIsdnBackStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 3, 1, 3),
    _FclX25InDIsdnBackStatus_Type()
)
fclX25InDIsdnBackStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InDIsdnBackStatus.setStatus("mandatory")
_FclX25InDIsdnRemotePeerTable_Object = MibTable
fclX25InDIsdnRemotePeerTable = _FclX25InDIsdnRemotePeerTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 4)
)
if mibBuilder.loadTexts:
    fclX25InDIsdnRemotePeerTable.setStatus("mandatory")
_FclX25InDIsdnRemotePeerEntry_Object = MibTableRow
fclX25InDIsdnRemotePeerEntry = _FclX25InDIsdnRemotePeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 4, 1)
)
fclX25InDIsdnRemotePeerEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25InDIsdnRemLogPortId"),
    (0, "PCE-MIB", "fclX25InDIsdnRemIsdnInterfaceId"),
)
if mibBuilder.loadTexts:
    fclX25InDIsdnRemotePeerEntry.setStatus("mandatory")


class _FclX25InDIsdnRemLogPortId_Type(Integer32):
    """Custom type fclX25InDIsdnRemLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25InDIsdnRemLogPortId_Type.__name__ = "Integer32"
_FclX25InDIsdnRemLogPortId_Object = MibTableColumn
fclX25InDIsdnRemLogPortId = _FclX25InDIsdnRemLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 4, 1, 1),
    _FclX25InDIsdnRemLogPortId_Type()
)
fclX25InDIsdnRemLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25InDIsdnRemLogPortId.setStatus("mandatory")


class _FclX25InDIsdnRemIsdnInterfaceId_Type(Integer32):
    """Custom type fclX25InDIsdnRemIsdnInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 249),
    )


_FclX25InDIsdnRemIsdnInterfaceId_Type.__name__ = "Integer32"
_FclX25InDIsdnRemIsdnInterfaceId_Object = MibTableColumn
fclX25InDIsdnRemIsdnInterfaceId = _FclX25InDIsdnRemIsdnInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 4, 1, 2),
    _FclX25InDIsdnRemIsdnInterfaceId_Type()
)
fclX25InDIsdnRemIsdnInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25InDIsdnRemIsdnInterfaceId.setStatus("mandatory")


class _FclX25InDIsdnRemStatus_Type(Integer32):
    """Custom type fclX25InDIsdnRemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclX25InDIsdnRemStatus_Type.__name__ = "Integer32"
_FclX25InDIsdnRemStatus_Object = MibTableColumn
fclX25InDIsdnRemStatus = _FclX25InDIsdnRemStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 4, 1, 3),
    _FclX25InDIsdnRemStatus_Type()
)
fclX25InDIsdnRemStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InDIsdnRemStatus.setStatus("mandatory")


class _FclX25InDIsdnRemConnectionType_Type(Integer32):
    """Custom type fclX25InDIsdnRemConnectionType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("publicNetwork", 2),
          ("subscriber", 1))
    )


_FclX25InDIsdnRemConnectionType_Type.__name__ = "Integer32"
_FclX25InDIsdnRemConnectionType_Object = MibTableColumn
fclX25InDIsdnRemConnectionType = _FclX25InDIsdnRemConnectionType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 4, 1, 4),
    _FclX25InDIsdnRemConnectionType_Type()
)
fclX25InDIsdnRemConnectionType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InDIsdnRemConnectionType.setStatus("mandatory")


class _FclX25InDIsdnRemSubscriberNumber_Type(OctetString):
    """Custom type fclX25InDIsdnRemSubscriberNumber based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FclX25InDIsdnRemSubscriberNumber_Type.__name__ = "OctetString"
_FclX25InDIsdnRemSubscriberNumber_Object = MibTableColumn
fclX25InDIsdnRemSubscriberNumber = _FclX25InDIsdnRemSubscriberNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 4, 1, 5),
    _FclX25InDIsdnRemSubscriberNumber_Type()
)
fclX25InDIsdnRemSubscriberNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InDIsdnRemSubscriberNumber.setStatus("mandatory")


class _FclX25InDIsdnRemPdnLinkAddress_Type(OctetString):
    """Custom type fclX25InDIsdnRemPdnLinkAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclX25InDIsdnRemPdnLinkAddress_Type.__name__ = "OctetString"
_FclX25InDIsdnRemPdnLinkAddress_Object = MibTableColumn
fclX25InDIsdnRemPdnLinkAddress = _FclX25InDIsdnRemPdnLinkAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 4, 1, 6),
    _FclX25InDIsdnRemPdnLinkAddress_Type()
)
fclX25InDIsdnRemPdnLinkAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InDIsdnRemPdnLinkAddress.setStatus("mandatory")


class _FclX25InDIsdnRemX25AccConfigId_Type(Integer32):
    """Custom type fclX25InDIsdnRemX25AccConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25InDIsdnRemX25AccConfigId_Type.__name__ = "Integer32"
_FclX25InDIsdnRemX25AccConfigId_Object = MibTableColumn
fclX25InDIsdnRemX25AccConfigId = _FclX25InDIsdnRemX25AccConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 4, 1, 7),
    _FclX25InDIsdnRemX25AccConfigId_Type()
)
fclX25InDIsdnRemX25AccConfigId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InDIsdnRemX25AccConfigId.setStatus("mandatory")


class _FclX25InDIsdnRemPriority_Type(Integer32):
    """Custom type fclX25InDIsdnRemPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_FclX25InDIsdnRemPriority_Type.__name__ = "Integer32"
_FclX25InDIsdnRemPriority_Object = MibTableColumn
fclX25InDIsdnRemPriority = _FclX25InDIsdnRemPriority_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 4, 1, 8),
    _FclX25InDIsdnRemPriority_Type()
)
fclX25InDIsdnRemPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InDIsdnRemPriority.setStatus("mandatory")


class _FclX25InDIsdnRemCallRetryCount_Type(Integer32):
    """Custom type fclX25InDIsdnRemCallRetryCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_FclX25InDIsdnRemCallRetryCount_Type.__name__ = "Integer32"
_FclX25InDIsdnRemCallRetryCount_Object = MibTableColumn
fclX25InDIsdnRemCallRetryCount = _FclX25InDIsdnRemCallRetryCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 4, 1, 9),
    _FclX25InDIsdnRemCallRetryCount_Type()
)
fclX25InDIsdnRemCallRetryCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InDIsdnRemCallRetryCount.setStatus("mandatory")
_FclX25InBIsdn_ObjectIdentity = ObjectIdentity
fclX25InBIsdn = _FclX25InBIsdn_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22)
)
_FclX25InBIsdnTable_Object = MibTable
fclX25InBIsdnTable = _FclX25InBIsdnTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 1)
)
if mibBuilder.loadTexts:
    fclX25InBIsdnTable.setStatus("mandatory")
_FclX25InBIsdnEntry_Object = MibTableRow
fclX25InBIsdnEntry = _FclX25InBIsdnEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 1, 1)
)
fclX25InBIsdnEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25InBLogPortId"),
)
if mibBuilder.loadTexts:
    fclX25InBIsdnEntry.setStatus("mandatory")


class _FclX25InBLogPortId_Type(Integer32):
    """Custom type fclX25InBLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25InBLogPortId_Type.__name__ = "Integer32"
_FclX25InBLogPortId_Object = MibTableColumn
fclX25InBLogPortId = _FclX25InBLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 1, 1, 1),
    _FclX25InBLogPortId_Type()
)
fclX25InBLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25InBLogPortId.setStatus("mandatory")


class _FclX25InBIsdnInterfaceId_Type(Integer32):
    """Custom type fclX25InBIsdnInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclX25InBIsdnInterfaceId_Type.__name__ = "Integer32"
_FclX25InBIsdnInterfaceId_Object = MibTableColumn
fclX25InBIsdnInterfaceId = _FclX25InBIsdnInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 1, 1, 2),
    _FclX25InBIsdnInterfaceId_Type()
)
fclX25InBIsdnInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InBIsdnInterfaceId.setStatus("mandatory")
_FclX25InBRemotePeerTable_Object = MibTable
fclX25InBRemotePeerTable = _FclX25InBRemotePeerTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2)
)
if mibBuilder.loadTexts:
    fclX25InBRemotePeerTable.setStatus("mandatory")
_FclX25InBRemotePeerEntry_Object = MibTableRow
fclX25InBRemotePeerEntry = _FclX25InBRemotePeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1)
)
fclX25InBRemotePeerEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25InBRemX121Addr"),
    (0, "PCE-MIB", "fclX25InBRemPeerId"),
)
if mibBuilder.loadTexts:
    fclX25InBRemotePeerEntry.setStatus("mandatory")


class _FclX25InBRemX121Addr_Type(OctetString):
    """Custom type fclX25InBRemX121Addr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclX25InBRemX121Addr_Type.__name__ = "OctetString"
_FclX25InBRemX121Addr_Object = MibTableColumn
fclX25InBRemX121Addr = _FclX25InBRemX121Addr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1, 1),
    _FclX25InBRemX121Addr_Type()
)
fclX25InBRemX121Addr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25InBRemX121Addr.setStatus("mandatory")


class _FclX25InBRemPeerId_Type(Integer32):
    """Custom type fclX25InBRemPeerId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 999),
    )


_FclX25InBRemPeerId_Type.__name__ = "Integer32"
_FclX25InBRemPeerId_Object = MibTableColumn
fclX25InBRemPeerId = _FclX25InBRemPeerId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1, 2),
    _FclX25InBRemPeerId_Type()
)
fclX25InBRemPeerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25InBRemPeerId.setStatus("mandatory")


class _FclX25InBRemStatus_Type(Integer32):
    """Custom type fclX25InBRemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclX25InBRemStatus_Type.__name__ = "Integer32"
_FclX25InBRemStatus_Object = MibTableColumn
fclX25InBRemStatus = _FclX25InBRemStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1, 3),
    _FclX25InBRemStatus_Type()
)
fclX25InBRemStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InBRemStatus.setStatus("mandatory")


class _FclX25InBRemConnectionType_Type(Integer32):
    """Custom type fclX25InBRemConnectionType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("interNode", 3),
          ("publicNetwork", 2),
          ("subscriber", 1))
    )


_FclX25InBRemConnectionType_Type.__name__ = "Integer32"
_FclX25InBRemConnectionType_Object = MibTableColumn
fclX25InBRemConnectionType = _FclX25InBRemConnectionType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1, 4),
    _FclX25InBRemConnectionType_Type()
)
fclX25InBRemConnectionType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InBRemConnectionType.setStatus("mandatory")


class _FclX25InBRemSubscriberNumber_Type(OctetString):
    """Custom type fclX25InBRemSubscriberNumber based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FclX25InBRemSubscriberNumber_Type.__name__ = "OctetString"
_FclX25InBRemSubscriberNumber_Object = MibTableColumn
fclX25InBRemSubscriberNumber = _FclX25InBRemSubscriberNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1, 5),
    _FclX25InBRemSubscriberNumber_Type()
)
fclX25InBRemSubscriberNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InBRemSubscriberNumber.setStatus("mandatory")


class _FclX25InBRemPdnLinkAddress_Type(OctetString):
    """Custom type fclX25InBRemPdnLinkAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclX25InBRemPdnLinkAddress_Type.__name__ = "OctetString"
_FclX25InBRemPdnLinkAddress_Object = MibTableColumn
fclX25InBRemPdnLinkAddress = _FclX25InBRemPdnLinkAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1, 6),
    _FclX25InBRemPdnLinkAddress_Type()
)
fclX25InBRemPdnLinkAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InBRemPdnLinkAddress.setStatus("mandatory")


class _FclX25InBRemX25ConfigId_Type(Integer32):
    """Custom type fclX25InBRemX25ConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25InBRemX25ConfigId_Type.__name__ = "Integer32"
_FclX25InBRemX25ConfigId_Object = MibTableColumn
fclX25InBRemX25ConfigId = _FclX25InBRemX25ConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1, 7),
    _FclX25InBRemX25ConfigId_Type()
)
fclX25InBRemX25ConfigId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InBRemX25ConfigId.setStatus("mandatory")


class _FclX25InBRemPriority_Type(Integer32):
    """Custom type fclX25InBRemPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_FclX25InBRemPriority_Type.__name__ = "Integer32"
_FclX25InBRemPriority_Object = MibTableColumn
fclX25InBRemPriority = _FclX25InBRemPriority_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1, 8),
    _FclX25InBRemPriority_Type()
)
fclX25InBRemPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InBRemPriority.setStatus("mandatory")


class _FclX25InBRemCallRetryCount_Type(Integer32):
    """Custom type fclX25InBRemCallRetryCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_FclX25InBRemCallRetryCount_Type.__name__ = "Integer32"
_FclX25InBRemCallRetryCount_Object = MibTableColumn
fclX25InBRemCallRetryCount = _FclX25InBRemCallRetryCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1, 9),
    _FclX25InBRemCallRetryCount_Type()
)
fclX25InBRemCallRetryCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InBRemCallRetryCount.setStatus("mandatory")


class _FclX25InBRemLinkCheckPeriod_Type(Integer32):
    """Custom type fclX25InBRemLinkCheckPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(200, 50800),
    )


_FclX25InBRemLinkCheckPeriod_Type.__name__ = "Integer32"
_FclX25InBRemLinkCheckPeriod_Object = MibTableColumn
fclX25InBRemLinkCheckPeriod = _FclX25InBRemLinkCheckPeriod_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1, 10),
    _FclX25InBRemLinkCheckPeriod_Type()
)
fclX25InBRemLinkCheckPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InBRemLinkCheckPeriod.setStatus("mandatory")


class _FclX25InBRemCheckPeriodCount_Type(Integer32):
    """Custom type fclX25InBRemCheckPeriodCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 250),
    )


_FclX25InBRemCheckPeriodCount_Type.__name__ = "Integer32"
_FclX25InBRemCheckPeriodCount_Object = MibTableColumn
fclX25InBRemCheckPeriodCount = _FclX25InBRemCheckPeriodCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1, 11),
    _FclX25InBRemCheckPeriodCount_Type()
)
fclX25InBRemCheckPeriodCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25InBRemCheckPeriodCount.setStatus("mandatory")
_FclX25InPstn_ObjectIdentity = ObjectIdentity
fclX25InPstn = _FclX25InPstn_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 23)
)
_FclX25InPstnTable_Object = MibTable
fclX25InPstnTable = _FclX25InPstnTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 23, 1)
)
if mibBuilder.loadTexts:
    fclX25InPstnTable.setStatus("mandatory")
_FclX25InPstnEntry_Object = MibTableRow
fclX25InPstnEntry = _FclX25InPstnEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 23, 1, 1)
)
fclX25InPstnEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25PstnLogPortId"),
)
if mibBuilder.loadTexts:
    fclX25InPstnEntry.setStatus("mandatory")


class _FclX25PstnLogPortId_Type(Integer32):
    """Custom type fclX25PstnLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25PstnLogPortId_Type.__name__ = "Integer32"
_FclX25PstnLogPortId_Object = MibTableColumn
fclX25PstnLogPortId = _FclX25PstnLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 23, 1, 1, 1),
    _FclX25PstnLogPortId_Type()
)
fclX25PstnLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25PstnLogPortId.setStatus("mandatory")


class _FclX25PstnInterfaceId_Type(Integer32):
    """Custom type fclX25PstnInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclX25PstnInterfaceId_Type.__name__ = "Integer32"
_FclX25PstnInterfaceId_Object = MibTableColumn
fclX25PstnInterfaceId = _FclX25PstnInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 23, 1, 1, 2),
    _FclX25PstnInterfaceId_Type()
)
fclX25PstnInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25PstnInterfaceId.setStatus("mandatory")


class _FclX25PstnX25InterNodeConfigId_Type(Integer32):
    """Custom type fclX25PstnX25InterNodeConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25PstnX25InterNodeConfigId_Type.__name__ = "Integer32"
_FclX25PstnX25InterNodeConfigId_Object = MibTableColumn
fclX25PstnX25InterNodeConfigId = _FclX25PstnX25InterNodeConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 23, 1, 1, 3),
    _FclX25PstnX25InterNodeConfigId_Type()
)
fclX25PstnX25InterNodeConfigId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25PstnX25InterNodeConfigId.setStatus("mandatory")
_FclX25PstnRemotePeerTable_Object = MibTable
fclX25PstnRemotePeerTable = _FclX25PstnRemotePeerTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 23, 2)
)
if mibBuilder.loadTexts:
    fclX25PstnRemotePeerTable.setStatus("mandatory")
_FclX25PstnRemotePeerEntry_Object = MibTableRow
fclX25PstnRemotePeerEntry = _FclX25PstnRemotePeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 23, 2, 1)
)
fclX25PstnRemotePeerEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25PstnRemX121Addr"),
)
if mibBuilder.loadTexts:
    fclX25PstnRemotePeerEntry.setStatus("mandatory")


class _FclX25PstnRemX121Addr_Type(OctetString):
    """Custom type fclX25PstnRemX121Addr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclX25PstnRemX121Addr_Type.__name__ = "OctetString"
_FclX25PstnRemX121Addr_Object = MibTableColumn
fclX25PstnRemX121Addr = _FclX25PstnRemX121Addr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 23, 2, 1, 1),
    _FclX25PstnRemX121Addr_Type()
)
fclX25PstnRemX121Addr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25PstnRemX121Addr.setStatus("mandatory")


class _FclX25PstnRemStatus_Type(Integer32):
    """Custom type fclX25PstnRemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclX25PstnRemStatus_Type.__name__ = "Integer32"
_FclX25PstnRemStatus_Object = MibTableColumn
fclX25PstnRemStatus = _FclX25PstnRemStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 23, 2, 1, 2),
    _FclX25PstnRemStatus_Type()
)
fclX25PstnRemStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25PstnRemStatus.setStatus("mandatory")


class _FclX25PstnRemPstnNumber_Type(OctetString):
    """Custom type fclX25PstnRemPstnNumber based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(14, 14),
    )


_FclX25PstnRemPstnNumber_Type.__name__ = "OctetString"
_FclX25PstnRemPstnNumber_Object = MibTableColumn
fclX25PstnRemPstnNumber = _FclX25PstnRemPstnNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 23, 2, 1, 3),
    _FclX25PstnRemPstnNumber_Type()
)
fclX25PstnRemPstnNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25PstnRemPstnNumber.setStatus("mandatory")
_FclX25SlpInterNode_ObjectIdentity = ObjectIdentity
fclX25SlpInterNode = _FclX25SlpInterNode_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24)
)
_FclX25SlpInterNodeTable_Object = MibTable
fclX25SlpInterNodeTable = _FclX25SlpInterNodeTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 1)
)
if mibBuilder.loadTexts:
    fclX25SlpInterNodeTable.setStatus("mandatory")
_FclX25SlpInterNodeEntry_Object = MibTableRow
fclX25SlpInterNodeEntry = _FclX25SlpInterNodeEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 1, 1)
)
fclX25SlpInterNodeEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25SlpLogPortId"),
)
if mibBuilder.loadTexts:
    fclX25SlpInterNodeEntry.setStatus("mandatory")


class _FclX25SlpLogPortId_Type(Integer32):
    """Custom type fclX25SlpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25SlpLogPortId_Type.__name__ = "Integer32"
_FclX25SlpLogPortId_Object = MibTableColumn
fclX25SlpLogPortId = _FclX25SlpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 1, 1, 1),
    _FclX25SlpLogPortId_Type()
)
fclX25SlpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25SlpLogPortId.setStatus("mandatory")


class _FclX25SlpInterfaceId_Type(Integer32):
    """Custom type fclX25SlpInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25SlpInterfaceId_Type.__name__ = "Integer32"
_FclX25SlpInterfaceId_Object = MibTableColumn
fclX25SlpInterfaceId = _FclX25SlpInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 1, 1, 2),
    _FclX25SlpInterfaceId_Type()
)
fclX25SlpInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25SlpInterfaceId.setStatus("mandatory")


class _FclX25SlpIsdnBackupEnabling_Type(Integer32):
    """Custom type fclX25SlpIsdnBackupEnabling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              7)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onWhileActivity", 2),
          ("onWhileExcessTraffic", 7),
          ("onWhileLpDown", 3))
    )


_FclX25SlpIsdnBackupEnabling_Type.__name__ = "Integer32"
_FclX25SlpIsdnBackupEnabling_Object = MibTableColumn
fclX25SlpIsdnBackupEnabling = _FclX25SlpIsdnBackupEnabling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 1, 1, 3),
    _FclX25SlpIsdnBackupEnabling_Type()
)
fclX25SlpIsdnBackupEnabling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25SlpIsdnBackupEnabling.setStatus("mandatory")


class _FclX25SlpPstnBackupEnabling_Type(Integer32):
    """Custom type fclX25SlpPstnBackupEnabling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              7)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onWhileActivity", 2),
          ("onWhileExcessTraffic", 7),
          ("onWhileLpDown", 3))
    )


_FclX25SlpPstnBackupEnabling_Type.__name__ = "Integer32"
_FclX25SlpPstnBackupEnabling_Object = MibTableColumn
fclX25SlpPstnBackupEnabling = _FclX25SlpPstnBackupEnabling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 1, 1, 4),
    _FclX25SlpPstnBackupEnabling_Type()
)
fclX25SlpPstnBackupEnabling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25SlpPstnBackupEnabling.setStatus("mandatory")


class _FclX25SlpX25InterNodeConfigId_Type(Integer32):
    """Custom type fclX25SlpX25InterNodeConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25SlpX25InterNodeConfigId_Type.__name__ = "Integer32"
_FclX25SlpX25InterNodeConfigId_Object = MibTableColumn
fclX25SlpX25InterNodeConfigId = _FclX25SlpX25InterNodeConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 1, 1, 5),
    _FclX25SlpX25InterNodeConfigId_Type()
)
fclX25SlpX25InterNodeConfigId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25SlpX25InterNodeConfigId.setStatus("mandatory")


class _FclX25SlpDARApplicable_Type(Integer32):
    """Custom type fclX25SlpDARApplicable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FclX25SlpDARApplicable_Type.__name__ = "Integer32"
_FclX25SlpDARApplicable_Object = MibTableColumn
fclX25SlpDARApplicable = _FclX25SlpDARApplicable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 1, 1, 6),
    _FclX25SlpDARApplicable_Type()
)
fclX25SlpDARApplicable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25SlpDARApplicable.setStatus("mandatory")


class _FclX25SlpBackupTimer_Type(Integer32):
    """Custom type fclX25SlpBackupTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2540),
    )


_FclX25SlpBackupTimer_Type.__name__ = "Integer32"
_FclX25SlpBackupTimer_Object = MibTableColumn
fclX25SlpBackupTimer = _FclX25SlpBackupTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 1, 1, 7),
    _FclX25SlpBackupTimer_Type()
)
fclX25SlpBackupTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25SlpBackupTimer.setStatus("mandatory")
_FclX25SlpSwitchOverTable_Object = MibTable
fclX25SlpSwitchOverTable = _FclX25SlpSwitchOverTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 2)
)
if mibBuilder.loadTexts:
    fclX25SlpSwitchOverTable.setStatus("mandatory")
_FclX25SlpSwitchOverEntry_Object = MibTableRow
fclX25SlpSwitchOverEntry = _FclX25SlpSwitchOverEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 2, 1)
)
fclX25SlpSwitchOverEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25SlpSwLogPortId"),
)
if mibBuilder.loadTexts:
    fclX25SlpSwitchOverEntry.setStatus("mandatory")


class _FclX25SlpSwLogPortId_Type(Integer32):
    """Custom type fclX25SlpSwLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25SlpSwLogPortId_Type.__name__ = "Integer32"
_FclX25SlpSwLogPortId_Object = MibTableColumn
fclX25SlpSwLogPortId = _FclX25SlpSwLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 2, 1, 1),
    _FclX25SlpSwLogPortId_Type()
)
fclX25SlpSwLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25SlpSwLogPortId.setStatus("mandatory")


class _FclX25SlpSwMeasureCount_Type(Integer32):
    """Custom type fclX25SlpSwMeasureCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 249),
    )


_FclX25SlpSwMeasureCount_Type.__name__ = "Integer32"
_FclX25SlpSwMeasureCount_Object = MibTableColumn
fclX25SlpSwMeasureCount = _FclX25SlpSwMeasureCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 2, 1, 2),
    _FclX25SlpSwMeasureCount_Type()
)
fclX25SlpSwMeasureCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25SlpSwMeasureCount.setStatus("mandatory")


class _FclX25SlpSwSwitchThreshold_Type(Integer32):
    """Custom type fclX25SlpSwSwitchThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FclX25SlpSwSwitchThreshold_Type.__name__ = "Integer32"
_FclX25SlpSwSwitchThreshold_Object = MibTableColumn
fclX25SlpSwSwitchThreshold = _FclX25SlpSwSwitchThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 2, 1, 3),
    _FclX25SlpSwSwitchThreshold_Type()
)
fclX25SlpSwSwitchThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25SlpSwSwitchThreshold.setStatus("mandatory")


class _FclX25SlpSwSwitchBackThreshold_Type(Integer32):
    """Custom type fclX25SlpSwSwitchBackThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FclX25SlpSwSwitchBackThreshold_Type.__name__ = "Integer32"
_FclX25SlpSwSwitchBackThreshold_Object = MibTableColumn
fclX25SlpSwSwitchBackThreshold = _FclX25SlpSwSwitchBackThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 2, 1, 4),
    _FclX25SlpSwSwitchBackThreshold_Type()
)
fclX25SlpSwSwitchBackThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25SlpSwSwitchBackThreshold.setStatus("mandatory")
_FclX25SlpIsdnBackupTable_Object = MibTable
fclX25SlpIsdnBackupTable = _FclX25SlpIsdnBackupTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 3)
)
if mibBuilder.loadTexts:
    fclX25SlpIsdnBackupTable.setStatus("mandatory")
_FclX25SlpIsdnBackupEntry_Object = MibTableRow
fclX25SlpIsdnBackupEntry = _FclX25SlpIsdnBackupEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 3, 1)
)
fclX25SlpIsdnBackupEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25SlpIsdnBackLogPortId"),
    (0, "PCE-MIB", "fclX25SlpIsdnBackIsdnInterfaceId"),
)
if mibBuilder.loadTexts:
    fclX25SlpIsdnBackupEntry.setStatus("mandatory")


class _FclX25SlpIsdnBackLogPortId_Type(Integer32):
    """Custom type fclX25SlpIsdnBackLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25SlpIsdnBackLogPortId_Type.__name__ = "Integer32"
_FclX25SlpIsdnBackLogPortId_Object = MibTableColumn
fclX25SlpIsdnBackLogPortId = _FclX25SlpIsdnBackLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 3, 1, 1),
    _FclX25SlpIsdnBackLogPortId_Type()
)
fclX25SlpIsdnBackLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25SlpIsdnBackLogPortId.setStatus("mandatory")


class _FclX25SlpIsdnBackIsdnInterfaceId_Type(Integer32):
    """Custom type fclX25SlpIsdnBackIsdnInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclX25SlpIsdnBackIsdnInterfaceId_Type.__name__ = "Integer32"
_FclX25SlpIsdnBackIsdnInterfaceId_Object = MibTableColumn
fclX25SlpIsdnBackIsdnInterfaceId = _FclX25SlpIsdnBackIsdnInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 3, 1, 2),
    _FclX25SlpIsdnBackIsdnInterfaceId_Type()
)
fclX25SlpIsdnBackIsdnInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25SlpIsdnBackIsdnInterfaceId.setStatus("mandatory")


class _FclX25SlpIsdnBackStatus_Type(Integer32):
    """Custom type fclX25SlpIsdnBackStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclX25SlpIsdnBackStatus_Type.__name__ = "Integer32"
_FclX25SlpIsdnBackStatus_Object = MibTableColumn
fclX25SlpIsdnBackStatus = _FclX25SlpIsdnBackStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 3, 1, 3),
    _FclX25SlpIsdnBackStatus_Type()
)
fclX25SlpIsdnBackStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25SlpIsdnBackStatus.setStatus("mandatory")
_FclX25SlpIsdnRemotePeerTable_Object = MibTable
fclX25SlpIsdnRemotePeerTable = _FclX25SlpIsdnRemotePeerTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 4)
)
if mibBuilder.loadTexts:
    fclX25SlpIsdnRemotePeerTable.setStatus("mandatory")
_FclX25SlpIsdnRemotePeerEntry_Object = MibTableRow
fclX25SlpIsdnRemotePeerEntry = _FclX25SlpIsdnRemotePeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 4, 1)
)
fclX25SlpIsdnRemotePeerEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25SlpIsdnRemLogPortId"),
    (0, "PCE-MIB", "fclX25SlpIsdnRemIsdnInterfaceId"),
)
if mibBuilder.loadTexts:
    fclX25SlpIsdnRemotePeerEntry.setStatus("mandatory")


class _FclX25SlpIsdnRemLogPortId_Type(Integer32):
    """Custom type fclX25SlpIsdnRemLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25SlpIsdnRemLogPortId_Type.__name__ = "Integer32"
_FclX25SlpIsdnRemLogPortId_Object = MibTableColumn
fclX25SlpIsdnRemLogPortId = _FclX25SlpIsdnRemLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 4, 1, 1),
    _FclX25SlpIsdnRemLogPortId_Type()
)
fclX25SlpIsdnRemLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25SlpIsdnRemLogPortId.setStatus("mandatory")


class _FclX25SlpIsdnRemIsdnInterfaceId_Type(Integer32):
    """Custom type fclX25SlpIsdnRemIsdnInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclX25SlpIsdnRemIsdnInterfaceId_Type.__name__ = "Integer32"
_FclX25SlpIsdnRemIsdnInterfaceId_Object = MibTableColumn
fclX25SlpIsdnRemIsdnInterfaceId = _FclX25SlpIsdnRemIsdnInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 4, 1, 2),
    _FclX25SlpIsdnRemIsdnInterfaceId_Type()
)
fclX25SlpIsdnRemIsdnInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25SlpIsdnRemIsdnInterfaceId.setStatus("mandatory")


class _FclX25SlpIsdnRemStatus_Type(Integer32):
    """Custom type fclX25SlpIsdnRemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclX25SlpIsdnRemStatus_Type.__name__ = "Integer32"
_FclX25SlpIsdnRemStatus_Object = MibTableColumn
fclX25SlpIsdnRemStatus = _FclX25SlpIsdnRemStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 4, 1, 3),
    _FclX25SlpIsdnRemStatus_Type()
)
fclX25SlpIsdnRemStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25SlpIsdnRemStatus.setStatus("mandatory")


class _FclX25SlpIsdnRemX25InterNodeConfigId_Type(Integer32):
    """Custom type fclX25SlpIsdnRemX25InterNodeConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25SlpIsdnRemX25InterNodeConfigId_Type.__name__ = "Integer32"
_FclX25SlpIsdnRemX25InterNodeConfigId_Object = MibTableColumn
fclX25SlpIsdnRemX25InterNodeConfigId = _FclX25SlpIsdnRemX25InterNodeConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 4, 1, 4),
    _FclX25SlpIsdnRemX25InterNodeConfigId_Type()
)
fclX25SlpIsdnRemX25InterNodeConfigId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25SlpIsdnRemX25InterNodeConfigId.setStatus("mandatory")


class _FclX25SlpIsdnRemPriority_Type(Integer32):
    """Custom type fclX25SlpIsdnRemPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_FclX25SlpIsdnRemPriority_Type.__name__ = "Integer32"
_FclX25SlpIsdnRemPriority_Object = MibTableColumn
fclX25SlpIsdnRemPriority = _FclX25SlpIsdnRemPriority_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 4, 1, 5),
    _FclX25SlpIsdnRemPriority_Type()
)
fclX25SlpIsdnRemPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25SlpIsdnRemPriority.setStatus("mandatory")


class _FclX25SlpIsdnRemCallRetryCount_Type(Integer32):
    """Custom type fclX25SlpIsdnRemCallRetryCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_FclX25SlpIsdnRemCallRetryCount_Type.__name__ = "Integer32"
_FclX25SlpIsdnRemCallRetryCount_Object = MibTableColumn
fclX25SlpIsdnRemCallRetryCount = _FclX25SlpIsdnRemCallRetryCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 4, 1, 6),
    _FclX25SlpIsdnRemCallRetryCount_Type()
)
fclX25SlpIsdnRemCallRetryCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25SlpIsdnRemCallRetryCount.setStatus("mandatory")
_FclX25SlpPstnBackupTable_Object = MibTable
fclX25SlpPstnBackupTable = _FclX25SlpPstnBackupTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 5)
)
if mibBuilder.loadTexts:
    fclX25SlpPstnBackupTable.setStatus("mandatory")
_FclX25SlpPstnBackupEntry_Object = MibTableRow
fclX25SlpPstnBackupEntry = _FclX25SlpPstnBackupEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 5, 1)
)
fclX25SlpPstnBackupEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25SlpPstnBackLogPortId"),
)
if mibBuilder.loadTexts:
    fclX25SlpPstnBackupEntry.setStatus("mandatory")


class _FclX25SlpPstnBackLogPortId_Type(Integer32):
    """Custom type fclX25SlpPstnBackLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25SlpPstnBackLogPortId_Type.__name__ = "Integer32"
_FclX25SlpPstnBackLogPortId_Object = MibTableColumn
fclX25SlpPstnBackLogPortId = _FclX25SlpPstnBackLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 5, 1, 1),
    _FclX25SlpPstnBackLogPortId_Type()
)
fclX25SlpPstnBackLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25SlpPstnBackLogPortId.setStatus("mandatory")


class _FclX25SlpPstnBackStatus_Type(Integer32):
    """Custom type fclX25SlpPstnBackStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclX25SlpPstnBackStatus_Type.__name__ = "Integer32"
_FclX25SlpPstnBackStatus_Object = MibTableColumn
fclX25SlpPstnBackStatus = _FclX25SlpPstnBackStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 5, 1, 2),
    _FclX25SlpPstnBackStatus_Type()
)
fclX25SlpPstnBackStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25SlpPstnBackStatus.setStatus("mandatory")


class _FclX25SlpPstnBackInterfaceId_Type(Integer32):
    """Custom type fclX25SlpPstnBackInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclX25SlpPstnBackInterfaceId_Type.__name__ = "Integer32"
_FclX25SlpPstnBackInterfaceId_Object = MibTableColumn
fclX25SlpPstnBackInterfaceId = _FclX25SlpPstnBackInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 5, 1, 3),
    _FclX25SlpPstnBackInterfaceId_Type()
)
fclX25SlpPstnBackInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25SlpPstnBackInterfaceId.setStatus("mandatory")


class _FclX25SlpPstnBackPstnNumber_Type(OctetString):
    """Custom type fclX25SlpPstnBackPstnNumber based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(14, 14),
    )


_FclX25SlpPstnBackPstnNumber_Type.__name__ = "OctetString"
_FclX25SlpPstnBackPstnNumber_Object = MibTableColumn
fclX25SlpPstnBackPstnNumber = _FclX25SlpPstnBackPstnNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 5, 1, 4),
    _FclX25SlpPstnBackPstnNumber_Type()
)
fclX25SlpPstnBackPstnNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25SlpPstnBackPstnNumber.setStatus("mandatory")


class _FclX25SlpPstnBackX25InterNodeConfigId_Type(Integer32):
    """Custom type fclX25SlpPstnBackX25InterNodeConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25SlpPstnBackX25InterNodeConfigId_Type.__name__ = "Integer32"
_FclX25SlpPstnBackX25InterNodeConfigId_Object = MibTableColumn
fclX25SlpPstnBackX25InterNodeConfigId = _FclX25SlpPstnBackX25InterNodeConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 5, 1, 5),
    _FclX25SlpPstnBackX25InterNodeConfigId_Type()
)
fclX25SlpPstnBackX25InterNodeConfigId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25SlpPstnBackX25InterNodeConfigId.setStatus("mandatory")
_FclX25Mlp_ObjectIdentity = ObjectIdentity
fclX25Mlp = _FclX25Mlp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25)
)
_FclX25MlpTable_Object = MibTable
fclX25MlpTable = _FclX25MlpTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 1)
)
if mibBuilder.loadTexts:
    fclX25MlpTable.setStatus("mandatory")
_FclX25MlpEntry_Object = MibTableRow
fclX25MlpEntry = _FclX25MlpEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 1, 1)
)
fclX25MlpEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25MlpLogPortId"),
)
if mibBuilder.loadTexts:
    fclX25MlpEntry.setStatus("mandatory")


class _FclX25MlpLogPortId_Type(Integer32):
    """Custom type fclX25MlpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25MlpLogPortId_Type.__name__ = "Integer32"
_FclX25MlpLogPortId_Object = MibTableColumn
fclX25MlpLogPortId = _FclX25MlpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 1, 1, 1),
    _FclX25MlpLogPortId_Type()
)
fclX25MlpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25MlpLogPortId.setStatus("mandatory")


class _FclX25MlpLink1InterfaceId_Type(Integer32):
    """Custom type fclX25MlpLink1InterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclX25MlpLink1InterfaceId_Type.__name__ = "Integer32"
_FclX25MlpLink1InterfaceId_Object = MibTableColumn
fclX25MlpLink1InterfaceId = _FclX25MlpLink1InterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 1, 1, 2),
    _FclX25MlpLink1InterfaceId_Type()
)
fclX25MlpLink1InterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpLink1InterfaceId.setStatus("mandatory")


class _FclX25MlpLink2InterfaceId_Type(Integer32):
    """Custom type fclX25MlpLink2InterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclX25MlpLink2InterfaceId_Type.__name__ = "Integer32"
_FclX25MlpLink2InterfaceId_Object = MibTableColumn
fclX25MlpLink2InterfaceId = _FclX25MlpLink2InterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 1, 1, 3),
    _FclX25MlpLink2InterfaceId_Type()
)
fclX25MlpLink2InterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpLink2InterfaceId.setStatus("mandatory")


class _FclX25MlpLink3InterfaceId_Type(Integer32):
    """Custom type fclX25MlpLink3InterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclX25MlpLink3InterfaceId_Type.__name__ = "Integer32"
_FclX25MlpLink3InterfaceId_Object = MibTableColumn
fclX25MlpLink3InterfaceId = _FclX25MlpLink3InterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 1, 1, 4),
    _FclX25MlpLink3InterfaceId_Type()
)
fclX25MlpLink3InterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpLink3InterfaceId.setStatus("mandatory")


class _FclX25MlpLink4InterfaceId_Type(Integer32):
    """Custom type fclX25MlpLink4InterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclX25MlpLink4InterfaceId_Type.__name__ = "Integer32"
_FclX25MlpLink4InterfaceId_Object = MibTableColumn
fclX25MlpLink4InterfaceId = _FclX25MlpLink4InterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 1, 1, 5),
    _FclX25MlpLink4InterfaceId_Type()
)
fclX25MlpLink4InterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpLink4InterfaceId.setStatus("mandatory")


class _FclX25MlpIsdnOverflow_Type(Integer32):
    """Custom type fclX25MlpIsdnOverflow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onMasterWhileActivity", 10),
          ("onMasterWhileExcessTraffic", 11),
          ("onSlave", 2))
    )


_FclX25MlpIsdnOverflow_Type.__name__ = "Integer32"
_FclX25MlpIsdnOverflow_Object = MibTableColumn
fclX25MlpIsdnOverflow = _FclX25MlpIsdnOverflow_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 1, 1, 6),
    _FclX25MlpIsdnOverflow_Type()
)
fclX25MlpIsdnOverflow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpIsdnOverflow.setStatus("mandatory")


class _FclX25MlpPstnOverflow_Type(Integer32):
    """Custom type fclX25MlpPstnOverflow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onMasterWhileActivity", 10),
          ("onMasterWhileExcessTraffic", 11),
          ("onSlave", 2))
    )


_FclX25MlpPstnOverflow_Type.__name__ = "Integer32"
_FclX25MlpPstnOverflow_Object = MibTableColumn
fclX25MlpPstnOverflow = _FclX25MlpPstnOverflow_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 1, 1, 7),
    _FclX25MlpPstnOverflow_Type()
)
fclX25MlpPstnOverflow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpPstnOverflow.setStatus("mandatory")


class _FclX25MlpX25InterNodeConfigId_Type(Integer32):
    """Custom type fclX25MlpX25InterNodeConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25MlpX25InterNodeConfigId_Type.__name__ = "Integer32"
_FclX25MlpX25InterNodeConfigId_Object = MibTableColumn
fclX25MlpX25InterNodeConfigId = _FclX25MlpX25InterNodeConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 1, 1, 8),
    _FclX25MlpX25InterNodeConfigId_Type()
)
fclX25MlpX25InterNodeConfigId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpX25InterNodeConfigId.setStatus("mandatory")


class _FclX25MlpDARApplicable_Type(Integer32):
    """Custom type fclX25MlpDARApplicable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FclX25MlpDARApplicable_Type.__name__ = "Integer32"
_FclX25MlpDARApplicable_Object = MibTableColumn
fclX25MlpDARApplicable = _FclX25MlpDARApplicable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 1, 1, 9),
    _FclX25MlpDARApplicable_Type()
)
fclX25MlpDARApplicable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpDARApplicable.setStatus("mandatory")
_FclX25MlpParameterTable_Object = MibTable
fclX25MlpParameterTable = _FclX25MlpParameterTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 2)
)
if mibBuilder.loadTexts:
    fclX25MlpParameterTable.setStatus("mandatory")
_FclX25MlpParameterEntry_Object = MibTableRow
fclX25MlpParameterEntry = _FclX25MlpParameterEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 2, 1)
)
fclX25MlpParameterEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25MlpParamLogPortId"),
)
if mibBuilder.loadTexts:
    fclX25MlpParameterEntry.setStatus("mandatory")


class _FclX25MlpParamLogPortId_Type(Integer32):
    """Custom type fclX25MlpParamLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25MlpParamLogPortId_Type.__name__ = "Integer32"
_FclX25MlpParamLogPortId_Object = MibTableColumn
fclX25MlpParamLogPortId = _FclX25MlpParamLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 2, 1, 1),
    _FclX25MlpParamLogPortId_Type()
)
fclX25MlpParamLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25MlpParamLogPortId.setStatus("mandatory")


class _FclX25MlpMwMultilinkWindowSize_Type(Integer32):
    """Custom type fclX25MlpMwMultilinkWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_FclX25MlpMwMultilinkWindowSize_Type.__name__ = "Integer32"
_FclX25MlpMwMultilinkWindowSize_Object = MibTableColumn
fclX25MlpMwMultilinkWindowSize = _FclX25MlpMwMultilinkWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 2, 1, 2),
    _FclX25MlpMwMultilinkWindowSize_Type()
)
fclX25MlpMwMultilinkWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpMwMultilinkWindowSize.setStatus("mandatory")


class _FclX25MlpRxMlpMxWinGuardRegion_Type(Integer32):
    """Custom type fclX25MlpRxMlpMxWinGuardRegion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_FclX25MlpRxMlpMxWinGuardRegion_Type.__name__ = "Integer32"
_FclX25MlpRxMlpMxWinGuardRegion_Object = MibTableColumn
fclX25MlpRxMlpMxWinGuardRegion = _FclX25MlpRxMlpMxWinGuardRegion_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 2, 1, 3),
    _FclX25MlpRxMlpMxWinGuardRegion_Type()
)
fclX25MlpRxMlpMxWinGuardRegion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpRxMlpMxWinGuardRegion.setStatus("mandatory")


class _FclX25MlpMt1LostFrameTimer_Type(Integer32):
    """Custom type fclX25MlpMt1LostFrameTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FclX25MlpMt1LostFrameTimer_Type.__name__ = "Integer32"
_FclX25MlpMt1LostFrameTimer_Object = MibTableColumn
fclX25MlpMt1LostFrameTimer = _FclX25MlpMt1LostFrameTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 2, 1, 4),
    _FclX25MlpMt1LostFrameTimer_Type()
)
fclX25MlpMt1LostFrameTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpMt1LostFrameTimer.setStatus("mandatory")


class _FclX25MlpMt3ResetConfirmationTimer_Type(Integer32):
    """Custom type fclX25MlpMt3ResetConfirmationTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FclX25MlpMt3ResetConfirmationTimer_Type.__name__ = "Integer32"
_FclX25MlpMt3ResetConfirmationTimer_Object = MibTableColumn
fclX25MlpMt3ResetConfirmationTimer = _FclX25MlpMt3ResetConfirmationTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 2, 1, 5),
    _FclX25MlpMt3ResetConfirmationTimer_Type()
)
fclX25MlpMt3ResetConfirmationTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpMt3ResetConfirmationTimer.setStatus("mandatory")


class _FclX25MlpMt4DownLinkDetectionTimer_Type(Integer32):
    """Custom type fclX25MlpMt4DownLinkDetectionTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FclX25MlpMt4DownLinkDetectionTimer_Type.__name__ = "Integer32"
_FclX25MlpMt4DownLinkDetectionTimer_Object = MibTableColumn
fclX25MlpMt4DownLinkDetectionTimer = _FclX25MlpMt4DownLinkDetectionTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 2, 1, 6),
    _FclX25MlpMt4DownLinkDetectionTimer_Type()
)
fclX25MlpMt4DownLinkDetectionTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpMt4DownLinkDetectionTimer.setStatus("mandatory")


class _FclX25MlpFramesMaxCountByLink_Type(Integer32):
    """Custom type fclX25MlpFramesMaxCountByLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FclX25MlpFramesMaxCountByLink_Type.__name__ = "Integer32"
_FclX25MlpFramesMaxCountByLink_Object = MibTableColumn
fclX25MlpFramesMaxCountByLink = _FclX25MlpFramesMaxCountByLink_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 2, 1, 7),
    _FclX25MlpFramesMaxCountByLink_Type()
)
fclX25MlpFramesMaxCountByLink.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpFramesMaxCountByLink.setStatus("mandatory")


class _FclX25MlpRestartTxAfterResetRx_Type(Integer32):
    """Custom type fclX25MlpRestartTxAfterResetRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclX25MlpRestartTxAfterResetRx_Type.__name__ = "Integer32"
_FclX25MlpRestartTxAfterResetRx_Object = MibTableColumn
fclX25MlpRestartTxAfterResetRx = _FclX25MlpRestartTxAfterResetRx_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 2, 1, 8),
    _FclX25MlpRestartTxAfterResetRx_Type()
)
fclX25MlpRestartTxAfterResetRx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpRestartTxAfterResetRx.setStatus("mandatory")


class _FclX25MlpTns3Level3CheckTimer_Type(Integer32):
    """Custom type fclX25MlpTns3Level3CheckTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FclX25MlpTns3Level3CheckTimer_Type.__name__ = "Integer32"
_FclX25MlpTns3Level3CheckTimer_Object = MibTableColumn
fclX25MlpTns3Level3CheckTimer = _FclX25MlpTns3Level3CheckTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 2, 1, 9),
    _FclX25MlpTns3Level3CheckTimer_Type()
)
fclX25MlpTns3Level3CheckTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpTns3Level3CheckTimer.setStatus("mandatory")
_FclX25MlpOverflowTable_Object = MibTable
fclX25MlpOverflowTable = _FclX25MlpOverflowTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 3)
)
if mibBuilder.loadTexts:
    fclX25MlpOverflowTable.setStatus("mandatory")
_FclX25MlpOverflowEntry_Object = MibTableRow
fclX25MlpOverflowEntry = _FclX25MlpOverflowEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 3, 1)
)
fclX25MlpOverflowEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25MlpOvLogPortId"),
)
if mibBuilder.loadTexts:
    fclX25MlpOverflowEntry.setStatus("mandatory")


class _FclX25MlpOvLogPortId_Type(Integer32):
    """Custom type fclX25MlpOvLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25MlpOvLogPortId_Type.__name__ = "Integer32"
_FclX25MlpOvLogPortId_Object = MibTableColumn
fclX25MlpOvLogPortId = _FclX25MlpOvLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 3, 1, 1),
    _FclX25MlpOvLogPortId_Type()
)
fclX25MlpOvLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25MlpOvLogPortId.setStatus("mandatory")


class _FclX25MlpOvMeasureCount_Type(Integer32):
    """Custom type fclX25MlpOvMeasureCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 249),
    )


_FclX25MlpOvMeasureCount_Type.__name__ = "Integer32"
_FclX25MlpOvMeasureCount_Object = MibTableColumn
fclX25MlpOvMeasureCount = _FclX25MlpOvMeasureCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 3, 1, 2),
    _FclX25MlpOvMeasureCount_Type()
)
fclX25MlpOvMeasureCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpOvMeasureCount.setStatus("mandatory")


class _FclX25MlpOvOverflowThreshold_Type(Integer32):
    """Custom type fclX25MlpOvOverflowThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FclX25MlpOvOverflowThreshold_Type.__name__ = "Integer32"
_FclX25MlpOvOverflowThreshold_Object = MibTableColumn
fclX25MlpOvOverflowThreshold = _FclX25MlpOvOverflowThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 3, 1, 3),
    _FclX25MlpOvOverflowThreshold_Type()
)
fclX25MlpOvOverflowThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpOvOverflowThreshold.setStatus("mandatory")


class _FclX25MlpOvOverflowBackThreshold_Type(Integer32):
    """Custom type fclX25MlpOvOverflowBackThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FclX25MlpOvOverflowBackThreshold_Type.__name__ = "Integer32"
_FclX25MlpOvOverflowBackThreshold_Object = MibTableColumn
fclX25MlpOvOverflowBackThreshold = _FclX25MlpOvOverflowBackThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 3, 1, 4),
    _FclX25MlpOvOverflowBackThreshold_Type()
)
fclX25MlpOvOverflowBackThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpOvOverflowBackThreshold.setStatus("mandatory")
_FclX25MlpIsdnOverflowTable_Object = MibTable
fclX25MlpIsdnOverflowTable = _FclX25MlpIsdnOverflowTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 4)
)
if mibBuilder.loadTexts:
    fclX25MlpIsdnOverflowTable.setStatus("mandatory")
_FclX25MlpIsdnOverflowEntry_Object = MibTableRow
fclX25MlpIsdnOverflowEntry = _FclX25MlpIsdnOverflowEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 4, 1)
)
fclX25MlpIsdnOverflowEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25MlpIsdnOverLogPortId"),
    (0, "PCE-MIB", "fclX25MlpIsdnOverIsdnInterfaceId"),
)
if mibBuilder.loadTexts:
    fclX25MlpIsdnOverflowEntry.setStatus("mandatory")


class _FclX25MlpIsdnOverLogPortId_Type(Integer32):
    """Custom type fclX25MlpIsdnOverLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25MlpIsdnOverLogPortId_Type.__name__ = "Integer32"
_FclX25MlpIsdnOverLogPortId_Object = MibTableColumn
fclX25MlpIsdnOverLogPortId = _FclX25MlpIsdnOverLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 4, 1, 1),
    _FclX25MlpIsdnOverLogPortId_Type()
)
fclX25MlpIsdnOverLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25MlpIsdnOverLogPortId.setStatus("mandatory")


class _FclX25MlpIsdnOverIsdnInterfaceId_Type(Integer32):
    """Custom type fclX25MlpIsdnOverIsdnInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclX25MlpIsdnOverIsdnInterfaceId_Type.__name__ = "Integer32"
_FclX25MlpIsdnOverIsdnInterfaceId_Object = MibTableColumn
fclX25MlpIsdnOverIsdnInterfaceId = _FclX25MlpIsdnOverIsdnInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 4, 1, 2),
    _FclX25MlpIsdnOverIsdnInterfaceId_Type()
)
fclX25MlpIsdnOverIsdnInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25MlpIsdnOverIsdnInterfaceId.setStatus("mandatory")


class _FclX25MlpIsdnOverStatus_Type(Integer32):
    """Custom type fclX25MlpIsdnOverStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclX25MlpIsdnOverStatus_Type.__name__ = "Integer32"
_FclX25MlpIsdnOverStatus_Object = MibTableColumn
fclX25MlpIsdnOverStatus = _FclX25MlpIsdnOverStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 4, 1, 3),
    _FclX25MlpIsdnOverStatus_Type()
)
fclX25MlpIsdnOverStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpIsdnOverStatus.setStatus("mandatory")


class _FclX25MlpIsdnOverBChannelCount_Type(Integer32):
    """Custom type fclX25MlpIsdnOverBChannelCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30),
    )


_FclX25MlpIsdnOverBChannelCount_Type.__name__ = "Integer32"
_FclX25MlpIsdnOverBChannelCount_Object = MibTableColumn
fclX25MlpIsdnOverBChannelCount = _FclX25MlpIsdnOverBChannelCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 4, 1, 4),
    _FclX25MlpIsdnOverBChannelCount_Type()
)
fclX25MlpIsdnOverBChannelCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpIsdnOverBChannelCount.setStatus("mandatory")
_FclX25MlpIsdnRemotePeerTable_Object = MibTable
fclX25MlpIsdnRemotePeerTable = _FclX25MlpIsdnRemotePeerTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 5)
)
if mibBuilder.loadTexts:
    fclX25MlpIsdnRemotePeerTable.setStatus("mandatory")
_FclX25MlpIsdnRemotePeerEntry_Object = MibTableRow
fclX25MlpIsdnRemotePeerEntry = _FclX25MlpIsdnRemotePeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 5, 1)
)
fclX25MlpIsdnRemotePeerEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25MlpIsdnRemLogPortId"),
    (0, "PCE-MIB", "fclX25MlpIsdnRemPeerId"),
)
if mibBuilder.loadTexts:
    fclX25MlpIsdnRemotePeerEntry.setStatus("mandatory")


class _FclX25MlpIsdnRemLogPortId_Type(Integer32):
    """Custom type fclX25MlpIsdnRemLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25MlpIsdnRemLogPortId_Type.__name__ = "Integer32"
_FclX25MlpIsdnRemLogPortId_Object = MibTableColumn
fclX25MlpIsdnRemLogPortId = _FclX25MlpIsdnRemLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 5, 1, 1),
    _FclX25MlpIsdnRemLogPortId_Type()
)
fclX25MlpIsdnRemLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25MlpIsdnRemLogPortId.setStatus("mandatory")


class _FclX25MlpIsdnRemPeerId_Type(Integer32):
    """Custom type fclX25MlpIsdnRemPeerId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 249),
    )


_FclX25MlpIsdnRemPeerId_Type.__name__ = "Integer32"
_FclX25MlpIsdnRemPeerId_Object = MibTableColumn
fclX25MlpIsdnRemPeerId = _FclX25MlpIsdnRemPeerId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 5, 1, 2),
    _FclX25MlpIsdnRemPeerId_Type()
)
fclX25MlpIsdnRemPeerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25MlpIsdnRemPeerId.setStatus("mandatory")


class _FclX25MlpIsdnRemStatus_Type(Integer32):
    """Custom type fclX25MlpIsdnRemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclX25MlpIsdnRemStatus_Type.__name__ = "Integer32"
_FclX25MlpIsdnRemStatus_Object = MibTableColumn
fclX25MlpIsdnRemStatus = _FclX25MlpIsdnRemStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 5, 1, 3),
    _FclX25MlpIsdnRemStatus_Type()
)
fclX25MlpIsdnRemStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpIsdnRemStatus.setStatus("mandatory")


class _FclX25MlpIsdnRemPriority_Type(Integer32):
    """Custom type fclX25MlpIsdnRemPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_FclX25MlpIsdnRemPriority_Type.__name__ = "Integer32"
_FclX25MlpIsdnRemPriority_Object = MibTableColumn
fclX25MlpIsdnRemPriority = _FclX25MlpIsdnRemPriority_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 5, 1, 4),
    _FclX25MlpIsdnRemPriority_Type()
)
fclX25MlpIsdnRemPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpIsdnRemPriority.setStatus("mandatory")


class _FclX25MlpIsdnRemCallRetryCount_Type(Integer32):
    """Custom type fclX25MlpIsdnRemCallRetryCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_FclX25MlpIsdnRemCallRetryCount_Type.__name__ = "Integer32"
_FclX25MlpIsdnRemCallRetryCount_Object = MibTableColumn
fclX25MlpIsdnRemCallRetryCount = _FclX25MlpIsdnRemCallRetryCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 5, 1, 5),
    _FclX25MlpIsdnRemCallRetryCount_Type()
)
fclX25MlpIsdnRemCallRetryCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpIsdnRemCallRetryCount.setStatus("mandatory")
_FclX25MlpPstnOverflowTable_Object = MibTable
fclX25MlpPstnOverflowTable = _FclX25MlpPstnOverflowTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 6)
)
if mibBuilder.loadTexts:
    fclX25MlpPstnOverflowTable.setStatus("mandatory")
_FclX25MlpPstnOverflowEntry_Object = MibTableRow
fclX25MlpPstnOverflowEntry = _FclX25MlpPstnOverflowEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 6, 1)
)
fclX25MlpPstnOverflowEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25MlpPstnOvLogPortId"),
)
if mibBuilder.loadTexts:
    fclX25MlpPstnOverflowEntry.setStatus("mandatory")


class _FclX25MlpPstnOvLogPortId_Type(Integer32):
    """Custom type fclX25MlpPstnOvLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25MlpPstnOvLogPortId_Type.__name__ = "Integer32"
_FclX25MlpPstnOvLogPortId_Object = MibTableColumn
fclX25MlpPstnOvLogPortId = _FclX25MlpPstnOvLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 6, 1, 1),
    _FclX25MlpPstnOvLogPortId_Type()
)
fclX25MlpPstnOvLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25MlpPstnOvLogPortId.setStatus("mandatory")


class _FclX25MlpPstnOvStatus_Type(Integer32):
    """Custom type fclX25MlpPstnOvStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclX25MlpPstnOvStatus_Type.__name__ = "Integer32"
_FclX25MlpPstnOvStatus_Object = MibTableColumn
fclX25MlpPstnOvStatus = _FclX25MlpPstnOvStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 6, 1, 2),
    _FclX25MlpPstnOvStatus_Type()
)
fclX25MlpPstnOvStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpPstnOvStatus.setStatus("mandatory")


class _FclX25MlpPstnOvInterfaceId_Type(Integer32):
    """Custom type fclX25MlpPstnOvInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclX25MlpPstnOvInterfaceId_Type.__name__ = "Integer32"
_FclX25MlpPstnOvInterfaceId_Object = MibTableColumn
fclX25MlpPstnOvInterfaceId = _FclX25MlpPstnOvInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 6, 1, 3),
    _FclX25MlpPstnOvInterfaceId_Type()
)
fclX25MlpPstnOvInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpPstnOvInterfaceId.setStatus("mandatory")


class _FclX25MlpPstnOvPstnNumber_Type(OctetString):
    """Custom type fclX25MlpPstnOvPstnNumber based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(14, 14),
    )


_FclX25MlpPstnOvPstnNumber_Type.__name__ = "OctetString"
_FclX25MlpPstnOvPstnNumber_Object = MibTableColumn
fclX25MlpPstnOvPstnNumber = _FclX25MlpPstnOvPstnNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 6, 1, 4),
    _FclX25MlpPstnOvPstnNumber_Type()
)
fclX25MlpPstnOvPstnNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25MlpPstnOvPstnNumber.setStatus("mandatory")
_FclPointToPointProtocol_ObjectIdentity = ObjectIdentity
fclPointToPointProtocol = _FclPointToPointProtocol_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30)
)
_FclPppSerialLinkAccess_ObjectIdentity = ObjectIdentity
fclPppSerialLinkAccess = _FclPppSerialLinkAccess_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1)
)
_FclPppSerialLogPortTable_Object = MibTable
fclPppSerialLogPortTable = _FclPppSerialLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 1)
)
if mibBuilder.loadTexts:
    fclPppSerialLogPortTable.setStatus("mandatory")
_FclPppSerialLogPortEntry_Object = MibTableRow
fclPppSerialLogPortEntry = _FclPppSerialLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 1, 1)
)
fclPppSerialLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "fclPppSerLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclPppSerialLogPortEntry.setStatus("mandatory")


class _FclPppSerLpLogPortId_Type(Integer32):
    """Custom type fclPppSerLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclPppSerLpLogPortId_Type.__name__ = "Integer32"
_FclPppSerLpLogPortId_Object = MibTableColumn
fclPppSerLpLogPortId = _FclPppSerLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 1, 1, 1),
    _FclPppSerLpLogPortId_Type()
)
fclPppSerLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclPppSerLpLogPortId.setStatus("mandatory")


class _FclPppSerLpInterfaceId_Type(Integer32):
    """Custom type fclPppSerLpInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclPppSerLpInterfaceId_Type.__name__ = "Integer32"
_FclPppSerLpInterfaceId_Object = MibTableColumn
fclPppSerLpInterfaceId = _FclPppSerLpInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 1, 1, 2),
    _FclPppSerLpInterfaceId_Type()
)
fclPppSerLpInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppSerLpInterfaceId.setStatus("mandatory")


class _FclPppSerLpLocalSubscriberNb_Type(OctetString):
    """Custom type fclPppSerLpLocalSubscriberNb based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FclPppSerLpLocalSubscriberNb_Type.__name__ = "OctetString"
_FclPppSerLpLocalSubscriberNb_Object = MibTableColumn
fclPppSerLpLocalSubscriberNb = _FclPppSerLpLocalSubscriberNb_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 1, 1, 3),
    _FclPppSerLpLocalSubscriberNb_Type()
)
fclPppSerLpLocalSubscriberNb.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppSerLpLocalSubscriberNb.setStatus("mandatory")


class _FclPppSerLpConfigId_Type(Integer32):
    """Custom type fclPppSerLpConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclPppSerLpConfigId_Type.__name__ = "Integer32"
_FclPppSerLpConfigId_Object = MibTableColumn
fclPppSerLpConfigId = _FclPppSerLpConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 1, 1, 10),
    _FclPppSerLpConfigId_Type()
)
fclPppSerLpConfigId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppSerLpConfigId.setStatus("mandatory")


class _FclPppSerLpCos_Type(Integer32):
    """Custom type fclPppSerLpCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ubr", 3),
          ("vbr", 1))
    )


_FclPppSerLpCos_Type.__name__ = "Integer32"
_FclPppSerLpCos_Object = MibTableColumn
fclPppSerLpCos = _FclPppSerLpCos_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 1, 1, 20),
    _FclPppSerLpCos_Type()
)
fclPppSerLpCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppSerLpCos.setStatus("mandatory")


class _FclPppSerLpCir_Type(Integer32):
    """Custom type fclPppSerLpCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(600, 2048000),
    )


_FclPppSerLpCir_Type.__name__ = "Integer32"
_FclPppSerLpCir_Object = MibTableColumn
fclPppSerLpCir = _FclPppSerLpCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 1, 1, 21),
    _FclPppSerLpCir_Type()
)
fclPppSerLpCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppSerLpCir.setStatus("mandatory")


class _FclPppSerLpMinCir_Type(Integer32):
    """Custom type fclPppSerLpMinCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FclPppSerLpMinCir_Type.__name__ = "Integer32"
_FclPppSerLpMinCir_Object = MibTableColumn
fclPppSerLpMinCir = _FclPppSerLpMinCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 1, 1, 22),
    _FclPppSerLpMinCir_Type()
)
fclPppSerLpMinCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppSerLpMinCir.setStatus("mandatory")


class _FclPppSerLpBe_Type(Integer32):
    """Custom type fclPppSerLpBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FclPppSerLpBe_Type.__name__ = "Integer32"
_FclPppSerLpBe_Object = MibTableColumn
fclPppSerLpBe = _FclPppSerLpBe_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 1, 1, 23),
    _FclPppSerLpBe_Type()
)
fclPppSerLpBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppSerLpBe.setStatus("mandatory")
_FclPppSerialAutoCallTable_Object = MibTable
fclPppSerialAutoCallTable = _FclPppSerialAutoCallTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2)
)
if mibBuilder.loadTexts:
    fclPppSerialAutoCallTable.setStatus("mandatory")
_FclPppSerialAutoCallEntry_Object = MibTableRow
fclPppSerialAutoCallEntry = _FclPppSerialAutoCallEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2, 1)
)
fclPppSerialAutoCallEntry.setIndexNames(
    (0, "PCE-MIB", "fclPppSerAutoLogPortId"),
)
if mibBuilder.loadTexts:
    fclPppSerialAutoCallEntry.setStatus("mandatory")


class _FclPppSerAutoLogPortId_Type(Integer32):
    """Custom type fclPppSerAutoLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclPppSerAutoLogPortId_Type.__name__ = "Integer32"
_FclPppSerAutoLogPortId_Object = MibTableColumn
fclPppSerAutoLogPortId = _FclPppSerAutoLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2, 1, 1),
    _FclPppSerAutoLogPortId_Type()
)
fclPppSerAutoLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclPppSerAutoLogPortId.setStatus("mandatory")


class _FclPppSerAutoStatus_Type(Integer32):
    """Custom type fclPppSerAutoStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclPppSerAutoStatus_Type.__name__ = "Integer32"
_FclPppSerAutoStatus_Object = MibTableColumn
fclPppSerAutoStatus = _FclPppSerAutoStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2, 1, 2),
    _FclPppSerAutoStatus_Type()
)
fclPppSerAutoStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppSerAutoStatus.setStatus("mandatory")


class _FclPppSerAutoRemoteAddress_Type(OctetString):
    """Custom type fclPppSerAutoRemoteAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclPppSerAutoRemoteAddress_Type.__name__ = "OctetString"
_FclPppSerAutoRemoteAddress_Object = MibTableColumn
fclPppSerAutoRemoteAddress = _FclPppSerAutoRemoteAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2, 1, 3),
    _FclPppSerAutoRemoteAddress_Type()
)
fclPppSerAutoRemoteAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppSerAutoRemoteAddress.setStatus("mandatory")


class _FclPppSerAutoMinimumRecallTimer_Type(Integer32):
    """Custom type fclPppSerAutoMinimumRecallTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 990),
    )


_FclPppSerAutoMinimumRecallTimer_Type.__name__ = "Integer32"
_FclPppSerAutoMinimumRecallTimer_Object = MibTableColumn
fclPppSerAutoMinimumRecallTimer = _FclPppSerAutoMinimumRecallTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2, 1, 7),
    _FclPppSerAutoMinimumRecallTimer_Type()
)
fclPppSerAutoMinimumRecallTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppSerAutoMinimumRecallTimer.setStatus("mandatory")


class _FclPppSerAutoInactivityTimer_Type(Integer32):
    """Custom type fclPppSerAutoInactivityTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2540),
    )


_FclPppSerAutoInactivityTimer_Type.__name__ = "Integer32"
_FclPppSerAutoInactivityTimer_Object = MibTableColumn
fclPppSerAutoInactivityTimer = _FclPppSerAutoInactivityTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2, 1, 8),
    _FclPppSerAutoInactivityTimer_Type()
)
fclPppSerAutoInactivityTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppSerAutoInactivityTimer.setStatus("mandatory")


class _FclPppSerAutoReliableVc_Type(Integer32):
    """Custom type fclPppSerAutoReliableVc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 3),
          ("on", 2))
    )


_FclPppSerAutoReliableVc_Type.__name__ = "Integer32"
_FclPppSerAutoReliableVc_Object = MibTableColumn
fclPppSerAutoReliableVc = _FclPppSerAutoReliableVc_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2, 1, 10),
    _FclPppSerAutoReliableVc_Type()
)
fclPppSerAutoReliableVc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppSerAutoReliableVc.setStatus("mandatory")


class _FclPppSerAutoCompression_Type(Integer32):
    """Custom type fclPppSerAutoCompression based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bothway", 4),
          ("networkToSubscriber", 2),
          ("off", 1),
          ("subscriberToNetwork", 3))
    )


_FclPppSerAutoCompression_Type.__name__ = "Integer32"
_FclPppSerAutoCompression_Object = MibTableColumn
fclPppSerAutoCompression = _FclPppSerAutoCompression_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2, 1, 11),
    _FclPppSerAutoCompression_Type()
)
fclPppSerAutoCompression.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppSerAutoCompression.setStatus("mandatory")


class _FclPppSerAutoCompressNegotiation_Type(Integer32):
    """Custom type fclPppSerAutoCompressNegotiation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onMandatoryCompression", 3),
          ("onOptionalCompression", 2))
    )


_FclPppSerAutoCompressNegotiation_Type.__name__ = "Integer32"
_FclPppSerAutoCompressNegotiation_Object = MibTableColumn
fclPppSerAutoCompressNegotiation = _FclPppSerAutoCompressNegotiation_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2, 1, 12),
    _FclPppSerAutoCompressNegotiation_Type()
)
fclPppSerAutoCompressNegotiation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppSerAutoCompressNegotiation.setStatus("mandatory")


class _FclPppSerAutoCompressScrambling_Type(Integer32):
    """Custom type fclPppSerAutoCompressScrambling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclPppSerAutoCompressScrambling_Type.__name__ = "Integer32"
_FclPppSerAutoCompressScrambling_Object = MibTableColumn
fclPppSerAutoCompressScrambling = _FclPppSerAutoCompressScrambling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2, 1, 13),
    _FclPppSerAutoCompressScrambling_Type()
)
fclPppSerAutoCompressScrambling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppSerAutoCompressScrambling.setStatus("mandatory")


class _FclPppSerAutoCompressMultiPktTimer_Type(Integer32):
    """Custom type fclPppSerAutoCompressMultiPktTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1500),
    )


_FclPppSerAutoCompressMultiPktTimer_Type.__name__ = "Integer32"
_FclPppSerAutoCompressMultiPktTimer_Object = MibTableColumn
fclPppSerAutoCompressMultiPktTimer = _FclPppSerAutoCompressMultiPktTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2, 1, 14),
    _FclPppSerAutoCompressMultiPktTimer_Type()
)
fclPppSerAutoCompressMultiPktTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppSerAutoCompressMultiPktTimer.setStatus("mandatory")
_FclPppPstnAccess_ObjectIdentity = ObjectIdentity
fclPppPstnAccess = _FclPppPstnAccess_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2)
)
_FclPppPstnLogPortTable_Object = MibTable
fclPppPstnLogPortTable = _FclPppPstnLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2, 1)
)
if mibBuilder.loadTexts:
    fclPppPstnLogPortTable.setStatus("mandatory")
_FclPppPstnLogPortEntry_Object = MibTableRow
fclPppPstnLogPortEntry = _FclPppPstnLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2, 1, 1)
)
fclPppPstnLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "fclPppPstnLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclPppPstnLogPortEntry.setStatus("mandatory")


class _FclPppPstnLpLogPortId_Type(Integer32):
    """Custom type fclPppPstnLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclPppPstnLpLogPortId_Type.__name__ = "Integer32"
_FclPppPstnLpLogPortId_Object = MibTableColumn
fclPppPstnLpLogPortId = _FclPppPstnLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2, 1, 1, 1),
    _FclPppPstnLpLogPortId_Type()
)
fclPppPstnLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclPppPstnLpLogPortId.setStatus("mandatory")


class _FclPppPstnLpInterfaceId_Type(Integer32):
    """Custom type fclPppPstnLpInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclPppPstnLpInterfaceId_Type.__name__ = "Integer32"
_FclPppPstnLpInterfaceId_Object = MibTableColumn
fclPppPstnLpInterfaceId = _FclPppPstnLpInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2, 1, 1, 2),
    _FclPppPstnLpInterfaceId_Type()
)
fclPppPstnLpInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppPstnLpInterfaceId.setStatus("mandatory")


class _FclPppPstnLpLocalSubscriberNb_Type(OctetString):
    """Custom type fclPppPstnLpLocalSubscriberNb based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FclPppPstnLpLocalSubscriberNb_Type.__name__ = "OctetString"
_FclPppPstnLpLocalSubscriberNb_Object = MibTableColumn
fclPppPstnLpLocalSubscriberNb = _FclPppPstnLpLocalSubscriberNb_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2, 1, 1, 3),
    _FclPppPstnLpLocalSubscriberNb_Type()
)
fclPppPstnLpLocalSubscriberNb.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppPstnLpLocalSubscriberNb.setStatus("mandatory")


class _FclPppPstnLpConfigId_Type(Integer32):
    """Custom type fclPppPstnLpConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclPppPstnLpConfigId_Type.__name__ = "Integer32"
_FclPppPstnLpConfigId_Object = MibTableColumn
fclPppPstnLpConfigId = _FclPppPstnLpConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2, 1, 1, 10),
    _FclPppPstnLpConfigId_Type()
)
fclPppPstnLpConfigId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppPstnLpConfigId.setStatus("mandatory")
_FclPppPstnRemotePeerTable_Object = MibTable
fclPppPstnRemotePeerTable = _FclPppPstnRemotePeerTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2, 2)
)
if mibBuilder.loadTexts:
    fclPppPstnRemotePeerTable.setStatus("mandatory")
_FclPppPstnRemotePeerEntry_Object = MibTableRow
fclPppPstnRemotePeerEntry = _FclPppPstnRemotePeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2, 2, 1)
)
fclPppPstnRemotePeerEntry.setIndexNames(
    (0, "PCE-MIB", "fclPppPstnRemX121Addr"),
)
if mibBuilder.loadTexts:
    fclPppPstnRemotePeerEntry.setStatus("mandatory")


class _FclPppPstnRemX121Addr_Type(OctetString):
    """Custom type fclPppPstnRemX121Addr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclPppPstnRemX121Addr_Type.__name__ = "OctetString"
_FclPppPstnRemX121Addr_Object = MibTableColumn
fclPppPstnRemX121Addr = _FclPppPstnRemX121Addr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2, 2, 1, 1),
    _FclPppPstnRemX121Addr_Type()
)
fclPppPstnRemX121Addr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclPppPstnRemX121Addr.setStatus("mandatory")


class _FclPppPstnRemStatus_Type(Integer32):
    """Custom type fclPppPstnRemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclPppPstnRemStatus_Type.__name__ = "Integer32"
_FclPppPstnRemStatus_Object = MibTableColumn
fclPppPstnRemStatus = _FclPppPstnRemStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2, 2, 1, 2),
    _FclPppPstnRemStatus_Type()
)
fclPppPstnRemStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppPstnRemStatus.setStatus("mandatory")


class _FclPppPstnRemPstnNumber_Type(OctetString):
    """Custom type fclPppPstnRemPstnNumber based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(14, 14),
    )


_FclPppPstnRemPstnNumber_Type.__name__ = "OctetString"
_FclPppPstnRemPstnNumber_Object = MibTableColumn
fclPppPstnRemPstnNumber = _FclPppPstnRemPstnNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2, 2, 1, 3),
    _FclPppPstnRemPstnNumber_Type()
)
fclPppPstnRemPstnNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppPstnRemPstnNumber.setStatus("mandatory")
_FclPppBIsdnAccess_ObjectIdentity = ObjectIdentity
fclPppBIsdnAccess = _FclPppBIsdnAccess_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3)
)
_FclPppBIsdnLogPortTable_Object = MibTable
fclPppBIsdnLogPortTable = _FclPppBIsdnLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 1)
)
if mibBuilder.loadTexts:
    fclPppBIsdnLogPortTable.setStatus("mandatory")
_FclPppBIsdnLogPortEntry_Object = MibTableRow
fclPppBIsdnLogPortEntry = _FclPppBIsdnLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 1, 1)
)
fclPppBIsdnLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "fclPppBIsdnLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclPppBIsdnLogPortEntry.setStatus("mandatory")


class _FclPppBIsdnLpLogPortId_Type(Integer32):
    """Custom type fclPppBIsdnLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclPppBIsdnLpLogPortId_Type.__name__ = "Integer32"
_FclPppBIsdnLpLogPortId_Object = MibTableColumn
fclPppBIsdnLpLogPortId = _FclPppBIsdnLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 1, 1, 1),
    _FclPppBIsdnLpLogPortId_Type()
)
fclPppBIsdnLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclPppBIsdnLpLogPortId.setStatus("mandatory")


class _FclPppBIsdnLpIsdnInterfaceId_Type(Integer32):
    """Custom type fclPppBIsdnLpIsdnInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclPppBIsdnLpIsdnInterfaceId_Type.__name__ = "Integer32"
_FclPppBIsdnLpIsdnInterfaceId_Object = MibTableColumn
fclPppBIsdnLpIsdnInterfaceId = _FclPppBIsdnLpIsdnInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 1, 1, 2),
    _FclPppBIsdnLpIsdnInterfaceId_Type()
)
fclPppBIsdnLpIsdnInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppBIsdnLpIsdnInterfaceId.setStatus("mandatory")
_FclPppBIsdnLocalBriTable_Object = MibTable
fclPppBIsdnLocalBriTable = _FclPppBIsdnLocalBriTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 2)
)
if mibBuilder.loadTexts:
    fclPppBIsdnLocalBriTable.setStatus("mandatory")
_FclPppBIsdnLocalBriEntry_Object = MibTableRow
fclPppBIsdnLocalBriEntry = _FclPppBIsdnLocalBriEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 2, 1)
)
fclPppBIsdnLocalBriEntry.setIndexNames(
    (0, "PCE-MIB", "fclPppBIsdnBriId"),
)
if mibBuilder.loadTexts:
    fclPppBIsdnLocalBriEntry.setStatus("mandatory")


class _FclPppBIsdnBriId_Type(Integer32):
    """Custom type fclPppBIsdnBriId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclPppBIsdnBriId_Type.__name__ = "Integer32"
_FclPppBIsdnBriId_Object = MibTableColumn
fclPppBIsdnBriId = _FclPppBIsdnBriId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 2, 1, 1),
    _FclPppBIsdnBriId_Type()
)
fclPppBIsdnBriId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclPppBIsdnBriId.setStatus("mandatory")


class _FclPppBIsdnBriStatus_Type(Integer32):
    """Custom type fclPppBIsdnBriStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclPppBIsdnBriStatus_Type.__name__ = "Integer32"
_FclPppBIsdnBriStatus_Object = MibTableColumn
fclPppBIsdnBriStatus = _FclPppBIsdnBriStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 2, 1, 2),
    _FclPppBIsdnBriStatus_Type()
)
fclPppBIsdnBriStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppBIsdnBriStatus.setStatus("mandatory")


class _FclPppBIsdnBriLocalSubsNb1_Type(OctetString):
    """Custom type fclPppBIsdnBriLocalSubsNb1 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FclPppBIsdnBriLocalSubsNb1_Type.__name__ = "OctetString"
_FclPppBIsdnBriLocalSubsNb1_Object = MibTableColumn
fclPppBIsdnBriLocalSubsNb1 = _FclPppBIsdnBriLocalSubsNb1_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 2, 1, 3),
    _FclPppBIsdnBriLocalSubsNb1_Type()
)
fclPppBIsdnBriLocalSubsNb1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppBIsdnBriLocalSubsNb1.setStatus("mandatory")


class _FclPppBIsdnBriLocalSubsNb2_Type(OctetString):
    """Custom type fclPppBIsdnBriLocalSubsNb2 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FclPppBIsdnBriLocalSubsNb2_Type.__name__ = "OctetString"
_FclPppBIsdnBriLocalSubsNb2_Object = MibTableColumn
fclPppBIsdnBriLocalSubsNb2 = _FclPppBIsdnBriLocalSubsNb2_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 2, 1, 4),
    _FclPppBIsdnBriLocalSubsNb2_Type()
)
fclPppBIsdnBriLocalSubsNb2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppBIsdnBriLocalSubsNb2.setStatus("mandatory")
_FclPppBIsdnRemotePeerTable_Object = MibTable
fclPppBIsdnRemotePeerTable = _FclPppBIsdnRemotePeerTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 3)
)
if mibBuilder.loadTexts:
    fclPppBIsdnRemotePeerTable.setStatus("mandatory")
_FclPppBIsdnRemotePeerEntry_Object = MibTableRow
fclPppBIsdnRemotePeerEntry = _FclPppBIsdnRemotePeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 3, 1)
)
fclPppBIsdnRemotePeerEntry.setIndexNames(
    (0, "PCE-MIB", "fclPppBIsdnRemX121Addr"),
    (0, "PCE-MIB", "fclPppBIsdnRemPeerId"),
)
if mibBuilder.loadTexts:
    fclPppBIsdnRemotePeerEntry.setStatus("mandatory")


class _FclPppBIsdnRemX121Addr_Type(OctetString):
    """Custom type fclPppBIsdnRemX121Addr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclPppBIsdnRemX121Addr_Type.__name__ = "OctetString"
_FclPppBIsdnRemX121Addr_Object = MibTableColumn
fclPppBIsdnRemX121Addr = _FclPppBIsdnRemX121Addr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 3, 1, 1),
    _FclPppBIsdnRemX121Addr_Type()
)
fclPppBIsdnRemX121Addr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclPppBIsdnRemX121Addr.setStatus("mandatory")


class _FclPppBIsdnRemPeerId_Type(Integer32):
    """Custom type fclPppBIsdnRemPeerId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 999),
    )


_FclPppBIsdnRemPeerId_Type.__name__ = "Integer32"
_FclPppBIsdnRemPeerId_Object = MibTableColumn
fclPppBIsdnRemPeerId = _FclPppBIsdnRemPeerId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 3, 1, 2),
    _FclPppBIsdnRemPeerId_Type()
)
fclPppBIsdnRemPeerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclPppBIsdnRemPeerId.setStatus("mandatory")


class _FclPppBIsdnRemStatus_Type(Integer32):
    """Custom type fclPppBIsdnRemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclPppBIsdnRemStatus_Type.__name__ = "Integer32"
_FclPppBIsdnRemStatus_Object = MibTableColumn
fclPppBIsdnRemStatus = _FclPppBIsdnRemStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 3, 1, 3),
    _FclPppBIsdnRemStatus_Type()
)
fclPppBIsdnRemStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppBIsdnRemStatus.setStatus("mandatory")


class _FclPppBIsdnRemConfigId_Type(Integer32):
    """Custom type fclPppBIsdnRemConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclPppBIsdnRemConfigId_Type.__name__ = "Integer32"
_FclPppBIsdnRemConfigId_Object = MibTableColumn
fclPppBIsdnRemConfigId = _FclPppBIsdnRemConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 3, 1, 4),
    _FclPppBIsdnRemConfigId_Type()
)
fclPppBIsdnRemConfigId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppBIsdnRemConfigId.setStatus("mandatory")


class _FclPppBIsdnRemPriority_Type(Integer32):
    """Custom type fclPppBIsdnRemPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_FclPppBIsdnRemPriority_Type.__name__ = "Integer32"
_FclPppBIsdnRemPriority_Object = MibTableColumn
fclPppBIsdnRemPriority = _FclPppBIsdnRemPriority_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 3, 1, 5),
    _FclPppBIsdnRemPriority_Type()
)
fclPppBIsdnRemPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppBIsdnRemPriority.setStatus("mandatory")


class _FclPppBIsdnRemCallRetryCount_Type(Integer32):
    """Custom type fclPppBIsdnRemCallRetryCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_FclPppBIsdnRemCallRetryCount_Type.__name__ = "Integer32"
_FclPppBIsdnRemCallRetryCount_Object = MibTableColumn
fclPppBIsdnRemCallRetryCount = _FclPppBIsdnRemCallRetryCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 3, 1, 6),
    _FclPppBIsdnRemCallRetryCount_Type()
)
fclPppBIsdnRemCallRetryCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppBIsdnRemCallRetryCount.setStatus("mandatory")


class _FclPppBIsdnRemLinkCheckPeriod_Type(Integer32):
    """Custom type fclPppBIsdnRemLinkCheckPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(200, 50800),
    )


_FclPppBIsdnRemLinkCheckPeriod_Type.__name__ = "Integer32"
_FclPppBIsdnRemLinkCheckPeriod_Object = MibTableColumn
fclPppBIsdnRemLinkCheckPeriod = _FclPppBIsdnRemLinkCheckPeriod_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 3, 1, 7),
    _FclPppBIsdnRemLinkCheckPeriod_Type()
)
fclPppBIsdnRemLinkCheckPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppBIsdnRemLinkCheckPeriod.setStatus("mandatory")


class _FclPppBIsdnRemCheckPeriodCount_Type(Integer32):
    """Custom type fclPppBIsdnRemCheckPeriodCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 250),
    )


_FclPppBIsdnRemCheckPeriodCount_Type.__name__ = "Integer32"
_FclPppBIsdnRemCheckPeriodCount_Object = MibTableColumn
fclPppBIsdnRemCheckPeriodCount = _FclPppBIsdnRemCheckPeriodCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 3, 1, 8),
    _FclPppBIsdnRemCheckPeriodCount_Type()
)
fclPppBIsdnRemCheckPeriodCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppBIsdnRemCheckPeriodCount.setStatus("mandatory")
_FclPppBIsdnLocalPriTable_Object = MibTable
fclPppBIsdnLocalPriTable = _FclPppBIsdnLocalPriTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 4)
)
if mibBuilder.loadTexts:
    fclPppBIsdnLocalPriTable.setStatus("mandatory")
_FclPppBIsdnLocalPriEntry_Object = MibTableRow
fclPppBIsdnLocalPriEntry = _FclPppBIsdnLocalPriEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 4, 1)
)
fclPppBIsdnLocalPriEntry.setIndexNames(
    (0, "PCE-MIB", "fclPppBIsdnPriId"),
)
if mibBuilder.loadTexts:
    fclPppBIsdnLocalPriEntry.setStatus("mandatory")


class _FclPppBIsdnPriId_Type(Integer32):
    """Custom type fclPppBIsdnPriId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclPppBIsdnPriId_Type.__name__ = "Integer32"
_FclPppBIsdnPriId_Object = MibTableColumn
fclPppBIsdnPriId = _FclPppBIsdnPriId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 4, 1, 1),
    _FclPppBIsdnPriId_Type()
)
fclPppBIsdnPriId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclPppBIsdnPriId.setStatus("mandatory")


class _FclPppBIsdnPriStatus_Type(Integer32):
    """Custom type fclPppBIsdnPriStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclPppBIsdnPriStatus_Type.__name__ = "Integer32"
_FclPppBIsdnPriStatus_Object = MibTableColumn
fclPppBIsdnPriStatus = _FclPppBIsdnPriStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 4, 1, 2),
    _FclPppBIsdnPriStatus_Type()
)
fclPppBIsdnPriStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppBIsdnPriStatus.setStatus("mandatory")


class _FclPppBIsdnPriLocalSubs_Type(DisplayString):
    """Custom type fclPppBIsdnPriLocalSubs based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 24),
    )


_FclPppBIsdnPriLocalSubs_Type.__name__ = "DisplayString"
_FclPppBIsdnPriLocalSubs_Object = MibTableColumn
fclPppBIsdnPriLocalSubs = _FclPppBIsdnPriLocalSubs_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 4, 1, 3),
    _FclPppBIsdnPriLocalSubs_Type()
)
fclPppBIsdnPriLocalSubs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppBIsdnPriLocalSubs.setStatus("mandatory")
_FclPppConfig_ObjectIdentity = ObjectIdentity
fclPppConfig = _FclPppConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10)
)
_FclPppConfigurationsTable_Object = MibTable
fclPppConfigurationsTable = _FclPppConfigurationsTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10)
)
if mibBuilder.loadTexts:
    fclPppConfigurationsTable.setStatus("mandatory")
_FclPppConfigurationsEntry_Object = MibTableRow
fclPppConfigurationsEntry = _FclPppConfigurationsEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1)
)
fclPppConfigurationsEntry.setIndexNames(
    (0, "PCE-MIB", "fclPppCfgConfigId"),
)
if mibBuilder.loadTexts:
    fclPppConfigurationsEntry.setStatus("mandatory")


class _FclPppCfgConfigId_Type(Integer32):
    """Custom type fclPppCfgConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclPppCfgConfigId_Type.__name__ = "Integer32"
_FclPppCfgConfigId_Object = MibTableColumn
fclPppCfgConfigId = _FclPppCfgConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 1),
    _FclPppCfgConfigId_Type()
)
fclPppCfgConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclPppCfgConfigId.setStatus("mandatory")


class _FclPppCfgStatus_Type(Integer32):
    """Custom type fclPppCfgStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclPppCfgStatus_Type.__name__ = "Integer32"
_FclPppCfgStatus_Object = MibTableColumn
fclPppCfgStatus = _FclPppCfgStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 2),
    _FclPppCfgStatus_Type()
)
fclPppCfgStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCfgStatus.setStatus("mandatory")


class _FclPppCfgDescription_Type(DisplayString):
    """Custom type fclPppCfgDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_FclPppCfgDescription_Type.__name__ = "DisplayString"
_FclPppCfgDescription_Object = MibTableColumn
fclPppCfgDescription = _FclPppCfgDescription_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 3),
    _FclPppCfgDescription_Type()
)
fclPppCfgDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCfgDescription.setStatus("mandatory")


class _FclPppCfgLcpMagicNumber_Type(Integer32):
    """Custom type fclPppCfgLcpMagicNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclPppCfgLcpMagicNumber_Type.__name__ = "Integer32"
_FclPppCfgLcpMagicNumber_Object = MibTableColumn
fclPppCfgLcpMagicNumber = _FclPppCfgLcpMagicNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 10),
    _FclPppCfgLcpMagicNumber_Type()
)
fclPppCfgLcpMagicNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCfgLcpMagicNumber.setStatus("mandatory")


class _FclPppCfgLcpLocalMru_Type(Integer32):
    """Custom type fclPppCfgLcpLocalMru based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("mru100", 1),
          ("mru1000", 10),
          ("mru1100", 11),
          ("mru1200", 12),
          ("mru1300", 13),
          ("mru1400", 14),
          ("mru1500", 15),
          ("mru1600", 16),
          ("mru200", 2),
          ("mru300", 3),
          ("mru400", 4),
          ("mru500", 5),
          ("mru600", 6),
          ("mru700", 7),
          ("mru800", 8),
          ("mru900", 9))
    )


_FclPppCfgLcpLocalMru_Type.__name__ = "Integer32"
_FclPppCfgLcpLocalMru_Object = MibTableColumn
fclPppCfgLcpLocalMru = _FclPppCfgLcpLocalMru_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 11),
    _FclPppCfgLcpLocalMru_Type()
)
fclPppCfgLcpLocalMru.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCfgLcpLocalMru.setStatus("mandatory")


class _FclPppCfgLcpLocalMtu_Type(Integer32):
    """Custom type fclPppCfgLcpLocalMtu based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("mtu100", 1),
          ("mtu1000", 10),
          ("mtu1100", 11),
          ("mtu1200", 12),
          ("mtu1300", 13),
          ("mtu1400", 14),
          ("mtu1500", 15),
          ("mtu1600", 16),
          ("mtu200", 2),
          ("mtu300", 3),
          ("mtu400", 4),
          ("mtu500", 5),
          ("mtu600", 6),
          ("mtu700", 7),
          ("mtu800", 8),
          ("mtu900", 9))
    )


_FclPppCfgLcpLocalMtu_Type.__name__ = "Integer32"
_FclPppCfgLcpLocalMtu_Object = MibTableColumn
fclPppCfgLcpLocalMtu = _FclPppCfgLcpLocalMtu_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 12),
    _FclPppCfgLcpLocalMtu_Type()
)
fclPppCfgLcpLocalMtu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCfgLcpLocalMtu.setStatus("mandatory")


class _FclPppCfgNcpBridge_Type(Integer32):
    """Custom type fclPppCfgNcpBridge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclPppCfgNcpBridge_Type.__name__ = "Integer32"
_FclPppCfgNcpBridge_Object = MibTableColumn
fclPppCfgNcpBridge = _FclPppCfgNcpBridge_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 20),
    _FclPppCfgNcpBridge_Type()
)
fclPppCfgNcpBridge.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCfgNcpBridge.setStatus("mandatory")


class _FclPppCfgNcpIp_Type(Integer32):
    """Custom type fclPppCfgNcpIp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclPppCfgNcpIp_Type.__name__ = "Integer32"
_FclPppCfgNcpIp_Object = MibTableColumn
fclPppCfgNcpIp = _FclPppCfgNcpIp_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 25),
    _FclPppCfgNcpIp_Type()
)
fclPppCfgNcpIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCfgNcpIp.setStatus("mandatory")


class _FclPppCfgNcpIpx_Type(Integer32):
    """Custom type fclPppCfgNcpIpx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclPppCfgNcpIpx_Type.__name__ = "Integer32"
_FclPppCfgNcpIpx_Object = MibTableColumn
fclPppCfgNcpIpx = _FclPppCfgNcpIpx_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 30),
    _FclPppCfgNcpIpx_Type()
)
fclPppCfgNcpIpx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCfgNcpIpx.setStatus("mandatory")


class _FclPppCfgNcpClnp_Type(Integer32):
    """Custom type fclPppCfgNcpClnp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclPppCfgNcpClnp_Type.__name__ = "Integer32"
_FclPppCfgNcpClnp_Object = MibTableColumn
fclPppCfgNcpClnp = _FclPppCfgNcpClnp_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 35),
    _FclPppCfgNcpClnp_Type()
)
fclPppCfgNcpClnp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCfgNcpClnp.setStatus("mandatory")


class _FclPppCfgAuthentication_Type(Integer32):
    """Custom type fclPppCfgAuthentication based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("chap", 3),
          ("off", 1),
          ("pap", 2),
          ("papAndChap", 4))
    )


_FclPppCfgAuthentication_Type.__name__ = "Integer32"
_FclPppCfgAuthentication_Object = MibTableColumn
fclPppCfgAuthentication = _FclPppCfgAuthentication_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 40),
    _FclPppCfgAuthentication_Type()
)
fclPppCfgAuthentication.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCfgAuthentication.setStatus("mandatory")


class _FclPppCfgAuthenticationMode_Type(Integer32):
    """Custom type fclPppCfgAuthenticationMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("master", 1),
          ("masterAndSlave", 3),
          ("slave", 2))
    )


_FclPppCfgAuthenticationMode_Type.__name__ = "Integer32"
_FclPppCfgAuthenticationMode_Object = MibTableColumn
fclPppCfgAuthenticationMode = _FclPppCfgAuthenticationMode_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 41),
    _FclPppCfgAuthenticationMode_Type()
)
fclPppCfgAuthenticationMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCfgAuthenticationMode.setStatus("mandatory")


class _FclPppCfgIpAddrAssignment_Type(Integer32):
    """Custom type fclPppCfgIpAddrAssignment based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("byLocalSubscriber", 2),
          ("byRemotePeer", 3),
          ("off", 1))
    )


_FclPppCfgIpAddrAssignment_Type.__name__ = "Integer32"
_FclPppCfgIpAddrAssignment_Object = MibTableColumn
fclPppCfgIpAddrAssignment = _FclPppCfgIpAddrAssignment_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 42),
    _FclPppCfgIpAddrAssignment_Type()
)
fclPppCfgIpAddrAssignment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCfgIpAddrAssignment.setStatus("mandatory")
_FclPppConfigTimersTable_Object = MibTable
fclPppConfigTimersTable = _FclPppConfigTimersTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 11)
)
if mibBuilder.loadTexts:
    fclPppConfigTimersTable.setStatus("mandatory")
_FclPppConfigTimersEntry_Object = MibTableRow
fclPppConfigTimersEntry = _FclPppConfigTimersEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 11, 1)
)
fclPppConfigTimersEntry.setIndexNames(
    (0, "PCE-MIB", "fclPppCftConfigId"),
)
if mibBuilder.loadTexts:
    fclPppConfigTimersEntry.setStatus("mandatory")


class _FclPppCftConfigId_Type(Integer32):
    """Custom type fclPppCftConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclPppCftConfigId_Type.__name__ = "Integer32"
_FclPppCftConfigId_Object = MibTableColumn
fclPppCftConfigId = _FclPppCftConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 11, 1, 1),
    _FclPppCftConfigId_Type()
)
fclPppCftConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclPppCftConfigId.setStatus("mandatory")


class _FclPppCftLcpEchoRequestPeriod_Type(Integer32):
    """Custom type fclPppCftLcpEchoRequestPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_FclPppCftLcpEchoRequestPeriod_Type.__name__ = "Integer32"
_FclPppCftLcpEchoRequestPeriod_Object = MibTableColumn
fclPppCftLcpEchoRequestPeriod = _FclPppCftLcpEchoRequestPeriod_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 11, 1, 10),
    _FclPppCftLcpEchoRequestPeriod_Type()
)
fclPppCftLcpEchoRequestPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCftLcpEchoRequestPeriod.setStatus("mandatory")


class _FclPppCftConnectionTimer_Type(Integer32):
    """Custom type fclPppCftConnectionTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_FclPppCftConnectionTimer_Type.__name__ = "Integer32"
_FclPppCftConnectionTimer_Object = MibTableColumn
fclPppCftConnectionTimer = _FclPppCftConnectionTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 11, 1, 20),
    _FclPppCftConnectionTimer_Type()
)
fclPppCftConnectionTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCftConnectionTimer.setStatus("mandatory")


class _FclPppCftRestartTimer_Type(Integer32):
    """Custom type fclPppCftRestartTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_FclPppCftRestartTimer_Type.__name__ = "Integer32"
_FclPppCftRestartTimer_Object = MibTableColumn
fclPppCftRestartTimer = _FclPppCftRestartTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 11, 1, 21),
    _FclPppCftRestartTimer_Type()
)
fclPppCftRestartTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCftRestartTimer.setStatus("mandatory")


class _FclPppCftConfigureMaxCount_Type(Integer32):
    """Custom type fclPppCftConfigureMaxCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_FclPppCftConfigureMaxCount_Type.__name__ = "Integer32"
_FclPppCftConfigureMaxCount_Object = MibTableColumn
fclPppCftConfigureMaxCount = _FclPppCftConfigureMaxCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 11, 1, 22),
    _FclPppCftConfigureMaxCount_Type()
)
fclPppCftConfigureMaxCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCftConfigureMaxCount.setStatus("mandatory")


class _FclPppCftTerminateMaxCount_Type(Integer32):
    """Custom type fclPppCftTerminateMaxCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_FclPppCftTerminateMaxCount_Type.__name__ = "Integer32"
_FclPppCftTerminateMaxCount_Object = MibTableColumn
fclPppCftTerminateMaxCount = _FclPppCftTerminateMaxCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 11, 1, 23),
    _FclPppCftTerminateMaxCount_Type()
)
fclPppCftTerminateMaxCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCftTerminateMaxCount.setStatus("mandatory")


class _FclPppCftFailureMaxCount_Type(Integer32):
    """Custom type fclPppCftFailureMaxCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_FclPppCftFailureMaxCount_Type.__name__ = "Integer32"
_FclPppCftFailureMaxCount_Object = MibTableColumn
fclPppCftFailureMaxCount = _FclPppCftFailureMaxCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 11, 1, 24),
    _FclPppCftFailureMaxCount_Type()
)
fclPppCftFailureMaxCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCftFailureMaxCount.setStatus("mandatory")
_FclPppConfigAuthentication_ObjectIdentity = ObjectIdentity
fclPppConfigAuthentication = _FclPppConfigAuthentication_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 20)
)


class _FclPppCfaLocalIdentifier_Type(DisplayString):
    """Custom type fclPppCfaLocalIdentifier based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_FclPppCfaLocalIdentifier_Type.__name__ = "DisplayString"
_FclPppCfaLocalIdentifier_Object = MibScalar
fclPppCfaLocalIdentifier = _FclPppCfaLocalIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 20, 1),
    _FclPppCfaLocalIdentifier_Type()
)
fclPppCfaLocalIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCfaLocalIdentifier.setStatus("mandatory")


class _FclPppCfaLocalPassword_Type(DisplayString):
    """Custom type fclPppCfaLocalPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_FclPppCfaLocalPassword_Type.__name__ = "DisplayString"
_FclPppCfaLocalPassword_Object = MibScalar
fclPppCfaLocalPassword = _FclPppCfaLocalPassword_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 20, 2),
    _FclPppCfaLocalPassword_Type()
)
fclPppCfaLocalPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCfaLocalPassword.setStatus("mandatory")
_FclPppCfaRemotePeerTable_Object = MibTable
fclPppCfaRemotePeerTable = _FclPppCfaRemotePeerTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 20, 10)
)
if mibBuilder.loadTexts:
    fclPppCfaRemotePeerTable.setStatus("mandatory")
_FclPppCfaRemotePeerEntry_Object = MibTableRow
fclPppCfaRemotePeerEntry = _FclPppCfaRemotePeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 20, 10, 1)
)
fclPppCfaRemotePeerEntry.setIndexNames(
    (0, "PCE-MIB", "fclPppCfaRemPeerId"),
)
if mibBuilder.loadTexts:
    fclPppCfaRemotePeerEntry.setStatus("mandatory")


class _FclPppCfaRemPeerId_Type(Integer32):
    """Custom type fclPppCfaRemPeerId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 249),
    )


_FclPppCfaRemPeerId_Type.__name__ = "Integer32"
_FclPppCfaRemPeerId_Object = MibTableColumn
fclPppCfaRemPeerId = _FclPppCfaRemPeerId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 20, 10, 1, 1),
    _FclPppCfaRemPeerId_Type()
)
fclPppCfaRemPeerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclPppCfaRemPeerId.setStatus("mandatory")


class _FclPppCfaRemStatus_Type(Integer32):
    """Custom type fclPppCfaRemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclPppCfaRemStatus_Type.__name__ = "Integer32"
_FclPppCfaRemStatus_Object = MibTableColumn
fclPppCfaRemStatus = _FclPppCfaRemStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 20, 10, 1, 2),
    _FclPppCfaRemStatus_Type()
)
fclPppCfaRemStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCfaRemStatus.setStatus("mandatory")


class _FclPppCfaRemIdentifier_Type(DisplayString):
    """Custom type fclPppCfaRemIdentifier based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_FclPppCfaRemIdentifier_Type.__name__ = "DisplayString"
_FclPppCfaRemIdentifier_Object = MibTableColumn
fclPppCfaRemIdentifier = _FclPppCfaRemIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 20, 10, 1, 3),
    _FclPppCfaRemIdentifier_Type()
)
fclPppCfaRemIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCfaRemIdentifier.setStatus("mandatory")


class _FclPppCfaRemPassword_Type(DisplayString):
    """Custom type fclPppCfaRemPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 16),
    )


_FclPppCfaRemPassword_Type.__name__ = "DisplayString"
_FclPppCfaRemPassword_Object = MibTableColumn
fclPppCfaRemPassword = _FclPppCfaRemPassword_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 20, 10, 1, 4),
    _FclPppCfaRemPassword_Type()
)
fclPppCfaRemPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclPppCfaRemPassword.setStatus("mandatory")
_FclFrameRelay_ObjectIdentity = ObjectIdentity
fclFrameRelay = _FclFrameRelay_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40)
)
_FclFrCommunicationEquipment_ObjectIdentity = ObjectIdentity
fclFrCommunicationEquipment = _FclFrCommunicationEquipment_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1)
)
_FclFrCeLogPortTable_Object = MibTable
fclFrCeLogPortTable = _FclFrCeLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 1)
)
if mibBuilder.loadTexts:
    fclFrCeLogPortTable.setStatus("mandatory")
_FclFrCeLogPortEntry_Object = MibTableRow
fclFrCeLogPortEntry = _FclFrCeLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 1, 1)
)
fclFrCeLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrCeLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclFrCeLogPortEntry.setStatus("mandatory")


class _FclFrCeLpLogPortId_Type(Integer32):
    """Custom type fclFrCeLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclFrCeLpLogPortId_Type.__name__ = "Integer32"
_FclFrCeLpLogPortId_Object = MibTableColumn
fclFrCeLpLogPortId = _FclFrCeLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 1, 1, 1),
    _FclFrCeLpLogPortId_Type()
)
fclFrCeLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrCeLpLogPortId.setStatus("mandatory")


class _FclFrCeLpInterfaceId_Type(Integer32):
    """Custom type fclFrCeLpInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclFrCeLpInterfaceId_Type.__name__ = "Integer32"
_FclFrCeLpInterfaceId_Object = MibTableColumn
fclFrCeLpInterfaceId = _FclFrCeLpInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 1, 1, 2),
    _FclFrCeLpInterfaceId_Type()
)
fclFrCeLpInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCeLpInterfaceId.setStatus("mandatory")


class _FclFrCeLpLocalAddress_Type(OctetString):
    """Custom type fclFrCeLpLocalAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclFrCeLpLocalAddress_Type.__name__ = "OctetString"
_FclFrCeLpLocalAddress_Object = MibTableColumn
fclFrCeLpLocalAddress = _FclFrCeLpLocalAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 1, 1, 5),
    _FclFrCeLpLocalAddress_Type()
)
fclFrCeLpLocalAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCeLpLocalAddress.setStatus("mandatory")


class _FclFrCeLpConfigId_Type(Integer32):
    """Custom type fclFrCeLpConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclFrCeLpConfigId_Type.__name__ = "Integer32"
_FclFrCeLpConfigId_Object = MibTableColumn
fclFrCeLpConfigId = _FclFrCeLpConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 1, 1, 10),
    _FclFrCeLpConfigId_Type()
)
fclFrCeLpConfigId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCeLpConfigId.setStatus("mandatory")


class _FclFrCeLpLmi_Type(Integer32):
    """Custom type fclFrCeLpLmi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("lmiNni", 4),
          ("lmiNui", 3),
          ("off", 1))
    )


_FclFrCeLpLmi_Type.__name__ = "Integer32"
_FclFrCeLpLmi_Object = MibTableColumn
fclFrCeLpLmi = _FclFrCeLpLmi_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 1, 1, 11),
    _FclFrCeLpLmi_Type()
)
fclFrCeLpLmi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCeLpLmi.setStatus("mandatory")
_FclFrCeParGenTable_Object = MibTable
fclFrCeParGenTable = _FclFrCeParGenTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 2)
)
if mibBuilder.loadTexts:
    fclFrCeParGenTable.setStatus("mandatory")
_FclFrCeParGenEntry_Object = MibTableRow
fclFrCeParGenEntry = _FclFrCeParGenEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 2, 1)
)
fclFrCeParGenEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrCeParGenLogPortId"),
)
if mibBuilder.loadTexts:
    fclFrCeParGenEntry.setStatus("mandatory")


class _FclFrCeParGenLogPortId_Type(Integer32):
    """Custom type fclFrCeParGenLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclFrCeParGenLogPortId_Type.__name__ = "Integer32"
_FclFrCeParGenLogPortId_Object = MibTableColumn
fclFrCeParGenLogPortId = _FclFrCeParGenLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 2, 1, 1),
    _FclFrCeParGenLogPortId_Type()
)
fclFrCeParGenLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrCeParGenLogPortId.setStatus("mandatory")


class _FclFrCeParGenDlcSetupAlarmThreshold_Type(Integer32):
    """Custom type fclFrCeParGenDlcSetupAlarmThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclFrCeParGenDlcSetupAlarmThreshold_Type.__name__ = "Integer32"
_FclFrCeParGenDlcSetupAlarmThreshold_Object = MibTableColumn
fclFrCeParGenDlcSetupAlarmThreshold = _FclFrCeParGenDlcSetupAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 2, 1, 30),
    _FclFrCeParGenDlcSetupAlarmThreshold_Type()
)
fclFrCeParGenDlcSetupAlarmThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCeParGenDlcSetupAlarmThreshold.setStatus("mandatory")


class _FclFrCeParGenDlcSetupDiscardThreshold_Type(Integer32):
    """Custom type fclFrCeParGenDlcSetupDiscardThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 1100),
    )


_FclFrCeParGenDlcSetupDiscardThreshold_Type.__name__ = "Integer32"
_FclFrCeParGenDlcSetupDiscardThreshold_Object = MibTableColumn
fclFrCeParGenDlcSetupDiscardThreshold = _FclFrCeParGenDlcSetupDiscardThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 2, 1, 31),
    _FclFrCeParGenDlcSetupDiscardThreshold_Type()
)
fclFrCeParGenDlcSetupDiscardThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCeParGenDlcSetupDiscardThreshold.setStatus("mandatory")


class _FclFrCeParGenBookingUbrThreshold_Type(Integer32):
    """Custom type fclFrCeParGenBookingUbrThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FclFrCeParGenBookingUbrThreshold_Type.__name__ = "Integer32"
_FclFrCeParGenBookingUbrThreshold_Object = MibTableColumn
fclFrCeParGenBookingUbrThreshold = _FclFrCeParGenBookingUbrThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 2, 1, 32),
    _FclFrCeParGenBookingUbrThreshold_Type()
)
fclFrCeParGenBookingUbrThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCeParGenBookingUbrThreshold.setStatus("mandatory")


class _FclFrCeParGenBookingVbrRtThreshold_Type(Integer32):
    """Custom type fclFrCeParGenBookingVbrRtThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FclFrCeParGenBookingVbrRtThreshold_Type.__name__ = "Integer32"
_FclFrCeParGenBookingVbrRtThreshold_Object = MibTableColumn
fclFrCeParGenBookingVbrRtThreshold = _FclFrCeParGenBookingVbrRtThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 2, 1, 33),
    _FclFrCeParGenBookingVbrRtThreshold_Type()
)
fclFrCeParGenBookingVbrRtThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCeParGenBookingVbrRtThreshold.setStatus("mandatory")


class _FclFrCeParGenVoiceMaxTransitDelay_Type(Integer32):
    """Custom type fclFrCeParGenVoiceMaxTransitDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclFrCeParGenVoiceMaxTransitDelay_Type.__name__ = "Integer32"
_FclFrCeParGenVoiceMaxTransitDelay_Object = MibTableColumn
fclFrCeParGenVoiceMaxTransitDelay = _FclFrCeParGenVoiceMaxTransitDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 2, 1, 34),
    _FclFrCeParGenVoiceMaxTransitDelay_Type()
)
fclFrCeParGenVoiceMaxTransitDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCeParGenVoiceMaxTransitDelay.setStatus("mandatory")
_FclFrTerminalEquipment_ObjectIdentity = ObjectIdentity
fclFrTerminalEquipment = _FclFrTerminalEquipment_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2)
)
_FclFrTeLogPortTable_Object = MibTable
fclFrTeLogPortTable = _FclFrTeLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1)
)
if mibBuilder.loadTexts:
    fclFrTeLogPortTable.setStatus("mandatory")
_FclFrTeLogPortEntry_Object = MibTableRow
fclFrTeLogPortEntry = _FclFrTeLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1, 1)
)
fclFrTeLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrTeLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclFrTeLogPortEntry.setStatus("mandatory")


class _FclFrTeLpLogPortId_Type(Integer32):
    """Custom type fclFrTeLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclFrTeLpLogPortId_Type.__name__ = "Integer32"
_FclFrTeLpLogPortId_Object = MibTableColumn
fclFrTeLpLogPortId = _FclFrTeLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1, 1, 1),
    _FclFrTeLpLogPortId_Type()
)
fclFrTeLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrTeLpLogPortId.setStatus("mandatory")


class _FclFrTeLpInterfaceId_Type(Integer32):
    """Custom type fclFrTeLpInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclFrTeLpInterfaceId_Type.__name__ = "Integer32"
_FclFrTeLpInterfaceId_Object = MibTableColumn
fclFrTeLpInterfaceId = _FclFrTeLpInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1, 1, 2),
    _FclFrTeLpInterfaceId_Type()
)
fclFrTeLpInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeLpInterfaceId.setStatus("mandatory")


class _FclFrTeLpLocalAddress_Type(OctetString):
    """Custom type fclFrTeLpLocalAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclFrTeLpLocalAddress_Type.__name__ = "OctetString"
_FclFrTeLpLocalAddress_Object = MibTableColumn
fclFrTeLpLocalAddress = _FclFrTeLpLocalAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1, 1, 5),
    _FclFrTeLpLocalAddress_Type()
)
fclFrTeLpLocalAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeLpLocalAddress.setStatus("mandatory")


class _FclFrTeLpConfigId_Type(Integer32):
    """Custom type fclFrTeLpConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclFrTeLpConfigId_Type.__name__ = "Integer32"
_FclFrTeLpConfigId_Object = MibTableColumn
fclFrTeLpConfigId = _FclFrTeLpConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1, 1, 10),
    _FclFrTeLpConfigId_Type()
)
fclFrTeLpConfigId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeLpConfigId.setStatus("mandatory")


class _FclFrTeLpLmi_Type(Integer32):
    """Custom type fclFrTeLpLmi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("lmiNni", 4),
          ("lmiUni", 2),
          ("off", 1))
    )


_FclFrTeLpLmi_Type.__name__ = "Integer32"
_FclFrTeLpLmi_Object = MibTableColumn
fclFrTeLpLmi = _FclFrTeLpLmi_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1, 1, 11),
    _FclFrTeLpLmi_Type()
)
fclFrTeLpLmi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeLpLmi.setStatus("mandatory")


class _FclFrTeLpFragmentation_Type(Integer32):
    """Custom type fclFrTeLpFragmentation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("optimized", 3))
    )


_FclFrTeLpFragmentation_Type.__name__ = "Integer32"
_FclFrTeLpFragmentation_Object = MibTableColumn
fclFrTeLpFragmentation = _FclFrTeLpFragmentation_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1, 1, 20),
    _FclFrTeLpFragmentation_Type()
)
fclFrTeLpFragmentation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeLpFragmentation.setStatus("mandatory")


class _FclFrTeLpLinkLayerConsolidation_Type(Integer32):
    """Custom type fclFrTeLpLinkLayerConsolidation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclFrTeLpLinkLayerConsolidation_Type.__name__ = "Integer32"
_FclFrTeLpLinkLayerConsolidation_Object = MibTableColumn
fclFrTeLpLinkLayerConsolidation = _FclFrTeLpLinkLayerConsolidation_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1, 1, 21),
    _FclFrTeLpLinkLayerConsolidation_Type()
)
fclFrTeLpLinkLayerConsolidation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeLpLinkLayerConsolidation.setStatus("mandatory")


class _FclFrTeLpLogPortBackupEnabling_Type(Integer32):
    """Custom type fclFrTeLpLogPortBackupEnabling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onWhileActivity", 2),
          ("onWhileDlciDown", 3),
          ("onWhileLpDown", 4))
    )


_FclFrTeLpLogPortBackupEnabling_Type.__name__ = "Integer32"
_FclFrTeLpLogPortBackupEnabling_Object = MibTableColumn
fclFrTeLpLogPortBackupEnabling = _FclFrTeLpLogPortBackupEnabling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1, 1, 22),
    _FclFrTeLpLogPortBackupEnabling_Type()
)
fclFrTeLpLogPortBackupEnabling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeLpLogPortBackupEnabling.setStatus("mandatory")


class _FclFrTeLpFragFrameSize_Type(Integer32):
    """Custom type fclFrTeLpFragFrameSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              5,
              9,
              17,
              33,
              65)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("s1024", 9),
          ("s128", 2),
          ("s2048", 17),
          ("s256", 3),
          ("s4096", 33),
          ("s512", 5),
          ("s8192", 65))
    )


_FclFrTeLpFragFrameSize_Type.__name__ = "Integer32"
_FclFrTeLpFragFrameSize_Object = MibTableColumn
fclFrTeLpFragFrameSize = _FclFrTeLpFragFrameSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1, 1, 23),
    _FclFrTeLpFragFrameSize_Type()
)
fclFrTeLpFragFrameSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeLpFragFrameSize.setStatus("mandatory")


class _FclFrTeLpBackupTimer_Type(Integer32):
    """Custom type fclFrTeLpBackupTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2540),
    )


_FclFrTeLpBackupTimer_Type.__name__ = "Integer32"
_FclFrTeLpBackupTimer_Object = MibTableColumn
fclFrTeLpBackupTimer = _FclFrTeLpBackupTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1, 1, 25),
    _FclFrTeLpBackupTimer_Type()
)
fclFrTeLpBackupTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeLpBackupTimer.setStatus("mandatory")
_FclFrTeParGenTable_Object = MibTable
fclFrTeParGenTable = _FclFrTeParGenTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 4)
)
if mibBuilder.loadTexts:
    fclFrTeParGenTable.setStatus("mandatory")
_FclFrTeParGenEntry_Object = MibTableRow
fclFrTeParGenEntry = _FclFrTeParGenEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 4, 1)
)
fclFrTeParGenEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrTeParGenLogPortId"),
)
if mibBuilder.loadTexts:
    fclFrTeParGenEntry.setStatus("mandatory")


class _FclFrTeParGenLogPortId_Type(Integer32):
    """Custom type fclFrTeParGenLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclFrTeParGenLogPortId_Type.__name__ = "Integer32"
_FclFrTeParGenLogPortId_Object = MibTableColumn
fclFrTeParGenLogPortId = _FclFrTeParGenLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 4, 1, 1),
    _FclFrTeParGenLogPortId_Type()
)
fclFrTeParGenLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrTeParGenLogPortId.setStatus("mandatory")


class _FclFrTeParGenDlcSetupAlarmThreshold_Type(Integer32):
    """Custom type fclFrTeParGenDlcSetupAlarmThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclFrTeParGenDlcSetupAlarmThreshold_Type.__name__ = "Integer32"
_FclFrTeParGenDlcSetupAlarmThreshold_Object = MibTableColumn
fclFrTeParGenDlcSetupAlarmThreshold = _FclFrTeParGenDlcSetupAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 4, 1, 30),
    _FclFrTeParGenDlcSetupAlarmThreshold_Type()
)
fclFrTeParGenDlcSetupAlarmThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeParGenDlcSetupAlarmThreshold.setStatus("mandatory")


class _FclFrTeParGenDlcSetupDiscardThreshold_Type(Integer32):
    """Custom type fclFrTeParGenDlcSetupDiscardThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 1100),
    )


_FclFrTeParGenDlcSetupDiscardThreshold_Type.__name__ = "Integer32"
_FclFrTeParGenDlcSetupDiscardThreshold_Object = MibTableColumn
fclFrTeParGenDlcSetupDiscardThreshold = _FclFrTeParGenDlcSetupDiscardThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 4, 1, 31),
    _FclFrTeParGenDlcSetupDiscardThreshold_Type()
)
fclFrTeParGenDlcSetupDiscardThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeParGenDlcSetupDiscardThreshold.setStatus("mandatory")


class _FclFrTeParGenBookingUbrThreshold_Type(Integer32):
    """Custom type fclFrTeParGenBookingUbrThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FclFrTeParGenBookingUbrThreshold_Type.__name__ = "Integer32"
_FclFrTeParGenBookingUbrThreshold_Object = MibTableColumn
fclFrTeParGenBookingUbrThreshold = _FclFrTeParGenBookingUbrThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 4, 1, 32),
    _FclFrTeParGenBookingUbrThreshold_Type()
)
fclFrTeParGenBookingUbrThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeParGenBookingUbrThreshold.setStatus("mandatory")


class _FclFrTeParGenBookingVbrRtThreshold_Type(Integer32):
    """Custom type fclFrTeParGenBookingVbrRtThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FclFrTeParGenBookingVbrRtThreshold_Type.__name__ = "Integer32"
_FclFrTeParGenBookingVbrRtThreshold_Object = MibTableColumn
fclFrTeParGenBookingVbrRtThreshold = _FclFrTeParGenBookingVbrRtThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 4, 1, 33),
    _FclFrTeParGenBookingVbrRtThreshold_Type()
)
fclFrTeParGenBookingVbrRtThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeParGenBookingVbrRtThreshold.setStatus("mandatory")


class _FclFrTeParGenVoiceMaxTransitDelay_Type(Integer32):
    """Custom type fclFrTeParGenVoiceMaxTransitDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclFrTeParGenVoiceMaxTransitDelay_Type.__name__ = "Integer32"
_FclFrTeParGenVoiceMaxTransitDelay_Object = MibTableColumn
fclFrTeParGenVoiceMaxTransitDelay = _FclFrTeParGenVoiceMaxTransitDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 4, 1, 34),
    _FclFrTeParGenVoiceMaxTransitDelay_Type()
)
fclFrTeParGenVoiceMaxTransitDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeParGenVoiceMaxTransitDelay.setStatus("mandatory")


class _FclFrTeParGenDynamicEir_Type(Integer32):
    """Custom type fclFrTeParGenDynamicEir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclFrTeParGenDynamicEir_Type.__name__ = "Integer32"
_FclFrTeParGenDynamicEir_Object = MibTableColumn
fclFrTeParGenDynamicEir = _FclFrTeParGenDynamicEir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 4, 1, 35),
    _FclFrTeParGenDynamicEir_Type()
)
fclFrTeParGenDynamicEir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeParGenDynamicEir.setStatus("mandatory")


class _FclFrTeParGenPredictionRoundTripDelay_Type(Integer32):
    """Custom type fclFrTeParGenPredictionRoundTripDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclFrTeParGenPredictionRoundTripDelay_Type.__name__ = "Integer32"
_FclFrTeParGenPredictionRoundTripDelay_Object = MibTableColumn
fclFrTeParGenPredictionRoundTripDelay = _FclFrTeParGenPredictionRoundTripDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 4, 1, 36),
    _FclFrTeParGenPredictionRoundTripDelay_Type()
)
fclFrTeParGenPredictionRoundTripDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeParGenPredictionRoundTripDelay.setStatus("mandatory")


class _FclFrTeParGenNetworkBandwidth_Type(Integer32):
    """Custom type fclFrTeParGenNetworkBandwidth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 34),
    )


_FclFrTeParGenNetworkBandwidth_Type.__name__ = "Integer32"
_FclFrTeParGenNetworkBandwidth_Object = MibTableColumn
fclFrTeParGenNetworkBandwidth = _FclFrTeParGenNetworkBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 4, 1, 37),
    _FclFrTeParGenNetworkBandwidth_Type()
)
fclFrTeParGenNetworkBandwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeParGenNetworkBandwidth.setStatus("mandatory")
_FclFrTeIsdnBackupTable_Object = MibTable
fclFrTeIsdnBackupTable = _FclFrTeIsdnBackupTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 11)
)
if mibBuilder.loadTexts:
    fclFrTeIsdnBackupTable.setStatus("mandatory")
_FclFrTeIsdnBackupEntry_Object = MibTableRow
fclFrTeIsdnBackupEntry = _FclFrTeIsdnBackupEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 11, 1)
)
fclFrTeIsdnBackupEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrTeIsdnBackLogPortId"),
    (0, "PCE-MIB", "fclFrTeIsdnBackIsdnInterfaceId"),
)
if mibBuilder.loadTexts:
    fclFrTeIsdnBackupEntry.setStatus("mandatory")


class _FclFrTeIsdnBackLogPortId_Type(Integer32):
    """Custom type fclFrTeIsdnBackLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclFrTeIsdnBackLogPortId_Type.__name__ = "Integer32"
_FclFrTeIsdnBackLogPortId_Object = MibTableColumn
fclFrTeIsdnBackLogPortId = _FclFrTeIsdnBackLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 11, 1, 1),
    _FclFrTeIsdnBackLogPortId_Type()
)
fclFrTeIsdnBackLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrTeIsdnBackLogPortId.setStatus("mandatory")


class _FclFrTeIsdnBackIsdnInterfaceId_Type(Integer32):
    """Custom type fclFrTeIsdnBackIsdnInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 249),
    )


_FclFrTeIsdnBackIsdnInterfaceId_Type.__name__ = "Integer32"
_FclFrTeIsdnBackIsdnInterfaceId_Object = MibTableColumn
fclFrTeIsdnBackIsdnInterfaceId = _FclFrTeIsdnBackIsdnInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 11, 1, 2),
    _FclFrTeIsdnBackIsdnInterfaceId_Type()
)
fclFrTeIsdnBackIsdnInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrTeIsdnBackIsdnInterfaceId.setStatus("mandatory")


class _FclFrTeIsdnBackStatus_Type(Integer32):
    """Custom type fclFrTeIsdnBackStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclFrTeIsdnBackStatus_Type.__name__ = "Integer32"
_FclFrTeIsdnBackStatus_Object = MibTableColumn
fclFrTeIsdnBackStatus = _FclFrTeIsdnBackStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 11, 1, 3),
    _FclFrTeIsdnBackStatus_Type()
)
fclFrTeIsdnBackStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeIsdnBackStatus.setStatus("mandatory")
_FclFrTeIsdnRemotePeerTable_Object = MibTable
fclFrTeIsdnRemotePeerTable = _FclFrTeIsdnRemotePeerTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 12)
)
if mibBuilder.loadTexts:
    fclFrTeIsdnRemotePeerTable.setStatus("mandatory")
_FclFrTeIsdnRemotePeerEntry_Object = MibTableRow
fclFrTeIsdnRemotePeerEntry = _FclFrTeIsdnRemotePeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 12, 1)
)
fclFrTeIsdnRemotePeerEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrTeIsdnRemLogPortId"),
    (0, "PCE-MIB", "fclFrTeIsdnRemRemotePeerId"),
)
if mibBuilder.loadTexts:
    fclFrTeIsdnRemotePeerEntry.setStatus("mandatory")


class _FclFrTeIsdnRemLogPortId_Type(Integer32):
    """Custom type fclFrTeIsdnRemLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclFrTeIsdnRemLogPortId_Type.__name__ = "Integer32"
_FclFrTeIsdnRemLogPortId_Object = MibTableColumn
fclFrTeIsdnRemLogPortId = _FclFrTeIsdnRemLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 12, 1, 1),
    _FclFrTeIsdnRemLogPortId_Type()
)
fclFrTeIsdnRemLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrTeIsdnRemLogPortId.setStatus("mandatory")


class _FclFrTeIsdnRemRemotePeerId_Type(Integer32):
    """Custom type fclFrTeIsdnRemRemotePeerId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 249),
    )


_FclFrTeIsdnRemRemotePeerId_Type.__name__ = "Integer32"
_FclFrTeIsdnRemRemotePeerId_Object = MibTableColumn
fclFrTeIsdnRemRemotePeerId = _FclFrTeIsdnRemRemotePeerId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 12, 1, 2),
    _FclFrTeIsdnRemRemotePeerId_Type()
)
fclFrTeIsdnRemRemotePeerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrTeIsdnRemRemotePeerId.setStatus("mandatory")


class _FclFrTeIsdnRemStatus_Type(Integer32):
    """Custom type fclFrTeIsdnRemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclFrTeIsdnRemStatus_Type.__name__ = "Integer32"
_FclFrTeIsdnRemStatus_Object = MibTableColumn
fclFrTeIsdnRemStatus = _FclFrTeIsdnRemStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 12, 1, 3),
    _FclFrTeIsdnRemStatus_Type()
)
fclFrTeIsdnRemStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeIsdnRemStatus.setStatus("mandatory")


class _FclFrTeIsdnRemPriority_Type(Integer32):
    """Custom type fclFrTeIsdnRemPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_FclFrTeIsdnRemPriority_Type.__name__ = "Integer32"
_FclFrTeIsdnRemPriority_Object = MibTableColumn
fclFrTeIsdnRemPriority = _FclFrTeIsdnRemPriority_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 12, 1, 8),
    _FclFrTeIsdnRemPriority_Type()
)
fclFrTeIsdnRemPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeIsdnRemPriority.setStatus("mandatory")


class _FclFrTeIsdnRemCallRetryCount_Type(Integer32):
    """Custom type fclFrTeIsdnRemCallRetryCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_FclFrTeIsdnRemCallRetryCount_Type.__name__ = "Integer32"
_FclFrTeIsdnRemCallRetryCount_Object = MibTableColumn
fclFrTeIsdnRemCallRetryCount = _FclFrTeIsdnRemCallRetryCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 12, 1, 9),
    _FclFrTeIsdnRemCallRetryCount_Type()
)
fclFrTeIsdnRemCallRetryCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeIsdnRemCallRetryCount.setStatus("mandatory")


class _FclFrTeIsdnRemProtocol_Type(Integer32):
    """Custom type fclFrTeIsdnRemProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("frse", 1),
          ("frte", 2),
          ("main-line-protocol", 3))
    )


_FclFrTeIsdnRemProtocol_Type.__name__ = "Integer32"
_FclFrTeIsdnRemProtocol_Object = MibTableColumn
fclFrTeIsdnRemProtocol = _FclFrTeIsdnRemProtocol_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 12, 1, 15),
    _FclFrTeIsdnRemProtocol_Type()
)
fclFrTeIsdnRemProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeIsdnRemProtocol.setStatus("mandatory")


class _FclFrTeIsdnRemConfigId_Type(Integer32):
    """Custom type fclFrTeIsdnRemConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclFrTeIsdnRemConfigId_Type.__name__ = "Integer32"
_FclFrTeIsdnRemConfigId_Object = MibTableColumn
fclFrTeIsdnRemConfigId = _FclFrTeIsdnRemConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 12, 1, 16),
    _FclFrTeIsdnRemConfigId_Type()
)
fclFrTeIsdnRemConfigId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrTeIsdnRemConfigId.setStatus("mandatory")
_FclFrSwitchEquipment_ObjectIdentity = ObjectIdentity
fclFrSwitchEquipment = _FclFrSwitchEquipment_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3)
)
_FclFrSeLogPortTable_Object = MibTable
fclFrSeLogPortTable = _FclFrSeLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 1)
)
if mibBuilder.loadTexts:
    fclFrSeLogPortTable.setStatus("mandatory")
_FclFrSeLogPortEntry_Object = MibTableRow
fclFrSeLogPortEntry = _FclFrSeLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 1, 1)
)
fclFrSeLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrSeLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclFrSeLogPortEntry.setStatus("mandatory")


class _FclFrSeLpLogPortId_Type(Integer32):
    """Custom type fclFrSeLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclFrSeLpLogPortId_Type.__name__ = "Integer32"
_FclFrSeLpLogPortId_Object = MibTableColumn
fclFrSeLpLogPortId = _FclFrSeLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 1, 1, 1),
    _FclFrSeLpLogPortId_Type()
)
fclFrSeLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrSeLpLogPortId.setStatus("mandatory")


class _FclFrSeLpInterfaceId_Type(Integer32):
    """Custom type fclFrSeLpInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclFrSeLpInterfaceId_Type.__name__ = "Integer32"
_FclFrSeLpInterfaceId_Object = MibTableColumn
fclFrSeLpInterfaceId = _FclFrSeLpInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 1, 1, 2),
    _FclFrSeLpInterfaceId_Type()
)
fclFrSeLpInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrSeLpInterfaceId.setStatus("mandatory")


class _FclFrSeLpConfigId_Type(Integer32):
    """Custom type fclFrSeLpConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclFrSeLpConfigId_Type.__name__ = "Integer32"
_FclFrSeLpConfigId_Object = MibTableColumn
fclFrSeLpConfigId = _FclFrSeLpConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 1, 1, 10),
    _FclFrSeLpConfigId_Type()
)
fclFrSeLpConfigId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrSeLpConfigId.setStatus("mandatory")


class _FclFrSeLpLogPortBackupEnabling_Type(Integer32):
    """Custom type fclFrSeLpLogPortBackupEnabling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onWhileActivity", 2),
          ("onWhileLpDown", 3))
    )


_FclFrSeLpLogPortBackupEnabling_Type.__name__ = "Integer32"
_FclFrSeLpLogPortBackupEnabling_Object = MibTableColumn
fclFrSeLpLogPortBackupEnabling = _FclFrSeLpLogPortBackupEnabling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 1, 1, 22),
    _FclFrSeLpLogPortBackupEnabling_Type()
)
fclFrSeLpLogPortBackupEnabling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrSeLpLogPortBackupEnabling.setStatus("mandatory")


class _FclFrSeLpBackupTimer_Type(Integer32):
    """Custom type fclFrSeLpBackupTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2540),
    )


_FclFrSeLpBackupTimer_Type.__name__ = "Integer32"
_FclFrSeLpBackupTimer_Object = MibTableColumn
fclFrSeLpBackupTimer = _FclFrSeLpBackupTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 1, 1, 25),
    _FclFrSeLpBackupTimer_Type()
)
fclFrSeLpBackupTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrSeLpBackupTimer.setStatus("mandatory")
_FclFrSeIsdnBackupTable_Object = MibTable
fclFrSeIsdnBackupTable = _FclFrSeIsdnBackupTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 11)
)
if mibBuilder.loadTexts:
    fclFrSeIsdnBackupTable.setStatus("mandatory")
_FclFrSeIsdnBackupEntry_Object = MibTableRow
fclFrSeIsdnBackupEntry = _FclFrSeIsdnBackupEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 11, 1)
)
fclFrSeIsdnBackupEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrSeIsdnBackLogPortId"),
    (0, "PCE-MIB", "fclFrSeIsdnBackIsdnInterfaceId"),
)
if mibBuilder.loadTexts:
    fclFrSeIsdnBackupEntry.setStatus("mandatory")


class _FclFrSeIsdnBackLogPortId_Type(Integer32):
    """Custom type fclFrSeIsdnBackLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclFrSeIsdnBackLogPortId_Type.__name__ = "Integer32"
_FclFrSeIsdnBackLogPortId_Object = MibTableColumn
fclFrSeIsdnBackLogPortId = _FclFrSeIsdnBackLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 11, 1, 1),
    _FclFrSeIsdnBackLogPortId_Type()
)
fclFrSeIsdnBackLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrSeIsdnBackLogPortId.setStatus("mandatory")


class _FclFrSeIsdnBackIsdnInterfaceId_Type(Integer32):
    """Custom type fclFrSeIsdnBackIsdnInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 249),
    )


_FclFrSeIsdnBackIsdnInterfaceId_Type.__name__ = "Integer32"
_FclFrSeIsdnBackIsdnInterfaceId_Object = MibTableColumn
fclFrSeIsdnBackIsdnInterfaceId = _FclFrSeIsdnBackIsdnInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 11, 1, 2),
    _FclFrSeIsdnBackIsdnInterfaceId_Type()
)
fclFrSeIsdnBackIsdnInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrSeIsdnBackIsdnInterfaceId.setStatus("mandatory")


class _FclFrSeIsdnBackStatus_Type(Integer32):
    """Custom type fclFrSeIsdnBackStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclFrSeIsdnBackStatus_Type.__name__ = "Integer32"
_FclFrSeIsdnBackStatus_Object = MibTableColumn
fclFrSeIsdnBackStatus = _FclFrSeIsdnBackStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 11, 1, 3),
    _FclFrSeIsdnBackStatus_Type()
)
fclFrSeIsdnBackStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrSeIsdnBackStatus.setStatus("mandatory")
_FclFrSeIsdnRemotePeerTable_Object = MibTable
fclFrSeIsdnRemotePeerTable = _FclFrSeIsdnRemotePeerTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 12)
)
if mibBuilder.loadTexts:
    fclFrSeIsdnRemotePeerTable.setStatus("mandatory")
_FclFrSeIsdnRemotePeerEntry_Object = MibTableRow
fclFrSeIsdnRemotePeerEntry = _FclFrSeIsdnRemotePeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 12, 1)
)
fclFrSeIsdnRemotePeerEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrSeIsdnRemLogPortId"),
    (0, "PCE-MIB", "fclFrSeIsdnRemRemotePeerId"),
)
if mibBuilder.loadTexts:
    fclFrSeIsdnRemotePeerEntry.setStatus("mandatory")


class _FclFrSeIsdnRemLogPortId_Type(Integer32):
    """Custom type fclFrSeIsdnRemLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclFrSeIsdnRemLogPortId_Type.__name__ = "Integer32"
_FclFrSeIsdnRemLogPortId_Object = MibTableColumn
fclFrSeIsdnRemLogPortId = _FclFrSeIsdnRemLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 12, 1, 1),
    _FclFrSeIsdnRemLogPortId_Type()
)
fclFrSeIsdnRemLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrSeIsdnRemLogPortId.setStatus("mandatory")


class _FclFrSeIsdnRemRemotePeerId_Type(Integer32):
    """Custom type fclFrSeIsdnRemRemotePeerId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 249),
    )


_FclFrSeIsdnRemRemotePeerId_Type.__name__ = "Integer32"
_FclFrSeIsdnRemRemotePeerId_Object = MibTableColumn
fclFrSeIsdnRemRemotePeerId = _FclFrSeIsdnRemRemotePeerId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 12, 1, 2),
    _FclFrSeIsdnRemRemotePeerId_Type()
)
fclFrSeIsdnRemRemotePeerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrSeIsdnRemRemotePeerId.setStatus("mandatory")


class _FclFrSeIsdnRemStatus_Type(Integer32):
    """Custom type fclFrSeIsdnRemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclFrSeIsdnRemStatus_Type.__name__ = "Integer32"
_FclFrSeIsdnRemStatus_Object = MibTableColumn
fclFrSeIsdnRemStatus = _FclFrSeIsdnRemStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 12, 1, 3),
    _FclFrSeIsdnRemStatus_Type()
)
fclFrSeIsdnRemStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrSeIsdnRemStatus.setStatus("mandatory")


class _FclFrSeIsdnRemConfigId_Type(Integer32):
    """Custom type fclFrSeIsdnRemConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclFrSeIsdnRemConfigId_Type.__name__ = "Integer32"
_FclFrSeIsdnRemConfigId_Object = MibTableColumn
fclFrSeIsdnRemConfigId = _FclFrSeIsdnRemConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 12, 1, 4),
    _FclFrSeIsdnRemConfigId_Type()
)
fclFrSeIsdnRemConfigId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrSeIsdnRemConfigId.setStatus("mandatory")


class _FclFrSeIsdnRemPriority_Type(Integer32):
    """Custom type fclFrSeIsdnRemPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_FclFrSeIsdnRemPriority_Type.__name__ = "Integer32"
_FclFrSeIsdnRemPriority_Object = MibTableColumn
fclFrSeIsdnRemPriority = _FclFrSeIsdnRemPriority_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 12, 1, 8),
    _FclFrSeIsdnRemPriority_Type()
)
fclFrSeIsdnRemPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrSeIsdnRemPriority.setStatus("mandatory")


class _FclFrSeIsdnRemCallRetryCount_Type(Integer32):
    """Custom type fclFrSeIsdnRemCallRetryCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_FclFrSeIsdnRemCallRetryCount_Type.__name__ = "Integer32"
_FclFrSeIsdnRemCallRetryCount_Object = MibTableColumn
fclFrSeIsdnRemCallRetryCount = _FclFrSeIsdnRemCallRetryCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 12, 1, 9),
    _FclFrSeIsdnRemCallRetryCount_Type()
)
fclFrSeIsdnRemCallRetryCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrSeIsdnRemCallRetryCount.setStatus("mandatory")
_FclFrSeInBIsdn_ObjectIdentity = ObjectIdentity
fclFrSeInBIsdn = _FclFrSeInBIsdn_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13)
)
_FclFrSeInBIsdnLogPortTable_Object = MibTable
fclFrSeInBIsdnLogPortTable = _FclFrSeInBIsdnLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 1)
)
if mibBuilder.loadTexts:
    fclFrSeInBIsdnLogPortTable.setStatus("mandatory")
_FclFrSeInBIsdnLogPortEntry_Object = MibTableRow
fclFrSeInBIsdnLogPortEntry = _FclFrSeInBIsdnLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 1, 1)
)
fclFrSeInBIsdnLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrSeInBLpLogPortId"),
)
if mibBuilder.loadTexts:
    fclFrSeInBIsdnLogPortEntry.setStatus("mandatory")


class _FclFrSeInBLpLogPortId_Type(Integer32):
    """Custom type fclFrSeInBLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclFrSeInBLpLogPortId_Type.__name__ = "Integer32"
_FclFrSeInBLpLogPortId_Object = MibTableColumn
fclFrSeInBLpLogPortId = _FclFrSeInBLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 1, 1, 1),
    _FclFrSeInBLpLogPortId_Type()
)
fclFrSeInBLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrSeInBLpLogPortId.setStatus("mandatory")


class _FclFrSeInBLpIsdnInterfaceId_Type(Integer32):
    """Custom type fclFrSeInBLpIsdnInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FclFrSeInBLpIsdnInterfaceId_Type.__name__ = "Integer32"
_FclFrSeInBLpIsdnInterfaceId_Object = MibTableColumn
fclFrSeInBLpIsdnInterfaceId = _FclFrSeInBLpIsdnInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 1, 1, 2),
    _FclFrSeInBLpIsdnInterfaceId_Type()
)
fclFrSeInBLpIsdnInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrSeInBLpIsdnInterfaceId.setStatus("mandatory")
_FclFrSeInBRemotePeerTable_Object = MibTable
fclFrSeInBRemotePeerTable = _FclFrSeInBRemotePeerTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 2)
)
if mibBuilder.loadTexts:
    fclFrSeInBRemotePeerTable.setStatus("mandatory")
_FclFrSeInBRemotePeerEntry_Object = MibTableRow
fclFrSeInBRemotePeerEntry = _FclFrSeInBRemotePeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 2, 1)
)
fclFrSeInBRemotePeerEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrSeInBRemRemoteAddress"),
    (0, "PCE-MIB", "fclFrSeInBRemPeerId"),
)
if mibBuilder.loadTexts:
    fclFrSeInBRemotePeerEntry.setStatus("mandatory")


class _FclFrSeInBRemRemoteAddress_Type(OctetString):
    """Custom type fclFrSeInBRemRemoteAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclFrSeInBRemRemoteAddress_Type.__name__ = "OctetString"
_FclFrSeInBRemRemoteAddress_Object = MibTableColumn
fclFrSeInBRemRemoteAddress = _FclFrSeInBRemRemoteAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 2, 1, 1),
    _FclFrSeInBRemRemoteAddress_Type()
)
fclFrSeInBRemRemoteAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrSeInBRemRemoteAddress.setStatus("mandatory")


class _FclFrSeInBRemPeerId_Type(Integer32):
    """Custom type fclFrSeInBRemPeerId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 999),
    )


_FclFrSeInBRemPeerId_Type.__name__ = "Integer32"
_FclFrSeInBRemPeerId_Object = MibTableColumn
fclFrSeInBRemPeerId = _FclFrSeInBRemPeerId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 2, 1, 2),
    _FclFrSeInBRemPeerId_Type()
)
fclFrSeInBRemPeerId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrSeInBRemPeerId.setStatus("mandatory")


class _FclFrSeInBRemStatus_Type(Integer32):
    """Custom type fclFrSeInBRemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclFrSeInBRemStatus_Type.__name__ = "Integer32"
_FclFrSeInBRemStatus_Object = MibTableColumn
fclFrSeInBRemStatus = _FclFrSeInBRemStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 2, 1, 3),
    _FclFrSeInBRemStatus_Type()
)
fclFrSeInBRemStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrSeInBRemStatus.setStatus("mandatory")


class _FclFrSeInBRemPriority_Type(Integer32):
    """Custom type fclFrSeInBRemPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_FclFrSeInBRemPriority_Type.__name__ = "Integer32"
_FclFrSeInBRemPriority_Object = MibTableColumn
fclFrSeInBRemPriority = _FclFrSeInBRemPriority_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 2, 1, 8),
    _FclFrSeInBRemPriority_Type()
)
fclFrSeInBRemPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrSeInBRemPriority.setStatus("mandatory")


class _FclFrSeInBRemCallRetryCount_Type(Integer32):
    """Custom type fclFrSeInBRemCallRetryCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_FclFrSeInBRemCallRetryCount_Type.__name__ = "Integer32"
_FclFrSeInBRemCallRetryCount_Object = MibTableColumn
fclFrSeInBRemCallRetryCount = _FclFrSeInBRemCallRetryCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 2, 1, 9),
    _FclFrSeInBRemCallRetryCount_Type()
)
fclFrSeInBRemCallRetryCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrSeInBRemCallRetryCount.setStatus("mandatory")


class _FclFrSeInBRemConfigId_Type(Integer32):
    """Custom type fclFrSeInBRemConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclFrSeInBRemConfigId_Type.__name__ = "Integer32"
_FclFrSeInBRemConfigId_Object = MibTableColumn
fclFrSeInBRemConfigId = _FclFrSeInBRemConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 2, 1, 10),
    _FclFrSeInBRemConfigId_Type()
)
fclFrSeInBRemConfigId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrSeInBRemConfigId.setStatus("mandatory")
_FclFrPvcEndPoint_ObjectIdentity = ObjectIdentity
fclFrPvcEndPoint = _FclFrPvcEndPoint_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20)
)
_FclFrPvcEndPointTable_Object = MibTable
fclFrPvcEndPointTable = _FclFrPvcEndPointTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1)
)
if mibBuilder.loadTexts:
    fclFrPvcEndPointTable.setStatus("mandatory")
_FclFrPvcEndPointEntry_Object = MibTableRow
fclFrPvcEndPointEntry = _FclFrPvcEndPointEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1)
)
fclFrPvcEndPointEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrPvcLinkType"),
    (0, "PCE-MIB", "fclFrPvcLinkId"),
    (0, "PCE-MIB", "fclFrPvcDlci"),
)
if mibBuilder.loadTexts:
    fclFrPvcEndPointEntry.setStatus("mandatory")


class _FclFrPvcLinkType_Type(Integer32):
    """Custom type fclFrPvcLinkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("bChannelIsdn", 2),
          ("logicalPort", 1))
    )


_FclFrPvcLinkType_Type.__name__ = "Integer32"
_FclFrPvcLinkType_Object = MibTableColumn
fclFrPvcLinkType = _FclFrPvcLinkType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1, 1),
    _FclFrPvcLinkType_Type()
)
fclFrPvcLinkType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrPvcLinkType.setStatus("mandatory")


class _FclFrPvcLinkId_Type(Integer32):
    """Custom type fclFrPvcLinkId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 249),
    )


_FclFrPvcLinkId_Type.__name__ = "Integer32"
_FclFrPvcLinkId_Object = MibTableColumn
fclFrPvcLinkId = _FclFrPvcLinkId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1, 2),
    _FclFrPvcLinkId_Type()
)
fclFrPvcLinkId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrPvcLinkId.setStatus("mandatory")


class _FclFrPvcDlci_Type(Integer32):
    """Custom type fclFrPvcDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 991),
    )


_FclFrPvcDlci_Type.__name__ = "Integer32"
_FclFrPvcDlci_Object = MibTableColumn
fclFrPvcDlci = _FclFrPvcDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1, 3),
    _FclFrPvcDlci_Type()
)
fclFrPvcDlci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrPvcDlci.setStatus("mandatory")


class _FclFrPvcStatus_Type(Integer32):
    """Custom type fclFrPvcStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclFrPvcStatus_Type.__name__ = "Integer32"
_FclFrPvcStatus_Object = MibTableColumn
fclFrPvcStatus = _FclFrPvcStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1, 4),
    _FclFrPvcStatus_Type()
)
fclFrPvcStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcStatus.setStatus("mandatory")


class _FclFrPvcCalledAddress_Type(OctetString):
    """Custom type fclFrPvcCalledAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclFrPvcCalledAddress_Type.__name__ = "OctetString"
_FclFrPvcCalledAddress_Object = MibTableColumn
fclFrPvcCalledAddress = _FclFrPvcCalledAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1, 5),
    _FclFrPvcCalledAddress_Type()
)
fclFrPvcCalledAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcCalledAddress.setStatus("mandatory")


class _FclFrPvcCallDirection_Type(Integer32):
    """Custom type fclFrPvcCallDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("auto", 3),
          ("called", 2),
          ("calledMulti", 5),
          ("calling", 1),
          ("datagram", 4))
    )


_FclFrPvcCallDirection_Type.__name__ = "Integer32"
_FclFrPvcCallDirection_Object = MibTableColumn
fclFrPvcCallDirection = _FclFrPvcCallDirection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1, 6),
    _FclFrPvcCallDirection_Type()
)
fclFrPvcCallDirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcCallDirection.setStatus("mandatory")


class _FclFrPvcEncapsulation_Type(Integer32):
    """Custom type fclFrPvcEncapsulation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("lanProtocols", 2),
          ("none", 1),
          ("sna", 4),
          ("snaBan", 5),
          ("voice", 6),
          ("x25", 3))
    )


_FclFrPvcEncapsulation_Type.__name__ = "Integer32"
_FclFrPvcEncapsulation_Object = MibTableColumn
fclFrPvcEncapsulation = _FclFrPvcEncapsulation_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1, 7),
    _FclFrPvcEncapsulation_Type()
)
fclFrPvcEncapsulation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcEncapsulation.setStatus("mandatory")


class _FclFrPvcBackupEnabling_Type(Integer32):
    """Custom type fclFrPvcBackupEnabling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclFrPvcBackupEnabling_Type.__name__ = "Integer32"
_FclFrPvcBackupEnabling_Object = MibTableColumn
fclFrPvcBackupEnabling = _FclFrPvcBackupEnabling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1, 10),
    _FclFrPvcBackupEnabling_Type()
)
fclFrPvcBackupEnabling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcBackupEnabling.setStatus("mandatory")


class _FclFrPvcBackupDlci_Type(Integer32):
    """Custom type fclFrPvcBackupDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 991),
    )


_FclFrPvcBackupDlci_Type.__name__ = "Integer32"
_FclFrPvcBackupDlci_Object = MibTableColumn
fclFrPvcBackupDlci = _FclFrPvcBackupDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1, 11),
    _FclFrPvcBackupDlci_Type()
)
fclFrPvcBackupDlci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcBackupDlci.setStatus("mandatory")


class _FclFrPvcTrafficManagementStrategy_Type(Integer32):
    """Custom type fclFrPvcTrafficManagementStrategy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("delayButNotDiscard-Bc", 3),
          ("delayButNotDiscard-BcBe", 4),
          ("discardButNotDelay", 1))
    )


_FclFrPvcTrafficManagementStrategy_Type.__name__ = "Integer32"
_FclFrPvcTrafficManagementStrategy_Object = MibTableColumn
fclFrPvcTrafficManagementStrategy = _FclFrPvcTrafficManagementStrategy_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1, 20),
    _FclFrPvcTrafficManagementStrategy_Type()
)
fclFrPvcTrafficManagementStrategy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcTrafficManagementStrategy.setStatus("mandatory")


class _FclFrPvcNetworkTransport_Type(Integer32):
    """Custom type fclFrPvcNetworkTransport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(32,
              36)
        )
    )
    namedValues = NamedValues(
        *(("ansiT1-617-G", 32),
          ("transparent", 36))
    )


_FclFrPvcNetworkTransport_Type.__name__ = "Integer32"
_FclFrPvcNetworkTransport_Object = MibTableColumn
fclFrPvcNetworkTransport = _FclFrPvcNetworkTransport_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1, 21),
    _FclFrPvcNetworkTransport_Type()
)
fclFrPvcNetworkTransport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcNetworkTransport.setStatus("mandatory")
_FclFrPvcQualityOfServiceTable_Object = MibTable
fclFrPvcQualityOfServiceTable = _FclFrPvcQualityOfServiceTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2)
)
if mibBuilder.loadTexts:
    fclFrPvcQualityOfServiceTable.setStatus("mandatory")
_FclFrPvcQualityOfServiceEntry_Object = MibTableRow
fclFrPvcQualityOfServiceEntry = _FclFrPvcQualityOfServiceEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1)
)
fclFrPvcQualityOfServiceEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrPvcQosLinkType"),
    (0, "PCE-MIB", "fclFrPvcQosLinkId"),
    (0, "PCE-MIB", "fclFrPvcQosDlci"),
)
if mibBuilder.loadTexts:
    fclFrPvcQualityOfServiceEntry.setStatus("mandatory")


class _FclFrPvcQosLinkType_Type(Integer32):
    """Custom type fclFrPvcQosLinkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("bChannelIsdn", 2),
          ("logicalPort", 1))
    )


_FclFrPvcQosLinkType_Type.__name__ = "Integer32"
_FclFrPvcQosLinkType_Object = MibTableColumn
fclFrPvcQosLinkType = _FclFrPvcQosLinkType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 1),
    _FclFrPvcQosLinkType_Type()
)
fclFrPvcQosLinkType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrPvcQosLinkType.setStatus("mandatory")


class _FclFrPvcQosLinkId_Type(Integer32):
    """Custom type fclFrPvcQosLinkId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 249),
    )


_FclFrPvcQosLinkId_Type.__name__ = "Integer32"
_FclFrPvcQosLinkId_Object = MibTableColumn
fclFrPvcQosLinkId = _FclFrPvcQosLinkId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 2),
    _FclFrPvcQosLinkId_Type()
)
fclFrPvcQosLinkId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrPvcQosLinkId.setStatus("mandatory")


class _FclFrPvcQosDlci_Type(Integer32):
    """Custom type fclFrPvcQosDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 991),
    )


_FclFrPvcQosDlci_Type.__name__ = "Integer32"
_FclFrPvcQosDlci_Object = MibTableColumn
fclFrPvcQosDlci = _FclFrPvcQosDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 3),
    _FclFrPvcQosDlci_Type()
)
fclFrPvcQosDlci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrPvcQosDlci.setStatus("mandatory")


class _FclFrPvcQosCos_Type(Integer32):
    """Custom type fclFrPvcQosCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ubr", 3),
          ("vbr", 1),
          ("vbr-rt", 2))
    )


_FclFrPvcQosCos_Type.__name__ = "Integer32"
_FclFrPvcQosCos_Object = MibTableColumn
fclFrPvcQosCos = _FclFrPvcQosCos_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 5),
    _FclFrPvcQosCos_Type()
)
fclFrPvcQosCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcQosCos.setStatus("mandatory")


class _FclFrPvcQosInBc_Type(Integer32):
    """Custom type fclFrPvcQosInBc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FclFrPvcQosInBc_Type.__name__ = "Integer32"
_FclFrPvcQosInBc_Object = MibTableColumn
fclFrPvcQosInBc = _FclFrPvcQosInBc_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 11),
    _FclFrPvcQosInBc_Type()
)
fclFrPvcQosInBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcQosInBc.setStatus("mandatory")


class _FclFrPvcQosInBe_Type(Integer32):
    """Custom type fclFrPvcQosInBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FclFrPvcQosInBe_Type.__name__ = "Integer32"
_FclFrPvcQosInBe_Object = MibTableColumn
fclFrPvcQosInBe = _FclFrPvcQosInBe_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 12),
    _FclFrPvcQosInBe_Type()
)
fclFrPvcQosInBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcQosInBe.setStatus("mandatory")


class _FclFrPvcQosInCir_Type(Integer32):
    """Custom type fclFrPvcQosInCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FclFrPvcQosInCir_Type.__name__ = "Integer32"
_FclFrPvcQosInCir_Object = MibTableColumn
fclFrPvcQosInCir = _FclFrPvcQosInCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 13),
    _FclFrPvcQosInCir_Type()
)
fclFrPvcQosInCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcQosInCir.setStatus("mandatory")


class _FclFrPvcQosInMinCir_Type(Integer32):
    """Custom type fclFrPvcQosInMinCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FclFrPvcQosInMinCir_Type.__name__ = "Integer32"
_FclFrPvcQosInMinCir_Object = MibTableColumn
fclFrPvcQosInMinCir = _FclFrPvcQosInMinCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 14),
    _FclFrPvcQosInMinCir_Type()
)
fclFrPvcQosInMinCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcQosInMinCir.setStatus("mandatory")


class _FclFrPvcQosOutBc_Type(Integer32):
    """Custom type fclFrPvcQosOutBc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FclFrPvcQosOutBc_Type.__name__ = "Integer32"
_FclFrPvcQosOutBc_Object = MibTableColumn
fclFrPvcQosOutBc = _FclFrPvcQosOutBc_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 21),
    _FclFrPvcQosOutBc_Type()
)
fclFrPvcQosOutBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcQosOutBc.setStatus("mandatory")


class _FclFrPvcQosOutBe_Type(Integer32):
    """Custom type fclFrPvcQosOutBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FclFrPvcQosOutBe_Type.__name__ = "Integer32"
_FclFrPvcQosOutBe_Object = MibTableColumn
fclFrPvcQosOutBe = _FclFrPvcQosOutBe_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 22),
    _FclFrPvcQosOutBe_Type()
)
fclFrPvcQosOutBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcQosOutBe.setStatus("mandatory")


class _FclFrPvcQosOutCir_Type(Integer32):
    """Custom type fclFrPvcQosOutCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FclFrPvcQosOutCir_Type.__name__ = "Integer32"
_FclFrPvcQosOutCir_Object = MibTableColumn
fclFrPvcQosOutCir = _FclFrPvcQosOutCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 23),
    _FclFrPvcQosOutCir_Type()
)
fclFrPvcQosOutCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcQosOutCir.setStatus("mandatory")


class _FclFrPvcQosOutMinCir_Type(Integer32):
    """Custom type fclFrPvcQosOutMinCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FclFrPvcQosOutMinCir_Type.__name__ = "Integer32"
_FclFrPvcQosOutMinCir_Object = MibTableColumn
fclFrPvcQosOutMinCir = _FclFrPvcQosOutMinCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 24),
    _FclFrPvcQosOutMinCir_Type()
)
fclFrPvcQosOutMinCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcQosOutMinCir.setStatus("mandatory")
_FclFrPvcX25EncapsulationTable_Object = MibTable
fclFrPvcX25EncapsulationTable = _FclFrPvcX25EncapsulationTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 10)
)
if mibBuilder.loadTexts:
    fclFrPvcX25EncapsulationTable.setStatus("mandatory")
_FclFrPvcX25EncapsulationEntry_Object = MibTableRow
fclFrPvcX25EncapsulationEntry = _FclFrPvcX25EncapsulationEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 10, 1)
)
fclFrPvcX25EncapsulationEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrPvcX25LinkType"),
    (0, "PCE-MIB", "fclFrPvcX25LinkId"),
    (0, "PCE-MIB", "fclFrPvcX25Dlci"),
)
if mibBuilder.loadTexts:
    fclFrPvcX25EncapsulationEntry.setStatus("mandatory")


class _FclFrPvcX25LinkType_Type(Integer32):
    """Custom type fclFrPvcX25LinkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("bChannelIsdn", 2),
          ("logicalPort", 1))
    )


_FclFrPvcX25LinkType_Type.__name__ = "Integer32"
_FclFrPvcX25LinkType_Object = MibTableColumn
fclFrPvcX25LinkType = _FclFrPvcX25LinkType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 10, 1, 1),
    _FclFrPvcX25LinkType_Type()
)
fclFrPvcX25LinkType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrPvcX25LinkType.setStatus("mandatory")


class _FclFrPvcX25LinkId_Type(Integer32):
    """Custom type fclFrPvcX25LinkId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 249),
    )


_FclFrPvcX25LinkId_Type.__name__ = "Integer32"
_FclFrPvcX25LinkId_Object = MibTableColumn
fclFrPvcX25LinkId = _FclFrPvcX25LinkId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 10, 1, 2),
    _FclFrPvcX25LinkId_Type()
)
fclFrPvcX25LinkId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrPvcX25LinkId.setStatus("mandatory")


class _FclFrPvcX25Dlci_Type(Integer32):
    """Custom type fclFrPvcX25Dlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 991),
    )


_FclFrPvcX25Dlci_Type.__name__ = "Integer32"
_FclFrPvcX25Dlci_Object = MibTableColumn
fclFrPvcX25Dlci = _FclFrPvcX25Dlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 10, 1, 3),
    _FclFrPvcX25Dlci_Type()
)
fclFrPvcX25Dlci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrPvcX25Dlci.setStatus("mandatory")


class _FclFrPvcX25AssociatedAddress_Type(OctetString):
    """Custom type fclFrPvcX25AssociatedAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclFrPvcX25AssociatedAddress_Type.__name__ = "OctetString"
_FclFrPvcX25AssociatedAddress_Object = MibTableColumn
fclFrPvcX25AssociatedAddress = _FclFrPvcX25AssociatedAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 10, 1, 5),
    _FclFrPvcX25AssociatedAddress_Type()
)
fclFrPvcX25AssociatedAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcX25AssociatedAddress.setStatus("mandatory")


class _FclFrPvcX25InterNodeConfigId_Type(Integer32):
    """Custom type fclFrPvcX25InterNodeConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclFrPvcX25InterNodeConfigId_Type.__name__ = "Integer32"
_FclFrPvcX25InterNodeConfigId_Object = MibTableColumn
fclFrPvcX25InterNodeConfigId = _FclFrPvcX25InterNodeConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 10, 1, 10),
    _FclFrPvcX25InterNodeConfigId_Type()
)
fclFrPvcX25InterNodeConfigId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcX25InterNodeConfigId.setStatus("mandatory")
_FclFrPvcSnaEncapsulationTable_Object = MibTable
fclFrPvcSnaEncapsulationTable = _FclFrPvcSnaEncapsulationTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11)
)
if mibBuilder.loadTexts:
    fclFrPvcSnaEncapsulationTable.setStatus("mandatory")
_FclFrPvcSnaEncapsulationEntry_Object = MibTableRow
fclFrPvcSnaEncapsulationEntry = _FclFrPvcSnaEncapsulationEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1)
)
fclFrPvcSnaEncapsulationEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrPvcSnaLinkType"),
    (0, "PCE-MIB", "fclFrPvcSnaLinkId"),
    (0, "PCE-MIB", "fclFrPvcSnaDlci"),
)
if mibBuilder.loadTexts:
    fclFrPvcSnaEncapsulationEntry.setStatus("mandatory")


class _FclFrPvcSnaLinkType_Type(Integer32):
    """Custom type fclFrPvcSnaLinkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("bChannelIsdn", 2),
          ("logicalPort", 1))
    )


_FclFrPvcSnaLinkType_Type.__name__ = "Integer32"
_FclFrPvcSnaLinkType_Object = MibTableColumn
fclFrPvcSnaLinkType = _FclFrPvcSnaLinkType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 1),
    _FclFrPvcSnaLinkType_Type()
)
fclFrPvcSnaLinkType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrPvcSnaLinkType.setStatus("mandatory")


class _FclFrPvcSnaLinkId_Type(Integer32):
    """Custom type fclFrPvcSnaLinkId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 249),
    )


_FclFrPvcSnaLinkId_Type.__name__ = "Integer32"
_FclFrPvcSnaLinkId_Object = MibTableColumn
fclFrPvcSnaLinkId = _FclFrPvcSnaLinkId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 2),
    _FclFrPvcSnaLinkId_Type()
)
fclFrPvcSnaLinkId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrPvcSnaLinkId.setStatus("mandatory")


class _FclFrPvcSnaDlci_Type(Integer32):
    """Custom type fclFrPvcSnaDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 991),
    )


_FclFrPvcSnaDlci_Type.__name__ = "Integer32"
_FclFrPvcSnaDlci_Object = MibTableColumn
fclFrPvcSnaDlci = _FclFrPvcSnaDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 3),
    _FclFrPvcSnaDlci_Type()
)
fclFrPvcSnaDlci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrPvcSnaDlci.setStatus("mandatory")


class _FclFrPvcSnaConnTestEnabling_Type(Integer32):
    """Custom type fclFrPvcSnaConnTestEnabling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclFrPvcSnaConnTestEnabling_Type.__name__ = "Integer32"
_FclFrPvcSnaConnTestEnabling_Object = MibTableColumn
fclFrPvcSnaConnTestEnabling = _FclFrPvcSnaConnTestEnabling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 5),
    _FclFrPvcSnaConnTestEnabling_Type()
)
fclFrPvcSnaConnTestEnabling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcSnaConnTestEnabling.setStatus("mandatory")


class _FclFrPvcSnaLevel3Pid_Type(Integer32):
    """Custom type fclFrPvcSnaLevel3Pid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("appn", 3),
          ("peripheral", 2),
          ("subArea", 1))
    )


_FclFrPvcSnaLevel3Pid_Type.__name__ = "Integer32"
_FclFrPvcSnaLevel3Pid_Object = MibTableColumn
fclFrPvcSnaLevel3Pid = _FclFrPvcSnaLevel3Pid_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 10),
    _FclFrPvcSnaLevel3Pid_Type()
)
fclFrPvcSnaLevel3Pid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcSnaLevel3Pid.setStatus("mandatory")


class _FclFrPvcSnaDestinationSap_Type(OctetString):
    """Custom type fclFrPvcSnaDestinationSap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FclFrPvcSnaDestinationSap_Type.__name__ = "OctetString"
_FclFrPvcSnaDestinationSap_Object = MibTableColumn
fclFrPvcSnaDestinationSap = _FclFrPvcSnaDestinationSap_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 11),
    _FclFrPvcSnaDestinationSap_Type()
)
fclFrPvcSnaDestinationSap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcSnaDestinationSap.setStatus("mandatory")


class _FclFrPvcSnaSourceSap_Type(OctetString):
    """Custom type fclFrPvcSnaSourceSap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FclFrPvcSnaSourceSap_Type.__name__ = "OctetString"
_FclFrPvcSnaSourceSap_Object = MibTableColumn
fclFrPvcSnaSourceSap = _FclFrPvcSnaSourceSap_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 12),
    _FclFrPvcSnaSourceSap_Type()
)
fclFrPvcSnaSourceSap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcSnaSourceSap.setStatus("mandatory")


class _FclFrPvcSnaT1ReplyTimer_Type(Integer32):
    """Custom type fclFrPvcSnaT1ReplyTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 25000),
    )


_FclFrPvcSnaT1ReplyTimer_Type.__name__ = "Integer32"
_FclFrPvcSnaT1ReplyTimer_Object = MibTableColumn
fclFrPvcSnaT1ReplyTimer = _FclFrPvcSnaT1ReplyTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 20),
    _FclFrPvcSnaT1ReplyTimer_Type()
)
fclFrPvcSnaT1ReplyTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcSnaT1ReplyTimer.setStatus("mandatory")


class _FclFrPvcSnaN2RetryCount_Type(Integer32):
    """Custom type fclFrPvcSnaN2RetryCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_FclFrPvcSnaN2RetryCount_Type.__name__ = "Integer32"
_FclFrPvcSnaN2RetryCount_Object = MibTableColumn
fclFrPvcSnaN2RetryCount = _FclFrPvcSnaN2RetryCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 21),
    _FclFrPvcSnaN2RetryCount_Type()
)
fclFrPvcSnaN2RetryCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcSnaN2RetryCount.setStatus("mandatory")


class _FclFrPvcSnaT2ReceiverAckTimer_Type(Integer32):
    """Custom type fclFrPvcSnaT2ReceiverAckTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 15000),
    )


_FclFrPvcSnaT2ReceiverAckTimer_Type.__name__ = "Integer32"
_FclFrPvcSnaT2ReceiverAckTimer_Object = MibTableColumn
fclFrPvcSnaT2ReceiverAckTimer = _FclFrPvcSnaT2ReceiverAckTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 22),
    _FclFrPvcSnaT2ReceiverAckTimer_Type()
)
fclFrPvcSnaT2ReceiverAckTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcSnaT2ReceiverAckTimer.setStatus("mandatory")


class _FclFrPvcSnaN3AcknowledgedCount_Type(Integer32):
    """Custom type fclFrPvcSnaN3AcknowledgedCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_FclFrPvcSnaN3AcknowledgedCount_Type.__name__ = "Integer32"
_FclFrPvcSnaN3AcknowledgedCount_Object = MibTableColumn
fclFrPvcSnaN3AcknowledgedCount = _FclFrPvcSnaN3AcknowledgedCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 23),
    _FclFrPvcSnaN3AcknowledgedCount_Type()
)
fclFrPvcSnaN3AcknowledgedCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcSnaN3AcknowledgedCount.setStatus("mandatory")


class _FclFrPvcSnaNwIncrementAckCount_Type(Integer32):
    """Custom type fclFrPvcSnaNwIncrementAckCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 127),
    )


_FclFrPvcSnaNwIncrementAckCount_Type.__name__ = "Integer32"
_FclFrPvcSnaNwIncrementAckCount_Object = MibTableColumn
fclFrPvcSnaNwIncrementAckCount = _FclFrPvcSnaNwIncrementAckCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 24),
    _FclFrPvcSnaNwIncrementAckCount_Type()
)
fclFrPvcSnaNwIncrementAckCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcSnaNwIncrementAckCount.setStatus("mandatory")


class _FclFrPvcSnaTwTransmitWinSize_Type(Integer32):
    """Custom type fclFrPvcSnaTwTransmitWinSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 127),
    )


_FclFrPvcSnaTwTransmitWinSize_Type.__name__ = "Integer32"
_FclFrPvcSnaTwTransmitWinSize_Object = MibTableColumn
fclFrPvcSnaTwTransmitWinSize = _FclFrPvcSnaTwTransmitWinSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 25),
    _FclFrPvcSnaTwTransmitWinSize_Type()
)
fclFrPvcSnaTwTransmitWinSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcSnaTwTransmitWinSize.setStatus("mandatory")


class _FclFrPvcSnaRwReceiveWinSize_Type(Integer32):
    """Custom type fclFrPvcSnaRwReceiveWinSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 127),
    )


_FclFrPvcSnaRwReceiveWinSize_Type.__name__ = "Integer32"
_FclFrPvcSnaRwReceiveWinSize_Object = MibTableColumn
fclFrPvcSnaRwReceiveWinSize = _FclFrPvcSnaRwReceiveWinSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 26),
    _FclFrPvcSnaRwReceiveWinSize_Type()
)
fclFrPvcSnaRwReceiveWinSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcSnaRwReceiveWinSize.setStatus("mandatory")
_FclFrSnaBan_ObjectIdentity = ObjectIdentity
fclFrSnaBan = _FclFrSnaBan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12)
)
_FclFrNbStationDlci_ObjectIdentity = ObjectIdentity
fclFrNbStationDlci = _FclFrNbStationDlci_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 1)
)


class _FclFrNbStationByDlci_Type(Integer32):
    """Custom type fclFrNbStationByDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("nb0", 1),
          ("nb128", 5),
          ("nb16", 2),
          ("nb32", 3),
          ("nb64", 4))
    )


_FclFrNbStationByDlci_Type.__name__ = "Integer32"
_FclFrNbStationByDlci_Object = MibScalar
fclFrNbStationByDlci = _FclFrNbStationByDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 1, 1),
    _FclFrNbStationByDlci_Type()
)
fclFrNbStationByDlci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrNbStationByDlci.setStatus("mandatory")
_FclFrPvcSnaBanEncapsulationTable_Object = MibTable
fclFrPvcSnaBanEncapsulationTable = _FclFrPvcSnaBanEncapsulationTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10)
)
if mibBuilder.loadTexts:
    fclFrPvcSnaBanEncapsulationTable.setStatus("mandatory")
_FclFrPvcSnaBanEncapsulationEntry_Object = MibTableRow
fclFrPvcSnaBanEncapsulationEntry = _FclFrPvcSnaBanEncapsulationEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1)
)
fclFrPvcSnaBanEncapsulationEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrPvcSnaBanLinkType"),
    (0, "PCE-MIB", "fclFrPvcSnaBanLinkId"),
    (0, "PCE-MIB", "fclFrPvcSnaBanDlci"),
)
if mibBuilder.loadTexts:
    fclFrPvcSnaBanEncapsulationEntry.setStatus("mandatory")


class _FclFrPvcSnaBanLinkType_Type(Integer32):
    """Custom type fclFrPvcSnaBanLinkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("bChannelIsdn", 2),
          ("logicalPort", 1))
    )


_FclFrPvcSnaBanLinkType_Type.__name__ = "Integer32"
_FclFrPvcSnaBanLinkType_Object = MibTableColumn
fclFrPvcSnaBanLinkType = _FclFrPvcSnaBanLinkType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 1),
    _FclFrPvcSnaBanLinkType_Type()
)
fclFrPvcSnaBanLinkType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrPvcSnaBanLinkType.setStatus("mandatory")


class _FclFrPvcSnaBanLinkId_Type(Integer32):
    """Custom type fclFrPvcSnaBanLinkId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 249),
    )


_FclFrPvcSnaBanLinkId_Type.__name__ = "Integer32"
_FclFrPvcSnaBanLinkId_Object = MibTableColumn
fclFrPvcSnaBanLinkId = _FclFrPvcSnaBanLinkId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 2),
    _FclFrPvcSnaBanLinkId_Type()
)
fclFrPvcSnaBanLinkId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrPvcSnaBanLinkId.setStatus("mandatory")


class _FclFrPvcSnaBanDlci_Type(Integer32):
    """Custom type fclFrPvcSnaBanDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 991),
    )


_FclFrPvcSnaBanDlci_Type.__name__ = "Integer32"
_FclFrPvcSnaBanDlci_Object = MibTableColumn
fclFrPvcSnaBanDlci = _FclFrPvcSnaBanDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 3),
    _FclFrPvcSnaBanDlci_Type()
)
fclFrPvcSnaBanDlci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrPvcSnaBanDlci.setStatus("mandatory")


class _FclFrPvcSnaBanPuId_Type(Integer32):
    """Custom type fclFrPvcSnaBanPuId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1999),
    )


_FclFrPvcSnaBanPuId_Type.__name__ = "Integer32"
_FclFrPvcSnaBanPuId_Object = MibTableColumn
fclFrPvcSnaBanPuId = _FclFrPvcSnaBanPuId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 10),
    _FclFrPvcSnaBanPuId_Type()
)
fclFrPvcSnaBanPuId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcSnaBanPuId.setStatus("mandatory")


class _FclFrPvcSnaBanConnTestEnabling_Type(Integer32):
    """Custom type fclFrPvcSnaBanConnTestEnabling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclFrPvcSnaBanConnTestEnabling_Type.__name__ = "Integer32"
_FclFrPvcSnaBanConnTestEnabling_Object = MibTableColumn
fclFrPvcSnaBanConnTestEnabling = _FclFrPvcSnaBanConnTestEnabling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 11),
    _FclFrPvcSnaBanConnTestEnabling_Type()
)
fclFrPvcSnaBanConnTestEnabling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcSnaBanConnTestEnabling.setStatus("mandatory")


class _FclFrPvcSnaBanLink_Type(Integer32):
    """Custom type fclFrPvcSnaBanLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 3),
          ("frontal", 1),
          ("remote", 2))
    )


_FclFrPvcSnaBanLink_Type.__name__ = "Integer32"
_FclFrPvcSnaBanLink_Object = MibTableColumn
fclFrPvcSnaBanLink = _FclFrPvcSnaBanLink_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 12),
    _FclFrPvcSnaBanLink_Type()
)
fclFrPvcSnaBanLink.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcSnaBanLink.setStatus("mandatory")


class _FclFrPvcSnaBanT1ReplyTimer_Type(Integer32):
    """Custom type fclFrPvcSnaBanT1ReplyTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 25000),
    )


_FclFrPvcSnaBanT1ReplyTimer_Type.__name__ = "Integer32"
_FclFrPvcSnaBanT1ReplyTimer_Object = MibTableColumn
fclFrPvcSnaBanT1ReplyTimer = _FclFrPvcSnaBanT1ReplyTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 20),
    _FclFrPvcSnaBanT1ReplyTimer_Type()
)
fclFrPvcSnaBanT1ReplyTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcSnaBanT1ReplyTimer.setStatus("mandatory")


class _FclFrPvcSnaBanN2RetryCount_Type(Integer32):
    """Custom type fclFrPvcSnaBanN2RetryCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_FclFrPvcSnaBanN2RetryCount_Type.__name__ = "Integer32"
_FclFrPvcSnaBanN2RetryCount_Object = MibTableColumn
fclFrPvcSnaBanN2RetryCount = _FclFrPvcSnaBanN2RetryCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 21),
    _FclFrPvcSnaBanN2RetryCount_Type()
)
fclFrPvcSnaBanN2RetryCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcSnaBanN2RetryCount.setStatus("mandatory")


class _FclFrPvcSnaBanT2ReceiverAckTimer_Type(Integer32):
    """Custom type fclFrPvcSnaBanT2ReceiverAckTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 15000),
    )


_FclFrPvcSnaBanT2ReceiverAckTimer_Type.__name__ = "Integer32"
_FclFrPvcSnaBanT2ReceiverAckTimer_Object = MibTableColumn
fclFrPvcSnaBanT2ReceiverAckTimer = _FclFrPvcSnaBanT2ReceiverAckTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 22),
    _FclFrPvcSnaBanT2ReceiverAckTimer_Type()
)
fclFrPvcSnaBanT2ReceiverAckTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcSnaBanT2ReceiverAckTimer.setStatus("mandatory")


class _FclFrPvcSnaBanN3AcknowledgedCount_Type(Integer32):
    """Custom type fclFrPvcSnaBanN3AcknowledgedCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_FclFrPvcSnaBanN3AcknowledgedCount_Type.__name__ = "Integer32"
_FclFrPvcSnaBanN3AcknowledgedCount_Object = MibTableColumn
fclFrPvcSnaBanN3AcknowledgedCount = _FclFrPvcSnaBanN3AcknowledgedCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 23),
    _FclFrPvcSnaBanN3AcknowledgedCount_Type()
)
fclFrPvcSnaBanN3AcknowledgedCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcSnaBanN3AcknowledgedCount.setStatus("mandatory")


class _FclFrPvcSnaBanNwIncrementAckCount_Type(Integer32):
    """Custom type fclFrPvcSnaBanNwIncrementAckCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 127),
    )


_FclFrPvcSnaBanNwIncrementAckCount_Type.__name__ = "Integer32"
_FclFrPvcSnaBanNwIncrementAckCount_Object = MibTableColumn
fclFrPvcSnaBanNwIncrementAckCount = _FclFrPvcSnaBanNwIncrementAckCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 24),
    _FclFrPvcSnaBanNwIncrementAckCount_Type()
)
fclFrPvcSnaBanNwIncrementAckCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcSnaBanNwIncrementAckCount.setStatus("mandatory")


class _FclFrPvcSnaBanTwTransmitWinSize_Type(Integer32):
    """Custom type fclFrPvcSnaBanTwTransmitWinSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 127),
    )


_FclFrPvcSnaBanTwTransmitWinSize_Type.__name__ = "Integer32"
_FclFrPvcSnaBanTwTransmitWinSize_Object = MibTableColumn
fclFrPvcSnaBanTwTransmitWinSize = _FclFrPvcSnaBanTwTransmitWinSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 25),
    _FclFrPvcSnaBanTwTransmitWinSize_Type()
)
fclFrPvcSnaBanTwTransmitWinSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcSnaBanTwTransmitWinSize.setStatus("mandatory")


class _FclFrPvcSnaBanRwReceiveWinSize_Type(Integer32):
    """Custom type fclFrPvcSnaBanRwReceiveWinSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 127),
    )


_FclFrPvcSnaBanRwReceiveWinSize_Type.__name__ = "Integer32"
_FclFrPvcSnaBanRwReceiveWinSize_Object = MibTableColumn
fclFrPvcSnaBanRwReceiveWinSize = _FclFrPvcSnaBanRwReceiveWinSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 26),
    _FclFrPvcSnaBanRwReceiveWinSize_Type()
)
fclFrPvcSnaBanRwReceiveWinSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcSnaBanRwReceiveWinSize.setStatus("mandatory")


class _FclFrPvcSnaBanMinRecallTimer_Type(Integer32):
    """Custom type fclFrPvcSnaBanMinRecallTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 990),
    )


_FclFrPvcSnaBanMinRecallTimer_Type.__name__ = "Integer32"
_FclFrPvcSnaBanMinRecallTimer_Object = MibTableColumn
fclFrPvcSnaBanMinRecallTimer = _FclFrPvcSnaBanMinRecallTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 27),
    _FclFrPvcSnaBanMinRecallTimer_Type()
)
fclFrPvcSnaBanMinRecallTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcSnaBanMinRecallTimer.setStatus("mandatory")
_FclFrPvcSpecific_ObjectIdentity = ObjectIdentity
fclFrPvcSpecific = _FclFrPvcSpecific_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25)
)
_FclFrPvcTunEndPointTable_Object = MibTable
fclFrPvcTunEndPointTable = _FclFrPvcTunEndPointTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1)
)
if mibBuilder.loadTexts:
    fclFrPvcTunEndPointTable.setStatus("mandatory")
_FclFrPvcTunEndPointEntry_Object = MibTableRow
fclFrPvcTunEndPointEntry = _FclFrPvcTunEndPointEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1, 1)
)
fclFrPvcTunEndPointEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrPvcTunLinkType"),
    (0, "PCE-MIB", "fclFrPvcTunLinkId"),
    (0, "PCE-MIB", "fclFrPvcTunDlci"),
)
if mibBuilder.loadTexts:
    fclFrPvcTunEndPointEntry.setStatus("mandatory")


class _FclFrPvcTunLinkType_Type(Integer32):
    """Custom type fclFrPvcTunLinkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("bChannelIsdn", 2),
          ("logicalPort", 1))
    )


_FclFrPvcTunLinkType_Type.__name__ = "Integer32"
_FclFrPvcTunLinkType_Object = MibTableColumn
fclFrPvcTunLinkType = _FclFrPvcTunLinkType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1, 1, 1),
    _FclFrPvcTunLinkType_Type()
)
fclFrPvcTunLinkType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrPvcTunLinkType.setStatus("mandatory")


class _FclFrPvcTunLinkId_Type(Integer32):
    """Custom type fclFrPvcTunLinkId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 249),
    )


_FclFrPvcTunLinkId_Type.__name__ = "Integer32"
_FclFrPvcTunLinkId_Object = MibTableColumn
fclFrPvcTunLinkId = _FclFrPvcTunLinkId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1, 1, 2),
    _FclFrPvcTunLinkId_Type()
)
fclFrPvcTunLinkId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrPvcTunLinkId.setStatus("mandatory")


class _FclFrPvcTunDlci_Type(Integer32):
    """Custom type fclFrPvcTunDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 991),
    )


_FclFrPvcTunDlci_Type.__name__ = "Integer32"
_FclFrPvcTunDlci_Object = MibTableColumn
fclFrPvcTunDlci = _FclFrPvcTunDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1, 1, 3),
    _FclFrPvcTunDlci_Type()
)
fclFrPvcTunDlci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrPvcTunDlci.setStatus("mandatory")


class _FclFrPvcTunStatus_Type(Integer32):
    """Custom type fclFrPvcTunStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclFrPvcTunStatus_Type.__name__ = "Integer32"
_FclFrPvcTunStatus_Object = MibTableColumn
fclFrPvcTunStatus = _FclFrPvcTunStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1, 1, 4),
    _FclFrPvcTunStatus_Type()
)
fclFrPvcTunStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcTunStatus.setStatus("mandatory")


class _FclFrPvcTunInCir_Type(Integer32):
    """Custom type fclFrPvcTunInCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FclFrPvcTunInCir_Type.__name__ = "Integer32"
_FclFrPvcTunInCir_Object = MibTableColumn
fclFrPvcTunInCir = _FclFrPvcTunInCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1, 1, 5),
    _FclFrPvcTunInCir_Type()
)
fclFrPvcTunInCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcTunInCir.setStatus("mandatory")


class _FclFrPvcTunOutCir_Type(Integer32):
    """Custom type fclFrPvcTunOutCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FclFrPvcTunOutCir_Type.__name__ = "Integer32"
_FclFrPvcTunOutCir_Object = MibTableColumn
fclFrPvcTunOutCir = _FclFrPvcTunOutCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1, 1, 6),
    _FclFrPvcTunOutCir_Type()
)
fclFrPvcTunOutCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcTunOutCir.setStatus("mandatory")


class _FclFrPvcTunBackupEnabling_Type(Integer32):
    """Custom type fclFrPvcTunBackupEnabling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclFrPvcTunBackupEnabling_Type.__name__ = "Integer32"
_FclFrPvcTunBackupEnabling_Object = MibTableColumn
fclFrPvcTunBackupEnabling = _FclFrPvcTunBackupEnabling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1, 1, 10),
    _FclFrPvcTunBackupEnabling_Type()
)
fclFrPvcTunBackupEnabling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcTunBackupEnabling.setStatus("mandatory")


class _FclFrPvcTunBackupDlci_Type(Integer32):
    """Custom type fclFrPvcTunBackupDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 991),
    )


_FclFrPvcTunBackupDlci_Type.__name__ = "Integer32"
_FclFrPvcTunBackupDlci_Object = MibTableColumn
fclFrPvcTunBackupDlci = _FclFrPvcTunBackupDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1, 1, 11),
    _FclFrPvcTunBackupDlci_Type()
)
fclFrPvcTunBackupDlci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcTunBackupDlci.setStatus("mandatory")


class _FclFrPvcTunAssociatedAddress_Type(OctetString):
    """Custom type fclFrPvcTunAssociatedAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FclFrPvcTunAssociatedAddress_Type.__name__ = "OctetString"
_FclFrPvcTunAssociatedAddress_Object = MibTableColumn
fclFrPvcTunAssociatedAddress = _FclFrPvcTunAssociatedAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1, 1, 15),
    _FclFrPvcTunAssociatedAddress_Type()
)
fclFrPvcTunAssociatedAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcTunAssociatedAddress.setStatus("mandatory")


class _FclFrPvcTunFrseConfiguration_Type(Integer32):
    """Custom type fclFrPvcTunFrseConfiguration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclFrPvcTunFrseConfiguration_Type.__name__ = "Integer32"
_FclFrPvcTunFrseConfiguration_Object = MibTableColumn
fclFrPvcTunFrseConfiguration = _FclFrPvcTunFrseConfiguration_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1, 1, 20),
    _FclFrPvcTunFrseConfiguration_Type()
)
fclFrPvcTunFrseConfiguration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrPvcTunFrseConfiguration.setStatus("mandatory")
_FclFrameRelayBackup_ObjectIdentity = ObjectIdentity
fclFrameRelayBackup = _FclFrameRelayBackup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 27)
)
_FclFrBackupTable_Object = MibTable
fclFrBackupTable = _FclFrBackupTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 27, 1)
)
if mibBuilder.loadTexts:
    fclFrBackupTable.setStatus("mandatory")
_FclFrBackupEntry_Object = MibTableRow
fclFrBackupEntry = _FclFrBackupEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 27, 1, 1)
)
fclFrBackupEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrMainLPId"),
    (0, "PCE-MIB", "fclFrMainDlci"),
    (0, "PCE-MIB", "fclFrBackupLPId"),
    (0, "PCE-MIB", "fclFrBackupDlci"),
)
if mibBuilder.loadTexts:
    fclFrBackupEntry.setStatus("mandatory")


class _FclFrMainLPId_Type(Integer32):
    """Custom type fclFrMainLPId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_FclFrMainLPId_Type.__name__ = "Integer32"
_FclFrMainLPId_Object = MibTableColumn
fclFrMainLPId = _FclFrMainLPId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 27, 1, 1, 1),
    _FclFrMainLPId_Type()
)
fclFrMainLPId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrMainLPId.setStatus("mandatory")


class _FclFrMainDlci_Type(Integer32):
    """Custom type fclFrMainDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1023),
    )


_FclFrMainDlci_Type.__name__ = "Integer32"
_FclFrMainDlci_Object = MibTableColumn
fclFrMainDlci = _FclFrMainDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 27, 1, 1, 2),
    _FclFrMainDlci_Type()
)
fclFrMainDlci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrMainDlci.setStatus("mandatory")


class _FclFrBackupLPId_Type(Integer32):
    """Custom type fclFrBackupLPId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_FclFrBackupLPId_Type.__name__ = "Integer32"
_FclFrBackupLPId_Object = MibTableColumn
fclFrBackupLPId = _FclFrBackupLPId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 27, 1, 1, 3),
    _FclFrBackupLPId_Type()
)
fclFrBackupLPId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrBackupLPId.setStatus("mandatory")


class _FclFrBackupDlci_Type(Integer32):
    """Custom type fclFrBackupDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1023),
    )


_FclFrBackupDlci_Type.__name__ = "Integer32"
_FclFrBackupDlci_Object = MibTableColumn
fclFrBackupDlci = _FclFrBackupDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 27, 1, 1, 4),
    _FclFrBackupDlci_Type()
)
fclFrBackupDlci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrBackupDlci.setStatus("mandatory")


class _FclFrBackupStatus_Type(Integer32):
    """Custom type fclFrBackupStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclFrBackupStatus_Type.__name__ = "Integer32"
_FclFrBackupStatus_Object = MibTableColumn
fclFrBackupStatus = _FclFrBackupStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 27, 1, 1, 5),
    _FclFrBackupStatus_Type()
)
fclFrBackupStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrBackupStatus.setStatus("mandatory")
_FclFrConfigurationCeTe_ObjectIdentity = ObjectIdentity
fclFrConfigurationCeTe = _FclFrConfigurationCeTe_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30)
)
_FclFrConfigCeTeTable_Object = MibTable
fclFrConfigCeTeTable = _FclFrConfigCeTeTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 1)
)
if mibBuilder.loadTexts:
    fclFrConfigCeTeTable.setStatus("mandatory")
_FclFrConfigCeTeEntry_Object = MibTableRow
fclFrConfigCeTeEntry = _FclFrConfigCeTeEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 1, 1)
)
fclFrConfigCeTeEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrCfcConfigId"),
)
if mibBuilder.loadTexts:
    fclFrConfigCeTeEntry.setStatus("mandatory")


class _FclFrCfcConfigId_Type(Integer32):
    """Custom type fclFrCfcConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclFrCfcConfigId_Type.__name__ = "Integer32"
_FclFrCfcConfigId_Object = MibTableColumn
fclFrCfcConfigId = _FclFrCfcConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 1, 1, 1),
    _FclFrCfcConfigId_Type()
)
fclFrCfcConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrCfcConfigId.setStatus("mandatory")


class _FclFrCfcStatus_Type(Integer32):
    """Custom type fclFrCfcStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclFrCfcStatus_Type.__name__ = "Integer32"
_FclFrCfcStatus_Object = MibTableColumn
fclFrCfcStatus = _FclFrCfcStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 1, 1, 2),
    _FclFrCfcStatus_Type()
)
fclFrCfcStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcStatus.setStatus("mandatory")


class _FclFrCfcDescription_Type(DisplayString):
    """Custom type fclFrCfcDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_FclFrCfcDescription_Type.__name__ = "DisplayString"
_FclFrCfcDescription_Object = MibTableColumn
fclFrCfcDescription = _FclFrCfcDescription_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 1, 1, 3),
    _FclFrCfcDescription_Type()
)
fclFrCfcDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcDescription.setStatus("mandatory")


class _FclFrCfcProfileId_Type(Integer32):
    """Custom type fclFrCfcProfileId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclFrCfcProfileId_Type.__name__ = "Integer32"
_FclFrCfcProfileId_Object = MibTableColumn
fclFrCfcProfileId = _FclFrCfcProfileId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 1, 1, 4),
    _FclFrCfcProfileId_Type()
)
fclFrCfcProfileId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcProfileId.setStatus("mandatory")


class _FclFrCfcModificationCount_Type(Integer32):
    """Custom type fclFrCfcModificationCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FclFrCfcModificationCount_Type.__name__ = "Integer32"
_FclFrCfcModificationCount_Object = MibTableColumn
fclFrCfcModificationCount = _FclFrCfcModificationCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 1, 1, 5),
    _FclFrCfcModificationCount_Type()
)
fclFrCfcModificationCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrCfcModificationCount.setStatus("mandatory")
_FclFrCfcGeneralParameterTable_Object = MibTable
fclFrCfcGeneralParameterTable = _FclFrCfcGeneralParameterTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 10)
)
if mibBuilder.loadTexts:
    fclFrCfcGeneralParameterTable.setStatus("mandatory")
_FclFrCfcGeneralParameterEntry_Object = MibTableRow
fclFrCfcGeneralParameterEntry = _FclFrCfcGeneralParameterEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 10, 1)
)
fclFrCfcGeneralParameterEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrCfcGenConfigId"),
)
if mibBuilder.loadTexts:
    fclFrCfcGeneralParameterEntry.setStatus("mandatory")


class _FclFrCfcGenConfigId_Type(Integer32):
    """Custom type fclFrCfcGenConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclFrCfcGenConfigId_Type.__name__ = "Integer32"
_FclFrCfcGenConfigId_Object = MibTableColumn
fclFrCfcGenConfigId = _FclFrCfcGenConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 10, 1, 1),
    _FclFrCfcGenConfigId_Type()
)
fclFrCfcGenConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrCfcGenConfigId.setStatus("mandatory")


class _FclFrCfcGenMinimumRecallTimer_Type(Integer32):
    """Custom type fclFrCfcGenMinimumRecallTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2540),
    )


_FclFrCfcGenMinimumRecallTimer_Type.__name__ = "Integer32"
_FclFrCfcGenMinimumRecallTimer_Object = MibTableColumn
fclFrCfcGenMinimumRecallTimer = _FclFrCfcGenMinimumRecallTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 10, 1, 20),
    _FclFrCfcGenMinimumRecallTimer_Type()
)
fclFrCfcGenMinimumRecallTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcGenMinimumRecallTimer.setStatus("mandatory")


class _FclFrCfcGenInactivityCheckDelay_Type(Integer32):
    """Custom type fclFrCfcGenInactivityCheckDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_FclFrCfcGenInactivityCheckDelay_Type.__name__ = "Integer32"
_FclFrCfcGenInactivityCheckDelay_Object = MibTableColumn
fclFrCfcGenInactivityCheckDelay = _FclFrCfcGenInactivityCheckDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 10, 1, 21),
    _FclFrCfcGenInactivityCheckDelay_Type()
)
fclFrCfcGenInactivityCheckDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcGenInactivityCheckDelay.setStatus("mandatory")


class _FclFrCfcGenInactivityTimer_Type(Integer32):
    """Custom type fclFrCfcGenInactivityTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2540),
    )


_FclFrCfcGenInactivityTimer_Type.__name__ = "Integer32"
_FclFrCfcGenInactivityTimer_Object = MibTableColumn
fclFrCfcGenInactivityTimer = _FclFrCfcGenInactivityTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 10, 1, 22),
    _FclFrCfcGenInactivityTimer_Type()
)
fclFrCfcGenInactivityTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcGenInactivityTimer.setStatus("mandatory")


class _FclFrCfcGenUnuseTimer_Type(Integer32):
    """Custom type fclFrCfcGenUnuseTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2550),
    )


_FclFrCfcGenUnuseTimer_Type.__name__ = "Integer32"
_FclFrCfcGenUnuseTimer_Object = MibTableColumn
fclFrCfcGenUnuseTimer = _FclFrCfcGenUnuseTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 10, 1, 23),
    _FclFrCfcGenUnuseTimer_Type()
)
fclFrCfcGenUnuseTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcGenUnuseTimer.setStatus("mandatory")


class _FclFrCfcGenSVC_Type(Integer32):
    """Custom type fclFrCfcGenSVC based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_FclFrCfcGenSVC_Type.__name__ = "Integer32"
_FclFrCfcGenSVC_Object = MibTableColumn
fclFrCfcGenSVC = _FclFrCfcGenSVC_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 10, 1, 24),
    _FclFrCfcGenSVC_Type()
)
fclFrCfcGenSVC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcGenSVC.setStatus("mandatory")
_FclFrCfcSignallingParameterTable_Object = MibTable
fclFrCfcSignallingParameterTable = _FclFrCfcSignallingParameterTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15)
)
if mibBuilder.loadTexts:
    fclFrCfcSignallingParameterTable.setStatus("mandatory")
_FclFrCfcSignallingParameterEntry_Object = MibTableRow
fclFrCfcSignallingParameterEntry = _FclFrCfcSignallingParameterEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1)
)
fclFrCfcSignallingParameterEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrCfcSigConfigId"),
)
if mibBuilder.loadTexts:
    fclFrCfcSignallingParameterEntry.setStatus("mandatory")


class _FclFrCfcSigConfigId_Type(Integer32):
    """Custom type fclFrCfcSigConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclFrCfcSigConfigId_Type.__name__ = "Integer32"
_FclFrCfcSigConfigId_Object = MibTableColumn
fclFrCfcSigConfigId = _FclFrCfcSigConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 1),
    _FclFrCfcSigConfigId_Type()
)
fclFrCfcSigConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrCfcSigConfigId.setStatus("mandatory")


class _FclFrCfcSigOuputTimeout_Type(Integer32):
    """Custom type fclFrCfcSigOuputTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 51000),
    )


_FclFrCfcSigOuputTimeout_Type.__name__ = "Integer32"
_FclFrCfcSigOuputTimeout_Object = MibTableColumn
fclFrCfcSigOuputTimeout = _FclFrCfcSigOuputTimeout_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 2),
    _FclFrCfcSigOuputTimeout_Type()
)
fclFrCfcSigOuputTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcSigOuputTimeout.setStatus("mandatory")


class _FclFrCfcSigSignalOutputWinSize_Type(Integer32):
    """Custom type fclFrCfcSigSignalOutputWinSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 7),
    )


_FclFrCfcSigSignalOutputWinSize_Type.__name__ = "Integer32"
_FclFrCfcSigSignalOutputWinSize_Object = MibTableColumn
fclFrCfcSigSignalOutputWinSize = _FclFrCfcSigSignalOutputWinSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 3),
    _FclFrCfcSigSignalOutputWinSize_Type()
)
fclFrCfcSigSignalOutputWinSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcSigSignalOutputWinSize.setStatus("mandatory")


class _FclFrCfcSigN200RetransMaxCount_Type(Integer32):
    """Custom type fclFrCfcSigN200RetransMaxCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FclFrCfcSigN200RetransMaxCount_Type.__name__ = "Integer32"
_FclFrCfcSigN200RetransMaxCount_Object = MibTableColumn
fclFrCfcSigN200RetransMaxCount = _FclFrCfcSigN200RetransMaxCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 5),
    _FclFrCfcSigN200RetransMaxCount_Type()
)
fclFrCfcSigN200RetransMaxCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcSigN200RetransMaxCount.setStatus("mandatory")


class _FclFrCfcSigT200RetransTimer_Type(Integer32):
    """Custom type fclFrCfcSigT200RetransTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 25500),
    )


_FclFrCfcSigT200RetransTimer_Type.__name__ = "Integer32"
_FclFrCfcSigT200RetransTimer_Object = MibTableColumn
fclFrCfcSigT200RetransTimer = _FclFrCfcSigT200RetransTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 6),
    _FclFrCfcSigT200RetransTimer_Type()
)
fclFrCfcSigT200RetransTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcSigT200RetransTimer.setStatus("mandatory")


class _FclFrCfcSigT203InactivityTimer_Type(Integer32):
    """Custom type fclFrCfcSigT203InactivityTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FclFrCfcSigT203InactivityTimer_Type.__name__ = "Integer32"
_FclFrCfcSigT203InactivityTimer_Object = MibTableColumn
fclFrCfcSigT203InactivityTimer = _FclFrCfcSigT203InactivityTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 7),
    _FclFrCfcSigT203InactivityTimer_Type()
)
fclFrCfcSigT203InactivityTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcSigT203InactivityTimer.setStatus("mandatory")


class _FclFrCfcSigConversionAimedPoint_Type(Integer32):
    """Custom type fclFrCfcSigConversionAimedPoint based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclFrCfcSigConversionAimedPoint_Type.__name__ = "Integer32"
_FclFrCfcSigConversionAimedPoint_Object = MibTableColumn
fclFrCfcSigConversionAimedPoint = _FclFrCfcSigConversionAimedPoint_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 10),
    _FclFrCfcSigConversionAimedPoint_Type()
)
fclFrCfcSigConversionAimedPoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcSigConversionAimedPoint.setStatus("mandatory")


class _FclFrCfcSigT303SetupResponseTimer_Type(Integer32):
    """Custom type fclFrCfcSigT303SetupResponseTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FclFrCfcSigT303SetupResponseTimer_Type.__name__ = "Integer32"
_FclFrCfcSigT303SetupResponseTimer_Object = MibTableColumn
fclFrCfcSigT303SetupResponseTimer = _FclFrCfcSigT303SetupResponseTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 11),
    _FclFrCfcSigT303SetupResponseTimer_Type()
)
fclFrCfcSigT303SetupResponseTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcSigT303SetupResponseTimer.setStatus("mandatory")


class _FclFrCfcSigT305DisconnectResponseTimer_Type(Integer32):
    """Custom type fclFrCfcSigT305DisconnectResponseTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FclFrCfcSigT305DisconnectResponseTimer_Type.__name__ = "Integer32"
_FclFrCfcSigT305DisconnectResponseTimer_Object = MibTableColumn
fclFrCfcSigT305DisconnectResponseTimer = _FclFrCfcSigT305DisconnectResponseTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 12),
    _FclFrCfcSigT305DisconnectResponseTimer_Type()
)
fclFrCfcSigT305DisconnectResponseTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcSigT305DisconnectResponseTimer.setStatus("mandatory")


class _FclFrCfcSigT308ReleaseResponseTimer_Type(Integer32):
    """Custom type fclFrCfcSigT308ReleaseResponseTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FclFrCfcSigT308ReleaseResponseTimer_Type.__name__ = "Integer32"
_FclFrCfcSigT308ReleaseResponseTimer_Object = MibTableColumn
fclFrCfcSigT308ReleaseResponseTimer = _FclFrCfcSigT308ReleaseResponseTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 13),
    _FclFrCfcSigT308ReleaseResponseTimer_Type()
)
fclFrCfcSigT308ReleaseResponseTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcSigT308ReleaseResponseTimer.setStatus("mandatory")


class _FclFrCfcSigT310CallProceedingTimer_Type(Integer32):
    """Custom type fclFrCfcSigT310CallProceedingTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FclFrCfcSigT310CallProceedingTimer_Type.__name__ = "Integer32"
_FclFrCfcSigT310CallProceedingTimer_Object = MibTableColumn
fclFrCfcSigT310CallProceedingTimer = _FclFrCfcSigT310CallProceedingTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 15),
    _FclFrCfcSigT310CallProceedingTimer_Type()
)
fclFrCfcSigT310CallProceedingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcSigT310CallProceedingTimer.setStatus("mandatory")


class _FclFrCfcSigT316RestartAcknowledgeTimer_Type(Integer32):
    """Custom type fclFrCfcSigT316RestartAcknowledgeTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FclFrCfcSigT316RestartAcknowledgeTimer_Type.__name__ = "Integer32"
_FclFrCfcSigT316RestartAcknowledgeTimer_Object = MibTableColumn
fclFrCfcSigT316RestartAcknowledgeTimer = _FclFrCfcSigT316RestartAcknowledgeTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 17),
    _FclFrCfcSigT316RestartAcknowledgeTimer_Type()
)
fclFrCfcSigT316RestartAcknowledgeTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcSigT316RestartAcknowledgeTimer.setStatus("mandatory")
_FclFrCfcEiCodingTable_Object = MibTable
fclFrCfcEiCodingTable = _FclFrCfcEiCodingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 16)
)
if mibBuilder.loadTexts:
    fclFrCfcEiCodingTable.setStatus("mandatory")
_FclFrCfcEiCodingEntry_Object = MibTableRow
fclFrCfcEiCodingEntry = _FclFrCfcEiCodingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 16, 1)
)
fclFrCfcEiCodingEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrCfcEiCodConfigId"),
)
if mibBuilder.loadTexts:
    fclFrCfcEiCodingEntry.setStatus("mandatory")


class _FclFrCfcEiCodConfigId_Type(Integer32):
    """Custom type fclFrCfcEiCodConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclFrCfcEiCodConfigId_Type.__name__ = "Integer32"
_FclFrCfcEiCodConfigId_Object = MibTableColumn
fclFrCfcEiCodConfigId = _FclFrCfcEiCodConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 16, 1, 1),
    _FclFrCfcEiCodConfigId_Type()
)
fclFrCfcEiCodConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrCfcEiCodConfigId.setStatus("mandatory")


class _FclFrCfcEiCodCalledTypNum_Type(Integer32):
    """Custom type fclFrCfcEiCodCalledTypNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("complementary-address", 4),
          ("international-number", 2),
          ("national-number", 3),
          ("network-specific", 5),
          ("unknown", 1))
    )


_FclFrCfcEiCodCalledTypNum_Type.__name__ = "Integer32"
_FclFrCfcEiCodCalledTypNum_Object = MibTableColumn
fclFrCfcEiCodCalledTypNum = _FclFrCfcEiCodCalledTypNum_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 16, 1, 2),
    _FclFrCfcEiCodCalledTypNum_Type()
)
fclFrCfcEiCodCalledTypNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcEiCodCalledTypNum.setStatus("mandatory")


class _FclFrCfcEiCodCalledNumPlanId_Type(Integer32):
    """Custom type fclFrCfcEiCodCalledNumPlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              9)
        )
    )
    namedValues = NamedValues(
        *(("e164", 2),
          ("private-num-plan", 9),
          ("unknown", 1),
          ("x121", 3))
    )


_FclFrCfcEiCodCalledNumPlanId_Type.__name__ = "Integer32"
_FclFrCfcEiCodCalledNumPlanId_Object = MibTableColumn
fclFrCfcEiCodCalledNumPlanId = _FclFrCfcEiCodCalledNumPlanId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 16, 1, 3),
    _FclFrCfcEiCodCalledNumPlanId_Type()
)
fclFrCfcEiCodCalledNumPlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcEiCodCalledNumPlanId.setStatus("mandatory")


class _FclFrCfcEiCodCallingTypNum_Type(Integer32):
    """Custom type fclFrCfcEiCodCallingTypNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("complementary-address", 4),
          ("international-number", 2),
          ("national-number", 3),
          ("network-specific", 5),
          ("unknown", 1))
    )


_FclFrCfcEiCodCallingTypNum_Type.__name__ = "Integer32"
_FclFrCfcEiCodCallingTypNum_Object = MibTableColumn
fclFrCfcEiCodCallingTypNum = _FclFrCfcEiCodCallingTypNum_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 16, 1, 4),
    _FclFrCfcEiCodCallingTypNum_Type()
)
fclFrCfcEiCodCallingTypNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcEiCodCallingTypNum.setStatus("mandatory")


class _FclFrCfcEiCodCallingNumPlanId_Type(Integer32):
    """Custom type fclFrCfcEiCodCallingNumPlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              9)
        )
    )
    namedValues = NamedValues(
        *(("e164", 2),
          ("private-num-plan", 9),
          ("unknown", 1),
          ("x121", 3))
    )


_FclFrCfcEiCodCallingNumPlanId_Type.__name__ = "Integer32"
_FclFrCfcEiCodCallingNumPlanId_Object = MibTableColumn
fclFrCfcEiCodCallingNumPlanId = _FclFrCfcEiCodCallingNumPlanId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 16, 1, 5),
    _FclFrCfcEiCodCallingNumPlanId_Type()
)
fclFrCfcEiCodCallingNumPlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcEiCodCallingNumPlanId.setStatus("mandatory")
_FclFrCfcLmiParameterTable_Object = MibTable
fclFrCfcLmiParameterTable = _FclFrCfcLmiParameterTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21)
)
if mibBuilder.loadTexts:
    fclFrCfcLmiParameterTable.setStatus("mandatory")
_FclFrCfcLmiParameterEntry_Object = MibTableRow
fclFrCfcLmiParameterEntry = _FclFrCfcLmiParameterEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21, 1)
)
fclFrCfcLmiParameterEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrCfcLmiConfigId"),
)
if mibBuilder.loadTexts:
    fclFrCfcLmiParameterEntry.setStatus("mandatory")


class _FclFrCfcLmiConfigId_Type(Integer32):
    """Custom type fclFrCfcLmiConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclFrCfcLmiConfigId_Type.__name__ = "Integer32"
_FclFrCfcLmiConfigId_Object = MibTableColumn
fclFrCfcLmiConfigId = _FclFrCfcLmiConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21, 1, 1),
    _FclFrCfcLmiConfigId_Type()
)
fclFrCfcLmiConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrCfcLmiConfigId.setStatus("mandatory")


class _FclFrCfcLmiDlci_Type(Integer32):
    """Custom type fclFrCfcLmiDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dlci0", 1),
          ("dlci1023", 2))
    )


_FclFrCfcLmiDlci_Type.__name__ = "Integer32"
_FclFrCfcLmiDlci_Object = MibTableColumn
fclFrCfcLmiDlci = _FclFrCfcLmiDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21, 1, 2),
    _FclFrCfcLmiDlci_Type()
)
fclFrCfcLmiDlci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcLmiDlci.setStatus("mandatory")


class _FclFrCfcLmiStandard_Type(Integer32):
    """Custom type fclFrCfcLmiStandard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ansiT1-617d", 1),
          ("itutQ933a", 2))
    )


_FclFrCfcLmiStandard_Type.__name__ = "Integer32"
_FclFrCfcLmiStandard_Object = MibTableColumn
fclFrCfcLmiStandard = _FclFrCfcLmiStandard_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21, 1, 3),
    _FclFrCfcLmiStandard_Type()
)
fclFrCfcLmiStandard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcLmiStandard.setStatus("mandatory")


class _FclFrCfcLmiAccessibilityCondition_Type(Integer32):
    """Custom type fclFrCfcLmiAccessibilityCondition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fast", 1),
          ("n393", 2))
    )


_FclFrCfcLmiAccessibilityCondition_Type.__name__ = "Integer32"
_FclFrCfcLmiAccessibilityCondition_Object = MibTableColumn
fclFrCfcLmiAccessibilityCondition = _FclFrCfcLmiAccessibilityCondition_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21, 1, 4),
    _FclFrCfcLmiAccessibilityCondition_Type()
)
fclFrCfcLmiAccessibilityCondition.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcLmiAccessibilityCondition.setStatus("mandatory")


class _FclFrCfcLmiN391FullStatusPollCount_Type(Integer32):
    """Custom type fclFrCfcLmiN391FullStatusPollCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_FclFrCfcLmiN391FullStatusPollCount_Type.__name__ = "Integer32"
_FclFrCfcLmiN391FullStatusPollCount_Object = MibTableColumn
fclFrCfcLmiN391FullStatusPollCount = _FclFrCfcLmiN391FullStatusPollCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21, 1, 5),
    _FclFrCfcLmiN391FullStatusPollCount_Type()
)
fclFrCfcLmiN391FullStatusPollCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcLmiN391FullStatusPollCount.setStatus("mandatory")


class _FclFrCfcLmiN392ErrorThreshold_Type(Integer32):
    """Custom type fclFrCfcLmiN392ErrorThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_FclFrCfcLmiN392ErrorThreshold_Type.__name__ = "Integer32"
_FclFrCfcLmiN392ErrorThreshold_Object = MibTableColumn
fclFrCfcLmiN392ErrorThreshold = _FclFrCfcLmiN392ErrorThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21, 1, 6),
    _FclFrCfcLmiN392ErrorThreshold_Type()
)
fclFrCfcLmiN392ErrorThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcLmiN392ErrorThreshold.setStatus("mandatory")


class _FclFrCfcLmiN393MonitoredEventCount_Type(Integer32):
    """Custom type fclFrCfcLmiN393MonitoredEventCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_FclFrCfcLmiN393MonitoredEventCount_Type.__name__ = "Integer32"
_FclFrCfcLmiN393MonitoredEventCount_Object = MibTableColumn
fclFrCfcLmiN393MonitoredEventCount = _FclFrCfcLmiN393MonitoredEventCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21, 1, 7),
    _FclFrCfcLmiN393MonitoredEventCount_Type()
)
fclFrCfcLmiN393MonitoredEventCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcLmiN393MonitoredEventCount.setStatus("mandatory")


class _FclFrCfcLmiT391LinkIntegPollTimer_Type(Integer32):
    """Custom type fclFrCfcLmiT391LinkIntegPollTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 30),
    )


_FclFrCfcLmiT391LinkIntegPollTimer_Type.__name__ = "Integer32"
_FclFrCfcLmiT391LinkIntegPollTimer_Object = MibTableColumn
fclFrCfcLmiT391LinkIntegPollTimer = _FclFrCfcLmiT391LinkIntegPollTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21, 1, 8),
    _FclFrCfcLmiT391LinkIntegPollTimer_Type()
)
fclFrCfcLmiT391LinkIntegPollTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcLmiT391LinkIntegPollTimer.setStatus("mandatory")


class _FclFrCfcLmiT392PollingVerifTimer_Type(Integer32):
    """Custom type fclFrCfcLmiT392PollingVerifTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 30),
    )


_FclFrCfcLmiT392PollingVerifTimer_Type.__name__ = "Integer32"
_FclFrCfcLmiT392PollingVerifTimer_Object = MibTableColumn
fclFrCfcLmiT392PollingVerifTimer = _FclFrCfcLmiT392PollingVerifTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21, 1, 9),
    _FclFrCfcLmiT392PollingVerifTimer_Type()
)
fclFrCfcLmiT392PollingVerifTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcLmiT392PollingVerifTimer.setStatus("mandatory")


class _FclFrCfcLmiAsynchronousStatusReport_Type(Integer32):
    """Custom type fclFrCfcLmiAsynchronousStatusReport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclFrCfcLmiAsynchronousStatusReport_Type.__name__ = "Integer32"
_FclFrCfcLmiAsynchronousStatusReport_Object = MibTableColumn
fclFrCfcLmiAsynchronousStatusReport = _FclFrCfcLmiAsynchronousStatusReport_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21, 1, 10),
    _FclFrCfcLmiAsynchronousStatusReport_Type()
)
fclFrCfcLmiAsynchronousStatusReport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfcLmiAsynchronousStatusReport.setStatus("mandatory")
_FclFrConfigurationSe_ObjectIdentity = ObjectIdentity
fclFrConfigurationSe = _FclFrConfigurationSe_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40)
)
_FclFrConfigSeTable_Object = MibTable
fclFrConfigSeTable = _FclFrConfigSeTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 1)
)
if mibBuilder.loadTexts:
    fclFrConfigSeTable.setStatus("mandatory")
_FclFrConfigSeEntry_Object = MibTableRow
fclFrConfigSeEntry = _FclFrConfigSeEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 1, 1)
)
fclFrConfigSeEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrCfsConfigId"),
)
if mibBuilder.loadTexts:
    fclFrConfigSeEntry.setStatus("mandatory")


class _FclFrCfsConfigId_Type(Integer32):
    """Custom type fclFrCfsConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclFrCfsConfigId_Type.__name__ = "Integer32"
_FclFrCfsConfigId_Object = MibTableColumn
fclFrCfsConfigId = _FclFrCfsConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 1, 1, 1),
    _FclFrCfsConfigId_Type()
)
fclFrCfsConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrCfsConfigId.setStatus("mandatory")


class _FclFrCfsStatus_Type(Integer32):
    """Custom type fclFrCfsStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclFrCfsStatus_Type.__name__ = "Integer32"
_FclFrCfsStatus_Object = MibTableColumn
fclFrCfsStatus = _FclFrCfsStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 1, 1, 2),
    _FclFrCfsStatus_Type()
)
fclFrCfsStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsStatus.setStatus("mandatory")


class _FclFrCfsDescription_Type(DisplayString):
    """Custom type fclFrCfsDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_FclFrCfsDescription_Type.__name__ = "DisplayString"
_FclFrCfsDescription_Object = MibTableColumn
fclFrCfsDescription = _FclFrCfsDescription_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 1, 1, 3),
    _FclFrCfsDescription_Type()
)
fclFrCfsDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsDescription.setStatus("mandatory")


class _FclFrCfsProfileId_Type(Integer32):
    """Custom type fclFrCfsProfileId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclFrCfsProfileId_Type.__name__ = "Integer32"
_FclFrCfsProfileId_Object = MibTableColumn
fclFrCfsProfileId = _FclFrCfsProfileId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 1, 1, 4),
    _FclFrCfsProfileId_Type()
)
fclFrCfsProfileId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsProfileId.setStatus("mandatory")


class _FclFrCfsModificationCount_Type(Integer32):
    """Custom type fclFrCfsModificationCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FclFrCfsModificationCount_Type.__name__ = "Integer32"
_FclFrCfsModificationCount_Object = MibTableColumn
fclFrCfsModificationCount = _FclFrCfsModificationCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 1, 1, 5),
    _FclFrCfsModificationCount_Type()
)
fclFrCfsModificationCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrCfsModificationCount.setStatus("mandatory")
_FclFrCfsGeneralParameterTable_Object = MibTable
fclFrCfsGeneralParameterTable = _FclFrCfsGeneralParameterTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10)
)
if mibBuilder.loadTexts:
    fclFrCfsGeneralParameterTable.setStatus("mandatory")
_FclFrCfsGeneralParameterEntry_Object = MibTableRow
fclFrCfsGeneralParameterEntry = _FclFrCfsGeneralParameterEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1)
)
fclFrCfsGeneralParameterEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrCfsGenConfigId"),
)
if mibBuilder.loadTexts:
    fclFrCfsGeneralParameterEntry.setStatus("mandatory")


class _FclFrCfsGenConfigId_Type(Integer32):
    """Custom type fclFrCfsGenConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclFrCfsGenConfigId_Type.__name__ = "Integer32"
_FclFrCfsGenConfigId_Object = MibTableColumn
fclFrCfsGenConfigId = _FclFrCfsGenConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1, 1),
    _FclFrCfsGenConfigId_Type()
)
fclFrCfsGenConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrCfsGenConfigId.setStatus("mandatory")


class _FclFrCfsGenCallReturnTransmission_Type(Integer32):
    """Custom type fclFrCfsGenCallReturnTransmission based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onIfFailed", 3),
          ("onIfFailedOrBusy", 4))
    )


_FclFrCfsGenCallReturnTransmission_Type.__name__ = "Integer32"
_FclFrCfsGenCallReturnTransmission_Object = MibTableColumn
fclFrCfsGenCallReturnTransmission = _FclFrCfsGenCallReturnTransmission_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1, 15),
    _FclFrCfsGenCallReturnTransmission_Type()
)
fclFrCfsGenCallReturnTransmission.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsGenCallReturnTransmission.setStatus("mandatory")


class _FclFrCfsGenUnuseTimer_Type(Integer32):
    """Custom type fclFrCfsGenUnuseTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2550),
    )


_FclFrCfsGenUnuseTimer_Type.__name__ = "Integer32"
_FclFrCfsGenUnuseTimer_Object = MibTableColumn
fclFrCfsGenUnuseTimer = _FclFrCfsGenUnuseTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1, 20),
    _FclFrCfsGenUnuseTimer_Type()
)
fclFrCfsGenUnuseTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsGenUnuseTimer.setStatus("mandatory")


class _FclFrCfsGenDlcSetupAlarmThreshold_Type(Integer32):
    """Custom type fclFrCfsGenDlcSetupAlarmThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclFrCfsGenDlcSetupAlarmThreshold_Type.__name__ = "Integer32"
_FclFrCfsGenDlcSetupAlarmThreshold_Object = MibTableColumn
fclFrCfsGenDlcSetupAlarmThreshold = _FclFrCfsGenDlcSetupAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1, 30),
    _FclFrCfsGenDlcSetupAlarmThreshold_Type()
)
fclFrCfsGenDlcSetupAlarmThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsGenDlcSetupAlarmThreshold.setStatus("mandatory")


class _FclFrCfsGenDlcSetupDiscardThreshold_Type(Integer32):
    """Custom type fclFrCfsGenDlcSetupDiscardThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 1100),
    )


_FclFrCfsGenDlcSetupDiscardThreshold_Type.__name__ = "Integer32"
_FclFrCfsGenDlcSetupDiscardThreshold_Object = MibTableColumn
fclFrCfsGenDlcSetupDiscardThreshold = _FclFrCfsGenDlcSetupDiscardThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1, 31),
    _FclFrCfsGenDlcSetupDiscardThreshold_Type()
)
fclFrCfsGenDlcSetupDiscardThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsGenDlcSetupDiscardThreshold.setStatus("mandatory")


class _FclFrCfsGenBookingUbrThreshold_Type(Integer32):
    """Custom type fclFrCfsGenBookingUbrThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FclFrCfsGenBookingUbrThreshold_Type.__name__ = "Integer32"
_FclFrCfsGenBookingUbrThreshold_Object = MibTableColumn
fclFrCfsGenBookingUbrThreshold = _FclFrCfsGenBookingUbrThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1, 32),
    _FclFrCfsGenBookingUbrThreshold_Type()
)
fclFrCfsGenBookingUbrThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsGenBookingUbrThreshold.setStatus("mandatory")


class _FclFrCfsGenBookingVbrRtThreshold_Type(Integer32):
    """Custom type fclFrCfsGenBookingVbrRtThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FclFrCfsGenBookingVbrRtThreshold_Type.__name__ = "Integer32"
_FclFrCfsGenBookingVbrRtThreshold_Object = MibTableColumn
fclFrCfsGenBookingVbrRtThreshold = _FclFrCfsGenBookingVbrRtThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1, 33),
    _FclFrCfsGenBookingVbrRtThreshold_Type()
)
fclFrCfsGenBookingVbrRtThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsGenBookingVbrRtThreshold.setStatus("mandatory")


class _FclFrCfsGenBehavior_Type(Integer32):
    """Custom type fclFrCfsGenBehavior based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normal", 1),
          ("svc-endpoint", 2))
    )


_FclFrCfsGenBehavior_Type.__name__ = "Integer32"
_FclFrCfsGenBehavior_Object = MibTableColumn
fclFrCfsGenBehavior = _FclFrCfsGenBehavior_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1, 40),
    _FclFrCfsGenBehavior_Type()
)
fclFrCfsGenBehavior.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsGenBehavior.setStatus("mandatory")


class _FclFrCfsGenDynamicEir_Type(Integer32):
    """Custom type fclFrCfsGenDynamicEir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclFrCfsGenDynamicEir_Type.__name__ = "Integer32"
_FclFrCfsGenDynamicEir_Object = MibTableColumn
fclFrCfsGenDynamicEir = _FclFrCfsGenDynamicEir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1, 41),
    _FclFrCfsGenDynamicEir_Type()
)
fclFrCfsGenDynamicEir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsGenDynamicEir.setStatus("mandatory")


class _FclFrCfsGenPredictionRoundTripDelay_Type(Integer32):
    """Custom type fclFrCfsGenPredictionRoundTripDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FclFrCfsGenPredictionRoundTripDelay_Type.__name__ = "Integer32"
_FclFrCfsGenPredictionRoundTripDelay_Object = MibTableColumn
fclFrCfsGenPredictionRoundTripDelay = _FclFrCfsGenPredictionRoundTripDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1, 42),
    _FclFrCfsGenPredictionRoundTripDelay_Type()
)
fclFrCfsGenPredictionRoundTripDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsGenPredictionRoundTripDelay.setStatus("mandatory")


class _FclFrCfsGenNetworkBandwidth_Type(Integer32):
    """Custom type fclFrCfsGenNetworkBandwidth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 34),
    )


_FclFrCfsGenNetworkBandwidth_Type.__name__ = "Integer32"
_FclFrCfsGenNetworkBandwidth_Object = MibTableColumn
fclFrCfsGenNetworkBandwidth = _FclFrCfsGenNetworkBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1, 43),
    _FclFrCfsGenNetworkBandwidth_Type()
)
fclFrCfsGenNetworkBandwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsGenNetworkBandwidth.setStatus("mandatory")
_FclFrCfsSignallingTable_Object = MibTable
fclFrCfsSignallingTable = _FclFrCfsSignallingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20)
)
if mibBuilder.loadTexts:
    fclFrCfsSignallingTable.setStatus("mandatory")
_FclFrCfsSignallingEntry_Object = MibTableRow
fclFrCfsSignallingEntry = _FclFrCfsSignallingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1)
)
fclFrCfsSignallingEntry.setIndexNames(
    (0, "PCE-MIB", "fclFrCfsSigConfigId"),
)
if mibBuilder.loadTexts:
    fclFrCfsSignallingEntry.setStatus("mandatory")


class _FclFrCfsSigConfigId_Type(Integer32):
    """Custom type fclFrCfsSigConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclFrCfsSigConfigId_Type.__name__ = "Integer32"
_FclFrCfsSigConfigId_Object = MibTableColumn
fclFrCfsSigConfigId = _FclFrCfsSigConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1, 1),
    _FclFrCfsSigConfigId_Type()
)
fclFrCfsSigConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclFrCfsSigConfigId.setStatus("mandatory")


class _FclFrCfsSigOuputTimeout_Type(Integer32):
    """Custom type fclFrCfsSigOuputTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 51000),
    )


_FclFrCfsSigOuputTimeout_Type.__name__ = "Integer32"
_FclFrCfsSigOuputTimeout_Object = MibTableColumn
fclFrCfsSigOuputTimeout = _FclFrCfsSigOuputTimeout_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1, 2),
    _FclFrCfsSigOuputTimeout_Type()
)
fclFrCfsSigOuputTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsSigOuputTimeout.setStatus("mandatory")


class _FclFrCfsSigSignalOutputWinSize_Type(Integer32):
    """Custom type fclFrCfsSigSignalOutputWinSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 7),
    )


_FclFrCfsSigSignalOutputWinSize_Type.__name__ = "Integer32"
_FclFrCfsSigSignalOutputWinSize_Object = MibTableColumn
fclFrCfsSigSignalOutputWinSize = _FclFrCfsSigSignalOutputWinSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1, 3),
    _FclFrCfsSigSignalOutputWinSize_Type()
)
fclFrCfsSigSignalOutputWinSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsSigSignalOutputWinSize.setStatus("mandatory")


class _FclFrCfsSigN200RetransMaxCount_Type(Integer32):
    """Custom type fclFrCfsSigN200RetransMaxCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FclFrCfsSigN200RetransMaxCount_Type.__name__ = "Integer32"
_FclFrCfsSigN200RetransMaxCount_Object = MibTableColumn
fclFrCfsSigN200RetransMaxCount = _FclFrCfsSigN200RetransMaxCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1, 5),
    _FclFrCfsSigN200RetransMaxCount_Type()
)
fclFrCfsSigN200RetransMaxCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsSigN200RetransMaxCount.setStatus("mandatory")


class _FclFrCfsSigT200RetransTimer_Type(Integer32):
    """Custom type fclFrCfsSigT200RetransTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 25500),
    )


_FclFrCfsSigT200RetransTimer_Type.__name__ = "Integer32"
_FclFrCfsSigT200RetransTimer_Object = MibTableColumn
fclFrCfsSigT200RetransTimer = _FclFrCfsSigT200RetransTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1, 6),
    _FclFrCfsSigT200RetransTimer_Type()
)
fclFrCfsSigT200RetransTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsSigT200RetransTimer.setStatus("mandatory")


class _FclFrCfsSigT203InactivityTimer_Type(Integer32):
    """Custom type fclFrCfsSigT203InactivityTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FclFrCfsSigT203InactivityTimer_Type.__name__ = "Integer32"
_FclFrCfsSigT203InactivityTimer_Object = MibTableColumn
fclFrCfsSigT203InactivityTimer = _FclFrCfsSigT203InactivityTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1, 7),
    _FclFrCfsSigT203InactivityTimer_Type()
)
fclFrCfsSigT203InactivityTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsSigT203InactivityTimer.setStatus("mandatory")


class _FclFrCfsSigT303SetupResponseTimer_Type(Integer32):
    """Custom type fclFrCfsSigT303SetupResponseTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FclFrCfsSigT303SetupResponseTimer_Type.__name__ = "Integer32"
_FclFrCfsSigT303SetupResponseTimer_Object = MibTableColumn
fclFrCfsSigT303SetupResponseTimer = _FclFrCfsSigT303SetupResponseTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1, 11),
    _FclFrCfsSigT303SetupResponseTimer_Type()
)
fclFrCfsSigT303SetupResponseTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsSigT303SetupResponseTimer.setStatus("mandatory")


class _FclFrCfsSigT305DisconnectResponseTimer_Type(Integer32):
    """Custom type fclFrCfsSigT305DisconnectResponseTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FclFrCfsSigT305DisconnectResponseTimer_Type.__name__ = "Integer32"
_FclFrCfsSigT305DisconnectResponseTimer_Object = MibTableColumn
fclFrCfsSigT305DisconnectResponseTimer = _FclFrCfsSigT305DisconnectResponseTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1, 12),
    _FclFrCfsSigT305DisconnectResponseTimer_Type()
)
fclFrCfsSigT305DisconnectResponseTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsSigT305DisconnectResponseTimer.setStatus("mandatory")


class _FclFrCfsSigT308ReleaseResponseTimer_Type(Integer32):
    """Custom type fclFrCfsSigT308ReleaseResponseTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FclFrCfsSigT308ReleaseResponseTimer_Type.__name__ = "Integer32"
_FclFrCfsSigT308ReleaseResponseTimer_Object = MibTableColumn
fclFrCfsSigT308ReleaseResponseTimer = _FclFrCfsSigT308ReleaseResponseTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1, 13),
    _FclFrCfsSigT308ReleaseResponseTimer_Type()
)
fclFrCfsSigT308ReleaseResponseTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsSigT308ReleaseResponseTimer.setStatus("mandatory")


class _FclFrCfsSigT310CallProceedingTimer_Type(Integer32):
    """Custom type fclFrCfsSigT310CallProceedingTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FclFrCfsSigT310CallProceedingTimer_Type.__name__ = "Integer32"
_FclFrCfsSigT310CallProceedingTimer_Object = MibTableColumn
fclFrCfsSigT310CallProceedingTimer = _FclFrCfsSigT310CallProceedingTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1, 15),
    _FclFrCfsSigT310CallProceedingTimer_Type()
)
fclFrCfsSigT310CallProceedingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsSigT310CallProceedingTimer.setStatus("mandatory")


class _FclFrCfsSigT316RestartAcknowledgeTimer_Type(Integer32):
    """Custom type fclFrCfsSigT316RestartAcknowledgeTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FclFrCfsSigT316RestartAcknowledgeTimer_Type.__name__ = "Integer32"
_FclFrCfsSigT316RestartAcknowledgeTimer_Object = MibTableColumn
fclFrCfsSigT316RestartAcknowledgeTimer = _FclFrCfsSigT316RestartAcknowledgeTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1, 17),
    _FclFrCfsSigT316RestartAcknowledgeTimer_Type()
)
fclFrCfsSigT316RestartAcknowledgeTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclFrCfsSigT316RestartAcknowledgeTimer.setStatus("mandatory")
_FclInterUnitLink_ObjectIdentity = ObjectIdentity
fclInterUnitLink = _FclInterUnitLink_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 45)
)
_FclInterUnitLinkTable_Object = MibTable
fclInterUnitLinkTable = _FclInterUnitLinkTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 45, 1)
)
if mibBuilder.loadTexts:
    fclInterUnitLinkTable.setStatus("mandatory")
_FclInterUnitLinkEntry_Object = MibTableRow
fclInterUnitLinkEntry = _FclInterUnitLinkEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 45, 1, 1)
)
fclInterUnitLinkEntry.setIndexNames(
    (0, "PCE-MIB", "fclIulLogPortId"),
)
if mibBuilder.loadTexts:
    fclInterUnitLinkEntry.setStatus("mandatory")


class _FclIulLogPortId_Type(Integer32):
    """Custom type fclIulLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(36, 41),
    )


_FclIulLogPortId_Type.__name__ = "Integer32"
_FclIulLogPortId_Object = MibTableColumn
fclIulLogPortId = _FclIulLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 45, 1, 1, 1),
    _FclIulLogPortId_Type()
)
fclIulLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclIulLogPortId.setStatus("mandatory")


class _FclIulInterfaceId_Type(Integer32):
    """Custom type fclIulInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(36, 41),
    )


_FclIulInterfaceId_Type.__name__ = "Integer32"
_FclIulInterfaceId_Object = MibTableColumn
fclIulInterfaceId = _FclIulInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 45, 1, 1, 2),
    _FclIulInterfaceId_Type()
)
fclIulInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclIulInterfaceId.setStatus("mandatory")


class _FclIulCallReturnTransmission_Type(Integer32):
    """Custom type fclIulCallReturnTransmission based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 3))
    )


_FclIulCallReturnTransmission_Type.__name__ = "Integer32"
_FclIulCallReturnTransmission_Object = MibTableColumn
fclIulCallReturnTransmission = _FclIulCallReturnTransmission_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 45, 1, 1, 5),
    _FclIulCallReturnTransmission_Type()
)
fclIulCallReturnTransmission.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclIulCallReturnTransmission.setStatus("mandatory")


class _FclIulConversionAimedPoint_Type(Integer32):
    """Custom type fclIulConversionAimedPoint based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclIulConversionAimedPoint_Type.__name__ = "Integer32"
_FclIulConversionAimedPoint_Object = MibTableColumn
fclIulConversionAimedPoint = _FclIulConversionAimedPoint_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 45, 1, 1, 10),
    _FclIulConversionAimedPoint_Type()
)
fclIulConversionAimedPoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclIulConversionAimedPoint.setStatus("mandatory")


class _FclIulConversionIncomingCall_Type(Integer32):
    """Custom type fclIulConversionIncomingCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("calledAddress", 3),
          ("callingAddress", 2),
          ("callingAddressAndCalledAddress", 4),
          ("off", 1))
    )


_FclIulConversionIncomingCall_Type.__name__ = "Integer32"
_FclIulConversionIncomingCall_Object = MibTableColumn
fclIulConversionIncomingCall = _FclIulConversionIncomingCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 45, 1, 1, 11),
    _FclIulConversionIncomingCall_Type()
)
fclIulConversionIncomingCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclIulConversionIncomingCall.setStatus("mandatory")


class _FclIulConversionOutgoingCall_Type(Integer32):
    """Custom type fclIulConversionOutgoingCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("calledAddress", 3),
          ("callingAddress", 2),
          ("callingAddressAndCalledAddress", 4),
          ("off", 1))
    )


_FclIulConversionOutgoingCall_Type.__name__ = "Integer32"
_FclIulConversionOutgoingCall_Object = MibTableColumn
fclIulConversionOutgoingCall = _FclIulConversionOutgoingCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 45, 1, 1, 12),
    _FclIulConversionOutgoingCall_Type()
)
fclIulConversionOutgoingCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclIulConversionOutgoingCall.setStatus("mandatory")


class _FclIulConversionAddressCheck_Type(Integer32):
    """Custom type fclIulConversionAddressCheck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onIncomingCall", 2),
          ("onIncomingCallAndOutgoingCall", 4),
          ("onOutgoingCall", 3))
    )


_FclIulConversionAddressCheck_Type.__name__ = "Integer32"
_FclIulConversionAddressCheck_Object = MibTableColumn
fclIulConversionAddressCheck = _FclIulConversionAddressCheck_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 45, 1, 1, 13),
    _FclIulConversionAddressCheck_Type()
)
fclIulConversionAddressCheck.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclIulConversionAddressCheck.setStatus("mandatory")
_FclX25Configurations_ObjectIdentity = ObjectIdentity
fclX25Configurations = _FclX25Configurations_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50)
)
_FclX25ConfigAccess_ObjectIdentity = ObjectIdentity
fclX25ConfigAccess = _FclX25ConfigAccess_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1)
)
_FclX25ConfigAccessTable_Object = MibTable
fclX25ConfigAccessTable = _FclX25ConfigAccessTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 1)
)
if mibBuilder.loadTexts:
    fclX25ConfigAccessTable.setStatus("mandatory")
_FclX25ConfigAccessEntry_Object = MibTableRow
fclX25ConfigAccessEntry = _FclX25ConfigAccessEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 1, 1)
)
fclX25ConfigAccessEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25CfaConfigId"),
)
if mibBuilder.loadTexts:
    fclX25ConfigAccessEntry.setStatus("mandatory")


class _FclX25CfaConfigId_Type(Integer32):
    """Custom type fclX25CfaConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25CfaConfigId_Type.__name__ = "Integer32"
_FclX25CfaConfigId_Object = MibTableColumn
fclX25CfaConfigId = _FclX25CfaConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 1, 1, 1),
    _FclX25CfaConfigId_Type()
)
fclX25CfaConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25CfaConfigId.setStatus("mandatory")


class _FclX25CfaStatus_Type(Integer32):
    """Custom type fclX25CfaStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclX25CfaStatus_Type.__name__ = "Integer32"
_FclX25CfaStatus_Object = MibTableColumn
fclX25CfaStatus = _FclX25CfaStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 1, 1, 2),
    _FclX25CfaStatus_Type()
)
fclX25CfaStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaStatus.setStatus("mandatory")


class _FclX25CfaDescription_Type(DisplayString):
    """Custom type fclX25CfaDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_FclX25CfaDescription_Type.__name__ = "DisplayString"
_FclX25CfaDescription_Object = MibTableColumn
fclX25CfaDescription = _FclX25CfaDescription_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 1, 1, 3),
    _FclX25CfaDescription_Type()
)
fclX25CfaDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaDescription.setStatus("mandatory")


class _FclX25CfaProfileId_Type(Integer32):
    """Custom type fclX25CfaProfileId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25CfaProfileId_Type.__name__ = "Integer32"
_FclX25CfaProfileId_Object = MibTableColumn
fclX25CfaProfileId = _FclX25CfaProfileId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 1, 1, 4),
    _FclX25CfaProfileId_Type()
)
fclX25CfaProfileId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaProfileId.setStatus("mandatory")


class _FclX25CfaModificationCount_Type(Integer32):
    """Custom type fclX25CfaModificationCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FclX25CfaModificationCount_Type.__name__ = "Integer32"
_FclX25CfaModificationCount_Object = MibTableColumn
fclX25CfaModificationCount = _FclX25CfaModificationCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 1, 1, 5),
    _FclX25CfaModificationCount_Type()
)
fclX25CfaModificationCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25CfaModificationCount.setStatus("mandatory")
_FclX25CfaDataLinkNetworkTable_Object = MibTable
fclX25CfaDataLinkNetworkTable = _FclX25CfaDataLinkNetworkTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10)
)
if mibBuilder.loadTexts:
    fclX25CfaDataLinkNetworkTable.setStatus("mandatory")
_FclX25CfaDataLinkNetworkEntry_Object = MibTableRow
fclX25CfaDataLinkNetworkEntry = _FclX25CfaDataLinkNetworkEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1)
)
fclX25CfaDataLinkNetworkEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25CfaDlnConfigId"),
)
if mibBuilder.loadTexts:
    fclX25CfaDataLinkNetworkEntry.setStatus("mandatory")


class _FclX25CfaDlnConfigId_Type(Integer32):
    """Custom type fclX25CfaDlnConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25CfaDlnConfigId_Type.__name__ = "Integer32"
_FclX25CfaDlnConfigId_Object = MibTableColumn
fclX25CfaDlnConfigId = _FclX25CfaDlnConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 1),
    _FclX25CfaDlnConfigId_Type()
)
fclX25CfaDlnConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25CfaDlnConfigId.setStatus("mandatory")


class _FclX25CfaDlnStationType_Type(Integer32):
    """Custom type fclX25CfaDlnStationType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dce", 2),
          ("dte", 1))
    )


_FclX25CfaDlnStationType_Type.__name__ = "Integer32"
_FclX25CfaDlnStationType_Object = MibTableColumn
fclX25CfaDlnStationType = _FclX25CfaDlnStationType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 2),
    _FclX25CfaDlnStationType_Type()
)
fclX25CfaDlnStationType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaDlnStationType.setStatus("mandatory")


class _FclX25CfaDlnNetworkType_Type(Integer32):
    """Custom type fclX25CfaDlnNetworkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              9,
              13,
              17,
              21,
              25,
              29,
              33,
              37,
              41,
              45,
              53,
              61,
              65,
              69,
              73,
              77,
              93)
        )
    )
    namedValues = NamedValues(
        *(("austpac", 45),
          ("austriaDatexP", 93),
          ("datapac", 21),
          ("datapak", 69),
          ("dcs", 37),
          ("dn1", 25),
          ("entel", 77),
          ("germanyDatexP", 33),
          ("helpac", 73),
          ("iberpac", 65),
          ("infoSwitch", 17),
          ("itapac", 41),
          ("pss", 29),
          ("telenet", 9),
          ("telepac", 61),
          ("transpac", 5),
          ("tymnet", 13),
          ("uninet", 53),
          ("x25", 1))
    )


_FclX25CfaDlnNetworkType_Type.__name__ = "Integer32"
_FclX25CfaDlnNetworkType_Object = MibTableColumn
fclX25CfaDlnNetworkType = _FclX25CfaDlnNetworkType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 3),
    _FclX25CfaDlnNetworkType_Type()
)
fclX25CfaDlnNetworkType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaDlnNetworkType.setStatus("mandatory")


class _FclX25CfaDlnN2RetryCount_Type(Integer32):
    """Custom type fclX25CfaDlnN2RetryCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 250),
    )


_FclX25CfaDlnN2RetryCount_Type.__name__ = "Integer32"
_FclX25CfaDlnN2RetryCount_Object = MibTableColumn
fclX25CfaDlnN2RetryCount = _FclX25CfaDlnN2RetryCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 5),
    _FclX25CfaDlnN2RetryCount_Type()
)
fclX25CfaDlnN2RetryCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaDlnN2RetryCount.setStatus("mandatory")


class _FclX25CfaDlnT1AcknowledgeTimer_Type(Integer32):
    """Custom type fclX25CfaDlnT1AcknowledgeTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(200, 25000),
    )


_FclX25CfaDlnT1AcknowledgeTimer_Type.__name__ = "Integer32"
_FclX25CfaDlnT1AcknowledgeTimer_Object = MibTableColumn
fclX25CfaDlnT1AcknowledgeTimer = _FclX25CfaDlnT1AcknowledgeTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 6),
    _FclX25CfaDlnT1AcknowledgeTimer_Type()
)
fclX25CfaDlnT1AcknowledgeTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaDlnT1AcknowledgeTimer.setStatus("mandatory")


class _FclX25CfaDlnT2AcknwledgeDelayTimer_Type(Integer32):
    """Custom type fclX25CfaDlnT2AcknwledgeDelayTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 12700),
    )


_FclX25CfaDlnT2AcknwledgeDelayTimer_Type.__name__ = "Integer32"
_FclX25CfaDlnT2AcknwledgeDelayTimer_Object = MibTableColumn
fclX25CfaDlnT2AcknwledgeDelayTimer = _FclX25CfaDlnT2AcknwledgeDelayTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 7),
    _FclX25CfaDlnT2AcknwledgeDelayTimer_Type()
)
fclX25CfaDlnT2AcknwledgeDelayTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaDlnT2AcknwledgeDelayTimer.setStatus("mandatory")


class _FclX25CfaDlnKWindowSize_Type(Integer32):
    """Custom type fclX25CfaDlnKWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 127),
    )


_FclX25CfaDlnKWindowSize_Type.__name__ = "Integer32"
_FclX25CfaDlnKWindowSize_Object = MibTableColumn
fclX25CfaDlnKWindowSize = _FclX25CfaDlnKWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 8),
    _FclX25CfaDlnKWindowSize_Type()
)
fclX25CfaDlnKWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaDlnKWindowSize.setStatus("mandatory")


class _FclX25CfaDlnEachPacketAcknowledgement_Type(Integer32):
    """Custom type fclX25CfaDlnEachPacketAcknowledgement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclX25CfaDlnEachPacketAcknowledgement_Type.__name__ = "Integer32"
_FclX25CfaDlnEachPacketAcknowledgement_Object = MibTableColumn
fclX25CfaDlnEachPacketAcknowledgement = _FclX25CfaDlnEachPacketAcknowledgement_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 9),
    _FclX25CfaDlnEachPacketAcknowledgement_Type()
)
fclX25CfaDlnEachPacketAcknowledgement.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaDlnEachPacketAcknowledgement.setStatus("mandatory")


class _FclX25CfaDlnLowestIncomingChannel_Type(Integer32):
    """Custom type fclX25CfaDlnLowestIncomingChannel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_FclX25CfaDlnLowestIncomingChannel_Type.__name__ = "Integer32"
_FclX25CfaDlnLowestIncomingChannel_Object = MibTableColumn
fclX25CfaDlnLowestIncomingChannel = _FclX25CfaDlnLowestIncomingChannel_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 10),
    _FclX25CfaDlnLowestIncomingChannel_Type()
)
fclX25CfaDlnLowestIncomingChannel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaDlnLowestIncomingChannel.setStatus("mandatory")


class _FclX25CfaDlnIncomingChannelCount_Type(Integer32):
    """Custom type fclX25CfaDlnIncomingChannelCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4096),
    )


_FclX25CfaDlnIncomingChannelCount_Type.__name__ = "Integer32"
_FclX25CfaDlnIncomingChannelCount_Object = MibTableColumn
fclX25CfaDlnIncomingChannelCount = _FclX25CfaDlnIncomingChannelCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 11),
    _FclX25CfaDlnIncomingChannelCount_Type()
)
fclX25CfaDlnIncomingChannelCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaDlnIncomingChannelCount.setStatus("mandatory")


class _FclX25CfaDlnLowestTwoWayChannel_Type(Integer32):
    """Custom type fclX25CfaDlnLowestTwoWayChannel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_FclX25CfaDlnLowestTwoWayChannel_Type.__name__ = "Integer32"
_FclX25CfaDlnLowestTwoWayChannel_Object = MibTableColumn
fclX25CfaDlnLowestTwoWayChannel = _FclX25CfaDlnLowestTwoWayChannel_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 15),
    _FclX25CfaDlnLowestTwoWayChannel_Type()
)
fclX25CfaDlnLowestTwoWayChannel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaDlnLowestTwoWayChannel.setStatus("mandatory")


class _FclX25CfaDlnTwoWayChannelCount_Type(Integer32):
    """Custom type fclX25CfaDlnTwoWayChannelCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4096),
    )


_FclX25CfaDlnTwoWayChannelCount_Type.__name__ = "Integer32"
_FclX25CfaDlnTwoWayChannelCount_Object = MibTableColumn
fclX25CfaDlnTwoWayChannelCount = _FclX25CfaDlnTwoWayChannelCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 16),
    _FclX25CfaDlnTwoWayChannelCount_Type()
)
fclX25CfaDlnTwoWayChannelCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaDlnTwoWayChannelCount.setStatus("mandatory")


class _FclX25CfaDlnLowestOutgoingChannel_Type(Integer32):
    """Custom type fclX25CfaDlnLowestOutgoingChannel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_FclX25CfaDlnLowestOutgoingChannel_Type.__name__ = "Integer32"
_FclX25CfaDlnLowestOutgoingChannel_Object = MibTableColumn
fclX25CfaDlnLowestOutgoingChannel = _FclX25CfaDlnLowestOutgoingChannel_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 17),
    _FclX25CfaDlnLowestOutgoingChannel_Type()
)
fclX25CfaDlnLowestOutgoingChannel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaDlnLowestOutgoingChannel.setStatus("mandatory")


class _FclX25CfaDlnOutgoingChannelCount_Type(Integer32):
    """Custom type fclX25CfaDlnOutgoingChannelCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4096),
    )


_FclX25CfaDlnOutgoingChannelCount_Type.__name__ = "Integer32"
_FclX25CfaDlnOutgoingChannelCount_Object = MibTableColumn
fclX25CfaDlnOutgoingChannelCount = _FclX25CfaDlnOutgoingChannelCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 18),
    _FclX25CfaDlnOutgoingChannelCount_Type()
)
fclX25CfaDlnOutgoingChannelCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaDlnOutgoingChannelCount.setStatus("mandatory")


class _FclX25CfaDlnOutgoingChannelNumbering_Type(Integer32):
    """Custom type fclX25CfaDlnOutgoingChannelNumbering based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("decremental", 1),
          ("incremental", 2))
    )


_FclX25CfaDlnOutgoingChannelNumbering_Type.__name__ = "Integer32"
_FclX25CfaDlnOutgoingChannelNumbering_Object = MibTableColumn
fclX25CfaDlnOutgoingChannelNumbering = _FclX25CfaDlnOutgoingChannelNumbering_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 19),
    _FclX25CfaDlnOutgoingChannelNumbering_Type()
)
fclX25CfaDlnOutgoingChannelNumbering.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaDlnOutgoingChannelNumbering.setStatus("mandatory")


class _FclX25CfaDlnDBitModification_Type(Integer32):
    """Custom type fclX25CfaDlnDBitModification based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clear", 2),
          ("off", 1),
          ("on", 3))
    )


_FclX25CfaDlnDBitModification_Type.__name__ = "Integer32"
_FclX25CfaDlnDBitModification_Object = MibTableColumn
fclX25CfaDlnDBitModification = _FclX25CfaDlnDBitModification_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 30),
    _FclX25CfaDlnDBitModification_Type()
)
fclX25CfaDlnDBitModification.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaDlnDBitModification.setStatus("mandatory")
_FclX25CfaFacilityTable_Object = MibTable
fclX25CfaFacilityTable = _FclX25CfaFacilityTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 20)
)
if mibBuilder.loadTexts:
    fclX25CfaFacilityTable.setStatus("mandatory")
_FclX25CfaFacilityEntry_Object = MibTableRow
fclX25CfaFacilityEntry = _FclX25CfaFacilityEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 20, 1)
)
fclX25CfaFacilityEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25CfaFacConfigId"),
)
if mibBuilder.loadTexts:
    fclX25CfaFacilityEntry.setStatus("mandatory")


class _FclX25CfaFacConfigId_Type(Integer32):
    """Custom type fclX25CfaFacConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25CfaFacConfigId_Type.__name__ = "Integer32"
_FclX25CfaFacConfigId_Object = MibTableColumn
fclX25CfaFacConfigId = _FclX25CfaFacConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 20, 1, 1),
    _FclX25CfaFacConfigId_Type()
)
fclX25CfaFacConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25CfaFacConfigId.setStatus("mandatory")


class _FclX25CfaFacClosedUserGroup_Type(Integer32):
    """Custom type fclX25CfaFacClosedUserGroup based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("noCheck", 2),
          ("subscribe", 3),
          ("subscribeAndRemove", 4))
    )


_FclX25CfaFacClosedUserGroup_Type.__name__ = "Integer32"
_FclX25CfaFacClosedUserGroup_Object = MibTableColumn
fclX25CfaFacClosedUserGroup = _FclX25CfaFacClosedUserGroup_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 20, 1, 2),
    _FclX25CfaFacClosedUserGroup_Type()
)
fclX25CfaFacClosedUserGroup.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaFacClosedUserGroup.setStatus("mandatory")


class _FclX25CfaFacReverseCharging_Type(Integer32):
    """Custom type fclX25CfaFacReverseCharging based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("accept", 2),
          ("refuse", 1))
    )


_FclX25CfaFacReverseCharging_Type.__name__ = "Integer32"
_FclX25CfaFacReverseCharging_Object = MibTableColumn
fclX25CfaFacReverseCharging = _FclX25CfaFacReverseCharging_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 20, 1, 5),
    _FclX25CfaFacReverseCharging_Type()
)
fclX25CfaFacReverseCharging.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaFacReverseCharging.setStatus("mandatory")


class _FclX25CfaFacTransitDelay_Type(Integer32):
    """Custom type fclX25CfaFacTransitDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clear", 3),
          ("noCheck", 1),
          ("subscribe", 2))
    )


_FclX25CfaFacTransitDelay_Type.__name__ = "Integer32"
_FclX25CfaFacTransitDelay_Object = MibTableColumn
fclX25CfaFacTransitDelay = _FclX25CfaFacTransitDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 20, 1, 6),
    _FclX25CfaFacTransitDelay_Type()
)
fclX25CfaFacTransitDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaFacTransitDelay.setStatus("mandatory")


class _FclX25CfaFacOutputMarkers_Type(Integer32):
    """Custom type fclX25CfaFacOutputMarkers based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("check", 2),
          ("noCheck", 1),
          ("remove", 3))
    )


_FclX25CfaFacOutputMarkers_Type.__name__ = "Integer32"
_FclX25CfaFacOutputMarkers_Object = MibTableColumn
fclX25CfaFacOutputMarkers = _FclX25CfaFacOutputMarkers_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 20, 1, 7),
    _FclX25CfaFacOutputMarkers_Type()
)
fclX25CfaFacOutputMarkers.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaFacOutputMarkers.setStatus("mandatory")


class _FclX25CfaFacInputMarkers_Type(Integer32):
    """Custom type fclX25CfaFacInputMarkers based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("check", 2),
          ("noCheck", 1),
          ("remove", 3))
    )


_FclX25CfaFacInputMarkers_Type.__name__ = "Integer32"
_FclX25CfaFacInputMarkers_Object = MibTableColumn
fclX25CfaFacInputMarkers = _FclX25CfaFacInputMarkers_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 20, 1, 8),
    _FclX25CfaFacInputMarkers_Type()
)
fclX25CfaFacInputMarkers.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaFacInputMarkers.setStatus("mandatory")


class _FclX25CfaFacOutputUnknownFacility_Type(Integer32):
    """Custom type fclX25CfaFacOutputUnknownFacility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clear", 3),
          ("noCheck", 1),
          ("remove", 2))
    )


_FclX25CfaFacOutputUnknownFacility_Type.__name__ = "Integer32"
_FclX25CfaFacOutputUnknownFacility_Object = MibTableColumn
fclX25CfaFacOutputUnknownFacility = _FclX25CfaFacOutputUnknownFacility_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 20, 1, 10),
    _FclX25CfaFacOutputUnknownFacility_Type()
)
fclX25CfaFacOutputUnknownFacility.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaFacOutputUnknownFacility.setStatus("mandatory")


class _FclX25CfaFacInputUnknownFacility_Type(Integer32):
    """Custom type fclX25CfaFacInputUnknownFacility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clear", 3),
          ("noCheck", 1),
          ("remove", 2))
    )


_FclX25CfaFacInputUnknownFacility_Type.__name__ = "Integer32"
_FclX25CfaFacInputUnknownFacility_Object = MibTableColumn
fclX25CfaFacInputUnknownFacility = _FclX25CfaFacInputUnknownFacility_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 20, 1, 11),
    _FclX25CfaFacInputUnknownFacility_Type()
)
fclX25CfaFacInputUnknownFacility.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaFacInputUnknownFacility.setStatus("mandatory")
_FclX25CfaNegotiatedFacilityTable_Object = MibTable
fclX25CfaNegotiatedFacilityTable = _FclX25CfaNegotiatedFacilityTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21)
)
if mibBuilder.loadTexts:
    fclX25CfaNegotiatedFacilityTable.setStatus("mandatory")
_FclX25CfaNegotiatedFacilityEntry_Object = MibTableRow
fclX25CfaNegotiatedFacilityEntry = _FclX25CfaNegotiatedFacilityEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1)
)
fclX25CfaNegotiatedFacilityEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25CfaNegConfigId"),
)
if mibBuilder.loadTexts:
    fclX25CfaNegotiatedFacilityEntry.setStatus("mandatory")


class _FclX25CfaNegConfigId_Type(Integer32):
    """Custom type fclX25CfaNegConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25CfaNegConfigId_Type.__name__ = "Integer32"
_FclX25CfaNegConfigId_Object = MibTableColumn
fclX25CfaNegConfigId = _FclX25CfaNegConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 1),
    _FclX25CfaNegConfigId_Type()
)
fclX25CfaNegConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25CfaNegConfigId.setStatus("mandatory")


class _FclX25CfaNegOutputFastSelect_Type(Integer32):
    """Custom type fclX25CfaNegOutputFastSelect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("noCheck", 3),
          ("subscribe", 2))
    )


_FclX25CfaNegOutputFastSelect_Type.__name__ = "Integer32"
_FclX25CfaNegOutputFastSelect_Object = MibTableColumn
fclX25CfaNegOutputFastSelect = _FclX25CfaNegOutputFastSelect_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 2),
    _FclX25CfaNegOutputFastSelect_Type()
)
fclX25CfaNegOutputFastSelect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaNegOutputFastSelect.setStatus("mandatory")


class _FclX25CfaNegInputFastSelect_Type(Integer32):
    """Custom type fclX25CfaNegInputFastSelect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("longUserData", 4),
          ("subscribe", 2))
    )


_FclX25CfaNegInputFastSelect_Type.__name__ = "Integer32"
_FclX25CfaNegInputFastSelect_Object = MibTableColumn
fclX25CfaNegInputFastSelect = _FclX25CfaNegInputFastSelect_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 3),
    _FclX25CfaNegInputFastSelect_Type()
)
fclX25CfaNegInputFastSelect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaNegInputFastSelect.setStatus("mandatory")


class _FclX25CfaNegThroughputClass_Type(Integer32):
    """Custom type fclX25CfaNegThroughputClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("subscribe", 2))
    )


_FclX25CfaNegThroughputClass_Type.__name__ = "Integer32"
_FclX25CfaNegThroughputClass_Object = MibTableColumn
fclX25CfaNegThroughputClass = _FclX25CfaNegThroughputClass_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 10),
    _FclX25CfaNegThroughputClass_Type()
)
fclX25CfaNegThroughputClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaNegThroughputClass.setStatus("mandatory")


class _FclX25CfaNegDefOutThroughputClass_Type(Integer32):
    """Custom type fclX25CfaNegDefOutThroughputClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("t1200", 7),
          ("t128000", 14),
          ("t150", 4),
          ("t19200", 11),
          ("t192000", 15),
          ("t2400", 8),
          ("t300", 5),
          ("t4800", 9),
          ("t48000", 12),
          ("t600", 6),
          ("t64000", 13),
          ("t75", 3),
          ("t9600", 10))
    )


_FclX25CfaNegDefOutThroughputClass_Type.__name__ = "Integer32"
_FclX25CfaNegDefOutThroughputClass_Object = MibTableColumn
fclX25CfaNegDefOutThroughputClass = _FclX25CfaNegDefOutThroughputClass_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 11),
    _FclX25CfaNegDefOutThroughputClass_Type()
)
fclX25CfaNegDefOutThroughputClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaNegDefOutThroughputClass.setStatus("mandatory")


class _FclX25CfaNegDefInThroughputClass_Type(Integer32):
    """Custom type fclX25CfaNegDefInThroughputClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("t1200", 7),
          ("t128000", 14),
          ("t150", 4),
          ("t19200", 11),
          ("t192000", 15),
          ("t2400", 8),
          ("t300", 5),
          ("t4800", 9),
          ("t48000", 12),
          ("t600", 6),
          ("t64000", 13),
          ("t75", 3),
          ("t9600", 10))
    )


_FclX25CfaNegDefInThroughputClass_Type.__name__ = "Integer32"
_FclX25CfaNegDefInThroughputClass_Object = MibTableColumn
fclX25CfaNegDefInThroughputClass = _FclX25CfaNegDefInThroughputClass_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 12),
    _FclX25CfaNegDefInThroughputClass_Type()
)
fclX25CfaNegDefInThroughputClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaNegDefInThroughputClass.setStatus("mandatory")


class _FclX25CfaNegMaxOutThroughputClass_Type(Integer32):
    """Custom type fclX25CfaNegMaxOutThroughputClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("t1200", 7),
          ("t128000", 14),
          ("t150", 4),
          ("t19200", 11),
          ("t192000", 15),
          ("t2400", 8),
          ("t300", 5),
          ("t4800", 9),
          ("t48000", 12),
          ("t600", 6),
          ("t64000", 13),
          ("t75", 3),
          ("t9600", 10))
    )


_FclX25CfaNegMaxOutThroughputClass_Type.__name__ = "Integer32"
_FclX25CfaNegMaxOutThroughputClass_Object = MibTableColumn
fclX25CfaNegMaxOutThroughputClass = _FclX25CfaNegMaxOutThroughputClass_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 13),
    _FclX25CfaNegMaxOutThroughputClass_Type()
)
fclX25CfaNegMaxOutThroughputClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaNegMaxOutThroughputClass.setStatus("mandatory")


class _FclX25CfaNegMaxInThroughputClass_Type(Integer32):
    """Custom type fclX25CfaNegMaxInThroughputClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("t1200", 7),
          ("t128000", 14),
          ("t150", 4),
          ("t19200", 11),
          ("t192000", 15),
          ("t2400", 8),
          ("t300", 5),
          ("t4800", 9),
          ("t48000", 12),
          ("t600", 6),
          ("t64000", 13),
          ("t75", 3),
          ("t9600", 10))
    )


_FclX25CfaNegMaxInThroughputClass_Type.__name__ = "Integer32"
_FclX25CfaNegMaxInThroughputClass_Object = MibTableColumn
fclX25CfaNegMaxInThroughputClass = _FclX25CfaNegMaxInThroughputClass_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 14),
    _FclX25CfaNegMaxInThroughputClass_Type()
)
fclX25CfaNegMaxInThroughputClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaNegMaxInThroughputClass.setStatus("mandatory")


class _FclX25CfaNegPacketSize_Type(Integer32):
    """Custom type fclX25CfaNegPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("subscribe", 2))
    )


_FclX25CfaNegPacketSize_Type.__name__ = "Integer32"
_FclX25CfaNegPacketSize_Object = MibTableColumn
fclX25CfaNegPacketSize = _FclX25CfaNegPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 20),
    _FclX25CfaNegPacketSize_Type()
)
fclX25CfaNegPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaNegPacketSize.setStatus("mandatory")


class _FclX25CfaNegDefOutPacketSize_Type(Integer32):
    """Custom type fclX25CfaNegDefOutPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("s1024", 10),
          ("s128", 7),
          ("s16", 4),
          ("s2048", 11),
          ("s256", 8),
          ("s32", 5),
          ("s4096", 12),
          ("s512", 9),
          ("s64", 6),
          ("s8192", 13))
    )


_FclX25CfaNegDefOutPacketSize_Type.__name__ = "Integer32"
_FclX25CfaNegDefOutPacketSize_Object = MibTableColumn
fclX25CfaNegDefOutPacketSize = _FclX25CfaNegDefOutPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 21),
    _FclX25CfaNegDefOutPacketSize_Type()
)
fclX25CfaNegDefOutPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaNegDefOutPacketSize.setStatus("mandatory")


class _FclX25CfaNegDefInPacketSize_Type(Integer32):
    """Custom type fclX25CfaNegDefInPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("s1024", 10),
          ("s128", 7),
          ("s16", 4),
          ("s2048", 11),
          ("s256", 8),
          ("s32", 5),
          ("s4096", 12),
          ("s512", 9),
          ("s64", 6),
          ("s8192", 13))
    )


_FclX25CfaNegDefInPacketSize_Type.__name__ = "Integer32"
_FclX25CfaNegDefInPacketSize_Object = MibTableColumn
fclX25CfaNegDefInPacketSize = _FclX25CfaNegDefInPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 22),
    _FclX25CfaNegDefInPacketSize_Type()
)
fclX25CfaNegDefInPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaNegDefInPacketSize.setStatus("mandatory")


class _FclX25CfaNegMaxOutPacketSize_Type(Integer32):
    """Custom type fclX25CfaNegMaxOutPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("s1024", 10),
          ("s128", 7),
          ("s16", 4),
          ("s2048", 11),
          ("s256", 8),
          ("s32", 5),
          ("s4096", 12),
          ("s512", 9),
          ("s64", 6),
          ("s8192", 13))
    )


_FclX25CfaNegMaxOutPacketSize_Type.__name__ = "Integer32"
_FclX25CfaNegMaxOutPacketSize_Object = MibTableColumn
fclX25CfaNegMaxOutPacketSize = _FclX25CfaNegMaxOutPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 23),
    _FclX25CfaNegMaxOutPacketSize_Type()
)
fclX25CfaNegMaxOutPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaNegMaxOutPacketSize.setStatus("mandatory")


class _FclX25CfaNegMaxInPacketSize_Type(Integer32):
    """Custom type fclX25CfaNegMaxInPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("s1024", 10),
          ("s128", 7),
          ("s16", 4),
          ("s2048", 11),
          ("s256", 8),
          ("s32", 5),
          ("s4096", 12),
          ("s512", 9),
          ("s64", 6),
          ("s8192", 13))
    )


_FclX25CfaNegMaxInPacketSize_Type.__name__ = "Integer32"
_FclX25CfaNegMaxInPacketSize_Object = MibTableColumn
fclX25CfaNegMaxInPacketSize = _FclX25CfaNegMaxInPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 24),
    _FclX25CfaNegMaxInPacketSize_Type()
)
fclX25CfaNegMaxInPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaNegMaxInPacketSize.setStatus("mandatory")


class _FclX25CfaNegMinOutPacketSize_Type(Integer32):
    """Custom type fclX25CfaNegMinOutPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("s1024", 10),
          ("s128", 7),
          ("s16", 4),
          ("s2048", 11),
          ("s256", 8),
          ("s32", 5),
          ("s4096", 12),
          ("s512", 9),
          ("s64", 6),
          ("s8192", 13))
    )


_FclX25CfaNegMinOutPacketSize_Type.__name__ = "Integer32"
_FclX25CfaNegMinOutPacketSize_Object = MibTableColumn
fclX25CfaNegMinOutPacketSize = _FclX25CfaNegMinOutPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 25),
    _FclX25CfaNegMinOutPacketSize_Type()
)
fclX25CfaNegMinOutPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaNegMinOutPacketSize.setStatus("mandatory")


class _FclX25CfaNegMinInPacketSize_Type(Integer32):
    """Custom type fclX25CfaNegMinInPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("s1024", 10),
          ("s128", 7),
          ("s16", 4),
          ("s2048", 11),
          ("s256", 8),
          ("s32", 5),
          ("s4096", 12),
          ("s512", 9),
          ("s64", 6),
          ("s8192", 13))
    )


_FclX25CfaNegMinInPacketSize_Type.__name__ = "Integer32"
_FclX25CfaNegMinInPacketSize_Object = MibTableColumn
fclX25CfaNegMinInPacketSize = _FclX25CfaNegMinInPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 26),
    _FclX25CfaNegMinInPacketSize_Type()
)
fclX25CfaNegMinInPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaNegMinInPacketSize.setStatus("mandatory")


class _FclX25CfaNegWindowSize_Type(Integer32):
    """Custom type fclX25CfaNegWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("subscribe", 2))
    )


_FclX25CfaNegWindowSize_Type.__name__ = "Integer32"
_FclX25CfaNegWindowSize_Object = MibTableColumn
fclX25CfaNegWindowSize = _FclX25CfaNegWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 30),
    _FclX25CfaNegWindowSize_Type()
)
fclX25CfaNegWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaNegWindowSize.setStatus("mandatory")


class _FclX25CfaNegDefOutWindowSize_Type(Integer32):
    """Custom type fclX25CfaNegDefOutWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 7),
    )


_FclX25CfaNegDefOutWindowSize_Type.__name__ = "Integer32"
_FclX25CfaNegDefOutWindowSize_Object = MibTableColumn
fclX25CfaNegDefOutWindowSize = _FclX25CfaNegDefOutWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 31),
    _FclX25CfaNegDefOutWindowSize_Type()
)
fclX25CfaNegDefOutWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaNegDefOutWindowSize.setStatus("mandatory")


class _FclX25CfaNegDefInWindowSize_Type(Integer32):
    """Custom type fclX25CfaNegDefInWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 7),
    )


_FclX25CfaNegDefInWindowSize_Type.__name__ = "Integer32"
_FclX25CfaNegDefInWindowSize_Object = MibTableColumn
fclX25CfaNegDefInWindowSize = _FclX25CfaNegDefInWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 32),
    _FclX25CfaNegDefInWindowSize_Type()
)
fclX25CfaNegDefInWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaNegDefInWindowSize.setStatus("mandatory")


class _FclX25CfaNegMaxOutWindowSize_Type(Integer32):
    """Custom type fclX25CfaNegMaxOutWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 7),
    )


_FclX25CfaNegMaxOutWindowSize_Type.__name__ = "Integer32"
_FclX25CfaNegMaxOutWindowSize_Object = MibTableColumn
fclX25CfaNegMaxOutWindowSize = _FclX25CfaNegMaxOutWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 33),
    _FclX25CfaNegMaxOutWindowSize_Type()
)
fclX25CfaNegMaxOutWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaNegMaxOutWindowSize.setStatus("mandatory")


class _FclX25CfaNegMaxInWindowSize_Type(Integer32):
    """Custom type fclX25CfaNegMaxInWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 7),
    )


_FclX25CfaNegMaxInWindowSize_Type.__name__ = "Integer32"
_FclX25CfaNegMaxInWindowSize_Object = MibTableColumn
fclX25CfaNegMaxInWindowSize = _FclX25CfaNegMaxInWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 34),
    _FclX25CfaNegMaxInWindowSize_Type()
)
fclX25CfaNegMaxInWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaNegMaxInWindowSize.setStatus("mandatory")
_FclX25CfaSignallingTable_Object = MibTable
fclX25CfaSignallingTable = _FclX25CfaSignallingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30)
)
if mibBuilder.loadTexts:
    fclX25CfaSignallingTable.setStatus("mandatory")
_FclX25CfaSignallingEntry_Object = MibTableRow
fclX25CfaSignallingEntry = _FclX25CfaSignallingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1)
)
fclX25CfaSignallingEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25CfaSigConfigId"),
)
if mibBuilder.loadTexts:
    fclX25CfaSignallingEntry.setStatus("mandatory")


class _FclX25CfaSigConfigId_Type(Integer32):
    """Custom type fclX25CfaSigConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25CfaSigConfigId_Type.__name__ = "Integer32"
_FclX25CfaSigConfigId_Object = MibTableColumn
fclX25CfaSigConfigId = _FclX25CfaSigConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 1),
    _FclX25CfaSigConfigId_Type()
)
fclX25CfaSigConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25CfaSigConfigId.setStatus("mandatory")


class _FclX25CfaSigType_Type(Integer32):
    """Custom type fclX25CfaSigType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("x25Network", 1),
          ("x25Subscriber", 2),
          ("x75", 3))
    )


_FclX25CfaSigType_Type.__name__ = "Integer32"
_FclX25CfaSigType_Object = MibTableColumn
fclX25CfaSigType = _FclX25CfaSigType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 2),
    _FclX25CfaSigType_Type()
)
fclX25CfaSigType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSigType.setStatus("mandatory")


class _FclX25CfaSigPacketAddressCount_Type(Integer32):
    """Custom type fclX25CfaSigPacketAddressCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_FclX25CfaSigPacketAddressCount_Type.__name__ = "Integer32"
_FclX25CfaSigPacketAddressCount_Object = MibTableColumn
fclX25CfaSigPacketAddressCount = _FclX25CfaSigPacketAddressCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 3),
    _FclX25CfaSigPacketAddressCount_Type()
)
fclX25CfaSigPacketAddressCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSigPacketAddressCount.setStatus("mandatory")


class _FclX25CfaSigSubAddressTransmission_Type(Integer32):
    """Custom type fclX25CfaSigSubAddressTransmission based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclX25CfaSigSubAddressTransmission_Type.__name__ = "Integer32"
_FclX25CfaSigSubAddressTransmission_Object = MibTableColumn
fclX25CfaSigSubAddressTransmission = _FclX25CfaSigSubAddressTransmission_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 4),
    _FclX25CfaSigSubAddressTransmission_Type()
)
fclX25CfaSigSubAddressTransmission.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSigSubAddressTransmission.setStatus("mandatory")


class _FclX25CfaSigPdnIndicator_Type(Integer32):
    """Custom type fclX25CfaSigPdnIndicator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("dedicatedLaPoste", 3),
          ("dedicatedTranspac", 4),
          ("off", 1),
          ("pdnWithAddressTransmission", 5),
          ("pdnWithoutAddressTransmission", 2))
    )


_FclX25CfaSigPdnIndicator_Type.__name__ = "Integer32"
_FclX25CfaSigPdnIndicator_Object = MibTableColumn
fclX25CfaSigPdnIndicator = _FclX25CfaSigPdnIndicator_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 5),
    _FclX25CfaSigPdnIndicator_Type()
)
fclX25CfaSigPdnIndicator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSigPdnIndicator.setStatus("mandatory")


class _FclX25CfaSigConversionAimedPoint_Type(Integer32):
    """Custom type fclX25CfaSigConversionAimedPoint based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclX25CfaSigConversionAimedPoint_Type.__name__ = "Integer32"
_FclX25CfaSigConversionAimedPoint_Object = MibTableColumn
fclX25CfaSigConversionAimedPoint = _FclX25CfaSigConversionAimedPoint_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 10),
    _FclX25CfaSigConversionAimedPoint_Type()
)
fclX25CfaSigConversionAimedPoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSigConversionAimedPoint.setStatus("mandatory")


class _FclX25CfaSigConversionIncomingCall_Type(Integer32):
    """Custom type fclX25CfaSigConversionIncomingCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("calledAddress", 3),
          ("callingAddress", 2),
          ("callingAddressAndCalledAddress", 4),
          ("off", 1))
    )


_FclX25CfaSigConversionIncomingCall_Type.__name__ = "Integer32"
_FclX25CfaSigConversionIncomingCall_Object = MibTableColumn
fclX25CfaSigConversionIncomingCall = _FclX25CfaSigConversionIncomingCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 11),
    _FclX25CfaSigConversionIncomingCall_Type()
)
fclX25CfaSigConversionIncomingCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSigConversionIncomingCall.setStatus("mandatory")


class _FclX25CfaSigConversionOutgoingCall_Type(Integer32):
    """Custom type fclX25CfaSigConversionOutgoingCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("calledAddress", 3),
          ("callingAddress", 2),
          ("callingAddressAndCalledAddress", 4),
          ("off", 1))
    )


_FclX25CfaSigConversionOutgoingCall_Type.__name__ = "Integer32"
_FclX25CfaSigConversionOutgoingCall_Object = MibTableColumn
fclX25CfaSigConversionOutgoingCall = _FclX25CfaSigConversionOutgoingCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 12),
    _FclX25CfaSigConversionOutgoingCall_Type()
)
fclX25CfaSigConversionOutgoingCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSigConversionOutgoingCall.setStatus("mandatory")


class _FclX25CfaSigConversionAddressCheck_Type(Integer32):
    """Custom type fclX25CfaSigConversionAddressCheck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onIncomingCall", 2),
          ("onIncomingCallAndOutgoingCall", 4),
          ("onOutgoingCall", 3))
    )


_FclX25CfaSigConversionAddressCheck_Type.__name__ = "Integer32"
_FclX25CfaSigConversionAddressCheck_Object = MibTableColumn
fclX25CfaSigConversionAddressCheck = _FclX25CfaSigConversionAddressCheck_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 13),
    _FclX25CfaSigConversionAddressCheck_Type()
)
fclX25CfaSigConversionAddressCheck.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSigConversionAddressCheck.setStatus("mandatory")


class _FclX25CfaSigConvMultiCalledAddrInCall_Type(Integer32):
    """Custom type fclX25CfaSigConvMultiCalledAddrInCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_FclX25CfaSigConvMultiCalledAddrInCall_Type.__name__ = "Integer32"
_FclX25CfaSigConvMultiCalledAddrInCall_Object = MibTableColumn
fclX25CfaSigConvMultiCalledAddrInCall = _FclX25CfaSigConvMultiCalledAddrInCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 14),
    _FclX25CfaSigConvMultiCalledAddrInCall_Type()
)
fclX25CfaSigConvMultiCalledAddrInCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSigConvMultiCalledAddrInCall.setStatus("mandatory")


class _FclX25CfaSigConvMultiCallingAddrInCall_Type(Integer32):
    """Custom type fclX25CfaSigConvMultiCallingAddrInCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_FclX25CfaSigConvMultiCallingAddrInCall_Type.__name__ = "Integer32"
_FclX25CfaSigConvMultiCallingAddrInCall_Object = MibTableColumn
fclX25CfaSigConvMultiCallingAddrInCall = _FclX25CfaSigConvMultiCallingAddrInCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 15),
    _FclX25CfaSigConvMultiCallingAddrInCall_Type()
)
fclX25CfaSigConvMultiCallingAddrInCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSigConvMultiCallingAddrInCall.setStatus("mandatory")


class _FclX25CfaSigConvMultiCalledAddrOutCall_Type(Integer32):
    """Custom type fclX25CfaSigConvMultiCalledAddrOutCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_FclX25CfaSigConvMultiCalledAddrOutCall_Type.__name__ = "Integer32"
_FclX25CfaSigConvMultiCalledAddrOutCall_Object = MibTableColumn
fclX25CfaSigConvMultiCalledAddrOutCall = _FclX25CfaSigConvMultiCalledAddrOutCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 16),
    _FclX25CfaSigConvMultiCalledAddrOutCall_Type()
)
fclX25CfaSigConvMultiCalledAddrOutCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSigConvMultiCalledAddrOutCall.setStatus("mandatory")


class _FclX25CfaSigConvMultiCallingAddrOutCall_Type(Integer32):
    """Custom type fclX25CfaSigConvMultiCallingAddrOutCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_FclX25CfaSigConvMultiCallingAddrOutCall_Type.__name__ = "Integer32"
_FclX25CfaSigConvMultiCallingAddrOutCall_Object = MibTableColumn
fclX25CfaSigConvMultiCallingAddrOutCall = _FclX25CfaSigConvMultiCallingAddrOutCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 17),
    _FclX25CfaSigConvMultiCallingAddrOutCall_Type()
)
fclX25CfaSigConvMultiCallingAddrOutCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSigConvMultiCallingAddrOutCall.setStatus("mandatory")


class _FclX25CfaSigOutPacketCauseField_Type(Integer32):
    """Custom type fclX25CfaSigOutPacketCauseField based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noModify", 1),
          ("setToZero", 2))
    )


_FclX25CfaSigOutPacketCauseField_Type.__name__ = "Integer32"
_FclX25CfaSigOutPacketCauseField_Object = MibTableColumn
fclX25CfaSigOutPacketCauseField = _FclX25CfaSigOutPacketCauseField_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 20),
    _FclX25CfaSigOutPacketCauseField_Type()
)
fclX25CfaSigOutPacketCauseField.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSigOutPacketCauseField.setStatus("mandatory")


class _FclX25CfaSigInPacketCauseField_Type(Integer32):
    """Custom type fclX25CfaSigInPacketCauseField based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("modify", 4),
          ("noModify", 1),
          ("setToZero", 2),
          ("setToZeroIfLowerThan128", 3))
    )


_FclX25CfaSigInPacketCauseField_Type.__name__ = "Integer32"
_FclX25CfaSigInPacketCauseField_Object = MibTableColumn
fclX25CfaSigInPacketCauseField = _FclX25CfaSigInPacketCauseField_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 21),
    _FclX25CfaSigInPacketCauseField_Type()
)
fclX25CfaSigInPacketCauseField.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSigInPacketCauseField.setStatus("mandatory")


class _FclX25CfaSigT11CallResponseTimer_Type(Integer32):
    """Custom type fclX25CfaSigT11CallResponseTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 2500),
    )


_FclX25CfaSigT11CallResponseTimer_Type.__name__ = "Integer32"
_FclX25CfaSigT11CallResponseTimer_Object = MibTableColumn
fclX25CfaSigT11CallResponseTimer = _FclX25CfaSigT11CallResponseTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 22),
    _FclX25CfaSigT11CallResponseTimer_Type()
)
fclX25CfaSigT11CallResponseTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSigT11CallResponseTimer.setStatus("mandatory")


class _FclX25CfaSigCallAcceptedFormat_Type(Integer32):
    """Custom type fclX25CfaSigCallAcceptedFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("facilitiesCheckedAddresses", 1),
          ("facilitiesNoAddresses", 2),
          ("facilitiesNotCheckedAddresses", 4),
          ("noFacilitiesNoAddresses", 3))
    )


_FclX25CfaSigCallAcceptedFormat_Type.__name__ = "Integer32"
_FclX25CfaSigCallAcceptedFormat_Object = MibTableColumn
fclX25CfaSigCallAcceptedFormat = _FclX25CfaSigCallAcceptedFormat_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 25),
    _FclX25CfaSigCallAcceptedFormat_Type()
)
fclX25CfaSigCallAcceptedFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSigCallAcceptedFormat.setStatus("mandatory")


class _FclX25CfaSigClearFormat_Type(Integer32):
    """Custom type fclX25CfaSigClearFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("facilitiesCheckedAddresses", 1),
          ("facilitiesNoAddresses", 2),
          ("facilitiesNotCheckedAddresses", 4),
          ("noFacilitiesNoAddresses", 3))
    )


_FclX25CfaSigClearFormat_Type.__name__ = "Integer32"
_FclX25CfaSigClearFormat_Object = MibTableColumn
fclX25CfaSigClearFormat = _FclX25CfaSigClearFormat_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 26),
    _FclX25CfaSigClearFormat_Type()
)
fclX25CfaSigClearFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSigClearFormat.setStatus("mandatory")
_FclX25CfaServiceTable_Object = MibTable
fclX25CfaServiceTable = _FclX25CfaServiceTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40)
)
if mibBuilder.loadTexts:
    fclX25CfaServiceTable.setStatus("mandatory")
_FclX25CfaServiceEntry_Object = MibTableRow
fclX25CfaServiceEntry = _FclX25CfaServiceEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1)
)
fclX25CfaServiceEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25CfaSerConfigId"),
)
if mibBuilder.loadTexts:
    fclX25CfaServiceEntry.setStatus("mandatory")


class _FclX25CfaSerConfigId_Type(Integer32):
    """Custom type fclX25CfaSerConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25CfaSerConfigId_Type.__name__ = "Integer32"
_FclX25CfaSerConfigId_Object = MibTableColumn
fclX25CfaSerConfigId = _FclX25CfaSerConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 1),
    _FclX25CfaSerConfigId_Type()
)
fclX25CfaSerConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25CfaSerConfigId.setStatus("mandatory")


class _FclX25CfaSerReliableVc_Type(Integer32):
    """Custom type fclX25CfaSerReliableVc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("check", 4),
          ("clear", 3),
          ("off", 1),
          ("subscribe", 2))
    )


_FclX25CfaSerReliableVc_Type.__name__ = "Integer32"
_FclX25CfaSerReliableVc_Object = MibTableColumn
fclX25CfaSerReliableVc = _FclX25CfaSerReliableVc_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 2),
    _FclX25CfaSerReliableVc_Type()
)
fclX25CfaSerReliableVc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSerReliableVc.setStatus("mandatory")


class _FclX25CfaSerCharging_Type(Integer32):
    """Custom type fclX25CfaSerCharging based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("detailed", 3),
          ("off", 1),
          ("overall", 2))
    )


_FclX25CfaSerCharging_Type.__name__ = "Integer32"
_FclX25CfaSerCharging_Object = MibTableColumn
fclX25CfaSerCharging = _FclX25CfaSerCharging_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 3),
    _FclX25CfaSerCharging_Type()
)
fclX25CfaSerCharging.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSerCharging.setStatus("mandatory")


class _FclX25CfaSerX29Reselection_Type(Integer32):
    """Custom type fclX25CfaSerX29Reselection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclX25CfaSerX29Reselection_Type.__name__ = "Integer32"
_FclX25CfaSerX29Reselection_Object = MibTableColumn
fclX25CfaSerX29Reselection = _FclX25CfaSerX29Reselection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 4),
    _FclX25CfaSerX29Reselection_Type()
)
fclX25CfaSerX29Reselection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSerX29Reselection.setStatus("mandatory")


class _FclX25CfaSerRemoteExclusiveLink_Type(Integer32):
    """Custom type fclX25CfaSerRemoteExclusiveLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FclX25CfaSerRemoteExclusiveLink_Type.__name__ = "Integer32"
_FclX25CfaSerRemoteExclusiveLink_Object = MibTableColumn
fclX25CfaSerRemoteExclusiveLink = _FclX25CfaSerRemoteExclusiveLink_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 5),
    _FclX25CfaSerRemoteExclusiveLink_Type()
)
fclX25CfaSerRemoteExclusiveLink.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSerRemoteExclusiveLink.setStatus("mandatory")


class _FclX25CfaSerStatLoadAndTraffic_Type(Integer32):
    """Custom type fclX25CfaSerStatLoadAndTraffic based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclX25CfaSerStatLoadAndTraffic_Type.__name__ = "Integer32"
_FclX25CfaSerStatLoadAndTraffic_Object = MibTableColumn
fclX25CfaSerStatLoadAndTraffic = _FclX25CfaSerStatLoadAndTraffic_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 10),
    _FclX25CfaSerStatLoadAndTraffic_Type()
)
fclX25CfaSerStatLoadAndTraffic.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSerStatLoadAndTraffic.setStatus("mandatory")


class _FclX25CfaSerStatSignalling_Type(Integer32):
    """Custom type fclX25CfaSerStatSignalling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclX25CfaSerStatSignalling_Type.__name__ = "Integer32"
_FclX25CfaSerStatSignalling_Object = MibTableColumn
fclX25CfaSerStatSignalling = _FclX25CfaSerStatSignalling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 11),
    _FclX25CfaSerStatSignalling_Type()
)
fclX25CfaSerStatSignalling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSerStatSignalling.setStatus("mandatory")


class _FclX25CfaSerStatTotalizer_Type(Integer32):
    """Custom type fclX25CfaSerStatTotalizer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclX25CfaSerStatTotalizer_Type.__name__ = "Integer32"
_FclX25CfaSerStatTotalizer_Object = MibTableColumn
fclX25CfaSerStatTotalizer = _FclX25CfaSerStatTotalizer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 12),
    _FclX25CfaSerStatTotalizer_Type()
)
fclX25CfaSerStatTotalizer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSerStatTotalizer.setStatus("mandatory")


class _FclX25CfaSerStatCompression_Type(Integer32):
    """Custom type fclX25CfaSerStatCompression based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclX25CfaSerStatCompression_Type.__name__ = "Integer32"
_FclX25CfaSerStatCompression_Object = MibTableColumn
fclX25CfaSerStatCompression = _FclX25CfaSerStatCompression_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 13),
    _FclX25CfaSerStatCompression_Type()
)
fclX25CfaSerStatCompression.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSerStatCompression.setStatus("mandatory")


class _FclX25CfaSerCompression_Type(Integer32):
    """Custom type fclX25CfaSerCompression based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bothway", 4),
          ("networkToSubscriber", 2),
          ("off", 1),
          ("subscriberToNetwork", 3))
    )


_FclX25CfaSerCompression_Type.__name__ = "Integer32"
_FclX25CfaSerCompression_Object = MibTableColumn
fclX25CfaSerCompression = _FclX25CfaSerCompression_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 20),
    _FclX25CfaSerCompression_Type()
)
fclX25CfaSerCompression.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSerCompression.setStatus("mandatory")


class _FclX25CfaSerCompressNegotiation_Type(Integer32):
    """Custom type fclX25CfaSerCompressNegotiation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onMandatoryCompression", 3),
          ("onOptionalCompression", 2))
    )


_FclX25CfaSerCompressNegotiation_Type.__name__ = "Integer32"
_FclX25CfaSerCompressNegotiation_Object = MibTableColumn
fclX25CfaSerCompressNegotiation = _FclX25CfaSerCompressNegotiation_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 21),
    _FclX25CfaSerCompressNegotiation_Type()
)
fclX25CfaSerCompressNegotiation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSerCompressNegotiation.setStatus("mandatory")


class _FclX25CfaSerCompressScrambling_Type(Integer32):
    """Custom type fclX25CfaSerCompressScrambling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclX25CfaSerCompressScrambling_Type.__name__ = "Integer32"
_FclX25CfaSerCompressScrambling_Object = MibTableColumn
fclX25CfaSerCompressScrambling = _FclX25CfaSerCompressScrambling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 22),
    _FclX25CfaSerCompressScrambling_Type()
)
fclX25CfaSerCompressScrambling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSerCompressScrambling.setStatus("mandatory")


class _FclX25CfaSerCompressMultiPacketsTimer_Type(Integer32):
    """Custom type fclX25CfaSerCompressMultiPacketsTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1500),
    )


_FclX25CfaSerCompressMultiPacketsTimer_Type.__name__ = "Integer32"
_FclX25CfaSerCompressMultiPacketsTimer_Object = MibTableColumn
fclX25CfaSerCompressMultiPacketsTimer = _FclX25CfaSerCompressMultiPacketsTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 23),
    _FclX25CfaSerCompressMultiPacketsTimer_Type()
)
fclX25CfaSerCompressMultiPacketsTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSerCompressMultiPacketsTimer.setStatus("mandatory")


class _FclX25CfaSerCos_Type(Integer32):
    """Custom type fclX25CfaSerCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ubr", 3),
          ("vbr", 1))
    )


_FclX25CfaSerCos_Type.__name__ = "Integer32"
_FclX25CfaSerCos_Object = MibTableColumn
fclX25CfaSerCos = _FclX25CfaSerCos_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 30),
    _FclX25CfaSerCos_Type()
)
fclX25CfaSerCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSerCos.setStatus("mandatory")


class _FclX25CfaSerCir_Type(Integer32):
    """Custom type fclX25CfaSerCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(600, 2048000),
    )


_FclX25CfaSerCir_Type.__name__ = "Integer32"
_FclX25CfaSerCir_Object = MibTableColumn
fclX25CfaSerCir = _FclX25CfaSerCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 31),
    _FclX25CfaSerCir_Type()
)
fclX25CfaSerCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSerCir.setStatus("mandatory")


class _FclX25CfaSerMinCir_Type(Integer32):
    """Custom type fclX25CfaSerMinCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FclX25CfaSerMinCir_Type.__name__ = "Integer32"
_FclX25CfaSerMinCir_Object = MibTableColumn
fclX25CfaSerMinCir = _FclX25CfaSerMinCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 32),
    _FclX25CfaSerMinCir_Type()
)
fclX25CfaSerMinCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSerMinCir.setStatus("mandatory")


class _FclX25CfaSerBe_Type(Integer32):
    """Custom type fclX25CfaSerBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FclX25CfaSerBe_Type.__name__ = "Integer32"
_FclX25CfaSerBe_Object = MibTableColumn
fclX25CfaSerBe = _FclX25CfaSerBe_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 33),
    _FclX25CfaSerBe_Type()
)
fclX25CfaSerBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaSerBe.setStatus("mandatory")
_FclX25CfaPackingAddresses_ObjectIdentity = ObjectIdentity
fclX25CfaPackingAddresses = _FclX25CfaPackingAddresses_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 50)
)


class _FclX25CfaPackOutSubAddressCheck_Type(Integer32):
    """Custom type fclX25CfaPackOutSubAddressCheck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclX25CfaPackOutSubAddressCheck_Type.__name__ = "Integer32"
_FclX25CfaPackOutSubAddressCheck_Object = MibScalar
fclX25CfaPackOutSubAddressCheck = _FclX25CfaPackOutSubAddressCheck_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 50, 1),
    _FclX25CfaPackOutSubAddressCheck_Type()
)
fclX25CfaPackOutSubAddressCheck.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaPackOutSubAddressCheck.setStatus("mandatory")


class _FclX25CfaPackOutSubAddressSize_Type(Integer32):
    """Custom type fclX25CfaPackOutSubAddressSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_FclX25CfaPackOutSubAddressSize_Type.__name__ = "Integer32"
_FclX25CfaPackOutSubAddressSize_Object = MibScalar
fclX25CfaPackOutSubAddressSize = _FclX25CfaPackOutSubAddressSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 50, 2),
    _FclX25CfaPackOutSubAddressSize_Type()
)
fclX25CfaPackOutSubAddressSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaPackOutSubAddressSize.setStatus("mandatory")


class _FclX25CfaPackPdnCallingSubAddress_Type(Integer32):
    """Custom type fclX25CfaPackPdnCallingSubAddress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("pack", 1),
          ("remove", 2))
    )


_FclX25CfaPackPdnCallingSubAddress_Type.__name__ = "Integer32"
_FclX25CfaPackPdnCallingSubAddress_Object = MibScalar
fclX25CfaPackPdnCallingSubAddress = _FclX25CfaPackPdnCallingSubAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 50, 3),
    _FclX25CfaPackPdnCallingSubAddress_Type()
)
fclX25CfaPackPdnCallingSubAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaPackPdnCallingSubAddress.setStatus("mandatory")
_FclX25CfaPackingTable_Object = MibTable
fclX25CfaPackingTable = _FclX25CfaPackingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 50, 4)
)
if mibBuilder.loadTexts:
    fclX25CfaPackingTable.setStatus("mandatory")
_FclX25CfaPackingEntry_Object = MibTableRow
fclX25CfaPackingEntry = _FclX25CfaPackingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 50, 4, 1)
)
fclX25CfaPackingEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25CfaPackPrivateZoSb"),
)
if mibBuilder.loadTexts:
    fclX25CfaPackingEntry.setStatus("mandatory")


class _FclX25CfaPackPrivateZoSb_Type(OctetString):
    """Custom type fclX25CfaPackPrivateZoSb based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_FclX25CfaPackPrivateZoSb_Type.__name__ = "OctetString"
_FclX25CfaPackPrivateZoSb_Object = MibTableColumn
fclX25CfaPackPrivateZoSb = _FclX25CfaPackPrivateZoSb_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 50, 4, 1, 1),
    _FclX25CfaPackPrivateZoSb_Type()
)
fclX25CfaPackPrivateZoSb.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25CfaPackPrivateZoSb.setStatus("mandatory")


class _FclX25CfaPackStatus_Type(Integer32):
    """Custom type fclX25CfaPackStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclX25CfaPackStatus_Type.__name__ = "Integer32"
_FclX25CfaPackStatus_Object = MibTableColumn
fclX25CfaPackStatus = _FclX25CfaPackStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 50, 4, 1, 2),
    _FclX25CfaPackStatus_Type()
)
fclX25CfaPackStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaPackStatus.setStatus("mandatory")


class _FclX25CfaPackSubAddress_Type(OctetString):
    """Custom type fclX25CfaPackSubAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_FclX25CfaPackSubAddress_Type.__name__ = "OctetString"
_FclX25CfaPackSubAddress_Object = MibTableColumn
fclX25CfaPackSubAddress = _FclX25CfaPackSubAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 50, 4, 1, 3),
    _FclX25CfaPackSubAddress_Type()
)
fclX25CfaPackSubAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaPackSubAddress.setStatus("mandatory")
_FclX25CfaClosedUserGroupTable_Object = MibTable
fclX25CfaClosedUserGroupTable = _FclX25CfaClosedUserGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 51)
)
if mibBuilder.loadTexts:
    fclX25CfaClosedUserGroupTable.setStatus("mandatory")
_FclX25CfaClosedUserGroupEntry_Object = MibTableRow
fclX25CfaClosedUserGroupEntry = _FclX25CfaClosedUserGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 51, 1)
)
fclX25CfaClosedUserGroupEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25CfaCugLogPortId"),
    (0, "PCE-MIB", "fclX25CfaCugClosedUserGroupId"),
)
if mibBuilder.loadTexts:
    fclX25CfaClosedUserGroupEntry.setStatus("mandatory")


class _FclX25CfaCugLogPortId_Type(Integer32):
    """Custom type fclX25CfaCugLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FclX25CfaCugLogPortId_Type.__name__ = "Integer32"
_FclX25CfaCugLogPortId_Object = MibTableColumn
fclX25CfaCugLogPortId = _FclX25CfaCugLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 51, 1, 1),
    _FclX25CfaCugLogPortId_Type()
)
fclX25CfaCugLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25CfaCugLogPortId.setStatus("mandatory")


class _FclX25CfaCugClosedUserGroupId_Type(Integer32):
    """Custom type fclX25CfaCugClosedUserGroupId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_FclX25CfaCugClosedUserGroupId_Type.__name__ = "Integer32"
_FclX25CfaCugClosedUserGroupId_Object = MibTableColumn
fclX25CfaCugClosedUserGroupId = _FclX25CfaCugClosedUserGroupId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 51, 1, 2),
    _FclX25CfaCugClosedUserGroupId_Type()
)
fclX25CfaCugClosedUserGroupId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25CfaCugClosedUserGroupId.setStatus("mandatory")


class _FclX25CfaCugStatus_Type(Integer32):
    """Custom type fclX25CfaCugStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclX25CfaCugStatus_Type.__name__ = "Integer32"
_FclX25CfaCugStatus_Object = MibTableColumn
fclX25CfaCugStatus = _FclX25CfaCugStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 51, 1, 3),
    _FclX25CfaCugStatus_Type()
)
fclX25CfaCugStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaCugStatus.setStatus("mandatory")


class _FclX25CfaCugChecking_Type(Integer32):
    """Custom type fclX25CfaCugChecking based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("onIncomingCall", 2),
          ("onIncomingCallAndOutgoingCall", 1),
          ("onOutgoingCall", 3))
    )


_FclX25CfaCugChecking_Type.__name__ = "Integer32"
_FclX25CfaCugChecking_Object = MibTableColumn
fclX25CfaCugChecking = _FclX25CfaCugChecking_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 51, 1, 4),
    _FclX25CfaCugChecking_Type()
)
fclX25CfaCugChecking.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaCugChecking.setStatus("mandatory")


class _FclX25CfaCugClosedUserGroupExt_Type(Integer32):
    """Custom type fclX25CfaCugClosedUserGroupExt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_FclX25CfaCugClosedUserGroupExt_Type.__name__ = "Integer32"
_FclX25CfaCugClosedUserGroupExt_Object = MibTableColumn
fclX25CfaCugClosedUserGroupExt = _FclX25CfaCugClosedUserGroupExt_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 51, 1, 5),
    _FclX25CfaCugClosedUserGroupExt_Type()
)
fclX25CfaCugClosedUserGroupExt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfaCugClosedUserGroupExt.setStatus("mandatory")
_FclX25ConfigInterNode_ObjectIdentity = ObjectIdentity
fclX25ConfigInterNode = _FclX25ConfigInterNode_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10)
)
_FclX25ConfigInterNodeTable_Object = MibTable
fclX25ConfigInterNodeTable = _FclX25ConfigInterNodeTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 1)
)
if mibBuilder.loadTexts:
    fclX25ConfigInterNodeTable.setStatus("mandatory")
_FclX25ConfigInterNodeEntry_Object = MibTableRow
fclX25ConfigInterNodeEntry = _FclX25ConfigInterNodeEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 1, 1)
)
fclX25ConfigInterNodeEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25CfnConfigId"),
)
if mibBuilder.loadTexts:
    fclX25ConfigInterNodeEntry.setStatus("mandatory")


class _FclX25CfnConfigId_Type(Integer32):
    """Custom type fclX25CfnConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25CfnConfigId_Type.__name__ = "Integer32"
_FclX25CfnConfigId_Object = MibTableColumn
fclX25CfnConfigId = _FclX25CfnConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 1, 1, 1),
    _FclX25CfnConfigId_Type()
)
fclX25CfnConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25CfnConfigId.setStatus("mandatory")


class _FclX25CfnStatus_Type(Integer32):
    """Custom type fclX25CfnStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FclX25CfnStatus_Type.__name__ = "Integer32"
_FclX25CfnStatus_Object = MibTableColumn
fclX25CfnStatus = _FclX25CfnStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 1, 1, 2),
    _FclX25CfnStatus_Type()
)
fclX25CfnStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnStatus.setStatus("mandatory")


class _FclX25CfnDescription_Type(DisplayString):
    """Custom type fclX25CfnDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_FclX25CfnDescription_Type.__name__ = "DisplayString"
_FclX25CfnDescription_Object = MibTableColumn
fclX25CfnDescription = _FclX25CfnDescription_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 1, 1, 3),
    _FclX25CfnDescription_Type()
)
fclX25CfnDescription.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnDescription.setStatus("mandatory")


class _FclX25CfnProfileId_Type(Integer32):
    """Custom type fclX25CfnProfileId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25CfnProfileId_Type.__name__ = "Integer32"
_FclX25CfnProfileId_Object = MibTableColumn
fclX25CfnProfileId = _FclX25CfnProfileId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 1, 1, 4),
    _FclX25CfnProfileId_Type()
)
fclX25CfnProfileId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnProfileId.setStatus("mandatory")


class _FclX25CfnModificationCount_Type(Integer32):
    """Custom type fclX25CfnModificationCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FclX25CfnModificationCount_Type.__name__ = "Integer32"
_FclX25CfnModificationCount_Object = MibTableColumn
fclX25CfnModificationCount = _FclX25CfnModificationCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 1, 1, 5),
    _FclX25CfnModificationCount_Type()
)
fclX25CfnModificationCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25CfnModificationCount.setStatus("mandatory")
_FclX25CfnDataLinkNetworkTable_Object = MibTable
fclX25CfnDataLinkNetworkTable = _FclX25CfnDataLinkNetworkTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10)
)
if mibBuilder.loadTexts:
    fclX25CfnDataLinkNetworkTable.setStatus("mandatory")
_FclX25CfnDataLinkNetworkEntry_Object = MibTableRow
fclX25CfnDataLinkNetworkEntry = _FclX25CfnDataLinkNetworkEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1)
)
fclX25CfnDataLinkNetworkEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25CfnDlnConfigId"),
)
if mibBuilder.loadTexts:
    fclX25CfnDataLinkNetworkEntry.setStatus("mandatory")


class _FclX25CfnDlnConfigId_Type(Integer32):
    """Custom type fclX25CfnDlnConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25CfnDlnConfigId_Type.__name__ = "Integer32"
_FclX25CfnDlnConfigId_Object = MibTableColumn
fclX25CfnDlnConfigId = _FclX25CfnDlnConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 1),
    _FclX25CfnDlnConfigId_Type()
)
fclX25CfnDlnConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25CfnDlnConfigId.setStatus("mandatory")


class _FclX25CfnDlnStationType_Type(Integer32):
    """Custom type fclX25CfnDlnStationType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dce", 2),
          ("dte", 1))
    )


_FclX25CfnDlnStationType_Type.__name__ = "Integer32"
_FclX25CfnDlnStationType_Object = MibTableColumn
fclX25CfnDlnStationType = _FclX25CfnDlnStationType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 2),
    _FclX25CfnDlnStationType_Type()
)
fclX25CfnDlnStationType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnDlnStationType.setStatus("mandatory")


class _FclX25CfnDlnN2RetryCount_Type(Integer32):
    """Custom type fclX25CfnDlnN2RetryCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 250),
    )


_FclX25CfnDlnN2RetryCount_Type.__name__ = "Integer32"
_FclX25CfnDlnN2RetryCount_Object = MibTableColumn
fclX25CfnDlnN2RetryCount = _FclX25CfnDlnN2RetryCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 5),
    _FclX25CfnDlnN2RetryCount_Type()
)
fclX25CfnDlnN2RetryCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnDlnN2RetryCount.setStatus("mandatory")


class _FclX25CfnDlnT1AcknowledgeTimer_Type(Integer32):
    """Custom type fclX25CfnDlnT1AcknowledgeTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(200, 25000),
    )


_FclX25CfnDlnT1AcknowledgeTimer_Type.__name__ = "Integer32"
_FclX25CfnDlnT1AcknowledgeTimer_Object = MibTableColumn
fclX25CfnDlnT1AcknowledgeTimer = _FclX25CfnDlnT1AcknowledgeTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 6),
    _FclX25CfnDlnT1AcknowledgeTimer_Type()
)
fclX25CfnDlnT1AcknowledgeTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnDlnT1AcknowledgeTimer.setStatus("mandatory")


class _FclX25CfnDlnT2AcknowledgeDelayTimer_Type(Integer32):
    """Custom type fclX25CfnDlnT2AcknowledgeDelayTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 12700),
    )


_FclX25CfnDlnT2AcknowledgeDelayTimer_Type.__name__ = "Integer32"
_FclX25CfnDlnT2AcknowledgeDelayTimer_Object = MibTableColumn
fclX25CfnDlnT2AcknowledgeDelayTimer = _FclX25CfnDlnT2AcknowledgeDelayTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 7),
    _FclX25CfnDlnT2AcknowledgeDelayTimer_Type()
)
fclX25CfnDlnT2AcknowledgeDelayTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnDlnT2AcknowledgeDelayTimer.setStatus("mandatory")


class _FclX25CfnDlnKWindowSize_Type(Integer32):
    """Custom type fclX25CfnDlnKWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 127),
    )


_FclX25CfnDlnKWindowSize_Type.__name__ = "Integer32"
_FclX25CfnDlnKWindowSize_Object = MibTableColumn
fclX25CfnDlnKWindowSize = _FclX25CfnDlnKWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 8),
    _FclX25CfnDlnKWindowSize_Type()
)
fclX25CfnDlnKWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnDlnKWindowSize.setStatus("mandatory")


class _FclX25CfnDlnEachPacketAcknowledgement_Type(Integer32):
    """Custom type fclX25CfnDlnEachPacketAcknowledgement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclX25CfnDlnEachPacketAcknowledgement_Type.__name__ = "Integer32"
_FclX25CfnDlnEachPacketAcknowledgement_Object = MibTableColumn
fclX25CfnDlnEachPacketAcknowledgement = _FclX25CfnDlnEachPacketAcknowledgement_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 9),
    _FclX25CfnDlnEachPacketAcknowledgement_Type()
)
fclX25CfnDlnEachPacketAcknowledgement.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnDlnEachPacketAcknowledgement.setStatus("mandatory")


class _FclX25CfnDlnLowestIncomingChannel_Type(Integer32):
    """Custom type fclX25CfnDlnLowestIncomingChannel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_FclX25CfnDlnLowestIncomingChannel_Type.__name__ = "Integer32"
_FclX25CfnDlnLowestIncomingChannel_Object = MibTableColumn
fclX25CfnDlnLowestIncomingChannel = _FclX25CfnDlnLowestIncomingChannel_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 10),
    _FclX25CfnDlnLowestIncomingChannel_Type()
)
fclX25CfnDlnLowestIncomingChannel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnDlnLowestIncomingChannel.setStatus("mandatory")


class _FclX25CfnDlnIncomingChannelCount_Type(Integer32):
    """Custom type fclX25CfnDlnIncomingChannelCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4096),
    )


_FclX25CfnDlnIncomingChannelCount_Type.__name__ = "Integer32"
_FclX25CfnDlnIncomingChannelCount_Object = MibTableColumn
fclX25CfnDlnIncomingChannelCount = _FclX25CfnDlnIncomingChannelCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 11),
    _FclX25CfnDlnIncomingChannelCount_Type()
)
fclX25CfnDlnIncomingChannelCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnDlnIncomingChannelCount.setStatus("mandatory")


class _FclX25CfnDlnLowestTwoWayChannel_Type(Integer32):
    """Custom type fclX25CfnDlnLowestTwoWayChannel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_FclX25CfnDlnLowestTwoWayChannel_Type.__name__ = "Integer32"
_FclX25CfnDlnLowestTwoWayChannel_Object = MibTableColumn
fclX25CfnDlnLowestTwoWayChannel = _FclX25CfnDlnLowestTwoWayChannel_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 15),
    _FclX25CfnDlnLowestTwoWayChannel_Type()
)
fclX25CfnDlnLowestTwoWayChannel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnDlnLowestTwoWayChannel.setStatus("mandatory")


class _FclX25CfnDlnTwoWayChannelCount_Type(Integer32):
    """Custom type fclX25CfnDlnTwoWayChannelCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4096),
    )


_FclX25CfnDlnTwoWayChannelCount_Type.__name__ = "Integer32"
_FclX25CfnDlnTwoWayChannelCount_Object = MibTableColumn
fclX25CfnDlnTwoWayChannelCount = _FclX25CfnDlnTwoWayChannelCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 16),
    _FclX25CfnDlnTwoWayChannelCount_Type()
)
fclX25CfnDlnTwoWayChannelCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnDlnTwoWayChannelCount.setStatus("mandatory")


class _FclX25CfnDlnLowestOutgoingChannel_Type(Integer32):
    """Custom type fclX25CfnDlnLowestOutgoingChannel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_FclX25CfnDlnLowestOutgoingChannel_Type.__name__ = "Integer32"
_FclX25CfnDlnLowestOutgoingChannel_Object = MibTableColumn
fclX25CfnDlnLowestOutgoingChannel = _FclX25CfnDlnLowestOutgoingChannel_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 17),
    _FclX25CfnDlnLowestOutgoingChannel_Type()
)
fclX25CfnDlnLowestOutgoingChannel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnDlnLowestOutgoingChannel.setStatus("mandatory")


class _FclX25CfnDlnOutgoingChannelCount_Type(Integer32):
    """Custom type fclX25CfnDlnOutgoingChannelCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4096),
    )


_FclX25CfnDlnOutgoingChannelCount_Type.__name__ = "Integer32"
_FclX25CfnDlnOutgoingChannelCount_Object = MibTableColumn
fclX25CfnDlnOutgoingChannelCount = _FclX25CfnDlnOutgoingChannelCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 18),
    _FclX25CfnDlnOutgoingChannelCount_Type()
)
fclX25CfnDlnOutgoingChannelCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnDlnOutgoingChannelCount.setStatus("mandatory")


class _FclX25CfnDlnOutgoingChannelNumbering_Type(Integer32):
    """Custom type fclX25CfnDlnOutgoingChannelNumbering based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("decremental", 1),
          ("incremental", 2))
    )


_FclX25CfnDlnOutgoingChannelNumbering_Type.__name__ = "Integer32"
_FclX25CfnDlnOutgoingChannelNumbering_Object = MibTableColumn
fclX25CfnDlnOutgoingChannelNumbering = _FclX25CfnDlnOutgoingChannelNumbering_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 19),
    _FclX25CfnDlnOutgoingChannelNumbering_Type()
)
fclX25CfnDlnOutgoingChannelNumbering.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnDlnOutgoingChannelNumbering.setStatus("mandatory")


class _FclX25CfnDlnDBitModification_Type(Integer32):
    """Custom type fclX25CfnDlnDBitModification based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clear", 2),
          ("off", 1),
          ("on", 3))
    )


_FclX25CfnDlnDBitModification_Type.__name__ = "Integer32"
_FclX25CfnDlnDBitModification_Object = MibTableColumn
fclX25CfnDlnDBitModification = _FclX25CfnDlnDBitModification_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 30),
    _FclX25CfnDlnDBitModification_Type()
)
fclX25CfnDlnDBitModification.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnDlnDBitModification.setStatus("mandatory")
_FclX25CfnNegotiatedFacilityTable_Object = MibTable
fclX25CfnNegotiatedFacilityTable = _FclX25CfnNegotiatedFacilityTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11)
)
if mibBuilder.loadTexts:
    fclX25CfnNegotiatedFacilityTable.setStatus("mandatory")
_FclX25CfnNegotiatedFacilityEntry_Object = MibTableRow
fclX25CfnNegotiatedFacilityEntry = _FclX25CfnNegotiatedFacilityEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1)
)
fclX25CfnNegotiatedFacilityEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25CfnNegConfigId"),
)
if mibBuilder.loadTexts:
    fclX25CfnNegotiatedFacilityEntry.setStatus("mandatory")


class _FclX25CfnNegConfigId_Type(Integer32):
    """Custom type fclX25CfnNegConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25CfnNegConfigId_Type.__name__ = "Integer32"
_FclX25CfnNegConfigId_Object = MibTableColumn
fclX25CfnNegConfigId = _FclX25CfnNegConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 1),
    _FclX25CfnNegConfigId_Type()
)
fclX25CfnNegConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25CfnNegConfigId.setStatus("mandatory")


class _FclX25CfnNegOutputFastSelect_Type(Integer32):
    """Custom type fclX25CfnNegOutputFastSelect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("noCheck", 3),
          ("subscribe", 2))
    )


_FclX25CfnNegOutputFastSelect_Type.__name__ = "Integer32"
_FclX25CfnNegOutputFastSelect_Object = MibTableColumn
fclX25CfnNegOutputFastSelect = _FclX25CfnNegOutputFastSelect_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 2),
    _FclX25CfnNegOutputFastSelect_Type()
)
fclX25CfnNegOutputFastSelect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnNegOutputFastSelect.setStatus("mandatory")


class _FclX25CfnNegInputFastSelect_Type(Integer32):
    """Custom type fclX25CfnNegInputFastSelect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("longUserData", 4),
          ("subscribe", 2))
    )


_FclX25CfnNegInputFastSelect_Type.__name__ = "Integer32"
_FclX25CfnNegInputFastSelect_Object = MibTableColumn
fclX25CfnNegInputFastSelect = _FclX25CfnNegInputFastSelect_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 3),
    _FclX25CfnNegInputFastSelect_Type()
)
fclX25CfnNegInputFastSelect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnNegInputFastSelect.setStatus("mandatory")


class _FclX25CfnNegThroughputClass_Type(Integer32):
    """Custom type fclX25CfnNegThroughputClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("subscribe", 2))
    )


_FclX25CfnNegThroughputClass_Type.__name__ = "Integer32"
_FclX25CfnNegThroughputClass_Object = MibTableColumn
fclX25CfnNegThroughputClass = _FclX25CfnNegThroughputClass_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 10),
    _FclX25CfnNegThroughputClass_Type()
)
fclX25CfnNegThroughputClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnNegThroughputClass.setStatus("mandatory")


class _FclX25CfnNegDefOutThroughputClass_Type(Integer32):
    """Custom type fclX25CfnNegDefOutThroughputClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("t1200", 7),
          ("t128000", 14),
          ("t150", 4),
          ("t19200", 11),
          ("t192000", 15),
          ("t2400", 8),
          ("t300", 5),
          ("t4800", 9),
          ("t48000", 12),
          ("t600", 6),
          ("t64000", 13),
          ("t75", 3),
          ("t9600", 10))
    )


_FclX25CfnNegDefOutThroughputClass_Type.__name__ = "Integer32"
_FclX25CfnNegDefOutThroughputClass_Object = MibTableColumn
fclX25CfnNegDefOutThroughputClass = _FclX25CfnNegDefOutThroughputClass_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 11),
    _FclX25CfnNegDefOutThroughputClass_Type()
)
fclX25CfnNegDefOutThroughputClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnNegDefOutThroughputClass.setStatus("mandatory")


class _FclX25CfnNegDefInThroughputClass_Type(Integer32):
    """Custom type fclX25CfnNegDefInThroughputClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("t1200", 7),
          ("t128000", 14),
          ("t150", 4),
          ("t19200", 11),
          ("t192000", 15),
          ("t2400", 8),
          ("t300", 5),
          ("t4800", 9),
          ("t48000", 12),
          ("t600", 6),
          ("t64000", 13),
          ("t75", 3),
          ("t9600", 10))
    )


_FclX25CfnNegDefInThroughputClass_Type.__name__ = "Integer32"
_FclX25CfnNegDefInThroughputClass_Object = MibTableColumn
fclX25CfnNegDefInThroughputClass = _FclX25CfnNegDefInThroughputClass_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 12),
    _FclX25CfnNegDefInThroughputClass_Type()
)
fclX25CfnNegDefInThroughputClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnNegDefInThroughputClass.setStatus("mandatory")


class _FclX25CfnNegMaxOutThroughputClass_Type(Integer32):
    """Custom type fclX25CfnNegMaxOutThroughputClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("t1200", 7),
          ("t128000", 14),
          ("t150", 4),
          ("t19200", 11),
          ("t192000", 15),
          ("t2400", 8),
          ("t300", 5),
          ("t4800", 9),
          ("t48000", 12),
          ("t600", 6),
          ("t64000", 13),
          ("t75", 3),
          ("t9600", 10))
    )


_FclX25CfnNegMaxOutThroughputClass_Type.__name__ = "Integer32"
_FclX25CfnNegMaxOutThroughputClass_Object = MibTableColumn
fclX25CfnNegMaxOutThroughputClass = _FclX25CfnNegMaxOutThroughputClass_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 13),
    _FclX25CfnNegMaxOutThroughputClass_Type()
)
fclX25CfnNegMaxOutThroughputClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnNegMaxOutThroughputClass.setStatus("mandatory")


class _FclX25CfnNegMaxInThroughputClass_Type(Integer32):
    """Custom type fclX25CfnNegMaxInThroughputClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("t1200", 7),
          ("t128000", 14),
          ("t150", 4),
          ("t19200", 11),
          ("t192000", 15),
          ("t2400", 8),
          ("t300", 5),
          ("t4800", 9),
          ("t48000", 12),
          ("t600", 6),
          ("t64000", 13),
          ("t75", 3),
          ("t9600", 10))
    )


_FclX25CfnNegMaxInThroughputClass_Type.__name__ = "Integer32"
_FclX25CfnNegMaxInThroughputClass_Object = MibTableColumn
fclX25CfnNegMaxInThroughputClass = _FclX25CfnNegMaxInThroughputClass_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 14),
    _FclX25CfnNegMaxInThroughputClass_Type()
)
fclX25CfnNegMaxInThroughputClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnNegMaxInThroughputClass.setStatus("mandatory")


class _FclX25CfnNegPacketSize_Type(Integer32):
    """Custom type fclX25CfnNegPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("subscribe", 2))
    )


_FclX25CfnNegPacketSize_Type.__name__ = "Integer32"
_FclX25CfnNegPacketSize_Object = MibTableColumn
fclX25CfnNegPacketSize = _FclX25CfnNegPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 20),
    _FclX25CfnNegPacketSize_Type()
)
fclX25CfnNegPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnNegPacketSize.setStatus("mandatory")


class _FclX25CfnNegDefOutPacketSize_Type(Integer32):
    """Custom type fclX25CfnNegDefOutPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("s1024", 10),
          ("s128", 7),
          ("s16", 4),
          ("s2048", 11),
          ("s256", 8),
          ("s32", 5),
          ("s4096", 12),
          ("s512", 9),
          ("s64", 6),
          ("s8192", 13))
    )


_FclX25CfnNegDefOutPacketSize_Type.__name__ = "Integer32"
_FclX25CfnNegDefOutPacketSize_Object = MibTableColumn
fclX25CfnNegDefOutPacketSize = _FclX25CfnNegDefOutPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 21),
    _FclX25CfnNegDefOutPacketSize_Type()
)
fclX25CfnNegDefOutPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnNegDefOutPacketSize.setStatus("mandatory")


class _FclX25CfnNegDefInPacketSize_Type(Integer32):
    """Custom type fclX25CfnNegDefInPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("s1024", 10),
          ("s128", 7),
          ("s16", 4),
          ("s2048", 11),
          ("s256", 8),
          ("s32", 5),
          ("s4096", 12),
          ("s512", 9),
          ("s64", 6),
          ("s8192", 13))
    )


_FclX25CfnNegDefInPacketSize_Type.__name__ = "Integer32"
_FclX25CfnNegDefInPacketSize_Object = MibTableColumn
fclX25CfnNegDefInPacketSize = _FclX25CfnNegDefInPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 22),
    _FclX25CfnNegDefInPacketSize_Type()
)
fclX25CfnNegDefInPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnNegDefInPacketSize.setStatus("mandatory")


class _FclX25CfnNegMaxOutPacketSize_Type(Integer32):
    """Custom type fclX25CfnNegMaxOutPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("s1024", 10),
          ("s128", 7),
          ("s16", 4),
          ("s2048", 11),
          ("s256", 8),
          ("s32", 5),
          ("s4096", 12),
          ("s512", 9),
          ("s64", 6),
          ("s8192", 13))
    )


_FclX25CfnNegMaxOutPacketSize_Type.__name__ = "Integer32"
_FclX25CfnNegMaxOutPacketSize_Object = MibTableColumn
fclX25CfnNegMaxOutPacketSize = _FclX25CfnNegMaxOutPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 23),
    _FclX25CfnNegMaxOutPacketSize_Type()
)
fclX25CfnNegMaxOutPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnNegMaxOutPacketSize.setStatus("mandatory")


class _FclX25CfnNegMaxInPacketSize_Type(Integer32):
    """Custom type fclX25CfnNegMaxInPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("s1024", 10),
          ("s128", 7),
          ("s16", 4),
          ("s2048", 11),
          ("s256", 8),
          ("s32", 5),
          ("s4096", 12),
          ("s512", 9),
          ("s64", 6),
          ("s8192", 13))
    )


_FclX25CfnNegMaxInPacketSize_Type.__name__ = "Integer32"
_FclX25CfnNegMaxInPacketSize_Object = MibTableColumn
fclX25CfnNegMaxInPacketSize = _FclX25CfnNegMaxInPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 24),
    _FclX25CfnNegMaxInPacketSize_Type()
)
fclX25CfnNegMaxInPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnNegMaxInPacketSize.setStatus("mandatory")


class _FclX25CfnNegMinOutPacketSize_Type(Integer32):
    """Custom type fclX25CfnNegMinOutPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("s1024", 10),
          ("s128", 7),
          ("s16", 4),
          ("s2048", 11),
          ("s256", 8),
          ("s32", 5),
          ("s4096", 12),
          ("s512", 9),
          ("s64", 6),
          ("s8192", 13))
    )


_FclX25CfnNegMinOutPacketSize_Type.__name__ = "Integer32"
_FclX25CfnNegMinOutPacketSize_Object = MibTableColumn
fclX25CfnNegMinOutPacketSize = _FclX25CfnNegMinOutPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 25),
    _FclX25CfnNegMinOutPacketSize_Type()
)
fclX25CfnNegMinOutPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnNegMinOutPacketSize.setStatus("mandatory")


class _FclX25CfnNegMinInPacketSize_Type(Integer32):
    """Custom type fclX25CfnNegMinInPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("s1024", 10),
          ("s128", 7),
          ("s16", 4),
          ("s2048", 11),
          ("s256", 8),
          ("s32", 5),
          ("s4096", 12),
          ("s512", 9),
          ("s64", 6),
          ("s8192", 13))
    )


_FclX25CfnNegMinInPacketSize_Type.__name__ = "Integer32"
_FclX25CfnNegMinInPacketSize_Object = MibTableColumn
fclX25CfnNegMinInPacketSize = _FclX25CfnNegMinInPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 26),
    _FclX25CfnNegMinInPacketSize_Type()
)
fclX25CfnNegMinInPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnNegMinInPacketSize.setStatus("mandatory")


class _FclX25CfnNegWindowSize_Type(Integer32):
    """Custom type fclX25CfnNegWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("subscribe", 2))
    )


_FclX25CfnNegWindowSize_Type.__name__ = "Integer32"
_FclX25CfnNegWindowSize_Object = MibTableColumn
fclX25CfnNegWindowSize = _FclX25CfnNegWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 30),
    _FclX25CfnNegWindowSize_Type()
)
fclX25CfnNegWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnNegWindowSize.setStatus("mandatory")


class _FclX25CfnNegDefOutWindowSize_Type(Integer32):
    """Custom type fclX25CfnNegDefOutWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 7),
    )


_FclX25CfnNegDefOutWindowSize_Type.__name__ = "Integer32"
_FclX25CfnNegDefOutWindowSize_Object = MibTableColumn
fclX25CfnNegDefOutWindowSize = _FclX25CfnNegDefOutWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 31),
    _FclX25CfnNegDefOutWindowSize_Type()
)
fclX25CfnNegDefOutWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnNegDefOutWindowSize.setStatus("mandatory")


class _FclX25CfnNegDefInWindowSize_Type(Integer32):
    """Custom type fclX25CfnNegDefInWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 7),
    )


_FclX25CfnNegDefInWindowSize_Type.__name__ = "Integer32"
_FclX25CfnNegDefInWindowSize_Object = MibTableColumn
fclX25CfnNegDefInWindowSize = _FclX25CfnNegDefInWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 32),
    _FclX25CfnNegDefInWindowSize_Type()
)
fclX25CfnNegDefInWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnNegDefInWindowSize.setStatus("mandatory")


class _FclX25CfnNegMaxOutWindowSize_Type(Integer32):
    """Custom type fclX25CfnNegMaxOutWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 7),
    )


_FclX25CfnNegMaxOutWindowSize_Type.__name__ = "Integer32"
_FclX25CfnNegMaxOutWindowSize_Object = MibTableColumn
fclX25CfnNegMaxOutWindowSize = _FclX25CfnNegMaxOutWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 33),
    _FclX25CfnNegMaxOutWindowSize_Type()
)
fclX25CfnNegMaxOutWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnNegMaxOutWindowSize.setStatus("mandatory")


class _FclX25CfnNegMaxInWindowSize_Type(Integer32):
    """Custom type fclX25CfnNegMaxInWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 7),
    )


_FclX25CfnNegMaxInWindowSize_Type.__name__ = "Integer32"
_FclX25CfnNegMaxInWindowSize_Object = MibTableColumn
fclX25CfnNegMaxInWindowSize = _FclX25CfnNegMaxInWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 34),
    _FclX25CfnNegMaxInWindowSize_Type()
)
fclX25CfnNegMaxInWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnNegMaxInWindowSize.setStatus("mandatory")
_FclX25CfnSignallingTable_Object = MibTable
fclX25CfnSignallingTable = _FclX25CfnSignallingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30)
)
if mibBuilder.loadTexts:
    fclX25CfnSignallingTable.setStatus("mandatory")
_FclX25CfnSignallingEntry_Object = MibTableRow
fclX25CfnSignallingEntry = _FclX25CfnSignallingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1)
)
fclX25CfnSignallingEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25CfnSigConfigId"),
)
if mibBuilder.loadTexts:
    fclX25CfnSignallingEntry.setStatus("mandatory")


class _FclX25CfnSigConfigId_Type(Integer32):
    """Custom type fclX25CfnSigConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25CfnSigConfigId_Type.__name__ = "Integer32"
_FclX25CfnSigConfigId_Object = MibTableColumn
fclX25CfnSigConfigId = _FclX25CfnSigConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 1),
    _FclX25CfnSigConfigId_Type()
)
fclX25CfnSigConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25CfnSigConfigId.setStatus("mandatory")


class _FclX25CfnSigSubAddressTransmission_Type(Integer32):
    """Custom type fclX25CfnSigSubAddressTransmission based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclX25CfnSigSubAddressTransmission_Type.__name__ = "Integer32"
_FclX25CfnSigSubAddressTransmission_Object = MibTableColumn
fclX25CfnSigSubAddressTransmission = _FclX25CfnSigSubAddressTransmission_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 4),
    _FclX25CfnSigSubAddressTransmission_Type()
)
fclX25CfnSigSubAddressTransmission.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnSigSubAddressTransmission.setStatus("mandatory")


class _FclX25CfnSigConversionAimedPoint_Type(Integer32):
    """Custom type fclX25CfnSigConversionAimedPoint based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclX25CfnSigConversionAimedPoint_Type.__name__ = "Integer32"
_FclX25CfnSigConversionAimedPoint_Object = MibTableColumn
fclX25CfnSigConversionAimedPoint = _FclX25CfnSigConversionAimedPoint_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 10),
    _FclX25CfnSigConversionAimedPoint_Type()
)
fclX25CfnSigConversionAimedPoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnSigConversionAimedPoint.setStatus("mandatory")


class _FclX25CfnSigConversionIncomingCall_Type(Integer32):
    """Custom type fclX25CfnSigConversionIncomingCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("calledAddress", 3),
          ("callingAddress", 2),
          ("callingAddressAndCalledAddress", 4),
          ("off", 1))
    )


_FclX25CfnSigConversionIncomingCall_Type.__name__ = "Integer32"
_FclX25CfnSigConversionIncomingCall_Object = MibTableColumn
fclX25CfnSigConversionIncomingCall = _FclX25CfnSigConversionIncomingCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 11),
    _FclX25CfnSigConversionIncomingCall_Type()
)
fclX25CfnSigConversionIncomingCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnSigConversionIncomingCall.setStatus("mandatory")


class _FclX25CfnSigConversionOutgoingCall_Type(Integer32):
    """Custom type fclX25CfnSigConversionOutgoingCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("calledAddress", 3),
          ("callingAddress", 2),
          ("callingAddressAndCalledAddress", 4),
          ("off", 1))
    )


_FclX25CfnSigConversionOutgoingCall_Type.__name__ = "Integer32"
_FclX25CfnSigConversionOutgoingCall_Object = MibTableColumn
fclX25CfnSigConversionOutgoingCall = _FclX25CfnSigConversionOutgoingCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 12),
    _FclX25CfnSigConversionOutgoingCall_Type()
)
fclX25CfnSigConversionOutgoingCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnSigConversionOutgoingCall.setStatus("mandatory")


class _FclX25CfnSigConversionAddressCheck_Type(Integer32):
    """Custom type fclX25CfnSigConversionAddressCheck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onIncomingCall", 2),
          ("onIncomingCallAndOutgoingCall", 4),
          ("onOutgoingCall", 3))
    )


_FclX25CfnSigConversionAddressCheck_Type.__name__ = "Integer32"
_FclX25CfnSigConversionAddressCheck_Object = MibTableColumn
fclX25CfnSigConversionAddressCheck = _FclX25CfnSigConversionAddressCheck_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 13),
    _FclX25CfnSigConversionAddressCheck_Type()
)
fclX25CfnSigConversionAddressCheck.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnSigConversionAddressCheck.setStatus("mandatory")


class _FclX25CfnSigConvMultiCalledAddrInCall_Type(Integer32):
    """Custom type fclX25CfnSigConvMultiCalledAddrInCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_FclX25CfnSigConvMultiCalledAddrInCall_Type.__name__ = "Integer32"
_FclX25CfnSigConvMultiCalledAddrInCall_Object = MibTableColumn
fclX25CfnSigConvMultiCalledAddrInCall = _FclX25CfnSigConvMultiCalledAddrInCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 14),
    _FclX25CfnSigConvMultiCalledAddrInCall_Type()
)
fclX25CfnSigConvMultiCalledAddrInCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnSigConvMultiCalledAddrInCall.setStatus("mandatory")


class _FclX25CfnSigConvMultiCallingAddrInCall_Type(Integer32):
    """Custom type fclX25CfnSigConvMultiCallingAddrInCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_FclX25CfnSigConvMultiCallingAddrInCall_Type.__name__ = "Integer32"
_FclX25CfnSigConvMultiCallingAddrInCall_Object = MibTableColumn
fclX25CfnSigConvMultiCallingAddrInCall = _FclX25CfnSigConvMultiCallingAddrInCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 15),
    _FclX25CfnSigConvMultiCallingAddrInCall_Type()
)
fclX25CfnSigConvMultiCallingAddrInCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnSigConvMultiCallingAddrInCall.setStatus("mandatory")


class _FclX25CfnSigConvMultiCalledAddrOutCall_Type(Integer32):
    """Custom type fclX25CfnSigConvMultiCalledAddrOutCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_FclX25CfnSigConvMultiCalledAddrOutCall_Type.__name__ = "Integer32"
_FclX25CfnSigConvMultiCalledAddrOutCall_Object = MibTableColumn
fclX25CfnSigConvMultiCalledAddrOutCall = _FclX25CfnSigConvMultiCalledAddrOutCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 16),
    _FclX25CfnSigConvMultiCalledAddrOutCall_Type()
)
fclX25CfnSigConvMultiCalledAddrOutCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnSigConvMultiCalledAddrOutCall.setStatus("mandatory")


class _FclX25CfnSigConvMultiCallingAddrOutCall_Type(Integer32):
    """Custom type fclX25CfnSigConvMultiCallingAddrOutCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_FclX25CfnSigConvMultiCallingAddrOutCall_Type.__name__ = "Integer32"
_FclX25CfnSigConvMultiCallingAddrOutCall_Object = MibTableColumn
fclX25CfnSigConvMultiCallingAddrOutCall = _FclX25CfnSigConvMultiCallingAddrOutCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 17),
    _FclX25CfnSigConvMultiCallingAddrOutCall_Type()
)
fclX25CfnSigConvMultiCallingAddrOutCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnSigConvMultiCallingAddrOutCall.setStatus("mandatory")


class _FclX25CfnSigT11CallResponseTimer_Type(Integer32):
    """Custom type fclX25CfnSigT11CallResponseTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 2500),
    )


_FclX25CfnSigT11CallResponseTimer_Type.__name__ = "Integer32"
_FclX25CfnSigT11CallResponseTimer_Object = MibTableColumn
fclX25CfnSigT11CallResponseTimer = _FclX25CfnSigT11CallResponseTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 22),
    _FclX25CfnSigT11CallResponseTimer_Type()
)
fclX25CfnSigT11CallResponseTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnSigT11CallResponseTimer.setStatus("mandatory")


class _FclX25CfnSigCallAcceptedFormat_Type(Integer32):
    """Custom type fclX25CfnSigCallAcceptedFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("facilitiesCheckedAddresses", 1),
          ("facilitiesNoAddresses", 2),
          ("facilitiesNotCheckedAddresses", 4),
          ("noFacilitiesNoAddresses", 3))
    )


_FclX25CfnSigCallAcceptedFormat_Type.__name__ = "Integer32"
_FclX25CfnSigCallAcceptedFormat_Object = MibTableColumn
fclX25CfnSigCallAcceptedFormat = _FclX25CfnSigCallAcceptedFormat_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 25),
    _FclX25CfnSigCallAcceptedFormat_Type()
)
fclX25CfnSigCallAcceptedFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnSigCallAcceptedFormat.setStatus("mandatory")
_FclX25CfnServiceTable_Object = MibTable
fclX25CfnServiceTable = _FclX25CfnServiceTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40)
)
if mibBuilder.loadTexts:
    fclX25CfnServiceTable.setStatus("mandatory")
_FclX25CfnServiceEntry_Object = MibTableRow
fclX25CfnServiceEntry = _FclX25CfnServiceEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40, 1)
)
fclX25CfnServiceEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25CfnSerConfigId"),
)
if mibBuilder.loadTexts:
    fclX25CfnServiceEntry.setStatus("mandatory")


class _FclX25CfnSerConfigId_Type(Integer32):
    """Custom type fclX25CfnSerConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FclX25CfnSerConfigId_Type.__name__ = "Integer32"
_FclX25CfnSerConfigId_Object = MibTableColumn
fclX25CfnSerConfigId = _FclX25CfnSerConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40, 1, 1),
    _FclX25CfnSerConfigId_Type()
)
fclX25CfnSerConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25CfnSerConfigId.setStatus("mandatory")


class _FclX25CfnSerReliableVc_Type(Integer32):
    """Custom type fclX25CfnSerReliableVc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("check", 4),
          ("clear", 3),
          ("off", 1),
          ("subscribe", 2))
    )


_FclX25CfnSerReliableVc_Type.__name__ = "Integer32"
_FclX25CfnSerReliableVc_Object = MibTableColumn
fclX25CfnSerReliableVc = _FclX25CfnSerReliableVc_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40, 1, 2),
    _FclX25CfnSerReliableVc_Type()
)
fclX25CfnSerReliableVc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnSerReliableVc.setStatus("mandatory")


class _FclX25CfnSerCharging_Type(Integer32):
    """Custom type fclX25CfnSerCharging based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("detailed", 3),
          ("off", 1),
          ("overall", 2))
    )


_FclX25CfnSerCharging_Type.__name__ = "Integer32"
_FclX25CfnSerCharging_Object = MibTableColumn
fclX25CfnSerCharging = _FclX25CfnSerCharging_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40, 1, 3),
    _FclX25CfnSerCharging_Type()
)
fclX25CfnSerCharging.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnSerCharging.setStatus("mandatory")


class _FclX25CfnSerX29Reselection_Type(Integer32):
    """Custom type fclX25CfnSerX29Reselection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclX25CfnSerX29Reselection_Type.__name__ = "Integer32"
_FclX25CfnSerX29Reselection_Object = MibTableColumn
fclX25CfnSerX29Reselection = _FclX25CfnSerX29Reselection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40, 1, 4),
    _FclX25CfnSerX29Reselection_Type()
)
fclX25CfnSerX29Reselection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnSerX29Reselection.setStatus("mandatory")


class _FclX25CfnSerRemoteExclusiveLink_Type(Integer32):
    """Custom type fclX25CfnSerRemoteExclusiveLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FclX25CfnSerRemoteExclusiveLink_Type.__name__ = "Integer32"
_FclX25CfnSerRemoteExclusiveLink_Object = MibTableColumn
fclX25CfnSerRemoteExclusiveLink = _FclX25CfnSerRemoteExclusiveLink_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40, 1, 5),
    _FclX25CfnSerRemoteExclusiveLink_Type()
)
fclX25CfnSerRemoteExclusiveLink.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnSerRemoteExclusiveLink.setStatus("mandatory")


class _FclX25CfnSerCallReturnTransmission_Type(Integer32):
    """Custom type fclX25CfnSerCallReturnTransmission based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 3))
    )


_FclX25CfnSerCallReturnTransmission_Type.__name__ = "Integer32"
_FclX25CfnSerCallReturnTransmission_Object = MibTableColumn
fclX25CfnSerCallReturnTransmission = _FclX25CfnSerCallReturnTransmission_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40, 1, 6),
    _FclX25CfnSerCallReturnTransmission_Type()
)
fclX25CfnSerCallReturnTransmission.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnSerCallReturnTransmission.setStatus("mandatory")


class _FclX25CfnSerStatLoadAndTraffic_Type(Integer32):
    """Custom type fclX25CfnSerStatLoadAndTraffic based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclX25CfnSerStatLoadAndTraffic_Type.__name__ = "Integer32"
_FclX25CfnSerStatLoadAndTraffic_Object = MibTableColumn
fclX25CfnSerStatLoadAndTraffic = _FclX25CfnSerStatLoadAndTraffic_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40, 1, 10),
    _FclX25CfnSerStatLoadAndTraffic_Type()
)
fclX25CfnSerStatLoadAndTraffic.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnSerStatLoadAndTraffic.setStatus("mandatory")


class _FclX25CfnSerStatSignalling_Type(Integer32):
    """Custom type fclX25CfnSerStatSignalling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclX25CfnSerStatSignalling_Type.__name__ = "Integer32"
_FclX25CfnSerStatSignalling_Object = MibTableColumn
fclX25CfnSerStatSignalling = _FclX25CfnSerStatSignalling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40, 1, 11),
    _FclX25CfnSerStatSignalling_Type()
)
fclX25CfnSerStatSignalling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnSerStatSignalling.setStatus("mandatory")


class _FclX25CfnSerStatTotalizer_Type(Integer32):
    """Custom type fclX25CfnSerStatTotalizer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclX25CfnSerStatTotalizer_Type.__name__ = "Integer32"
_FclX25CfnSerStatTotalizer_Object = MibTableColumn
fclX25CfnSerStatTotalizer = _FclX25CfnSerStatTotalizer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40, 1, 12),
    _FclX25CfnSerStatTotalizer_Type()
)
fclX25CfnSerStatTotalizer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnSerStatTotalizer.setStatus("mandatory")


class _FclX25CfnSerStatCompression_Type(Integer32):
    """Custom type fclX25CfnSerStatCompression based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclX25CfnSerStatCompression_Type.__name__ = "Integer32"
_FclX25CfnSerStatCompression_Object = MibTableColumn
fclX25CfnSerStatCompression = _FclX25CfnSerStatCompression_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40, 1, 13),
    _FclX25CfnSerStatCompression_Type()
)
fclX25CfnSerStatCompression.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfnSerStatCompression.setStatus("mandatory")
_FclX25ConfigMiscellaneous_ObjectIdentity = ObjectIdentity
fclX25ConfigMiscellaneous = _FclX25ConfigMiscellaneous_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 30)
)


class _FclX25CfmDiagnosticCodeField_Type(Integer32):
    """Custom type fclX25CfmDiagnosticCodeField based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("privateCoding", 2),
          ("publicCoding", 1),
          ("x75Coding", 3))
    )


_FclX25CfmDiagnosticCodeField_Type.__name__ = "Integer32"
_FclX25CfmDiagnosticCodeField_Object = MibScalar
fclX25CfmDiagnosticCodeField = _FclX25CfmDiagnosticCodeField_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 30, 1),
    _FclX25CfmDiagnosticCodeField_Type()
)
fclX25CfmDiagnosticCodeField.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfmDiagnosticCodeField.setStatus("mandatory")


class _FclX25CfmTransmitFlowControl_Type(Integer32):
    """Custom type fclX25CfmTransmitFlowControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dedicatedTranspac", 2),
          ("standard", 1))
    )


_FclX25CfmTransmitFlowControl_Type.__name__ = "Integer32"
_FclX25CfmTransmitFlowControl_Object = MibScalar
fclX25CfmTransmitFlowControl = _FclX25CfmTransmitFlowControl_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 30, 2),
    _FclX25CfmTransmitFlowControl_Type()
)
fclX25CfmTransmitFlowControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfmTransmitFlowControl.setStatus("mandatory")


class _FclX25CfmAddress14DigitsTruncation_Type(Integer32):
    """Custom type fclX25CfmAddress14DigitsTruncation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FclX25CfmAddress14DigitsTruncation_Type.__name__ = "Integer32"
_FclX25CfmAddress14DigitsTruncation_Object = MibScalar
fclX25CfmAddress14DigitsTruncation = _FclX25CfmAddress14DigitsTruncation_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 30, 3),
    _FclX25CfmAddress14DigitsTruncation_Type()
)
fclX25CfmAddress14DigitsTruncation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfmAddress14DigitsTruncation.setStatus("mandatory")
_FclX25CfmTransmitFlowControlTable_Object = MibTable
fclX25CfmTransmitFlowControlTable = _FclX25CfmTransmitFlowControlTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 30, 20)
)
if mibBuilder.loadTexts:
    fclX25CfmTransmitFlowControlTable.setStatus("mandatory")
_FclX25CfmTransmitFlowControlEntry_Object = MibTableRow
fclX25CfmTransmitFlowControlEntry = _FclX25CfmTransmitFlowControlEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 30, 20, 1)
)
fclX25CfmTransmitFlowControlEntry.setIndexNames(
    (0, "PCE-MIB", "fclX25CfmFlowCtrlPacketSize"),
)
if mibBuilder.loadTexts:
    fclX25CfmTransmitFlowControlEntry.setStatus("mandatory")


class _FclX25CfmFlowCtrlPacketSize_Type(Integer32):
    """Custom type fclX25CfmFlowCtrlPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("s1024", 10),
          ("s128", 7),
          ("s16", 4),
          ("s2048", 11),
          ("s256", 8),
          ("s32", 5),
          ("s4096", 12),
          ("s512", 9),
          ("s64", 6),
          ("s8192", 13))
    )


_FclX25CfmFlowCtrlPacketSize_Type.__name__ = "Integer32"
_FclX25CfmFlowCtrlPacketSize_Object = MibTableColumn
fclX25CfmFlowCtrlPacketSize = _FclX25CfmFlowCtrlPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 30, 20, 1, 1),
    _FclX25CfmFlowCtrlPacketSize_Type()
)
fclX25CfmFlowCtrlPacketSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fclX25CfmFlowCtrlPacketSize.setStatus("mandatory")


class _FclX25CfmFlowCtrlMaxWindowSize_Type(Integer32):
    """Custom type fclX25CfmFlowCtrlMaxWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 7),
    )


_FclX25CfmFlowCtrlMaxWindowSize_Type.__name__ = "Integer32"
_FclX25CfmFlowCtrlMaxWindowSize_Object = MibTableColumn
fclX25CfmFlowCtrlMaxWindowSize = _FclX25CfmFlowCtrlMaxWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 30, 20, 1, 2),
    _FclX25CfmFlowCtrlMaxWindowSize_Type()
)
fclX25CfmFlowCtrlMaxWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fclX25CfmFlowCtrlMaxWindowSize.setStatus("mandatory")
_FcWanSwitch_ObjectIdentity = ObjectIdentity
fcWanSwitch = _FcWanSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25)
)


class _FcwDnicZoAddress_Type(OctetString):
    """Custom type fcwDnicZoAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(3, 3),
    )


_FcwDnicZoAddress_Type.__name__ = "OctetString"
_FcwDnicZoAddress_Object = MibScalar
fcwDnicZoAddress = _FcwDnicZoAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 1),
    _FcwDnicZoAddress_Type()
)
fcwDnicZoAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwDnicZoAddress.setStatus("mandatory")


class _FcwMaxActiveCommunications_Type(Integer32):
    """Custom type fcwMaxActiveCommunications based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(256, 4064),
    )


_FcwMaxActiveCommunications_Type.__name__ = "Integer32"
_FcwMaxActiveCommunications_Object = MibScalar
fcwMaxActiveCommunications = _FcwMaxActiveCommunications_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 10),
    _FcwMaxActiveCommunications_Type()
)
fcwMaxActiveCommunications.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwMaxActiveCommunications.setStatus("mandatory")


class _FcwDataPacketsDiscardThreshold_Type(Integer32):
    """Custom type fcwDataPacketsDiscardThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 99),
    )


_FcwDataPacketsDiscardThreshold_Type.__name__ = "Integer32"
_FcwDataPacketsDiscardThreshold_Object = MibScalar
fcwDataPacketsDiscardThreshold = _FcwDataPacketsDiscardThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 20),
    _FcwDataPacketsDiscardThreshold_Type()
)
fcwDataPacketsDiscardThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwDataPacketsDiscardThreshold.setStatus("mandatory")


class _FcwDataPacketsAcceptThreshold_Type(Integer32):
    """Custom type fcwDataPacketsAcceptThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 99),
    )


_FcwDataPacketsAcceptThreshold_Type.__name__ = "Integer32"
_FcwDataPacketsAcceptThreshold_Object = MibScalar
fcwDataPacketsAcceptThreshold = _FcwDataPacketsAcceptThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 21),
    _FcwDataPacketsAcceptThreshold_Type()
)
fcwDataPacketsAcceptThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwDataPacketsAcceptThreshold.setStatus("mandatory")


class _FcwCallPacketsDiscardThreshold_Type(Integer32):
    """Custom type fcwCallPacketsDiscardThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 99),
    )


_FcwCallPacketsDiscardThreshold_Type.__name__ = "Integer32"
_FcwCallPacketsDiscardThreshold_Object = MibScalar
fcwCallPacketsDiscardThreshold = _FcwCallPacketsDiscardThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 22),
    _FcwCallPacketsDiscardThreshold_Type()
)
fcwCallPacketsDiscardThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwCallPacketsDiscardThreshold.setStatus("mandatory")


class _FcwCallPacketsAcceptThreshold_Type(Integer32):
    """Custom type fcwCallPacketsAcceptThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 99),
    )


_FcwCallPacketsAcceptThreshold_Type.__name__ = "Integer32"
_FcwCallPacketsAcceptThreshold_Object = MibScalar
fcwCallPacketsAcceptThreshold = _FcwCallPacketsAcceptThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 23),
    _FcwCallPacketsAcceptThreshold_Type()
)
fcwCallPacketsAcceptThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwCallPacketsAcceptThreshold.setStatus("mandatory")


class _FcwLocalCommunications_Type(Integer32):
    """Custom type fcwLocalCommunications based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("denied", 1),
          ("permitted", 2))
    )


_FcwLocalCommunications_Type.__name__ = "Integer32"
_FcwLocalCommunications_Object = MibScalar
fcwLocalCommunications = _FcwLocalCommunications_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 30),
    _FcwLocalCommunications_Type()
)
fcwLocalCommunications.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwLocalCommunications.setStatus("mandatory")


class _FcwLocalIncomingCallsRouteId_Type(Integer32):
    """Custom type fcwLocalIncomingCallsRouteId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FcwLocalIncomingCallsRouteId_Type.__name__ = "Integer32"
_FcwLocalIncomingCallsRouteId_Object = MibScalar
fcwLocalIncomingCallsRouteId = _FcwLocalIncomingCallsRouteId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 31),
    _FcwLocalIncomingCallsRouteId_Type()
)
fcwLocalIncomingCallsRouteId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwLocalIncomingCallsRouteId.setStatus("mandatory")


class _FcwLoadAndTrafficSummingPeriod_Type(Integer32):
    """Custom type fcwLoadAndTrafficSummingPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 2500),
    )


_FcwLoadAndTrafficSummingPeriod_Type.__name__ = "Integer32"
_FcwLoadAndTrafficSummingPeriod_Object = MibScalar
fcwLoadAndTrafficSummingPeriod = _FcwLoadAndTrafficSummingPeriod_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 40),
    _FcwLoadAndTrafficSummingPeriod_Type()
)
fcwLoadAndTrafficSummingPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwLoadAndTrafficSummingPeriod.setStatus("mandatory")


class _FcwLoadAndTrafficEventsTimer_Type(Integer32):
    """Custom type fcwLoadAndTrafficEventsTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 2500),
    )


_FcwLoadAndTrafficEventsTimer_Type.__name__ = "Integer32"
_FcwLoadAndTrafficEventsTimer_Object = MibScalar
fcwLoadAndTrafficEventsTimer = _FcwLoadAndTrafficEventsTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 41),
    _FcwLoadAndTrafficEventsTimer_Type()
)
fcwLoadAndTrafficEventsTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwLoadAndTrafficEventsTimer.setStatus("mandatory")
_FcwFrameRelay_ObjectIdentity = ObjectIdentity
fcwFrameRelay = _FcwFrameRelay_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45)
)


class _FcwFrDlcStatusChangeTrapEnabling_Type(Integer32):
    """Custom type fcwFrDlcStatusChangeTrapEnabling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcwFrDlcStatusChangeTrapEnabling_Type.__name__ = "Integer32"
_FcwFrDlcStatusChangeTrapEnabling_Object = MibScalar
fcwFrDlcStatusChangeTrapEnabling = _FcwFrDlcStatusChangeTrapEnabling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 5),
    _FcwFrDlcStatusChangeTrapEnabling_Type()
)
fcwFrDlcStatusChangeTrapEnabling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwFrDlcStatusChangeTrapEnabling.setStatus("mandatory")


class _FcwFrAnnexeGInternalStacksMaxCount_Type(Integer32):
    """Custom type fcwFrAnnexeGInternalStacksMaxCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2000),
    )


_FcwFrAnnexeGInternalStacksMaxCount_Type.__name__ = "Integer32"
_FcwFrAnnexeGInternalStacksMaxCount_Object = MibScalar
fcwFrAnnexeGInternalStacksMaxCount = _FcwFrAnnexeGInternalStacksMaxCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 6),
    _FcwFrAnnexeGInternalStacksMaxCount_Type()
)
fcwFrAnnexeGInternalStacksMaxCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwFrAnnexeGInternalStacksMaxCount.setStatus("mandatory")


class _FcwFrEndPointMaxCount_Type(Integer32):
    """Custom type fcwFrEndPointMaxCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 5000),
    )


_FcwFrEndPointMaxCount_Type.__name__ = "Integer32"
_FcwFrEndPointMaxCount_Object = MibScalar
fcwFrEndPointMaxCount = _FcwFrEndPointMaxCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 10),
    _FcwFrEndPointMaxCount_Type()
)
fcwFrEndPointMaxCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwFrEndPointMaxCount.setStatus("mandatory")


class _FcwFrFrameAcceptCpuThreshold_Type(Integer32):
    """Custom type fcwFrFrameAcceptCpuThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FcwFrFrameAcceptCpuThreshold_Type.__name__ = "Integer32"
_FcwFrFrameAcceptCpuThreshold_Object = MibScalar
fcwFrFrameAcceptCpuThreshold = _FcwFrFrameAcceptCpuThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 20),
    _FcwFrFrameAcceptCpuThreshold_Type()
)
fcwFrFrameAcceptCpuThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwFrFrameAcceptCpuThreshold.setStatus("mandatory")


class _FcwFrFrameAcceptMemoryThreshold_Type(Integer32):
    """Custom type fcwFrFrameAcceptMemoryThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_FcwFrFrameAcceptMemoryThreshold_Type.__name__ = "Integer32"
_FcwFrFrameAcceptMemoryThreshold_Object = MibScalar
fcwFrFrameAcceptMemoryThreshold = _FcwFrFrameAcceptMemoryThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 21),
    _FcwFrFrameAcceptMemoryThreshold_Type()
)
fcwFrFrameAcceptMemoryThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwFrFrameAcceptMemoryThreshold.setStatus("mandatory")


class _FcwFrDlcSetupAlarmThreshold_Type(Integer32):
    """Custom type fcwFrDlcSetupAlarmThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FcwFrDlcSetupAlarmThreshold_Type.__name__ = "Integer32"
_FcwFrDlcSetupAlarmThreshold_Object = MibScalar
fcwFrDlcSetupAlarmThreshold = _FcwFrDlcSetupAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 22),
    _FcwFrDlcSetupAlarmThreshold_Type()
)
fcwFrDlcSetupAlarmThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwFrDlcSetupAlarmThreshold.setStatus("mandatory")


class _FcwFrDlcSetupDiscardThreshold_Type(Integer32):
    """Custom type fcwFrDlcSetupDiscardThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 350),
    )


_FcwFrDlcSetupDiscardThreshold_Type.__name__ = "Integer32"
_FcwFrDlcSetupDiscardThreshold_Object = MibScalar
fcwFrDlcSetupDiscardThreshold = _FcwFrDlcSetupDiscardThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 23),
    _FcwFrDlcSetupDiscardThreshold_Type()
)
fcwFrDlcSetupDiscardThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwFrDlcSetupDiscardThreshold.setStatus("mandatory")


class _FcwFrVoiceFrameSize_Type(Integer32):
    """Custom type fcwFrVoiceFrameSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FcwFrVoiceFrameSize_Type.__name__ = "Integer32"
_FcwFrVoiceFrameSize_Object = MibScalar
fcwFrVoiceFrameSize = _FcwFrVoiceFrameSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 40),
    _FcwFrVoiceFrameSize_Type()
)
fcwFrVoiceFrameSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwFrVoiceFrameSize.setStatus("mandatory")


class _FcwFrVoiceMaxTransitDelay_Type(Integer32):
    """Custom type fcwFrVoiceMaxTransitDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FcwFrVoiceMaxTransitDelay_Type.__name__ = "Integer32"
_FcwFrVoiceMaxTransitDelay_Object = MibScalar
fcwFrVoiceMaxTransitDelay = _FcwFrVoiceMaxTransitDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 41),
    _FcwFrVoiceMaxTransitDelay_Type()
)
fcwFrVoiceMaxTransitDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwFrVoiceMaxTransitDelay.setStatus("mandatory")


class _FcwFrCongestionCheckTimer_Type(Integer32):
    """Custom type fcwFrCongestionCheckTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(200, 4000),
    )


_FcwFrCongestionCheckTimer_Type.__name__ = "Integer32"
_FcwFrCongestionCheckTimer_Object = MibScalar
fcwFrCongestionCheckTimer = _FcwFrCongestionCheckTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 50),
    _FcwFrCongestionCheckTimer_Type()
)
fcwFrCongestionCheckTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwFrCongestionCheckTimer.setStatus("mandatory")


class _FcwFrCongestionCount_Type(Integer32):
    """Custom type fcwFrCongestionCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 255),
    )


_FcwFrCongestionCount_Type.__name__ = "Integer32"
_FcwFrCongestionCount_Object = MibScalar
fcwFrCongestionCount = _FcwFrCongestionCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 51),
    _FcwFrCongestionCount_Type()
)
fcwFrCongestionCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwFrCongestionCount.setStatus("mandatory")


class _FcwFrCirTimer_Type(Integer32):
    """Custom type fcwFrCirTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(20, 400),
    )


_FcwFrCirTimer_Type.__name__ = "Integer32"
_FcwFrCirTimer_Object = MibScalar
fcwFrCirTimer = _FcwFrCirTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 52),
    _FcwFrCirTimer_Type()
)
fcwFrCirTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwFrCirTimer.setStatus("mandatory")


class _FcwFrEventOutput_Type(Integer32):
    """Custom type fcwFrEventOutput based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("all", 2),
          ("none", 1),
          ("oneOutOf16", 3),
          ("oneOutOf256", 5),
          ("oneOutOf64", 4))
    )


_FcwFrEventOutput_Type.__name__ = "Integer32"
_FcwFrEventOutput_Object = MibScalar
fcwFrEventOutput = _FcwFrEventOutput_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 53),
    _FcwFrEventOutput_Type()
)
fcwFrEventOutput.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwFrEventOutput.setStatus("mandatory")


class _FcwFrSlowingDownThreshold_Type(Integer32):
    """Custom type fcwFrSlowingDownThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FcwFrSlowingDownThreshold_Type.__name__ = "Integer32"
_FcwFrSlowingDownThreshold_Object = MibScalar
fcwFrSlowingDownThreshold = _FcwFrSlowingDownThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 54),
    _FcwFrSlowingDownThreshold_Type()
)
fcwFrSlowingDownThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwFrSlowingDownThreshold.setStatus("mandatory")


class _FcwFrFecnBecnOfDeFramesThreshold_Type(Integer32):
    """Custom type fcwFrFecnBecnOfDeFramesThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FcwFrFecnBecnOfDeFramesThreshold_Type.__name__ = "Integer32"
_FcwFrFecnBecnOfDeFramesThreshold_Object = MibScalar
fcwFrFecnBecnOfDeFramesThreshold = _FcwFrFecnBecnOfDeFramesThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 55),
    _FcwFrFecnBecnOfDeFramesThreshold_Type()
)
fcwFrFecnBecnOfDeFramesThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwFrFecnBecnOfDeFramesThreshold.setStatus("mandatory")


class _FcwFrFecnBecnOfAllFramesThreshold_Type(Integer32):
    """Custom type fcwFrFecnBecnOfAllFramesThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FcwFrFecnBecnOfAllFramesThreshold_Type.__name__ = "Integer32"
_FcwFrFecnBecnOfAllFramesThreshold_Object = MibScalar
fcwFrFecnBecnOfAllFramesThreshold = _FcwFrFecnBecnOfAllFramesThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 56),
    _FcwFrFecnBecnOfAllFramesThreshold_Type()
)
fcwFrFecnBecnOfAllFramesThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwFrFecnBecnOfAllFramesThreshold.setStatus("mandatory")


class _FcwFrDeFramesDiscardThreshold_Type(Integer32):
    """Custom type fcwFrDeFramesDiscardThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FcwFrDeFramesDiscardThreshold_Type.__name__ = "Integer32"
_FcwFrDeFramesDiscardThreshold_Object = MibScalar
fcwFrDeFramesDiscardThreshold = _FcwFrDeFramesDiscardThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 57),
    _FcwFrDeFramesDiscardThreshold_Type()
)
fcwFrDeFramesDiscardThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwFrDeFramesDiscardThreshold.setStatus("mandatory")


class _FcwFrAllFramesDiscardThreshold_Type(Integer32):
    """Custom type fcwFrAllFramesDiscardThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 250),
    )


_FcwFrAllFramesDiscardThreshold_Type.__name__ = "Integer32"
_FcwFrAllFramesDiscardThreshold_Object = MibScalar
fcwFrAllFramesDiscardThreshold = _FcwFrAllFramesDiscardThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 58),
    _FcwFrAllFramesDiscardThreshold_Type()
)
fcwFrAllFramesDiscardThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwFrAllFramesDiscardThreshold.setStatus("mandatory")
_FcwAddressConversion_ObjectIdentity = ObjectIdentity
fcwAddressConversion = _FcwAddressConversion_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48)
)
_FcwAddrConvIncomingCallTable_Object = MibTable
fcwAddrConvIncomingCallTable = _FcwAddrConvIncomingCallTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 1)
)
if mibBuilder.loadTexts:
    fcwAddrConvIncomingCallTable.setStatus("mandatory")
_FcwAddrConvIncomingCallEntry_Object = MibTableRow
fcwAddrConvIncomingCallEntry = _FcwAddrConvIncomingCallEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 1, 1)
)
fcwAddrConvIncomingCallEntry.setIndexNames(
    (0, "PCE-MIB", "fcwConvInExternalAddr"),
)
if mibBuilder.loadTexts:
    fcwAddrConvIncomingCallEntry.setStatus("mandatory")


class _FcwConvInExternalAddr_Type(OctetString):
    """Custom type fcwConvInExternalAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FcwConvInExternalAddr_Type.__name__ = "OctetString"
_FcwConvInExternalAddr_Object = MibTableColumn
fcwConvInExternalAddr = _FcwConvInExternalAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 1, 1, 1),
    _FcwConvInExternalAddr_Type()
)
fcwConvInExternalAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwConvInExternalAddr.setStatus("mandatory")


class _FcwConvInStatus_Type(Integer32):
    """Custom type fcwConvInStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcwConvInStatus_Type.__name__ = "Integer32"
_FcwConvInStatus_Object = MibTableColumn
fcwConvInStatus = _FcwConvInStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 1, 1, 2),
    _FcwConvInStatus_Type()
)
fcwConvInStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwConvInStatus.setStatus("mandatory")


class _FcwConvInConvertedAddr_Type(OctetString):
    """Custom type fcwConvInConvertedAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FcwConvInConvertedAddr_Type.__name__ = "OctetString"
_FcwConvInConvertedAddr_Object = MibTableColumn
fcwConvInConvertedAddr = _FcwConvInConvertedAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 1, 1, 3),
    _FcwConvInConvertedAddr_Type()
)
fcwConvInConvertedAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwConvInConvertedAddr.setStatus("mandatory")


class _FcwConvInOrderNum_Type(Integer32):
    """Custom type fcwConvInOrderNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FcwConvInOrderNum_Type.__name__ = "Integer32"
_FcwConvInOrderNum_Object = MibTableColumn
fcwConvInOrderNum = _FcwConvInOrderNum_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 1, 1, 4),
    _FcwConvInOrderNum_Type()
)
fcwConvInOrderNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwConvInOrderNum.setStatus("mandatory")
_FcwAddrConvOutgoingCallTable_Object = MibTable
fcwAddrConvOutgoingCallTable = _FcwAddrConvOutgoingCallTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 2)
)
if mibBuilder.loadTexts:
    fcwAddrConvOutgoingCallTable.setStatus("mandatory")
_FcwAddrConvOutgoingCallEntry_Object = MibTableRow
fcwAddrConvOutgoingCallEntry = _FcwAddrConvOutgoingCallEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 2, 1)
)
fcwAddrConvOutgoingCallEntry.setIndexNames(
    (0, "PCE-MIB", "fcwConvOutExternalAddr"),
)
if mibBuilder.loadTexts:
    fcwAddrConvOutgoingCallEntry.setStatus("mandatory")


class _FcwConvOutExternalAddr_Type(OctetString):
    """Custom type fcwConvOutExternalAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FcwConvOutExternalAddr_Type.__name__ = "OctetString"
_FcwConvOutExternalAddr_Object = MibTableColumn
fcwConvOutExternalAddr = _FcwConvOutExternalAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 2, 1, 1),
    _FcwConvOutExternalAddr_Type()
)
fcwConvOutExternalAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwConvOutExternalAddr.setStatus("mandatory")


class _FcwConvOutStatus_Type(Integer32):
    """Custom type fcwConvOutStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcwConvOutStatus_Type.__name__ = "Integer32"
_FcwConvOutStatus_Object = MibTableColumn
fcwConvOutStatus = _FcwConvOutStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 2, 1, 2),
    _FcwConvOutStatus_Type()
)
fcwConvOutStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwConvOutStatus.setStatus("mandatory")


class _FcwConvOutConvertedAddr_Type(OctetString):
    """Custom type fcwConvOutConvertedAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FcwConvOutConvertedAddr_Type.__name__ = "OctetString"
_FcwConvOutConvertedAddr_Object = MibTableColumn
fcwConvOutConvertedAddr = _FcwConvOutConvertedAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 2, 1, 3),
    _FcwConvOutConvertedAddr_Type()
)
fcwConvOutConvertedAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwConvOutConvertedAddr.setStatus("mandatory")


class _FcwConvOutOrderNum_Type(Integer32):
    """Custom type fcwConvOutOrderNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FcwConvOutOrderNum_Type.__name__ = "Integer32"
_FcwConvOutOrderNum_Object = MibTableColumn
fcwConvOutOrderNum = _FcwConvOutOrderNum_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 2, 1, 4),
    _FcwConvOutOrderNum_Type()
)
fcwConvOutOrderNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwConvOutOrderNum.setStatus("mandatory")
_FcwAddrConvMultiCriterionInCallTable_Object = MibTable
fcwAddrConvMultiCriterionInCallTable = _FcwAddrConvMultiCriterionInCallTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 3)
)
if mibBuilder.loadTexts:
    fcwAddrConvMultiCriterionInCallTable.setStatus("mandatory")
_FcwAddrConvMultiCriterionInCallEntry_Object = MibTableRow
fcwAddrConvMultiCriterionInCallEntry = _FcwAddrConvMultiCriterionInCallEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 3, 1)
)
fcwAddrConvMultiCriterionInCallEntry.setIndexNames(
    (0, "PCE-MIB", "fcwConvMultiInConvID"),
    (0, "PCE-MIB", "fcwConvMultiInExternalAddr"),
)
if mibBuilder.loadTexts:
    fcwAddrConvMultiCriterionInCallEntry.setStatus("mandatory")


class _FcwConvMultiInConvID_Type(OctetString):
    """Custom type fcwConvMultiInConvID based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FcwConvMultiInConvID_Type.__name__ = "OctetString"
_FcwConvMultiInConvID_Object = MibTableColumn
fcwConvMultiInConvID = _FcwConvMultiInConvID_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 3, 1, 1),
    _FcwConvMultiInConvID_Type()
)
fcwConvMultiInConvID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwConvMultiInConvID.setStatus("mandatory")


class _FcwConvMultiInExternalAddr_Type(OctetString):
    """Custom type fcwConvMultiInExternalAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_FcwConvMultiInExternalAddr_Type.__name__ = "OctetString"
_FcwConvMultiInExternalAddr_Object = MibTableColumn
fcwConvMultiInExternalAddr = _FcwConvMultiInExternalAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 3, 1, 2),
    _FcwConvMultiInExternalAddr_Type()
)
fcwConvMultiInExternalAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwConvMultiInExternalAddr.setStatus("mandatory")


class _FcwConvMultiInStatus_Type(Integer32):
    """Custom type fcwConvMultiInStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcwConvMultiInStatus_Type.__name__ = "Integer32"
_FcwConvMultiInStatus_Object = MibTableColumn
fcwConvMultiInStatus = _FcwConvMultiInStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 3, 1, 3),
    _FcwConvMultiInStatus_Type()
)
fcwConvMultiInStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwConvMultiInStatus.setStatus("mandatory")


class _FcwConvMultiInConvertedAddr_Type(OctetString):
    """Custom type fcwConvMultiInConvertedAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_FcwConvMultiInConvertedAddr_Type.__name__ = "OctetString"
_FcwConvMultiInConvertedAddr_Object = MibTableColumn
fcwConvMultiInConvertedAddr = _FcwConvMultiInConvertedAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 3, 1, 4),
    _FcwConvMultiInConvertedAddr_Type()
)
fcwConvMultiInConvertedAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwConvMultiInConvertedAddr.setStatus("mandatory")


class _FcwConvMultiInOrderNum_Type(Integer32):
    """Custom type fcwConvMultiInOrderNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FcwConvMultiInOrderNum_Type.__name__ = "Integer32"
_FcwConvMultiInOrderNum_Object = MibTableColumn
fcwConvMultiInOrderNum = _FcwConvMultiInOrderNum_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 3, 1, 5),
    _FcwConvMultiInOrderNum_Type()
)
fcwConvMultiInOrderNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwConvMultiInOrderNum.setStatus("mandatory")
_FcwAddrConvMultiCriterionOutCallTable_Object = MibTable
fcwAddrConvMultiCriterionOutCallTable = _FcwAddrConvMultiCriterionOutCallTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 4)
)
if mibBuilder.loadTexts:
    fcwAddrConvMultiCriterionOutCallTable.setStatus("mandatory")
_FcwAddrConvMultiCriterionOutCallEntry_Object = MibTableRow
fcwAddrConvMultiCriterionOutCallEntry = _FcwAddrConvMultiCriterionOutCallEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 4, 1)
)
fcwAddrConvMultiCriterionOutCallEntry.setIndexNames(
    (0, "PCE-MIB", "fcwConvMultiOutConvID"),
    (0, "PCE-MIB", "fcwConvMultiOutExternalAddr"),
)
if mibBuilder.loadTexts:
    fcwAddrConvMultiCriterionOutCallEntry.setStatus("mandatory")


class _FcwConvMultiOutConvID_Type(OctetString):
    """Custom type fcwConvMultiOutConvID based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FcwConvMultiOutConvID_Type.__name__ = "OctetString"
_FcwConvMultiOutConvID_Object = MibTableColumn
fcwConvMultiOutConvID = _FcwConvMultiOutConvID_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 4, 1, 1),
    _FcwConvMultiOutConvID_Type()
)
fcwConvMultiOutConvID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwConvMultiOutConvID.setStatus("mandatory")


class _FcwConvMultiOutExternalAddr_Type(OctetString):
    """Custom type fcwConvMultiOutExternalAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_FcwConvMultiOutExternalAddr_Type.__name__ = "OctetString"
_FcwConvMultiOutExternalAddr_Object = MibTableColumn
fcwConvMultiOutExternalAddr = _FcwConvMultiOutExternalAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 4, 1, 2),
    _FcwConvMultiOutExternalAddr_Type()
)
fcwConvMultiOutExternalAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwConvMultiOutExternalAddr.setStatus("mandatory")


class _FcwConvMultiOutStatus_Type(Integer32):
    """Custom type fcwConvMultiOutStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcwConvMultiOutStatus_Type.__name__ = "Integer32"
_FcwConvMultiOutStatus_Object = MibTableColumn
fcwConvMultiOutStatus = _FcwConvMultiOutStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 4, 1, 3),
    _FcwConvMultiOutStatus_Type()
)
fcwConvMultiOutStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwConvMultiOutStatus.setStatus("mandatory")


class _FcwConvMultiOutConvertedAddr_Type(OctetString):
    """Custom type fcwConvMultiOutConvertedAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_FcwConvMultiOutConvertedAddr_Type.__name__ = "OctetString"
_FcwConvMultiOutConvertedAddr_Object = MibTableColumn
fcwConvMultiOutConvertedAddr = _FcwConvMultiOutConvertedAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 4, 1, 4),
    _FcwConvMultiOutConvertedAddr_Type()
)
fcwConvMultiOutConvertedAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwConvMultiOutConvertedAddr.setStatus("mandatory")


class _FcwConvMultiOutOrderNum_Type(Integer32):
    """Custom type fcwConvMultiOutOrderNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FcwConvMultiOutOrderNum_Type.__name__ = "Integer32"
_FcwConvMultiOutOrderNum_Object = MibTableColumn
fcwConvMultiOutOrderNum = _FcwConvMultiOutOrderNum_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 4, 1, 5),
    _FcwConvMultiOutOrderNum_Type()
)
fcwConvMultiOutOrderNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwConvMultiOutOrderNum.setStatus("mandatory")
_FcwAddrConvCondOutgoingCallTable_Object = MibTable
fcwAddrConvCondOutgoingCallTable = _FcwAddrConvCondOutgoingCallTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 5)
)
if mibBuilder.loadTexts:
    fcwAddrConvCondOutgoingCallTable.setStatus("mandatory")
_FcwAddrConvCondOutgoingCallEntry_Object = MibTableRow
fcwAddrConvCondOutgoingCallEntry = _FcwAddrConvCondOutgoingCallEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 5, 1)
)
fcwAddrConvCondOutgoingCallEntry.setIndexNames(
    (0, "PCE-MIB", "fcwConvCondOutExternalAddr"),
    (0, "PCE-MIB", "fcwConvCondOutTryOn"),
)
if mibBuilder.loadTexts:
    fcwAddrConvCondOutgoingCallEntry.setStatus("mandatory")


class _FcwConvCondOutExternalAddr_Type(OctetString):
    """Custom type fcwConvCondOutExternalAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_FcwConvCondOutExternalAddr_Type.__name__ = "OctetString"
_FcwConvCondOutExternalAddr_Object = MibTableColumn
fcwConvCondOutExternalAddr = _FcwConvCondOutExternalAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 5, 1, 1),
    _FcwConvCondOutExternalAddr_Type()
)
fcwConvCondOutExternalAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwConvCondOutExternalAddr.setStatus("mandatory")


class _FcwConvCondOutTryOn_Type(Integer32):
    """Custom type fcwConvCondOutTryOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("all", 3),
          ("backup", 2),
          ("normalClear1", 1))
    )


_FcwConvCondOutTryOn_Type.__name__ = "Integer32"
_FcwConvCondOutTryOn_Object = MibTableColumn
fcwConvCondOutTryOn = _FcwConvCondOutTryOn_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 5, 1, 2),
    _FcwConvCondOutTryOn_Type()
)
fcwConvCondOutTryOn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwConvCondOutTryOn.setStatus("mandatory")


class _FcwConvCondOutStatus_Type(Integer32):
    """Custom type fcwConvCondOutStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcwConvCondOutStatus_Type.__name__ = "Integer32"
_FcwConvCondOutStatus_Object = MibTableColumn
fcwConvCondOutStatus = _FcwConvCondOutStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 5, 1, 3),
    _FcwConvCondOutStatus_Type()
)
fcwConvCondOutStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwConvCondOutStatus.setStatus("mandatory")


class _FcwConvCondOutConvertedAddr_Type(OctetString):
    """Custom type fcwConvCondOutConvertedAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_FcwConvCondOutConvertedAddr_Type.__name__ = "OctetString"
_FcwConvCondOutConvertedAddr_Object = MibTableColumn
fcwConvCondOutConvertedAddr = _FcwConvCondOutConvertedAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 5, 1, 4),
    _FcwConvCondOutConvertedAddr_Type()
)
fcwConvCondOutConvertedAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwConvCondOutConvertedAddr.setStatus("mandatory")
_FcwRouteTable_Object = MibTable
fcwRouteTable = _FcwRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 50)
)
if mibBuilder.loadTexts:
    fcwRouteTable.setStatus("mandatory")
_FcwRouteEntry_Object = MibTableRow
fcwRouteEntry = _FcwRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 50, 1)
)
fcwRouteEntry.setIndexNames(
    (0, "PCE-MIB", "fcwRoutRouteId"),
    (0, "PCE-MIB", "fcwRoutLogPortId"),
    (0, "PCE-MIB", "fcwRoutChannelId"),
)
if mibBuilder.loadTexts:
    fcwRouteEntry.setStatus("mandatory")


class _FcwRoutRouteId_Type(Integer32):
    """Custom type fcwRoutRouteId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FcwRoutRouteId_Type.__name__ = "Integer32"
_FcwRoutRouteId_Object = MibTableColumn
fcwRoutRouteId = _FcwRoutRouteId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 50, 1, 1),
    _FcwRoutRouteId_Type()
)
fcwRoutRouteId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwRoutRouteId.setStatus("mandatory")


class _FcwRoutLogPortId_Type(Integer32):
    """Custom type fcwRoutLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FcwRoutLogPortId_Type.__name__ = "Integer32"
_FcwRoutLogPortId_Object = MibTableColumn
fcwRoutLogPortId = _FcwRoutLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 50, 1, 2),
    _FcwRoutLogPortId_Type()
)
fcwRoutLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwRoutLogPortId.setStatus("mandatory")


class _FcwRoutChannelId_Type(Integer32):
    """Custom type fcwRoutChannelId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1023),
    )


_FcwRoutChannelId_Type.__name__ = "Integer32"
_FcwRoutChannelId_Object = MibTableColumn
fcwRoutChannelId = _FcwRoutChannelId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 50, 1, 3),
    _FcwRoutChannelId_Type()
)
fcwRoutChannelId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwRoutChannelId.setStatus("mandatory")


class _FcwRoutStatus_Type(Integer32):
    """Custom type fcwRoutStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcwRoutStatus_Type.__name__ = "Integer32"
_FcwRoutStatus_Object = MibTableColumn
fcwRoutStatus = _FcwRoutStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 50, 1, 4),
    _FcwRoutStatus_Type()
)
fcwRoutStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwRoutStatus.setStatus("mandatory")


class _FcwRoutType_Type(Integer32):
    """Custom type fcwRoutType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("backup1", 3),
          ("backup2", 4),
          ("backup3", 5),
          ("backup4", 6),
          ("backup5", 7),
          ("backupDynamic", 9),
          ("dynamic", 8),
          ("normal", 1),
          ("normalClear1", 10),
          ("normalPriorityModule", 2))
    )


_FcwRoutType_Type.__name__ = "Integer32"
_FcwRoutType_Object = MibTableColumn
fcwRoutType = _FcwRoutType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 50, 1, 5),
    _FcwRoutType_Type()
)
fcwRoutType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwRoutType.setStatus("mandatory")
_FcwDnicRoutingTable_Object = MibTable
fcwDnicRoutingTable = _FcwDnicRoutingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 60)
)
if mibBuilder.loadTexts:
    fcwDnicRoutingTable.setStatus("mandatory")
_FcwDnicRoutingEntry_Object = MibTableRow
fcwDnicRoutingEntry = _FcwDnicRoutingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 60, 1)
)
fcwDnicRoutingEntry.setIndexNames(
    (0, "PCE-MIB", "fcwDnicDataNetworkIdentifierCode"),
    (0, "PCE-MIB", "fcwDnicRouteId"),
)
if mibBuilder.loadTexts:
    fcwDnicRoutingEntry.setStatus("mandatory")


class _FcwDnicDataNetworkIdentifierCode_Type(OctetString):
    """Custom type fcwDnicDataNetworkIdentifierCode based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_FcwDnicDataNetworkIdentifierCode_Type.__name__ = "OctetString"
_FcwDnicDataNetworkIdentifierCode_Object = MibTableColumn
fcwDnicDataNetworkIdentifierCode = _FcwDnicDataNetworkIdentifierCode_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 60, 1, 1),
    _FcwDnicDataNetworkIdentifierCode_Type()
)
fcwDnicDataNetworkIdentifierCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwDnicDataNetworkIdentifierCode.setStatus("mandatory")


class _FcwDnicRouteId_Type(Integer32):
    """Custom type fcwDnicRouteId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FcwDnicRouteId_Type.__name__ = "Integer32"
_FcwDnicRouteId_Object = MibTableColumn
fcwDnicRouteId = _FcwDnicRouteId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 60, 1, 2),
    _FcwDnicRouteId_Type()
)
fcwDnicRouteId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwDnicRouteId.setStatus("mandatory")


class _FcwDnicStatus_Type(Integer32):
    """Custom type fcwDnicStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcwDnicStatus_Type.__name__ = "Integer32"
_FcwDnicStatus_Object = MibTableColumn
fcwDnicStatus = _FcwDnicStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 60, 1, 3),
    _FcwDnicStatus_Type()
)
fcwDnicStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwDnicStatus.setStatus("mandatory")
_FcwZoRoutingTable_Object = MibTable
fcwZoRoutingTable = _FcwZoRoutingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 61)
)
if mibBuilder.loadTexts:
    fcwZoRoutingTable.setStatus("mandatory")
_FcwZoRoutingEntry_Object = MibTableRow
fcwZoRoutingEntry = _FcwZoRoutingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 61, 1)
)
fcwZoRoutingEntry.setIndexNames(
    (0, "PCE-MIB", "fcwZoZone"),
    (0, "PCE-MIB", "fcwZoRouteId"),
)
if mibBuilder.loadTexts:
    fcwZoRoutingEntry.setStatus("mandatory")


class _FcwZoZone_Type(OctetString):
    """Custom type fcwZoZone based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FcwZoZone_Type.__name__ = "OctetString"
_FcwZoZone_Object = MibTableColumn
fcwZoZone = _FcwZoZone_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 61, 1, 1),
    _FcwZoZone_Type()
)
fcwZoZone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwZoZone.setStatus("mandatory")


class _FcwZoRouteId_Type(Integer32):
    """Custom type fcwZoRouteId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FcwZoRouteId_Type.__name__ = "Integer32"
_FcwZoRouteId_Object = MibTableColumn
fcwZoRouteId = _FcwZoRouteId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 61, 1, 2),
    _FcwZoRouteId_Type()
)
fcwZoRouteId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwZoRouteId.setStatus("mandatory")


class _FcwZoStatus_Type(Integer32):
    """Custom type fcwZoStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcwZoStatus_Type.__name__ = "Integer32"
_FcwZoStatus_Object = MibTableColumn
fcwZoStatus = _FcwZoStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 61, 1, 3),
    _FcwZoStatus_Type()
)
fcwZoStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwZoStatus.setStatus("mandatory")
_FcwSbRoutingTable_Object = MibTable
fcwSbRoutingTable = _FcwSbRoutingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 62)
)
if mibBuilder.loadTexts:
    fcwSbRoutingTable.setStatus("mandatory")
_FcwSbRoutingEntry_Object = MibTableRow
fcwSbRoutingEntry = _FcwSbRoutingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 62, 1)
)
fcwSbRoutingEntry.setIndexNames(
    (0, "PCE-MIB", "fcwSbSubscriberNumber"),
    (0, "PCE-MIB", "fcwSbRouteId"),
)
if mibBuilder.loadTexts:
    fcwSbRoutingEntry.setStatus("mandatory")


class _FcwSbSubscriberNumber_Type(OctetString):
    """Custom type fcwSbSubscriberNumber based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FcwSbSubscriberNumber_Type.__name__ = "OctetString"
_FcwSbSubscriberNumber_Object = MibTableColumn
fcwSbSubscriberNumber = _FcwSbSubscriberNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 62, 1, 1),
    _FcwSbSubscriberNumber_Type()
)
fcwSbSubscriberNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwSbSubscriberNumber.setStatus("mandatory")


class _FcwSbRouteId_Type(Integer32):
    """Custom type fcwSbRouteId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FcwSbRouteId_Type.__name__ = "Integer32"
_FcwSbRouteId_Object = MibTableColumn
fcwSbRouteId = _FcwSbRouteId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 62, 1, 2),
    _FcwSbRouteId_Type()
)
fcwSbRouteId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwSbRouteId.setStatus("mandatory")


class _FcwSbStatus_Type(Integer32):
    """Custom type fcwSbStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcwSbStatus_Type.__name__ = "Integer32"
_FcwSbStatus_Object = MibTableColumn
fcwSbStatus = _FcwSbStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 62, 1, 3),
    _FcwSbStatus_Type()
)
fcwSbStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSbStatus.setStatus("mandatory")
_FcwServices_ObjectIdentity = ObjectIdentity
fcwServices = _FcwServices_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70)
)
_FcwSerCompression_ObjectIdentity = ObjectIdentity
fcwSerCompression = _FcwSerCompression_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 1)
)


class _FcwSCompModule0CompressedVcCount_Type(Integer32):
    """Custom type fcwSCompModule0CompressedVcCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048),
    )


_FcwSCompModule0CompressedVcCount_Type.__name__ = "Integer32"
_FcwSCompModule0CompressedVcCount_Object = MibScalar
fcwSCompModule0CompressedVcCount = _FcwSCompModule0CompressedVcCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 1, 1),
    _FcwSCompModule0CompressedVcCount_Type()
)
fcwSCompModule0CompressedVcCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSCompModule0CompressedVcCount.setStatus("mandatory")


class _FcwSCompModule1CompressedVcCount_Type(Integer32):
    """Custom type fcwSCompModule1CompressedVcCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048),
    )


_FcwSCompModule1CompressedVcCount_Type.__name__ = "Integer32"
_FcwSCompModule1CompressedVcCount_Object = MibScalar
fcwSCompModule1CompressedVcCount = _FcwSCompModule1CompressedVcCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 1, 2),
    _FcwSCompModule1CompressedVcCount_Type()
)
fcwSCompModule1CompressedVcCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSCompModule1CompressedVcCount.setStatus("mandatory")


class _FcwSCompModule2CompressedVcCount_Type(Integer32):
    """Custom type fcwSCompModule2CompressedVcCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048),
    )


_FcwSCompModule2CompressedVcCount_Type.__name__ = "Integer32"
_FcwSCompModule2CompressedVcCount_Object = MibScalar
fcwSCompModule2CompressedVcCount = _FcwSCompModule2CompressedVcCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 1, 3),
    _FcwSCompModule2CompressedVcCount_Type()
)
fcwSCompModule2CompressedVcCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSCompModule2CompressedVcCount.setStatus("mandatory")


class _FcwSCompAlgorithmSelection_Type(Integer32):
    """Custom type fcwSCompAlgorithmSelection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("v10Compatible", 3),
          ("v9Compatible", 2))
    )


_FcwSCompAlgorithmSelection_Type.__name__ = "Integer32"
_FcwSCompAlgorithmSelection_Object = MibScalar
fcwSCompAlgorithmSelection = _FcwSCompAlgorithmSelection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 1, 4),
    _FcwSCompAlgorithmSelection_Type()
)
fcwSCompAlgorithmSelection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSCompAlgorithmSelection.setStatus("mandatory")
_FcwSerReliableVirtualCircuits_ObjectIdentity = ObjectIdentity
fcwSerReliableVirtualCircuits = _FcwSerReliableVirtualCircuits_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2)
)


class _FcwSRvcReliableVcCount_Type(Integer32):
    """Custom type fcwSRvcReliableVcCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FcwSRvcReliableVcCount_Type.__name__ = "Integer32"
_FcwSRvcReliableVcCount_Object = MibScalar
fcwSRvcReliableVcCount = _FcwSRvcReliableVcCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 1),
    _FcwSRvcReliableVcCount_Type()
)
fcwSRvcReliableVcCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSRvcReliableVcCount.setStatus("mandatory")


class _FcwSRvcFirstDataPacketTimer_Type(Integer32):
    """Custom type fcwSRvcFirstDataPacketTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_FcwSRvcFirstDataPacketTimer_Type.__name__ = "Integer32"
_FcwSRvcFirstDataPacketTimer_Object = MibScalar
fcwSRvcFirstDataPacketTimer = _FcwSRvcFirstDataPacketTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 2),
    _FcwSRvcFirstDataPacketTimer_Type()
)
fcwSRvcFirstDataPacketTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSRvcFirstDataPacketTimer.setStatus("mandatory")


class _FcwSRvcRestoreOutgoingCallRetryCount_Type(Integer32):
    """Custom type fcwSRvcRestoreOutgoingCallRetryCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_FcwSRvcRestoreOutgoingCallRetryCount_Type.__name__ = "Integer32"
_FcwSRvcRestoreOutgoingCallRetryCount_Object = MibScalar
fcwSRvcRestoreOutgoingCallRetryCount = _FcwSRvcRestoreOutgoingCallRetryCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 3),
    _FcwSRvcRestoreOutgoingCallRetryCount_Type()
)
fcwSRvcRestoreOutgoingCallRetryCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSRvcRestoreOutgoingCallRetryCount.setStatus("mandatory")


class _FcwSRvcRestoreMinimumRecallTimer_Type(Integer32):
    """Custom type fcwSRvcRestoreMinimumRecallTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_FcwSRvcRestoreMinimumRecallTimer_Type.__name__ = "Integer32"
_FcwSRvcRestoreMinimumRecallTimer_Object = MibScalar
fcwSRvcRestoreMinimumRecallTimer = _FcwSRvcRestoreMinimumRecallTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 4),
    _FcwSRvcRestoreMinimumRecallTimer_Type()
)
fcwSRvcRestoreMinimumRecallTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSRvcRestoreMinimumRecallTimer.setStatus("mandatory")


class _FcwSRvcRestoreIncomingCallTimer_Type(Integer32):
    """Custom type fcwSRvcRestoreIncomingCallTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 2540),
    )


_FcwSRvcRestoreIncomingCallTimer_Type.__name__ = "Integer32"
_FcwSRvcRestoreIncomingCallTimer_Object = MibScalar
fcwSRvcRestoreIncomingCallTimer = _FcwSRvcRestoreIncomingCallTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 5),
    _FcwSRvcRestoreIncomingCallTimer_Type()
)
fcwSRvcRestoreIncomingCallTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSRvcRestoreIncomingCallTimer.setStatus("mandatory")


class _FcwSRvcRestoreOutgoingCallDelay_Type(Integer32):
    """Custom type fcwSRvcRestoreOutgoingCallDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 2540),
    )


_FcwSRvcRestoreOutgoingCallDelay_Type.__name__ = "Integer32"
_FcwSRvcRestoreOutgoingCallDelay_Object = MibScalar
fcwSRvcRestoreOutgoingCallDelay = _FcwSRvcRestoreOutgoingCallDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 6),
    _FcwSRvcRestoreOutgoingCallDelay_Type()
)
fcwSRvcRestoreOutgoingCallDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSRvcRestoreOutgoingCallDelay.setStatus("mandatory")


class _FcwSRvcKWindowSize_Type(Integer32):
    """Custom type fcwSRvcKWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 127),
    )


_FcwSRvcKWindowSize_Type.__name__ = "Integer32"
_FcwSRvcKWindowSize_Object = MibScalar
fcwSRvcKWindowSize = _FcwSRvcKWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 7),
    _FcwSRvcKWindowSize_Type()
)
fcwSRvcKWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSRvcKWindowSize.setStatus("mandatory")


class _FcwSRvcFastSelectUse_Type(Integer32):
    """Custom type fcwSRvcFastSelectUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcwSRvcFastSelectUse_Type.__name__ = "Integer32"
_FcwSRvcFastSelectUse_Object = MibScalar
fcwSRvcFastSelectUse = _FcwSRvcFastSelectUse_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 8),
    _FcwSRvcFastSelectUse_Type()
)
fcwSRvcFastSelectUse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSRvcFastSelectUse.setStatus("mandatory")


class _FcwSRvcOutputMarkers_Type(Integer32):
    """Custom type fcwSRvcOutputMarkers based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("check", 2),
          ("noCheck", 1),
          ("remove", 3))
    )


_FcwSRvcOutputMarkers_Type.__name__ = "Integer32"
_FcwSRvcOutputMarkers_Object = MibScalar
fcwSRvcOutputMarkers = _FcwSRvcOutputMarkers_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 9),
    _FcwSRvcOutputMarkers_Type()
)
fcwSRvcOutputMarkers.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSRvcOutputMarkers.setStatus("mandatory")


class _FcwSRvcConversionAimedPoint_Type(Integer32):
    """Custom type fcwSRvcConversionAimedPoint based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcwSRvcConversionAimedPoint_Type.__name__ = "Integer32"
_FcwSRvcConversionAimedPoint_Object = MibScalar
fcwSRvcConversionAimedPoint = _FcwSRvcConversionAimedPoint_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 10),
    _FcwSRvcConversionAimedPoint_Type()
)
fcwSRvcConversionAimedPoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSRvcConversionAimedPoint.setStatus("mandatory")


class _FcwSRvcConversionIncomingCall_Type(Integer32):
    """Custom type fcwSRvcConversionIncomingCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("calledAddress", 3),
          ("callingAddress", 2),
          ("callingAddressAndCalledAddress", 4),
          ("off", 1))
    )


_FcwSRvcConversionIncomingCall_Type.__name__ = "Integer32"
_FcwSRvcConversionIncomingCall_Object = MibScalar
fcwSRvcConversionIncomingCall = _FcwSRvcConversionIncomingCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 11),
    _FcwSRvcConversionIncomingCall_Type()
)
fcwSRvcConversionIncomingCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSRvcConversionIncomingCall.setStatus("mandatory")


class _FcwSRvcConversionOutgoingCall_Type(Integer32):
    """Custom type fcwSRvcConversionOutgoingCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("calledAddress", 3),
          ("callingAddress", 2),
          ("callingAddressAndCalledAddress", 4),
          ("off", 1))
    )


_FcwSRvcConversionOutgoingCall_Type.__name__ = "Integer32"
_FcwSRvcConversionOutgoingCall_Object = MibScalar
fcwSRvcConversionOutgoingCall = _FcwSRvcConversionOutgoingCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 12),
    _FcwSRvcConversionOutgoingCall_Type()
)
fcwSRvcConversionOutgoingCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSRvcConversionOutgoingCall.setStatus("mandatory")


class _FcwSRvcConversionAddressCheck_Type(Integer32):
    """Custom type fcwSRvcConversionAddressCheck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onIncomingCall", 2),
          ("onIncomingCallAndOutgoingCall", 4),
          ("onOutgoingCall", 3))
    )


_FcwSRvcConversionAddressCheck_Type.__name__ = "Integer32"
_FcwSRvcConversionAddressCheck_Object = MibScalar
fcwSRvcConversionAddressCheck = _FcwSRvcConversionAddressCheck_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 13),
    _FcwSRvcConversionAddressCheck_Type()
)
fcwSRvcConversionAddressCheck.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSRvcConversionAddressCheck.setStatus("mandatory")
_FcwSerReselectionX29_ObjectIdentity = ObjectIdentity
fcwSerReselectionX29 = _FcwSerReselectionX29_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 3)
)


class _FcwSResLogChannelCount_Type(Integer32):
    """Custom type fcwSResLogChannelCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FcwSResLogChannelCount_Type.__name__ = "Integer32"
_FcwSResLogChannelCount_Object = MibScalar
fcwSResLogChannelCount = _FcwSResLogChannelCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 3, 1),
    _FcwSResLogChannelCount_Type()
)
fcwSResLogChannelCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSResLogChannelCount.setStatus("mandatory")


class _FcwSResProtocolIdentifierTransmission_Type(Integer32):
    """Custom type fcwSResProtocolIdentifierTransmission based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcwSResProtocolIdentifierTransmission_Type.__name__ = "Integer32"
_FcwSResProtocolIdentifierTransmission_Object = MibScalar
fcwSResProtocolIdentifierTransmission = _FcwSResProtocolIdentifierTransmission_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 3, 2),
    _FcwSResProtocolIdentifierTransmission_Type()
)
fcwSResProtocolIdentifierTransmission.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSResProtocolIdentifierTransmission.setStatus("mandatory")


class _FcwSResConversionAimedPoint_Type(Integer32):
    """Custom type fcwSResConversionAimedPoint based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcwSResConversionAimedPoint_Type.__name__ = "Integer32"
_FcwSResConversionAimedPoint_Object = MibScalar
fcwSResConversionAimedPoint = _FcwSResConversionAimedPoint_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 3, 10),
    _FcwSResConversionAimedPoint_Type()
)
fcwSResConversionAimedPoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSResConversionAimedPoint.setStatus("mandatory")


class _FcwSResConversionIncomingCall_Type(Integer32):
    """Custom type fcwSResConversionIncomingCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("calledAddress", 3),
          ("callingAddress", 2),
          ("callingAddressAndCalledAddress", 4),
          ("off", 1))
    )


_FcwSResConversionIncomingCall_Type.__name__ = "Integer32"
_FcwSResConversionIncomingCall_Object = MibScalar
fcwSResConversionIncomingCall = _FcwSResConversionIncomingCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 3, 11),
    _FcwSResConversionIncomingCall_Type()
)
fcwSResConversionIncomingCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSResConversionIncomingCall.setStatus("mandatory")


class _FcwSResConversionOutgoingCall_Type(Integer32):
    """Custom type fcwSResConversionOutgoingCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("calledAddress", 3),
          ("callingAddress", 2),
          ("callingAddressAndCalledAddress", 4),
          ("off", 1))
    )


_FcwSResConversionOutgoingCall_Type.__name__ = "Integer32"
_FcwSResConversionOutgoingCall_Object = MibScalar
fcwSResConversionOutgoingCall = _FcwSResConversionOutgoingCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 3, 12),
    _FcwSResConversionOutgoingCall_Type()
)
fcwSResConversionOutgoingCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSResConversionOutgoingCall.setStatus("mandatory")


class _FcwSResConversionAddressCheck_Type(Integer32):
    """Custom type fcwSResConversionAddressCheck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onIncomingCall", 2),
          ("onIncomingCallAndOutgoingCall", 4),
          ("onOutgoingCall", 3))
    )


_FcwSResConversionAddressCheck_Type.__name__ = "Integer32"
_FcwSResConversionAddressCheck_Object = MibScalar
fcwSResConversionAddressCheck = _FcwSResConversionAddressCheck_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 3, 13),
    _FcwSResConversionAddressCheck_Type()
)
fcwSResConversionAddressCheck.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSResConversionAddressCheck.setStatus("mandatory")
_FcwSerDynamicRouting_ObjectIdentity = ObjectIdentity
fcwSerDynamicRouting = _FcwSerDynamicRouting_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 4)
)


class _FcwSDynDynamicRouting_Type(Integer32):
    """Custom type fcwSDynDynamicRouting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 3))
    )


_FcwSDynDynamicRouting_Type.__name__ = "Integer32"
_FcwSDynDynamicRouting_Object = MibScalar
fcwSDynDynamicRouting = _FcwSDynDynamicRouting_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 4, 1),
    _FcwSDynDynamicRouting_Type()
)
fcwSDynDynamicRouting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSDynDynamicRouting.setStatus("mandatory")


class _FcwSDynPassword_Type(DisplayString):
    """Custom type fcwSDynPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_FcwSDynPassword_Type.__name__ = "DisplayString"
_FcwSDynPassword_Object = MibScalar
fcwSDynPassword = _FcwSDynPassword_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 4, 2),
    _FcwSDynPassword_Type()
)
fcwSDynPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSDynPassword.setStatus("mandatory")


class _FcwSDynNeighborMaxCount_Type(Integer32):
    """Custom type fcwSDynNeighborMaxCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 250),
    )


_FcwSDynNeighborMaxCount_Type.__name__ = "Integer32"
_FcwSDynNeighborMaxCount_Object = MibScalar
fcwSDynNeighborMaxCount = _FcwSDynNeighborMaxCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 4, 3),
    _FcwSDynNeighborMaxCount_Type()
)
fcwSDynNeighborMaxCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSDynNeighborMaxCount.setStatus("mandatory")


class _FcwSDynLspAgingTimer_Type(Integer32):
    """Custom type fcwSDynLspAgingTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 2500),
    )


_FcwSDynLspAgingTimer_Type.__name__ = "Integer32"
_FcwSDynLspAgingTimer_Object = MibScalar
fcwSDynLspAgingTimer = _FcwSDynLspAgingTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 4, 4),
    _FcwSDynLspAgingTimer_Type()
)
fcwSDynLspAgingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSDynLspAgingTimer.setStatus("mandatory")


class _FcwSDynLspRetransRequestTimer_Type(Integer32):
    """Custom type fcwSDynLspRetransRequestTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 2500),
    )


_FcwSDynLspRetransRequestTimer_Type.__name__ = "Integer32"
_FcwSDynLspRetransRequestTimer_Object = MibScalar
fcwSDynLspRetransRequestTimer = _FcwSDynLspRetransRequestTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 4, 5),
    _FcwSDynLspRetransRequestTimer_Type()
)
fcwSDynLspRetransRequestTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSDynLspRetransRequestTimer.setStatus("mandatory")


class _FcwSDynLspRetransmissionTimer_Type(Integer32):
    """Custom type fcwSDynLspRetransmissionTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 2500),
    )


_FcwSDynLspRetransmissionTimer_Type.__name__ = "Integer32"
_FcwSDynLspRetransmissionTimer_Object = MibScalar
fcwSDynLspRetransmissionTimer = _FcwSDynLspRetransmissionTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 4, 6),
    _FcwSDynLspRetransmissionTimer_Type()
)
fcwSDynLspRetransmissionTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSDynLspRetransmissionTimer.setStatus("mandatory")


class _FcwSDynRouteCalculationTimer_Type(Integer32):
    """Custom type fcwSDynRouteCalculationTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 2500),
    )


_FcwSDynRouteCalculationTimer_Type.__name__ = "Integer32"
_FcwSDynRouteCalculationTimer_Object = MibScalar
fcwSDynRouteCalculationTimer = _FcwSDynRouteCalculationTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 4, 7),
    _FcwSDynRouteCalculationTimer_Type()
)
fcwSDynRouteCalculationTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSDynRouteCalculationTimer.setStatus("mandatory")


class _FcwSDynRouteCalculLockingTimer_Type(Integer32):
    """Custom type fcwSDynRouteCalculLockingTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 2500),
    )


_FcwSDynRouteCalculLockingTimer_Type.__name__ = "Integer32"
_FcwSDynRouteCalculLockingTimer_Object = MibScalar
fcwSDynRouteCalculLockingTimer = _FcwSDynRouteCalculLockingTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 4, 8),
    _FcwSDynRouteCalculLockingTimer_Type()
)
fcwSDynRouteCalculLockingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSDynRouteCalculLockingTimer.setStatus("mandatory")
_FcwSerClearAnalysisTable_Object = MibTable
fcwSerClearAnalysisTable = _FcwSerClearAnalysisTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 5)
)
if mibBuilder.loadTexts:
    fcwSerClearAnalysisTable.setStatus("mandatory")
_FcwSerClearAnalysisEntry_Object = MibTableRow
fcwSerClearAnalysisEntry = _FcwSerClearAnalysisEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 5, 1)
)
fcwSerClearAnalysisEntry.setIndexNames(
    (0, "PCE-MIB", "fcwSClearAnalysId"),
)
if mibBuilder.loadTexts:
    fcwSerClearAnalysisEntry.setStatus("mandatory")


class _FcwSClearAnalysId_Type(Integer32):
    """Custom type fcwSClearAnalysId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 17),
    )


_FcwSClearAnalysId_Type.__name__ = "Integer32"
_FcwSClearAnalysId_Object = MibTableColumn
fcwSClearAnalysId = _FcwSClearAnalysId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 5, 1, 1),
    _FcwSClearAnalysId_Type()
)
fcwSClearAnalysId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwSClearAnalysId.setStatus("mandatory")


class _FcwSClearAnalysStatus_Type(Integer32):
    """Custom type fcwSClearAnalysStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcwSClearAnalysStatus_Type.__name__ = "Integer32"
_FcwSClearAnalysStatus_Object = MibTableColumn
fcwSClearAnalysStatus = _FcwSClearAnalysStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 5, 1, 2),
    _FcwSClearAnalysStatus_Type()
)
fcwSClearAnalysStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSClearAnalysStatus.setStatus("mandatory")


class _FcwSClearAnalysCause_Type(DisplayString):
    """Custom type fcwSClearAnalysCause based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 2),
    )


_FcwSClearAnalysCause_Type.__name__ = "DisplayString"
_FcwSClearAnalysCause_Object = MibTableColumn
fcwSClearAnalysCause = _FcwSClearAnalysCause_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 5, 1, 3),
    _FcwSClearAnalysCause_Type()
)
fcwSClearAnalysCause.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSClearAnalysCause.setStatus("mandatory")


class _FcwSClearAnalysDiag_Type(DisplayString):
    """Custom type fcwSClearAnalysDiag based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 2),
    )


_FcwSClearAnalysDiag_Type.__name__ = "DisplayString"
_FcwSClearAnalysDiag_Object = MibTableColumn
fcwSClearAnalysDiag = _FcwSClearAnalysDiag_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 5, 1, 4),
    _FcwSClearAnalysDiag_Type()
)
fcwSClearAnalysDiag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSClearAnalysDiag.setStatus("mandatory")
_FcwSerQOSX25_ObjectIdentity = ObjectIdentity
fcwSerQOSX25 = _FcwSerQOSX25_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10)
)
_FcwSQOSX25Table_Object = MibTable
fcwSQOSX25Table = _FcwSQOSX25Table_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 1)
)
if mibBuilder.loadTexts:
    fcwSQOSX25Table.setStatus("mandatory")
_FcwSQOSX25Entry_Object = MibTableRow
fcwSQOSX25Entry = _FcwSQOSX25Entry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 1, 1)
)
fcwSQOSX25Entry.setIndexNames(
    (0, "PCE-MIB", "fcwSQOSX25CalledAddress"),
    (0, "PCE-MIB", "fcwSQOSX25CallingAddress"),
    (0, "PCE-MIB", "fcwSQOSX25CUDProfileId"),
)
if mibBuilder.loadTexts:
    fcwSQOSX25Entry.setStatus("mandatory")


class _FcwSQOSX25CalledAddress_Type(OctetString):
    """Custom type fcwSQOSX25CalledAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FcwSQOSX25CalledAddress_Type.__name__ = "OctetString"
_FcwSQOSX25CalledAddress_Object = MibTableColumn
fcwSQOSX25CalledAddress = _FcwSQOSX25CalledAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 1, 1, 1),
    _FcwSQOSX25CalledAddress_Type()
)
fcwSQOSX25CalledAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwSQOSX25CalledAddress.setStatus("mandatory")


class _FcwSQOSX25CallingAddress_Type(OctetString):
    """Custom type fcwSQOSX25CallingAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FcwSQOSX25CallingAddress_Type.__name__ = "OctetString"
_FcwSQOSX25CallingAddress_Object = MibTableColumn
fcwSQOSX25CallingAddress = _FcwSQOSX25CallingAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 1, 1, 2),
    _FcwSQOSX25CallingAddress_Type()
)
fcwSQOSX25CallingAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwSQOSX25CallingAddress.setStatus("mandatory")


class _FcwSQOSX25CUDProfileId_Type(Integer32):
    """Custom type fcwSQOSX25CUDProfileId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_FcwSQOSX25CUDProfileId_Type.__name__ = "Integer32"
_FcwSQOSX25CUDProfileId_Object = MibTableColumn
fcwSQOSX25CUDProfileId = _FcwSQOSX25CUDProfileId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 1, 1, 3),
    _FcwSQOSX25CUDProfileId_Type()
)
fcwSQOSX25CUDProfileId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwSQOSX25CUDProfileId.setStatus("mandatory")


class _FcwSQOSX25Status_Type(Integer32):
    """Custom type fcwSQOSX25Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcwSQOSX25Status_Type.__name__ = "Integer32"
_FcwSQOSX25Status_Object = MibTableColumn
fcwSQOSX25Status = _FcwSQOSX25Status_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 1, 1, 4),
    _FcwSQOSX25Status_Type()
)
fcwSQOSX25Status.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSQOSX25Status.setStatus("mandatory")


class _FcwSQOSX25PriorityLevel_Type(Integer32):
    """Custom type fcwSQOSX25PriorityLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_FcwSQOSX25PriorityLevel_Type.__name__ = "Integer32"
_FcwSQOSX25PriorityLevel_Object = MibTableColumn
fcwSQOSX25PriorityLevel = _FcwSQOSX25PriorityLevel_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 1, 1, 5),
    _FcwSQOSX25PriorityLevel_Type()
)
fcwSQOSX25PriorityLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSQOSX25PriorityLevel.setStatus("mandatory")


class _FcwSQOSX25QOSProfileId_Type(Integer32):
    """Custom type fcwSQOSX25QOSProfileId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_FcwSQOSX25QOSProfileId_Type.__name__ = "Integer32"
_FcwSQOSX25QOSProfileId_Object = MibTableColumn
fcwSQOSX25QOSProfileId = _FcwSQOSX25QOSProfileId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 1, 1, 6),
    _FcwSQOSX25QOSProfileId_Type()
)
fcwSQOSX25QOSProfileId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSQOSX25QOSProfileId.setStatus("mandatory")


class _FcwSQOSX25Cos_Type(Integer32):
    """Custom type fcwSQOSX25Cos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ubr", 3),
          ("vbr", 1),
          ("vbr-rt", 2))
    )


_FcwSQOSX25Cos_Type.__name__ = "Integer32"
_FcwSQOSX25Cos_Object = MibTableColumn
fcwSQOSX25Cos = _FcwSQOSX25Cos_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 1, 1, 7),
    _FcwSQOSX25Cos_Type()
)
fcwSQOSX25Cos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSQOSX25Cos.setStatus("mandatory")


class _FcwSQOSX25TrafficManagementStrategy_Type(Integer32):
    """Custom type fcwSQOSX25TrafficManagementStrategy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("delayButNotDiscard-Bc", 3),
          ("delayButNotDiscard-BcBe", 4),
          ("discardButNotDelay", 1))
    )


_FcwSQOSX25TrafficManagementStrategy_Type.__name__ = "Integer32"
_FcwSQOSX25TrafficManagementStrategy_Object = MibTableColumn
fcwSQOSX25TrafficManagementStrategy = _FcwSQOSX25TrafficManagementStrategy_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 1, 1, 8),
    _FcwSQOSX25TrafficManagementStrategy_Type()
)
fcwSQOSX25TrafficManagementStrategy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSQOSX25TrafficManagementStrategy.setStatus("mandatory")
_FcwSCUDProfilesTable_Object = MibTable
fcwSCUDProfilesTable = _FcwSCUDProfilesTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 2)
)
if mibBuilder.loadTexts:
    fcwSCUDProfilesTable.setStatus("mandatory")
_FcwSCUDProfilesEntry_Object = MibTableRow
fcwSCUDProfilesEntry = _FcwSCUDProfilesEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 2, 1)
)
fcwSCUDProfilesEntry.setIndexNames(
    (0, "PCE-MIB", "fcwSCUDProfilesId"),
)
if mibBuilder.loadTexts:
    fcwSCUDProfilesEntry.setStatus("mandatory")


class _FcwSCUDProfilesId_Type(Integer32):
    """Custom type fcwSCUDProfilesId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_FcwSCUDProfilesId_Type.__name__ = "Integer32"
_FcwSCUDProfilesId_Object = MibTableColumn
fcwSCUDProfilesId = _FcwSCUDProfilesId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 2, 1, 1),
    _FcwSCUDProfilesId_Type()
)
fcwSCUDProfilesId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwSCUDProfilesId.setStatus("mandatory")


class _FcwSCUDProfilesStatus_Type(Integer32):
    """Custom type fcwSCUDProfilesStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcwSCUDProfilesStatus_Type.__name__ = "Integer32"
_FcwSCUDProfilesStatus_Object = MibTableColumn
fcwSCUDProfilesStatus = _FcwSCUDProfilesStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 2, 1, 2),
    _FcwSCUDProfilesStatus_Type()
)
fcwSCUDProfilesStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSCUDProfilesStatus.setStatus("mandatory")


class _FcwSCUDProfilesCUD_Type(OctetString):
    """Custom type fcwSCUDProfilesCUD based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(13, 13),
    )


_FcwSCUDProfilesCUD_Type.__name__ = "OctetString"
_FcwSCUDProfilesCUD_Object = MibTableColumn
fcwSCUDProfilesCUD = _FcwSCUDProfilesCUD_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 2, 1, 3),
    _FcwSCUDProfilesCUD_Type()
)
fcwSCUDProfilesCUD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSCUDProfilesCUD.setStatus("mandatory")
_FcwSQOSProfilesTable_Object = MibTable
fcwSQOSProfilesTable = _FcwSQOSProfilesTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 3)
)
if mibBuilder.loadTexts:
    fcwSQOSProfilesTable.setStatus("mandatory")
_FcwSQOSProfilesEntry_Object = MibTableRow
fcwSQOSProfilesEntry = _FcwSQOSProfilesEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 3, 1)
)
fcwSQOSProfilesEntry.setIndexNames(
    (0, "PCE-MIB", "fcwSQOSProfilesId"),
)
if mibBuilder.loadTexts:
    fcwSQOSProfilesEntry.setStatus("mandatory")


class _FcwSQOSProfilesId_Type(Integer32):
    """Custom type fcwSQOSProfilesId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_FcwSQOSProfilesId_Type.__name__ = "Integer32"
_FcwSQOSProfilesId_Object = MibTableColumn
fcwSQOSProfilesId = _FcwSQOSProfilesId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 3, 1, 1),
    _FcwSQOSProfilesId_Type()
)
fcwSQOSProfilesId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcwSQOSProfilesId.setStatus("mandatory")


class _FcwSQOSProfilesStatus_Type(Integer32):
    """Custom type fcwSQOSProfilesStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcwSQOSProfilesStatus_Type.__name__ = "Integer32"
_FcwSQOSProfilesStatus_Object = MibTableColumn
fcwSQOSProfilesStatus = _FcwSQOSProfilesStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 3, 1, 2),
    _FcwSQOSProfilesStatus_Type()
)
fcwSQOSProfilesStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSQOSProfilesStatus.setStatus("mandatory")


class _FcwSQOSProfilesCIR_Type(Integer32):
    """Custom type fcwSQOSProfilesCIR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FcwSQOSProfilesCIR_Type.__name__ = "Integer32"
_FcwSQOSProfilesCIR_Object = MibTableColumn
fcwSQOSProfilesCIR = _FcwSQOSProfilesCIR_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 3, 1, 3),
    _FcwSQOSProfilesCIR_Type()
)
fcwSQOSProfilesCIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSQOSProfilesCIR.setStatus("mandatory")


class _FcwSQOSProfilesCIRmin_Type(Integer32):
    """Custom type fcwSQOSProfilesCIRmin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FcwSQOSProfilesCIRmin_Type.__name__ = "Integer32"
_FcwSQOSProfilesCIRmin_Object = MibTableColumn
fcwSQOSProfilesCIRmin = _FcwSQOSProfilesCIRmin_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 3, 1, 4),
    _FcwSQOSProfilesCIRmin_Type()
)
fcwSQOSProfilesCIRmin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSQOSProfilesCIRmin.setStatus("mandatory")


class _FcwSQOSProfilesBc_Type(Integer32):
    """Custom type fcwSQOSProfilesBc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FcwSQOSProfilesBc_Type.__name__ = "Integer32"
_FcwSQOSProfilesBc_Object = MibTableColumn
fcwSQOSProfilesBc = _FcwSQOSProfilesBc_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 3, 1, 5),
    _FcwSQOSProfilesBc_Type()
)
fcwSQOSProfilesBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSQOSProfilesBc.setStatus("mandatory")


class _FcwSQOSProfilesBe_Type(Integer32):
    """Custom type fcwSQOSProfilesBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FcwSQOSProfilesBe_Type.__name__ = "Integer32"
_FcwSQOSProfilesBe_Object = MibTableColumn
fcwSQOSProfilesBe = _FcwSQOSProfilesBe_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 3, 1, 6),
    _FcwSQOSProfilesBe_Type()
)
fcwSQOSProfilesBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcwSQOSProfilesBe.setStatus("mandatory")
_FcVirtualPorts_ObjectIdentity = ObjectIdentity
fcVirtualPorts = _FcVirtualPorts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30)
)
_FcvVirtualPortTable_Object = MibTable
fcvVirtualPortTable = _FcvVirtualPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 1)
)
if mibBuilder.loadTexts:
    fcvVirtualPortTable.setStatus("mandatory")
_FcvVirtualPortEntry_Object = MibTableRow
fcvVirtualPortEntry = _FcvVirtualPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 1, 1)
)
fcvVirtualPortEntry.setIndexNames(
    (0, "PCE-MIB", "fcvVpVirtualPortId"),
)
if mibBuilder.loadTexts:
    fcvVirtualPortEntry.setStatus("mandatory")


class _FcvVpVirtualPortId_Type(Integer32):
    """Custom type fcvVpVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FcvVpVirtualPortId_Type.__name__ = "Integer32"
_FcvVpVirtualPortId_Object = MibTableColumn
fcvVpVirtualPortId = _FcvVpVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 1, 1, 1),
    _FcvVpVirtualPortId_Type()
)
fcvVpVirtualPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcvVpVirtualPortId.setStatus("mandatory")


class _FcvVpStatus_Type(Integer32):
    """Custom type fcvVpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcvVpStatus_Type.__name__ = "Integer32"
_FcvVpStatus_Object = MibTableColumn
fcvVpStatus = _FcvVpStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 1, 1, 2),
    _FcvVpStatus_Type()
)
fcvVpStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvVpStatus.setStatus("mandatory")


class _FcvVpType_Type(Integer32):
    """Custom type fcvVpType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("local", 1),
          ("remote", 2))
    )


_FcvVpType_Type.__name__ = "Integer32"
_FcvVpType_Object = MibTableColumn
fcvVpType = _FcvVpType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 1, 1, 3),
    _FcvVpType_Type()
)
fcvVpType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvVpType.setStatus("mandatory")


class _FcvVpModuleId_Type(Integer32):
    """Custom type fcvVpModuleId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )


_FcvVpModuleId_Type.__name__ = "Integer32"
_FcvVpModuleId_Object = MibTableColumn
fcvVpModuleId = _FcvVpModuleId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 1, 1, 4),
    _FcvVpModuleId_Type()
)
fcvVpModuleId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvVpModuleId.setStatus("mandatory")
_FcvLocalVirtualPorts_ObjectIdentity = ObjectIdentity
fcvLocalVirtualPorts = _FcvLocalVirtualPorts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10)
)
_FcvLocalVirtualPortTable_Object = MibTable
fcvLocalVirtualPortTable = _FcvLocalVirtualPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 1)
)
if mibBuilder.loadTexts:
    fcvLocalVirtualPortTable.setStatus("mandatory")
_FcvLocalVirtualPortEntry_Object = MibTableRow
fcvLocalVirtualPortEntry = _FcvLocalVirtualPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 1, 1)
)
fcvLocalVirtualPortEntry.setIndexNames(
    (0, "PCE-MIB", "fcvLvpVirtualPortId"),
)
if mibBuilder.loadTexts:
    fcvLocalVirtualPortEntry.setStatus("mandatory")


class _FcvLvpVirtualPortId_Type(Integer32):
    """Custom type fcvLvpVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FcvLvpVirtualPortId_Type.__name__ = "Integer32"
_FcvLvpVirtualPortId_Object = MibTableColumn
fcvLvpVirtualPortId = _FcvLvpVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 1, 1, 1),
    _FcvLvpVirtualPortId_Type()
)
fcvLvpVirtualPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcvLvpVirtualPortId.setStatus("mandatory")


class _FcvLvpLogicalPortId_Type(Integer32):
    """Custom type fcvLvpLogicalPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FcvLvpLogicalPortId_Type.__name__ = "Integer32"
_FcvLvpLogicalPortId_Object = MibTableColumn
fcvLvpLogicalPortId = _FcvLvpLogicalPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 1, 1, 2),
    _FcvLvpLogicalPortId_Type()
)
fcvLvpLogicalPortId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvLvpLogicalPortId.setStatus("mandatory")
_FcvLvpFiltering_ObjectIdentity = ObjectIdentity
fcvLvpFiltering = _FcvLvpFiltering_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10)
)
_FcvLvpFltConditionTable_Object = MibTable
fcvLvpFltConditionTable = _FcvLvpFltConditionTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 1)
)
if mibBuilder.loadTexts:
    fcvLvpFltConditionTable.setStatus("mandatory")
_FcvLvpFltConditionEntry_Object = MibTableRow
fcvLvpFltConditionEntry = _FcvLvpFltConditionEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 1, 1)
)
fcvLvpFltConditionEntry.setIndexNames(
    (0, "PCE-MIB", "fcvLvpFltCondConditionId"),
)
if mibBuilder.loadTexts:
    fcvLvpFltConditionEntry.setStatus("mandatory")


class _FcvLvpFltCondConditionId_Type(Integer32):
    """Custom type fcvLvpFltCondConditionId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_FcvLvpFltCondConditionId_Type.__name__ = "Integer32"
_FcvLvpFltCondConditionId_Object = MibTableColumn
fcvLvpFltCondConditionId = _FcvLvpFltCondConditionId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 1, 1, 1),
    _FcvLvpFltCondConditionId_Type()
)
fcvLvpFltCondConditionId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcvLvpFltCondConditionId.setStatus("mandatory")


class _FcvLvpFltCondStatus_Type(Integer32):
    """Custom type fcvLvpFltCondStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcvLvpFltCondStatus_Type.__name__ = "Integer32"
_FcvLvpFltCondStatus_Object = MibTableColumn
fcvLvpFltCondStatus = _FcvLvpFltCondStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 1, 1, 2),
    _FcvLvpFltCondStatus_Type()
)
fcvLvpFltCondStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvLvpFltCondStatus.setStatus("mandatory")


class _FcvLvpFltCondOffset_Type(Integer32):
    """Custom type fcvLvpFltCondOffset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1513),
    )


_FcvLvpFltCondOffset_Type.__name__ = "Integer32"
_FcvLvpFltCondOffset_Object = MibTableColumn
fcvLvpFltCondOffset = _FcvLvpFltCondOffset_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 1, 1, 3),
    _FcvLvpFltCondOffset_Type()
)
fcvLvpFltCondOffset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvLvpFltCondOffset.setStatus("mandatory")


class _FcvLvpFltCondMask_Type(OctetString):
    """Custom type fcvLvpFltCondMask based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_FcvLvpFltCondMask_Type.__name__ = "OctetString"
_FcvLvpFltCondMask_Object = MibTableColumn
fcvLvpFltCondMask = _FcvLvpFltCondMask_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 1, 1, 4),
    _FcvLvpFltCondMask_Type()
)
fcvLvpFltCondMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvLvpFltCondMask.setStatus("mandatory")


class _FcvLvpFltCondValue_Type(OctetString):
    """Custom type fcvLvpFltCondValue based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_FcvLvpFltCondValue_Type.__name__ = "OctetString"
_FcvLvpFltCondValue_Object = MibTableColumn
fcvLvpFltCondValue = _FcvLvpFltCondValue_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 1, 1, 5),
    _FcvLvpFltCondValue_Type()
)
fcvLvpFltCondValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvLvpFltCondValue.setStatus("mandatory")
_FcvLvpFltFilterTable_Object = MibTable
fcvLvpFltFilterTable = _FcvLvpFltFilterTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 2)
)
if mibBuilder.loadTexts:
    fcvLvpFltFilterTable.setStatus("mandatory")
_FcvLvpFltFilterEntry_Object = MibTableRow
fcvLvpFltFilterEntry = _FcvLvpFltFilterEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 2, 1)
)
fcvLvpFltFilterEntry.setIndexNames(
    (0, "PCE-MIB", "fcvLvpFltFilterId"),
)
if mibBuilder.loadTexts:
    fcvLvpFltFilterEntry.setStatus("mandatory")


class _FcvLvpFltFilterId_Type(Integer32):
    """Custom type fcvLvpFltFilterId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FcvLvpFltFilterId_Type.__name__ = "Integer32"
_FcvLvpFltFilterId_Object = MibTableColumn
fcvLvpFltFilterId = _FcvLvpFltFilterId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 2, 1, 1),
    _FcvLvpFltFilterId_Type()
)
fcvLvpFltFilterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcvLvpFltFilterId.setStatus("mandatory")


class _FcvLvpFltFilterStatus_Type(Integer32):
    """Custom type fcvLvpFltFilterStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcvLvpFltFilterStatus_Type.__name__ = "Integer32"
_FcvLvpFltFilterStatus_Object = MibTableColumn
fcvLvpFltFilterStatus = _FcvLvpFltFilterStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 2, 1, 2),
    _FcvLvpFltFilterStatus_Type()
)
fcvLvpFltFilterStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvLvpFltFilterStatus.setStatus("mandatory")


class _FcvLvpFltFilterCondition1Id_Type(Integer32):
    """Custom type fcvLvpFltFilterCondition1Id based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FcvLvpFltFilterCondition1Id_Type.__name__ = "Integer32"
_FcvLvpFltFilterCondition1Id_Object = MibTableColumn
fcvLvpFltFilterCondition1Id = _FcvLvpFltFilterCondition1Id_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 2, 1, 3),
    _FcvLvpFltFilterCondition1Id_Type()
)
fcvLvpFltFilterCondition1Id.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvLvpFltFilterCondition1Id.setStatus("mandatory")


class _FcvLvpFltFilterCondition2Id_Type(Integer32):
    """Custom type fcvLvpFltFilterCondition2Id based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FcvLvpFltFilterCondition2Id_Type.__name__ = "Integer32"
_FcvLvpFltFilterCondition2Id_Object = MibTableColumn
fcvLvpFltFilterCondition2Id = _FcvLvpFltFilterCondition2Id_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 2, 1, 4),
    _FcvLvpFltFilterCondition2Id_Type()
)
fcvLvpFltFilterCondition2Id.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvLvpFltFilterCondition2Id.setStatus("mandatory")


class _FcvLvpFltFilterCondition3Id_Type(Integer32):
    """Custom type fcvLvpFltFilterCondition3Id based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FcvLvpFltFilterCondition3Id_Type.__name__ = "Integer32"
_FcvLvpFltFilterCondition3Id_Object = MibTableColumn
fcvLvpFltFilterCondition3Id = _FcvLvpFltFilterCondition3Id_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 2, 1, 5),
    _FcvLvpFltFilterCondition3Id_Type()
)
fcvLvpFltFilterCondition3Id.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvLvpFltFilterCondition3Id.setStatus("mandatory")
_FcvLvpFltFilteringTable_Object = MibTable
fcvLvpFltFilteringTable = _FcvLvpFltFilteringTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 3)
)
if mibBuilder.loadTexts:
    fcvLvpFltFilteringTable.setStatus("mandatory")
_FcvLvpFltFilteringEntry_Object = MibTableRow
fcvLvpFltFilteringEntry = _FcvLvpFltFilteringEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 3, 1)
)
fcvLvpFltFilteringEntry.setIndexNames(
    (0, "PCE-MIB", "fcvLvpFltFilteringVirtualPortId"),
    (0, "PCE-MIB", "fcvLvpFltFilteringFilterId"),
)
if mibBuilder.loadTexts:
    fcvLvpFltFilteringEntry.setStatus("mandatory")


class _FcvLvpFltFilteringVirtualPortId_Type(Integer32):
    """Custom type fcvLvpFltFilteringVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FcvLvpFltFilteringVirtualPortId_Type.__name__ = "Integer32"
_FcvLvpFltFilteringVirtualPortId_Object = MibTableColumn
fcvLvpFltFilteringVirtualPortId = _FcvLvpFltFilteringVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 3, 1, 1),
    _FcvLvpFltFilteringVirtualPortId_Type()
)
fcvLvpFltFilteringVirtualPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcvLvpFltFilteringVirtualPortId.setStatus("mandatory")


class _FcvLvpFltFilteringFilterId_Type(Integer32):
    """Custom type fcvLvpFltFilteringFilterId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 200),
    )


_FcvLvpFltFilteringFilterId_Type.__name__ = "Integer32"
_FcvLvpFltFilteringFilterId_Object = MibTableColumn
fcvLvpFltFilteringFilterId = _FcvLvpFltFilteringFilterId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 3, 1, 2),
    _FcvLvpFltFilteringFilterId_Type()
)
fcvLvpFltFilteringFilterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcvLvpFltFilteringFilterId.setStatus("mandatory")


class _FcvLvpFltFilteringStatus_Type(Integer32):
    """Custom type fcvLvpFltFilteringStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcvLvpFltFilteringStatus_Type.__name__ = "Integer32"
_FcvLvpFltFilteringStatus_Object = MibTableColumn
fcvLvpFltFilteringStatus = _FcvLvpFltFilteringStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 3, 1, 3),
    _FcvLvpFltFilteringStatus_Type()
)
fcvLvpFltFilteringStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvLvpFltFilteringStatus.setStatus("mandatory")


class _FcvLvpFltFilteringType_Type(Integer32):
    """Custom type fcvLvpFltFilteringType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("deny", 1),
          ("permit", 2))
    )


_FcvLvpFltFilteringType_Type.__name__ = "Integer32"
_FcvLvpFltFilteringType_Object = MibTableColumn
fcvLvpFltFilteringType = _FcvLvpFltFilteringType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 3, 1, 4),
    _FcvLvpFltFilteringType_Type()
)
fcvLvpFltFilteringType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvLvpFltFilteringType.setStatus("mandatory")
_FcvRemoteVirtualPorts_ObjectIdentity = ObjectIdentity
fcvRemoteVirtualPorts = _FcvRemoteVirtualPorts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20)
)


class _FcvRvpCompression_Type(Integer32):
    """Custom type fcvRvpCompression based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bothway", 4),
          ("networkToSubscriber", 2),
          ("off", 1),
          ("subscriberToNetwork", 3))
    )


_FcvRvpCompression_Type.__name__ = "Integer32"
_FcvRvpCompression_Object = MibScalar
fcvRvpCompression = _FcvRvpCompression_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 1),
    _FcvRvpCompression_Type()
)
fcvRvpCompression.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpCompression.setStatus("mandatory")


class _FcvRvpCompressNegotiation_Type(Integer32):
    """Custom type fcvRvpCompressNegotiation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onMandatoryCompression", 3),
          ("onOptionalCompression", 2))
    )


_FcvRvpCompressNegotiation_Type.__name__ = "Integer32"
_FcvRvpCompressNegotiation_Object = MibScalar
fcvRvpCompressNegotiation = _FcvRvpCompressNegotiation_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 2),
    _FcvRvpCompressNegotiation_Type()
)
fcvRvpCompressNegotiation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpCompressNegotiation.setStatus("mandatory")


class _FcvRvpCompressScrambling_Type(Integer32):
    """Custom type fcvRvpCompressScrambling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcvRvpCompressScrambling_Type.__name__ = "Integer32"
_FcvRvpCompressScrambling_Object = MibScalar
fcvRvpCompressScrambling = _FcvRvpCompressScrambling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 3),
    _FcvRvpCompressScrambling_Type()
)
fcvRvpCompressScrambling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpCompressScrambling.setStatus("mandatory")


class _FcvRvpCompressMultiPacketsTimer_Type(Integer32):
    """Custom type fcvRvpCompressMultiPacketsTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1500),
    )


_FcvRvpCompressMultiPacketsTimer_Type.__name__ = "Integer32"
_FcvRvpCompressMultiPacketsTimer_Object = MibScalar
fcvRvpCompressMultiPacketsTimer = _FcvRvpCompressMultiPacketsTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 4),
    _FcvRvpCompressMultiPacketsTimer_Type()
)
fcvRvpCompressMultiPacketsTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpCompressMultiPacketsTimer.setStatus("mandatory")


class _FcvRvpReliableVirtualCircuit_Type(Integer32):
    """Custom type fcvRvpReliableVirtualCircuit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcvRvpReliableVirtualCircuit_Type.__name__ = "Integer32"
_FcvRvpReliableVirtualCircuit_Object = MibScalar
fcvRvpReliableVirtualCircuit = _FcvRvpReliableVirtualCircuit_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 5),
    _FcvRvpReliableVirtualCircuit_Type()
)
fcvRvpReliableVirtualCircuit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpReliableVirtualCircuit.setStatus("mandatory")


class _FcvRvpBe_Type(Integer32):
    """Custom type fcvRvpBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FcvRvpBe_Type.__name__ = "Integer32"
_FcvRvpBe_Object = MibScalar
fcvRvpBe = _FcvRvpBe_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 6),
    _FcvRvpBe_Type()
)
fcvRvpBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpBe.setStatus("mandatory")


class _FcvRvpConversionAimedPoint_Type(Integer32):
    """Custom type fcvRvpConversionAimedPoint based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcvRvpConversionAimedPoint_Type.__name__ = "Integer32"
_FcvRvpConversionAimedPoint_Object = MibScalar
fcvRvpConversionAimedPoint = _FcvRvpConversionAimedPoint_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 7),
    _FcvRvpConversionAimedPoint_Type()
)
fcvRvpConversionAimedPoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpConversionAimedPoint.setStatus("mandatory")


class _FcvRvpConversionIncomingCall_Type(Integer32):
    """Custom type fcvRvpConversionIncomingCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("calledAddress", 3),
          ("callingAddress", 2),
          ("callingAddressAndCalledAddress", 4),
          ("off", 1))
    )


_FcvRvpConversionIncomingCall_Type.__name__ = "Integer32"
_FcvRvpConversionIncomingCall_Object = MibScalar
fcvRvpConversionIncomingCall = _FcvRvpConversionIncomingCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 8),
    _FcvRvpConversionIncomingCall_Type()
)
fcvRvpConversionIncomingCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpConversionIncomingCall.setStatus("mandatory")


class _FcvRvpConversionOutgoingCall_Type(Integer32):
    """Custom type fcvRvpConversionOutgoingCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("calledAddress", 3),
          ("callingAddress", 2),
          ("callingAddressAndCalledAddress", 4),
          ("off", 1))
    )


_FcvRvpConversionOutgoingCall_Type.__name__ = "Integer32"
_FcvRvpConversionOutgoingCall_Object = MibScalar
fcvRvpConversionOutgoingCall = _FcvRvpConversionOutgoingCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 9),
    _FcvRvpConversionOutgoingCall_Type()
)
fcvRvpConversionOutgoingCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpConversionOutgoingCall.setStatus("mandatory")


class _FcvRvpConversionAddressCheck_Type(Integer32):
    """Custom type fcvRvpConversionAddressCheck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onIncomingCall", 2),
          ("onIncomingCallAndOutgoingCall", 4),
          ("onOutgoingCall", 3))
    )


_FcvRvpConversionAddressCheck_Type.__name__ = "Integer32"
_FcvRvpConversionAddressCheck_Object = MibScalar
fcvRvpConversionAddressCheck = _FcvRvpConversionAddressCheck_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 10),
    _FcvRvpConversionAddressCheck_Type()
)
fcvRvpConversionAddressCheck.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpConversionAddressCheck.setStatus("mandatory")


class _FcvRvpConvMultiCalledAddrInCall_Type(Integer32):
    """Custom type fcvRvpConvMultiCalledAddrInCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_FcvRvpConvMultiCalledAddrInCall_Type.__name__ = "Integer32"
_FcvRvpConvMultiCalledAddrInCall_Object = MibScalar
fcvRvpConvMultiCalledAddrInCall = _FcvRvpConvMultiCalledAddrInCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 11),
    _FcvRvpConvMultiCalledAddrInCall_Type()
)
fcvRvpConvMultiCalledAddrInCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpConvMultiCalledAddrInCall.setStatus("mandatory")


class _FcvRvpConvMultiCallingAddrInCall_Type(Integer32):
    """Custom type fcvRvpConvMultiCallingAddrInCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_FcvRvpConvMultiCallingAddrInCall_Type.__name__ = "Integer32"
_FcvRvpConvMultiCallingAddrInCall_Object = MibScalar
fcvRvpConvMultiCallingAddrInCall = _FcvRvpConvMultiCallingAddrInCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 12),
    _FcvRvpConvMultiCallingAddrInCall_Type()
)
fcvRvpConvMultiCallingAddrInCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpConvMultiCallingAddrInCall.setStatus("mandatory")


class _FcvRvpConvMultiCalledAddrOutCall_Type(Integer32):
    """Custom type fcvRvpConvMultiCalledAddrOutCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_FcvRvpConvMultiCalledAddrOutCall_Type.__name__ = "Integer32"
_FcvRvpConvMultiCalledAddrOutCall_Object = MibScalar
fcvRvpConvMultiCalledAddrOutCall = _FcvRvpConvMultiCalledAddrOutCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 13),
    _FcvRvpConvMultiCalledAddrOutCall_Type()
)
fcvRvpConvMultiCalledAddrOutCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpConvMultiCalledAddrOutCall.setStatus("mandatory")


class _FcvRvpConvMultiCallingAddrOutCall_Type(Integer32):
    """Custom type fcvRvpConvMultiCallingAddrOutCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_FcvRvpConvMultiCallingAddrOutCall_Type.__name__ = "Integer32"
_FcvRvpConvMultiCallingAddrOutCall_Object = MibScalar
fcvRvpConvMultiCallingAddrOutCall = _FcvRvpConvMultiCallingAddrOutCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 14),
    _FcvRvpConvMultiCallingAddrOutCall_Type()
)
fcvRvpConvMultiCallingAddrOutCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpConvMultiCallingAddrOutCall.setStatus("mandatory")


class _FcvRvpCallAcceptwithReverseCharging_Type(Integer32):
    """Custom type fcvRvpCallAcceptwithReverseCharging based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FcvRvpCallAcceptwithReverseCharging_Type.__name__ = "Integer32"
_FcvRvpCallAcceptwithReverseCharging_Object = MibScalar
fcvRvpCallAcceptwithReverseCharging = _FcvRvpCallAcceptwithReverseCharging_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 15),
    _FcvRvpCallAcceptwithReverseCharging_Type()
)
fcvRvpCallAcceptwithReverseCharging.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpCallAcceptwithReverseCharging.setStatus("mandatory")


class _FcvRvpCos_Type(Integer32):
    """Custom type fcvRvpCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ubr", 3),
          ("vbr", 1))
    )


_FcvRvpCos_Type.__name__ = "Integer32"
_FcvRvpCos_Object = MibScalar
fcvRvpCos = _FcvRvpCos_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 20),
    _FcvRvpCos_Type()
)
fcvRvpCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpCos.setStatus("mandatory")


class _FcvRvpCir_Type(Integer32):
    """Custom type fcvRvpCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(600, 2048000),
    )


_FcvRvpCir_Type.__name__ = "Integer32"
_FcvRvpCir_Object = MibScalar
fcvRvpCir = _FcvRvpCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 21),
    _FcvRvpCir_Type()
)
fcvRvpCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpCir.setStatus("mandatory")


class _FcvRvpMinCir_Type(Integer32):
    """Custom type fcvRvpMinCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FcvRvpMinCir_Type.__name__ = "Integer32"
_FcvRvpMinCir_Object = MibScalar
fcvRvpMinCir = _FcvRvpMinCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 22),
    _FcvRvpMinCir_Type()
)
fcvRvpMinCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpMinCir.setStatus("mandatory")
_FcvRvpConnectionTable_Object = MibTable
fcvRvpConnectionTable = _FcvRvpConnectionTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23)
)
if mibBuilder.loadTexts:
    fcvRvpConnectionTable.setStatus("mandatory")
_FcvRvpConnectionEntry_Object = MibTableRow
fcvRvpConnectionEntry = _FcvRvpConnectionEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1)
)
fcvRvpConnectionEntry.setIndexNames(
    (0, "PCE-MIB", "fcvRvpConnRemoteAddress"),
    (0, "PCE-MIB", "fcvRvpConnEncapsulation"),
    (0, "PCE-MIB", "fcvRvpConnConnectionId"),
)
if mibBuilder.loadTexts:
    fcvRvpConnectionEntry.setStatus("mandatory")


class _FcvRvpConnRemoteAddress_Type(OctetString):
    """Custom type fcvRvpConnRemoteAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FcvRvpConnRemoteAddress_Type.__name__ = "OctetString"
_FcvRvpConnRemoteAddress_Object = MibTableColumn
fcvRvpConnRemoteAddress = _FcvRvpConnRemoteAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 1),
    _FcvRvpConnRemoteAddress_Type()
)
fcvRvpConnRemoteAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcvRvpConnRemoteAddress.setStatus("mandatory")


class _FcvRvpConnEncapsulation_Type(Integer32):
    """Custom type fcvRvpConnEncapsulation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              10,
              11,
              20,
              30,
              31,
              40)
        )
    )
    namedValues = NamedValues(
        *(("bridge", 10),
          ("bridgeSpecific", 11),
          ("clnp", 40),
          ("ip", 20),
          ("ipx", 30),
          ("ipxSpecific", 31),
          ("multiplexing", 1))
    )


_FcvRvpConnEncapsulation_Type.__name__ = "Integer32"
_FcvRvpConnEncapsulation_Object = MibTableColumn
fcvRvpConnEncapsulation = _FcvRvpConnEncapsulation_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 2),
    _FcvRvpConnEncapsulation_Type()
)
fcvRvpConnEncapsulation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcvRvpConnEncapsulation.setStatus("mandatory")


class _FcvRvpConnConnectionId_Type(Integer32):
    """Custom type fcvRvpConnConnectionId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FcvRvpConnConnectionId_Type.__name__ = "Integer32"
_FcvRvpConnConnectionId_Object = MibTableColumn
fcvRvpConnConnectionId = _FcvRvpConnConnectionId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 3),
    _FcvRvpConnConnectionId_Type()
)
fcvRvpConnConnectionId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcvRvpConnConnectionId.setStatus("mandatory")


class _FcvRvpConnStatus_Type(Integer32):
    """Custom type fcvRvpConnStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcvRvpConnStatus_Type.__name__ = "Integer32"
_FcvRvpConnStatus_Object = MibTableColumn
fcvRvpConnStatus = _FcvRvpConnStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 4),
    _FcvRvpConnStatus_Type()
)
fcvRvpConnStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpConnStatus.setStatus("mandatory")


class _FcvRvpConnFlowTypeMask_Type(Integer32):
    """Custom type fcvRvpConnFlowTypeMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FcvRvpConnFlowTypeMask_Type.__name__ = "Integer32"
_FcvRvpConnFlowTypeMask_Object = MibTableColumn
fcvRvpConnFlowTypeMask = _FcvRvpConnFlowTypeMask_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 5),
    _FcvRvpConnFlowTypeMask_Type()
)
fcvRvpConnFlowTypeMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpConnFlowTypeMask.setStatus("mandatory")


class _FcvRvpConnModule0VpId_Type(Integer32):
    """Custom type fcvRvpConnModule0VpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FcvRvpConnModule0VpId_Type.__name__ = "Integer32"
_FcvRvpConnModule0VpId_Object = MibTableColumn
fcvRvpConnModule0VpId = _FcvRvpConnModule0VpId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 10),
    _FcvRvpConnModule0VpId_Type()
)
fcvRvpConnModule0VpId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpConnModule0VpId.setStatus("mandatory")


class _FcvRvpConnModule1VpId_Type(Integer32):
    """Custom type fcvRvpConnModule1VpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FcvRvpConnModule1VpId_Type.__name__ = "Integer32"
_FcvRvpConnModule1VpId_Object = MibTableColumn
fcvRvpConnModule1VpId = _FcvRvpConnModule1VpId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 11),
    _FcvRvpConnModule1VpId_Type()
)
fcvRvpConnModule1VpId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpConnModule1VpId.setStatus("mandatory")


class _FcvRvpConnModule2VpId_Type(Integer32):
    """Custom type fcvRvpConnModule2VpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FcvRvpConnModule2VpId_Type.__name__ = "Integer32"
_FcvRvpConnModule2VpId_Object = MibTableColumn
fcvRvpConnModule2VpId = _FcvRvpConnModule2VpId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 12),
    _FcvRvpConnModule2VpId_Type()
)
fcvRvpConnModule2VpId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpConnModule2VpId.setStatus("mandatory")


class _FcvRvpConnCallDirection_Type(Integer32):
    """Custom type fcvRvpConnCallDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("auto", 3),
          ("called", 2),
          ("calling", 1),
          ("datagram", 4))
    )


_FcvRvpConnCallDirection_Type.__name__ = "Integer32"
_FcvRvpConnCallDirection_Object = MibTableColumn
fcvRvpConnCallDirection = _FcvRvpConnCallDirection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 20),
    _FcvRvpConnCallDirection_Type()
)
fcvRvpConnCallDirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpConnCallDirection.setStatus("mandatory")


class _FcvRvpConnGrouping_Type(Integer32):
    """Custom type fcvRvpConnGrouping based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcvRvpConnGrouping_Type.__name__ = "Integer32"
_FcvRvpConnGrouping_Object = MibTableColumn
fcvRvpConnGrouping = _FcvRvpConnGrouping_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 21),
    _FcvRvpConnGrouping_Type()
)
fcvRvpConnGrouping.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpConnGrouping.setStatus("mandatory")


class _FcvRvpConnMinimumRecallTimer_Type(Integer32):
    """Custom type fcvRvpConnMinimumRecallTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 990),
    )


_FcvRvpConnMinimumRecallTimer_Type.__name__ = "Integer32"
_FcvRvpConnMinimumRecallTimer_Object = MibTableColumn
fcvRvpConnMinimumRecallTimer = _FcvRvpConnMinimumRecallTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 22),
    _FcvRvpConnMinimumRecallTimer_Type()
)
fcvRvpConnMinimumRecallTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpConnMinimumRecallTimer.setStatus("mandatory")


class _FcvRvpConnInactivityTimer_Type(Integer32):
    """Custom type fcvRvpConnInactivityTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2540),
    )


_FcvRvpConnInactivityTimer_Type.__name__ = "Integer32"
_FcvRvpConnInactivityTimer_Object = MibTableColumn
fcvRvpConnInactivityTimer = _FcvRvpConnInactivityTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 23),
    _FcvRvpConnInactivityTimer_Type()
)
fcvRvpConnInactivityTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpConnInactivityTimer.setStatus("mandatory")


class _FcvRvpConnCir_Type(Integer32):
    """Custom type fcvRvpConnCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(600, 2048000),
    )


_FcvRvpConnCir_Type.__name__ = "Integer32"
_FcvRvpConnCir_Object = MibTableColumn
fcvRvpConnCir = _FcvRvpConnCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 24),
    _FcvRvpConnCir_Type()
)
fcvRvpConnCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpConnCir.setStatus("mandatory")


class _FcvRvpConnCos_Type(Integer32):
    """Custom type fcvRvpConnCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("global", 4),
          ("ubr", 3),
          ("vbr", 1),
          ("vbr-rt", 2))
    )


_FcvRvpConnCos_Type.__name__ = "Integer32"
_FcvRvpConnCos_Object = MibTableColumn
fcvRvpConnCos = _FcvRvpConnCos_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 25),
    _FcvRvpConnCos_Type()
)
fcvRvpConnCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpConnCos.setStatus("mandatory")


class _FcvRvpConnBe_Type(Integer32):
    """Custom type fcvRvpConnBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FcvRvpConnBe_Type.__name__ = "Integer32"
_FcvRvpConnBe_Object = MibTableColumn
fcvRvpConnBe = _FcvRvpConnBe_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 26),
    _FcvRvpConnBe_Type()
)
fcvRvpConnBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcvRvpConnBe.setStatus("mandatory")
_FcSna_ObjectIdentity = ObjectIdentity
fcSna = _FcSna_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32)
)
_FcsnaLocalVirtualPort_ObjectIdentity = ObjectIdentity
fcsnaLocalVirtualPort = _FcsnaLocalVirtualPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1)
)
_FcsnaLvpLocalLanPuTable_Object = MibTable
fcsnaLvpLocalLanPuTable = _FcsnaLvpLocalLanPuTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 1)
)
if mibBuilder.loadTexts:
    fcsnaLvpLocalLanPuTable.setStatus("mandatory")
_FcsnaLvpLocalLanPuEntry_Object = MibTableRow
fcsnaLvpLocalLanPuEntry = _FcsnaLvpLocalLanPuEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 1, 1)
)
fcsnaLvpLocalLanPuEntry.setIndexNames(
    (0, "PCE-MIB", "fcsnaLvpLlpVirtualPortId"),
    (0, "PCE-MIB", "fcsnaLvpLlpPuId"),
)
if mibBuilder.loadTexts:
    fcsnaLvpLocalLanPuEntry.setStatus("mandatory")


class _FcsnaLvpLlpVirtualPortId_Type(Integer32):
    """Custom type fcsnaLvpLlpVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FcsnaLvpLlpVirtualPortId_Type.__name__ = "Integer32"
_FcsnaLvpLlpVirtualPortId_Object = MibTableColumn
fcsnaLvpLlpVirtualPortId = _FcsnaLvpLlpVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 1, 1, 1),
    _FcsnaLvpLlpVirtualPortId_Type()
)
fcsnaLvpLlpVirtualPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcsnaLvpLlpVirtualPortId.setStatus("mandatory")


class _FcsnaLvpLlpPuId_Type(Integer32):
    """Custom type fcsnaLvpLlpPuId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1999),
    )


_FcsnaLvpLlpPuId_Type.__name__ = "Integer32"
_FcsnaLvpLlpPuId_Object = MibTableColumn
fcsnaLvpLlpPuId = _FcsnaLvpLlpPuId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 1, 1, 2),
    _FcsnaLvpLlpPuId_Type()
)
fcsnaLvpLlpPuId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcsnaLvpLlpPuId.setStatus("mandatory")


class _FcsnaLvpLlpStatus_Type(Integer32):
    """Custom type fcsnaLvpLlpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcsnaLvpLlpStatus_Type.__name__ = "Integer32"
_FcsnaLvpLlpStatus_Object = MibTableColumn
fcsnaLvpLlpStatus = _FcsnaLvpLlpStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 1, 1, 3),
    _FcsnaLvpLlpStatus_Type()
)
fcsnaLvpLlpStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpLlpStatus.setStatus("mandatory")
_FcsnaLvpParameters_ObjectIdentity = ObjectIdentity
fcsnaLvpParameters = _FcsnaLvpParameters_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10)
)


class _FcsnaLvpParamLinkType_Type(Integer32):
    """Custom type fcsnaLvpParamLinkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("frontal", 1),
          ("remote", 2))
    )


_FcsnaLvpParamLinkType_Type.__name__ = "Integer32"
_FcsnaLvpParamLinkType_Object = MibScalar
fcsnaLvpParamLinkType = _FcsnaLvpParamLinkType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 1),
    _FcsnaLvpParamLinkType_Type()
)
fcsnaLvpParamLinkType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamLinkType.setStatus("mandatory")


class _FcsnaLvpParamFrameFormat_Type(Integer32):
    """Custom type fcsnaLvpParamFrameFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("e802-3", 1),
          ("v2-DIX", 2))
    )


_FcsnaLvpParamFrameFormat_Type.__name__ = "Integer32"
_FcsnaLvpParamFrameFormat_Object = MibScalar
fcsnaLvpParamFrameFormat = _FcsnaLvpParamFrameFormat_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 2),
    _FcsnaLvpParamFrameFormat_Type()
)
fcsnaLvpParamFrameFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamFrameFormat.setStatus("mandatory")


class _FcsnaLvpParamLocalTest_Type(Integer32):
    """Custom type fcsnaLvpParamLocalTest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcsnaLvpParamLocalTest_Type.__name__ = "Integer32"
_FcsnaLvpParamLocalTest_Object = MibScalar
fcsnaLvpParamLocalTest = _FcsnaLvpParamLocalTest_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 3),
    _FcsnaLvpParamLocalTest_Type()
)
fcsnaLvpParamLocalTest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamLocalTest.setStatus("mandatory")


class _FcsnaLvpParamCallDirection_Type(Integer32):
    """Custom type fcsnaLvpParamCallDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("called", 1),
          ("calling", 2))
    )


_FcsnaLvpParamCallDirection_Type.__name__ = "Integer32"
_FcsnaLvpParamCallDirection_Object = MibScalar
fcsnaLvpParamCallDirection = _FcsnaLvpParamCallDirection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 4),
    _FcsnaLvpParamCallDirection_Type()
)
fcsnaLvpParamCallDirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamCallDirection.setStatus("mandatory")


class _FcsnaLvpMacAddressTrans_Type(Integer32):
    """Custom type fcsnaLvpMacAddressTrans based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcsnaLvpMacAddressTrans_Type.__name__ = "Integer32"
_FcsnaLvpMacAddressTrans_Object = MibScalar
fcsnaLvpMacAddressTrans = _FcsnaLvpMacAddressTrans_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 5),
    _FcsnaLvpMacAddressTrans_Type()
)
fcsnaLvpMacAddressTrans.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpMacAddressTrans.setStatus("mandatory")


class _FcsnaLvpParamT1_Type(Integer32):
    """Custom type fcsnaLvpParamT1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 25000),
    )


_FcsnaLvpParamT1_Type.__name__ = "Integer32"
_FcsnaLvpParamT1_Object = MibScalar
fcsnaLvpParamT1 = _FcsnaLvpParamT1_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 10),
    _FcsnaLvpParamT1_Type()
)
fcsnaLvpParamT1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamT1.setStatus("mandatory")


class _FcsnaLvpParamN2_Type(Integer32):
    """Custom type fcsnaLvpParamN2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_FcsnaLvpParamN2_Type.__name__ = "Integer32"
_FcsnaLvpParamN2_Object = MibScalar
fcsnaLvpParamN2 = _FcsnaLvpParamN2_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 11),
    _FcsnaLvpParamN2_Type()
)
fcsnaLvpParamN2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamN2.setStatus("mandatory")


class _FcsnaLvpParamT2_Type(Integer32):
    """Custom type fcsnaLvpParamT2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 15000),
    )


_FcsnaLvpParamT2_Type.__name__ = "Integer32"
_FcsnaLvpParamT2_Object = MibScalar
fcsnaLvpParamT2 = _FcsnaLvpParamT2_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 12),
    _FcsnaLvpParamT2_Type()
)
fcsnaLvpParamT2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamT2.setStatus("mandatory")


class _FcsnaLvpParamN3_Type(Integer32):
    """Custom type fcsnaLvpParamN3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_FcsnaLvpParamN3_Type.__name__ = "Integer32"
_FcsnaLvpParamN3_Object = MibScalar
fcsnaLvpParamN3 = _FcsnaLvpParamN3_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 13),
    _FcsnaLvpParamN3_Type()
)
fcsnaLvpParamN3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamN3.setStatus("mandatory")


class _FcsnaLvpParamNW_Type(Integer32):
    """Custom type fcsnaLvpParamNW based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 127),
    )


_FcsnaLvpParamNW_Type.__name__ = "Integer32"
_FcsnaLvpParamNW_Object = MibScalar
fcsnaLvpParamNW = _FcsnaLvpParamNW_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 14),
    _FcsnaLvpParamNW_Type()
)
fcsnaLvpParamNW.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamNW.setStatus("mandatory")


class _FcsnaLvpParamTW_Type(Integer32):
    """Custom type fcsnaLvpParamTW based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 127),
    )


_FcsnaLvpParamTW_Type.__name__ = "Integer32"
_FcsnaLvpParamTW_Object = MibScalar
fcsnaLvpParamTW = _FcsnaLvpParamTW_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 15),
    _FcsnaLvpParamTW_Type()
)
fcsnaLvpParamTW.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamTW.setStatus("mandatory")


class _FcsnaLvpParamRW_Type(Integer32):
    """Custom type fcsnaLvpParamRW based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 127),
    )


_FcsnaLvpParamRW_Type.__name__ = "Integer32"
_FcsnaLvpParamRW_Object = MibScalar
fcsnaLvpParamRW = _FcsnaLvpParamRW_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 16),
    _FcsnaLvpParamRW_Type()
)
fcsnaLvpParamRW.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamRW.setStatus("mandatory")


class _FcsnaLvpParamMinRecallTimer_Type(Integer32):
    """Custom type fcsnaLvpParamMinRecallTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 990),
    )


_FcsnaLvpParamMinRecallTimer_Type.__name__ = "Integer32"
_FcsnaLvpParamMinRecallTimer_Object = MibScalar
fcsnaLvpParamMinRecallTimer = _FcsnaLvpParamMinRecallTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 20),
    _FcsnaLvpParamMinRecallTimer_Type()
)
fcsnaLvpParamMinRecallTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamMinRecallTimer.setStatus("mandatory")


class _FcsnaLvpParamSubscriberNumber_Type(OctetString):
    """Custom type fcsnaLvpParamSubscriberNumber based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FcsnaLvpParamSubscriberNumber_Type.__name__ = "OctetString"
_FcsnaLvpParamSubscriberNumber_Object = MibScalar
fcsnaLvpParamSubscriberNumber = _FcsnaLvpParamSubscriberNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 21),
    _FcsnaLvpParamSubscriberNumber_Type()
)
fcsnaLvpParamSubscriberNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamSubscriberNumber.setStatus("mandatory")


class _FcsnaLvpParamReliableVc_Type(Integer32):
    """Custom type fcsnaLvpParamReliableVc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("check", 4),
          ("clear", 3),
          ("off", 1),
          ("subscribe", 2))
    )


_FcsnaLvpParamReliableVc_Type.__name__ = "Integer32"
_FcsnaLvpParamReliableVc_Object = MibScalar
fcsnaLvpParamReliableVc = _FcsnaLvpParamReliableVc_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 22),
    _FcsnaLvpParamReliableVc_Type()
)
fcsnaLvpParamReliableVc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamReliableVc.setStatus("mandatory")


class _FcsnaLvpParamCompression_Type(Integer32):
    """Custom type fcsnaLvpParamCompression based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bothway", 4),
          ("networkToSubscriber", 2),
          ("off", 1),
          ("subscriberToNetwork", 3))
    )


_FcsnaLvpParamCompression_Type.__name__ = "Integer32"
_FcsnaLvpParamCompression_Object = MibScalar
fcsnaLvpParamCompression = _FcsnaLvpParamCompression_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 30),
    _FcsnaLvpParamCompression_Type()
)
fcsnaLvpParamCompression.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamCompression.setStatus("mandatory")


class _FcsnaLvpParamCompressNegotiation_Type(Integer32):
    """Custom type fcsnaLvpParamCompressNegotiation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onMandatoryCompression", 3),
          ("onOptionalCompression", 2))
    )


_FcsnaLvpParamCompressNegotiation_Type.__name__ = "Integer32"
_FcsnaLvpParamCompressNegotiation_Object = MibScalar
fcsnaLvpParamCompressNegotiation = _FcsnaLvpParamCompressNegotiation_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 31),
    _FcsnaLvpParamCompressNegotiation_Type()
)
fcsnaLvpParamCompressNegotiation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamCompressNegotiation.setStatus("mandatory")


class _FcsnaLvpParamCompressScrambling_Type(Integer32):
    """Custom type fcsnaLvpParamCompressScrambling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcsnaLvpParamCompressScrambling_Type.__name__ = "Integer32"
_FcsnaLvpParamCompressScrambling_Object = MibScalar
fcsnaLvpParamCompressScrambling = _FcsnaLvpParamCompressScrambling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 32),
    _FcsnaLvpParamCompressScrambling_Type()
)
fcsnaLvpParamCompressScrambling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamCompressScrambling.setStatus("mandatory")


class _FcsnaLvpParamCompressMultiPacketsTimer_Type(Integer32):
    """Custom type fcsnaLvpParamCompressMultiPacketsTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1500),
    )


_FcsnaLvpParamCompressMultiPacketsTimer_Type.__name__ = "Integer32"
_FcsnaLvpParamCompressMultiPacketsTimer_Object = MibScalar
fcsnaLvpParamCompressMultiPacketsTimer = _FcsnaLvpParamCompressMultiPacketsTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 33),
    _FcsnaLvpParamCompressMultiPacketsTimer_Type()
)
fcsnaLvpParamCompressMultiPacketsTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamCompressMultiPacketsTimer.setStatus("mandatory")


class _FcsnaLvpParamCos_Type(Integer32):
    """Custom type fcsnaLvpParamCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ubr", 3),
          ("vbr", 1))
    )


_FcsnaLvpParamCos_Type.__name__ = "Integer32"
_FcsnaLvpParamCos_Object = MibScalar
fcsnaLvpParamCos = _FcsnaLvpParamCos_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 40),
    _FcsnaLvpParamCos_Type()
)
fcsnaLvpParamCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamCos.setStatus("mandatory")


class _FcsnaLvpParamCir_Type(Integer32):
    """Custom type fcsnaLvpParamCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(600, 2048000),
    )


_FcsnaLvpParamCir_Type.__name__ = "Integer32"
_FcsnaLvpParamCir_Object = MibScalar
fcsnaLvpParamCir = _FcsnaLvpParamCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 41),
    _FcsnaLvpParamCir_Type()
)
fcsnaLvpParamCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamCir.setStatus("mandatory")


class _FcsnaLvpParamCirMin_Type(Integer32):
    """Custom type fcsnaLvpParamCirMin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FcsnaLvpParamCirMin_Type.__name__ = "Integer32"
_FcsnaLvpParamCirMin_Object = MibScalar
fcsnaLvpParamCirMin = _FcsnaLvpParamCirMin_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 42),
    _FcsnaLvpParamCirMin_Type()
)
fcsnaLvpParamCirMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamCirMin.setStatus("mandatory")


class _FcsnaLvpParamBc_Type(Integer32):
    """Custom type fcsnaLvpParamBc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FcsnaLvpParamBc_Type.__name__ = "Integer32"
_FcsnaLvpParamBc_Object = MibScalar
fcsnaLvpParamBc = _FcsnaLvpParamBc_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 43),
    _FcsnaLvpParamBc_Type()
)
fcsnaLvpParamBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamBc.setStatus("mandatory")


class _FcsnaLvpParamBe_Type(Integer32):
    """Custom type fcsnaLvpParamBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FcsnaLvpParamBe_Type.__name__ = "Integer32"
_FcsnaLvpParamBe_Object = MibScalar
fcsnaLvpParamBe = _FcsnaLvpParamBe_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 44),
    _FcsnaLvpParamBe_Type()
)
fcsnaLvpParamBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpParamBe.setStatus("mandatory")
_FcsnaLvpTrParameters_ObjectIdentity = ObjectIdentity
fcsnaLvpTrParameters = _FcsnaLvpTrParameters_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20)
)


class _FcsnaLvpTrParamLinkType_Type(Integer32):
    """Custom type fcsnaLvpTrParamLinkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("frontal", 1),
          ("remote", 2))
    )


_FcsnaLvpTrParamLinkType_Type.__name__ = "Integer32"
_FcsnaLvpTrParamLinkType_Object = MibScalar
fcsnaLvpTrParamLinkType = _FcsnaLvpTrParamLinkType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 1),
    _FcsnaLvpTrParamLinkType_Type()
)
fcsnaLvpTrParamLinkType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamLinkType.setStatus("mandatory")


class _FcsnaLvpTrParamBroadcastType_Type(Integer32):
    """Custom type fcsnaLvpTrParamBroadcastType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("all-routes", 2),
          ("none", 1),
          ("single-route", 3))
    )


_FcsnaLvpTrParamBroadcastType_Type.__name__ = "Integer32"
_FcsnaLvpTrParamBroadcastType_Object = MibScalar
fcsnaLvpTrParamBroadcastType = _FcsnaLvpTrParamBroadcastType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 2),
    _FcsnaLvpTrParamBroadcastType_Type()
)
fcsnaLvpTrParamBroadcastType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamBroadcastType.setStatus("mandatory")


class _FcsnaLvpTrParamLocalTest_Type(Integer32):
    """Custom type fcsnaLvpTrParamLocalTest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcsnaLvpTrParamLocalTest_Type.__name__ = "Integer32"
_FcsnaLvpTrParamLocalTest_Object = MibScalar
fcsnaLvpTrParamLocalTest = _FcsnaLvpTrParamLocalTest_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 3),
    _FcsnaLvpTrParamLocalTest_Type()
)
fcsnaLvpTrParamLocalTest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamLocalTest.setStatus("mandatory")


class _FcsnaLvpTrParamCallDirection_Type(Integer32):
    """Custom type fcsnaLvpTrParamCallDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("called", 1),
          ("calling", 2))
    )


_FcsnaLvpTrParamCallDirection_Type.__name__ = "Integer32"
_FcsnaLvpTrParamCallDirection_Object = MibScalar
fcsnaLvpTrParamCallDirection = _FcsnaLvpTrParamCallDirection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 4),
    _FcsnaLvpTrParamCallDirection_Type()
)
fcsnaLvpTrParamCallDirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamCallDirection.setStatus("mandatory")


class _FcsnaLvpTrRingNo_Type(Integer32):
    """Custom type fcsnaLvpTrRingNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4095),
    )


_FcsnaLvpTrRingNo_Type.__name__ = "Integer32"
_FcsnaLvpTrRingNo_Object = MibScalar
fcsnaLvpTrRingNo = _FcsnaLvpTrRingNo_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 5),
    _FcsnaLvpTrRingNo_Type()
)
fcsnaLvpTrRingNo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrRingNo.setStatus("mandatory")


class _FcsnaLvpTrBridgeNo_Type(Integer32):
    """Custom type fcsnaLvpTrBridgeNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_FcsnaLvpTrBridgeNo_Type.__name__ = "Integer32"
_FcsnaLvpTrBridgeNo_Object = MibScalar
fcsnaLvpTrBridgeNo = _FcsnaLvpTrBridgeNo_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 6),
    _FcsnaLvpTrBridgeNo_Type()
)
fcsnaLvpTrBridgeNo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrBridgeNo.setStatus("mandatory")


class _FcsnaLvpTrMacAddressTrans_Type(Integer32):
    """Custom type fcsnaLvpTrMacAddressTrans based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcsnaLvpTrMacAddressTrans_Type.__name__ = "Integer32"
_FcsnaLvpTrMacAddressTrans_Object = MibScalar
fcsnaLvpTrMacAddressTrans = _FcsnaLvpTrMacAddressTrans_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 7),
    _FcsnaLvpTrMacAddressTrans_Type()
)
fcsnaLvpTrMacAddressTrans.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrMacAddressTrans.setStatus("mandatory")


class _FcsnaLvpTrParamT1_Type(Integer32):
    """Custom type fcsnaLvpTrParamT1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 25000),
    )


_FcsnaLvpTrParamT1_Type.__name__ = "Integer32"
_FcsnaLvpTrParamT1_Object = MibScalar
fcsnaLvpTrParamT1 = _FcsnaLvpTrParamT1_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 10),
    _FcsnaLvpTrParamT1_Type()
)
fcsnaLvpTrParamT1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamT1.setStatus("mandatory")


class _FcsnaLvpTrParamN2_Type(Integer32):
    """Custom type fcsnaLvpTrParamN2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_FcsnaLvpTrParamN2_Type.__name__ = "Integer32"
_FcsnaLvpTrParamN2_Object = MibScalar
fcsnaLvpTrParamN2 = _FcsnaLvpTrParamN2_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 11),
    _FcsnaLvpTrParamN2_Type()
)
fcsnaLvpTrParamN2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamN2.setStatus("mandatory")


class _FcsnaLvpTrParamT2_Type(Integer32):
    """Custom type fcsnaLvpTrParamT2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 15000),
    )


_FcsnaLvpTrParamT2_Type.__name__ = "Integer32"
_FcsnaLvpTrParamT2_Object = MibScalar
fcsnaLvpTrParamT2 = _FcsnaLvpTrParamT2_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 12),
    _FcsnaLvpTrParamT2_Type()
)
fcsnaLvpTrParamT2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamT2.setStatus("mandatory")


class _FcsnaLvpTrParamN3_Type(Integer32):
    """Custom type fcsnaLvpTrParamN3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_FcsnaLvpTrParamN3_Type.__name__ = "Integer32"
_FcsnaLvpTrParamN3_Object = MibScalar
fcsnaLvpTrParamN3 = _FcsnaLvpTrParamN3_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 13),
    _FcsnaLvpTrParamN3_Type()
)
fcsnaLvpTrParamN3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamN3.setStatus("mandatory")


class _FcsnaLvpTrParamNW_Type(Integer32):
    """Custom type fcsnaLvpTrParamNW based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 127),
    )


_FcsnaLvpTrParamNW_Type.__name__ = "Integer32"
_FcsnaLvpTrParamNW_Object = MibScalar
fcsnaLvpTrParamNW = _FcsnaLvpTrParamNW_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 14),
    _FcsnaLvpTrParamNW_Type()
)
fcsnaLvpTrParamNW.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamNW.setStatus("mandatory")


class _FcsnaLvpTrParamTW_Type(Integer32):
    """Custom type fcsnaLvpTrParamTW based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 127),
    )


_FcsnaLvpTrParamTW_Type.__name__ = "Integer32"
_FcsnaLvpTrParamTW_Object = MibScalar
fcsnaLvpTrParamTW = _FcsnaLvpTrParamTW_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 15),
    _FcsnaLvpTrParamTW_Type()
)
fcsnaLvpTrParamTW.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamTW.setStatus("mandatory")


class _FcsnaLvpTrParamRW_Type(Integer32):
    """Custom type fcsnaLvpTrParamRW based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 127),
    )


_FcsnaLvpTrParamRW_Type.__name__ = "Integer32"
_FcsnaLvpTrParamRW_Object = MibScalar
fcsnaLvpTrParamRW = _FcsnaLvpTrParamRW_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 16),
    _FcsnaLvpTrParamRW_Type()
)
fcsnaLvpTrParamRW.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamRW.setStatus("mandatory")


class _FcsnaLvpTrParamMinRecallTimer_Type(Integer32):
    """Custom type fcsnaLvpTrParamMinRecallTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 990),
    )


_FcsnaLvpTrParamMinRecallTimer_Type.__name__ = "Integer32"
_FcsnaLvpTrParamMinRecallTimer_Object = MibScalar
fcsnaLvpTrParamMinRecallTimer = _FcsnaLvpTrParamMinRecallTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 20),
    _FcsnaLvpTrParamMinRecallTimer_Type()
)
fcsnaLvpTrParamMinRecallTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamMinRecallTimer.setStatus("mandatory")


class _FcsnaLvpTrParamSubscriberNumber_Type(OctetString):
    """Custom type fcsnaLvpTrParamSubscriberNumber based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FcsnaLvpTrParamSubscriberNumber_Type.__name__ = "OctetString"
_FcsnaLvpTrParamSubscriberNumber_Object = MibScalar
fcsnaLvpTrParamSubscriberNumber = _FcsnaLvpTrParamSubscriberNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 21),
    _FcsnaLvpTrParamSubscriberNumber_Type()
)
fcsnaLvpTrParamSubscriberNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamSubscriberNumber.setStatus("mandatory")


class _FcsnaLvpTrParamReliableVc_Type(Integer32):
    """Custom type fcsnaLvpTrParamReliableVc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("check", 4),
          ("clear", 3),
          ("off", 1),
          ("subscribe", 2))
    )


_FcsnaLvpTrParamReliableVc_Type.__name__ = "Integer32"
_FcsnaLvpTrParamReliableVc_Object = MibScalar
fcsnaLvpTrParamReliableVc = _FcsnaLvpTrParamReliableVc_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 22),
    _FcsnaLvpTrParamReliableVc_Type()
)
fcsnaLvpTrParamReliableVc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamReliableVc.setStatus("mandatory")


class _FcsnaLvpTrParamCompression_Type(Integer32):
    """Custom type fcsnaLvpTrParamCompression based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bothway", 4),
          ("networkToSubscriber", 2),
          ("off", 1),
          ("subscriberToNetwork", 3))
    )


_FcsnaLvpTrParamCompression_Type.__name__ = "Integer32"
_FcsnaLvpTrParamCompression_Object = MibScalar
fcsnaLvpTrParamCompression = _FcsnaLvpTrParamCompression_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 30),
    _FcsnaLvpTrParamCompression_Type()
)
fcsnaLvpTrParamCompression.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamCompression.setStatus("mandatory")


class _FcsnaLvpTrParamCompressNegotiation_Type(Integer32):
    """Custom type fcsnaLvpTrParamCompressNegotiation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("onMandatoryCompression", 3),
          ("onOptionalCompression", 2))
    )


_FcsnaLvpTrParamCompressNegotiation_Type.__name__ = "Integer32"
_FcsnaLvpTrParamCompressNegotiation_Object = MibScalar
fcsnaLvpTrParamCompressNegotiation = _FcsnaLvpTrParamCompressNegotiation_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 31),
    _FcsnaLvpTrParamCompressNegotiation_Type()
)
fcsnaLvpTrParamCompressNegotiation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamCompressNegotiation.setStatus("mandatory")


class _FcsnaLvpTrParamCompressScrambling_Type(Integer32):
    """Custom type fcsnaLvpTrParamCompressScrambling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcsnaLvpTrParamCompressScrambling_Type.__name__ = "Integer32"
_FcsnaLvpTrParamCompressScrambling_Object = MibScalar
fcsnaLvpTrParamCompressScrambling = _FcsnaLvpTrParamCompressScrambling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 32),
    _FcsnaLvpTrParamCompressScrambling_Type()
)
fcsnaLvpTrParamCompressScrambling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamCompressScrambling.setStatus("mandatory")


class _FcsnaLvpTrParamCompressMultiPacketsTimer_Type(Integer32):
    """Custom type fcsnaLvpTrParamCompressMultiPacketsTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1500),
    )


_FcsnaLvpTrParamCompressMultiPacketsTimer_Type.__name__ = "Integer32"
_FcsnaLvpTrParamCompressMultiPacketsTimer_Object = MibScalar
fcsnaLvpTrParamCompressMultiPacketsTimer = _FcsnaLvpTrParamCompressMultiPacketsTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 33),
    _FcsnaLvpTrParamCompressMultiPacketsTimer_Type()
)
fcsnaLvpTrParamCompressMultiPacketsTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamCompressMultiPacketsTimer.setStatus("mandatory")


class _FcsnaLvpTrParamCos_Type(Integer32):
    """Custom type fcsnaLvpTrParamCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ubr", 3),
          ("vbr", 1))
    )


_FcsnaLvpTrParamCos_Type.__name__ = "Integer32"
_FcsnaLvpTrParamCos_Object = MibScalar
fcsnaLvpTrParamCos = _FcsnaLvpTrParamCos_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 40),
    _FcsnaLvpTrParamCos_Type()
)
fcsnaLvpTrParamCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamCos.setStatus("mandatory")


class _FcsnaLvpTrParamCir_Type(Integer32):
    """Custom type fcsnaLvpTrParamCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(600, 2048000),
    )


_FcsnaLvpTrParamCir_Type.__name__ = "Integer32"
_FcsnaLvpTrParamCir_Object = MibScalar
fcsnaLvpTrParamCir = _FcsnaLvpTrParamCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 41),
    _FcsnaLvpTrParamCir_Type()
)
fcsnaLvpTrParamCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamCir.setStatus("mandatory")


class _FcsnaLvpTrParamCirMin_Type(Integer32):
    """Custom type fcsnaLvpTrParamCirMin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FcsnaLvpTrParamCirMin_Type.__name__ = "Integer32"
_FcsnaLvpTrParamCirMin_Object = MibScalar
fcsnaLvpTrParamCirMin = _FcsnaLvpTrParamCirMin_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 42),
    _FcsnaLvpTrParamCirMin_Type()
)
fcsnaLvpTrParamCirMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamCirMin.setStatus("mandatory")


class _FcsnaLvpTrParamBc_Type(Integer32):
    """Custom type fcsnaLvpTrParamBc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FcsnaLvpTrParamBc_Type.__name__ = "Integer32"
_FcsnaLvpTrParamBc_Object = MibScalar
fcsnaLvpTrParamBc = _FcsnaLvpTrParamBc_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 43),
    _FcsnaLvpTrParamBc_Type()
)
fcsnaLvpTrParamBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamBc.setStatus("mandatory")


class _FcsnaLvpTrParamBe_Type(Integer32):
    """Custom type fcsnaLvpTrParamBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FcsnaLvpTrParamBe_Type.__name__ = "Integer32"
_FcsnaLvpTrParamBe_Object = MibScalar
fcsnaLvpTrParamBe = _FcsnaLvpTrParamBe_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 44),
    _FcsnaLvpTrParamBe_Type()
)
fcsnaLvpTrParamBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaLvpTrParamBe.setStatus("mandatory")
_FcsnaGeneralParameters_ObjectIdentity = ObjectIdentity
fcsnaGeneralParameters = _FcsnaGeneralParameters_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5)
)
_FcsnaGpRoutingTable_Object = MibTable
fcsnaGpRoutingTable = _FcsnaGpRoutingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1)
)
if mibBuilder.loadTexts:
    fcsnaGpRoutingTable.setStatus("mandatory")
_FcsnaGpRoutingEntry_Object = MibTableRow
fcsnaGpRoutingEntry = _FcsnaGpRoutingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1, 1)
)
fcsnaGpRoutingEntry.setIndexNames(
    (0, "PCE-MIB", "fcsnaGpRoutClusterPuId"),
    (0, "PCE-MIB", "fcsnaGpRoutHostPuId"),
)
if mibBuilder.loadTexts:
    fcsnaGpRoutingEntry.setStatus("mandatory")


class _FcsnaGpRoutClusterPuId_Type(Integer32):
    """Custom type fcsnaGpRoutClusterPuId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 999),
    )


_FcsnaGpRoutClusterPuId_Type.__name__ = "Integer32"
_FcsnaGpRoutClusterPuId_Object = MibTableColumn
fcsnaGpRoutClusterPuId = _FcsnaGpRoutClusterPuId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1, 1, 1),
    _FcsnaGpRoutClusterPuId_Type()
)
fcsnaGpRoutClusterPuId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcsnaGpRoutClusterPuId.setStatus("mandatory")


class _FcsnaGpRoutHostPuId_Type(Integer32):
    """Custom type fcsnaGpRoutHostPuId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1000, 1999),
    )


_FcsnaGpRoutHostPuId_Type.__name__ = "Integer32"
_FcsnaGpRoutHostPuId_Object = MibTableColumn
fcsnaGpRoutHostPuId = _FcsnaGpRoutHostPuId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1, 1, 2),
    _FcsnaGpRoutHostPuId_Type()
)
fcsnaGpRoutHostPuId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcsnaGpRoutHostPuId.setStatus("mandatory")


class _FcsnaGpRoutStatus_Type(Integer32):
    """Custom type fcsnaGpRoutStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcsnaGpRoutStatus_Type.__name__ = "Integer32"
_FcsnaGpRoutStatus_Object = MibTableColumn
fcsnaGpRoutStatus = _FcsnaGpRoutStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1, 1, 3),
    _FcsnaGpRoutStatus_Type()
)
fcsnaGpRoutStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaGpRoutStatus.setStatus("mandatory")


class _FcsnaGpRoutDsap_Type(OctetString):
    """Custom type fcsnaGpRoutDsap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FcsnaGpRoutDsap_Type.__name__ = "OctetString"
_FcsnaGpRoutDsap_Object = MibTableColumn
fcsnaGpRoutDsap = _FcsnaGpRoutDsap_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1, 1, 10),
    _FcsnaGpRoutDsap_Type()
)
fcsnaGpRoutDsap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaGpRoutDsap.setStatus("mandatory")


class _FcsnaGpRoutSsap_Type(OctetString):
    """Custom type fcsnaGpRoutSsap based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FcsnaGpRoutSsap_Type.__name__ = "OctetString"
_FcsnaGpRoutSsap_Object = MibTableColumn
fcsnaGpRoutSsap = _FcsnaGpRoutSsap_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1, 1, 11),
    _FcsnaGpRoutSsap_Type()
)
fcsnaGpRoutSsap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaGpRoutSsap.setStatus("mandatory")


class _FcsnaGpRoutCos_Type(Integer32):
    """Custom type fcsnaGpRoutCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ubr", 3),
          ("vbr", 1),
          ("vbr-rt", 2))
    )


_FcsnaGpRoutCos_Type.__name__ = "Integer32"
_FcsnaGpRoutCos_Object = MibTableColumn
fcsnaGpRoutCos = _FcsnaGpRoutCos_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1, 1, 20),
    _FcsnaGpRoutCos_Type()
)
fcsnaGpRoutCos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaGpRoutCos.setStatus("mandatory")


class _FcsnaGpRoutCir_Type(Integer32):
    """Custom type fcsnaGpRoutCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FcsnaGpRoutCir_Type.__name__ = "Integer32"
_FcsnaGpRoutCir_Object = MibTableColumn
fcsnaGpRoutCir = _FcsnaGpRoutCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1, 1, 21),
    _FcsnaGpRoutCir_Type()
)
fcsnaGpRoutCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaGpRoutCir.setStatus("mandatory")


class _FcsnaGpRoutCirmin_Type(Integer32):
    """Custom type fcsnaGpRoutCirmin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FcsnaGpRoutCirmin_Type.__name__ = "Integer32"
_FcsnaGpRoutCirmin_Object = MibTableColumn
fcsnaGpRoutCirmin = _FcsnaGpRoutCirmin_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1, 1, 22),
    _FcsnaGpRoutCirmin_Type()
)
fcsnaGpRoutCirmin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaGpRoutCirmin.setStatus("mandatory")


class _FcsnaGpRoutBc_Type(Integer32):
    """Custom type fcsnaGpRoutBc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FcsnaGpRoutBc_Type.__name__ = "Integer32"
_FcsnaGpRoutBc_Object = MibTableColumn
fcsnaGpRoutBc = _FcsnaGpRoutBc_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1, 1, 23),
    _FcsnaGpRoutBc_Type()
)
fcsnaGpRoutBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaGpRoutBc.setStatus("mandatory")


class _FcsnaGpRoutBe_Type(Integer32):
    """Custom type fcsnaGpRoutBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FcsnaGpRoutBe_Type.__name__ = "Integer32"
_FcsnaGpRoutBe_Object = MibTableColumn
fcsnaGpRoutBe = _FcsnaGpRoutBe_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1, 1, 24),
    _FcsnaGpRoutBe_Type()
)
fcsnaGpRoutBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaGpRoutBe.setStatus("mandatory")
_FcsnaGpRemotePuTable_Object = MibTable
fcsnaGpRemotePuTable = _FcsnaGpRemotePuTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 2)
)
if mibBuilder.loadTexts:
    fcsnaGpRemotePuTable.setStatus("mandatory")
_FcsnaGpRemotePuEntry_Object = MibTableRow
fcsnaGpRemotePuEntry = _FcsnaGpRemotePuEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 2, 1)
)
fcsnaGpRemotePuEntry.setIndexNames(
    (0, "PCE-MIB", "fcsnaGpRemPuPuId"),
)
if mibBuilder.loadTexts:
    fcsnaGpRemotePuEntry.setStatus("mandatory")


class _FcsnaGpRemPuPuId_Type(Integer32):
    """Custom type fcsnaGpRemPuPuId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1999),
    )


_FcsnaGpRemPuPuId_Type.__name__ = "Integer32"
_FcsnaGpRemPuPuId_Object = MibTableColumn
fcsnaGpRemPuPuId = _FcsnaGpRemPuPuId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 2, 1, 1),
    _FcsnaGpRemPuPuId_Type()
)
fcsnaGpRemPuPuId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcsnaGpRemPuPuId.setStatus("mandatory")


class _FcsnaGpRemPuStatus_Type(Integer32):
    """Custom type fcsnaGpRemPuStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcsnaGpRemPuStatus_Type.__name__ = "Integer32"
_FcsnaGpRemPuStatus_Object = MibTableColumn
fcsnaGpRemPuStatus = _FcsnaGpRemPuStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 2, 1, 2),
    _FcsnaGpRemPuStatus_Type()
)
fcsnaGpRemPuStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaGpRemPuStatus.setStatus("mandatory")


class _FcsnaGpRemPuProtocol_Type(Integer32):
    """Custom type fcsnaGpRemPuProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("frban", 4),
          ("sdlc", 3),
          ("sna-ethernet", 5),
          ("x25", 2))
    )


_FcsnaGpRemPuProtocol_Type.__name__ = "Integer32"
_FcsnaGpRemPuProtocol_Object = MibTableColumn
fcsnaGpRemPuProtocol = _FcsnaGpRemPuProtocol_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 2, 1, 3),
    _FcsnaGpRemPuProtocol_Type()
)
fcsnaGpRemPuProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaGpRemPuProtocol.setStatus("mandatory")
_FcsnaGpSdlcTable_Object = MibTable
fcsnaGpSdlcTable = _FcsnaGpSdlcTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 3)
)
if mibBuilder.loadTexts:
    fcsnaGpSdlcTable.setStatus("mandatory")
_FcsnaGpSdlcEntry_Object = MibTableRow
fcsnaGpSdlcEntry = _FcsnaGpSdlcEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 3, 1)
)
fcsnaGpSdlcEntry.setIndexNames(
    (0, "PCE-MIB", "fcsnaGpSdlcPuId"),
)
if mibBuilder.loadTexts:
    fcsnaGpSdlcEntry.setStatus("mandatory")


class _FcsnaGpSdlcPuId_Type(Integer32):
    """Custom type fcsnaGpSdlcPuId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1999),
    )


_FcsnaGpSdlcPuId_Type.__name__ = "Integer32"
_FcsnaGpSdlcPuId_Object = MibTableColumn
fcsnaGpSdlcPuId = _FcsnaGpSdlcPuId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 3, 1, 1),
    _FcsnaGpSdlcPuId_Type()
)
fcsnaGpSdlcPuId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcsnaGpSdlcPuId.setStatus("mandatory")


class _FcsnaGpSdlcStatus_Type(Integer32):
    """Custom type fcsnaGpSdlcStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcsnaGpSdlcStatus_Type.__name__ = "Integer32"
_FcsnaGpSdlcStatus_Object = MibTableColumn
fcsnaGpSdlcStatus = _FcsnaGpSdlcStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 3, 1, 2),
    _FcsnaGpSdlcStatus_Type()
)
fcsnaGpSdlcStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaGpSdlcStatus.setStatus("mandatory")


class _FcsnaGpSdlcLp_Type(Integer32):
    """Custom type fcsnaGpSdlcLp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 181),
    )


_FcsnaGpSdlcLp_Type.__name__ = "Integer32"
_FcsnaGpSdlcLp_Object = MibTableColumn
fcsnaGpSdlcLp = _FcsnaGpSdlcLp_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 3, 1, 3),
    _FcsnaGpSdlcLp_Type()
)
fcsnaGpSdlcLp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaGpSdlcLp.setStatus("mandatory")


class _FcsnaGpSdlcCluster_Type(OctetString):
    """Custom type fcsnaGpSdlcCluster based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FcsnaGpSdlcCluster_Type.__name__ = "OctetString"
_FcsnaGpSdlcCluster_Object = MibTableColumn
fcsnaGpSdlcCluster = _FcsnaGpSdlcCluster_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 3, 1, 4),
    _FcsnaGpSdlcCluster_Type()
)
fcsnaGpSdlcCluster.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaGpSdlcCluster.setStatus("mandatory")
_FcsnaGpX25Table_Object = MibTable
fcsnaGpX25Table = _FcsnaGpX25Table_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 4)
)
if mibBuilder.loadTexts:
    fcsnaGpX25Table.setStatus("mandatory")
_FcsnaGpX25Entry_Object = MibTableRow
fcsnaGpX25Entry = _FcsnaGpX25Entry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 4, 1)
)
fcsnaGpX25Entry.setIndexNames(
    (0, "PCE-MIB", "fcsnaGpX25PuId"),
)
if mibBuilder.loadTexts:
    fcsnaGpX25Entry.setStatus("mandatory")


class _FcsnaGpX25PuId_Type(Integer32):
    """Custom type fcsnaGpX25PuId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1999),
    )


_FcsnaGpX25PuId_Type.__name__ = "Integer32"
_FcsnaGpX25PuId_Object = MibTableColumn
fcsnaGpX25PuId = _FcsnaGpX25PuId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 4, 1, 1),
    _FcsnaGpX25PuId_Type()
)
fcsnaGpX25PuId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcsnaGpX25PuId.setStatus("mandatory")


class _FcsnaGpX25Status_Type(Integer32):
    """Custom type fcsnaGpX25Status based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcsnaGpX25Status_Type.__name__ = "Integer32"
_FcsnaGpX25Status_Object = MibTableColumn
fcsnaGpX25Status = _FcsnaGpX25Status_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 4, 1, 2),
    _FcsnaGpX25Status_Type()
)
fcsnaGpX25Status.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaGpX25Status.setStatus("mandatory")


class _FcsnaGpX25Address_Type(OctetString):
    """Custom type fcsnaGpX25Address based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FcsnaGpX25Address_Type.__name__ = "OctetString"
_FcsnaGpX25Address_Object = MibTableColumn
fcsnaGpX25Address = _FcsnaGpX25Address_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 4, 1, 3),
    _FcsnaGpX25Address_Type()
)
fcsnaGpX25Address.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaGpX25Address.setStatus("mandatory")
_FcsnaGpLanFrTable_Object = MibTable
fcsnaGpLanFrTable = _FcsnaGpLanFrTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 5)
)
if mibBuilder.loadTexts:
    fcsnaGpLanFrTable.setStatus("mandatory")
_FcsnaGpLanFrEntry_Object = MibTableRow
fcsnaGpLanFrEntry = _FcsnaGpLanFrEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 5, 1)
)
fcsnaGpLanFrEntry.setIndexNames(
    (0, "PCE-MIB", "fcsnaGpLanFrPuId"),
)
if mibBuilder.loadTexts:
    fcsnaGpLanFrEntry.setStatus("mandatory")


class _FcsnaGpLanFrPuId_Type(Integer32):
    """Custom type fcsnaGpLanFrPuId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1999),
    )


_FcsnaGpLanFrPuId_Type.__name__ = "Integer32"
_FcsnaGpLanFrPuId_Object = MibTableColumn
fcsnaGpLanFrPuId = _FcsnaGpLanFrPuId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 5, 1, 1),
    _FcsnaGpLanFrPuId_Type()
)
fcsnaGpLanFrPuId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcsnaGpLanFrPuId.setStatus("mandatory")


class _FcsnaGpLanFrStatus_Type(Integer32):
    """Custom type fcsnaGpLanFrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcsnaGpLanFrStatus_Type.__name__ = "Integer32"
_FcsnaGpLanFrStatus_Object = MibTableColumn
fcsnaGpLanFrStatus = _FcsnaGpLanFrStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 5, 1, 2),
    _FcsnaGpLanFrStatus_Type()
)
fcsnaGpLanFrStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaGpLanFrStatus.setStatus("mandatory")


class _FcsnaGpLanFrMacAddress_Type(OctetString):
    """Custom type fcsnaGpLanFrMacAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_FcsnaGpLanFrMacAddress_Type.__name__ = "OctetString"
_FcsnaGpLanFrMacAddress_Object = MibTableColumn
fcsnaGpLanFrMacAddress = _FcsnaGpLanFrMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 5, 1, 3),
    _FcsnaGpLanFrMacAddress_Type()
)
fcsnaGpLanFrMacAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaGpLanFrMacAddress.setStatus("mandatory")
_FcsnaGpMiscellaneousParameters_ObjectIdentity = ObjectIdentity
fcsnaGpMiscellaneousParameters = _FcsnaGpMiscellaneousParameters_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 10)
)


class _FcsnaGpMiscMacAddrLearningMode_Type(Integer32):
    """Custom type fcsnaGpMiscMacAddrLearningMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcsnaGpMiscMacAddrLearningMode_Type.__name__ = "Integer32"
_FcsnaGpMiscMacAddrLearningMode_Object = MibScalar
fcsnaGpMiscMacAddrLearningMode = _FcsnaGpMiscMacAddrLearningMode_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 10, 1),
    _FcsnaGpMiscMacAddrLearningMode_Type()
)
fcsnaGpMiscMacAddrLearningMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcsnaGpMiscMacAddrLearningMode.setStatus("mandatory")
_FcBridge_ObjectIdentity = ObjectIdentity
fcBridge = _FcBridge_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35)
)


class _FcbBridging_Type(Integer32):
    """Custom type fcbBridging based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("transparentBridge", 2),
          ("transparentBridgeStp", 3))
    )


_FcbBridging_Type.__name__ = "Integer32"
_FcbBridging_Object = MibScalar
fcbBridging = _FcbBridging_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 1),
    _FcbBridging_Type()
)
fcbBridging.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcbBridging.setStatus("mandatory")


class _FcbBridgingBetweenRemoteVp_Type(Integer32):
    """Custom type fcbBridgingBetweenRemoteVp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcbBridgingBetweenRemoteVp_Type.__name__ = "Integer32"
_FcbBridgingBetweenRemoteVp_Object = MibScalar
fcbBridgingBetweenRemoteVp = _FcbBridgingBetweenRemoteVp_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 2),
    _FcbBridgingBetweenRemoteVp_Type()
)
fcbBridgingBetweenRemoteVp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcbBridgingBetweenRemoteVp.setStatus("mandatory")
_FcbTransparentBridge_ObjectIdentity = ObjectIdentity
fcbTransparentBridge = _FcbTransparentBridge_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10)
)
_FcbBrdgVirtualPortTable_Object = MibTable
fcbBrdgVirtualPortTable = _FcbBrdgVirtualPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 1)
)
if mibBuilder.loadTexts:
    fcbBrdgVirtualPortTable.setStatus("mandatory")
_FcbBrdgVirtualPortEntry_Object = MibTableRow
fcbBrdgVirtualPortEntry = _FcbBrdgVirtualPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 1, 1)
)
fcbBrdgVirtualPortEntry.setIndexNames(
    (0, "PCE-MIB", "fcbBrdgVpVirtualPortId"),
)
if mibBuilder.loadTexts:
    fcbBrdgVirtualPortEntry.setStatus("mandatory")


class _FcbBrdgVpVirtualPortId_Type(Integer32):
    """Custom type fcbBrdgVpVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FcbBrdgVpVirtualPortId_Type.__name__ = "Integer32"
_FcbBrdgVpVirtualPortId_Object = MibTableColumn
fcbBrdgVpVirtualPortId = _FcbBrdgVpVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 1, 1, 1),
    _FcbBrdgVpVirtualPortId_Type()
)
fcbBrdgVpVirtualPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcbBrdgVpVirtualPortId.setStatus("mandatory")


class _FcbBrdgVpStatus_Type(Integer32):
    """Custom type fcbBrdgVpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcbBrdgVpStatus_Type.__name__ = "Integer32"
_FcbBrdgVpStatus_Object = MibTableColumn
fcbBrdgVpStatus = _FcbBrdgVpStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 1, 1, 2),
    _FcbBrdgVpStatus_Type()
)
fcbBrdgVpStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcbBrdgVpStatus.setStatus("mandatory")


class _FcbBrdgVpAgingTime_Type(Integer32):
    """Custom type fcbBrdgVpAgingTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_FcbBrdgVpAgingTime_Type.__name__ = "Integer32"
_FcbBrdgVpAgingTime_Object = MibTableColumn
fcbBrdgVpAgingTime = _FcbBrdgVpAgingTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 1, 1, 4),
    _FcbBrdgVpAgingTime_Type()
)
fcbBrdgVpAgingTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcbBrdgVpAgingTime.setStatus("mandatory")


class _FcbBrdgVpBroadcasting_Type(Integer32):
    """Custom type fcbBrdgVpBroadcasting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcbBrdgVpBroadcasting_Type.__name__ = "Integer32"
_FcbBrdgVpBroadcasting_Object = MibTableColumn
fcbBrdgVpBroadcasting = _FcbBrdgVpBroadcasting_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 1, 1, 5),
    _FcbBrdgVpBroadcasting_Type()
)
fcbBrdgVpBroadcasting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcbBrdgVpBroadcasting.setStatus("mandatory")


class _FcbBrdgVpFcsPreservation_Type(Integer32):
    """Custom type fcbBrdgVpFcsPreservation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("offTinygram", 3),
          ("on", 2))
    )


_FcbBrdgVpFcsPreservation_Type.__name__ = "Integer32"
_FcbBrdgVpFcsPreservation_Object = MibTableColumn
fcbBrdgVpFcsPreservation = _FcbBrdgVpFcsPreservation_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 1, 1, 6),
    _FcbBrdgVpFcsPreservation_Type()
)
fcbBrdgVpFcsPreservation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcbBrdgVpFcsPreservation.setStatus("mandatory")
_FcbBrdgRemoteAddressMappingTable_Object = MibTable
fcbBrdgRemoteAddressMappingTable = _FcbBrdgRemoteAddressMappingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 2)
)
if mibBuilder.loadTexts:
    fcbBrdgRemoteAddressMappingTable.setStatus("mandatory")
_FcbBrdgRemoteAddressMappingEntry_Object = MibTableRow
fcbBrdgRemoteAddressMappingEntry = _FcbBrdgRemoteAddressMappingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 2, 1)
)
fcbBrdgRemoteAddressMappingEntry.setIndexNames(
    (0, "PCE-MIB", "fcbBrdgMapMacAddress"),
)
if mibBuilder.loadTexts:
    fcbBrdgRemoteAddressMappingEntry.setStatus("mandatory")


class _FcbBrdgMapMacAddress_Type(OctetString):
    """Custom type fcbBrdgMapMacAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_FcbBrdgMapMacAddress_Type.__name__ = "OctetString"
_FcbBrdgMapMacAddress_Object = MibTableColumn
fcbBrdgMapMacAddress = _FcbBrdgMapMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 2, 1, 1),
    _FcbBrdgMapMacAddress_Type()
)
fcbBrdgMapMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcbBrdgMapMacAddress.setStatus("mandatory")


class _FcbBrdgMapStatus_Type(Integer32):
    """Custom type fcbBrdgMapStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcbBrdgMapStatus_Type.__name__ = "Integer32"
_FcbBrdgMapStatus_Object = MibTableColumn
fcbBrdgMapStatus = _FcbBrdgMapStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 2, 1, 2),
    _FcbBrdgMapStatus_Type()
)
fcbBrdgMapStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcbBrdgMapStatus.setStatus("mandatory")


class _FcbBrdgMapRemoteAddress_Type(OctetString):
    """Custom type fcbBrdgMapRemoteAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FcbBrdgMapRemoteAddress_Type.__name__ = "OctetString"
_FcbBrdgMapRemoteAddress_Object = MibTableColumn
fcbBrdgMapRemoteAddress = _FcbBrdgMapRemoteAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 2, 1, 3),
    _FcbBrdgMapRemoteAddress_Type()
)
fcbBrdgMapRemoteAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcbBrdgMapRemoteAddress.setStatus("mandatory")
_FcbSpanningTreeProtocol_ObjectIdentity = ObjectIdentity
fcbSpanningTreeProtocol = _FcbSpanningTreeProtocol_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 20)
)


class _FcbStpPriority_Type(Integer32):
    """Custom type fcbStpPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_FcbStpPriority_Type.__name__ = "Integer32"
_FcbStpPriority_Object = MibScalar
fcbStpPriority = _FcbStpPriority_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 20, 1),
    _FcbStpPriority_Type()
)
fcbStpPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcbStpPriority.setStatus("mandatory")


class _FcbStpMaxAge_Type(Integer32):
    """Custom type fcbStpMaxAge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(600, 4000),
    )


_FcbStpMaxAge_Type.__name__ = "Integer32"
_FcbStpMaxAge_Object = MibScalar
fcbStpMaxAge = _FcbStpMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 20, 2),
    _FcbStpMaxAge_Type()
)
fcbStpMaxAge.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcbStpMaxAge.setStatus("mandatory")


class _FcbStpHelloTime_Type(Integer32):
    """Custom type fcbStpHelloTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 1000),
    )


_FcbStpHelloTime_Type.__name__ = "Integer32"
_FcbStpHelloTime_Object = MibScalar
fcbStpHelloTime = _FcbStpHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 20, 3),
    _FcbStpHelloTime_Type()
)
fcbStpHelloTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcbStpHelloTime.setStatus("mandatory")


class _FcbStpForwardDelay_Type(Integer32):
    """Custom type fcbStpForwardDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(400, 3000),
    )


_FcbStpForwardDelay_Type.__name__ = "Integer32"
_FcbStpForwardDelay_Object = MibScalar
fcbStpForwardDelay = _FcbStpForwardDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 20, 4),
    _FcbStpForwardDelay_Type()
)
fcbStpForwardDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcbStpForwardDelay.setStatus("mandatory")
_FcbStpVirtualPortTable_Object = MibTable
fcbStpVirtualPortTable = _FcbStpVirtualPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 20, 10)
)
if mibBuilder.loadTexts:
    fcbStpVirtualPortTable.setStatus("mandatory")
_FcbStpVirtualPortEntry_Object = MibTableRow
fcbStpVirtualPortEntry = _FcbStpVirtualPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 20, 10, 1)
)
fcbStpVirtualPortEntry.setIndexNames(
    (0, "PCE-MIB", "fcbStpVpVirtualPortId"),
)
if mibBuilder.loadTexts:
    fcbStpVirtualPortEntry.setStatus("mandatory")


class _FcbStpVpVirtualPortId_Type(Integer32):
    """Custom type fcbStpVpVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FcbStpVpVirtualPortId_Type.__name__ = "Integer32"
_FcbStpVpVirtualPortId_Object = MibTableColumn
fcbStpVpVirtualPortId = _FcbStpVpVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 20, 10, 1, 1),
    _FcbStpVpVirtualPortId_Type()
)
fcbStpVpVirtualPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcbStpVpVirtualPortId.setStatus("mandatory")


class _FcbStpVpPortPriority_Type(Integer32):
    """Custom type fcbStpVpPortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FcbStpVpPortPriority_Type.__name__ = "Integer32"
_FcbStpVpPortPriority_Object = MibTableColumn
fcbStpVpPortPriority = _FcbStpVpPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 20, 10, 1, 2),
    _FcbStpVpPortPriority_Type()
)
fcbStpVpPortPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcbStpVpPortPriority.setStatus("mandatory")


class _FcbStpVpPortPathCost_Type(Integer32):
    """Custom type fcbStpVpPortPathCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_FcbStpVpPortPathCost_Type.__name__ = "Integer32"
_FcbStpVpPortPathCost_Object = MibTableColumn
fcbStpVpPortPathCost = _FcbStpVpPortPathCost_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 20, 10, 1, 3),
    _FcbStpVpPortPathCost_Type()
)
fcbStpVpPortPathCost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcbStpVpPortPathCost.setStatus("mandatory")


class _FcbStpVpBpduEncapsulation_Type(Integer32):
    """Custom type fcbStpVpBpduEncapsulation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("bpdu", 2),
          ("mac", 1))
    )


_FcbStpVpBpduEncapsulation_Type.__name__ = "Integer32"
_FcbStpVpBpduEncapsulation_Object = MibTableColumn
fcbStpVpBpduEncapsulation = _FcbStpVpBpduEncapsulation_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 20, 10, 1, 4),
    _FcbStpVpBpduEncapsulation_Type()
)
fcbStpVpBpduEncapsulation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcbStpVpBpduEncapsulation.setStatus("mandatory")
_FcIpRouter_ObjectIdentity = ObjectIdentity
fcIpRouter = _FcIpRouter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36)
)


class _FciIpRouting_Type(Integer32):
    """Custom type fciIpRouting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciIpRouting_Type.__name__ = "Integer32"
_FciIpRouting_Object = MibScalar
fciIpRouting = _FciIpRouting_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 1),
    _FciIpRouting_Type()
)
fciIpRouting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciIpRouting.setStatus("mandatory")


class _FciFastIpRouting_Type(Integer32):
    """Custom type fciFastIpRouting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciFastIpRouting_Type.__name__ = "Integer32"
_FciFastIpRouting_Object = MibScalar
fciFastIpRouting = _FciFastIpRouting_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 2),
    _FciFastIpRouting_Type()
)
fciFastIpRouting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciFastIpRouting.setStatus("mandatory")


class _FciIcmpRedirection_Type(Integer32):
    """Custom type fciIcmpRedirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciIcmpRedirection_Type.__name__ = "Integer32"
_FciIcmpRedirection_Object = MibScalar
fciIcmpRedirection = _FciIcmpRedirection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 3),
    _FciIcmpRedirection_Type()
)
fciIcmpRedirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciIcmpRedirection.setStatus("mandatory")


class _FciSourceRouting_Type(Integer32):
    """Custom type fciSourceRouting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciSourceRouting_Type.__name__ = "Integer32"
_FciSourceRouting_Object = MibScalar
fciSourceRouting = _FciSourceRouting_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 4),
    _FciSourceRouting_Type()
)
fciSourceRouting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciSourceRouting.setStatus("mandatory")
_FciVirtualPortTable_Object = MibTable
fciVirtualPortTable = _FciVirtualPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 10)
)
if mibBuilder.loadTexts:
    fciVirtualPortTable.setStatus("mandatory")
_FciVirtualPortEntry_Object = MibTableRow
fciVirtualPortEntry = _FciVirtualPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 10, 1)
)
fciVirtualPortEntry.setIndexNames(
    (0, "PCE-MIB", "fciVpVirtualPortId"),
)
if mibBuilder.loadTexts:
    fciVirtualPortEntry.setStatus("mandatory")


class _FciVpVirtualPortId_Type(Integer32):
    """Custom type fciVpVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FciVpVirtualPortId_Type.__name__ = "Integer32"
_FciVpVirtualPortId_Object = MibTableColumn
fciVpVirtualPortId = _FciVpVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 10, 1, 1),
    _FciVpVirtualPortId_Type()
)
fciVpVirtualPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciVpVirtualPortId.setStatus("mandatory")


class _FciVpStatus_Type(Integer32):
    """Custom type fciVpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FciVpStatus_Type.__name__ = "Integer32"
_FciVpStatus_Object = MibTableColumn
fciVpStatus = _FciVpStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 10, 1, 2),
    _FciVpStatus_Type()
)
fciVpStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciVpStatus.setStatus("mandatory")
_FciVpIpAddress_Type = IpAddress
_FciVpIpAddress_Object = MibTableColumn
fciVpIpAddress = _FciVpIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 10, 1, 3),
    _FciVpIpAddress_Type()
)
fciVpIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciVpIpAddress.setStatus("mandatory")
_FciVpNetMask_Type = IpAddress
_FciVpNetMask_Object = MibTableColumn
fciVpNetMask = _FciVpNetMask_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 10, 1, 4),
    _FciVpNetMask_Type()
)
fciVpNetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciVpNetMask.setStatus("mandatory")


class _FciVpMtu_Type(Integer32):
    """Custom type fciVpMtu based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(576, 9180),
    )


_FciVpMtu_Type.__name__ = "Integer32"
_FciVpMtu_Object = MibTableColumn
fciVpMtu = _FciVpMtu_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 10, 1, 5),
    _FciVpMtu_Type()
)
fciVpMtu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciVpMtu.setStatus("mandatory")


class _FciVpProxyArp_Type(Integer32):
    """Custom type fciVpProxyArp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciVpProxyArp_Type.__name__ = "Integer32"
_FciVpProxyArp_Object = MibTableColumn
fciVpProxyArp = _FciVpProxyArp_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 10, 1, 6),
    _FciVpProxyArp_Type()
)
fciVpProxyArp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciVpProxyArp.setStatus("mandatory")


class _FciVpInverseArp_Type(Integer32):
    """Custom type fciVpInverseArp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciVpInverseArp_Type.__name__ = "Integer32"
_FciVpInverseArp_Object = MibTableColumn
fciVpInverseArp = _FciVpInverseArp_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 10, 1, 7),
    _FciVpInverseArp_Type()
)
fciVpInverseArp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciVpInverseArp.setStatus("mandatory")
_FciLocalVirtualPortTable_Object = MibTable
fciLocalVirtualPortTable = _FciLocalVirtualPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 11)
)
if mibBuilder.loadTexts:
    fciLocalVirtualPortTable.setStatus("mandatory")
_FciLocalVirtualPortEntry_Object = MibTableRow
fciLocalVirtualPortEntry = _FciLocalVirtualPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 11, 1)
)
fciLocalVirtualPortEntry.setIndexNames(
    (0, "PCE-MIB", "fciLvpVirtualPortId"),
)
if mibBuilder.loadTexts:
    fciLocalVirtualPortEntry.setStatus("mandatory")


class _FciLvpVirtualPortId_Type(Integer32):
    """Custom type fciLvpVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FciLvpVirtualPortId_Type.__name__ = "Integer32"
_FciLvpVirtualPortId_Object = MibTableColumn
fciLvpVirtualPortId = _FciLvpVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 11, 1, 1),
    _FciLvpVirtualPortId_Type()
)
fciLvpVirtualPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciLvpVirtualPortId.setStatus("mandatory")


class _FciLvpStatus_Type(Integer32):
    """Custom type fciLvpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FciLvpStatus_Type.__name__ = "Integer32"
_FciLvpStatus_Object = MibTableColumn
fciLvpStatus = _FciLvpStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 11, 1, 2),
    _FciLvpStatus_Type()
)
fciLvpStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciLvpStatus.setStatus("mandatory")


class _FciLvpEncapsulation_Type(Integer32):
    """Custom type fciLvpEncapsulation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("ethernet", 1),
          ("ieee802-3", 2),
          ("monoRing", 3),
          ("multiArb", 4),
          ("multiSrb", 5))
    )


_FciLvpEncapsulation_Type.__name__ = "Integer32"
_FciLvpEncapsulation_Object = MibTableColumn
fciLvpEncapsulation = _FciLvpEncapsulation_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 11, 1, 3),
    _FciLvpEncapsulation_Type()
)
fciLvpEncapsulation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciLvpEncapsulation.setStatus("mandatory")
_FciLocalClusterTable_Object = MibTable
fciLocalClusterTable = _FciLocalClusterTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 12)
)
if mibBuilder.loadTexts:
    fciLocalClusterTable.setStatus("mandatory")
_FciLocalClusterEntry_Object = MibTableRow
fciLocalClusterEntry = _FciLocalClusterEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 12, 1)
)
fciLocalClusterEntry.setIndexNames(
    (0, "PCE-MIB", "fciLclVirtualPortId"),
    (0, "PCE-MIB", "fciLclClusterNumber"),
)
if mibBuilder.loadTexts:
    fciLocalClusterEntry.setStatus("mandatory")


class _FciLclVirtualPortId_Type(Integer32):
    """Custom type fciLclVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FciLclVirtualPortId_Type.__name__ = "Integer32"
_FciLclVirtualPortId_Object = MibTableColumn
fciLclVirtualPortId = _FciLclVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 12, 1, 1),
    _FciLclVirtualPortId_Type()
)
fciLclVirtualPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciLclVirtualPortId.setStatus("mandatory")


class _FciLclClusterNumber_Type(Integer32):
    """Custom type fciLclClusterNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FciLclClusterNumber_Type.__name__ = "Integer32"
_FciLclClusterNumber_Object = MibTableColumn
fciLclClusterNumber = _FciLclClusterNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 12, 1, 2),
    _FciLclClusterNumber_Type()
)
fciLclClusterNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciLclClusterNumber.setStatus("mandatory")


class _FciLclStatus_Type(Integer32):
    """Custom type fciLclStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FciLclStatus_Type.__name__ = "Integer32"
_FciLclStatus_Object = MibTableColumn
fciLclStatus = _FciLclStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 12, 1, 3),
    _FciLclStatus_Type()
)
fciLclStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciLclStatus.setStatus("mandatory")
_FciLclVirtualIpAddress_Type = IpAddress
_FciLclVirtualIpAddress_Object = MibTableColumn
fciLclVirtualIpAddress = _FciLclVirtualIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 12, 1, 4),
    _FciLclVirtualIpAddress_Type()
)
fciLclVirtualIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciLclVirtualIpAddress.setStatus("mandatory")


class _FciLclPriority_Type(Integer32):
    """Custom type fciLclPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FciLclPriority_Type.__name__ = "Integer32"
_FciLclPriority_Object = MibTableColumn
fciLclPriority = _FciLclPriority_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 12, 1, 5),
    _FciLclPriority_Type()
)
fciLclPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciLclPriority.setStatus("mandatory")
_FciRemoteNetToMediaTable_Object = MibTable
fciRemoteNetToMediaTable = _FciRemoteNetToMediaTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 15)
)
if mibBuilder.loadTexts:
    fciRemoteNetToMediaTable.setStatus("mandatory")
_FciRemoteNetToMediaEntry_Object = MibTableRow
fciRemoteNetToMediaEntry = _FciRemoteNetToMediaEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 15, 1)
)
fciRemoteNetToMediaEntry.setIndexNames(
    (0, "PCE-MIB", "fciRemIpAddress"),
)
if mibBuilder.loadTexts:
    fciRemoteNetToMediaEntry.setStatus("mandatory")
_FciRemIpAddress_Type = IpAddress
_FciRemIpAddress_Object = MibTableColumn
fciRemIpAddress = _FciRemIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 15, 1, 1),
    _FciRemIpAddress_Type()
)
fciRemIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciRemIpAddress.setStatus("mandatory")


class _FciRemStatus_Type(Integer32):
    """Custom type fciRemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FciRemStatus_Type.__name__ = "Integer32"
_FciRemStatus_Object = MibTableColumn
fciRemStatus = _FciRemStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 15, 1, 2),
    _FciRemStatus_Type()
)
fciRemStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRemStatus.setStatus("mandatory")


class _FciRemRemoteAddress_Type(OctetString):
    """Custom type fciRemRemoteAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FciRemRemoteAddress_Type.__name__ = "OctetString"
_FciRemRemoteAddress_Object = MibTableColumn
fciRemRemoteAddress = _FciRemRemoteAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 15, 1, 3),
    _FciRemRemoteAddress_Type()
)
fciRemRemoteAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRemRemoteAddress.setStatus("mandatory")
_FciNetToMediaTable_Object = MibTable
fciNetToMediaTable = _FciNetToMediaTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 16)
)
if mibBuilder.loadTexts:
    fciNetToMediaTable.setStatus("mandatory")
_FciNetToMediaEntry_Object = MibTableRow
fciNetToMediaEntry = _FciNetToMediaEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 16, 1)
)
fciNetToMediaEntry.setIndexNames(
    (0, "PCE-MIB", "fciNetToMediaIpAddress"),
)
if mibBuilder.loadTexts:
    fciNetToMediaEntry.setStatus("mandatory")
_FciNetToMediaIpAddress_Type = IpAddress
_FciNetToMediaIpAddress_Object = MibTableColumn
fciNetToMediaIpAddress = _FciNetToMediaIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 16, 1, 1),
    _FciNetToMediaIpAddress_Type()
)
fciNetToMediaIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciNetToMediaIpAddress.setStatus("mandatory")


class _FciNetToMediaStatus_Type(Integer32):
    """Custom type fciNetToMediaStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FciNetToMediaStatus_Type.__name__ = "Integer32"
_FciNetToMediaStatus_Object = MibTableColumn
fciNetToMediaStatus = _FciNetToMediaStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 16, 1, 2),
    _FciNetToMediaStatus_Type()
)
fciNetToMediaStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciNetToMediaStatus.setStatus("mandatory")


class _FciNetToMediaMacAddress_Type(OctetString):
    """Custom type fciNetToMediaMacAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_FciNetToMediaMacAddress_Type.__name__ = "OctetString"
_FciNetToMediaMacAddress_Object = MibTableColumn
fciNetToMediaMacAddress = _FciNetToMediaMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 16, 1, 3),
    _FciNetToMediaMacAddress_Type()
)
fciNetToMediaMacAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciNetToMediaMacAddress.setStatus("mandatory")
_FciIpRouteTable_Object = MibTable
fciIpRouteTable = _FciIpRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 20)
)
if mibBuilder.loadTexts:
    fciIpRouteTable.setStatus("mandatory")
_FciIpRouteEntry_Object = MibTableRow
fciIpRouteEntry = _FciIpRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 20, 1)
)
fciIpRouteEntry.setIndexNames(
    (0, "PCE-MIB", "fciRouteDest"),
    (0, "PCE-MIB", "fciRouteMask"),
)
if mibBuilder.loadTexts:
    fciIpRouteEntry.setStatus("mandatory")
_FciRouteDest_Type = IpAddress
_FciRouteDest_Object = MibTableColumn
fciRouteDest = _FciRouteDest_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 20, 1, 1),
    _FciRouteDest_Type()
)
fciRouteDest.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciRouteDest.setStatus("mandatory")
_FciRouteMask_Type = IpAddress
_FciRouteMask_Object = MibTableColumn
fciRouteMask = _FciRouteMask_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 20, 1, 2),
    _FciRouteMask_Type()
)
fciRouteMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciRouteMask.setStatus("mandatory")


class _FciRouteStatus_Type(Integer32):
    """Custom type fciRouteStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FciRouteStatus_Type.__name__ = "Integer32"
_FciRouteStatus_Object = MibTableColumn
fciRouteStatus = _FciRouteStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 20, 1, 3),
    _FciRouteStatus_Type()
)
fciRouteStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRouteStatus.setStatus("mandatory")
_FciRouteNextHop_Type = IpAddress
_FciRouteNextHop_Object = MibTableColumn
fciRouteNextHop = _FciRouteNextHop_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 20, 1, 4),
    _FciRouteNextHop_Type()
)
fciRouteNextHop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRouteNextHop.setStatus("mandatory")


class _FciRouteMetric_Type(Integer32):
    """Custom type fciRouteMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_FciRouteMetric_Type.__name__ = "Integer32"
_FciRouteMetric_Object = MibTableColumn
fciRouteMetric = _FciRouteMetric_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 20, 1, 5),
    _FciRouteMetric_Type()
)
fciRouteMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRouteMetric.setStatus("mandatory")
_FciFlowManagement_ObjectIdentity = ObjectIdentity
fciFlowManagement = _FciFlowManagement_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30)
)
_FciFlowTable_Object = MibTable
fciFlowTable = _FciFlowTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1)
)
if mibBuilder.loadTexts:
    fciFlowTable.setStatus("mandatory")
_FciFlowEntry_Object = MibTableRow
fciFlowEntry = _FciFlowEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1)
)
fciFlowEntry.setIndexNames(
    (0, "PCE-MIB", "fciFlowFlowId"),
)
if mibBuilder.loadTexts:
    fciFlowEntry.setStatus("mandatory")


class _FciFlowFlowId_Type(Integer32):
    """Custom type fciFlowFlowId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FciFlowFlowId_Type.__name__ = "Integer32"
_FciFlowFlowId_Object = MibTableColumn
fciFlowFlowId = _FciFlowFlowId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 1),
    _FciFlowFlowId_Type()
)
fciFlowFlowId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciFlowFlowId.setStatus("mandatory")


class _FciFlowStatus_Type(Integer32):
    """Custom type fciFlowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FciFlowStatus_Type.__name__ = "Integer32"
_FciFlowStatus_Object = MibTableColumn
fciFlowStatus = _FciFlowStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 2),
    _FciFlowStatus_Type()
)
fciFlowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciFlowStatus.setStatus("mandatory")


class _FciFlowType_Type(Integer32):
    """Custom type fciFlowType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FciFlowType_Type.__name__ = "Integer32"
_FciFlowType_Object = MibTableColumn
fciFlowType = _FciFlowType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 3),
    _FciFlowType_Type()
)
fciFlowType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciFlowType.setStatus("mandatory")


class _FciFlowVpId_Type(Integer32):
    """Custom type fciFlowVpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FciFlowVpId_Type.__name__ = "Integer32"
_FciFlowVpId_Object = MibTableColumn
fciFlowVpId = _FciFlowVpId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 5),
    _FciFlowVpId_Type()
)
fciFlowVpId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciFlowVpId.setStatus("mandatory")
_FciFlowSrcIpAddress_Type = IpAddress
_FciFlowSrcIpAddress_Object = MibTableColumn
fciFlowSrcIpAddress = _FciFlowSrcIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 10),
    _FciFlowSrcIpAddress_Type()
)
fciFlowSrcIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciFlowSrcIpAddress.setStatus("mandatory")
_FciFlowSrcMask_Type = IpAddress
_FciFlowSrcMask_Object = MibTableColumn
fciFlowSrcMask = _FciFlowSrcMask_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 11),
    _FciFlowSrcMask_Type()
)
fciFlowSrcMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciFlowSrcMask.setStatus("mandatory")
_FciFlowDestIpAddress_Type = IpAddress
_FciFlowDestIpAddress_Object = MibTableColumn
fciFlowDestIpAddress = _FciFlowDestIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 12),
    _FciFlowDestIpAddress_Type()
)
fciFlowDestIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciFlowDestIpAddress.setStatus("mandatory")
_FciFlowDestMask_Type = IpAddress
_FciFlowDestMask_Object = MibTableColumn
fciFlowDestMask = _FciFlowDestMask_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 13),
    _FciFlowDestMask_Type()
)
fciFlowDestMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciFlowDestMask.setStatus("mandatory")


class _FciFlowProtocol_Type(Integer32):
    """Custom type fciFlowProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FciFlowProtocol_Type.__name__ = "Integer32"
_FciFlowProtocol_Object = MibTableColumn
fciFlowProtocol = _FciFlowProtocol_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 14),
    _FciFlowProtocol_Type()
)
fciFlowProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciFlowProtocol.setStatus("mandatory")


class _FciFlowPortMin_Type(Integer32):
    """Custom type fciFlowPortMin based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_FciFlowPortMin_Type.__name__ = "Integer32"
_FciFlowPortMin_Object = MibTableColumn
fciFlowPortMin = _FciFlowPortMin_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 15),
    _FciFlowPortMin_Type()
)
fciFlowPortMin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciFlowPortMin.setStatus("mandatory")


class _FciFlowPortMax_Type(Integer32):
    """Custom type fciFlowPortMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_FciFlowPortMax_Type.__name__ = "Integer32"
_FciFlowPortMax_Object = MibTableColumn
fciFlowPortMax = _FciFlowPortMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 16),
    _FciFlowPortMax_Type()
)
fciFlowPortMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciFlowPortMax.setStatus("mandatory")


class _FciFlowLengthMax_Type(Integer32):
    """Custom type fciFlowLengthMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_FciFlowLengthMax_Type.__name__ = "Integer32"
_FciFlowLengthMax_Object = MibTableColumn
fciFlowLengthMax = _FciFlowLengthMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 17),
    _FciFlowLengthMax_Type()
)
fciFlowLengthMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciFlowLengthMax.setStatus("mandatory")


class _FciFlowSegmented_Type(Integer32):
    """Custom type fciFlowSegmented based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notChecked", 1),
          ("yes", 3))
    )


_FciFlowSegmented_Type.__name__ = "Integer32"
_FciFlowSegmented_Object = MibTableColumn
fciFlowSegmented = _FciFlowSegmented_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 18),
    _FciFlowSegmented_Type()
)
fciFlowSegmented.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciFlowSegmented.setStatus("mandatory")
_FciFlowAddrSubstituteTable_Object = MibTable
fciFlowAddrSubstituteTable = _FciFlowAddrSubstituteTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 2)
)
if mibBuilder.loadTexts:
    fciFlowAddrSubstituteTable.setStatus("mandatory")
_FciFlowAddrSubstituteEntry_Object = MibTableRow
fciFlowAddrSubstituteEntry = _FciFlowAddrSubstituteEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 2, 1)
)
fciFlowAddrSubstituteEntry.setIndexNames(
    (0, "PCE-MIB", "fciFlowSubstFlowId"),
    (0, "PCE-MIB", "fciFlowSubstDestIpAddress"),
)
if mibBuilder.loadTexts:
    fciFlowAddrSubstituteEntry.setStatus("mandatory")


class _FciFlowSubstFlowId_Type(Integer32):
    """Custom type fciFlowSubstFlowId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FciFlowSubstFlowId_Type.__name__ = "Integer32"
_FciFlowSubstFlowId_Object = MibTableColumn
fciFlowSubstFlowId = _FciFlowSubstFlowId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 2, 1, 1),
    _FciFlowSubstFlowId_Type()
)
fciFlowSubstFlowId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciFlowSubstFlowId.setStatus("mandatory")
_FciFlowSubstDestIpAddress_Type = IpAddress
_FciFlowSubstDestIpAddress_Object = MibTableColumn
fciFlowSubstDestIpAddress = _FciFlowSubstDestIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 2, 1, 2),
    _FciFlowSubstDestIpAddress_Type()
)
fciFlowSubstDestIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciFlowSubstDestIpAddress.setStatus("mandatory")


class _FciFlowSubstStatus_Type(Integer32):
    """Custom type fciFlowSubstStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FciFlowSubstStatus_Type.__name__ = "Integer32"
_FciFlowSubstStatus_Object = MibTableColumn
fciFlowSubstStatus = _FciFlowSubstStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 2, 1, 3),
    _FciFlowSubstStatus_Type()
)
fciFlowSubstStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciFlowSubstStatus.setStatus("mandatory")
_FciFlowRouteTable_Object = MibTable
fciFlowRouteTable = _FciFlowRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 20)
)
if mibBuilder.loadTexts:
    fciFlowRouteTable.setStatus("mandatory")
_FciFlowRouteEntry_Object = MibTableRow
fciFlowRouteEntry = _FciFlowRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 20, 1)
)
fciFlowRouteEntry.setIndexNames(
    (0, "PCE-MIB", "fciFlowRouteFlowId"),
)
if mibBuilder.loadTexts:
    fciFlowRouteEntry.setStatus("mandatory")


class _FciFlowRouteFlowId_Type(Integer32):
    """Custom type fciFlowRouteFlowId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FciFlowRouteFlowId_Type.__name__ = "Integer32"
_FciFlowRouteFlowId_Object = MibTableColumn
fciFlowRouteFlowId = _FciFlowRouteFlowId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 20, 1, 1),
    _FciFlowRouteFlowId_Type()
)
fciFlowRouteFlowId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciFlowRouteFlowId.setStatus("mandatory")


class _FciFlowRouteStatus_Type(Integer32):
    """Custom type fciFlowRouteStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FciFlowRouteStatus_Type.__name__ = "Integer32"
_FciFlowRouteStatus_Object = MibTableColumn
fciFlowRouteStatus = _FciFlowRouteStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 20, 1, 2),
    _FciFlowRouteStatus_Type()
)
fciFlowRouteStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciFlowRouteStatus.setStatus("mandatory")
_FciFlowRouteNextHop_Type = IpAddress
_FciFlowRouteNextHop_Object = MibTableColumn
fciFlowRouteNextHop = _FciFlowRouteNextHop_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 20, 1, 3),
    _FciFlowRouteNextHop_Type()
)
fciFlowRouteNextHop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciFlowRouteNextHop.setStatus("mandatory")
_FciRip_ObjectIdentity = ObjectIdentity
fciRip = _FciRip_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40)
)


class _FciRipAdminStatus_Type(Integer32):
    """Custom type fciRipAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2),
          ("quiet", 3))
    )


_FciRipAdminStatus_Type.__name__ = "Integer32"
_FciRipAdminStatus_Object = MibScalar
fciRipAdminStatus = _FciRipAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 1),
    _FciRipAdminStatus_Type()
)
fciRipAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRipAdminStatus.setStatus("mandatory")


class _FciRipStaticRoutesDistribution_Type(Integer32):
    """Custom type fciRipStaticRoutesDistribution based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciRipStaticRoutesDistribution_Type.__name__ = "Integer32"
_FciRipStaticRoutesDistribution_Object = MibScalar
fciRipStaticRoutesDistribution = _FciRipStaticRoutesDistribution_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 2),
    _FciRipStaticRoutesDistribution_Type()
)
fciRipStaticRoutesDistribution.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRipStaticRoutesDistribution.setStatus("mandatory")


class _FciRipEgpRoutesDistribution_Type(Integer32):
    """Custom type fciRipEgpRoutesDistribution based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciRipEgpRoutesDistribution_Type.__name__ = "Integer32"
_FciRipEgpRoutesDistribution_Object = MibScalar
fciRipEgpRoutesDistribution = _FciRipEgpRoutesDistribution_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 3),
    _FciRipEgpRoutesDistribution_Type()
)
fciRipEgpRoutesDistribution.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRipEgpRoutesDistribution.setStatus("mandatory")


class _FciRipDistributionTimer_Type(Integer32):
    """Custom type fciRipDistributionTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(30, 3600),
    )


_FciRipDistributionTimer_Type.__name__ = "Integer32"
_FciRipDistributionTimer_Object = MibScalar
fciRipDistributionTimer = _FciRipDistributionTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 4),
    _FciRipDistributionTimer_Type()
)
fciRipDistributionTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRipDistributionTimer.setStatus("mandatory")


class _FciRipPreference_Type(Integer32):
    """Custom type fciRipPreference based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FciRipPreference_Type.__name__ = "Integer32"
_FciRipPreference_Object = MibScalar
fciRipPreference = _FciRipPreference_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 5),
    _FciRipPreference_Type()
)
fciRipPreference.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRipPreference.setStatus("mandatory")


class _FciRipOspfRoutesDistribution_Type(Integer32):
    """Custom type fciRipOspfRoutesDistribution based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciRipOspfRoutesDistribution_Type.__name__ = "Integer32"
_FciRipOspfRoutesDistribution_Object = MibScalar
fciRipOspfRoutesDistribution = _FciRipOspfRoutesDistribution_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 6),
    _FciRipOspfRoutesDistribution_Type()
)
fciRipOspfRoutesDistribution.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRipOspfRoutesDistribution.setStatus("mandatory")


class _FciRipOspfRoutesDistributionMetric_Type(Integer32):
    """Custom type fciRipOspfRoutesDistributionMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_FciRipOspfRoutesDistributionMetric_Type.__name__ = "Integer32"
_FciRipOspfRoutesDistributionMetric_Object = MibScalar
fciRipOspfRoutesDistributionMetric = _FciRipOspfRoutesDistributionMetric_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 7),
    _FciRipOspfRoutesDistributionMetric_Type()
)
fciRipOspfRoutesDistributionMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRipOspfRoutesDistributionMetric.setStatus("mandatory")


class _FciRipStaticRoutesDistributionMetric_Type(Integer32):
    """Custom type fciRipStaticRoutesDistributionMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_FciRipStaticRoutesDistributionMetric_Type.__name__ = "Integer32"
_FciRipStaticRoutesDistributionMetric_Object = MibScalar
fciRipStaticRoutesDistributionMetric = _FciRipStaticRoutesDistributionMetric_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 8),
    _FciRipStaticRoutesDistributionMetric_Type()
)
fciRipStaticRoutesDistributionMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRipStaticRoutesDistributionMetric.setStatus("mandatory")
_FciRipVirtualPortTable_Object = MibTable
fciRipVirtualPortTable = _FciRipVirtualPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 10)
)
if mibBuilder.loadTexts:
    fciRipVirtualPortTable.setStatus("mandatory")
_FciRipVirtualPortEntry_Object = MibTableRow
fciRipVirtualPortEntry = _FciRipVirtualPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 10, 1)
)
fciRipVirtualPortEntry.setIndexNames(
    (0, "PCE-MIB", "fciRipVpVirtualPortId"),
)
if mibBuilder.loadTexts:
    fciRipVirtualPortEntry.setStatus("mandatory")


class _FciRipVpVirtualPortId_Type(Integer32):
    """Custom type fciRipVpVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FciRipVpVirtualPortId_Type.__name__ = "Integer32"
_FciRipVpVirtualPortId_Object = MibTableColumn
fciRipVpVirtualPortId = _FciRipVpVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 10, 1, 1),
    _FciRipVpVirtualPortId_Type()
)
fciRipVpVirtualPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciRipVpVirtualPortId.setStatus("mandatory")


class _FciRipVpDistribution_Type(Integer32):
    """Custom type fciRipVpDistribution based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciRipVpDistribution_Type.__name__ = "Integer32"
_FciRipVpDistribution_Object = MibTableColumn
fciRipVpDistribution = _FciRipVpDistribution_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 10, 1, 2),
    _FciRipVpDistribution_Type()
)
fciRipVpDistribution.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRipVpDistribution.setStatus("mandatory")


class _FciRipVpMetricOut_Type(Integer32):
    """Custom type fciRipVpMetricOut based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_FciRipVpMetricOut_Type.__name__ = "Integer32"
_FciRipVpMetricOut_Object = MibTableColumn
fciRipVpMetricOut = _FciRipVpMetricOut_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 10, 1, 3),
    _FciRipVpMetricOut_Type()
)
fciRipVpMetricOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRipVpMetricOut.setStatus("mandatory")


class _FciRipVpRipIn_Type(Integer32):
    """Custom type fciRipVpRipIn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciRipVpRipIn_Type.__name__ = "Integer32"
_FciRipVpRipIn_Object = MibTableColumn
fciRipVpRipIn = _FciRipVpRipIn_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 10, 1, 4),
    _FciRipVpRipIn_Type()
)
fciRipVpRipIn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRipVpRipIn.setStatus("mandatory")


class _FciRipVpMetricIn_Type(Integer32):
    """Custom type fciRipVpMetricIn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_FciRipVpMetricIn_Type.__name__ = "Integer32"
_FciRipVpMetricIn_Object = MibTableColumn
fciRipVpMetricIn = _FciRipVpMetricIn_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 10, 1, 5),
    _FciRipVpMetricIn_Type()
)
fciRipVpMetricIn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRipVpMetricIn.setStatus("mandatory")


class _FciRipVpVersion_Type(Integer32):
    """Custom type fciRipVpVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ripVersion1", 1),
          ("ripVersion2", 2))
    )


_FciRipVpVersion_Type.__name__ = "Integer32"
_FciRipVpVersion_Object = MibTableColumn
fciRipVpVersion = _FciRipVpVersion_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 10, 1, 6),
    _FciRipVpVersion_Type()
)
fciRipVpVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRipVpVersion.setStatus("mandatory")


class _FciRipVpMulticast_Type(Integer32):
    """Custom type fciRipVpMulticast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2),
          ("other", 3))
    )


_FciRipVpMulticast_Type.__name__ = "Integer32"
_FciRipVpMulticast_Object = MibTableColumn
fciRipVpMulticast = _FciRipVpMulticast_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 10, 1, 7),
    _FciRipVpMulticast_Type()
)
fciRipVpMulticast.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRipVpMulticast.setStatus("mandatory")


class _FciRipVpAuthType_Type(Integer32):
    """Custom type fciRipVpAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noAuthentication", 1),
          ("other", 3),
          ("simplePassword", 2))
    )


_FciRipVpAuthType_Type.__name__ = "Integer32"
_FciRipVpAuthType_Object = MibTableColumn
fciRipVpAuthType = _FciRipVpAuthType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 10, 1, 8),
    _FciRipVpAuthType_Type()
)
fciRipVpAuthType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRipVpAuthType.setStatus("mandatory")


class _FciRipVpAuthKey_Type(DisplayString):
    """Custom type fciRipVpAuthKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_FciRipVpAuthKey_Type.__name__ = "DisplayString"
_FciRipVpAuthKey_Object = MibTableColumn
fciRipVpAuthKey = _FciRipVpAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 10, 1, 9),
    _FciRipVpAuthKey_Type()
)
fciRipVpAuthKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRipVpAuthKey.setStatus("mandatory")
_FciRipNeighborTable_Object = MibTable
fciRipNeighborTable = _FciRipNeighborTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 20)
)
if mibBuilder.loadTexts:
    fciRipNeighborTable.setStatus("mandatory")
_FciRipNeighborEntry_Object = MibTableRow
fciRipNeighborEntry = _FciRipNeighborEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 20, 1)
)
fciRipNeighborEntry.setIndexNames(
    (0, "PCE-MIB", "fciRipNeighborIpAddress"),
)
if mibBuilder.loadTexts:
    fciRipNeighborEntry.setStatus("mandatory")
_FciRipNeighborIpAddress_Type = IpAddress
_FciRipNeighborIpAddress_Object = MibTableColumn
fciRipNeighborIpAddress = _FciRipNeighborIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 20, 1, 1),
    _FciRipNeighborIpAddress_Type()
)
fciRipNeighborIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciRipNeighborIpAddress.setStatus("mandatory")


class _FciRipNeighborStatus_Type(Integer32):
    """Custom type fciRipNeighborStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FciRipNeighborStatus_Type.__name__ = "Integer32"
_FciRipNeighborStatus_Object = MibTableColumn
fciRipNeighborStatus = _FciRipNeighborStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 20, 1, 2),
    _FciRipNeighborStatus_Type()
)
fciRipNeighborStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRipNeighborStatus.setStatus("mandatory")


class _FciRipNeighborOutput_Type(Integer32):
    """Custom type fciRipNeighborOutput based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("bck", 3),
          ("bk1", 5),
          ("off", 1),
          ("on", 2),
          ("on1", 4))
    )


_FciRipNeighborOutput_Type.__name__ = "Integer32"
_FciRipNeighborOutput_Object = MibTableColumn
fciRipNeighborOutput = _FciRipNeighborOutput_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 20, 1, 3),
    _FciRipNeighborOutput_Type()
)
fciRipNeighborOutput.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRipNeighborOutput.setStatus("mandatory")


class _FciRipNeighborInput_Type(Integer32):
    """Custom type fciRipNeighborInput based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciRipNeighborInput_Type.__name__ = "Integer32"
_FciRipNeighborInput_Object = MibTableColumn
fciRipNeighborInput = _FciRipNeighborInput_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 20, 1, 4),
    _FciRipNeighborInput_Type()
)
fciRipNeighborInput.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRipNeighborInput.setStatus("mandatory")


class _FciRipNeighborBackupGroup_Type(Integer32):
    """Custom type fciRipNeighborBackupGroup based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FciRipNeighborBackupGroup_Type.__name__ = "Integer32"
_FciRipNeighborBackupGroup_Object = MibTableColumn
fciRipNeighborBackupGroup = _FciRipNeighborBackupGroup_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 20, 1, 5),
    _FciRipNeighborBackupGroup_Type()
)
fciRipNeighborBackupGroup.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRipNeighborBackupGroup.setStatus("mandatory")
_FciRipEgpRoutesDistributionTable_Object = MibTable
fciRipEgpRoutesDistributionTable = _FciRipEgpRoutesDistributionTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 30)
)
if mibBuilder.loadTexts:
    fciRipEgpRoutesDistributionTable.setStatus("mandatory")
_FciRipEgpRoutesDistributionEntry_Object = MibTableRow
fciRipEgpRoutesDistributionEntry = _FciRipEgpRoutesDistributionEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 30, 1)
)
fciRipEgpRoutesDistributionEntry.setIndexNames(
    (0, "PCE-MIB", "fciRipEgpRoutesAsNumber"),
)
if mibBuilder.loadTexts:
    fciRipEgpRoutesDistributionEntry.setStatus("mandatory")


class _FciRipEgpRoutesAsNumber_Type(Integer32):
    """Custom type fciRipEgpRoutesAsNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65534),
    )


_FciRipEgpRoutesAsNumber_Type.__name__ = "Integer32"
_FciRipEgpRoutesAsNumber_Object = MibTableColumn
fciRipEgpRoutesAsNumber = _FciRipEgpRoutesAsNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 30, 1, 1),
    _FciRipEgpRoutesAsNumber_Type()
)
fciRipEgpRoutesAsNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciRipEgpRoutesAsNumber.setStatus("mandatory")


class _FciRipEgpRoutesStatus_Type(Integer32):
    """Custom type fciRipEgpRoutesStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FciRipEgpRoutesStatus_Type.__name__ = "Integer32"
_FciRipEgpRoutesStatus_Object = MibTableColumn
fciRipEgpRoutesStatus = _FciRipEgpRoutesStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 30, 1, 2),
    _FciRipEgpRoutesStatus_Type()
)
fciRipEgpRoutesStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRipEgpRoutesStatus.setStatus("mandatory")


class _FciRipEgpRoutesMetric_Type(Integer32):
    """Custom type fciRipEgpRoutesMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_FciRipEgpRoutesMetric_Type.__name__ = "Integer32"
_FciRipEgpRoutesMetric_Object = MibTableColumn
fciRipEgpRoutesMetric = _FciRipEgpRoutesMetric_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 30, 1, 3),
    _FciRipEgpRoutesMetric_Type()
)
fciRipEgpRoutesMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciRipEgpRoutesMetric.setStatus("mandatory")
_FciOspf_ObjectIdentity = ObjectIdentity
fciOspf = _FciOspf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41)
)
_FciOspfGeneralParameters_ObjectIdentity = ObjectIdentity
fciOspfGeneralParameters = _FciOspfGeneralParameters_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 1)
)


class _FciOspfAdminStatus_Type(Integer32):
    """Custom type fciOspfAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciOspfAdminStatus_Type.__name__ = "Integer32"
_FciOspfAdminStatus_Object = MibScalar
fciOspfAdminStatus = _FciOspfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 1, 1),
    _FciOspfAdminStatus_Type()
)
fciOspfAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfAdminStatus.setStatus("mandatory")
_FciOspfRouterId_Type = IpAddress
_FciOspfRouterId_Object = MibScalar
fciOspfRouterId = _FciOspfRouterId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 1, 2),
    _FciOspfRouterId_Type()
)
fciOspfRouterId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfRouterId.setStatus("mandatory")


class _FciOspfRoutesPreference_Type(Integer32):
    """Custom type fciOspfRoutesPreference based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FciOspfRoutesPreference_Type.__name__ = "Integer32"
_FciOspfRoutesPreference_Object = MibScalar
fciOspfRoutesPreference = _FciOspfRoutesPreference_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 1, 3),
    _FciOspfRoutesPreference_Type()
)
fciOspfRoutesPreference.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfRoutesPreference.setStatus("mandatory")


class _FciOspfAsePreference_Type(Integer32):
    """Custom type fciOspfAsePreference based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FciOspfAsePreference_Type.__name__ = "Integer32"
_FciOspfAsePreference_Object = MibScalar
fciOspfAsePreference = _FciOspfAsePreference_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 1, 4),
    _FciOspfAsePreference_Type()
)
fciOspfAsePreference.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfAsePreference.setStatus("mandatory")
_FciOspfVirtualPortsTable_Object = MibTable
fciOspfVirtualPortsTable = _FciOspfVirtualPortsTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10)
)
if mibBuilder.loadTexts:
    fciOspfVirtualPortsTable.setStatus("mandatory")
_FciOspfVirtualPortsEntry_Object = MibTableRow
fciOspfVirtualPortsEntry = _FciOspfVirtualPortsEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1)
)
fciOspfVirtualPortsEntry.setIndexNames(
    (0, "PCE-MIB", "fciOspfVpId"),
)
if mibBuilder.loadTexts:
    fciOspfVirtualPortsEntry.setStatus("mandatory")


class _FciOspfVpId_Type(Integer32):
    """Custom type fciOspfVpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FciOspfVpId_Type.__name__ = "Integer32"
_FciOspfVpId_Object = MibTableColumn
fciOspfVpId = _FciOspfVpId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 1),
    _FciOspfVpId_Type()
)
fciOspfVpId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciOspfVpId.setStatus("mandatory")


class _FciOspfVpAdminStatus_Type(Integer32):
    """Custom type fciOspfVpAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciOspfVpAdminStatus_Type.__name__ = "Integer32"
_FciOspfVpAdminStatus_Object = MibTableColumn
fciOspfVpAdminStatus = _FciOspfVpAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 2),
    _FciOspfVpAdminStatus_Type()
)
fciOspfVpAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfVpAdminStatus.setStatus("mandatory")
_FciOspfVpAreaId_Type = IpAddress
_FciOspfVpAreaId_Object = MibTableColumn
fciOspfVpAreaId = _FciOspfVpAreaId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 3),
    _FciOspfVpAreaId_Type()
)
fciOspfVpAreaId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfVpAreaId.setStatus("mandatory")


class _FciOspfVpMetric_Type(Integer32):
    """Custom type fciOspfVpMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_FciOspfVpMetric_Type.__name__ = "Integer32"
_FciOspfVpMetric_Object = MibTableColumn
fciOspfVpMetric = _FciOspfVpMetric_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 4),
    _FciOspfVpMetric_Type()
)
fciOspfVpMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfVpMetric.setStatus("mandatory")


class _FciOspfVpType_Type(Integer32):
    """Custom type fciOspfVpType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("broadcast", 1),
          ("nbma", 2),
          ("pointToPoint", 3))
    )


_FciOspfVpType_Type.__name__ = "Integer32"
_FciOspfVpType_Object = MibTableColumn
fciOspfVpType = _FciOspfVpType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 5),
    _FciOspfVpType_Type()
)
fciOspfVpType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfVpType.setStatus("mandatory")


class _FciOspfVpDRPriority_Type(Integer32):
    """Custom type fciOspfVpDRPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FciOspfVpDRPriority_Type.__name__ = "Integer32"
_FciOspfVpDRPriority_Object = MibTableColumn
fciOspfVpDRPriority = _FciOspfVpDRPriority_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 6),
    _FciOspfVpDRPriority_Type()
)
fciOspfVpDRPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfVpDRPriority.setStatus("mandatory")


class _FciOspfVpTransitDelay_Type(Integer32):
    """Custom type fciOspfVpTransitDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_FciOspfVpTransitDelay_Type.__name__ = "Integer32"
_FciOspfVpTransitDelay_Object = MibTableColumn
fciOspfVpTransitDelay = _FciOspfVpTransitDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 7),
    _FciOspfVpTransitDelay_Type()
)
fciOspfVpTransitDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfVpTransitDelay.setStatus("mandatory")


class _FciOspfVpRetransmitInterval_Type(Integer32):
    """Custom type fciOspfVpRetransmitInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_FciOspfVpRetransmitInterval_Type.__name__ = "Integer32"
_FciOspfVpRetransmitInterval_Object = MibTableColumn
fciOspfVpRetransmitInterval = _FciOspfVpRetransmitInterval_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 8),
    _FciOspfVpRetransmitInterval_Type()
)
fciOspfVpRetransmitInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfVpRetransmitInterval.setStatus("mandatory")


class _FciOspfVpHelloInterval_Type(Integer32):
    """Custom type fciOspfVpHelloInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FciOspfVpHelloInterval_Type.__name__ = "Integer32"
_FciOspfVpHelloInterval_Object = MibTableColumn
fciOspfVpHelloInterval = _FciOspfVpHelloInterval_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 9),
    _FciOspfVpHelloInterval_Type()
)
fciOspfVpHelloInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfVpHelloInterval.setStatus("mandatory")


class _FciOspfVpRouterDeadInterval_Type(Integer32):
    """Custom type fciOspfVpRouterDeadInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_FciOspfVpRouterDeadInterval_Type.__name__ = "Integer32"
_FciOspfVpRouterDeadInterval_Object = MibTableColumn
fciOspfVpRouterDeadInterval = _FciOspfVpRouterDeadInterval_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 10),
    _FciOspfVpRouterDeadInterval_Type()
)
fciOspfVpRouterDeadInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfVpRouterDeadInterval.setStatus("mandatory")


class _FciOspfVpPollInterval_Type(Integer32):
    """Custom type fciOspfVpPollInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FciOspfVpPollInterval_Type.__name__ = "Integer32"
_FciOspfVpPollInterval_Object = MibTableColumn
fciOspfVpPollInterval = _FciOspfVpPollInterval_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 11),
    _FciOspfVpPollInterval_Type()
)
fciOspfVpPollInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfVpPollInterval.setStatus("mandatory")


class _FciOspfVpAuthenticationKey_Type(DisplayString):
    """Custom type fciOspfVpAuthenticationKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_FciOspfVpAuthenticationKey_Type.__name__ = "DisplayString"
_FciOspfVpAuthenticationKey_Object = MibTableColumn
fciOspfVpAuthenticationKey = _FciOspfVpAuthenticationKey_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 12),
    _FciOspfVpAuthenticationKey_Type()
)
fciOspfVpAuthenticationKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfVpAuthenticationKey.setStatus("mandatory")
_FciOspfNeighborsTable_Object = MibTable
fciOspfNeighborsTable = _FciOspfNeighborsTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 20)
)
if mibBuilder.loadTexts:
    fciOspfNeighborsTable.setStatus("mandatory")
_FciOspfNeighborsEntry_Object = MibTableRow
fciOspfNeighborsEntry = _FciOspfNeighborsEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 20, 1)
)
fciOspfNeighborsEntry.setIndexNames(
    (0, "PCE-MIB", "fciOspfNeighborIpAddress"),
)
if mibBuilder.loadTexts:
    fciOspfNeighborsEntry.setStatus("mandatory")
_FciOspfNeighborIpAddress_Type = IpAddress
_FciOspfNeighborIpAddress_Object = MibTableColumn
fciOspfNeighborIpAddress = _FciOspfNeighborIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 20, 1, 1),
    _FciOspfNeighborIpAddress_Type()
)
fciOspfNeighborIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciOspfNeighborIpAddress.setStatus("mandatory")


class _FciOspfNeighborStatus_Type(Integer32):
    """Custom type fciOspfNeighborStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FciOspfNeighborStatus_Type.__name__ = "Integer32"
_FciOspfNeighborStatus_Object = MibTableColumn
fciOspfNeighborStatus = _FciOspfNeighborStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 20, 1, 2),
    _FciOspfNeighborStatus_Type()
)
fciOspfNeighborStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfNeighborStatus.setStatus("mandatory")


class _FciOspfNeighborEligibleStatus_Type(Integer32):
    """Custom type fciOspfNeighborEligibleStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciOspfNeighborEligibleStatus_Type.__name__ = "Integer32"
_FciOspfNeighborEligibleStatus_Object = MibTableColumn
fciOspfNeighborEligibleStatus = _FciOspfNeighborEligibleStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 20, 1, 3),
    _FciOspfNeighborEligibleStatus_Type()
)
fciOspfNeighborEligibleStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfNeighborEligibleStatus.setStatus("mandatory")
_FciOspfAreasTable_Object = MibTable
fciOspfAreasTable = _FciOspfAreasTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 30)
)
if mibBuilder.loadTexts:
    fciOspfAreasTable.setStatus("mandatory")
_FciOspfAreasEntry_Object = MibTableRow
fciOspfAreasEntry = _FciOspfAreasEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 30, 1)
)
fciOspfAreasEntry.setIndexNames(
    (0, "PCE-MIB", "fciOspfAreaId"),
)
if mibBuilder.loadTexts:
    fciOspfAreasEntry.setStatus("mandatory")
_FciOspfAreaId_Type = IpAddress
_FciOspfAreaId_Object = MibTableColumn
fciOspfAreaId = _FciOspfAreaId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 30, 1, 1),
    _FciOspfAreaId_Type()
)
fciOspfAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciOspfAreaId.setStatus("mandatory")


class _FciOspfAreaStatus_Type(Integer32):
    """Custom type fciOspfAreaStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FciOspfAreaStatus_Type.__name__ = "Integer32"
_FciOspfAreaStatus_Object = MibTableColumn
fciOspfAreaStatus = _FciOspfAreaStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 30, 1, 2),
    _FciOspfAreaStatus_Type()
)
fciOspfAreaStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfAreaStatus.setStatus("mandatory")


class _FciOspfAreaAuthType_Type(Integer32):
    """Custom type fciOspfAreaAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("simplePassword", 2))
    )


_FciOspfAreaAuthType_Type.__name__ = "Integer32"
_FciOspfAreaAuthType_Object = MibTableColumn
fciOspfAreaAuthType = _FciOspfAreaAuthType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 30, 1, 3),
    _FciOspfAreaAuthType_Type()
)
fciOspfAreaAuthType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfAreaAuthType.setStatus("mandatory")


class _FciOspfAreaStubStatus_Type(Integer32):
    """Custom type fciOspfAreaStubStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciOspfAreaStubStatus_Type.__name__ = "Integer32"
_FciOspfAreaStubStatus_Object = MibTableColumn
fciOspfAreaStubStatus = _FciOspfAreaStubStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 30, 1, 4),
    _FciOspfAreaStubStatus_Type()
)
fciOspfAreaStubStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfAreaStubStatus.setStatus("mandatory")


class _FciOspfAreaStubMetric_Type(Integer32):
    """Custom type fciOspfAreaStubMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_FciOspfAreaStubMetric_Type.__name__ = "Integer32"
_FciOspfAreaStubMetric_Object = MibTableColumn
fciOspfAreaStubMetric = _FciOspfAreaStubMetric_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 30, 1, 5),
    _FciOspfAreaStubMetric_Type()
)
fciOspfAreaStubMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfAreaStubMetric.setStatus("mandatory")
_FciOspfAreaRangesTable_Object = MibTable
fciOspfAreaRangesTable = _FciOspfAreaRangesTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 33)
)
if mibBuilder.loadTexts:
    fciOspfAreaRangesTable.setStatus("mandatory")
_FciOspfAreaRangesEntry_Object = MibTableRow
fciOspfAreaRangesEntry = _FciOspfAreaRangesEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 33, 1)
)
fciOspfAreaRangesEntry.setIndexNames(
    (0, "PCE-MIB", "fciOspfAreaRangeIpAddress"),
    (0, "PCE-MIB", "fciOspfAreaRangeIpMask"),
)
if mibBuilder.loadTexts:
    fciOspfAreaRangesEntry.setStatus("mandatory")
_FciOspfAreaRangeIpAddress_Type = IpAddress
_FciOspfAreaRangeIpAddress_Object = MibTableColumn
fciOspfAreaRangeIpAddress = _FciOspfAreaRangeIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 33, 1, 1),
    _FciOspfAreaRangeIpAddress_Type()
)
fciOspfAreaRangeIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciOspfAreaRangeIpAddress.setStatus("mandatory")
_FciOspfAreaRangeIpMask_Type = IpAddress
_FciOspfAreaRangeIpMask_Object = MibTableColumn
fciOspfAreaRangeIpMask = _FciOspfAreaRangeIpMask_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 33, 1, 2),
    _FciOspfAreaRangeIpMask_Type()
)
fciOspfAreaRangeIpMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciOspfAreaRangeIpMask.setStatus("mandatory")


class _FciOspfAreaRangeStatus_Type(Integer32):
    """Custom type fciOspfAreaRangeStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FciOspfAreaRangeStatus_Type.__name__ = "Integer32"
_FciOspfAreaRangeStatus_Object = MibTableColumn
fciOspfAreaRangeStatus = _FciOspfAreaRangeStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 33, 1, 3),
    _FciOspfAreaRangeStatus_Type()
)
fciOspfAreaRangeStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfAreaRangeStatus.setStatus("mandatory")
_FciOspfAreaRangeAreaId_Type = IpAddress
_FciOspfAreaRangeAreaId_Object = MibTableColumn
fciOspfAreaRangeAreaId = _FciOspfAreaRangeAreaId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 33, 1, 4),
    _FciOspfAreaRangeAreaId_Type()
)
fciOspfAreaRangeAreaId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfAreaRangeAreaId.setStatus("mandatory")


class _FciOspfAreaRangeRestrict_Type(Integer32):
    """Custom type fciOspfAreaRangeRestrict based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciOspfAreaRangeRestrict_Type.__name__ = "Integer32"
_FciOspfAreaRangeRestrict_Object = MibTableColumn
fciOspfAreaRangeRestrict = _FciOspfAreaRangeRestrict_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 33, 1, 5),
    _FciOspfAreaRangeRestrict_Type()
)
fciOspfAreaRangeRestrict.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfAreaRangeRestrict.setStatus("mandatory")
_FciOspfVirtualLinksTable_Object = MibTable
fciOspfVirtualLinksTable = _FciOspfVirtualLinksTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 36)
)
if mibBuilder.loadTexts:
    fciOspfVirtualLinksTable.setStatus("mandatory")
_FciOspfVirtualLinksEntry_Object = MibTableRow
fciOspfVirtualLinksEntry = _FciOspfVirtualLinksEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 36, 1)
)
fciOspfVirtualLinksEntry.setIndexNames(
    (0, "PCE-MIB", "fciOspfVlNeighborId"),
    (0, "PCE-MIB", "fciOspfVlTransitAreaId"),
)
if mibBuilder.loadTexts:
    fciOspfVirtualLinksEntry.setStatus("mandatory")
_FciOspfVlNeighborId_Type = IpAddress
_FciOspfVlNeighborId_Object = MibTableColumn
fciOspfVlNeighborId = _FciOspfVlNeighborId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 36, 1, 1),
    _FciOspfVlNeighborId_Type()
)
fciOspfVlNeighborId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciOspfVlNeighborId.setStatus("mandatory")
_FciOspfVlTransitAreaId_Type = IpAddress
_FciOspfVlTransitAreaId_Object = MibTableColumn
fciOspfVlTransitAreaId = _FciOspfVlTransitAreaId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 36, 1, 2),
    _FciOspfVlTransitAreaId_Type()
)
fciOspfVlTransitAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciOspfVlTransitAreaId.setStatus("mandatory")


class _FciOspfVlStatus_Type(Integer32):
    """Custom type fciOspfVlStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FciOspfVlStatus_Type.__name__ = "Integer32"
_FciOspfVlStatus_Object = MibTableColumn
fciOspfVlStatus = _FciOspfVlStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 36, 1, 3),
    _FciOspfVlStatus_Type()
)
fciOspfVlStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfVlStatus.setStatus("mandatory")


class _FciOspfVlDRPriority_Type(Integer32):
    """Custom type fciOspfVlDRPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FciOspfVlDRPriority_Type.__name__ = "Integer32"
_FciOspfVlDRPriority_Object = MibTableColumn
fciOspfVlDRPriority = _FciOspfVlDRPriority_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 36, 1, 4),
    _FciOspfVlDRPriority_Type()
)
fciOspfVlDRPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfVlDRPriority.setStatus("mandatory")


class _FciOspfVlTransitDelay_Type(Integer32):
    """Custom type fciOspfVlTransitDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_FciOspfVlTransitDelay_Type.__name__ = "Integer32"
_FciOspfVlTransitDelay_Object = MibTableColumn
fciOspfVlTransitDelay = _FciOspfVlTransitDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 36, 1, 5),
    _FciOspfVlTransitDelay_Type()
)
fciOspfVlTransitDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfVlTransitDelay.setStatus("mandatory")


class _FciOspfVlRetransmitInterval_Type(Integer32):
    """Custom type fciOspfVlRetransmitInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_FciOspfVlRetransmitInterval_Type.__name__ = "Integer32"
_FciOspfVlRetransmitInterval_Object = MibTableColumn
fciOspfVlRetransmitInterval = _FciOspfVlRetransmitInterval_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 36, 1, 6),
    _FciOspfVlRetransmitInterval_Type()
)
fciOspfVlRetransmitInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfVlRetransmitInterval.setStatus("mandatory")


class _FciOspfVlHelloInterval_Type(Integer32):
    """Custom type fciOspfVlHelloInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FciOspfVlHelloInterval_Type.__name__ = "Integer32"
_FciOspfVlHelloInterval_Object = MibTableColumn
fciOspfVlHelloInterval = _FciOspfVlHelloInterval_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 36, 1, 7),
    _FciOspfVlHelloInterval_Type()
)
fciOspfVlHelloInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfVlHelloInterval.setStatus("mandatory")


class _FciOspfVlRouterDeadInterval_Type(Integer32):
    """Custom type fciOspfVlRouterDeadInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_FciOspfVlRouterDeadInterval_Type.__name__ = "Integer32"
_FciOspfVlRouterDeadInterval_Object = MibTableColumn
fciOspfVlRouterDeadInterval = _FciOspfVlRouterDeadInterval_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 36, 1, 8),
    _FciOspfVlRouterDeadInterval_Type()
)
fciOspfVlRouterDeadInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfVlRouterDeadInterval.setStatus("mandatory")


class _FciOspfVlAuthenticationKey_Type(DisplayString):
    """Custom type fciOspfVlAuthenticationKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_FciOspfVlAuthenticationKey_Type.__name__ = "DisplayString"
_FciOspfVlAuthenticationKey_Object = MibTableColumn
fciOspfVlAuthenticationKey = _FciOspfVlAuthenticationKey_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 36, 1, 9),
    _FciOspfVlAuthenticationKey_Type()
)
fciOspfVlAuthenticationKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfVlAuthenticationKey.setStatus("mandatory")
_FciOspfExportingGroup_ObjectIdentity = ObjectIdentity
fciOspfExportingGroup = _FciOspfExportingGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 40)
)


class _FciOspfAseExportInterval_Type(Integer32):
    """Custom type fciOspfAseExportInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FciOspfAseExportInterval_Type.__name__ = "Integer32"
_FciOspfAseExportInterval_Object = MibScalar
fciOspfAseExportInterval = _FciOspfAseExportInterval_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 40, 1),
    _FciOspfAseExportInterval_Type()
)
fciOspfAseExportInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfAseExportInterval.setStatus("mandatory")


class _FciOspfAseExportLimit_Type(Integer32):
    """Custom type fciOspfAseExportLimit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FciOspfAseExportLimit_Type.__name__ = "Integer32"
_FciOspfAseExportLimit_Object = MibScalar
fciOspfAseExportLimit = _FciOspfAseExportLimit_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 40, 2),
    _FciOspfAseExportLimit_Type()
)
fciOspfAseExportLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfAseExportLimit.setStatus("mandatory")


class _FciOspfAseExportStaticsStatus_Type(Integer32):
    """Custom type fciOspfAseExportStaticsStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciOspfAseExportStaticsStatus_Type.__name__ = "Integer32"
_FciOspfAseExportStaticsStatus_Object = MibScalar
fciOspfAseExportStaticsStatus = _FciOspfAseExportStaticsStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 40, 3),
    _FciOspfAseExportStaticsStatus_Type()
)
fciOspfAseExportStaticsStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfAseExportStaticsStatus.setStatus("mandatory")


class _FciOspfAseExportStaticsMetric_Type(Integer32):
    """Custom type fciOspfAseExportStaticsMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_FciOspfAseExportStaticsMetric_Type.__name__ = "Integer32"
_FciOspfAseExportStaticsMetric_Object = MibScalar
fciOspfAseExportStaticsMetric = _FciOspfAseExportStaticsMetric_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 40, 4),
    _FciOspfAseExportStaticsMetric_Type()
)
fciOspfAseExportStaticsMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfAseExportStaticsMetric.setStatus("mandatory")


class _FciOspfAseExportStaticsTag_Type(Integer32):
    """Custom type fciOspfAseExportStaticsTag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483648),
    )


_FciOspfAseExportStaticsTag_Type.__name__ = "Integer32"
_FciOspfAseExportStaticsTag_Object = MibScalar
fciOspfAseExportStaticsTag = _FciOspfAseExportStaticsTag_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 40, 5),
    _FciOspfAseExportStaticsTag_Type()
)
fciOspfAseExportStaticsTag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfAseExportStaticsTag.setStatus("mandatory")


class _FciOspfAseExportStaticsType_Type(Integer32):
    """Custom type fciOspfAseExportStaticsType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_FciOspfAseExportStaticsType_Type.__name__ = "Integer32"
_FciOspfAseExportStaticsType_Object = MibScalar
fciOspfAseExportStaticsType = _FciOspfAseExportStaticsType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 40, 6),
    _FciOspfAseExportStaticsType_Type()
)
fciOspfAseExportStaticsType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfAseExportStaticsType.setStatus("mandatory")


class _FciOspfAseExportRipStatus_Type(Integer32):
    """Custom type fciOspfAseExportRipStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciOspfAseExportRipStatus_Type.__name__ = "Integer32"
_FciOspfAseExportRipStatus_Object = MibScalar
fciOspfAseExportRipStatus = _FciOspfAseExportRipStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 40, 7),
    _FciOspfAseExportRipStatus_Type()
)
fciOspfAseExportRipStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfAseExportRipStatus.setStatus("mandatory")


class _FciOspfAseExportRipMetric_Type(Integer32):
    """Custom type fciOspfAseExportRipMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_FciOspfAseExportRipMetric_Type.__name__ = "Integer32"
_FciOspfAseExportRipMetric_Object = MibScalar
fciOspfAseExportRipMetric = _FciOspfAseExportRipMetric_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 40, 8),
    _FciOspfAseExportRipMetric_Type()
)
fciOspfAseExportRipMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfAseExportRipMetric.setStatus("mandatory")


class _FciOspfAseExportRipTag_Type(Integer32):
    """Custom type fciOspfAseExportRipTag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483648),
    )


_FciOspfAseExportRipTag_Type.__name__ = "Integer32"
_FciOspfAseExportRipTag_Object = MibScalar
fciOspfAseExportRipTag = _FciOspfAseExportRipTag_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 40, 9),
    _FciOspfAseExportRipTag_Type()
)
fciOspfAseExportRipTag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfAseExportRipTag.setStatus("mandatory")


class _FciOspfAseExportRipType_Type(Integer32):
    """Custom type fciOspfAseExportRipType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_FciOspfAseExportRipType_Type.__name__ = "Integer32"
_FciOspfAseExportRipType_Object = MibScalar
fciOspfAseExportRipType = _FciOspfAseExportRipType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 40, 10),
    _FciOspfAseExportRipType_Type()
)
fciOspfAseExportRipType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciOspfAseExportRipType.setStatus("mandatory")
_FciEgp_ObjectIdentity = ObjectIdentity
fciEgp = _FciEgp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45)
)


class _FciEgpAdminStatus_Type(Integer32):
    """Custom type fciEgpAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciEgpAdminStatus_Type.__name__ = "Integer32"
_FciEgpAdminStatus_Object = MibScalar
fciEgpAdminStatus = _FciEgpAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 1),
    _FciEgpAdminStatus_Type()
)
fciEgpAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciEgpAdminStatus.setStatus("mandatory")


class _FciEgpAutonomousSystemNumber_Type(Integer32):
    """Custom type fciEgpAutonomousSystemNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65534),
    )


_FciEgpAutonomousSystemNumber_Type.__name__ = "Integer32"
_FciEgpAutonomousSystemNumber_Object = MibScalar
fciEgpAutonomousSystemNumber = _FciEgpAutonomousSystemNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 2),
    _FciEgpAutonomousSystemNumber_Type()
)
fciEgpAutonomousSystemNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciEgpAutonomousSystemNumber.setStatus("mandatory")


class _FciEgpStaticRoutesDistribution_Type(Integer32):
    """Custom type fciEgpStaticRoutesDistribution based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciEgpStaticRoutesDistribution_Type.__name__ = "Integer32"
_FciEgpStaticRoutesDistribution_Object = MibScalar
fciEgpStaticRoutesDistribution = _FciEgpStaticRoutesDistribution_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 3),
    _FciEgpStaticRoutesDistribution_Type()
)
fciEgpStaticRoutesDistribution.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciEgpStaticRoutesDistribution.setStatus("mandatory")


class _FciEgpRipRoutesDistribution_Type(Integer32):
    """Custom type fciEgpRipRoutesDistribution based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciEgpRipRoutesDistribution_Type.__name__ = "Integer32"
_FciEgpRipRoutesDistribution_Object = MibScalar
fciEgpRipRoutesDistribution = _FciEgpRipRoutesDistribution_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 4),
    _FciEgpRipRoutesDistribution_Type()
)
fciEgpRipRoutesDistribution.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciEgpRipRoutesDistribution.setStatus("mandatory")


class _FciEgpMetricDistribution_Type(Integer32):
    """Custom type fciEgpMetricDistribution based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FciEgpMetricDistribution_Type.__name__ = "Integer32"
_FciEgpMetricDistribution_Object = MibScalar
fciEgpMetricDistribution = _FciEgpMetricDistribution_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 5),
    _FciEgpMetricDistribution_Type()
)
fciEgpMetricDistribution.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciEgpMetricDistribution.setStatus("mandatory")
_FciEgpNeighborTable_Object = MibTable
fciEgpNeighborTable = _FciEgpNeighborTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 10)
)
if mibBuilder.loadTexts:
    fciEgpNeighborTable.setStatus("mandatory")
_FciEgpNeighborEntry_Object = MibTableRow
fciEgpNeighborEntry = _FciEgpNeighborEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 10, 1)
)
fciEgpNeighborEntry.setIndexNames(
    (0, "PCE-MIB", "fciEgpNeighborIpAddress"),
)
if mibBuilder.loadTexts:
    fciEgpNeighborEntry.setStatus("mandatory")
_FciEgpNeighborIpAddress_Type = IpAddress
_FciEgpNeighborIpAddress_Object = MibTableColumn
fciEgpNeighborIpAddress = _FciEgpNeighborIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 10, 1, 1),
    _FciEgpNeighborIpAddress_Type()
)
fciEgpNeighborIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciEgpNeighborIpAddress.setStatus("mandatory")


class _FciEgpNeighborStatus_Type(Integer32):
    """Custom type fciEgpNeighborStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FciEgpNeighborStatus_Type.__name__ = "Integer32"
_FciEgpNeighborStatus_Object = MibTableColumn
fciEgpNeighborStatus = _FciEgpNeighborStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 10, 1, 2),
    _FciEgpNeighborStatus_Type()
)
fciEgpNeighborStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciEgpNeighborStatus.setStatus("mandatory")


class _FciEgpNeighborAsNumber_Type(Integer32):
    """Custom type fciEgpNeighborAsNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65534),
    )


_FciEgpNeighborAsNumber_Type.__name__ = "Integer32"
_FciEgpNeighborAsNumber_Object = MibTableColumn
fciEgpNeighborAsNumber = _FciEgpNeighborAsNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 10, 1, 3),
    _FciEgpNeighborAsNumber_Type()
)
fciEgpNeighborAsNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciEgpNeighborAsNumber.setStatus("mandatory")
_FciEgpTargetAsDistributionTable_Object = MibTable
fciEgpTargetAsDistributionTable = _FciEgpTargetAsDistributionTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 15)
)
if mibBuilder.loadTexts:
    fciEgpTargetAsDistributionTable.setStatus("mandatory")
_FciEgpTargetAsDistributionEntry_Object = MibTableRow
fciEgpTargetAsDistributionEntry = _FciEgpTargetAsDistributionEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 15, 1)
)
fciEgpTargetAsDistributionEntry.setIndexNames(
    (0, "PCE-MIB", "fciEgpTargetAsNumber"),
)
if mibBuilder.loadTexts:
    fciEgpTargetAsDistributionEntry.setStatus("mandatory")


class _FciEgpTargetAsNumber_Type(Integer32):
    """Custom type fciEgpTargetAsNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65534),
    )


_FciEgpTargetAsNumber_Type.__name__ = "Integer32"
_FciEgpTargetAsNumber_Object = MibTableColumn
fciEgpTargetAsNumber = _FciEgpTargetAsNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 15, 1, 1),
    _FciEgpTargetAsNumber_Type()
)
fciEgpTargetAsNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciEgpTargetAsNumber.setStatus("mandatory")


class _FciEgpTargetAsStatus_Type(Integer32):
    """Custom type fciEgpTargetAsStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FciEgpTargetAsStatus_Type.__name__ = "Integer32"
_FciEgpTargetAsStatus_Object = MibTableColumn
fciEgpTargetAsStatus = _FciEgpTargetAsStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 15, 1, 2),
    _FciEgpTargetAsStatus_Type()
)
fciEgpTargetAsStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciEgpTargetAsStatus.setStatus("mandatory")
_FciSnmp_ObjectIdentity = ObjectIdentity
fciSnmp = _FciSnmp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50)
)


class _FciSnmpCommunityStringReadOnly_Type(DisplayString):
    """Custom type fciSnmpCommunityStringReadOnly based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 14),
    )


_FciSnmpCommunityStringReadOnly_Type.__name__ = "DisplayString"
_FciSnmpCommunityStringReadOnly_Object = MibScalar
fciSnmpCommunityStringReadOnly = _FciSnmpCommunityStringReadOnly_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 1),
    _FciSnmpCommunityStringReadOnly_Type()
)
fciSnmpCommunityStringReadOnly.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciSnmpCommunityStringReadOnly.setStatus("mandatory")


class _FciSnmpCommunityStringReadWrite_Type(DisplayString):
    """Custom type fciSnmpCommunityStringReadWrite based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 14),
    )


_FciSnmpCommunityStringReadWrite_Type.__name__ = "DisplayString"
_FciSnmpCommunityStringReadWrite_Object = MibScalar
fciSnmpCommunityStringReadWrite = _FciSnmpCommunityStringReadWrite_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 2),
    _FciSnmpCommunityStringReadWrite_Type()
)
fciSnmpCommunityStringReadWrite.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciSnmpCommunityStringReadWrite.setStatus("mandatory")


class _FciSnmpCommunityStringTrap_Type(DisplayString):
    """Custom type fciSnmpCommunityStringTrap based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 14),
    )


_FciSnmpCommunityStringTrap_Type.__name__ = "DisplayString"
_FciSnmpCommunityStringTrap_Object = MibScalar
fciSnmpCommunityStringTrap = _FciSnmpCommunityStringTrap_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 3),
    _FciSnmpCommunityStringTrap_Type()
)
fciSnmpCommunityStringTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciSnmpCommunityStringTrap.setStatus("mandatory")


class _FciSnmpAuthenticationFailureTrap_Type(Integer32):
    """Custom type fciSnmpAuthenticationFailureTrap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciSnmpAuthenticationFailureTrap_Type.__name__ = "Integer32"
_FciSnmpAuthenticationFailureTrap_Object = MibScalar
fciSnmpAuthenticationFailureTrap = _FciSnmpAuthenticationFailureTrap_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 5),
    _FciSnmpAuthenticationFailureTrap_Type()
)
fciSnmpAuthenticationFailureTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciSnmpAuthenticationFailureTrap.setStatus("mandatory")


class _FciSnmpModule0TrapSourceAddrVpId_Type(Integer32):
    """Custom type fciSnmpModule0TrapSourceAddrVpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FciSnmpModule0TrapSourceAddrVpId_Type.__name__ = "Integer32"
_FciSnmpModule0TrapSourceAddrVpId_Object = MibScalar
fciSnmpModule0TrapSourceAddrVpId = _FciSnmpModule0TrapSourceAddrVpId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 10),
    _FciSnmpModule0TrapSourceAddrVpId_Type()
)
fciSnmpModule0TrapSourceAddrVpId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciSnmpModule0TrapSourceAddrVpId.setStatus("mandatory")


class _FciSnmpModule1TrapSourceAddrVpId_Type(Integer32):
    """Custom type fciSnmpModule1TrapSourceAddrVpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FciSnmpModule1TrapSourceAddrVpId_Type.__name__ = "Integer32"
_FciSnmpModule1TrapSourceAddrVpId_Object = MibScalar
fciSnmpModule1TrapSourceAddrVpId = _FciSnmpModule1TrapSourceAddrVpId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 11),
    _FciSnmpModule1TrapSourceAddrVpId_Type()
)
fciSnmpModule1TrapSourceAddrVpId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciSnmpModule1TrapSourceAddrVpId.setStatus("mandatory")


class _FciSnmpModule2TrapSourceAddrVpId_Type(Integer32):
    """Custom type fciSnmpModule2TrapSourceAddrVpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FciSnmpModule2TrapSourceAddrVpId_Type.__name__ = "Integer32"
_FciSnmpModule2TrapSourceAddrVpId_Object = MibScalar
fciSnmpModule2TrapSourceAddrVpId = _FciSnmpModule2TrapSourceAddrVpId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 12),
    _FciSnmpModule2TrapSourceAddrVpId_Type()
)
fciSnmpModule2TrapSourceAddrVpId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciSnmpModule2TrapSourceAddrVpId.setStatus("mandatory")


class _FciSnmpManagerFiltering_Type(Integer32):
    """Custom type fciSnmpManagerFiltering based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciSnmpManagerFiltering_Type.__name__ = "Integer32"
_FciSnmpManagerFiltering_Object = MibScalar
fciSnmpManagerFiltering = _FciSnmpManagerFiltering_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 15),
    _FciSnmpManagerFiltering_Type()
)
fciSnmpManagerFiltering.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciSnmpManagerFiltering.setStatus("mandatory")
_FciSnmpManagerTable_Object = MibTable
fciSnmpManagerTable = _FciSnmpManagerTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 20)
)
if mibBuilder.loadTexts:
    fciSnmpManagerTable.setStatus("mandatory")
_FciSnmpManagerEntry_Object = MibTableRow
fciSnmpManagerEntry = _FciSnmpManagerEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 20, 1)
)
fciSnmpManagerEntry.setIndexNames(
    (0, "PCE-MIB", "fciSnmpManagerIpAddress"),
)
if mibBuilder.loadTexts:
    fciSnmpManagerEntry.setStatus("mandatory")
_FciSnmpManagerIpAddress_Type = IpAddress
_FciSnmpManagerIpAddress_Object = MibTableColumn
fciSnmpManagerIpAddress = _FciSnmpManagerIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 20, 1, 1),
    _FciSnmpManagerIpAddress_Type()
)
fciSnmpManagerIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciSnmpManagerIpAddress.setStatus("mandatory")


class _FciSnmpManagerStatus_Type(Integer32):
    """Custom type fciSnmpManagerStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FciSnmpManagerStatus_Type.__name__ = "Integer32"
_FciSnmpManagerStatus_Object = MibTableColumn
fciSnmpManagerStatus = _FciSnmpManagerStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 20, 1, 2),
    _FciSnmpManagerStatus_Type()
)
fciSnmpManagerStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciSnmpManagerStatus.setStatus("mandatory")


class _FciSnmpManagerSendTraps_Type(Integer32):
    """Custom type fciSnmpManagerSendTraps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FciSnmpManagerSendTraps_Type.__name__ = "Integer32"
_FciSnmpManagerSendTraps_Object = MibTableColumn
fciSnmpManagerSendTraps = _FciSnmpManagerSendTraps_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 20, 1, 3),
    _FciSnmpManagerSendTraps_Type()
)
fciSnmpManagerSendTraps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciSnmpManagerSendTraps.setStatus("mandatory")


class _FciSnmpManagerTrapsUdpPort_Type(Integer32):
    """Custom type fciSnmpManagerTrapsUdpPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_FciSnmpManagerTrapsUdpPort_Type.__name__ = "Integer32"
_FciSnmpManagerTrapsUdpPort_Object = MibTableColumn
fciSnmpManagerTrapsUdpPort = _FciSnmpManagerTrapsUdpPort_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 20, 1, 4),
    _FciSnmpManagerTrapsUdpPort_Type()
)
fciSnmpManagerTrapsUdpPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciSnmpManagerTrapsUdpPort.setStatus("mandatory")
_FciBootP_ObjectIdentity = ObjectIdentity
fciBootP = _FciBootP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60)
)
_FciBootPClient_ObjectIdentity = ObjectIdentity
fciBootPClient = _FciBootPClient_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1)
)


class _FciBootPClientStart_Type(Integer32):
    """Custom type fciBootPClientStart based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FciBootPClientStart_Type.__name__ = "Integer32"
_FciBootPClientStart_Object = MibScalar
fciBootPClientStart = _FciBootPClientStart_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1, 1),
    _FciBootPClientStart_Type()
)
fciBootPClientStart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciBootPClientStart.setStatus("mandatory")


class _FciBootPClientServer_Type(DisplayString):
    """Custom type fciBootPClientServer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_FciBootPClientServer_Type.__name__ = "DisplayString"
_FciBootPClientServer_Object = MibScalar
fciBootPClientServer = _FciBootPClientServer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1, 2),
    _FciBootPClientServer_Type()
)
fciBootPClientServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciBootPClientServer.setStatus("mandatory")


class _FciBootPClientBootFile_Type(DisplayString):
    """Custom type fciBootPClientBootFile based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_FciBootPClientBootFile_Type.__name__ = "DisplayString"
_FciBootPClientBootFile_Object = MibScalar
fciBootPClientBootFile = _FciBootPClientBootFile_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1, 3),
    _FciBootPClientBootFile_Type()
)
fciBootPClientBootFile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciBootPClientBootFile.setStatus("mandatory")


class _FciBootPClientBootTime_Type(Integer32):
    """Custom type fciBootPClientBootTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(15, 900),
    )


_FciBootPClientBootTime_Type.__name__ = "Integer32"
_FciBootPClientBootTime_Object = MibScalar
fciBootPClientBootTime = _FciBootPClientBootTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1, 4),
    _FciBootPClientBootTime_Type()
)
fciBootPClientBootTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciBootPClientBootTime.setStatus("mandatory")


class _FciBootPClientRetransNb_Type(Integer32):
    """Custom type fciBootPClientRetransNb based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_FciBootPClientRetransNb_Type.__name__ = "Integer32"
_FciBootPClientRetransNb_Object = MibScalar
fciBootPClientRetransNb = _FciBootPClientRetransNb_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1, 5),
    _FciBootPClientRetransNb_Type()
)
fciBootPClientRetransNb.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciBootPClientRetransNb.setStatus("mandatory")
_FciBootPInterfaceTable_Object = MibTable
fciBootPInterfaceTable = _FciBootPInterfaceTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1, 20)
)
if mibBuilder.loadTexts:
    fciBootPInterfaceTable.setStatus("mandatory")
_FciBootPInterfaceEntry_Object = MibTableRow
fciBootPInterfaceEntry = _FciBootPInterfaceEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1, 20, 1)
)
fciBootPInterfaceEntry.setIndexNames(
    (0, "PCE-MIB", "fciBootPInterfaceVpId"),
    (0, "PCE-MIB", "fciBootPInterfaceIpAddress"),
)
if mibBuilder.loadTexts:
    fciBootPInterfaceEntry.setStatus("mandatory")


class _FciBootPInterfaceVpId_Type(Integer32):
    """Custom type fciBootPInterfaceVpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FciBootPInterfaceVpId_Type.__name__ = "Integer32"
_FciBootPInterfaceVpId_Object = MibTableColumn
fciBootPInterfaceVpId = _FciBootPInterfaceVpId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1, 20, 1, 1),
    _FciBootPInterfaceVpId_Type()
)
fciBootPInterfaceVpId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciBootPInterfaceVpId.setStatus("mandatory")
_FciBootPInterfaceIpAddress_Type = IpAddress
_FciBootPInterfaceIpAddress_Object = MibTableColumn
fciBootPInterfaceIpAddress = _FciBootPInterfaceIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1, 20, 1, 2),
    _FciBootPInterfaceIpAddress_Type()
)
fciBootPInterfaceIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciBootPInterfaceIpAddress.setStatus("mandatory")


class _FciBootPInterfaceStatus_Type(Integer32):
    """Custom type fciBootPInterfaceStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FciBootPInterfaceStatus_Type.__name__ = "Integer32"
_FciBootPInterfaceStatus_Object = MibTableColumn
fciBootPInterfaceStatus = _FciBootPInterfaceStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1, 20, 1, 3),
    _FciBootPInterfaceStatus_Type()
)
fciBootPInterfaceStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciBootPInterfaceStatus.setStatus("mandatory")


class _FciBootPInterfaceType_Type(Integer32):
    """Custom type fciBootPInterfaceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("client", 1),
          ("relay", 2))
    )


_FciBootPInterfaceType_Type.__name__ = "Integer32"
_FciBootPInterfaceType_Object = MibTableColumn
fciBootPInterfaceType = _FciBootPInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1, 20, 1, 4),
    _FciBootPInterfaceType_Type()
)
fciBootPInterfaceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciBootPInterfaceType.setStatus("mandatory")
_FciTelnet_ObjectIdentity = ObjectIdentity
fciTelnet = _FciTelnet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70)
)
_FciTelnetConfiguration_ObjectIdentity = ObjectIdentity
fciTelnetConfiguration = _FciTelnetConfiguration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 1)
)


class _FciTelnetMaxSession_Type(Integer32):
    """Custom type fciTelnetMaxSession based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 50),
    )


_FciTelnetMaxSession_Type.__name__ = "Integer32"
_FciTelnetMaxSession_Object = MibScalar
fciTelnetMaxSession = _FciTelnetMaxSession_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 1, 1),
    _FciTelnetMaxSession_Type()
)
fciTelnetMaxSession.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciTelnetMaxSession.setStatus("mandatory")


class _FciTelnetTimer_Type(Integer32):
    """Custom type fciTelnetTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600),
    )


_FciTelnetTimer_Type.__name__ = "Integer32"
_FciTelnetTimer_Object = MibScalar
fciTelnetTimer = _FciTelnetTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 1, 2),
    _FciTelnetTimer_Type()
)
fciTelnetTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciTelnetTimer.setStatus("mandatory")
_FciTelnetPwd_ObjectIdentity = ObjectIdentity
fciTelnetPwd = _FciTelnetPwd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 10)
)


class _FciTelnetPwdP0_Type(DisplayString):
    """Custom type fciTelnetPwdP0 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_FciTelnetPwdP0_Type.__name__ = "DisplayString"
_FciTelnetPwdP0_Object = MibScalar
fciTelnetPwdP0 = _FciTelnetPwdP0_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 10, 1),
    _FciTelnetPwdP0_Type()
)
fciTelnetPwdP0.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciTelnetPwdP0.setStatus("mandatory")


class _FciTelnetPwdP1_Type(DisplayString):
    """Custom type fciTelnetPwdP1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_FciTelnetPwdP1_Type.__name__ = "DisplayString"
_FciTelnetPwdP1_Object = MibScalar
fciTelnetPwdP1 = _FciTelnetPwdP1_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 10, 2),
    _FciTelnetPwdP1_Type()
)
fciTelnetPwdP1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciTelnetPwdP1.setStatus("mandatory")


class _FciTelnetPwdP2_Type(DisplayString):
    """Custom type fciTelnetPwdP2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_FciTelnetPwdP2_Type.__name__ = "DisplayString"
_FciTelnetPwdP2_Object = MibScalar
fciTelnetPwdP2 = _FciTelnetPwdP2_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 10, 3),
    _FciTelnetPwdP2_Type()
)
fciTelnetPwdP2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciTelnetPwdP2.setStatus("mandatory")


class _FciTelnetPwdP3_Type(DisplayString):
    """Custom type fciTelnetPwdP3 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_FciTelnetPwdP3_Type.__name__ = "DisplayString"
_FciTelnetPwdP3_Object = MibScalar
fciTelnetPwdP3 = _FciTelnetPwdP3_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 10, 4),
    _FciTelnetPwdP3_Type()
)
fciTelnetPwdP3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciTelnetPwdP3.setStatus("mandatory")


class _FciTelnetPwdP4_Type(DisplayString):
    """Custom type fciTelnetPwdP4 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_FciTelnetPwdP4_Type.__name__ = "DisplayString"
_FciTelnetPwdP4_Object = MibScalar
fciTelnetPwdP4 = _FciTelnetPwdP4_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 10, 5),
    _FciTelnetPwdP4_Type()
)
fciTelnetPwdP4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciTelnetPwdP4.setStatus("mandatory")


class _FciTelnetPwdP5_Type(DisplayString):
    """Custom type fciTelnetPwdP5 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_FciTelnetPwdP5_Type.__name__ = "DisplayString"
_FciTelnetPwdP5_Object = MibScalar
fciTelnetPwdP5 = _FciTelnetPwdP5_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 10, 6),
    _FciTelnetPwdP5_Type()
)
fciTelnetPwdP5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciTelnetPwdP5.setStatus("mandatory")


class _FciTelnetPwdP6_Type(DisplayString):
    """Custom type fciTelnetPwdP6 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_FciTelnetPwdP6_Type.__name__ = "DisplayString"
_FciTelnetPwdP6_Object = MibScalar
fciTelnetPwdP6 = _FciTelnetPwdP6_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 10, 7),
    _FciTelnetPwdP6_Type()
)
fciTelnetPwdP6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciTelnetPwdP6.setStatus("mandatory")


class _FciTelnetPwdP7_Type(DisplayString):
    """Custom type fciTelnetPwdP7 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_FciTelnetPwdP7_Type.__name__ = "DisplayString"
_FciTelnetPwdP7_Object = MibScalar
fciTelnetPwdP7 = _FciTelnetPwdP7_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 10, 8),
    _FciTelnetPwdP7_Type()
)
fciTelnetPwdP7.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciTelnetPwdP7.setStatus("mandatory")


class _FciTelnetPwdP8_Type(DisplayString):
    """Custom type fciTelnetPwdP8 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_FciTelnetPwdP8_Type.__name__ = "DisplayString"
_FciTelnetPwdP8_Object = MibScalar
fciTelnetPwdP8 = _FciTelnetPwdP8_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 10, 9),
    _FciTelnetPwdP8_Type()
)
fciTelnetPwdP8.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciTelnetPwdP8.setStatus("mandatory")


class _FciTelnetPwdP9_Type(DisplayString):
    """Custom type fciTelnetPwdP9 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_FciTelnetPwdP9_Type.__name__ = "DisplayString"
_FciTelnetPwdP9_Object = MibScalar
fciTelnetPwdP9 = _FciTelnetPwdP9_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 10, 10),
    _FciTelnetPwdP9_Type()
)
fciTelnetPwdP9.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciTelnetPwdP9.setStatus("mandatory")
_FciTelnetUserTable_Object = MibTable
fciTelnetUserTable = _FciTelnetUserTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 30)
)
if mibBuilder.loadTexts:
    fciTelnetUserTable.setStatus("mandatory")
_FciTelnetUserEntry_Object = MibTableRow
fciTelnetUserEntry = _FciTelnetUserEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 30, 1)
)
fciTelnetUserEntry.setIndexNames(
    (0, "PCE-MIB", "fciTelnetUserId"),
)
if mibBuilder.loadTexts:
    fciTelnetUserEntry.setStatus("mandatory")


class _FciTelnetUserId_Type(Integer32):
    """Custom type fciTelnetUserId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 49),
    )


_FciTelnetUserId_Type.__name__ = "Integer32"
_FciTelnetUserId_Object = MibTableColumn
fciTelnetUserId = _FciTelnetUserId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 30, 1, 1),
    _FciTelnetUserId_Type()
)
fciTelnetUserId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fciTelnetUserId.setStatus("mandatory")


class _FciTelnetUserStatus_Type(Integer32):
    """Custom type fciTelnetUserStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FciTelnetUserStatus_Type.__name__ = "Integer32"
_FciTelnetUserStatus_Object = MibTableColumn
fciTelnetUserStatus = _FciTelnetUserStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 30, 1, 2),
    _FciTelnetUserStatus_Type()
)
fciTelnetUserStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciTelnetUserStatus.setStatus("mandatory")


class _FciTelnetUserLogin_Type(DisplayString):
    """Custom type fciTelnetUserLogin based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_FciTelnetUserLogin_Type.__name__ = "DisplayString"
_FciTelnetUserLogin_Object = MibTableColumn
fciTelnetUserLogin = _FciTelnetUserLogin_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 30, 1, 3),
    _FciTelnetUserLogin_Type()
)
fciTelnetUserLogin.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciTelnetUserLogin.setStatus("mandatory")


class _FciTelnetUserPriority_Type(Integer32):
    """Custom type fciTelnetUserPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9),
    )


_FciTelnetUserPriority_Type.__name__ = "Integer32"
_FciTelnetUserPriority_Object = MibTableColumn
fciTelnetUserPriority = _FciTelnetUserPriority_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 30, 1, 4),
    _FciTelnetUserPriority_Type()
)
fciTelnetUserPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fciTelnetUserPriority.setStatus("mandatory")
_FcIpx_ObjectIdentity = ObjectIdentity
fcIpx = _FcIpx_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37)
)
_FcxInstance_ObjectIdentity = ObjectIdentity
fcxInstance = _FcxInstance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 1)
)


class _FcxIpxRouting_Type(Integer32):
    """Custom type fcxIpxRouting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcxIpxRouting_Type.__name__ = "Integer32"
_FcxIpxRouting_Object = MibScalar
fcxIpxRouting = _FcxIpxRouting_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 1, 1),
    _FcxIpxRouting_Type()
)
fcxIpxRouting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxIpxRouting.setStatus("mandatory")


class _FcxBasicSysName_Type(DisplayString):
    """Custom type fcxBasicSysName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 47),
    )


_FcxBasicSysName_Type.__name__ = "DisplayString"
_FcxBasicSysName_Object = MibScalar
fcxBasicSysName = _FcxBasicSysName_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 1, 12),
    _FcxBasicSysName_Type()
)
fcxBasicSysName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxBasicSysName.setStatus("mandatory")


class _FcxAdvSysMaxPathSplits_Type(Integer32):
    """Custom type fcxAdvSysMaxPathSplits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_FcxAdvSysMaxPathSplits_Type.__name__ = "Integer32"
_FcxAdvSysMaxPathSplits_Object = MibScalar
fcxAdvSysMaxPathSplits = _FcxAdvSysMaxPathSplits_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 1, 15),
    _FcxAdvSysMaxPathSplits_Type()
)
fcxAdvSysMaxPathSplits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxAdvSysMaxPathSplits.setStatus("mandatory")


class _FcxAdvSysMaxHops_Type(Integer32):
    """Custom type fcxAdvSysMaxHops based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 255),
    )


_FcxAdvSysMaxHops_Type.__name__ = "Integer32"
_FcxAdvSysMaxHops_Object = MibScalar
fcxAdvSysMaxHops = _FcxAdvSysMaxHops_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 1, 16),
    _FcxAdvSysMaxHops_Type()
)
fcxAdvSysMaxHops.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxAdvSysMaxHops.setStatus("mandatory")
_FcxCircuits_ObjectIdentity = ObjectIdentity
fcxCircuits = _FcxCircuits_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10)
)
_FcxCircuitTable_Object = MibTable
fcxCircuitTable = _FcxCircuitTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 1)
)
if mibBuilder.loadTexts:
    fcxCircuitTable.setStatus("mandatory")
_FcxCircuitEntry_Object = MibTableRow
fcxCircuitEntry = _FcxCircuitEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 1, 1)
)
fcxCircuitEntry.setIndexNames(
    (0, "PCE-MIB", "fcxCircCircuitId"),
)
if mibBuilder.loadTexts:
    fcxCircuitEntry.setStatus("mandatory")


class _FcxCircCircuitId_Type(Integer32):
    """Custom type fcxCircCircuitId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 199),
    )


_FcxCircCircuitId_Type.__name__ = "Integer32"
_FcxCircCircuitId_Object = MibTableColumn
fcxCircCircuitId = _FcxCircCircuitId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 1, 1, 1),
    _FcxCircCircuitId_Type()
)
fcxCircCircuitId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcxCircCircuitId.setStatus("mandatory")


class _FcxCircStatus_Type(Integer32):
    """Custom type fcxCircStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcxCircStatus_Type.__name__ = "Integer32"
_FcxCircStatus_Object = MibTableColumn
fcxCircStatus = _FcxCircStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 1, 1, 2),
    _FcxCircStatus_Type()
)
fcxCircStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxCircStatus.setStatus("mandatory")


class _FcxCircVirtualPortId_Type(Integer32):
    """Custom type fcxCircVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FcxCircVirtualPortId_Type.__name__ = "Integer32"
_FcxCircVirtualPortId_Object = MibTableColumn
fcxCircVirtualPortId = _FcxCircVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 1, 1, 3),
    _FcxCircVirtualPortId_Type()
)
fcxCircVirtualPortId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxCircVirtualPortId.setStatus("mandatory")


class _FcxCircOperState_Type(Integer32):
    """Custom type fcxCircOperState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("up", 2))
    )


_FcxCircOperState_Type.__name__ = "Integer32"
_FcxCircOperState_Object = MibTableColumn
fcxCircOperState = _FcxCircOperState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 1, 1, 10),
    _FcxCircOperState_Type()
)
fcxCircOperState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxCircOperState.setStatus("mandatory")


class _FcxCircName_Type(DisplayString):
    """Custom type fcxCircName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 24),
    )


_FcxCircName_Type.__name__ = "DisplayString"
_FcxCircName_Object = MibTableColumn
fcxCircName = _FcxCircName_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 1, 1, 11),
    _FcxCircName_Type()
)
fcxCircName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxCircName.setStatus("mandatory")


class _FcxCircType_Type(Integer32):
    """Custom type fcxCircType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              6)
        )
    )
    namedValues = NamedValues(
        *(("broadcast", 2),
          ("dynamic", 6),
          ("ptToPt", 3))
    )


_FcxCircType_Type.__name__ = "Integer32"
_FcxCircType_Object = MibTableColumn
fcxCircType = _FcxCircType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 1, 1, 12),
    _FcxCircType_Type()
)
fcxCircType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxCircType.setStatus("mandatory")


class _FcxCircLocalMaxPacketSize_Type(Integer32):
    """Custom type fcxCircLocalMaxPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(512, 65535),
    )


_FcxCircLocalMaxPacketSize_Type.__name__ = "Integer32"
_FcxCircLocalMaxPacketSize_Object = MibTableColumn
fcxCircLocalMaxPacketSize = _FcxCircLocalMaxPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 1, 1, 13),
    _FcxCircLocalMaxPacketSize_Type()
)
fcxCircLocalMaxPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxCircLocalMaxPacketSize.setStatus("mandatory")


class _FcxCircNetNumber_Type(OctetString):
    """Custom type fcxCircNetNumber based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_FcxCircNetNumber_Type.__name__ = "OctetString"
_FcxCircNetNumber_Object = MibTableColumn
fcxCircNetNumber = _FcxCircNetNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 1, 1, 14),
    _FcxCircNetNumber_Type()
)
fcxCircNetNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxCircNetNumber.setStatus("mandatory")


class _FcxCircChecksumEnabling_Type(Integer32):
    """Custom type fcxCircChecksumEnabling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcxCircChecksumEnabling_Type.__name__ = "Integer32"
_FcxCircChecksumEnabling_Object = MibTableColumn
fcxCircChecksumEnabling = _FcxCircChecksumEnabling_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 1, 1, 20),
    _FcxCircChecksumEnabling_Type()
)
fcxCircChecksumEnabling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxCircChecksumEnabling.setStatus("mandatory")
_FcxCircuitLocalVpTable_Object = MibTable
fcxCircuitLocalVpTable = _FcxCircuitLocalVpTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 2)
)
if mibBuilder.loadTexts:
    fcxCircuitLocalVpTable.setStatus("mandatory")
_FcxCircuitLocalVpEntry_Object = MibTableRow
fcxCircuitLocalVpEntry = _FcxCircuitLocalVpEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 2, 1)
)
fcxCircuitLocalVpEntry.setIndexNames(
    (0, "PCE-MIB", "fcxCircLvpCircuitId"),
)
if mibBuilder.loadTexts:
    fcxCircuitLocalVpEntry.setStatus("mandatory")


class _FcxCircLvpCircuitId_Type(Integer32):
    """Custom type fcxCircLvpCircuitId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 199),
    )


_FcxCircLvpCircuitId_Type.__name__ = "Integer32"
_FcxCircLvpCircuitId_Object = MibTableColumn
fcxCircLvpCircuitId = _FcxCircLvpCircuitId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 2, 1, 1),
    _FcxCircLvpCircuitId_Type()
)
fcxCircLvpCircuitId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcxCircLvpCircuitId.setStatus("mandatory")


class _FcxCircLvpStatus_Type(Integer32):
    """Custom type fcxCircLvpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcxCircLvpStatus_Type.__name__ = "Integer32"
_FcxCircLvpStatus_Object = MibTableColumn
fcxCircLvpStatus = _FcxCircLvpStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 2, 1, 2),
    _FcxCircLvpStatus_Type()
)
fcxCircLvpStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxCircLvpStatus.setStatus("mandatory")


class _FcxCircLvpEncapsulation_Type(Integer32):
    """Custom type fcxCircLvpEncapsulation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ether802-2", 3),
          ("ether802-3", 2),
          ("etherSnap", 4),
          ("ethernet", 1))
    )


_FcxCircLvpEncapsulation_Type.__name__ = "Integer32"
_FcxCircLvpEncapsulation_Object = MibTableColumn
fcxCircLvpEncapsulation = _FcxCircLvpEncapsulation_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 2, 1, 3),
    _FcxCircLvpEncapsulation_Type()
)
fcxCircLvpEncapsulation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxCircLvpEncapsulation.setStatus("mandatory")
_FcxCircuitRemoteVpTable_Object = MibTable
fcxCircuitRemoteVpTable = _FcxCircuitRemoteVpTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 3)
)
if mibBuilder.loadTexts:
    fcxCircuitRemoteVpTable.setStatus("mandatory")
_FcxCircuitRemoteVpEntry_Object = MibTableRow
fcxCircuitRemoteVpEntry = _FcxCircuitRemoteVpEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 3, 1)
)
fcxCircuitRemoteVpEntry.setIndexNames(
    (0, "PCE-MIB", "fcxCircRvpCircuitId"),
)
if mibBuilder.loadTexts:
    fcxCircuitRemoteVpEntry.setStatus("mandatory")


class _FcxCircRvpCircuitId_Type(Integer32):
    """Custom type fcxCircRvpCircuitId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 199),
    )


_FcxCircRvpCircuitId_Type.__name__ = "Integer32"
_FcxCircRvpCircuitId_Object = MibTableColumn
fcxCircRvpCircuitId = _FcxCircRvpCircuitId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 3, 1, 1),
    _FcxCircRvpCircuitId_Type()
)
fcxCircRvpCircuitId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcxCircRvpCircuitId.setStatus("mandatory")


class _FcxCircRvpStatus_Type(Integer32):
    """Custom type fcxCircRvpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcxCircRvpStatus_Type.__name__ = "Integer32"
_FcxCircRvpStatus_Object = MibTableColumn
fcxCircRvpStatus = _FcxCircRvpStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 3, 1, 2),
    _FcxCircRvpStatus_Type()
)
fcxCircRvpStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxCircRvpStatus.setStatus("mandatory")


class _FcxCircRvpRemoteAddress_Type(OctetString):
    """Custom type fcxCircRvpRemoteAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FcxCircRvpRemoteAddress_Type.__name__ = "OctetString"
_FcxCircRvpRemoteAddress_Object = MibTableColumn
fcxCircRvpRemoteAddress = _FcxCircRvpRemoteAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 3, 1, 3),
    _FcxCircRvpRemoteAddress_Type()
)
fcxCircRvpRemoteAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxCircRvpRemoteAddress.setStatus("mandatory")


class _FcxCircRvpLocalNode_Type(OctetString):
    """Custom type fcxCircRvpLocalNode based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_FcxCircRvpLocalNode_Type.__name__ = "OctetString"
_FcxCircRvpLocalNode_Object = MibTableColumn
fcxCircRvpLocalNode = _FcxCircRvpLocalNode_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 3, 1, 4),
    _FcxCircRvpLocalNode_Type()
)
fcxCircRvpLocalNode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxCircRvpLocalNode.setStatus("mandatory")
_FcxRouting_ObjectIdentity = ObjectIdentity
fcxRouting = _FcxRouting_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20)
)
_FcxRoutInstance_ObjectIdentity = ObjectIdentity
fcxRoutInstance = _FcxRoutInstance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 1)
)


class _FcxRoutType20PacketBroadcasting_Type(Integer32):
    """Custom type fcxRoutType20PacketBroadcasting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 3),
          ("onLanOnly", 2))
    )


_FcxRoutType20PacketBroadcasting_Type.__name__ = "Integer32"
_FcxRoutType20PacketBroadcasting_Object = MibScalar
fcxRoutType20PacketBroadcasting = _FcxRoutType20PacketBroadcasting_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 1, 10),
    _FcxRoutType20PacketBroadcasting_Type()
)
fcxRoutType20PacketBroadcasting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRoutType20PacketBroadcasting.setStatus("mandatory")
_FcxRoutCircuitTable_Object = MibTable
fcxRoutCircuitTable = _FcxRoutCircuitTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 10)
)
if mibBuilder.loadTexts:
    fcxRoutCircuitTable.setStatus("mandatory")
_FcxRoutCircuitEntry_Object = MibTableRow
fcxRoutCircuitEntry = _FcxRoutCircuitEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 10, 1)
)
fcxRoutCircuitEntry.setIndexNames(
    (0, "PCE-MIB", "fcxRoutCircCircuitId"),
)
if mibBuilder.loadTexts:
    fcxRoutCircuitEntry.setStatus("mandatory")


class _FcxRoutCircCircuitId_Type(Integer32):
    """Custom type fcxRoutCircCircuitId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 199),
    )


_FcxRoutCircCircuitId_Type.__name__ = "Integer32"
_FcxRoutCircCircuitId_Object = MibTableColumn
fcxRoutCircCircuitId = _FcxRoutCircCircuitId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 10, 1, 1),
    _FcxRoutCircCircuitId_Type()
)
fcxRoutCircCircuitId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcxRoutCircCircuitId.setStatus("mandatory")


class _FcxRoutCircNcpSpoofing_Type(Integer32):
    """Custom type fcxRoutCircNcpSpoofing based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcxRoutCircNcpSpoofing_Type.__name__ = "Integer32"
_FcxRoutCircNcpSpoofing_Object = MibTableColumn
fcxRoutCircNcpSpoofing = _FcxRoutCircNcpSpoofing_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 10, 1, 2),
    _FcxRoutCircNcpSpoofing_Type()
)
fcxRoutCircNcpSpoofing.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRoutCircNcpSpoofing.setStatus("mandatory")


class _FcxRoutCircType20PacketBroadcasting_Type(Integer32):
    """Custom type fcxRoutCircType20PacketBroadcasting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcxRoutCircType20PacketBroadcasting_Type.__name__ = "Integer32"
_FcxRoutCircType20PacketBroadcasting_Object = MibTableColumn
fcxRoutCircType20PacketBroadcasting = _FcxRoutCircType20PacketBroadcasting_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 10, 1, 3),
    _FcxRoutCircType20PacketBroadcasting_Type()
)
fcxRoutCircType20PacketBroadcasting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRoutCircType20PacketBroadcasting.setStatus("mandatory")


class _FcxRoutCircAddressFiltering_Type(Integer32):
    """Custom type fcxRoutCircAddressFiltering based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("denied", 3),
          ("off", 1),
          ("permitted", 2))
    )


_FcxRoutCircAddressFiltering_Type.__name__ = "Integer32"
_FcxRoutCircAddressFiltering_Object = MibTableColumn
fcxRoutCircAddressFiltering = _FcxRoutCircAddressFiltering_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 10, 1, 4),
    _FcxRoutCircAddressFiltering_Type()
)
fcxRoutCircAddressFiltering.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRoutCircAddressFiltering.setStatus("mandatory")
_FcxRoutIpxStaticRouteTable_Object = MibTable
fcxRoutIpxStaticRouteTable = _FcxRoutIpxStaticRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 20)
)
if mibBuilder.loadTexts:
    fcxRoutIpxStaticRouteTable.setStatus("mandatory")
_FcxRoutIpxStaticRouteEntry_Object = MibTableRow
fcxRoutIpxStaticRouteEntry = _FcxRoutIpxStaticRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 20, 1)
)
fcxRoutIpxStaticRouteEntry.setIndexNames(
    (0, "PCE-MIB", "fcxRoutStaticRouteCircuitId"),
    (0, "PCE-MIB", "fcxRoutStaticRouteNetNum"),
)
if mibBuilder.loadTexts:
    fcxRoutIpxStaticRouteEntry.setStatus("mandatory")


class _FcxRoutStaticRouteCircuitId_Type(Integer32):
    """Custom type fcxRoutStaticRouteCircuitId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 199),
    )


_FcxRoutStaticRouteCircuitId_Type.__name__ = "Integer32"
_FcxRoutStaticRouteCircuitId_Object = MibTableColumn
fcxRoutStaticRouteCircuitId = _FcxRoutStaticRouteCircuitId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 20, 1, 1),
    _FcxRoutStaticRouteCircuitId_Type()
)
fcxRoutStaticRouteCircuitId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcxRoutStaticRouteCircuitId.setStatus("mandatory")


class _FcxRoutStaticRouteNetNum_Type(OctetString):
    """Custom type fcxRoutStaticRouteNetNum based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_FcxRoutStaticRouteNetNum_Type.__name__ = "OctetString"
_FcxRoutStaticRouteNetNum_Object = MibTableColumn
fcxRoutStaticRouteNetNum = _FcxRoutStaticRouteNetNum_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 20, 1, 2),
    _FcxRoutStaticRouteNetNum_Type()
)
fcxRoutStaticRouteNetNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcxRoutStaticRouteNetNum.setStatus("mandatory")


class _FcxRoutStaticRouteStatus_Type(Integer32):
    """Custom type fcxRoutStaticRouteStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcxRoutStaticRouteStatus_Type.__name__ = "Integer32"
_FcxRoutStaticRouteStatus_Object = MibTableColumn
fcxRoutStaticRouteStatus = _FcxRoutStaticRouteStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 20, 1, 3),
    _FcxRoutStaticRouteStatus_Type()
)
fcxRoutStaticRouteStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRoutStaticRouteStatus.setStatus("mandatory")


class _FcxRoutStaticRouteTicks_Type(Integer32):
    """Custom type fcxRoutStaticRouteTicks based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_FcxRoutStaticRouteTicks_Type.__name__ = "Integer32"
_FcxRoutStaticRouteTicks_Object = MibTableColumn
fcxRoutStaticRouteTicks = _FcxRoutStaticRouteTicks_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 20, 1, 4),
    _FcxRoutStaticRouteTicks_Type()
)
fcxRoutStaticRouteTicks.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRoutStaticRouteTicks.setStatus("mandatory")


class _FcxRoutStaticRouteHopCount_Type(Integer32):
    """Custom type fcxRoutStaticRouteHopCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FcxRoutStaticRouteHopCount_Type.__name__ = "Integer32"
_FcxRoutStaticRouteHopCount_Object = MibTableColumn
fcxRoutStaticRouteHopCount = _FcxRoutStaticRouteHopCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 20, 1, 5),
    _FcxRoutStaticRouteHopCount_Type()
)
fcxRoutStaticRouteHopCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRoutStaticRouteHopCount.setStatus("mandatory")
_FcxRoutAddressFilteringTable_Object = MibTable
fcxRoutAddressFilteringTable = _FcxRoutAddressFilteringTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 30)
)
if mibBuilder.loadTexts:
    fcxRoutAddressFilteringTable.setStatus("mandatory")
_FcxRoutAddressFilteringEntry_Object = MibTableRow
fcxRoutAddressFilteringEntry = _FcxRoutAddressFilteringEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 30, 1)
)
fcxRoutAddressFilteringEntry.setIndexNames(
    (0, "PCE-MIB", "fcxRoutAddrFltCircuitId"),
    (0, "PCE-MIB", "fcxRoutAddrFltFilterId"),
)
if mibBuilder.loadTexts:
    fcxRoutAddressFilteringEntry.setStatus("mandatory")


class _FcxRoutAddrFltCircuitId_Type(Integer32):
    """Custom type fcxRoutAddrFltCircuitId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 199),
    )


_FcxRoutAddrFltCircuitId_Type.__name__ = "Integer32"
_FcxRoutAddrFltCircuitId_Object = MibTableColumn
fcxRoutAddrFltCircuitId = _FcxRoutAddrFltCircuitId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 30, 1, 1),
    _FcxRoutAddrFltCircuitId_Type()
)
fcxRoutAddrFltCircuitId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcxRoutAddrFltCircuitId.setStatus("mandatory")


class _FcxRoutAddrFltFilterId_Type(Integer32):
    """Custom type fcxRoutAddrFltFilterId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FcxRoutAddrFltFilterId_Type.__name__ = "Integer32"
_FcxRoutAddrFltFilterId_Object = MibTableColumn
fcxRoutAddrFltFilterId = _FcxRoutAddrFltFilterId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 30, 1, 2),
    _FcxRoutAddrFltFilterId_Type()
)
fcxRoutAddrFltFilterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcxRoutAddrFltFilterId.setStatus("mandatory")


class _FcxRoutAddrFltStatus_Type(Integer32):
    """Custom type fcxRoutAddrFltStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcxRoutAddrFltStatus_Type.__name__ = "Integer32"
_FcxRoutAddrFltStatus_Object = MibTableColumn
fcxRoutAddrFltStatus = _FcxRoutAddrFltStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 30, 1, 3),
    _FcxRoutAddrFltStatus_Type()
)
fcxRoutAddrFltStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRoutAddrFltStatus.setStatus("mandatory")


class _FcxRoutAddrFltFiltering_Type(Integer32):
    """Custom type fcxRoutAddrFltFiltering based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcxRoutAddrFltFiltering_Type.__name__ = "Integer32"
_FcxRoutAddrFltFiltering_Object = MibTableColumn
fcxRoutAddrFltFiltering = _FcxRoutAddrFltFiltering_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 30, 1, 4),
    _FcxRoutAddrFltFiltering_Type()
)
fcxRoutAddrFltFiltering.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRoutAddrFltFiltering.setStatus("mandatory")


class _FcxRoutAddrFltField_Type(Integer32):
    """Custom type fcxRoutAddrFltField based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("destNetAddress", 2),
          ("destSocket", 4),
          ("sourceNetAddress", 1),
          ("sourceSocket", 3))
    )


_FcxRoutAddrFltField_Type.__name__ = "Integer32"
_FcxRoutAddrFltField_Object = MibTableColumn
fcxRoutAddrFltField = _FcxRoutAddrFltField_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 30, 1, 5),
    _FcxRoutAddrFltField_Type()
)
fcxRoutAddrFltField.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRoutAddrFltField.setStatus("mandatory")


class _FcxRoutAddrFltMask_Type(OctetString):
    """Custom type fcxRoutAddrFltMask based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_FcxRoutAddrFltMask_Type.__name__ = "OctetString"
_FcxRoutAddrFltMask_Object = MibTableColumn
fcxRoutAddrFltMask = _FcxRoutAddrFltMask_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 30, 1, 6),
    _FcxRoutAddrFltMask_Type()
)
fcxRoutAddrFltMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRoutAddrFltMask.setStatus("mandatory")


class _FcxRoutAddrFltValue_Type(OctetString):
    """Custom type fcxRoutAddrFltValue based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_FcxRoutAddrFltValue_Type.__name__ = "OctetString"
_FcxRoutAddrFltValue_Object = MibTableColumn
fcxRoutAddrFltValue = _FcxRoutAddrFltValue_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 30, 1, 7),
    _FcxRoutAddrFltValue_Type()
)
fcxRoutAddrFltValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRoutAddrFltValue.setStatus("mandatory")
_FcxRoutingInformationProtocol_ObjectIdentity = ObjectIdentity
fcxRoutingInformationProtocol = _FcxRoutingInformationProtocol_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25)
)
_FcxRipInstance_ObjectIdentity = ObjectIdentity
fcxRipInstance = _FcxRipInstance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 1)
)


class _FcxRipSysState_Type(Integer32):
    """Custom type fcxRipSysState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcxRipSysState_Type.__name__ = "Integer32"
_FcxRipSysState_Object = MibScalar
fcxRipSysState = _FcxRipSysState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 1, 1),
    _FcxRipSysState_Type()
)
fcxRipSysState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRipSysState.setStatus("mandatory")


class _FcxRipInputFiltering_Type(Integer32):
    """Custom type fcxRipInputFiltering based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("denied", 3),
          ("off", 1),
          ("permitted", 2))
    )


_FcxRipInputFiltering_Type.__name__ = "Integer32"
_FcxRipInputFiltering_Object = MibScalar
fcxRipInputFiltering = _FcxRipInputFiltering_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 1, 2),
    _FcxRipInputFiltering_Type()
)
fcxRipInputFiltering.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRipInputFiltering.setStatus("mandatory")
_FcxRipCircuitTable_Object = MibTable
fcxRipCircuitTable = _FcxRipCircuitTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 10)
)
if mibBuilder.loadTexts:
    fcxRipCircuitTable.setStatus("mandatory")
_FcxRipCircuitEntry_Object = MibTableRow
fcxRipCircuitEntry = _FcxRipCircuitEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 10, 1)
)
fcxRipCircuitEntry.setIndexNames(
    (0, "PCE-MIB", "fcxRipCircCircuitId"),
)
if mibBuilder.loadTexts:
    fcxRipCircuitEntry.setStatus("mandatory")


class _FcxRipCircCircuitId_Type(Integer32):
    """Custom type fcxRipCircCircuitId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 199),
    )


_FcxRipCircCircuitId_Type.__name__ = "Integer32"
_FcxRipCircCircuitId_Object = MibTableColumn
fcxRipCircCircuitId = _FcxRipCircCircuitId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 10, 1, 1),
    _FcxRipCircCircuitId_Type()
)
fcxRipCircCircuitId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcxRipCircCircuitId.setStatus("mandatory")


class _FcxRipCircState_Type(Integer32):
    """Custom type fcxRipCircState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcxRipCircState_Type.__name__ = "Integer32"
_FcxRipCircState_Object = MibTableColumn
fcxRipCircState = _FcxRipCircState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 10, 1, 10),
    _FcxRipCircState_Type()
)
fcxRipCircState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRipCircState.setStatus("mandatory")


class _FcxRipCircPace_Type(Integer32):
    """Custom type fcxRipCircPace based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_FcxRipCircPace_Type.__name__ = "Integer32"
_FcxRipCircPace_Object = MibTableColumn
fcxRipCircPace = _FcxRipCircPace_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 10, 1, 11),
    _FcxRipCircPace_Type()
)
fcxRipCircPace.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRipCircPace.setStatus("mandatory")


class _FcxRipCircUpdate_Type(Integer32):
    """Custom type fcxRipCircUpdate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_FcxRipCircUpdate_Type.__name__ = "Integer32"
_FcxRipCircUpdate_Object = MibTableColumn
fcxRipCircUpdate = _FcxRipCircUpdate_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 10, 1, 12),
    _FcxRipCircUpdate_Type()
)
fcxRipCircUpdate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRipCircUpdate.setStatus("mandatory")


class _FcxRipCircAgeMultiplier_Type(Integer32):
    """Custom type fcxRipCircAgeMultiplier based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 255),
    )


_FcxRipCircAgeMultiplier_Type.__name__ = "Integer32"
_FcxRipCircAgeMultiplier_Object = MibTableColumn
fcxRipCircAgeMultiplier = _FcxRipCircAgeMultiplier_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 10, 1, 13),
    _FcxRipCircAgeMultiplier_Type()
)
fcxRipCircAgeMultiplier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRipCircAgeMultiplier.setStatus("mandatory")


class _FcxRipCircPacketSize_Type(Integer32):
    """Custom type fcxRipCircPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(512, 65535),
    )


_FcxRipCircPacketSize_Type.__name__ = "Integer32"
_FcxRipCircPacketSize_Object = MibTableColumn
fcxRipCircPacketSize = _FcxRipCircPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 10, 1, 14),
    _FcxRipCircPacketSize_Type()
)
fcxRipCircPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRipCircPacketSize.setStatus("mandatory")


class _FcxRipCircOutputFiltering_Type(Integer32):
    """Custom type fcxRipCircOutputFiltering based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("denied", 3),
          ("off", 1),
          ("permitted", 2))
    )


_FcxRipCircOutputFiltering_Type.__name__ = "Integer32"
_FcxRipCircOutputFiltering_Object = MibTableColumn
fcxRipCircOutputFiltering = _FcxRipCircOutputFiltering_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 10, 1, 20),
    _FcxRipCircOutputFiltering_Type()
)
fcxRipCircOutputFiltering.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRipCircOutputFiltering.setStatus("mandatory")
_FcxRipInputFilteringTable_Object = MibTable
fcxRipInputFilteringTable = _FcxRipInputFilteringTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 11)
)
if mibBuilder.loadTexts:
    fcxRipInputFilteringTable.setStatus("mandatory")
_FcxRipInputFilteringEntry_Object = MibTableRow
fcxRipInputFilteringEntry = _FcxRipInputFilteringEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 11, 1)
)
fcxRipInputFilteringEntry.setIndexNames(
    (0, "PCE-MIB", "fcxRipInFltFilterId"),
)
if mibBuilder.loadTexts:
    fcxRipInputFilteringEntry.setStatus("mandatory")


class _FcxRipInFltFilterId_Type(Integer32):
    """Custom type fcxRipInFltFilterId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FcxRipInFltFilterId_Type.__name__ = "Integer32"
_FcxRipInFltFilterId_Object = MibTableColumn
fcxRipInFltFilterId = _FcxRipInFltFilterId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 11, 1, 1),
    _FcxRipInFltFilterId_Type()
)
fcxRipInFltFilterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcxRipInFltFilterId.setStatus("mandatory")


class _FcxRipInFltStatus_Type(Integer32):
    """Custom type fcxRipInFltStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcxRipInFltStatus_Type.__name__ = "Integer32"
_FcxRipInFltStatus_Object = MibTableColumn
fcxRipInFltStatus = _FcxRipInFltStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 11, 1, 2),
    _FcxRipInFltStatus_Type()
)
fcxRipInFltStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRipInFltStatus.setStatus("mandatory")


class _FcxRipInFltFiltering_Type(Integer32):
    """Custom type fcxRipInFltFiltering based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcxRipInFltFiltering_Type.__name__ = "Integer32"
_FcxRipInFltFiltering_Object = MibTableColumn
fcxRipInFltFiltering = _FcxRipInFltFiltering_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 11, 1, 3),
    _FcxRipInFltFiltering_Type()
)
fcxRipInFltFiltering.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRipInFltFiltering.setStatus("mandatory")


class _FcxRipInFltNetAddress_Type(OctetString):
    """Custom type fcxRipInFltNetAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_FcxRipInFltNetAddress_Type.__name__ = "OctetString"
_FcxRipInFltNetAddress_Object = MibTableColumn
fcxRipInFltNetAddress = _FcxRipInFltNetAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 11, 1, 4),
    _FcxRipInFltNetAddress_Type()
)
fcxRipInFltNetAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRipInFltNetAddress.setStatus("mandatory")


class _FcxRipInFltMask_Type(OctetString):
    """Custom type fcxRipInFltMask based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_FcxRipInFltMask_Type.__name__ = "OctetString"
_FcxRipInFltMask_Object = MibTableColumn
fcxRipInFltMask = _FcxRipInFltMask_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 11, 1, 5),
    _FcxRipInFltMask_Type()
)
fcxRipInFltMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRipInFltMask.setStatus("mandatory")
_FcxRipOutputFilteringTable_Object = MibTable
fcxRipOutputFilteringTable = _FcxRipOutputFilteringTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 12)
)
if mibBuilder.loadTexts:
    fcxRipOutputFilteringTable.setStatus("mandatory")
_FcxRipOutputFilteringEntry_Object = MibTableRow
fcxRipOutputFilteringEntry = _FcxRipOutputFilteringEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 12, 1)
)
fcxRipOutputFilteringEntry.setIndexNames(
    (0, "PCE-MIB", "fcxRipOutFltCircuitId"),
    (0, "PCE-MIB", "fcxRipOutFltFilterId"),
)
if mibBuilder.loadTexts:
    fcxRipOutputFilteringEntry.setStatus("mandatory")


class _FcxRipOutFltCircuitId_Type(Integer32):
    """Custom type fcxRipOutFltCircuitId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 199),
    )


_FcxRipOutFltCircuitId_Type.__name__ = "Integer32"
_FcxRipOutFltCircuitId_Object = MibTableColumn
fcxRipOutFltCircuitId = _FcxRipOutFltCircuitId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 12, 1, 1),
    _FcxRipOutFltCircuitId_Type()
)
fcxRipOutFltCircuitId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcxRipOutFltCircuitId.setStatus("mandatory")


class _FcxRipOutFltFilterId_Type(Integer32):
    """Custom type fcxRipOutFltFilterId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FcxRipOutFltFilterId_Type.__name__ = "Integer32"
_FcxRipOutFltFilterId_Object = MibTableColumn
fcxRipOutFltFilterId = _FcxRipOutFltFilterId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 12, 1, 2),
    _FcxRipOutFltFilterId_Type()
)
fcxRipOutFltFilterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcxRipOutFltFilterId.setStatus("mandatory")


class _FcxRipOutFltStatus_Type(Integer32):
    """Custom type fcxRipOutFltStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcxRipOutFltStatus_Type.__name__ = "Integer32"
_FcxRipOutFltStatus_Object = MibTableColumn
fcxRipOutFltStatus = _FcxRipOutFltStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 12, 1, 3),
    _FcxRipOutFltStatus_Type()
)
fcxRipOutFltStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRipOutFltStatus.setStatus("mandatory")


class _FcxRipOutFltFiltering_Type(Integer32):
    """Custom type fcxRipOutFltFiltering based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcxRipOutFltFiltering_Type.__name__ = "Integer32"
_FcxRipOutFltFiltering_Object = MibTableColumn
fcxRipOutFltFiltering = _FcxRipOutFltFiltering_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 12, 1, 4),
    _FcxRipOutFltFiltering_Type()
)
fcxRipOutFltFiltering.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRipOutFltFiltering.setStatus("mandatory")


class _FcxRipOutFltNetAddress_Type(OctetString):
    """Custom type fcxRipOutFltNetAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_FcxRipOutFltNetAddress_Type.__name__ = "OctetString"
_FcxRipOutFltNetAddress_Object = MibTableColumn
fcxRipOutFltNetAddress = _FcxRipOutFltNetAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 12, 1, 5),
    _FcxRipOutFltNetAddress_Type()
)
fcxRipOutFltNetAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRipOutFltNetAddress.setStatus("mandatory")


class _FcxRipOutFltMask_Type(OctetString):
    """Custom type fcxRipOutFltMask based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_FcxRipOutFltMask_Type.__name__ = "OctetString"
_FcxRipOutFltMask_Object = MibTableColumn
fcxRipOutFltMask = _FcxRipOutFltMask_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 12, 1, 6),
    _FcxRipOutFltMask_Type()
)
fcxRipOutFltMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxRipOutFltMask.setStatus("mandatory")
_FcxServices_ObjectIdentity = ObjectIdentity
fcxServices = _FcxServices_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30)
)
_FcxServInstance_ObjectIdentity = ObjectIdentity
fcxServInstance = _FcxServInstance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 1)
)


class _FcxServSapSysState_Type(Integer32):
    """Custom type fcxServSapSysState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcxServSapSysState_Type.__name__ = "Integer32"
_FcxServSapSysState_Object = MibScalar
fcxServSapSysState = _FcxServSapSysState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 1, 1),
    _FcxServSapSysState_Type()
)
fcxServSapSysState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServSapSysState.setStatus("mandatory")


class _FcxServSapInputFiltering_Type(Integer32):
    """Custom type fcxServSapInputFiltering based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("denied", 3),
          ("off", 1),
          ("permitted", 2))
    )


_FcxServSapInputFiltering_Type.__name__ = "Integer32"
_FcxServSapInputFiltering_Object = MibScalar
fcxServSapInputFiltering = _FcxServSapInputFiltering_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 1, 12),
    _FcxServSapInputFiltering_Type()
)
fcxServSapInputFiltering.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServSapInputFiltering.setStatus("mandatory")
_FcxServCircuitTable_Object = MibTable
fcxServCircuitTable = _FcxServCircuitTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 10)
)
if mibBuilder.loadTexts:
    fcxServCircuitTable.setStatus("mandatory")
_FcxServCircuitEntry_Object = MibTableRow
fcxServCircuitEntry = _FcxServCircuitEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 10, 1)
)
fcxServCircuitEntry.setIndexNames(
    (0, "PCE-MIB", "fcxServCircSapCircuitId"),
)
if mibBuilder.loadTexts:
    fcxServCircuitEntry.setStatus("mandatory")


class _FcxServCircSapCircuitId_Type(Integer32):
    """Custom type fcxServCircSapCircuitId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 199),
    )


_FcxServCircSapCircuitId_Type.__name__ = "Integer32"
_FcxServCircSapCircuitId_Object = MibTableColumn
fcxServCircSapCircuitId = _FcxServCircSapCircuitId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 10, 1, 1),
    _FcxServCircSapCircuitId_Type()
)
fcxServCircSapCircuitId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcxServCircSapCircuitId.setStatus("mandatory")


class _FcxServCircSapState_Type(Integer32):
    """Custom type fcxServCircSapState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcxServCircSapState_Type.__name__ = "Integer32"
_FcxServCircSapState_Object = MibTableColumn
fcxServCircSapState = _FcxServCircSapState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 10, 1, 2),
    _FcxServCircSapState_Type()
)
fcxServCircSapState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServCircSapState.setStatus("mandatory")


class _FcxServCircSapPace_Type(Integer32):
    """Custom type fcxServCircSapPace based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_FcxServCircSapPace_Type.__name__ = "Integer32"
_FcxServCircSapPace_Object = MibTableColumn
fcxServCircSapPace = _FcxServCircSapPace_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 10, 1, 3),
    _FcxServCircSapPace_Type()
)
fcxServCircSapPace.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServCircSapPace.setStatus("mandatory")


class _FcxServCircSapUpdate_Type(Integer32):
    """Custom type fcxServCircSapUpdate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_FcxServCircSapUpdate_Type.__name__ = "Integer32"
_FcxServCircSapUpdate_Object = MibTableColumn
fcxServCircSapUpdate = _FcxServCircSapUpdate_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 10, 1, 4),
    _FcxServCircSapUpdate_Type()
)
fcxServCircSapUpdate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServCircSapUpdate.setStatus("mandatory")


class _FcxServCircSapAgeMultiplier_Type(Integer32):
    """Custom type fcxServCircSapAgeMultiplier based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 255),
    )


_FcxServCircSapAgeMultiplier_Type.__name__ = "Integer32"
_FcxServCircSapAgeMultiplier_Object = MibTableColumn
fcxServCircSapAgeMultiplier = _FcxServCircSapAgeMultiplier_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 10, 1, 5),
    _FcxServCircSapAgeMultiplier_Type()
)
fcxServCircSapAgeMultiplier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServCircSapAgeMultiplier.setStatus("mandatory")


class _FcxServCircSapPacketSize_Type(Integer32):
    """Custom type fcxServCircSapPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(512, 65535),
    )


_FcxServCircSapPacketSize_Type.__name__ = "Integer32"
_FcxServCircSapPacketSize_Object = MibTableColumn
fcxServCircSapPacketSize = _FcxServCircSapPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 10, 1, 6),
    _FcxServCircSapPacketSize_Type()
)
fcxServCircSapPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServCircSapPacketSize.setStatus("mandatory")


class _FcxServCircSapGetNearestServerReply_Type(Integer32):
    """Custom type fcxServCircSapGetNearestServerReply based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FcxServCircSapGetNearestServerReply_Type.__name__ = "Integer32"
_FcxServCircSapGetNearestServerReply_Object = MibTableColumn
fcxServCircSapGetNearestServerReply = _FcxServCircSapGetNearestServerReply_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 10, 1, 7),
    _FcxServCircSapGetNearestServerReply_Type()
)
fcxServCircSapGetNearestServerReply.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServCircSapGetNearestServerReply.setStatus("mandatory")


class _FcxServCircSapOutputFiltering_Type(Integer32):
    """Custom type fcxServCircSapOutputFiltering based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("denied", 3),
          ("off", 1),
          ("permitted", 2))
    )


_FcxServCircSapOutputFiltering_Type.__name__ = "Integer32"
_FcxServCircSapOutputFiltering_Object = MibTableColumn
fcxServCircSapOutputFiltering = _FcxServCircSapOutputFiltering_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 10, 1, 10),
    _FcxServCircSapOutputFiltering_Type()
)
fcxServCircSapOutputFiltering.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServCircSapOutputFiltering.setStatus("mandatory")
_FcxServStaticServiceTable_Object = MibTable
fcxServStaticServiceTable = _FcxServStaticServiceTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 20)
)
if mibBuilder.loadTexts:
    fcxServStaticServiceTable.setStatus("mandatory")
_FcxServStaticServiceEntry_Object = MibTableRow
fcxServStaticServiceEntry = _FcxServStaticServiceEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 20, 1)
)
fcxServStaticServiceEntry.setIndexNames(
    (0, "PCE-MIB", "fcxServStaticServiceId"),
)
if mibBuilder.loadTexts:
    fcxServStaticServiceEntry.setStatus("mandatory")


class _FcxServStaticServiceId_Type(Integer32):
    """Custom type fcxServStaticServiceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FcxServStaticServiceId_Type.__name__ = "Integer32"
_FcxServStaticServiceId_Object = MibTableColumn
fcxServStaticServiceId = _FcxServStaticServiceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 20, 1, 1),
    _FcxServStaticServiceId_Type()
)
fcxServStaticServiceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcxServStaticServiceId.setStatus("mandatory")


class _FcxServStaticStatus_Type(Integer32):
    """Custom type fcxServStaticStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcxServStaticStatus_Type.__name__ = "Integer32"
_FcxServStaticStatus_Object = MibTableColumn
fcxServStaticStatus = _FcxServStaticStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 20, 1, 2),
    _FcxServStaticStatus_Type()
)
fcxServStaticStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServStaticStatus.setStatus("mandatory")


class _FcxServStaticCircuitId_Type(Integer32):
    """Custom type fcxServStaticCircuitId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 199),
    )


_FcxServStaticCircuitId_Type.__name__ = "Integer32"
_FcxServStaticCircuitId_Object = MibTableColumn
fcxServStaticCircuitId = _FcxServStaticCircuitId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 20, 1, 3),
    _FcxServStaticCircuitId_Type()
)
fcxServStaticCircuitId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServStaticCircuitId.setStatus("mandatory")


class _FcxServStaticName_Type(DisplayString):
    """Custom type fcxServStaticName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 47),
    )


_FcxServStaticName_Type.__name__ = "DisplayString"
_FcxServStaticName_Object = MibTableColumn
fcxServStaticName = _FcxServStaticName_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 20, 1, 4),
    _FcxServStaticName_Type()
)
fcxServStaticName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServStaticName.setStatus("mandatory")


class _FcxServStaticType_Type(OctetString):
    """Custom type fcxServStaticType based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_FcxServStaticType_Type.__name__ = "OctetString"
_FcxServStaticType_Object = MibTableColumn
fcxServStaticType = _FcxServStaticType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 20, 1, 5),
    _FcxServStaticType_Type()
)
fcxServStaticType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServStaticType.setStatus("mandatory")


class _FcxServStaticNetNum_Type(OctetString):
    """Custom type fcxServStaticNetNum based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_FcxServStaticNetNum_Type.__name__ = "OctetString"
_FcxServStaticNetNum_Object = MibTableColumn
fcxServStaticNetNum = _FcxServStaticNetNum_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 20, 1, 6),
    _FcxServStaticNetNum_Type()
)
fcxServStaticNetNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServStaticNetNum.setStatus("mandatory")


class _FcxServStaticNode_Type(OctetString):
    """Custom type fcxServStaticNode based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_FcxServStaticNode_Type.__name__ = "OctetString"
_FcxServStaticNode_Object = MibTableColumn
fcxServStaticNode = _FcxServStaticNode_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 20, 1, 7),
    _FcxServStaticNode_Type()
)
fcxServStaticNode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServStaticNode.setStatus("mandatory")


class _FcxServStaticSocket_Type(OctetString):
    """Custom type fcxServStaticSocket based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_FcxServStaticSocket_Type.__name__ = "OctetString"
_FcxServStaticSocket_Object = MibTableColumn
fcxServStaticSocket = _FcxServStaticSocket_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 20, 1, 8),
    _FcxServStaticSocket_Type()
)
fcxServStaticSocket.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServStaticSocket.setStatus("mandatory")


class _FcxServStaticHopCount_Type(Integer32):
    """Custom type fcxServStaticHopCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FcxServStaticHopCount_Type.__name__ = "Integer32"
_FcxServStaticHopCount_Object = MibTableColumn
fcxServStaticHopCount = _FcxServStaticHopCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 20, 1, 9),
    _FcxServStaticHopCount_Type()
)
fcxServStaticHopCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServStaticHopCount.setStatus("mandatory")
_FcxServSapInputFilteringTable_Object = MibTable
fcxServSapInputFilteringTable = _FcxServSapInputFilteringTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 30)
)
if mibBuilder.loadTexts:
    fcxServSapInputFilteringTable.setStatus("mandatory")
_FcxServSapInputFilteringEntry_Object = MibTableRow
fcxServSapInputFilteringEntry = _FcxServSapInputFilteringEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 30, 1)
)
fcxServSapInputFilteringEntry.setIndexNames(
    (0, "PCE-MIB", "fcxServSapInFltFilterId"),
)
if mibBuilder.loadTexts:
    fcxServSapInputFilteringEntry.setStatus("mandatory")


class _FcxServSapInFltFilterId_Type(Integer32):
    """Custom type fcxServSapInFltFilterId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FcxServSapInFltFilterId_Type.__name__ = "Integer32"
_FcxServSapInFltFilterId_Object = MibTableColumn
fcxServSapInFltFilterId = _FcxServSapInFltFilterId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 30, 1, 1),
    _FcxServSapInFltFilterId_Type()
)
fcxServSapInFltFilterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcxServSapInFltFilterId.setStatus("mandatory")


class _FcxServSapInFltStatus_Type(Integer32):
    """Custom type fcxServSapInFltStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcxServSapInFltStatus_Type.__name__ = "Integer32"
_FcxServSapInFltStatus_Object = MibTableColumn
fcxServSapInFltStatus = _FcxServSapInFltStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 30, 1, 2),
    _FcxServSapInFltStatus_Type()
)
fcxServSapInFltStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServSapInFltStatus.setStatus("mandatory")


class _FcxServSapInFltFiltering_Type(Integer32):
    """Custom type fcxServSapInFltFiltering based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcxServSapInFltFiltering_Type.__name__ = "Integer32"
_FcxServSapInFltFiltering_Object = MibTableColumn
fcxServSapInFltFiltering = _FcxServSapInFltFiltering_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 30, 1, 3),
    _FcxServSapInFltFiltering_Type()
)
fcxServSapInFltFiltering.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServSapInFltFiltering.setStatus("mandatory")


class _FcxServSapInFltCheckedField_Type(Integer32):
    """Custom type fcxServSapInFltCheckedField based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("name", 1),
          ("nameAndType", 3),
          ("type", 2))
    )


_FcxServSapInFltCheckedField_Type.__name__ = "Integer32"
_FcxServSapInFltCheckedField_Object = MibTableColumn
fcxServSapInFltCheckedField = _FcxServSapInFltCheckedField_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 30, 1, 4),
    _FcxServSapInFltCheckedField_Type()
)
fcxServSapInFltCheckedField.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServSapInFltCheckedField.setStatus("mandatory")


class _FcxServSapInFltServiceNameType_Type(Integer32):
    """Custom type fcxServSapInFltServiceNameType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("beginningPattern", 2),
          ("fullName", 1))
    )


_FcxServSapInFltServiceNameType_Type.__name__ = "Integer32"
_FcxServSapInFltServiceNameType_Object = MibTableColumn
fcxServSapInFltServiceNameType = _FcxServSapInFltServiceNameType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 30, 1, 5),
    _FcxServSapInFltServiceNameType_Type()
)
fcxServSapInFltServiceNameType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServSapInFltServiceNameType.setStatus("mandatory")


class _FcxServSapInFltServiceName_Type(DisplayString):
    """Custom type fcxServSapInFltServiceName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 47),
    )


_FcxServSapInFltServiceName_Type.__name__ = "DisplayString"
_FcxServSapInFltServiceName_Object = MibTableColumn
fcxServSapInFltServiceName = _FcxServSapInFltServiceName_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 30, 1, 6),
    _FcxServSapInFltServiceName_Type()
)
fcxServSapInFltServiceName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServSapInFltServiceName.setStatus("mandatory")


class _FcxServSapInFltServiceType_Type(OctetString):
    """Custom type fcxServSapInFltServiceType based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_FcxServSapInFltServiceType_Type.__name__ = "OctetString"
_FcxServSapInFltServiceType_Object = MibTableColumn
fcxServSapInFltServiceType = _FcxServSapInFltServiceType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 30, 1, 7),
    _FcxServSapInFltServiceType_Type()
)
fcxServSapInFltServiceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServSapInFltServiceType.setStatus("mandatory")
_FcxServSapOutputFilteringTable_Object = MibTable
fcxServSapOutputFilteringTable = _FcxServSapOutputFilteringTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 31)
)
if mibBuilder.loadTexts:
    fcxServSapOutputFilteringTable.setStatus("mandatory")
_FcxServSapOutputFilteringEntry_Object = MibTableRow
fcxServSapOutputFilteringEntry = _FcxServSapOutputFilteringEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 31, 1)
)
fcxServSapOutputFilteringEntry.setIndexNames(
    (0, "PCE-MIB", "fcxServSapOutFltCircuitId"),
    (0, "PCE-MIB", "fcxServSapOutFltFilterId"),
)
if mibBuilder.loadTexts:
    fcxServSapOutputFilteringEntry.setStatus("mandatory")


class _FcxServSapOutFltCircuitId_Type(Integer32):
    """Custom type fcxServSapOutFltCircuitId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 199),
    )


_FcxServSapOutFltCircuitId_Type.__name__ = "Integer32"
_FcxServSapOutFltCircuitId_Object = MibTableColumn
fcxServSapOutFltCircuitId = _FcxServSapOutFltCircuitId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 31, 1, 1),
    _FcxServSapOutFltCircuitId_Type()
)
fcxServSapOutFltCircuitId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcxServSapOutFltCircuitId.setStatus("mandatory")


class _FcxServSapOutFltFilterId_Type(Integer32):
    """Custom type fcxServSapOutFltFilterId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FcxServSapOutFltFilterId_Type.__name__ = "Integer32"
_FcxServSapOutFltFilterId_Object = MibTableColumn
fcxServSapOutFltFilterId = _FcxServSapOutFltFilterId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 31, 1, 2),
    _FcxServSapOutFltFilterId_Type()
)
fcxServSapOutFltFilterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fcxServSapOutFltFilterId.setStatus("mandatory")


class _FcxServSapOutFltStatus_Type(Integer32):
    """Custom type fcxServSapOutFltStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FcxServSapOutFltStatus_Type.__name__ = "Integer32"
_FcxServSapOutFltStatus_Object = MibTableColumn
fcxServSapOutFltStatus = _FcxServSapOutFltStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 31, 1, 3),
    _FcxServSapOutFltStatus_Type()
)
fcxServSapOutFltStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServSapOutFltStatus.setStatus("mandatory")


class _FcxServSapOutFltFiltering_Type(Integer32):
    """Custom type fcxServSapOutFltFiltering based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FcxServSapOutFltFiltering_Type.__name__ = "Integer32"
_FcxServSapOutFltFiltering_Object = MibTableColumn
fcxServSapOutFltFiltering = _FcxServSapOutFltFiltering_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 31, 1, 4),
    _FcxServSapOutFltFiltering_Type()
)
fcxServSapOutFltFiltering.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServSapOutFltFiltering.setStatus("mandatory")


class _FcxServSapOutFltCheckedField_Type(Integer32):
    """Custom type fcxServSapOutFltCheckedField based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("name", 1),
          ("nameAndType", 3),
          ("type", 2))
    )


_FcxServSapOutFltCheckedField_Type.__name__ = "Integer32"
_FcxServSapOutFltCheckedField_Object = MibTableColumn
fcxServSapOutFltCheckedField = _FcxServSapOutFltCheckedField_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 31, 1, 5),
    _FcxServSapOutFltCheckedField_Type()
)
fcxServSapOutFltCheckedField.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServSapOutFltCheckedField.setStatus("mandatory")


class _FcxServSapOutFltServiceNameType_Type(Integer32):
    """Custom type fcxServSapOutFltServiceNameType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("beginningPattern", 2),
          ("fullName", 1))
    )


_FcxServSapOutFltServiceNameType_Type.__name__ = "Integer32"
_FcxServSapOutFltServiceNameType_Object = MibTableColumn
fcxServSapOutFltServiceNameType = _FcxServSapOutFltServiceNameType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 31, 1, 6),
    _FcxServSapOutFltServiceNameType_Type()
)
fcxServSapOutFltServiceNameType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServSapOutFltServiceNameType.setStatus("mandatory")


class _FcxServSapOutFltServiceName_Type(DisplayString):
    """Custom type fcxServSapOutFltServiceName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 47),
    )


_FcxServSapOutFltServiceName_Type.__name__ = "DisplayString"
_FcxServSapOutFltServiceName_Object = MibTableColumn
fcxServSapOutFltServiceName = _FcxServSapOutFltServiceName_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 31, 1, 7),
    _FcxServSapOutFltServiceName_Type()
)
fcxServSapOutFltServiceName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServSapOutFltServiceName.setStatus("mandatory")


class _FcxServSapOutFltServiceType_Type(OctetString):
    """Custom type fcxServSapOutFltServiceType based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_FcxServSapOutFltServiceType_Type.__name__ = "OctetString"
_FcxServSapOutFltServiceType_Object = MibTableColumn
fcxServSapOutFltServiceType = _FcxServSapOutFltServiceType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 31, 1, 8),
    _FcxServSapOutFltServiceType_Type()
)
fcxServSapOutFltServiceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fcxServSapOutFltServiceType.setStatus("mandatory")
_FcClnp_ObjectIdentity = ObjectIdentity
fcClnp = _FcClnp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38)
)


class _FccClnpRouting_Type(Integer32):
    """Custom type fccClnpRouting based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FccClnpRouting_Type.__name__ = "Integer32"
_FccClnpRouting_Object = MibScalar
fccClnpRouting = _FccClnpRouting_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 1),
    _FccClnpRouting_Type()
)
fccClnpRouting.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fccClnpRouting.setStatus("mandatory")


class _FccLocalNetworkEntityTitle_Type(OctetString):
    """Custom type fccLocalNetworkEntityTitle based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(22, 22),
    )


_FccLocalNetworkEntityTitle_Type.__name__ = "OctetString"
_FccLocalNetworkEntityTitle_Object = MibScalar
fccLocalNetworkEntityTitle = _FccLocalNetworkEntityTitle_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 2),
    _FccLocalNetworkEntityTitle_Type()
)
fccLocalNetworkEntityTitle.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fccLocalNetworkEntityTitle.setStatus("mandatory")


class _FccErrorFramesSending_Type(Integer32):
    """Custom type fccErrorFramesSending based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FccErrorFramesSending_Type.__name__ = "Integer32"
_FccErrorFramesSending_Object = MibScalar
fccErrorFramesSending = _FccErrorFramesSending_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 4),
    _FccErrorFramesSending_Type()
)
fccErrorFramesSending.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fccErrorFramesSending.setStatus("mandatory")
_FccVirtualPortTable_Object = MibTable
fccVirtualPortTable = _FccVirtualPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 10)
)
if mibBuilder.loadTexts:
    fccVirtualPortTable.setStatus("mandatory")
_FccVirtualPortEntry_Object = MibTableRow
fccVirtualPortEntry = _FccVirtualPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 10, 1)
)
fccVirtualPortEntry.setIndexNames(
    (0, "PCE-MIB", "fccVpVirtualPortId"),
)
if mibBuilder.loadTexts:
    fccVirtualPortEntry.setStatus("mandatory")


class _FccVpVirtualPortId_Type(Integer32):
    """Custom type fccVpVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FccVpVirtualPortId_Type.__name__ = "Integer32"
_FccVpVirtualPortId_Object = MibTableColumn
fccVpVirtualPortId = _FccVpVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 10, 1, 1),
    _FccVpVirtualPortId_Type()
)
fccVpVirtualPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fccVpVirtualPortId.setStatus("mandatory")


class _FccVpStatus_Type(Integer32):
    """Custom type fccVpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FccVpStatus_Type.__name__ = "Integer32"
_FccVpStatus_Object = MibTableColumn
fccVpStatus = _FccVpStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 10, 1, 2),
    _FccVpStatus_Type()
)
fccVpStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fccVpStatus.setStatus("mandatory")


class _FccVpMtu_Type(Integer32):
    """Custom type fccVpMtu based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(512, 1600),
    )


_FccVpMtu_Type.__name__ = "Integer32"
_FccVpMtu_Object = MibTableColumn
fccVpMtu = _FccVpMtu_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 10, 1, 4),
    _FccVpMtu_Type()
)
fccVpMtu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fccVpMtu.setStatus("mandatory")
_FccLocalVirtualPortTable_Object = MibTable
fccLocalVirtualPortTable = _FccLocalVirtualPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 11)
)
if mibBuilder.loadTexts:
    fccLocalVirtualPortTable.setStatus("mandatory")
_FccLocalVirtualPortEntry_Object = MibTableRow
fccLocalVirtualPortEntry = _FccLocalVirtualPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 11, 1)
)
fccLocalVirtualPortEntry.setIndexNames(
    (0, "PCE-MIB", "fccLvpVirtualPortId"),
)
if mibBuilder.loadTexts:
    fccLocalVirtualPortEntry.setStatus("mandatory")


class _FccLvpVirtualPortId_Type(Integer32):
    """Custom type fccLvpVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FccLvpVirtualPortId_Type.__name__ = "Integer32"
_FccLvpVirtualPortId_Object = MibTableColumn
fccLvpVirtualPortId = _FccLvpVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 11, 1, 1),
    _FccLvpVirtualPortId_Type()
)
fccLvpVirtualPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fccLvpVirtualPortId.setStatus("mandatory")


class _FccLvpStatus_Type(Integer32):
    """Custom type fccLvpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FccLvpStatus_Type.__name__ = "Integer32"
_FccLvpStatus_Object = MibTableColumn
fccLvpStatus = _FccLvpStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 11, 1, 2),
    _FccLvpStatus_Type()
)
fccLvpStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fccLvpStatus.setStatus("mandatory")


class _FccLvpEsIsRedirection_Type(Integer32):
    """Custom type fccLvpEsIsRedirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FccLvpEsIsRedirection_Type.__name__ = "Integer32"
_FccLvpEsIsRedirection_Object = MibTableColumn
fccLvpEsIsRedirection = _FccLvpEsIsRedirection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 11, 1, 3),
    _FccLvpEsIsRedirection_Type()
)
fccLvpEsIsRedirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fccLvpEsIsRedirection.setStatus("mandatory")


class _FccLvpEsIsConfigTimer_Type(Integer32):
    """Custom type fccLvpEsIsConfigTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_FccLvpEsIsConfigTimer_Type.__name__ = "Integer32"
_FccLvpEsIsConfigTimer_Object = MibTableColumn
fccLvpEsIsConfigTimer = _FccLvpEsIsConfigTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 11, 1, 4),
    _FccLvpEsIsConfigTimer_Type()
)
fccLvpEsIsConfigTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fccLvpEsIsConfigTimer.setStatus("mandatory")


class _FccLvpEsIsHoldingTimer_Type(Integer32):
    """Custom type fccLvpEsIsHoldingTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_FccLvpEsIsHoldingTimer_Type.__name__ = "Integer32"
_FccLvpEsIsHoldingTimer_Object = MibTableColumn
fccLvpEsIsHoldingTimer = _FccLvpEsIsHoldingTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 11, 1, 5),
    _FccLvpEsIsHoldingTimer_Type()
)
fccLvpEsIsHoldingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fccLvpEsIsHoldingTimer.setStatus("mandatory")
_FccNeighborTable_Object = MibTable
fccNeighborTable = _FccNeighborTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 20)
)
if mibBuilder.loadTexts:
    fccNeighborTable.setStatus("mandatory")
_FccNeighborEntry_Object = MibTableRow
fccNeighborEntry = _FccNeighborEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 20, 1)
)
fccNeighborEntry.setIndexNames(
    (0, "PCE-MIB", "fccNeighNeighborId"),
)
if mibBuilder.loadTexts:
    fccNeighborEntry.setStatus("mandatory")


class _FccNeighNeighborId_Type(Integer32):
    """Custom type fccNeighNeighborId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FccNeighNeighborId_Type.__name__ = "Integer32"
_FccNeighNeighborId_Object = MibTableColumn
fccNeighNeighborId = _FccNeighNeighborId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 20, 1, 1),
    _FccNeighNeighborId_Type()
)
fccNeighNeighborId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fccNeighNeighborId.setStatus("mandatory")


class _FccNeighStatus_Type(Integer32):
    """Custom type fccNeighStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FccNeighStatus_Type.__name__ = "Integer32"
_FccNeighStatus_Object = MibTableColumn
fccNeighStatus = _FccNeighStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 20, 1, 2),
    _FccNeighStatus_Type()
)
fccNeighStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fccNeighStatus.setStatus("mandatory")


class _FccNeighType_Type(Integer32):
    """Custom type fccNeighType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("es", 1),
          ("is", 2))
    )


_FccNeighType_Type.__name__ = "Integer32"
_FccNeighType_Object = MibTableColumn
fccNeighType = _FccNeighType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 20, 1, 3),
    _FccNeighType_Type()
)
fccNeighType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fccNeighType.setStatus("mandatory")


class _FccNeighVirtualPortId_Type(Integer32):
    """Custom type fccNeighVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FccNeighVirtualPortId_Type.__name__ = "Integer32"
_FccNeighVirtualPortId_Object = MibTableColumn
fccNeighVirtualPortId = _FccNeighVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 20, 1, 4),
    _FccNeighVirtualPortId_Type()
)
fccNeighVirtualPortId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fccNeighVirtualPortId.setStatus("mandatory")


class _FccNeighClnpAddress_Type(OctetString):
    """Custom type fccNeighClnpAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(22, 22),
    )


_FccNeighClnpAddress_Type.__name__ = "OctetString"
_FccNeighClnpAddress_Object = MibTableColumn
fccNeighClnpAddress = _FccNeighClnpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 20, 1, 5),
    _FccNeighClnpAddress_Type()
)
fccNeighClnpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fccNeighClnpAddress.setStatus("mandatory")
_FccLocalNeighborTable_Object = MibTable
fccLocalNeighborTable = _FccLocalNeighborTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 21)
)
if mibBuilder.loadTexts:
    fccLocalNeighborTable.setStatus("mandatory")
_FccLocalNeighborEntry_Object = MibTableRow
fccLocalNeighborEntry = _FccLocalNeighborEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 21, 1)
)
fccLocalNeighborEntry.setIndexNames(
    (0, "PCE-MIB", "fccLneighNeighborId"),
)
if mibBuilder.loadTexts:
    fccLocalNeighborEntry.setStatus("mandatory")


class _FccLneighNeighborId_Type(Integer32):
    """Custom type fccLneighNeighborId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FccLneighNeighborId_Type.__name__ = "Integer32"
_FccLneighNeighborId_Object = MibTableColumn
fccLneighNeighborId = _FccLneighNeighborId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 21, 1, 1),
    _FccLneighNeighborId_Type()
)
fccLneighNeighborId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fccLneighNeighborId.setStatus("mandatory")


class _FccLneighStatus_Type(Integer32):
    """Custom type fccLneighStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FccLneighStatus_Type.__name__ = "Integer32"
_FccLneighStatus_Object = MibTableColumn
fccLneighStatus = _FccLneighStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 21, 1, 2),
    _FccLneighStatus_Type()
)
fccLneighStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fccLneighStatus.setStatus("mandatory")


class _FccLneighMacAddress_Type(OctetString):
    """Custom type fccLneighMacAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_FccLneighMacAddress_Type.__name__ = "OctetString"
_FccLneighMacAddress_Object = MibTableColumn
fccLneighMacAddress = _FccLneighMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 21, 1, 3),
    _FccLneighMacAddress_Type()
)
fccLneighMacAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fccLneighMacAddress.setStatus("mandatory")
_FccRemoteNeighborTable_Object = MibTable
fccRemoteNeighborTable = _FccRemoteNeighborTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 22)
)
if mibBuilder.loadTexts:
    fccRemoteNeighborTable.setStatus("mandatory")
_FccRemoteNeighborEntry_Object = MibTableRow
fccRemoteNeighborEntry = _FccRemoteNeighborEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 22, 1)
)
fccRemoteNeighborEntry.setIndexNames(
    (0, "PCE-MIB", "fccRneighNeighborId"),
)
if mibBuilder.loadTexts:
    fccRemoteNeighborEntry.setStatus("mandatory")


class _FccRneighNeighborId_Type(Integer32):
    """Custom type fccRneighNeighborId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FccRneighNeighborId_Type.__name__ = "Integer32"
_FccRneighNeighborId_Object = MibTableColumn
fccRneighNeighborId = _FccRneighNeighborId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 22, 1, 1),
    _FccRneighNeighborId_Type()
)
fccRneighNeighborId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fccRneighNeighborId.setStatus("mandatory")


class _FccRneighStatus_Type(Integer32):
    """Custom type fccRneighStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FccRneighStatus_Type.__name__ = "Integer32"
_FccRneighStatus_Object = MibTableColumn
fccRneighStatus = _FccRneighStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 22, 1, 2),
    _FccRneighStatus_Type()
)
fccRneighStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fccRneighStatus.setStatus("mandatory")


class _FccRneighRemoteAddress_Type(OctetString):
    """Custom type fccRneighRemoteAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FccRneighRemoteAddress_Type.__name__ = "OctetString"
_FccRneighRemoteAddress_Object = MibTableColumn
fccRneighRemoteAddress = _FccRneighRemoteAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 22, 1, 3),
    _FccRneighRemoteAddress_Type()
)
fccRneighRemoteAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fccRneighRemoteAddress.setStatus("mandatory")
_FccClnpRouteTable_Object = MibTable
fccClnpRouteTable = _FccClnpRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 30)
)
if mibBuilder.loadTexts:
    fccClnpRouteTable.setStatus("mandatory")
_FccClnpRouteEntry_Object = MibTableRow
fccClnpRouteEntry = _FccClnpRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 30, 1)
)
fccClnpRouteEntry.setIndexNames(
    (0, "PCE-MIB", "fccRoutRouteId"),
)
if mibBuilder.loadTexts:
    fccClnpRouteEntry.setStatus("mandatory")


class _FccRoutRouteId_Type(Integer32):
    """Custom type fccRoutRouteId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FccRoutRouteId_Type.__name__ = "Integer32"
_FccRoutRouteId_Object = MibTableColumn
fccRoutRouteId = _FccRoutRouteId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 30, 1, 1),
    _FccRoutRouteId_Type()
)
fccRoutRouteId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fccRoutRouteId.setStatus("mandatory")


class _FccRoutStatus_Type(Integer32):
    """Custom type fccRoutStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FccRoutStatus_Type.__name__ = "Integer32"
_FccRoutStatus_Object = MibTableColumn
fccRoutStatus = _FccRoutStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 30, 1, 2),
    _FccRoutStatus_Type()
)
fccRoutStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fccRoutStatus.setStatus("mandatory")


class _FccRoutDestClnpAddress_Type(OctetString):
    """Custom type fccRoutDestClnpAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(22, 22),
    )


_FccRoutDestClnpAddress_Type.__name__ = "OctetString"
_FccRoutDestClnpAddress_Object = MibTableColumn
fccRoutDestClnpAddress = _FccRoutDestClnpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 30, 1, 3),
    _FccRoutDestClnpAddress_Type()
)
fccRoutDestClnpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fccRoutDestClnpAddress.setStatus("mandatory")


class _FccRoutNextHopNeighborId_Type(Integer32):
    """Custom type fccRoutNextHopNeighborId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 199),
    )


_FccRoutNextHopNeighborId_Type.__name__ = "Integer32"
_FccRoutNextHopNeighborId_Object = MibTableColumn
fccRoutNextHopNeighborId = _FccRoutNextHopNeighborId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 30, 1, 5),
    _FccRoutNextHopNeighborId_Type()
)
fccRoutNextHopNeighborId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fccRoutNextHopNeighborId.setStatus("mandatory")
_FrxManagement_ObjectIdentity = ObjectIdentity
frxManagement = _FrxManagement_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10)
)
_FmEvents_ObjectIdentity = ObjectIdentity
fmEvents = _FmEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5)
)
_FmeTroubleReport_ObjectIdentity = ObjectIdentity
fmeTroubleReport = _FmeTroubleReport_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 1)
)


class _FmeTrblEventType_Type(Integer32):
    """Custom type fmeTrblEventType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("startAfterDeliberateCrash", 2),
          ("startAfterHardwareResetOrStartUp", 3),
          ("startAfterUnintentionalCrash", 1))
    )


_FmeTrblEventType_Type.__name__ = "Integer32"
_FmeTrblEventType_Object = MibScalar
fmeTrblEventType = _FmeTrblEventType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 1, 1),
    _FmeTrblEventType_Type()
)
fmeTrblEventType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmeTrblEventType.setStatus("mandatory")
_FmeTroubleReportInfoTable_Object = MibTable
fmeTroubleReportInfoTable = _FmeTroubleReportInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 1, 2)
)
if mibBuilder.loadTexts:
    fmeTroubleReportInfoTable.setStatus("mandatory")
_FmeTroubleReportInfoEntry_Object = MibTableRow
fmeTroubleReportInfoEntry = _FmeTroubleReportInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 1, 2, 1)
)
fmeTroubleReportInfoEntry.setIndexNames(
    (0, "PCE-MIB", "fmeTrblInfoIndex"),
)
if mibBuilder.loadTexts:
    fmeTroubleReportInfoEntry.setStatus("mandatory")


class _FmeTrblInfoIndex_Type(Integer32):
    """Custom type fmeTrblInfoIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 194),
    )


_FmeTrblInfoIndex_Type.__name__ = "Integer32"
_FmeTrblInfoIndex_Object = MibTableColumn
fmeTrblInfoIndex = _FmeTrblInfoIndex_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 1, 2, 1, 1),
    _FmeTrblInfoIndex_Type()
)
fmeTrblInfoIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmeTrblInfoIndex.setStatus("mandatory")


class _FmeTrblInfoData_Type(DisplayString):
    """Custom type fmeTrblInfoData based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_FmeTrblInfoData_Type.__name__ = "DisplayString"
_FmeTrblInfoData_Object = MibTableColumn
fmeTrblInfoData = _FmeTrblInfoData_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 1, 2, 1, 2),
    _FmeTrblInfoData_Type()
)
fmeTrblInfoData.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmeTrblInfoData.setStatus("mandatory")
_FmeFamilyTable_Object = MibTable
fmeFamilyTable = _FmeFamilyTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 2)
)
if mibBuilder.loadTexts:
    fmeFamilyTable.setStatus("mandatory")
_FmeFamilyEntry_Object = MibTableRow
fmeFamilyEntry = _FmeFamilyEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 2, 1)
)
fmeFamilyEntry.setIndexNames(
    (0, "PCE-MIB", "fmeFamFamilyId"),
)
if mibBuilder.loadTexts:
    fmeFamilyEntry.setStatus("mandatory")


class _FmeFamFamilyId_Type(Integer32):
    """Custom type fmeFamFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29)
        )
    )
    namedValues = NamedValues(
        *(("asynchronousCommandSyntax-07", 8),
          ("asynchronousProtocolLevel-06", 7),
          ("asynchronousSemanticLevel-08", 9),
          ("compressionProcedure-16", 23),
          ("configurationFunction-18", 25),
          ("dlcBscProcedure-0C", 13),
          ("dlcMtrFrad-15", 22),
          ("dlmFunction-17", 24),
          ("ethernetBridgeAndIpRouterFunctions-14", 21),
          ("frameRelaySna-1B", 28),
          ("isdnDChannelProcedure-12", 19),
          ("linePhysicalLevel-05", 6),
          ("lmiFunction-19", 26),
          ("management-01", 2),
          ("mlp-0D", 14),
          ("ppp-1A", 27),
          ("pstnProcedure-0E", 15),
          ("sdlcProcedure-09", 10),
          ("securizedVcEsv-0F", 16),
          ("securizedVcIr-11", 18),
          ("securizedVcN4-10", 17),
          ("synchronousLink-04", 5),
          ("synchronousSignalling-02", 3),
          ("tokenRing-1C", 29),
          ("troubleReport-00", 1),
          ("tvipFradBscProcedure-0B", 12),
          ("vipProcedure-0A", 11),
          ("x25SynchronousProcedure-03", 4),
          ("x29Rerouting-13", 20))
    )


_FmeFamFamilyId_Type.__name__ = "Integer32"
_FmeFamFamilyId_Object = MibTableColumn
fmeFamFamilyId = _FmeFamFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 2, 1, 1),
    _FmeFamFamilyId_Type()
)
fmeFamFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmeFamFamilyId.setStatus("mandatory")


class _FmeFamStoredEventsCount_Type(Integer32):
    """Custom type fmeFamStoredEventsCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6),
    )


_FmeFamStoredEventsCount_Type.__name__ = "Integer32"
_FmeFamStoredEventsCount_Object = MibTableColumn
fmeFamStoredEventsCount = _FmeFamStoredEventsCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 2, 1, 2),
    _FmeFamStoredEventsCount_Type()
)
fmeFamStoredEventsCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmeFamStoredEventsCount.setStatus("mandatory")


class _FmeFamStoredEventsCommand_Type(Integer32):
    """Custom type fmeFamStoredEventsCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("delete", 2),
          ("ready", 1))
    )


_FmeFamStoredEventsCommand_Type.__name__ = "Integer32"
_FmeFamStoredEventsCommand_Object = MibTableColumn
fmeFamStoredEventsCommand = _FmeFamStoredEventsCommand_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 2, 1, 3),
    _FmeFamStoredEventsCommand_Type()
)
fmeFamStoredEventsCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fmeFamStoredEventsCommand.setStatus("mandatory")
_FmeEventTable_Object = MibTable
fmeEventTable = _FmeEventTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 3)
)
if mibBuilder.loadTexts:
    fmeEventTable.setStatus("mandatory")
_FmeEventEntry_Object = MibTableRow
fmeEventEntry = _FmeEventEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 3, 1)
)
fmeEventEntry.setIndexNames(
    (0, "PCE-MIB", "fmeEvtFamilyId"),
    (0, "PCE-MIB", "fmeEvtEventIndex"),
)
if mibBuilder.loadTexts:
    fmeEventEntry.setStatus("mandatory")


class _FmeEvtFamilyId_Type(Integer32):
    """Custom type fmeEvtFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29)
        )
    )
    namedValues = NamedValues(
        *(("asynchronousCommandSyntax-07", 8),
          ("asynchronousProtocolLevel-06", 7),
          ("asynchronousSemanticLevel-08", 9),
          ("compressionProcedure-16", 23),
          ("configurationFunction-18", 25),
          ("dlcBscProcedure-0C", 13),
          ("dlcMtrFrad-15", 22),
          ("dlmFunction-17", 24),
          ("ethernetBridgeAndIpRouterFunctions-14", 21),
          ("frameRelaySna-1B", 28),
          ("isdnDChannelProcedure-12", 19),
          ("linePhysicalLevel-05", 6),
          ("lmiFunction-19", 26),
          ("management-01", 2),
          ("mlp-0D", 14),
          ("ppp-1A", 27),
          ("pstnProcedure-0E", 15),
          ("sdlcProcedure-09", 10),
          ("securizedVcEsv-0F", 16),
          ("securizedVcIr-11", 18),
          ("securizedVcN4-10", 17),
          ("synchronousLink-04", 5),
          ("synchronousSignalling-02", 3),
          ("tokenRing-1C", 29),
          ("troubleReport-00", 1),
          ("tvipFradBscProcedure-0B", 12),
          ("vipProcedure-0A", 11),
          ("x25SynchronousProcedure-03", 4),
          ("x29Rerouting-13", 20))
    )


_FmeEvtFamilyId_Type.__name__ = "Integer32"
_FmeEvtFamilyId_Object = MibTableColumn
fmeEvtFamilyId = _FmeEvtFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 3, 1, 1),
    _FmeEvtFamilyId_Type()
)
fmeEvtFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmeEvtFamilyId.setStatus("mandatory")


class _FmeEvtEventIndex_Type(Integer32):
    """Custom type fmeEvtEventIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6),
    )


_FmeEvtEventIndex_Type.__name__ = "Integer32"
_FmeEvtEventIndex_Object = MibTableColumn
fmeEvtEventIndex = _FmeEvtEventIndex_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 3, 1, 2),
    _FmeEvtEventIndex_Type()
)
fmeEvtEventIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmeEvtEventIndex.setStatus("mandatory")


class _FmeEvtEventType_Type(OctetString):
    """Custom type fmeEvtEventType based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_FmeEvtEventType_Type.__name__ = "OctetString"
_FmeEvtEventType_Object = MibTableColumn
fmeEvtEventType = _FmeEvtEventType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 3, 1, 3),
    _FmeEvtEventType_Type()
)
fmeEvtEventType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmeEvtEventType.setStatus("mandatory")
_FmeEvtTime_Type = TimeTicks
_FmeEvtTime_Object = MibTableColumn
fmeEvtTime = _FmeEvtTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 3, 1, 4),
    _FmeEvtTime_Type()
)
fmeEvtTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmeEvtTime.setStatus("mandatory")


class _FmeEvtLineId_Type(Integer32):
    """Custom type fmeEvtLineId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FmeEvtLineId_Type.__name__ = "Integer32"
_FmeEvtLineId_Object = MibTableColumn
fmeEvtLineId = _FmeEvtLineId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 3, 1, 5),
    _FmeEvtLineId_Type()
)
fmeEvtLineId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmeEvtLineId.setStatus("mandatory")


class _FmeEvtData_Type(DisplayString):
    """Custom type fmeEvtData based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_FmeEvtData_Type.__name__ = "DisplayString"
_FmeEvtData_Object = MibTableColumn
fmeEvtData = _FmeEvtData_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 3, 1, 6),
    _FmeEvtData_Type()
)
fmeEvtData.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmeEvtData.setStatus("mandatory")
_FmeTrapInfo_ObjectIdentity = ObjectIdentity
fmeTrapInfo = _FmeTrapInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 4)
)


class _FmeTrapLineId_Type(Integer32):
    """Custom type fmeTrapLineId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FmeTrapLineId_Type.__name__ = "Integer32"
_FmeTrapLineId_Object = MibScalar
fmeTrapLineId = _FmeTrapLineId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 4, 1),
    _FmeTrapLineId_Type()
)
fmeTrapLineId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmeTrapLineId.setStatus("mandatory")


class _FmeTrapFamilyId_Type(Integer32):
    """Custom type fmeTrapFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28)
        )
    )
    namedValues = NamedValues(
        *(("asynchronousCommandSyntax-07", 8),
          ("asynchronousProtocolLevel-06", 7),
          ("asynchronousSemanticLevel-08", 9),
          ("compressionProcedure-16", 23),
          ("configurationFunction-18", 25),
          ("dlcBscProcedure-0C", 13),
          ("dlcMtrFrad-15", 22),
          ("dlmFunction-17", 24),
          ("ethernetBridgeAndIpRouterFunctions-14", 21),
          ("frameRelaySna-1B", 28),
          ("isdnDChannelProcedure-12", 19),
          ("linePhysicalLevel-05", 6),
          ("lmiFunction-19", 26),
          ("management-01", 2),
          ("mlp-0D", 14),
          ("ppp-1A", 27),
          ("pstnProcedure-0E", 15),
          ("sdlcProcedure-09", 10),
          ("securizedVcEsv-0F", 16),
          ("securizedVcIr-11", 18),
          ("securizedVcN4-10", 17),
          ("synchronousLink-04", 5),
          ("synchronousSignalling-02", 3),
          ("troubleReport-00", 1),
          ("tvipFradBscProcedure-0B", 12),
          ("vipProcedure-0A", 11),
          ("x25SynchronousProcedure-03", 4),
          ("x29Rerouting-13", 20))
    )


_FmeTrapFamilyId_Type.__name__ = "Integer32"
_FmeTrapFamilyId_Object = MibScalar
fmeTrapFamilyId = _FmeTrapFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 4, 2),
    _FmeTrapFamilyId_Type()
)
fmeTrapFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmeTrapFamilyId.setStatus("mandatory")


class _FmeTrapEventType_Type(Integer32):
    """Custom type fmeTrapEventType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FmeTrapEventType_Type.__name__ = "Integer32"
_FmeTrapEventType_Object = MibScalar
fmeTrapEventType = _FmeTrapEventType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 4, 3),
    _FmeTrapEventType_Type()
)
fmeTrapEventType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmeTrapEventType.setStatus("mandatory")


class _FmeTrapEventData_Type(DisplayString):
    """Custom type fmeTrapEventData based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_FmeTrapEventData_Type.__name__ = "DisplayString"
_FmeTrapEventData_Object = MibScalar
fmeTrapEventData = _FmeTrapEventData_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 4, 4),
    _FmeTrapEventData_Type()
)
fmeTrapEventData.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmeTrapEventData.setStatus("mandatory")
_FmStat_ObjectIdentity = ObjectIdentity
fmStat = _FmStat_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10)
)
_FmStatControl_ObjectIdentity = ObjectIdentity
fmStatControl = _FmStatControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 1)
)


class _FmsCtrlStatus_Type(Integer32):
    """Custom type fmsCtrlStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inProgress", 1),
          ("notInProgress", 2))
    )


_FmsCtrlStatus_Type.__name__ = "Integer32"
_FmsCtrlStatus_Object = MibScalar
fmsCtrlStatus = _FmsCtrlStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 1, 1),
    _FmsCtrlStatus_Type()
)
fmsCtrlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsCtrlStatus.setStatus("mandatory")


class _FmsCtrlSumming_Type(Integer32):
    """Custom type fmsCtrlSumming based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("infinite", 1),
          ("notInfinite", 2))
    )


_FmsCtrlSumming_Type.__name__ = "Integer32"
_FmsCtrlSumming_Object = MibScalar
fmsCtrlSumming = _FmsCtrlSumming_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 1, 2),
    _FmsCtrlSumming_Type()
)
fmsCtrlSumming.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fmsCtrlSumming.setStatus("mandatory")


class _FmsCtrlCountersCommand_Type(Integer32):
    """Custom type fmsCtrlCountersCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ready", 1),
          ("reset", 2))
    )


_FmsCtrlCountersCommand_Type.__name__ = "Integer32"
_FmsCtrlCountersCommand_Object = MibScalar
fmsCtrlCountersCommand = _FmsCtrlCountersCommand_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 1, 3),
    _FmsCtrlCountersCommand_Type()
)
fmsCtrlCountersCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fmsCtrlCountersCommand.setStatus("mandatory")
_FmsCtrlResetTime_Type = TimeTicks
_FmsCtrlResetTime_Object = MibScalar
fmsCtrlResetTime = _FmsCtrlResetTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 1, 4),
    _FmsCtrlResetTime_Type()
)
fmsCtrlResetTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsCtrlResetTime.setStatus("mandatory")
_FmStatGlobal_ObjectIdentity = ObjectIdentity
fmStatGlobal = _FmStatGlobal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10)
)
_FmsGlobInitBuffCount_Type = Gauge32
_FmsGlobInitBuffCount_Object = MibScalar
fmsGlobInitBuffCount = _FmsGlobInitBuffCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10, 1),
    _FmsGlobInitBuffCount_Type()
)
fmsGlobInitBuffCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsGlobInitBuffCount.setStatus("mandatory")
_FmsGlobFreeBuffCount_Type = Gauge32
_FmsGlobFreeBuffCount_Object = MibScalar
fmsGlobFreeBuffCount = _FmsGlobFreeBuffCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10, 2),
    _FmsGlobFreeBuffCount_Type()
)
fmsGlobFreeBuffCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsGlobFreeBuffCount.setStatus("mandatory")
_FmsGlobCpuA_Type = Gauge32
_FmsGlobCpuA_Object = MibScalar
fmsGlobCpuA = _FmsGlobCpuA_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10, 3),
    _FmsGlobCpuA_Type()
)
fmsGlobCpuA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsGlobCpuA.setStatus("mandatory")
_FmsGlobCpuB_Type = Gauge32
_FmsGlobCpuB_Object = MibScalar
fmsGlobCpuB = _FmsGlobCpuB_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10, 4),
    _FmsGlobCpuB_Type()
)
fmsGlobCpuB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsGlobCpuB.setStatus("mandatory")
_FmsGlobVcInUseCount_Type = Gauge32
_FmsGlobVcInUseCount_Object = MibScalar
fmsGlobVcInUseCount = _FmsGlobVcInUseCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10, 5),
    _FmsGlobVcInUseCount_Type()
)
fmsGlobVcInUseCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsGlobVcInUseCount.setStatus("mandatory")
_FmsGlobGeneratorsInUseCount_Type = Gauge32
_FmsGlobGeneratorsInUseCount_Object = MibScalar
fmsGlobGeneratorsInUseCount = _FmsGlobGeneratorsInUseCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10, 6),
    _FmsGlobGeneratorsInUseCount_Type()
)
fmsGlobGeneratorsInUseCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsGlobGeneratorsInUseCount.setStatus("mandatory")
_FmsGlobCompressOctetGain_Type = Gauge32
_FmsGlobCompressOctetGain_Object = MibScalar
fmsGlobCompressOctetGain = _FmsGlobCompressOctetGain_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10, 7),
    _FmsGlobCompressOctetGain_Type()
)
fmsGlobCompressOctetGain.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsGlobCompressOctetGain.setStatus("mandatory")
_FmsGlobCompressBillGain_Type = Gauge32
_FmsGlobCompressBillGain_Object = MibScalar
fmsGlobCompressBillGain = _FmsGlobCompressBillGain_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10, 8),
    _FmsGlobCompressBillGain_Type()
)
fmsGlobCompressBillGain.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsGlobCompressBillGain.setStatus("mandatory")
_FmsGlobLanCpu_Type = Counter32
_FmsGlobLanCpu_Object = MibScalar
fmsGlobLanCpu = _FmsGlobLanCpu_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10, 9),
    _FmsGlobLanCpu_Type()
)
fmsGlobLanCpu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsGlobLanCpu.setStatus("mandatory")
_FmsGlobCongCpuLostBlocks_Type = Counter32
_FmsGlobCongCpuLostBlocks_Object = MibScalar
fmsGlobCongCpuLostBlocks = _FmsGlobCongCpuLostBlocks_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10, 10),
    _FmsGlobCongCpuLostBlocks_Type()
)
fmsGlobCongCpuLostBlocks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsGlobCongCpuLostBlocks.setStatus("mandatory")
_FmsGlobCongRamLostBlocks_Type = Counter32
_FmsGlobCongRamLostBlocks_Object = MibScalar
fmsGlobCongRamLostBlocks = _FmsGlobCongRamLostBlocks_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10, 11),
    _FmsGlobCongRamLostBlocks_Type()
)
fmsGlobCongRamLostBlocks.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsGlobCongRamLostBlocks.setStatus("mandatory")
_FmStatInputTraffic_ObjectIdentity = ObjectIdentity
fmStatInputTraffic = _FmStatInputTraffic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 11)
)
_FmsInputDataPktsCounter_Type = Counter32
_FmsInputDataPktsCounter_Object = MibScalar
fmsInputDataPktsCounter = _FmsInputDataPktsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 11, 1),
    _FmsInputDataPktsCounter_Type()
)
fmsInputDataPktsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsInputDataPktsCounter.setStatus("mandatory")
_FmsInputDataBytesCounter_Type = Counter32
_FmsInputDataBytesCounter_Object = MibScalar
fmsInputDataBytesCounter = _FmsInputDataBytesCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 11, 2),
    _FmsInputDataBytesCounter_Type()
)
fmsInputDataBytesCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsInputDataBytesCounter.setStatus("mandatory")
_FmsInputIntrPktsCounter_Type = Counter32
_FmsInputIntrPktsCounter_Object = MibScalar
fmsInputIntrPktsCounter = _FmsInputIntrPktsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 11, 3),
    _FmsInputIntrPktsCounter_Type()
)
fmsInputIntrPktsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsInputIntrPktsCounter.setStatus("mandatory")
_FmsInputReinitPktsCounter_Type = Counter32
_FmsInputReinitPktsCounter_Object = MibScalar
fmsInputReinitPktsCounter = _FmsInputReinitPktsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 11, 4),
    _FmsInputReinitPktsCounter_Type()
)
fmsInputReinitPktsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsInputReinitPktsCounter.setStatus("mandatory")
_FmsInputCallPktsCounter_Type = Counter32
_FmsInputCallPktsCounter_Object = MibScalar
fmsInputCallPktsCounter = _FmsInputCallPktsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 11, 5),
    _FmsInputCallPktsCounter_Type()
)
fmsInputCallPktsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsInputCallPktsCounter.setStatus("mandatory")
_FmsInputCallConfPktsCounter_Type = Counter32
_FmsInputCallConfPktsCounter_Object = MibScalar
fmsInputCallConfPktsCounter = _FmsInputCallConfPktsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 11, 6),
    _FmsInputCallConfPktsCounter_Type()
)
fmsInputCallConfPktsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsInputCallConfPktsCounter.setStatus("mandatory")
_FmStatLineTable_Object = MibTable
fmStatLineTable = _FmStatLineTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 12)
)
if mibBuilder.loadTexts:
    fmStatLineTable.setStatus("mandatory")
_FmStatLineEntry_Object = MibTableRow
fmStatLineEntry = _FmStatLineEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 12, 1)
)
fmStatLineEntry.setIndexNames(
    (0, "PCE-MIB", "fmsLineId"),
)
if mibBuilder.loadTexts:
    fmStatLineEntry.setStatus("mandatory")


class _FmsLineId_Type(Integer32):
    """Custom type fmsLineId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 55),
    )


_FmsLineId_Type.__name__ = "Integer32"
_FmsLineId_Object = MibTableColumn
fmsLineId = _FmsLineId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 12, 1, 1),
    _FmsLineId_Type()
)
fmsLineId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsLineId.setStatus("mandatory")


class _FmsLineState_Type(Integer32):
    """Custom type fmsLineState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("disconnectedByDiag", 3),
          ("down", 2),
          ("layer1Up", 1),
          ("layer2Up", 4),
          ("layer3Up", 5))
    )


_FmsLineState_Type.__name__ = "Integer32"
_FmsLineState_Object = MibTableColumn
fmsLineState = _FmsLineState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 12, 1, 2),
    _FmsLineState_Type()
)
fmsLineState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsLineState.setStatus("mandatory")
_FmsLineLcInUseCount_Type = Gauge32
_FmsLineLcInUseCount_Object = MibTableColumn
fmsLineLcInUseCount = _FmsLineLcInUseCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 12, 1, 3),
    _FmsLineLcInUseCount_Type()
)
fmsLineLcInUseCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsLineLcInUseCount.setStatus("mandatory")
_FmsLineReinitsCounter_Type = Counter32
_FmsLineReinitsCounter_Object = MibTableColumn
fmsLineReinitsCounter = _FmsLineReinitsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 12, 1, 4),
    _FmsLineReinitsCounter_Type()
)
fmsLineReinitsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsLineReinitsCounter.setStatus("mandatory")


class _FmsLineIncidentsCounter_Type(Integer32):
    """Custom type fmsLineIncidentsCounter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FmsLineIncidentsCounter_Type.__name__ = "Integer32"
_FmsLineIncidentsCounter_Object = MibTableColumn
fmsLineIncidentsCounter = _FmsLineIncidentsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 12, 1, 5),
    _FmsLineIncidentsCounter_Type()
)
fmsLineIncidentsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsLineIncidentsCounter.setStatus("mandatory")
_FmsLineInputOctetsCounter_Type = Counter32
_FmsLineInputOctetsCounter_Object = MibTableColumn
fmsLineInputOctetsCounter = _FmsLineInputOctetsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 12, 1, 6),
    _FmsLineInputOctetsCounter_Type()
)
fmsLineInputOctetsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsLineInputOctetsCounter.setStatus("mandatory")
_FmsLineOutputOctetsCounter_Type = Counter32
_FmsLineOutputOctetsCounter_Object = MibTableColumn
fmsLineOutputOctetsCounter = _FmsLineOutputOctetsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 12, 1, 7),
    _FmsLineOutputOctetsCounter_Type()
)
fmsLineOutputOctetsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsLineOutputOctetsCounter.setStatus("mandatory")


class _FmsLineType_Type(Integer32):
    """Custom type fmsLineType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              6,
              7,
              8,
              14,
              15,
              16,
              17,
              19,
              20,
              21,
              23,
              27,
              28,
              30,
              39,
              40,
              50,
              51)
        )
    )
    namedValues = NamedValues(
        *(("asynchronous", 2),
          ("asynchronousPpp", 40),
          ("asynchronousSdlc", 4),
          ("asynchronousX28", 30),
          ("characterSynchronousBsc3270Or2780-3780", 8),
          ("frameRelaySubscriber", 21),
          ("frameRelayTypeTransit", 19),
          ("hdlc", 20),
          ("isdnBChannelWithSignalling", 15),
          ("isdnBChannelWithoutSignalling", 16),
          ("isdnDChannel", 14),
          ("isdnDChannelWithPll", 17),
          ("lanBridgeOrIpRouter", 28),
          ("lanConnection", 23),
          ("lanIpRouter", 27),
          ("moduleLink", 50),
          ("synchronousBscTransparentCharacter", 7),
          ("synchronousPpp", 39),
          ("synchronousVipCharacter", 6),
          ("unitLink", 51),
          ("x25Synchronous", 1))
    )


_FmsLineType_Type.__name__ = "Integer32"
_FmsLineType_Object = MibTableColumn
fmsLineType = _FmsLineType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 12, 1, 20),
    _FmsLineType_Type()
)
fmsLineType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsLineType.setStatus("mandatory")


class _FmsLineTestState_Type(Integer32):
    """Custom type fmsLineTestState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FmsLineTestState_Type.__name__ = "Integer32"
_FmsLineTestState_Object = MibTableColumn
fmsLineTestState = _FmsLineTestState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 12, 1, 21),
    _FmsLineTestState_Type()
)
fmsLineTestState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsLineTestState.setStatus("mandatory")
_FmStatSignalTable_Object = MibTable
fmStatSignalTable = _FmStatSignalTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13)
)
if mibBuilder.loadTexts:
    fmStatSignalTable.setStatus("mandatory")
_FmStatSignalEntry_Object = MibTableRow
fmStatSignalEntry = _FmStatSignalEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1)
)
fmStatSignalEntry.setIndexNames(
    (0, "PCE-MIB", "fmsSigPhysPortId"),
)
if mibBuilder.loadTexts:
    fmStatSignalEntry.setStatus("mandatory")


class _FmsSigPhysPortId_Type(Integer32):
    """Custom type fmsSigPhysPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FmsSigPhysPortId_Type.__name__ = "Integer32"
_FmsSigPhysPortId_Object = MibTableColumn
fmsSigPhysPortId = _FmsSigPhysPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 1),
    _FmsSigPhysPortId_Type()
)
fmsSigPhysPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsSigPhysPortId.setStatus("mandatory")


class _FmsSigState_Type(Integer32):
    """Custom type fmsSigState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("up", 2))
    )


_FmsSigState_Type.__name__ = "Integer32"
_FmsSigState_Object = MibTableColumn
fmsSigState = _FmsSigState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 2),
    _FmsSigState_Type()
)
fmsSigState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsSigState.setStatus("mandatory")


class _FmsSigDceOrDte_Type(Integer32):
    """Custom type fmsSigDceOrDte based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dce", 1),
          ("dte", 2))
    )


_FmsSigDceOrDte_Type.__name__ = "Integer32"
_FmsSigDceOrDte_Object = MibTableColumn
fmsSigDceOrDte = _FmsSigDceOrDte_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 3),
    _FmsSigDceOrDte_Type()
)
fmsSigDceOrDte.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsSigDceOrDte.setStatus("mandatory")


class _FmsSig105_Type(Integer32):
    """Custom type fmsSig105 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FmsSig105_Type.__name__ = "Integer32"
_FmsSig105_Object = MibTableColumn
fmsSig105 = _FmsSig105_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 4),
    _FmsSig105_Type()
)
fmsSig105.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsSig105.setStatus("mandatory")


class _FmsSig106_Type(Integer32):
    """Custom type fmsSig106 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FmsSig106_Type.__name__ = "Integer32"
_FmsSig106_Object = MibTableColumn
fmsSig106 = _FmsSig106_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 5),
    _FmsSig106_Type()
)
fmsSig106.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsSig106.setStatus("mandatory")


class _FmsSig107_Type(Integer32):
    """Custom type fmsSig107 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FmsSig107_Type.__name__ = "Integer32"
_FmsSig107_Object = MibTableColumn
fmsSig107 = _FmsSig107_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 6),
    _FmsSig107_Type()
)
fmsSig107.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsSig107.setStatus("mandatory")


class _FmsSig108_Type(Integer32):
    """Custom type fmsSig108 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FmsSig108_Type.__name__ = "Integer32"
_FmsSig108_Object = MibTableColumn
fmsSig108 = _FmsSig108_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 7),
    _FmsSig108_Type()
)
fmsSig108.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsSig108.setStatus("mandatory")


class _FmsSig109_Type(Integer32):
    """Custom type fmsSig109 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FmsSig109_Type.__name__ = "Integer32"
_FmsSig109_Object = MibTableColumn
fmsSig109 = _FmsSig109_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 8),
    _FmsSig109_Type()
)
fmsSig109.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsSig109.setStatus("mandatory")


class _FmsSig111_Type(Integer32):
    """Custom type fmsSig111 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FmsSig111_Type.__name__ = "Integer32"
_FmsSig111_Object = MibTableColumn
fmsSig111 = _FmsSig111_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 9),
    _FmsSig111_Type()
)
fmsSig111.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsSig111.setStatus("mandatory")


class _FmsSig125_Type(Integer32):
    """Custom type fmsSig125 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FmsSig125_Type.__name__ = "Integer32"
_FmsSig125_Object = MibTableColumn
fmsSig125 = _FmsSig125_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 10),
    _FmsSig125_Type()
)
fmsSig125.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsSig125.setStatus("mandatory")


class _FmsSig140_Type(Integer32):
    """Custom type fmsSig140 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FmsSig140_Type.__name__ = "Integer32"
_FmsSig140_Object = MibTableColumn
fmsSig140 = _FmsSig140_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 11),
    _FmsSig140_Type()
)
fmsSig140.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsSig140.setStatus("mandatory")


class _FmsSig141_Type(Integer32):
    """Custom type fmsSig141 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FmsSig141_Type.__name__ = "Integer32"
_FmsSig141_Object = MibTableColumn
fmsSig141 = _FmsSig141_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 12),
    _FmsSig141_Type()
)
fmsSig141.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsSig141.setStatus("mandatory")


class _FmsSig142_Type(Integer32):
    """Custom type fmsSig142 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FmsSig142_Type.__name__ = "Integer32"
_FmsSig142_Object = MibTableColumn
fmsSig142 = _FmsSig142_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 13),
    _FmsSig142_Type()
)
fmsSig142.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsSig142.setStatus("mandatory")


class _FmsSigSyn_Type(Integer32):
    """Custom type fmsSigSyn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3),
          ("undefined", 1))
    )


_FmsSigSyn_Type.__name__ = "Integer32"
_FmsSigSyn_Object = MibTableColumn
fmsSigSyn = _FmsSigSyn_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 14),
    _FmsSigSyn_Type()
)
fmsSigSyn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsSigSyn.setStatus("mandatory")
_FmStatLinesSummary_ObjectIdentity = ObjectIdentity
fmStatLinesSummary = _FmStatLinesSummary_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 15)
)


class _FmsLinesSummState_Type(OctetString):
    """Custom type fmsLinesSummState based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_FmsLinesSummState_Type.__name__ = "OctetString"
_FmsLinesSummState_Object = MibScalar
fmsLinesSummState = _FmsLinesSummState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 15, 1),
    _FmsLinesSummState_Type()
)
fmsLinesSummState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsLinesSummState.setStatus("mandatory")
_FmStatStateTable_Object = MibTable
fmStatStateTable = _FmStatStateTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 20)
)
if mibBuilder.loadTexts:
    fmStatStateTable.setStatus("mandatory")
_FmStatStateEntry_Object = MibTableRow
fmStatStateEntry = _FmStatStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 20, 1)
)
fmStatStateEntry.setIndexNames(
    (0, "PCE-MIB", "fmsStateLine"),
)
if mibBuilder.loadTexts:
    fmStatStateEntry.setStatus("mandatory")


class _FmsStateLine_Type(Integer32):
    """Custom type fmsStateLine based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 55),
    )


_FmsStateLine_Type.__name__ = "Integer32"
_FmsStateLine_Object = MibTableColumn
fmsStateLine = _FmsStateLine_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 20, 1, 1),
    _FmsStateLine_Type()
)
fmsStateLine.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsStateLine.setStatus("mandatory")


class _FmsStateLineType_Type(Integer32):
    """Custom type fmsStateLineType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              6,
              7,
              8,
              14,
              15,
              16,
              17,
              19,
              20,
              21,
              23,
              27,
              28,
              30,
              39,
              40,
              50,
              51)
        )
    )
    namedValues = NamedValues(
        *(("asynchronous", 2),
          ("asynchronousPpp", 40),
          ("asynchronousSdlc", 4),
          ("asynchronousX28", 30),
          ("characterSynchronousBsc3270Or2780-3780", 8),
          ("frameRelaySubscriber", 21),
          ("frameRelayTypeTransit", 19),
          ("hdlc", 20),
          ("isdnBChannelWithSignalling", 15),
          ("isdnBChannelWithoutSignalling", 16),
          ("isdnDChannel", 14),
          ("isdnDChannelWithPll", 17),
          ("lanBridgeOrIpRouter", 28),
          ("lanConnection", 23),
          ("lanIpRouter", 27),
          ("moduleLink", 50),
          ("synchronousBscTransparentCharacter", 7),
          ("synchronousPpp", 39),
          ("synchronousVipCharacter", 6),
          ("unitLink", 51),
          ("x25Synchronous", 1))
    )


_FmsStateLineType_Type.__name__ = "Integer32"
_FmsStateLineType_Object = MibTableColumn
fmsStateLineType = _FmsStateLineType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 20, 1, 2),
    _FmsStateLineType_Type()
)
fmsStateLineType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsStateLineType.setStatus("mandatory")


class _FmsStateOsiState_Type(Integer32):
    """Custom type fmsStateOsiState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("layer1Up", 2),
          ("layer2Up", 3),
          ("layer3Up", 4))
    )


_FmsStateOsiState_Type.__name__ = "Integer32"
_FmsStateOsiState_Object = MibTableColumn
fmsStateOsiState = _FmsStateOsiState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 20, 1, 3),
    _FmsStateOsiState_Type()
)
fmsStateOsiState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsStateOsiState.setStatus("mandatory")


class _FmsStateTestState_Type(Integer32):
    """Custom type fmsStateTestState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("lineDisconnectedByTelemaintenance", 2),
          ("notUnderTest", 1),
          ("underTest", 3))
    )


_FmsStateTestState_Type.__name__ = "Integer32"
_FmsStateTestState_Object = MibTableColumn
fmsStateTestState = _FmsStateTestState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 20, 1, 4),
    _FmsStateTestState_Type()
)
fmsStateTestState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsStateTestState.setStatus("mandatory")


class _FmsStateMlpTrunkMainLine_Type(Integer32):
    """Custom type fmsStateMlpTrunkMainLine based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FmsStateMlpTrunkMainLine_Type.__name__ = "Integer32"
_FmsStateMlpTrunkMainLine_Object = MibTableColumn
fmsStateMlpTrunkMainLine = _FmsStateMlpTrunkMainLine_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 20, 1, 5),
    _FmsStateMlpTrunkMainLine_Type()
)
fmsStateMlpTrunkMainLine.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsStateMlpTrunkMainLine.setStatus("mandatory")


class _FmsStateMlpTrunkNumber_Type(Integer32):
    """Custom type fmsStateMlpTrunkNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FmsStateMlpTrunkNumber_Type.__name__ = "Integer32"
_FmsStateMlpTrunkNumber_Object = MibTableColumn
fmsStateMlpTrunkNumber = _FmsStateMlpTrunkNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 20, 1, 6),
    _FmsStateMlpTrunkNumber_Type()
)
fmsStateMlpTrunkNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsStateMlpTrunkNumber.setStatus("mandatory")


class _FmsStateMlpTrunkState_Type(Integer32):
    """Custom type fmsStateMlpTrunkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("up", 2))
    )


_FmsStateMlpTrunkState_Type.__name__ = "Integer32"
_FmsStateMlpTrunkState_Object = MibTableColumn
fmsStateMlpTrunkState = _FmsStateMlpTrunkState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 20, 1, 7),
    _FmsStateMlpTrunkState_Type()
)
fmsStateMlpTrunkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsStateMlpTrunkState.setStatus("mandatory")
_FmStatMlpTable_Object = MibTable
fmStatMlpTable = _FmStatMlpTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 30)
)
if mibBuilder.loadTexts:
    fmStatMlpTable.setStatus("mandatory")
_FmStatMlpEntry_Object = MibTableRow
fmStatMlpEntry = _FmStatMlpEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 30, 1)
)
fmStatMlpEntry.setIndexNames(
    (0, "PCE-MIB", "fmsMlpTrunkNumber"),
    (0, "PCE-MIB", "fmsMlpLineId"),
)
if mibBuilder.loadTexts:
    fmStatMlpEntry.setStatus("mandatory")


class _FmsMlpTrunkNumber_Type(Integer32):
    """Custom type fmsMlpTrunkNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FmsMlpTrunkNumber_Type.__name__ = "Integer32"
_FmsMlpTrunkNumber_Object = MibTableColumn
fmsMlpTrunkNumber = _FmsMlpTrunkNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 30, 1, 1),
    _FmsMlpTrunkNumber_Type()
)
fmsMlpTrunkNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsMlpTrunkNumber.setStatus("mandatory")


class _FmsMlpLineId_Type(Integer32):
    """Custom type fmsMlpLineId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FmsMlpLineId_Type.__name__ = "Integer32"
_FmsMlpLineId_Object = MibTableColumn
fmsMlpLineId = _FmsMlpLineId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 30, 1, 2),
    _FmsMlpLineId_Type()
)
fmsMlpLineId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsMlpLineId.setStatus("mandatory")


class _FmsMlpLineType_Type(Integer32):
    """Custom type fmsMlpLineType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("mainDown", 1),
          ("mainUp", 2),
          ("secondaryDown", 3),
          ("secondaryUp", 4))
    )


_FmsMlpLineType_Type.__name__ = "Integer32"
_FmsMlpLineType_Object = MibTableColumn
fmsMlpLineType = _FmsMlpLineType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 30, 1, 3),
    _FmsMlpLineType_Type()
)
fmsMlpLineType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsMlpLineType.setStatus("mandatory")
_FmStatEthernet_ObjectIdentity = ObjectIdentity
fmStatEthernet = _FmStatEthernet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40)
)
_FmStatEthernetTable_Object = MibTable
fmStatEthernetTable = _FmStatEthernetTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1)
)
if mibBuilder.loadTexts:
    fmStatEthernetTable.setStatus("mandatory")
_FmStatEthernetEntry_Object = MibTableRow
fmStatEthernetEntry = _FmStatEthernetEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1)
)
fmStatEthernetEntry.setIndexNames(
    (0, "PCE-MIB", "fmsEthLineId"),
)
if mibBuilder.loadTexts:
    fmStatEthernetEntry.setStatus("mandatory")


class _FmsEthLineId_Type(Integer32):
    """Custom type fmsEthLineId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FmsEthLineId_Type.__name__ = "Integer32"
_FmsEthLineId_Object = MibTableColumn
fmsEthLineId = _FmsEthLineId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 1),
    _FmsEthLineId_Type()
)
fmsEthLineId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthLineId.setStatus("mandatory")


class _FmsEthPhysAddr_Type(OctetString):
    """Custom type fmsEthPhysAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_FmsEthPhysAddr_Type.__name__ = "OctetString"
_FmsEthPhysAddr_Object = MibTableColumn
fmsEthPhysAddr = _FmsEthPhysAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 2),
    _FmsEthPhysAddr_Type()
)
fmsEthPhysAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthPhysAddr.setStatus("mandatory")


class _FmsEthOperStatus_Type(Integer32):
    """Custom type fmsEthOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("up", 2))
    )


_FmsEthOperStatus_Type.__name__ = "Integer32"
_FmsEthOperStatus_Object = MibTableColumn
fmsEthOperStatus = _FmsEthOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 3),
    _FmsEthOperStatus_Type()
)
fmsEthOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthOperStatus.setStatus("mandatory")


class _FmsEthInterface_Type(Integer32):
    """Custom type fmsEthInterface based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ethernet10BaseT", 2),
          ("ethernet10base5", 1),
          ("ethernetAuto", 3))
    )


_FmsEthInterface_Type.__name__ = "Integer32"
_FmsEthInterface_Object = MibTableColumn
fmsEthInterface = _FmsEthInterface_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 4),
    _FmsEthInterface_Type()
)
fmsEthInterface.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthInterface.setStatus("mandatory")


class _FmsEthAutoPortSelection_Type(Integer32):
    """Custom type fmsEthAutoPortSelection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FmsEthAutoPortSelection_Type.__name__ = "Integer32"
_FmsEthAutoPortSelection_Object = MibTableColumn
fmsEthAutoPortSelection = _FmsEthAutoPortSelection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 20),
    _FmsEthAutoPortSelection_Type()
)
fmsEthAutoPortSelection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthAutoPortSelection.setStatus("mandatory")


class _FmsEthPolarityCorrection_Type(Integer32):
    """Custom type fmsEthPolarityCorrection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FmsEthPolarityCorrection_Type.__name__ = "Integer32"
_FmsEthPolarityCorrection_Object = MibTableColumn
fmsEthPolarityCorrection = _FmsEthPolarityCorrection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 21),
    _FmsEthPolarityCorrection_Type()
)
fmsEthPolarityCorrection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthPolarityCorrection.setStatus("mandatory")


class _FmsEthPolarityInversion_Type(Integer32):
    """Custom type fmsEthPolarityInversion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FmsEthPolarityInversion_Type.__name__ = "Integer32"
_FmsEthPolarityInversion_Object = MibTableColumn
fmsEthPolarityInversion = _FmsEthPolarityInversion_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 22),
    _FmsEthPolarityInversion_Type()
)
fmsEthPolarityInversion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthPolarityInversion.setStatus("mandatory")


class _FmsEthLinkIntegrity_Type(Integer32):
    """Custom type fmsEthLinkIntegrity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("off", 1),
          ("up", 3))
    )


_FmsEthLinkIntegrity_Type.__name__ = "Integer32"
_FmsEthLinkIntegrity_Object = MibTableColumn
fmsEthLinkIntegrity = _FmsEthLinkIntegrity_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 23),
    _FmsEthLinkIntegrity_Type()
)
fmsEthLinkIntegrity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthLinkIntegrity.setStatus("mandatory")


class _FmsEthTestLoopback_Type(Integer32):
    """Custom type fmsEthTestLoopback based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FmsEthTestLoopback_Type.__name__ = "Integer32"
_FmsEthTestLoopback_Object = MibTableColumn
fmsEthTestLoopback = _FmsEthTestLoopback_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 24),
    _FmsEthTestLoopback_Type()
)
fmsEthTestLoopback.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthTestLoopback.setStatus("mandatory")


class _FmsEthJabber_Type(Integer32):
    """Custom type fmsEthJabber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FmsEthJabber_Type.__name__ = "Integer32"
_FmsEthJabber_Object = MibTableColumn
fmsEthJabber = _FmsEthJabber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 25),
    _FmsEthJabber_Type()
)
fmsEthJabber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthJabber.setStatus("mandatory")


class _FmsEthTestMode_Type(Integer32):
    """Custom type fmsEthTestMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("continousSending", 2),
          ("off", 1),
          ("standby", 3))
    )


_FmsEthTestMode_Type.__name__ = "Integer32"
_FmsEthTestMode_Object = MibTableColumn
fmsEthTestMode = _FmsEthTestMode_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 26),
    _FmsEthTestMode_Type()
)
fmsEthTestMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthTestMode.setStatus("mandatory")


class _FmsEthTdrState_Type(Integer32):
    """Custom type fmsEthTdrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("openCircuit", 3),
          ("shortCircuit", 4),
          ("transceiverProblem", 2))
    )


_FmsEthTdrState_Type.__name__ = "Integer32"
_FmsEthTdrState_Object = MibTableColumn
fmsEthTdrState = _FmsEthTdrState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 27),
    _FmsEthTdrState_Type()
)
fmsEthTdrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthTdrState.setStatus("mandatory")


class _FmsEthTdrLoc_Type(Integer32):
    """Custom type fmsEthTdrLoc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2047),
    )


_FmsEthTdrLoc_Type.__name__ = "Integer32"
_FmsEthTdrLoc_Object = MibTableColumn
fmsEthTdrLoc = _FmsEthTdrLoc_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 28),
    _FmsEthTdrLoc_Type()
)
fmsEthTdrLoc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthTdrLoc.setStatus("mandatory")
_FmsEthUpTime_Type = TimeTicks
_FmsEthUpTime_Object = MibTableColumn
fmsEthUpTime = _FmsEthUpTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 29),
    _FmsEthUpTime_Type()
)
fmsEthUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthUpTime.setStatus("mandatory")
_FmStatEthInputTrafficTable_Object = MibTable
fmStatEthInputTrafficTable = _FmStatEthInputTrafficTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2)
)
if mibBuilder.loadTexts:
    fmStatEthInputTrafficTable.setStatus("mandatory")
_FmStatEthInputTrafficEntry_Object = MibTableRow
fmStatEthInputTrafficEntry = _FmStatEthInputTrafficEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1)
)
fmStatEthInputTrafficEntry.setIndexNames(
    (0, "PCE-MIB", "fmsEthInLineId"),
)
if mibBuilder.loadTexts:
    fmStatEthInputTrafficEntry.setStatus("mandatory")


class _FmsEthInLineId_Type(Integer32):
    """Custom type fmsEthInLineId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FmsEthInLineId_Type.__name__ = "Integer32"
_FmsEthInLineId_Object = MibTableColumn
fmsEthInLineId = _FmsEthInLineId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 1),
    _FmsEthInLineId_Type()
)
fmsEthInLineId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthInLineId.setStatus("mandatory")
_FmsEthInOctetsCounter_Type = Counter32
_FmsEthInOctetsCounter_Object = MibTableColumn
fmsEthInOctetsCounter = _FmsEthInOctetsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 2),
    _FmsEthInOctetsCounter_Type()
)
fmsEthInOctetsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthInOctetsCounter.setStatus("mandatory")
_FmsEthInPktsCounter_Type = Counter32
_FmsEthInPktsCounter_Object = MibTableColumn
fmsEthInPktsCounter = _FmsEthInPktsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 3),
    _FmsEthInPktsCounter_Type()
)
fmsEthInPktsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthInPktsCounter.setStatus("mandatory")
_FmsEthInNoErrCounter_Type = Counter32
_FmsEthInNoErrCounter_Object = MibTableColumn
fmsEthInNoErrCounter = _FmsEthInNoErrCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 4),
    _FmsEthInNoErrCounter_Type()
)
fmsEthInNoErrCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthInNoErrCounter.setStatus("mandatory")
_FmsEthInUcastPktsCounter_Type = Counter32
_FmsEthInUcastPktsCounter_Object = MibTableColumn
fmsEthInUcastPktsCounter = _FmsEthInUcastPktsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 5),
    _FmsEthInUcastPktsCounter_Type()
)
fmsEthInUcastPktsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthInUcastPktsCounter.setStatus("mandatory")
_FmsEthInAlignmentErrorsCounter_Type = Counter32
_FmsEthInAlignmentErrorsCounter_Object = MibTableColumn
fmsEthInAlignmentErrorsCounter = _FmsEthInAlignmentErrorsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 20),
    _FmsEthInAlignmentErrorsCounter_Type()
)
fmsEthInAlignmentErrorsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthInAlignmentErrorsCounter.setStatus("mandatory")
_FmsEthInFCSErrorsCounter_Type = Counter32
_FmsEthInFCSErrorsCounter_Object = MibTableColumn
fmsEthInFCSErrorsCounter = _FmsEthInFCSErrorsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 21),
    _FmsEthInFCSErrorsCounter_Type()
)
fmsEthInFCSErrorsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthInFCSErrorsCounter.setStatus("mandatory")
_FmsEthInPktsTooLongsCounter_Type = Counter32
_FmsEthInPktsTooLongsCounter_Object = MibTableColumn
fmsEthInPktsTooLongsCounter = _FmsEthInPktsTooLongsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 22),
    _FmsEthInPktsTooLongsCounter_Type()
)
fmsEthInPktsTooLongsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthInPktsTooLongsCounter.setStatus("mandatory")
_FmsEthInPktsTooShortsCounter_Type = Counter32
_FmsEthInPktsTooShortsCounter_Object = MibTableColumn
fmsEthInPktsTooShortsCounter = _FmsEthInPktsTooShortsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 23),
    _FmsEthInPktsTooShortsCounter_Type()
)
fmsEthInPktsTooShortsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthInPktsTooShortsCounter.setStatus("mandatory")
_FmsEthInErrOutOfResourcesCounter_Type = Counter32
_FmsEthInErrOutOfResourcesCounter_Object = MibTableColumn
fmsEthInErrOutOfResourcesCounter = _FmsEthInErrOutOfResourcesCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 24),
    _FmsEthInErrOutOfResourcesCounter_Type()
)
fmsEthInErrOutOfResourcesCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthInErrOutOfResourcesCounter.setStatus("mandatory")
_FmsEthInErrDmaOverrunCounter_Type = Counter32
_FmsEthInErrDmaOverrunCounter_Object = MibTableColumn
fmsEthInErrDmaOverrunCounter = _FmsEthInErrDmaOverrunCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 25),
    _FmsEthInErrDmaOverrunCounter_Type()
)
fmsEthInErrDmaOverrunCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthInErrDmaOverrunCounter.setStatus("mandatory")
_FmsEthInErrCollCounter_Type = Counter32
_FmsEthInErrCollCounter_Object = MibTableColumn
fmsEthInErrCollCounter = _FmsEthInErrCollCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 26),
    _FmsEthInErrCollCounter_Type()
)
fmsEthInErrCollCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthInErrCollCounter.setStatus("mandatory")
_FmsEthInErrOverFlowCounter_Type = Counter32
_FmsEthInErrOverFlowCounter_Object = MibTableColumn
fmsEthInErrOverFlowCounter = _FmsEthInErrOverFlowCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 27),
    _FmsEthInErrOverFlowCounter_Type()
)
fmsEthInErrOverFlowCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthInErrOverFlowCounter.setStatus("mandatory")
_FmStatEthOutputTrafficTable_Object = MibTable
fmStatEthOutputTrafficTable = _FmStatEthOutputTrafficTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3)
)
if mibBuilder.loadTexts:
    fmStatEthOutputTrafficTable.setStatus("mandatory")
_FmStatEthOutputTrafficEntry_Object = MibTableRow
fmStatEthOutputTrafficEntry = _FmStatEthOutputTrafficEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1)
)
fmStatEthOutputTrafficEntry.setIndexNames(
    (0, "PCE-MIB", "fmsEthOutLineId"),
)
if mibBuilder.loadTexts:
    fmStatEthOutputTrafficEntry.setStatus("mandatory")


class _FmsEthOutLineId_Type(Integer32):
    """Custom type fmsEthOutLineId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FmsEthOutLineId_Type.__name__ = "Integer32"
_FmsEthOutLineId_Object = MibTableColumn
fmsEthOutLineId = _FmsEthOutLineId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 1),
    _FmsEthOutLineId_Type()
)
fmsEthOutLineId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthOutLineId.setStatus("mandatory")
_FmsEthOutOctetsCounter_Type = Counter32
_FmsEthOutOctetsCounter_Object = MibTableColumn
fmsEthOutOctetsCounter = _FmsEthOutOctetsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 2),
    _FmsEthOutOctetsCounter_Type()
)
fmsEthOutOctetsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthOutOctetsCounter.setStatus("mandatory")
_FmsEthOutPktsCounter_Type = Counter32
_FmsEthOutPktsCounter_Object = MibTableColumn
fmsEthOutPktsCounter = _FmsEthOutPktsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 3),
    _FmsEthOutPktsCounter_Type()
)
fmsEthOutPktsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthOutPktsCounter.setStatus("mandatory")
_FmsEthOutNoErrCounter_Type = Counter32
_FmsEthOutNoErrCounter_Object = MibTableColumn
fmsEthOutNoErrCounter = _FmsEthOutNoErrCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 4),
    _FmsEthOutNoErrCounter_Type()
)
fmsEthOutNoErrCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthOutNoErrCounter.setStatus("mandatory")
_FmsEthOutSingleCollisionFramesCounter_Type = Counter32
_FmsEthOutSingleCollisionFramesCounter_Object = MibTableColumn
fmsEthOutSingleCollisionFramesCounter = _FmsEthOutSingleCollisionFramesCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 5),
    _FmsEthOutSingleCollisionFramesCounter_Type()
)
fmsEthOutSingleCollisionFramesCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthOutSingleCollisionFramesCounter.setStatus("mandatory")
_FmsEthOutMultipleCollisionFramesCounter_Type = Counter32
_FmsEthOutMultipleCollisionFramesCounter_Object = MibTableColumn
fmsEthOutMultipleCollisionFramesCounter = _FmsEthOutMultipleCollisionFramesCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 6),
    _FmsEthOutMultipleCollisionFramesCounter_Type()
)
fmsEthOutMultipleCollisionFramesCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthOutMultipleCollisionFramesCounter.setStatus("mandatory")
_FmsEthOutDeferredTransmissionsCounter_Type = Counter32
_FmsEthOutDeferredTransmissionsCounter_Object = MibTableColumn
fmsEthOutDeferredTransmissionsCounter = _FmsEthOutDeferredTransmissionsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 7),
    _FmsEthOutDeferredTransmissionsCounter_Type()
)
fmsEthOutDeferredTransmissionsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthOutDeferredTransmissionsCounter.setStatus("mandatory")
_FmsEthOutSQETestErrorsCounter_Type = Counter32
_FmsEthOutSQETestErrorsCounter_Object = MibTableColumn
fmsEthOutSQETestErrorsCounter = _FmsEthOutSQETestErrorsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 20),
    _FmsEthOutSQETestErrorsCounter_Type()
)
fmsEthOutSQETestErrorsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthOutSQETestErrorsCounter.setStatus("mandatory")
_FmsEthOutLateCollisionsCounter_Type = Counter32
_FmsEthOutLateCollisionsCounter_Object = MibTableColumn
fmsEthOutLateCollisionsCounter = _FmsEthOutLateCollisionsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 21),
    _FmsEthOutLateCollisionsCounter_Type()
)
fmsEthOutLateCollisionsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthOutLateCollisionsCounter.setStatus("mandatory")
_FmsEthOutExcessiveCollisionsCounter_Type = Counter32
_FmsEthOutExcessiveCollisionsCounter_Object = MibTableColumn
fmsEthOutExcessiveCollisionsCounter = _FmsEthOutExcessiveCollisionsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 22),
    _FmsEthOutExcessiveCollisionsCounter_Type()
)
fmsEthOutExcessiveCollisionsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthOutExcessiveCollisionsCounter.setStatus("mandatory")
_FmsEthOutCarrierSenseErrorsCounter_Type = Counter32
_FmsEthOutCarrierSenseErrorsCounter_Object = MibTableColumn
fmsEthOutCarrierSenseErrorsCounter = _FmsEthOutCarrierSenseErrorsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 23),
    _FmsEthOutCarrierSenseErrorsCounter_Type()
)
fmsEthOutCarrierSenseErrorsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthOutCarrierSenseErrorsCounter.setStatus("mandatory")
_FmsEthOutErrExcdDelayCounter_Type = Counter32
_FmsEthOutErrExcdDelayCounter_Object = MibTableColumn
fmsEthOutErrExcdDelayCounter = _FmsEthOutErrExcdDelayCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 24),
    _FmsEthOutErrExcdDelayCounter_Type()
)
fmsEthOutErrExcdDelayCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthOutErrExcdDelayCounter.setStatus("mandatory")
_FmsEthOutErrCtsLossCounter_Type = Counter32
_FmsEthOutErrCtsLossCounter_Object = MibTableColumn
fmsEthOutErrCtsLossCounter = _FmsEthOutErrCtsLossCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 25),
    _FmsEthOutErrCtsLossCounter_Type()
)
fmsEthOutErrCtsLossCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthOutErrCtsLossCounter.setStatus("mandatory")
_FmsEthOutErrDmaUnderrunCounter_Type = Counter32
_FmsEthOutErrDmaUnderrunCounter_Object = MibTableColumn
fmsEthOutErrDmaUnderrunCounter = _FmsEthOutErrDmaUnderrunCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 26),
    _FmsEthOutErrDmaUnderrunCounter_Type()
)
fmsEthOutErrDmaUnderrunCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthOutErrDmaUnderrunCounter.setStatus("mandatory")
_FmStatEthManagementTable_Object = MibTable
fmStatEthManagementTable = _FmStatEthManagementTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 4)
)
if mibBuilder.loadTexts:
    fmStatEthManagementTable.setStatus("mandatory")
_FmStatEthManagementEntry_Object = MibTableRow
fmStatEthManagementEntry = _FmStatEthManagementEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 4, 1)
)
fmStatEthManagementEntry.setIndexNames(
    (0, "PCE-MIB", "fmsEthManLineId"),
)
if mibBuilder.loadTexts:
    fmStatEthManagementEntry.setStatus("mandatory")


class _FmsEthManLineId_Type(Integer32):
    """Custom type fmsEthManLineId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FmsEthManLineId_Type.__name__ = "Integer32"
_FmsEthManLineId_Object = MibTableColumn
fmsEthManLineId = _FmsEthManLineId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 4, 1, 1),
    _FmsEthManLineId_Type()
)
fmsEthManLineId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthManLineId.setStatus("mandatory")
_FmsEthManSupervisionOkCounter_Type = Counter32
_FmsEthManSupervisionOkCounter_Object = MibTableColumn
fmsEthManSupervisionOkCounter = _FmsEthManSupervisionOkCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 4, 1, 2),
    _FmsEthManSupervisionOkCounter_Type()
)
fmsEthManSupervisionOkCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthManSupervisionOkCounter.setStatus("mandatory")
_FmsEthManSupervisionNokCounter_Type = Counter32
_FmsEthManSupervisionNokCounter_Object = MibTableColumn
fmsEthManSupervisionNokCounter = _FmsEthManSupervisionNokCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 4, 1, 3),
    _FmsEthManSupervisionNokCounter_Type()
)
fmsEthManSupervisionNokCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthManSupervisionNokCounter.setStatus("mandatory")
_FmsEthManInputResetCounter_Type = Counter32
_FmsEthManInputResetCounter_Object = MibTableColumn
fmsEthManInputResetCounter = _FmsEthManInputResetCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 4, 1, 4),
    _FmsEthManInputResetCounter_Type()
)
fmsEthManInputResetCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthManInputResetCounter.setStatus("mandatory")
_FmsEthManFilterPermitCounter_Type = Counter32
_FmsEthManFilterPermitCounter_Object = MibTableColumn
fmsEthManFilterPermitCounter = _FmsEthManFilterPermitCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 4, 1, 5),
    _FmsEthManFilterPermitCounter_Type()
)
fmsEthManFilterPermitCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthManFilterPermitCounter.setStatus("mandatory")
_FmsEthManFilterDenyCounter_Type = Counter32
_FmsEthManFilterDenyCounter_Object = MibTableColumn
fmsEthManFilterDenyCounter = _FmsEthManFilterDenyCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 4, 1, 6),
    _FmsEthManFilterDenyCounter_Type()
)
fmsEthManFilterDenyCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsEthManFilterDenyCounter.setStatus("mandatory")
_FmStatWanConnectionsTable_Object = MibTable
fmStatWanConnectionsTable = _FmStatWanConnectionsTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45)
)
if mibBuilder.loadTexts:
    fmStatWanConnectionsTable.setStatus("mandatory")
_FmStatWanConnectionsEntry_Object = MibTableRow
fmStatWanConnectionsEntry = _FmStatWanConnectionsEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1)
)
fmStatWanConnectionsEntry.setIndexNames(
    (0, "PCE-MIB", "fmsWanConnId"),
)
if mibBuilder.loadTexts:
    fmStatWanConnectionsEntry.setStatus("mandatory")


class _FmsWanConnId_Type(Integer32):
    """Custom type fmsWanConnId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FmsWanConnId_Type.__name__ = "Integer32"
_FmsWanConnId_Object = MibTableColumn
fmsWanConnId = _FmsWanConnId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1, 1),
    _FmsWanConnId_Type()
)
fmsWanConnId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsWanConnId.setStatus("mandatory")


class _FmsWanConnRemoteAddr_Type(OctetString):
    """Custom type fmsWanConnRemoteAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FmsWanConnRemoteAddr_Type.__name__ = "OctetString"
_FmsWanConnRemoteAddr_Object = MibTableColumn
fmsWanConnRemoteAddr = _FmsWanConnRemoteAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1, 2),
    _FmsWanConnRemoteAddr_Type()
)
fmsWanConnRemoteAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsWanConnRemoteAddr.setStatus("mandatory")


class _FmsWanConnEncapsulation_Type(Integer32):
    """Custom type fmsWanConnEncapsulation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(9,
              20)
        )
    )
    namedValues = NamedValues(
        *(("ip", 20),
          ("rilBridge", 9))
    )


_FmsWanConnEncapsulation_Type.__name__ = "Integer32"
_FmsWanConnEncapsulation_Object = MibTableColumn
fmsWanConnEncapsulation = _FmsWanConnEncapsulation_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1, 3),
    _FmsWanConnEncapsulation_Type()
)
fmsWanConnEncapsulation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsWanConnEncapsulation.setStatus("mandatory")


class _FmsWanConnStatus_Type(Integer32):
    """Custom type fmsWanConnStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("up", 2))
    )


_FmsWanConnStatus_Type.__name__ = "Integer32"
_FmsWanConnStatus_Object = MibTableColumn
fmsWanConnStatus = _FmsWanConnStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1, 5),
    _FmsWanConnStatus_Type()
)
fmsWanConnStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsWanConnStatus.setStatus("mandatory")


class _FmsWanConnGrouping_Type(Integer32):
    """Custom type fmsWanConnGrouping based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("grouping", 2),
          ("multiFrames", 3),
          ("off", 1))
    )


_FmsWanConnGrouping_Type.__name__ = "Integer32"
_FmsWanConnGrouping_Object = MibTableColumn
fmsWanConnGrouping = _FmsWanConnGrouping_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1, 6),
    _FmsWanConnGrouping_Type()
)
fmsWanConnGrouping.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsWanConnGrouping.setStatus("mandatory")


class _FmsWanConnLocalSbNumber_Type(Integer32):
    """Custom type fmsWanConnLocalSbNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_FmsWanConnLocalSbNumber_Type.__name__ = "Integer32"
_FmsWanConnLocalSbNumber_Object = MibTableColumn
fmsWanConnLocalSbNumber = _FmsWanConnLocalSbNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1, 7),
    _FmsWanConnLocalSbNumber_Type()
)
fmsWanConnLocalSbNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsWanConnLocalSbNumber.setStatus("mandatory")
_FmsWanConnInPktsCounter_Type = Counter32
_FmsWanConnInPktsCounter_Object = MibTableColumn
fmsWanConnInPktsCounter = _FmsWanConnInPktsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1, 20),
    _FmsWanConnInPktsCounter_Type()
)
fmsWanConnInPktsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsWanConnInPktsCounter.setStatus("mandatory")
_FmsWanConnInErrPktsCounter_Type = Counter32
_FmsWanConnInErrPktsCounter_Object = MibTableColumn
fmsWanConnInErrPktsCounter = _FmsWanConnInErrPktsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1, 21),
    _FmsWanConnInErrPktsCounter_Type()
)
fmsWanConnInErrPktsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsWanConnInErrPktsCounter.setStatus("mandatory")
_FmsWanConnInOctetsCounter_Type = Counter32
_FmsWanConnInOctetsCounter_Object = MibTableColumn
fmsWanConnInOctetsCounter = _FmsWanConnInOctetsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1, 22),
    _FmsWanConnInOctetsCounter_Type()
)
fmsWanConnInOctetsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsWanConnInOctetsCounter.setStatus("mandatory")
_FmsWanConnOutPktsCounter_Type = Counter32
_FmsWanConnOutPktsCounter_Object = MibTableColumn
fmsWanConnOutPktsCounter = _FmsWanConnOutPktsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1, 30),
    _FmsWanConnOutPktsCounter_Type()
)
fmsWanConnOutPktsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsWanConnOutPktsCounter.setStatus("mandatory")
_FmsWanConnOutOctetsCounter_Type = Counter32
_FmsWanConnOutOctetsCounter_Object = MibTableColumn
fmsWanConnOutOctetsCounter = _FmsWanConnOutOctetsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1, 31),
    _FmsWanConnOutOctetsCounter_Type()
)
fmsWanConnOutOctetsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsWanConnOutOctetsCounter.setStatus("mandatory")
_FmStatRemoteVirtualPorts_ObjectIdentity = ObjectIdentity
fmStatRemoteVirtualPorts = _FmStatRemoteVirtualPorts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46)
)
_FmStatRvpConnectionsTable_Object = MibTable
fmStatRvpConnectionsTable = _FmStatRvpConnectionsTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1)
)
if mibBuilder.loadTexts:
    fmStatRvpConnectionsTable.setStatus("mandatory")
_FmStatRvpConnectionsEntry_Object = MibTableRow
fmStatRvpConnectionsEntry = _FmStatRvpConnectionsEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1)
)
fmStatRvpConnectionsEntry.setIndexNames(
    (0, "PCE-MIB", "fmsRvpConnRemoteAddr"),
    (0, "PCE-MIB", "fmsRvpConnEncapsulation"),
    (0, "PCE-MIB", "fmsRvpConnId"),
)
if mibBuilder.loadTexts:
    fmStatRvpConnectionsEntry.setStatus("mandatory")


class _FmsRvpConnRemoteAddr_Type(OctetString):
    """Custom type fmsRvpConnRemoteAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FmsRvpConnRemoteAddr_Type.__name__ = "OctetString"
_FmsRvpConnRemoteAddr_Object = MibTableColumn
fmsRvpConnRemoteAddr = _FmsRvpConnRemoteAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1, 2),
    _FmsRvpConnRemoteAddr_Type()
)
fmsRvpConnRemoteAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsRvpConnRemoteAddr.setStatus("mandatory")


class _FmsRvpConnEncapsulation_Type(Integer32):
    """Custom type fmsRvpConnEncapsulation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              10,
              11,
              20,
              30,
              31,
              40)
        )
    )
    namedValues = NamedValues(
        *(("bridge", 10),
          ("bridgeSpecific", 11),
          ("clnp", 40),
          ("ip", 20),
          ("ipx", 30),
          ("ipxSpecific", 31),
          ("multiplexing", 1))
    )


_FmsRvpConnEncapsulation_Type.__name__ = "Integer32"
_FmsRvpConnEncapsulation_Object = MibTableColumn
fmsRvpConnEncapsulation = _FmsRvpConnEncapsulation_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1, 3),
    _FmsRvpConnEncapsulation_Type()
)
fmsRvpConnEncapsulation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsRvpConnEncapsulation.setStatus("mandatory")


class _FmsRvpConnId_Type(Integer32):
    """Custom type fmsRvpConnId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FmsRvpConnId_Type.__name__ = "Integer32"
_FmsRvpConnId_Object = MibTableColumn
fmsRvpConnId = _FmsRvpConnId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1, 4),
    _FmsRvpConnId_Type()
)
fmsRvpConnId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsRvpConnId.setStatus("mandatory")


class _FmsRvpConnStatus_Type(Integer32):
    """Custom type fmsRvpConnStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("up", 2))
    )


_FmsRvpConnStatus_Type.__name__ = "Integer32"
_FmsRvpConnStatus_Object = MibTableColumn
fmsRvpConnStatus = _FmsRvpConnStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1, 5),
    _FmsRvpConnStatus_Type()
)
fmsRvpConnStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsRvpConnStatus.setStatus("mandatory")


class _FmsRvpConnGrouping_Type(Integer32):
    """Custom type fmsRvpConnGrouping based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FmsRvpConnGrouping_Type.__name__ = "Integer32"
_FmsRvpConnGrouping_Object = MibTableColumn
fmsRvpConnGrouping = _FmsRvpConnGrouping_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1, 6),
    _FmsRvpConnGrouping_Type()
)
fmsRvpConnGrouping.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsRvpConnGrouping.setStatus("mandatory")


class _FmsRvpConnLocalSbNumber_Type(Integer32):
    """Custom type fmsRvpConnLocalSbNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_FmsRvpConnLocalSbNumber_Type.__name__ = "Integer32"
_FmsRvpConnLocalSbNumber_Object = MibTableColumn
fmsRvpConnLocalSbNumber = _FmsRvpConnLocalSbNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1, 7),
    _FmsRvpConnLocalSbNumber_Type()
)
fmsRvpConnLocalSbNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsRvpConnLocalSbNumber.setStatus("mandatory")
_FmsRvpConnInPktsCounter_Type = Counter32
_FmsRvpConnInPktsCounter_Object = MibTableColumn
fmsRvpConnInPktsCounter = _FmsRvpConnInPktsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1, 20),
    _FmsRvpConnInPktsCounter_Type()
)
fmsRvpConnInPktsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsRvpConnInPktsCounter.setStatus("mandatory")
_FmsRvpConnInErrPktsCounter_Type = Counter32
_FmsRvpConnInErrPktsCounter_Object = MibTableColumn
fmsRvpConnInErrPktsCounter = _FmsRvpConnInErrPktsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1, 21),
    _FmsRvpConnInErrPktsCounter_Type()
)
fmsRvpConnInErrPktsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsRvpConnInErrPktsCounter.setStatus("mandatory")
_FmsRvpConnInOctetsCounter_Type = Counter32
_FmsRvpConnInOctetsCounter_Object = MibTableColumn
fmsRvpConnInOctetsCounter = _FmsRvpConnInOctetsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1, 22),
    _FmsRvpConnInOctetsCounter_Type()
)
fmsRvpConnInOctetsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsRvpConnInOctetsCounter.setStatus("mandatory")
_FmsRvpConnOutPktsCounter_Type = Counter32
_FmsRvpConnOutPktsCounter_Object = MibTableColumn
fmsRvpConnOutPktsCounter = _FmsRvpConnOutPktsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1, 30),
    _FmsRvpConnOutPktsCounter_Type()
)
fmsRvpConnOutPktsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsRvpConnOutPktsCounter.setStatus("mandatory")
_FmsRvpConnOutOctetsCounter_Type = Counter32
_FmsRvpConnOutOctetsCounter_Object = MibTableColumn
fmsRvpConnOutOctetsCounter = _FmsRvpConnOutOctetsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1, 31),
    _FmsRvpConnOutOctetsCounter_Type()
)
fmsRvpConnOutOctetsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsRvpConnOutOctetsCounter.setStatus("mandatory")
_FmStatBridge_ObjectIdentity = ObjectIdentity
fmStatBridge = _FmStatBridge_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 50)
)


class _FmsBridgeState_Type(Integer32):
    """Custom type fmsBridgeState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("transparentBridge", 2))
    )


_FmsBridgeState_Type.__name__ = "Integer32"
_FmsBridgeState_Object = MibScalar
fmsBridgeState = _FmsBridgeState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 50, 1),
    _FmsBridgeState_Type()
)
fmsBridgeState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsBridgeState.setStatus("mandatory")
_FmStatBrdgTraffic_ObjectIdentity = ObjectIdentity
fmStatBrdgTraffic = _FmStatBrdgTraffic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 50, 18)
)
_FmsBrdgTrafInPktsCounter_Type = Counter32
_FmsBrdgTrafInPktsCounter_Object = MibScalar
fmsBrdgTrafInPktsCounter = _FmsBrdgTrafInPktsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 50, 18, 1),
    _FmsBrdgTrafInPktsCounter_Type()
)
fmsBrdgTrafInPktsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsBrdgTrafInPktsCounter.setStatus("mandatory")
_FmsBrdgTrafOutPktsCounter_Type = Counter32
_FmsBrdgTrafOutPktsCounter_Object = MibScalar
fmsBrdgTrafOutPktsCounter = _FmsBrdgTrafOutPktsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 50, 18, 20),
    _FmsBrdgTrafOutPktsCounter_Type()
)
fmsBrdgTrafOutPktsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsBrdgTrafOutPktsCounter.setStatus("mandatory")
_FmsBrdgTrafOutBroadcastPktsCounter_Type = Counter32
_FmsBrdgTrafOutBroadcastPktsCounter_Object = MibScalar
fmsBrdgTrafOutBroadcastPktsCounter = _FmsBrdgTrafOutBroadcastPktsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 50, 18, 21),
    _FmsBrdgTrafOutBroadcastPktsCounter_Type()
)
fmsBrdgTrafOutBroadcastPktsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsBrdgTrafOutBroadcastPktsCounter.setStatus("mandatory")
_FmsBrdgTrafInServCounter_Type = Counter32
_FmsBrdgTrafInServCounter_Object = MibScalar
fmsBrdgTrafInServCounter = _FmsBrdgTrafInServCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 50, 18, 50),
    _FmsBrdgTrafInServCounter_Type()
)
fmsBrdgTrafInServCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsBrdgTrafInServCounter.setStatus("mandatory")
_FmsBrdgTrafOutServCounter_Type = Counter32
_FmsBrdgTrafOutServCounter_Object = MibScalar
fmsBrdgTrafOutServCounter = _FmsBrdgTrafOutServCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 50, 18, 51),
    _FmsBrdgTrafOutServCounter_Type()
)
fmsBrdgTrafOutServCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsBrdgTrafOutServCounter.setStatus("mandatory")
_FmsBrdgTrafOutBroadcastServCounter_Type = Counter32
_FmsBrdgTrafOutBroadcastServCounter_Object = MibScalar
fmsBrdgTrafOutBroadcastServCounter = _FmsBrdgTrafOutBroadcastServCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 50, 18, 52),
    _FmsBrdgTrafOutBroadcastServCounter_Type()
)
fmsBrdgTrafOutBroadcastServCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsBrdgTrafOutBroadcastServCounter.setStatus("mandatory")
_FmStatIpRouter_ObjectIdentity = ObjectIdentity
fmStatIpRouter = _FmStatIpRouter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51)
)


class _FmsIpRouterState_Type(Integer32):
    """Custom type fmsIpRouterState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FmsIpRouterState_Type.__name__ = "Integer32"
_FmsIpRouterState_Object = MibScalar
fmsIpRouterState = _FmsIpRouterState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 1),
    _FmsIpRouterState_Type()
)
fmsIpRouterState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpRouterState.setStatus("mandatory")
_FmStatIpTraffic_ObjectIdentity = ObjectIdentity
fmStatIpTraffic = _FmStatIpTraffic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18)
)
_FmsIpTrafInReceivesCounter_Type = Counter32
_FmsIpTrafInReceivesCounter_Object = MibScalar
fmsIpTrafInReceivesCounter = _FmsIpTrafInReceivesCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18, 1),
    _FmsIpTrafInReceivesCounter_Type()
)
fmsIpTrafInReceivesCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpTrafInReceivesCounter.setStatus("mandatory")
_FmsIpTrafOutRequestsCounter_Type = Counter32
_FmsIpTrafOutRequestsCounter_Object = MibScalar
fmsIpTrafOutRequestsCounter = _FmsIpTrafOutRequestsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18, 2),
    _FmsIpTrafOutRequestsCounter_Type()
)
fmsIpTrafOutRequestsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpTrafOutRequestsCounter.setStatus("mandatory")
_FmsIpTrafInOctetsCounter_Type = Counter32
_FmsIpTrafInOctetsCounter_Object = MibScalar
fmsIpTrafInOctetsCounter = _FmsIpTrafInOctetsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18, 3),
    _FmsIpTrafInOctetsCounter_Type()
)
fmsIpTrafInOctetsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpTrafInOctetsCounter.setStatus("mandatory")
_FmsIpTrafOutOctetsCounter_Type = Counter32
_FmsIpTrafOutOctetsCounter_Object = MibScalar
fmsIpTrafOutOctetsCounter = _FmsIpTrafOutOctetsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18, 4),
    _FmsIpTrafOutOctetsCounter_Type()
)
fmsIpTrafOutOctetsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpTrafOutOctetsCounter.setStatus("mandatory")
_FmsIpTrafInUnknownProtosCounter_Type = Counter32
_FmsIpTrafInUnknownProtosCounter_Object = MibScalar
fmsIpTrafInUnknownProtosCounter = _FmsIpTrafInUnknownProtosCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18, 5),
    _FmsIpTrafInUnknownProtosCounter_Type()
)
fmsIpTrafInUnknownProtosCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpTrafInUnknownProtosCounter.setStatus("mandatory")
_FmsIpTrafNoRoutesCounter_Type = Counter32
_FmsIpTrafNoRoutesCounter_Object = MibScalar
fmsIpTrafNoRoutesCounter = _FmsIpTrafNoRoutesCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18, 6),
    _FmsIpTrafNoRoutesCounter_Type()
)
fmsIpTrafNoRoutesCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpTrafNoRoutesCounter.setStatus("mandatory")
_FmsIpTrafInHdrErrorsCounter_Type = Counter32
_FmsIpTrafInHdrErrorsCounter_Object = MibScalar
fmsIpTrafInHdrErrorsCounter = _FmsIpTrafInHdrErrorsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18, 7),
    _FmsIpTrafInHdrErrorsCounter_Type()
)
fmsIpTrafInHdrErrorsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpTrafInHdrErrorsCounter.setStatus("mandatory")
_FmsIpTrafOutForwDatagramsCounter_Type = Counter32
_FmsIpTrafOutForwDatagramsCounter_Object = MibScalar
fmsIpTrafOutForwDatagramsCounter = _FmsIpTrafOutForwDatagramsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18, 8),
    _FmsIpTrafOutForwDatagramsCounter_Type()
)
fmsIpTrafOutForwDatagramsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpTrafOutForwDatagramsCounter.setStatus("mandatory")
_FmsIpTrafOutForwDefRouteCounter_Type = Counter32
_FmsIpTrafOutForwDefRouteCounter_Object = MibScalar
fmsIpTrafOutForwDefRouteCounter = _FmsIpTrafOutForwDefRouteCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18, 9),
    _FmsIpTrafOutForwDefRouteCounter_Type()
)
fmsIpTrafOutForwDefRouteCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpTrafOutForwDefRouteCounter.setStatus("mandatory")
_FmsIpTrafIcmpOutMsgsCounter_Type = Counter32
_FmsIpTrafIcmpOutMsgsCounter_Object = MibScalar
fmsIpTrafIcmpOutMsgsCounter = _FmsIpTrafIcmpOutMsgsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18, 10),
    _FmsIpTrafIcmpOutMsgsCounter_Type()
)
fmsIpTrafIcmpOutMsgsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpTrafIcmpOutMsgsCounter.setStatus("mandatory")
_FmsIpTrafIcmpInMsgsCounter_Type = Counter32
_FmsIpTrafIcmpInMsgsCounter_Object = MibScalar
fmsIpTrafIcmpInMsgsCounter = _FmsIpTrafIcmpInMsgsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18, 11),
    _FmsIpTrafIcmpInMsgsCounter_Type()
)
fmsIpTrafIcmpInMsgsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpTrafIcmpInMsgsCounter.setStatus("mandatory")
_FmStatIpLanTraffic_ObjectIdentity = ObjectIdentity
fmStatIpLanTraffic = _FmStatIpLanTraffic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 19)
)
_FmsIpLanIpAddr_Type = IpAddress
_FmsIpLanIpAddr_Object = MibScalar
fmsIpLanIpAddr = _FmsIpLanIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 19, 1),
    _FmsIpLanIpAddr_Type()
)
fmsIpLanIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpLanIpAddr.setStatus("mandatory")
_FmsIpLanNetMask_Type = IpAddress
_FmsIpLanNetMask_Object = MibScalar
fmsIpLanNetMask = _FmsIpLanNetMask_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 19, 2),
    _FmsIpLanNetMask_Type()
)
fmsIpLanNetMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpLanNetMask.setStatus("mandatory")
_FmsIpLanOutRequestsCounter_Type = Counter32
_FmsIpLanOutRequestsCounter_Object = MibScalar
fmsIpLanOutRequestsCounter = _FmsIpLanOutRequestsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 19, 3),
    _FmsIpLanOutRequestsCounter_Type()
)
fmsIpLanOutRequestsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpLanOutRequestsCounter.setStatus("mandatory")
_FmsIpLanInReceivesCounter_Type = Counter32
_FmsIpLanInReceivesCounter_Object = MibScalar
fmsIpLanInReceivesCounter = _FmsIpLanInReceivesCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 19, 4),
    _FmsIpLanInReceivesCounter_Type()
)
fmsIpLanInReceivesCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpLanInReceivesCounter.setStatus("mandatory")
_FmsIpLanOutOctetsIpCounter_Type = Counter32
_FmsIpLanOutOctetsIpCounter_Object = MibScalar
fmsIpLanOutOctetsIpCounter = _FmsIpLanOutOctetsIpCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 19, 5),
    _FmsIpLanOutOctetsIpCounter_Type()
)
fmsIpLanOutOctetsIpCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpLanOutOctetsIpCounter.setStatus("mandatory")
_FmsIpLanInOctetsIpCounter_Type = Counter32
_FmsIpLanInOctetsIpCounter_Object = MibScalar
fmsIpLanInOctetsIpCounter = _FmsIpLanInOctetsIpCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 19, 6),
    _FmsIpLanInOctetsIpCounter_Type()
)
fmsIpLanInOctetsIpCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpLanInOctetsIpCounter.setStatus("mandatory")
_FmsIpLanNoRoutesCounter_Type = Counter32
_FmsIpLanNoRoutesCounter_Object = MibScalar
fmsIpLanNoRoutesCounter = _FmsIpLanNoRoutesCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 19, 7),
    _FmsIpLanNoRoutesCounter_Type()
)
fmsIpLanNoRoutesCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpLanNoRoutesCounter.setStatus("mandatory")
_FmsIpLanInHdrErrorsCounter_Type = Counter32
_FmsIpLanInHdrErrorsCounter_Object = MibScalar
fmsIpLanInHdrErrorsCounter = _FmsIpLanInHdrErrorsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 19, 8),
    _FmsIpLanInHdrErrorsCounter_Type()
)
fmsIpLanInHdrErrorsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpLanInHdrErrorsCounter.setStatus("mandatory")
_FmsIpLanArpFailedCounter_Type = Counter32
_FmsIpLanArpFailedCounter_Object = MibScalar
fmsIpLanArpFailedCounter = _FmsIpLanArpFailedCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 19, 9),
    _FmsIpLanArpFailedCounter_Type()
)
fmsIpLanArpFailedCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpLanArpFailedCounter.setStatus("mandatory")
_FmStatIpClusterStateTable_Object = MibTable
fmStatIpClusterStateTable = _FmStatIpClusterStateTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 25)
)
if mibBuilder.loadTexts:
    fmStatIpClusterStateTable.setStatus("mandatory")
_FmStatIpClusterStateEntry_Object = MibTableRow
fmStatIpClusterStateEntry = _FmStatIpClusterStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 25, 1)
)
fmStatIpClusterStateEntry.setIndexNames(
    (0, "PCE-MIB", "fmsIpCluVpId"),
    (0, "PCE-MIB", "fmsIpCluClusterNumber"),
)
if mibBuilder.loadTexts:
    fmStatIpClusterStateEntry.setStatus("mandatory")


class _FmsIpCluVpId_Type(Integer32):
    """Custom type fmsIpCluVpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FmsIpCluVpId_Type.__name__ = "Integer32"
_FmsIpCluVpId_Object = MibTableColumn
fmsIpCluVpId = _FmsIpCluVpId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 25, 1, 1),
    _FmsIpCluVpId_Type()
)
fmsIpCluVpId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpCluVpId.setStatus("mandatory")


class _FmsIpCluClusterNumber_Type(Integer32):
    """Custom type fmsIpCluClusterNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FmsIpCluClusterNumber_Type.__name__ = "Integer32"
_FmsIpCluClusterNumber_Object = MibTableColumn
fmsIpCluClusterNumber = _FmsIpCluClusterNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 25, 1, 2),
    _FmsIpCluClusterNumber_Type()
)
fmsIpCluClusterNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpCluClusterNumber.setStatus("mandatory")
_FmsIpCluVirtualIpAddress_Type = IpAddress
_FmsIpCluVirtualIpAddress_Object = MibTableColumn
fmsIpCluVirtualIpAddress = _FmsIpCluVirtualIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 25, 1, 3),
    _FmsIpCluVirtualIpAddress_Type()
)
fmsIpCluVirtualIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpCluVirtualIpAddress.setStatus("mandatory")


class _FmsIpCluOperStatus_Type(Integer32):
    """Custom type fmsIpCluOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("backup", 2),
          ("master", 3),
          ("off", 1))
    )


_FmsIpCluOperStatus_Type.__name__ = "Integer32"
_FmsIpCluOperStatus_Object = MibTableColumn
fmsIpCluOperStatus = _FmsIpCluOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 25, 1, 4),
    _FmsIpCluOperStatus_Type()
)
fmsIpCluOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpCluOperStatus.setStatus("mandatory")


class _FmsIpCluAdminStatus_Type(Integer32):
    """Custom type fmsIpCluAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_FmsIpCluAdminStatus_Type.__name__ = "Integer32"
_FmsIpCluAdminStatus_Object = MibTableColumn
fmsIpCluAdminStatus = _FmsIpCluAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 25, 1, 5),
    _FmsIpCluAdminStatus_Type()
)
fmsIpCluAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fmsIpCluAdminStatus.setStatus("mandatory")
_FmsIpCluLastChange_Type = TimeTicks
_FmsIpCluLastChange_Object = MibTableColumn
fmsIpCluLastChange = _FmsIpCluLastChange_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 25, 1, 6),
    _FmsIpCluLastChange_Type()
)
fmsIpCluLastChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsIpCluLastChange.setStatus("mandatory")
_FmStatFrameRelay_ObjectIdentity = ObjectIdentity
fmStatFrameRelay = _FmStatFrameRelay_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60)
)
_FmsFrSwitch_ObjectIdentity = ObjectIdentity
fmsFrSwitch = _FmsFrSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 1)
)
_FmsFrSwDataLinkConnEstablished_Type = Gauge32
_FmsFrSwDataLinkConnEstablished_Object = MibScalar
fmsFrSwDataLinkConnEstablished = _FmsFrSwDataLinkConnEstablished_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 1, 1),
    _FmsFrSwDataLinkConnEstablished_Type()
)
fmsFrSwDataLinkConnEstablished.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrSwDataLinkConnEstablished.setStatus("mandatory")
_FmsFrSwBookingInputThrouhput_Type = Gauge32
_FmsFrSwBookingInputThrouhput_Object = MibScalar
fmsFrSwBookingInputThrouhput = _FmsFrSwBookingInputThrouhput_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 1, 10),
    _FmsFrSwBookingInputThrouhput_Type()
)
fmsFrSwBookingInputThrouhput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrSwBookingInputThrouhput.setStatus("mandatory")
_FmsFrSwOverBookingThrouhput_Type = Gauge32
_FmsFrSwOverBookingThrouhput_Object = MibScalar
fmsFrSwOverBookingThrouhput = _FmsFrSwOverBookingThrouhput_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 1, 12),
    _FmsFrSwOverBookingThrouhput_Type()
)
fmsFrSwOverBookingThrouhput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrSwOverBookingThrouhput.setStatus("mandatory")
_FmsFrLogicalPort_ObjectIdentity = ObjectIdentity
fmsFrLogicalPort = _FmsFrLogicalPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2)
)
_FmsFrLpLogPortTable_Object = MibTable
fmsFrLpLogPortTable = _FmsFrLpLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 1)
)
if mibBuilder.loadTexts:
    fmsFrLpLogPortTable.setStatus("mandatory")
_FmsFrLpLogPortEntry_Object = MibTableRow
fmsFrLpLogPortEntry = _FmsFrLpLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 1, 1)
)
fmsFrLpLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "fmsFrLpLogPortId"),
)
if mibBuilder.loadTexts:
    fmsFrLpLogPortEntry.setStatus("mandatory")


class _FmsFrLpLogPortId_Type(Integer32):
    """Custom type fmsFrLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FmsFrLpLogPortId_Type.__name__ = "Integer32"
_FmsFrLpLogPortId_Object = MibTableColumn
fmsFrLpLogPortId = _FmsFrLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 1, 1, 1),
    _FmsFrLpLogPortId_Type()
)
fmsFrLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpLogPortId.setStatus("mandatory")


class _FmsFrLpInterfaceType_Type(Integer32):
    """Custom type fmsFrLpInterfaceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("frCe", 1),
          ("frSe", 3),
          ("frTe", 2))
    )


_FmsFrLpInterfaceType_Type.__name__ = "Integer32"
_FmsFrLpInterfaceType_Object = MibTableColumn
fmsFrLpInterfaceType = _FmsFrLpInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 1, 1, 3),
    _FmsFrLpInterfaceType_Type()
)
fmsFrLpInterfaceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpInterfaceType.setStatus("mandatory")


class _FmsFrLpNumPlan_Type(Integer32):
    """Custom type fmsFrLpNumPlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("e164", 2),
          ("none", 4),
          ("other", 1),
          ("x121", 3))
    )


_FmsFrLpNumPlan_Type.__name__ = "Integer32"
_FmsFrLpNumPlan_Object = MibTableColumn
fmsFrLpNumPlan = _FmsFrLpNumPlan_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 1, 1, 11),
    _FmsFrLpNumPlan_Type()
)
fmsFrLpNumPlan.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpNumPlan.setStatus("mandatory")


class _FmsFrLpAddrDlciLen_Type(Integer32):
    """Custom type fmsFrLpAddrDlciLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("fourOctets17Bits", 4),
          ("fourOctets23Bits", 5),
          ("threeOctets10Bits", 2),
          ("threeOctets16Bits", 3),
          ("twoOctets10Bits", 1))
    )


_FmsFrLpAddrDlciLen_Type.__name__ = "Integer32"
_FmsFrLpAddrDlciLen_Object = MibTableColumn
fmsFrLpAddrDlciLen = _FmsFrLpAddrDlciLen_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 1, 1, 15),
    _FmsFrLpAddrDlciLen_Type()
)
fmsFrLpAddrDlciLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpAddrDlciLen.setStatus("mandatory")


class _FmsFrLpVcSigProtocol_Type(Integer32):
    """Custom type fmsFrLpVcSigProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("ansiT1617B", 4),
          ("ansiT1617D", 3),
          ("itutQ933", 6),
          ("itutQ933A", 5),
          ("lmi", 2),
          ("none", 1))
    )


_FmsFrLpVcSigProtocol_Type.__name__ = "Integer32"
_FmsFrLpVcSigProtocol_Object = MibTableColumn
fmsFrLpVcSigProtocol = _FmsFrLpVcSigProtocol_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 1, 1, 16),
    _FmsFrLpVcSigProtocol_Type()
)
fmsFrLpVcSigProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpVcSigProtocol.setStatus("mandatory")
_FmsFrLpIncomingTable_Object = MibTable
fmsFrLpIncomingTable = _FmsFrLpIncomingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 2)
)
if mibBuilder.loadTexts:
    fmsFrLpIncomingTable.setStatus("mandatory")
_FmsFrLpIncomingEntry_Object = MibTableRow
fmsFrLpIncomingEntry = _FmsFrLpIncomingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 2, 1)
)
fmsFrLpIncomingEntry.setIndexNames(
    (0, "PCE-MIB", "fmsFrLpInLogPortId"),
)
if mibBuilder.loadTexts:
    fmsFrLpIncomingEntry.setStatus("mandatory")


class _FmsFrLpInLogPortId_Type(Integer32):
    """Custom type fmsFrLpInLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FmsFrLpInLogPortId_Type.__name__ = "Integer32"
_FmsFrLpInLogPortId_Object = MibTableColumn
fmsFrLpInLogPortId = _FmsFrLpInLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 2, 1, 1),
    _FmsFrLpInLogPortId_Type()
)
fmsFrLpInLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpInLogPortId.setStatus("mandatory")
_FmsFrLpInOctets_Type = Counter32
_FmsFrLpInOctets_Object = MibTableColumn
fmsFrLpInOctets = _FmsFrLpInOctets_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 2, 1, 2),
    _FmsFrLpInOctets_Type()
)
fmsFrLpInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpInOctets.setStatus("mandatory")
_FmsFrLpInFrames_Type = Counter32
_FmsFrLpInFrames_Object = MibTableColumn
fmsFrLpInFrames = _FmsFrLpInFrames_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 2, 1, 3),
    _FmsFrLpInFrames_Type()
)
fmsFrLpInFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpInFrames.setStatus("mandatory")
_FmsFrLpInErrors_Type = Counter32
_FmsFrLpInErrors_Object = MibTableColumn
fmsFrLpInErrors = _FmsFrLpInErrors_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 2, 1, 4),
    _FmsFrLpInErrors_Type()
)
fmsFrLpInErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpInErrors.setStatus("mandatory")
_FmsFrLpInFrHeaderErrors_Type = Counter32
_FmsFrLpInFrHeaderErrors_Object = MibTableColumn
fmsFrLpInFrHeaderErrors = _FmsFrLpInFrHeaderErrors_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 2, 1, 5),
    _FmsFrLpInFrHeaderErrors_Type()
)
fmsFrLpInFrHeaderErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpInFrHeaderErrors.setStatus("mandatory")
_FmsFrLpInFecnFrames_Type = Counter32
_FmsFrLpInFecnFrames_Object = MibTableColumn
fmsFrLpInFecnFrames = _FmsFrLpInFecnFrames_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 2, 1, 10),
    _FmsFrLpInFecnFrames_Type()
)
fmsFrLpInFecnFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpInFecnFrames.setStatus("mandatory")
_FmsFrLpInBecnFrames_Type = Counter32
_FmsFrLpInBecnFrames_Object = MibTableColumn
fmsFrLpInBecnFrames = _FmsFrLpInBecnFrames_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 2, 1, 12),
    _FmsFrLpInBecnFrames_Type()
)
fmsFrLpInBecnFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpInBecnFrames.setStatus("mandatory")
_FmsFrLpInExcessFrames_Type = Counter32
_FmsFrLpInExcessFrames_Object = MibTableColumn
fmsFrLpInExcessFrames = _FmsFrLpInExcessFrames_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 2, 1, 15),
    _FmsFrLpInExcessFrames_Type()
)
fmsFrLpInExcessFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpInExcessFrames.setStatus("mandatory")
_FmsFrLpInDiscards_Type = Counter32
_FmsFrLpInDiscards_Object = MibTableColumn
fmsFrLpInDiscards = _FmsFrLpInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 2, 1, 16),
    _FmsFrLpInDiscards_Type()
)
fmsFrLpInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpInDiscards.setStatus("mandatory")
_FmsFrLpOutgoingTable_Object = MibTable
fmsFrLpOutgoingTable = _FmsFrLpOutgoingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 3)
)
if mibBuilder.loadTexts:
    fmsFrLpOutgoingTable.setStatus("mandatory")
_FmsFrLpOutgoingEntry_Object = MibTableRow
fmsFrLpOutgoingEntry = _FmsFrLpOutgoingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 3, 1)
)
fmsFrLpOutgoingEntry.setIndexNames(
    (0, "PCE-MIB", "fmsFrLpOutLogPortId"),
)
if mibBuilder.loadTexts:
    fmsFrLpOutgoingEntry.setStatus("mandatory")


class _FmsFrLpOutLogPortId_Type(Integer32):
    """Custom type fmsFrLpOutLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FmsFrLpOutLogPortId_Type.__name__ = "Integer32"
_FmsFrLpOutLogPortId_Object = MibTableColumn
fmsFrLpOutLogPortId = _FmsFrLpOutLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 3, 1, 1),
    _FmsFrLpOutLogPortId_Type()
)
fmsFrLpOutLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpOutLogPortId.setStatus("mandatory")
_FmsFrLpOutOctets_Type = Counter32
_FmsFrLpOutOctets_Object = MibTableColumn
fmsFrLpOutOctets = _FmsFrLpOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 3, 1, 2),
    _FmsFrLpOutOctets_Type()
)
fmsFrLpOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpOutOctets.setStatus("mandatory")
_FmsFrLpOutFrames_Type = Counter32
_FmsFrLpOutFrames_Object = MibTableColumn
fmsFrLpOutFrames = _FmsFrLpOutFrames_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 3, 1, 3),
    _FmsFrLpOutFrames_Type()
)
fmsFrLpOutFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpOutFrames.setStatus("mandatory")
_FmsFrLpOutFecnFrames_Type = Counter32
_FmsFrLpOutFecnFrames_Object = MibTableColumn
fmsFrLpOutFecnFrames = _FmsFrLpOutFecnFrames_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 3, 1, 10),
    _FmsFrLpOutFecnFrames_Type()
)
fmsFrLpOutFecnFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpOutFecnFrames.setStatus("mandatory")
_FmsFrLpOutLocalCongFecnFrames_Type = Counter32
_FmsFrLpOutLocalCongFecnFrames_Object = MibTableColumn
fmsFrLpOutLocalCongFecnFrames = _FmsFrLpOutLocalCongFecnFrames_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 3, 1, 11),
    _FmsFrLpOutLocalCongFecnFrames_Type()
)
fmsFrLpOutLocalCongFecnFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpOutLocalCongFecnFrames.setStatus("mandatory")
_FmsFrLpOutBecnFrames_Type = Counter32
_FmsFrLpOutBecnFrames_Object = MibTableColumn
fmsFrLpOutBecnFrames = _FmsFrLpOutBecnFrames_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 3, 1, 12),
    _FmsFrLpOutBecnFrames_Type()
)
fmsFrLpOutBecnFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpOutBecnFrames.setStatus("mandatory")
_FmsFrLpOutLocalCongBecnFrames_Type = Counter32
_FmsFrLpOutLocalCongBecnFrames_Object = MibTableColumn
fmsFrLpOutLocalCongBecnFrames = _FmsFrLpOutLocalCongBecnFrames_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 3, 1, 13),
    _FmsFrLpOutLocalCongBecnFrames_Type()
)
fmsFrLpOutLocalCongBecnFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpOutLocalCongBecnFrames.setStatus("mandatory")
_FmsFrLpOutLocalCongDiscards_Type = Counter32
_FmsFrLpOutLocalCongDiscards_Object = MibTableColumn
fmsFrLpOutLocalCongDiscards = _FmsFrLpOutLocalCongDiscards_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 3, 1, 15),
    _FmsFrLpOutLocalCongDiscards_Type()
)
fmsFrLpOutLocalCongDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpOutLocalCongDiscards.setStatus("mandatory")
_FmsFrLpLmiTable_Object = MibTable
fmsFrLpLmiTable = _FmsFrLpLmiTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4)
)
if mibBuilder.loadTexts:
    fmsFrLpLmiTable.setStatus("mandatory")
_FmsFrLpLmiEntry_Object = MibTableRow
fmsFrLpLmiEntry = _FmsFrLpLmiEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1)
)
fmsFrLpLmiEntry.setIndexNames(
    (0, "PCE-MIB", "fmsFrLpLmiLogPortId"),
)
if mibBuilder.loadTexts:
    fmsFrLpLmiEntry.setStatus("mandatory")


class _FmsFrLpLmiLogPortId_Type(Integer32):
    """Custom type fmsFrLpLmiLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_FmsFrLpLmiLogPortId_Type.__name__ = "Integer32"
_FmsFrLpLmiLogPortId_Object = MibTableColumn
fmsFrLpLmiLogPortId = _FmsFrLpLmiLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 1),
    _FmsFrLpLmiLogPortId_Type()
)
fmsFrLpLmiLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpLmiLogPortId.setStatus("mandatory")


class _FmsFrLpLmiProced_Type(Integer32):
    """Custom type fmsFrLpLmiProced based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bidirect", 2),
          ("u2nNet", 1),
          ("u2nUser", 3))
    )


_FmsFrLpLmiProced_Type.__name__ = "Integer32"
_FmsFrLpLmiProced_Object = MibTableColumn
fmsFrLpLmiProced = _FmsFrLpLmiProced_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 11),
    _FmsFrLpLmiProced_Type()
)
fmsFrLpLmiProced.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpLmiProced.setStatus("mandatory")


class _FmsFrLpLmiUserN391_Type(Integer32):
    """Custom type fmsFrLpLmiUserN391 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FmsFrLpLmiUserN391_Type.__name__ = "Integer32"
_FmsFrLpLmiUserN391_Object = MibTableColumn
fmsFrLpLmiUserN391 = _FmsFrLpLmiUserN391_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 12),
    _FmsFrLpLmiUserN391_Type()
)
fmsFrLpLmiUserN391.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpLmiUserN391.setStatus("mandatory")


class _FmsFrLpLmiUserN392_Type(Integer32):
    """Custom type fmsFrLpLmiUserN392 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_FmsFrLpLmiUserN392_Type.__name__ = "Integer32"
_FmsFrLpLmiUserN392_Object = MibTableColumn
fmsFrLpLmiUserN392 = _FmsFrLpLmiUserN392_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 13),
    _FmsFrLpLmiUserN392_Type()
)
fmsFrLpLmiUserN392.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpLmiUserN392.setStatus("mandatory")


class _FmsFrLpLmiUserN393_Type(Integer32):
    """Custom type fmsFrLpLmiUserN393 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_FmsFrLpLmiUserN393_Type.__name__ = "Integer32"
_FmsFrLpLmiUserN393_Object = MibTableColumn
fmsFrLpLmiUserN393 = _FmsFrLpLmiUserN393_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 14),
    _FmsFrLpLmiUserN393_Type()
)
fmsFrLpLmiUserN393.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpLmiUserN393.setStatus("mandatory")


class _FmsFrLpLmiUserT391_Type(Integer32):
    """Custom type fmsFrLpLmiUserT391 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 30),
    )


_FmsFrLpLmiUserT391_Type.__name__ = "Integer32"
_FmsFrLpLmiUserT391_Object = MibTableColumn
fmsFrLpLmiUserT391 = _FmsFrLpLmiUserT391_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 15),
    _FmsFrLpLmiUserT391_Type()
)
fmsFrLpLmiUserT391.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpLmiUserT391.setStatus("mandatory")


class _FmsFrLpLmiNetN392_Type(Integer32):
    """Custom type fmsFrLpLmiNetN392 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_FmsFrLpLmiNetN392_Type.__name__ = "Integer32"
_FmsFrLpLmiNetN392_Object = MibTableColumn
fmsFrLpLmiNetN392 = _FmsFrLpLmiNetN392_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 16),
    _FmsFrLpLmiNetN392_Type()
)
fmsFrLpLmiNetN392.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpLmiNetN392.setStatus("mandatory")


class _FmsFrLpLmiNetN393_Type(Integer32):
    """Custom type fmsFrLpLmiNetN393 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_FmsFrLpLmiNetN393_Type.__name__ = "Integer32"
_FmsFrLpLmiNetN393_Object = MibTableColumn
fmsFrLpLmiNetN393 = _FmsFrLpLmiNetN393_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 17),
    _FmsFrLpLmiNetN393_Type()
)
fmsFrLpLmiNetN393.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpLmiNetN393.setStatus("mandatory")


class _FmsFrLpLmiNetT392_Type(Integer32):
    """Custom type fmsFrLpLmiNetT392 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 30),
    )


_FmsFrLpLmiNetT392_Type.__name__ = "Integer32"
_FmsFrLpLmiNetT392_Object = MibTableColumn
fmsFrLpLmiNetT392 = _FmsFrLpLmiNetT392_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 18),
    _FmsFrLpLmiNetT392_Type()
)
fmsFrLpLmiNetT392.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpLmiNetT392.setStatus("mandatory")
_FmsFrLpLmiUserLinkRelErrors_Type = Counter32
_FmsFrLpLmiUserLinkRelErrors_Object = MibTableColumn
fmsFrLpLmiUserLinkRelErrors = _FmsFrLpLmiUserLinkRelErrors_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 21),
    _FmsFrLpLmiUserLinkRelErrors_Type()
)
fmsFrLpLmiUserLinkRelErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpLmiUserLinkRelErrors.setStatus("mandatory")
_FmsFrLpLmiUserProtErrors_Type = Counter32
_FmsFrLpLmiUserProtErrors_Object = MibTableColumn
fmsFrLpLmiUserProtErrors = _FmsFrLpLmiUserProtErrors_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 22),
    _FmsFrLpLmiUserProtErrors_Type()
)
fmsFrLpLmiUserProtErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpLmiUserProtErrors.setStatus("mandatory")
_FmsFrLpLmiUserChanInactive_Type = Counter32
_FmsFrLpLmiUserChanInactive_Object = MibTableColumn
fmsFrLpLmiUserChanInactive = _FmsFrLpLmiUserChanInactive_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 23),
    _FmsFrLpLmiUserChanInactive_Type()
)
fmsFrLpLmiUserChanInactive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpLmiUserChanInactive.setStatus("mandatory")
_FmsFrLpLmiNetLinkRelErrors_Type = Counter32
_FmsFrLpLmiNetLinkRelErrors_Object = MibTableColumn
fmsFrLpLmiNetLinkRelErrors = _FmsFrLpLmiNetLinkRelErrors_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 24),
    _FmsFrLpLmiNetLinkRelErrors_Type()
)
fmsFrLpLmiNetLinkRelErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpLmiNetLinkRelErrors.setStatus("mandatory")
_FmsFrLpLmiNetProtErrors_Type = Counter32
_FmsFrLpLmiNetProtErrors_Object = MibTableColumn
fmsFrLpLmiNetProtErrors = _FmsFrLpLmiNetProtErrors_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 25),
    _FmsFrLpLmiNetProtErrors_Type()
)
fmsFrLpLmiNetProtErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpLmiNetProtErrors.setStatus("mandatory")
_FmsFrLpLmiNetChanInactive_Type = Counter32
_FmsFrLpLmiNetChanInactive_Object = MibTableColumn
fmsFrLpLmiNetChanInactive = _FmsFrLpLmiNetChanInactive_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 26),
    _FmsFrLpLmiNetChanInactive_Type()
)
fmsFrLpLmiNetChanInactive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpLmiNetChanInactive.setStatus("mandatory")
_FmsFrLpSvcSignallingTable_Object = MibTable
fmsFrLpSvcSignallingTable = _FmsFrLpSvcSignallingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 5)
)
if mibBuilder.loadTexts:
    fmsFrLpSvcSignallingTable.setStatus("mandatory")
_FmsFrLpSvcSignallingEntry_Object = MibTableRow
fmsFrLpSvcSignallingEntry = _FmsFrLpSvcSignallingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 5, 1)
)
fmsFrLpSvcSignallingEntry.setIndexNames(
    (0, "PCE-MIB", "fmsFrLpSvcLogPortId"),
)
if mibBuilder.loadTexts:
    fmsFrLpSvcSignallingEntry.setStatus("mandatory")


class _FmsFrLpSvcLogPortId_Type(Integer32):
    """Custom type fmsFrLpSvcLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 254),
    )


_FmsFrLpSvcLogPortId_Type.__name__ = "Integer32"
_FmsFrLpSvcLogPortId_Object = MibTableColumn
fmsFrLpSvcLogPortId = _FmsFrLpSvcLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 5, 1, 1),
    _FmsFrLpSvcLogPortId_Type()
)
fmsFrLpSvcLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpSvcLogPortId.setStatus("mandatory")
_FmsFrLpSvcDlcInitialized_Type = Gauge32
_FmsFrLpSvcDlcInitialized_Object = MibTableColumn
fmsFrLpSvcDlcInitialized = _FmsFrLpSvcDlcInitialized_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 5, 1, 11),
    _FmsFrLpSvcDlcInitialized_Type()
)
fmsFrLpSvcDlcInitialized.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpSvcDlcInitialized.setStatus("mandatory")
_FmsFrLpSvcDlcUbr_Type = Gauge32
_FmsFrLpSvcDlcUbr_Object = MibTableColumn
fmsFrLpSvcDlcUbr = _FmsFrLpSvcDlcUbr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 5, 1, 12),
    _FmsFrLpSvcDlcUbr_Type()
)
fmsFrLpSvcDlcUbr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpSvcDlcUbr.setStatus("mandatory")
_FmsFrLpSvcDlcVbr_Type = Gauge32
_FmsFrLpSvcDlcVbr_Object = MibTableColumn
fmsFrLpSvcDlcVbr = _FmsFrLpSvcDlcVbr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 5, 1, 13),
    _FmsFrLpSvcDlcVbr_Type()
)
fmsFrLpSvcDlcVbr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpSvcDlcVbr.setStatus("mandatory")
_FmsFrLpSvcDlcVbrRt_Type = Gauge32
_FmsFrLpSvcDlcVbrRt_Object = MibTableColumn
fmsFrLpSvcDlcVbrRt = _FmsFrLpSvcDlcVbrRt_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 5, 1, 14),
    _FmsFrLpSvcDlcVbrRt_Type()
)
fmsFrLpSvcDlcVbrRt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpSvcDlcVbrRt.setStatus("mandatory")
_FmsFrLpSvcBookingVbrThroughput_Type = Gauge32
_FmsFrLpSvcBookingVbrThroughput_Object = MibTableColumn
fmsFrLpSvcBookingVbrThroughput = _FmsFrLpSvcBookingVbrThroughput_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 5, 1, 20),
    _FmsFrLpSvcBookingVbrThroughput_Type()
)
fmsFrLpSvcBookingVbrThroughput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpSvcBookingVbrThroughput.setStatus("mandatory")
_FmsFrLpSvcBookingVbrRtThroughput_Type = Gauge32
_FmsFrLpSvcBookingVbrRtThroughput_Object = MibTableColumn
fmsFrLpSvcBookingVbrRtThroughput = _FmsFrLpSvcBookingVbrRtThroughput_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 5, 1, 21),
    _FmsFrLpSvcBookingVbrRtThroughput_Type()
)
fmsFrLpSvcBookingVbrRtThroughput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpSvcBookingVbrRtThroughput.setStatus("mandatory")
_FmsFrLpSvcOverBookingThroughput_Type = Gauge32
_FmsFrLpSvcOverBookingThroughput_Object = MibTableColumn
fmsFrLpSvcOverBookingThroughput = _FmsFrLpSvcOverBookingThroughput_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 5, 1, 22),
    _FmsFrLpSvcOverBookingThroughput_Type()
)
fmsFrLpSvcOverBookingThroughput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpSvcOverBookingThroughput.setStatus("mandatory")
_FmsFrLpSvcBookingRate_Type = Gauge32
_FmsFrLpSvcBookingRate_Object = MibTableColumn
fmsFrLpSvcBookingRate = _FmsFrLpSvcBookingRate_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 5, 1, 23),
    _FmsFrLpSvcBookingRate_Type()
)
fmsFrLpSvcBookingRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLpSvcBookingRate.setStatus("mandatory")
_FmsFrDataLinkConnection_ObjectIdentity = ObjectIdentity
fmsFrDataLinkConnection = _FmsFrDataLinkConnection_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3)
)
_FmsFrDlcTable_Object = MibTable
fmsFrDlcTable = _FmsFrDlcTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 1)
)
if mibBuilder.loadTexts:
    fmsFrDlcTable.setStatus("mandatory")
_FmsFrDlcEntry_Object = MibTableRow
fmsFrDlcEntry = _FmsFrDlcEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 1, 1)
)
fmsFrDlcEntry.setIndexNames(
    (0, "PCE-MIB", "fmsFrDlcLogPortId"),
    (0, "PCE-MIB", "fmsFrDlcDlci"),
)
if mibBuilder.loadTexts:
    fmsFrDlcEntry.setStatus("mandatory")


class _FmsFrDlcLogPortId_Type(Integer32):
    """Custom type fmsFrDlcLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FmsFrDlcLogPortId_Type.__name__ = "Integer32"
_FmsFrDlcLogPortId_Object = MibTableColumn
fmsFrDlcLogPortId = _FmsFrDlcLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 1, 1, 1),
    _FmsFrDlcLogPortId_Type()
)
fmsFrDlcLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcLogPortId.setStatus("mandatory")


class _FmsFrDlcDlci_Type(Integer32):
    """Custom type fmsFrDlcDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1023),
    )


_FmsFrDlcDlci_Type.__name__ = "Integer32"
_FmsFrDlcDlci_Object = MibTableColumn
fmsFrDlcDlci = _FmsFrDlcDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 1, 1, 2),
    _FmsFrDlcDlci_Type()
)
fmsFrDlcDlci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcDlci.setStatus("mandatory")


class _FmsFrDlcState_Type(Integer32):
    """Custom type fmsFrDlcState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("inactive", 3),
          ("invalid", 1))
    )


_FmsFrDlcState_Type.__name__ = "Integer32"
_FmsFrDlcState_Object = MibTableColumn
fmsFrDlcState = _FmsFrDlcState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 1, 1, 5),
    _FmsFrDlcState_Type()
)
fmsFrDlcState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcState.setStatus("mandatory")


class _FmsFrDlcRcvdSigStatus_Type(Integer32):
    """Custom type fmsFrDlcRcvdSigStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("deleted", 1),
          ("inactive", 3),
          ("none", 4))
    )


_FmsFrDlcRcvdSigStatus_Type.__name__ = "Integer32"
_FmsFrDlcRcvdSigStatus_Object = MibTableColumn
fmsFrDlcRcvdSigStatus = _FmsFrDlcRcvdSigStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 1, 1, 7),
    _FmsFrDlcRcvdSigStatus_Type()
)
fmsFrDlcRcvdSigStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcRcvdSigStatus.setStatus("mandatory")


class _FmsFrDlcCos_Type(Integer32):
    """Custom type fmsFrDlcCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ubr", 1),
          ("vbr", 2),
          ("vbr-rt", 3))
    )


_FmsFrDlcCos_Type.__name__ = "Integer32"
_FmsFrDlcCos_Object = MibTableColumn
fmsFrDlcCos = _FmsFrDlcCos_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 1, 1, 10),
    _FmsFrDlcCos_Type()
)
fmsFrDlcCos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcCos.setStatus("mandatory")
_FmsFrDlcIncomingTable_Object = MibTable
fmsFrDlcIncomingTable = _FmsFrDlcIncomingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2)
)
if mibBuilder.loadTexts:
    fmsFrDlcIncomingTable.setStatus("mandatory")
_FmsFrDlcIncomingEntry_Object = MibTableRow
fmsFrDlcIncomingEntry = _FmsFrDlcIncomingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1)
)
fmsFrDlcIncomingEntry.setIndexNames(
    (0, "PCE-MIB", "fmsFrDlcInLogPortId"),
    (0, "PCE-MIB", "fmsFrDlcInDlci"),
)
if mibBuilder.loadTexts:
    fmsFrDlcIncomingEntry.setStatus("mandatory")


class _FmsFrDlcInLogPortId_Type(Integer32):
    """Custom type fmsFrDlcInLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FmsFrDlcInLogPortId_Type.__name__ = "Integer32"
_FmsFrDlcInLogPortId_Object = MibTableColumn
fmsFrDlcInLogPortId = _FmsFrDlcInLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1, 1),
    _FmsFrDlcInLogPortId_Type()
)
fmsFrDlcInLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcInLogPortId.setStatus("mandatory")


class _FmsFrDlcInDlci_Type(Integer32):
    """Custom type fmsFrDlcInDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1023),
    )


_FmsFrDlcInDlci_Type.__name__ = "Integer32"
_FmsFrDlcInDlci_Object = MibTableColumn
fmsFrDlcInDlci = _FmsFrDlcInDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1, 2),
    _FmsFrDlcInDlci_Type()
)
fmsFrDlcInDlci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcInDlci.setStatus("mandatory")
_FmsFrDlcInFrames_Type = Counter32
_FmsFrDlcInFrames_Object = MibTableColumn
fmsFrDlcInFrames = _FmsFrDlcInFrames_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1, 10),
    _FmsFrDlcInFrames_Type()
)
fmsFrDlcInFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcInFrames.setStatus("mandatory")
_FmsFrDlcInOctets_Type = Counter32
_FmsFrDlcInOctets_Object = MibTableColumn
fmsFrDlcInOctets = _FmsFrDlcInOctets_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1, 11),
    _FmsFrDlcInOctets_Type()
)
fmsFrDlcInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcInOctets.setStatus("mandatory")
_FmsFrDlcInDeFrames_Type = Counter32
_FmsFrDlcInDeFrames_Object = MibTableColumn
fmsFrDlcInDeFrames = _FmsFrDlcInDeFrames_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1, 12),
    _FmsFrDlcInDeFrames_Type()
)
fmsFrDlcInDeFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcInDeFrames.setStatus("mandatory")
_FmsFrDlcInFecnFrames_Type = Counter32
_FmsFrDlcInFecnFrames_Object = MibTableColumn
fmsFrDlcInFecnFrames = _FmsFrDlcInFecnFrames_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1, 13),
    _FmsFrDlcInFecnFrames_Type()
)
fmsFrDlcInFecnFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcInFecnFrames.setStatus("mandatory")
_FmsFrDlcInBecnFrames_Type = Counter32
_FmsFrDlcInBecnFrames_Object = MibTableColumn
fmsFrDlcInBecnFrames = _FmsFrDlcInBecnFrames_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1, 14),
    _FmsFrDlcInBecnFrames_Type()
)
fmsFrDlcInBecnFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcInBecnFrames.setStatus("mandatory")
_FmsFrDlcInExcessFrames_Type = Counter32
_FmsFrDlcInExcessFrames_Object = MibTableColumn
fmsFrDlcInExcessFrames = _FmsFrDlcInExcessFrames_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1, 15),
    _FmsFrDlcInExcessFrames_Type()
)
fmsFrDlcInExcessFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcInExcessFrames.setStatus("mandatory")
_FmsFrDlcInDiscards_Type = Counter32
_FmsFrDlcInDiscards_Object = MibTableColumn
fmsFrDlcInDiscards = _FmsFrDlcInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1, 16),
    _FmsFrDlcInDiscards_Type()
)
fmsFrDlcInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcInDiscards.setStatus("mandatory")
_FmsFrDlcInLostFrames_Type = Counter32
_FmsFrDlcInLostFrames_Object = MibTableColumn
fmsFrDlcInLostFrames = _FmsFrDlcInLostFrames_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1, 30),
    _FmsFrDlcInLostFrames_Type()
)
fmsFrDlcInLostFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcInLostFrames.setStatus("mandatory")
_FmsFrDlcInLostSegments_Type = Counter32
_FmsFrDlcInLostSegments_Object = MibTableColumn
fmsFrDlcInLostSegments = _FmsFrDlcInLostSegments_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1, 31),
    _FmsFrDlcInLostSegments_Type()
)
fmsFrDlcInLostSegments.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcInLostSegments.setStatus("mandatory")
_FmsFrDlcOutgoingTable_Object = MibTable
fmsFrDlcOutgoingTable = _FmsFrDlcOutgoingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 3)
)
if mibBuilder.loadTexts:
    fmsFrDlcOutgoingTable.setStatus("mandatory")
_FmsFrDlcOutgoingEntry_Object = MibTableRow
fmsFrDlcOutgoingEntry = _FmsFrDlcOutgoingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 3, 1)
)
fmsFrDlcOutgoingEntry.setIndexNames(
    (0, "PCE-MIB", "fmsFrDlcOutLogPortId"),
    (0, "PCE-MIB", "fmsFrDlcOutDlci"),
)
if mibBuilder.loadTexts:
    fmsFrDlcOutgoingEntry.setStatus("mandatory")


class _FmsFrDlcOutLogPortId_Type(Integer32):
    """Custom type fmsFrDlcOutLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FmsFrDlcOutLogPortId_Type.__name__ = "Integer32"
_FmsFrDlcOutLogPortId_Object = MibTableColumn
fmsFrDlcOutLogPortId = _FmsFrDlcOutLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 3, 1, 1),
    _FmsFrDlcOutLogPortId_Type()
)
fmsFrDlcOutLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcOutLogPortId.setStatus("mandatory")


class _FmsFrDlcOutDlci_Type(Integer32):
    """Custom type fmsFrDlcOutDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1023),
    )


_FmsFrDlcOutDlci_Type.__name__ = "Integer32"
_FmsFrDlcOutDlci_Object = MibTableColumn
fmsFrDlcOutDlci = _FmsFrDlcOutDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 3, 1, 2),
    _FmsFrDlcOutDlci_Type()
)
fmsFrDlcOutDlci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcOutDlci.setStatus("mandatory")
_FmsFrDlcOutFrames_Type = Counter32
_FmsFrDlcOutFrames_Object = MibTableColumn
fmsFrDlcOutFrames = _FmsFrDlcOutFrames_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 3, 1, 10),
    _FmsFrDlcOutFrames_Type()
)
fmsFrDlcOutFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcOutFrames.setStatus("mandatory")
_FmsFrDlcOutOctets_Type = Counter32
_FmsFrDlcOutOctets_Object = MibTableColumn
fmsFrDlcOutOctets = _FmsFrDlcOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 3, 1, 11),
    _FmsFrDlcOutOctets_Type()
)
fmsFrDlcOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcOutOctets.setStatus("mandatory")
_FmsFrDlcOutFecnFrames_Type = Counter32
_FmsFrDlcOutFecnFrames_Object = MibTableColumn
fmsFrDlcOutFecnFrames = _FmsFrDlcOutFecnFrames_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 3, 1, 13),
    _FmsFrDlcOutFecnFrames_Type()
)
fmsFrDlcOutFecnFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcOutFecnFrames.setStatus("mandatory")
_FmsFrDlcOutBecnFrames_Type = Counter32
_FmsFrDlcOutBecnFrames_Object = MibTableColumn
fmsFrDlcOutBecnFrames = _FmsFrDlcOutBecnFrames_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 3, 1, 14),
    _FmsFrDlcOutBecnFrames_Type()
)
fmsFrDlcOutBecnFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcOutBecnFrames.setStatus("mandatory")
_FmsFrDlcOutExcessFrames_Type = Counter32
_FmsFrDlcOutExcessFrames_Object = MibTableColumn
fmsFrDlcOutExcessFrames = _FmsFrDlcOutExcessFrames_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 3, 1, 15),
    _FmsFrDlcOutExcessFrames_Type()
)
fmsFrDlcOutExcessFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcOutExcessFrames.setStatus("mandatory")
_FmsFrDlcOutDiscards_Type = Counter32
_FmsFrDlcOutDiscards_Object = MibTableColumn
fmsFrDlcOutDiscards = _FmsFrDlcOutDiscards_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 3, 1, 16),
    _FmsFrDlcOutDiscards_Type()
)
fmsFrDlcOutDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrDlcOutDiscards.setStatus("mandatory")
_FmStatFrLineTable_Object = MibTable
fmStatFrLineTable = _FmStatFrLineTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 20)
)
if mibBuilder.loadTexts:
    fmStatFrLineTable.setStatus("mandatory")
_FmStatFrLineEntry_Object = MibTableRow
fmStatFrLineEntry = _FmStatFrLineEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 20, 1)
)
fmStatFrLineEntry.setIndexNames(
    (0, "PCE-MIB", "fmsFrLineId"),
)
if mibBuilder.loadTexts:
    fmStatFrLineEntry.setStatus("mandatory")


class _FmsFrLineId_Type(Integer32):
    """Custom type fmsFrLineId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FmsFrLineId_Type.__name__ = "Integer32"
_FmsFrLineId_Object = MibTableColumn
fmsFrLineId = _FmsFrLineId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 20, 1, 1),
    _FmsFrLineId_Type()
)
fmsFrLineId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLineId.setStatus("mandatory")


class _FmsFrLineStatus_Type(Integer32):
    """Custom type fmsFrLineStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("up", 2))
    )


_FmsFrLineStatus_Type.__name__ = "Integer32"
_FmsFrLineStatus_Object = MibTableColumn
fmsFrLineStatus = _FmsFrLineStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 20, 1, 2),
    _FmsFrLineStatus_Type()
)
fmsFrLineStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLineStatus.setStatus("mandatory")


class _FmsFrLineLmiStatus_Type(Integer32):
    """Custom type fmsFrLineLmiStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("off", 1),
          ("up", 3))
    )


_FmsFrLineLmiStatus_Type.__name__ = "Integer32"
_FmsFrLineLmiStatus_Object = MibTableColumn
fmsFrLineLmiStatus = _FmsFrLineLmiStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 20, 1, 3),
    _FmsFrLineLmiStatus_Type()
)
fmsFrLineLmiStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLineLmiStatus.setStatus("mandatory")
_FmsFrLineCircuitCount_Type = Gauge32
_FmsFrLineCircuitCount_Object = MibTableColumn
fmsFrLineCircuitCount = _FmsFrLineCircuitCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 20, 1, 4),
    _FmsFrLineCircuitCount_Type()
)
fmsFrLineCircuitCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLineCircuitCount.setStatus("mandatory")
_FmsFrLineActiveCircuitCount_Type = Gauge32
_FmsFrLineActiveCircuitCount_Object = MibTableColumn
fmsFrLineActiveCircuitCount = _FmsFrLineActiveCircuitCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 20, 1, 5),
    _FmsFrLineActiveCircuitCount_Type()
)
fmsFrLineActiveCircuitCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrLineActiveCircuitCount.setStatus("mandatory")
_FmStatFrCircuitTable_Object = MibTable
fmStatFrCircuitTable = _FmStatFrCircuitTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 21)
)
if mibBuilder.loadTexts:
    fmStatFrCircuitTable.setStatus("mandatory")
_FmStatFrCircuitEntry_Object = MibTableRow
fmStatFrCircuitEntry = _FmStatFrCircuitEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 21, 1)
)
fmStatFrCircuitEntry.setIndexNames(
    (0, "PCE-MIB", "fmsFrCircuitLineId"),
    (0, "PCE-MIB", "fmsFrCircuitDlci"),
)
if mibBuilder.loadTexts:
    fmStatFrCircuitEntry.setStatus("mandatory")


class _FmsFrCircuitLineId_Type(Integer32):
    """Custom type fmsFrCircuitLineId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FmsFrCircuitLineId_Type.__name__ = "Integer32"
_FmsFrCircuitLineId_Object = MibTableColumn
fmsFrCircuitLineId = _FmsFrCircuitLineId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 21, 1, 1),
    _FmsFrCircuitLineId_Type()
)
fmsFrCircuitLineId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrCircuitLineId.setStatus("mandatory")


class _FmsFrCircuitDlci_Type(Integer32):
    """Custom type fmsFrCircuitDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1023),
    )


_FmsFrCircuitDlci_Type.__name__ = "Integer32"
_FmsFrCircuitDlci_Object = MibTableColumn
fmsFrCircuitDlci = _FmsFrCircuitDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 21, 1, 2),
    _FmsFrCircuitDlci_Type()
)
fmsFrCircuitDlci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrCircuitDlci.setStatus("mandatory")


class _FmsFrCircuitStatus_Type(Integer32):
    """Custom type fmsFrCircuitStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("inactive", 2))
    )


_FmsFrCircuitStatus_Type.__name__ = "Integer32"
_FmsFrCircuitStatus_Object = MibTableColumn
fmsFrCircuitStatus = _FmsFrCircuitStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 21, 1, 3),
    _FmsFrCircuitStatus_Type()
)
fmsFrCircuitStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrCircuitStatus.setStatus("mandatory")


class _FmsFrCircuitAge_Type(Integer32):
    """Custom type fmsFrCircuitAge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("indeterminate", 3),
          ("new", 2),
          ("old", 1))
    )


_FmsFrCircuitAge_Type.__name__ = "Integer32"
_FmsFrCircuitAge_Object = MibTableColumn
fmsFrCircuitAge = _FmsFrCircuitAge_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 21, 1, 4),
    _FmsFrCircuitAge_Type()
)
fmsFrCircuitAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrCircuitAge.setStatus("mandatory")
_FmsFrCircuitOutOctetsCounter_Type = Counter32
_FmsFrCircuitOutOctetsCounter_Object = MibTableColumn
fmsFrCircuitOutOctetsCounter = _FmsFrCircuitOutOctetsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 21, 1, 5),
    _FmsFrCircuitOutOctetsCounter_Type()
)
fmsFrCircuitOutOctetsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrCircuitOutOctetsCounter.setStatus("mandatory")
_FmsFrCircuitInOctetsCounter_Type = Counter32
_FmsFrCircuitInOctetsCounter_Object = MibTableColumn
fmsFrCircuitInOctetsCounter = _FmsFrCircuitInOctetsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 21, 1, 6),
    _FmsFrCircuitInOctetsCounter_Type()
)
fmsFrCircuitInOctetsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrCircuitInOctetsCounter.setStatus("mandatory")
_FmsFrCommIdentification_ObjectIdentity = ObjectIdentity
fmsFrCommIdentification = _FmsFrCommIdentification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30)
)
_FmsFrCommStorageTable_Object = MibTable
fmsFrCommStorageTable = _FmsFrCommStorageTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1)
)
if mibBuilder.loadTexts:
    fmsFrCommStorageTable.setStatus("mandatory")
_FmsFrCommStorageEntry_Object = MibTableRow
fmsFrCommStorageEntry = _FmsFrCommStorageEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1)
)
fmsFrCommStorageEntry.setIndexNames(
    (0, "PCE-MIB", "fmsFrcStoragePhysIfId"),
    (0, "PCE-MIB", "fmsFrcStorageChannelId"),
    (0, "PCE-MIB", "fmsFrcStorageDlci"),
    (0, "PCE-MIB", "fmsFrcStorageSubDlci"),
)
if mibBuilder.loadTexts:
    fmsFrCommStorageEntry.setStatus("mandatory")


class _FmsFrcStoragePhysIfId_Type(Integer32):
    """Custom type fmsFrcStoragePhysIfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FmsFrcStoragePhysIfId_Type.__name__ = "Integer32"
_FmsFrcStoragePhysIfId_Object = MibTableColumn
fmsFrcStoragePhysIfId = _FmsFrcStoragePhysIfId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 1),
    _FmsFrcStoragePhysIfId_Type()
)
fmsFrcStoragePhysIfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrcStoragePhysIfId.setStatus("mandatory")


class _FmsFrcStorageChannelId_Type(Integer32):
    """Custom type fmsFrcStorageChannelId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_FmsFrcStorageChannelId_Type.__name__ = "Integer32"
_FmsFrcStorageChannelId_Object = MibTableColumn
fmsFrcStorageChannelId = _FmsFrcStorageChannelId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 2),
    _FmsFrcStorageChannelId_Type()
)
fmsFrcStorageChannelId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrcStorageChannelId.setStatus("mandatory")


class _FmsFrcStorageDlci_Type(Integer32):
    """Custom type fmsFrcStorageDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1023),
    )


_FmsFrcStorageDlci_Type.__name__ = "Integer32"
_FmsFrcStorageDlci_Object = MibTableColumn
fmsFrcStorageDlci = _FmsFrcStorageDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 3),
    _FmsFrcStorageDlci_Type()
)
fmsFrcStorageDlci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrcStorageDlci.setStatus("mandatory")


class _FmsFrcStorageSubDlci_Type(Integer32):
    """Custom type fmsFrcStorageSubDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1023),
    )


_FmsFrcStorageSubDlci_Type.__name__ = "Integer32"
_FmsFrcStorageSubDlci_Object = MibTableColumn
fmsFrcStorageSubDlci = _FmsFrcStorageSubDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 4),
    _FmsFrcStorageSubDlci_Type()
)
fmsFrcStorageSubDlci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrcStorageSubDlci.setStatus("mandatory")


class _FmsFrcStorageTypeOfDlci_Type(Integer32):
    """Custom type fmsFrcStorageTypeOfDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("pvc", 255),
          ("svc", 2),
          ("unknown", 1))
    )


_FmsFrcStorageTypeOfDlci_Type.__name__ = "Integer32"
_FmsFrcStorageTypeOfDlci_Object = MibTableColumn
fmsFrcStorageTypeOfDlci = _FmsFrcStorageTypeOfDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 5),
    _FmsFrcStorageTypeOfDlci_Type()
)
fmsFrcStorageTypeOfDlci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrcStorageTypeOfDlci.setStatus("mandatory")


class _FmsFrcStorageDirection_Type(OctetString):
    """Custom type fmsFrcStorageDirection based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FmsFrcStorageDirection_Type.__name__ = "OctetString"
_FmsFrcStorageDirection_Object = MibTableColumn
fmsFrcStorageDirection = _FmsFrcStorageDirection_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 6),
    _FmsFrcStorageDirection_Type()
)
fmsFrcStorageDirection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrcStorageDirection.setStatus("mandatory")


class _FmsFrcStorageTypeOfTransport_Type(Integer32):
    """Custom type fmsFrcStorageTypeOfTransport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(19,
              32,
              34,
              36,
              99,
              255)
        )
    )
    namedValues = NamedValues(
        *(("annexG", 32),
          ("frsna", 34),
          ("frt", 36),
          ("switch", 99),
          ("tunnel", 19),
          ("unknown", 255))
    )


_FmsFrcStorageTypeOfTransport_Type.__name__ = "Integer32"
_FmsFrcStorageTypeOfTransport_Object = MibTableColumn
fmsFrcStorageTypeOfTransport = _FmsFrcStorageTypeOfTransport_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 7),
    _FmsFrcStorageTypeOfTransport_Type()
)
fmsFrcStorageTypeOfTransport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrcStorageTypeOfTransport.setStatus("mandatory")


class _FmsFrcStoragePvcStatus_Type(Integer32):
    """Custom type fmsFrcStoragePvcStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("inactive", 2),
          ("unknown", 255))
    )


_FmsFrcStoragePvcStatus_Type.__name__ = "Integer32"
_FmsFrcStoragePvcStatus_Object = MibTableColumn
fmsFrcStoragePvcStatus = _FmsFrcStoragePvcStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 8),
    _FmsFrcStoragePvcStatus_Type()
)
fmsFrcStoragePvcStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrcStoragePvcStatus.setStatus("mandatory")


class _FmsFrcStorageDestAddr_Type(OctetString):
    """Custom type fmsFrcStorageDestAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FmsFrcStorageDestAddr_Type.__name__ = "OctetString"
_FmsFrcStorageDestAddr_Object = MibTableColumn
fmsFrcStorageDestAddr = _FmsFrcStorageDestAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 9),
    _FmsFrcStorageDestAddr_Type()
)
fmsFrcStorageDestAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrcStorageDestAddr.setStatus("mandatory")


class _FmsFrcStorageSrcAddr_Type(OctetString):
    """Custom type fmsFrcStorageSrcAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FmsFrcStorageSrcAddr_Type.__name__ = "OctetString"
_FmsFrcStorageSrcAddr_Object = MibTableColumn
fmsFrcStorageSrcAddr = _FmsFrcStorageSrcAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 10),
    _FmsFrcStorageSrcAddr_Type()
)
fmsFrcStorageSrcAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrcStorageSrcAddr.setStatus("mandatory")


class _FmsFrcStorageCos_Type(Integer32):
    """Custom type fmsFrcStorageCos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("ubr", 3),
          ("unknown", 255),
          ("vbr", 1),
          ("vbr-rt", 2))
    )


_FmsFrcStorageCos_Type.__name__ = "Integer32"
_FmsFrcStorageCos_Object = MibTableColumn
fmsFrcStorageCos = _FmsFrcStorageCos_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 11),
    _FmsFrcStorageCos_Type()
)
fmsFrcStorageCos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrcStorageCos.setStatus("mandatory")


class _FmsFrcStorageCir_Type(Integer32):
    """Custom type fmsFrcStorageCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FmsFrcStorageCir_Type.__name__ = "Integer32"
_FmsFrcStorageCir_Object = MibTableColumn
fmsFrcStorageCir = _FmsFrcStorageCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 12),
    _FmsFrcStorageCir_Type()
)
fmsFrcStorageCir.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrcStorageCir.setStatus("mandatory")


class _FmsFrcStorageMinCir_Type(Integer32):
    """Custom type fmsFrcStorageMinCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FmsFrcStorageMinCir_Type.__name__ = "Integer32"
_FmsFrcStorageMinCir_Object = MibTableColumn
fmsFrcStorageMinCir = _FmsFrcStorageMinCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 13),
    _FmsFrcStorageMinCir_Type()
)
fmsFrcStorageMinCir.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrcStorageMinCir.setStatus("mandatory")


class _FmsFrcStorageBc_Type(Integer32):
    """Custom type fmsFrcStorageBc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FmsFrcStorageBc_Type.__name__ = "Integer32"
_FmsFrcStorageBc_Object = MibTableColumn
fmsFrcStorageBc = _FmsFrcStorageBc_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 14),
    _FmsFrcStorageBc_Type()
)
fmsFrcStorageBc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrcStorageBc.setStatus("mandatory")


class _FmsFrcStorageBe_Type(Integer32):
    """Custom type fmsFrcStorageBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2048000),
    )


_FmsFrcStorageBe_Type.__name__ = "Integer32"
_FmsFrcStorageBe_Object = MibTableColumn
fmsFrcStorageBe = _FmsFrcStorageBe_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 15),
    _FmsFrcStorageBe_Type()
)
fmsFrcStorageBe.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsFrcStorageBe.setStatus("mandatory")
_FmsFrCommFilter_ObjectIdentity = ObjectIdentity
fmsFrCommFilter = _FmsFrCommFilter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 2)
)


class _FmsFrcFilterPhysIfId_Type(DisplayString):
    """Custom type fmsFrcFilterPhysIfId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_FmsFrcFilterPhysIfId_Type.__name__ = "DisplayString"
_FmsFrcFilterPhysIfId_Object = MibScalar
fmsFrcFilterPhysIfId = _FmsFrcFilterPhysIfId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 2, 1),
    _FmsFrcFilterPhysIfId_Type()
)
fmsFrcFilterPhysIfId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fmsFrcFilterPhysIfId.setStatus("mandatory")


class _FmsFrcFilterChannelId_Type(DisplayString):
    """Custom type fmsFrcFilterChannelId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_FmsFrcFilterChannelId_Type.__name__ = "DisplayString"
_FmsFrcFilterChannelId_Object = MibScalar
fmsFrcFilterChannelId = _FmsFrcFilterChannelId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 2, 2),
    _FmsFrcFilterChannelId_Type()
)
fmsFrcFilterChannelId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fmsFrcFilterChannelId.setStatus("mandatory")


class _FmsFrcFilterDlci_Type(DisplayString):
    """Custom type fmsFrcFilterDlci based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_FmsFrcFilterDlci_Type.__name__ = "DisplayString"
_FmsFrcFilterDlci_Object = MibScalar
fmsFrcFilterDlci = _FmsFrcFilterDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 2, 3),
    _FmsFrcFilterDlci_Type()
)
fmsFrcFilterDlci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fmsFrcFilterDlci.setStatus("mandatory")


class _FmsFrcFilterAction_Type(Integer32):
    """Custom type fmsFrcFilterAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("activateFilter", 2),
          ("setFilter", 1))
    )


_FmsFrcFilterAction_Type.__name__ = "Integer32"
_FmsFrcFilterAction_Object = MibScalar
fmsFrcFilterAction = _FmsFrcFilterAction_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 2, 4),
    _FmsFrcFilterAction_Type()
)
fmsFrcFilterAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fmsFrcFilterAction.setStatus("mandatory")
_FmStatPointToPointProtocol_ObjectIdentity = ObjectIdentity
fmStatPointToPointProtocol = _FmStatPointToPointProtocol_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71)
)
_FmStatPppPhysLineTable_Object = MibTable
fmStatPppPhysLineTable = _FmStatPppPhysLineTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 1)
)
if mibBuilder.loadTexts:
    fmStatPppPhysLineTable.setStatus("mandatory")
_FmStatPppPhysLineEntry_Object = MibTableRow
fmStatPppPhysLineEntry = _FmStatPppPhysLineEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 1, 1)
)
fmStatPppPhysLineEntry.setIndexNames(
    (0, "PCE-MIB", "fmsPppPhysLineId"),
)
if mibBuilder.loadTexts:
    fmStatPppPhysLineEntry.setStatus("mandatory")


class _FmsPppPhysLineId_Type(Integer32):
    """Custom type fmsPppPhysLineId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FmsPppPhysLineId_Type.__name__ = "Integer32"
_FmsPppPhysLineId_Object = MibTableColumn
fmsPppPhysLineId = _FmsPppPhysLineId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 1, 1, 1),
    _FmsPppPhysLineId_Type()
)
fmsPppPhysLineId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppPhysLineId.setStatus("mandatory")


class _FmsPppPhysLocalMru_Type(Integer32):
    """Custom type fmsPppPhysLocalMru based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 1600),
    )


_FmsPppPhysLocalMru_Type.__name__ = "Integer32"
_FmsPppPhysLocalMru_Object = MibTableColumn
fmsPppPhysLocalMru = _FmsPppPhysLocalMru_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 1, 1, 2),
    _FmsPppPhysLocalMru_Type()
)
fmsPppPhysLocalMru.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppPhysLocalMru.setStatus("mandatory")


class _FmsPppPhysRemoteMru_Type(Integer32):
    """Custom type fmsPppPhysRemoteMru based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 1600),
    )


_FmsPppPhysRemoteMru_Type.__name__ = "Integer32"
_FmsPppPhysRemoteMru_Object = MibTableColumn
fmsPppPhysRemoteMru = _FmsPppPhysRemoteMru_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 1, 1, 3),
    _FmsPppPhysRemoteMru_Type()
)
fmsPppPhysRemoteMru.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppPhysRemoteMru.setStatus("mandatory")


class _FmsPppPhysMagicNumber_Type(Integer32):
    """Custom type fmsPppPhysMagicNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notUsed", 2),
          ("used", 1))
    )


_FmsPppPhysMagicNumber_Type.__name__ = "Integer32"
_FmsPppPhysMagicNumber_Object = MibTableColumn
fmsPppPhysMagicNumber = _FmsPppPhysMagicNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 1, 1, 4),
    _FmsPppPhysMagicNumber_Type()
)
fmsPppPhysMagicNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppPhysMagicNumber.setStatus("mandatory")
_FmStatPppProtocolStatusTable_Object = MibTable
fmStatPppProtocolStatusTable = _FmStatPppProtocolStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2)
)
if mibBuilder.loadTexts:
    fmStatPppProtocolStatusTable.setStatus("mandatory")
_FmStatPppProtocolStatusEntry_Object = MibTableRow
fmStatPppProtocolStatusEntry = _FmStatPppProtocolStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1)
)
fmStatPppProtocolStatusEntry.setIndexNames(
    (0, "PCE-MIB", "fmsPppProtoLineId"),
)
if mibBuilder.loadTexts:
    fmStatPppProtocolStatusEntry.setStatus("mandatory")


class _FmsPppProtoLineId_Type(Integer32):
    """Custom type fmsPppProtoLineId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FmsPppProtoLineId_Type.__name__ = "Integer32"
_FmsPppProtoLineId_Object = MibTableColumn
fmsPppProtoLineId = _FmsPppProtoLineId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1, 1),
    _FmsPppProtoLineId_Type()
)
fmsPppProtoLineId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppProtoLineId.setStatus("mandatory")


class _FmsPppProtoLcpStatus_Type(Integer32):
    """Custom type fmsPppProtoLcpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("closed", 6),
          ("down", 5),
          ("freeze", 7),
          ("opening", 3),
          ("stop", 1),
          ("up", 4),
          ("wait", 2))
    )


_FmsPppProtoLcpStatus_Type.__name__ = "Integer32"
_FmsPppProtoLcpStatus_Object = MibTableColumn
fmsPppProtoLcpStatus = _FmsPppProtoLcpStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1, 2),
    _FmsPppProtoLcpStatus_Type()
)
fmsPppProtoLcpStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppProtoLcpStatus.setStatus("mandatory")


class _FmsPppProtoLcpDiag_Type(Integer32):
    """Custom type fmsPppProtoLcpDiag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("authenticationFailure", 6),
          ("ok", 1),
          ("protocol", 4),
          ("rejected", 5),
          ("timeOut", 2),
          ("underlyingLayerDown", 3))
    )


_FmsPppProtoLcpDiag_Type.__name__ = "Integer32"
_FmsPppProtoLcpDiag_Object = MibTableColumn
fmsPppProtoLcpDiag = _FmsPppProtoLcpDiag_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1, 3),
    _FmsPppProtoLcpDiag_Type()
)
fmsPppProtoLcpDiag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppProtoLcpDiag.setStatus("mandatory")


class _FmsPppProtoIpNcpStatus_Type(Integer32):
    """Custom type fmsPppProtoIpNcpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("closed", 6),
          ("down", 5),
          ("freeze", 7),
          ("opening", 3),
          ("stop", 1),
          ("up", 4),
          ("wait", 2))
    )


_FmsPppProtoIpNcpStatus_Type.__name__ = "Integer32"
_FmsPppProtoIpNcpStatus_Object = MibTableColumn
fmsPppProtoIpNcpStatus = _FmsPppProtoIpNcpStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1, 4),
    _FmsPppProtoIpNcpStatus_Type()
)
fmsPppProtoIpNcpStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppProtoIpNcpStatus.setStatus("mandatory")


class _FmsPppProtoIpNcpDiag_Type(Integer32):
    """Custom type fmsPppProtoIpNcpDiag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("protocol", 4),
          ("rejected", 5),
          ("timeOut", 2),
          ("underlyingLayerDown", 3))
    )


_FmsPppProtoIpNcpDiag_Type.__name__ = "Integer32"
_FmsPppProtoIpNcpDiag_Object = MibTableColumn
fmsPppProtoIpNcpDiag = _FmsPppProtoIpNcpDiag_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1, 5),
    _FmsPppProtoIpNcpDiag_Type()
)
fmsPppProtoIpNcpDiag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppProtoIpNcpDiag.setStatus("mandatory")


class _FmsPppProtoBrdgNcpStatus_Type(Integer32):
    """Custom type fmsPppProtoBrdgNcpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("closed", 6),
          ("down", 5),
          ("freeze", 7),
          ("opening", 3),
          ("stop", 1),
          ("up", 4),
          ("wait", 2))
    )


_FmsPppProtoBrdgNcpStatus_Type.__name__ = "Integer32"
_FmsPppProtoBrdgNcpStatus_Object = MibTableColumn
fmsPppProtoBrdgNcpStatus = _FmsPppProtoBrdgNcpStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1, 6),
    _FmsPppProtoBrdgNcpStatus_Type()
)
fmsPppProtoBrdgNcpStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppProtoBrdgNcpStatus.setStatus("mandatory")


class _FmsPppProtoBrdgNcpDiag_Type(Integer32):
    """Custom type fmsPppProtoBrdgNcpDiag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("protocol", 4),
          ("rejected", 5),
          ("timeOut", 2),
          ("underlyingLayerDown", 3))
    )


_FmsPppProtoBrdgNcpDiag_Type.__name__ = "Integer32"
_FmsPppProtoBrdgNcpDiag_Object = MibTableColumn
fmsPppProtoBrdgNcpDiag = _FmsPppProtoBrdgNcpDiag_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1, 7),
    _FmsPppProtoBrdgNcpDiag_Type()
)
fmsPppProtoBrdgNcpDiag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppProtoBrdgNcpDiag.setStatus("mandatory")


class _FmsPppProtoIpxNcpStatus_Type(Integer32):
    """Custom type fmsPppProtoIpxNcpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("closed", 6),
          ("down", 5),
          ("freeze", 7),
          ("opening", 3),
          ("stop", 1),
          ("up", 4),
          ("wait", 2))
    )


_FmsPppProtoIpxNcpStatus_Type.__name__ = "Integer32"
_FmsPppProtoIpxNcpStatus_Object = MibTableColumn
fmsPppProtoIpxNcpStatus = _FmsPppProtoIpxNcpStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1, 8),
    _FmsPppProtoIpxNcpStatus_Type()
)
fmsPppProtoIpxNcpStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppProtoIpxNcpStatus.setStatus("mandatory")


class _FmsPppProtoIpxNcpDiag_Type(Integer32):
    """Custom type fmsPppProtoIpxNcpDiag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("protocol", 4),
          ("rejected", 5),
          ("timeOut", 2),
          ("underlyingLayerDown", 3))
    )


_FmsPppProtoIpxNcpDiag_Type.__name__ = "Integer32"
_FmsPppProtoIpxNcpDiag_Object = MibTableColumn
fmsPppProtoIpxNcpDiag = _FmsPppProtoIpxNcpDiag_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1, 9),
    _FmsPppProtoIpxNcpDiag_Type()
)
fmsPppProtoIpxNcpDiag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppProtoIpxNcpDiag.setStatus("mandatory")


class _FmsPppProtoClnpNcpStatus_Type(Integer32):
    """Custom type fmsPppProtoClnpNcpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("closed", 6),
          ("down", 5),
          ("freeze", 7),
          ("opening", 3),
          ("stop", 1),
          ("up", 4),
          ("wait", 2))
    )


_FmsPppProtoClnpNcpStatus_Type.__name__ = "Integer32"
_FmsPppProtoClnpNcpStatus_Object = MibTableColumn
fmsPppProtoClnpNcpStatus = _FmsPppProtoClnpNcpStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1, 10),
    _FmsPppProtoClnpNcpStatus_Type()
)
fmsPppProtoClnpNcpStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppProtoClnpNcpStatus.setStatus("mandatory")


class _FmsPppProtoClnpNcpDiag_Type(Integer32):
    """Custom type fmsPppProtoClnpNcpDiag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("ok", 1),
          ("protocol", 4),
          ("rejected", 5),
          ("timeOut", 2),
          ("underlyingLayerDown", 3))
    )


_FmsPppProtoClnpNcpDiag_Type.__name__ = "Integer32"
_FmsPppProtoClnpNcpDiag_Object = MibTableColumn
fmsPppProtoClnpNcpDiag = _FmsPppProtoClnpNcpDiag_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1, 11),
    _FmsPppProtoClnpNcpDiag_Type()
)
fmsPppProtoClnpNcpDiag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppProtoClnpNcpDiag.setStatus("mandatory")
_FmStatPppAuthenticationTable_Object = MibTable
fmStatPppAuthenticationTable = _FmStatPppAuthenticationTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 10)
)
if mibBuilder.loadTexts:
    fmStatPppAuthenticationTable.setStatus("mandatory")
_FmStatPppAuthenticationEntry_Object = MibTableRow
fmStatPppAuthenticationEntry = _FmStatPppAuthenticationEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 10, 1)
)
fmStatPppAuthenticationEntry.setIndexNames(
    (0, "PCE-MIB", "fmsPppAuthLineId"),
)
if mibBuilder.loadTexts:
    fmStatPppAuthenticationEntry.setStatus("mandatory")


class _FmsPppAuthLineId_Type(Integer32):
    """Custom type fmsPppAuthLineId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FmsPppAuthLineId_Type.__name__ = "Integer32"
_FmsPppAuthLineId_Object = MibTableColumn
fmsPppAuthLineId = _FmsPppAuthLineId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 10, 1, 1),
    _FmsPppAuthLineId_Type()
)
fmsPppAuthLineId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppAuthLineId.setStatus("mandatory")


class _FmsPppAuthMasterAuthentication_Type(Integer32):
    """Custom type fmsPppAuthMasterAuthentication based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("chap", 3),
          ("none", 1),
          ("pap", 2))
    )


_FmsPppAuthMasterAuthentication_Type.__name__ = "Integer32"
_FmsPppAuthMasterAuthentication_Object = MibTableColumn
fmsPppAuthMasterAuthentication = _FmsPppAuthMasterAuthentication_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 10, 1, 10),
    _FmsPppAuthMasterAuthentication_Type()
)
fmsPppAuthMasterAuthentication.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppAuthMasterAuthentication.setStatus("mandatory")
_FmsPppAuthMasterSuccessCounter_Type = Counter32
_FmsPppAuthMasterSuccessCounter_Object = MibTableColumn
fmsPppAuthMasterSuccessCounter = _FmsPppAuthMasterSuccessCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 10, 1, 11),
    _FmsPppAuthMasterSuccessCounter_Type()
)
fmsPppAuthMasterSuccessCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppAuthMasterSuccessCounter.setStatus("mandatory")
_FmsPppAuthMasterFailureCounter_Type = Counter32
_FmsPppAuthMasterFailureCounter_Object = MibTableColumn
fmsPppAuthMasterFailureCounter = _FmsPppAuthMasterFailureCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 10, 1, 12),
    _FmsPppAuthMasterFailureCounter_Type()
)
fmsPppAuthMasterFailureCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppAuthMasterFailureCounter.setStatus("mandatory")


class _FmsPppAuthSlaveAuthentication_Type(Integer32):
    """Custom type fmsPppAuthSlaveAuthentication based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("chap", 3),
          ("none", 1),
          ("pap", 2))
    )


_FmsPppAuthSlaveAuthentication_Type.__name__ = "Integer32"
_FmsPppAuthSlaveAuthentication_Object = MibTableColumn
fmsPppAuthSlaveAuthentication = _FmsPppAuthSlaveAuthentication_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 10, 1, 20),
    _FmsPppAuthSlaveAuthentication_Type()
)
fmsPppAuthSlaveAuthentication.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppAuthSlaveAuthentication.setStatus("mandatory")
_FmsPppAuthSlaveSuccessCounter_Type = Counter32
_FmsPppAuthSlaveSuccessCounter_Object = MibTableColumn
fmsPppAuthSlaveSuccessCounter = _FmsPppAuthSlaveSuccessCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 10, 1, 21),
    _FmsPppAuthSlaveSuccessCounter_Type()
)
fmsPppAuthSlaveSuccessCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppAuthSlaveSuccessCounter.setStatus("mandatory")
_FmsPppAuthSlaveFailureCounter_Type = Counter32
_FmsPppAuthSlaveFailureCounter_Object = MibTableColumn
fmsPppAuthSlaveFailureCounter = _FmsPppAuthSlaveFailureCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 10, 1, 22),
    _FmsPppAuthSlaveFailureCounter_Type()
)
fmsPppAuthSlaveFailureCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppAuthSlaveFailureCounter.setStatus("mandatory")
_FmStatPppIpAddrAssignmentTable_Object = MibTable
fmStatPppIpAddrAssignmentTable = _FmStatPppIpAddrAssignmentTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 11)
)
if mibBuilder.loadTexts:
    fmStatPppIpAddrAssignmentTable.setStatus("mandatory")
_FmStatPppIpAddrAssignmentEntry_Object = MibTableRow
fmStatPppIpAddrAssignmentEntry = _FmStatPppIpAddrAssignmentEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 11, 1)
)
fmStatPppIpAddrAssignmentEntry.setIndexNames(
    (0, "PCE-MIB", "fmsPppIpAddrLineId"),
)
if mibBuilder.loadTexts:
    fmStatPppIpAddrAssignmentEntry.setStatus("mandatory")


class _FmsPppIpAddrLineId_Type(Integer32):
    """Custom type fmsPppIpAddrLineId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FmsPppIpAddrLineId_Type.__name__ = "Integer32"
_FmsPppIpAddrLineId_Object = MibTableColumn
fmsPppIpAddrLineId = _FmsPppIpAddrLineId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 11, 1, 1),
    _FmsPppIpAddrLineId_Type()
)
fmsPppIpAddrLineId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppIpAddrLineId.setStatus("mandatory")
_FmsPppIpAddrReceived_Type = IpAddress
_FmsPppIpAddrReceived_Object = MibTableColumn
fmsPppIpAddrReceived = _FmsPppIpAddrReceived_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 11, 1, 10),
    _FmsPppIpAddrReceived_Type()
)
fmsPppIpAddrReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppIpAddrReceived.setStatus("mandatory")
_FmsPppIpAddrSent_Type = IpAddress
_FmsPppIpAddrSent_Object = MibTableColumn
fmsPppIpAddrSent = _FmsPppIpAddrSent_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 11, 1, 11),
    _FmsPppIpAddrSent_Type()
)
fmsPppIpAddrSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsPppIpAddrSent.setStatus("mandatory")
_FmStatE1_ObjectIdentity = ObjectIdentity
fmStatE1 = _FmStatE1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80)
)
_FmStatE1Ds1ChannelNumber_ObjectIdentity = ObjectIdentity
fmStatE1Ds1ChannelNumber = _FmStatE1Ds1ChannelNumber_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 1)
)


class _FmsE1Ds1ChIfNumber_Type(Integer32):
    """Custom type fmsE1Ds1ChIfNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 60),
    )


_FmsE1Ds1ChIfNumber_Type.__name__ = "Integer32"
_FmsE1Ds1ChIfNumber_Object = MibScalar
fmsE1Ds1ChIfNumber = _FmsE1Ds1ChIfNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 1, 1),
    _FmsE1Ds1ChIfNumber_Type()
)
fmsE1Ds1ChIfNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfNumber.setStatus("mandatory")
_FmStatE1Ds1ChannelTable_Object = MibTable
fmStatE1Ds1ChannelTable = _FmStatE1Ds1ChannelTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2)
)
if mibBuilder.loadTexts:
    fmStatE1Ds1ChannelTable.setStatus("mandatory")
_FmStatE1Ds1ChannelEntry_Object = MibTableRow
fmStatE1Ds1ChannelEntry = _FmStatE1Ds1ChannelEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1)
)
fmStatE1Ds1ChannelEntry.setIndexNames(
    (0, "PCE-MIB", "fmsE1Ds1ChIfPhysId"),
    (0, "PCE-MIB", "fmsE1Ds1ChIfChannelId"),
)
if mibBuilder.loadTexts:
    fmStatE1Ds1ChannelEntry.setStatus("mandatory")


class _FmsE1Ds1ChIfPhysId_Type(Integer32):
    """Custom type fmsE1Ds1ChIfPhysId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FmsE1Ds1ChIfPhysId_Type.__name__ = "Integer32"
_FmsE1Ds1ChIfPhysId_Object = MibTableColumn
fmsE1Ds1ChIfPhysId = _FmsE1Ds1ChIfPhysId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 1),
    _FmsE1Ds1ChIfPhysId_Type()
)
fmsE1Ds1ChIfPhysId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfPhysId.setStatus("mandatory")


class _FmsE1Ds1ChIfChannelId_Type(Integer32):
    """Custom type fmsE1Ds1ChIfChannelId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(42, 131),
    )


_FmsE1Ds1ChIfChannelId_Type.__name__ = "Integer32"
_FmsE1Ds1ChIfChannelId_Object = MibTableColumn
fmsE1Ds1ChIfChannelId = _FmsE1Ds1ChIfChannelId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 2),
    _FmsE1Ds1ChIfChannelId_Type()
)
fmsE1Ds1ChIfChannelId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfChannelId.setStatus("mandatory")


class _FmsE1Ds1ChIfType_Type(Integer32):
    """Custom type fmsE1Ds1ChIfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              23,
              32,
              100)
        )
    )
    namedValues = NamedValues(
        *(("frame-relay", 32),
          ("hdlc-t", 100),
          ("other", 1),
          ("ppp", 23),
          ("rfc877-x25", 5))
    )


_FmsE1Ds1ChIfType_Type.__name__ = "Integer32"
_FmsE1Ds1ChIfType_Object = MibTableColumn
fmsE1Ds1ChIfType = _FmsE1Ds1ChIfType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 3),
    _FmsE1Ds1ChIfType_Type()
)
fmsE1Ds1ChIfType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfType.setStatus("mandatory")


class _FmsE1Ds1ChIfDescr_Type(DisplayString):
    """Custom type fmsE1Ds1ChIfDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_FmsE1Ds1ChIfDescr_Type.__name__ = "DisplayString"
_FmsE1Ds1ChIfDescr_Object = MibTableColumn
fmsE1Ds1ChIfDescr = _FmsE1Ds1ChIfDescr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 4),
    _FmsE1Ds1ChIfDescr_Type()
)
fmsE1Ds1ChIfDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfDescr.setStatus("mandatory")


class _FmsE1Ds1ChIfMtu_Type(Integer32):
    """Custom type fmsE1Ds1ChIfMtu based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_FmsE1Ds1ChIfMtu_Type.__name__ = "Integer32"
_FmsE1Ds1ChIfMtu_Object = MibTableColumn
fmsE1Ds1ChIfMtu = _FmsE1Ds1ChIfMtu_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 5),
    _FmsE1Ds1ChIfMtu_Type()
)
fmsE1Ds1ChIfMtu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfMtu.setStatus("mandatory")


class _FmsE1Ds1ChIfSpeed_Type(Integer32):
    """Custom type fmsE1Ds1ChIfSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_FmsE1Ds1ChIfSpeed_Type.__name__ = "Integer32"
_FmsE1Ds1ChIfSpeed_Object = MibTableColumn
fmsE1Ds1ChIfSpeed = _FmsE1Ds1ChIfSpeed_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 6),
    _FmsE1Ds1ChIfSpeed_Type()
)
fmsE1Ds1ChIfSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfSpeed.setStatus("mandatory")


class _FmsE1Ds1ChIfPhysAddress_Type(OctetString):
    """Custom type fmsE1Ds1ChIfPhysAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_FmsE1Ds1ChIfPhysAddress_Type.__name__ = "OctetString"
_FmsE1Ds1ChIfPhysAddress_Object = MibTableColumn
fmsE1Ds1ChIfPhysAddress = _FmsE1Ds1ChIfPhysAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 7),
    _FmsE1Ds1ChIfPhysAddress_Type()
)
fmsE1Ds1ChIfPhysAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfPhysAddress.setStatus("mandatory")


class _FmsE1Ds1ChIfAdminStatus_Type(Integer32):
    """Custom type fmsE1Ds1ChIfAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_FmsE1Ds1ChIfAdminStatus_Type.__name__ = "Integer32"
_FmsE1Ds1ChIfAdminStatus_Object = MibTableColumn
fmsE1Ds1ChIfAdminStatus = _FmsE1Ds1ChIfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 8),
    _FmsE1Ds1ChIfAdminStatus_Type()
)
fmsE1Ds1ChIfAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfAdminStatus.setStatus("mandatory")


class _FmsE1Ds1ChIfOperStatus_Type(Integer32):
    """Custom type fmsE1Ds1ChIfOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_FmsE1Ds1ChIfOperStatus_Type.__name__ = "Integer32"
_FmsE1Ds1ChIfOperStatus_Object = MibTableColumn
fmsE1Ds1ChIfOperStatus = _FmsE1Ds1ChIfOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 9),
    _FmsE1Ds1ChIfOperStatus_Type()
)
fmsE1Ds1ChIfOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfOperStatus.setStatus("mandatory")
_FmsE1Ds1ChIfLastChange_Type = TimeTicks
_FmsE1Ds1ChIfLastChange_Object = MibTableColumn
fmsE1Ds1ChIfLastChange = _FmsE1Ds1ChIfLastChange_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 10),
    _FmsE1Ds1ChIfLastChange_Type()
)
fmsE1Ds1ChIfLastChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfLastChange.setStatus("mandatory")
_FmsE1Ds1ChIfInOctets_Type = Counter32
_FmsE1Ds1ChIfInOctets_Object = MibTableColumn
fmsE1Ds1ChIfInOctets = _FmsE1Ds1ChIfInOctets_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 11),
    _FmsE1Ds1ChIfInOctets_Type()
)
fmsE1Ds1ChIfInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfInOctets.setStatus("mandatory")
_FmsE1Ds1ChIfInUcastPkts_Type = Counter32
_FmsE1Ds1ChIfInUcastPkts_Object = MibTableColumn
fmsE1Ds1ChIfInUcastPkts = _FmsE1Ds1ChIfInUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 12),
    _FmsE1Ds1ChIfInUcastPkts_Type()
)
fmsE1Ds1ChIfInUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfInUcastPkts.setStatus("mandatory")
_FmsE1Ds1ChIfInNUcastPkts_Type = Counter32
_FmsE1Ds1ChIfInNUcastPkts_Object = MibTableColumn
fmsE1Ds1ChIfInNUcastPkts = _FmsE1Ds1ChIfInNUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 13),
    _FmsE1Ds1ChIfInNUcastPkts_Type()
)
fmsE1Ds1ChIfInNUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfInNUcastPkts.setStatus("mandatory")
_FmsE1Ds1ChIfInDiscards_Type = Counter32
_FmsE1Ds1ChIfInDiscards_Object = MibTableColumn
fmsE1Ds1ChIfInDiscards = _FmsE1Ds1ChIfInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 14),
    _FmsE1Ds1ChIfInDiscards_Type()
)
fmsE1Ds1ChIfInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfInDiscards.setStatus("mandatory")
_FmsE1Ds1ChIfInErrors_Type = Counter32
_FmsE1Ds1ChIfInErrors_Object = MibTableColumn
fmsE1Ds1ChIfInErrors = _FmsE1Ds1ChIfInErrors_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 15),
    _FmsE1Ds1ChIfInErrors_Type()
)
fmsE1Ds1ChIfInErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfInErrors.setStatus("mandatory")
_FmsE1Ds1ChIfInUnknownProtos_Type = Counter32
_FmsE1Ds1ChIfInUnknownProtos_Object = MibTableColumn
fmsE1Ds1ChIfInUnknownProtos = _FmsE1Ds1ChIfInUnknownProtos_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 16),
    _FmsE1Ds1ChIfInUnknownProtos_Type()
)
fmsE1Ds1ChIfInUnknownProtos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfInUnknownProtos.setStatus("mandatory")
_FmsE1Ds1ChIfOutOctets_Type = Counter32
_FmsE1Ds1ChIfOutOctets_Object = MibTableColumn
fmsE1Ds1ChIfOutOctets = _FmsE1Ds1ChIfOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 17),
    _FmsE1Ds1ChIfOutOctets_Type()
)
fmsE1Ds1ChIfOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfOutOctets.setStatus("mandatory")
_FmsE1Ds1ChIfOutUcastPkts_Type = Counter32
_FmsE1Ds1ChIfOutUcastPkts_Object = MibTableColumn
fmsE1Ds1ChIfOutUcastPkts = _FmsE1Ds1ChIfOutUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 18),
    _FmsE1Ds1ChIfOutUcastPkts_Type()
)
fmsE1Ds1ChIfOutUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfOutUcastPkts.setStatus("mandatory")
_FmsE1Ds1ChIfOutNUcastPkts_Type = Counter32
_FmsE1Ds1ChIfOutNUcastPkts_Object = MibTableColumn
fmsE1Ds1ChIfOutNUcastPkts = _FmsE1Ds1ChIfOutNUcastPkts_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 19),
    _FmsE1Ds1ChIfOutNUcastPkts_Type()
)
fmsE1Ds1ChIfOutNUcastPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfOutNUcastPkts.setStatus("mandatory")
_FmsE1Ds1ChIfOutDiscards_Type = Counter32
_FmsE1Ds1ChIfOutDiscards_Object = MibTableColumn
fmsE1Ds1ChIfOutDiscards = _FmsE1Ds1ChIfOutDiscards_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 20),
    _FmsE1Ds1ChIfOutDiscards_Type()
)
fmsE1Ds1ChIfOutDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfOutDiscards.setStatus("mandatory")
_FmsE1Ds1ChIfOutErrors_Type = Counter32
_FmsE1Ds1ChIfOutErrors_Object = MibTableColumn
fmsE1Ds1ChIfOutErrors = _FmsE1Ds1ChIfOutErrors_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 21),
    _FmsE1Ds1ChIfOutErrors_Type()
)
fmsE1Ds1ChIfOutErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfOutErrors.setStatus("mandatory")
_FmsE1Ds1ChIfOutQLen_Type = Gauge32
_FmsE1Ds1ChIfOutQLen_Object = MibTableColumn
fmsE1Ds1ChIfOutQLen = _FmsE1Ds1ChIfOutQLen_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 22),
    _FmsE1Ds1ChIfOutQLen_Type()
)
fmsE1Ds1ChIfOutQLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfOutQLen.setStatus("mandatory")


class _FmsE1Ds1ChIfSpecific_Type(Integer32):
    """Custom type fmsE1Ds1ChIfSpecific based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_FmsE1Ds1ChIfSpecific_Type.__name__ = "Integer32"
_FmsE1Ds1ChIfSpecific_Object = MibTableColumn
fmsE1Ds1ChIfSpecific = _FmsE1Ds1ChIfSpecific_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 23),
    _FmsE1Ds1ChIfSpecific_Type()
)
fmsE1Ds1ChIfSpecific.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsE1Ds1ChIfSpecific.setStatus("mandatory")
_FmStatS2_ObjectIdentity = ObjectIdentity
fmStatS2 = _FmStatS2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90)
)
_FmStatS2BChannelTable_Object = MibTable
fmStatS2BChannelTable = _FmStatS2BChannelTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1)
)
if mibBuilder.loadTexts:
    fmStatS2BChannelTable.setStatus("mandatory")
_FmStatS2BChannelEntry_Object = MibTableRow
fmStatS2BChannelEntry = _FmStatS2BChannelEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1)
)
fmStatS2BChannelEntry.setIndexNames(
    (0, "PCE-MIB", "fmsS2BChPhysIfId"),
    (0, "PCE-MIB", "fmsS2BChChannelId"),
)
if mibBuilder.loadTexts:
    fmStatS2BChannelEntry.setStatus("mandatory")


class _FmsS2BChPhysIfId_Type(Integer32):
    """Custom type fmsS2BChPhysIfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FmsS2BChPhysIfId_Type.__name__ = "Integer32"
_FmsS2BChPhysIfId_Object = MibTableColumn
fmsS2BChPhysIfId = _FmsS2BChPhysIfId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1, 1),
    _FmsS2BChPhysIfId_Type()
)
fmsS2BChPhysIfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsS2BChPhysIfId.setStatus("mandatory")


class _FmsS2BChChannelId_Type(Integer32):
    """Custom type fmsS2BChChannelId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30),
    )


_FmsS2BChChannelId_Type.__name__ = "Integer32"
_FmsS2BChChannelId_Object = MibTableColumn
fmsS2BChChannelId = _FmsS2BChChannelId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1, 2),
    _FmsS2BChChannelId_Type()
)
fmsS2BChChannelId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsS2BChChannelId.setStatus("mandatory")


class _FmsS2BChProto_Type(Integer32):
    """Custom type fmsS2BChProto based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              23,
              32)
        )
    )
    namedValues = NamedValues(
        *(("frame-relay", 32),
          ("other", 1),
          ("ppp", 23),
          ("rfc877-x25", 5))
    )


_FmsS2BChProto_Type.__name__ = "Integer32"
_FmsS2BChProto_Object = MibTableColumn
fmsS2BChProto = _FmsS2BChProto_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1, 3),
    _FmsS2BChProto_Type()
)
fmsS2BChProto.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsS2BChProto.setStatus("mandatory")


class _FmsS2BChIfSpeed_Type(Integer32):
    """Custom type fmsS2BChIfSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_FmsS2BChIfSpeed_Type.__name__ = "Integer32"
_FmsS2BChIfSpeed_Object = MibTableColumn
fmsS2BChIfSpeed = _FmsS2BChIfSpeed_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1, 4),
    _FmsS2BChIfSpeed_Type()
)
fmsS2BChIfSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsS2BChIfSpeed.setStatus("mandatory")


class _FmsS2BChAdminStatus_Type(Integer32):
    """Custom type fmsS2BChAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_FmsS2BChAdminStatus_Type.__name__ = "Integer32"
_FmsS2BChAdminStatus_Object = MibTableColumn
fmsS2BChAdminStatus = _FmsS2BChAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1, 5),
    _FmsS2BChAdminStatus_Type()
)
fmsS2BChAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fmsS2BChAdminStatus.setStatus("mandatory")


class _FmsS2BChOperStatus_Type(Integer32):
    """Custom type fmsS2BChOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_FmsS2BChOperStatus_Type.__name__ = "Integer32"
_FmsS2BChOperStatus_Object = MibTableColumn
fmsS2BChOperStatus = _FmsS2BChOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1, 6),
    _FmsS2BChOperStatus_Type()
)
fmsS2BChOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsS2BChOperStatus.setStatus("mandatory")
_FmsS2BChIfLastChange_Type = TimeTicks
_FmsS2BChIfLastChange_Object = MibTableColumn
fmsS2BChIfLastChange = _FmsS2BChIfLastChange_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1, 7),
    _FmsS2BChIfLastChange_Type()
)
fmsS2BChIfLastChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsS2BChIfLastChange.setStatus("mandatory")
_FmsS2BChIfInOctets_Type = Counter32
_FmsS2BChIfInOctets_Object = MibTableColumn
fmsS2BChIfInOctets = _FmsS2BChIfInOctets_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1, 8),
    _FmsS2BChIfInOctets_Type()
)
fmsS2BChIfInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsS2BChIfInOctets.setStatus("mandatory")
_FmsS2BChIfOutOctets_Type = Counter32
_FmsS2BChIfOutOctets_Object = MibTableColumn
fmsS2BChIfOutOctets = _FmsS2BChIfOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1, 9),
    _FmsS2BChIfOutOctets_Type()
)
fmsS2BChIfOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsS2BChIfOutOctets.setStatus("mandatory")


class _FmsS2BChIfCalledAddress_Type(OctetString):
    """Custom type fmsS2BChIfCalledAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(15, 15),
    )


_FmsS2BChIfCalledAddress_Type.__name__ = "OctetString"
_FmsS2BChIfCalledAddress_Object = MibTableColumn
fmsS2BChIfCalledAddress = _FmsS2BChIfCalledAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1, 10),
    _FmsS2BChIfCalledAddress_Type()
)
fmsS2BChIfCalledAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsS2BChIfCalledAddress.setStatus("mandatory")


class _FmsS2BChIfCallingAddress_Type(OctetString):
    """Custom type fmsS2BChIfCallingAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(15, 15),
    )


_FmsS2BChIfCallingAddress_Type.__name__ = "OctetString"
_FmsS2BChIfCallingAddress_Object = MibTableColumn
fmsS2BChIfCallingAddress = _FmsS2BChIfCallingAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1, 11),
    _FmsS2BChIfCallingAddress_Type()
)
fmsS2BChIfCallingAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsS2BChIfCallingAddress.setStatus("mandatory")
_FmStatS0_ObjectIdentity = ObjectIdentity
fmStatS0 = _FmStatS0_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91)
)
_FmStatS0BChannelTable_Object = MibTable
fmStatS0BChannelTable = _FmStatS0BChannelTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1)
)
if mibBuilder.loadTexts:
    fmStatS0BChannelTable.setStatus("mandatory")
_FmStatS0BChannelEntry_Object = MibTableRow
fmStatS0BChannelEntry = _FmStatS0BChannelEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1)
)
fmStatS0BChannelEntry.setIndexNames(
    (0, "PCE-MIB", "fmsS0BChPhysIfId"),
    (0, "PCE-MIB", "fmsS0BChChannelId"),
)
if mibBuilder.loadTexts:
    fmStatS0BChannelEntry.setStatus("mandatory")


class _FmsS0BChPhysIfId_Type(Integer32):
    """Custom type fmsS0BChPhysIfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 6),
    )


_FmsS0BChPhysIfId_Type.__name__ = "Integer32"
_FmsS0BChPhysIfId_Object = MibTableColumn
fmsS0BChPhysIfId = _FmsS0BChPhysIfId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1, 1),
    _FmsS0BChPhysIfId_Type()
)
fmsS0BChPhysIfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsS0BChPhysIfId.setStatus("mandatory")


class _FmsS0BChChannelId_Type(Integer32):
    """Custom type fmsS0BChChannelId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 9),
    )


_FmsS0BChChannelId_Type.__name__ = "Integer32"
_FmsS0BChChannelId_Object = MibTableColumn
fmsS0BChChannelId = _FmsS0BChChannelId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1, 2),
    _FmsS0BChChannelId_Type()
)
fmsS0BChChannelId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsS0BChChannelId.setStatus("mandatory")


class _FmsS0BChProto_Type(Integer32):
    """Custom type fmsS0BChProto based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              23,
              32)
        )
    )
    namedValues = NamedValues(
        *(("frame-relay", 32),
          ("other", 1),
          ("ppp", 23),
          ("rfc877-x25", 5))
    )


_FmsS0BChProto_Type.__name__ = "Integer32"
_FmsS0BChProto_Object = MibTableColumn
fmsS0BChProto = _FmsS0BChProto_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1, 3),
    _FmsS0BChProto_Type()
)
fmsS0BChProto.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsS0BChProto.setStatus("mandatory")


class _FmsS0BChIfSpeed_Type(Integer32):
    """Custom type fmsS0BChIfSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_FmsS0BChIfSpeed_Type.__name__ = "Integer32"
_FmsS0BChIfSpeed_Object = MibTableColumn
fmsS0BChIfSpeed = _FmsS0BChIfSpeed_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1, 4),
    _FmsS0BChIfSpeed_Type()
)
fmsS0BChIfSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsS0BChIfSpeed.setStatus("mandatory")


class _FmsS0BChAdminStatus_Type(Integer32):
    """Custom type fmsS0BChAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_FmsS0BChAdminStatus_Type.__name__ = "Integer32"
_FmsS0BChAdminStatus_Object = MibTableColumn
fmsS0BChAdminStatus = _FmsS0BChAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1, 5),
    _FmsS0BChAdminStatus_Type()
)
fmsS0BChAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fmsS0BChAdminStatus.setStatus("mandatory")


class _FmsS0BChOperStatus_Type(Integer32):
    """Custom type fmsS0BChOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_FmsS0BChOperStatus_Type.__name__ = "Integer32"
_FmsS0BChOperStatus_Object = MibTableColumn
fmsS0BChOperStatus = _FmsS0BChOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1, 6),
    _FmsS0BChOperStatus_Type()
)
fmsS0BChOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsS0BChOperStatus.setStatus("mandatory")
_FmsS0BChIfLastChange_Type = TimeTicks
_FmsS0BChIfLastChange_Object = MibTableColumn
fmsS0BChIfLastChange = _FmsS0BChIfLastChange_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1, 7),
    _FmsS0BChIfLastChange_Type()
)
fmsS0BChIfLastChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsS0BChIfLastChange.setStatus("mandatory")
_FmsS0BChIfInOctets_Type = Counter32
_FmsS0BChIfInOctets_Object = MibTableColumn
fmsS0BChIfInOctets = _FmsS0BChIfInOctets_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1, 8),
    _FmsS0BChIfInOctets_Type()
)
fmsS0BChIfInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsS0BChIfInOctets.setStatus("mandatory")
_FmsS0BChIfOutOctets_Type = Counter32
_FmsS0BChIfOutOctets_Object = MibTableColumn
fmsS0BChIfOutOctets = _FmsS0BChIfOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1, 9),
    _FmsS0BChIfOutOctets_Type()
)
fmsS0BChIfOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsS0BChIfOutOctets.setStatus("mandatory")


class _FmsS0BChIfCalledAddress_Type(OctetString):
    """Custom type fmsS0BChIfCalledAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(15, 15),
    )


_FmsS0BChIfCalledAddress_Type.__name__ = "OctetString"
_FmsS0BChIfCalledAddress_Object = MibTableColumn
fmsS0BChIfCalledAddress = _FmsS0BChIfCalledAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1, 10),
    _FmsS0BChIfCalledAddress_Type()
)
fmsS0BChIfCalledAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsS0BChIfCalledAddress.setStatus("mandatory")


class _FmsS0BChIfCallingAddress_Type(OctetString):
    """Custom type fmsS0BChIfCallingAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(15, 15),
    )


_FmsS0BChIfCallingAddress_Type.__name__ = "OctetString"
_FmsS0BChIfCallingAddress_Object = MibTableColumn
fmsS0BChIfCallingAddress = _FmsS0BChIfCallingAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1, 11),
    _FmsS0BChIfCallingAddress_Type()
)
fmsS0BChIfCallingAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsS0BChIfCallingAddress.setStatus("mandatory")
_FmOsi_ObjectIdentity = ObjectIdentity
fmOsi = _FmOsi_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15)
)
_FmOsiCLNP_ObjectIdentity = ObjectIdentity
fmOsiCLNP = _FmOsiCLNP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 1)
)
_FmOsiCLNPSystem_ObjectIdentity = ObjectIdentity
fmOsiCLNPSystem = _FmOsiCLNPSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 1, 1)
)


class _FmOsiForwarding_Type(Integer32):
    """Custom type fmOsiForwarding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_FmOsiForwarding_Type.__name__ = "Integer32"
_FmOsiForwarding_Object = MibScalar
fmOsiForwarding = _FmOsiForwarding_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 1, 1, 20),
    _FmOsiForwarding_Type()
)
fmOsiForwarding.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiForwarding.setStatus("mandatory")
_FmOsiCLNPSysOutPDUs_Type = Counter32
_FmOsiCLNPSysOutPDUs_Object = MibScalar
fmOsiCLNPSysOutPDUs = _FmOsiCLNPSysOutPDUs_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 1, 1, 30),
    _FmOsiCLNPSysOutPDUs_Type()
)
fmOsiCLNPSysOutPDUs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiCLNPSysOutPDUs.setStatus("mandatory")
_FmOsiCLNPSysInPDUs_Type = Counter32
_FmOsiCLNPSysInPDUs_Object = MibScalar
fmOsiCLNPSysInPDUs = _FmOsiCLNPSysInPDUs_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 1, 1, 35),
    _FmOsiCLNPSysInPDUs_Type()
)
fmOsiCLNPSysInPDUs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiCLNPSysInPDUs.setStatus("mandatory")
_FmOsiCLNPSysErrMemFails_Type = Counter32
_FmOsiCLNPSysErrMemFails_Object = MibScalar
fmOsiCLNPSysErrMemFails = _FmOsiCLNPSysErrMemFails_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 1, 1, 40),
    _FmOsiCLNPSysErrMemFails_Type()
)
fmOsiCLNPSysErrMemFails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiCLNPSysErrMemFails.setStatus("mandatory")
_FmOsiCLNPCircuitTable_Object = MibTable
fmOsiCLNPCircuitTable = _FmOsiCLNPCircuitTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 1, 5)
)
if mibBuilder.loadTexts:
    fmOsiCLNPCircuitTable.setStatus("mandatory")
_FmOsiCLNPCircuitEntry_Object = MibTableRow
fmOsiCLNPCircuitEntry = _FmOsiCLNPCircuitEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 1, 5, 1)
)
fmOsiCLNPCircuitEntry.setIndexNames(
    (0, "PCE-MIB", "fmOsiCLNPCircIndex"),
)
if mibBuilder.loadTexts:
    fmOsiCLNPCircuitEntry.setStatus("mandatory")


class _FmOsiCLNPCircIndex_Type(Integer32):
    """Custom type fmOsiCLNPCircIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_FmOsiCLNPCircIndex_Type.__name__ = "Integer32"
_FmOsiCLNPCircIndex_Object = MibTableColumn
fmOsiCLNPCircIndex = _FmOsiCLNPCircIndex_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 1, 5, 1, 1),
    _FmOsiCLNPCircIndex_Type()
)
fmOsiCLNPCircIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiCLNPCircIndex.setStatus("mandatory")
_FmOsiCLNPCircOutPDUs_Type = Counter32
_FmOsiCLNPCircOutPDUs_Object = MibTableColumn
fmOsiCLNPCircOutPDUs = _FmOsiCLNPCircOutPDUs_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 1, 5, 1, 35),
    _FmOsiCLNPCircOutPDUs_Type()
)
fmOsiCLNPCircOutPDUs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiCLNPCircOutPDUs.setStatus("mandatory")
_FmOsiCLNPCircInPDUs_Type = Counter32
_FmOsiCLNPCircInPDUs_Object = MibTableColumn
fmOsiCLNPCircInPDUs = _FmOsiCLNPCircInPDUs_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 1, 5, 1, 40),
    _FmOsiCLNPCircInPDUs_Type()
)
fmOsiCLNPCircInPDUs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiCLNPCircInPDUs.setStatus("mandatory")
_FmOsiESIS_ObjectIdentity = ObjectIdentity
fmOsiESIS = _FmOsiESIS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 5)
)
_FmOsiESISSystem_ObjectIdentity = ObjectIdentity
fmOsiESISSystem = _FmOsiESISSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 5, 1)
)
_FmOsiESISSysOutPDUs_Type = Counter32
_FmOsiESISSysOutPDUs_Object = MibScalar
fmOsiESISSysOutPDUs = _FmOsiESISSysOutPDUs_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 5, 1, 30),
    _FmOsiESISSysOutPDUs_Type()
)
fmOsiESISSysOutPDUs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiESISSysOutPDUs.setStatus("mandatory")
_FmOsiESISSysInPDUs_Type = Counter32
_FmOsiESISSysInPDUs_Object = MibScalar
fmOsiESISSysInPDUs = _FmOsiESISSysInPDUs_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 5, 1, 35),
    _FmOsiESISSysInPDUs_Type()
)
fmOsiESISSysInPDUs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiESISSysInPDUs.setStatus("mandatory")
_FmOsiESISCircuitTable_Object = MibTable
fmOsiESISCircuitTable = _FmOsiESISCircuitTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 5, 5)
)
if mibBuilder.loadTexts:
    fmOsiESISCircuitTable.setStatus("mandatory")
_FmOsiESISCircuitEntry_Object = MibTableRow
fmOsiESISCircuitEntry = _FmOsiESISCircuitEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 5, 5, 1)
)
fmOsiESISCircuitEntry.setIndexNames(
    (0, "PCE-MIB", "fmOsiESISCircIndex"),
)
if mibBuilder.loadTexts:
    fmOsiESISCircuitEntry.setStatus("mandatory")


class _FmOsiESISCircIndex_Type(Integer32):
    """Custom type fmOsiESISCircIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_FmOsiESISCircIndex_Type.__name__ = "Integer32"
_FmOsiESISCircIndex_Object = MibTableColumn
fmOsiESISCircIndex = _FmOsiESISCircIndex_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 5, 5, 1, 1),
    _FmOsiESISCircIndex_Type()
)
fmOsiESISCircIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiESISCircIndex.setStatus("mandatory")
_FmOsiESISCircOutPDUs_Type = Counter32
_FmOsiESISCircOutPDUs_Object = MibTableColumn
fmOsiESISCircOutPDUs = _FmOsiESISCircOutPDUs_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 5, 5, 1, 35),
    _FmOsiESISCircOutPDUs_Type()
)
fmOsiESISCircOutPDUs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiESISCircOutPDUs.setStatus("mandatory")
_FmOsiESISCircInPDUs_Type = Counter32
_FmOsiESISCircInPDUs_Object = MibTableColumn
fmOsiESISCircInPDUs = _FmOsiESISCircInPDUs_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 5, 5, 1, 40),
    _FmOsiESISCircInPDUs_Type()
)
fmOsiESISCircInPDUs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiESISCircInPDUs.setStatus("mandatory")
_FmOsiISIS_ObjectIdentity = ObjectIdentity
fmOsiISIS = _FmOsiISIS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10)
)
_FmOsiISISSystem_ObjectIdentity = ObjectIdentity
fmOsiISISSystem = _FmOsiISISSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1)
)
_FmOsiISISSysOutPdu_Type = Counter32
_FmOsiISISSysOutPdu_Object = MibScalar
fmOsiISISSysOutPdu = _FmOsiISISSysOutPdu_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 30),
    _FmOsiISISSysOutPdu_Type()
)
fmOsiISISSysOutPdu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISSysOutPdu.setStatus("mandatory")
_FmOsiISISSysInPdu_Type = Counter32
_FmOsiISISSysInPdu_Object = MibScalar
fmOsiISISSysInPdu = _FmOsiISISSysInPdu_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 33),
    _FmOsiISISSysInPdu_Type()
)
fmOsiISISSysInPdu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISSysInPdu.setStatus("mandatory")


class _FmOsiISISSysL1State_Type(Integer32):
    """Custom type fmOsiISISSysL1State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2),
          ("waiting", 3))
    )


_FmOsiISISSysL1State_Type.__name__ = "Integer32"
_FmOsiISISSysL1State_Object = MibScalar
fmOsiISISSysL1State = _FmOsiISISSysL1State_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 35),
    _FmOsiISISSysL1State_Type()
)
fmOsiISISSysL1State.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISSysL1State.setStatus("mandatory")
_FmOsiISISSysCorrLSP_Type = Counter32
_FmOsiISISSysCorrLSP_Object = MibScalar
fmOsiISISSysCorrLSP = _FmOsiISISSysCorrLSP_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 37),
    _FmOsiISISSysCorrLSP_Type()
)
fmOsiISISSysCorrLSP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISSysCorrLSP.setStatus("mandatory")
_FmOsiISISSysL1DbaseOloads_Type = Counter32
_FmOsiISISSysL1DbaseOloads_Object = MibScalar
fmOsiISISSysL1DbaseOloads = _FmOsiISISSysL1DbaseOloads_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 40),
    _FmOsiISISSysL1DbaseOloads_Type()
)
fmOsiISISSysL1DbaseOloads.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISSysL1DbaseOloads.setStatus("mandatory")
_FmOsiISISSysttmpToExMaxSaqNums_Type = Counter32
_FmOsiISISSysttmpToExMaxSaqNums_Object = MibScalar
fmOsiISISSysttmpToExMaxSaqNums = _FmOsiISISSysttmpToExMaxSaqNums_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 42),
    _FmOsiISISSysttmpToExMaxSaqNums_Type()
)
fmOsiISISSysttmpToExMaxSaqNums.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISSysttmpToExMaxSaqNums.setStatus("mandatory")
_FmOsiISISSysSeqNumSkips_Type = Counter32
_FmOsiISISSysSeqNumSkips_Object = MibScalar
fmOsiISISSysSeqNumSkips = _FmOsiISISSysSeqNumSkips_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 44),
    _FmOsiISISSysSeqNumSkips_Type()
)
fmOsiISISSysSeqNumSkips.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISSysSeqNumSkips.setStatus("mandatory")
_FmOsiISISSysOwnLSPPurges_Type = Counter32
_FmOsiISISSysOwnLSPPurges_Object = MibScalar
fmOsiISISSysOwnLSPPurges = _FmOsiISISSysOwnLSPPurges_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 46),
    _FmOsiISISSysOwnLSPPurges_Type()
)
fmOsiISISSysOwnLSPPurges.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISSysOwnLSPPurges.setStatus("mandatory")
_FmOsiISISSysISFieldLenMismatches_Type = Counter32
_FmOsiISISSysISFieldLenMismatches_Object = MibScalar
fmOsiISISSysISFieldLenMismatches = _FmOsiISISSysISFieldLenMismatches_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 48),
    _FmOsiISISSysISFieldLenMismatches_Type()
)
fmOsiISISSysISFieldLenMismatches.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISSysISFieldLenMismatches.setStatus("mandatory")
_FmOsiISISSysMaxAreaAddrMismatches_Type = Counter32
_FmOsiISISSysMaxAreaAddrMismatches_Object = MibScalar
fmOsiISISSysMaxAreaAddrMismatches = _FmOsiISISSysMaxAreaAddrMismatches_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 50),
    _FmOsiISISSysMaxAreaAddrMismatches_Type()
)
fmOsiISISSysMaxAreaAddrMismatches.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISSysMaxAreaAddrMismatches.setStatus("mandatory")


class _FmOsiISISSysL2State_Type(Integer32):
    """Custom type fmOsiISISSysL2State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2),
          ("waiting", 3))
    )


_FmOsiISISSysL2State_Type.__name__ = "Integer32"
_FmOsiISISSysL2State_Object = MibScalar
fmOsiISISSysL2State = _FmOsiISISSysL2State_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 52),
    _FmOsiISISSysL2State_Type()
)
fmOsiISISSysL2State.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISSysL2State.setStatus("mandatory")
_FmOsiISISSysLSPL2DbaseOloads_Type = Counter32
_FmOsiISISSysLSPL2DbaseOloads_Object = MibScalar
fmOsiISISSysLSPL2DbaseOloads = _FmOsiISISSysLSPL2DbaseOloads_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 54),
    _FmOsiISISSysLSPL2DbaseOloads_Type()
)
fmOsiISISSysLSPL2DbaseOloads.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISSysLSPL2DbaseOloads.setStatus("mandatory")
_FmOsiISISSysAuthFails_Type = Counter32
_FmOsiISISSysAuthFails_Object = MibScalar
fmOsiISISSysAuthFails = _FmOsiISISSysAuthFails_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 56),
    _FmOsiISISSysAuthFails_Type()
)
fmOsiISISSysAuthFails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISSysAuthFails.setStatus("mandatory")
_FmOsiISISLogAdjcencyStateChanges_Type = Counter32
_FmOsiISISLogAdjcencyStateChanges_Object = MibScalar
fmOsiISISLogAdjcencyStateChanges = _FmOsiISISLogAdjcencyStateChanges_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 58),
    _FmOsiISISLogAdjcencyStateChanges_Type()
)
fmOsiISISLogAdjcencyStateChanges.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fmOsiISISLogAdjcencyStateChanges.setStatus("mandatory")
_FmOsiISISCircuitTable_Object = MibTable
fmOsiISISCircuitTable = _FmOsiISISCircuitTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5)
)
if mibBuilder.loadTexts:
    fmOsiISISCircuitTable.setStatus("mandatory")
_FmOsiISISCircuitEntry_Object = MibTableRow
fmOsiISISCircuitEntry = _FmOsiISISCircuitEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1)
)
fmOsiISISCircuitEntry.setIndexNames(
    (0, "PCE-MIB", "fmOsiISISCircIndex"),
)
if mibBuilder.loadTexts:
    fmOsiISISCircuitEntry.setStatus("mandatory")


class _FmOsiISISCircIndex_Type(Integer32):
    """Custom type fmOsiISISCircIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_FmOsiISISCircIndex_Type.__name__ = "Integer32"
_FmOsiISISCircIndex_Object = MibTableColumn
fmOsiISISCircIndex = _FmOsiISISCircIndex_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 1),
    _FmOsiISISCircIndex_Type()
)
fmOsiISISCircIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISCircIndex.setStatus("mandatory")
_FmOsiISISCircOutPdu_Type = Counter32
_FmOsiISISCircOutPdu_Object = MibTableColumn
fmOsiISISCircOutPdu = _FmOsiISISCircOutPdu_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 30),
    _FmOsiISISCircOutPdu_Type()
)
fmOsiISISCircOutPdu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISCircOutPdu.setStatus("mandatory")
_FmOsiISISCircInPdu_Type = Counter32
_FmOsiISISCircInPdu_Object = MibTableColumn
fmOsiISISCircInPdu = _FmOsiISISCircInPdu_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 35),
    _FmOsiISISCircInPdu_Type()
)
fmOsiISISCircInPdu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISCircInPdu.setStatus("mandatory")
_FmOsiISISCircAdjChanges_Type = Counter32
_FmOsiISISCircAdjChanges_Object = MibTableColumn
fmOsiISISCircAdjChanges = _FmOsiISISCircAdjChanges_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 40),
    _FmOsiISISCircAdjChanges_Type()
)
fmOsiISISCircAdjChanges.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISCircAdjChanges.setStatus("mandatory")
_FmOsiISISCircInitFails_Type = Counter32
_FmOsiISISCircInitFails_Object = MibTableColumn
fmOsiISISCircInitFails = _FmOsiISISCircInitFails_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 42),
    _FmOsiISISCircInitFails_Type()
)
fmOsiISISCircInitFails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISCircInitFails.setStatus("mandatory")
_FmOsiISISCircRejAdjs_Type = Counter32
_FmOsiISISCircRejAdjs_Object = MibTableColumn
fmOsiISISCircRejAdjs = _FmOsiISISCircRejAdjs_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 44),
    _FmOsiISISCircRejAdjs_Type()
)
fmOsiISISCircRejAdjs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISCircRejAdjs.setStatus("mandatory")
_FmOsiISISCircOutCtrlPdu_Type = Counter32
_FmOsiISISCircOutCtrlPdu_Object = MibTableColumn
fmOsiISISCircOutCtrlPdu = _FmOsiISISCircOutCtrlPdu_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 46),
    _FmOsiISISCircOutCtrlPdu_Type()
)
fmOsiISISCircOutCtrlPdu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISCircOutCtrlPdu.setStatus("mandatory")
_FmOsiISISCircInCrtlPdu_Type = Counter32
_FmOsiISISCircInCrtlPdu_Object = MibTableColumn
fmOsiISISCircInCrtlPdu = _FmOsiISISCircInCrtlPdu_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 48),
    _FmOsiISISCircInCrtlPdu_Type()
)
fmOsiISISCircInCrtlPdu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISCircInCrtlPdu.setStatus("mandatory")
_FmOsiISISCircIDFieldLenMismatches_Type = Counter32
_FmOsiISISCircIDFieldLenMismatches_Object = MibTableColumn
fmOsiISISCircIDFieldLenMismatches = _FmOsiISISCircIDFieldLenMismatches_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 50),
    _FmOsiISISCircIDFieldLenMismatches_Type()
)
fmOsiISISCircIDFieldLenMismatches.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISCircIDFieldLenMismatches.setStatus("mandatory")
_FmOsiISISCircMaxAreaAddrMismatches_Type = Counter32
_FmOsiISISCircMaxAreaAddrMismatches_Object = MibTableColumn
fmOsiISISCircMaxAreaAddrMismatches = _FmOsiISISCircMaxAreaAddrMismatches_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 52),
    _FmOsiISISCircMaxAreaAddrMismatches_Type()
)
fmOsiISISCircMaxAreaAddrMismatches.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISCircMaxAreaAddrMismatches.setStatus("mandatory")


class _FmOsiISISCircL1DesIS_Type(DisplayString):
    """Custom type fmOsiISISCircL1DesIS based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 12),
    )


_FmOsiISISCircL1DesIS_Type.__name__ = "DisplayString"
_FmOsiISISCircL1DesIS_Object = MibTableColumn
fmOsiISISCircL1DesIS = _FmOsiISISCircL1DesIS_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 54),
    _FmOsiISISCircL1DesIS_Type()
)
fmOsiISISCircL1DesIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISCircL1DesIS.setStatus("mandatory")
_FmOsiISISCircLANL1DesISChanges_Type = Counter32
_FmOsiISISCircLANL1DesISChanges_Object = MibTableColumn
fmOsiISISCircLANL1DesISChanges = _FmOsiISISCircLANL1DesISChanges_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 56),
    _FmOsiISISCircLANL1DesISChanges_Type()
)
fmOsiISISCircLANL1DesISChanges.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISCircLANL1DesISChanges.setStatus("mandatory")


class _FmOsiISISCircL2DesIS_Type(DisplayString):
    """Custom type fmOsiISISCircL2DesIS based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 12),
    )


_FmOsiISISCircL2DesIS_Type.__name__ = "DisplayString"
_FmOsiISISCircL2DesIS_Object = MibTableColumn
fmOsiISISCircL2DesIS = _FmOsiISISCircL2DesIS_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 58),
    _FmOsiISISCircL2DesIS_Type()
)
fmOsiISISCircL2DesIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISCircL2DesIS.setStatus("mandatory")
_FmOsiISISCircLANL2DesISChanges_Type = Counter32
_FmOsiISISCircLANL2DesISChanges_Object = MibTableColumn
fmOsiISISCircLANL2DesISChanges = _FmOsiISISCircLANL2DesISChanges_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 60),
    _FmOsiISISCircLANL2DesISChanges_Type()
)
fmOsiISISCircLANL2DesISChanges.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISCircLANL2DesISChanges.setStatus("mandatory")
_FmOsiISISCircAuthFails_Type = Counter32
_FmOsiISISCircAuthFails_Object = MibTableColumn
fmOsiISISCircAuthFails = _FmOsiISISCircAuthFails_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 62),
    _FmOsiISISCircAuthFails_Type()
)
fmOsiISISCircAuthFails.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISCircAuthFails.setStatus("mandatory")
_FmOsiISISAreaTable_Object = MibTable
fmOsiISISAreaTable = _FmOsiISISAreaTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 10)
)
if mibBuilder.loadTexts:
    fmOsiISISAreaTable.setStatus("mandatory")
_FmOsiISISAreaEntry_Object = MibTableRow
fmOsiISISAreaEntry = _FmOsiISISAreaEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 10, 1)
)
fmOsiISISAreaEntry.setIndexNames(
    (0, "PCE-MIB", "fmOsiISISAreaAddress"),
)
if mibBuilder.loadTexts:
    fmOsiISISAreaEntry.setStatus("mandatory")


class _FmOsiISISAreaAddress_Type(DisplayString):
    """Custom type fmOsiISISAreaAddress based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 46),
    )


_FmOsiISISAreaAddress_Type.__name__ = "DisplayString"
_FmOsiISISAreaAddress_Object = MibTableColumn
fmOsiISISAreaAddress = _FmOsiISISAreaAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 10, 1, 1),
    _FmOsiISISAreaAddress_Type()
)
fmOsiISISAreaAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISAreaAddress.setStatus("mandatory")
_FmOsiISISISAdjacencyTable_Object = MibTable
fmOsiISISISAdjacencyTable = _FmOsiISISISAdjacencyTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 15)
)
if mibBuilder.loadTexts:
    fmOsiISISISAdjacencyTable.setStatus("mandatory")
_FmOsiISISISAdjacencyEntry_Object = MibTableRow
fmOsiISISISAdjacencyEntry = _FmOsiISISISAdjacencyEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 15, 1)
)
fmOsiISISISAdjacencyEntry.setIndexNames(
    (0, "PCE-MIB", "fmOsiISISISAdjCircIndex"),
    (0, "PCE-MIB", "fmOsiISISISAdjIndex"),
)
if mibBuilder.loadTexts:
    fmOsiISISISAdjacencyEntry.setStatus("mandatory")


class _FmOsiISISISAdjCircIndex_Type(Integer32):
    """Custom type fmOsiISISISAdjCircIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_FmOsiISISISAdjCircIndex_Type.__name__ = "Integer32"
_FmOsiISISISAdjCircIndex_Object = MibTableColumn
fmOsiISISISAdjCircIndex = _FmOsiISISISAdjCircIndex_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 15, 1, 1),
    _FmOsiISISISAdjCircIndex_Type()
)
fmOsiISISISAdjCircIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISISAdjCircIndex.setStatus("mandatory")


class _FmOsiISISISAdjIndex_Type(Integer32):
    """Custom type fmOsiISISISAdjIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1024),
    )


_FmOsiISISISAdjIndex_Type.__name__ = "Integer32"
_FmOsiISISISAdjIndex_Object = MibTableColumn
fmOsiISISISAdjIndex = _FmOsiISISISAdjIndex_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 15, 1, 5),
    _FmOsiISISISAdjIndex_Type()
)
fmOsiISISISAdjIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISISAdjIndex.setStatus("mandatory")


class _FmOsiISISISAdjSysID_Type(DisplayString):
    """Custom type fmOsiISISISAdjSysID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_FmOsiISISISAdjSysID_Type.__name__ = "DisplayString"
_FmOsiISISISAdjSysID_Object = MibTableColumn
fmOsiISISISAdjSysID = _FmOsiISISISAdjSysID_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 15, 1, 10),
    _FmOsiISISISAdjSysID_Type()
)
fmOsiISISISAdjSysID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISISAdjSysID.setStatus("mandatory")


class _FmOsiISISISAdjState_Type(Integer32):
    """Custom type fmOsiISISISAdjState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("down", 4),
          ("failed", 3),
          ("initializing", 1),
          ("up", 2))
    )


_FmOsiISISISAdjState_Type.__name__ = "Integer32"
_FmOsiISISISAdjState_Object = MibTableColumn
fmOsiISISISAdjState = _FmOsiISISISAdjState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 15, 1, 12),
    _FmOsiISISISAdjState_Type()
)
fmOsiISISISAdjState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISISAdjState.setStatus("mandatory")


class _FmOsiISISISAdjSNPAAddress_Type(DisplayString):
    """Custom type fmOsiISISISAdjSNPAAddress based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 46),
    )


_FmOsiISISISAdjSNPAAddress_Type.__name__ = "DisplayString"
_FmOsiISISISAdjSNPAAddress_Object = MibTableColumn
fmOsiISISISAdjSNPAAddress = _FmOsiISISISAdjSNPAAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 15, 1, 14),
    _FmOsiISISISAdjSNPAAddress_Type()
)
fmOsiISISISAdjSNPAAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISISAdjSNPAAddress.setStatus("mandatory")


class _FmOsiISISISAdjType_Type(Integer32):
    """Custom type fmOsiISISISAdjType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("manual", 2))
    )


_FmOsiISISISAdjType_Type.__name__ = "Integer32"
_FmOsiISISISAdjType_Object = MibTableColumn
fmOsiISISISAdjType = _FmOsiISISISAdjType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 15, 1, 20),
    _FmOsiISISISAdjType_Type()
)
fmOsiISISISAdjType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISISAdjType.setStatus("mandatory")


class _FmOsiISISISAdjUsage_Type(Integer32):
    """Custom type fmOsiISISISAdjUsage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("level1", 2),
          ("level1and2", 4),
          ("level2", 3),
          ("undefined", 1))
    )


_FmOsiISISISAdjUsage_Type.__name__ = "Integer32"
_FmOsiISISISAdjUsage_Object = MibTableColumn
fmOsiISISISAdjUsage = _FmOsiISISISAdjUsage_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 15, 1, 22),
    _FmOsiISISISAdjUsage_Type()
)
fmOsiISISISAdjUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISISAdjUsage.setStatus("mandatory")


class _FmOsiISISISAdjHoldTimer_Type(Integer32):
    """Custom type fmOsiISISISAdjHoldTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_FmOsiISISISAdjHoldTimer_Type.__name__ = "Integer32"
_FmOsiISISISAdjHoldTimer_Object = MibTableColumn
fmOsiISISISAdjHoldTimer = _FmOsiISISISAdjHoldTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 15, 1, 26),
    _FmOsiISISISAdjHoldTimer_Type()
)
fmOsiISISISAdjHoldTimer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISISAdjHoldTimer.setStatus("mandatory")


class _FmOsiISISISAdjPriority_Type(Integer32):
    """Custom type fmOsiISISISAdjPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 127),
    )


_FmOsiISISISAdjPriority_Type.__name__ = "Integer32"
_FmOsiISISISAdjPriority_Object = MibTableColumn
fmOsiISISISAdjPriority = _FmOsiISISISAdjPriority_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 15, 1, 30),
    _FmOsiISISISAdjPriority_Type()
)
fmOsiISISISAdjPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISISAdjPriority.setStatus("mandatory")
_FmOsiISISISAdjacencyAreaAddressTable_Object = MibTable
fmOsiISISISAdjacencyAreaAddressTable = _FmOsiISISISAdjacencyAreaAddressTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 17)
)
if mibBuilder.loadTexts:
    fmOsiISISISAdjacencyAreaAddressTable.setStatus("mandatory")
_FmOsiISISISAdjacencyAreaAddressEntry_Object = MibTableRow
fmOsiISISISAdjacencyAreaAddressEntry = _FmOsiISISISAdjacencyAreaAddressEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 17, 1)
)
fmOsiISISISAdjacencyAreaAddressEntry.setIndexNames(
    (0, "PCE-MIB", "fmOsiISISISAdjAreaAddrCircIndex"),
    (0, "PCE-MIB", "fmOsiISISISAdjAreaAddrAdjIndex"),
    (0, "PCE-MIB", "fmOsiISISISAdjAreaAddress"),
)
if mibBuilder.loadTexts:
    fmOsiISISISAdjacencyAreaAddressEntry.setStatus("mandatory")


class _FmOsiISISISAdjAreaAddrCircIndex_Type(Integer32):
    """Custom type fmOsiISISISAdjAreaAddrCircIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_FmOsiISISISAdjAreaAddrCircIndex_Type.__name__ = "Integer32"
_FmOsiISISISAdjAreaAddrCircIndex_Object = MibTableColumn
fmOsiISISISAdjAreaAddrCircIndex = _FmOsiISISISAdjAreaAddrCircIndex_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 17, 1, 1),
    _FmOsiISISISAdjAreaAddrCircIndex_Type()
)
fmOsiISISISAdjAreaAddrCircIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISISAdjAreaAddrCircIndex.setStatus("mandatory")


class _FmOsiISISISAdjAreaAddrAdjIndex_Type(Integer32):
    """Custom type fmOsiISISISAdjAreaAddrAdjIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1024),
    )


_FmOsiISISISAdjAreaAddrAdjIndex_Type.__name__ = "Integer32"
_FmOsiISISISAdjAreaAddrAdjIndex_Object = MibTableColumn
fmOsiISISISAdjAreaAddrAdjIndex = _FmOsiISISISAdjAreaAddrAdjIndex_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 17, 1, 3),
    _FmOsiISISISAdjAreaAddrAdjIndex_Type()
)
fmOsiISISISAdjAreaAddrAdjIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISISAdjAreaAddrAdjIndex.setStatus("mandatory")


class _FmOsiISISISAdjAreaAddress_Type(DisplayString):
    """Custom type fmOsiISISISAdjAreaAddress based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 46),
    )


_FmOsiISISISAdjAreaAddress_Type.__name__ = "DisplayString"
_FmOsiISISISAdjAreaAddress_Object = MibTableColumn
fmOsiISISISAdjAreaAddress = _FmOsiISISISAdjAreaAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 17, 1, 5),
    _FmOsiISISISAdjAreaAddress_Type()
)
fmOsiISISISAdjAreaAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISISAdjAreaAddress.setStatus("mandatory")
_FmOsiISISESAdjacencyTable_Object = MibTable
fmOsiISISESAdjacencyTable = _FmOsiISISESAdjacencyTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 20)
)
if mibBuilder.loadTexts:
    fmOsiISISESAdjacencyTable.setStatus("mandatory")
_FmOsiISISESAdjacencyEntry_Object = MibTableRow
fmOsiISISESAdjacencyEntry = _FmOsiISISESAdjacencyEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 20, 1)
)
fmOsiISISESAdjacencyEntry.setIndexNames(
    (0, "PCE-MIB", "fmOsiISISESAdjCircIndex"),
    (0, "PCE-MIB", "fmOsiISISESAdjAdjIndex"),
)
if mibBuilder.loadTexts:
    fmOsiISISESAdjacencyEntry.setStatus("mandatory")


class _FmOsiISISESAdjCircIndex_Type(Integer32):
    """Custom type fmOsiISISESAdjCircIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_FmOsiISISESAdjCircIndex_Type.__name__ = "Integer32"
_FmOsiISISESAdjCircIndex_Object = MibTableColumn
fmOsiISISESAdjCircIndex = _FmOsiISISESAdjCircIndex_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 20, 1, 1),
    _FmOsiISISESAdjCircIndex_Type()
)
fmOsiISISESAdjCircIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISESAdjCircIndex.setStatus("mandatory")


class _FmOsiISISESAdjAdjIndex_Type(Integer32):
    """Custom type fmOsiISISESAdjAdjIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1024),
    )


_FmOsiISISESAdjAdjIndex_Type.__name__ = "Integer32"
_FmOsiISISESAdjAdjIndex_Object = MibTableColumn
fmOsiISISESAdjAdjIndex = _FmOsiISISESAdjAdjIndex_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 20, 1, 3),
    _FmOsiISISESAdjAdjIndex_Type()
)
fmOsiISISESAdjAdjIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISESAdjAdjIndex.setStatus("mandatory")


class _FmOsiISISESAdjESID_Type(DisplayString):
    """Custom type fmOsiISISESAdjESID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_FmOsiISISESAdjESID_Type.__name__ = "DisplayString"
_FmOsiISISESAdjESID_Object = MibTableColumn
fmOsiISISESAdjESID = _FmOsiISISESAdjESID_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 20, 1, 5),
    _FmOsiISISESAdjESID_Type()
)
fmOsiISISESAdjESID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISESAdjESID.setStatus("mandatory")


class _FmOsiISISESAdjState_Type(Integer32):
    """Custom type fmOsiISISESAdjState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("down", 4),
          ("failed", 3),
          ("initializing", 1),
          ("up", 2))
    )


_FmOsiISISESAdjState_Type.__name__ = "Integer32"
_FmOsiISISESAdjState_Object = MibTableColumn
fmOsiISISESAdjState = _FmOsiISISESAdjState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 20, 1, 10),
    _FmOsiISISESAdjState_Type()
)
fmOsiISISESAdjState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISESAdjState.setStatus("mandatory")


class _FmOsiISISESAdjNeighSNPAAdress_Type(DisplayString):
    """Custom type fmOsiISISESAdjNeighSNPAAdress based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 46),
    )


_FmOsiISISESAdjNeighSNPAAdress_Type.__name__ = "DisplayString"
_FmOsiISISESAdjNeighSNPAAdress_Object = MibTableColumn
fmOsiISISESAdjNeighSNPAAdress = _FmOsiISISESAdjNeighSNPAAdress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 20, 1, 15),
    _FmOsiISISESAdjNeighSNPAAdress_Type()
)
fmOsiISISESAdjNeighSNPAAdress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISESAdjNeighSNPAAdress.setStatus("mandatory")


class _FmOsiISISESAdjType_Type(Integer32):
    """Custom type fmOsiISISESAdjType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("manual", 2))
    )


_FmOsiISISESAdjType_Type.__name__ = "Integer32"
_FmOsiISISESAdjType_Object = MibTableColumn
fmOsiISISESAdjType = _FmOsiISISESAdjType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 20, 1, 20),
    _FmOsiISISESAdjType_Type()
)
fmOsiISISESAdjType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISESAdjType.setStatus("mandatory")
_FmOsiISISReachableAddressTable_Object = MibTable
fmOsiISISReachableAddressTable = _FmOsiISISReachableAddressTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 25)
)
if mibBuilder.loadTexts:
    fmOsiISISReachableAddressTable.setStatus("mandatory")
_FmOsiISISReachableAddressEntry_Object = MibTableRow
fmOsiISISReachableAddressEntry = _FmOsiISISReachableAddressEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 25, 1)
)
fmOsiISISReachableAddressEntry.setIndexNames(
    (0, "PCE-MIB", "fmOsiISISRASystemType"),
    (0, "PCE-MIB", "fmOsiISISRAAddress"),
    (0, "PCE-MIB", "fmOsiISISRAMetric"),
    (0, "PCE-MIB", "fmOsiISISRAPathIdentifier"),
)
if mibBuilder.loadTexts:
    fmOsiISISReachableAddressEntry.setStatus("mandatory")


class _FmOsiISISRASystemType_Type(Integer32):
    """Custom type fmOsiISISRASystemType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("es", 1),
          ("l1IS", 2),
          ("l2IS", 3),
          ("prefix", 4))
    )


_FmOsiISISRASystemType_Type.__name__ = "Integer32"
_FmOsiISISRASystemType_Object = MibTableColumn
fmOsiISISRASystemType = _FmOsiISISRASystemType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 25, 1, 1),
    _FmOsiISISRASystemType_Type()
)
fmOsiISISRASystemType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISRASystemType.setStatus("mandatory")


class _FmOsiISISRAAddress_Type(DisplayString):
    """Custom type fmOsiISISRAAddress based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 46),
    )


_FmOsiISISRAAddress_Type.__name__ = "DisplayString"
_FmOsiISISRAAddress_Object = MibTableColumn
fmOsiISISRAAddress = _FmOsiISISRAAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 25, 1, 5),
    _FmOsiISISRAAddress_Type()
)
fmOsiISISRAAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISRAAddress.setStatus("mandatory")


class _FmOsiISISRAMetric_Type(Integer32):
    """Custom type fmOsiISISRAMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("default", 1),
          ("delay", 2),
          ("error", 4),
          ("expense", 3))
    )


_FmOsiISISRAMetric_Type.__name__ = "Integer32"
_FmOsiISISRAMetric_Object = MibTableColumn
fmOsiISISRAMetric = _FmOsiISISRAMetric_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 25, 1, 10),
    _FmOsiISISRAMetric_Type()
)
fmOsiISISRAMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISRAMetric.setStatus("mandatory")


class _FmOsiISISRAPathIdentifier_Type(Integer32):
    """Custom type fmOsiISISRAPathIdentifier based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_FmOsiISISRAPathIdentifier_Type.__name__ = "Integer32"
_FmOsiISISRAPathIdentifier_Object = MibTableColumn
fmOsiISISRAPathIdentifier = _FmOsiISISRAPathIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 25, 1, 15),
    _FmOsiISISRAPathIdentifier_Type()
)
fmOsiISISRAPathIdentifier.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISRAPathIdentifier.setStatus("mandatory")


class _FmOsiISISRAType_Type(Integer32):
    """Custom type fmOsiISISRAType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 1),
          ("manual", 2))
    )


_FmOsiISISRAType_Type.__name__ = "Integer32"
_FmOsiISISRAType_Object = MibTableColumn
fmOsiISISRAType = _FmOsiISISRAType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 25, 1, 20),
    _FmOsiISISRAType_Type()
)
fmOsiISISRAType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISRAType.setStatus("mandatory")


class _FmOsiISISRACircuitId_Type(Integer32):
    """Custom type fmOsiISISRACircuitId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_FmOsiISISRACircuitId_Type.__name__ = "Integer32"
_FmOsiISISRACircuitId_Object = MibTableColumn
fmOsiISISRACircuitId = _FmOsiISISRACircuitId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 25, 1, 25),
    _FmOsiISISRACircuitId_Type()
)
fmOsiISISRACircuitId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISRACircuitId.setStatus("mandatory")


class _FmOsiISISRAAdjacencyId_Type(Integer32):
    """Custom type fmOsiISISRAAdjacencyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_FmOsiISISRAAdjacencyId_Type.__name__ = "Integer32"
_FmOsiISISRAAdjacencyId_Object = MibTableColumn
fmOsiISISRAAdjacencyId = _FmOsiISISRAAdjacencyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 25, 1, 35),
    _FmOsiISISRAAdjacencyId_Type()
)
fmOsiISISRAAdjacencyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISRAAdjacencyId.setStatus("mandatory")


class _FmOsiISISRAPathCost_Type(Integer32):
    """Custom type fmOsiISISRAPathCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1024),
    )


_FmOsiISISRAPathCost_Type.__name__ = "Integer32"
_FmOsiISISRAPathCost_Object = MibTableColumn
fmOsiISISRAPathCost = _FmOsiISISRAPathCost_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 25, 1, 40),
    _FmOsiISISRAPathCost_Type()
)
fmOsiISISRAPathCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISRAPathCost.setStatus("mandatory")


class _FmOsiISISRASNPAAddress_Type(DisplayString):
    """Custom type fmOsiISISRASNPAAddress based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 46),
    )


_FmOsiISISRASNPAAddress_Type.__name__ = "DisplayString"
_FmOsiISISRASNPAAddress_Object = MibTableColumn
fmOsiISISRASNPAAddress = _FmOsiISISRASNPAAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 25, 1, 45),
    _FmOsiISISRASNPAAddress_Type()
)
fmOsiISISRASNPAAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOsiISISRASNPAAddress.setStatus("mandatory")
_FmPing_ObjectIdentity = ObjectIdentity
fmPing = _FmPing_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 16)
)
_FmPingTable_Object = MibTable
fmPingTable = _FmPingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1)
)
if mibBuilder.loadTexts:
    fmPingTable.setStatus("mandatory")
_FmPingEntry_Object = MibTableRow
fmPingEntry = _FmPingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1)
)
fmPingEntry.setIndexNames(
    (0, "PCE-MIB", "fmPingIdentifier"),
)
if mibBuilder.loadTexts:
    fmPingEntry.setStatus("mandatory")


class _FmPingIdentifier_Type(Integer32):
    """Custom type fmPingIdentifier based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_FmPingIdentifier_Type.__name__ = "Integer32"
_FmPingIdentifier_Object = MibTableColumn
fmPingIdentifier = _FmPingIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 1),
    _FmPingIdentifier_Type()
)
fmPingIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fmPingIdentifier.setStatus("mandatory")


class _FmPingProtocol_Type(Integer32):
    """Custom type fmPingProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              8,
              14)
        )
    )
    namedValues = NamedValues(
        *(("clnp", 8),
          ("ip", 1),
          ("novell", 14))
    )


_FmPingProtocol_Type.__name__ = "Integer32"
_FmPingProtocol_Object = MibTableColumn
fmPingProtocol = _FmPingProtocol_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 4),
    _FmPingProtocol_Type()
)
fmPingProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fmPingProtocol.setStatus("mandatory")


class _FmPingAddress_Type(DisplayString):
    """Custom type fmPingAddress based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 46),
    )


_FmPingAddress_Type.__name__ = "DisplayString"
_FmPingAddress_Object = MibTableColumn
fmPingAddress = _FmPingAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 6),
    _FmPingAddress_Type()
)
fmPingAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fmPingAddress.setStatus("mandatory")


class _FmPingCountRequest_Type(Integer32):
    """Custom type fmPingCountRequest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_FmPingCountRequest_Type.__name__ = "Integer32"
_FmPingCountRequest_Object = MibTableColumn
fmPingCountRequest = _FmPingCountRequest_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 10),
    _FmPingCountRequest_Type()
)
fmPingCountRequest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fmPingCountRequest.setStatus("mandatory")


class _FmPingPacketSize_Type(Integer32):
    """Custom type fmPingPacketSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(64, 1500),
    )


_FmPingPacketSize_Type.__name__ = "Integer32"
_FmPingPacketSize_Object = MibTableColumn
fmPingPacketSize = _FmPingPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 12),
    _FmPingPacketSize_Type()
)
fmPingPacketSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fmPingPacketSize.setStatus("mandatory")


class _FmPingDelay_Type(Integer32):
    """Custom type fmPingDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600000),
    )


_FmPingDelay_Type.__name__ = "Integer32"
_FmPingDelay_Object = MibTableColumn
fmPingDelay = _FmPingDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 16),
    _FmPingDelay_Type()
)
fmPingDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fmPingDelay.setStatus("mandatory")


class _FmPingTimeout_Type(Integer32):
    """Custom type fmPingTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3600000),
    )


_FmPingTimeout_Type.__name__ = "Integer32"
_FmPingTimeout_Object = MibTableColumn
fmPingTimeout = _FmPingTimeout_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 18),
    _FmPingTimeout_Type()
)
fmPingTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fmPingTimeout.setStatus("mandatory")


class _FmPingPermanent_Type(Integer32):
    """Custom type fmPingPermanent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 2),
          ("true", 1))
    )


_FmPingPermanent_Type.__name__ = "Integer32"
_FmPingPermanent_Object = MibTableColumn
fmPingPermanent = _FmPingPermanent_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 20),
    _FmPingPermanent_Type()
)
fmPingPermanent.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fmPingPermanent.setStatus("mandatory")
_FmPingSentPackets_Type = Counter32
_FmPingSentPackets_Object = MibTableColumn
fmPingSentPackets = _FmPingSentPackets_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 30),
    _FmPingSentPackets_Type()
)
fmPingSentPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmPingSentPackets.setStatus("mandatory")
_FmPingReceivedPackets_Type = Counter32
_FmPingReceivedPackets_Object = MibTableColumn
fmPingReceivedPackets = _FmPingReceivedPackets_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 32),
    _FmPingReceivedPackets_Type()
)
fmPingReceivedPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmPingReceivedPackets.setStatus("mandatory")


class _FmPingMinRoundTrip_Type(Integer32):
    """Custom type fmPingMinRoundTrip based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_FmPingMinRoundTrip_Type.__name__ = "Integer32"
_FmPingMinRoundTrip_Object = MibTableColumn
fmPingMinRoundTrip = _FmPingMinRoundTrip_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 40),
    _FmPingMinRoundTrip_Type()
)
fmPingMinRoundTrip.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmPingMinRoundTrip.setStatus("mandatory")


class _FmPingAvgRoundTrip_Type(Integer32):
    """Custom type fmPingAvgRoundTrip based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_FmPingAvgRoundTrip_Type.__name__ = "Integer32"
_FmPingAvgRoundTrip_Object = MibTableColumn
fmPingAvgRoundTrip = _FmPingAvgRoundTrip_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 41),
    _FmPingAvgRoundTrip_Type()
)
fmPingAvgRoundTrip.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmPingAvgRoundTrip.setStatus("mandatory")


class _FmPingMaxRoundTrip_Type(Integer32):
    """Custom type fmPingMaxRoundTrip based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_FmPingMaxRoundTrip_Type.__name__ = "Integer32"
_FmPingMaxRoundTrip_Object = MibTableColumn
fmPingMaxRoundTrip = _FmPingMaxRoundTrip_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 42),
    _FmPingMaxRoundTrip_Type()
)
fmPingMaxRoundTrip.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmPingMaxRoundTrip.setStatus("mandatory")


class _FmPingCompletedFlag_Type(Integer32):
    """Custom type fmPingCompletedFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 2),
          ("true", 1))
    )


_FmPingCompletedFlag_Type.__name__ = "Integer32"
_FmPingCompletedFlag_Object = MibTableColumn
fmPingCompletedFlag = _FmPingCompletedFlag_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 48),
    _FmPingCompletedFlag_Type()
)
fmPingCompletedFlag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmPingCompletedFlag.setStatus("mandatory")


class _FmPingOwner_Type(DisplayString):
    """Custom type fmPingOwner based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 75),
    )


_FmPingOwner_Type.__name__ = "DisplayString"
_FmPingOwner_Object = MibTableColumn
fmPingOwner = _FmPingOwner_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 50),
    _FmPingOwner_Type()
)
fmPingOwner.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fmPingOwner.setStatus("mandatory")


class _FmPingAdminState_Type(Integer32):
    """Custom type fmPingAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("createAndGo", 4),
          ("createAndWait", 5),
          ("destroy", 6),
          ("notInService", 2),
          ("notReady", 3),
          ("stop", 7))
    )


_FmPingAdminState_Type.__name__ = "Integer32"
_FmPingAdminState_Object = MibTableColumn
fmPingAdminState = _FmPingAdminState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 52),
    _FmPingAdminState_Type()
)
fmPingAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fmPingAdminState.setStatus("mandatory")
_FmRip2_ObjectIdentity = ObjectIdentity
fmRip2 = _FmRip2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17)
)
_FmRip2GlobalGroup_ObjectIdentity = ObjectIdentity
fmRip2GlobalGroup = _FmRip2GlobalGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 1)
)
_FmRip2GlobalRouteChanges_Type = Counter32
_FmRip2GlobalRouteChanges_Object = MibScalar
fmRip2GlobalRouteChanges = _FmRip2GlobalRouteChanges_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 1, 1),
    _FmRip2GlobalRouteChanges_Type()
)
fmRip2GlobalRouteChanges.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmRip2GlobalRouteChanges.setStatus("mandatory")
_FmRip2GlobalQueries_Type = Counter32
_FmRip2GlobalQueries_Object = MibScalar
fmRip2GlobalQueries = _FmRip2GlobalQueries_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 1, 2),
    _FmRip2GlobalQueries_Type()
)
fmRip2GlobalQueries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmRip2GlobalQueries.setStatus("mandatory")
_FmRip2IfStatTable_Object = MibTable
fmRip2IfStatTable = _FmRip2IfStatTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 2)
)
if mibBuilder.loadTexts:
    fmRip2IfStatTable.setStatus("mandatory")
_FmRip2IfStatEntry_Object = MibTableRow
fmRip2IfStatEntry = _FmRip2IfStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 2, 1)
)
fmRip2IfStatEntry.setIndexNames(
    (0, "PCE-MIB", "fmRip2IfStatAddress"),
)
if mibBuilder.loadTexts:
    fmRip2IfStatEntry.setStatus("mandatory")
_FmRip2IfStatAddress_Type = IpAddress
_FmRip2IfStatAddress_Object = MibTableColumn
fmRip2IfStatAddress = _FmRip2IfStatAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 2, 1, 1),
    _FmRip2IfStatAddress_Type()
)
fmRip2IfStatAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmRip2IfStatAddress.setStatus("mandatory")
_FmRip2IfStatRcvBadPackets_Type = Counter32
_FmRip2IfStatRcvBadPackets_Object = MibTableColumn
fmRip2IfStatRcvBadPackets = _FmRip2IfStatRcvBadPackets_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 2, 1, 2),
    _FmRip2IfStatRcvBadPackets_Type()
)
fmRip2IfStatRcvBadPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmRip2IfStatRcvBadPackets.setStatus("mandatory")
_FmRip2IfStatRcvBadRoutes_Type = Counter32
_FmRip2IfStatRcvBadRoutes_Object = MibTableColumn
fmRip2IfStatRcvBadRoutes = _FmRip2IfStatRcvBadRoutes_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 2, 1, 3),
    _FmRip2IfStatRcvBadRoutes_Type()
)
fmRip2IfStatRcvBadRoutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmRip2IfStatRcvBadRoutes.setStatus("mandatory")
_FmRip2IfStatSentUpdates_Type = Counter32
_FmRip2IfStatSentUpdates_Object = MibTableColumn
fmRip2IfStatSentUpdates = _FmRip2IfStatSentUpdates_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 2, 1, 4),
    _FmRip2IfStatSentUpdates_Type()
)
fmRip2IfStatSentUpdates.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmRip2IfStatSentUpdates.setStatus("mandatory")


class _FmRip2IfStatStatus_Type(Integer32):
    """Custom type fmRip2IfStatStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FmRip2IfStatStatus_Type.__name__ = "Integer32"
_FmRip2IfStatStatus_Object = MibTableColumn
fmRip2IfStatStatus = _FmRip2IfStatStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 2, 1, 5),
    _FmRip2IfStatStatus_Type()
)
fmRip2IfStatStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmRip2IfStatStatus.setStatus("mandatory")
_FmRip2IfConfTable_Object = MibTable
fmRip2IfConfTable = _FmRip2IfConfTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 3)
)
if mibBuilder.loadTexts:
    fmRip2IfConfTable.setStatus("mandatory")
_FmRip2IfConfEntry_Object = MibTableRow
fmRip2IfConfEntry = _FmRip2IfConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 3, 1)
)
fmRip2IfConfEntry.setIndexNames(
    (0, "PCE-MIB", "fmRip2IfConfAddress"),
)
if mibBuilder.loadTexts:
    fmRip2IfConfEntry.setStatus("mandatory")
_FmRip2IfConfAddress_Type = IpAddress
_FmRip2IfConfAddress_Object = MibTableColumn
fmRip2IfConfAddress = _FmRip2IfConfAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 3, 1, 1),
    _FmRip2IfConfAddress_Type()
)
fmRip2IfConfAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmRip2IfConfAddress.setStatus("mandatory")


class _FmRip2IfConfDomain_Type(DisplayString):
    """Custom type fmRip2IfConfDomain based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 2),
    )


_FmRip2IfConfDomain_Type.__name__ = "DisplayString"
_FmRip2IfConfDomain_Object = MibTableColumn
fmRip2IfConfDomain = _FmRip2IfConfDomain_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 3, 1, 2),
    _FmRip2IfConfDomain_Type()
)
fmRip2IfConfDomain.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmRip2IfConfDomain.setStatus("mandatory")


class _FmRip2IfConfAuthType_Type(Integer32):
    """Custom type fmRip2IfConfAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("noAuthentication", 1),
          ("simplePassword", 2))
    )


_FmRip2IfConfAuthType_Type.__name__ = "Integer32"
_FmRip2IfConfAuthType_Object = MibTableColumn
fmRip2IfConfAuthType = _FmRip2IfConfAuthType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 3, 1, 3),
    _FmRip2IfConfAuthType_Type()
)
fmRip2IfConfAuthType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmRip2IfConfAuthType.setStatus("mandatory")


class _FmRip2IfConfAuthKey_Type(DisplayString):
    """Custom type fmRip2IfConfAuthKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_FmRip2IfConfAuthKey_Type.__name__ = "DisplayString"
_FmRip2IfConfAuthKey_Object = MibTableColumn
fmRip2IfConfAuthKey = _FmRip2IfConfAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 3, 1, 4),
    _FmRip2IfConfAuthKey_Type()
)
fmRip2IfConfAuthKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmRip2IfConfAuthKey.setStatus("mandatory")


class _FmRip2IfConfSend_Type(Integer32):
    """Custom type fmRip2IfConfSend based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("doNotSend", 1),
          ("rip1Compatible", 3),
          ("ripVersion1", 2),
          ("ripVersion2", 4))
    )


_FmRip2IfConfSend_Type.__name__ = "Integer32"
_FmRip2IfConfSend_Object = MibTableColumn
fmRip2IfConfSend = _FmRip2IfConfSend_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 3, 1, 5),
    _FmRip2IfConfSend_Type()
)
fmRip2IfConfSend.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmRip2IfConfSend.setStatus("mandatory")


class _FmRip2IfConfReceive_Type(Integer32):
    """Custom type fmRip2IfConfReceive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("rip1", 1),
          ("rip1OrRip2", 3),
          ("rip2", 2))
    )


_FmRip2IfConfReceive_Type.__name__ = "Integer32"
_FmRip2IfConfReceive_Object = MibTableColumn
fmRip2IfConfReceive = _FmRip2IfConfReceive_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 3, 1, 6),
    _FmRip2IfConfReceive_Type()
)
fmRip2IfConfReceive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmRip2IfConfReceive.setStatus("mandatory")


class _FmRip2IfConfDefaultMetric_Type(Integer32):
    """Custom type fmRip2IfConfDefaultMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_FmRip2IfConfDefaultMetric_Type.__name__ = "Integer32"
_FmRip2IfConfDefaultMetric_Object = MibTableColumn
fmRip2IfConfDefaultMetric = _FmRip2IfConfDefaultMetric_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 3, 1, 7),
    _FmRip2IfConfDefaultMetric_Type()
)
fmRip2IfConfDefaultMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmRip2IfConfDefaultMetric.setStatus("mandatory")


class _FmRip2IfConfStatus_Type(Integer32):
    """Custom type fmRip2IfConfStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FmRip2IfConfStatus_Type.__name__ = "Integer32"
_FmRip2IfConfStatus_Object = MibTableColumn
fmRip2IfConfStatus = _FmRip2IfConfStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 3, 1, 8),
    _FmRip2IfConfStatus_Type()
)
fmRip2IfConfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmRip2IfConfStatus.setStatus("mandatory")
_FmRip2PeerTable_Object = MibTable
fmRip2PeerTable = _FmRip2PeerTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 4)
)
if mibBuilder.loadTexts:
    fmRip2PeerTable.setStatus("mandatory")
_FmRip2PeerEntry_Object = MibTableRow
fmRip2PeerEntry = _FmRip2PeerEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 4, 1)
)
fmRip2PeerEntry.setIndexNames(
    (0, "PCE-MIB", "fmRip2PeerAddress"),
    (0, "PCE-MIB", "fmRip2PeerDomain"),
)
if mibBuilder.loadTexts:
    fmRip2PeerEntry.setStatus("mandatory")
_FmRip2PeerAddress_Type = IpAddress
_FmRip2PeerAddress_Object = MibTableColumn
fmRip2PeerAddress = _FmRip2PeerAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 4, 1, 1),
    _FmRip2PeerAddress_Type()
)
fmRip2PeerAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmRip2PeerAddress.setStatus("mandatory")


class _FmRip2PeerDomain_Type(DisplayString):
    """Custom type fmRip2PeerDomain based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 2),
    )


_FmRip2PeerDomain_Type.__name__ = "DisplayString"
_FmRip2PeerDomain_Object = MibTableColumn
fmRip2PeerDomain = _FmRip2PeerDomain_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 4, 1, 2),
    _FmRip2PeerDomain_Type()
)
fmRip2PeerDomain.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmRip2PeerDomain.setStatus("mandatory")
_FmRip2PeerLastUpdate_Type = TimeTicks
_FmRip2PeerLastUpdate_Object = MibTableColumn
fmRip2PeerLastUpdate = _FmRip2PeerLastUpdate_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 4, 1, 3),
    _FmRip2PeerLastUpdate_Type()
)
fmRip2PeerLastUpdate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmRip2PeerLastUpdate.setStatus("mandatory")


class _FmRip2PeerVersion_Type(Integer32):
    """Custom type fmRip2PeerVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FmRip2PeerVersion_Type.__name__ = "Integer32"
_FmRip2PeerVersion_Object = MibTableColumn
fmRip2PeerVersion = _FmRip2PeerVersion_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 4, 1, 4),
    _FmRip2PeerVersion_Type()
)
fmRip2PeerVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmRip2PeerVersion.setStatus("mandatory")
_FmRip2PeerRcvBadPackets_Type = Counter32
_FmRip2PeerRcvBadPackets_Object = MibTableColumn
fmRip2PeerRcvBadPackets = _FmRip2PeerRcvBadPackets_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 4, 1, 5),
    _FmRip2PeerRcvBadPackets_Type()
)
fmRip2PeerRcvBadPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmRip2PeerRcvBadPackets.setStatus("mandatory")
_FmRip2PeerRcvBadRoutes_Type = Counter32
_FmRip2PeerRcvBadRoutes_Object = MibTableColumn
fmRip2PeerRcvBadRoutes = _FmRip2PeerRcvBadRoutes_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 4, 1, 6),
    _FmRip2PeerRcvBadRoutes_Type()
)
fmRip2PeerRcvBadRoutes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmRip2PeerRcvBadRoutes.setStatus("mandatory")
_FmOspf_ObjectIdentity = ObjectIdentity
fmOspf = _FmOspf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18)
)
_FmOspfStandard_ObjectIdentity = ObjectIdentity
fmOspfStandard = _FmOspfStandard_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1)
)
_FmOspfStandardGeneralGroup_ObjectIdentity = ObjectIdentity
fmOspfStandardGeneralGroup = _FmOspfStandardGeneralGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 1)
)
_FmOspfStandardRouterId_Type = IpAddress
_FmOspfStandardRouterId_Object = MibScalar
fmOspfStandardRouterId = _FmOspfStandardRouterId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 1, 1),
    _FmOspfStandardRouterId_Type()
)
fmOspfStandardRouterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardRouterId.setStatus("mandatory")


class _FmOspfStandardAdminStat_Type(Integer32):
    """Custom type fmOspfStandardAdminStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_FmOspfStandardAdminStat_Type.__name__ = "Integer32"
_FmOspfStandardAdminStat_Object = MibScalar
fmOspfStandardAdminStat = _FmOspfStandardAdminStat_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 1, 2),
    _FmOspfStandardAdminStat_Type()
)
fmOspfStandardAdminStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardAdminStat.setStatus("mandatory")


class _FmOspfStandardVersionNumber_Type(Integer32):
    """Custom type fmOspfStandardVersionNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("version1", 1),
          ("version2", 2))
    )


_FmOspfStandardVersionNumber_Type.__name__ = "Integer32"
_FmOspfStandardVersionNumber_Object = MibScalar
fmOspfStandardVersionNumber = _FmOspfStandardVersionNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 1, 3),
    _FmOspfStandardVersionNumber_Type()
)
fmOspfStandardVersionNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardVersionNumber.setStatus("mandatory")


class _FmOspfStandardAreaBdrRtrStatus_Type(Integer32):
    """Custom type fmOspfStandardAreaBdrRtrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 2),
          ("true", 1))
    )


_FmOspfStandardAreaBdrRtrStatus_Type.__name__ = "Integer32"
_FmOspfStandardAreaBdrRtrStatus_Object = MibScalar
fmOspfStandardAreaBdrRtrStatus = _FmOspfStandardAreaBdrRtrStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 1, 4),
    _FmOspfStandardAreaBdrRtrStatus_Type()
)
fmOspfStandardAreaBdrRtrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardAreaBdrRtrStatus.setStatus("mandatory")


class _FmOspfStandardASBdrRtrStatus_Type(Integer32):
    """Custom type fmOspfStandardASBdrRtrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 2),
          ("true", 1))
    )


_FmOspfStandardASBdrRtrStatus_Type.__name__ = "Integer32"
_FmOspfStandardASBdrRtrStatus_Object = MibScalar
fmOspfStandardASBdrRtrStatus = _FmOspfStandardASBdrRtrStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 1, 5),
    _FmOspfStandardASBdrRtrStatus_Type()
)
fmOspfStandardASBdrRtrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardASBdrRtrStatus.setStatus("mandatory")
_FmOspfStandardExternLSACount_Type = Gauge32
_FmOspfStandardExternLSACount_Object = MibScalar
fmOspfStandardExternLSACount = _FmOspfStandardExternLSACount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 1, 6),
    _FmOspfStandardExternLSACount_Type()
)
fmOspfStandardExternLSACount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardExternLSACount.setStatus("mandatory")


class _FmOspfStandardExternLSACksumSum_Type(Integer32):
    """Custom type fmOspfStandardExternLSACksumSum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_FmOspfStandardExternLSACksumSum_Type.__name__ = "Integer32"
_FmOspfStandardExternLSACksumSum_Object = MibScalar
fmOspfStandardExternLSACksumSum = _FmOspfStandardExternLSACksumSum_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 1, 7),
    _FmOspfStandardExternLSACksumSum_Type()
)
fmOspfStandardExternLSACksumSum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardExternLSACksumSum.setStatus("mandatory")


class _FmOspfStandardTOSSupport_Type(Integer32):
    """Custom type fmOspfStandardTOSSupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 2),
          ("true", 1))
    )


_FmOspfStandardTOSSupport_Type.__name__ = "Integer32"
_FmOspfStandardTOSSupport_Object = MibScalar
fmOspfStandardTOSSupport = _FmOspfStandardTOSSupport_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 1, 8),
    _FmOspfStandardTOSSupport_Type()
)
fmOspfStandardTOSSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardTOSSupport.setStatus("mandatory")
_FmOspfStandardOriginateNewLSAs_Type = Counter32
_FmOspfStandardOriginateNewLSAs_Object = MibScalar
fmOspfStandardOriginateNewLSAs = _FmOspfStandardOriginateNewLSAs_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 1, 9),
    _FmOspfStandardOriginateNewLSAs_Type()
)
fmOspfStandardOriginateNewLSAs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardOriginateNewLSAs.setStatus("mandatory")
_FmOspfStandardRxNewLSAs_Type = Counter32
_FmOspfStandardRxNewLSAs_Object = MibScalar
fmOspfStandardRxNewLSAs = _FmOspfStandardRxNewLSAs_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 1, 10),
    _FmOspfStandardRxNewLSAs_Type()
)
fmOspfStandardRxNewLSAs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardRxNewLSAs.setStatus("mandatory")
_FmOspfStandardAreaTable_Object = MibTable
fmOspfStandardAreaTable = _FmOspfStandardAreaTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 2)
)
if mibBuilder.loadTexts:
    fmOspfStandardAreaTable.setStatus("mandatory")
_FmOspfStandardAreaEntry_Object = MibTableRow
fmOspfStandardAreaEntry = _FmOspfStandardAreaEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 2, 1)
)
fmOspfStandardAreaEntry.setIndexNames(
    (0, "PCE-MIB", "fmOspfStandardAreaId"),
)
if mibBuilder.loadTexts:
    fmOspfStandardAreaEntry.setStatus("mandatory")
_FmOspfStandardAreaId_Type = IpAddress
_FmOspfStandardAreaId_Object = MibTableColumn
fmOspfStandardAreaId = _FmOspfStandardAreaId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 2, 1, 1),
    _FmOspfStandardAreaId_Type()
)
fmOspfStandardAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardAreaId.setStatus("mandatory")


class _FmOspfStandardAuthType_Type(Integer32):
    """Custom type fmOspfStandardAuthType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FmOspfStandardAuthType_Type.__name__ = "Integer32"
_FmOspfStandardAuthType_Object = MibTableColumn
fmOspfStandardAuthType = _FmOspfStandardAuthType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 2, 1, 2),
    _FmOspfStandardAuthType_Type()
)
fmOspfStandardAuthType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardAuthType.setStatus("mandatory")


class _FmOspfStandardImportASExtern_Type(Integer32):
    """Custom type fmOspfStandardImportASExtern based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 2),
          ("true", 1))
    )


_FmOspfStandardImportASExtern_Type.__name__ = "Integer32"
_FmOspfStandardImportASExtern_Object = MibTableColumn
fmOspfStandardImportASExtern = _FmOspfStandardImportASExtern_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 2, 1, 3),
    _FmOspfStandardImportASExtern_Type()
)
fmOspfStandardImportASExtern.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardImportASExtern.setStatus("mandatory")
_FmOspfStandardSpfRuns_Type = Counter32
_FmOspfStandardSpfRuns_Object = MibTableColumn
fmOspfStandardSpfRuns = _FmOspfStandardSpfRuns_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 2, 1, 4),
    _FmOspfStandardSpfRuns_Type()
)
fmOspfStandardSpfRuns.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardSpfRuns.setStatus("mandatory")
_FmOspfStandardAreaBdrRtrCount_Type = Gauge32
_FmOspfStandardAreaBdrRtrCount_Object = MibTableColumn
fmOspfStandardAreaBdrRtrCount = _FmOspfStandardAreaBdrRtrCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 2, 1, 5),
    _FmOspfStandardAreaBdrRtrCount_Type()
)
fmOspfStandardAreaBdrRtrCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardAreaBdrRtrCount.setStatus("mandatory")
_FmOspfStandardASBdrRtrCount_Type = Gauge32
_FmOspfStandardASBdrRtrCount_Object = MibTableColumn
fmOspfStandardASBdrRtrCount = _FmOspfStandardASBdrRtrCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 2, 1, 6),
    _FmOspfStandardASBdrRtrCount_Type()
)
fmOspfStandardASBdrRtrCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardASBdrRtrCount.setStatus("mandatory")
_FmOspfStandardAreaLSACount_Type = Gauge32
_FmOspfStandardAreaLSACount_Object = MibTableColumn
fmOspfStandardAreaLSACount = _FmOspfStandardAreaLSACount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 2, 1, 7),
    _FmOspfStandardAreaLSACount_Type()
)
fmOspfStandardAreaLSACount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardAreaLSACount.setStatus("mandatory")


class _FmOspfStandardAreaLSACksumSum_Type(Integer32):
    """Custom type fmOspfStandardAreaLSACksumSum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_FmOspfStandardAreaLSACksumSum_Type.__name__ = "Integer32"
_FmOspfStandardAreaLSACksumSum_Object = MibTableColumn
fmOspfStandardAreaLSACksumSum = _FmOspfStandardAreaLSACksumSum_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 2, 1, 8),
    _FmOspfStandardAreaLSACksumSum_Type()
)
fmOspfStandardAreaLSACksumSum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardAreaLSACksumSum.setStatus("mandatory")
_FmOspfStandardStubAreaTable_Object = MibTable
fmOspfStandardStubAreaTable = _FmOspfStandardStubAreaTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 3)
)
if mibBuilder.loadTexts:
    fmOspfStandardStubAreaTable.setStatus("mandatory")
_FmOspfStandardStubAreaEntry_Object = MibTableRow
fmOspfStandardStubAreaEntry = _FmOspfStandardStubAreaEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 3, 1)
)
fmOspfStandardStubAreaEntry.setIndexNames(
    (0, "PCE-MIB", "fmOspfStandardStubAreaID"),
    (0, "PCE-MIB", "fmOspfStandardStubTOS"),
)
if mibBuilder.loadTexts:
    fmOspfStandardStubAreaEntry.setStatus("mandatory")
_FmOspfStandardStubAreaID_Type = IpAddress
_FmOspfStandardStubAreaID_Object = MibTableColumn
fmOspfStandardStubAreaID = _FmOspfStandardStubAreaID_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 3, 1, 1),
    _FmOspfStandardStubAreaID_Type()
)
fmOspfStandardStubAreaID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardStubAreaID.setStatus("mandatory")


class _FmOspfStandardStubTOS_Type(Integer32):
    """Custom type fmOspfStandardStubTOS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_FmOspfStandardStubTOS_Type.__name__ = "Integer32"
_FmOspfStandardStubTOS_Object = MibTableColumn
fmOspfStandardStubTOS = _FmOspfStandardStubTOS_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 3, 1, 2),
    _FmOspfStandardStubTOS_Type()
)
fmOspfStandardStubTOS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardStubTOS.setStatus("mandatory")


class _FmOspfStandardStubMetric_Type(Integer32):
    """Custom type fmOspfStandardStubMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16777215),
    )


_FmOspfStandardStubMetric_Type.__name__ = "Integer32"
_FmOspfStandardStubMetric_Object = MibTableColumn
fmOspfStandardStubMetric = _FmOspfStandardStubMetric_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 3, 1, 3),
    _FmOspfStandardStubMetric_Type()
)
fmOspfStandardStubMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardStubMetric.setStatus("mandatory")


class _FmOspfStandardStubStatus_Type(Integer32):
    """Custom type fmOspfStandardStubStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FmOspfStandardStubStatus_Type.__name__ = "Integer32"
_FmOspfStandardStubStatus_Object = MibTableColumn
fmOspfStandardStubStatus = _FmOspfStandardStubStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 3, 1, 4),
    _FmOspfStandardStubStatus_Type()
)
fmOspfStandardStubStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardStubStatus.setStatus("mandatory")
_FmOspfStandardLsdbTable_Object = MibTable
fmOspfStandardLsdbTable = _FmOspfStandardLsdbTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 4)
)
if mibBuilder.loadTexts:
    fmOspfStandardLsdbTable.setStatus("mandatory")
_FmOspfStandardLsdbEntry_Object = MibTableRow
fmOspfStandardLsdbEntry = _FmOspfStandardLsdbEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 4, 1)
)
fmOspfStandardLsdbEntry.setIndexNames(
    (0, "PCE-MIB", "fmOspfStandardLsdbAreaId"),
    (0, "PCE-MIB", "fmOspfStandardLsdbType"),
)
if mibBuilder.loadTexts:
    fmOspfStandardLsdbEntry.setStatus("mandatory")
_FmOspfStandardLsdbAreaId_Type = IpAddress
_FmOspfStandardLsdbAreaId_Object = MibTableColumn
fmOspfStandardLsdbAreaId = _FmOspfStandardLsdbAreaId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 4, 1, 1),
    _FmOspfStandardLsdbAreaId_Type()
)
fmOspfStandardLsdbAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardLsdbAreaId.setStatus("mandatory")


class _FmOspfStandardLsdbType_Type(Integer32):
    """Custom type fmOspfStandardLsdbType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("asExternalLink", 5),
          ("asSummaryLink", 4),
          ("networkLink", 2),
          ("routerLink", 1),
          ("summaryLink", 3))
    )


_FmOspfStandardLsdbType_Type.__name__ = "Integer32"
_FmOspfStandardLsdbType_Object = MibTableColumn
fmOspfStandardLsdbType = _FmOspfStandardLsdbType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 4, 1, 2),
    _FmOspfStandardLsdbType_Type()
)
fmOspfStandardLsdbType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardLsdbType.setStatus("mandatory")
_FmOspfStandardLsdbLSID_Type = IpAddress
_FmOspfStandardLsdbLSID_Object = MibTableColumn
fmOspfStandardLsdbLSID = _FmOspfStandardLsdbLSID_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 4, 1, 3),
    _FmOspfStandardLsdbLSID_Type()
)
fmOspfStandardLsdbLSID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardLsdbLSID.setStatus("mandatory")
_FmOspfStandardLsdbRouterId_Type = IpAddress
_FmOspfStandardLsdbRouterId_Object = MibTableColumn
fmOspfStandardLsdbRouterId = _FmOspfStandardLsdbRouterId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 4, 1, 4),
    _FmOspfStandardLsdbRouterId_Type()
)
fmOspfStandardLsdbRouterId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardLsdbRouterId.setStatus("mandatory")


class _FmOspfStandardLsdbSequence_Type(Integer32):
    """Custom type fmOspfStandardLsdbSequence based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_FmOspfStandardLsdbSequence_Type.__name__ = "Integer32"
_FmOspfStandardLsdbSequence_Object = MibTableColumn
fmOspfStandardLsdbSequence = _FmOspfStandardLsdbSequence_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 4, 1, 5),
    _FmOspfStandardLsdbSequence_Type()
)
fmOspfStandardLsdbSequence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardLsdbSequence.setStatus("mandatory")


class _FmOspfStandardLsdbAge_Type(Integer32):
    """Custom type fmOspfStandardLsdbAge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_FmOspfStandardLsdbAge_Type.__name__ = "Integer32"
_FmOspfStandardLsdbAge_Object = MibTableColumn
fmOspfStandardLsdbAge = _FmOspfStandardLsdbAge_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 4, 1, 6),
    _FmOspfStandardLsdbAge_Type()
)
fmOspfStandardLsdbAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardLsdbAge.setStatus("mandatory")


class _FmOspfStandardLsdbChecksum_Type(Integer32):
    """Custom type fmOspfStandardLsdbChecksum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_FmOspfStandardLsdbChecksum_Type.__name__ = "Integer32"
_FmOspfStandardLsdbChecksum_Object = MibTableColumn
fmOspfStandardLsdbChecksum = _FmOspfStandardLsdbChecksum_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 4, 1, 7),
    _FmOspfStandardLsdbChecksum_Type()
)
fmOspfStandardLsdbChecksum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardLsdbChecksum.setStatus("mandatory")


class _FmOspfStandardLsdbAdvertisement_Type(DisplayString):
    """Custom type fmOspfStandardLsdbAdvertisement based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_FmOspfStandardLsdbAdvertisement_Type.__name__ = "DisplayString"
_FmOspfStandardLsdbAdvertisement_Object = MibTableColumn
fmOspfStandardLsdbAdvertisement = _FmOspfStandardLsdbAdvertisement_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 4, 1, 8),
    _FmOspfStandardLsdbAdvertisement_Type()
)
fmOspfStandardLsdbAdvertisement.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardLsdbAdvertisement.setStatus("mandatory")
_FmOspfStandardAreaRangeTable_Object = MibTable
fmOspfStandardAreaRangeTable = _FmOspfStandardAreaRangeTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 5)
)
if mibBuilder.loadTexts:
    fmOspfStandardAreaRangeTable.setStatus("mandatory")
_FmOspfStandardAreaRangeEntry_Object = MibTableRow
fmOspfStandardAreaRangeEntry = _FmOspfStandardAreaRangeEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 5, 1)
)
fmOspfStandardAreaRangeEntry.setIndexNames(
    (0, "PCE-MIB", "fmOspfStandardAreaRangeAreaID"),
    (0, "PCE-MIB", "fmOspfStandardAreaRangeNet"),
)
if mibBuilder.loadTexts:
    fmOspfStandardAreaRangeEntry.setStatus("mandatory")
_FmOspfStandardAreaRangeAreaID_Type = IpAddress
_FmOspfStandardAreaRangeAreaID_Object = MibTableColumn
fmOspfStandardAreaRangeAreaID = _FmOspfStandardAreaRangeAreaID_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 5, 1, 1),
    _FmOspfStandardAreaRangeAreaID_Type()
)
fmOspfStandardAreaRangeAreaID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardAreaRangeAreaID.setStatus("mandatory")
_FmOspfStandardAreaRangeNet_Type = IpAddress
_FmOspfStandardAreaRangeNet_Object = MibTableColumn
fmOspfStandardAreaRangeNet = _FmOspfStandardAreaRangeNet_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 5, 1, 2),
    _FmOspfStandardAreaRangeNet_Type()
)
fmOspfStandardAreaRangeNet.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardAreaRangeNet.setStatus("mandatory")
_FmOspfStandardAreaRangeMask_Type = IpAddress
_FmOspfStandardAreaRangeMask_Object = MibTableColumn
fmOspfStandardAreaRangeMask = _FmOspfStandardAreaRangeMask_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 5, 1, 3),
    _FmOspfStandardAreaRangeMask_Type()
)
fmOspfStandardAreaRangeMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardAreaRangeMask.setStatus("mandatory")


class _FmOspfStandardAreaRangeStatus_Type(Integer32):
    """Custom type fmOspfStandardAreaRangeStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FmOspfStandardAreaRangeStatus_Type.__name__ = "Integer32"
_FmOspfStandardAreaRangeStatus_Object = MibTableColumn
fmOspfStandardAreaRangeStatus = _FmOspfStandardAreaRangeStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 5, 1, 4),
    _FmOspfStandardAreaRangeStatus_Type()
)
fmOspfStandardAreaRangeStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardAreaRangeStatus.setStatus("mandatory")
_FmOspfStandardHostTable_Object = MibTable
fmOspfStandardHostTable = _FmOspfStandardHostTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 6)
)
if mibBuilder.loadTexts:
    fmOspfStandardHostTable.setStatus("mandatory")
_FmOspfStandardHostEntry_Object = MibTableRow
fmOspfStandardHostEntry = _FmOspfStandardHostEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 6, 1)
)
fmOspfStandardHostEntry.setIndexNames(
    (0, "PCE-MIB", "fmOspfStandardHostIpAddress"),
    (0, "PCE-MIB", "fmOspfStandardHostTOS"),
)
if mibBuilder.loadTexts:
    fmOspfStandardHostEntry.setStatus("mandatory")
_FmOspfStandardHostIpAddress_Type = IpAddress
_FmOspfStandardHostIpAddress_Object = MibTableColumn
fmOspfStandardHostIpAddress = _FmOspfStandardHostIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 6, 1, 1),
    _FmOspfStandardHostIpAddress_Type()
)
fmOspfStandardHostIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardHostIpAddress.setStatus("mandatory")


class _FmOspfStandardHostTOS_Type(Integer32):
    """Custom type fmOspfStandardHostTOS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_FmOspfStandardHostTOS_Type.__name__ = "Integer32"
_FmOspfStandardHostTOS_Object = MibTableColumn
fmOspfStandardHostTOS = _FmOspfStandardHostTOS_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 6, 1, 2),
    _FmOspfStandardHostTOS_Type()
)
fmOspfStandardHostTOS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardHostTOS.setStatus("mandatory")


class _FmOspfStandardHostMetric_Type(Integer32):
    """Custom type fmOspfStandardHostMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_FmOspfStandardHostMetric_Type.__name__ = "Integer32"
_FmOspfStandardHostMetric_Object = MibTableColumn
fmOspfStandardHostMetric = _FmOspfStandardHostMetric_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 6, 1, 3),
    _FmOspfStandardHostMetric_Type()
)
fmOspfStandardHostMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardHostMetric.setStatus("mandatory")


class _FmOspfStandardHostStatus_Type(Integer32):
    """Custom type fmOspfStandardHostStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FmOspfStandardHostStatus_Type.__name__ = "Integer32"
_FmOspfStandardHostStatus_Object = MibTableColumn
fmOspfStandardHostStatus = _FmOspfStandardHostStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 6, 1, 4),
    _FmOspfStandardHostStatus_Type()
)
fmOspfStandardHostStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardHostStatus.setStatus("mandatory")
_FmOspfStandardIfTable_Object = MibTable
fmOspfStandardIfTable = _FmOspfStandardIfTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7)
)
if mibBuilder.loadTexts:
    fmOspfStandardIfTable.setStatus("mandatory")
_FmOspfStandardIfEntry_Object = MibTableRow
fmOspfStandardIfEntry = _FmOspfStandardIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1)
)
fmOspfStandardIfEntry.setIndexNames(
    (0, "PCE-MIB", "fmOspfStandardIfIpAddress"),
    (0, "PCE-MIB", "fmOspfStandardAddressLessIf"),
)
if mibBuilder.loadTexts:
    fmOspfStandardIfEntry.setStatus("mandatory")
_FmOspfStandardIfIpAddress_Type = IpAddress
_FmOspfStandardIfIpAddress_Object = MibTableColumn
fmOspfStandardIfIpAddress = _FmOspfStandardIfIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 1),
    _FmOspfStandardIfIpAddress_Type()
)
fmOspfStandardIfIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardIfIpAddress.setStatus("mandatory")


class _FmOspfStandardAddressLessIf_Type(Integer32):
    """Custom type fmOspfStandardAddressLessIf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FmOspfStandardAddressLessIf_Type.__name__ = "Integer32"
_FmOspfStandardAddressLessIf_Object = MibTableColumn
fmOspfStandardAddressLessIf = _FmOspfStandardAddressLessIf_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 2),
    _FmOspfStandardAddressLessIf_Type()
)
fmOspfStandardAddressLessIf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardAddressLessIf.setStatus("mandatory")
_FmOspfStandardIfAreaId_Type = IpAddress
_FmOspfStandardIfAreaId_Object = MibTableColumn
fmOspfStandardIfAreaId = _FmOspfStandardIfAreaId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 3),
    _FmOspfStandardIfAreaId_Type()
)
fmOspfStandardIfAreaId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardIfAreaId.setStatus("mandatory")


class _FmOspfStandardIfType_Type(Integer32):
    """Custom type fmOspfStandardIfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("broadcast", 1),
          ("nbma", 2),
          ("pointToPoint", 3))
    )


_FmOspfStandardIfType_Type.__name__ = "Integer32"
_FmOspfStandardIfType_Object = MibTableColumn
fmOspfStandardIfType = _FmOspfStandardIfType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 4),
    _FmOspfStandardIfType_Type()
)
fmOspfStandardIfType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardIfType.setStatus("mandatory")


class _FmOspfStandardIfAdminStat_Type(Integer32):
    """Custom type fmOspfStandardIfAdminStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_FmOspfStandardIfAdminStat_Type.__name__ = "Integer32"
_FmOspfStandardIfAdminStat_Object = MibTableColumn
fmOspfStandardIfAdminStat = _FmOspfStandardIfAdminStat_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 5),
    _FmOspfStandardIfAdminStat_Type()
)
fmOspfStandardIfAdminStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardIfAdminStat.setStatus("mandatory")


class _FmOspfStandardIfRtrPriority_Type(Integer32):
    """Custom type fmOspfStandardIfRtrPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FmOspfStandardIfRtrPriority_Type.__name__ = "Integer32"
_FmOspfStandardIfRtrPriority_Object = MibTableColumn
fmOspfStandardIfRtrPriority = _FmOspfStandardIfRtrPriority_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 6),
    _FmOspfStandardIfRtrPriority_Type()
)
fmOspfStandardIfRtrPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardIfRtrPriority.setStatus("mandatory")


class _FmOspfStandardIfTransitDelay_Type(Integer32):
    """Custom type fmOspfStandardIfTransitDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_FmOspfStandardIfTransitDelay_Type.__name__ = "Integer32"
_FmOspfStandardIfTransitDelay_Object = MibTableColumn
fmOspfStandardIfTransitDelay = _FmOspfStandardIfTransitDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 7),
    _FmOspfStandardIfTransitDelay_Type()
)
fmOspfStandardIfTransitDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardIfTransitDelay.setStatus("mandatory")


class _FmOspfStandardIfRetransInterval_Type(Integer32):
    """Custom type fmOspfStandardIfRetransInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_FmOspfStandardIfRetransInterval_Type.__name__ = "Integer32"
_FmOspfStandardIfRetransInterval_Object = MibTableColumn
fmOspfStandardIfRetransInterval = _FmOspfStandardIfRetransInterval_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 8),
    _FmOspfStandardIfRetransInterval_Type()
)
fmOspfStandardIfRetransInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardIfRetransInterval.setStatus("mandatory")


class _FmOspfStandardIfHelloInterval_Type(Integer32):
    """Custom type fmOspfStandardIfHelloInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_FmOspfStandardIfHelloInterval_Type.__name__ = "Integer32"
_FmOspfStandardIfHelloInterval_Object = MibTableColumn
fmOspfStandardIfHelloInterval = _FmOspfStandardIfHelloInterval_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 9),
    _FmOspfStandardIfHelloInterval_Type()
)
fmOspfStandardIfHelloInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardIfHelloInterval.setStatus("mandatory")


class _FmOspfStandardIfRtrDeadInterval_Type(Integer32):
    """Custom type fmOspfStandardIfRtrDeadInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4294967295),
    )


_FmOspfStandardIfRtrDeadInterval_Type.__name__ = "Integer32"
_FmOspfStandardIfRtrDeadInterval_Object = MibTableColumn
fmOspfStandardIfRtrDeadInterval = _FmOspfStandardIfRtrDeadInterval_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 10),
    _FmOspfStandardIfRtrDeadInterval_Type()
)
fmOspfStandardIfRtrDeadInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardIfRtrDeadInterval.setStatus("mandatory")


class _FmOspfStandardIfPollInterval_Type(Integer32):
    """Custom type fmOspfStandardIfPollInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4294967295),
    )


_FmOspfStandardIfPollInterval_Type.__name__ = "Integer32"
_FmOspfStandardIfPollInterval_Object = MibTableColumn
fmOspfStandardIfPollInterval = _FmOspfStandardIfPollInterval_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 11),
    _FmOspfStandardIfPollInterval_Type()
)
fmOspfStandardIfPollInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardIfPollInterval.setStatus("mandatory")


class _FmOspfStandardIfState_Type(Integer32):
    """Custom type fmOspfStandardIfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("backupDesignatedRouter", 6),
          ("designatedRouter", 5),
          ("down", 1),
          ("loopback", 2),
          ("otherDesignatedRouter", 7),
          ("pointToPoint", 4),
          ("waiting", 3))
    )


_FmOspfStandardIfState_Type.__name__ = "Integer32"
_FmOspfStandardIfState_Object = MibTableColumn
fmOspfStandardIfState = _FmOspfStandardIfState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 12),
    _FmOspfStandardIfState_Type()
)
fmOspfStandardIfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardIfState.setStatus("mandatory")
_FmOspfStandardIfDesignatedRouter_Type = IpAddress
_FmOspfStandardIfDesignatedRouter_Object = MibTableColumn
fmOspfStandardIfDesignatedRouter = _FmOspfStandardIfDesignatedRouter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 13),
    _FmOspfStandardIfDesignatedRouter_Type()
)
fmOspfStandardIfDesignatedRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardIfDesignatedRouter.setStatus("mandatory")
_FmOspfStandardIfBackupDesignatedRouter_Type = IpAddress
_FmOspfStandardIfBackupDesignatedRouter_Object = MibTableColumn
fmOspfStandardIfBackupDesignatedRouter = _FmOspfStandardIfBackupDesignatedRouter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 14),
    _FmOspfStandardIfBackupDesignatedRouter_Type()
)
fmOspfStandardIfBackupDesignatedRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardIfBackupDesignatedRouter.setStatus("mandatory")
_FmOspfStandardIfEvents_Type = Counter32
_FmOspfStandardIfEvents_Object = MibTableColumn
fmOspfStandardIfEvents = _FmOspfStandardIfEvents_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 15),
    _FmOspfStandardIfEvents_Type()
)
fmOspfStandardIfEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardIfEvents.setStatus("mandatory")


class _FmOspfStandardIfAuthKey_Type(DisplayString):
    """Custom type fmOspfStandardIfAuthKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_FmOspfStandardIfAuthKey_Type.__name__ = "DisplayString"
_FmOspfStandardIfAuthKey_Object = MibTableColumn
fmOspfStandardIfAuthKey = _FmOspfStandardIfAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 16),
    _FmOspfStandardIfAuthKey_Type()
)
fmOspfStandardIfAuthKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardIfAuthKey.setStatus("mandatory")
_FmOspfStandardIfMetricTable_Object = MibTable
fmOspfStandardIfMetricTable = _FmOspfStandardIfMetricTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 8)
)
if mibBuilder.loadTexts:
    fmOspfStandardIfMetricTable.setStatus("mandatory")
_FmOspfStandardIfMetricEntry_Object = MibTableRow
fmOspfStandardIfMetricEntry = _FmOspfStandardIfMetricEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 8, 1)
)
fmOspfStandardIfMetricEntry.setIndexNames(
    (0, "PCE-MIB", "fmOspfStandardIfMetricIpAddress"),
    (0, "PCE-MIB", "fmOspfStandardIfMetricAddressLessIf"),
    (0, "PCE-MIB", "fmOspfStandardIfMetricTOS"),
)
if mibBuilder.loadTexts:
    fmOspfStandardIfMetricEntry.setStatus("mandatory")
_FmOspfStandardIfMetricIpAddress_Type = IpAddress
_FmOspfStandardIfMetricIpAddress_Object = MibTableColumn
fmOspfStandardIfMetricIpAddress = _FmOspfStandardIfMetricIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 8, 1, 1),
    _FmOspfStandardIfMetricIpAddress_Type()
)
fmOspfStandardIfMetricIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardIfMetricIpAddress.setStatus("mandatory")


class _FmOspfStandardIfMetricAddressLessIf_Type(Integer32):
    """Custom type fmOspfStandardIfMetricAddressLessIf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FmOspfStandardIfMetricAddressLessIf_Type.__name__ = "Integer32"
_FmOspfStandardIfMetricAddressLessIf_Object = MibTableColumn
fmOspfStandardIfMetricAddressLessIf = _FmOspfStandardIfMetricAddressLessIf_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 8, 1, 2),
    _FmOspfStandardIfMetricAddressLessIf_Type()
)
fmOspfStandardIfMetricAddressLessIf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardIfMetricAddressLessIf.setStatus("mandatory")


class _FmOspfStandardIfMetricTOS_Type(Integer32):
    """Custom type fmOspfStandardIfMetricTOS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_FmOspfStandardIfMetricTOS_Type.__name__ = "Integer32"
_FmOspfStandardIfMetricTOS_Object = MibTableColumn
fmOspfStandardIfMetricTOS = _FmOspfStandardIfMetricTOS_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 8, 1, 3),
    _FmOspfStandardIfMetricTOS_Type()
)
fmOspfStandardIfMetricTOS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardIfMetricTOS.setStatus("mandatory")


class _FmOspfStandardIfMetricMetric_Type(Integer32):
    """Custom type fmOspfStandardIfMetricMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_FmOspfStandardIfMetricMetric_Type.__name__ = "Integer32"
_FmOspfStandardIfMetricMetric_Object = MibTableColumn
fmOspfStandardIfMetricMetric = _FmOspfStandardIfMetricMetric_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 8, 1, 4),
    _FmOspfStandardIfMetricMetric_Type()
)
fmOspfStandardIfMetricMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardIfMetricMetric.setStatus("mandatory")


class _FmOspfStandardIfMetricStatus_Type(Integer32):
    """Custom type fmOspfStandardIfMetricStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FmOspfStandardIfMetricStatus_Type.__name__ = "Integer32"
_FmOspfStandardIfMetricStatus_Object = MibTableColumn
fmOspfStandardIfMetricStatus = _FmOspfStandardIfMetricStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 8, 1, 5),
    _FmOspfStandardIfMetricStatus_Type()
)
fmOspfStandardIfMetricStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardIfMetricStatus.setStatus("mandatory")
_FmOspfStandardVirtIfTable_Object = MibTable
fmOspfStandardVirtIfTable = _FmOspfStandardVirtIfTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9)
)
if mibBuilder.loadTexts:
    fmOspfStandardVirtIfTable.setStatus("mandatory")
_FmOspfStandardVirtIfEntry_Object = MibTableRow
fmOspfStandardVirtIfEntry = _FmOspfStandardVirtIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9, 1)
)
fmOspfStandardVirtIfEntry.setIndexNames(
    (0, "PCE-MIB", "fmOspfStandardVirtIfAreaID"),
    (0, "PCE-MIB", "fmOspfStandardVirtIfNeighbor"),
)
if mibBuilder.loadTexts:
    fmOspfStandardVirtIfEntry.setStatus("mandatory")
_FmOspfStandardVirtIfAreaID_Type = IpAddress
_FmOspfStandardVirtIfAreaID_Object = MibTableColumn
fmOspfStandardVirtIfAreaID = _FmOspfStandardVirtIfAreaID_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9, 1, 1),
    _FmOspfStandardVirtIfAreaID_Type()
)
fmOspfStandardVirtIfAreaID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardVirtIfAreaID.setStatus("mandatory")
_FmOspfStandardVirtIfNeighbor_Type = IpAddress
_FmOspfStandardVirtIfNeighbor_Object = MibTableColumn
fmOspfStandardVirtIfNeighbor = _FmOspfStandardVirtIfNeighbor_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9, 1, 2),
    _FmOspfStandardVirtIfNeighbor_Type()
)
fmOspfStandardVirtIfNeighbor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardVirtIfNeighbor.setStatus("mandatory")


class _FmOspfStandardVirtIfTransitDelay_Type(Integer32):
    """Custom type fmOspfStandardVirtIfTransitDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_FmOspfStandardVirtIfTransitDelay_Type.__name__ = "Integer32"
_FmOspfStandardVirtIfTransitDelay_Object = MibTableColumn
fmOspfStandardVirtIfTransitDelay = _FmOspfStandardVirtIfTransitDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9, 1, 3),
    _FmOspfStandardVirtIfTransitDelay_Type()
)
fmOspfStandardVirtIfTransitDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardVirtIfTransitDelay.setStatus("mandatory")


class _FmOspfStandardVirtIfRetransInterval_Type(Integer32):
    """Custom type fmOspfStandardVirtIfRetransInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3600),
    )


_FmOspfStandardVirtIfRetransInterval_Type.__name__ = "Integer32"
_FmOspfStandardVirtIfRetransInterval_Object = MibTableColumn
fmOspfStandardVirtIfRetransInterval = _FmOspfStandardVirtIfRetransInterval_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9, 1, 4),
    _FmOspfStandardVirtIfRetransInterval_Type()
)
fmOspfStandardVirtIfRetransInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardVirtIfRetransInterval.setStatus("mandatory")


class _FmOspfStandardVirtIfHelloInterval_Type(Integer32):
    """Custom type fmOspfStandardVirtIfHelloInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_FmOspfStandardVirtIfHelloInterval_Type.__name__ = "Integer32"
_FmOspfStandardVirtIfHelloInterval_Object = MibTableColumn
fmOspfStandardVirtIfHelloInterval = _FmOspfStandardVirtIfHelloInterval_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9, 1, 5),
    _FmOspfStandardVirtIfHelloInterval_Type()
)
fmOspfStandardVirtIfHelloInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardVirtIfHelloInterval.setStatus("mandatory")


class _FmOspfStandardVirtIfRtrDeadInterval_Type(Integer32):
    """Custom type fmOspfStandardVirtIfRtrDeadInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4294967295),
    )


_FmOspfStandardVirtIfRtrDeadInterval_Type.__name__ = "Integer32"
_FmOspfStandardVirtIfRtrDeadInterval_Object = MibTableColumn
fmOspfStandardVirtIfRtrDeadInterval = _FmOspfStandardVirtIfRtrDeadInterval_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9, 1, 6),
    _FmOspfStandardVirtIfRtrDeadInterval_Type()
)
fmOspfStandardVirtIfRtrDeadInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardVirtIfRtrDeadInterval.setStatus("mandatory")


class _FmOspfStandardVirtIfState_Type(Integer32):
    """Custom type fmOspfStandardVirtIfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              4)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("pointToPoint", 4))
    )


_FmOspfStandardVirtIfState_Type.__name__ = "Integer32"
_FmOspfStandardVirtIfState_Object = MibTableColumn
fmOspfStandardVirtIfState = _FmOspfStandardVirtIfState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9, 1, 7),
    _FmOspfStandardVirtIfState_Type()
)
fmOspfStandardVirtIfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardVirtIfState.setStatus("mandatory")
_FmOspfStandardVirtIfEvents_Type = Counter32
_FmOspfStandardVirtIfEvents_Object = MibTableColumn
fmOspfStandardVirtIfEvents = _FmOspfStandardVirtIfEvents_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9, 1, 8),
    _FmOspfStandardVirtIfEvents_Type()
)
fmOspfStandardVirtIfEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardVirtIfEvents.setStatus("mandatory")


class _FmOspfStandardVirtIfAuthKey_Type(DisplayString):
    """Custom type fmOspfStandardVirtIfAuthKey based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_FmOspfStandardVirtIfAuthKey_Type.__name__ = "DisplayString"
_FmOspfStandardVirtIfAuthKey_Object = MibTableColumn
fmOspfStandardVirtIfAuthKey = _FmOspfStandardVirtIfAuthKey_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9, 1, 9),
    _FmOspfStandardVirtIfAuthKey_Type()
)
fmOspfStandardVirtIfAuthKey.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardVirtIfAuthKey.setStatus("mandatory")


class _FmOspfStandardVirtIfStatus_Type(Integer32):
    """Custom type fmOspfStandardVirtIfStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FmOspfStandardVirtIfStatus_Type.__name__ = "Integer32"
_FmOspfStandardVirtIfStatus_Object = MibTableColumn
fmOspfStandardVirtIfStatus = _FmOspfStandardVirtIfStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9, 1, 10),
    _FmOspfStandardVirtIfStatus_Type()
)
fmOspfStandardVirtIfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardVirtIfStatus.setStatus("mandatory")
_FmOspfStandardNbrTable_Object = MibTable
fmOspfStandardNbrTable = _FmOspfStandardNbrTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 10)
)
if mibBuilder.loadTexts:
    fmOspfStandardNbrTable.setStatus("mandatory")
_FmOspfStandardNbrEntry_Object = MibTableRow
fmOspfStandardNbrEntry = _FmOspfStandardNbrEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 10, 1)
)
fmOspfStandardNbrEntry.setIndexNames(
    (0, "PCE-MIB", "fmOspfStandardNbrIpAddress"),
    (0, "PCE-MIB", "fmOspfStandardNbrAddressLessIndex"),
)
if mibBuilder.loadTexts:
    fmOspfStandardNbrEntry.setStatus("mandatory")
_FmOspfStandardNbrIpAddress_Type = IpAddress
_FmOspfStandardNbrIpAddress_Object = MibTableColumn
fmOspfStandardNbrIpAddress = _FmOspfStandardNbrIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 10, 1, 1),
    _FmOspfStandardNbrIpAddress_Type()
)
fmOspfStandardNbrIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardNbrIpAddress.setStatus("mandatory")


class _FmOspfStandardNbrAddressLessIndex_Type(Integer32):
    """Custom type fmOspfStandardNbrAddressLessIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FmOspfStandardNbrAddressLessIndex_Type.__name__ = "Integer32"
_FmOspfStandardNbrAddressLessIndex_Object = MibTableColumn
fmOspfStandardNbrAddressLessIndex = _FmOspfStandardNbrAddressLessIndex_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 10, 1, 2),
    _FmOspfStandardNbrAddressLessIndex_Type()
)
fmOspfStandardNbrAddressLessIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardNbrAddressLessIndex.setStatus("mandatory")
_FmOspfStandardNbrRtrId_Type = IpAddress
_FmOspfStandardNbrRtrId_Object = MibTableColumn
fmOspfStandardNbrRtrId = _FmOspfStandardNbrRtrId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 10, 1, 3),
    _FmOspfStandardNbrRtrId_Type()
)
fmOspfStandardNbrRtrId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardNbrRtrId.setStatus("mandatory")


class _FmOspfStandardNbrOptions_Type(Integer32):
    """Custom type fmOspfStandardNbrOptions based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FmOspfStandardNbrOptions_Type.__name__ = "Integer32"
_FmOspfStandardNbrOptions_Object = MibTableColumn
fmOspfStandardNbrOptions = _FmOspfStandardNbrOptions_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 10, 1, 4),
    _FmOspfStandardNbrOptions_Type()
)
fmOspfStandardNbrOptions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardNbrOptions.setStatus("mandatory")


class _FmOspfStandardNbrPriority_Type(Integer32):
    """Custom type fmOspfStandardNbrPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FmOspfStandardNbrPriority_Type.__name__ = "Integer32"
_FmOspfStandardNbrPriority_Object = MibTableColumn
fmOspfStandardNbrPriority = _FmOspfStandardNbrPriority_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 10, 1, 5),
    _FmOspfStandardNbrPriority_Type()
)
fmOspfStandardNbrPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardNbrPriority.setStatus("mandatory")


class _FmOspfStandardNbrState_Type(Integer32):
    """Custom type fmOspfStandardNbrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("attempt", 2),
          ("down", 1),
          ("exchange", 6),
          ("exchangeStart", 5),
          ("full", 8),
          ("init", 3),
          ("loading", 7),
          ("twoWay", 4))
    )


_FmOspfStandardNbrState_Type.__name__ = "Integer32"
_FmOspfStandardNbrState_Object = MibTableColumn
fmOspfStandardNbrState = _FmOspfStandardNbrState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 10, 1, 6),
    _FmOspfStandardNbrState_Type()
)
fmOspfStandardNbrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardNbrState.setStatus("mandatory")
_FmOspfStandardNbrEvents_Type = Counter32
_FmOspfStandardNbrEvents_Object = MibTableColumn
fmOspfStandardNbrEvents = _FmOspfStandardNbrEvents_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 10, 1, 7),
    _FmOspfStandardNbrEvents_Type()
)
fmOspfStandardNbrEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardNbrEvents.setStatus("mandatory")
_FmOspfStandardNbrLSRetransQLen_Type = Gauge32
_FmOspfStandardNbrLSRetransQLen_Object = MibTableColumn
fmOspfStandardNbrLSRetransQLen = _FmOspfStandardNbrLSRetransQLen_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 10, 1, 8),
    _FmOspfStandardNbrLSRetransQLen_Type()
)
fmOspfStandardNbrLSRetransQLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardNbrLSRetransQLen.setStatus("mandatory")


class _FmOspfStandardNBMANbrStatus_Type(Integer32):
    """Custom type fmOspfStandardNBMANbrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FmOspfStandardNBMANbrStatus_Type.__name__ = "Integer32"
_FmOspfStandardNBMANbrStatus_Object = MibTableColumn
fmOspfStandardNBMANbrStatus = _FmOspfStandardNBMANbrStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 10, 1, 9),
    _FmOspfStandardNBMANbrStatus_Type()
)
fmOspfStandardNBMANbrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardNBMANbrStatus.setStatus("mandatory")
_FmOspfStandardVirtNbrTable_Object = MibTable
fmOspfStandardVirtNbrTable = _FmOspfStandardVirtNbrTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 11)
)
if mibBuilder.loadTexts:
    fmOspfStandardVirtNbrTable.setStatus("mandatory")
_FmOspfStandardVirtNbrEntry_Object = MibTableRow
fmOspfStandardVirtNbrEntry = _FmOspfStandardVirtNbrEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 11, 1)
)
fmOspfStandardVirtNbrEntry.setIndexNames(
    (0, "PCE-MIB", "fmOspfStandardVirtNbrArea"),
    (0, "PCE-MIB", "fmOspfStandardVirtNbrRtrId"),
)
if mibBuilder.loadTexts:
    fmOspfStandardVirtNbrEntry.setStatus("mandatory")
_FmOspfStandardVirtNbrArea_Type = IpAddress
_FmOspfStandardVirtNbrArea_Object = MibTableColumn
fmOspfStandardVirtNbrArea = _FmOspfStandardVirtNbrArea_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 11, 1, 1),
    _FmOspfStandardVirtNbrArea_Type()
)
fmOspfStandardVirtNbrArea.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardVirtNbrArea.setStatus("mandatory")
_FmOspfStandardVirtNbrRtrId_Type = IpAddress
_FmOspfStandardVirtNbrRtrId_Object = MibTableColumn
fmOspfStandardVirtNbrRtrId = _FmOspfStandardVirtNbrRtrId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 11, 1, 2),
    _FmOspfStandardVirtNbrRtrId_Type()
)
fmOspfStandardVirtNbrRtrId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardVirtNbrRtrId.setStatus("mandatory")
_FmOspfStandardVirtNbrIpAddr_Type = IpAddress
_FmOspfStandardVirtNbrIpAddr_Object = MibTableColumn
fmOspfStandardVirtNbrIpAddr = _FmOspfStandardVirtNbrIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 11, 1, 3),
    _FmOspfStandardVirtNbrIpAddr_Type()
)
fmOspfStandardVirtNbrIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardVirtNbrIpAddr.setStatus("mandatory")


class _FmOspfStandardVirtNbrOptions_Type(Integer32):
    """Custom type fmOspfStandardVirtNbrOptions based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FmOspfStandardVirtNbrOptions_Type.__name__ = "Integer32"
_FmOspfStandardVirtNbrOptions_Object = MibTableColumn
fmOspfStandardVirtNbrOptions = _FmOspfStandardVirtNbrOptions_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 11, 1, 4),
    _FmOspfStandardVirtNbrOptions_Type()
)
fmOspfStandardVirtNbrOptions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardVirtNbrOptions.setStatus("mandatory")


class _FmOspfStandardVirtNbrState_Type(Integer32):
    """Custom type fmOspfStandardVirtNbrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("attempt", 2),
          ("down", 1),
          ("exchange", 6),
          ("exchangeStart", 5),
          ("full", 8),
          ("init", 3),
          ("loading", 7),
          ("twoWay", 4))
    )


_FmOspfStandardVirtNbrState_Type.__name__ = "Integer32"
_FmOspfStandardVirtNbrState_Object = MibTableColumn
fmOspfStandardVirtNbrState = _FmOspfStandardVirtNbrState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 11, 1, 5),
    _FmOspfStandardVirtNbrState_Type()
)
fmOspfStandardVirtNbrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardVirtNbrState.setStatus("mandatory")
_FmOspfStandardVirtNbrEvents_Type = Counter32
_FmOspfStandardVirtNbrEvents_Object = MibTableColumn
fmOspfStandardVirtNbrEvents = _FmOspfStandardVirtNbrEvents_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 11, 1, 6),
    _FmOspfStandardVirtNbrEvents_Type()
)
fmOspfStandardVirtNbrEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardVirtNbrEvents.setStatus("mandatory")
_FmOspfStandardVirtNbrLSRetransQLen_Type = Gauge32
_FmOspfStandardVirtNbrLSRetransQLen_Object = MibTableColumn
fmOspfStandardVirtNbrLSRetransQLen = _FmOspfStandardVirtNbrLSRetransQLen_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 11, 1, 7),
    _FmOspfStandardVirtNbrLSRetransQLen_Type()
)
fmOspfStandardVirtNbrLSRetransQLen.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmOspfStandardVirtNbrLSRetransQLen.setStatus("mandatory")
_FmUsersRights_ObjectIdentity = ObjectIdentity
fmUsersRights = _FmUsersRights_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20)
)
_FmuVersionRight_ObjectIdentity = ObjectIdentity
fmuVersionRight = _FmuVersionRight_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 1)
)


class _FmuVersMax_Type(Integer32):
    """Custom type fmuVersMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_FmuVersMax_Type.__name__ = "Integer32"
_FmuVersMax_Object = MibScalar
fmuVersMax = _FmuVersMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 1, 1),
    _FmuVersMax_Type()
)
fmuVersMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuVersMax.setStatus("mandatory")
_FmuLineAccess_ObjectIdentity = ObjectIdentity
fmuLineAccess = _FmuLineAccess_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5)
)


class _FmuAccessLineNbMax_Type(Integer32):
    """Custom type fmuAccessLineNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessLineNbMax_Type.__name__ = "Integer32"
_FmuAccessLineNbMax_Object = MibScalar
fmuAccessLineNbMax = _FmuAccessLineNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 1),
    _FmuAccessLineNbMax_Type()
)
fmuAccessLineNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessLineNbMax.setStatus("mandatory")


class _FmuAccessX25PlsLineNbMax_Type(Integer32):
    """Custom type fmuAccessX25PlsLineNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessX25PlsLineNbMax_Type.__name__ = "Integer32"
_FmuAccessX25PlsLineNbMax_Object = MibScalar
fmuAccessX25PlsLineNbMax = _FmuAccessX25PlsLineNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 2),
    _FmuAccessX25PlsLineNbMax_Type()
)
fmuAccessX25PlsLineNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessX25PlsLineNbMax.setStatus("mandatory")


class _FmuAccessX25MlpLineNbMax_Type(Integer32):
    """Custom type fmuAccessX25MlpLineNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessX25MlpLineNbMax_Type.__name__ = "Integer32"
_FmuAccessX25MlpLineNbMax_Object = MibScalar
fmuAccessX25MlpLineNbMax = _FmuAccessX25MlpLineNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 3),
    _FmuAccessX25MlpLineNbMax_Type()
)
fmuAccessX25MlpLineNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessX25MlpLineNbMax.setStatus("mandatory")


class _FmuAccessAsynLineNbMax_Type(Integer32):
    """Custom type fmuAccessAsynLineNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessAsynLineNbMax_Type.__name__ = "Integer32"
_FmuAccessAsynLineNbMax_Object = MibScalar
fmuAccessAsynLineNbMax = _FmuAccessAsynLineNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 4),
    _FmuAccessAsynLineNbMax_Type()
)
fmuAccessAsynLineNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessAsynLineNbMax.setStatus("mandatory")


class _FmuAccessVipLineNbMax_Type(Integer32):
    """Custom type fmuAccessVipLineNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessVipLineNbMax_Type.__name__ = "Integer32"
_FmuAccessVipLineNbMax_Object = MibScalar
fmuAccessVipLineNbMax = _FmuAccessVipLineNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 5),
    _FmuAccessVipLineNbMax_Type()
)
fmuAccessVipLineNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessVipLineNbMax.setStatus("mandatory")


class _FmuAccessSdlcLineNbMax_Type(Integer32):
    """Custom type fmuAccessSdlcLineNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessSdlcLineNbMax_Type.__name__ = "Integer32"
_FmuAccessSdlcLineNbMax_Object = MibScalar
fmuAccessSdlcLineNbMax = _FmuAccessSdlcLineNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 6),
    _FmuAccessSdlcLineNbMax_Type()
)
fmuAccessSdlcLineNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessSdlcLineNbMax.setStatus("mandatory")


class _FmuAccessBsc3270LineNbMax_Type(Integer32):
    """Custom type fmuAccessBsc3270LineNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessBsc3270LineNbMax_Type.__name__ = "Integer32"
_FmuAccessBsc3270LineNbMax_Object = MibScalar
fmuAccessBsc3270LineNbMax = _FmuAccessBsc3270LineNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 7),
    _FmuAccessBsc3270LineNbMax_Type()
)
fmuAccessBsc3270LineNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessBsc3270LineNbMax.setStatus("mandatory")


class _FmuAccessBsc2780LineNbMax_Type(Integer32):
    """Custom type fmuAccessBsc2780LineNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessBsc2780LineNbMax_Type.__name__ = "Integer32"
_FmuAccessBsc2780LineNbMax_Object = MibScalar
fmuAccessBsc2780LineNbMax = _FmuAccessBsc2780LineNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 8),
    _FmuAccessBsc2780LineNbMax_Type()
)
fmuAccessBsc2780LineNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessBsc2780LineNbMax.setStatus("mandatory")


class _FmuAccessBscTranspLineNbMax_Type(Integer32):
    """Custom type fmuAccessBscTranspLineNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessBscTranspLineNbMax_Type.__name__ = "Integer32"
_FmuAccessBscTranspLineNbMax_Object = MibScalar
fmuAccessBscTranspLineNbMax = _FmuAccessBscTranspLineNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 9),
    _FmuAccessBscTranspLineNbMax_Type()
)
fmuAccessBscTranspLineNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessBscTranspLineNbMax.setStatus("mandatory")


class _FmuAccessRnisChannelBNbMax_Type(Integer32):
    """Custom type fmuAccessRnisChannelBNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessRnisChannelBNbMax_Type.__name__ = "Integer32"
_FmuAccessRnisChannelBNbMax_Object = MibScalar
fmuAccessRnisChannelBNbMax = _FmuAccessRnisChannelBNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 10),
    _FmuAccessRnisChannelBNbMax_Type()
)
fmuAccessRnisChannelBNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessRnisChannelBNbMax.setStatus("mandatory")


class _FmuAccessRnisChannelDNbMax_Type(Integer32):
    """Custom type fmuAccessRnisChannelDNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessRnisChannelDNbMax_Type.__name__ = "Integer32"
_FmuAccessRnisChannelDNbMax_Object = MibScalar
fmuAccessRnisChannelDNbMax = _FmuAccessRnisChannelDNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 11),
    _FmuAccessRnisChannelDNbMax_Type()
)
fmuAccessRnisChannelDNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessRnisChannelDNbMax.setStatus("mandatory")


class _FmuAccessHdlcTranspLineNbMax_Type(Integer32):
    """Custom type fmuAccessHdlcTranspLineNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessHdlcTranspLineNbMax_Type.__name__ = "Integer32"
_FmuAccessHdlcTranspLineNbMax_Object = MibScalar
fmuAccessHdlcTranspLineNbMax = _FmuAccessHdlcTranspLineNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 12),
    _FmuAccessHdlcTranspLineNbMax_Type()
)
fmuAccessHdlcTranspLineNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessHdlcTranspLineNbMax.setStatus("mandatory")


class _FmuAccessFrSuscribLineNbMax_Type(Integer32):
    """Custom type fmuAccessFrSuscribLineNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessFrSuscribLineNbMax_Type.__name__ = "Integer32"
_FmuAccessFrSuscribLineNbMax_Object = MibScalar
fmuAccessFrSuscribLineNbMax = _FmuAccessFrSuscribLineNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 13),
    _FmuAccessFrSuscribLineNbMax_Type()
)
fmuAccessFrSuscribLineNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessFrSuscribLineNbMax.setStatus("mandatory")


class _FmuAccessFrPublicNetworkLineNbMax_Type(Integer32):
    """Custom type fmuAccessFrPublicNetworkLineNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessFrPublicNetworkLineNbMax_Type.__name__ = "Integer32"
_FmuAccessFrPublicNetworkLineNbMax_Object = MibScalar
fmuAccessFrPublicNetworkLineNbMax = _FmuAccessFrPublicNetworkLineNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 14),
    _FmuAccessFrPublicNetworkLineNbMax_Type()
)
fmuAccessFrPublicNetworkLineNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessFrPublicNetworkLineNbMax.setStatus("mandatory")


class _FmuAccessFrseLineNbMax_Type(Integer32):
    """Custom type fmuAccessFrseLineNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessFrseLineNbMax_Type.__name__ = "Integer32"
_FmuAccessFrseLineNbMax_Object = MibScalar
fmuAccessFrseLineNbMax = _FmuAccessFrseLineNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 15),
    _FmuAccessFrseLineNbMax_Type()
)
fmuAccessFrseLineNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessFrseLineNbMax.setStatus("mandatory")


class _FmuAccessX29ReroutLineNbMax_Type(Integer32):
    """Custom type fmuAccessX29ReroutLineNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessX29ReroutLineNbMax_Type.__name__ = "Integer32"
_FmuAccessX29ReroutLineNbMax_Object = MibScalar
fmuAccessX29ReroutLineNbMax = _FmuAccessX29ReroutLineNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 16),
    _FmuAccessX29ReroutLineNbMax_Type()
)
fmuAccessX29ReroutLineNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessX29ReroutLineNbMax.setStatus("mandatory")


class _FmuAccessCvfLineNbMax_Type(Integer32):
    """Custom type fmuAccessCvfLineNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessCvfLineNbMax_Type.__name__ = "Integer32"
_FmuAccessCvfLineNbMax_Object = MibScalar
fmuAccessCvfLineNbMax = _FmuAccessCvfLineNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 17),
    _FmuAccessCvfLineNbMax_Type()
)
fmuAccessCvfLineNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessCvfLineNbMax.setStatus("mandatory")


class _FmuAccessX75LineNbMax_Type(Integer32):
    """Custom type fmuAccessX75LineNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessX75LineNbMax_Type.__name__ = "Integer32"
_FmuAccessX75LineNbMax_Object = MibScalar
fmuAccessX75LineNbMax = _FmuAccessX75LineNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 18),
    _FmuAccessX75LineNbMax_Type()
)
fmuAccessX75LineNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessX75LineNbMax.setStatus("mandatory")


class _FmuAccessPaviLineNbMax_Type(Integer32):
    """Custom type fmuAccessPaviLineNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessPaviLineNbMax_Type.__name__ = "Integer32"
_FmuAccessPaviLineNbMax_Object = MibScalar
fmuAccessPaviLineNbMax = _FmuAccessPaviLineNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 19),
    _FmuAccessPaviLineNbMax_Type()
)
fmuAccessPaviLineNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessPaviLineNbMax.setStatus("mandatory")


class _FmuAccessX28PlusLineNbMax_Type(Integer32):
    """Custom type fmuAccessX28PlusLineNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessX28PlusLineNbMax_Type.__name__ = "Integer32"
_FmuAccessX28PlusLineNbMax_Object = MibScalar
fmuAccessX28PlusLineNbMax = _FmuAccessX28PlusLineNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 20),
    _FmuAccessX28PlusLineNbMax_Type()
)
fmuAccessX28PlusLineNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessX28PlusLineNbMax.setStatus("mandatory")


class _FmuAccessPadLineNbMax_Type(Integer32):
    """Custom type fmuAccessPadLineNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessPadLineNbMax_Type.__name__ = "Integer32"
_FmuAccessPadLineNbMax_Object = MibScalar
fmuAccessPadLineNbMax = _FmuAccessPadLineNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 21),
    _FmuAccessPadLineNbMax_Type()
)
fmuAccessPadLineNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessPadLineNbMax.setStatus("mandatory")


class _FmuAccessPppaLineNbMax_Type(Integer32):
    """Custom type fmuAccessPppaLineNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessPppaLineNbMax_Type.__name__ = "Integer32"
_FmuAccessPppaLineNbMax_Object = MibScalar
fmuAccessPppaLineNbMax = _FmuAccessPppaLineNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 22),
    _FmuAccessPppaLineNbMax_Type()
)
fmuAccessPppaLineNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessPppaLineNbMax.setStatus("mandatory")


class _FmuAccessPppsLineNbMax_Type(Integer32):
    """Custom type fmuAccessPppsLineNbMax based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 12),
    )


_FmuAccessPppsLineNbMax_Type.__name__ = "Integer32"
_FmuAccessPppsLineNbMax_Object = MibScalar
fmuAccessPppsLineNbMax = _FmuAccessPppsLineNbMax_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 23),
    _FmuAccessPppsLineNbMax_Type()
)
fmuAccessPppsLineNbMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuAccessPppsLineNbMax.setStatus("mandatory")
_FmuFunctionRight_ObjectIdentity = ObjectIdentity
fmuFunctionRight = _FmuFunctionRight_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10)
)


class _FmuFunctionRouterAndBridge_Type(Integer32):
    """Custom type fmuFunctionRouterAndBridge based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("mcx104-64kbs", 1),
          ("pont", 2),
          ("pontAndRouteurIP", 4),
          ("routeurIP", 3))
    )


_FmuFunctionRouterAndBridge_Type.__name__ = "Integer32"
_FmuFunctionRouterAndBridge_Object = MibScalar
fmuFunctionRouterAndBridge = _FmuFunctionRouterAndBridge_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 1),
    _FmuFunctionRouterAndBridge_Type()
)
fmuFunctionRouterAndBridge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuFunctionRouterAndBridge.setStatus("mandatory")


class _FmuFunctionMemTypeForMCXType4_Type(Integer32):
    """Custom type fmuFunctionMemTypeForMCXType4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("flash2Mo-ram2Mo", 1),
          ("flash2Mo-ram4Mo", 3),
          ("flash4Mo-ram2Mo", 2),
          ("flash4Mo-ram4Mo", 4),
          ("obsolete-object", 5))
    )


_FmuFunctionMemTypeForMCXType4_Type.__name__ = "Integer32"
_FmuFunctionMemTypeForMCXType4_Object = MibScalar
fmuFunctionMemTypeForMCXType4 = _FmuFunctionMemTypeForMCXType4_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 2),
    _FmuFunctionMemTypeForMCXType4_Type()
)
fmuFunctionMemTypeForMCXType4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuFunctionMemTypeForMCXType4.setStatus("mandatory")


class _FmuFunctionAccessFrProtoco_Type(Integer32):
    """Custom type fmuFunctionAccessFrProtoco based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_FmuFunctionAccessFrProtoco_Type.__name__ = "Integer32"
_FmuFunctionAccessFrProtoco_Object = MibScalar
fmuFunctionAccessFrProtoco = _FmuFunctionAccessFrProtoco_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 3),
    _FmuFunctionAccessFrProtoco_Type()
)
fmuFunctionAccessFrProtoco.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuFunctionAccessFrProtoco.setStatus("mandatory")


class _FmuFunctionBridgeAndStp_Type(Integer32):
    """Custom type fmuFunctionBridgeAndStp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_FmuFunctionBridgeAndStp_Type.__name__ = "Integer32"
_FmuFunctionBridgeAndStp_Object = MibScalar
fmuFunctionBridgeAndStp = _FmuFunctionBridgeAndStp_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 4),
    _FmuFunctionBridgeAndStp_Type()
)
fmuFunctionBridgeAndStp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuFunctionBridgeAndStp.setStatus("mandatory")


class _FmuFunctionIpRouter_Type(Integer32):
    """Custom type fmuFunctionIpRouter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_FmuFunctionIpRouter_Type.__name__ = "Integer32"
_FmuFunctionIpRouter_Object = MibScalar
fmuFunctionIpRouter = _FmuFunctionIpRouter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 5),
    _FmuFunctionIpRouter_Type()
)
fmuFunctionIpRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuFunctionIpRouter.setStatus("mandatory")


class _FmuFunctionIpxRouter_Type(Integer32):
    """Custom type fmuFunctionIpxRouter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_FmuFunctionIpxRouter_Type.__name__ = "Integer32"
_FmuFunctionIpxRouter_Object = MibScalar
fmuFunctionIpxRouter = _FmuFunctionIpxRouter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 6),
    _FmuFunctionIpxRouter_Type()
)
fmuFunctionIpxRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuFunctionIpxRouter.setStatus("mandatory")


class _FmuFunctionClnpRouter_Type(Integer32):
    """Custom type fmuFunctionClnpRouter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_FmuFunctionClnpRouter_Type.__name__ = "Integer32"
_FmuFunctionClnpRouter_Object = MibScalar
fmuFunctionClnpRouter = _FmuFunctionClnpRouter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 7),
    _FmuFunctionClnpRouter_Type()
)
fmuFunctionClnpRouter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuFunctionClnpRouter.setStatus("mandatory")


class _FmuFunctionLz77Compression_Type(Integer32):
    """Custom type fmuFunctionLz77Compression based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_FmuFunctionLz77Compression_Type.__name__ = "Integer32"
_FmuFunctionLz77Compression_Object = MibScalar
fmuFunctionLz77Compression = _FmuFunctionLz77Compression_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 8),
    _FmuFunctionLz77Compression_Type()
)
fmuFunctionLz77Compression.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuFunctionLz77Compression.setStatus("mandatory")


class _FmuFunctionLz78Compression_Type(Integer32):
    """Custom type fmuFunctionLz78Compression based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_FmuFunctionLz78Compression_Type.__name__ = "Integer32"
_FmuFunctionLz78Compression_Object = MibScalar
fmuFunctionLz78Compression = _FmuFunctionLz78Compression_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 9),
    _FmuFunctionLz78Compression_Type()
)
fmuFunctionLz78Compression.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuFunctionLz78Compression.setStatus("mandatory")


class _FmuFunctionSecurCard_Type(Integer32):
    """Custom type fmuFunctionSecurCard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_FmuFunctionSecurCard_Type.__name__ = "Integer32"
_FmuFunctionSecurCard_Object = MibScalar
fmuFunctionSecurCard = _FmuFunctionSecurCard_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 10),
    _FmuFunctionSecurCard_Type()
)
fmuFunctionSecurCard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuFunctionSecurCard.setStatus("mandatory")


class _FmuFunctionLoadStat_Type(Integer32):
    """Custom type fmuFunctionLoadStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_FmuFunctionLoadStat_Type.__name__ = "Integer32"
_FmuFunctionLoadStat_Object = MibScalar
fmuFunctionLoadStat = _FmuFunctionLoadStat_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 11),
    _FmuFunctionLoadStat_Type()
)
fmuFunctionLoadStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuFunctionLoadStat.setStatus("mandatory")


class _FmuFunctionOverflowResc_Type(Integer32):
    """Custom type fmuFunctionOverflowResc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_FmuFunctionOverflowResc_Type.__name__ = "Integer32"
_FmuFunctionOverflowResc_Object = MibScalar
fmuFunctionOverflowResc = _FmuFunctionOverflowResc_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 12),
    _FmuFunctionOverflowResc_Type()
)
fmuFunctionOverflowResc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuFunctionOverflowResc.setStatus("mandatory")


class _FmuFunctionPae_Type(Integer32):
    """Custom type fmuFunctionPae based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_FmuFunctionPae_Type.__name__ = "Integer32"
_FmuFunctionPae_Object = MibScalar
fmuFunctionPae = _FmuFunctionPae_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 13),
    _FmuFunctionPae_Type()
)
fmuFunctionPae.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuFunctionPae.setStatus("mandatory")


class _FmuFunctionOnlineFileTransfer_Type(Integer32):
    """Custom type fmuFunctionOnlineFileTransfer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_FmuFunctionOnlineFileTransfer_Type.__name__ = "Integer32"
_FmuFunctionOnlineFileTransfer_Object = MibScalar
fmuFunctionOnlineFileTransfer = _FmuFunctionOnlineFileTransfer_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 14),
    _FmuFunctionOnlineFileTransfer_Type()
)
fmuFunctionOnlineFileTransfer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuFunctionOnlineFileTransfer.setStatus("mandatory")


class _FmuFunctionDPacket_Type(Integer32):
    """Custom type fmuFunctionDPacket based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_FmuFunctionDPacket_Type.__name__ = "Integer32"
_FmuFunctionDPacket_Object = MibScalar
fmuFunctionDPacket = _FmuFunctionDPacket_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 15),
    _FmuFunctionDPacket_Type()
)
fmuFunctionDPacket.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuFunctionDPacket.setStatus("mandatory")


class _FmuFunctionExploitMibUse_Type(Integer32):
    """Custom type fmuFunctionExploitMibUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_FmuFunctionExploitMibUse_Type.__name__ = "Integer32"
_FmuFunctionExploitMibUse_Object = MibScalar
fmuFunctionExploitMibUse = _FmuFunctionExploitMibUse_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 16),
    _FmuFunctionExploitMibUse_Type()
)
fmuFunctionExploitMibUse.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuFunctionExploitMibUse.setStatus("mandatory")


class _FmuFunctionLlcOnEthernet_Type(Integer32):
    """Custom type fmuFunctionLlcOnEthernet based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_FmuFunctionLlcOnEthernet_Type.__name__ = "Integer32"
_FmuFunctionLlcOnEthernet_Object = MibScalar
fmuFunctionLlcOnEthernet = _FmuFunctionLlcOnEthernet_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 17),
    _FmuFunctionLlcOnEthernet_Type()
)
fmuFunctionLlcOnEthernet.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmuFunctionLlcOnEthernet.setStatus("mandatory")
_FmHardwareId_ObjectIdentity = ObjectIdentity
fmHardwareId = _FmHardwareId_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25)
)
_FmhTechnicalsFeatures_ObjectIdentity = ObjectIdentity
fmhTechnicalsFeatures = _FmhTechnicalsFeatures_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 1)
)


class _FmhTechnicEquipmType_Type(Integer32):
    """Custom type fmhTechnicEquipmType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("cmd-chd", 9),
          ("frx-msb2-1", 10),
          ("frx-msb2-s2", 11),
          ("lmx506-3", 3),
          ("lmx506-type1", 1),
          ("lmx506-type2", 6),
          ("mcx-type1", 4),
          ("mcx-type2", 5),
          ("mcx104", 2),
          ("mcx300B", 7),
          ("mcx300H", 8),
          ("vpb", 12))
    )


_FmhTechnicEquipmType_Type.__name__ = "Integer32"
_FmhTechnicEquipmType_Object = MibScalar
fmhTechnicEquipmType = _FmhTechnicEquipmType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 1, 1),
    _FmhTechnicEquipmType_Type()
)
fmhTechnicEquipmType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmhTechnicEquipmType.setStatus("mandatory")


class _FmhTechnicLineNb_Type(Integer32):
    """Custom type fmhTechnicLineNb based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 12),
    )


_FmhTechnicLineNb_Type.__name__ = "Integer32"
_FmhTechnicLineNb_Object = MibScalar
fmhTechnicLineNb = _FmhTechnicLineNb_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 1, 2),
    _FmhTechnicLineNb_Type()
)
fmhTechnicLineNb.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmhTechnicLineNb.setStatus("mandatory")


class _FmhTechnicPromFlashSize_Type(Integer32):
    """Custom type fmhTechnicPromFlashSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21)
        )
    )
    namedValues = NamedValues(
        *(("flash-10M", 18),
          ("flash-12M", 19),
          ("flash-14M", 20),
          ("flash-16M", 21),
          ("flash-1M", 3),
          ("flash-1M256", 4),
          ("flash-1M512", 5),
          ("flash-1M768", 6),
          ("flash-2M", 7),
          ("flash-2M256", 8),
          ("flash-2M512", 9),
          ("flash-2M768", 10),
          ("flash-3M", 11),
          ("flash-3M256", 12),
          ("flash-3M512", 13),
          ("flash-3M768", 14),
          ("flash-4M", 15),
          ("flash-512K", 1),
          ("flash-6M", 16),
          ("flash-768K", 2),
          ("flash-8M", 17))
    )


_FmhTechnicPromFlashSize_Type.__name__ = "Integer32"
_FmhTechnicPromFlashSize_Object = MibScalar
fmhTechnicPromFlashSize = _FmhTechnicPromFlashSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 1, 3),
    _FmhTechnicPromFlashSize_Type()
)
fmhTechnicPromFlashSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmhTechnicPromFlashSize.setStatus("mandatory")


class _FmhTechnicRamSize_Type(Integer32):
    """Custom type fmhTechnicRamSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("ram-16M", 7),
          ("ram-1M", 2),
          ("ram-1M512", 3),
          ("ram-2M", 4),
          ("ram-32M", 8),
          ("ram-4M", 5),
          ("ram-512K", 1),
          ("ram-8M", 6))
    )


_FmhTechnicRamSize_Type.__name__ = "Integer32"
_FmhTechnicRamSize_Object = MibScalar
fmhTechnicRamSize = _FmhTechnicRamSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 1, 4),
    _FmhTechnicRamSize_Type()
)
fmhTechnicRamSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmhTechnicRamSize.setStatus("mandatory")


class _FmhTechnicEepromSize_Type(Integer32):
    """Custom type fmhTechnicEepromSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("eeprom-128K", 3),
          ("eeprom-256K", 4),
          ("eeprom-32K", 1),
          ("eeprom-64K", 2))
    )


_FmhTechnicEepromSize_Type.__name__ = "Integer32"
_FmhTechnicEepromSize_Object = MibScalar
fmhTechnicEepromSize = _FmhTechnicEepromSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 1, 5),
    _FmhTechnicEepromSize_Type()
)
fmhTechnicEepromSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmhTechnicEepromSize.setStatus("mandatory")


class _FmhTechnicTransputerPresence_Type(Integer32):
    """Custom type fmhTechnicTransputerPresence based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notpresent", 1),
          ("present", 2))
    )


_FmhTechnicTransputerPresence_Type.__name__ = "Integer32"
_FmhTechnicTransputerPresence_Object = MibScalar
fmhTechnicTransputerPresence = _FmhTechnicTransputerPresence_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 1, 6),
    _FmhTechnicTransputerPresence_Type()
)
fmhTechnicTransputerPresence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmhTechnicTransputerPresence.setStatus("mandatory")


class _FmhTechnicEthernetPresence_Type(Integer32):
    """Custom type fmhTechnicEthernetPresence based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notpresent", 1),
          ("present", 2))
    )


_FmhTechnicEthernetPresence_Type.__name__ = "Integer32"
_FmhTechnicEthernetPresence_Object = MibScalar
fmhTechnicEthernetPresence = _FmhTechnicEthernetPresence_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 1, 7),
    _FmhTechnicEthernetPresence_Type()
)
fmhTechnicEthernetPresence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmhTechnicEthernetPresence.setStatus("mandatory")


class _FmhTechnicTokenRingPresence_Type(Integer32):
    """Custom type fmhTechnicTokenRingPresence based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notpresent", 1),
          ("present", 2))
    )


_FmhTechnicTokenRingPresence_Type.__name__ = "Integer32"
_FmhTechnicTokenRingPresence_Object = MibScalar
fmhTechnicTokenRingPresence = _FmhTechnicTokenRingPresence_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 1, 8),
    _FmhTechnicTokenRingPresence_Type()
)
fmhTechnicTokenRingPresence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmhTechnicTokenRingPresence.setStatus("mandatory")


class _FmhTechnicMacAdress_Type(OctetString):
    """Custom type fmhTechnicMacAdress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_FmhTechnicMacAdress_Type.__name__ = "OctetString"
_FmhTechnicMacAdress_Object = MibScalar
fmhTechnicMacAdress = _FmhTechnicMacAdress_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 1, 9),
    _FmhTechnicMacAdress_Type()
)
fmhTechnicMacAdress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmhTechnicMacAdress.setStatus("mandatory")
_FmhEquipmentId_ObjectIdentity = ObjectIdentity
fmhEquipmentId = _FmhEquipmentId_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 5)
)


class _FmhEqIdReference_Type(Integer32):
    """Custom type fmhEqIdReference based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_FmhEqIdReference_Type.__name__ = "Integer32"
_FmhEqIdReference_Object = MibScalar
fmhEqIdReference = _FmhEqIdReference_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 5, 1),
    _FmhEqIdReference_Type()
)
fmhEqIdReference.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmhEqIdReference.setStatus("mandatory")


class _FmhEqIdSerialNbEncodingType_Type(Integer32):
    """Custom type fmhEqIdSerialNbEncodingType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("bcd", 1),
          ("hexa", 2))
    )


_FmhEqIdSerialNbEncodingType_Type.__name__ = "Integer32"
_FmhEqIdSerialNbEncodingType_Object = MibScalar
fmhEqIdSerialNbEncodingType = _FmhEqIdSerialNbEncodingType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 5, 2),
    _FmhEqIdSerialNbEncodingType_Type()
)
fmhEqIdSerialNbEncodingType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmhEqIdSerialNbEncodingType.setStatus("mandatory")


class _FmhEqIdSerialNb_Type(OctetString):
    """Custom type fmhEqIdSerialNb based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_FmhEqIdSerialNb_Type.__name__ = "OctetString"
_FmhEqIdSerialNb_Object = MibScalar
fmhEqIdSerialNb = _FmhEqIdSerialNb_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 5, 3),
    _FmhEqIdSerialNb_Type()
)
fmhEqIdSerialNb.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmhEqIdSerialNb.setStatus("mandatory")


class _FmhEqIdFactoryReleaseDate_Type(OctetString):
    """Custom type fmhEqIdFactoryReleaseDate based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(3, 3),
    )


_FmhEqIdFactoryReleaseDate_Type.__name__ = "OctetString"
_FmhEqIdFactoryReleaseDate_Object = MibScalar
fmhEqIdFactoryReleaseDate = _FmhEqIdFactoryReleaseDate_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 5, 4),
    _FmhEqIdFactoryReleaseDate_Type()
)
fmhEqIdFactoryReleaseDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmhEqIdFactoryReleaseDate.setStatus("mandatory")


class _FmhEqIdFirstFactoryReturnDate_Type(OctetString):
    """Custom type fmhEqIdFirstFactoryReturnDate based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(3, 3),
    )


_FmhEqIdFirstFactoryReturnDate_Type.__name__ = "OctetString"
_FmhEqIdFirstFactoryReturnDate_Object = MibScalar
fmhEqIdFirstFactoryReturnDate = _FmhEqIdFirstFactoryReturnDate_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 5, 5),
    _FmhEqIdFirstFactoryReturnDate_Type()
)
fmhEqIdFirstFactoryReturnDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmhEqIdFirstFactoryReturnDate.setStatus("mandatory")


class _FmhEqIdSecondFactoryReturnDate_Type(OctetString):
    """Custom type fmhEqIdSecondFactoryReturnDate based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(3, 3),
    )


_FmhEqIdSecondFactoryReturnDate_Type.__name__ = "OctetString"
_FmhEqIdSecondFactoryReturnDate_Object = MibScalar
fmhEqIdSecondFactoryReturnDate = _FmhEqIdSecondFactoryReturnDate_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 5, 6),
    _FmhEqIdSecondFactoryReturnDate_Type()
)
fmhEqIdSecondFactoryReturnDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmhEqIdSecondFactoryReturnDate.setStatus("mandatory")


class _FmhEqIdThirdFactoryReturnDate_Type(OctetString):
    """Custom type fmhEqIdThirdFactoryReturnDate based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(3, 3),
    )


_FmhEqIdThirdFactoryReturnDate_Type.__name__ = "OctetString"
_FmhEqIdThirdFactoryReturnDate_Object = MibScalar
fmhEqIdThirdFactoryReturnDate = _FmhEqIdThirdFactoryReturnDate_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 5, 7),
    _FmhEqIdThirdFactoryReturnDate_Type()
)
fmhEqIdThirdFactoryReturnDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmhEqIdThirdFactoryReturnDate.setStatus("mandatory")


class _FmhEqIdFourthFactoryReturnDate_Type(OctetString):
    """Custom type fmhEqIdFourthFactoryReturnDate based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(3, 3),
    )


_FmhEqIdFourthFactoryReturnDate_Type.__name__ = "OctetString"
_FmhEqIdFourthFactoryReturnDate_Object = MibScalar
fmhEqIdFourthFactoryReturnDate = _FmhEqIdFourthFactoryReturnDate_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 5, 8),
    _FmhEqIdFourthFactoryReturnDate_Type()
)
fmhEqIdFourthFactoryReturnDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmhEqIdFourthFactoryReturnDate.setStatus("mandatory")


class _FmhEqIdFifthFactoryReturnDate_Type(OctetString):
    """Custom type fmhEqIdFifthFactoryReturnDate based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(3, 3),
    )


_FmhEqIdFifthFactoryReturnDate_Type.__name__ = "OctetString"
_FmhEqIdFifthFactoryReturnDate_Object = MibScalar
fmhEqIdFifthFactoryReturnDate = _FmhEqIdFifthFactoryReturnDate_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 5, 9),
    _FmhEqIdFifthFactoryReturnDate_Type()
)
fmhEqIdFifthFactoryReturnDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmhEqIdFifthFactoryReturnDate.setStatus("mandatory")
_FmhE1S2ModuleDescription_ObjectIdentity = ObjectIdentity
fmhE1S2ModuleDescription = _FmhE1S2ModuleDescription_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 10)
)


class _FmhE1S2ModDescSoftwareVersion_Type(DisplayString):
    """Custom type fmhE1S2ModDescSoftwareVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_FmhE1S2ModDescSoftwareVersion_Type.__name__ = "DisplayString"
_FmhE1S2ModDescSoftwareVersion_Object = MibScalar
fmhE1S2ModDescSoftwareVersion = _FmhE1S2ModDescSoftwareVersion_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 10, 1),
    _FmhE1S2ModDescSoftwareVersion_Type()
)
fmhE1S2ModDescSoftwareVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmhE1S2ModDescSoftwareVersion.setStatus("mandatory")


class _FmhE1S2ModDescHardwareVersion_Type(DisplayString):
    """Custom type fmhE1S2ModDescHardwareVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_FmhE1S2ModDescHardwareVersion_Type.__name__ = "DisplayString"
_FmhE1S2ModDescHardwareVersion_Object = MibScalar
fmhE1S2ModDescHardwareVersion = _FmhE1S2ModDescHardwareVersion_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 10, 2),
    _FmhE1S2ModDescHardwareVersion_Type()
)
fmhE1S2ModDescHardwareVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmhE1S2ModDescHardwareVersion.setStatus("mandatory")
_FmsInverseArp_ObjectIdentity = ObjectIdentity
fmsInverseArp = _FmsInverseArp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 26)
)
_FmsInArpVirtualPortTable_Object = MibTable
fmsInArpVirtualPortTable = _FmsInArpVirtualPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 26, 1)
)
if mibBuilder.loadTexts:
    fmsInArpVirtualPortTable.setStatus("mandatory")
_FmsInArpVirtualPortEntry_Object = MibTableRow
fmsInArpVirtualPortEntry = _FmsInArpVirtualPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 26, 1, 1)
)
fmsInArpVirtualPortEntry.setIndexNames(
    (0, "PCE-MIB", "fmsInArpVpConnX121"),
)
if mibBuilder.loadTexts:
    fmsInArpVirtualPortEntry.setStatus("mandatory")


class _FmsInArpVpConnX121_Type(OctetString):
    """Custom type fmsInArpVpConnX121 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_FmsInArpVpConnX121_Type.__name__ = "OctetString"
_FmsInArpVpConnX121_Object = MibTableColumn
fmsInArpVpConnX121 = _FmsInArpVpConnX121_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 26, 1, 1, 1),
    _FmsInArpVpConnX121_Type()
)
fmsInArpVpConnX121.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsInArpVpConnX121.setStatus("mandatory")


class _FmsInArpVpVirtualPortId_Type(Integer32):
    """Custom type fmsInArpVpVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FmsInArpVpVirtualPortId_Type.__name__ = "Integer32"
_FmsInArpVpVirtualPortId_Object = MibTableColumn
fmsInArpVpVirtualPortId = _FmsInArpVpVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 26, 1, 1, 2),
    _FmsInArpVpVirtualPortId_Type()
)
fmsInArpVpVirtualPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsInArpVpVirtualPortId.setStatus("mandatory")
_FmsInArpVpOutRequests_Type = Counter32
_FmsInArpVpOutRequests_Object = MibTableColumn
fmsInArpVpOutRequests = _FmsInArpVpOutRequests_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 26, 1, 1, 3),
    _FmsInArpVpOutRequests_Type()
)
fmsInArpVpOutRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsInArpVpOutRequests.setStatus("mandatory")
_FmsInArpVpInResponses_Type = Counter32
_FmsInArpVpInResponses_Object = MibTableColumn
fmsInArpVpInResponses = _FmsInArpVpInResponses_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 26, 1, 1, 4),
    _FmsInArpVpInResponses_Type()
)
fmsInArpVpInResponses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsInArpVpInResponses.setStatus("mandatory")
_FmsInArpVpInRequests_Type = Counter32
_FmsInArpVpInRequests_Object = MibTableColumn
fmsInArpVpInRequests = _FmsInArpVpInRequests_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 26, 1, 1, 5),
    _FmsInArpVpInRequests_Type()
)
fmsInArpVpInRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsInArpVpInRequests.setStatus("mandatory")
_FmsInArpVpOutResponses_Type = Counter32
_FmsInArpVpOutResponses_Object = MibTableColumn
fmsInArpVpOutResponses = _FmsInArpVpOutResponses_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 26, 1, 1, 6),
    _FmsInArpVpOutResponses_Type()
)
fmsInArpVpOutResponses.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsInArpVpOutResponses.setStatus("mandatory")


class _FmsInArpVpInverseArpStatus_Type(Integer32):
    """Custom type fmsInArpVpInverseArpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("successful", 2),
          ("unsuccessful", 1))
    )


_FmsInArpVpInverseArpStatus_Type.__name__ = "Integer32"
_FmsInArpVpInverseArpStatus_Object = MibTableColumn
fmsInArpVpInverseArpStatus = _FmsInArpVpInverseArpStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 26, 1, 1, 7),
    _FmsInArpVpInverseArpStatus_Type()
)
fmsInArpVpInverseArpStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsInArpVpInverseArpStatus.setStatus("mandatory")
_FmsInArpVpRemoteIpAddr_Type = IpAddress
_FmsInArpVpRemoteIpAddr_Object = MibTableColumn
fmsInArpVpRemoteIpAddr = _FmsInArpVpRemoteIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 26, 1, 1, 8),
    _FmsInArpVpRemoteIpAddr_Type()
)
fmsInArpVpRemoteIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsInArpVpRemoteIpAddr.setStatus("mandatory")
_FmsInArpVpLocalIpAddr_Type = IpAddress
_FmsInArpVpLocalIpAddr_Object = MibTableColumn
fmsInArpVpLocalIpAddr = _FmsInArpVpLocalIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 26, 1, 1, 9),
    _FmsInArpVpLocalIpAddr_Type()
)
fmsInArpVpLocalIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsInArpVpLocalIpAddr.setStatus("mandatory")
_FmsBootP_ObjectIdentity = ObjectIdentity
fmsBootP = _FmsBootP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 27)
)
_FmsBootPClient_ObjectIdentity = ObjectIdentity
fmsBootPClient = _FmsBootPClient_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 1)
)


class _FmsBootPClientStatus_Type(Integer32):
    """Custom type fmsBootPClientStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("failed", 4),
          ("inProgress", 2),
          ("notLaunched", 1),
          ("succeed", 3))
    )


_FmsBootPClientStatus_Type.__name__ = "Integer32"
_FmsBootPClientStatus_Object = MibScalar
fmsBootPClientStatus = _FmsBootPClientStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 1, 1),
    _FmsBootPClientStatus_Type()
)
fmsBootPClientStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsBootPClientStatus.setStatus("mandatory")


class _FmsBootPClientFileName_Type(DisplayString):
    """Custom type fmsBootPClientFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_FmsBootPClientFileName_Type.__name__ = "DisplayString"
_FmsBootPClientFileName_Object = MibScalar
fmsBootPClientFileName = _FmsBootPClientFileName_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 1, 2),
    _FmsBootPClientFileName_Type()
)
fmsBootPClientFileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsBootPClientFileName.setStatus("mandatory")
_FmsBootPClientServerIpAddr_Type = IpAddress
_FmsBootPClientServerIpAddr_Object = MibScalar
fmsBootPClientServerIpAddr = _FmsBootPClientServerIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 1, 3),
    _FmsBootPClientServerIpAddr_Type()
)
fmsBootPClientServerIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsBootPClientServerIpAddr.setStatus("mandatory")
_FmsBootPClientGatewayIpAddr_Type = IpAddress
_FmsBootPClientGatewayIpAddr_Object = MibScalar
fmsBootPClientGatewayIpAddr = _FmsBootPClientGatewayIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 1, 4),
    _FmsBootPClientGatewayIpAddr_Type()
)
fmsBootPClientGatewayIpAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsBootPClientGatewayIpAddr.setStatus("mandatory")
_FmsBootPRelayTable_Object = MibTable
fmsBootPRelayTable = _FmsBootPRelayTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 10)
)
if mibBuilder.loadTexts:
    fmsBootPRelayTable.setStatus("mandatory")
_FmsBootPRelayEntry_Object = MibTableRow
fmsBootPRelayEntry = _FmsBootPRelayEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 10, 1)
)
fmsBootPRelayEntry.setIndexNames(
    (0, "PCE-MIB", "fmsBootPRelayVirtualPortId"),
)
if mibBuilder.loadTexts:
    fmsBootPRelayEntry.setStatus("mandatory")


class _FmsBootPRelayVirtualPortId_Type(Integer32):
    """Custom type fmsBootPRelayVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_FmsBootPRelayVirtualPortId_Type.__name__ = "Integer32"
_FmsBootPRelayVirtualPortId_Object = MibTableColumn
fmsBootPRelayVirtualPortId = _FmsBootPRelayVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 10, 1, 1),
    _FmsBootPRelayVirtualPortId_Type()
)
fmsBootPRelayVirtualPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsBootPRelayVirtualPortId.setStatus("mandatory")
_FmsBootPRelayRelayedPkts_Type = Counter32
_FmsBootPRelayRelayedPkts_Object = MibTableColumn
fmsBootPRelayRelayedPkts = _FmsBootPRelayRelayedPkts_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 10, 1, 2),
    _FmsBootPRelayRelayedPkts_Type()
)
fmsBootPRelayRelayedPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsBootPRelayRelayedPkts.setStatus("mandatory")
_FmsBootPRelayDroppedPkts_Type = Counter32
_FmsBootPRelayDroppedPkts_Object = MibTableColumn
fmsBootPRelayDroppedPkts = _FmsBootPRelayDroppedPkts_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 10, 1, 3),
    _FmsBootPRelayDroppedPkts_Type()
)
fmsBootPRelayDroppedPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsBootPRelayDroppedPkts.setStatus("mandatory")
_FmsBootPRelayRecRequests_Type = Counter32
_FmsBootPRelayRecRequests_Object = MibTableColumn
fmsBootPRelayRecRequests = _FmsBootPRelayRecRequests_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 10, 1, 4),
    _FmsBootPRelayRecRequests_Type()
)
fmsBootPRelayRecRequests.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsBootPRelayRecRequests.setStatus("mandatory")
_FmsBootPRelayRecReplies_Type = Counter32
_FmsBootPRelayRecReplies_Object = MibTableColumn
fmsBootPRelayRecReplies = _FmsBootPRelayRecReplies_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 10, 1, 5),
    _FmsBootPRelayRecReplies_Type()
)
fmsBootPRelayRecReplies.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fmsBootPRelayRecReplies.setStatus("mandatory")
_FrxDiagnostic_ObjectIdentity = ObjectIdentity
frxDiagnostic = _FrxDiagnostic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 20)
)
_FdPhysicalPorts_ObjectIdentity = ObjectIdentity
fdPhysicalPorts = _FdPhysicalPorts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10)
)
_FdpIdentification_ObjectIdentity = ObjectIdentity
fdpIdentification = _FdpIdentification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 1)
)


class _FdpIdentPhysPortId_Type(Integer32):
    """Custom type fdpIdentPhysPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 35),
    )


_FdpIdentPhysPortId_Type.__name__ = "Integer32"
_FdpIdentPhysPortId_Object = MibScalar
fdpIdentPhysPortId = _FdpIdentPhysPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 1, 1),
    _FdpIdentPhysPortId_Type()
)
fdpIdentPhysPortId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fdpIdentPhysPortId.setStatus("mandatory")


class _FdpIdentPhysPortState_Type(Integer32):
    """Custom type fdpIdentPhysPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("down", 3),
          ("loopBack0", 10),
          ("loopBack3", 11),
          ("modemManagement", 13),
          ("notConfigured", 1),
          ("remoteLoopBack2", 12),
          ("up", 2))
    )


_FdpIdentPhysPortState_Type.__name__ = "Integer32"
_FdpIdentPhysPortState_Object = MibScalar
fdpIdentPhysPortState = _FdpIdentPhysPortState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 1, 3),
    _FdpIdentPhysPortState_Type()
)
fdpIdentPhysPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdpIdentPhysPortState.setStatus("mandatory")
_FdpControl_ObjectIdentity = ObjectIdentity
fdpControl = _FdpControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 2)
)


class _FdpCtrlCommand_Type(Integer32):
    """Custom type fdpCtrlCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 3),
          ("ready", 1),
          ("up", 2))
    )


_FdpCtrlCommand_Type.__name__ = "Integer32"
_FdpCtrlCommand_Object = MibScalar
fdpCtrlCommand = _FdpCtrlCommand_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 2, 1),
    _FdpCtrlCommand_Type()
)
fdpCtrlCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fdpCtrlCommand.setStatus("mandatory")


class _FdpCtrlDiagCode_Type(Integer32):
    """Custom type fdpCtrlDiagCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("badLoopBackType", 5),
          ("deviceDown", 6),
          ("noError", 1),
          ("noSuchPhysPortId", 3),
          ("noSuchPhysPortType", 4),
          ("physPortIsTheLinkToManager", 7),
          ("physPortNotMonitored", 8),
          ("unknownCommand", 2))
    )


_FdpCtrlDiagCode_Type.__name__ = "Integer32"
_FdpCtrlDiagCode_Object = MibScalar
fdpCtrlDiagCode = _FdpCtrlDiagCode_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 2, 10),
    _FdpCtrlDiagCode_Type()
)
fdpCtrlDiagCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdpCtrlDiagCode.setStatus("mandatory")
_FdpTest_ObjectIdentity = ObjectIdentity
fdpTest = _FdpTest_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 3)
)


class _FdpTestLoopBackType_Type(Integer32):
    """Custom type fdpTestLoopBackType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("loopBack0", 1),
          ("loopBack3", 2),
          ("remoteLoopBack2", 3))
    )


_FdpTestLoopBackType_Type.__name__ = "Integer32"
_FdpTestLoopBackType_Object = MibScalar
fdpTestLoopBackType = _FdpTestLoopBackType_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 3, 1),
    _FdpTestLoopBackType_Type()
)
fdpTestLoopBackType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fdpTestLoopBackType.setStatus("mandatory")


class _FdpTestOutputPacketsCount_Type(Integer32):
    """Custom type fdpTestOutputPacketsCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_FdpTestOutputPacketsCount_Type.__name__ = "Integer32"
_FdpTestOutputPacketsCount_Object = MibScalar
fdpTestOutputPacketsCount = _FdpTestOutputPacketsCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 3, 2),
    _FdpTestOutputPacketsCount_Type()
)
fdpTestOutputPacketsCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fdpTestOutputPacketsCount.setStatus("mandatory")


class _FdpTestMaxDuration_Type(Integer32):
    """Custom type fdpTestMaxDuration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 90),
    )


_FdpTestMaxDuration_Type.__name__ = "Integer32"
_FdpTestMaxDuration_Object = MibScalar
fdpTestMaxDuration = _FdpTestMaxDuration_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 3, 3),
    _FdpTestMaxDuration_Type()
)
fdpTestMaxDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fdpTestMaxDuration.setStatus("mandatory")


class _FdpTestCommand_Type(Integer32):
    """Custom type fdpTestCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ready", 1),
          ("start", 2),
          ("stop", 3))
    )


_FdpTestCommand_Type.__name__ = "Integer32"
_FdpTestCommand_Object = MibScalar
fdpTestCommand = _FdpTestCommand_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 3, 4),
    _FdpTestCommand_Type()
)
fdpTestCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fdpTestCommand.setStatus("mandatory")


class _FdpTestDiagCode_Type(Integer32):
    """Custom type fdpTestDiagCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30)
        )
    )
    namedValues = NamedValues(
        *(("atLeastOneFailedOutputPacket", 26),
          ("atLeastOneInputErrPacket", 24),
          ("atLeastOneLostPacket", 25),
          ("badLoopBackType", 5),
          ("deviceDown", 6),
          ("loopBackBeforeTimeOut", 29),
          ("loopBackOk", 30),
          ("noError", 1),
          ("noSuchPhysPortId", 3),
          ("noSuchPhysPortType", 4),
          ("noTestInProgress", 21),
          ("noTestIndicator142", 27),
          ("physPortIsTheLinkToManager", 7),
          ("physPortNotMonitored", 8),
          ("testInProgress", 20),
          ("testStopped", 22),
          ("unavailableTest", 28),
          ("unknownCommand", 2),
          ("waitingFirstStatusReport", 23))
    )


_FdpTestDiagCode_Type.__name__ = "Integer32"
_FdpTestDiagCode_Object = MibScalar
fdpTestDiagCode = _FdpTestDiagCode_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 3, 10),
    _FdpTestDiagCode_Type()
)
fdpTestDiagCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdpTestDiagCode.setStatus("mandatory")


class _FdpTestState_Type(Integer32):
    """Custom type fdpTestState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ready", 1),
          ("waitingFirstStatusReport", 2),
          ("waitingLastStatusReport", 3))
    )


_FdpTestState_Type.__name__ = "Integer32"
_FdpTestState_Object = MibScalar
fdpTestState = _FdpTestState_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 3, 11),
    _FdpTestState_Type()
)
fdpTestState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdpTestState.setStatus("mandatory")


class _FdpTestOutPktsCounter_Type(Integer32):
    """Custom type fdpTestOutPktsCounter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FdpTestOutPktsCounter_Type.__name__ = "Integer32"
_FdpTestOutPktsCounter_Object = MibScalar
fdpTestOutPktsCounter = _FdpTestOutPktsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 3, 12),
    _FdpTestOutPktsCounter_Type()
)
fdpTestOutPktsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdpTestOutPktsCounter.setStatus("mandatory")


class _FdpTestInPktsCounter_Type(Integer32):
    """Custom type fdpTestInPktsCounter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FdpTestInPktsCounter_Type.__name__ = "Integer32"
_FdpTestInPktsCounter_Object = MibScalar
fdpTestInPktsCounter = _FdpTestInPktsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 3, 13),
    _FdpTestInPktsCounter_Type()
)
fdpTestInPktsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdpTestInPktsCounter.setStatus("mandatory")


class _FdpTestInErrPktsCounter_Type(Integer32):
    """Custom type fdpTestInErrPktsCounter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_FdpTestInErrPktsCounter_Type.__name__ = "Integer32"
_FdpTestInErrPktsCounter_Object = MibScalar
fdpTestInErrPktsCounter = _FdpTestInErrPktsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 3, 14),
    _FdpTestInErrPktsCounter_Type()
)
fdpTestInErrPktsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdpTestInErrPktsCounter.setStatus("mandatory")


class _FdpTestInErrOctetsCounter_Type(Integer32):
    """Custom type fdpTestInErrOctetsCounter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_FdpTestInErrOctetsCounter_Type.__name__ = "Integer32"
_FdpTestInErrOctetsCounter_Object = MibScalar
fdpTestInErrOctetsCounter = _FdpTestInErrOctetsCounter_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 3, 15),
    _FdpTestInErrOctetsCounter_Type()
)
fdpTestInErrOctetsCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdpTestInErrOctetsCounter.setStatus("mandatory")
_FdpModemManagement_ObjectIdentity = ObjectIdentity
fdpModemManagement = _FdpModemManagement_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 4)
)


class _FdpModCommand_Type(Integer32):
    """Custom type fdpModCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("close", 3),
          ("open", 2),
          ("ready", 1))
    )


_FdpModCommand_Type.__name__ = "Integer32"
_FdpModCommand_Object = MibScalar
fdpModCommand = _FdpModCommand_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 4, 1),
    _FdpModCommand_Type()
)
fdpModCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fdpModCommand.setStatus("mandatory")


class _FdpModControlData_Type(DisplayString):
    """Custom type fdpModControlData based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_FdpModControlData_Type.__name__ = "DisplayString"
_FdpModControlData_Object = MibScalar
fdpModControlData = _FdpModControlData_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 4, 2),
    _FdpModControlData_Type()
)
fdpModControlData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fdpModControlData.setStatus("mandatory")


class _FdpModDiagCode_Type(Integer32):
    """Custom type fdpModDiagCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47)
        )
    )
    namedValues = NamedValues(
        *(("badLoopBackType", 5),
          ("deviceDown", 6),
          ("modemData", 46),
          ("modemStabilization", 41),
          ("noError", 1),
          ("noResponseFromModem", 43),
          ("noSequenceOpen", 44),
          ("noSuchPhysPortId", 3),
          ("noSuchPhysPortType", 4),
          ("openingSequence", 40),
          ("openingSequenceWithoutAtCommand", 47),
          ("physPortIsTheLinkToManager", 7),
          ("physPortNotMonitored", 8),
          ("sequenceAlreadyOpen", 45),
          ("sequenceOpen", 42),
          ("unknownCommand", 2))
    )


_FdpModDiagCode_Type.__name__ = "Integer32"
_FdpModDiagCode_Object = MibScalar
fdpModDiagCode = _FdpModDiagCode_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 4, 10),
    _FdpModDiagCode_Type()
)
fdpModDiagCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdpModDiagCode.setStatus("mandatory")
_FdpModResponseTable_Object = MibTable
fdpModResponseTable = _FdpModResponseTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 4, 15)
)
if mibBuilder.loadTexts:
    fdpModResponseTable.setStatus("mandatory")
_FdpModResponseEntry_Object = MibTableRow
fdpModResponseEntry = _FdpModResponseEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 4, 15, 1)
)
fdpModResponseEntry.setIndexNames(
    (0, "PCE-MIB", "fdpModRespEltNum"),
)
if mibBuilder.loadTexts:
    fdpModResponseEntry.setStatus("mandatory")


class _FdpModRespEltNum_Type(Integer32):
    """Custom type fdpModRespEltNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 32),
    )


_FdpModRespEltNum_Type.__name__ = "Integer32"
_FdpModRespEltNum_Object = MibTableColumn
fdpModRespEltNum = _FdpModRespEltNum_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 4, 15, 1, 1),
    _FdpModRespEltNum_Type()
)
fdpModRespEltNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdpModRespEltNum.setStatus("mandatory")


class _FdpModRespElement_Type(DisplayString):
    """Custom type fdpModRespElement based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )


_FdpModRespElement_Type.__name__ = "DisplayString"
_FdpModRespElement_Object = MibTableColumn
fdpModRespElement = _FdpModRespElement_Object(
    (1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 4, 15, 1, 2),
    _FdpModRespElement_Type()
)
fdpModRespElement.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fdpModRespElement.setStatus("mandatory")
_VcxSoftware_ObjectIdentity = ObjectIdentity
vcxSoftware = _VcxSoftware_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30)
)
_VcxConfig_ObjectIdentity = ObjectIdentity
vcxConfig = _VcxConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1)
)
_VcControl_ObjectIdentity = ObjectIdentity
vcControl = _VcControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 1)
)


class _VcCtlDate_Type(OctetString):
    """Custom type vcCtlDate based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(3, 3),
    )


_VcCtlDate_Type.__name__ = "OctetString"
_VcCtlDate_Object = MibScalar
vcCtlDate = _VcCtlDate_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 1, 1),
    _VcCtlDate_Type()
)
vcCtlDate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcCtlDate.setStatus("mandatory")
_VcCtlHour_Type = TimeTicks
_VcCtlHour_Object = MibScalar
vcCtlHour = _VcCtlHour_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 1, 2),
    _VcCtlHour_Type()
)
vcCtlHour.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcCtlHour.setStatus("mandatory")


class _VcCtlConfigCom_Type(Integer32):
    """Custom type vcCtlConfigCom based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              5,
              6,
              10)
        )
    )
    namedValues = NamedValues(
        *(("check", 2),
          ("hotReset", 10),
          ("load", 5),
          ("ready", 1),
          ("save", 6))
    )


_VcCtlConfigCom_Type.__name__ = "Integer32"
_VcCtlConfigCom_Object = MibScalar
vcCtlConfigCom = _VcCtlConfigCom_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 1, 3),
    _VcCtlConfigCom_Type()
)
vcCtlConfigCom.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcCtlConfigCom.setStatus("mandatory")


class _VcCtlConfigLoad_Type(Integer32):
    """Custom type vcCtlConfigLoad based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 9),
    )


_VcCtlConfigLoad_Type.__name__ = "Integer32"
_VcCtlConfigLoad_Object = MibScalar
vcCtlConfigLoad = _VcCtlConfigLoad_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 1, 4),
    _VcCtlConfigLoad_Type()
)
vcCtlConfigLoad.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcCtlConfigLoad.setStatus("mandatory")
_VcCtlErrorTable_Object = MibTable
vcCtlErrorTable = _VcCtlErrorTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 1, 10)
)
if mibBuilder.loadTexts:
    vcCtlErrorTable.setStatus("mandatory")
_VcCtlErrorEntry_Object = MibTableRow
vcCtlErrorEntry = _VcCtlErrorEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 1, 10, 1)
)
vcCtlErrorEntry.setIndexNames(
    (0, "PCE-MIB", "vcCtlErrorIndex"),
)
if mibBuilder.loadTexts:
    vcCtlErrorEntry.setStatus("mandatory")


class _VcCtlErrorIndex_Type(Integer32):
    """Custom type vcCtlErrorIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_VcCtlErrorIndex_Type.__name__ = "Integer32"
_VcCtlErrorIndex_Object = MibTableColumn
vcCtlErrorIndex = _VcCtlErrorIndex_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 1, 10, 1, 1),
    _VcCtlErrorIndex_Type()
)
vcCtlErrorIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcCtlErrorIndex.setStatus("mandatory")


class _VcCtlErrorCode_Type(Integer32):
    """Custom type vcCtlErrorCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_VcCtlErrorCode_Type.__name__ = "Integer32"
_VcCtlErrorCode_Object = MibTableColumn
vcCtlErrorCode = _VcCtlErrorCode_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 1, 10, 1, 2),
    _VcCtlErrorCode_Type()
)
vcCtlErrorCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcCtlErrorCode.setStatus("mandatory")


class _VcCtlErrorMessage_Type(DisplayString):
    """Custom type vcCtlErrorMessage based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_VcCtlErrorMessage_Type.__name__ = "DisplayString"
_VcCtlErrorMessage_Object = MibTableColumn
vcCtlErrorMessage = _VcCtlErrorMessage_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 1, 10, 1, 3),
    _VcCtlErrorMessage_Type()
)
vcCtlErrorMessage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcCtlErrorMessage.setStatus("mandatory")
_VcCtlErrorTime_Type = TimeTicks
_VcCtlErrorTime_Object = MibTableColumn
vcCtlErrorTime = _VcCtlErrorTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 1, 10, 1, 4),
    _VcCtlErrorTime_Type()
)
vcCtlErrorTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcCtlErrorTime.setStatus("mandatory")
_VcSystem_ObjectIdentity = ObjectIdentity
vcSystem = _VcSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 5)
)


class _VcSysConfActive_Type(Integer32):
    """Custom type vcSysConfActive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28)
        )
    )
    namedValues = NamedValues(
        *(("s1", 1),
          ("s2", 2),
          ("s3", 3),
          ("s4", 4),
          ("s5", 5),
          ("s6", 6),
          ("s7", 7),
          ("s8", 8),
          ("s9", 9),
          ("w0", 10),
          ("w0-1", 20),
          ("w0-2", 21),
          ("w0-3", 22),
          ("w0-4", 23),
          ("w0-5", 24),
          ("w0-6", 25),
          ("w0-7", 26),
          ("w0-8", 27),
          ("w0-9", 28),
          ("w1", 11),
          ("w2", 12),
          ("w3", 13),
          ("w4", 14),
          ("w5", 15),
          ("w6", 16),
          ("w7", 17),
          ("w8", 18),
          ("w9", 19))
    )


_VcSysConfActive_Type.__name__ = "Integer32"
_VcSysConfActive_Object = MibScalar
vcSysConfActive = _VcSysConfActive_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 5, 1),
    _VcSysConfActive_Type()
)
vcSysConfActive.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcSysConfActive.setStatus("mandatory")


class _VcSysConfDate_Type(OctetString):
    """Custom type vcSysConfDate based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(3, 3),
    )


_VcSysConfDate_Type.__name__ = "OctetString"
_VcSysConfDate_Object = MibScalar
vcSysConfDate = _VcSysConfDate_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 5, 2),
    _VcSysConfDate_Type()
)
vcSysConfDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcSysConfDate.setStatus("mandatory")
_VcSysConfHour_Type = TimeTicks
_VcSysConfHour_Object = MibScalar
vcSysConfHour = _VcSysConfHour_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 5, 3),
    _VcSysConfHour_Type()
)
vcSysConfHour.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcSysConfHour.setStatus("mandatory")
_VcManagement_ObjectIdentity = ObjectIdentity
vcManagement = _VcManagement_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10)
)
_VcmAlrmGenTable_Object = MibTable
vcmAlrmGenTable = _VcmAlrmGenTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 1)
)
if mibBuilder.loadTexts:
    vcmAlrmGenTable.setStatus("mandatory")
_VcmAlrmGenEntry_Object = MibTableRow
vcmAlrmGenEntry = _VcmAlrmGenEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 1, 1)
)
vcmAlrmGenEntry.setIndexNames(
    (0, "PCE-MIB", "vcmAlrmGenFamilyId"),
    (0, "PCE-MIB", "vcmAlrmGenTyp"),
)
if mibBuilder.loadTexts:
    vcmAlrmGenEntry.setStatus("mandatory")


class _VcmAlrmGenFamilyId_Type(Integer32):
    """Custom type vcmAlrmGenFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("f00System", 1),
          ("f01Tftp", 2),
          ("f02Junction", 3),
          ("f03Lmi", 4),
          ("f04Svc", 5),
          ("f05Compression", 6),
          ("f06ServiceCanal", 7),
          ("f07Fax", 8),
          ("f08Switching", 9))
    )


_VcmAlrmGenFamilyId_Type.__name__ = "Integer32"
_VcmAlrmGenFamilyId_Object = MibTableColumn
vcmAlrmGenFamilyId = _VcmAlrmGenFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 1, 1, 1),
    _VcmAlrmGenFamilyId_Type()
)
vcmAlrmGenFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcmAlrmGenFamilyId.setStatus("mandatory")


class _VcmAlrmGenTyp_Type(Integer32):
    """Custom type vcmAlrmGenTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("fatalError222", 3),
          ("lnkNotReady209", 2),
          ("lnkReady208", 1),
          ("reboot233", 4))
    )


_VcmAlrmGenTyp_Type.__name__ = "Integer32"
_VcmAlrmGenTyp_Object = MibTableColumn
vcmAlrmGenTyp = _VcmAlrmGenTyp_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 1, 1, 2),
    _VcmAlrmGenTyp_Type()
)
vcmAlrmGenTyp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcmAlrmGenTyp.setStatus("mandatory")


class _VcmAlrmGenTrapSend_Type(Integer32):
    """Custom type vcmAlrmGenTrapSend based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_VcmAlrmGenTrapSend_Type.__name__ = "Integer32"
_VcmAlrmGenTrapSend_Object = MibTableColumn
vcmAlrmGenTrapSend = _VcmAlrmGenTrapSend_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 1, 1, 3),
    _VcmAlrmGenTrapSend_Type()
)
vcmAlrmGenTrapSend.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcmAlrmGenTrapSend.setStatus("mandatory")


class _VcmAlrmGenDisplay_Type(Integer32):
    """Custom type vcmAlrmGenDisplay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_VcmAlrmGenDisplay_Type.__name__ = "Integer32"
_VcmAlrmGenDisplay_Object = MibTableColumn
vcmAlrmGenDisplay = _VcmAlrmGenDisplay_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 1, 1, 4),
    _VcmAlrmGenDisplay_Type()
)
vcmAlrmGenDisplay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcmAlrmGenDisplay.setStatus("mandatory")
_VcmAlrmSCTable_Object = MibTable
vcmAlrmSCTable = _VcmAlrmSCTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 2)
)
if mibBuilder.loadTexts:
    vcmAlrmSCTable.setStatus("mandatory")
_VcmAlrmSCEntry_Object = MibTableRow
vcmAlrmSCEntry = _VcmAlrmSCEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 2, 1)
)
vcmAlrmSCEntry.setIndexNames(
    (0, "PCE-MIB", "vcmAlrmSCFamilyId"),
    (0, "PCE-MIB", "vcmAlrmSCTyp"),
)
if mibBuilder.loadTexts:
    vcmAlrmSCEntry.setStatus("mandatory")


class _VcmAlrmSCFamilyId_Type(Integer32):
    """Custom type vcmAlrmSCFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("f00System", 1),
          ("f01Tftp", 2),
          ("f02Junction", 3),
          ("f03Lmi", 4),
          ("f04Svc", 5),
          ("f05Compression", 6),
          ("f06ServiceCanal", 7),
          ("f07Fax", 8),
          ("f08Switching", 9))
    )


_VcmAlrmSCFamilyId_Type.__name__ = "Integer32"
_VcmAlrmSCFamilyId_Object = MibTableColumn
vcmAlrmSCFamilyId = _VcmAlrmSCFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 2, 1, 1),
    _VcmAlrmSCFamilyId_Type()
)
vcmAlrmSCFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcmAlrmSCFamilyId.setStatus("mandatory")


class _VcmAlrmSCTyp_Type(Integer32):
    """Custom type vcmAlrmSCTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("dlciError224", 4),
          ("frAddrError223", 3),
          ("scDynamic226", 6),
          ("scNotFree225", 5),
          ("scNotReady211", 2),
          ("scReady210", 1),
          ("scReinit227", 7),
          ("unexpectedFrame230", 8))
    )


_VcmAlrmSCTyp_Type.__name__ = "Integer32"
_VcmAlrmSCTyp_Object = MibTableColumn
vcmAlrmSCTyp = _VcmAlrmSCTyp_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 2, 1, 2),
    _VcmAlrmSCTyp_Type()
)
vcmAlrmSCTyp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcmAlrmSCTyp.setStatus("mandatory")


class _VcmAlrmSCTrapSend_Type(Integer32):
    """Custom type vcmAlrmSCTrapSend based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_VcmAlrmSCTrapSend_Type.__name__ = "Integer32"
_VcmAlrmSCTrapSend_Object = MibTableColumn
vcmAlrmSCTrapSend = _VcmAlrmSCTrapSend_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 2, 1, 3),
    _VcmAlrmSCTrapSend_Type()
)
vcmAlrmSCTrapSend.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcmAlrmSCTrapSend.setStatus("mandatory")


class _VcmAlrmSCDisplay_Type(Integer32):
    """Custom type vcmAlrmSCDisplay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_VcmAlrmSCDisplay_Type.__name__ = "Integer32"
_VcmAlrmSCDisplay_Object = MibTableColumn
vcmAlrmSCDisplay = _VcmAlrmSCDisplay_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 2, 1, 4),
    _VcmAlrmSCDisplay_Type()
)
vcmAlrmSCDisplay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcmAlrmSCDisplay.setStatus("mandatory")
_VcmAlrmVCTable_Object = MibTable
vcmAlrmVCTable = _VcmAlrmVCTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 3)
)
if mibBuilder.loadTexts:
    vcmAlrmVCTable.setStatus("mandatory")
_VcmAlrmVCEntry_Object = MibTableRow
vcmAlrmVCEntry = _VcmAlrmVCEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 3, 1)
)
vcmAlrmVCEntry.setIndexNames(
    (0, "PCE-MIB", "vcmAlrmVCFamilyId"),
    (0, "PCE-MIB", "vcmAlrmVCTyp"),
)
if mibBuilder.loadTexts:
    vcmAlrmVCEntry.setStatus("mandatory")


class _VcmAlrmVCFamilyId_Type(Integer32):
    """Custom type vcmAlrmVCFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("f00System", 1),
          ("f01Tftp", 2),
          ("f02Junction", 3),
          ("f03Lmi", 4),
          ("f04Svc", 5),
          ("f05Compression", 6),
          ("f06ServiceCanal", 7),
          ("f07Fax", 8),
          ("f08Switching", 9))
    )


_VcmAlrmVCFamilyId_Type.__name__ = "Integer32"
_VcmAlrmVCFamilyId_Object = MibTableColumn
vcmAlrmVCFamilyId = _VcmAlrmVCFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 3, 1, 1),
    _VcmAlrmVCFamilyId_Type()
)
vcmAlrmVCFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcmAlrmVCFamilyId.setStatus("mandatory")


class _VcmAlrmVCTyp_Type(Integer32):
    """Custom type vcmAlrmVCTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("endOfReject232", 6),
          ("lossOfSync220", 3),
          ("syncBack221", 4),
          ("vcNotReady213", 2),
          ("vcReady212", 1),
          ("vcRejected231", 5))
    )


_VcmAlrmVCTyp_Type.__name__ = "Integer32"
_VcmAlrmVCTyp_Object = MibTableColumn
vcmAlrmVCTyp = _VcmAlrmVCTyp_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 3, 1, 2),
    _VcmAlrmVCTyp_Type()
)
vcmAlrmVCTyp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcmAlrmVCTyp.setStatus("mandatory")


class _VcmAlrmVCTrapSend_Type(Integer32):
    """Custom type vcmAlrmVCTrapSend based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_VcmAlrmVCTrapSend_Type.__name__ = "Integer32"
_VcmAlrmVCTrapSend_Object = MibTableColumn
vcmAlrmVCTrapSend = _VcmAlrmVCTrapSend_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 3, 1, 3),
    _VcmAlrmVCTrapSend_Type()
)
vcmAlrmVCTrapSend.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcmAlrmVCTrapSend.setStatus("mandatory")


class _VcmAlrmVCDisplay_Type(Integer32):
    """Custom type vcmAlrmVCDisplay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_VcmAlrmVCDisplay_Type.__name__ = "Integer32"
_VcmAlrmVCDisplay_Object = MibTableColumn
vcmAlrmVCDisplay = _VcmAlrmVCDisplay_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 3, 1, 4),
    _VcmAlrmVCDisplay_Type()
)
vcmAlrmVCDisplay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcmAlrmVCDisplay.setStatus("mandatory")
_VcmAlrmLMITable_Object = MibTable
vcmAlrmLMITable = _VcmAlrmLMITable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 4)
)
if mibBuilder.loadTexts:
    vcmAlrmLMITable.setStatus("mandatory")
_VcmAlrmLMIEntry_Object = MibTableRow
vcmAlrmLMIEntry = _VcmAlrmLMIEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 4, 1)
)
vcmAlrmLMIEntry.setIndexNames(
    (0, "PCE-MIB", "vcmAlrmLMIFamilyId"),
    (0, "PCE-MIB", "vcmAlrmLMITyp"),
)
if mibBuilder.loadTexts:
    vcmAlrmLMIEntry.setStatus("mandatory")


class _VcmAlrmLMIFamilyId_Type(Integer32):
    """Custom type vcmAlrmLMIFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("f00System", 1),
          ("f01Tftp", 2),
          ("f02Junction", 3),
          ("f03Lmi", 4),
          ("f04Svc", 5),
          ("f05Compression", 6),
          ("f06ServiceCanal", 7),
          ("f07Fax", 8),
          ("f08Switching", 9))
    )


_VcmAlrmLMIFamilyId_Type.__name__ = "Integer32"
_VcmAlrmLMIFamilyId_Object = MibTableColumn
vcmAlrmLMIFamilyId = _VcmAlrmLMIFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 4, 1, 1),
    _VcmAlrmLMIFamilyId_Type()
)
vcmAlrmLMIFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcmAlrmLMIFamilyId.setStatus("mandatory")


class _VcmAlrmLMITyp_Type(Integer32):
    """Custom type vcmAlrmLMITyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("cnxLmi235", 2),
          ("dcnxLmi234", 1),
          ("lmiDlciNotConf236", 3),
          ("lmiIntError237", 4))
    )


_VcmAlrmLMITyp_Type.__name__ = "Integer32"
_VcmAlrmLMITyp_Object = MibTableColumn
vcmAlrmLMITyp = _VcmAlrmLMITyp_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 4, 1, 2),
    _VcmAlrmLMITyp_Type()
)
vcmAlrmLMITyp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcmAlrmLMITyp.setStatus("mandatory")


class _VcmAlrmLMITrapSend_Type(Integer32):
    """Custom type vcmAlrmLMITrapSend based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_VcmAlrmLMITrapSend_Type.__name__ = "Integer32"
_VcmAlrmLMITrapSend_Object = MibTableColumn
vcmAlrmLMITrapSend = _VcmAlrmLMITrapSend_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 4, 1, 3),
    _VcmAlrmLMITrapSend_Type()
)
vcmAlrmLMITrapSend.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcmAlrmLMITrapSend.setStatus("mandatory")


class _VcmAlrmLMIDisplay_Type(Integer32):
    """Custom type vcmAlrmLMIDisplay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_VcmAlrmLMIDisplay_Type.__name__ = "Integer32"
_VcmAlrmLMIDisplay_Object = MibTableColumn
vcmAlrmLMIDisplay = _VcmAlrmLMIDisplay_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 4, 1, 4),
    _VcmAlrmLMIDisplay_Type()
)
vcmAlrmLMIDisplay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcmAlrmLMIDisplay.setStatus("mandatory")
_VcmAlrmSwTable_Object = MibTable
vcmAlrmSwTable = _VcmAlrmSwTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 5)
)
if mibBuilder.loadTexts:
    vcmAlrmSwTable.setStatus("mandatory")
_VcmAlrmSwEntry_Object = MibTableRow
vcmAlrmSwEntry = _VcmAlrmSwEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 5, 1)
)
vcmAlrmSwEntry.setIndexNames(
    (0, "PCE-MIB", "vcmAlrmSwFamilyId"),
    (0, "PCE-MIB", "vcmAlrmSwTyp"),
)
if mibBuilder.loadTexts:
    vcmAlrmSwEntry.setStatus("mandatory")


class _VcmAlrmSwFamilyId_Type(Integer32):
    """Custom type vcmAlrmSwFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("f00System", 1),
          ("f01Tftp", 2),
          ("f02Junction", 3),
          ("f03Lmi", 4),
          ("f04Svc", 5),
          ("f05Compression", 6),
          ("f06ServiceCanal", 7),
          ("f07Fax", 8),
          ("f08Switching", 9))
    )


_VcmAlrmSwFamilyId_Type.__name__ = "Integer32"
_VcmAlrmSwFamilyId_Object = MibTableColumn
vcmAlrmSwFamilyId = _VcmAlrmSwFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 5, 1, 1),
    _VcmAlrmSwFamilyId_Type()
)
vcmAlrmSwFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcmAlrmSwFamilyId.setStatus("mandatory")


class _VcmAlrmSwTyp_Type(Integer32):
    """Custom type vcmAlrmSwTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("backup242", 5),
          ("incomingCall239", 2),
          ("localDisc240", 3),
          ("outgoingCall238", 1),
          ("remoteDisc241", 4))
    )


_VcmAlrmSwTyp_Type.__name__ = "Integer32"
_VcmAlrmSwTyp_Object = MibTableColumn
vcmAlrmSwTyp = _VcmAlrmSwTyp_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 5, 1, 2),
    _VcmAlrmSwTyp_Type()
)
vcmAlrmSwTyp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcmAlrmSwTyp.setStatus("mandatory")


class _VcmAlrmSwTrapSend_Type(Integer32):
    """Custom type vcmAlrmSwTrapSend based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_VcmAlrmSwTrapSend_Type.__name__ = "Integer32"
_VcmAlrmSwTrapSend_Object = MibTableColumn
vcmAlrmSwTrapSend = _VcmAlrmSwTrapSend_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 5, 1, 3),
    _VcmAlrmSwTrapSend_Type()
)
vcmAlrmSwTrapSend.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcmAlrmSwTrapSend.setStatus("mandatory")


class _VcmAlrmSwDisplay_Type(Integer32):
    """Custom type vcmAlrmSwDisplay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_VcmAlrmSwDisplay_Type.__name__ = "Integer32"
_VcmAlrmSwDisplay_Object = MibTableColumn
vcmAlrmSwDisplay = _VcmAlrmSwDisplay_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 5, 1, 4),
    _VcmAlrmSwDisplay_Type()
)
vcmAlrmSwDisplay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcmAlrmSwDisplay.setStatus("mandatory")
_VcmAlrmCmpTable_Object = MibTable
vcmAlrmCmpTable = _VcmAlrmCmpTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 6)
)
if mibBuilder.loadTexts:
    vcmAlrmCmpTable.setStatus("mandatory")
_VcmAlrmCmpEntry_Object = MibTableRow
vcmAlrmCmpEntry = _VcmAlrmCmpEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 6, 1)
)
vcmAlrmCmpEntry.setIndexNames(
    (0, "PCE-MIB", "vcmAlrmCmpFamilyId"),
    (0, "PCE-MIB", "vcmAlrmCmpTyp"),
)
if mibBuilder.loadTexts:
    vcmAlrmCmpEntry.setStatus("mandatory")


class _VcmAlrmCmpFamilyId_Type(Integer32):
    """Custom type vcmAlrmCmpFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("f00System", 1),
          ("f01Tftp", 2),
          ("f02Junction", 3),
          ("f03Lmi", 4),
          ("f04Svc", 5),
          ("f05Compression", 6),
          ("f06ServiceCanal", 7),
          ("f07Fax", 8),
          ("f08Switching", 9))
    )


_VcmAlrmCmpFamilyId_Type.__name__ = "Integer32"
_VcmAlrmCmpFamilyId_Object = MibTableColumn
vcmAlrmCmpFamilyId = _VcmAlrmCmpFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 6, 1, 1),
    _VcmAlrmCmpFamilyId_Type()
)
vcmAlrmCmpFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcmAlrmCmpFamilyId.setStatus("mandatory")


class _VcmAlrmCmpTyp_Type(Integer32):
    """Custom type vcmAlrmCmpTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("algoCompNotOk228", 3),
          ("algoCompOk229", 4),
          ("compOff215", 2),
          ("compOn214", 1))
    )


_VcmAlrmCmpTyp_Type.__name__ = "Integer32"
_VcmAlrmCmpTyp_Object = MibTableColumn
vcmAlrmCmpTyp = _VcmAlrmCmpTyp_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 6, 1, 2),
    _VcmAlrmCmpTyp_Type()
)
vcmAlrmCmpTyp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcmAlrmCmpTyp.setStatus("mandatory")


class _VcmAlrmCmpTrapSend_Type(Integer32):
    """Custom type vcmAlrmCmpTrapSend based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_VcmAlrmCmpTrapSend_Type.__name__ = "Integer32"
_VcmAlrmCmpTrapSend_Object = MibTableColumn
vcmAlrmCmpTrapSend = _VcmAlrmCmpTrapSend_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 6, 1, 3),
    _VcmAlrmCmpTrapSend_Type()
)
vcmAlrmCmpTrapSend.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcmAlrmCmpTrapSend.setStatus("mandatory")


class _VcmAlrmCmpDisplay_Type(Integer32):
    """Custom type vcmAlrmCmpDisplay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_VcmAlrmCmpDisplay_Type.__name__ = "Integer32"
_VcmAlrmCmpDisplay_Object = MibTableColumn
vcmAlrmCmpDisplay = _VcmAlrmCmpDisplay_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 6, 1, 4),
    _VcmAlrmCmpDisplay_Type()
)
vcmAlrmCmpDisplay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcmAlrmCmpDisplay.setStatus("mandatory")
_VcmAlrmFaxTable_Object = MibTable
vcmAlrmFaxTable = _VcmAlrmFaxTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 7)
)
if mibBuilder.loadTexts:
    vcmAlrmFaxTable.setStatus("mandatory")
_VcmAlrmFaxEntry_Object = MibTableRow
vcmAlrmFaxEntry = _VcmAlrmFaxEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 7, 1)
)
vcmAlrmFaxEntry.setIndexNames(
    (0, "PCE-MIB", "vcmAlrmFaxFamilyId"),
    (0, "PCE-MIB", "vcmAlrmFaxTyp"),
)
if mibBuilder.loadTexts:
    vcmAlrmFaxEntry.setStatus("mandatory")


class _VcmAlrmFaxFamilyId_Type(Integer32):
    """Custom type vcmAlrmFaxFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("f00System", 1),
          ("f01Tftp", 2),
          ("f02Junction", 3),
          ("f03Lmi", 4),
          ("f04Svc", 5),
          ("f05Compression", 6),
          ("f06ServiceCanal", 7),
          ("f07Fax", 8),
          ("f08Switching", 9))
    )


_VcmAlrmFaxFamilyId_Type.__name__ = "Integer32"
_VcmAlrmFaxFamilyId_Object = MibTableColumn
vcmAlrmFaxFamilyId = _VcmAlrmFaxFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 7, 1, 1),
    _VcmAlrmFaxFamilyId_Type()
)
vcmAlrmFaxFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcmAlrmFaxFamilyId.setStatus("mandatory")


class _VcmAlrmFaxTyp_Type(Integer32):
    """Custom type vcmAlrmFaxTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("faxEnd219", 2),
          ("faxStart218", 1))
    )


_VcmAlrmFaxTyp_Type.__name__ = "Integer32"
_VcmAlrmFaxTyp_Object = MibTableColumn
vcmAlrmFaxTyp = _VcmAlrmFaxTyp_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 7, 1, 2),
    _VcmAlrmFaxTyp_Type()
)
vcmAlrmFaxTyp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcmAlrmFaxTyp.setStatus("mandatory")


class _VcmAlrmFaxTrapSend_Type(Integer32):
    """Custom type vcmAlrmFaxTrapSend based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_VcmAlrmFaxTrapSend_Type.__name__ = "Integer32"
_VcmAlrmFaxTrapSend_Object = MibTableColumn
vcmAlrmFaxTrapSend = _VcmAlrmFaxTrapSend_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 7, 1, 3),
    _VcmAlrmFaxTrapSend_Type()
)
vcmAlrmFaxTrapSend.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcmAlrmFaxTrapSend.setStatus("mandatory")


class _VcmAlrmFaxDisplay_Type(Integer32):
    """Custom type vcmAlrmFaxDisplay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_VcmAlrmFaxDisplay_Type.__name__ = "Integer32"
_VcmAlrmFaxDisplay_Object = MibTableColumn
vcmAlrmFaxDisplay = _VcmAlrmFaxDisplay_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 7, 1, 4),
    _VcmAlrmFaxDisplay_Type()
)
vcmAlrmFaxDisplay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcmAlrmFaxDisplay.setStatus("mandatory")
_VcmAlrmTftpTable_Object = MibTable
vcmAlrmTftpTable = _VcmAlrmTftpTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 8)
)
if mibBuilder.loadTexts:
    vcmAlrmTftpTable.setStatus("mandatory")
_VcmAlrmTftpEntry_Object = MibTableRow
vcmAlrmTftpEntry = _VcmAlrmTftpEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 8, 1)
)
vcmAlrmTftpEntry.setIndexNames(
    (0, "PCE-MIB", "vcmAlrmTftpFamilyId"),
    (0, "PCE-MIB", "vcmAlrmTftpTyp"),
)
if mibBuilder.loadTexts:
    vcmAlrmTftpEntry.setStatus("mandatory")


class _VcmAlrmTftpFamilyId_Type(Integer32):
    """Custom type vcmAlrmTftpFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("f00System", 1),
          ("f01Tftp", 2),
          ("f02Junction", 3),
          ("f03Lmi", 4),
          ("f04Svc", 5),
          ("f05Compression", 6),
          ("f06ServiceCanal", 7),
          ("f07Fax", 8),
          ("f08Switching", 9))
    )


_VcmAlrmTftpFamilyId_Type.__name__ = "Integer32"
_VcmAlrmTftpFamilyId_Object = MibTableColumn
vcmAlrmTftpFamilyId = _VcmAlrmTftpFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 8, 1, 1),
    _VcmAlrmTftpFamilyId_Type()
)
vcmAlrmTftpFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcmAlrmTftpFamilyId.setStatus("mandatory")


class _VcmAlrmTftpTyp_Type(Integer32):
    """Custom type vcmAlrmTftpTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dwnEnd244", 2),
          ("dwnError245", 3),
          ("dwnStart243", 1))
    )


_VcmAlrmTftpTyp_Type.__name__ = "Integer32"
_VcmAlrmTftpTyp_Object = MibTableColumn
vcmAlrmTftpTyp = _VcmAlrmTftpTyp_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 8, 1, 2),
    _VcmAlrmTftpTyp_Type()
)
vcmAlrmTftpTyp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcmAlrmTftpTyp.setStatus("mandatory")


class _VcmAlrmTftpTrapSend_Type(Integer32):
    """Custom type vcmAlrmTftpTrapSend based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_VcmAlrmTftpTrapSend_Type.__name__ = "Integer32"
_VcmAlrmTftpTrapSend_Object = MibTableColumn
vcmAlrmTftpTrapSend = _VcmAlrmTftpTrapSend_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 8, 1, 3),
    _VcmAlrmTftpTrapSend_Type()
)
vcmAlrmTftpTrapSend.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcmAlrmTftpTrapSend.setStatus("mandatory")


class _VcmAlrmTftpDisplay_Type(Integer32):
    """Custom type vcmAlrmTftpDisplay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_VcmAlrmTftpDisplay_Type.__name__ = "Integer32"
_VcmAlrmTftpDisplay_Object = MibTableColumn
vcmAlrmTftpDisplay = _VcmAlrmTftpDisplay_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 8, 1, 4),
    _VcmAlrmTftpDisplay_Type()
)
vcmAlrmTftpDisplay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcmAlrmTftpDisplay.setStatus("mandatory")
_VcmAlrmSvcTable_Object = MibTable
vcmAlrmSvcTable = _VcmAlrmSvcTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 9)
)
if mibBuilder.loadTexts:
    vcmAlrmSvcTable.setStatus("mandatory")
_VcmAlrmSvcEntry_Object = MibTableRow
vcmAlrmSvcEntry = _VcmAlrmSvcEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 9, 1)
)
vcmAlrmSvcEntry.setIndexNames(
    (0, "PCE-MIB", "vcmAlrmSvcFamilyId"),
    (0, "PCE-MIB", "vcmAlrmSvcTyp"),
)
if mibBuilder.loadTexts:
    vcmAlrmSvcEntry.setStatus("mandatory")


class _VcmAlrmSvcFamilyId_Type(Integer32):
    """Custom type vcmAlrmSvcFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("f00System", 1),
          ("f01Tftp", 2),
          ("f02Junction", 3),
          ("f03Lmi", 4),
          ("f04Svc", 5),
          ("f05Compression", 6),
          ("f06ServiceCanal", 7),
          ("f07Fax", 8),
          ("f08Switching", 9))
    )


_VcmAlrmSvcFamilyId_Type.__name__ = "Integer32"
_VcmAlrmSvcFamilyId_Object = MibTableColumn
vcmAlrmSvcFamilyId = _VcmAlrmSvcFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 9, 1, 1),
    _VcmAlrmSvcFamilyId_Type()
)
vcmAlrmSvcFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcmAlrmSvcFamilyId.setStatus("mandatory")


class _VcmAlrmSvcTyp_Type(Integer32):
    """Custom type vcmAlrmSvcTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("svcInCall247", 2),
          ("svcInFailCall252", 7),
          ("svcLocalConnect248", 3),
          ("svcLocalDisc249", 4),
          ("svcOutCall246", 1),
          ("svcOutFailCall251", 6),
          ("svcRemoteDisc250", 5))
    )


_VcmAlrmSvcTyp_Type.__name__ = "Integer32"
_VcmAlrmSvcTyp_Object = MibTableColumn
vcmAlrmSvcTyp = _VcmAlrmSvcTyp_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 9, 1, 2),
    _VcmAlrmSvcTyp_Type()
)
vcmAlrmSvcTyp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcmAlrmSvcTyp.setStatus("mandatory")


class _VcmAlrmSvcTrapSend_Type(Integer32):
    """Custom type vcmAlrmSvcTrapSend based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_VcmAlrmSvcTrapSend_Type.__name__ = "Integer32"
_VcmAlrmSvcTrapSend_Object = MibTableColumn
vcmAlrmSvcTrapSend = _VcmAlrmSvcTrapSend_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 9, 1, 3),
    _VcmAlrmSvcTrapSend_Type()
)
vcmAlrmSvcTrapSend.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcmAlrmSvcTrapSend.setStatus("mandatory")


class _VcmAlrmSvcDisplay_Type(Integer32):
    """Custom type vcmAlrmSvcDisplay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_VcmAlrmSvcDisplay_Type.__name__ = "Integer32"
_VcmAlrmSvcDisplay_Object = MibTableColumn
vcmAlrmSvcDisplay = _VcmAlrmSvcDisplay_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 9, 1, 4),
    _VcmAlrmSvcDisplay_Type()
)
vcmAlrmSvcDisplay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcmAlrmSvcDisplay.setStatus("mandatory")
_VcInterfaces_ObjectIdentity = ObjectIdentity
vcInterfaces = _VcInterfaces_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15)
)
_VcfPhysicalPortTable_Object = MibTable
vcfPhysicalPortTable = _VcfPhysicalPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 1)
)
if mibBuilder.loadTexts:
    vcfPhysicalPortTable.setStatus("mandatory")
_VcfPhysicalPortEntry_Object = MibTableRow
vcfPhysicalPortEntry = _VcfPhysicalPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 1, 1)
)
vcfPhysicalPortEntry.setIndexNames(
    (0, "PCE-MIB", "vcfPhysPortId"),
)
if mibBuilder.loadTexts:
    vcfPhysicalPortEntry.setStatus("mandatory")


class _VcfPhysPortId_Type(Integer32):
    """Custom type vcfPhysPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("frontPannel", 3),
          ("l0", 1),
          ("l1", 2))
    )


_VcfPhysPortId_Type.__name__ = "Integer32"
_VcfPhysPortId_Object = MibTableColumn
vcfPhysPortId = _VcfPhysPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 1, 1, 1),
    _VcfPhysPortId_Type()
)
vcfPhysPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcfPhysPortId.setStatus("mandatory")


class _VcfPhysPortConnector_Type(Integer32):
    """Custom type vcfPhysPortConnector based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("db15V11", 1),
          ("db15V28", 2),
          ("din", 3))
    )


_VcfPhysPortConnector_Type.__name__ = "Integer32"
_VcfPhysPortConnector_Object = MibTableColumn
vcfPhysPortConnector = _VcfPhysPortConnector_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 1, 1, 2),
    _VcfPhysPortConnector_Type()
)
vcfPhysPortConnector.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcfPhysPortConnector.setStatus("mandatory")
_VcfNumericLines_ObjectIdentity = ObjectIdentity
vcfNumericLines = _VcfNumericLines_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5)
)
_VcfNumericLineTable_Object = MibTable
vcfNumericLineTable = _VcfNumericLineTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 1)
)
if mibBuilder.loadTexts:
    vcfNumericLineTable.setStatus("mandatory")
_VcfNumericLineEntry_Object = MibTableRow
vcfNumericLineEntry = _VcfNumericLineEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 1, 1)
)
vcfNumericLineEntry.setIndexNames(
    (0, "PCE-MIB", "vcfNumericLineInterfaceId"),
)
if mibBuilder.loadTexts:
    vcfNumericLineEntry.setStatus("mandatory")


class _VcfNumericLineInterfaceId_Type(Integer32):
    """Custom type vcfNumericLineInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("frontPannel", 3),
          ("l0", 1),
          ("l1", 2))
    )


_VcfNumericLineInterfaceId_Type.__name__ = "Integer32"
_VcfNumericLineInterfaceId_Object = MibTableColumn
vcfNumericLineInterfaceId = _VcfNumericLineInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 1, 1, 1),
    _VcfNumericLineInterfaceId_Type()
)
vcfNumericLineInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcfNumericLineInterfaceId.setStatus("mandatory")


class _VcfNumericLineType_Type(Integer32):
    """Custom type vcfNumericLineType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("configurationLine", 2),
          ("dataLine", 1),
          ("debug", 3))
    )


_VcfNumericLineType_Type.__name__ = "Integer32"
_VcfNumericLineType_Object = MibTableColumn
vcfNumericLineType = _VcfNumericLineType_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 1, 1, 2),
    _VcfNumericLineType_Type()
)
vcfNumericLineType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcfNumericLineType.setStatus("mandatory")
_VcfDataLineTable_Object = MibTable
vcfDataLineTable = _VcfDataLineTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 2)
)
if mibBuilder.loadTexts:
    vcfDataLineTable.setStatus("mandatory")
_VcfDataLineEntry_Object = MibTableRow
vcfDataLineEntry = _VcfDataLineEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 2, 1)
)
vcfDataLineEntry.setIndexNames(
    (0, "PCE-MIB", "vcfDataLineInterfaceId"),
)
if mibBuilder.loadTexts:
    vcfDataLineEntry.setStatus("mandatory")


class _VcfDataLineInterfaceId_Type(Integer32):
    """Custom type vcfDataLineInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("l0", 1),
          ("l1", 2))
    )


_VcfDataLineInterfaceId_Type.__name__ = "Integer32"
_VcfDataLineInterfaceId_Object = MibTableColumn
vcfDataLineInterfaceId = _VcfDataLineInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 2, 1, 1),
    _VcfDataLineInterfaceId_Type()
)
vcfDataLineInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcfDataLineInterfaceId.setStatus("mandatory")


class _VcfDataLineRate_Type(Integer32):
    """Custom type vcfDataLineRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("s128000", 9),
          ("s144000", 10),
          ("s19200", 3),
          ("s256000", 11),
          ("s38400", 4),
          ("s4800", 1),
          ("s48000", 5),
          ("s512000", 12),
          ("s56000", 6),
          ("s64000", 7),
          ("s72000", 8),
          ("s9600", 2))
    )


_VcfDataLineRate_Type.__name__ = "Integer32"
_VcfDataLineRate_Object = MibTableColumn
vcfDataLineRate = _VcfDataLineRate_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 2, 1, 2),
    _VcfDataLineRate_Type()
)
vcfDataLineRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcfDataLineRate.setStatus("mandatory")


class _VcfDataLineRts105_Type(Integer32):
    """Custom type vcfDataLineRts105 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("off", 4),
          ("on", 5),
          ("standard", 3),
          ("unused", 1),
          ("used", 2))
    )


_VcfDataLineRts105_Type.__name__ = "Integer32"
_VcfDataLineRts105_Object = MibTableColumn
vcfDataLineRts105 = _VcfDataLineRts105_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 2, 1, 3),
    _VcfDataLineRts105_Type()
)
vcfDataLineRts105.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcfDataLineRts105.setStatus("mandatory")


class _VcfDataLineDtr108_Type(Integer32):
    """Custom type vcfDataLineDtr108 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("off", 4),
          ("on", 5),
          ("standard", 3),
          ("unused", 1),
          ("used", 2))
    )


_VcfDataLineDtr108_Type.__name__ = "Integer32"
_VcfDataLineDtr108_Object = MibTableColumn
vcfDataLineDtr108 = _VcfDataLineDtr108_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 2, 1, 4),
    _VcfDataLineDtr108_Type()
)
vcfDataLineDtr108.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcfDataLineDtr108.setStatus("mandatory")


class _VcfDataLineCts106_Type(Integer32):
    """Custom type vcfDataLineCts106 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("off", 4),
          ("on", 5),
          ("standard", 3),
          ("unused", 1),
          ("used", 2))
    )


_VcfDataLineCts106_Type.__name__ = "Integer32"
_VcfDataLineCts106_Object = MibTableColumn
vcfDataLineCts106 = _VcfDataLineCts106_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 2, 1, 5),
    _VcfDataLineCts106_Type()
)
vcfDataLineCts106.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcfDataLineCts106.setStatus("mandatory")


class _VcfDataLineDsr107_Type(Integer32):
    """Custom type vcfDataLineDsr107 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("off", 4),
          ("on", 5),
          ("standard", 3),
          ("unused", 1),
          ("used", 2))
    )


_VcfDataLineDsr107_Type.__name__ = "Integer32"
_VcfDataLineDsr107_Object = MibTableColumn
vcfDataLineDsr107 = _VcfDataLineDsr107_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 2, 1, 6),
    _VcfDataLineDsr107_Type()
)
vcfDataLineDsr107.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcfDataLineDsr107.setStatus("mandatory")


class _VcfDataLineDcd109_Type(Integer32):
    """Custom type vcfDataLineDcd109 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("off", 4),
          ("on", 5),
          ("standard", 3),
          ("unused", 1),
          ("used", 2))
    )


_VcfDataLineDcd109_Type.__name__ = "Integer32"
_VcfDataLineDcd109_Object = MibTableColumn
vcfDataLineDcd109 = _VcfDataLineDcd109_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 2, 1, 7),
    _VcfDataLineDcd109_Type()
)
vcfDataLineDcd109.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcfDataLineDcd109.setStatus("mandatory")
_VcfConfLineTable_Object = MibTable
vcfConfLineTable = _VcfConfLineTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 3)
)
if mibBuilder.loadTexts:
    vcfConfLineTable.setStatus("mandatory")
_VcfConfLineEntry_Object = MibTableRow
vcfConfLineEntry = _VcfConfLineEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 3, 1)
)
vcfConfLineEntry.setIndexNames(
    (0, "PCE-MIB", "vcfConfLineInterfaceId"),
)
if mibBuilder.loadTexts:
    vcfConfLineEntry.setStatus("mandatory")


class _VcfConfLineInterfaceId_Type(Integer32):
    """Custom type vcfConfLineInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("frontPannel", 3),
          ("l0", 1),
          ("l1", 2))
    )


_VcfConfLineInterfaceId_Type.__name__ = "Integer32"
_VcfConfLineInterfaceId_Object = MibTableColumn
vcfConfLineInterfaceId = _VcfConfLineInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 3, 1, 1),
    _VcfConfLineInterfaceId_Type()
)
vcfConfLineInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcfConfLineInterfaceId.setStatus("mandatory")


class _VcfConfLineRate_Type(Integer32):
    """Custom type vcfConfLineRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("s128000", 9),
          ("s144000", 10),
          ("s19200", 3),
          ("s256000", 11),
          ("s38400", 4),
          ("s4800", 1),
          ("s48000", 5),
          ("s512000", 12),
          ("s56000", 6),
          ("s64000", 7),
          ("s72000", 8),
          ("s9600", 2))
    )


_VcfConfLineRate_Type.__name__ = "Integer32"
_VcfConfLineRate_Object = MibTableColumn
vcfConfLineRate = _VcfConfLineRate_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 3, 1, 2),
    _VcfConfLineRate_Type()
)
vcfConfLineRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcfConfLineRate.setStatus("mandatory")
_VcFrameRelaySw_ObjectIdentity = ObjectIdentity
vcFrameRelaySw = _VcFrameRelaySw_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 20)
)
_VcFrSwitchingTable_Object = MibTable
vcFrSwitchingTable = _VcFrSwitchingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 20, 1)
)
if mibBuilder.loadTexts:
    vcFrSwitchingTable.setStatus("mandatory")
_VcFrSwitchingEntry_Object = MibTableRow
vcFrSwitchingEntry = _VcFrSwitchingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 20, 1, 1)
)
vcFrSwitchingEntry.setIndexNames(
    (0, "PCE-MIB", "vcFrSwL0Dlci"),
    (0, "PCE-MIB", "vcFrSwL1Dlci"),
)
if mibBuilder.loadTexts:
    vcFrSwitchingEntry.setStatus("mandatory")


class _VcFrSwL0Dlci_Type(Integer32):
    """Custom type vcFrSwL0Dlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1022),
    )


_VcFrSwL0Dlci_Type.__name__ = "Integer32"
_VcFrSwL0Dlci_Object = MibTableColumn
vcFrSwL0Dlci = _VcFrSwL0Dlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 20, 1, 1, 1),
    _VcFrSwL0Dlci_Type()
)
vcFrSwL0Dlci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcFrSwL0Dlci.setStatus("mandatory")


class _VcFrSwL1Dlci_Type(Integer32):
    """Custom type vcFrSwL1Dlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1022),
    )


_VcFrSwL1Dlci_Type.__name__ = "Integer32"
_VcFrSwL1Dlci_Object = MibTableColumn
vcFrSwL1Dlci = _VcFrSwL1Dlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 20, 1, 1, 2),
    _VcFrSwL1Dlci_Type()
)
vcFrSwL1Dlci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcFrSwL1Dlci.setStatus("mandatory")


class _VcFrSwStatus_Type(Integer32):
    """Custom type vcFrSwStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_VcFrSwStatus_Type.__name__ = "Integer32"
_VcFrSwStatus_Object = MibTableColumn
vcFrSwStatus = _VcFrSwStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 20, 1, 1, 3),
    _VcFrSwStatus_Type()
)
vcFrSwStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcFrSwStatus.setStatus("mandatory")


class _VcFrSwL0DlciPriority_Type(Integer32):
    """Custom type vcFrSwL0DlciPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("highPriority", 1),
          ("lowPriority", 2))
    )


_VcFrSwL0DlciPriority_Type.__name__ = "Integer32"
_VcFrSwL0DlciPriority_Object = MibTableColumn
vcFrSwL0DlciPriority = _VcFrSwL0DlciPriority_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 20, 1, 1, 4),
    _VcFrSwL0DlciPriority_Type()
)
vcFrSwL0DlciPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcFrSwL0DlciPriority.setStatus("mandatory")


class _VcFrSwL0MuxEnable_Type(Integer32):
    """Custom type vcFrSwL0MuxEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_VcFrSwL0MuxEnable_Type.__name__ = "Integer32"
_VcFrSwL0MuxEnable_Object = MibTableColumn
vcFrSwL0MuxEnable = _VcFrSwL0MuxEnable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 20, 1, 1, 5),
    _VcFrSwL0MuxEnable_Type()
)
vcFrSwL0MuxEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcFrSwL0MuxEnable.setStatus("mandatory")


class _VcFrSwL0ChanelIdentifierCID_Type(Integer32):
    """Custom type vcFrSwL0ChanelIdentifierCID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_VcFrSwL0ChanelIdentifierCID_Type.__name__ = "Integer32"
_VcFrSwL0ChanelIdentifierCID_Object = MibTableColumn
vcFrSwL0ChanelIdentifierCID = _VcFrSwL0ChanelIdentifierCID_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 20, 1, 1, 6),
    _VcFrSwL0ChanelIdentifierCID_Type()
)
vcFrSwL0ChanelIdentifierCID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcFrSwL0ChanelIdentifierCID.setStatus("mandatory")


class _VcFrSwL1DlciPriority_Type(Integer32):
    """Custom type vcFrSwL1DlciPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("highPriority", 1),
          ("lowPriority", 2))
    )


_VcFrSwL1DlciPriority_Type.__name__ = "Integer32"
_VcFrSwL1DlciPriority_Object = MibTableColumn
vcFrSwL1DlciPriority = _VcFrSwL1DlciPriority_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 20, 1, 1, 7),
    _VcFrSwL1DlciPriority_Type()
)
vcFrSwL1DlciPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcFrSwL1DlciPriority.setStatus("mandatory")


class _VcFrSwL1MuxEnable_Type(Integer32):
    """Custom type vcFrSwL1MuxEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_VcFrSwL1MuxEnable_Type.__name__ = "Integer32"
_VcFrSwL1MuxEnable_Object = MibTableColumn
vcFrSwL1MuxEnable = _VcFrSwL1MuxEnable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 20, 1, 1, 8),
    _VcFrSwL1MuxEnable_Type()
)
vcFrSwL1MuxEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcFrSwL1MuxEnable.setStatus("mandatory")


class _VcFrSwL1ChanelIdentifierCID_Type(Integer32):
    """Custom type vcFrSwL1ChanelIdentifierCID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_VcFrSwL1ChanelIdentifierCID_Type.__name__ = "Integer32"
_VcFrSwL1ChanelIdentifierCID_Object = MibTableColumn
vcFrSwL1ChanelIdentifierCID = _VcFrSwL1ChanelIdentifierCID_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 20, 1, 1, 9),
    _VcFrSwL1ChanelIdentifierCID_Type()
)
vcFrSwL1ChanelIdentifierCID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcFrSwL1ChanelIdentifierCID.setStatus("mandatory")
_VcLogicalPorts_ObjectIdentity = ObjectIdentity
vcLogicalPorts = _VcLogicalPorts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25)
)
_VclLogicalPortTable_Object = MibTable
vclLogicalPortTable = _VclLogicalPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 1)
)
if mibBuilder.loadTexts:
    vclLogicalPortTable.setStatus("mandatory")
_VclLogicalPortEntry_Object = MibTableRow
vclLogicalPortEntry = _VclLogicalPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 1, 1)
)
vclLogicalPortEntry.setIndexNames(
    (0, "PCE-MIB", "vclLogPortId"),
)
if mibBuilder.loadTexts:
    vclLogicalPortEntry.setStatus("mandatory")


class _VclLogPortId_Type(Integer32):
    """Custom type vclLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_VclLogPortId_Type.__name__ = "Integer32"
_VclLogPortId_Object = MibTableColumn
vclLogPortId = _VclLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 1, 1, 1),
    _VclLogPortId_Type()
)
vclLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vclLogPortId.setStatus("mandatory")


class _VclLogPortStatus_Type(Integer32):
    """Custom type vclLogPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_VclLogPortStatus_Type.__name__ = "Integer32"
_VclLogPortStatus_Object = MibTableColumn
vclLogPortStatus = _VclLogPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 1, 1, 2),
    _VclLogPortStatus_Type()
)
vclLogPortStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclLogPortStatus.setStatus("mandatory")


class _VclLogPortType_Type(Integer32):
    """Custom type vclLogPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("frCe", 2),
          ("frSe", 4),
          ("frTe", 3),
          ("hdlc", 1))
    )


_VclLogPortType_Type.__name__ = "Integer32"
_VclLogPortType_Object = MibTableColumn
vclLogPortType = _VclLogPortType_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 1, 1, 3),
    _VclLogPortType_Type()
)
vclLogPortType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclLogPortType.setStatus("mandatory")
_VclHdlcAccessLogPort_ObjectIdentity = ObjectIdentity
vclHdlcAccessLogPort = _VclHdlcAccessLogPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 5)
)
_VclHdlcLogPortTable_Object = MibTable
vclHdlcLogPortTable = _VclHdlcLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 5, 1)
)
if mibBuilder.loadTexts:
    vclHdlcLogPortTable.setStatus("mandatory")
_VclHdlcLogPortEntry_Object = MibTableRow
vclHdlcLogPortEntry = _VclHdlcLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 5, 1, 1)
)
vclHdlcLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "vclHdlcLpLogPortId"),
)
if mibBuilder.loadTexts:
    vclHdlcLogPortEntry.setStatus("mandatory")


class _VclHdlcLpLogPortId_Type(Integer32):
    """Custom type vclHdlcLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_VclHdlcLpLogPortId_Type.__name__ = "Integer32"
_VclHdlcLpLogPortId_Object = MibTableColumn
vclHdlcLpLogPortId = _VclHdlcLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 5, 1, 1, 1),
    _VclHdlcLpLogPortId_Type()
)
vclHdlcLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vclHdlcLpLogPortId.setStatus("mandatory")


class _VclHdlcLpFragmentationLength_Type(Integer32):
    """Custom type vclHdlcLpFragmentationLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(60, 390),
    )


_VclHdlcLpFragmentationLength_Type.__name__ = "Integer32"
_VclHdlcLpFragmentationLength_Object = MibTableColumn
vclHdlcLpFragmentationLength = _VclHdlcLpFragmentationLength_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 5, 1, 1, 2),
    _VclHdlcLpFragmentationLength_Type()
)
vclHdlcLpFragmentationLength.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclHdlcLpFragmentationLength.setStatus("mandatory")


class _VclHdlcLpRemoteAddress_Type(OctetString):
    """Custom type vclHdlcLpRemoteAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_VclHdlcLpRemoteAddress_Type.__name__ = "OctetString"
_VclHdlcLpRemoteAddress_Object = MibTableColumn
vclHdlcLpRemoteAddress = _VclHdlcLpRemoteAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 5, 1, 1, 3),
    _VclHdlcLpRemoteAddress_Type()
)
vclHdlcLpRemoteAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclHdlcLpRemoteAddress.setStatus("mandatory")
_VclFrameRelay_ObjectIdentity = ObjectIdentity
vclFrameRelay = _VclFrameRelay_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10)
)
_VclFrCommunicationEquipment_ObjectIdentity = ObjectIdentity
vclFrCommunicationEquipment = _VclFrCommunicationEquipment_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 1)
)
_VclFrCeLogPortTable_Object = MibTable
vclFrCeLogPortTable = _VclFrCeLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 1, 1)
)
if mibBuilder.loadTexts:
    vclFrCeLogPortTable.setStatus("mandatory")
_VclFrCeLogPortEntry_Object = MibTableRow
vclFrCeLogPortEntry = _VclFrCeLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 1, 1, 1)
)
vclFrCeLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "vclFrCeLpLogPortId"),
)
if mibBuilder.loadTexts:
    vclFrCeLogPortEntry.setStatus("mandatory")


class _VclFrCeLpLogPortId_Type(Integer32):
    """Custom type vclFrCeLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_VclFrCeLpLogPortId_Type.__name__ = "Integer32"
_VclFrCeLpLogPortId_Object = MibTableColumn
vclFrCeLpLogPortId = _VclFrCeLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 1, 1, 1, 1),
    _VclFrCeLpLogPortId_Type()
)
vclFrCeLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vclFrCeLpLogPortId.setStatus("mandatory")


class _VclFrCeLpInterfaceId_Type(Integer32):
    """Custom type vclFrCeLpInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("l0", 1),
          ("l1", 2))
    )


_VclFrCeLpInterfaceId_Type.__name__ = "Integer32"
_VclFrCeLpInterfaceId_Object = MibTableColumn
vclFrCeLpInterfaceId = _VclFrCeLpInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 1, 1, 1, 2),
    _VclFrCeLpInterfaceId_Type()
)
vclFrCeLpInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclFrCeLpInterfaceId.setStatus("mandatory")
_VclFrTerminalEquipment_ObjectIdentity = ObjectIdentity
vclFrTerminalEquipment = _VclFrTerminalEquipment_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 2)
)
_VclFrTeLogPortTable_Object = MibTable
vclFrTeLogPortTable = _VclFrTeLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 2, 1)
)
if mibBuilder.loadTexts:
    vclFrTeLogPortTable.setStatus("mandatory")
_VclFrTeLogPortEntry_Object = MibTableRow
vclFrTeLogPortEntry = _VclFrTeLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 2, 1, 1)
)
vclFrTeLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "vclFrTeLpLogPortId"),
)
if mibBuilder.loadTexts:
    vclFrTeLogPortEntry.setStatus("mandatory")


class _VclFrTeLpLogPortId_Type(Integer32):
    """Custom type vclFrTeLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_VclFrTeLpLogPortId_Type.__name__ = "Integer32"
_VclFrTeLpLogPortId_Object = MibTableColumn
vclFrTeLpLogPortId = _VclFrTeLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 2, 1, 1, 1),
    _VclFrTeLpLogPortId_Type()
)
vclFrTeLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vclFrTeLpLogPortId.setStatus("mandatory")


class _VclFrTeLpInterfaceId_Type(Integer32):
    """Custom type vclFrTeLpInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("l0", 1),
          ("l1", 2))
    )


_VclFrTeLpInterfaceId_Type.__name__ = "Integer32"
_VclFrTeLpInterfaceId_Object = MibTableColumn
vclFrTeLpInterfaceId = _VclFrTeLpInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 2, 1, 1, 2),
    _VclFrTeLpInterfaceId_Type()
)
vclFrTeLpInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclFrTeLpInterfaceId.setStatus("mandatory")


class _VclFrTeLpConfigId_Type(Integer32):
    """Custom type vclFrTeLpConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_VclFrTeLpConfigId_Type.__name__ = "Integer32"
_VclFrTeLpConfigId_Object = MibTableColumn
vclFrTeLpConfigId = _VclFrTeLpConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 2, 1, 1, 3),
    _VclFrTeLpConfigId_Type()
)
vclFrTeLpConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vclFrTeLpConfigId.setStatus("mandatory")


class _VclFrTeLpLmi_Type(Integer32):
    """Custom type vclFrTeLpLmi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("lmiUni", 2),
          ("off", 1))
    )


_VclFrTeLpLmi_Type.__name__ = "Integer32"
_VclFrTeLpLmi_Object = MibTableColumn
vclFrTeLpLmi = _VclFrTeLpLmi_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 2, 1, 1, 4),
    _VclFrTeLpLmi_Type()
)
vclFrTeLpLmi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclFrTeLpLmi.setStatus("mandatory")
_VclFrSwitchEquipment_ObjectIdentity = ObjectIdentity
vclFrSwitchEquipment = _VclFrSwitchEquipment_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 3)
)
_VclFrSeLogPortTable_Object = MibTable
vclFrSeLogPortTable = _VclFrSeLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 3, 1)
)
if mibBuilder.loadTexts:
    vclFrSeLogPortTable.setStatus("mandatory")
_VclFrSeLogPortEntry_Object = MibTableRow
vclFrSeLogPortEntry = _VclFrSeLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 3, 1, 1)
)
vclFrSeLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "vclFrSeLpLogPortId"),
)
if mibBuilder.loadTexts:
    vclFrSeLogPortEntry.setStatus("mandatory")


class _VclFrSeLpLogPortId_Type(Integer32):
    """Custom type vclFrSeLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_VclFrSeLpLogPortId_Type.__name__ = "Integer32"
_VclFrSeLpLogPortId_Object = MibTableColumn
vclFrSeLpLogPortId = _VclFrSeLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 3, 1, 1, 1),
    _VclFrSeLpLogPortId_Type()
)
vclFrSeLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vclFrSeLpLogPortId.setStatus("mandatory")


class _VclFrSeLpInterfaceId_Type(Integer32):
    """Custom type vclFrSeLpInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("l0", 1),
          ("l1", 2))
    )


_VclFrSeLpInterfaceId_Type.__name__ = "Integer32"
_VclFrSeLpInterfaceId_Object = MibTableColumn
vclFrSeLpInterfaceId = _VclFrSeLpInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 3, 1, 1, 2),
    _VclFrSeLpInterfaceId_Type()
)
vclFrSeLpInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclFrSeLpInterfaceId.setStatus("mandatory")


class _VclFrSeLpConfigId_Type(Integer32):
    """Custom type vclFrSeLpConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_VclFrSeLpConfigId_Type.__name__ = "Integer32"
_VclFrSeLpConfigId_Object = MibTableColumn
vclFrSeLpConfigId = _VclFrSeLpConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 3, 1, 1, 3),
    _VclFrSeLpConfigId_Type()
)
vclFrSeLpConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vclFrSeLpConfigId.setStatus("mandatory")
_VclFrConfigurationTe_ObjectIdentity = ObjectIdentity
vclFrConfigurationTe = _VclFrConfigurationTe_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 4)
)
_VclFrLmiParameterTable_Object = MibTable
vclFrLmiParameterTable = _VclFrLmiParameterTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 4, 1)
)
if mibBuilder.loadTexts:
    vclFrLmiParameterTable.setStatus("mandatory")
_VclFrLmiParameterEntry_Object = MibTableRow
vclFrLmiParameterEntry = _VclFrLmiParameterEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 4, 1, 1)
)
vclFrLmiParameterEntry.setIndexNames(
    (0, "PCE-MIB", "vclFrLmiParaConfigId"),
)
if mibBuilder.loadTexts:
    vclFrLmiParameterEntry.setStatus("mandatory")


class _VclFrLmiParaConfigId_Type(Integer32):
    """Custom type vclFrLmiParaConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_VclFrLmiParaConfigId_Type.__name__ = "Integer32"
_VclFrLmiParaConfigId_Object = MibTableColumn
vclFrLmiParaConfigId = _VclFrLmiParaConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 4, 1, 1, 1),
    _VclFrLmiParaConfigId_Type()
)
vclFrLmiParaConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vclFrLmiParaConfigId.setStatus("mandatory")


class _VclFrLmiParaDlci_Type(Integer32):
    """Custom type vclFrLmiParaDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1023),
    )


_VclFrLmiParaDlci_Type.__name__ = "Integer32"
_VclFrLmiParaDlci_Object = MibTableColumn
vclFrLmiParaDlci = _VclFrLmiParaDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 4, 1, 1, 2),
    _VclFrLmiParaDlci_Type()
)
vclFrLmiParaDlci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclFrLmiParaDlci.setStatus("mandatory")


class _VclFrLmiParaStandard_Type(Integer32):
    """Custom type vclFrLmiParaStandard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ansiT1-617d", 1),
          ("itutQ933a", 2))
    )


_VclFrLmiParaStandard_Type.__name__ = "Integer32"
_VclFrLmiParaStandard_Object = MibTableColumn
vclFrLmiParaStandard = _VclFrLmiParaStandard_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 4, 1, 1, 3),
    _VclFrLmiParaStandard_Type()
)
vclFrLmiParaStandard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclFrLmiParaStandard.setStatus("mandatory")


class _VclFrLmiParaAccessibilityCondition_Type(Integer32):
    """Custom type vclFrLmiParaAccessibilityCondition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_VclFrLmiParaAccessibilityCondition_Type.__name__ = "Integer32"
_VclFrLmiParaAccessibilityCondition_Object = MibTableColumn
vclFrLmiParaAccessibilityCondition = _VclFrLmiParaAccessibilityCondition_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 4, 1, 1, 4),
    _VclFrLmiParaAccessibilityCondition_Type()
)
vclFrLmiParaAccessibilityCondition.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclFrLmiParaAccessibilityCondition.setStatus("mandatory")


class _VclFrLmiParaN391FullStatusPollCount_Type(Integer32):
    """Custom type vclFrLmiParaN391FullStatusPollCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VclFrLmiParaN391FullStatusPollCount_Type.__name__ = "Integer32"
_VclFrLmiParaN391FullStatusPollCount_Object = MibTableColumn
vclFrLmiParaN391FullStatusPollCount = _VclFrLmiParaN391FullStatusPollCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 4, 1, 1, 5),
    _VclFrLmiParaN391FullStatusPollCount_Type()
)
vclFrLmiParaN391FullStatusPollCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclFrLmiParaN391FullStatusPollCount.setStatus("mandatory")


class _VclFrLmiParaN392ErrorThreshold_Type(Integer32):
    """Custom type vclFrLmiParaN392ErrorThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_VclFrLmiParaN392ErrorThreshold_Type.__name__ = "Integer32"
_VclFrLmiParaN392ErrorThreshold_Object = MibTableColumn
vclFrLmiParaN392ErrorThreshold = _VclFrLmiParaN392ErrorThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 4, 1, 1, 6),
    _VclFrLmiParaN392ErrorThreshold_Type()
)
vclFrLmiParaN392ErrorThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclFrLmiParaN392ErrorThreshold.setStatus("mandatory")


class _VclFrLmiParaN393MonitoredEventCount_Type(Integer32):
    """Custom type vclFrLmiParaN393MonitoredEventCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_VclFrLmiParaN393MonitoredEventCount_Type.__name__ = "Integer32"
_VclFrLmiParaN393MonitoredEventCount_Object = MibTableColumn
vclFrLmiParaN393MonitoredEventCount = _VclFrLmiParaN393MonitoredEventCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 4, 1, 1, 7),
    _VclFrLmiParaN393MonitoredEventCount_Type()
)
vclFrLmiParaN393MonitoredEventCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclFrLmiParaN393MonitoredEventCount.setStatus("mandatory")


class _VclFrLmiParaT391LinkIntegPollTimer_Type(Integer32):
    """Custom type vclFrLmiParaT391LinkIntegPollTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 30),
    )


_VclFrLmiParaT391LinkIntegPollTimer_Type.__name__ = "Integer32"
_VclFrLmiParaT391LinkIntegPollTimer_Object = MibTableColumn
vclFrLmiParaT391LinkIntegPollTimer = _VclFrLmiParaT391LinkIntegPollTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 4, 1, 1, 8),
    _VclFrLmiParaT391LinkIntegPollTimer_Type()
)
vclFrLmiParaT391LinkIntegPollTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclFrLmiParaT391LinkIntegPollTimer.setStatus("mandatory")
_VclFrConfigurationSe_ObjectIdentity = ObjectIdentity
vclFrConfigurationSe = _VclFrConfigurationSe_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5)
)
_VclFrSeSignallingTable_Object = MibTable
vclFrSeSignallingTable = _VclFrSeSignallingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1)
)
if mibBuilder.loadTexts:
    vclFrSeSignallingTable.setStatus("mandatory")
_VclFrSeSignallingEntry_Object = MibTableRow
vclFrSeSignallingEntry = _VclFrSeSignallingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1)
)
vclFrSeSignallingEntry.setIndexNames(
    (0, "PCE-MIB", "vclFrSeSigConfigId"),
)
if mibBuilder.loadTexts:
    vclFrSeSignallingEntry.setStatus("mandatory")


class _VclFrSeSigConfigId_Type(Integer32):
    """Custom type vclFrSeSigConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_VclFrSeSigConfigId_Type.__name__ = "Integer32"
_VclFrSeSigConfigId_Object = MibTableColumn
vclFrSeSigConfigId = _VclFrSeSigConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1, 1),
    _VclFrSeSigConfigId_Type()
)
vclFrSeSigConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vclFrSeSigConfigId.setStatus("mandatory")


class _VclFrSeSigOuputTimeout_Type(Integer32):
    """Custom type vclFrSeSigOuputTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 51000),
    )


_VclFrSeSigOuputTimeout_Type.__name__ = "Integer32"
_VclFrSeSigOuputTimeout_Object = MibTableColumn
vclFrSeSigOuputTimeout = _VclFrSeSigOuputTimeout_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1, 2),
    _VclFrSeSigOuputTimeout_Type()
)
vclFrSeSigOuputTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclFrSeSigOuputTimeout.setStatus("mandatory")


class _VclFrSeSigSignalOutputWinSize_Type(Integer32):
    """Custom type vclFrSeSigSignalOutputWinSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 7),
    )


_VclFrSeSigSignalOutputWinSize_Type.__name__ = "Integer32"
_VclFrSeSigSignalOutputWinSize_Object = MibTableColumn
vclFrSeSigSignalOutputWinSize = _VclFrSeSigSignalOutputWinSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1, 3),
    _VclFrSeSigSignalOutputWinSize_Type()
)
vclFrSeSigSignalOutputWinSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclFrSeSigSignalOutputWinSize.setStatus("mandatory")


class _VclFrSeSigN200RetransMaxCount_Type(Integer32):
    """Custom type vclFrSeSigN200RetransMaxCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VclFrSeSigN200RetransMaxCount_Type.__name__ = "Integer32"
_VclFrSeSigN200RetransMaxCount_Object = MibTableColumn
vclFrSeSigN200RetransMaxCount = _VclFrSeSigN200RetransMaxCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1, 5),
    _VclFrSeSigN200RetransMaxCount_Type()
)
vclFrSeSigN200RetransMaxCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclFrSeSigN200RetransMaxCount.setStatus("mandatory")


class _VclFrSeSigT200RetransTimer_Type(Integer32):
    """Custom type vclFrSeSigT200RetransTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 25500),
    )


_VclFrSeSigT200RetransTimer_Type.__name__ = "Integer32"
_VclFrSeSigT200RetransTimer_Object = MibTableColumn
vclFrSeSigT200RetransTimer = _VclFrSeSigT200RetransTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1, 6),
    _VclFrSeSigT200RetransTimer_Type()
)
vclFrSeSigT200RetransTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclFrSeSigT200RetransTimer.setStatus("mandatory")


class _VclFrSeSigT203InactivityTimer_Type(Integer32):
    """Custom type vclFrSeSigT203InactivityTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_VclFrSeSigT203InactivityTimer_Type.__name__ = "Integer32"
_VclFrSeSigT203InactivityTimer_Object = MibTableColumn
vclFrSeSigT203InactivityTimer = _VclFrSeSigT203InactivityTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1, 7),
    _VclFrSeSigT203InactivityTimer_Type()
)
vclFrSeSigT203InactivityTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclFrSeSigT203InactivityTimer.setStatus("mandatory")


class _VclFrSeSigT303SetupResponseTimer_Type(Integer32):
    """Custom type vclFrSeSigT303SetupResponseTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VclFrSeSigT303SetupResponseTimer_Type.__name__ = "Integer32"
_VclFrSeSigT303SetupResponseTimer_Object = MibTableColumn
vclFrSeSigT303SetupResponseTimer = _VclFrSeSigT303SetupResponseTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1, 8),
    _VclFrSeSigT303SetupResponseTimer_Type()
)
vclFrSeSigT303SetupResponseTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclFrSeSigT303SetupResponseTimer.setStatus("mandatory")


class _VclFrSeSigT305DisconnectResponseTimer_Type(Integer32):
    """Custom type vclFrSeSigT305DisconnectResponseTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VclFrSeSigT305DisconnectResponseTimer_Type.__name__ = "Integer32"
_VclFrSeSigT305DisconnectResponseTimer_Object = MibTableColumn
vclFrSeSigT305DisconnectResponseTimer = _VclFrSeSigT305DisconnectResponseTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1, 9),
    _VclFrSeSigT305DisconnectResponseTimer_Type()
)
vclFrSeSigT305DisconnectResponseTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclFrSeSigT305DisconnectResponseTimer.setStatus("mandatory")


class _VclFrSeSigT308ReleaseResponseTimer_Type(Integer32):
    """Custom type vclFrSeSigT308ReleaseResponseTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VclFrSeSigT308ReleaseResponseTimer_Type.__name__ = "Integer32"
_VclFrSeSigT308ReleaseResponseTimer_Object = MibTableColumn
vclFrSeSigT308ReleaseResponseTimer = _VclFrSeSigT308ReleaseResponseTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1, 10),
    _VclFrSeSigT308ReleaseResponseTimer_Type()
)
vclFrSeSigT308ReleaseResponseTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclFrSeSigT308ReleaseResponseTimer.setStatus("mandatory")


class _VclFrSeSigT310CallProceedingTimer_Type(Integer32):
    """Custom type vclFrSeSigT310CallProceedingTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_VclFrSeSigT310CallProceedingTimer_Type.__name__ = "Integer32"
_VclFrSeSigT310CallProceedingTimer_Object = MibTableColumn
vclFrSeSigT310CallProceedingTimer = _VclFrSeSigT310CallProceedingTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1, 11),
    _VclFrSeSigT310CallProceedingTimer_Type()
)
vclFrSeSigT310CallProceedingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclFrSeSigT310CallProceedingTimer.setStatus("mandatory")


class _VclFrSeSigT316RestartAcknowledgeTimer_Type(Integer32):
    """Custom type vclFrSeSigT316RestartAcknowledgeTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_VclFrSeSigT316RestartAcknowledgeTimer_Type.__name__ = "Integer32"
_VclFrSeSigT316RestartAcknowledgeTimer_Object = MibTableColumn
vclFrSeSigT316RestartAcknowledgeTimer = _VclFrSeSigT316RestartAcknowledgeTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1, 12),
    _VclFrSeSigT316RestartAcknowledgeTimer_Type()
)
vclFrSeSigT316RestartAcknowledgeTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vclFrSeSigT316RestartAcknowledgeTimer.setStatus("mandatory")
_VcWanSwitch_ObjectIdentity = ObjectIdentity
vcWanSwitch = _VcWanSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 30)
)
_VcwEquipParams_ObjectIdentity = ObjectIdentity
vcwEquipParams = _VcwEquipParams_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 1)
)


class _VcwEquipDnicZoAddr_Type(OctetString):
    """Custom type vcwEquipDnicZoAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(3, 3),
    )


_VcwEquipDnicZoAddr_Type.__name__ = "OctetString"
_VcwEquipDnicZoAddr_Object = MibScalar
vcwEquipDnicZoAddr = _VcwEquipDnicZoAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 1, 1),
    _VcwEquipDnicZoAddr_Type()
)
vcwEquipDnicZoAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcwEquipDnicZoAddr.setStatus("mandatory")


class _VcwEquipVoiceRoutingServicePortAddr_Type(OctetString):
    """Custom type vcwEquipVoiceRoutingServicePortAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_VcwEquipVoiceRoutingServicePortAddr_Type.__name__ = "OctetString"
_VcwEquipVoiceRoutingServicePortAddr_Object = MibScalar
vcwEquipVoiceRoutingServicePortAddr = _VcwEquipVoiceRoutingServicePortAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 1, 2),
    _VcwEquipVoiceRoutingServicePortAddr_Type()
)
vcwEquipVoiceRoutingServicePortAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcwEquipVoiceRoutingServicePortAddr.setStatus("mandatory")


class _VcwEquipIpVirtualPortAddr_Type(OctetString):
    """Custom type vcwEquipIpVirtualPortAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_VcwEquipIpVirtualPortAddr_Type.__name__ = "OctetString"
_VcwEquipIpVirtualPortAddr_Object = MibScalar
vcwEquipIpVirtualPortAddr = _VcwEquipIpVirtualPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 1, 3),
    _VcwEquipIpVirtualPortAddr_Type()
)
vcwEquipIpVirtualPortAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcwEquipIpVirtualPortAddr.setStatus("mandatory")


class _VcwEquipRemoteConfPortAddr_Type(OctetString):
    """Custom type vcwEquipRemoteConfPortAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_VcwEquipRemoteConfPortAddr_Type.__name__ = "OctetString"
_VcwEquipRemoteConfPortAddr_Object = MibScalar
vcwEquipRemoteConfPortAddr = _VcwEquipRemoteConfPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 1, 4),
    _VcwEquipRemoteConfPortAddr_Type()
)
vcwEquipRemoteConfPortAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcwEquipRemoteConfPortAddr.setStatus("mandatory")


class _VcwEquipVoiceVirtualPortAddr_Type(OctetString):
    """Custom type vcwEquipVoiceVirtualPortAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_VcwEquipVoiceVirtualPortAddr_Type.__name__ = "OctetString"
_VcwEquipVoiceVirtualPortAddr_Object = MibScalar
vcwEquipVoiceVirtualPortAddr = _VcwEquipVoiceVirtualPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 1, 5),
    _VcwEquipVoiceVirtualPortAddr_Type()
)
vcwEquipVoiceVirtualPortAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcwEquipVoiceVirtualPortAddr.setStatus("mandatory")


class _VcwEquipSVCDisconnectOnCongestion_Type(Integer32):
    """Custom type vcwEquipSVCDisconnectOnCongestion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_VcwEquipSVCDisconnectOnCongestion_Type.__name__ = "Integer32"
_VcwEquipSVCDisconnectOnCongestion_Object = MibScalar
vcwEquipSVCDisconnectOnCongestion = _VcwEquipSVCDisconnectOnCongestion_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 1, 6),
    _VcwEquipSVCDisconnectOnCongestion_Type()
)
vcwEquipSVCDisconnectOnCongestion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcwEquipSVCDisconnectOnCongestion.setStatus("mandatory")


class _VcwEquipOutLogPort_Type(Integer32):
    """Custom type vcwEquipOutLogPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_VcwEquipOutLogPort_Type.__name__ = "Integer32"
_VcwEquipOutLogPort_Object = MibScalar
vcwEquipOutLogPort = _VcwEquipOutLogPort_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 1, 7),
    _VcwEquipOutLogPort_Type()
)
vcwEquipOutLogPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcwEquipOutLogPort.setStatus("mandatory")
_VcwABPvcLpTable_Object = MibTable
vcwABPvcLpTable = _VcwABPvcLpTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 2)
)
if mibBuilder.loadTexts:
    vcwABPvcLpTable.setStatus("mandatory")
_VcwABPvcLpEntry_Object = MibTableRow
vcwABPvcLpEntry = _VcwABPvcLpEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 2, 1)
)
vcwABPvcLpEntry.setIndexNames(
    (0, "PCE-MIB", "vcwABPvcLpId"),
)
if mibBuilder.loadTexts:
    vcwABPvcLpEntry.setStatus("mandatory")


class _VcwABPvcLpId_Type(Integer32):
    """Custom type vcwABPvcLpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_VcwABPvcLpId_Type.__name__ = "Integer32"
_VcwABPvcLpId_Object = MibTableColumn
vcwABPvcLpId = _VcwABPvcLpId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 2, 1, 1),
    _VcwABPvcLpId_Type()
)
vcwABPvcLpId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcwABPvcLpId.setStatus("mandatory")


class _VcwABPvcLpAddress_Type(OctetString):
    """Custom type vcwABPvcLpAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_VcwABPvcLpAddress_Type.__name__ = "OctetString"
_VcwABPvcLpAddress_Object = MibTableColumn
vcwABPvcLpAddress = _VcwABPvcLpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 2, 1, 2),
    _VcwABPvcLpAddress_Type()
)
vcwABPvcLpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcwABPvcLpAddress.setStatus("mandatory")
_VcwWanRouteTable_Object = MibTable
vcwWanRouteTable = _VcwWanRouteTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 3)
)
if mibBuilder.loadTexts:
    vcwWanRouteTable.setStatus("mandatory")
_VcwWanRouteEntry_Object = MibTableRow
vcwWanRouteEntry = _VcwWanRouteEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 3, 1)
)
vcwWanRouteEntry.setIndexNames(
    (0, "PCE-MIB", "vcwWanRouteDnicZoAddress"),
)
if mibBuilder.loadTexts:
    vcwWanRouteEntry.setStatus("mandatory")


class _VcwWanRouteDnicZoAddress_Type(OctetString):
    """Custom type vcwWanRouteDnicZoAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(3, 3),
    )


_VcwWanRouteDnicZoAddress_Type.__name__ = "OctetString"
_VcwWanRouteDnicZoAddress_Object = MibTableColumn
vcwWanRouteDnicZoAddress = _VcwWanRouteDnicZoAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 3, 1, 1),
    _VcwWanRouteDnicZoAddress_Type()
)
vcwWanRouteDnicZoAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcwWanRouteDnicZoAddress.setStatus("mandatory")


class _VcwWanRouteStatus_Type(Integer32):
    """Custom type vcwWanRouteStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_VcwWanRouteStatus_Type.__name__ = "Integer32"
_VcwWanRouteStatus_Object = MibTableColumn
vcwWanRouteStatus = _VcwWanRouteStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 3, 1, 2),
    _VcwWanRouteStatus_Type()
)
vcwWanRouteStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcwWanRouteStatus.setStatus("mandatory")


class _VcwWanRouteLogPortId_Type(Integer32):
    """Custom type vcwWanRouteLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_VcwWanRouteLogPortId_Type.__name__ = "Integer32"
_VcwWanRouteLogPortId_Object = MibTableColumn
vcwWanRouteLogPortId = _VcwWanRouteLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 3, 1, 3),
    _VcwWanRouteLogPortId_Type()
)
vcwWanRouteLogPortId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcwWanRouteLogPortId.setStatus("mandatory")
_VcVirtualPorts_ObjectIdentity = ObjectIdentity
vcVirtualPorts = _VcVirtualPorts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35)
)
_VcvVirtualPortTable_Object = MibTable
vcvVirtualPortTable = _VcvVirtualPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 1)
)
if mibBuilder.loadTexts:
    vcvVirtualPortTable.setStatus("mandatory")
_VcvVirtualPortEntry_Object = MibTableRow
vcvVirtualPortEntry = _VcvVirtualPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 1, 1)
)
vcvVirtualPortEntry.setIndexNames(
    (0, "PCE-MIB", "vcvVirtualPortId"),
)
if mibBuilder.loadTexts:
    vcvVirtualPortEntry.setStatus("mandatory")


class _VcvVirtualPortId_Type(Integer32):
    """Custom type vcvVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vpIp", 2),
          ("vpVoix", 1))
    )


_VcvVirtualPortId_Type.__name__ = "Integer32"
_VcvVirtualPortId_Object = MibTableColumn
vcvVirtualPortId = _VcvVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 1, 1, 1),
    _VcvVirtualPortId_Type()
)
vcvVirtualPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvVirtualPortId.setStatus("mandatory")
_VcvIpVirtualPort_ObjectIdentity = ObjectIdentity
vcvIpVirtualPort = _VcvIpVirtualPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5)
)
_VcvIpLocalTable_Object = MibTable
vcvIpLocalTable = _VcvIpLocalTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 1)
)
if mibBuilder.loadTexts:
    vcvIpLocalTable.setStatus("mandatory")
_VcvIpLocalEntry_Object = MibTableRow
vcvIpLocalEntry = _VcvIpLocalEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 1, 1)
)
vcvIpLocalEntry.setIndexNames(
    (0, "PCE-MIB", "vcvIpLocVirtualPortId"),
)
if mibBuilder.loadTexts:
    vcvIpLocalEntry.setStatus("mandatory")


class _VcvIpLocVirtualPortId_Type(Integer32):
    """Custom type vcvIpLocVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vpIp", 2),
          ("vpVoix", 1))
    )


_VcvIpLocVirtualPortId_Type.__name__ = "Integer32"
_VcvIpLocVirtualPortId_Object = MibTableColumn
vcvIpLocVirtualPortId = _VcvIpLocVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 1, 1, 1),
    _VcvIpLocVirtualPortId_Type()
)
vcvIpLocVirtualPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvIpLocVirtualPortId.setStatus("mandatory")
_VcvIpLocAddressHost_Type = IpAddress
_VcvIpLocAddressHost_Object = MibTableColumn
vcvIpLocAddressHost = _VcvIpLocAddressHost_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 1, 1, 2),
    _VcvIpLocAddressHost_Type()
)
vcvIpLocAddressHost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvIpLocAddressHost.setStatus("mandatory")
_VcvIpLocSubNetMask_Type = IpAddress
_VcvIpLocSubNetMask_Object = MibTableColumn
vcvIpLocSubNetMask = _VcvIpLocSubNetMask_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 1, 1, 3),
    _VcvIpLocSubNetMask_Type()
)
vcvIpLocSubNetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvIpLocSubNetMask.setStatus("mandatory")


class _VcvIpLocMtu_Type(Integer32):
    """Custom type vcvIpLocMtu based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(576, 9180),
    )


_VcvIpLocMtu_Type.__name__ = "Integer32"
_VcvIpLocMtu_Object = MibTableColumn
vcvIpLocMtu = _VcvIpLocMtu_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 1, 1, 4),
    _VcvIpLocMtu_Type()
)
vcvIpLocMtu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvIpLocMtu.setStatus("mandatory")
_VcvIpLocRouteNextHop_Type = IpAddress
_VcvIpLocRouteNextHop_Object = MibTableColumn
vcvIpLocRouteNextHop = _VcvIpLocRouteNextHop_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 1, 1, 5),
    _VcvIpLocRouteNextHop_Type()
)
vcvIpLocRouteNextHop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvIpLocRouteNextHop.setStatus("mandatory")


class _VcvIpLocMinimumRecallTimer_Type(Integer32):
    """Custom type vcvIpLocMinimumRecallTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_VcvIpLocMinimumRecallTimer_Type.__name__ = "Integer32"
_VcvIpLocMinimumRecallTimer_Object = MibTableColumn
vcvIpLocMinimumRecallTimer = _VcvIpLocMinimumRecallTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 1, 1, 6),
    _VcvIpLocMinimumRecallTimer_Type()
)
vcvIpLocMinimumRecallTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvIpLocMinimumRecallTimer.setStatus("mandatory")


class _VcvIpLocSvcClearCallTimer_Type(Integer32):
    """Custom type vcvIpLocSvcClearCallTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_VcvIpLocSvcClearCallTimer_Type.__name__ = "Integer32"
_VcvIpLocSvcClearCallTimer_Object = MibTableColumn
vcvIpLocSvcClearCallTimer = _VcvIpLocSvcClearCallTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 1, 1, 7),
    _VcvIpLocSvcClearCallTimer_Type()
)
vcvIpLocSvcClearCallTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvIpLocSvcClearCallTimer.setStatus("mandatory")


class _VcvIpLocSvcCallRetryCount_Type(Integer32):
    """Custom type vcvIpLocSvcCallRetryCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_VcvIpLocSvcCallRetryCount_Type.__name__ = "Integer32"
_VcvIpLocSvcCallRetryCount_Object = MibTableColumn
vcvIpLocSvcCallRetryCount = _VcvIpLocSvcCallRetryCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 1, 1, 8),
    _VcvIpLocSvcCallRetryCount_Type()
)
vcvIpLocSvcCallRetryCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvIpLocSvcCallRetryCount.setStatus("mandatory")
_VcvSnmp_ObjectIdentity = ObjectIdentity
vcvSnmp = _VcvSnmp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5)
)
_VcvSnmpGen_ObjectIdentity = ObjectIdentity
vcvSnmpGen = _VcvSnmpGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 1)
)


class _VcvSnmpGenVirtualPortId_Type(Integer32):
    """Custom type vcvSnmpGenVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vpIp", 2),
          ("vpVoix", 1))
    )


_VcvSnmpGenVirtualPortId_Type.__name__ = "Integer32"
_VcvSnmpGenVirtualPortId_Object = MibScalar
vcvSnmpGenVirtualPortId = _VcvSnmpGenVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 1, 1),
    _VcvSnmpGenVirtualPortId_Type()
)
vcvSnmpGenVirtualPortId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvSnmpGenVirtualPortId.setStatus("mandatory")


class _VcvSnmpGenCommunityStringReadOnly_Type(DisplayString):
    """Custom type vcvSnmpGenCommunityStringReadOnly based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 14),
    )


_VcvSnmpGenCommunityStringReadOnly_Type.__name__ = "DisplayString"
_VcvSnmpGenCommunityStringReadOnly_Object = MibScalar
vcvSnmpGenCommunityStringReadOnly = _VcvSnmpGenCommunityStringReadOnly_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 1, 2),
    _VcvSnmpGenCommunityStringReadOnly_Type()
)
vcvSnmpGenCommunityStringReadOnly.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvSnmpGenCommunityStringReadOnly.setStatus("mandatory")


class _VcvSnmpGenCommunityStringReadWrite_Type(DisplayString):
    """Custom type vcvSnmpGenCommunityStringReadWrite based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 14),
    )


_VcvSnmpGenCommunityStringReadWrite_Type.__name__ = "DisplayString"
_VcvSnmpGenCommunityStringReadWrite_Object = MibScalar
vcvSnmpGenCommunityStringReadWrite = _VcvSnmpGenCommunityStringReadWrite_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 1, 3),
    _VcvSnmpGenCommunityStringReadWrite_Type()
)
vcvSnmpGenCommunityStringReadWrite.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvSnmpGenCommunityStringReadWrite.setStatus("mandatory")


class _VcvSnmpGenCommunityStringTrap_Type(DisplayString):
    """Custom type vcvSnmpGenCommunityStringTrap based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 14),
    )


_VcvSnmpGenCommunityStringTrap_Type.__name__ = "DisplayString"
_VcvSnmpGenCommunityStringTrap_Object = MibScalar
vcvSnmpGenCommunityStringTrap = _VcvSnmpGenCommunityStringTrap_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 1, 4),
    _VcvSnmpGenCommunityStringTrap_Type()
)
vcvSnmpGenCommunityStringTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvSnmpGenCommunityStringTrap.setStatus("mandatory")


class _VcvSnmpGenAuthenticationFailureTrap_Type(Integer32):
    """Custom type vcvSnmpGenAuthenticationFailureTrap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_VcvSnmpGenAuthenticationFailureTrap_Type.__name__ = "Integer32"
_VcvSnmpGenAuthenticationFailureTrap_Object = MibScalar
vcvSnmpGenAuthenticationFailureTrap = _VcvSnmpGenAuthenticationFailureTrap_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 1, 5),
    _VcvSnmpGenAuthenticationFailureTrap_Type()
)
vcvSnmpGenAuthenticationFailureTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvSnmpGenAuthenticationFailureTrap.setStatus("mandatory")
_VcvSnmpManagerTable_Object = MibTable
vcvSnmpManagerTable = _VcvSnmpManagerTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 2)
)
if mibBuilder.loadTexts:
    vcvSnmpManagerTable.setStatus("mandatory")
_VcvSnmpManagerEntry_Object = MibTableRow
vcvSnmpManagerEntry = _VcvSnmpManagerEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 2, 1)
)
vcvSnmpManagerEntry.setIndexNames(
    (0, "PCE-MIB", "vcvSnmpManagerIpAddress"),
)
if mibBuilder.loadTexts:
    vcvSnmpManagerEntry.setStatus("mandatory")
_VcvSnmpManagerIpAddress_Type = IpAddress
_VcvSnmpManagerIpAddress_Object = MibTableColumn
vcvSnmpManagerIpAddress = _VcvSnmpManagerIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 2, 1, 1),
    _VcvSnmpManagerIpAddress_Type()
)
vcvSnmpManagerIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvSnmpManagerIpAddress.setStatus("mandatory")


class _VcvSnmpManagerStatus_Type(Integer32):
    """Custom type vcvSnmpManagerStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_VcvSnmpManagerStatus_Type.__name__ = "Integer32"
_VcvSnmpManagerStatus_Object = MibTableColumn
vcvSnmpManagerStatus = _VcvSnmpManagerStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 2, 1, 2),
    _VcvSnmpManagerStatus_Type()
)
vcvSnmpManagerStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvSnmpManagerStatus.setStatus("mandatory")


class _VcvSnmpManagerName_Type(DisplayString):
    """Custom type vcvSnmpManagerName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 12),
    )


_VcvSnmpManagerName_Type.__name__ = "DisplayString"
_VcvSnmpManagerName_Object = MibTableColumn
vcvSnmpManagerName = _VcvSnmpManagerName_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 2, 1, 3),
    _VcvSnmpManagerName_Type()
)
vcvSnmpManagerName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvSnmpManagerName.setStatus("mandatory")


class _VcvSnmpManagerSendTraps_Type(Integer32):
    """Custom type vcvSnmpManagerSendTraps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_VcvSnmpManagerSendTraps_Type.__name__ = "Integer32"
_VcvSnmpManagerSendTraps_Object = MibTableColumn
vcvSnmpManagerSendTraps = _VcvSnmpManagerSendTraps_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 2, 1, 4),
    _VcvSnmpManagerSendTraps_Type()
)
vcvSnmpManagerSendTraps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvSnmpManagerSendTraps.setStatus("mandatory")


class _VcvSnmpManagerTrapsUdpPort_Type(Integer32):
    """Custom type vcvSnmpManagerTrapsUdpPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_VcvSnmpManagerTrapsUdpPort_Type.__name__ = "Integer32"
_VcvSnmpManagerTrapsUdpPort_Object = MibTableColumn
vcvSnmpManagerTrapsUdpPort = _VcvSnmpManagerTrapsUdpPort_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 2, 1, 5),
    _VcvSnmpManagerTrapsUdpPort_Type()
)
vcvSnmpManagerTrapsUdpPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvSnmpManagerTrapsUdpPort.setStatus("mandatory")
_VcvRemoteConfTable_Object = MibTable
vcvRemoteConfTable = _VcvRemoteConfTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 3)
)
if mibBuilder.loadTexts:
    vcvRemoteConfTable.setStatus("mandatory")
_VcvRemoteConfEntry_Object = MibTableRow
vcvRemoteConfEntry = _VcvRemoteConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 3, 1)
)
vcvRemoteConfEntry.setIndexNames(
    (0, "PCE-MIB", "vcvRemoteConfName"),
)
if mibBuilder.loadTexts:
    vcvRemoteConfEntry.setStatus("mandatory")


class _VcvRemoteConfName_Type(DisplayString):
    """Custom type vcvRemoteConfName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 12),
    )


_VcvRemoteConfName_Type.__name__ = "DisplayString"
_VcvRemoteConfName_Object = MibTableColumn
vcvRemoteConfName = _VcvRemoteConfName_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 3, 1, 1),
    _VcvRemoteConfName_Type()
)
vcvRemoteConfName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvRemoteConfName.setStatus("mandatory")


class _VcvRemoteConfStatus_Type(Integer32):
    """Custom type vcvRemoteConfStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_VcvRemoteConfStatus_Type.__name__ = "Integer32"
_VcvRemoteConfStatus_Object = MibTableColumn
vcvRemoteConfStatus = _VcvRemoteConfStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 3, 1, 2),
    _VcvRemoteConfStatus_Type()
)
vcvRemoteConfStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvRemoteConfStatus.setStatus("mandatory")


class _VcvRemoteConfWanAddress_Type(OctetString):
    """Custom type vcvRemoteConfWanAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_VcvRemoteConfWanAddress_Type.__name__ = "OctetString"
_VcvRemoteConfWanAddress_Object = MibTableColumn
vcvRemoteConfWanAddress = _VcvRemoteConfWanAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 3, 1, 3),
    _VcvRemoteConfWanAddress_Type()
)
vcvRemoteConfWanAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvRemoteConfWanAddress.setStatus("mandatory")
_VcvTftpTable_Object = MibTable
vcvTftpTable = _VcvTftpTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 10)
)
if mibBuilder.loadTexts:
    vcvTftpTable.setStatus("mandatory")
_VcvTftpEntry_Object = MibTableRow
vcvTftpEntry = _VcvTftpEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 10, 1)
)
vcvTftpEntry.setIndexNames(
    (0, "PCE-MIB", "vcvTftpIpAddress"),
)
if mibBuilder.loadTexts:
    vcvTftpEntry.setStatus("mandatory")
_VcvTftpIpAddress_Type = IpAddress
_VcvTftpIpAddress_Object = MibTableColumn
vcvTftpIpAddress = _VcvTftpIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 10, 1, 1),
    _VcvTftpIpAddress_Type()
)
vcvTftpIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvTftpIpAddress.setStatus("mandatory")


class _VcvTftpStatus_Type(Integer32):
    """Custom type vcvTftpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_VcvTftpStatus_Type.__name__ = "Integer32"
_VcvTftpStatus_Object = MibTableColumn
vcvTftpStatus = _VcvTftpStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 10, 1, 2),
    _VcvTftpStatus_Type()
)
vcvTftpStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvTftpStatus.setStatus("mandatory")


class _VcvTftpName_Type(DisplayString):
    """Custom type vcvTftpName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_VcvTftpName_Type.__name__ = "DisplayString"
_VcvTftpName_Object = MibTableColumn
vcvTftpName = _VcvTftpName_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 10, 1, 3),
    _VcvTftpName_Type()
)
vcvTftpName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvTftpName.setStatus("mandatory")


class _VcvTftpRetryTimer_Type(Integer32):
    """Custom type vcvTftpRetryTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 600),
    )


_VcvTftpRetryTimer_Type.__name__ = "Integer32"
_VcvTftpRetryTimer_Object = MibTableColumn
vcvTftpRetryTimer = _VcvTftpRetryTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 10, 1, 4),
    _VcvTftpRetryTimer_Type()
)
vcvTftpRetryTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvTftpRetryTimer.setStatus("mandatory")


class _VcvTftpInactTimer_Type(Integer32):
    """Custom type vcvTftpInactTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 3600),
    )


_VcvTftpInactTimer_Type.__name__ = "Integer32"
_VcvTftpInactTimer_Object = MibTableColumn
vcvTftpInactTimer = _VcvTftpInactTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 10, 1, 5),
    _VcvTftpInactTimer_Type()
)
vcvTftpInactTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvTftpInactTimer.setStatus("mandatory")
_VcvRemoteNetToMediaTable_Object = MibTable
vcvRemoteNetToMediaTable = _VcvRemoteNetToMediaTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 15)
)
if mibBuilder.loadTexts:
    vcvRemoteNetToMediaTable.setStatus("mandatory")
_VcvRemoteNetToMediaEntry_Object = MibTableRow
vcvRemoteNetToMediaEntry = _VcvRemoteNetToMediaEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 15, 1)
)
vcvRemoteNetToMediaEntry.setIndexNames(
    (0, "PCE-MIB", "vcvRemNetIpAddress"),
)
if mibBuilder.loadTexts:
    vcvRemoteNetToMediaEntry.setStatus("mandatory")
_VcvRemNetIpAddress_Type = IpAddress
_VcvRemNetIpAddress_Object = MibTableColumn
vcvRemNetIpAddress = _VcvRemNetIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 15, 1, 1),
    _VcvRemNetIpAddress_Type()
)
vcvRemNetIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvRemNetIpAddress.setStatus("mandatory")


class _VcvRemNetStatus_Type(Integer32):
    """Custom type vcvRemNetStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_VcvRemNetStatus_Type.__name__ = "Integer32"
_VcvRemNetStatus_Object = MibTableColumn
vcvRemNetStatus = _VcvRemNetStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 15, 1, 2),
    _VcvRemNetStatus_Type()
)
vcvRemNetStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvRemNetStatus.setStatus("mandatory")


class _VcvRemNetWanAddress_Type(OctetString):
    """Custom type vcvRemNetWanAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_VcvRemNetWanAddress_Type.__name__ = "OctetString"
_VcvRemNetWanAddress_Object = MibTableColumn
vcvRemNetWanAddress = _VcvRemNetWanAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 15, 1, 3),
    _VcvRemNetWanAddress_Type()
)
vcvRemNetWanAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvRemNetWanAddress.setStatus("mandatory")


class _VcvRemNetEncapsulation_Type(Integer32):
    """Custom type vcvRemNetEncapsulation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fripRFC", 2),
          ("fripSimple", 1))
    )


_VcvRemNetEncapsulation_Type.__name__ = "Integer32"
_VcvRemNetEncapsulation_Object = MibTableColumn
vcvRemNetEncapsulation = _VcvRemNetEncapsulation_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 15, 1, 4),
    _VcvRemNetEncapsulation_Type()
)
vcvRemNetEncapsulation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvRemNetEncapsulation.setStatus("mandatory")
_VcvVoiceVirtualPort_ObjectIdentity = ObjectIdentity
vcvVoiceVirtualPort = _VcvVoiceVirtualPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10)
)
_VcvVoiceGen_ObjectIdentity = ObjectIdentity
vcvVoiceGen = _VcvVoiceGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 1)
)


class _VcvVoiceVirtualPortId_Type(Integer32):
    """Custom type vcvVoiceVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vpIp", 2),
          ("vpVoix", 1))
    )


_VcvVoiceVirtualPortId_Type.__name__ = "Integer32"
_VcvVoiceVirtualPortId_Object = MibScalar
vcvVoiceVirtualPortId = _VcvVoiceVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 1, 1),
    _VcvVoiceVirtualPortId_Type()
)
vcvVoiceVirtualPortId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceVirtualPortId.setStatus("mandatory")
_VcvVoiceTransportTable_Object = MibTable
vcvVoiceTransportTable = _VcvVoiceTransportTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 2)
)
if mibBuilder.loadTexts:
    vcvVoiceTransportTable.setStatus("mandatory")
_VcvVoiceTransportEntry_Object = MibTableRow
vcvVoiceTransportEntry = _VcvVoiceTransportEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 2, 1)
)
vcvVoiceTransportEntry.setIndexNames(
    (0, "PCE-MIB", "vcvVoiceTransProfileId"),
)
if mibBuilder.loadTexts:
    vcvVoiceTransportEntry.setStatus("mandatory")


class _VcvVoiceTransProfileId_Type(Integer32):
    """Custom type vcvVoiceTransProfileId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_VcvVoiceTransProfileId_Type.__name__ = "Integer32"
_VcvVoiceTransProfileId_Object = MibTableColumn
vcvVoiceTransProfileId = _VcvVoiceTransProfileId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 2, 1, 1),
    _VcvVoiceTransProfileId_Type()
)
vcvVoiceTransProfileId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceTransProfileId.setStatus("mandatory")


class _VcvVoiceTransEncapsulationMode_Type(Integer32):
    """Custom type vcvVoiceTransEncapsulationMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("frf", 1),
          ("private", 2))
    )


_VcvVoiceTransEncapsulationMode_Type.__name__ = "Integer32"
_VcvVoiceTransEncapsulationMode_Object = MibTableColumn
vcvVoiceTransEncapsulationMode = _VcvVoiceTransEncapsulationMode_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 2, 1, 2),
    _VcvVoiceTransEncapsulationMode_Type()
)
vcvVoiceTransEncapsulationMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceTransEncapsulationMode.setStatus("mandatory")


class _VcvVoiceTransMaxPayLoadNumber_Type(Integer32):
    """Custom type vcvVoiceTransMaxPayLoadNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_VcvVoiceTransMaxPayLoadNumber_Type.__name__ = "Integer32"
_VcvVoiceTransMaxPayLoadNumber_Object = MibTableColumn
vcvVoiceTransMaxPayLoadNumber = _VcvVoiceTransMaxPayLoadNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 2, 1, 3),
    _VcvVoiceTransMaxPayLoadNumber_Type()
)
vcvVoiceTransMaxPayLoadNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceTransMaxPayLoadNumber.setStatus("mandatory")


class _VcvVoiceTransCompressionAlgorithm_Type(Integer32):
    """Custom type vcvVoiceTransCompressionAlgorithm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("celp", 2),
          ("g728", 1),
          ("g729", 3),
          ("g729A", 4))
    )


_VcvVoiceTransCompressionAlgorithm_Type.__name__ = "Integer32"
_VcvVoiceTransCompressionAlgorithm_Object = MibTableColumn
vcvVoiceTransCompressionAlgorithm = _VcvVoiceTransCompressionAlgorithm_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 2, 1, 4),
    _VcvVoiceTransCompressionAlgorithm_Type()
)
vcvVoiceTransCompressionAlgorithm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceTransCompressionAlgorithm.setStatus("mandatory")


class _VcvVoiceTransJitterCompensation_Type(Integer32):
    """Custom type vcvVoiceTransJitterCompensation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 9),
    )


_VcvVoiceTransJitterCompensation_Type.__name__ = "Integer32"
_VcvVoiceTransJitterCompensation_Object = MibTableColumn
vcvVoiceTransJitterCompensation = _VcvVoiceTransJitterCompensation_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 2, 1, 5),
    _VcvVoiceTransJitterCompensation_Type()
)
vcvVoiceTransJitterCompensation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceTransJitterCompensation.setStatus("mandatory")


class _VcvVoiceTransVoicePacketsCombination_Type(Integer32):
    """Custom type vcvVoiceTransVoicePacketsCombination based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_VcvVoiceTransVoicePacketsCombination_Type.__name__ = "Integer32"
_VcvVoiceTransVoicePacketsCombination_Object = MibTableColumn
vcvVoiceTransVoicePacketsCombination = _VcvVoiceTransVoicePacketsCombination_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 2, 1, 6),
    _VcvVoiceTransVoicePacketsCombination_Type()
)
vcvVoiceTransVoicePacketsCombination.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceTransVoicePacketsCombination.setStatus("mandatory")


class _VcvVoiceTransQosBc_Type(Integer32):
    """Custom type vcvVoiceTransQosBc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("s14400", 2),
          ("s19200", 3),
          ("s32000", 4),
          ("s38400", 5),
          ("s48000", 6),
          ("s9600", 1))
    )


_VcvVoiceTransQosBc_Type.__name__ = "Integer32"
_VcvVoiceTransQosBc_Object = MibTableColumn
vcvVoiceTransQosBc = _VcvVoiceTransQosBc_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 2, 1, 7),
    _VcvVoiceTransQosBc_Type()
)
vcvVoiceTransQosBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceTransQosBc.setStatus("mandatory")


class _VcvVoiceTransQosBe_Type(Integer32):
    """Custom type vcvVoiceTransQosBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("s14400", 2),
          ("s19200", 3),
          ("s32000", 4),
          ("s38400", 5),
          ("s48000", 6),
          ("s9600", 1))
    )


_VcvVoiceTransQosBe_Type.__name__ = "Integer32"
_VcvVoiceTransQosBe_Object = MibTableColumn
vcvVoiceTransQosBe = _VcvVoiceTransQosBe_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 2, 1, 8),
    _VcvVoiceTransQosBe_Type()
)
vcvVoiceTransQosBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceTransQosBe.setStatus("mandatory")


class _VcvVoiceTransQosCir_Type(Integer32):
    """Custom type vcvVoiceTransQosCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("s14400", 2),
          ("s19200", 3),
          ("s32000", 4),
          ("s38400", 5),
          ("s48000", 6),
          ("s9600", 1))
    )


_VcvVoiceTransQosCir_Type.__name__ = "Integer32"
_VcvVoiceTransQosCir_Object = MibTableColumn
vcvVoiceTransQosCir = _VcvVoiceTransQosCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 2, 1, 9),
    _VcvVoiceTransQosCir_Type()
)
vcvVoiceTransQosCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceTransQosCir.setStatus("mandatory")
_VcvVoiceSuscriberTable_Object = MibTable
vcvVoiceSuscriberTable = _VcvVoiceSuscriberTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 3)
)
if mibBuilder.loadTexts:
    vcvVoiceSuscriberTable.setStatus("mandatory")
_VcvVoiceSuscriberEntry_Object = MibTableRow
vcvVoiceSuscriberEntry = _VcvVoiceSuscriberEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 3, 1)
)
vcvVoiceSuscriberEntry.setIndexNames(
    (0, "PCE-MIB", "vcvVoiceSuscrOrderNumber"),
    (0, "PCE-MIB", "vcvVoiceSuscrNumber"),
)
if mibBuilder.loadTexts:
    vcvVoiceSuscriberEntry.setStatus("mandatory")


class _VcvVoiceSuscrOrderNumber_Type(Integer32):
    """Custom type vcvVoiceSuscrOrderNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9),
    )


_VcvVoiceSuscrOrderNumber_Type.__name__ = "Integer32"
_VcvVoiceSuscrOrderNumber_Object = MibTableColumn
vcvVoiceSuscrOrderNumber = _VcvVoiceSuscrOrderNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 3, 1, 1),
    _VcvVoiceSuscrOrderNumber_Type()
)
vcvVoiceSuscrOrderNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvVoiceSuscrOrderNumber.setStatus("mandatory")


class _VcvVoiceSuscrNumber_Type(DisplayString):
    """Custom type vcvVoiceSuscrNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 21),
    )


_VcvVoiceSuscrNumber_Type.__name__ = "DisplayString"
_VcvVoiceSuscrNumber_Object = MibTableColumn
vcvVoiceSuscrNumber = _VcvVoiceSuscrNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 3, 1, 2),
    _VcvVoiceSuscrNumber_Type()
)
vcvVoiceSuscrNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvVoiceSuscrNumber.setStatus("mandatory")


class _VcvVoiceSuscrStatus_Type(Integer32):
    """Custom type vcvVoiceSuscrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_VcvVoiceSuscrStatus_Type.__name__ = "Integer32"
_VcvVoiceSuscrStatus_Object = MibTableColumn
vcvVoiceSuscrStatus = _VcvVoiceSuscrStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 3, 1, 3),
    _VcvVoiceSuscrStatus_Type()
)
vcvVoiceSuscrStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceSuscrStatus.setStatus("mandatory")


class _VcvVoiceSuscrTransportNetwork_Type(Integer32):
    """Custom type vcvVoiceSuscrTransportNetwork based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fr", 1),
          ("other", 2))
    )


_VcvVoiceSuscrTransportNetwork_Type.__name__ = "Integer32"
_VcvVoiceSuscrTransportNetwork_Object = MibTableColumn
vcvVoiceSuscrTransportNetwork = _VcvVoiceSuscrTransportNetwork_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 3, 1, 4),
    _VcvVoiceSuscrTransportNetwork_Type()
)
vcvVoiceSuscrTransportNetwork.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvVoiceSuscrTransportNetwork.setStatus("mandatory")


class _VcvVoiceSuscrTransportNetworkAddress_Type(OctetString):
    """Custom type vcvVoiceSuscrTransportNetworkAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_VcvVoiceSuscrTransportNetworkAddress_Type.__name__ = "OctetString"
_VcvVoiceSuscrTransportNetworkAddress_Object = MibTableColumn
vcvVoiceSuscrTransportNetworkAddress = _VcvVoiceSuscrTransportNetworkAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 3, 1, 5),
    _VcvVoiceSuscrTransportNetworkAddress_Type()
)
vcvVoiceSuscrTransportNetworkAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceSuscrTransportNetworkAddress.setStatus("mandatory")


class _VcvVoiceSuscrTransportProfileId_Type(Integer32):
    """Custom type vcvVoiceSuscrTransportProfileId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_VcvVoiceSuscrTransportProfileId_Type.__name__ = "Integer32"
_VcvVoiceSuscrTransportProfileId_Object = MibTableColumn
vcvVoiceSuscrTransportProfileId = _VcvVoiceSuscrTransportProfileId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 3, 1, 6),
    _VcvVoiceSuscrTransportProfileId_Type()
)
vcvVoiceSuscrTransportProfileId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceSuscrTransportProfileId.setStatus("mandatory")


class _VcvVoiceSuscrRemovedDigitNumber_Type(Integer32):
    """Custom type vcvVoiceSuscrRemovedDigitNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 21),
    )


_VcvVoiceSuscrRemovedDigitNumber_Type.__name__ = "Integer32"
_VcvVoiceSuscrRemovedDigitNumber_Object = MibTableColumn
vcvVoiceSuscrRemovedDigitNumber = _VcvVoiceSuscrRemovedDigitNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 3, 1, 7),
    _VcvVoiceSuscrRemovedDigitNumber_Type()
)
vcvVoiceSuscrRemovedDigitNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceSuscrRemovedDigitNumber.setStatus("mandatory")


class _VcvVoiceSuscrInsPrefix_Type(DisplayString):
    """Custom type vcvVoiceSuscrInsPrefix based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 21),
    )


_VcvVoiceSuscrInsPrefix_Type.__name__ = "DisplayString"
_VcvVoiceSuscrInsPrefix_Object = MibTableColumn
vcvVoiceSuscrInsPrefix = _VcvVoiceSuscrInsPrefix_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 3, 1, 8),
    _VcvVoiceSuscrInsPrefix_Type()
)
vcvVoiceSuscrInsPrefix.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceSuscrInsPrefix.setStatus("mandatory")


class _VcvVoiceSuscrInsSuffix_Type(DisplayString):
    """Custom type vcvVoiceSuscrInsSuffix based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 21),
    )


_VcvVoiceSuscrInsSuffix_Type.__name__ = "DisplayString"
_VcvVoiceSuscrInsSuffix_Object = MibTableColumn
vcvVoiceSuscrInsSuffix = _VcvVoiceSuscrInsSuffix_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 3, 1, 9),
    _VcvVoiceSuscrInsSuffix_Type()
)
vcvVoiceSuscrInsSuffix.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceSuscrInsSuffix.setStatus("mandatory")
_VcvVoiceSwTable_Object = MibTable
vcvVoiceSwTable = _VcvVoiceSwTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 4)
)
if mibBuilder.loadTexts:
    vcvVoiceSwTable.setStatus("mandatory")
_VcvVoiceSwEntry_Object = MibTableRow
vcvVoiceSwEntry = _VcvVoiceSwEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 4, 1)
)
vcvVoiceSwEntry.setIndexNames(
    (0, "PCE-MIB", "vcvVoiceSwOrderNumber"),
    (0, "PCE-MIB", "vcvVoiceSwSuscriberNumber"),
)
if mibBuilder.loadTexts:
    vcvVoiceSwEntry.setStatus("mandatory")


class _VcvVoiceSwOrderNumber_Type(Integer32):
    """Custom type vcvVoiceSwOrderNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9),
    )


_VcvVoiceSwOrderNumber_Type.__name__ = "Integer32"
_VcvVoiceSwOrderNumber_Object = MibTableColumn
vcvVoiceSwOrderNumber = _VcvVoiceSwOrderNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 4, 1, 1),
    _VcvVoiceSwOrderNumber_Type()
)
vcvVoiceSwOrderNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvVoiceSwOrderNumber.setStatus("mandatory")


class _VcvVoiceSwSuscriberNumber_Type(DisplayString):
    """Custom type vcvVoiceSwSuscriberNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 21),
    )


_VcvVoiceSwSuscriberNumber_Type.__name__ = "DisplayString"
_VcvVoiceSwSuscriberNumber_Object = MibTableColumn
vcvVoiceSwSuscriberNumber = _VcvVoiceSwSuscriberNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 4, 1, 2),
    _VcvVoiceSwSuscriberNumber_Type()
)
vcvVoiceSwSuscriberNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvVoiceSwSuscriberNumber.setStatus("mandatory")


class _VcvVoiceSwStatus_Type(Integer32):
    """Custom type vcvVoiceSwStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_VcvVoiceSwStatus_Type.__name__ = "Integer32"
_VcvVoiceSwStatus_Object = MibTableColumn
vcvVoiceSwStatus = _VcvVoiceSwStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 4, 1, 3),
    _VcvVoiceSwStatus_Type()
)
vcvVoiceSwStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceSwStatus.setStatus("mandatory")


class _VcvVoiceSwLogPortSetId_Type(Integer32):
    """Custom type vcvVoiceSwLogPortSetId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9),
    )


_VcvVoiceSwLogPortSetId_Type.__name__ = "Integer32"
_VcvVoiceSwLogPortSetId_Object = MibTableColumn
vcvVoiceSwLogPortSetId = _VcvVoiceSwLogPortSetId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 4, 1, 4),
    _VcvVoiceSwLogPortSetId_Type()
)
vcvVoiceSwLogPortSetId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceSwLogPortSetId.setStatus("mandatory")


class _VcvVoiceSwRemovedDigitNumber_Type(Integer32):
    """Custom type vcvVoiceSwRemovedDigitNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 21),
    )


_VcvVoiceSwRemovedDigitNumber_Type.__name__ = "Integer32"
_VcvVoiceSwRemovedDigitNumber_Object = MibTableColumn
vcvVoiceSwRemovedDigitNumber = _VcvVoiceSwRemovedDigitNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 4, 1, 5),
    _VcvVoiceSwRemovedDigitNumber_Type()
)
vcvVoiceSwRemovedDigitNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceSwRemovedDigitNumber.setStatus("mandatory")


class _VcvVoiceSwInsPrefix_Type(DisplayString):
    """Custom type vcvVoiceSwInsPrefix based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 21),
    )


_VcvVoiceSwInsPrefix_Type.__name__ = "DisplayString"
_VcvVoiceSwInsPrefix_Object = MibTableColumn
vcvVoiceSwInsPrefix = _VcvVoiceSwInsPrefix_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 4, 1, 6),
    _VcvVoiceSwInsPrefix_Type()
)
vcvVoiceSwInsPrefix.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceSwInsPrefix.setStatus("mandatory")


class _VcvVoiceSwInsSuffix_Type(DisplayString):
    """Custom type vcvVoiceSwInsSuffix based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 21),
    )


_VcvVoiceSwInsSuffix_Type.__name__ = "DisplayString"
_VcvVoiceSwInsSuffix_Object = MibTableColumn
vcvVoiceSwInsSuffix = _VcvVoiceSwInsSuffix_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 4, 1, 7),
    _VcvVoiceSwInsSuffix_Type()
)
vcvVoiceSwInsSuffix.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceSwInsSuffix.setStatus("mandatory")
_VcvDialingReceptTable_Object = MibTable
vcvDialingReceptTable = _VcvDialingReceptTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 5)
)
if mibBuilder.loadTexts:
    vcvDialingReceptTable.setStatus("mandatory")
_VcvDialingReceptEntry_Object = MibTableRow
vcvDialingReceptEntry = _VcvDialingReceptEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 5, 1)
)
vcvDialingReceptEntry.setIndexNames(
    (0, "PCE-MIB", "vcvDialRxSuscriberNumber"),
)
if mibBuilder.loadTexts:
    vcvDialingReceptEntry.setStatus("mandatory")


class _VcvDialRxSuscriberNumber_Type(DisplayString):
    """Custom type vcvDialRxSuscriberNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 21),
    )


_VcvDialRxSuscriberNumber_Type.__name__ = "DisplayString"
_VcvDialRxSuscriberNumber_Object = MibTableColumn
vcvDialRxSuscriberNumber = _VcvDialRxSuscriberNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 5, 1, 1),
    _VcvDialRxSuscriberNumber_Type()
)
vcvDialRxSuscriberNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvDialRxSuscriberNumber.setStatus("mandatory")


class _VcvDialRxStatus_Type(Integer32):
    """Custom type vcvDialRxStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_VcvDialRxStatus_Type.__name__ = "Integer32"
_VcvDialRxStatus_Object = MibTableColumn
vcvDialRxStatus = _VcvDialRxStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 5, 1, 2),
    _VcvDialRxStatus_Type()
)
vcvDialRxStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvDialRxStatus.setStatus("mandatory")


class _VcvDialRxNumberLength_Type(Integer32):
    """Custom type vcvDialRxNumberLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 21),
    )


_VcvDialRxNumberLength_Type.__name__ = "Integer32"
_VcvDialRxNumberLength_Object = MibTableColumn
vcvDialRxNumberLength = _VcvDialRxNumberLength_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 5, 1, 3),
    _VcvDialRxNumberLength_Type()
)
vcvDialRxNumberLength.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvDialRxNumberLength.setStatus("mandatory")


class _VcvDialRxEndOfDialingTimer_Type(Integer32):
    """Custom type vcvDialRxEndOfDialingTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_VcvDialRxEndOfDialingTimer_Type.__name__ = "Integer32"
_VcvDialRxEndOfDialingTimer_Object = MibTableColumn
vcvDialRxEndOfDialingTimer = _VcvDialRxEndOfDialingTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 5, 1, 4),
    _VcvDialRxEndOfDialingTimer_Type()
)
vcvDialRxEndOfDialingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvDialRxEndOfDialingTimer.setStatus("mandatory")
_VcvVoiceLogPort_ObjectIdentity = ObjectIdentity
vcvVoiceLogPort = _VcvVoiceLogPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10)
)
_VcvVoiceLogicalPortTable_Object = MibTable
vcvVoiceLogicalPortTable = _VcvVoiceLogicalPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 1)
)
if mibBuilder.loadTexts:
    vcvVoiceLogicalPortTable.setStatus("mandatory")
_VcvVoiceLogicalPortEntry_Object = MibTableRow
vcvVoiceLogicalPortEntry = _VcvVoiceLogicalPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 1, 1)
)
vcvVoiceLogicalPortEntry.setIndexNames(
    (0, "PCE-MIB", "vcvVoiceLogPortId"),
)
if mibBuilder.loadTexts:
    vcvVoiceLogicalPortEntry.setStatus("mandatory")


class _VcvVoiceLogPortId_Type(Integer32):
    """Custom type vcvVoiceLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_VcvVoiceLogPortId_Type.__name__ = "Integer32"
_VcvVoiceLogPortId_Object = MibTableColumn
vcvVoiceLogPortId = _VcvVoiceLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 1, 1, 1),
    _VcvVoiceLogPortId_Type()
)
vcvVoiceLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvVoiceLogPortId.setStatus("mandatory")


class _VcvVoiceLogPortStatus_Type(Integer32):
    """Custom type vcvVoiceLogPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_VcvVoiceLogPortStatus_Type.__name__ = "Integer32"
_VcvVoiceLogPortStatus_Object = MibTableColumn
vcvVoiceLogPortStatus = _VcvVoiceLogPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 1, 1, 2),
    _VcvVoiceLogPortStatus_Type()
)
vcvVoiceLogPortStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceLogPortStatus.setStatus("mandatory")


class _VcvVoiceLogPortType_Type(Integer32):
    """Custom type vcvVoiceLogPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("emPermanent", 1),
          ("emSwitched", 2),
          ("fxx", 3))
    )


_VcvVoiceLogPortType_Type.__name__ = "Integer32"
_VcvVoiceLogPortType_Object = MibTableColumn
vcvVoiceLogPortType = _VcvVoiceLogPortType_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 1, 1, 3),
    _VcvVoiceLogPortType_Type()
)
vcvVoiceLogPortType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceLogPortType.setStatus("mandatory")
_VcvProfileTone_ObjectIdentity = ObjectIdentity
vcvProfileTone = _VcvProfileTone_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5)
)
_VcvToneGenTable_Object = MibTable
vcvToneGenTable = _VcvToneGenTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 1)
)
if mibBuilder.loadTexts:
    vcvToneGenTable.setStatus("mandatory")
_VcvToneGenEntry_Object = MibTableRow
vcvToneGenEntry = _VcvToneGenEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 1, 1)
)
vcvToneGenEntry.setIndexNames(
    (0, "PCE-MIB", "vcvToneGenProfileId"),
)
if mibBuilder.loadTexts:
    vcvToneGenEntry.setStatus("mandatory")


class _VcvToneGenProfileId_Type(Integer32):
    """Custom type vcvToneGenProfileId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_VcvToneGenProfileId_Type.__name__ = "Integer32"
_VcvToneGenProfileId_Object = MibTableColumn
vcvToneGenProfileId = _VcvToneGenProfileId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 1, 1, 1),
    _VcvToneGenProfileId_Type()
)
vcvToneGenProfileId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvToneGenProfileId.setStatus("mandatory")


class _VcvToneGenLevel_Type(Integer32):
    """Custom type vcvToneGenLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 60),
    )


_VcvToneGenLevel_Type.__name__ = "Integer32"
_VcvToneGenLevel_Object = MibTableColumn
vcvToneGenLevel = _VcvToneGenLevel_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 1, 1, 2),
    _VcvToneGenLevel_Type()
)
vcvToneGenLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvToneGenLevel.setStatus("mandatory")
_VcvToneTable_Object = MibTable
vcvToneTable = _VcvToneTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 2)
)
if mibBuilder.loadTexts:
    vcvToneTable.setStatus("mandatory")
_VcvToneEntry_Object = MibTableRow
vcvToneEntry = _VcvToneEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 2, 1)
)
vcvToneEntry.setIndexNames(
    (0, "PCE-MIB", "vcvToneProfileId"),
    (0, "PCE-MIB", "vcvToneType"),
)
if mibBuilder.loadTexts:
    vcvToneEntry.setStatus("mandatory")


class _VcvToneProfileId_Type(Integer32):
    """Custom type vcvToneProfileId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_VcvToneProfileId_Type.__name__ = "Integer32"
_VcvToneProfileId_Object = MibTableColumn
vcvToneProfileId = _VcvToneProfileId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 2, 1, 1),
    _VcvToneProfileId_Type()
)
vcvToneProfileId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvToneProfileId.setStatus("mandatory")


class _VcvToneType_Type(Integer32):
    """Custom type vcvToneType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("busy", 4),
          ("callBack", 5),
          ("congestion", 3),
          ("dialTone", 1),
          ("trouble", 2))
    )


_VcvToneType_Type.__name__ = "Integer32"
_VcvToneType_Object = MibTableColumn
vcvToneType = _VcvToneType_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 2, 1, 2),
    _VcvToneType_Type()
)
vcvToneType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvToneType.setStatus("mandatory")


class _VcvToneEnable_Type(Integer32):
    """Custom type vcvToneEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_VcvToneEnable_Type.__name__ = "Integer32"
_VcvToneEnable_Object = MibTableColumn
vcvToneEnable = _VcvToneEnable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 2, 1, 3),
    _VcvToneEnable_Type()
)
vcvToneEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvToneEnable.setStatus("mandatory")


class _VcvToneFreq1_Type(Integer32):
    """Custom type vcvToneFreq1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_VcvToneFreq1_Type.__name__ = "Integer32"
_VcvToneFreq1_Object = MibTableColumn
vcvToneFreq1 = _VcvToneFreq1_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 2, 1, 4),
    _VcvToneFreq1_Type()
)
vcvToneFreq1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvToneFreq1.setStatus("mandatory")


class _VcvToneDuration1_Type(Integer32):
    """Custom type vcvToneDuration1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 500),
    )


_VcvToneDuration1_Type.__name__ = "Integer32"
_VcvToneDuration1_Object = MibTableColumn
vcvToneDuration1 = _VcvToneDuration1_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 2, 1, 5),
    _VcvToneDuration1_Type()
)
vcvToneDuration1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvToneDuration1.setStatus("mandatory")


class _VcvToneFreq2_Type(Integer32):
    """Custom type vcvToneFreq2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_VcvToneFreq2_Type.__name__ = "Integer32"
_VcvToneFreq2_Object = MibTableColumn
vcvToneFreq2 = _VcvToneFreq2_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 2, 1, 6),
    _VcvToneFreq2_Type()
)
vcvToneFreq2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvToneFreq2.setStatus("mandatory")


class _VcvToneDuration2_Type(Integer32):
    """Custom type vcvToneDuration2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 500),
    )


_VcvToneDuration2_Type.__name__ = "Integer32"
_VcvToneDuration2_Object = MibTableColumn
vcvToneDuration2 = _VcvToneDuration2_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 2, 1, 7),
    _VcvToneDuration2_Type()
)
vcvToneDuration2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvToneDuration2.setStatus("mandatory")
_VcvVoiceLogicalPortEM_ObjectIdentity = ObjectIdentity
vcvVoiceLogicalPortEM = _VcvVoiceLogicalPortEM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10)
)
_VcvEMPerm_ObjectIdentity = ObjectIdentity
vcvEMPerm = _VcvEMPerm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 1)
)
_VcvEMPermTable_Object = MibTable
vcvEMPermTable = _VcvEMPermTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 1, 1)
)
if mibBuilder.loadTexts:
    vcvEMPermTable.setStatus("mandatory")
_VcvEMPermEntry_Object = MibTableRow
vcvEMPermEntry = _VcvEMPermEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 1, 1, 1)
)
vcvEMPermEntry.setIndexNames(
    (0, "PCE-MIB", "vcvEMPermLpId"),
)
if mibBuilder.loadTexts:
    vcvEMPermEntry.setStatus("mandatory")


class _VcvEMPermLpId_Type(Integer32):
    """Custom type vcvEMPermLpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_VcvEMPermLpId_Type.__name__ = "Integer32"
_VcvEMPermLpId_Object = MibTableColumn
vcvEMPermLpId = _VcvEMPermLpId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 1, 1, 1, 1),
    _VcvEMPermLpId_Type()
)
vcvEMPermLpId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvEMPermLpId.setStatus("mandatory")


class _VcvEMPermCommunicationMode_Type(Integer32):
    """Custom type vcvEMPermCommunicationMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dce", 2),
          ("dte", 1))
    )


_VcvEMPermCommunicationMode_Type.__name__ = "Integer32"
_VcvEMPermCommunicationMode_Object = MibTableColumn
vcvEMPermCommunicationMode = _VcvEMPermCommunicationMode_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 1, 1, 1, 2),
    _VcvEMPermCommunicationMode_Type()
)
vcvEMPermCommunicationMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMPermCommunicationMode.setStatus("mandatory")


class _VcvEMPermRemoteNumber_Type(DisplayString):
    """Custom type vcvEMPermRemoteNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 21),
    )


_VcvEMPermRemoteNumber_Type.__name__ = "DisplayString"
_VcvEMPermRemoteNumber_Object = MibTableColumn
vcvEMPermRemoteNumber = _VcvEMPermRemoteNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 1, 1, 1, 3),
    _VcvEMPermRemoteNumber_Type()
)
vcvEMPermRemoteNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMPermRemoteNumber.setStatus("mandatory")


class _VcvEMPermInterfaceId_Type(Integer32):
    """Custom type vcvEMPermInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("v0", 1),
          ("v1", 2))
    )


_VcvEMPermInterfaceId_Type.__name__ = "Integer32"
_VcvEMPermInterfaceId_Object = MibTableColumn
vcvEMPermInterfaceId = _VcvEMPermInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 1, 1, 1, 4),
    _VcvEMPermInterfaceId_Type()
)
vcvEMPermInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMPermInterfaceId.setStatus("mandatory")
_VcvEMSw_ObjectIdentity = ObjectIdentity
vcvEMSw = _VcvEMSw_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2)
)
_VcvEMSwTable_Object = MibTable
vcvEMSwTable = _VcvEMSwTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 1)
)
if mibBuilder.loadTexts:
    vcvEMSwTable.setStatus("mandatory")
_VcvEMSwEntry_Object = MibTableRow
vcvEMSwEntry = _VcvEMSwEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 1, 1)
)
vcvEMSwEntry.setIndexNames(
    (0, "PCE-MIB", "vcvEMSwLpId"),
)
if mibBuilder.loadTexts:
    vcvEMSwEntry.setStatus("mandatory")


class _VcvEMSwLpId_Type(Integer32):
    """Custom type vcvEMSwLpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_VcvEMSwLpId_Type.__name__ = "Integer32"
_VcvEMSwLpId_Object = MibTableColumn
vcvEMSwLpId = _VcvEMSwLpId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 1, 1, 1),
    _VcvEMSwLpId_Type()
)
vcvEMSwLpId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvEMSwLpId.setStatus("mandatory")


class _VcvEMSwLogPortSetId_Type(Integer32):
    """Custom type vcvEMSwLogPortSetId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9),
    )


_VcvEMSwLogPortSetId_Type.__name__ = "Integer32"
_VcvEMSwLogPortSetId_Object = MibTableColumn
vcvEMSwLogPortSetId = _VcvEMSwLogPortSetId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 1, 1, 2),
    _VcvEMSwLogPortSetId_Type()
)
vcvEMSwLogPortSetId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMSwLogPortSetId.setStatus("mandatory")


class _VcvEMSwCallType_Type(Integer32):
    """Custom type vcvEMSwCallType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("incoming", 1),
          ("mixed", 3),
          ("outgoing", 2))
    )


_VcvEMSwCallType_Type.__name__ = "Integer32"
_VcvEMSwCallType_Object = MibTableColumn
vcvEMSwCallType = _VcvEMSwCallType_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 1, 1, 3),
    _VcvEMSwCallType_Type()
)
vcvEMSwCallType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMSwCallType.setStatus("mandatory")


class _VcvEMSwRemoteNumber_Type(DisplayString):
    """Custom type vcvEMSwRemoteNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 21),
    )


_VcvEMSwRemoteNumber_Type.__name__ = "DisplayString"
_VcvEMSwRemoteNumber_Object = MibTableColumn
vcvEMSwRemoteNumber = _VcvEMSwRemoteNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 1, 1, 4),
    _VcvEMSwRemoteNumber_Type()
)
vcvEMSwRemoteNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMSwRemoteNumber.setStatus("mandatory")


class _VcvEMSwConfigId_Type(Integer32):
    """Custom type vcvEMSwConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_VcvEMSwConfigId_Type.__name__ = "Integer32"
_VcvEMSwConfigId_Object = MibTableColumn
vcvEMSwConfigId = _VcvEMSwConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 1, 1, 5),
    _VcvEMSwConfigId_Type()
)
vcvEMSwConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvEMSwConfigId.setStatus("mandatory")


class _VcvEMSwInterfaceId_Type(Integer32):
    """Custom type vcvEMSwInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("v0", 1),
          ("v1", 2))
    )


_VcvEMSwInterfaceId_Type.__name__ = "Integer32"
_VcvEMSwInterfaceId_Object = MibTableColumn
vcvEMSwInterfaceId = _VcvEMSwInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 1, 1, 6),
    _VcvEMSwInterfaceId_Type()
)
vcvEMSwInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMSwInterfaceId.setStatus("mandatory")
_VcvEMConfigTable_Object = MibTable
vcvEMConfigTable = _VcvEMConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2)
)
if mibBuilder.loadTexts:
    vcvEMConfigTable.setStatus("mandatory")
_VcvEMConfigEntry_Object = MibTableRow
vcvEMConfigEntry = _VcvEMConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1)
)
vcvEMConfigEntry.setIndexNames(
    (0, "PCE-MIB", "vcvEMConfId"),
)
if mibBuilder.loadTexts:
    vcvEMConfigEntry.setStatus("mandatory")


class _VcvEMConfId_Type(Integer32):
    """Custom type vcvEMConfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_VcvEMConfId_Type.__name__ = "Integer32"
_VcvEMConfId_Object = MibTableColumn
vcvEMConfId = _VcvEMConfId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 1),
    _VcvEMConfId_Type()
)
vcvEMConfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvEMConfId.setStatus("mandatory")


class _VcvEMConfCallSignalling_Type(Integer32):
    """Custom type vcvEMConfCallSignalling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("nColisee", 1),
          ("noResp", 6),
          ("sDelay", 4),
          ("simm", 3),
          ("swink", 5),
          ("uColisee", 2))
    )


_VcvEMConfCallSignalling_Type.__name__ = "Integer32"
_VcvEMConfCallSignalling_Object = MibTableColumn
vcvEMConfCallSignalling = _VcvEMConfCallSignalling_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 2),
    _VcvEMConfCallSignalling_Type()
)
vcvEMConfCallSignalling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMConfCallSignalling.setStatus("mandatory")


class _VcvEMConfDialingMode_Type(Integer32):
    """Custom type vcvEMConfDialingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dec", 1),
          ("dtmf", 2))
    )


_VcvEMConfDialingMode_Type.__name__ = "Integer32"
_VcvEMConfDialingMode_Object = MibTableColumn
vcvEMConfDialingMode = _VcvEMConfDialingMode_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 3),
    _VcvEMConfDialingMode_Type()
)
vcvEMConfDialingMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMConfDialingMode.setStatus("mandatory")


class _VcvEMConfDialingTimeOut_Type(Integer32):
    """Custom type vcvEMConfDialingTimeOut based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_VcvEMConfDialingTimeOut_Type.__name__ = "Integer32"
_VcvEMConfDialingTimeOut_Object = MibTableColumn
vcvEMConfDialingTimeOut = _VcvEMConfDialingTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 4),
    _VcvEMConfDialingTimeOut_Type()
)
vcvEMConfDialingTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMConfDialingTimeOut.setStatus("mandatory")


class _VcvEMConfSigChannelDiscTimeOut_Type(Integer32):
    """Custom type vcvEMConfSigChannelDiscTimeOut based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_VcvEMConfSigChannelDiscTimeOut_Type.__name__ = "Integer32"
_VcvEMConfSigChannelDiscTimeOut_Object = MibTableColumn
vcvEMConfSigChannelDiscTimeOut = _VcvEMConfSigChannelDiscTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 5),
    _VcvEMConfSigChannelDiscTimeOut_Type()
)
vcvEMConfSigChannelDiscTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMConfSigChannelDiscTimeOut.setStatus("mandatory")


class _VcvEMConfTimeBetweenSuccOutCall_Type(Integer32):
    """Custom type vcvEMConfTimeBetweenSuccOutCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_VcvEMConfTimeBetweenSuccOutCall_Type.__name__ = "Integer32"
_VcvEMConfTimeBetweenSuccOutCall_Object = MibTableColumn
vcvEMConfTimeBetweenSuccOutCall = _VcvEMConfTimeBetweenSuccOutCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 6),
    _VcvEMConfTimeBetweenSuccOutCall_Type()
)
vcvEMConfTimeBetweenSuccOutCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMConfTimeBetweenSuccOutCall.setStatus("mandatory")


class _VcvEMConfLineInterfacePolarity_Type(Integer32):
    """Custom type vcvEMConfLineInterfacePolarity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inverted", 2),
          ("normal", 1))
    )


_VcvEMConfLineInterfacePolarity_Type.__name__ = "Integer32"
_VcvEMConfLineInterfacePolarity_Object = MibTableColumn
vcvEMConfLineInterfacePolarity = _VcvEMConfLineInterfacePolarity_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 7),
    _VcvEMConfLineInterfacePolarity_Type()
)
vcvEMConfLineInterfacePolarity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMConfLineInterfacePolarity.setStatus("mandatory")


class _VcvEMConfMinLineSeizureAckTime_Type(Integer32):
    """Custom type vcvEMConfMinLineSeizureAckTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 50),
    )


_VcvEMConfMinLineSeizureAckTime_Type.__name__ = "Integer32"
_VcvEMConfMinLineSeizureAckTime_Object = MibTableColumn
vcvEMConfMinLineSeizureAckTime = _VcvEMConfMinLineSeizureAckTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 8),
    _VcvEMConfMinLineSeizureAckTime_Type()
)
vcvEMConfMinLineSeizureAckTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMConfMinLineSeizureAckTime.setStatus("mandatory")


class _VcvEMConfMaxLineSeizureAckTime_Type(Integer32):
    """Custom type vcvEMConfMaxLineSeizureAckTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 50),
    )


_VcvEMConfMaxLineSeizureAckTime_Type.__name__ = "Integer32"
_VcvEMConfMaxLineSeizureAckTime_Object = MibTableColumn
vcvEMConfMaxLineSeizureAckTime = _VcvEMConfMaxLineSeizureAckTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 9),
    _VcvEMConfMaxLineSeizureAckTime_Type()
)
vcvEMConfMaxLineSeizureAckTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMConfMaxLineSeizureAckTime.setStatus("mandatory")


class _VcvEMConfLineSeizureAckTime_Type(Integer32):
    """Custom type vcvEMConfLineSeizureAckTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 50),
    )


_VcvEMConfLineSeizureAckTime_Type.__name__ = "Integer32"
_VcvEMConfLineSeizureAckTime_Object = MibTableColumn
vcvEMConfLineSeizureAckTime = _VcvEMConfLineSeizureAckTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 10),
    _VcvEMConfLineSeizureAckTime_Type()
)
vcvEMConfLineSeizureAckTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMConfLineSeizureAckTime.setStatus("mandatory")


class _VcvEMConfClearToIncCallTime_Type(Integer32):
    """Custom type vcvEMConfClearToIncCallTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 50),
    )


_VcvEMConfClearToIncCallTime_Type.__name__ = "Integer32"
_VcvEMConfClearToIncCallTime_Object = MibTableColumn
vcvEMConfClearToIncCallTime = _VcvEMConfClearToIncCallTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 11),
    _VcvEMConfClearToIncCallTime_Type()
)
vcvEMConfClearToIncCallTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMConfClearToIncCallTime.setStatus("mandatory")


class _VcvEMConfSeizureAckPulseDuration_Type(Integer32):
    """Custom type vcvEMConfSeizureAckPulseDuration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_VcvEMConfSeizureAckPulseDuration_Type.__name__ = "Integer32"
_VcvEMConfSeizureAckPulseDuration_Object = MibTableColumn
vcvEMConfSeizureAckPulseDuration = _VcvEMConfSeizureAckPulseDuration_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 12),
    _VcvEMConfSeizureAckPulseDuration_Type()
)
vcvEMConfSeizureAckPulseDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMConfSeizureAckPulseDuration.setStatus("mandatory")


class _VcvEMConfMinSeizureAckPulseDuration_Type(Integer32):
    """Custom type vcvEMConfMinSeizureAckPulseDuration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_VcvEMConfMinSeizureAckPulseDuration_Type.__name__ = "Integer32"
_VcvEMConfMinSeizureAckPulseDuration_Object = MibTableColumn
vcvEMConfMinSeizureAckPulseDuration = _VcvEMConfMinSeizureAckPulseDuration_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 13),
    _VcvEMConfMinSeizureAckPulseDuration_Type()
)
vcvEMConfMinSeizureAckPulseDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMConfMinSeizureAckPulseDuration.setStatus("mandatory")


class _VcvEMConfDialingFormat_Type(Integer32):
    """Custom type vcvEMConfDialingFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ds1", 1),
          ("ds2", 2))
    )


_VcvEMConfDialingFormat_Type.__name__ = "Integer32"
_VcvEMConfDialingFormat_Object = MibTableColumn
vcvEMConfDialingFormat = _VcvEMConfDialingFormat_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 14),
    _VcvEMConfDialingFormat_Type()
)
vcvEMConfDialingFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMConfDialingFormat.setStatus("mandatory")


class _VcvEMConfInterdigitTime_Type(Integer32):
    """Custom type vcvEMConfInterdigitTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_VcvEMConfInterdigitTime_Type.__name__ = "Integer32"
_VcvEMConfInterdigitTime_Object = MibTableColumn
vcvEMConfInterdigitTime = _VcvEMConfInterdigitTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 15),
    _VcvEMConfInterdigitTime_Type()
)
vcvEMConfInterdigitTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMConfInterdigitTime.setStatus("mandatory")


class _VcvEMConfPauseTime_Type(Integer32):
    """Custom type vcvEMConfPauseTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_VcvEMConfPauseTime_Type.__name__ = "Integer32"
_VcvEMConfPauseTime_Object = MibTableColumn
vcvEMConfPauseTime = _VcvEMConfPauseTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 16),
    _VcvEMConfPauseTime_Type()
)
vcvEMConfPauseTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMConfPauseTime.setStatus("mandatory")


class _VcvEMConfDtmfDigitTime_Type(Integer32):
    """Custom type vcvEMConfDtmfDigitTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 10),
    )


_VcvEMConfDtmfDigitTime_Type.__name__ = "Integer32"
_VcvEMConfDtmfDigitTime_Object = MibTableColumn
vcvEMConfDtmfDigitTime = _VcvEMConfDtmfDigitTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 17),
    _VcvEMConfDtmfDigitTime_Type()
)
vcvEMConfDtmfDigitTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMConfDtmfDigitTime.setStatus("mandatory")


class _VcvEMConfDtmfDigitLevel_Type(Integer32):
    """Custom type vcvEMConfDtmfDigitLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 40),
    )


_VcvEMConfDtmfDigitLevel_Type.__name__ = "Integer32"
_VcvEMConfDtmfDigitLevel_Object = MibTableColumn
vcvEMConfDtmfDigitLevel = _VcvEMConfDtmfDigitLevel_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 18),
    _VcvEMConfDtmfDigitLevel_Type()
)
vcvEMConfDtmfDigitLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMConfDtmfDigitLevel.setStatus("mandatory")


class _VcvEMConfDelayBeforeDialing_Type(Integer32):
    """Custom type vcvEMConfDelayBeforeDialing based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_VcvEMConfDelayBeforeDialing_Type.__name__ = "Integer32"
_VcvEMConfDelayBeforeDialing_Object = MibTableColumn
vcvEMConfDelayBeforeDialing = _VcvEMConfDelayBeforeDialing_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 19),
    _VcvEMConfDelayBeforeDialing_Type()
)
vcvEMConfDelayBeforeDialing.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMConfDelayBeforeDialing.setStatus("mandatory")


class _VcvEMConfDigitReceptionTimeOut_Type(Integer32):
    """Custom type vcvEMConfDigitReceptionTimeOut based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_VcvEMConfDigitReceptionTimeOut_Type.__name__ = "Integer32"
_VcvEMConfDigitReceptionTimeOut_Object = MibTableColumn
vcvEMConfDigitReceptionTimeOut = _VcvEMConfDigitReceptionTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 20),
    _VcvEMConfDigitReceptionTimeOut_Type()
)
vcvEMConfDigitReceptionTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMConfDigitReceptionTimeOut.setStatus("mandatory")


class _VcvEMConfEndOfDialingTimer_Type(Integer32):
    """Custom type vcvEMConfEndOfDialingTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 60),
    )


_VcvEMConfEndOfDialingTimer_Type.__name__ = "Integer32"
_VcvEMConfEndOfDialingTimer_Object = MibTableColumn
vcvEMConfEndOfDialingTimer = _VcvEMConfEndOfDialingTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 21),
    _VcvEMConfEndOfDialingTimer_Type()
)
vcvEMConfEndOfDialingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvEMConfEndOfDialingTimer.setStatus("mandatory")


class _VcvEMConfToneProfile_Type(Integer32):
    """Custom type vcvEMConfToneProfile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_VcvEMConfToneProfile_Type.__name__ = "Integer32"
_VcvEMConfToneProfile_Object = MibTableColumn
vcvEMConfToneProfile = _VcvEMConfToneProfile_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 22),
    _VcvEMConfToneProfile_Type()
)
vcvEMConfToneProfile.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvEMConfToneProfile.setStatus("mandatory")
_VcvVoiceLogicalPortFxx_ObjectIdentity = ObjectIdentity
vcvVoiceLogicalPortFxx = _VcvVoiceLogicalPortFxx_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15)
)
_VcvFxxLpTable_Object = MibTable
vcvFxxLpTable = _VcvFxxLpTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 1)
)
if mibBuilder.loadTexts:
    vcvFxxLpTable.setStatus("mandatory")
_VcvFxxLpEntry_Object = MibTableRow
vcvFxxLpEntry = _VcvFxxLpEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 1, 1)
)
vcvFxxLpEntry.setIndexNames(
    (0, "PCE-MIB", "vcvFxxLpLogPortId"),
)
if mibBuilder.loadTexts:
    vcvFxxLpEntry.setStatus("mandatory")


class _VcvFxxLpLogPortId_Type(Integer32):
    """Custom type vcvFxxLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_VcvFxxLpLogPortId_Type.__name__ = "Integer32"
_VcvFxxLpLogPortId_Object = MibTableColumn
vcvFxxLpLogPortId = _VcvFxxLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 1, 1, 1),
    _VcvFxxLpLogPortId_Type()
)
vcvFxxLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvFxxLpLogPortId.setStatus("mandatory")


class _VcvFxxLpSetId_Type(Integer32):
    """Custom type vcvFxxLpSetId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9),
    )


_VcvFxxLpSetId_Type.__name__ = "Integer32"
_VcvFxxLpSetId_Object = MibTableColumn
vcvFxxLpSetId = _VcvFxxLpSetId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 1, 1, 2),
    _VcvFxxLpSetId_Type()
)
vcvFxxLpSetId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvFxxLpSetId.setStatus("mandatory")


class _VcvFxxLpCallType_Type(Integer32):
    """Custom type vcvFxxLpCallType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("incoming", 1),
          ("mixed", 3),
          ("outgoing", 2))
    )


_VcvFxxLpCallType_Type.__name__ = "Integer32"
_VcvFxxLpCallType_Object = MibTableColumn
vcvFxxLpCallType = _VcvFxxLpCallType_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 1, 1, 3),
    _VcvFxxLpCallType_Type()
)
vcvFxxLpCallType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvFxxLpCallType.setStatus("mandatory")


class _VcvFxxLpRemoteNumber_Type(DisplayString):
    """Custom type vcvFxxLpRemoteNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 21),
    )


_VcvFxxLpRemoteNumber_Type.__name__ = "DisplayString"
_VcvFxxLpRemoteNumber_Object = MibTableColumn
vcvFxxLpRemoteNumber = _VcvFxxLpRemoteNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 1, 1, 4),
    _VcvFxxLpRemoteNumber_Type()
)
vcvFxxLpRemoteNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvFxxLpRemoteNumber.setStatus("mandatory")


class _VcvFxxLpConfigId_Type(Integer32):
    """Custom type vcvFxxLpConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_VcvFxxLpConfigId_Type.__name__ = "Integer32"
_VcvFxxLpConfigId_Object = MibTableColumn
vcvFxxLpConfigId = _VcvFxxLpConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 1, 1, 5),
    _VcvFxxLpConfigId_Type()
)
vcvFxxLpConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvFxxLpConfigId.setStatus("mandatory")


class _VcvFxxLpInterfaceId_Type(Integer32):
    """Custom type vcvFxxLpInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("v0", 1),
          ("v1", 2))
    )


_VcvFxxLpInterfaceId_Type.__name__ = "Integer32"
_VcvFxxLpInterfaceId_Object = MibTableColumn
vcvFxxLpInterfaceId = _VcvFxxLpInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 1, 1, 6),
    _VcvFxxLpInterfaceId_Type()
)
vcvFxxLpInterfaceId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvFxxLpInterfaceId.setStatus("mandatory")
_VcvFxxConfigTable_Object = MibTable
vcvFxxConfigTable = _VcvFxxConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2)
)
if mibBuilder.loadTexts:
    vcvFxxConfigTable.setStatus("mandatory")
_VcvFxxConfigEntry_Object = MibTableRow
vcvFxxConfigEntry = _VcvFxxConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1)
)
vcvFxxConfigEntry.setIndexNames(
    (0, "PCE-MIB", "vcvFxxConfId"),
)
if mibBuilder.loadTexts:
    vcvFxxConfigEntry.setStatus("mandatory")


class _VcvFxxConfId_Type(Integer32):
    """Custom type vcvFxxConfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_VcvFxxConfId_Type.__name__ = "Integer32"
_VcvFxxConfId_Object = MibTableColumn
vcvFxxConfId = _VcvFxxConfId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 1),
    _VcvFxxConfId_Type()
)
vcvFxxConfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvFxxConfId.setStatus("mandatory")


class _VcvFxxConfCallSignalling_Type(Integer32):
    """Custom type vcvFxxConfCallSignalling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fxx", 1),
          ("other", 2))
    )


_VcvFxxConfCallSignalling_Type.__name__ = "Integer32"
_VcvFxxConfCallSignalling_Object = MibTableColumn
vcvFxxConfCallSignalling = _VcvFxxConfCallSignalling_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 2),
    _VcvFxxConfCallSignalling_Type()
)
vcvFxxConfCallSignalling.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvFxxConfCallSignalling.setStatus("mandatory")


class _VcvFxxConfDialingMode_Type(Integer32):
    """Custom type vcvFxxConfDialingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dec", 1),
          ("dtmf", 2))
    )


_VcvFxxConfDialingMode_Type.__name__ = "Integer32"
_VcvFxxConfDialingMode_Object = MibTableColumn
vcvFxxConfDialingMode = _VcvFxxConfDialingMode_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 3),
    _VcvFxxConfDialingMode_Type()
)
vcvFxxConfDialingMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvFxxConfDialingMode.setStatus("mandatory")


class _VcvFxxConfSigChannelDiscTimeOut_Type(Integer32):
    """Custom type vcvFxxConfSigChannelDiscTimeOut based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_VcvFxxConfSigChannelDiscTimeOut_Type.__name__ = "Integer32"
_VcvFxxConfSigChannelDiscTimeOut_Object = MibTableColumn
vcvFxxConfSigChannelDiscTimeOut = _VcvFxxConfSigChannelDiscTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 4),
    _VcvFxxConfSigChannelDiscTimeOut_Type()
)
vcvFxxConfSigChannelDiscTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvFxxConfSigChannelDiscTimeOut.setStatus("mandatory")


class _VcvFxxConfTimeBetweenSuccOutCall_Type(Integer32):
    """Custom type vcvFxxConfTimeBetweenSuccOutCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_VcvFxxConfTimeBetweenSuccOutCall_Type.__name__ = "Integer32"
_VcvFxxConfTimeBetweenSuccOutCall_Object = MibTableColumn
vcvFxxConfTimeBetweenSuccOutCall = _VcvFxxConfTimeBetweenSuccOutCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 5),
    _VcvFxxConfTimeBetweenSuccOutCall_Type()
)
vcvFxxConfTimeBetweenSuccOutCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvFxxConfTimeBetweenSuccOutCall.setStatus("mandatory")


class _VcvFxxConfDialingFormat_Type(Integer32):
    """Custom type vcvFxxConfDialingFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ds1", 1),
          ("ds2", 2))
    )


_VcvFxxConfDialingFormat_Type.__name__ = "Integer32"
_VcvFxxConfDialingFormat_Object = MibTableColumn
vcvFxxConfDialingFormat = _VcvFxxConfDialingFormat_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 6),
    _VcvFxxConfDialingFormat_Type()
)
vcvFxxConfDialingFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvFxxConfDialingFormat.setStatus("mandatory")


class _VcvFxxConfInterdigitTime_Type(Integer32):
    """Custom type vcvFxxConfInterdigitTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_VcvFxxConfInterdigitTime_Type.__name__ = "Integer32"
_VcvFxxConfInterdigitTime_Object = MibTableColumn
vcvFxxConfInterdigitTime = _VcvFxxConfInterdigitTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 7),
    _VcvFxxConfInterdigitTime_Type()
)
vcvFxxConfInterdigitTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvFxxConfInterdigitTime.setStatus("mandatory")


class _VcvFxxConfPauseTime_Type(Integer32):
    """Custom type vcvFxxConfPauseTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_VcvFxxConfPauseTime_Type.__name__ = "Integer32"
_VcvFxxConfPauseTime_Object = MibTableColumn
vcvFxxConfPauseTime = _VcvFxxConfPauseTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 8),
    _VcvFxxConfPauseTime_Type()
)
vcvFxxConfPauseTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvFxxConfPauseTime.setStatus("mandatory")


class _VcvFxxConfDtmfDigitTime_Type(Integer32):
    """Custom type vcvFxxConfDtmfDigitTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 10),
    )


_VcvFxxConfDtmfDigitTime_Type.__name__ = "Integer32"
_VcvFxxConfDtmfDigitTime_Object = MibTableColumn
vcvFxxConfDtmfDigitTime = _VcvFxxConfDtmfDigitTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 9),
    _VcvFxxConfDtmfDigitTime_Type()
)
vcvFxxConfDtmfDigitTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvFxxConfDtmfDigitTime.setStatus("mandatory")


class _VcvFxxConfDtmfDigitLevel_Type(Integer32):
    """Custom type vcvFxxConfDtmfDigitLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 40),
    )


_VcvFxxConfDtmfDigitLevel_Type.__name__ = "Integer32"
_VcvFxxConfDtmfDigitLevel_Object = MibTableColumn
vcvFxxConfDtmfDigitLevel = _VcvFxxConfDtmfDigitLevel_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 10),
    _VcvFxxConfDtmfDigitLevel_Type()
)
vcvFxxConfDtmfDigitLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvFxxConfDtmfDigitLevel.setStatus("mandatory")


class _VcvFxxConfTxRecallSignalDuration_Type(Integer32):
    """Custom type vcvFxxConfTxRecallSignalDuration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 50),
    )


_VcvFxxConfTxRecallSignalDuration_Type.__name__ = "Integer32"
_VcvFxxConfTxRecallSignalDuration_Object = MibTableColumn
vcvFxxConfTxRecallSignalDuration = _VcvFxxConfTxRecallSignalDuration_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 11),
    _VcvFxxConfTxRecallSignalDuration_Type()
)
vcvFxxConfTxRecallSignalDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvFxxConfTxRecallSignalDuration.setStatus("mandatory")


class _VcvFxxConfDelayBeforeDialing_Type(Integer32):
    """Custom type vcvFxxConfDelayBeforeDialing based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 50),
    )


_VcvFxxConfDelayBeforeDialing_Type.__name__ = "Integer32"
_VcvFxxConfDelayBeforeDialing_Object = MibTableColumn
vcvFxxConfDelayBeforeDialing = _VcvFxxConfDelayBeforeDialing_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 12),
    _VcvFxxConfDelayBeforeDialing_Type()
)
vcvFxxConfDelayBeforeDialing.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvFxxConfDelayBeforeDialing.setStatus("mandatory")


class _VcvFxxConfDialingTimeOut_Type(Integer32):
    """Custom type vcvFxxConfDialingTimeOut based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_VcvFxxConfDialingTimeOut_Type.__name__ = "Integer32"
_VcvFxxConfDialingTimeOut_Object = MibTableColumn
vcvFxxConfDialingTimeOut = _VcvFxxConfDialingTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 13),
    _VcvFxxConfDialingTimeOut_Type()
)
vcvFxxConfDialingTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvFxxConfDialingTimeOut.setStatus("mandatory")


class _VcvFxxConfDigitReceptionTimeOut_Type(Integer32):
    """Custom type vcvFxxConfDigitReceptionTimeOut based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_VcvFxxConfDigitReceptionTimeOut_Type.__name__ = "Integer32"
_VcvFxxConfDigitReceptionTimeOut_Object = MibTableColumn
vcvFxxConfDigitReceptionTimeOut = _VcvFxxConfDigitReceptionTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 14),
    _VcvFxxConfDigitReceptionTimeOut_Type()
)
vcvFxxConfDigitReceptionTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvFxxConfDigitReceptionTimeOut.setStatus("mandatory")


class _VcvFxxConfEndOfDialingTimer_Type(Integer32):
    """Custom type vcvFxxConfEndOfDialingTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 60),
    )


_VcvFxxConfEndOfDialingTimer_Type.__name__ = "Integer32"
_VcvFxxConfEndOfDialingTimer_Object = MibTableColumn
vcvFxxConfEndOfDialingTimer = _VcvFxxConfEndOfDialingTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 15),
    _VcvFxxConfEndOfDialingTimer_Type()
)
vcvFxxConfEndOfDialingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvFxxConfEndOfDialingTimer.setStatus("mandatory")


class _VcvFxxConfMinRxRecallSignalDuration_Type(Integer32):
    """Custom type vcvFxxConfMinRxRecallSignalDuration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 25),
    )


_VcvFxxConfMinRxRecallSignalDuration_Type.__name__ = "Integer32"
_VcvFxxConfMinRxRecallSignalDuration_Object = MibTableColumn
vcvFxxConfMinRxRecallSignalDuration = _VcvFxxConfMinRxRecallSignalDuration_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 16),
    _VcvFxxConfMinRxRecallSignalDuration_Type()
)
vcvFxxConfMinRxRecallSignalDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvFxxConfMinRxRecallSignalDuration.setStatus("mandatory")


class _VcvFxxConfToneProfile_Type(Integer32):
    """Custom type vcvFxxConfToneProfile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_VcvFxxConfToneProfile_Type.__name__ = "Integer32"
_VcvFxxConfToneProfile_Object = MibTableColumn
vcvFxxConfToneProfile = _VcvFxxConfToneProfile_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 17),
    _VcvFxxConfToneProfile_Type()
)
vcvFxxConfToneProfile.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvFxxConfToneProfile.setStatus("mandatory")


class _VcvFxxConfRingingProfile_Type(Integer32):
    """Custom type vcvFxxConfRingingProfile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_VcvFxxConfRingingProfile_Type.__name__ = "Integer32"
_VcvFxxConfRingingProfile_Object = MibTableColumn
vcvFxxConfRingingProfile = _VcvFxxConfRingingProfile_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 18),
    _VcvFxxConfRingingProfile_Type()
)
vcvFxxConfRingingProfile.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvFxxConfRingingProfile.setStatus("mandatory")
_VcvFxxRingTable_Object = MibTable
vcvFxxRingTable = _VcvFxxRingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 3)
)
if mibBuilder.loadTexts:
    vcvFxxRingTable.setStatus("mandatory")
_VcvFxxRingEntry_Object = MibTableRow
vcvFxxRingEntry = _VcvFxxRingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 3, 1)
)
vcvFxxRingEntry.setIndexNames(
    (0, "PCE-MIB", "vcvFxxRingProfile"),
)
if mibBuilder.loadTexts:
    vcvFxxRingEntry.setStatus("mandatory")


class _VcvFxxRingProfile_Type(Integer32):
    """Custom type vcvFxxRingProfile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_VcvFxxRingProfile_Type.__name__ = "Integer32"
_VcvFxxRingProfile_Object = MibTableColumn
vcvFxxRingProfile = _VcvFxxRingProfile_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 3, 1, 1),
    _VcvFxxRingProfile_Type()
)
vcvFxxRingProfile.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvFxxRingProfile.setStatus("mandatory")


class _VcvFxxRingFrequency_Type(Integer32):
    """Custom type vcvFxxRingFrequency based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 80),
    )


_VcvFxxRingFrequency_Type.__name__ = "Integer32"
_VcvFxxRingFrequency_Object = MibTableColumn
vcvFxxRingFrequency = _VcvFxxRingFrequency_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 3, 1, 2),
    _VcvFxxRingFrequency_Type()
)
vcvFxxRingFrequency.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvFxxRingFrequency.setStatus("mandatory")


class _VcvFxxRingTopDuration_Type(Integer32):
    """Custom type vcvFxxRingTopDuration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 50),
    )


_VcvFxxRingTopDuration_Type.__name__ = "Integer32"
_VcvFxxRingTopDuration_Object = MibTableColumn
vcvFxxRingTopDuration = _VcvFxxRingTopDuration_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 3, 1, 3),
    _VcvFxxRingTopDuration_Type()
)
vcvFxxRingTopDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvFxxRingTopDuration.setStatus("mandatory")


class _VcvFxxRingSilenceDuration_Type(Integer32):
    """Custom type vcvFxxRingSilenceDuration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 50),
    )


_VcvFxxRingSilenceDuration_Type.__name__ = "Integer32"
_VcvFxxRingSilenceDuration_Object = MibTableColumn
vcvFxxRingSilenceDuration = _VcvFxxRingSilenceDuration_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 3, 1, 4),
    _VcvFxxRingSilenceDuration_Type()
)
vcvFxxRingSilenceDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvFxxRingSilenceDuration.setStatus("mandatory")


class _VcvFxxRingMaxRingingTime_Type(Integer32):
    """Custom type vcvFxxRingMaxRingingTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 600),
    )


_VcvFxxRingMaxRingingTime_Type.__name__ = "Integer32"
_VcvFxxRingMaxRingingTime_Object = MibTableColumn
vcvFxxRingMaxRingingTime = _VcvFxxRingMaxRingingTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 3, 1, 5),
    _VcvFxxRingMaxRingingTime_Type()
)
vcvFxxRingMaxRingingTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvFxxRingMaxRingingTime.setStatus("mandatory")
_VcvAnalogLines_ObjectIdentity = ObjectIdentity
vcvAnalogLines = _VcvAnalogLines_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15)
)
_VcvAnalogLineTable_Object = MibTable
vcvAnalogLineTable = _VcvAnalogLineTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 1)
)
if mibBuilder.loadTexts:
    vcvAnalogLineTable.setStatus("mandatory")
_VcvAnalogLineEntry_Object = MibTableRow
vcvAnalogLineEntry = _VcvAnalogLineEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 1, 1)
)
vcvAnalogLineEntry.setIndexNames(
    (0, "PCE-MIB", "vcvAnalogLineInterfaceId"),
)
if mibBuilder.loadTexts:
    vcvAnalogLineEntry.setStatus("mandatory")


class _VcvAnalogLineInterfaceId_Type(Integer32):
    """Custom type vcvAnalogLineInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("v0", 1),
          ("v1", 2))
    )


_VcvAnalogLineInterfaceId_Type.__name__ = "Integer32"
_VcvAnalogLineInterfaceId_Object = MibTableColumn
vcvAnalogLineInterfaceId = _VcvAnalogLineInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 1, 1, 1),
    _VcvAnalogLineInterfaceId_Type()
)
vcvAnalogLineInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvAnalogLineInterfaceId.setStatus("mandatory")


class _VcvAnalogLineTypeInterface_Type(Integer32):
    """Custom type vcvAnalogLineTypeInterface based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("em", 1),
          ("fxo", 2),
          ("fxs", 3),
          ("ia50Hz", 5),
          ("ibx", 4))
    )


_VcvAnalogLineTypeInterface_Type.__name__ = "Integer32"
_VcvAnalogLineTypeInterface_Object = MibTableColumn
vcvAnalogLineTypeInterface = _VcvAnalogLineTypeInterface_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 1, 1, 2),
    _VcvAnalogLineTypeInterface_Type()
)
vcvAnalogLineTypeInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvAnalogLineTypeInterface.setStatus("mandatory")


class _VcvAnalogLineVoiceProfile_Type(Integer32):
    """Custom type vcvAnalogLineVoiceProfile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_VcvAnalogLineVoiceProfile_Type.__name__ = "Integer32"
_VcvAnalogLineVoiceProfile_Object = MibTableColumn
vcvAnalogLineVoiceProfile = _VcvAnalogLineVoiceProfile_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 1, 1, 3),
    _VcvAnalogLineVoiceProfile_Type()
)
vcvAnalogLineVoiceProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvAnalogLineVoiceProfile.setStatus("mandatory")
_VcvVoiceProfileTable_Object = MibTable
vcvVoiceProfileTable = _VcvVoiceProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5)
)
if mibBuilder.loadTexts:
    vcvVoiceProfileTable.setStatus("mandatory")
_VcvVoiceProfileEntry_Object = MibTableRow
vcvVoiceProfileEntry = _VcvVoiceProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1)
)
vcvVoiceProfileEntry.setIndexNames(
    (0, "PCE-MIB", "vcvVoiceProfId"),
)
if mibBuilder.loadTexts:
    vcvVoiceProfileEntry.setStatus("mandatory")


class _VcvVoiceProfId_Type(Integer32):
    """Custom type vcvVoiceProfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_VcvVoiceProfId_Type.__name__ = "Integer32"
_VcvVoiceProfId_Object = MibTableColumn
vcvVoiceProfId = _VcvVoiceProfId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1, 1),
    _VcvVoiceProfId_Type()
)
vcvVoiceProfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvVoiceProfId.setStatus("mandatory")


class _VcvVoiceProfTransmitLevel_Type(Integer32):
    """Custom type vcvVoiceProfTransmitLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 24),
    )


_VcvVoiceProfTransmitLevel_Type.__name__ = "Integer32"
_VcvVoiceProfTransmitLevel_Object = MibTableColumn
vcvVoiceProfTransmitLevel = _VcvVoiceProfTransmitLevel_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1, 2),
    _VcvVoiceProfTransmitLevel_Type()
)
vcvVoiceProfTransmitLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceProfTransmitLevel.setStatus("mandatory")


class _VcvVoiceProfReceiveLevel_Type(Integer32):
    """Custom type vcvVoiceProfReceiveLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_VcvVoiceProfReceiveLevel_Type.__name__ = "Integer32"
_VcvVoiceProfReceiveLevel_Object = MibTableColumn
vcvVoiceProfReceiveLevel = _VcvVoiceProfReceiveLevel_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1, 3),
    _VcvVoiceProfReceiveLevel_Type()
)
vcvVoiceProfReceiveLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceProfReceiveLevel.setStatus("mandatory")


class _VcvVoiceProfSilenceDetection_Type(Integer32):
    """Custom type vcvVoiceProfSilenceDetection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("cng", 3),
          ("no", 1),
          ("yes", 2))
    )


_VcvVoiceProfSilenceDetection_Type.__name__ = "Integer32"
_VcvVoiceProfSilenceDetection_Object = MibTableColumn
vcvVoiceProfSilenceDetection = _VcvVoiceProfSilenceDetection_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1, 4),
    _VcvVoiceProfSilenceDetection_Type()
)
vcvVoiceProfSilenceDetection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceProfSilenceDetection.setStatus("mandatory")


class _VcvVoiceProfSilenceDetectionLevel_Type(Integer32):
    """Custom type vcvVoiceProfSilenceDetectionLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("high", 3),
          ("low", 1),
          ("medium", 2))
    )


_VcvVoiceProfSilenceDetectionLevel_Type.__name__ = "Integer32"
_VcvVoiceProfSilenceDetectionLevel_Object = MibTableColumn
vcvVoiceProfSilenceDetectionLevel = _VcvVoiceProfSilenceDetectionLevel_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1, 5),
    _VcvVoiceProfSilenceDetectionLevel_Type()
)
vcvVoiceProfSilenceDetectionLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceProfSilenceDetectionLevel.setStatus("mandatory")


class _VcvVoiceProfEchoCancellation_Type(Integer32):
    """Custom type vcvVoiceProfEchoCancellation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_VcvVoiceProfEchoCancellation_Type.__name__ = "Integer32"
_VcvVoiceProfEchoCancellation_Object = MibTableColumn
vcvVoiceProfEchoCancellation = _VcvVoiceProfEchoCancellation_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1, 6),
    _VcvVoiceProfEchoCancellation_Type()
)
vcvVoiceProfEchoCancellation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceProfEchoCancellation.setStatus("mandatory")


class _VcvVoiceProfEchoCancellationLength_Type(Integer32):
    """Custom type vcvVoiceProfEchoCancellationLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("high", 3),
          ("low", 1),
          ("medium", 2))
    )


_VcvVoiceProfEchoCancellationLength_Type.__name__ = "Integer32"
_VcvVoiceProfEchoCancellationLength_Object = MibTableColumn
vcvVoiceProfEchoCancellationLength = _VcvVoiceProfEchoCancellationLength_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1, 7),
    _VcvVoiceProfEchoCancellationLength_Type()
)
vcvVoiceProfEchoCancellationLength.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceProfEchoCancellationLength.setStatus("mandatory")


class _VcvVoiceProfNoiseFramesPeriodicity_Type(Integer32):
    """Custom type vcvVoiceProfNoiseFramesPeriodicity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 10),
    )


_VcvVoiceProfNoiseFramesPeriodicity_Type.__name__ = "Integer32"
_VcvVoiceProfNoiseFramesPeriodicity_Object = MibTableColumn
vcvVoiceProfNoiseFramesPeriodicity = _VcvVoiceProfNoiseFramesPeriodicity_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1, 8),
    _VcvVoiceProfNoiseFramesPeriodicity_Type()
)
vcvVoiceProfNoiseFramesPeriodicity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceProfNoiseFramesPeriodicity.setStatus("mandatory")


class _VcvVoiceProfLoopActivation_Type(Integer32):
    """Custom type vcvVoiceProfLoopActivation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("local", 2),
          ("no", 1),
          ("remote", 3))
    )


_VcvVoiceProfLoopActivation_Type.__name__ = "Integer32"
_VcvVoiceProfLoopActivation_Object = MibTableColumn
vcvVoiceProfLoopActivation = _VcvVoiceProfLoopActivation_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1, 9),
    _VcvVoiceProfLoopActivation_Type()
)
vcvVoiceProfLoopActivation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceProfLoopActivation.setStatus("mandatory")


class _VcvVoiceProfFaxActivation_Type(Integer32):
    """Custom type vcvVoiceProfFaxActivation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_VcvVoiceProfFaxActivation_Type.__name__ = "Integer32"
_VcvVoiceProfFaxActivation_Object = MibTableColumn
vcvVoiceProfFaxActivation = _VcvVoiceProfFaxActivation_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1, 10),
    _VcvVoiceProfFaxActivation_Type()
)
vcvVoiceProfFaxActivation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceProfFaxActivation.setStatus("mandatory")


class _VcvVoiceProfMaximumFaxSpeed_Type(Integer32):
    """Custom type vcvVoiceProfMaximumFaxSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("s4800", 2),
          ("s9600", 1))
    )


_VcvVoiceProfMaximumFaxSpeed_Type.__name__ = "Integer32"
_VcvVoiceProfMaximumFaxSpeed_Object = MibTableColumn
vcvVoiceProfMaximumFaxSpeed = _VcvVoiceProfMaximumFaxSpeed_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1, 11),
    _VcvVoiceProfMaximumFaxSpeed_Type()
)
vcvVoiceProfMaximumFaxSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcvVoiceProfMaximumFaxSpeed.setStatus("mandatory")
_VcvVoicePhysicalPortTable_Object = MibTable
vcvVoicePhysicalPortTable = _VcvVoicePhysicalPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 10)
)
if mibBuilder.loadTexts:
    vcvVoicePhysicalPortTable.setStatus("mandatory")
_VcvVoicePhysicalPortEntry_Object = MibTableRow
vcvVoicePhysicalPortEntry = _VcvVoicePhysicalPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 10, 1)
)
vcvVoicePhysicalPortEntry.setIndexNames(
    (0, "PCE-MIB", "vcvVoicePhysPortId"),
)
if mibBuilder.loadTexts:
    vcvVoicePhysicalPortEntry.setStatus("mandatory")


class _VcvVoicePhysPortId_Type(Integer32):
    """Custom type vcvVoicePhysPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("v0", 1),
          ("v1", 2))
    )


_VcvVoicePhysPortId_Type.__name__ = "Integer32"
_VcvVoicePhysPortId_Object = MibTableColumn
vcvVoicePhysPortId = _VcvVoicePhysPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 10, 1, 1),
    _VcvVoicePhysPortId_Type()
)
vcvVoicePhysPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvVoicePhysPortId.setStatus("mandatory")


class _VcvVoicePhysPortConnector_Type(Integer32):
    """Custom type vcvVoicePhysPortConnector based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("em", 1),
          ("fxo", 3),
          ("fxofxs", 2),
          ("fxs", 4),
          ("ia50", 5))
    )


_VcvVoicePhysPortConnector_Type.__name__ = "Integer32"
_VcvVoicePhysPortConnector_Object = MibTableColumn
vcvVoicePhysPortConnector = _VcvVoicePhysPortConnector_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 10, 1, 2),
    _VcvVoicePhysPortConnector_Type()
)
vcvVoicePhysPortConnector.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcvVoicePhysPortConnector.setStatus("mandatory")
_DvbConfig_ObjectIdentity = ObjectIdentity
dvbConfig = _DvbConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20)
)
_DcControl_ObjectIdentity = ObjectIdentity
dcControl = _DcControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 1)
)


class _DcCtlDate_Type(OctetString):
    """Custom type dcCtlDate based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(3, 3),
    )


_DcCtlDate_Type.__name__ = "OctetString"
_DcCtlDate_Object = MibScalar
dcCtlDate = _DcCtlDate_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 1, 1),
    _DcCtlDate_Type()
)
dcCtlDate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcCtlDate.setStatus("mandatory")
_DcCtlHour_Type = TimeTicks
_DcCtlHour_Object = MibScalar
dcCtlHour = _DcCtlHour_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 1, 2),
    _DcCtlHour_Type()
)
dcCtlHour.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcCtlHour.setStatus("mandatory")


class _DcCtlConfigCom_Type(Integer32):
    """Custom type dcCtlConfigCom based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              5,
              6,
              10)
        )
    )
    namedValues = NamedValues(
        *(("check", 2),
          ("hotReset", 10),
          ("load", 5),
          ("ready", 1),
          ("save", 6))
    )


_DcCtlConfigCom_Type.__name__ = "Integer32"
_DcCtlConfigCom_Object = MibScalar
dcCtlConfigCom = _DcCtlConfigCom_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 1, 3),
    _DcCtlConfigCom_Type()
)
dcCtlConfigCom.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcCtlConfigCom.setStatus("mandatory")


class _DcCtlConfigLoad_Type(Integer32):
    """Custom type dcCtlConfigLoad based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 9),
    )


_DcCtlConfigLoad_Type.__name__ = "Integer32"
_DcCtlConfigLoad_Object = MibScalar
dcCtlConfigLoad = _DcCtlConfigLoad_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 1, 4),
    _DcCtlConfigLoad_Type()
)
dcCtlConfigLoad.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcCtlConfigLoad.setStatus("mandatory")
_DcCtlErrorTable_Object = MibTable
dcCtlErrorTable = _DcCtlErrorTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 1, 10)
)
if mibBuilder.loadTexts:
    dcCtlErrorTable.setStatus("mandatory")
_DcCtlErrorEntry_Object = MibTableRow
dcCtlErrorEntry = _DcCtlErrorEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 1, 10, 1)
)
dcCtlErrorEntry.setIndexNames(
    (0, "PCE-MIB", "dcCtlErrorIndex"),
)
if mibBuilder.loadTexts:
    dcCtlErrorEntry.setStatus("mandatory")


class _DcCtlErrorIndex_Type(Integer32):
    """Custom type dcCtlErrorIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_DcCtlErrorIndex_Type.__name__ = "Integer32"
_DcCtlErrorIndex_Object = MibTableColumn
dcCtlErrorIndex = _DcCtlErrorIndex_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 1, 10, 1, 1),
    _DcCtlErrorIndex_Type()
)
dcCtlErrorIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcCtlErrorIndex.setStatus("mandatory")


class _DcCtlErrorCode_Type(Integer32):
    """Custom type dcCtlErrorCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_DcCtlErrorCode_Type.__name__ = "Integer32"
_DcCtlErrorCode_Object = MibTableColumn
dcCtlErrorCode = _DcCtlErrorCode_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 1, 10, 1, 2),
    _DcCtlErrorCode_Type()
)
dcCtlErrorCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcCtlErrorCode.setStatus("mandatory")


class _DcCtlErrorMessage_Type(DisplayString):
    """Custom type dcCtlErrorMessage based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_DcCtlErrorMessage_Type.__name__ = "DisplayString"
_DcCtlErrorMessage_Object = MibTableColumn
dcCtlErrorMessage = _DcCtlErrorMessage_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 1, 10, 1, 3),
    _DcCtlErrorMessage_Type()
)
dcCtlErrorMessage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcCtlErrorMessage.setStatus("mandatory")
_DcCtlErrorTime_Type = TimeTicks
_DcCtlErrorTime_Object = MibTableColumn
dcCtlErrorTime = _DcCtlErrorTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 1, 10, 1, 4),
    _DcCtlErrorTime_Type()
)
dcCtlErrorTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcCtlErrorTime.setStatus("mandatory")
_DcSystem_ObjectIdentity = ObjectIdentity
dcSystem = _DcSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 5)
)


class _DcSysConfActive_Type(Integer32):
    """Custom type dcSysConfActive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28)
        )
    )
    namedValues = NamedValues(
        *(("s1", 1),
          ("s2", 2),
          ("s3", 3),
          ("s4", 4),
          ("s5", 5),
          ("s6", 6),
          ("s7", 7),
          ("s8", 8),
          ("s9", 9),
          ("w0", 10),
          ("w0-1", 20),
          ("w0-2", 21),
          ("w0-3", 22),
          ("w0-4", 23),
          ("w0-5", 24),
          ("w0-6", 25),
          ("w0-7", 26),
          ("w0-8", 27),
          ("w0-9", 28),
          ("w1", 11),
          ("w2", 12),
          ("w3", 13),
          ("w4", 14),
          ("w5", 15),
          ("w6", 16),
          ("w7", 17),
          ("w8", 18),
          ("w9", 19))
    )


_DcSysConfActive_Type.__name__ = "Integer32"
_DcSysConfActive_Object = MibScalar
dcSysConfActive = _DcSysConfActive_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 5, 1),
    _DcSysConfActive_Type()
)
dcSysConfActive.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcSysConfActive.setStatus("mandatory")


class _DcSysConfDate_Type(OctetString):
    """Custom type dcSysConfDate based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(3, 3),
    )


_DcSysConfDate_Type.__name__ = "OctetString"
_DcSysConfDate_Object = MibScalar
dcSysConfDate = _DcSysConfDate_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 5, 2),
    _DcSysConfDate_Type()
)
dcSysConfDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcSysConfDate.setStatus("mandatory")
_DcSysConfHour_Type = TimeTicks
_DcSysConfHour_Object = MibScalar
dcSysConfHour = _DcSysConfHour_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 5, 3),
    _DcSysConfHour_Type()
)
dcSysConfHour.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcSysConfHour.setStatus("mandatory")
_DcManagement_ObjectIdentity = ObjectIdentity
dcManagement = _DcManagement_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10)
)
_DcmAlrmGenTable_Object = MibTable
dcmAlrmGenTable = _DcmAlrmGenTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 1)
)
if mibBuilder.loadTexts:
    dcmAlrmGenTable.setStatus("mandatory")
_DcmAlrmGenEntry_Object = MibTableRow
dcmAlrmGenEntry = _DcmAlrmGenEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 1, 1)
)
dcmAlrmGenEntry.setIndexNames(
    (0, "PCE-MIB", "dcmAlrmGenFamilyId"),
    (0, "PCE-MIB", "dcmAlrmGenTyp"),
)
if mibBuilder.loadTexts:
    dcmAlrmGenEntry.setStatus("mandatory")


class _DcmAlrmGenFamilyId_Type(Integer32):
    """Custom type dcmAlrmGenFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("f00System", 1),
          ("f01Tftp", 2),
          ("f02Junction", 3),
          ("f03Lmi", 4),
          ("f04Svc", 5),
          ("f05Compression", 6),
          ("f06ServiceCanal", 7),
          ("f07Fax", 8),
          ("f08Switching", 9),
          ("f09Synchronization", 10))
    )


_DcmAlrmGenFamilyId_Type.__name__ = "Integer32"
_DcmAlrmGenFamilyId_Object = MibTableColumn
dcmAlrmGenFamilyId = _DcmAlrmGenFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 1, 1, 1),
    _DcmAlrmGenFamilyId_Type()
)
dcmAlrmGenFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmAlrmGenFamilyId.setStatus("mandatory")


class _DcmAlrmGenTyp_Type(Integer32):
    """Custom type dcmAlrmGenTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("dspNoResourcesLeft258", 6),
          ("dspOutofOrder257", 5),
          ("fatalError222", 3),
          ("lnkNotReady209", 2),
          ("lnkReady208", 1),
          ("reboot233", 4))
    )


_DcmAlrmGenTyp_Type.__name__ = "Integer32"
_DcmAlrmGenTyp_Object = MibTableColumn
dcmAlrmGenTyp = _DcmAlrmGenTyp_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 1, 1, 2),
    _DcmAlrmGenTyp_Type()
)
dcmAlrmGenTyp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmAlrmGenTyp.setStatus("mandatory")


class _DcmAlrmGenTrapSend_Type(Integer32):
    """Custom type dcmAlrmGenTrapSend based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DcmAlrmGenTrapSend_Type.__name__ = "Integer32"
_DcmAlrmGenTrapSend_Object = MibTableColumn
dcmAlrmGenTrapSend = _DcmAlrmGenTrapSend_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 1, 1, 3),
    _DcmAlrmGenTrapSend_Type()
)
dcmAlrmGenTrapSend.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmAlrmGenTrapSend.setStatus("mandatory")


class _DcmAlrmGenDisplay_Type(Integer32):
    """Custom type dcmAlrmGenDisplay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DcmAlrmGenDisplay_Type.__name__ = "Integer32"
_DcmAlrmGenDisplay_Object = MibTableColumn
dcmAlrmGenDisplay = _DcmAlrmGenDisplay_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 1, 1, 4),
    _DcmAlrmGenDisplay_Type()
)
dcmAlrmGenDisplay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmAlrmGenDisplay.setStatus("mandatory")
_DcmAlrmSCTable_Object = MibTable
dcmAlrmSCTable = _DcmAlrmSCTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 2)
)
if mibBuilder.loadTexts:
    dcmAlrmSCTable.setStatus("mandatory")
_DcmAlrmSCEntry_Object = MibTableRow
dcmAlrmSCEntry = _DcmAlrmSCEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 2, 1)
)
dcmAlrmSCEntry.setIndexNames(
    (0, "PCE-MIB", "dcmAlrmSCFamilyId"),
    (0, "PCE-MIB", "dcmAlrmSCTyp"),
)
if mibBuilder.loadTexts:
    dcmAlrmSCEntry.setStatus("mandatory")


class _DcmAlrmSCFamilyId_Type(Integer32):
    """Custom type dcmAlrmSCFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("f00System", 1),
          ("f01Tftp", 2),
          ("f02Junction", 3),
          ("f03Lmi", 4),
          ("f04Svc", 5),
          ("f05Compression", 6),
          ("f06ServiceCanal", 7),
          ("f07Fax", 8),
          ("f08Switching", 9),
          ("f09Synchronization", 10))
    )


_DcmAlrmSCFamilyId_Type.__name__ = "Integer32"
_DcmAlrmSCFamilyId_Object = MibTableColumn
dcmAlrmSCFamilyId = _DcmAlrmSCFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 2, 1, 1),
    _DcmAlrmSCFamilyId_Type()
)
dcmAlrmSCFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmAlrmSCFamilyId.setStatus("mandatory")


class _DcmAlrmSCTyp_Type(Integer32):
    """Custom type dcmAlrmSCTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("dlciError224", 4),
          ("frAddrError223", 3),
          ("scDynamic226", 6),
          ("scNotFree225", 5),
          ("scNotReady211", 2),
          ("scReady210", 1),
          ("scReinit227", 7),
          ("unexpectedFrame230", 8))
    )


_DcmAlrmSCTyp_Type.__name__ = "Integer32"
_DcmAlrmSCTyp_Object = MibTableColumn
dcmAlrmSCTyp = _DcmAlrmSCTyp_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 2, 1, 2),
    _DcmAlrmSCTyp_Type()
)
dcmAlrmSCTyp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmAlrmSCTyp.setStatus("mandatory")


class _DcmAlrmSCTrapSend_Type(Integer32):
    """Custom type dcmAlrmSCTrapSend based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DcmAlrmSCTrapSend_Type.__name__ = "Integer32"
_DcmAlrmSCTrapSend_Object = MibTableColumn
dcmAlrmSCTrapSend = _DcmAlrmSCTrapSend_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 2, 1, 3),
    _DcmAlrmSCTrapSend_Type()
)
dcmAlrmSCTrapSend.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmAlrmSCTrapSend.setStatus("mandatory")


class _DcmAlrmSCDisplay_Type(Integer32):
    """Custom type dcmAlrmSCDisplay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DcmAlrmSCDisplay_Type.__name__ = "Integer32"
_DcmAlrmSCDisplay_Object = MibTableColumn
dcmAlrmSCDisplay = _DcmAlrmSCDisplay_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 2, 1, 4),
    _DcmAlrmSCDisplay_Type()
)
dcmAlrmSCDisplay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmAlrmSCDisplay.setStatus("mandatory")
_DcmAlrmVCTable_Object = MibTable
dcmAlrmVCTable = _DcmAlrmVCTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 3)
)
if mibBuilder.loadTexts:
    dcmAlrmVCTable.setStatus("mandatory")
_DcmAlrmVCEntry_Object = MibTableRow
dcmAlrmVCEntry = _DcmAlrmVCEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 3, 1)
)
dcmAlrmVCEntry.setIndexNames(
    (0, "PCE-MIB", "dcmAlrmVCFamilyId"),
    (0, "PCE-MIB", "dcmAlrmVCTyp"),
)
if mibBuilder.loadTexts:
    dcmAlrmVCEntry.setStatus("mandatory")


class _DcmAlrmVCFamilyId_Type(Integer32):
    """Custom type dcmAlrmVCFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("f00System", 1),
          ("f01Tftp", 2),
          ("f02Junction", 3),
          ("f03Lmi", 4),
          ("f04Svc", 5),
          ("f05Compression", 6),
          ("f06ServiceCanal", 7),
          ("f07Fax", 8),
          ("f08Switching", 9),
          ("f09Synchronization", 10))
    )


_DcmAlrmVCFamilyId_Type.__name__ = "Integer32"
_DcmAlrmVCFamilyId_Object = MibTableColumn
dcmAlrmVCFamilyId = _DcmAlrmVCFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 3, 1, 1),
    _DcmAlrmVCFamilyId_Type()
)
dcmAlrmVCFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmAlrmVCFamilyId.setStatus("mandatory")


class _DcmAlrmVCTyp_Type(Integer32):
    """Custom type dcmAlrmVCTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("endOfReject232", 6),
          ("lossOfSync220", 3),
          ("syncBack221", 4),
          ("vcNotReady213", 2),
          ("vcReady212", 1),
          ("vcRejected231", 5))
    )


_DcmAlrmVCTyp_Type.__name__ = "Integer32"
_DcmAlrmVCTyp_Object = MibTableColumn
dcmAlrmVCTyp = _DcmAlrmVCTyp_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 3, 1, 2),
    _DcmAlrmVCTyp_Type()
)
dcmAlrmVCTyp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmAlrmVCTyp.setStatus("mandatory")


class _DcmAlrmVCTrapSend_Type(Integer32):
    """Custom type dcmAlrmVCTrapSend based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DcmAlrmVCTrapSend_Type.__name__ = "Integer32"
_DcmAlrmVCTrapSend_Object = MibTableColumn
dcmAlrmVCTrapSend = _DcmAlrmVCTrapSend_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 3, 1, 3),
    _DcmAlrmVCTrapSend_Type()
)
dcmAlrmVCTrapSend.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmAlrmVCTrapSend.setStatus("mandatory")


class _DcmAlrmVCDisplay_Type(Integer32):
    """Custom type dcmAlrmVCDisplay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DcmAlrmVCDisplay_Type.__name__ = "Integer32"
_DcmAlrmVCDisplay_Object = MibTableColumn
dcmAlrmVCDisplay = _DcmAlrmVCDisplay_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 3, 1, 4),
    _DcmAlrmVCDisplay_Type()
)
dcmAlrmVCDisplay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmAlrmVCDisplay.setStatus("mandatory")
_DcmAlrmLMITable_Object = MibTable
dcmAlrmLMITable = _DcmAlrmLMITable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 4)
)
if mibBuilder.loadTexts:
    dcmAlrmLMITable.setStatus("mandatory")
_DcmAlrmLMIEntry_Object = MibTableRow
dcmAlrmLMIEntry = _DcmAlrmLMIEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 4, 1)
)
dcmAlrmLMIEntry.setIndexNames(
    (0, "PCE-MIB", "dcmAlrmLMIFamilyId"),
    (0, "PCE-MIB", "dcmAlrmLMITyp"),
)
if mibBuilder.loadTexts:
    dcmAlrmLMIEntry.setStatus("mandatory")


class _DcmAlrmLMIFamilyId_Type(Integer32):
    """Custom type dcmAlrmLMIFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("f00System", 1),
          ("f01Tftp", 2),
          ("f02Junction", 3),
          ("f03Lmi", 4),
          ("f04Svc", 5),
          ("f05Compression", 6),
          ("f06ServiceCanal", 7),
          ("f07Fax", 8),
          ("f08Switching", 9),
          ("f09Synchronization", 10))
    )


_DcmAlrmLMIFamilyId_Type.__name__ = "Integer32"
_DcmAlrmLMIFamilyId_Object = MibTableColumn
dcmAlrmLMIFamilyId = _DcmAlrmLMIFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 4, 1, 1),
    _DcmAlrmLMIFamilyId_Type()
)
dcmAlrmLMIFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmAlrmLMIFamilyId.setStatus("mandatory")


class _DcmAlrmLMITyp_Type(Integer32):
    """Custom type dcmAlrmLMITyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("cnxLmi235", 2),
          ("dcnxLmi234", 1),
          ("lmiDlciNotConf236", 3),
          ("lmiIntError237", 4))
    )


_DcmAlrmLMITyp_Type.__name__ = "Integer32"
_DcmAlrmLMITyp_Object = MibTableColumn
dcmAlrmLMITyp = _DcmAlrmLMITyp_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 4, 1, 2),
    _DcmAlrmLMITyp_Type()
)
dcmAlrmLMITyp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmAlrmLMITyp.setStatus("mandatory")


class _DcmAlrmLMITrapSend_Type(Integer32):
    """Custom type dcmAlrmLMITrapSend based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DcmAlrmLMITrapSend_Type.__name__ = "Integer32"
_DcmAlrmLMITrapSend_Object = MibTableColumn
dcmAlrmLMITrapSend = _DcmAlrmLMITrapSend_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 4, 1, 3),
    _DcmAlrmLMITrapSend_Type()
)
dcmAlrmLMITrapSend.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmAlrmLMITrapSend.setStatus("mandatory")


class _DcmAlrmLMIDisplay_Type(Integer32):
    """Custom type dcmAlrmLMIDisplay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DcmAlrmLMIDisplay_Type.__name__ = "Integer32"
_DcmAlrmLMIDisplay_Object = MibTableColumn
dcmAlrmLMIDisplay = _DcmAlrmLMIDisplay_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 4, 1, 4),
    _DcmAlrmLMIDisplay_Type()
)
dcmAlrmLMIDisplay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmAlrmLMIDisplay.setStatus("mandatory")
_DcmAlrmSwTable_Object = MibTable
dcmAlrmSwTable = _DcmAlrmSwTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 5)
)
if mibBuilder.loadTexts:
    dcmAlrmSwTable.setStatus("mandatory")
_DcmAlrmSwEntry_Object = MibTableRow
dcmAlrmSwEntry = _DcmAlrmSwEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 5, 1)
)
dcmAlrmSwEntry.setIndexNames(
    (0, "PCE-MIB", "dcmAlrmSwFamilyId"),
    (0, "PCE-MIB", "dcmAlrmSwTyp"),
)
if mibBuilder.loadTexts:
    dcmAlrmSwEntry.setStatus("mandatory")


class _DcmAlrmSwFamilyId_Type(Integer32):
    """Custom type dcmAlrmSwFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("f00System", 1),
          ("f01Tftp", 2),
          ("f02Junction", 3),
          ("f03Lmi", 4),
          ("f04Svc", 5),
          ("f05Compression", 6),
          ("f06ServiceCanal", 7),
          ("f07Fax", 8),
          ("f08Switching", 9),
          ("f09Synchronization", 10))
    )


_DcmAlrmSwFamilyId_Type.__name__ = "Integer32"
_DcmAlrmSwFamilyId_Object = MibTableColumn
dcmAlrmSwFamilyId = _DcmAlrmSwFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 5, 1, 1),
    _DcmAlrmSwFamilyId_Type()
)
dcmAlrmSwFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmAlrmSwFamilyId.setStatus("mandatory")


class _DcmAlrmSwTyp_Type(Integer32):
    """Custom type dcmAlrmSwTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("backup242", 5),
          ("incomingCall239", 2),
          ("localDisc240", 3),
          ("outgoingCall238", 1),
          ("remoteDisc241", 4))
    )


_DcmAlrmSwTyp_Type.__name__ = "Integer32"
_DcmAlrmSwTyp_Object = MibTableColumn
dcmAlrmSwTyp = _DcmAlrmSwTyp_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 5, 1, 2),
    _DcmAlrmSwTyp_Type()
)
dcmAlrmSwTyp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmAlrmSwTyp.setStatus("mandatory")


class _DcmAlrmSwTrapSend_Type(Integer32):
    """Custom type dcmAlrmSwTrapSend based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DcmAlrmSwTrapSend_Type.__name__ = "Integer32"
_DcmAlrmSwTrapSend_Object = MibTableColumn
dcmAlrmSwTrapSend = _DcmAlrmSwTrapSend_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 5, 1, 3),
    _DcmAlrmSwTrapSend_Type()
)
dcmAlrmSwTrapSend.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmAlrmSwTrapSend.setStatus("mandatory")


class _DcmAlrmSwDisplay_Type(Integer32):
    """Custom type dcmAlrmSwDisplay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DcmAlrmSwDisplay_Type.__name__ = "Integer32"
_DcmAlrmSwDisplay_Object = MibTableColumn
dcmAlrmSwDisplay = _DcmAlrmSwDisplay_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 5, 1, 4),
    _DcmAlrmSwDisplay_Type()
)
dcmAlrmSwDisplay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmAlrmSwDisplay.setStatus("mandatory")
_DcmAlrmCmpTable_Object = MibTable
dcmAlrmCmpTable = _DcmAlrmCmpTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 6)
)
if mibBuilder.loadTexts:
    dcmAlrmCmpTable.setStatus("mandatory")
_DcmAlrmCmpEntry_Object = MibTableRow
dcmAlrmCmpEntry = _DcmAlrmCmpEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 6, 1)
)
dcmAlrmCmpEntry.setIndexNames(
    (0, "PCE-MIB", "dcmAlrmCmpFamilyId"),
    (0, "PCE-MIB", "dcmAlrmCmpTyp"),
)
if mibBuilder.loadTexts:
    dcmAlrmCmpEntry.setStatus("mandatory")


class _DcmAlrmCmpFamilyId_Type(Integer32):
    """Custom type dcmAlrmCmpFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("f00System", 1),
          ("f01Tftp", 2),
          ("f02Junction", 3),
          ("f03Lmi", 4),
          ("f04Svc", 5),
          ("f05Compression", 6),
          ("f06ServiceCanal", 7),
          ("f07Fax", 8),
          ("f08Switching", 9),
          ("f09Synchronization", 10))
    )


_DcmAlrmCmpFamilyId_Type.__name__ = "Integer32"
_DcmAlrmCmpFamilyId_Object = MibTableColumn
dcmAlrmCmpFamilyId = _DcmAlrmCmpFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 6, 1, 1),
    _DcmAlrmCmpFamilyId_Type()
)
dcmAlrmCmpFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmAlrmCmpFamilyId.setStatus("mandatory")


class _DcmAlrmCmpTyp_Type(Integer32):
    """Custom type dcmAlrmCmpTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("algoCompNotOk228", 3),
          ("algoCompOk229", 4),
          ("compOff215", 2),
          ("compOn214", 1))
    )


_DcmAlrmCmpTyp_Type.__name__ = "Integer32"
_DcmAlrmCmpTyp_Object = MibTableColumn
dcmAlrmCmpTyp = _DcmAlrmCmpTyp_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 6, 1, 2),
    _DcmAlrmCmpTyp_Type()
)
dcmAlrmCmpTyp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmAlrmCmpTyp.setStatus("mandatory")


class _DcmAlrmCmpTrapSend_Type(Integer32):
    """Custom type dcmAlrmCmpTrapSend based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DcmAlrmCmpTrapSend_Type.__name__ = "Integer32"
_DcmAlrmCmpTrapSend_Object = MibTableColumn
dcmAlrmCmpTrapSend = _DcmAlrmCmpTrapSend_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 6, 1, 3),
    _DcmAlrmCmpTrapSend_Type()
)
dcmAlrmCmpTrapSend.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmAlrmCmpTrapSend.setStatus("mandatory")


class _DcmAlrmCmpDisplay_Type(Integer32):
    """Custom type dcmAlrmCmpDisplay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DcmAlrmCmpDisplay_Type.__name__ = "Integer32"
_DcmAlrmCmpDisplay_Object = MibTableColumn
dcmAlrmCmpDisplay = _DcmAlrmCmpDisplay_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 6, 1, 4),
    _DcmAlrmCmpDisplay_Type()
)
dcmAlrmCmpDisplay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmAlrmCmpDisplay.setStatus("mandatory")
_DcmAlrmFaxTable_Object = MibTable
dcmAlrmFaxTable = _DcmAlrmFaxTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 7)
)
if mibBuilder.loadTexts:
    dcmAlrmFaxTable.setStatus("mandatory")
_DcmAlrmFaxEntry_Object = MibTableRow
dcmAlrmFaxEntry = _DcmAlrmFaxEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 7, 1)
)
dcmAlrmFaxEntry.setIndexNames(
    (0, "PCE-MIB", "dcmAlrmFaxFamilyId"),
    (0, "PCE-MIB", "dcmAlrmFaxTyp"),
)
if mibBuilder.loadTexts:
    dcmAlrmFaxEntry.setStatus("mandatory")


class _DcmAlrmFaxFamilyId_Type(Integer32):
    """Custom type dcmAlrmFaxFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("f00System", 1),
          ("f01Tftp", 2),
          ("f02Junction", 3),
          ("f03Lmi", 4),
          ("f04Svc", 5),
          ("f05Compression", 6),
          ("f06ServiceCanal", 7),
          ("f07Fax", 8),
          ("f08Switching", 9),
          ("f09Synchronization", 10))
    )


_DcmAlrmFaxFamilyId_Type.__name__ = "Integer32"
_DcmAlrmFaxFamilyId_Object = MibTableColumn
dcmAlrmFaxFamilyId = _DcmAlrmFaxFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 7, 1, 1),
    _DcmAlrmFaxFamilyId_Type()
)
dcmAlrmFaxFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmAlrmFaxFamilyId.setStatus("mandatory")


class _DcmAlrmFaxTyp_Type(Integer32):
    """Custom type dcmAlrmFaxTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("faxEnd219", 2),
          ("faxStart218", 1))
    )


_DcmAlrmFaxTyp_Type.__name__ = "Integer32"
_DcmAlrmFaxTyp_Object = MibTableColumn
dcmAlrmFaxTyp = _DcmAlrmFaxTyp_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 7, 1, 2),
    _DcmAlrmFaxTyp_Type()
)
dcmAlrmFaxTyp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmAlrmFaxTyp.setStatus("mandatory")


class _DcmAlrmFaxTrapSend_Type(Integer32):
    """Custom type dcmAlrmFaxTrapSend based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DcmAlrmFaxTrapSend_Type.__name__ = "Integer32"
_DcmAlrmFaxTrapSend_Object = MibTableColumn
dcmAlrmFaxTrapSend = _DcmAlrmFaxTrapSend_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 7, 1, 3),
    _DcmAlrmFaxTrapSend_Type()
)
dcmAlrmFaxTrapSend.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmAlrmFaxTrapSend.setStatus("mandatory")


class _DcmAlrmFaxDisplay_Type(Integer32):
    """Custom type dcmAlrmFaxDisplay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DcmAlrmFaxDisplay_Type.__name__ = "Integer32"
_DcmAlrmFaxDisplay_Object = MibTableColumn
dcmAlrmFaxDisplay = _DcmAlrmFaxDisplay_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 7, 1, 4),
    _DcmAlrmFaxDisplay_Type()
)
dcmAlrmFaxDisplay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmAlrmFaxDisplay.setStatus("mandatory")
_DcmAlrmTftpTable_Object = MibTable
dcmAlrmTftpTable = _DcmAlrmTftpTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 8)
)
if mibBuilder.loadTexts:
    dcmAlrmTftpTable.setStatus("mandatory")
_DcmAlrmTftpEntry_Object = MibTableRow
dcmAlrmTftpEntry = _DcmAlrmTftpEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 8, 1)
)
dcmAlrmTftpEntry.setIndexNames(
    (0, "PCE-MIB", "dcmAlrmTftpFamilyId"),
    (0, "PCE-MIB", "dcmAlrmTftpTyp"),
)
if mibBuilder.loadTexts:
    dcmAlrmTftpEntry.setStatus("mandatory")


class _DcmAlrmTftpFamilyId_Type(Integer32):
    """Custom type dcmAlrmTftpFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("f00System", 1),
          ("f01Tftp", 2),
          ("f02Junction", 3),
          ("f03Lmi", 4),
          ("f04Svc", 5),
          ("f05Compression", 6),
          ("f06ServiceCanal", 7),
          ("f07Fax", 8),
          ("f08Switching", 9),
          ("f09Synchronization", 10))
    )


_DcmAlrmTftpFamilyId_Type.__name__ = "Integer32"
_DcmAlrmTftpFamilyId_Object = MibTableColumn
dcmAlrmTftpFamilyId = _DcmAlrmTftpFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 8, 1, 1),
    _DcmAlrmTftpFamilyId_Type()
)
dcmAlrmTftpFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmAlrmTftpFamilyId.setStatus("mandatory")


class _DcmAlrmTftpTyp_Type(Integer32):
    """Custom type dcmAlrmTftpTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dwnEnd244", 2),
          ("dwnError245", 3),
          ("dwnStart243", 1))
    )


_DcmAlrmTftpTyp_Type.__name__ = "Integer32"
_DcmAlrmTftpTyp_Object = MibTableColumn
dcmAlrmTftpTyp = _DcmAlrmTftpTyp_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 8, 1, 2),
    _DcmAlrmTftpTyp_Type()
)
dcmAlrmTftpTyp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmAlrmTftpTyp.setStatus("mandatory")


class _DcmAlrmTftpTrapSend_Type(Integer32):
    """Custom type dcmAlrmTftpTrapSend based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DcmAlrmTftpTrapSend_Type.__name__ = "Integer32"
_DcmAlrmTftpTrapSend_Object = MibTableColumn
dcmAlrmTftpTrapSend = _DcmAlrmTftpTrapSend_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 8, 1, 3),
    _DcmAlrmTftpTrapSend_Type()
)
dcmAlrmTftpTrapSend.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmAlrmTftpTrapSend.setStatus("mandatory")


class _DcmAlrmTftpDisplay_Type(Integer32):
    """Custom type dcmAlrmTftpDisplay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DcmAlrmTftpDisplay_Type.__name__ = "Integer32"
_DcmAlrmTftpDisplay_Object = MibTableColumn
dcmAlrmTftpDisplay = _DcmAlrmTftpDisplay_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 8, 1, 4),
    _DcmAlrmTftpDisplay_Type()
)
dcmAlrmTftpDisplay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmAlrmTftpDisplay.setStatus("mandatory")
_DcmAlrmSvcTable_Object = MibTable
dcmAlrmSvcTable = _DcmAlrmSvcTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 9)
)
if mibBuilder.loadTexts:
    dcmAlrmSvcTable.setStatus("mandatory")
_DcmAlrmSvcEntry_Object = MibTableRow
dcmAlrmSvcEntry = _DcmAlrmSvcEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 9, 1)
)
dcmAlrmSvcEntry.setIndexNames(
    (0, "PCE-MIB", "dcmAlrmSvcFamilyId"),
    (0, "PCE-MIB", "dcmAlrmSvcTyp"),
)
if mibBuilder.loadTexts:
    dcmAlrmSvcEntry.setStatus("mandatory")


class _DcmAlrmSvcFamilyId_Type(Integer32):
    """Custom type dcmAlrmSvcFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("f00System", 1),
          ("f01Tftp", 2),
          ("f02Junction", 3),
          ("f03Lmi", 4),
          ("f04Svc", 5),
          ("f05Compression", 6),
          ("f06ServiceCanal", 7),
          ("f07Fax", 8),
          ("f08Switching", 9),
          ("f09Synchronization", 10))
    )


_DcmAlrmSvcFamilyId_Type.__name__ = "Integer32"
_DcmAlrmSvcFamilyId_Object = MibTableColumn
dcmAlrmSvcFamilyId = _DcmAlrmSvcFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 9, 1, 1),
    _DcmAlrmSvcFamilyId_Type()
)
dcmAlrmSvcFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmAlrmSvcFamilyId.setStatus("mandatory")


class _DcmAlrmSvcTyp_Type(Integer32):
    """Custom type dcmAlrmSvcTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("svcInCall247", 2),
          ("svcInFailCall252", 7),
          ("svcLocalConnect248", 3),
          ("svcLocalDisc249", 4),
          ("svcOutCall246", 1),
          ("svcOutFailCall251", 6),
          ("svcRemoteDisc250", 5))
    )


_DcmAlrmSvcTyp_Type.__name__ = "Integer32"
_DcmAlrmSvcTyp_Object = MibTableColumn
dcmAlrmSvcTyp = _DcmAlrmSvcTyp_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 9, 1, 2),
    _DcmAlrmSvcTyp_Type()
)
dcmAlrmSvcTyp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmAlrmSvcTyp.setStatus("mandatory")


class _DcmAlrmSvcTrapSend_Type(Integer32):
    """Custom type dcmAlrmSvcTrapSend based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DcmAlrmSvcTrapSend_Type.__name__ = "Integer32"
_DcmAlrmSvcTrapSend_Object = MibTableColumn
dcmAlrmSvcTrapSend = _DcmAlrmSvcTrapSend_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 9, 1, 3),
    _DcmAlrmSvcTrapSend_Type()
)
dcmAlrmSvcTrapSend.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmAlrmSvcTrapSend.setStatus("mandatory")


class _DcmAlrmSvcDisplay_Type(Integer32):
    """Custom type dcmAlrmSvcDisplay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DcmAlrmSvcDisplay_Type.__name__ = "Integer32"
_DcmAlrmSvcDisplay_Object = MibTableColumn
dcmAlrmSvcDisplay = _DcmAlrmSvcDisplay_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 9, 1, 4),
    _DcmAlrmSvcDisplay_Type()
)
dcmAlrmSvcDisplay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmAlrmSvcDisplay.setStatus("mandatory")
_DcmAlrmSyncTable_Object = MibTable
dcmAlrmSyncTable = _DcmAlrmSyncTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 10)
)
if mibBuilder.loadTexts:
    dcmAlrmSyncTable.setStatus("mandatory")
_DcmAlrmSyncEntry_Object = MibTableRow
dcmAlrmSyncEntry = _DcmAlrmSyncEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 10, 1)
)
dcmAlrmSyncEntry.setIndexNames(
    (0, "PCE-MIB", "dcmAlrmSyncFamilyId"),
    (0, "PCE-MIB", "dcmAlrmSyncTyp"),
)
if mibBuilder.loadTexts:
    dcmAlrmSyncEntry.setStatus("mandatory")


class _DcmAlrmSyncFamilyId_Type(Integer32):
    """Custom type dcmAlrmSyncFamilyId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("f00System", 1),
          ("f01Tftp", 2),
          ("f02Junction", 3),
          ("f03Lmi", 4),
          ("f04Svc", 5),
          ("f05Compression", 6),
          ("f06ServiceCanal", 7),
          ("f07Fax", 8),
          ("f08Switching", 9),
          ("f09Synchronization", 10))
    )


_DcmAlrmSyncFamilyId_Type.__name__ = "Integer32"
_DcmAlrmSyncFamilyId_Object = MibTableColumn
dcmAlrmSyncFamilyId = _DcmAlrmSyncFamilyId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 10, 1, 1),
    _DcmAlrmSyncFamilyId_Type()
)
dcmAlrmSyncFamilyId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmAlrmSyncFamilyId.setStatus("mandatory")


class _DcmAlrmSyncTyp_Type(Integer32):
    """Custom type dcmAlrmSyncTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("tdmDown254", 2),
          ("tdmUp253", 1),
          ("vpbOutofSync256", 4),
          ("vpbSync255", 3))
    )


_DcmAlrmSyncTyp_Type.__name__ = "Integer32"
_DcmAlrmSyncTyp_Object = MibTableColumn
dcmAlrmSyncTyp = _DcmAlrmSyncTyp_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 10, 1, 2),
    _DcmAlrmSyncTyp_Type()
)
dcmAlrmSyncTyp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcmAlrmSyncTyp.setStatus("mandatory")


class _DcmAlrmSyncTrapSend_Type(Integer32):
    """Custom type dcmAlrmSyncTrapSend based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DcmAlrmSyncTrapSend_Type.__name__ = "Integer32"
_DcmAlrmSyncTrapSend_Object = MibTableColumn
dcmAlrmSyncTrapSend = _DcmAlrmSyncTrapSend_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 10, 1, 3),
    _DcmAlrmSyncTrapSend_Type()
)
dcmAlrmSyncTrapSend.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmAlrmSyncTrapSend.setStatus("mandatory")


class _DcmAlrmSyncDisplay_Type(Integer32):
    """Custom type dcmAlrmSyncDisplay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DcmAlrmSyncDisplay_Type.__name__ = "Integer32"
_DcmAlrmSyncDisplay_Object = MibTableColumn
dcmAlrmSyncDisplay = _DcmAlrmSyncDisplay_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 10, 1, 4),
    _DcmAlrmSyncDisplay_Type()
)
dcmAlrmSyncDisplay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcmAlrmSyncDisplay.setStatus("mandatory")
_DcInterfaces_ObjectIdentity = ObjectIdentity
dcInterfaces = _DcInterfaces_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15)
)
_DcfPhysicalPortTable_Object = MibTable
dcfPhysicalPortTable = _DcfPhysicalPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 1)
)
if mibBuilder.loadTexts:
    dcfPhysicalPortTable.setStatus("mandatory")
_DcfPhysicalPortEntry_Object = MibTableRow
dcfPhysicalPortEntry = _DcfPhysicalPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 1, 1)
)
dcfPhysicalPortEntry.setIndexNames(
    (0, "PCE-MIB", "dcfPhysPortId"),
)
if mibBuilder.loadTexts:
    dcfPhysicalPortEntry.setStatus("mandatory")


class _DcfPhysPortId_Type(Integer32):
    """Custom type dcfPhysPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("frontPannel", 3),
          ("l0", 1),
          ("l1", 2))
    )


_DcfPhysPortId_Type.__name__ = "Integer32"
_DcfPhysPortId_Object = MibTableColumn
dcfPhysPortId = _DcfPhysPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 1, 1, 1),
    _DcfPhysPortId_Type()
)
dcfPhysPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcfPhysPortId.setStatus("mandatory")


class _DcfPhysPortConnector_Type(Integer32):
    """Custom type dcfPhysPortConnector based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("db25", 1),
          ("din", 2))
    )


_DcfPhysPortConnector_Type.__name__ = "Integer32"
_DcfPhysPortConnector_Object = MibTableColumn
dcfPhysPortConnector = _DcfPhysPortConnector_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 1, 1, 2),
    _DcfPhysPortConnector_Type()
)
dcfPhysPortConnector.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcfPhysPortConnector.setStatus("mandatory")
_DcfNumericLines_ObjectIdentity = ObjectIdentity
dcfNumericLines = _DcfNumericLines_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5)
)
_DcfNumericLineTable_Object = MibTable
dcfNumericLineTable = _DcfNumericLineTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 1)
)
if mibBuilder.loadTexts:
    dcfNumericLineTable.setStatus("mandatory")
_DcfNumericLineEntry_Object = MibTableRow
dcfNumericLineEntry = _DcfNumericLineEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 1, 1)
)
dcfNumericLineEntry.setIndexNames(
    (0, "PCE-MIB", "dcfNumericLineInterfaceId"),
)
if mibBuilder.loadTexts:
    dcfNumericLineEntry.setStatus("mandatory")


class _DcfNumericLineInterfaceId_Type(Integer32):
    """Custom type dcfNumericLineInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("frontPannel", 3),
          ("l0", 1),
          ("l1", 2))
    )


_DcfNumericLineInterfaceId_Type.__name__ = "Integer32"
_DcfNumericLineInterfaceId_Object = MibTableColumn
dcfNumericLineInterfaceId = _DcfNumericLineInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 1, 1, 1),
    _DcfNumericLineInterfaceId_Type()
)
dcfNumericLineInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcfNumericLineInterfaceId.setStatus("mandatory")


class _DcfNumericLineType_Type(Integer32):
    """Custom type dcfNumericLineType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("configurationLine", 2),
          ("dataLine", 1),
          ("debug", 3))
    )


_DcfNumericLineType_Type.__name__ = "Integer32"
_DcfNumericLineType_Object = MibTableColumn
dcfNumericLineType = _DcfNumericLineType_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 1, 1, 2),
    _DcfNumericLineType_Type()
)
dcfNumericLineType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcfNumericLineType.setStatus("mandatory")
_DcfDataLineTable_Object = MibTable
dcfDataLineTable = _DcfDataLineTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 2)
)
if mibBuilder.loadTexts:
    dcfDataLineTable.setStatus("mandatory")
_DcfDataLineEntry_Object = MibTableRow
dcfDataLineEntry = _DcfDataLineEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 2, 1)
)
dcfDataLineEntry.setIndexNames(
    (0, "PCE-MIB", "dcfDataLineInterfaceId"),
)
if mibBuilder.loadTexts:
    dcfDataLineEntry.setStatus("mandatory")


class _DcfDataLineInterfaceId_Type(Integer32):
    """Custom type dcfDataLineInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("l0", 1),
          ("l1", 2),
          ("other", 3))
    )


_DcfDataLineInterfaceId_Type.__name__ = "Integer32"
_DcfDataLineInterfaceId_Object = MibTableColumn
dcfDataLineInterfaceId = _DcfDataLineInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 2, 1, 1),
    _DcfDataLineInterfaceId_Type()
)
dcfDataLineInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcfDataLineInterfaceId.setStatus("mandatory")


class _DcfDataLineRate_Type(Integer32):
    """Custom type dcfDataLineRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("s1024000", 13),
          ("s128000", 9),
          ("s144000", 10),
          ("s19200", 3),
          ("s2048000", 14),
          ("s256000", 11),
          ("s38400", 4),
          ("s4800", 1),
          ("s48000", 5),
          ("s512000", 12),
          ("s56000", 6),
          ("s64000", 7),
          ("s72000", 8),
          ("s9600", 2))
    )


_DcfDataLineRate_Type.__name__ = "Integer32"
_DcfDataLineRate_Object = MibTableColumn
dcfDataLineRate = _DcfDataLineRate_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 2, 1, 2),
    _DcfDataLineRate_Type()
)
dcfDataLineRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcfDataLineRate.setStatus("mandatory")


class _DcfDataLineRts105_Type(Integer32):
    """Custom type dcfDataLineRts105 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("off", 4),
          ("on", 5),
          ("standard", 3),
          ("unused", 1),
          ("used", 2))
    )


_DcfDataLineRts105_Type.__name__ = "Integer32"
_DcfDataLineRts105_Object = MibTableColumn
dcfDataLineRts105 = _DcfDataLineRts105_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 2, 1, 3),
    _DcfDataLineRts105_Type()
)
dcfDataLineRts105.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcfDataLineRts105.setStatus("mandatory")


class _DcfDataLineDtr108_Type(Integer32):
    """Custom type dcfDataLineDtr108 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("off", 4),
          ("on", 5),
          ("standard", 3),
          ("unused", 1),
          ("used", 2))
    )


_DcfDataLineDtr108_Type.__name__ = "Integer32"
_DcfDataLineDtr108_Object = MibTableColumn
dcfDataLineDtr108 = _DcfDataLineDtr108_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 2, 1, 4),
    _DcfDataLineDtr108_Type()
)
dcfDataLineDtr108.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcfDataLineDtr108.setStatus("mandatory")


class _DcfDataLineCts106_Type(Integer32):
    """Custom type dcfDataLineCts106 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("off", 4),
          ("on", 5),
          ("standard", 3),
          ("unused", 1),
          ("used", 2))
    )


_DcfDataLineCts106_Type.__name__ = "Integer32"
_DcfDataLineCts106_Object = MibTableColumn
dcfDataLineCts106 = _DcfDataLineCts106_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 2, 1, 5),
    _DcfDataLineCts106_Type()
)
dcfDataLineCts106.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcfDataLineCts106.setStatus("mandatory")


class _DcfDataLineDsr107_Type(Integer32):
    """Custom type dcfDataLineDsr107 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("off", 4),
          ("on", 5),
          ("standard", 3),
          ("unused", 1),
          ("used", 2))
    )


_DcfDataLineDsr107_Type.__name__ = "Integer32"
_DcfDataLineDsr107_Object = MibTableColumn
dcfDataLineDsr107 = _DcfDataLineDsr107_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 2, 1, 6),
    _DcfDataLineDsr107_Type()
)
dcfDataLineDsr107.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcfDataLineDsr107.setStatus("mandatory")


class _DcfDataLineDcd109_Type(Integer32):
    """Custom type dcfDataLineDcd109 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("off", 4),
          ("on", 5),
          ("standard", 3),
          ("unused", 1),
          ("used", 2))
    )


_DcfDataLineDcd109_Type.__name__ = "Integer32"
_DcfDataLineDcd109_Object = MibTableColumn
dcfDataLineDcd109 = _DcfDataLineDcd109_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 2, 1, 7),
    _DcfDataLineDcd109_Type()
)
dcfDataLineDcd109.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcfDataLineDcd109.setStatus("mandatory")
_DcfConfLineTable_Object = MibTable
dcfConfLineTable = _DcfConfLineTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 3)
)
if mibBuilder.loadTexts:
    dcfConfLineTable.setStatus("mandatory")
_DcfConfLineEntry_Object = MibTableRow
dcfConfLineEntry = _DcfConfLineEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 3, 1)
)
dcfConfLineEntry.setIndexNames(
    (0, "PCE-MIB", "dcfConfLineInterfaceId"),
)
if mibBuilder.loadTexts:
    dcfConfLineEntry.setStatus("mandatory")


class _DcfConfLineInterfaceId_Type(Integer32):
    """Custom type dcfConfLineInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("frontPannel", 3),
          ("l0", 1),
          ("l1", 2))
    )


_DcfConfLineInterfaceId_Type.__name__ = "Integer32"
_DcfConfLineInterfaceId_Object = MibTableColumn
dcfConfLineInterfaceId = _DcfConfLineInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 3, 1, 1),
    _DcfConfLineInterfaceId_Type()
)
dcfConfLineInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcfConfLineInterfaceId.setStatus("mandatory")


class _DcfConfLineRate_Type(Integer32):
    """Custom type dcfConfLineRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("s1024000", 13),
          ("s128000", 9),
          ("s144000", 10),
          ("s19200", 3),
          ("s2048000", 14),
          ("s256000", 11),
          ("s38400", 4),
          ("s4800", 1),
          ("s48000", 5),
          ("s512000", 12),
          ("s56000", 6),
          ("s64000", 7),
          ("s72000", 8),
          ("s9600", 2))
    )


_DcfConfLineRate_Type.__name__ = "Integer32"
_DcfConfLineRate_Object = MibTableColumn
dcfConfLineRate = _DcfConfLineRate_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 3, 1, 2),
    _DcfConfLineRate_Type()
)
dcfConfLineRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcfConfLineRate.setStatus("mandatory")
_DcLogicalPorts_ObjectIdentity = ObjectIdentity
dcLogicalPorts = _DcLogicalPorts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20)
)
_DclLogicalPortTable_Object = MibTable
dclLogicalPortTable = _DclLogicalPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 1)
)
if mibBuilder.loadTexts:
    dclLogicalPortTable.setStatus("mandatory")
_DclLogicalPortEntry_Object = MibTableRow
dclLogicalPortEntry = _DclLogicalPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 1, 1)
)
dclLogicalPortEntry.setIndexNames(
    (0, "PCE-MIB", "dclLogPortId"),
)
if mibBuilder.loadTexts:
    dclLogicalPortEntry.setStatus("mandatory")


class _DclLogPortId_Type(Integer32):
    """Custom type dclLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_DclLogPortId_Type.__name__ = "Integer32"
_DclLogPortId_Object = MibTableColumn
dclLogPortId = _DclLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 1, 1, 1),
    _DclLogPortId_Type()
)
dclLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dclLogPortId.setStatus("mandatory")


class _DclLogPortStatus_Type(Integer32):
    """Custom type dclLogPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_DclLogPortStatus_Type.__name__ = "Integer32"
_DclLogPortStatus_Object = MibTableColumn
dclLogPortStatus = _DclLogPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 1, 1, 2),
    _DclLogPortStatus_Type()
)
dclLogPortStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dclLogPortStatus.setStatus("mandatory")


class _DclLogPortType_Type(Integer32):
    """Custom type dclLogPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("frSe", 2),
          ("frTe", 1))
    )


_DclLogPortType_Type.__name__ = "Integer32"
_DclLogPortType_Object = MibTableColumn
dclLogPortType = _DclLogPortType_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 1, 1, 3),
    _DclLogPortType_Type()
)
dclLogPortType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dclLogPortType.setStatus("mandatory")
_DclFrameRelay_ObjectIdentity = ObjectIdentity
dclFrameRelay = _DclFrameRelay_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5)
)
_DclFrTerminalEquipment_ObjectIdentity = ObjectIdentity
dclFrTerminalEquipment = _DclFrTerminalEquipment_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 1)
)
_DclFrTeLogPortTable_Object = MibTable
dclFrTeLogPortTable = _DclFrTeLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 1, 1)
)
if mibBuilder.loadTexts:
    dclFrTeLogPortTable.setStatus("mandatory")
_DclFrTeLogPortEntry_Object = MibTableRow
dclFrTeLogPortEntry = _DclFrTeLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 1, 1, 1)
)
dclFrTeLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "dclFrTeLpLogPortId"),
)
if mibBuilder.loadTexts:
    dclFrTeLogPortEntry.setStatus("mandatory")


class _DclFrTeLpLogPortId_Type(Integer32):
    """Custom type dclFrTeLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_DclFrTeLpLogPortId_Type.__name__ = "Integer32"
_DclFrTeLpLogPortId_Object = MibTableColumn
dclFrTeLpLogPortId = _DclFrTeLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 1, 1, 1, 1),
    _DclFrTeLpLogPortId_Type()
)
dclFrTeLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dclFrTeLpLogPortId.setStatus("mandatory")


class _DclFrTeLpInterfaceId_Type(Integer32):
    """Custom type dclFrTeLpInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("l0", 1),
          ("l1", 2),
          ("other", 3))
    )


_DclFrTeLpInterfaceId_Type.__name__ = "Integer32"
_DclFrTeLpInterfaceId_Object = MibTableColumn
dclFrTeLpInterfaceId = _DclFrTeLpInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 1, 1, 1, 2),
    _DclFrTeLpInterfaceId_Type()
)
dclFrTeLpInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dclFrTeLpInterfaceId.setStatus("mandatory")


class _DclFrTeLpConfigId_Type(Integer32):
    """Custom type dclFrTeLpConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_DclFrTeLpConfigId_Type.__name__ = "Integer32"
_DclFrTeLpConfigId_Object = MibTableColumn
dclFrTeLpConfigId = _DclFrTeLpConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 1, 1, 1, 3),
    _DclFrTeLpConfigId_Type()
)
dclFrTeLpConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dclFrTeLpConfigId.setStatus("mandatory")


class _DclFrTeLpLmi_Type(Integer32):
    """Custom type dclFrTeLpLmi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("lmiUni", 2),
          ("off", 1))
    )


_DclFrTeLpLmi_Type.__name__ = "Integer32"
_DclFrTeLpLmi_Object = MibTableColumn
dclFrTeLpLmi = _DclFrTeLpLmi_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 1, 1, 1, 4),
    _DclFrTeLpLmi_Type()
)
dclFrTeLpLmi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dclFrTeLpLmi.setStatus("mandatory")
_DclFrSwitchEquipment_ObjectIdentity = ObjectIdentity
dclFrSwitchEquipment = _DclFrSwitchEquipment_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 2)
)
_DclFrSeLogPortTable_Object = MibTable
dclFrSeLogPortTable = _DclFrSeLogPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 2, 1)
)
if mibBuilder.loadTexts:
    dclFrSeLogPortTable.setStatus("mandatory")
_DclFrSeLogPortEntry_Object = MibTableRow
dclFrSeLogPortEntry = _DclFrSeLogPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 2, 1, 1)
)
dclFrSeLogPortEntry.setIndexNames(
    (0, "PCE-MIB", "dclFrSeLpLogPortId"),
)
if mibBuilder.loadTexts:
    dclFrSeLogPortEntry.setStatus("mandatory")


class _DclFrSeLpLogPortId_Type(Integer32):
    """Custom type dclFrSeLpLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_DclFrSeLpLogPortId_Type.__name__ = "Integer32"
_DclFrSeLpLogPortId_Object = MibTableColumn
dclFrSeLpLogPortId = _DclFrSeLpLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 2, 1, 1, 1),
    _DclFrSeLpLogPortId_Type()
)
dclFrSeLpLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dclFrSeLpLogPortId.setStatus("mandatory")


class _DclFrSeLpInterfaceId_Type(Integer32):
    """Custom type dclFrSeLpInterfaceId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("l0", 1),
          ("l1", 2),
          ("other", 3))
    )


_DclFrSeLpInterfaceId_Type.__name__ = "Integer32"
_DclFrSeLpInterfaceId_Object = MibTableColumn
dclFrSeLpInterfaceId = _DclFrSeLpInterfaceId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 2, 1, 1, 2),
    _DclFrSeLpInterfaceId_Type()
)
dclFrSeLpInterfaceId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dclFrSeLpInterfaceId.setStatus("mandatory")


class _DclFrSeLpConfigId_Type(Integer32):
    """Custom type dclFrSeLpConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_DclFrSeLpConfigId_Type.__name__ = "Integer32"
_DclFrSeLpConfigId_Object = MibTableColumn
dclFrSeLpConfigId = _DclFrSeLpConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 2, 1, 1, 3),
    _DclFrSeLpConfigId_Type()
)
dclFrSeLpConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dclFrSeLpConfigId.setStatus("mandatory")
_DclFrConfigurationTe_ObjectIdentity = ObjectIdentity
dclFrConfigurationTe = _DclFrConfigurationTe_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 3)
)
_DclFrLmiParameterTable_Object = MibTable
dclFrLmiParameterTable = _DclFrLmiParameterTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 3, 1)
)
if mibBuilder.loadTexts:
    dclFrLmiParameterTable.setStatus("mandatory")
_DclFrLmiParameterEntry_Object = MibTableRow
dclFrLmiParameterEntry = _DclFrLmiParameterEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 3, 1, 1)
)
dclFrLmiParameterEntry.setIndexNames(
    (0, "PCE-MIB", "dclFrLmiParaConfigId"),
)
if mibBuilder.loadTexts:
    dclFrLmiParameterEntry.setStatus("mandatory")


class _DclFrLmiParaConfigId_Type(Integer32):
    """Custom type dclFrLmiParaConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_DclFrLmiParaConfigId_Type.__name__ = "Integer32"
_DclFrLmiParaConfigId_Object = MibTableColumn
dclFrLmiParaConfigId = _DclFrLmiParaConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 3, 1, 1, 1),
    _DclFrLmiParaConfigId_Type()
)
dclFrLmiParaConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dclFrLmiParaConfigId.setStatus("mandatory")


class _DclFrLmiParaDlci_Type(Integer32):
    """Custom type dclFrLmiParaDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1023),
    )


_DclFrLmiParaDlci_Type.__name__ = "Integer32"
_DclFrLmiParaDlci_Object = MibTableColumn
dclFrLmiParaDlci = _DclFrLmiParaDlci_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 3, 1, 1, 2),
    _DclFrLmiParaDlci_Type()
)
dclFrLmiParaDlci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dclFrLmiParaDlci.setStatus("mandatory")


class _DclFrLmiParaStandard_Type(Integer32):
    """Custom type dclFrLmiParaStandard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ansiT1-617d", 1),
          ("itutQ933a", 2))
    )


_DclFrLmiParaStandard_Type.__name__ = "Integer32"
_DclFrLmiParaStandard_Object = MibTableColumn
dclFrLmiParaStandard = _DclFrLmiParaStandard_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 3, 1, 1, 3),
    _DclFrLmiParaStandard_Type()
)
dclFrLmiParaStandard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dclFrLmiParaStandard.setStatus("mandatory")


class _DclFrLmiParaAccessibilityCondition_Type(Integer32):
    """Custom type dclFrLmiParaAccessibilityCondition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_DclFrLmiParaAccessibilityCondition_Type.__name__ = "Integer32"
_DclFrLmiParaAccessibilityCondition_Object = MibTableColumn
dclFrLmiParaAccessibilityCondition = _DclFrLmiParaAccessibilityCondition_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 3, 1, 1, 4),
    _DclFrLmiParaAccessibilityCondition_Type()
)
dclFrLmiParaAccessibilityCondition.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dclFrLmiParaAccessibilityCondition.setStatus("mandatory")


class _DclFrLmiParaN391FullStatusPollCount_Type(Integer32):
    """Custom type dclFrLmiParaN391FullStatusPollCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_DclFrLmiParaN391FullStatusPollCount_Type.__name__ = "Integer32"
_DclFrLmiParaN391FullStatusPollCount_Object = MibTableColumn
dclFrLmiParaN391FullStatusPollCount = _DclFrLmiParaN391FullStatusPollCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 3, 1, 1, 5),
    _DclFrLmiParaN391FullStatusPollCount_Type()
)
dclFrLmiParaN391FullStatusPollCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dclFrLmiParaN391FullStatusPollCount.setStatus("mandatory")


class _DclFrLmiParaN392ErrorThreshold_Type(Integer32):
    """Custom type dclFrLmiParaN392ErrorThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_DclFrLmiParaN392ErrorThreshold_Type.__name__ = "Integer32"
_DclFrLmiParaN392ErrorThreshold_Object = MibTableColumn
dclFrLmiParaN392ErrorThreshold = _DclFrLmiParaN392ErrorThreshold_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 3, 1, 1, 6),
    _DclFrLmiParaN392ErrorThreshold_Type()
)
dclFrLmiParaN392ErrorThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dclFrLmiParaN392ErrorThreshold.setStatus("mandatory")


class _DclFrLmiParaN393MonitoredEventCount_Type(Integer32):
    """Custom type dclFrLmiParaN393MonitoredEventCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_DclFrLmiParaN393MonitoredEventCount_Type.__name__ = "Integer32"
_DclFrLmiParaN393MonitoredEventCount_Object = MibTableColumn
dclFrLmiParaN393MonitoredEventCount = _DclFrLmiParaN393MonitoredEventCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 3, 1, 1, 7),
    _DclFrLmiParaN393MonitoredEventCount_Type()
)
dclFrLmiParaN393MonitoredEventCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dclFrLmiParaN393MonitoredEventCount.setStatus("mandatory")


class _DclFrLmiParaT391LinkIntegPollTimer_Type(Integer32):
    """Custom type dclFrLmiParaT391LinkIntegPollTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 30),
    )


_DclFrLmiParaT391LinkIntegPollTimer_Type.__name__ = "Integer32"
_DclFrLmiParaT391LinkIntegPollTimer_Object = MibTableColumn
dclFrLmiParaT391LinkIntegPollTimer = _DclFrLmiParaT391LinkIntegPollTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 3, 1, 1, 8),
    _DclFrLmiParaT391LinkIntegPollTimer_Type()
)
dclFrLmiParaT391LinkIntegPollTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dclFrLmiParaT391LinkIntegPollTimer.setStatus("mandatory")
_DclFrConfigurationSe_ObjectIdentity = ObjectIdentity
dclFrConfigurationSe = _DclFrConfigurationSe_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4)
)
_DclFrSeSignallingTable_Object = MibTable
dclFrSeSignallingTable = _DclFrSeSignallingTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1)
)
if mibBuilder.loadTexts:
    dclFrSeSignallingTable.setStatus("mandatory")
_DclFrSeSignallingEntry_Object = MibTableRow
dclFrSeSignallingEntry = _DclFrSeSignallingEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1)
)
dclFrSeSignallingEntry.setIndexNames(
    (0, "PCE-MIB", "dclFrSeSigConfigId"),
)
if mibBuilder.loadTexts:
    dclFrSeSignallingEntry.setStatus("mandatory")


class _DclFrSeSigConfigId_Type(Integer32):
    """Custom type dclFrSeSigConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_DclFrSeSigConfigId_Type.__name__ = "Integer32"
_DclFrSeSigConfigId_Object = MibTableColumn
dclFrSeSigConfigId = _DclFrSeSigConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1, 1),
    _DclFrSeSigConfigId_Type()
)
dclFrSeSigConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dclFrSeSigConfigId.setStatus("mandatory")


class _DclFrSeSigOuputTimeout_Type(Integer32):
    """Custom type dclFrSeSigOuputTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 51000),
    )


_DclFrSeSigOuputTimeout_Type.__name__ = "Integer32"
_DclFrSeSigOuputTimeout_Object = MibTableColumn
dclFrSeSigOuputTimeout = _DclFrSeSigOuputTimeout_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1, 2),
    _DclFrSeSigOuputTimeout_Type()
)
dclFrSeSigOuputTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dclFrSeSigOuputTimeout.setStatus("mandatory")


class _DclFrSeSigSignalOutputWinSize_Type(Integer32):
    """Custom type dclFrSeSigSignalOutputWinSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 7),
    )


_DclFrSeSigSignalOutputWinSize_Type.__name__ = "Integer32"
_DclFrSeSigSignalOutputWinSize_Object = MibTableColumn
dclFrSeSigSignalOutputWinSize = _DclFrSeSigSignalOutputWinSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1, 3),
    _DclFrSeSigSignalOutputWinSize_Type()
)
dclFrSeSigSignalOutputWinSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dclFrSeSigSignalOutputWinSize.setStatus("mandatory")


class _DclFrSeSigN200RetransMaxCount_Type(Integer32):
    """Custom type dclFrSeSigN200RetransMaxCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_DclFrSeSigN200RetransMaxCount_Type.__name__ = "Integer32"
_DclFrSeSigN200RetransMaxCount_Object = MibTableColumn
dclFrSeSigN200RetransMaxCount = _DclFrSeSigN200RetransMaxCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1, 5),
    _DclFrSeSigN200RetransMaxCount_Type()
)
dclFrSeSigN200RetransMaxCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dclFrSeSigN200RetransMaxCount.setStatus("mandatory")


class _DclFrSeSigT200RetransTimer_Type(Integer32):
    """Custom type dclFrSeSigT200RetransTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 25500),
    )


_DclFrSeSigT200RetransTimer_Type.__name__ = "Integer32"
_DclFrSeSigT200RetransTimer_Object = MibTableColumn
dclFrSeSigT200RetransTimer = _DclFrSeSigT200RetransTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1, 6),
    _DclFrSeSigT200RetransTimer_Type()
)
dclFrSeSigT200RetransTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dclFrSeSigT200RetransTimer.setStatus("mandatory")


class _DclFrSeSigT203InactivityTimer_Type(Integer32):
    """Custom type dclFrSeSigT203InactivityTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_DclFrSeSigT203InactivityTimer_Type.__name__ = "Integer32"
_DclFrSeSigT203InactivityTimer_Object = MibTableColumn
dclFrSeSigT203InactivityTimer = _DclFrSeSigT203InactivityTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1, 7),
    _DclFrSeSigT203InactivityTimer_Type()
)
dclFrSeSigT203InactivityTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dclFrSeSigT203InactivityTimer.setStatus("mandatory")


class _DclFrSeSigT303SetupResponseTimer_Type(Integer32):
    """Custom type dclFrSeSigT303SetupResponseTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_DclFrSeSigT303SetupResponseTimer_Type.__name__ = "Integer32"
_DclFrSeSigT303SetupResponseTimer_Object = MibTableColumn
dclFrSeSigT303SetupResponseTimer = _DclFrSeSigT303SetupResponseTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1, 8),
    _DclFrSeSigT303SetupResponseTimer_Type()
)
dclFrSeSigT303SetupResponseTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dclFrSeSigT303SetupResponseTimer.setStatus("mandatory")


class _DclFrSeSigT305DisconnectResponseTimer_Type(Integer32):
    """Custom type dclFrSeSigT305DisconnectResponseTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_DclFrSeSigT305DisconnectResponseTimer_Type.__name__ = "Integer32"
_DclFrSeSigT305DisconnectResponseTimer_Object = MibTableColumn
dclFrSeSigT305DisconnectResponseTimer = _DclFrSeSigT305DisconnectResponseTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1, 9),
    _DclFrSeSigT305DisconnectResponseTimer_Type()
)
dclFrSeSigT305DisconnectResponseTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dclFrSeSigT305DisconnectResponseTimer.setStatus("mandatory")


class _DclFrSeSigT308ReleaseResponseTimer_Type(Integer32):
    """Custom type dclFrSeSigT308ReleaseResponseTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_DclFrSeSigT308ReleaseResponseTimer_Type.__name__ = "Integer32"
_DclFrSeSigT308ReleaseResponseTimer_Object = MibTableColumn
dclFrSeSigT308ReleaseResponseTimer = _DclFrSeSigT308ReleaseResponseTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1, 10),
    _DclFrSeSigT308ReleaseResponseTimer_Type()
)
dclFrSeSigT308ReleaseResponseTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dclFrSeSigT308ReleaseResponseTimer.setStatus("mandatory")


class _DclFrSeSigT310CallProceedingTimer_Type(Integer32):
    """Custom type dclFrSeSigT310CallProceedingTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_DclFrSeSigT310CallProceedingTimer_Type.__name__ = "Integer32"
_DclFrSeSigT310CallProceedingTimer_Object = MibTableColumn
dclFrSeSigT310CallProceedingTimer = _DclFrSeSigT310CallProceedingTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1, 11),
    _DclFrSeSigT310CallProceedingTimer_Type()
)
dclFrSeSigT310CallProceedingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dclFrSeSigT310CallProceedingTimer.setStatus("mandatory")


class _DclFrSeSigT316RestartAcknowledgeTimer_Type(Integer32):
    """Custom type dclFrSeSigT316RestartAcknowledgeTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_DclFrSeSigT316RestartAcknowledgeTimer_Type.__name__ = "Integer32"
_DclFrSeSigT316RestartAcknowledgeTimer_Object = MibTableColumn
dclFrSeSigT316RestartAcknowledgeTimer = _DclFrSeSigT316RestartAcknowledgeTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1, 12),
    _DclFrSeSigT316RestartAcknowledgeTimer_Type()
)
dclFrSeSigT316RestartAcknowledgeTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dclFrSeSigT316RestartAcknowledgeTimer.setStatus("mandatory")
_DcWanSwitch_ObjectIdentity = ObjectIdentity
dcWanSwitch = _DcWanSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 25)
)
_DcwEquipParams_ObjectIdentity = ObjectIdentity
dcwEquipParams = _DcwEquipParams_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 25, 1)
)


class _DcwEquipDnicZoAddr_Type(OctetString):
    """Custom type dcwEquipDnicZoAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(3, 3),
    )


_DcwEquipDnicZoAddr_Type.__name__ = "OctetString"
_DcwEquipDnicZoAddr_Object = MibScalar
dcwEquipDnicZoAddr = _DcwEquipDnicZoAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 25, 1, 1),
    _DcwEquipDnicZoAddr_Type()
)
dcwEquipDnicZoAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcwEquipDnicZoAddr.setStatus("mandatory")


class _DcwEquipVoiceRoutingServicePortAddr_Type(OctetString):
    """Custom type dcwEquipVoiceRoutingServicePortAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_DcwEquipVoiceRoutingServicePortAddr_Type.__name__ = "OctetString"
_DcwEquipVoiceRoutingServicePortAddr_Object = MibScalar
dcwEquipVoiceRoutingServicePortAddr = _DcwEquipVoiceRoutingServicePortAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 25, 1, 2),
    _DcwEquipVoiceRoutingServicePortAddr_Type()
)
dcwEquipVoiceRoutingServicePortAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcwEquipVoiceRoutingServicePortAddr.setStatus("mandatory")


class _DcwEquipIpVirtualPortAddr_Type(OctetString):
    """Custom type dcwEquipIpVirtualPortAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_DcwEquipIpVirtualPortAddr_Type.__name__ = "OctetString"
_DcwEquipIpVirtualPortAddr_Object = MibScalar
dcwEquipIpVirtualPortAddr = _DcwEquipIpVirtualPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 25, 1, 3),
    _DcwEquipIpVirtualPortAddr_Type()
)
dcwEquipIpVirtualPortAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcwEquipIpVirtualPortAddr.setStatus("mandatory")


class _DcwEquipRemoteConfPortAddr_Type(OctetString):
    """Custom type dcwEquipRemoteConfPortAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_DcwEquipRemoteConfPortAddr_Type.__name__ = "OctetString"
_DcwEquipRemoteConfPortAddr_Object = MibScalar
dcwEquipRemoteConfPortAddr = _DcwEquipRemoteConfPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 25, 1, 4),
    _DcwEquipRemoteConfPortAddr_Type()
)
dcwEquipRemoteConfPortAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcwEquipRemoteConfPortAddr.setStatus("mandatory")


class _DcwEquipVoiceVirtualPortAddr_Type(OctetString):
    """Custom type dcwEquipVoiceVirtualPortAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_DcwEquipVoiceVirtualPortAddr_Type.__name__ = "OctetString"
_DcwEquipVoiceVirtualPortAddr_Object = MibScalar
dcwEquipVoiceVirtualPortAddr = _DcwEquipVoiceVirtualPortAddr_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 25, 1, 5),
    _DcwEquipVoiceVirtualPortAddr_Type()
)
dcwEquipVoiceVirtualPortAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcwEquipVoiceVirtualPortAddr.setStatus("mandatory")


class _DcwEquipSVCDisconnectOnCongestion_Type(Integer32):
    """Custom type dcwEquipSVCDisconnectOnCongestion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_DcwEquipSVCDisconnectOnCongestion_Type.__name__ = "Integer32"
_DcwEquipSVCDisconnectOnCongestion_Object = MibScalar
dcwEquipSVCDisconnectOnCongestion = _DcwEquipSVCDisconnectOnCongestion_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 25, 1, 6),
    _DcwEquipSVCDisconnectOnCongestion_Type()
)
dcwEquipSVCDisconnectOnCongestion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcwEquipSVCDisconnectOnCongestion.setStatus("mandatory")
_DcwABPvcLpTable_Object = MibTable
dcwABPvcLpTable = _DcwABPvcLpTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 25, 2)
)
if mibBuilder.loadTexts:
    dcwABPvcLpTable.setStatus("mandatory")
_DcwABPvcLpEntry_Object = MibTableRow
dcwABPvcLpEntry = _DcwABPvcLpEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 25, 2, 1)
)
dcwABPvcLpEntry.setIndexNames(
    (0, "PCE-MIB", "dcwABPvcLpId"),
)
if mibBuilder.loadTexts:
    dcwABPvcLpEntry.setStatus("mandatory")


class _DcwABPvcLpId_Type(Integer32):
    """Custom type dcwABPvcLpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_DcwABPvcLpId_Type.__name__ = "Integer32"
_DcwABPvcLpId_Object = MibTableColumn
dcwABPvcLpId = _DcwABPvcLpId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 25, 2, 1, 1),
    _DcwABPvcLpId_Type()
)
dcwABPvcLpId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcwABPvcLpId.setStatus("mandatory")


class _DcwABPvcLpAddress_Type(OctetString):
    """Custom type dcwABPvcLpAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_DcwABPvcLpAddress_Type.__name__ = "OctetString"
_DcwABPvcLpAddress_Object = MibTableColumn
dcwABPvcLpAddress = _DcwABPvcLpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 25, 2, 1, 2),
    _DcwABPvcLpAddress_Type()
)
dcwABPvcLpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcwABPvcLpAddress.setStatus("mandatory")
_DcVirtualPorts_ObjectIdentity = ObjectIdentity
dcVirtualPorts = _DcVirtualPorts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30)
)
_DcvVirtualPortTable_Object = MibTable
dcvVirtualPortTable = _DcvVirtualPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 1)
)
if mibBuilder.loadTexts:
    dcvVirtualPortTable.setStatus("mandatory")
_DcvVirtualPortEntry_Object = MibTableRow
dcvVirtualPortEntry = _DcvVirtualPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 1, 1)
)
dcvVirtualPortEntry.setIndexNames(
    (0, "PCE-MIB", "dcvVirtualPortId"),
)
if mibBuilder.loadTexts:
    dcvVirtualPortEntry.setStatus("mandatory")


class _DcvVirtualPortId_Type(Integer32):
    """Custom type dcvVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vpIp", 2),
          ("vpVoix", 1))
    )


_DcvVirtualPortId_Type.__name__ = "Integer32"
_DcvVirtualPortId_Object = MibTableColumn
dcvVirtualPortId = _DcvVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 1, 1, 1),
    _DcvVirtualPortId_Type()
)
dcvVirtualPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvVirtualPortId.setStatus("mandatory")
_DcvIpVirtualPort_ObjectIdentity = ObjectIdentity
dcvIpVirtualPort = _DcvIpVirtualPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5)
)
_DcvIpLocalTable_Object = MibTable
dcvIpLocalTable = _DcvIpLocalTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 1)
)
if mibBuilder.loadTexts:
    dcvIpLocalTable.setStatus("mandatory")
_DcvIpLocalEntry_Object = MibTableRow
dcvIpLocalEntry = _DcvIpLocalEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 1, 1)
)
dcvIpLocalEntry.setIndexNames(
    (0, "PCE-MIB", "dcvIpLocVirtualPortId"),
)
if mibBuilder.loadTexts:
    dcvIpLocalEntry.setStatus("mandatory")


class _DcvIpLocVirtualPortId_Type(Integer32):
    """Custom type dcvIpLocVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vpIp", 2),
          ("vpVoix", 1))
    )


_DcvIpLocVirtualPortId_Type.__name__ = "Integer32"
_DcvIpLocVirtualPortId_Object = MibTableColumn
dcvIpLocVirtualPortId = _DcvIpLocVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 1, 1, 1),
    _DcvIpLocVirtualPortId_Type()
)
dcvIpLocVirtualPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvIpLocVirtualPortId.setStatus("mandatory")
_DcvIpLocAddressHost_Type = IpAddress
_DcvIpLocAddressHost_Object = MibTableColumn
dcvIpLocAddressHost = _DcvIpLocAddressHost_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 1, 1, 2),
    _DcvIpLocAddressHost_Type()
)
dcvIpLocAddressHost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvIpLocAddressHost.setStatus("mandatory")
_DcvIpLocSubNetMask_Type = IpAddress
_DcvIpLocSubNetMask_Object = MibTableColumn
dcvIpLocSubNetMask = _DcvIpLocSubNetMask_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 1, 1, 3),
    _DcvIpLocSubNetMask_Type()
)
dcvIpLocSubNetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvIpLocSubNetMask.setStatus("mandatory")


class _DcvIpLocMtu_Type(Integer32):
    """Custom type dcvIpLocMtu based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(576, 9180),
    )


_DcvIpLocMtu_Type.__name__ = "Integer32"
_DcvIpLocMtu_Object = MibTableColumn
dcvIpLocMtu = _DcvIpLocMtu_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 1, 1, 4),
    _DcvIpLocMtu_Type()
)
dcvIpLocMtu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvIpLocMtu.setStatus("mandatory")
_DcvIpLocRouteNextHop_Type = IpAddress
_DcvIpLocRouteNextHop_Object = MibTableColumn
dcvIpLocRouteNextHop = _DcvIpLocRouteNextHop_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 1, 1, 5),
    _DcvIpLocRouteNextHop_Type()
)
dcvIpLocRouteNextHop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvIpLocRouteNextHop.setStatus("mandatory")


class _DcvIpLocMinimumRecallTimer_Type(Integer32):
    """Custom type dcvIpLocMinimumRecallTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_DcvIpLocMinimumRecallTimer_Type.__name__ = "Integer32"
_DcvIpLocMinimumRecallTimer_Object = MibTableColumn
dcvIpLocMinimumRecallTimer = _DcvIpLocMinimumRecallTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 1, 1, 6),
    _DcvIpLocMinimumRecallTimer_Type()
)
dcvIpLocMinimumRecallTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvIpLocMinimumRecallTimer.setStatus("mandatory")


class _DcvIpLocSvcClearCallTimer_Type(Integer32):
    """Custom type dcvIpLocSvcClearCallTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_DcvIpLocSvcClearCallTimer_Type.__name__ = "Integer32"
_DcvIpLocSvcClearCallTimer_Object = MibTableColumn
dcvIpLocSvcClearCallTimer = _DcvIpLocSvcClearCallTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 1, 1, 7),
    _DcvIpLocSvcClearCallTimer_Type()
)
dcvIpLocSvcClearCallTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvIpLocSvcClearCallTimer.setStatus("mandatory")


class _DcvIpLocSvcCallRetryCount_Type(Integer32):
    """Custom type dcvIpLocSvcCallRetryCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_DcvIpLocSvcCallRetryCount_Type.__name__ = "Integer32"
_DcvIpLocSvcCallRetryCount_Object = MibTableColumn
dcvIpLocSvcCallRetryCount = _DcvIpLocSvcCallRetryCount_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 1, 1, 8),
    _DcvIpLocSvcCallRetryCount_Type()
)
dcvIpLocSvcCallRetryCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvIpLocSvcCallRetryCount.setStatus("mandatory")
_DcvSnmp_ObjectIdentity = ObjectIdentity
dcvSnmp = _DcvSnmp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5)
)
_DcvSnmpGen_ObjectIdentity = ObjectIdentity
dcvSnmpGen = _DcvSnmpGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 1)
)


class _DcvSnmpGenVirtualPortId_Type(Integer32):
    """Custom type dcvSnmpGenVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vpIp", 2),
          ("vpVoix", 1))
    )


_DcvSnmpGenVirtualPortId_Type.__name__ = "Integer32"
_DcvSnmpGenVirtualPortId_Object = MibScalar
dcvSnmpGenVirtualPortId = _DcvSnmpGenVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 1, 1),
    _DcvSnmpGenVirtualPortId_Type()
)
dcvSnmpGenVirtualPortId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvSnmpGenVirtualPortId.setStatus("mandatory")


class _DcvSnmpGenCommunityStringReadOnly_Type(DisplayString):
    """Custom type dcvSnmpGenCommunityStringReadOnly based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 14),
    )


_DcvSnmpGenCommunityStringReadOnly_Type.__name__ = "DisplayString"
_DcvSnmpGenCommunityStringReadOnly_Object = MibScalar
dcvSnmpGenCommunityStringReadOnly = _DcvSnmpGenCommunityStringReadOnly_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 1, 2),
    _DcvSnmpGenCommunityStringReadOnly_Type()
)
dcvSnmpGenCommunityStringReadOnly.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvSnmpGenCommunityStringReadOnly.setStatus("mandatory")


class _DcvSnmpGenCommunityStringReadWrite_Type(DisplayString):
    """Custom type dcvSnmpGenCommunityStringReadWrite based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 14),
    )


_DcvSnmpGenCommunityStringReadWrite_Type.__name__ = "DisplayString"
_DcvSnmpGenCommunityStringReadWrite_Object = MibScalar
dcvSnmpGenCommunityStringReadWrite = _DcvSnmpGenCommunityStringReadWrite_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 1, 3),
    _DcvSnmpGenCommunityStringReadWrite_Type()
)
dcvSnmpGenCommunityStringReadWrite.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvSnmpGenCommunityStringReadWrite.setStatus("mandatory")


class _DcvSnmpGenCommunityStringTrap_Type(DisplayString):
    """Custom type dcvSnmpGenCommunityStringTrap based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 14),
    )


_DcvSnmpGenCommunityStringTrap_Type.__name__ = "DisplayString"
_DcvSnmpGenCommunityStringTrap_Object = MibScalar
dcvSnmpGenCommunityStringTrap = _DcvSnmpGenCommunityStringTrap_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 1, 4),
    _DcvSnmpGenCommunityStringTrap_Type()
)
dcvSnmpGenCommunityStringTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvSnmpGenCommunityStringTrap.setStatus("mandatory")


class _DcvSnmpGenAuthenticationFailureTrap_Type(Integer32):
    """Custom type dcvSnmpGenAuthenticationFailureTrap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_DcvSnmpGenAuthenticationFailureTrap_Type.__name__ = "Integer32"
_DcvSnmpGenAuthenticationFailureTrap_Object = MibScalar
dcvSnmpGenAuthenticationFailureTrap = _DcvSnmpGenAuthenticationFailureTrap_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 1, 5),
    _DcvSnmpGenAuthenticationFailureTrap_Type()
)
dcvSnmpGenAuthenticationFailureTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvSnmpGenAuthenticationFailureTrap.setStatus("mandatory")
_DcvSnmpManagerTable_Object = MibTable
dcvSnmpManagerTable = _DcvSnmpManagerTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 2)
)
if mibBuilder.loadTexts:
    dcvSnmpManagerTable.setStatus("mandatory")
_DcvSnmpManagerEntry_Object = MibTableRow
dcvSnmpManagerEntry = _DcvSnmpManagerEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 2, 1)
)
dcvSnmpManagerEntry.setIndexNames(
    (0, "PCE-MIB", "dcvSnmpManagerIpAddress"),
)
if mibBuilder.loadTexts:
    dcvSnmpManagerEntry.setStatus("mandatory")
_DcvSnmpManagerIpAddress_Type = IpAddress
_DcvSnmpManagerIpAddress_Object = MibTableColumn
dcvSnmpManagerIpAddress = _DcvSnmpManagerIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 2, 1, 1),
    _DcvSnmpManagerIpAddress_Type()
)
dcvSnmpManagerIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvSnmpManagerIpAddress.setStatus("mandatory")


class _DcvSnmpManagerStatus_Type(Integer32):
    """Custom type dcvSnmpManagerStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_DcvSnmpManagerStatus_Type.__name__ = "Integer32"
_DcvSnmpManagerStatus_Object = MibTableColumn
dcvSnmpManagerStatus = _DcvSnmpManagerStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 2, 1, 2),
    _DcvSnmpManagerStatus_Type()
)
dcvSnmpManagerStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvSnmpManagerStatus.setStatus("mandatory")


class _DcvSnmpManagerName_Type(DisplayString):
    """Custom type dcvSnmpManagerName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 12),
    )


_DcvSnmpManagerName_Type.__name__ = "DisplayString"
_DcvSnmpManagerName_Object = MibTableColumn
dcvSnmpManagerName = _DcvSnmpManagerName_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 2, 1, 3),
    _DcvSnmpManagerName_Type()
)
dcvSnmpManagerName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvSnmpManagerName.setStatus("mandatory")


class _DcvSnmpManagerSendTraps_Type(Integer32):
    """Custom type dcvSnmpManagerSendTraps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_DcvSnmpManagerSendTraps_Type.__name__ = "Integer32"
_DcvSnmpManagerSendTraps_Object = MibTableColumn
dcvSnmpManagerSendTraps = _DcvSnmpManagerSendTraps_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 2, 1, 4),
    _DcvSnmpManagerSendTraps_Type()
)
dcvSnmpManagerSendTraps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvSnmpManagerSendTraps.setStatus("mandatory")


class _DcvSnmpManagerTrapsUdpPort_Type(Integer32):
    """Custom type dcvSnmpManagerTrapsUdpPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_DcvSnmpManagerTrapsUdpPort_Type.__name__ = "Integer32"
_DcvSnmpManagerTrapsUdpPort_Object = MibTableColumn
dcvSnmpManagerTrapsUdpPort = _DcvSnmpManagerTrapsUdpPort_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 2, 1, 5),
    _DcvSnmpManagerTrapsUdpPort_Type()
)
dcvSnmpManagerTrapsUdpPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvSnmpManagerTrapsUdpPort.setStatus("mandatory")
_DcvRemoteConfTable_Object = MibTable
dcvRemoteConfTable = _DcvRemoteConfTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 3)
)
if mibBuilder.loadTexts:
    dcvRemoteConfTable.setStatus("mandatory")
_DcvRemoteConfEntry_Object = MibTableRow
dcvRemoteConfEntry = _DcvRemoteConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 3, 1)
)
dcvRemoteConfEntry.setIndexNames(
    (0, "PCE-MIB", "dcvRemoteConfName"),
)
if mibBuilder.loadTexts:
    dcvRemoteConfEntry.setStatus("mandatory")


class _DcvRemoteConfName_Type(DisplayString):
    """Custom type dcvRemoteConfName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 12),
    )


_DcvRemoteConfName_Type.__name__ = "DisplayString"
_DcvRemoteConfName_Object = MibTableColumn
dcvRemoteConfName = _DcvRemoteConfName_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 3, 1, 1),
    _DcvRemoteConfName_Type()
)
dcvRemoteConfName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvRemoteConfName.setStatus("mandatory")


class _DcvRemoteConfStatus_Type(Integer32):
    """Custom type dcvRemoteConfStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_DcvRemoteConfStatus_Type.__name__ = "Integer32"
_DcvRemoteConfStatus_Object = MibTableColumn
dcvRemoteConfStatus = _DcvRemoteConfStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 3, 1, 2),
    _DcvRemoteConfStatus_Type()
)
dcvRemoteConfStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvRemoteConfStatus.setStatus("mandatory")


class _DcvRemoteConfWanAddress_Type(OctetString):
    """Custom type dcvRemoteConfWanAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_DcvRemoteConfWanAddress_Type.__name__ = "OctetString"
_DcvRemoteConfWanAddress_Object = MibTableColumn
dcvRemoteConfWanAddress = _DcvRemoteConfWanAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 3, 1, 3),
    _DcvRemoteConfWanAddress_Type()
)
dcvRemoteConfWanAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvRemoteConfWanAddress.setStatus("mandatory")
_DcvTftpTable_Object = MibTable
dcvTftpTable = _DcvTftpTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 10)
)
if mibBuilder.loadTexts:
    dcvTftpTable.setStatus("mandatory")
_DcvTftpEntry_Object = MibTableRow
dcvTftpEntry = _DcvTftpEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 10, 1)
)
dcvTftpEntry.setIndexNames(
    (0, "PCE-MIB", "dcvTftpIpAddress"),
)
if mibBuilder.loadTexts:
    dcvTftpEntry.setStatus("mandatory")
_DcvTftpIpAddress_Type = IpAddress
_DcvTftpIpAddress_Object = MibTableColumn
dcvTftpIpAddress = _DcvTftpIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 10, 1, 1),
    _DcvTftpIpAddress_Type()
)
dcvTftpIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvTftpIpAddress.setStatus("mandatory")


class _DcvTftpStatus_Type(Integer32):
    """Custom type dcvTftpStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_DcvTftpStatus_Type.__name__ = "Integer32"
_DcvTftpStatus_Object = MibTableColumn
dcvTftpStatus = _DcvTftpStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 10, 1, 2),
    _DcvTftpStatus_Type()
)
dcvTftpStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvTftpStatus.setStatus("mandatory")


class _DcvTftpName_Type(DisplayString):
    """Custom type dcvTftpName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_DcvTftpName_Type.__name__ = "DisplayString"
_DcvTftpName_Object = MibTableColumn
dcvTftpName = _DcvTftpName_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 10, 1, 3),
    _DcvTftpName_Type()
)
dcvTftpName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvTftpName.setStatus("mandatory")


class _DcvTftpRetryTimer_Type(Integer32):
    """Custom type dcvTftpRetryTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 600),
    )


_DcvTftpRetryTimer_Type.__name__ = "Integer32"
_DcvTftpRetryTimer_Object = MibTableColumn
dcvTftpRetryTimer = _DcvTftpRetryTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 10, 1, 4),
    _DcvTftpRetryTimer_Type()
)
dcvTftpRetryTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvTftpRetryTimer.setStatus("mandatory")


class _DcvTftpInactTimer_Type(Integer32):
    """Custom type dcvTftpInactTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 3600),
    )


_DcvTftpInactTimer_Type.__name__ = "Integer32"
_DcvTftpInactTimer_Object = MibTableColumn
dcvTftpInactTimer = _DcvTftpInactTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 10, 1, 5),
    _DcvTftpInactTimer_Type()
)
dcvTftpInactTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvTftpInactTimer.setStatus("mandatory")
_DcvRemoteNetToMediaTable_Object = MibTable
dcvRemoteNetToMediaTable = _DcvRemoteNetToMediaTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 15)
)
if mibBuilder.loadTexts:
    dcvRemoteNetToMediaTable.setStatus("mandatory")
_DcvRemoteNetToMediaEntry_Object = MibTableRow
dcvRemoteNetToMediaEntry = _DcvRemoteNetToMediaEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 15, 1)
)
dcvRemoteNetToMediaEntry.setIndexNames(
    (0, "PCE-MIB", "dcvRemNetIpAddress"),
)
if mibBuilder.loadTexts:
    dcvRemoteNetToMediaEntry.setStatus("mandatory")
_DcvRemNetIpAddress_Type = IpAddress
_DcvRemNetIpAddress_Object = MibTableColumn
dcvRemNetIpAddress = _DcvRemNetIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 15, 1, 1),
    _DcvRemNetIpAddress_Type()
)
dcvRemNetIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvRemNetIpAddress.setStatus("mandatory")


class _DcvRemNetStatus_Type(Integer32):
    """Custom type dcvRemNetStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_DcvRemNetStatus_Type.__name__ = "Integer32"
_DcvRemNetStatus_Object = MibTableColumn
dcvRemNetStatus = _DcvRemNetStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 15, 1, 2),
    _DcvRemNetStatus_Type()
)
dcvRemNetStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvRemNetStatus.setStatus("mandatory")


class _DcvRemNetWanAddress_Type(OctetString):
    """Custom type dcvRemNetWanAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_DcvRemNetWanAddress_Type.__name__ = "OctetString"
_DcvRemNetWanAddress_Object = MibTableColumn
dcvRemNetWanAddress = _DcvRemNetWanAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 15, 1, 3),
    _DcvRemNetWanAddress_Type()
)
dcvRemNetWanAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvRemNetWanAddress.setStatus("mandatory")


class _DcvRemNetEncapsulation_Type(Integer32):
    """Custom type dcvRemNetEncapsulation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fripRFC", 2),
          ("fripSimple", 1))
    )


_DcvRemNetEncapsulation_Type.__name__ = "Integer32"
_DcvRemNetEncapsulation_Object = MibTableColumn
dcvRemNetEncapsulation = _DcvRemNetEncapsulation_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 15, 1, 4),
    _DcvRemNetEncapsulation_Type()
)
dcvRemNetEncapsulation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvRemNetEncapsulation.setStatus("mandatory")
_DcvVoiceVirtualPort_ObjectIdentity = ObjectIdentity
dcvVoiceVirtualPort = _DcvVoiceVirtualPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10)
)
_DcvVoiceGen_ObjectIdentity = ObjectIdentity
dcvVoiceGen = _DcvVoiceGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 1)
)


class _DcvVoiceVirtualPortId_Type(Integer32):
    """Custom type dcvVoiceVirtualPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("vpIp", 2),
          ("vpVoix", 1))
    )


_DcvVoiceVirtualPortId_Type.__name__ = "Integer32"
_DcvVoiceVirtualPortId_Object = MibScalar
dcvVoiceVirtualPortId = _DcvVoiceVirtualPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 1, 1),
    _DcvVoiceVirtualPortId_Type()
)
dcvVoiceVirtualPortId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceVirtualPortId.setStatus("mandatory")
_DcvVoiceTransportTable_Object = MibTable
dcvVoiceTransportTable = _DcvVoiceTransportTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 2)
)
if mibBuilder.loadTexts:
    dcvVoiceTransportTable.setStatus("mandatory")
_DcvVoiceTransportEntry_Object = MibTableRow
dcvVoiceTransportEntry = _DcvVoiceTransportEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 2, 1)
)
dcvVoiceTransportEntry.setIndexNames(
    (0, "PCE-MIB", "dcvVoiceTransProfileId"),
)
if mibBuilder.loadTexts:
    dcvVoiceTransportEntry.setStatus("mandatory")


class _DcvVoiceTransProfileId_Type(Integer32):
    """Custom type dcvVoiceTransProfileId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_DcvVoiceTransProfileId_Type.__name__ = "Integer32"
_DcvVoiceTransProfileId_Object = MibTableColumn
dcvVoiceTransProfileId = _DcvVoiceTransProfileId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 2, 1, 1),
    _DcvVoiceTransProfileId_Type()
)
dcvVoiceTransProfileId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceTransProfileId.setStatus("mandatory")


class _DcvVoiceTransEncapsulationMode_Type(Integer32):
    """Custom type dcvVoiceTransEncapsulationMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("frf", 1),
          ("private", 2))
    )


_DcvVoiceTransEncapsulationMode_Type.__name__ = "Integer32"
_DcvVoiceTransEncapsulationMode_Object = MibTableColumn
dcvVoiceTransEncapsulationMode = _DcvVoiceTransEncapsulationMode_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 2, 1, 2),
    _DcvVoiceTransEncapsulationMode_Type()
)
dcvVoiceTransEncapsulationMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceTransEncapsulationMode.setStatus("mandatory")


class _DcvVoiceTransMaxPayLoadNumber_Type(Integer32):
    """Custom type dcvVoiceTransMaxPayLoadNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_DcvVoiceTransMaxPayLoadNumber_Type.__name__ = "Integer32"
_DcvVoiceTransMaxPayLoadNumber_Object = MibTableColumn
dcvVoiceTransMaxPayLoadNumber = _DcvVoiceTransMaxPayLoadNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 2, 1, 3),
    _DcvVoiceTransMaxPayLoadNumber_Type()
)
dcvVoiceTransMaxPayLoadNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceTransMaxPayLoadNumber.setStatus("mandatory")


class _DcvVoiceTransCompressionAlgorithm_Type(Integer32):
    """Custom type dcvVoiceTransCompressionAlgorithm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("g729", 1),
          ("g729A", 2))
    )


_DcvVoiceTransCompressionAlgorithm_Type.__name__ = "Integer32"
_DcvVoiceTransCompressionAlgorithm_Object = MibTableColumn
dcvVoiceTransCompressionAlgorithm = _DcvVoiceTransCompressionAlgorithm_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 2, 1, 4),
    _DcvVoiceTransCompressionAlgorithm_Type()
)
dcvVoiceTransCompressionAlgorithm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceTransCompressionAlgorithm.setStatus("mandatory")


class _DcvVoiceTransJitterCompensation_Type(Integer32):
    """Custom type dcvVoiceTransJitterCompensation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 9),
    )


_DcvVoiceTransJitterCompensation_Type.__name__ = "Integer32"
_DcvVoiceTransJitterCompensation_Object = MibTableColumn
dcvVoiceTransJitterCompensation = _DcvVoiceTransJitterCompensation_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 2, 1, 5),
    _DcvVoiceTransJitterCompensation_Type()
)
dcvVoiceTransJitterCompensation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceTransJitterCompensation.setStatus("mandatory")


class _DcvVoiceTransVoicePacketsCombination_Type(Integer32):
    """Custom type dcvVoiceTransVoicePacketsCombination based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_DcvVoiceTransVoicePacketsCombination_Type.__name__ = "Integer32"
_DcvVoiceTransVoicePacketsCombination_Object = MibTableColumn
dcvVoiceTransVoicePacketsCombination = _DcvVoiceTransVoicePacketsCombination_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 2, 1, 6),
    _DcvVoiceTransVoicePacketsCombination_Type()
)
dcvVoiceTransVoicePacketsCombination.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceTransVoicePacketsCombination.setStatus("mandatory")


class _DcvVoiceTransQosBc_Type(Integer32):
    """Custom type dcvVoiceTransQosBc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("s14400", 2),
          ("s19200", 3),
          ("s32000", 4),
          ("s38400", 5),
          ("s48000", 6),
          ("s9600", 1))
    )


_DcvVoiceTransQosBc_Type.__name__ = "Integer32"
_DcvVoiceTransQosBc_Object = MibTableColumn
dcvVoiceTransQosBc = _DcvVoiceTransQosBc_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 2, 1, 7),
    _DcvVoiceTransQosBc_Type()
)
dcvVoiceTransQosBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceTransQosBc.setStatus("mandatory")


class _DcvVoiceTransQosBe_Type(Integer32):
    """Custom type dcvVoiceTransQosBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("s14400", 2),
          ("s19200", 3),
          ("s32000", 4),
          ("s38400", 5),
          ("s48000", 6),
          ("s9600", 1))
    )


_DcvVoiceTransQosBe_Type.__name__ = "Integer32"
_DcvVoiceTransQosBe_Object = MibTableColumn
dcvVoiceTransQosBe = _DcvVoiceTransQosBe_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 2, 1, 8),
    _DcvVoiceTransQosBe_Type()
)
dcvVoiceTransQosBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceTransQosBe.setStatus("mandatory")


class _DcvVoiceTransQosCir_Type(Integer32):
    """Custom type dcvVoiceTransQosCir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("s14400", 2),
          ("s19200", 3),
          ("s32000", 4),
          ("s38400", 5),
          ("s48000", 6),
          ("s9600", 1))
    )


_DcvVoiceTransQosCir_Type.__name__ = "Integer32"
_DcvVoiceTransQosCir_Object = MibTableColumn
dcvVoiceTransQosCir = _DcvVoiceTransQosCir_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 2, 1, 9),
    _DcvVoiceTransQosCir_Type()
)
dcvVoiceTransQosCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceTransQosCir.setStatus("mandatory")
_DcvVoiceSuscriberTable_Object = MibTable
dcvVoiceSuscriberTable = _DcvVoiceSuscriberTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 3)
)
if mibBuilder.loadTexts:
    dcvVoiceSuscriberTable.setStatus("mandatory")
_DcvVoiceSuscriberEntry_Object = MibTableRow
dcvVoiceSuscriberEntry = _DcvVoiceSuscriberEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 3, 1)
)
dcvVoiceSuscriberEntry.setIndexNames(
    (0, "PCE-MIB", "dcvVoiceSuscrOrderNumber"),
    (0, "PCE-MIB", "dcvVoiceSuscrNumber"),
)
if mibBuilder.loadTexts:
    dcvVoiceSuscriberEntry.setStatus("mandatory")


class _DcvVoiceSuscrOrderNumber_Type(Integer32):
    """Custom type dcvVoiceSuscrOrderNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9),
    )


_DcvVoiceSuscrOrderNumber_Type.__name__ = "Integer32"
_DcvVoiceSuscrOrderNumber_Object = MibTableColumn
dcvVoiceSuscrOrderNumber = _DcvVoiceSuscrOrderNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 3, 1, 1),
    _DcvVoiceSuscrOrderNumber_Type()
)
dcvVoiceSuscrOrderNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvVoiceSuscrOrderNumber.setStatus("mandatory")


class _DcvVoiceSuscrNumber_Type(DisplayString):
    """Custom type dcvVoiceSuscrNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 21),
    )


_DcvVoiceSuscrNumber_Type.__name__ = "DisplayString"
_DcvVoiceSuscrNumber_Object = MibTableColumn
dcvVoiceSuscrNumber = _DcvVoiceSuscrNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 3, 1, 2),
    _DcvVoiceSuscrNumber_Type()
)
dcvVoiceSuscrNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvVoiceSuscrNumber.setStatus("mandatory")


class _DcvVoiceSuscrStatus_Type(Integer32):
    """Custom type dcvVoiceSuscrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_DcvVoiceSuscrStatus_Type.__name__ = "Integer32"
_DcvVoiceSuscrStatus_Object = MibTableColumn
dcvVoiceSuscrStatus = _DcvVoiceSuscrStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 3, 1, 3),
    _DcvVoiceSuscrStatus_Type()
)
dcvVoiceSuscrStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceSuscrStatus.setStatus("mandatory")


class _DcvVoiceSuscrTransportNetwork_Type(Integer32):
    """Custom type dcvVoiceSuscrTransportNetwork based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fr", 1),
          ("other", 2))
    )


_DcvVoiceSuscrTransportNetwork_Type.__name__ = "Integer32"
_DcvVoiceSuscrTransportNetwork_Object = MibTableColumn
dcvVoiceSuscrTransportNetwork = _DcvVoiceSuscrTransportNetwork_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 3, 1, 4),
    _DcvVoiceSuscrTransportNetwork_Type()
)
dcvVoiceSuscrTransportNetwork.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvVoiceSuscrTransportNetwork.setStatus("mandatory")


class _DcvVoiceSuscrTransportNetworkAddress_Type(OctetString):
    """Custom type dcvVoiceSuscrTransportNetworkAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_DcvVoiceSuscrTransportNetworkAddress_Type.__name__ = "OctetString"
_DcvVoiceSuscrTransportNetworkAddress_Object = MibTableColumn
dcvVoiceSuscrTransportNetworkAddress = _DcvVoiceSuscrTransportNetworkAddress_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 3, 1, 5),
    _DcvVoiceSuscrTransportNetworkAddress_Type()
)
dcvVoiceSuscrTransportNetworkAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceSuscrTransportNetworkAddress.setStatus("mandatory")


class _DcvVoiceSuscrTransportProfileId_Type(Integer32):
    """Custom type dcvVoiceSuscrTransportProfileId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_DcvVoiceSuscrTransportProfileId_Type.__name__ = "Integer32"
_DcvVoiceSuscrTransportProfileId_Object = MibTableColumn
dcvVoiceSuscrTransportProfileId = _DcvVoiceSuscrTransportProfileId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 3, 1, 6),
    _DcvVoiceSuscrTransportProfileId_Type()
)
dcvVoiceSuscrTransportProfileId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceSuscrTransportProfileId.setStatus("mandatory")


class _DcvVoiceSuscrRemovedDigitNumber_Type(Integer32):
    """Custom type dcvVoiceSuscrRemovedDigitNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 21),
    )


_DcvVoiceSuscrRemovedDigitNumber_Type.__name__ = "Integer32"
_DcvVoiceSuscrRemovedDigitNumber_Object = MibTableColumn
dcvVoiceSuscrRemovedDigitNumber = _DcvVoiceSuscrRemovedDigitNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 3, 1, 7),
    _DcvVoiceSuscrRemovedDigitNumber_Type()
)
dcvVoiceSuscrRemovedDigitNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceSuscrRemovedDigitNumber.setStatus("mandatory")


class _DcvVoiceSuscrInsPrefix_Type(DisplayString):
    """Custom type dcvVoiceSuscrInsPrefix based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 21),
    )


_DcvVoiceSuscrInsPrefix_Type.__name__ = "DisplayString"
_DcvVoiceSuscrInsPrefix_Object = MibTableColumn
dcvVoiceSuscrInsPrefix = _DcvVoiceSuscrInsPrefix_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 3, 1, 8),
    _DcvVoiceSuscrInsPrefix_Type()
)
dcvVoiceSuscrInsPrefix.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceSuscrInsPrefix.setStatus("mandatory")


class _DcvVoiceSuscrInsSuffix_Type(DisplayString):
    """Custom type dcvVoiceSuscrInsSuffix based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 21),
    )


_DcvVoiceSuscrInsSuffix_Type.__name__ = "DisplayString"
_DcvVoiceSuscrInsSuffix_Object = MibTableColumn
dcvVoiceSuscrInsSuffix = _DcvVoiceSuscrInsSuffix_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 3, 1, 9),
    _DcvVoiceSuscrInsSuffix_Type()
)
dcvVoiceSuscrInsSuffix.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceSuscrInsSuffix.setStatus("mandatory")
_DcvVoiceSwTable_Object = MibTable
dcvVoiceSwTable = _DcvVoiceSwTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 4)
)
if mibBuilder.loadTexts:
    dcvVoiceSwTable.setStatus("mandatory")
_DcvVoiceSwEntry_Object = MibTableRow
dcvVoiceSwEntry = _DcvVoiceSwEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 4, 1)
)
dcvVoiceSwEntry.setIndexNames(
    (0, "PCE-MIB", "dcvVoiceSwOrderNumber"),
    (0, "PCE-MIB", "dcvVoiceSwSuscriberNumber"),
)
if mibBuilder.loadTexts:
    dcvVoiceSwEntry.setStatus("mandatory")


class _DcvVoiceSwOrderNumber_Type(Integer32):
    """Custom type dcvVoiceSwOrderNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9),
    )


_DcvVoiceSwOrderNumber_Type.__name__ = "Integer32"
_DcvVoiceSwOrderNumber_Object = MibTableColumn
dcvVoiceSwOrderNumber = _DcvVoiceSwOrderNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 4, 1, 1),
    _DcvVoiceSwOrderNumber_Type()
)
dcvVoiceSwOrderNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvVoiceSwOrderNumber.setStatus("mandatory")


class _DcvVoiceSwSuscriberNumber_Type(DisplayString):
    """Custom type dcvVoiceSwSuscriberNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 21),
    )


_DcvVoiceSwSuscriberNumber_Type.__name__ = "DisplayString"
_DcvVoiceSwSuscriberNumber_Object = MibTableColumn
dcvVoiceSwSuscriberNumber = _DcvVoiceSwSuscriberNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 4, 1, 2),
    _DcvVoiceSwSuscriberNumber_Type()
)
dcvVoiceSwSuscriberNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvVoiceSwSuscriberNumber.setStatus("mandatory")


class _DcvVoiceSwStatus_Type(Integer32):
    """Custom type dcvVoiceSwStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_DcvVoiceSwStatus_Type.__name__ = "Integer32"
_DcvVoiceSwStatus_Object = MibTableColumn
dcvVoiceSwStatus = _DcvVoiceSwStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 4, 1, 3),
    _DcvVoiceSwStatus_Type()
)
dcvVoiceSwStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceSwStatus.setStatus("mandatory")


class _DcvVoiceSwLogPortSetId_Type(Integer32):
    """Custom type dcvVoiceSwLogPortSetId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9),
    )


_DcvVoiceSwLogPortSetId_Type.__name__ = "Integer32"
_DcvVoiceSwLogPortSetId_Object = MibTableColumn
dcvVoiceSwLogPortSetId = _DcvVoiceSwLogPortSetId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 4, 1, 4),
    _DcvVoiceSwLogPortSetId_Type()
)
dcvVoiceSwLogPortSetId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceSwLogPortSetId.setStatus("mandatory")


class _DcvVoiceSwRemovedDigitNumber_Type(Integer32):
    """Custom type dcvVoiceSwRemovedDigitNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 21),
    )


_DcvVoiceSwRemovedDigitNumber_Type.__name__ = "Integer32"
_DcvVoiceSwRemovedDigitNumber_Object = MibTableColumn
dcvVoiceSwRemovedDigitNumber = _DcvVoiceSwRemovedDigitNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 4, 1, 5),
    _DcvVoiceSwRemovedDigitNumber_Type()
)
dcvVoiceSwRemovedDigitNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceSwRemovedDigitNumber.setStatus("mandatory")


class _DcvVoiceSwInsPrefix_Type(DisplayString):
    """Custom type dcvVoiceSwInsPrefix based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 21),
    )


_DcvVoiceSwInsPrefix_Type.__name__ = "DisplayString"
_DcvVoiceSwInsPrefix_Object = MibTableColumn
dcvVoiceSwInsPrefix = _DcvVoiceSwInsPrefix_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 4, 1, 6),
    _DcvVoiceSwInsPrefix_Type()
)
dcvVoiceSwInsPrefix.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceSwInsPrefix.setStatus("mandatory")


class _DcvVoiceSwInsSuffix_Type(DisplayString):
    """Custom type dcvVoiceSwInsSuffix based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 21),
    )


_DcvVoiceSwInsSuffix_Type.__name__ = "DisplayString"
_DcvVoiceSwInsSuffix_Object = MibTableColumn
dcvVoiceSwInsSuffix = _DcvVoiceSwInsSuffix_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 4, 1, 7),
    _DcvVoiceSwInsSuffix_Type()
)
dcvVoiceSwInsSuffix.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceSwInsSuffix.setStatus("mandatory")
_DcvDialingReceptTable_Object = MibTable
dcvDialingReceptTable = _DcvDialingReceptTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 5)
)
if mibBuilder.loadTexts:
    dcvDialingReceptTable.setStatus("mandatory")
_DcvDialingReceptEntry_Object = MibTableRow
dcvDialingReceptEntry = _DcvDialingReceptEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 5, 1)
)
dcvDialingReceptEntry.setIndexNames(
    (0, "PCE-MIB", "dcvDialRxSuscriberNumber"),
)
if mibBuilder.loadTexts:
    dcvDialingReceptEntry.setStatus("mandatory")


class _DcvDialRxSuscriberNumber_Type(DisplayString):
    """Custom type dcvDialRxSuscriberNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 21),
    )


_DcvDialRxSuscriberNumber_Type.__name__ = "DisplayString"
_DcvDialRxSuscriberNumber_Object = MibTableColumn
dcvDialRxSuscriberNumber = _DcvDialRxSuscriberNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 5, 1, 1),
    _DcvDialRxSuscriberNumber_Type()
)
dcvDialRxSuscriberNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvDialRxSuscriberNumber.setStatus("mandatory")


class _DcvDialRxStatus_Type(Integer32):
    """Custom type dcvDialRxStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_DcvDialRxStatus_Type.__name__ = "Integer32"
_DcvDialRxStatus_Object = MibTableColumn
dcvDialRxStatus = _DcvDialRxStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 5, 1, 2),
    _DcvDialRxStatus_Type()
)
dcvDialRxStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvDialRxStatus.setStatus("mandatory")


class _DcvDialRxNumberLength_Type(Integer32):
    """Custom type dcvDialRxNumberLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 21),
    )


_DcvDialRxNumberLength_Type.__name__ = "Integer32"
_DcvDialRxNumberLength_Object = MibTableColumn
dcvDialRxNumberLength = _DcvDialRxNumberLength_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 5, 1, 3),
    _DcvDialRxNumberLength_Type()
)
dcvDialRxNumberLength.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvDialRxNumberLength.setStatus("mandatory")


class _DcvDialRxEndOfDialingTimer_Type(Integer32):
    """Custom type dcvDialRxEndOfDialingTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_DcvDialRxEndOfDialingTimer_Type.__name__ = "Integer32"
_DcvDialRxEndOfDialingTimer_Object = MibTableColumn
dcvDialRxEndOfDialingTimer = _DcvDialRxEndOfDialingTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 5, 1, 4),
    _DcvDialRxEndOfDialingTimer_Type()
)
dcvDialRxEndOfDialingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvDialRxEndOfDialingTimer.setStatus("mandatory")
_DcvVoiceLogPort_ObjectIdentity = ObjectIdentity
dcvVoiceLogPort = _DcvVoiceLogPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10)
)
_DcvVoiceLogicalPortTable_Object = MibTable
dcvVoiceLogicalPortTable = _DcvVoiceLogicalPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 1)
)
if mibBuilder.loadTexts:
    dcvVoiceLogicalPortTable.setStatus("mandatory")
_DcvVoiceLogicalPortEntry_Object = MibTableRow
dcvVoiceLogicalPortEntry = _DcvVoiceLogicalPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 1, 1)
)
dcvVoiceLogicalPortEntry.setIndexNames(
    (0, "PCE-MIB", "dcvVoiceLogPortId"),
)
if mibBuilder.loadTexts:
    dcvVoiceLogicalPortEntry.setStatus("mandatory")


class _DcvVoiceLogPortId_Type(Integer32):
    """Custom type dcvVoiceLogPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 31),
    )


_DcvVoiceLogPortId_Type.__name__ = "Integer32"
_DcvVoiceLogPortId_Object = MibTableColumn
dcvVoiceLogPortId = _DcvVoiceLogPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 1, 1, 1),
    _DcvVoiceLogPortId_Type()
)
dcvVoiceLogPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvVoiceLogPortId.setStatus("mandatory")


class _DcvVoiceLogPortStatus_Type(Integer32):
    """Custom type dcvVoiceLogPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_DcvVoiceLogPortStatus_Type.__name__ = "Integer32"
_DcvVoiceLogPortStatus_Object = MibTableColumn
dcvVoiceLogPortStatus = _DcvVoiceLogPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 1, 1, 2),
    _DcvVoiceLogPortStatus_Type()
)
dcvVoiceLogPortStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceLogPortStatus.setStatus("mandatory")


class _DcvVoiceLogPortType_Type(Integer32):
    """Custom type dcvVoiceLogPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("tsPCMPermanent", 1),
          ("tsPCMSwitched", 2))
    )


_DcvVoiceLogPortType_Type.__name__ = "Integer32"
_DcvVoiceLogPortType_Object = MibTableColumn
dcvVoiceLogPortType = _DcvVoiceLogPortType_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 1, 1, 3),
    _DcvVoiceLogPortType_Type()
)
dcvVoiceLogPortType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceLogPortType.setStatus("mandatory")
_DcvProfileTone_ObjectIdentity = ObjectIdentity
dcvProfileTone = _DcvProfileTone_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5)
)
_DcvToneGenTable_Object = MibTable
dcvToneGenTable = _DcvToneGenTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 1)
)
if mibBuilder.loadTexts:
    dcvToneGenTable.setStatus("mandatory")
_DcvToneGenEntry_Object = MibTableRow
dcvToneGenEntry = _DcvToneGenEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 1, 1)
)
dcvToneGenEntry.setIndexNames(
    (0, "PCE-MIB", "dcvToneGenProfileId"),
)
if mibBuilder.loadTexts:
    dcvToneGenEntry.setStatus("mandatory")


class _DcvToneGenProfileId_Type(Integer32):
    """Custom type dcvToneGenProfileId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_DcvToneGenProfileId_Type.__name__ = "Integer32"
_DcvToneGenProfileId_Object = MibTableColumn
dcvToneGenProfileId = _DcvToneGenProfileId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 1, 1, 1),
    _DcvToneGenProfileId_Type()
)
dcvToneGenProfileId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvToneGenProfileId.setStatus("mandatory")


class _DcvToneGenLevel_Type(Integer32):
    """Custom type dcvToneGenLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 60),
    )


_DcvToneGenLevel_Type.__name__ = "Integer32"
_DcvToneGenLevel_Object = MibTableColumn
dcvToneGenLevel = _DcvToneGenLevel_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 1, 1, 2),
    _DcvToneGenLevel_Type()
)
dcvToneGenLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvToneGenLevel.setStatus("mandatory")
_DcvToneTable_Object = MibTable
dcvToneTable = _DcvToneTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 2)
)
if mibBuilder.loadTexts:
    dcvToneTable.setStatus("mandatory")
_DcvToneEntry_Object = MibTableRow
dcvToneEntry = _DcvToneEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 2, 1)
)
dcvToneEntry.setIndexNames(
    (0, "PCE-MIB", "dcvToneProfileId"),
    (0, "PCE-MIB", "dcvToneType"),
)
if mibBuilder.loadTexts:
    dcvToneEntry.setStatus("mandatory")


class _DcvToneProfileId_Type(Integer32):
    """Custom type dcvToneProfileId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_DcvToneProfileId_Type.__name__ = "Integer32"
_DcvToneProfileId_Object = MibTableColumn
dcvToneProfileId = _DcvToneProfileId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 2, 1, 1),
    _DcvToneProfileId_Type()
)
dcvToneProfileId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvToneProfileId.setStatus("mandatory")


class _DcvToneType_Type(Integer32):
    """Custom type dcvToneType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("busy", 4),
          ("callBack", 5),
          ("congestion", 3),
          ("dialTone", 1),
          ("trouble", 2))
    )


_DcvToneType_Type.__name__ = "Integer32"
_DcvToneType_Object = MibTableColumn
dcvToneType = _DcvToneType_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 2, 1, 2),
    _DcvToneType_Type()
)
dcvToneType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvToneType.setStatus("mandatory")


class _DcvToneEnable_Type(Integer32):
    """Custom type dcvToneEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_DcvToneEnable_Type.__name__ = "Integer32"
_DcvToneEnable_Object = MibTableColumn
dcvToneEnable = _DcvToneEnable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 2, 1, 3),
    _DcvToneEnable_Type()
)
dcvToneEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvToneEnable.setStatus("mandatory")


class _DcvToneFreq1_Type(Integer32):
    """Custom type dcvToneFreq1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_DcvToneFreq1_Type.__name__ = "Integer32"
_DcvToneFreq1_Object = MibTableColumn
dcvToneFreq1 = _DcvToneFreq1_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 2, 1, 4),
    _DcvToneFreq1_Type()
)
dcvToneFreq1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvToneFreq1.setStatus("mandatory")


class _DcvToneDuration1_Type(Integer32):
    """Custom type dcvToneDuration1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 500),
    )


_DcvToneDuration1_Type.__name__ = "Integer32"
_DcvToneDuration1_Object = MibTableColumn
dcvToneDuration1 = _DcvToneDuration1_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 2, 1, 5),
    _DcvToneDuration1_Type()
)
dcvToneDuration1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvToneDuration1.setStatus("mandatory")


class _DcvToneFreq2_Type(Integer32):
    """Custom type dcvToneFreq2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_DcvToneFreq2_Type.__name__ = "Integer32"
_DcvToneFreq2_Object = MibTableColumn
dcvToneFreq2 = _DcvToneFreq2_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 2, 1, 6),
    _DcvToneFreq2_Type()
)
dcvToneFreq2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvToneFreq2.setStatus("mandatory")


class _DcvToneDuration2_Type(Integer32):
    """Custom type dcvToneDuration2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 500),
    )


_DcvToneDuration2_Type.__name__ = "Integer32"
_DcvToneDuration2_Object = MibTableColumn
dcvToneDuration2 = _DcvToneDuration2_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 2, 1, 7),
    _DcvToneDuration2_Type()
)
dcvToneDuration2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvToneDuration2.setStatus("mandatory")
_DcvVoiceLogicalPortTSPCM_ObjectIdentity = ObjectIdentity
dcvVoiceLogicalPortTSPCM = _DcvVoiceLogicalPortTSPCM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10)
)
_DcvTSPCMPerm_ObjectIdentity = ObjectIdentity
dcvTSPCMPerm = _DcvTSPCMPerm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 1)
)
_DcvTSPCMPermTable_Object = MibTable
dcvTSPCMPermTable = _DcvTSPCMPermTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 1, 1)
)
if mibBuilder.loadTexts:
    dcvTSPCMPermTable.setStatus("mandatory")
_DcvTSPCMPermEntry_Object = MibTableRow
dcvTSPCMPermEntry = _DcvTSPCMPermEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 1, 1, 1)
)
dcvTSPCMPermEntry.setIndexNames(
    (0, "PCE-MIB", "dcvTSPCMPermLpId"),
)
if mibBuilder.loadTexts:
    dcvTSPCMPermEntry.setStatus("mandatory")


class _DcvTSPCMPermLpId_Type(Integer32):
    """Custom type dcvTSPCMPermLpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 31),
    )


_DcvTSPCMPermLpId_Type.__name__ = "Integer32"
_DcvTSPCMPermLpId_Object = MibTableColumn
dcvTSPCMPermLpId = _DcvTSPCMPermLpId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 1, 1, 1, 1),
    _DcvTSPCMPermLpId_Type()
)
dcvTSPCMPermLpId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvTSPCMPermLpId.setStatus("mandatory")


class _DcvTSPCMPermCommunicationMode_Type(Integer32):
    """Custom type dcvTSPCMPermCommunicationMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dce", 2),
          ("dte", 1))
    )


_DcvTSPCMPermCommunicationMode_Type.__name__ = "Integer32"
_DcvTSPCMPermCommunicationMode_Object = MibTableColumn
dcvTSPCMPermCommunicationMode = _DcvTSPCMPermCommunicationMode_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 1, 1, 1, 2),
    _DcvTSPCMPermCommunicationMode_Type()
)
dcvTSPCMPermCommunicationMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvTSPCMPermCommunicationMode.setStatus("mandatory")


class _DcvTSPCMPermRemoteNumber_Type(DisplayString):
    """Custom type dcvTSPCMPermRemoteNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 21),
    )


_DcvTSPCMPermRemoteNumber_Type.__name__ = "DisplayString"
_DcvTSPCMPermRemoteNumber_Object = MibTableColumn
dcvTSPCMPermRemoteNumber = _DcvTSPCMPermRemoteNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 1, 1, 1, 3),
    _DcvTSPCMPermRemoteNumber_Type()
)
dcvTSPCMPermRemoteNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvTSPCMPermRemoteNumber.setStatus("mandatory")


class _DcvTSPCMPermConfigId_Type(Integer32):
    """Custom type dcvTSPCMPermConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_DcvTSPCMPermConfigId_Type.__name__ = "Integer32"
_DcvTSPCMPermConfigId_Object = MibTableColumn
dcvTSPCMPermConfigId = _DcvTSPCMPermConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 1, 1, 1, 4),
    _DcvTSPCMPermConfigId_Type()
)
dcvTSPCMPermConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvTSPCMPermConfigId.setStatus("mandatory")


class _DcvTSPCMPermChannIfId_Type(Integer32):
    """Custom type dcvTSPCMPermChannIfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 31),
    )


_DcvTSPCMPermChannIfId_Type.__name__ = "Integer32"
_DcvTSPCMPermChannIfId_Object = MibTableColumn
dcvTSPCMPermChannIfId = _DcvTSPCMPermChannIfId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 1, 1, 1, 5),
    _DcvTSPCMPermChannIfId_Type()
)
dcvTSPCMPermChannIfId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvTSPCMPermChannIfId.setStatus("mandatory")
_DcvTSPCMSw_ObjectIdentity = ObjectIdentity
dcvTSPCMSw = _DcvTSPCMSw_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 2)
)
_DcvTSPCMSwTable_Object = MibTable
dcvTSPCMSwTable = _DcvTSPCMSwTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 2, 1)
)
if mibBuilder.loadTexts:
    dcvTSPCMSwTable.setStatus("mandatory")
_DcvTSPCMSwEntry_Object = MibTableRow
dcvTSPCMSwEntry = _DcvTSPCMSwEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 2, 1, 1)
)
dcvTSPCMSwEntry.setIndexNames(
    (0, "PCE-MIB", "dcvTSPCMSwLpId"),
)
if mibBuilder.loadTexts:
    dcvTSPCMSwEntry.setStatus("mandatory")


class _DcvTSPCMSwLpId_Type(Integer32):
    """Custom type dcvTSPCMSwLpId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 31),
    )


_DcvTSPCMSwLpId_Type.__name__ = "Integer32"
_DcvTSPCMSwLpId_Object = MibTableColumn
dcvTSPCMSwLpId = _DcvTSPCMSwLpId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 2, 1, 1, 1),
    _DcvTSPCMSwLpId_Type()
)
dcvTSPCMSwLpId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvTSPCMSwLpId.setStatus("mandatory")


class _DcvTSPCMSwLogPortSetId_Type(Integer32):
    """Custom type dcvTSPCMSwLogPortSetId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9),
    )


_DcvTSPCMSwLogPortSetId_Type.__name__ = "Integer32"
_DcvTSPCMSwLogPortSetId_Object = MibTableColumn
dcvTSPCMSwLogPortSetId = _DcvTSPCMSwLogPortSetId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 2, 1, 1, 2),
    _DcvTSPCMSwLogPortSetId_Type()
)
dcvTSPCMSwLogPortSetId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvTSPCMSwLogPortSetId.setStatus("mandatory")


class _DcvTSPCMSwCallType_Type(Integer32):
    """Custom type dcvTSPCMSwCallType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("incoming", 1),
          ("mixed", 3),
          ("outgoing", 2))
    )


_DcvTSPCMSwCallType_Type.__name__ = "Integer32"
_DcvTSPCMSwCallType_Object = MibTableColumn
dcvTSPCMSwCallType = _DcvTSPCMSwCallType_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 2, 1, 1, 3),
    _DcvTSPCMSwCallType_Type()
)
dcvTSPCMSwCallType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvTSPCMSwCallType.setStatus("mandatory")


class _DcvTSPCMSwRemoteNumber_Type(DisplayString):
    """Custom type dcvTSPCMSwRemoteNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 21),
    )


_DcvTSPCMSwRemoteNumber_Type.__name__ = "DisplayString"
_DcvTSPCMSwRemoteNumber_Object = MibTableColumn
dcvTSPCMSwRemoteNumber = _DcvTSPCMSwRemoteNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 2, 1, 1, 4),
    _DcvTSPCMSwRemoteNumber_Type()
)
dcvTSPCMSwRemoteNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvTSPCMSwRemoteNumber.setStatus("mandatory")


class _DcvTSPCMSwConfigId_Type(Integer32):
    """Custom type dcvTSPCMSwConfigId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_DcvTSPCMSwConfigId_Type.__name__ = "Integer32"
_DcvTSPCMSwConfigId_Object = MibTableColumn
dcvTSPCMSwConfigId = _DcvTSPCMSwConfigId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 2, 1, 1, 5),
    _DcvTSPCMSwConfigId_Type()
)
dcvTSPCMSwConfigId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvTSPCMSwConfigId.setStatus("mandatory")


class _DcvTSPCMSwChannIfId_Type(Integer32):
    """Custom type dcvTSPCMSwChannIfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 31),
    )


_DcvTSPCMSwChannIfId_Type.__name__ = "Integer32"
_DcvTSPCMSwChannIfId_Object = MibTableColumn
dcvTSPCMSwChannIfId = _DcvTSPCMSwChannIfId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 2, 1, 1, 6),
    _DcvTSPCMSwChannIfId_Type()
)
dcvTSPCMSwChannIfId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvTSPCMSwChannIfId.setStatus("mandatory")
_DcvCASConfigTable_Object = MibTable
dcvCASConfigTable = _DcvCASConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5)
)
if mibBuilder.loadTexts:
    dcvCASConfigTable.setStatus("mandatory")
_DcvCASConfigEntry_Object = MibTableRow
dcvCASConfigEntry = _DcvCASConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1)
)
dcvCASConfigEntry.setIndexNames(
    (0, "PCE-MIB", "dcvCASConfId"),
)
if mibBuilder.loadTexts:
    dcvCASConfigEntry.setStatus("mandatory")


class _DcvCASConfId_Type(Integer32):
    """Custom type dcvCASConfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_DcvCASConfId_Type.__name__ = "Integer32"
_DcvCASConfId_Object = MibTableColumn
dcvCASConfId = _DcvCASConfId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 1),
    _DcvCASConfId_Type()
)
dcvCASConfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvCASConfId.setStatus("mandatory")


class _DcvCASConfSignallingTransport_Type(Integer32):
    """Custom type dcvCASConfSignallingTransport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("a", 2),
          ("ab", 3),
          ("abcd", 4),
          ("none", 1))
    )


_DcvCASConfSignallingTransport_Type.__name__ = "Integer32"
_DcvCASConfSignallingTransport_Object = MibTableColumn
dcvCASConfSignallingTransport = _DcvCASConfSignallingTransport_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 2),
    _DcvCASConfSignallingTransport_Type()
)
dcvCASConfSignallingTransport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfSignallingTransport.setStatus("mandatory")


class _DcvCASConfCallSignalling_Type(Integer32):
    """Custom type dcvCASConfCallSignalling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("nColisee", 1),
          ("noResp", 6),
          ("sDelay", 4),
          ("simm", 3),
          ("swink", 5),
          ("uColisee", 2))
    )


_DcvCASConfCallSignalling_Type.__name__ = "Integer32"
_DcvCASConfCallSignalling_Object = MibTableColumn
dcvCASConfCallSignalling = _DcvCASConfCallSignalling_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 3),
    _DcvCASConfCallSignalling_Type()
)
dcvCASConfCallSignalling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfCallSignalling.setStatus("mandatory")


class _DcvCASConfDialingMode_Type(Integer32):
    """Custom type dcvCASConfDialingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dec", 1),
          ("dtmf", 2))
    )


_DcvCASConfDialingMode_Type.__name__ = "Integer32"
_DcvCASConfDialingMode_Object = MibTableColumn
dcvCASConfDialingMode = _DcvCASConfDialingMode_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 4),
    _DcvCASConfDialingMode_Type()
)
dcvCASConfDialingMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfDialingMode.setStatus("mandatory")


class _DcvCASConfDialingTimeOut_Type(Integer32):
    """Custom type dcvCASConfDialingTimeOut based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_DcvCASConfDialingTimeOut_Type.__name__ = "Integer32"
_DcvCASConfDialingTimeOut_Object = MibTableColumn
dcvCASConfDialingTimeOut = _DcvCASConfDialingTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 5),
    _DcvCASConfDialingTimeOut_Type()
)
dcvCASConfDialingTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfDialingTimeOut.setStatus("mandatory")


class _DcvCASConfSigChannelDiscTimeOut_Type(Integer32):
    """Custom type dcvCASConfSigChannelDiscTimeOut based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_DcvCASConfSigChannelDiscTimeOut_Type.__name__ = "Integer32"
_DcvCASConfSigChannelDiscTimeOut_Object = MibTableColumn
dcvCASConfSigChannelDiscTimeOut = _DcvCASConfSigChannelDiscTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 6),
    _DcvCASConfSigChannelDiscTimeOut_Type()
)
dcvCASConfSigChannelDiscTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfSigChannelDiscTimeOut.setStatus("mandatory")


class _DcvCASConfTimeBetweenSuccOutCall_Type(Integer32):
    """Custom type dcvCASConfTimeBetweenSuccOutCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_DcvCASConfTimeBetweenSuccOutCall_Type.__name__ = "Integer32"
_DcvCASConfTimeBetweenSuccOutCall_Object = MibTableColumn
dcvCASConfTimeBetweenSuccOutCall = _DcvCASConfTimeBetweenSuccOutCall_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 7),
    _DcvCASConfTimeBetweenSuccOutCall_Type()
)
dcvCASConfTimeBetweenSuccOutCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfTimeBetweenSuccOutCall.setStatus("mandatory")


class _DcvCASConfLineInterfacePolarity_Type(Integer32):
    """Custom type dcvCASConfLineInterfacePolarity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("inverted", 2),
          ("normal", 1))
    )


_DcvCASConfLineInterfacePolarity_Type.__name__ = "Integer32"
_DcvCASConfLineInterfacePolarity_Object = MibTableColumn
dcvCASConfLineInterfacePolarity = _DcvCASConfLineInterfacePolarity_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 8),
    _DcvCASConfLineInterfacePolarity_Type()
)
dcvCASConfLineInterfacePolarity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfLineInterfacePolarity.setStatus("mandatory")


class _DcvCASConfMinLineSeizureAckTime_Type(Integer32):
    """Custom type dcvCASConfMinLineSeizureAckTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 50),
    )


_DcvCASConfMinLineSeizureAckTime_Type.__name__ = "Integer32"
_DcvCASConfMinLineSeizureAckTime_Object = MibTableColumn
dcvCASConfMinLineSeizureAckTime = _DcvCASConfMinLineSeizureAckTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 9),
    _DcvCASConfMinLineSeizureAckTime_Type()
)
dcvCASConfMinLineSeizureAckTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfMinLineSeizureAckTime.setStatus("mandatory")


class _DcvCASConfMaxLineSeizureAckTime_Type(Integer32):
    """Custom type dcvCASConfMaxLineSeizureAckTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 50),
    )


_DcvCASConfMaxLineSeizureAckTime_Type.__name__ = "Integer32"
_DcvCASConfMaxLineSeizureAckTime_Object = MibTableColumn
dcvCASConfMaxLineSeizureAckTime = _DcvCASConfMaxLineSeizureAckTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 10),
    _DcvCASConfMaxLineSeizureAckTime_Type()
)
dcvCASConfMaxLineSeizureAckTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfMaxLineSeizureAckTime.setStatus("mandatory")


class _DcvCASConfLineSeizureAckTime_Type(Integer32):
    """Custom type dcvCASConfLineSeizureAckTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 50),
    )


_DcvCASConfLineSeizureAckTime_Type.__name__ = "Integer32"
_DcvCASConfLineSeizureAckTime_Object = MibTableColumn
dcvCASConfLineSeizureAckTime = _DcvCASConfLineSeizureAckTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 11),
    _DcvCASConfLineSeizureAckTime_Type()
)
dcvCASConfLineSeizureAckTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfLineSeizureAckTime.setStatus("mandatory")


class _DcvCASConfClearToIncCallTime_Type(Integer32):
    """Custom type dcvCASConfClearToIncCallTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 50),
    )


_DcvCASConfClearToIncCallTime_Type.__name__ = "Integer32"
_DcvCASConfClearToIncCallTime_Object = MibTableColumn
dcvCASConfClearToIncCallTime = _DcvCASConfClearToIncCallTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 12),
    _DcvCASConfClearToIncCallTime_Type()
)
dcvCASConfClearToIncCallTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfClearToIncCallTime.setStatus("mandatory")


class _DcvCASConfSeizureAckPulseDuration_Type(Integer32):
    """Custom type dcvCASConfSeizureAckPulseDuration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_DcvCASConfSeizureAckPulseDuration_Type.__name__ = "Integer32"
_DcvCASConfSeizureAckPulseDuration_Object = MibTableColumn
dcvCASConfSeizureAckPulseDuration = _DcvCASConfSeizureAckPulseDuration_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 13),
    _DcvCASConfSeizureAckPulseDuration_Type()
)
dcvCASConfSeizureAckPulseDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfSeizureAckPulseDuration.setStatus("mandatory")


class _DcvCASConfMinSeizureAckPulseDuration_Type(Integer32):
    """Custom type dcvCASConfMinSeizureAckPulseDuration based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_DcvCASConfMinSeizureAckPulseDuration_Type.__name__ = "Integer32"
_DcvCASConfMinSeizureAckPulseDuration_Object = MibTableColumn
dcvCASConfMinSeizureAckPulseDuration = _DcvCASConfMinSeizureAckPulseDuration_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 14),
    _DcvCASConfMinSeizureAckPulseDuration_Type()
)
dcvCASConfMinSeizureAckPulseDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfMinSeizureAckPulseDuration.setStatus("mandatory")


class _DcvCASConfDialingFormat_Type(Integer32):
    """Custom type dcvCASConfDialingFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ds1", 1),
          ("ds2", 2))
    )


_DcvCASConfDialingFormat_Type.__name__ = "Integer32"
_DcvCASConfDialingFormat_Object = MibTableColumn
dcvCASConfDialingFormat = _DcvCASConfDialingFormat_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 15),
    _DcvCASConfDialingFormat_Type()
)
dcvCASConfDialingFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfDialingFormat.setStatus("mandatory")


class _DcvCASConfInterdigitTime_Type(Integer32):
    """Custom type dcvCASConfInterdigitTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_DcvCASConfInterdigitTime_Type.__name__ = "Integer32"
_DcvCASConfInterdigitTime_Object = MibTableColumn
dcvCASConfInterdigitTime = _DcvCASConfInterdigitTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 16),
    _DcvCASConfInterdigitTime_Type()
)
dcvCASConfInterdigitTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfInterdigitTime.setStatus("mandatory")


class _DcvCASConfPauseTime_Type(Integer32):
    """Custom type dcvCASConfPauseTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_DcvCASConfPauseTime_Type.__name__ = "Integer32"
_DcvCASConfPauseTime_Object = MibTableColumn
dcvCASConfPauseTime = _DcvCASConfPauseTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 17),
    _DcvCASConfPauseTime_Type()
)
dcvCASConfPauseTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfPauseTime.setStatus("mandatory")


class _DcvCASConfDtmfDigitTime_Type(Integer32):
    """Custom type dcvCASConfDtmfDigitTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 10),
    )


_DcvCASConfDtmfDigitTime_Type.__name__ = "Integer32"
_DcvCASConfDtmfDigitTime_Object = MibTableColumn
dcvCASConfDtmfDigitTime = _DcvCASConfDtmfDigitTime_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 18),
    _DcvCASConfDtmfDigitTime_Type()
)
dcvCASConfDtmfDigitTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfDtmfDigitTime.setStatus("mandatory")


class _DcvCASConfDtmfDigitLevel_Type(Integer32):
    """Custom type dcvCASConfDtmfDigitLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 40),
    )


_DcvCASConfDtmfDigitLevel_Type.__name__ = "Integer32"
_DcvCASConfDtmfDigitLevel_Object = MibTableColumn
dcvCASConfDtmfDigitLevel = _DcvCASConfDtmfDigitLevel_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 19),
    _DcvCASConfDtmfDigitLevel_Type()
)
dcvCASConfDtmfDigitLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfDtmfDigitLevel.setStatus("mandatory")


class _DcvCASConfDelayBeforeDialing_Type(Integer32):
    """Custom type dcvCASConfDelayBeforeDialing based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_DcvCASConfDelayBeforeDialing_Type.__name__ = "Integer32"
_DcvCASConfDelayBeforeDialing_Object = MibTableColumn
dcvCASConfDelayBeforeDialing = _DcvCASConfDelayBeforeDialing_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 20),
    _DcvCASConfDelayBeforeDialing_Type()
)
dcvCASConfDelayBeforeDialing.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfDelayBeforeDialing.setStatus("mandatory")


class _DcvCASConfDigitReceptionTimeOut_Type(Integer32):
    """Custom type dcvCASConfDigitReceptionTimeOut based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_DcvCASConfDigitReceptionTimeOut_Type.__name__ = "Integer32"
_DcvCASConfDigitReceptionTimeOut_Object = MibTableColumn
dcvCASConfDigitReceptionTimeOut = _DcvCASConfDigitReceptionTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 21),
    _DcvCASConfDigitReceptionTimeOut_Type()
)
dcvCASConfDigitReceptionTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfDigitReceptionTimeOut.setStatus("mandatory")


class _DcvCASConfEndOfDialingTimer_Type(Integer32):
    """Custom type dcvCASConfEndOfDialingTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 60),
    )


_DcvCASConfEndOfDialingTimer_Type.__name__ = "Integer32"
_DcvCASConfEndOfDialingTimer_Object = MibTableColumn
dcvCASConfEndOfDialingTimer = _DcvCASConfEndOfDialingTimer_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 22),
    _DcvCASConfEndOfDialingTimer_Type()
)
dcvCASConfEndOfDialingTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfEndOfDialingTimer.setStatus("mandatory")


class _DcvCASConfToneProfile_Type(Integer32):
    """Custom type dcvCASConfToneProfile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_DcvCASConfToneProfile_Type.__name__ = "Integer32"
_DcvCASConfToneProfile_Object = MibTableColumn
dcvCASConfToneProfile = _DcvCASConfToneProfile_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 23),
    _DcvCASConfToneProfile_Type()
)
dcvCASConfToneProfile.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvCASConfToneProfile.setStatus("mandatory")


class _DcvCASConfIdleState_Type(Integer32):
    """Custom type dcvCASConfIdleState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_DcvCASConfIdleState_Type.__name__ = "Integer32"
_DcvCASConfIdleState_Object = MibTableColumn
dcvCASConfIdleState = _DcvCASConfIdleState_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 24),
    _DcvCASConfIdleState_Type()
)
dcvCASConfIdleState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfIdleState.setStatus("mandatory")


class _DcvCASConfAlarmState_Type(Integer32):
    """Custom type dcvCASConfAlarmState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_DcvCASConfAlarmState_Type.__name__ = "Integer32"
_DcvCASConfAlarmState_Object = MibTableColumn
dcvCASConfAlarmState = _DcvCASConfAlarmState_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 25),
    _DcvCASConfAlarmState_Type()
)
dcvCASConfAlarmState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvCASConfAlarmState.setStatus("mandatory")
_DcvDigitalLines_ObjectIdentity = ObjectIdentity
dcvDigitalLines = _DcvDigitalLines_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15)
)
_DcvIfPCM_ObjectIdentity = ObjectIdentity
dcvIfPCM = _DcvIfPCM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1)
)
_DcvIfPCMPhysTable_Object = MibTable
dcvIfPCMPhysTable = _DcvIfPCMPhysTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1, 1)
)
if mibBuilder.loadTexts:
    dcvIfPCMPhysTable.setStatus("mandatory")
_DcvIfPCMPhysEntry_Object = MibTableRow
dcvIfPCMPhysEntry = _DcvIfPCMPhysEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1, 1, 1)
)
dcvIfPCMPhysEntry.setIndexNames(
    (0, "PCE-MIB", "dcvIfPCMPhysIfId"),
)
if mibBuilder.loadTexts:
    dcvIfPCMPhysEntry.setStatus("mandatory")


class _DcvIfPCMPhysIfId_Type(Integer32):
    """Custom type dcvIfPCMPhysIfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 2),
          ("pcm1", 1))
    )


_DcvIfPCMPhysIfId_Type.__name__ = "Integer32"
_DcvIfPCMPhysIfId_Object = MibTableColumn
dcvIfPCMPhysIfId = _DcvIfPCMPhysIfId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1, 1, 1, 1),
    _DcvIfPCMPhysIfId_Type()
)
dcvIfPCMPhysIfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvIfPCMPhysIfId.setStatus("mandatory")


class _DcvIfPCMPhysTypeId_Type(Integer32):
    """Custom type dcvIfPCMPhysTypeId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("e1", 1),
          ("t1-12", 2),
          ("t1-24", 3))
    )


_DcvIfPCMPhysTypeId_Type.__name__ = "Integer32"
_DcvIfPCMPhysTypeId_Object = MibTableColumn
dcvIfPCMPhysTypeId = _DcvIfPCMPhysTypeId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1, 1, 1, 2),
    _DcvIfPCMPhysTypeId_Type()
)
dcvIfPCMPhysTypeId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvIfPCMPhysTypeId.setStatus("mandatory")


class _DcvIfPCMPhysPhysicalPort_Type(Integer32):
    """Custom type dcvIfPCMPhysPhysicalPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("v1", 1),
          ("v2", 2))
    )


_DcvIfPCMPhysPhysicalPort_Type.__name__ = "Integer32"
_DcvIfPCMPhysPhysicalPort_Object = MibTableColumn
dcvIfPCMPhysPhysicalPort = _DcvIfPCMPhysPhysicalPort_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1, 1, 1, 3),
    _DcvIfPCMPhysPhysicalPort_Type()
)
dcvIfPCMPhysPhysicalPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvIfPCMPhysPhysicalPort.setStatus("mandatory")
_DcvIfPCMChannelTable_Object = MibTable
dcvIfPCMChannelTable = _DcvIfPCMChannelTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1, 2)
)
if mibBuilder.loadTexts:
    dcvIfPCMChannelTable.setStatus("mandatory")
_DcvIfPCMChannelEntry_Object = MibTableRow
dcvIfPCMChannelEntry = _DcvIfPCMChannelEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1, 2, 1)
)
dcvIfPCMChannelEntry.setIndexNames(
    (0, "PCE-MIB", "dcvIfPCMChannelIfId"),
)
if mibBuilder.loadTexts:
    dcvIfPCMChannelEntry.setStatus("mandatory")


class _DcvIfPCMChannelIfId_Type(Integer32):
    """Custom type dcvIfPCMChannelIfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 31),
    )


_DcvIfPCMChannelIfId_Type.__name__ = "Integer32"
_DcvIfPCMChannelIfId_Object = MibTableColumn
dcvIfPCMChannelIfId = _DcvIfPCMChannelIfId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1, 2, 1, 1),
    _DcvIfPCMChannelIfId_Type()
)
dcvIfPCMChannelIfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvIfPCMChannelIfId.setStatus("mandatory")


class _DcvIfPCMChannelStatus_Type(Integer32):
    """Custom type dcvIfPCMChannelStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_DcvIfPCMChannelStatus_Type.__name__ = "Integer32"
_DcvIfPCMChannelStatus_Object = MibTableColumn
dcvIfPCMChannelStatus = _DcvIfPCMChannelStatus_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1, 2, 1, 2),
    _DcvIfPCMChannelStatus_Type()
)
dcvIfPCMChannelStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvIfPCMChannelStatus.setStatus("mandatory")


class _DcvIfPCMChannelVoiceProfId_Type(Integer32):
    """Custom type dcvIfPCMChannelVoiceProfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9),
    )


_DcvIfPCMChannelVoiceProfId_Type.__name__ = "Integer32"
_DcvIfPCMChannelVoiceProfId_Object = MibTableColumn
dcvIfPCMChannelVoiceProfId = _DcvIfPCMChannelVoiceProfId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1, 2, 1, 3),
    _DcvIfPCMChannelVoiceProfId_Type()
)
dcvIfPCMChannelVoiceProfId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvIfPCMChannelVoiceProfId.setStatus("mandatory")


class _DcvIfPCMChannelPhysIf_Type(Integer32):
    """Custom type dcvIfPCMChannelPhysIf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 2),
          ("pcm1", 1))
    )


_DcvIfPCMChannelPhysIf_Type.__name__ = "Integer32"
_DcvIfPCMChannelPhysIf_Object = MibTableColumn
dcvIfPCMChannelPhysIf = _DcvIfPCMChannelPhysIf_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1, 2, 1, 4),
    _DcvIfPCMChannelPhysIf_Type()
)
dcvIfPCMChannelPhysIf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvIfPCMChannelPhysIf.setStatus("mandatory")
_DcvVoiceProfileTable_Object = MibTable
dcvVoiceProfileTable = _DcvVoiceProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5)
)
if mibBuilder.loadTexts:
    dcvVoiceProfileTable.setStatus("mandatory")
_DcvVoiceProfileEntry_Object = MibTableRow
dcvVoiceProfileEntry = _DcvVoiceProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1)
)
dcvVoiceProfileEntry.setIndexNames(
    (0, "PCE-MIB", "dcvVoiceProfId"),
)
if mibBuilder.loadTexts:
    dcvVoiceProfileEntry.setStatus("mandatory")


class _DcvVoiceProfId_Type(Integer32):
    """Custom type dcvVoiceProfId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9),
    )


_DcvVoiceProfId_Type.__name__ = "Integer32"
_DcvVoiceProfId_Object = MibTableColumn
dcvVoiceProfId = _DcvVoiceProfId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 1),
    _DcvVoiceProfId_Type()
)
dcvVoiceProfId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvVoiceProfId.setStatus("mandatory")


class _DcvVoiceProfTransmitLevel_Type(Integer32):
    """Custom type dcvVoiceProfTransmitLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 24),
    )


_DcvVoiceProfTransmitLevel_Type.__name__ = "Integer32"
_DcvVoiceProfTransmitLevel_Object = MibTableColumn
dcvVoiceProfTransmitLevel = _DcvVoiceProfTransmitLevel_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 2),
    _DcvVoiceProfTransmitLevel_Type()
)
dcvVoiceProfTransmitLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceProfTransmitLevel.setStatus("mandatory")


class _DcvVoiceProfReceiveLevel_Type(Integer32):
    """Custom type dcvVoiceProfReceiveLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_DcvVoiceProfReceiveLevel_Type.__name__ = "Integer32"
_DcvVoiceProfReceiveLevel_Object = MibTableColumn
dcvVoiceProfReceiveLevel = _DcvVoiceProfReceiveLevel_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 3),
    _DcvVoiceProfReceiveLevel_Type()
)
dcvVoiceProfReceiveLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceProfReceiveLevel.setStatus("mandatory")


class _DcvVoiceProfSilenceDetection_Type(Integer32):
    """Custom type dcvVoiceProfSilenceDetection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("cng", 3),
          ("no", 1),
          ("yes", 2))
    )


_DcvVoiceProfSilenceDetection_Type.__name__ = "Integer32"
_DcvVoiceProfSilenceDetection_Object = MibTableColumn
dcvVoiceProfSilenceDetection = _DcvVoiceProfSilenceDetection_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 4),
    _DcvVoiceProfSilenceDetection_Type()
)
dcvVoiceProfSilenceDetection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceProfSilenceDetection.setStatus("mandatory")


class _DcvVoiceProfSilenceDetectionLevel_Type(Integer32):
    """Custom type dcvVoiceProfSilenceDetectionLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("high", 3),
          ("low", 1),
          ("medium", 2))
    )


_DcvVoiceProfSilenceDetectionLevel_Type.__name__ = "Integer32"
_DcvVoiceProfSilenceDetectionLevel_Object = MibTableColumn
dcvVoiceProfSilenceDetectionLevel = _DcvVoiceProfSilenceDetectionLevel_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 5),
    _DcvVoiceProfSilenceDetectionLevel_Type()
)
dcvVoiceProfSilenceDetectionLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceProfSilenceDetectionLevel.setStatus("mandatory")


class _DcvVoiceProfEchoCancellation_Type(Integer32):
    """Custom type dcvVoiceProfEchoCancellation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_DcvVoiceProfEchoCancellation_Type.__name__ = "Integer32"
_DcvVoiceProfEchoCancellation_Object = MibTableColumn
dcvVoiceProfEchoCancellation = _DcvVoiceProfEchoCancellation_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 6),
    _DcvVoiceProfEchoCancellation_Type()
)
dcvVoiceProfEchoCancellation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceProfEchoCancellation.setStatus("mandatory")


class _DcvVoiceProfEchoCancellationLength_Type(Integer32):
    """Custom type dcvVoiceProfEchoCancellationLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("high", 3),
          ("low", 1),
          ("medium", 2))
    )


_DcvVoiceProfEchoCancellationLength_Type.__name__ = "Integer32"
_DcvVoiceProfEchoCancellationLength_Object = MibTableColumn
dcvVoiceProfEchoCancellationLength = _DcvVoiceProfEchoCancellationLength_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 7),
    _DcvVoiceProfEchoCancellationLength_Type()
)
dcvVoiceProfEchoCancellationLength.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceProfEchoCancellationLength.setStatus("mandatory")


class _DcvVoiceProfNoiseFramesPeriodicity_Type(Integer32):
    """Custom type dcvVoiceProfNoiseFramesPeriodicity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 10),
    )


_DcvVoiceProfNoiseFramesPeriodicity_Type.__name__ = "Integer32"
_DcvVoiceProfNoiseFramesPeriodicity_Object = MibTableColumn
dcvVoiceProfNoiseFramesPeriodicity = _DcvVoiceProfNoiseFramesPeriodicity_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 8),
    _DcvVoiceProfNoiseFramesPeriodicity_Type()
)
dcvVoiceProfNoiseFramesPeriodicity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceProfNoiseFramesPeriodicity.setStatus("mandatory")


class _DcvVoiceProfLoopActivation_Type(Integer32):
    """Custom type dcvVoiceProfLoopActivation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("local", 2),
          ("no", 1),
          ("remote", 3))
    )


_DcvVoiceProfLoopActivation_Type.__name__ = "Integer32"
_DcvVoiceProfLoopActivation_Object = MibTableColumn
dcvVoiceProfLoopActivation = _DcvVoiceProfLoopActivation_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 9),
    _DcvVoiceProfLoopActivation_Type()
)
dcvVoiceProfLoopActivation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceProfLoopActivation.setStatus("mandatory")


class _DcvVoiceProfFaxActivation_Type(Integer32):
    """Custom type dcvVoiceProfFaxActivation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_DcvVoiceProfFaxActivation_Type.__name__ = "Integer32"
_DcvVoiceProfFaxActivation_Object = MibTableColumn
dcvVoiceProfFaxActivation = _DcvVoiceProfFaxActivation_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 10),
    _DcvVoiceProfFaxActivation_Type()
)
dcvVoiceProfFaxActivation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceProfFaxActivation.setStatus("mandatory")


class _DcvVoiceProfMaximumFaxSpeed_Type(Integer32):
    """Custom type dcvVoiceProfMaximumFaxSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("s4800", 2),
          ("s9600", 1))
    )


_DcvVoiceProfMaximumFaxSpeed_Type.__name__ = "Integer32"
_DcvVoiceProfMaximumFaxSpeed_Object = MibTableColumn
dcvVoiceProfMaximumFaxSpeed = _DcvVoiceProfMaximumFaxSpeed_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 11),
    _DcvVoiceProfMaximumFaxSpeed_Type()
)
dcvVoiceProfMaximumFaxSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceProfMaximumFaxSpeed.setStatus("mandatory")


class _DcvVoiceProfCESMode_Type(Integer32):
    """Custom type dcvVoiceProfCESMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_DcvVoiceProfCESMode_Type.__name__ = "Integer32"
_DcvVoiceProfCESMode_Object = MibTableColumn
dcvVoiceProfCESMode = _DcvVoiceProfCESMode_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 12),
    _DcvVoiceProfCESMode_Type()
)
dcvVoiceProfCESMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceProfCESMode.setStatus("mandatory")


class _DcvVoiceProfCESModeAverageDelay_Type(Integer32):
    """Custom type dcvVoiceProfCESModeAverageDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 15),
    )


_DcvVoiceProfCESModeAverageDelay_Type.__name__ = "Integer32"
_DcvVoiceProfCESModeAverageDelay_Object = MibTableColumn
dcvVoiceProfCESModeAverageDelay = _DcvVoiceProfCESModeAverageDelay_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 13),
    _DcvVoiceProfCESModeAverageDelay_Type()
)
dcvVoiceProfCESModeAverageDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dcvVoiceProfCESModeAverageDelay.setStatus("mandatory")
_DcvVoicePhysicalPortTable_Object = MibTable
dcvVoicePhysicalPortTable = _DcvVoicePhysicalPortTable_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 10)
)
if mibBuilder.loadTexts:
    dcvVoicePhysicalPortTable.setStatus("mandatory")
_DcvVoicePhysicalPortEntry_Object = MibTableRow
dcvVoicePhysicalPortEntry = _DcvVoicePhysicalPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 10, 1)
)
dcvVoicePhysicalPortEntry.setIndexNames(
    (0, "PCE-MIB", "dcvVoicePhysPortId"),
)
if mibBuilder.loadTexts:
    dcvVoicePhysicalPortEntry.setStatus("mandatory")


class _DcvVoicePhysPortId_Type(Integer32):
    """Custom type dcvVoicePhysPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("v1", 1),
          ("v2", 2))
    )


_DcvVoicePhysPortId_Type.__name__ = "Integer32"
_DcvVoicePhysPortId_Object = MibTableColumn
dcvVoicePhysPortId = _DcvVoicePhysPortId_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 10, 1, 1),
    _DcvVoicePhysPortId_Type()
)
dcvVoicePhysPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvVoicePhysPortId.setStatus("mandatory")


class _DcvVoicePhysPortConnector_Type(Integer32):
    """Custom type dcvVoicePhysPortConnector based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 2),
          ("tdm", 1))
    )


_DcvVoicePhysPortConnector_Type.__name__ = "Integer32"
_DcvVoicePhysPortConnector_Object = MibTableColumn
dcvVoicePhysPortConnector = _DcvVoicePhysPortConnector_Object(
    (1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 10, 1, 2),
    _DcvVoicePhysPortConnector_Type()
)
dcvVoicePhysPortConnector.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dcvVoicePhysPortConnector.setStatus("mandatory")
_MmxSoftware_ObjectIdentity = ObjectIdentity
mmxSoftware = _MmxSoftware_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 40)
)
_CompacProxySoftware_ObjectIdentity = ObjectIdentity
compacProxySoftware = _CompacProxySoftware_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 51)
)
_CpcManagement_ObjectIdentity = ObjectIdentity
cpcManagement = _CpcManagement_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 51, 10)
)
_CmEvents_ObjectIdentity = ObjectIdentity
cmEvents = _CmEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 51, 10, 5)
)


class _CmeEventSynchronize_Type(Integer32):
    """Custom type cmeEventSynchronize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("local", 2),
          ("node", 1))
    )


_CmeEventSynchronize_Type.__name__ = "Integer32"
_CmeEventSynchronize_Object = MibScalar
cmeEventSynchronize = _CmeEventSynchronize_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 10, 5, 4),
    _CmeEventSynchronize_Type()
)
cmeEventSynchronize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cmeEventSynchronize.setStatus("mandatory")
_CmeClearVirtualCircuitInfo_ObjectIdentity = ObjectIdentity
cmeClearVirtualCircuitInfo = _CmeClearVirtualCircuitInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 51, 10, 5, 5)
)


class _CmeClearX121Address_Type(DisplayString):
    """Custom type cmeClearX121Address based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_CmeClearX121Address_Type.__name__ = "DisplayString"
_CmeClearX121Address_Object = MibScalar
cmeClearX121Address = _CmeClearX121Address_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 10, 5, 5, 1),
    _CmeClearX121Address_Type()
)
cmeClearX121Address.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeClearX121Address.setStatus("mandatory")


class _CmeClearCallUserData_Type(DisplayString):
    """Custom type cmeClearCallUserData based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_CmeClearCallUserData_Type.__name__ = "DisplayString"
_CmeClearCallUserData_Object = MibScalar
cmeClearCallUserData = _CmeClearCallUserData_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 10, 5, 5, 2),
    _CmeClearCallUserData_Type()
)
cmeClearCallUserData.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeClearCallUserData.setStatus("mandatory")


class _CmeClearEvent_Type(Integer32):
    """Custom type cmeClearEvent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("timeout", 1),
          ("x25ClearReceived", 2))
    )


_CmeClearEvent_Type.__name__ = "Integer32"
_CmeClearEvent_Object = MibScalar
cmeClearEvent = _CmeClearEvent_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 10, 5, 5, 3),
    _CmeClearEvent_Type()
)
cmeClearEvent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeClearEvent.setStatus("mandatory")


class _CmeClearCause_Type(Integer32):
    """Custom type cmeClearCause based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_CmeClearCause_Type.__name__ = "Integer32"
_CmeClearCause_Object = MibScalar
cmeClearCause = _CmeClearCause_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 10, 5, 5, 4),
    _CmeClearCause_Type()
)
cmeClearCause.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeClearCause.setStatus("mandatory")


class _CmeClearDiag_Type(Integer32):
    """Custom type cmeClearDiag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_CmeClearDiag_Type.__name__ = "Integer32"
_CmeClearDiag_Object = MibScalar
cmeClearDiag = _CmeClearDiag_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 10, 5, 5, 5),
    _CmeClearDiag_Type()
)
cmeClearDiag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeClearDiag.setStatus("mandatory")
_CmeClearTimeStamp_Type = TimeTicks
_CmeClearTimeStamp_Object = MibScalar
cmeClearTimeStamp = _CmeClearTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 10, 5, 5, 6),
    _CmeClearTimeStamp_Type()
)
cmeClearTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmeClearTimeStamp.setStatus("mandatory")
_CpcDiagnostic_ObjectIdentity = ObjectIdentity
cpcDiagnostic = _CpcDiagnostic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 51, 20)
)
_CdPhysicalPorts_ObjectIdentity = ObjectIdentity
cdPhysicalPorts = _CdPhysicalPorts_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 51, 20, 10)
)
_CdpIdentification_ObjectIdentity = ObjectIdentity
cdpIdentification = _CdpIdentification_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 51, 20, 10, 1)
)


class _CdpIdentPhysPortType_Type(Integer32):
    """Custom type cdpIdentPhysPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("asynchronous", 3),
          ("other", 1),
          ("synchronous", 2))
    )


_CdpIdentPhysPortType_Type.__name__ = "Integer32"
_CdpIdentPhysPortType_Object = MibScalar
cdpIdentPhysPortType = _CdpIdentPhysPortType_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 20, 10, 1, 2),
    _CdpIdentPhysPortType_Type()
)
cdpIdentPhysPortType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cdpIdentPhysPortType.setStatus("mandatory")
_CpcFileTransfer_ObjectIdentity = ObjectIdentity
cpcFileTransfer = _CpcFileTransfer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 866, 51, 30)
)


class _CfFileTransferService_Type(Integer32):
    """Custom type cfFileTransferService based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("configurationDownloading", 2),
          ("configurationUploading", 4),
          ("equipmentHalt", 6),
          ("equipmentReset", 5),
          ("hardwareIdentification", 7),
          ("offLineSoftwareDownloading", 3),
          ("onLineSoftwareDownloading", 9),
          ("onLineSoftwareDownloadingAndReset", 10),
          ("softwareIdentification", 1),
          ("softwareList", 8))
    )


_CfFileTransferService_Type.__name__ = "Integer32"
_CfFileTransferService_Object = MibScalar
cfFileTransferService = _CfFileTransferService_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 1),
    _CfFileTransferService_Type()
)
cfFileTransferService.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cfFileTransferService.setStatus("mandatory")


class _CfConfigurationFileToDownload_Type(DisplayString):
    """Custom type cfConfigurationFileToDownload based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_CfConfigurationFileToDownload_Type.__name__ = "DisplayString"
_CfConfigurationFileToDownload_Object = MibScalar
cfConfigurationFileToDownload = _CfConfigurationFileToDownload_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 2),
    _CfConfigurationFileToDownload_Type()
)
cfConfigurationFileToDownload.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cfConfigurationFileToDownload.setStatus("mandatory")


class _CfConfigurationFileToUpload_Type(DisplayString):
    """Custom type cfConfigurationFileToUpload based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_CfConfigurationFileToUpload_Type.__name__ = "DisplayString"
_CfConfigurationFileToUpload_Object = MibScalar
cfConfigurationFileToUpload = _CfConfigurationFileToUpload_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 3),
    _CfConfigurationFileToUpload_Type()
)
cfConfigurationFileToUpload.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cfConfigurationFileToUpload.setStatus("mandatory")


class _CfSoftwareFileToDownload_Type(DisplayString):
    """Custom type cfSoftwareFileToDownload based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_CfSoftwareFileToDownload_Type.__name__ = "DisplayString"
_CfSoftwareFileToDownload_Object = MibScalar
cfSoftwareFileToDownload = _CfSoftwareFileToDownload_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 4),
    _CfSoftwareFileToDownload_Type()
)
cfSoftwareFileToDownload.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cfSoftwareFileToDownload.setStatus("mandatory")


class _CfStartUpChoiceAfterReset_Type(Integer32):
    """Custom type cfStartUpChoiceAfterReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("withCopyOfDefaultToOperational", 2),
          ("withDefaultConfiguration", 1),
          ("withOperationalConfiguration", 3))
    )


_CfStartUpChoiceAfterReset_Type.__name__ = "Integer32"
_CfStartUpChoiceAfterReset_Object = MibScalar
cfStartUpChoiceAfterReset = _CfStartUpChoiceAfterReset_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 5),
    _CfStartUpChoiceAfterReset_Type()
)
cfStartUpChoiceAfterReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cfStartUpChoiceAfterReset.setStatus("mandatory")


class _CfModuleToIdentify_Type(Integer32):
    """Custom type cfModuleToIdentify based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("calledModule", 4),
          ("module0", 1),
          ("module1", 2),
          ("module2", 3))
    )


_CfModuleToIdentify_Type.__name__ = "Integer32"
_CfModuleToIdentify_Object = MibScalar
cfModuleToIdentify = _CfModuleToIdentify_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 6),
    _CfModuleToIdentify_Type()
)
cfModuleToIdentify.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cfModuleToIdentify.setStatus("mandatory")


class _CfZoneToIdentify_Type(Integer32):
    """Custom type cfZoneToIdentify based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("customerZone", 2),
          ("manufacturerZone", 1))
    )


_CfZoneToIdentify_Type.__name__ = "Integer32"
_CfZoneToIdentify_Object = MibScalar
cfZoneToIdentify = _CfZoneToIdentify_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 7),
    _CfZoneToIdentify_Type()
)
cfZoneToIdentify.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cfZoneToIdentify.setStatus("mandatory")


class _CfHardwareIdentificationPassword_Type(DisplayString):
    """Custom type cfHardwareIdentificationPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_CfHardwareIdentificationPassword_Type.__name__ = "DisplayString"
_CfHardwareIdentificationPassword_Object = MibScalar
cfHardwareIdentificationPassword = _CfHardwareIdentificationPassword_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 8),
    _CfHardwareIdentificationPassword_Type()
)
cfHardwareIdentificationPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cfHardwareIdentificationPassword.setStatus("mandatory")


class _CfSoftwareListPassword_Type(DisplayString):
    """Custom type cfSoftwareListPassword based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_CfSoftwareListPassword_Type.__name__ = "DisplayString"
_CfSoftwareListPassword_Object = MibScalar
cfSoftwareListPassword = _CfSoftwareListPassword_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 9),
    _CfSoftwareListPassword_Type()
)
cfSoftwareListPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cfSoftwareListPassword.setStatus("mandatory")


class _CfServiceReport_Type(Integer32):
    """Custom type cfServiceReport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("abnormalEndOfService", 2),
          ("normalEndOfService", 1),
          ("sessionCleared", 4),
          ("sessionOpened", 3))
    )


_CfServiceReport_Type.__name__ = "Integer32"
_CfServiceReport_Object = MibScalar
cfServiceReport = _CfServiceReport_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 10),
    _CfServiceReport_Type()
)
cfServiceReport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfServiceReport.setStatus("mandatory")


class _CfVersion_Type(DisplayString):
    """Custom type cfVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_CfVersion_Type.__name__ = "DisplayString"
_CfVersion_Object = MibScalar
cfVersion = _CfVersion_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 11),
    _CfVersion_Type()
)
cfVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfVersion.setStatus("mandatory")


class _CfRevision_Type(DisplayString):
    """Custom type cfRevision based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_CfRevision_Type.__name__ = "DisplayString"
_CfRevision_Object = MibScalar
cfRevision = _CfRevision_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 12),
    _CfRevision_Type()
)
cfRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfRevision.setStatus("mandatory")


class _CfEdition_Type(DisplayString):
    """Custom type cfEdition based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_CfEdition_Type.__name__ = "DisplayString"
_CfEdition_Object = MibScalar
cfEdition = _CfEdition_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 13),
    _CfEdition_Type()
)
cfEdition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfEdition.setStatus("mandatory")


class _CfCpuBoardType_Type(DisplayString):
    """Custom type cfCpuBoardType based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_CfCpuBoardType_Type.__name__ = "DisplayString"
_CfCpuBoardType_Object = MibScalar
cfCpuBoardType = _CfCpuBoardType_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 14),
    _CfCpuBoardType_Type()
)
cfCpuBoardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfCpuBoardType.setStatus("mandatory")


class _CfProductType_Type(DisplayString):
    """Custom type cfProductType based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_CfProductType_Type.__name__ = "DisplayString"
_CfProductType_Object = MibScalar
cfProductType = _CfProductType_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 15),
    _CfProductType_Type()
)
cfProductType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfProductType.setStatus("mandatory")


class _CfConfigurationVersion_Type(DisplayString):
    """Custom type cfConfigurationVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_CfConfigurationVersion_Type.__name__ = "DisplayString"
_CfConfigurationVersion_Object = MibScalar
cfConfigurationVersion = _CfConfigurationVersion_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 16),
    _CfConfigurationVersion_Type()
)
cfConfigurationVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfConfigurationVersion.setStatus("mandatory")


class _CfConfigurationRelease_Type(DisplayString):
    """Custom type cfConfigurationRelease based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_CfConfigurationRelease_Type.__name__ = "DisplayString"
_CfConfigurationRelease_Object = MibScalar
cfConfigurationRelease = _CfConfigurationRelease_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 17),
    _CfConfigurationRelease_Type()
)
cfConfigurationRelease.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfConfigurationRelease.setStatus("mandatory")


class _CfConfigurationEdition_Type(DisplayString):
    """Custom type cfConfigurationEdition based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_CfConfigurationEdition_Type.__name__ = "DisplayString"
_CfConfigurationEdition_Object = MibScalar
cfConfigurationEdition = _CfConfigurationEdition_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 18),
    _CfConfigurationEdition_Type()
)
cfConfigurationEdition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfConfigurationEdition.setStatus("mandatory")


class _CfConfigurationDate_Type(DisplayString):
    """Custom type cfConfigurationDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_CfConfigurationDate_Type.__name__ = "DisplayString"
_CfConfigurationDate_Object = MibScalar
cfConfigurationDate = _CfConfigurationDate_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 19),
    _CfConfigurationDate_Type()
)
cfConfigurationDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfConfigurationDate.setStatus("mandatory")


class _CfUserField_Type(DisplayString):
    """Custom type cfUserField based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_CfUserField_Type.__name__ = "DisplayString"
_CfUserField_Object = MibScalar
cfUserField = _CfUserField_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 20),
    _CfUserField_Type()
)
cfUserField.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfUserField.setStatus("mandatory")


class _Cf12NcNumber35_Type(DisplayString):
    """Custom type cf12NcNumber35 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 13),
    )


_Cf12NcNumber35_Type.__name__ = "DisplayString"
_Cf12NcNumber35_Object = MibScalar
cf12NcNumber35 = _Cf12NcNumber35_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 21),
    _Cf12NcNumber35_Type()
)
cf12NcNumber35.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cf12NcNumber35.setStatus("mandatory")


class _Cf12NcNumber75_Type(DisplayString):
    """Custom type cf12NcNumber75 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 13),
    )


_Cf12NcNumber75_Type.__name__ = "DisplayString"
_Cf12NcNumber75_Object = MibScalar
cf12NcNumber75 = _Cf12NcNumber75_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 22),
    _Cf12NcNumber75_Type()
)
cf12NcNumber75.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cf12NcNumber75.setStatus("mandatory")


class _CfField1_Type(DisplayString):
    """Custom type cfField1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 9),
    )


_CfField1_Type.__name__ = "DisplayString"
_CfField1_Object = MibScalar
cfField1 = _CfField1_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 23),
    _CfField1_Type()
)
cfField1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfField1.setStatus("mandatory")


class _CfField2_Type(DisplayString):
    """Custom type cfField2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 9),
    )


_CfField2_Type.__name__ = "DisplayString"
_CfField2_Object = MibScalar
cfField2 = _CfField2_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 24),
    _CfField2_Type()
)
cfField2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfField2.setStatus("mandatory")


class _CfField3_Type(DisplayString):
    """Custom type cfField3 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 9),
    )


_CfField3_Type.__name__ = "DisplayString"
_CfField3_Object = MibScalar
cfField3 = _CfField3_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 25),
    _CfField3_Type()
)
cfField3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfField3.setStatus("mandatory")


class _CfField4_Type(DisplayString):
    """Custom type cfField4 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 9),
    )


_CfField4_Type.__name__ = "DisplayString"
_CfField4_Object = MibScalar
cfField4 = _CfField4_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 26),
    _CfField4_Type()
)
cfField4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfField4.setStatus("mandatory")


class _CfFlashSize_Type(DisplayString):
    """Custom type cfFlashSize based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_CfFlashSize_Type.__name__ = "DisplayString"
_CfFlashSize_Object = MibScalar
cfFlashSize = _CfFlashSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 27),
    _CfFlashSize_Type()
)
cfFlashSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfFlashSize.setStatus("mandatory")


class _CfRamSize_Type(DisplayString):
    """Custom type cfRamSize based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_CfRamSize_Type.__name__ = "DisplayString"
_CfRamSize_Object = MibScalar
cfRamSize = _CfRamSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 28),
    _CfRamSize_Type()
)
cfRamSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfRamSize.setStatus("mandatory")


class _CfEepromSize_Type(DisplayString):
    """Custom type cfEepromSize based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_CfEepromSize_Type.__name__ = "DisplayString"
_CfEepromSize_Object = MibScalar
cfEepromSize = _CfEepromSize_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 29),
    _CfEepromSize_Type()
)
cfEepromSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfEepromSize.setStatus("mandatory")


class _CfNumberOfLines_Type(DisplayString):
    """Custom type cfNumberOfLines based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_CfNumberOfLines_Type.__name__ = "DisplayString"
_CfNumberOfLines_Object = MibScalar
cfNumberOfLines = _CfNumberOfLines_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 30),
    _CfNumberOfLines_Type()
)
cfNumberOfLines.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfNumberOfLines.setStatus("mandatory")


class _CfTransputerPresence_Type(OctetString):
    """Custom type cfTransputerPresence based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_CfTransputerPresence_Type.__name__ = "OctetString"
_CfTransputerPresence_Object = MibScalar
cfTransputerPresence = _CfTransputerPresence_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 31),
    _CfTransputerPresence_Type()
)
cfTransputerPresence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfTransputerPresence.setStatus("mandatory")


class _CfMpbBoardReference255_Type(DisplayString):
    """Custom type cfMpbBoardReference255 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_CfMpbBoardReference255_Type.__name__ = "DisplayString"
_CfMpbBoardReference255_Object = MibScalar
cfMpbBoardReference255 = _CfMpbBoardReference255_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 32),
    _CfMpbBoardReference255_Type()
)
cfMpbBoardReference255.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfMpbBoardReference255.setStatus("mandatory")


class _CfMpbBoardSerialNumber_Type(DisplayString):
    """Custom type cfMpbBoardSerialNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_CfMpbBoardSerialNumber_Type.__name__ = "DisplayString"
_CfMpbBoardSerialNumber_Object = MibScalar
cfMpbBoardSerialNumber = _CfMpbBoardSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 33),
    _CfMpbBoardSerialNumber_Type()
)
cfMpbBoardSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfMpbBoardSerialNumber.setStatus("mandatory")


class _CfMtbBoardReference255_Type(DisplayString):
    """Custom type cfMtbBoardReference255 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_CfMtbBoardReference255_Type.__name__ = "DisplayString"
_CfMtbBoardReference255_Object = MibScalar
cfMtbBoardReference255 = _CfMtbBoardReference255_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 34),
    _CfMtbBoardReference255_Type()
)
cfMtbBoardReference255.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfMtbBoardReference255.setStatus("mandatory")


class _CfMtbBoardSerialNumber_Type(DisplayString):
    """Custom type cfMtbBoardSerialNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_CfMtbBoardSerialNumber_Type.__name__ = "DisplayString"
_CfMtbBoardSerialNumber_Object = MibScalar
cfMtbBoardSerialNumber = _CfMtbBoardSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 35),
    _CfMtbBoardSerialNumber_Type()
)
cfMtbBoardSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfMtbBoardSerialNumber.setStatus("mandatory")


class _CfReleaseDate_Type(DisplayString):
    """Custom type cfReleaseDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_CfReleaseDate_Type.__name__ = "DisplayString"
_CfReleaseDate_Object = MibScalar
cfReleaseDate = _CfReleaseDate_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 36),
    _CfReleaseDate_Type()
)
cfReleaseDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfReleaseDate.setStatus("mandatory")


class _CfFactoryReturnDate1_Type(DisplayString):
    """Custom type cfFactoryReturnDate1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_CfFactoryReturnDate1_Type.__name__ = "DisplayString"
_CfFactoryReturnDate1_Object = MibScalar
cfFactoryReturnDate1 = _CfFactoryReturnDate1_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 37),
    _CfFactoryReturnDate1_Type()
)
cfFactoryReturnDate1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfFactoryReturnDate1.setStatus("mandatory")


class _CfFactoryReturnDate2_Type(DisplayString):
    """Custom type cfFactoryReturnDate2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_CfFactoryReturnDate2_Type.__name__ = "DisplayString"
_CfFactoryReturnDate2_Object = MibScalar
cfFactoryReturnDate2 = _CfFactoryReturnDate2_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 38),
    _CfFactoryReturnDate2_Type()
)
cfFactoryReturnDate2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfFactoryReturnDate2.setStatus("mandatory")


class _CfFactoryReturnDate3_Type(DisplayString):
    """Custom type cfFactoryReturnDate3 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_CfFactoryReturnDate3_Type.__name__ = "DisplayString"
_CfFactoryReturnDate3_Object = MibScalar
cfFactoryReturnDate3 = _CfFactoryReturnDate3_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 39),
    _CfFactoryReturnDate3_Type()
)
cfFactoryReturnDate3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfFactoryReturnDate3.setStatus("mandatory")


class _CfFactoryReturnDate4_Type(DisplayString):
    """Custom type cfFactoryReturnDate4 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_CfFactoryReturnDate4_Type.__name__ = "DisplayString"
_CfFactoryReturnDate4_Object = MibScalar
cfFactoryReturnDate4 = _CfFactoryReturnDate4_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 40),
    _CfFactoryReturnDate4_Type()
)
cfFactoryReturnDate4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfFactoryReturnDate4.setStatus("mandatory")


class _CfFactoryReturnDate5_Type(DisplayString):
    """Custom type cfFactoryReturnDate5 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_CfFactoryReturnDate5_Type.__name__ = "DisplayString"
_CfFactoryReturnDate5_Object = MibScalar
cfFactoryReturnDate5 = _CfFactoryReturnDate5_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 41),
    _CfFactoryReturnDate5_Type()
)
cfFactoryReturnDate5.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfFactoryReturnDate5.setStatus("mandatory")


class _CfSoftwareList_Type(DisplayString):
    """Custom type cfSoftwareList based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 2048),
    )


_CfSoftwareList_Type.__name__ = "DisplayString"
_CfSoftwareList_Object = MibScalar
cfSoftwareList = _CfSoftwareList_Object(
    (1, 3, 6, 1, 4, 1, 866, 51, 30, 42),
    _CfSoftwareList_Type()
)
cfSoftwareList.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cfSoftwareList.setStatus("mandatory")

# Managed Objects groups


# Notification objects

nodeStatusChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 866, 0, 0)
)
nodeStatusChanged.setObjects(
      *(("PCE-MIB", "nodeName"),
        ("PCE-MIB", "nodeStatus"),
        ("PCE-MIB", "changeDescription"))
)
if mibBuilder.loadTexts:
    nodeStatusChanged.setStatus(
        ""
    )

lineStatusChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 866, 0, 1)
)
lineStatusChanged.setObjects(
      *(("PCE-MIB", "nodeName"),
        ("PCE-MIB", "portNumber"),
        ("PCE-MIB", "portLabel"),
        ("PCE-MIB", "portStatus"),
        ("PCE-MIB", "changeDescription"))
)
if mibBuilder.loadTexts:
    lineStatusChanged.setStatus(
        ""
    )

frxStateChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 866, 0, 5)
)
frxStateChange.setObjects(
      *(("PCE-MIB", "fmeTrapLineId"),
        ("PCE-MIB", "fmeTrapFamilyId"),
        ("PCE-MIB", "fmeTrapEventType"),
        ("PCE-MIB", "fmeTrapEventData"))
)
if mibBuilder.loadTexts:
    frxStateChange.setStatus(
        ""
    )

frxNodeStateChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 866, 0, 6)
)
frxNodeStateChange.setObjects(
      *(("PCE-MIB", "fmeTrapLineId"),
        ("PCE-MIB", "fmeTrapFamilyId"),
        ("PCE-MIB", "fmeTrapEventType"),
        ("PCE-MIB", "fmeTrapEventData"))
)
if mibBuilder.loadTexts:
    frxNodeStateChange.setStatus(
        ""
    )

frxLineStateChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 866, 0, 7)
)
frxLineStateChange.setObjects(
      *(("PCE-MIB", "fmeTrapLineId"),
        ("PCE-MIB", "fmeTrapFamilyId"),
        ("PCE-MIB", "fmeTrapEventType"),
        ("PCE-MIB", "fmeTrapEventData"))
)
if mibBuilder.loadTexts:
    frxLineStateChange.setStatus(
        ""
    )

frxLoadAndTrafficEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 866, 0, 8)
)
frxLoadAndTrafficEvent.setObjects(
      *(("PCE-MIB", "fmeTrapLineId"),
        ("PCE-MIB", "fmeTrapFamilyId"),
        ("PCE-MIB", "fmeTrapEventType"),
        ("PCE-MIB", "fmeTrapEventData"))
)
if mibBuilder.loadTexts:
    frxLoadAndTrafficEvent.setStatus(
        ""
    )

frxManagementEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 866, 0, 9)
)
frxManagementEvent.setObjects(
      *(("PCE-MIB", "fmeTrapLineId"),
        ("PCE-MIB", "fmeTrapFamilyId"),
        ("PCE-MIB", "fmeTrapEventType"),
        ("PCE-MIB", "fmeTrapEventData"))
)
if mibBuilder.loadTexts:
    frxManagementEvent.setStatus(
        ""
    )

frxServicesStateChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 866, 0, 10)
)
frxServicesStateChange.setObjects(
      *(("PCE-MIB", "fmeTrapLineId"),
        ("PCE-MIB", "fmeTrapFamilyId"),
        ("PCE-MIB", "fmeTrapEventType"),
        ("PCE-MIB", "fmeTrapEventData"))
)
if mibBuilder.loadTexts:
    frxServicesStateChange.setStatus(
        ""
    )

cpcClearVirtualCircuitEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 866, 0, 100)
)
cpcClearVirtualCircuitEvent.setObjects(
      *(("PCE-MIB", "cmeClearX121Address"),
        ("PCE-MIB", "cmeClearCallUserData"),
        ("PCE-MIB", "cmeClearEvent"),
        ("PCE-MIB", "cmeClearCause"),
        ("PCE-MIB", "cmeClearDiag"))
)
if mibBuilder.loadTexts:
    cpcClearVirtualCircuitEvent.setStatus(
        ""
    )


# Notifications groups


# Agent capabilities


# Module compliance


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "PCE-MIB",
    **{"pce": pce,
       "nodeStatusChanged": nodeStatusChanged,
       "lineStatusChanged": lineStatusChanged,
       "frxStateChange": frxStateChange,
       "frxNodeStateChange": frxNodeStateChange,
       "frxLineStateChange": frxLineStateChange,
       "frxLoadAndTrafficEvent": frxLoadAndTrafficEvent,
       "frxManagementEvent": frxManagementEvent,
       "frxServicesStateChange": frxServicesStateChange,
       "cpcClearVirtualCircuitEvent": cpcClearVirtualCircuitEvent,
       "products": products,
       "compacV9toV11": compacV9toV11,
       "transProduct": transProduct,
       "netAccessProduct": netAccessProduct,
       "adaptis": adaptis,
       "vpx10": vpx10,
       "vpx20": vpx20,
       "mcx103": mcx103,
       "mcx104": mcx104,
       "atLan": atLan,
       "mcx300": mcx300,
       "frx300": frx300,
       "vcx100": vcx100,
       "avb1002-EM": avb1002_EM,
       "avb1002-FXS-FXO": avb1002_FXS_FXO,
       "sc103-3W": sc103_3W,
       "sc103-6W": sc103_6W,
       "sc103-6W-M": sc103_6W_M,
       "sc104": sc104,
       "sc106": sc106,
       "sc112": sc112,
       "sc300-1W-1E": sc300_1W_1E,
       "sc300-3W-1E": sc300_3W_1E,
       "sc300-4W": sc300_4W,
       "sc310-8W": sc310_8W,
       "sc310-12W": sc310_12W,
       "sc320-4W-1TR": sc320_4W_1TR,
       "sc320-8W-1TR": sc320_8W_1TR,
       "sc330": sc330,
       "sc1200": sc1200,
       "netConcentratorProduct": netConcentratorProduct,
       "mcx09": mcx09,
       "mcx109": mcx109,
       "mcx106": mcx106,
       "mcx112": mcx112,
       "mcx212": mcx212,
       "mcx212Y": mcx212Y,
       "mcx512": mcx512,
       "mcx512Y": mcx512Y,
       "lmx506": lmx506,
       "frx800": frx800,
       "sc512": sc512,
       "sc512Y": sc512Y,
       "hpb1025-8W": hpb1025_8W,
       "hpb1025-12W": hpb1025_12W,
       "spb1033": spb1033,
       "dvb1008": dvb1008,
       "netBackboneProduct": netBackboneProduct,
       "npx09": npx09,
       "npx90": npx90,
       "frx1000": frx1000,
       "frx2000": frx2000,
       "frx2000Y": frx2000Y,
       "mmx5000": mmx5000,
       "mmx10000": mmx10000,
       "sc5000": sc5000,
       "netCentralSiteProduct": netCentralSiteProduct,
       "fpb2025": fpb2025,
       "rpb2025": rpb2025,
       "spb2033": spb2033,
       "dvb2030": dvb2030,
       "manager": manager,
       "nodeName": nodeName,
       "nodeStatus": nodeStatus,
       "portLabel": portLabel,
       "portNumber": portNumber,
       "portStatus": portStatus,
       "changeDescription": changeDescription,
       "systemDescription": systemDescription,
       "projects": projects,
       "frxSoftware": frxSoftware,
       "frxConfig": frxConfig,
       "fcControl": fcControl,
       "fcCtlConfigurationState": fcCtlConfigurationState,
       "fcCtlStateCheckingResults": fcCtlStateCheckingResults,
       "fcCtlConfigurationCommand": fcCtlConfigurationCommand,
       "fcCtlBootDevice": fcCtlBootDevice,
       "fcCtlStorageDevice": fcCtlStorageDevice,
       "fcCtlAlteredLpTable": fcCtlAlteredLpTable,
       "fcCtlAlteredLpEntry": fcCtlAlteredLpEntry,
       "fcCtlAlteredLpId": fcCtlAlteredLpId,
       "fcCtlAlteredDlciTable": fcCtlAlteredDlciTable,
       "fcCtlAlteredDlciEntry": fcCtlAlteredDlciEntry,
       "fcCtlAlteredDlciPpId": fcCtlAlteredDlciPpId,
       "fcCtlAlteredDlciNum": fcCtlAlteredDlciNum,
       "fcCtlAlteredDlciState": fcCtlAlteredDlciState,
       "fcCtlAlteredIfTable": fcCtlAlteredIfTable,
       "fcCtlAlteredIfEntry": fcCtlAlteredIfEntry,
       "fcCtlAlteredIfId": fcCtlAlteredIfId,
       "fcCtlErrorTable": fcCtlErrorTable,
       "fcCtlErrorEntry": fcCtlErrorEntry,
       "fcCtlErrorIndex": fcCtlErrorIndex,
       "fcCtlErrorCode": fcCtlErrorCode,
       "fcCtlErrorMessage": fcCtlErrorMessage,
       "fcCtlErrorTime": fcCtlErrorTime,
       "fcCtlHRCheckMessagesTable": fcCtlHRCheckMessagesTable,
       "fcCtlHRCheckMessagesEntry": fcCtlHRCheckMessagesEntry,
       "fcCtlHRCheckMsgIndex": fcCtlHRCheckMsgIndex,
       "fcCtlHRCheckMsgCode": fcCtlHRCheckMsgCode,
       "fcCtlHRCheckMessage": fcCtlHRCheckMessage,
       "fcSystem": fcSystem,
       "fcsConfigDescription": fcsConfigDescription,
       "fcsConfigDescName": fcsConfigDescName,
       "fcsConfigDescAuthor": fcsConfigDescAuthor,
       "fcsConfigDescDate": fcsConfigDescDate,
       "fcsConfigDescVersion": fcsConfigDescVersion,
       "fcsHardwareDescription": fcsHardwareDescription,
       "fcsHardDescReplicatedMode": fcsHardDescReplicatedMode,
       "fcsModuleTable": fcsModuleTable,
       "fcsModuleEntry": fcsModuleEntry,
       "fcsModuleId": fcsModuleId,
       "fcsModuleSubscriberNumber": fcsModuleSubscriberNumber,
       "fcsModuleBridgeInit": fcsModuleBridgeInit,
       "fcsModuleIpxRouterInit": fcsModuleIpxRouterInit,
       "fcsModuleClnpRouterInit": fcsModuleClnpRouterInit,
       "fcManagement": fcManagement,
       "fcmManagementFunctions": fcmManagementFunctions,
       "fcmMgtFctActivationTable": fcmMgtFctActivationTable,
       "fcmMgtFctActivationEntry": fcmMgtFctActivationEntry,
       "fcmMgfActName": fcmMgfActName,
       "fcmMgfActAdminStatus": fcmMgfActAdminStatus,
       "fcmMgfActPassword": fcmMgfActPassword,
       "fcmMgtFctParameters": fcmMgtFctParameters,
       "fcmMgfGeneratorCount": fcmMgfGeneratorCount,
       "fcmMgfGeneratorsAction": fcmMgfGeneratorsAction,
       "fcmMgfGeneratorsDelay": fcmMgfGeneratorsDelay,
       "fcmMgfAlarmsSubscriber1": fcmMgfAlarmsSubscriber1,
       "fcmMgfAlarmsSubscriber2": fcmMgfAlarmsSubscriber2,
       "fcmMgfStatSummingPeriod": fcmMgfStatSummingPeriod,
       "fcmMgfStatBufferThreshold": fcmMgfStatBufferThreshold,
       "fcmMgfStatThroughputSamplingPeriod": fcmMgfStatThroughputSamplingPeriod,
       "fcmMgfStatOutputThreshold": fcmMgfStatOutputThreshold,
       "fcmMgfStatInputThreshold": fcmMgfStatInputThreshold,
       "fcmMgfStatLogChannelSamplingPeriod": fcmMgfStatLogChannelSamplingPeriod,
       "fcmMgfStatLogChannelThreshold": fcmMgfStatLogChannelThreshold,
       "fcmMgfConversionAimedPoint": fcmMgfConversionAimedPoint,
       "fcmMgfConversionIncomingCall": fcmMgfConversionIncomingCall,
       "fcmMgfConversionOutgoingCall": fcmMgfConversionOutgoingCall,
       "fcmMgfConversionAddressCheck": fcmMgfConversionAddressCheck,
       "fcmMgfConvMultiCalledAddrInCall": fcmMgfConvMultiCalledAddrInCall,
       "fcmMgfConvMultiCallingAddrInCall": fcmMgfConvMultiCallingAddrInCall,
       "fcmMgfConvMultiCalledAddrOutCall": fcmMgfConvMultiCalledAddrOutCall,
       "fcmMgfConvMultiCallingAddrOutCall": fcmMgfConvMultiCallingAddrOutCall,
       "fcmMgfBISDNChannelOpening": fcmMgfBISDNChannelOpening,
       "fcmMgfCallAcceptwithReverseCharging": fcmMgfCallAcceptwithReverseCharging,
       "fcmMgfClosedUserGroup": fcmMgfClosedUserGroup,
       "fcmMgtFctCugTable": fcmMgtFctCugTable,
       "fcmMgtFctCugEntry": fcmMgtFctCugEntry,
       "fcmMgtFctCugFunctionId": fcmMgtFctCugFunctionId,
       "fcmMgtFctCugGroupId": fcmMgtFctCugGroupId,
       "fcmMgtFctCugClosedUserGroupExt": fcmMgtFctCugClosedUserGroupExt,
       "fcmMgtFctCugClosedUserGroupInt": fcmMgtFctCugClosedUserGroupInt,
       "fcmMgtFctCugChecking": fcmMgtFctCugChecking,
       "fcmAlarms": fcmAlarms,
       "fcmAlrmEventTable": fcmAlrmEventTable,
       "fcmAlrmEventEntry": fcmAlrmEventEntry,
       "fcmAlrmEvtFamilyId": fcmAlrmEvtFamilyId,
       "fcmAlrmEvtEventSelection": fcmAlrmEvtEventSelection,
       "fcmAlrmEvtEvent1": fcmAlrmEvtEvent1,
       "fcmAlrmEvtEvent2": fcmAlrmEvtEvent2,
       "fcmAlrmEvtEvent3": fcmAlrmEvtEvent3,
       "fcmAlrmEvtEvent4": fcmAlrmEvtEvent4,
       "fcmAlrmEvtEvent5": fcmAlrmEvtEvent5,
       "fcmAlrmEvtEvent6": fcmAlrmEvtEvent6,
       "fcmAlrmEvtEvent7": fcmAlrmEvtEvent7,
       "fcmAlrmPhysPortTable": fcmAlrmPhysPortTable,
       "fcmAlrmPhysPortEntry": fcmAlrmPhysPortEntry,
       "fcmAlrmPpFamilyId": fcmAlrmPpFamilyId,
       "fcmAlrmPpPhysPortSelection": fcmAlrmPpPhysPortSelection,
       "fcmAlrmPpPhysPort1": fcmAlrmPpPhysPort1,
       "fcmAlrmPpPhysPort2": fcmAlrmPpPhysPort2,
       "fcmAlrmPpPhysPort3": fcmAlrmPpPhysPort3,
       "fcmAlrmPpPhysPort4": fcmAlrmPpPhysPort4,
       "fcmAlrmPpPhysPort5": fcmAlrmPpPhysPort5,
       "fcmAlrmPpPhysPort6": fcmAlrmPpPhysPort6,
       "fcmAlrmPpPhysPort7": fcmAlrmPpPhysPort7,
       "fcInterfaces": fcInterfaces,
       "fcfPhysicalPortTable": fcfPhysicalPortTable,
       "fcfPhysicalPortEntry": fcfPhysicalPortEntry,
       "fcfPhysPortId": fcfPhysPortId,
       "fcfPhysPortConnector": fcfPhysPortConnector,
       "fcfInterfaceType": fcfInterfaceType,
       "fcfLines": fcfLines,
       "fcfLineTable": fcfLineTable,
       "fcfLineEntry": fcfLineEntry,
       "fcfLineInterfaceId": fcfLineInterfaceId,
       "fcfLineType": fcfLineType,
       "fcfLineModemManagement": fcfLineModemManagement,
       "fcfLineSpeed": fcfLineSpeed,
       "fcfLineLinkCheckPeriod": fcfLineLinkCheckPeriod,
       "fcfLineCheckPeriodCount": fcfLineCheckPeriodCount,
       "fcfLineV28AsynOutDteSignalTable": fcfLineV28AsynOutDteSignalTable,
       "fcfLineV28AsynOutDteSignalEntry": fcfLineV28AsynOutDteSignalEntry,
       "fcfLineV28AsynOutDteInterfaceId": fcfLineV28AsynOutDteInterfaceId,
       "fcfLineV28AsynOutDteRts105": fcfLineV28AsynOutDteRts105,
       "fcfLineV28AsynOutDteDtr108": fcfLineV28AsynOutDteDtr108,
       "fcfLineV28AsynOutDteDrs111": fcfLineV28AsynOutDteDrs111,
       "fcfLineV28AsynOutDteRil140": fcfLineV28AsynOutDteRil140,
       "fcfLineV28AsynOutDteLl141": fcfLineV28AsynOutDteLl141,
       "fcfLineV28AsynOutDceSignalTable": fcfLineV28AsynOutDceSignalTable,
       "fcfLineV28AsynOutDceSignalEntry": fcfLineV28AsynOutDceSignalEntry,
       "fcfLineV28AsynOutDceInterfaceId": fcfLineV28AsynOutDceInterfaceId,
       "fcfLineV28AsynOutDceCts106": fcfLineV28AsynOutDceCts106,
       "fcfLineV28AsynOutDceDsr107": fcfLineV28AsynOutDceDsr107,
       "fcfLineV28AsynOutDceDcd109": fcfLineV28AsynOutDceDcd109,
       "fcfLineV28AsynOutDceSi117": fcfLineV28AsynOutDceSi117,
       "fcfLineV28AsynOutDceTi142": fcfLineV28AsynOutDceTi142,
       "fcfLineV28AsynInDteSignalTable": fcfLineV28AsynInDteSignalTable,
       "fcfLineV28AsynInDteSignalEntry": fcfLineV28AsynInDteSignalEntry,
       "fcfLineV28AsynInDteInterfaceId": fcfLineV28AsynInDteInterfaceId,
       "fcfLineV28AsynInDteEnablingSig1": fcfLineV28AsynInDteEnablingSig1,
       "fcfLineV28AsynInDteEnablingSig2": fcfLineV28AsynInDteEnablingSig2,
       "fcfLineV28AsynInDteSigMonitored1": fcfLineV28AsynInDteSigMonitored1,
       "fcfLineV28AsynInDteSigMonitored2": fcfLineV28AsynInDteSigMonitored2,
       "fcfLineV28AsynInDceSignalTable": fcfLineV28AsynInDceSignalTable,
       "fcfLineV28AsynInDceSignalEntry": fcfLineV28AsynInDceSignalEntry,
       "fcfLineV28AsynInDceInterfaceId": fcfLineV28AsynInDceInterfaceId,
       "fcfLineV28AsynInDceEnablingSig1": fcfLineV28AsynInDceEnablingSig1,
       "fcfLineV28AsynInDceEnablingSig2": fcfLineV28AsynInDceEnablingSig2,
       "fcfLineV28AsynInDceSigMonitored1": fcfLineV28AsynInDceSigMonitored1,
       "fcfLineV28AsynInDceSigMonitored2": fcfLineV28AsynInDceSigMonitored2,
       "fcfLineV28DteSignalTable": fcfLineV28DteSignalTable,
       "fcfLineV28DteSignalEntry": fcfLineV28DteSignalEntry,
       "fcfLineV28DteInterfaceId": fcfLineV28DteInterfaceId,
       "fcfLineV28DteCts106": fcfLineV28DteCts106,
       "fcfLineV28DteDsr107": fcfLineV28DteDsr107,
       "fcfLineV28DteDcd109": fcfLineV28DteDcd109,
       "fcfLineV28DteSi117": fcfLineV28DteSi117,
       "fcfLineV28DteTi142": fcfLineV28DteTi142,
       "fcfLineV28DteSyn": fcfLineV28DteSyn,
       "fcfLineV28DceSignalTable": fcfLineV28DceSignalTable,
       "fcfLineV28DceSignalEntry": fcfLineV28DceSignalEntry,
       "fcfLineV28DceInterfaceId": fcfLineV28DceInterfaceId,
       "fcfLineV28DceRts105": fcfLineV28DceRts105,
       "fcfLineV28DceDtr108": fcfLineV28DceDtr108,
       "fcfLineV28DceDrs111": fcfLineV28DceDrs111,
       "fcfLineV28DceRil140": fcfLineV28DceRil140,
       "fcfLineV28DceLl141": fcfLineV28DceLl141,
       "fcfLineV28DceSyn": fcfLineV28DceSyn,
       "fcfLineV11DteSignalTable": fcfLineV11DteSignalTable,
       "fcfLineV11DteSignalEntry": fcfLineV11DteSignalEntry,
       "fcfLineV11DteInterfaceId": fcfLineV11DteInterfaceId,
       "fcfLineV11DteIndication109": fcfLineV11DteIndication109,
       "fcfLineV11DteSyn": fcfLineV11DteSyn,
       "fcfLineV11DceSignalTable": fcfLineV11DceSignalTable,
       "fcfLineV11DceSignalEntry": fcfLineV11DceSignalEntry,
       "fcfLineV11DceInterfaceId": fcfLineV11DceInterfaceId,
       "fcfLineV11DceControl105": fcfLineV11DceControl105,
       "fcfLineV11DceSyn": fcfLineV11DceSyn,
       "fcfLineV35DteSignalTable": fcfLineV35DteSignalTable,
       "fcfLineV35DteSignalEntry": fcfLineV35DteSignalEntry,
       "fcfLineV35DteInterfaceId": fcfLineV35DteInterfaceId,
       "fcfLineV35DteD106": fcfLineV35DteD106,
       "fcfLineV35DteE107": fcfLineV35DteE107,
       "fcfLineV35DteF109": fcfLineV35DteF109,
       "fcfLineV35DteTi142": fcfLineV35DteTi142,
       "fcfLineV35DteSyn": fcfLineV35DteSyn,
       "fcfLineV35DceSignalTable": fcfLineV35DceSignalTable,
       "fcfLineV35DceSignalEntry": fcfLineV35DceSignalEntry,
       "fcfLineV35DceInterfaceId": fcfLineV35DceInterfaceId,
       "fcfLineV35DceC105": fcfLineV35DceC105,
       "fcfLineV35DceH108": fcfLineV35DceH108,
       "fcfLineV35DceRil140": fcfLineV35DceRil140,
       "fcfLineV35DceLl141": fcfLineV35DceLl141,
       "fcfLineV35DceSyn": fcfLineV35DceSyn,
       "fcfLineModem": fcfLineModem,
       "fcfLineModemTable": fcfLineModemTable,
       "fcfLineModemEntry": fcfLineModemEntry,
       "fcfLineModInterfaceId": fcfLineModInterfaceId,
       "fcfLineModType": fcfLineModType,
       "fcfLineModLinkUpTimer": fcfLineModLinkUpTimer,
       "fcfLineModNewDiallingTimer": fcfLineModNewDiallingTimer,
       "fcfLineModDiallingCount": fcfLineModDiallingCount,
       "fcfLineModUnuseTimer": fcfLineModUnuseTimer,
       "fcfLineModSpeed": fcfLineModSpeed,
       "fcfLineModCallDirection": fcfLineModCallDirection,
       "fcfLineModInitString": fcfLineModInitString,
       "fcfLineModOutputXidString": fcfLineModOutputXidString,
       "fcfLineModOutputXidStringId": fcfLineModOutputXidStringId,
       "fcfLineModInputXidString": fcfLineModInputXidString,
       "fcfLineModInputXidStringCount": fcfLineModInputXidStringCount,
       "fcfLineModXidStringTable": fcfLineModXidStringTable,
       "fcfLineModXidStringEntry": fcfLineModXidStringEntry,
       "fcfLineModXidStringId": fcfLineModXidStringId,
       "fcfLineModXidStringEltNum": fcfLineModXidStringEltNum,
       "fcfLineModXidStringEltStatus": fcfLineModXidStringEltStatus,
       "fcfLineModXidStringElement": fcfLineModXidStringElement,
       "fcfLineDVBTable": fcfLineDVBTable,
       "fcfLineDVBEntry": fcfLineDVBEntry,
       "fcfLineDVBInterfaceId": fcfLineDVBInterfaceId,
       "fcfLineDVBStatus": fcfLineDVBStatus,
       "fcfLineDVBConnection": fcfLineDVBConnection,
       "fcfIsdn": fcfIsdn,
       "fcfIsdnBasicRateInterfaceTable": fcfIsdnBasicRateInterfaceTable,
       "fcfIsdnBasicRateInterfaceEntry": fcfIsdnBasicRateInterfaceEntry,
       "fcfIsdnBasicRateInterfaceId": fcfIsdnBasicRateInterfaceId,
       "fcfIsdnBriSignalling": fcfIsdnBriSignalling,
       "fcfIsdnBriCountry": fcfIsdnBriCountry,
       "fcfIsdnBriInterfaceCheckPeriod": fcfIsdnBriInterfaceCheckPeriod,
       "fcfIsdnBriFilterRepeatCount": fcfIsdnBriFilterRepeatCount,
       "fcfIsdnBriEnablingTimer": fcfIsdnBriEnablingTimer,
       "fcfIsdnBriDisablingTimer": fcfIsdnBriDisablingTimer,
       "fcfIsdnPrimaryRateInterfaceTable": fcfIsdnPrimaryRateInterfaceTable,
       "fcfIsdnPrimaryRateInterfaceEntry": fcfIsdnPrimaryRateInterfaceEntry,
       "fcfIsdnPrimaryRateInterfaceId": fcfIsdnPrimaryRateInterfaceId,
       "fcfIsdnPriSignalling": fcfIsdnPriSignalling,
       "fcfIsdnPriCountry": fcfIsdnPriCountry,
       "fcfIsdnPriINbBChannel": fcfIsdnPriINbBChannel,
       "fcfIsdnPriCrc4": fcfIsdnPriCrc4,
       "fcfIsdnDChannelSignallingTable": fcfIsdnDChannelSignallingTable,
       "fcfIsdnDChannelSignallingEntry": fcfIsdnDChannelSignallingEntry,
       "fcfIsdnDSigIsdnInterfaceId": fcfIsdnDSigIsdnInterfaceId,
       "fcfIsdnDSigIsdnNumber": fcfIsdnDSigIsdnNumber,
       "fcfIsdnDSigUnuseTimer": fcfIsdnDSigUnuseTimer,
       "fcfIsdnDSigCalledSubAddressCheck": fcfIsdnDSigCalledSubAddressCheck,
       "fcfIsdnDSigDirectInwardDialingCheck": fcfIsdnDSigDirectInwardDialingCheck,
       "fcfIsdnDSigInactivityTimer": fcfIsdnDSigInactivityTimer,
       "fcfIsdnDSigMulDialsRetryTimer": fcfIsdnDSigMulDialsRetryTimer,
       "fcfIsdnDSigMulDialsCycleTimer": fcfIsdnDSigMulDialsCycleTimer,
       "fcfIsdnDSigMulDialsCycleCount": fcfIsdnDSigMulDialsCycleCount,
       "fcfIsdnDSigMulDialsTotalDuration": fcfIsdnDSigMulDialsTotalDuration,
       "fcfIsdnDSigLowLayerCompatibility": fcfIsdnDSigLowLayerCompatibility,
       "fcfIsdnDSigHighLayerCompatibility": fcfIsdnDSigHighLayerCompatibility,
       "fcfIsdnDSigHighLayerCharactIdent": fcfIsdnDSigHighLayerCharactIdent,
       "fcfIsdnDChannelSigTimerTable": fcfIsdnDChannelSigTimerTable,
       "fcfIsdnDChannelSigTimerEntry": fcfIsdnDChannelSigTimerEntry,
       "fcfIsdnDTimIsdnInterfaceId": fcfIsdnDTimIsdnInterfaceId,
       "fcfIsdnDTimBChannelUpTimer": fcfIsdnDTimBChannelUpTimer,
       "fcfIsdnDTimT301AlertConnectTimer": fcfIsdnDTimT301AlertConnectTimer,
       "fcfIsdnDTimT303SetupResponseTimer": fcfIsdnDTimT303SetupResponseTimer,
       "fcfIsdnDTimT305DisconnectResponseTimer": fcfIsdnDTimT305DisconnectResponseTimer,
       "fcfIsdnDTimT308ReleaseResponseTimer": fcfIsdnDTimT308ReleaseResponseTimer,
       "fcfIsdnDTimT309DataLinkFailureTimer": fcfIsdnDTimT309DataLinkFailureTimer,
       "fcfIsdnDTimT310CallProceedingTimer": fcfIsdnDTimT310CallProceedingTimer,
       "fcfIsdnDTimT313ConnectAcknowledgeTimer": fcfIsdnDTimT313ConnectAcknowledgeTimer,
       "fcfIsdnRemotePeerTable": fcfIsdnRemotePeerTable,
       "fcfIsdnRemotePeerEntry": fcfIsdnRemotePeerEntry,
       "fcfIsdnRemRemotePeerId": fcfIsdnRemRemotePeerId,
       "fcfIsdnRemStatus": fcfIsdnRemStatus,
       "fcfIsdnRemIsdnNumber": fcfIsdnRemIsdnNumber,
       "fcfIsdnRemCallDirection": fcfIsdnRemCallDirection,
       "fcfE1Ds1": fcfE1Ds1,
       "fcfE1Ds1PhysTable": fcfE1Ds1PhysTable,
       "fcfE1Ds1PhysEntry": fcfE1Ds1PhysEntry,
       "fcfE1Ds1PhysIfId": fcfE1Ds1PhysIfId,
       "fcfE1Ds1PhysStatus": fcfE1Ds1PhysStatus,
       "fcfE1Ds1PhysPhysicalPort": fcfE1Ds1PhysPhysicalPort,
       "fcfE1PhysPortTable": fcfE1PhysPortTable,
       "fcfE1PhysPortEntry": fcfE1PhysPortEntry,
       "fcfE1PhysPortId": fcfE1PhysPortId,
       "fcfE1PhysPortSynchSrc": fcfE1PhysPortSynchSrc,
       "fcfE1PhysPortFraming": fcfE1PhysPortFraming,
       "fcfE1PhysPortFlowType": fcfE1PhysPortFlowType,
       "fcfE1Ds1ChannelTable": fcfE1Ds1ChannelTable,
       "fcfE1Ds1ChannelEntry": fcfE1Ds1ChannelEntry,
       "fcfE1Ds1ChannelIfId": fcfE1Ds1ChannelIfId,
       "fcfE1Ds1ChannelStatus": fcfE1Ds1ChannelStatus,
       "fcfE1Ds1ChannelPhysIf": fcfE1Ds1ChannelPhysIf,
       "fcfE1Ds1ChannelSlots": fcfE1Ds1ChannelSlots,
       "fcfE1Ds1DropInsertTable": fcfE1Ds1DropInsertTable,
       "fcfE1Ds1DropInsertEntry": fcfE1Ds1DropInsertEntry,
       "fcfE1Ds1DropInsertIf1": fcfE1Ds1DropInsertIf1,
       "fcfE1Ds1DropInsertIf2": fcfE1Ds1DropInsertIf2,
       "fcfE1Ds1DropInsertStatus": fcfE1Ds1DropInsertStatus,
       "fcfTokenRing": fcfTokenRing,
       "fcfTokenRingTable": fcfTokenRingTable,
       "fcfTokenRingEntry": fcfTokenRingEntry,
       "fcfTokenRingInterfaceId": fcfTokenRingInterfaceId,
       "fcfTokenRingSpeed": fcfTokenRingSpeed,
       "fcfTokenRingLinkCheckPeriod": fcfTokenRingLinkCheckPeriod,
       "fcfTokenRingCheckPeriodCount": fcfTokenRingCheckPeriodCount,
       "fcFrameRelaySwitch": fcFrameRelaySwitch,
       "fcFrSwitchingTable": fcFrSwitchingTable,
       "fcFrSwitchingEntry": fcFrSwitchingEntry,
       "fcFrSwInputInterfaceId": fcFrSwInputInterfaceId,
       "fcFrSwInputDlci": fcFrSwInputDlci,
       "fcFrSwStatus": fcFrSwStatus,
       "fcFrSwOutputInterfaceId": fcFrSwOutputInterfaceId,
       "fcFrSwOutputDlci": fcFrSwOutputDlci,
       "fcFrSwPriority": fcFrSwPriority,
       "fcLogicalPorts": fcLogicalPorts,
       "fclLogicalPortTable": fclLogicalPortTable,
       "fclLogicalPortEntry": fclLogicalPortEntry,
       "fclLogPortId": fclLogPortId,
       "fclLogPortStatus": fclLogPortStatus,
       "fclLogPortType": fclLogPortType,
       "fclEthernet": fclEthernet,
       "fclEthernetTable": fclEthernetTable,
       "fclEthernetEntry": fclEthernetEntry,
       "fclEthLogPortId": fclEthLogPortId,
       "fclEthInterfaceId": fclEthInterfaceId,
       "fclAsynchronousAccessLogPort": fclAsynchronousAccessLogPort,
       "fclAsynLogPortTable": fclAsynLogPortTable,
       "fclAsynLogPortEntry": fclAsynLogPortEntry,
       "fclAsynLpLogPortId": fclAsynLpLogPortId,
       "fclAsynLpInterfaceId": fclAsynLpInterfaceId,
       "fclAsynLpSubscriberNumber": fclAsynLpSubscriberNumber,
       "fclAsynLpConfigId": fclAsynLpConfigId,
       "fclAsynLpTerminalType": fclAsynLpTerminalType,
       "fclAsynPadLogPort": fclAsynPadLogPort,
       "fclAsynPadLpTable": fclAsynPadLpTable,
       "fclAsynPadLpEntry": fclAsynPadLpEntry,
       "fclAsynPadLpLogPortId": fclAsynPadLpLogPortId,
       "fclAsynPadLpLink": fclAsynPadLpLink,
       "fclAsynPadLpSpeedDetection": fclAsynPadLpSpeedDetection,
       "fclAsynPadLpEquipment": fclAsynPadLpEquipment,
       "fclAsynPadLpMnemonicType": fclAsynPadLpMnemonicType,
       "fclAsynPadLpNui": fclAsynPadLpNui,
       "fclAsynPadLpCombinedFlowCtrl": fclAsynPadLpCombinedFlowCtrl,
       "fclAsynPadHomePageTable": fclAsynPadHomePageTable,
       "fclAsynPadHomePageEntry": fclAsynPadHomePageEntry,
       "fclAsynPadPageBlocId": fclAsynPadPageBlocId,
       "fclAsynPadPageStatus": fclAsynPadPageStatus,
       "fclAsynPadPageMessage": fclAsynPadPageMessage,
       "fclAsynPadPageAttributes": fclAsynPadPageAttributes,
       "fclAsynVdxLogPort": fclAsynVdxLogPort,
       "fclAsynVdxLpTable": fclAsynVdxLpTable,
       "fclAsynVdxLpEntry": fclAsynVdxLpEntry,
       "fclAsynVdxLpLogPortId": fclAsynVdxLpLogPortId,
       "fclAsynVdxLpLink": fclAsynVdxLpLink,
       "fclAsynVdxLpMnemonicType": fclAsynVdxLpMnemonicType,
       "fclAsynVdxLpNui": fclAsynVdxLpNui,
       "fclAsynVdxLpParityBit": fclAsynVdxLpParityBit,
       "fclAsynVdxLpPceSubThreshold": fclAsynVdxLpPceSubThreshold,
       "fclAsynVdxLpPceNackTimer": fclAsynVdxLpPceNackTimer,
       "fclAsynVdxHomePageTable": fclAsynVdxHomePageTable,
       "fclAsynVdxHomePageEntry": fclAsynVdxHomePageEntry,
       "fclAsynVdxPageBlocId": fclAsynVdxPageBlocId,
       "fclAsynVdxPageStatus": fclAsynVdxPageStatus,
       "fclAsynVdxPageMessage": fclAsynVdxPageMessage,
       "fclAsynVdxPageAttributes": fclAsynVdxPageAttributes,
       "fclAsynLowSpeedCpLogPort": fclAsynLowSpeedCpLogPort,
       "fclAsynLscpLpTable": fclAsynLscpLpTable,
       "fclAsynLscpLpEntry": fclAsynLscpLpEntry,
       "fclAsynLscpLpLogPortId": fclAsynLscpLpLogPortId,
       "fclAsynLscpLpLink": fclAsynLscpLpLink,
       "fclAsynLscpLpEquipment": fclAsynLscpLpEquipment,
       "fclAsynMultiStandardPadLogPort": fclAsynMultiStandardPadLogPort,
       "fclAsynMultiLpTable": fclAsynMultiLpTable,
       "fclAsynMultiLpEntry": fclAsynMultiLpEntry,
       "fclAsynMultiLpLogPortId": fclAsynMultiLpLogPortId,
       "fclAsynMultiLpAuthStep1": fclAsynMultiLpAuthStep1,
       "fclAsynMultiLpAuthStep2": fclAsynMultiLpAuthStep2,
       "fclAsynMultiLpAuthStep3": fclAsynMultiLpAuthStep3,
       "fclAsynMultiLpAuthStep4": fclAsynMultiLpAuthStep4,
       "fclAsynX28PlusLogPort": fclAsynX28PlusLogPort,
       "fclAsynX28PlusLpTable": fclAsynX28PlusLpTable,
       "fclAsynX28PlusLpEntry": fclAsynX28PlusLpEntry,
       "fclAsynX28PlusLpLogPortId": fclAsynX28PlusLpLogPortId,
       "fclAsynX28PlusLpLink": fclAsynX28PlusLpLink,
       "fclAsynX28PlusLpSpeedDetection": fclAsynX28PlusLpSpeedDetection,
       "fclAsynX28PlusLpEquipment": fclAsynX28PlusLpEquipment,
       "fclAsynX28PlusLpMnemonicType": fclAsynX28PlusLpMnemonicType,
       "fclAsynX28PlusLpFullDuplex": fclAsynX28PlusLpFullDuplex,
       "fclAsynX28PlusLpIdleTimerSelection": fclAsynX28PlusLpIdleTimerSelection,
       "fclAsynX28PlusLpIdleTimerDelay": fclAsynX28PlusLpIdleTimerDelay,
       "fclAsynX28PlusLpX3Mode": fclAsynX28PlusLpX3Mode,
       "fclAsynX28PlusLpEscapeDigit": fclAsynX28PlusLpEscapeDigit,
       "fclAsynX28PlusLpConIdTelenet": fclAsynX28PlusLpConIdTelenet,
       "fclAsynX28PlusLpConIdRemote": fclAsynX28PlusLpConIdRemote,
       "fclAsynX28PlusLpRemPrSentOnCalls": fclAsynX28PlusLpRemPrSentOnCalls,
       "fclAsynX28PlusLpEasyMnemo": fclAsynX28PlusLpEasyMnemo,
       "fclAsynX28PlusLpMonSignalCTS": fclAsynX28PlusLpMonSignalCTS,
       "fclAsynX28PlusLpMonSignalDSR": fclAsynX28PlusLpMonSignalDSR,
       "fclAsynX28PlusLpMonSignalDCD": fclAsynX28PlusLpMonSignalDCD,
       "fclAsynX28PlusGeneralParameters": fclAsynX28PlusGeneralParameters,
       "fclAsynX28PlusGenParDNIC": fclAsynX28PlusGenParDNIC,
       "fclAsynX28PlusConfTELENETTable": fclAsynX28PlusConfTELENETTable,
       "fclAsynX28PlusConfTELENETEntry": fclAsynX28PlusConfTELENETEntry,
       "fclAsynX28PlusCfgTELENETConfigId": fclAsynX28PlusCfgTELENETConfigId,
       "fclAsynX28PlusCfgTELENETDescription": fclAsynX28PlusCfgTELENETDescription,
       "fclAsynX28PlusParTELENETTable": fclAsynX28PlusParTELENETTable,
       "fclAsynX28PlusParTELENETEntry": fclAsynX28PlusParTELENETEntry,
       "fclAsynX28PlusParTelConfigId": fclAsynX28PlusParTelConfigId,
       "fclAsynX28PlusParTelLpFullDuplex": fclAsynX28PlusParTelLpFullDuplex,
       "fclAsynX28PlusParTelLpIdleTimerSelection": fclAsynX28PlusParTelLpIdleTimerSelection,
       "fclAsynX28PlusParTelLpIdleTimerDelay": fclAsynX28PlusParTelLpIdleTimerDelay,
       "fclAsynX28PlusParTelLpX3Mode": fclAsynX28PlusParTelLpX3Mode,
       "fclAsynX28PlusConfRemoteTable": fclAsynX28PlusConfRemoteTable,
       "fclAsynX28PlusConfRemoteEntry": fclAsynX28PlusConfRemoteEntry,
       "fclAsynX28PlusRemoteConfigId": fclAsynX28PlusRemoteConfigId,
       "fclAsynX28PlusRemoteCfgDescription": fclAsynX28PlusRemoteCfgDescription,
       "fclAsynX28PlusRemoteCfgX3Part1Table": fclAsynX28PlusRemoteCfgX3Part1Table,
       "fclAsynX28PlusRemoteCfgX3Part1Entry": fclAsynX28PlusRemoteCfgX3Part1Entry,
       "fclAsynX28PlusRemConfigId": fclAsynX28PlusRemConfigId,
       "fclAsynX28PlusRemCfgX3P01EscapeChar": fclAsynX28PlusRemCfgX3P01EscapeChar,
       "fclAsynX28PlusRemCfgX3P02Echo": fclAsynX28PlusRemCfgX3P02Echo,
       "fclAsynX28PlusRemCfgX3P03ForwardingChar": fclAsynX28PlusRemCfgX3P03ForwardingChar,
       "fclAsynX28PlusRemCfgX3P04IdleTimerDelay": fclAsynX28PlusRemCfgX3P04IdleTimerDelay,
       "fclAsynX28PlusRemCfgX3P05OutputFlowCtrl": fclAsynX28PlusRemCfgX3P05OutputFlowCtrl,
       "fclAsynX28PlusRemCfgX3P06ServiceSignals": fclAsynX28PlusRemCfgX3P06ServiceSignals,
       "fclAsynX28PlusRemCfgX3P07BreakHandling": fclAsynX28PlusRemCfgX3P07BreakHandling,
       "fclAsynX28PlusRemCfgX3P08OutputDiscard": fclAsynX28PlusRemCfgX3P08OutputDiscard,
       "fclAsynX28PlusRemCfgX3P09CrPadding": fclAsynX28PlusRemCfgX3P09CrPadding,
       "fclAsynX28PlusRemCfgX3P10LineFolding": fclAsynX28PlusRemCfgX3P10LineFolding,
       "fclAsynX28PlusRemCfgX3P11BinarySpeed": fclAsynX28PlusRemCfgX3P11BinarySpeed,
       "fclAsynX28PlusRemoteCfgX3Part2Table": fclAsynX28PlusRemoteCfgX3Part2Table,
       "fclAsynX28PlusRemoteCfgX3Part2Entry": fclAsynX28PlusRemoteCfgX3Part2Entry,
       "fclAsynX28PlusRemCfgX3Part2ConfigId": fclAsynX28PlusRemCfgX3Part2ConfigId,
       "fclAsynX28PlusRemCfgX3P12InputFlowCtrl": fclAsynX28PlusRemCfgX3P12InputFlowCtrl,
       "fclAsynX28PlusRemCfgX3P13LfInsertion": fclAsynX28PlusRemCfgX3P13LfInsertion,
       "fclAsynX28PlusRemCfgX3P14LfPadding": fclAsynX28PlusRemCfgX3P14LfPadding,
       "fclAsynX28PlusRemCfgX3P15Editing": fclAsynX28PlusRemCfgX3P15Editing,
       "fclAsynX28PlusRemCfgX3P16CharDelete": fclAsynX28PlusRemCfgX3P16CharDelete,
       "fclAsynX28PlusRemCfgX3P17LineDelete": fclAsynX28PlusRemCfgX3P17LineDelete,
       "fclAsynX28PlusRemCfgX3P18LineDisplay": fclAsynX28PlusRemCfgX3P18LineDisplay,
       "fclAsynX28PlusRemCfgX3P19EditingSignal": fclAsynX28PlusRemCfgX3P19EditingSignal,
       "fclAsynX28PlusRemCfgX3P20EchoMask": fclAsynX28PlusRemCfgX3P20EchoMask,
       "fclAsynX28PlusRemCfgX3P21Parity": fclAsynX28PlusRemCfgX3P21Parity,
       "fclAsynX28PlusRemCfgX3P22PageWait": fclAsynX28PlusRemCfgX3P22PageWait,
       "fclAsynX28PlusRemoteTELENETTable": fclAsynX28PlusRemoteTELENETTable,
       "fclAsynX28PlusRemoteTELENETEntry": fclAsynX28PlusRemoteTELENETEntry,
       "fclAsynX28PlusRemCfgTELENETConfigId": fclAsynX28PlusRemCfgTELENETConfigId,
       "fclAsynX28PlusRemLpFullDuplex": fclAsynX28PlusRemLpFullDuplex,
       "fclAsynX28PlusRemLpIdleTimerSelection": fclAsynX28PlusRemLpIdleTimerSelection,
       "fclAsynX28PlusRemLpIdleTimerDelay": fclAsynX28PlusRemLpIdleTimerDelay,
       "fclAsynX28PlusRemLpX3Mode": fclAsynX28PlusRemLpX3Mode,
       "fclAsynGeneralParameters": fclAsynGeneralParameters,
       "fclAsynGenParLanguageType": fclAsynGenParLanguageType,
       "fclAsynConfiguration": fclAsynConfiguration,
       "fclAsynCfgConfigTable": fclAsynCfgConfigTable,
       "fclAsynCfgConfigEntry": fclAsynCfgConfigEntry,
       "fclAsynCfgConfigId": fclAsynCfgConfigId,
       "fclAsynCfgStatus": fclAsynCfgStatus,
       "fclAsynCfgDescription": fclAsynCfgDescription,
       "fclAsynCfgX3ProfileId": fclAsynCfgX3ProfileId,
       "fclAsynCfgX3ModifCount": fclAsynCfgX3ModifCount,
       "fclAsynCfgConnectionProfileId": fclAsynCfgConnectionProfileId,
       "fclAsynCfgConnModifCount": fclAsynCfgConnModifCount,
       "fclAsynCfgX3Part1Table": fclAsynCfgX3Part1Table,
       "fclAsynCfgX3Part1Entry": fclAsynCfgX3Part1Entry,
       "fclAsynCfgX3Part1ConfigId": fclAsynCfgX3Part1ConfigId,
       "fclAsynCfgX3Part1ProfileId": fclAsynCfgX3Part1ProfileId,
       "fclAsynCfgX3P01EscapeChar": fclAsynCfgX3P01EscapeChar,
       "fclAsynCfgX3P02Echo": fclAsynCfgX3P02Echo,
       "fclAsynCfgX3P03ForwardingChar": fclAsynCfgX3P03ForwardingChar,
       "fclAsynCfgX3P04IdleTimerDelay": fclAsynCfgX3P04IdleTimerDelay,
       "fclAsynCfgX3P05OutputFlowCtrl": fclAsynCfgX3P05OutputFlowCtrl,
       "fclAsynCfgX3P06ServiceSignals": fclAsynCfgX3P06ServiceSignals,
       "fclAsynCfgX3P07BreakHandling": fclAsynCfgX3P07BreakHandling,
       "fclAsynCfgX3P08OutputDiscard": fclAsynCfgX3P08OutputDiscard,
       "fclAsynCfgX3P09CrPadding": fclAsynCfgX3P09CrPadding,
       "fclAsynCfgX3P10LineFolding": fclAsynCfgX3P10LineFolding,
       "fclAsynCfgX3P11BinarySpeed": fclAsynCfgX3P11BinarySpeed,
       "fclAsynCfgX3Part2Table": fclAsynCfgX3Part2Table,
       "fclAsynCfgX3Part2Entry": fclAsynCfgX3Part2Entry,
       "fclAsynCfgX3Part2ConfigId": fclAsynCfgX3Part2ConfigId,
       "fclAsynCfgX3Part2ProfileId": fclAsynCfgX3Part2ProfileId,
       "fclAsynCfgX3P12InputFlowCtrl": fclAsynCfgX3P12InputFlowCtrl,
       "fclAsynCfgX3P13LfInsertion": fclAsynCfgX3P13LfInsertion,
       "fclAsynCfgX3P14LfPadding": fclAsynCfgX3P14LfPadding,
       "fclAsynCfgX3P15Editing": fclAsynCfgX3P15Editing,
       "fclAsynCfgX3P16CharDelete": fclAsynCfgX3P16CharDelete,
       "fclAsynCfgX3P17LineDelete": fclAsynCfgX3P17LineDelete,
       "fclAsynCfgX3P18LineDisplay": fclAsynCfgX3P18LineDisplay,
       "fclAsynCfgX3P19EditingSignal": fclAsynCfgX3P19EditingSignal,
       "fclAsynCfgX3P20EchoMask": fclAsynCfgX3P20EchoMask,
       "fclAsynCfgX3P21Parity": fclAsynCfgX3P21Parity,
       "fclAsynCfgX3P22PageWait": fclAsynCfgX3P22PageWait,
       "fclAsynCfgX3UserProfilePart1": fclAsynCfgX3UserProfilePart1,
       "fclAsynCfgX3UserProfileId": fclAsynCfgX3UserProfileId,
       "fclAsynCfgX3UserProfileDesc": fclAsynCfgX3UserProfileDesc,
       "fclAsynCfgX3UserP01EscapeChar": fclAsynCfgX3UserP01EscapeChar,
       "fclAsynCfgX3UserP02Echo": fclAsynCfgX3UserP02Echo,
       "fclAsynCfgX3UserP03ForwardingChar": fclAsynCfgX3UserP03ForwardingChar,
       "fclAsynCfgX3UserP04IdleTimerDelay": fclAsynCfgX3UserP04IdleTimerDelay,
       "fclAsynCfgX3UserP05OutputFlowCtrl": fclAsynCfgX3UserP05OutputFlowCtrl,
       "fclAsynCfgX3UserP06ServiceSignals": fclAsynCfgX3UserP06ServiceSignals,
       "fclAsynCfgX3UserP07BreakHandling": fclAsynCfgX3UserP07BreakHandling,
       "fclAsynCfgX3UserP08OutputDiscard": fclAsynCfgX3UserP08OutputDiscard,
       "fclAsynCfgX3UserP09CrPadding": fclAsynCfgX3UserP09CrPadding,
       "fclAsynCfgX3UserP10LineFolding": fclAsynCfgX3UserP10LineFolding,
       "fclAsynCfgX3UserP11BinarySpeed": fclAsynCfgX3UserP11BinarySpeed,
       "fclAsynCfgX3UserProfilePart2": fclAsynCfgX3UserProfilePart2,
       "fclAsynCfgX3UserP12InputFlowCtrl": fclAsynCfgX3UserP12InputFlowCtrl,
       "fclAsynCfgX3UserP13LfInsertion": fclAsynCfgX3UserP13LfInsertion,
       "fclAsynCfgX3UserP14LfPadding": fclAsynCfgX3UserP14LfPadding,
       "fclAsynCfgX3UserP15Editing": fclAsynCfgX3UserP15Editing,
       "fclAsynCfgX3UserP16CharDelete": fclAsynCfgX3UserP16CharDelete,
       "fclAsynCfgX3UserP17LineDelete": fclAsynCfgX3UserP17LineDelete,
       "fclAsynCfgX3UserP18LineDisplay": fclAsynCfgX3UserP18LineDisplay,
       "fclAsynCfgX3UserP19EditingSignal": fclAsynCfgX3UserP19EditingSignal,
       "fclAsynCfgX3UserP20EchoMask": fclAsynCfgX3UserP20EchoMask,
       "fclAsynCfgX3UserP21Parity": fclAsynCfgX3UserP21Parity,
       "fclAsynCfgX3UserP22PageWait": fclAsynCfgX3UserP22PageWait,
       "fclAsynCfgConnLinkTable": fclAsynCfgConnLinkTable,
       "fclAsynCfgConnLinkEntry": fclAsynCfgConnLinkEntry,
       "fclAsynCfgLinkConfigId": fclAsynCfgLinkConfigId,
       "fclAsynCfgLinkXonXoffParity": fclAsynCfgLinkXonXoffParity,
       "fclAsynCfgLinkServSignalParity": fclAsynCfgLinkServSignalParity,
       "fclAsynCfgLinkDataParity": fclAsynCfgLinkDataParity,
       "fclAsynCfgLinkBitCount": fclAsynCfgLinkBitCount,
       "fclAsynCfgLinkStopBitCount": fclAsynCfgLinkStopBitCount,
       "fclAsynCfgLinkXonXoffSignal": fclAsynCfgLinkXonXoffSignal,
       "fclAsynCfgLinkInactivityTimer": fclAsynCfgLinkInactivityTimer,
       "fclAsynCfgLinkBlockSize": fclAsynCfgLinkBlockSize,
       "fclAsynCfgLinkCallResponseTimer": fclAsynCfgLinkCallResponseTimer,
       "fclAsynCfgConnFacilityTable": fclAsynCfgConnFacilityTable,
       "fclAsynCfgConnFacilityEntry": fclAsynCfgConnFacilityEntry,
       "fclAsynCfgFacConfigId": fclAsynCfgFacConfigId,
       "fclAsynCfgFacClosedUserGroup": fclAsynCfgFacClosedUserGroup,
       "fclAsynCfgFacReverseCharging": fclAsynCfgFacReverseCharging,
       "fclAsynCfgFacThroughputClass": fclAsynCfgFacThroughputClass,
       "fclAsynCfgFacDefOutThroughputClass": fclAsynCfgFacDefOutThroughputClass,
       "fclAsynCfgFacDefInThroughputClass": fclAsynCfgFacDefInThroughputClass,
       "fclAsynCfgFacMaxOutThroughputClass": fclAsynCfgFacMaxOutThroughputClass,
       "fclAsynCfgFacMaxInThroughputClass": fclAsynCfgFacMaxInThroughputClass,
       "fclAsynCfgFacPacketSize": fclAsynCfgFacPacketSize,
       "fclAsynCfgFacDefOutPacketSize": fclAsynCfgFacDefOutPacketSize,
       "fclAsynCfgFacDefInPacketSize": fclAsynCfgFacDefInPacketSize,
       "fclAsynCfgFacMaxOutPacketSize": fclAsynCfgFacMaxOutPacketSize,
       "fclAsynCfgFacMaxInPacketSize": fclAsynCfgFacMaxInPacketSize,
       "fclAsynCfgFacMinOutPacketSize": fclAsynCfgFacMinOutPacketSize,
       "fclAsynCfgFacMinInPacketSize": fclAsynCfgFacMinInPacketSize,
       "fclAsynCfgFacWindowSize": fclAsynCfgFacWindowSize,
       "fclAsynCfgFacDefOutWindowSize": fclAsynCfgFacDefOutWindowSize,
       "fclAsynCfgFacDefInWindowSize": fclAsynCfgFacDefInWindowSize,
       "fclAsynCfgFacMaxOutWindowSize": fclAsynCfgFacMaxOutWindowSize,
       "fclAsynCfgFacMaxInWindowSize": fclAsynCfgFacMaxInWindowSize,
       "fclAsynCfgConnServiceTable": fclAsynCfgConnServiceTable,
       "fclAsynCfgConnServiceEntry": fclAsynCfgConnServiceEntry,
       "fclAsynCfgSerConfigId": fclAsynCfgSerConfigId,
       "fclAsynCfgSerCompression": fclAsynCfgSerCompression,
       "fclAsynCfgSerCompressNegociation": fclAsynCfgSerCompressNegociation,
       "fclAsynCfgSerCompressScrambling": fclAsynCfgSerCompressScrambling,
       "fclAsynCfgSerCompressMultiPacketsTimer": fclAsynCfgSerCompressMultiPacketsTimer,
       "fclAsynCfgSerX29Reselection": fclAsynCfgSerX29Reselection,
       "fclAsynCfgSerCallReturnTransmission": fclAsynCfgSerCallReturnTransmission,
       "fclAsynCfgSerDBitModification": fclAsynCfgSerDBitModification,
       "fclAsynCfgSerReliableVc": fclAsynCfgSerReliableVc,
       "fclAsynCfgSerCos": fclAsynCfgSerCos,
       "fclAsynCfgSerCir": fclAsynCfgSerCir,
       "fclAsynCfgSerMinCir": fclAsynCfgSerMinCir,
       "fclAsynCfgSerConversionAimedPoint": fclAsynCfgSerConversionAimedPoint,
       "fclAsynCfgSerConversionIncomingCall": fclAsynCfgSerConversionIncomingCall,
       "fclAsynCfgSerConversionOutgoingCall": fclAsynCfgSerConversionOutgoingCall,
       "fclAsynCfgSerConversionAddressCheck": fclAsynCfgSerConversionAddressCheck,
       "fclAsynAutoCalls": fclAsynAutoCalls,
       "fclAsynAutoCallTable": fclAsynAutoCallTable,
       "fclAsynAutoCallEntry": fclAsynAutoCallEntry,
       "fclAsynAutoLogPortId": fclAsynAutoLogPortId,
       "fclAsynAutoStatus": fclAsynAutoStatus,
       "fclAsynAutoCalledAddr": fclAsynAutoCalledAddr,
       "fclAsynAutoFacility": fclAsynAutoFacility,
       "fclAsynAutoFacThroughputClass": fclAsynAutoFacThroughputClass,
       "fclAsynAutoCallUserDataAscii": fclAsynAutoCallUserDataAscii,
       "fclAsynAutoCallUserDataHexa": fclAsynAutoCallUserDataHexa,
       "fclAsynAutoMinimumRecallTimer": fclAsynAutoMinimumRecallTimer,
       "fclAsynAutoDiscardCharDuringTimer": fclAsynAutoDiscardCharDuringTimer,
       "fclAsynAutoVdxKeyTranslationTable": fclAsynAutoVdxKeyTranslationTable,
       "fclAsynAutoVdxKeyTranslationEntry": fclAsynAutoVdxKeyTranslationEntry,
       "fclAsynAutoTransLpId": fclAsynAutoTransLpId,
       "fclAsynAutoTransTranscoding": fclAsynAutoTransTranscoding,
       "fclAsynAutoTransProfile": fclAsynAutoTransProfile,
       "fclAsynAutoTransAutoTermMode": fclAsynAutoTransAutoTermMode,
       "fclAsynAutoTransCFKeyHandling": fclAsynAutoTransCFKeyHandling,
       "fclAsynAutoTransClearHangUp": fclAsynAutoTransClearHangUp,
       "fclAsynMnemonic": fclAsynMnemonic,
       "fclAsynMnemonicTable": fclAsynMnemonicTable,
       "fclAsynMnemonicEntry": fclAsynMnemonicEntry,
       "fclAsynMneMnemonicId": fclAsynMneMnemonicId,
       "fclAsynMneStatus": fclAsynMneStatus,
       "fclAsynMneName": fclAsynMneName,
       "fclAsynMneCalledAddr": fclAsynMneCalledAddr,
       "fclAsynMneFacility": fclAsynMneFacility,
       "fclAsynMneFacThroughputClass": fclAsynMneFacThroughputClass,
       "fclAsynMneCallUserDataAscii": fclAsynMneCallUserDataAscii,
       "fclAsynMneCallUserDataHexa": fclAsynMneCallUserDataHexa,
       "fclAsynMneVdxKeyTranslationTable": fclAsynMneVdxKeyTranslationTable,
       "fclAsynMneVdxKeyTranslationEntry": fclAsynMneVdxKeyTranslationEntry,
       "fclAsynMneTransMnemonicId": fclAsynMneTransMnemonicId,
       "fclAsynMneTransName": fclAsynMneTransName,
       "fclAsynMneTransTranscoding": fclAsynMneTransTranscoding,
       "fclAsynMneTransProfile": fclAsynMneTransProfile,
       "fclAsynMneTransAutoTermMode": fclAsynMneTransAutoTermMode,
       "fclAsynMneTransCFKeyHandling": fclAsynMneTransCFKeyHandling,
       "fclAsynMneTransClearHangUp": fclAsynMneTransClearHangUp,
       "fclAsynPstnRemotePeerTable": fclAsynPstnRemotePeerTable,
       "fclAsynPstnRemotePeerEntry": fclAsynPstnRemotePeerEntry,
       "fclAsynPstnRemX121Addr": fclAsynPstnRemX121Addr,
       "fclAsynPstnRemStatus": fclAsynPstnRemStatus,
       "fclAsynPstnRemPstnNumber": fclAsynPstnRemPstnNumber,
       "fclAsynNetUserTable": fclAsynNetUserTable,
       "fclAsynNetUserEntry": fclAsynNetUserEntry,
       "fclAsynNetUserId": fclAsynNetUserId,
       "fclAsynNetStatus": fclAsynNetStatus,
       "fclAsynNetNui": fclAsynNetNui,
       "fclAsynNetNua": fclAsynNetNua,
       "fclFrameRelayAccessLogPort": fclFrameRelayAccessLogPort,
       "fclFraLogPortTable": fclFraLogPortTable,
       "fclFraLogPortEntry": fclFraLogPortEntry,
       "fclFraLpLogPortId": fclFraLpLogPortId,
       "fclFraLpInterfaceId": fclFraLpInterfaceId,
       "fclFraLpLmi": fclFraLpLmi,
       "fclFraLpGroupingThreshold": fclFraLpGroupingThreshold,
       "fclFraLpFecnBecnThreshold": fclFraLpFecnBecnThreshold,
       "fclFraLpDeDiscardThreshold": fclFraLpDeDiscardThreshold,
       "fclFraLpAllDiscardThreshold": fclFraLpAllDiscardThreshold,
       "fclFraLpX25InterframeFlagCount": fclFraLpX25InterframeFlagCount,
       "fclFraLpInactivityCheckDelay": fclFraLpInactivityCheckDelay,
       "fclFraLpCompression": fclFraLpCompression,
       "fclFraLpCompressNegotiation": fclFraLpCompressNegotiation,
       "fclFraLpCompressScrambling": fclFraLpCompressScrambling,
       "fclFraLpCompressMultiPacketsTimer": fclFraLpCompressMultiPacketsTimer,
       "fclFraLpReliableVc": fclFraLpReliableVc,
       "fclFraLmiTable": fclFraLmiTable,
       "fclFraLmiEntry": fclFraLmiEntry,
       "fclFraLmiLogPortId": fclFraLmiLogPortId,
       "fclFraLmiDlci": fclFraLmiDlci,
       "fclFraLmiLmiStandard": fclFraLmiLmiStandard,
       "fclFraLmiAccessibilityCondition": fclFraLmiAccessibilityCondition,
       "fclFraLmiN391FullStatusPollCount": fclFraLmiN391FullStatusPollCount,
       "fclFraLmiN392ErrorThreshold": fclFraLmiN392ErrorThreshold,
       "fclFraLmiN393MonitoredEventCount": fclFraLmiN393MonitoredEventCount,
       "fclFraLmiT391LinkIntegPollTimer": fclFraLmiT391LinkIntegPollTimer,
       "fclFraLmiT392PollingVerifTimer": fclFraLmiT392PollingVerifTimer,
       "fclFraPvcEndPointTable": fclFraPvcEndPointTable,
       "fclFraPvcEndPointEntry": fclFraPvcEndPointEntry,
       "fclFraPvcLogPortId": fclFraPvcLogPortId,
       "fclFraPvcDlci": fclFraPvcDlci,
       "fclFraPvcStatus": fclFraPvcStatus,
       "fclFraPvcCalledAddr": fclFraPvcCalledAddr,
       "fclFraPvcSubscriberNumber": fclFraPvcSubscriberNumber,
       "fclFraPvcCallDirection": fclFraPvcCallDirection,
       "fclFraPvcEncapsulation": fclFraPvcEncapsulation,
       "fclFraPvcMinRecallTimer": fclFraPvcMinRecallTimer,
       "fclFraPvcInactivityTimer": fclFraPvcInactivityTimer,
       "fclHdlcAccessLogPort": fclHdlcAccessLogPort,
       "fclHdlcLogPortTable": fclHdlcLogPortTable,
       "fclHdlcLogPortEntry": fclHdlcLogPortEntry,
       "fclHdlcLpLogPortId": fclHdlcLpLogPortId,
       "fclHdlcLpInterfaceId": fclHdlcLpInterfaceId,
       "fclHdlcLpCrcTransport": fclHdlcLpCrcTransport,
       "fclHdlcLpGroupingThreshold": fclHdlcLpGroupingThreshold,
       "fclHdlcLpAllDiscardThreshold": fclHdlcLpAllDiscardThreshold,
       "fclHdlcLpX25InterframeFlagCount": fclHdlcLpX25InterframeFlagCount,
       "fclHdlcLpInactivityCheckDelay": fclHdlcLpInactivityCheckDelay,
       "fclHdlcLpCompression": fclHdlcLpCompression,
       "fclHdlcLpCompressNegotiation": fclHdlcLpCompressNegotiation,
       "fclHdlcLpCompressScrambling": fclHdlcLpCompressScrambling,
       "fclHdlcLpCompressMultiPacketsTimer": fclHdlcLpCompressMultiPacketsTimer,
       "fclHdlcLpReliableVc": fclHdlcLpReliableVc,
       "fclHdlcLpCos": fclHdlcLpCos,
       "fclHdlcLpCir": fclHdlcLpCir,
       "fclHdlcLpMinCir": fclHdlcLpMinCir,
       "fclHdlcAutoCallTable": fclHdlcAutoCallTable,
       "fclHdlcAutoCallEntry": fclHdlcAutoCallEntry,
       "fclHdlcAutoLogPortId": fclHdlcAutoLogPortId,
       "fclHdlcAutoCalledAddr": fclHdlcAutoCalledAddr,
       "fclHdlcAutoSubscriberNumber": fclHdlcAutoSubscriberNumber,
       "fclHdlcAutoCallDirection": fclHdlcAutoCallDirection,
       "fclHdlcAutoEncapsulation": fclHdlcAutoEncapsulation,
       "fclHdlcAutoMinRecallTimer": fclHdlcAutoMinRecallTimer,
       "fclHdlcAutoInactivityTimer": fclHdlcAutoInactivityTimer,
       "fclSdlcLogPort": fclSdlcLogPort,
       "fclSdlcLogPortTable": fclSdlcLogPortTable,
       "fclSdlcLogPortEntry": fclSdlcLogPortEntry,
       "fclSdlcLpLogPortId": fclSdlcLpLogPortId,
       "fclSdlcLpInterfaceId": fclSdlcLpInterfaceId,
       "fclSdlcLpPhysicalUnitType": fclSdlcLpPhysicalUnitType,
       "fclSdlcLpSubscriberNumber": fclSdlcLpSubscriberNumber,
       "fclSdlcLpBitEncoding": fclSdlcLpBitEncoding,
       "fclSdlcLpUnknownPackets": fclSdlcLpUnknownPackets,
       "fclSdlcLpLogicalLinkProtocol": fclSdlcLpLogicalLinkProtocol,
       "fclSdlcLpPacketSize": fclSdlcLpPacketSize,
       "fclSdlcLpWindowSize": fclSdlcLpWindowSize,
       "fclSdlcLpCompression": fclSdlcLpCompression,
       "fclSdlcLpCompressNegotiation": fclSdlcLpCompressNegotiation,
       "fclSdlcLpCompressScrambling": fclSdlcLpCompressScrambling,
       "fclSdlcLpCompressMultiPacketsTimer": fclSdlcLpCompressMultiPacketsTimer,
       "fclSdlcLpReliableVc": fclSdlcLpReliableVc,
       "fclSdlcLpCos": fclSdlcLpCos,
       "fclSdlcLpCir": fclSdlcLpCir,
       "fclSdlcLpMinCir": fclSdlcLpMinCir,
       "fclSdlcLpBe": fclSdlcLpBe,
       "fclSdlcPrimaryPuLogPort": fclSdlcPrimaryPuLogPort,
       "fclSdlcPriLogPortTable": fclSdlcPriLogPortTable,
       "fclSdlcPriLogPortEntry": fclSdlcPriLogPortEntry,
       "fclSdlcPriLpLogPortId": fclSdlcPriLpLogPortId,
       "fclSdlcPriLpLinkType": fclSdlcPriLpLinkType,
       "fclSdlcPriLpRemPuIdentification": fclSdlcPriLpRemPuIdentification,
       "fclSdlcPriLpPollingGroupResponse": fclSdlcPriLpPollingGroupResponse,
       "fclSdlcPriLpPollingGroupAddress": fclSdlcPriLpPollingGroupAddress,
       "fclSdlcPriClusterTable": fclSdlcPriClusterTable,
       "fclSdlcPriClusterEntry": fclSdlcPriClusterEntry,
       "fclSdlcPriClusterLogPortId": fclSdlcPriClusterLogPortId,
       "fclSdlcPriClusterAddress": fclSdlcPriClusterAddress,
       "fclSdlcPriClusterStatus": fclSdlcPriClusterStatus,
       "fclSdlcPriClusterRemPu2CalledAddr": fclSdlcPriClusterRemPu2CalledAddr,
       "fclSdlcSecondaryPuLogPort": fclSdlcSecondaryPuLogPort,
       "fclSdlcSecLogPortTable": fclSdlcSecLogPortTable,
       "fclSdlcSecLogPortEntry": fclSdlcSecLogPortEntry,
       "fclSdlcSecLpLogPortId": fclSdlcSecLpLogPortId,
       "fclSdlcSecLpLinkType": fclSdlcSecLpLinkType,
       "fclSdlcSecLpRemPuIdentification": fclSdlcSecLpRemPuIdentification,
       "fclSdlcSecLpT1AcknowledgeTimer": fclSdlcSecLpT1AcknowledgeTimer,
       "fclSdlcSecLpN2RetryCount": fclSdlcSecLpN2RetryCount,
       "fclSdlcSecLpCallRetryCount": fclSdlcSecLpCallRetryCount,
       "fclSdlcSecLpPollingTimer": fclSdlcSecLpPollingTimer,
       "fclSdlcSecLpPollingMaxCount": fclSdlcSecLpPollingMaxCount,
       "fclSdlcSecClusterTable": fclSdlcSecClusterTable,
       "fclSdlcSecClusterEntry": fclSdlcSecClusterEntry,
       "fclSdlcSecClusterLogPortId": fclSdlcSecClusterLogPortId,
       "fclSdlcSecClusterAddress": fclSdlcSecClusterAddress,
       "fclSdlcSecClusterStatus": fclSdlcSecClusterStatus,
       "fclSdlcSecClusterCalledAddr": fclSdlcSecClusterCalledAddr,
       "fclSdlcSecClusterFacility": fclSdlcSecClusterFacility,
       "fclSdlcSecClusterFacThroughputClass": fclSdlcSecClusterFacThroughputClass,
       "fclSdlcSecClusterMinRecallTimer": fclSdlcSecClusterMinRecallTimer,
       "fclSdlcSecClusterRemPvcLogChannel": fclSdlcSecClusterRemPvcLogChannel,
       "fclSdlcSecClusterXidStringResponse": fclSdlcSecClusterXidStringResponse,
       "fclSdlcSecClusterCos": fclSdlcSecClusterCos,
       "fclSdlcSecClusterCir": fclSdlcSecClusterCir,
       "fclSdlcSecClusterCirmin": fclSdlcSecClusterCirmin,
       "fclSdlcSecClusterBc": fclSdlcSecClusterBc,
       "fclSdlcSecClusterBe": fclSdlcSecClusterBe,
       "fclVipLogPort": fclVipLogPort,
       "fclVipLogPortTable": fclVipLogPortTable,
       "fclVipLogPortEntry": fclVipLogPortEntry,
       "fclVipLpLogPortId": fclVipLpLogPortId,
       "fclVipLpInterfaceId": fclVipLpInterfaceId,
       "fclVipLpEmulationType": fclVipLpEmulationType,
       "fclVipLpResponseSurveyPollingTimer": fclVipLpResponseSurveyPollingTimer,
       "fclVipLpScreenRetryTimer": fclVipLpScreenRetryTimer,
       "fclVipLpPrinterRetryTimer": fclVipLpPrinterRetryTimer,
       "fclVipLpMessageRetryNumber": fclVipLpMessageRetryNumber,
       "fclVipLpPrinterMessagesManagement": fclVipLpPrinterMessagesManagement,
       "fclVipHostPadLogPort": fclVipHostPadLogPort,
       "fclVipHosLogPortTable": fclVipHosLogPortTable,
       "fclVipHosLogPortEntry": fclVipHosLogPortEntry,
       "fclVipHosLpLogPortId": fclVipHosLpLogPortId,
       "fclVipHosLpWaitTimeOutForPrinter": fclVipHosLpWaitTimeOutForPrinter,
       "fclVipHosLpRepAEot": fclVipHosLpRepAEot,
       "fclVipHosLpFtbcc": fclVipHosLpFtbcc,
       "fclVipHosElementTable": fclVipHosElementTable,
       "fclVipHosElementEntry": fclVipHosElementEntry,
       "fclVipHosElementId": fclVipHosElementId,
       "fclVipHosElemStatus": fclVipHosElemStatus,
       "fclVipHosElemLogPortId": fclVipHosElemLogPortId,
       "fclVipHosElemType": fclVipHosElemType,
       "fclVipHosElemAddress": fclVipHosElemAddress,
       "fclVipHosStationTable": fclVipHosStationTable,
       "fclVipHosStationEntry": fclVipHosStationEntry,
       "fclVipHosStatElementId": fclVipHosStatElementId,
       "fclVipHosStatStationAddress": fclVipHosStatStationAddress,
       "fclVipHosStatStatus": fclVipHosStatStatus,
       "fclVipClusterLogPort": fclVipClusterLogPort,
       "fclVipCluLogPortTable": fclVipCluLogPortTable,
       "fclVipCluLogPortEntry": fclVipCluLogPortEntry,
       "fclVipCluLpLogPortId": fclVipCluLpLogPortId,
       "fclVipCluLpPollingTimer": fclVipCluLpPollingTimer,
       "fclVipCluLpFailedPollingMaxNumber": fclVipCluLpFailedPollingMaxNumber,
       "fclVipCluLpPollingTypeAfterSelect": fclVipCluLpPollingTypeAfterSelect,
       "fclVipCluLpScreenKeepTimer": fclVipCluLpScreenKeepTimer,
       "fclVipCluElementTable": fclVipCluElementTable,
       "fclVipCluElementEntry": fclVipCluElementEntry,
       "fclVipCluElementId": fclVipCluElementId,
       "fclVipCluElemStatus": fclVipCluElemStatus,
       "fclVipCluElemLogPortId": fclVipCluElemLogPortId,
       "fclVipCluElemType": fclVipCluElemType,
       "fclVipCluElemAddress": fclVipCluElemAddress,
       "fclVipCluElemCalledAddr": fclVipCluElemCalledAddr,
       "fclVipCluElemMinRecallTimer": fclVipCluElemMinRecallTimer,
       "fclVipCluStationTable": fclVipCluStationTable,
       "fclVipCluStationEntry": fclVipCluStationEntry,
       "fclVipCluStatElementId": fclVipCluStatElementId,
       "fclVipCluStatStationAddress": fclVipCluStatStationAddress,
       "fclVipCluStatStatus": fclVipCluStatStatus,
       "fclBsc3270LogPort": fclBsc3270LogPort,
       "fclB3270LogPortTable": fclB3270LogPortTable,
       "fclB3270LogPortEntry": fclB3270LogPortEntry,
       "fclB3270LpLogPortId": fclB3270LpLogPortId,
       "fclB3270LpInterfaceId": fclB3270LpInterfaceId,
       "fclB3270LpEmulationType": fclB3270LpEmulationType,
       "fclB3270LpCodingParityType": fclB3270LpCodingParityType,
       "fclB3270LpNoAnswerWatchDog": fclB3270LpNoAnswerWatchDog,
       "fclB3270LpMessageRetryNumber": fclB3270LpMessageRetryNumber,
       "fclB3270HostPadLogPort": fclB3270HostPadLogPort,
       "fclB3270HosLogPortTable": fclB3270HosLogPortTable,
       "fclB3270HosLogPortEntry": fclB3270HosLogPortEntry,
       "fclB3270HosLpLogPortId": fclB3270HosLpLogPortId,
       "fclB3270HosLpLineWatchDog": fclB3270HosLpLineWatchDog,
       "fclB3270HosLpWackTransmission": fclB3270HosLpWackTransmission,
       "fclB3270HosLpAnswerToPolling": fclB3270HosLpAnswerToPolling,
       "fclB3270HosClusterTable": fclB3270HosClusterTable,
       "fclB3270HosClusterEntry": fclB3270HosClusterEntry,
       "fclB3270HosClusterLogPortId": fclB3270HosClusterLogPortId,
       "fclB3270HosClusterCluAdd": fclB3270HosClusterCluAdd,
       "fclB3270HosClusterStaAdd": fclB3270HosClusterStaAdd,
       "fclB3270HosClusterStatus": fclB3270HosClusterStatus,
       "fclB3270ClusterLogPort": fclB3270ClusterLogPort,
       "fclB3270CluLogPortTable": fclB3270CluLogPortTable,
       "fclB3270CluLogPortEntry": fclB3270CluLogPortEntry,
       "fclB3270CluLpLogPortId": fclB3270CluLpLogPortId,
       "fclB3270CluLpPollingTimer": fclB3270CluLpPollingTimer,
       "fclB3270CluLpMaxNumberOfUnwPolls": fclB3270CluLpMaxNumberOfUnwPolls,
       "fclB3270CluLpReconnectionType": fclB3270CluLpReconnectionType,
       "fclB3270CluClusterTable": fclB3270CluClusterTable,
       "fclB3270CluClusterEntry": fclB3270CluClusterEntry,
       "fclB3270CluClusterLogPortId": fclB3270CluClusterLogPortId,
       "fclB3270CluClusterCluAdd": fclB3270CluClusterCluAdd,
       "fclB3270CluClusterStaAdd": fclB3270CluClusterStaAdd,
       "fclB3270CluClusterStatus": fclB3270CluClusterStatus,
       "fclB3270CluCallTable": fclB3270CluCallTable,
       "fclB3270CluCallEntry": fclB3270CluCallEntry,
       "fclB3270CluCallLogPortId": fclB3270CluCallLogPortId,
       "fclB3270CluCallCluAdd": fclB3270CluCallCluAdd,
       "fclB3270CluCallStatus": fclB3270CluCallStatus,
       "fclB3270CluCallCallAddr": fclB3270CluCallCallAddr,
       "fclB3270CluCallMinRecallTimer": fclB3270CluCallMinRecallTimer,
       "fclBscX780LogPort": fclBscX780LogPort,
       "fclBX780LogPortTable": fclBX780LogPortTable,
       "fclBX780LogPortEntry": fclBX780LogPortEntry,
       "fclBX780LpLogPortId": fclBX780LpLogPortId,
       "fclBX780LpInterfaceId": fclBX780LpInterfaceId,
       "fclBX780LpProtocolType": fclBX780LpProtocolType,
       "fclBX780LpCallDirection": fclBX780LpCallDirection,
       "fclBX780LpDeconnectTimer": fclBX780LpDeconnectTimer,
       "fclBX780LpSurveyTimer": fclBX780LpSurveyTimer,
       "fclBX780LpCodingParityType": fclBX780LpCodingParityType,
       "fclBX780LpEquipementType": fclBX780LpEquipementType,
       "fclBX780LpENQRetransTimer": fclBX780LpENQRetransTimer,
       "fclBX780LpAuthorAnswerTimer": fclBX780LpAuthorAnswerTimer,
       "fclBX780LpNoAnswerWatchDog": fclBX780LpNoAnswerWatchDog,
       "fclBX780LpMessageRetryNumber": fclBX780LpMessageRetryNumber,
       "fclBX780ConnectionTable": fclBX780ConnectionTable,
       "fclBX780ConnectionEntry": fclBX780ConnectionEntry,
       "fclBX780ConnLogPortId": fclBX780ConnLogPortId,
       "fclBX780ConnCalledAddr": fclBX780ConnCalledAddr,
       "fclBX780ConnMinimumRecallTimer": fclBX780ConnMinimumRecallTimer,
       "fclBX780IdentTable": fclBX780IdentTable,
       "fclBX780IdentEntry": fclBX780IdentEntry,
       "fclBX780IdentLogPortId": fclBX780IdentLogPortId,
       "fclBX780IdentTermId": fclBX780IdentTermId,
       "fclBX780IdentStatus": fclBX780IdentStatus,
       "fclBscSctLogPort": fclBscSctLogPort,
       "fclBSctLogPortTable": fclBSctLogPortTable,
       "fclBSctLogPortEntry": fclBSctLogPortEntry,
       "fclBSctLpLogPortId": fclBSctLpLogPortId,
       "fclBSctLpInterfaceId": fclBSctLpInterfaceId,
       "fclBSctLpLinkType": fclBSctLpLinkType,
       "fclBSctLpNumberOfSYN": fclBSctLpNumberOfSYN,
       "fclBSctLpSignalEnvelope": fclBSctLpSignalEnvelope,
       "fclBSctLpCodingParityType": fclBSctLpCodingParityType,
       "fclBSctLpMaxFrameNumberIn": fclBSctLpMaxFrameNumberIn,
       "fclBSctLpUnderrunManagement": fclBSctLpUnderrunManagement,
       "fclBSctLpOnePadSuppressed": fclBSctLpOnePadSuppressed,
       "fclBSctConnectionTable": fclBSctConnectionTable,
       "fclBSctConnectionEntry": fclBSctConnectionEntry,
       "fclBSctConnLogPortId": fclBSctConnLogPortId,
       "fclBSctConnCalledAddr": fclBSctConnCalledAddr,
       "fclBSctConnCallDirection": fclBSctConnCallDirection,
       "fclBSctConnSubscriberNumber": fclBSctConnSubscriberNumber,
       "fclBSctConnMinimumRecallTimer": fclBSctConnMinimumRecallTimer,
       "fclBSctProtocolDefinition1Table": fclBSctProtocolDefinition1Table,
       "fclBSctProtocolDefinition1Entry": fclBSctProtocolDefinition1Entry,
       "fclBSctProtDef1LogPortId": fclBSctProtDef1LogPortId,
       "fclBSctProtDef1PermanentDelimiter1": fclBSctProtDef1PermanentDelimiter1,
       "fclBSctProtDef1PermanentDelimiter2": fclBSctProtDef1PermanentDelimiter2,
       "fclBSctProtDef1PermanentDelimiter3": fclBSctProtDef1PermanentDelimiter3,
       "fclBSctProtDef1PermanentDelimiter4": fclBSctProtDef1PermanentDelimiter4,
       "fclBSctProtDef1PermanentDelimiter5": fclBSctProtDef1PermanentDelimiter5,
       "fclBSctProtDef1StartFrameDelimiter1": fclBSctProtDef1StartFrameDelimiter1,
       "fclBSctProtDef1StartFrameDelimiter2": fclBSctProtDef1StartFrameDelimiter2,
       "fclBSctProtDef1StartFrameDelimiter3": fclBSctProtDef1StartFrameDelimiter3,
       "fclBSctProtDef1NbCharInhibited": fclBSctProtDef1NbCharInhibited,
       "fclBSctProtDef1StFrDelimiterInhib1": fclBSctProtDef1StFrDelimiterInhib1,
       "fclBSctProtDef1StFrDelimiterInhib2": fclBSctProtDef1StFrDelimiterInhib2,
       "fclBSctProtocolDefinition2Table": fclBSctProtocolDefinition2Table,
       "fclBSctProtocolDefinition2Entry": fclBSctProtocolDefinition2Entry,
       "fclBSctProtDef2LogPortId": fclBSctProtDef2LogPortId,
       "fclBSctProtDef2DataFrameTerminator1": fclBSctProtDef2DataFrameTerminator1,
       "fclBSctProtDef2DataFrameTerminator2": fclBSctProtDef2DataFrameTerminator2,
       "fclBSctProtDef2DataFrameTerminator3": fclBSctProtDef2DataFrameTerminator3,
       "fclBSctProtDef2ControlFrameTerminator1": fclBSctProtDef2ControlFrameTerminator1,
       "fclBSctProtDef2ControlFrameTerminator2": fclBSctProtDef2ControlFrameTerminator2,
       "fclBSctProtDef2ACK0": fclBSctProtDef2ACK0,
       "fclBSctProtDef2ACK1": fclBSctProtDef2ACK1,
       "fclBSctProtDef2WACK": fclBSctProtDef2WACK,
       "fclBSctProtDef2RVI": fclBSctProtDef2RVI,
       "fclBSctProtDef2WABT": fclBSctProtDef2WABT,
       "fclX25SlpAccess": fclX25SlpAccess,
       "fclX25SlpAccessTable": fclX25SlpAccessTable,
       "fclX25SlpAccessEntry": fclX25SlpAccessEntry,
       "fclX25AccLogPortId": fclX25AccLogPortId,
       "fclX25AccInterfaceId": fclX25AccInterfaceId,
       "fclX25AccConnectionType": fclX25AccConnectionType,
       "fclX25AccSubscriberNumber": fclX25AccSubscriberNumber,
       "fclX25AccPdnLinkAddress": fclX25AccPdnLinkAddress,
       "fclX25AccX25AccessConfigId": fclX25AccX25AccessConfigId,
       "fclX25AccIsdnBackupEnabling": fclX25AccIsdnBackupEnabling,
       "fclX25AccPstnBackupEnabling": fclX25AccPstnBackupEnabling,
       "fclX25AccPrivateNetTable": fclX25AccPrivateNetTable,
       "fclX25AccPrivateNetEntry": fclX25AccPrivateNetEntry,
       "fclX25AccPrivLogPortId": fclX25AccPrivLogPortId,
       "fclX25AccPrivX25FieldsSave": fclX25AccPrivX25FieldsSave,
       "fclX25AccPrivX25FieldsChanges": fclX25AccPrivX25FieldsChanges,
       "fclX25AccPermanentVcTable": fclX25AccPermanentVcTable,
       "fclX25AccPermanentVcEntry": fclX25AccPermanentVcEntry,
       "fclX25AccPvcLogPortId": fclX25AccPvcLogPortId,
       "fclX25AccPvcLocalLogChannel": fclX25AccPvcLocalLogChannel,
       "fclX25AccPvcStatus": fclX25AccPvcStatus,
       "fclX25AccPvcCalledAddr": fclX25AccPvcCalledAddr,
       "fclX25AccPvcRemoteLogChannel": fclX25AccPvcRemoteLogChannel,
       "fclX25AccPvcMinimumRecallTimer": fclX25AccPvcMinimumRecallTimer,
       "fclX25AccPvcCallDirection": fclX25AccPvcCallDirection,
       "fclX25AccPvcFacility": fclX25AccPvcFacility,
       "fclX25AccPvcFacThroughputClass": fclX25AccPvcFacThroughputClass,
       "fclX25AccSwitchOverTable": fclX25AccSwitchOverTable,
       "fclX25AccSwitchOverEntry": fclX25AccSwitchOverEntry,
       "fclX25AccSwLogPortId": fclX25AccSwLogPortId,
       "fclX25AccSwMeasureCount": fclX25AccSwMeasureCount,
       "fclX25AccSwSwitchThreshold": fclX25AccSwSwitchThreshold,
       "fclX25AccSwSwitchBackThreshold": fclX25AccSwSwitchBackThreshold,
       "fclX25AccIsdnBackupTable": fclX25AccIsdnBackupTable,
       "fclX25AccIsdnBackupEntry": fclX25AccIsdnBackupEntry,
       "fclX25AccIsdnBackLogPortId": fclX25AccIsdnBackLogPortId,
       "fclX25AccIsdnBackIsdnInterfaceId": fclX25AccIsdnBackIsdnInterfaceId,
       "fclX25AccIsdnBackStatus": fclX25AccIsdnBackStatus,
       "fclX25AccIsdnRemotePeerTable": fclX25AccIsdnRemotePeerTable,
       "fclX25AccIsdnRemotePeerEntry": fclX25AccIsdnRemotePeerEntry,
       "fclX25AccIsdnRemLogPortId": fclX25AccIsdnRemLogPortId,
       "fclX25AccIsdnRemIsdnInterfaceId": fclX25AccIsdnRemIsdnInterfaceId,
       "fclX25AccIsdnRemStatus": fclX25AccIsdnRemStatus,
       "fclX25AccIsdnRemX25AccessConfigId": fclX25AccIsdnRemX25AccessConfigId,
       "fclX25AccIsdnRemPriority": fclX25AccIsdnRemPriority,
       "fclX25AccIsdnRemCallRetryCount": fclX25AccIsdnRemCallRetryCount,
       "fclX25AccPstnBackupTable": fclX25AccPstnBackupTable,
       "fclX25AccPstnBackupEntry": fclX25AccPstnBackupEntry,
       "fclX25AccPstnBackLogPortId": fclX25AccPstnBackLogPortId,
       "fclX25AccPstnBackStatus": fclX25AccPstnBackStatus,
       "fclX25AccPstnBackInterfaceId": fclX25AccPstnBackInterfaceId,
       "fclX25AccPstnBackPstnNumber": fclX25AccPstnBackPstnNumber,
       "fclX25AccPstnBackX25AccessConfigId": fclX25AccPstnBackX25AccessConfigId,
       "fclX25InDIsdn": fclX25InDIsdn,
       "fclX25InDIsdnTable": fclX25InDIsdnTable,
       "fclX25InDIsdnEntry": fclX25InDIsdnEntry,
       "fclX25InDLogPortId": fclX25InDLogPortId,
       "fclX25InDIsdnInterfaceId": fclX25InDIsdnInterfaceId,
       "fclX25InDTei": fclX25InDTei,
       "fclX25InDBackupEnabling": fclX25InDBackupEnabling,
       "fclX25InDConnectionType": fclX25InDConnectionType,
       "fclX25InDSubscriberNumber": fclX25InDSubscriberNumber,
       "fclX25InDPdnLinkAddress": fclX25InDPdnLinkAddress,
       "fclX25InDX25AccessConfigId": fclX25InDX25AccessConfigId,
       "fclX25InDInactivityTimer": fclX25InDInactivityTimer,
       "fclX25InDActiveLinkAtBootTime": fclX25InDActiveLinkAtBootTime,
       "fclX25InDSwitchOverTable": fclX25InDSwitchOverTable,
       "fclX25InDSwitchOverEntry": fclX25InDSwitchOverEntry,
       "fclX25InDSwLogPortId": fclX25InDSwLogPortId,
       "fclX25InDSwMeasureCount": fclX25InDSwMeasureCount,
       "fclX25InDSwSwitchThreshold": fclX25InDSwSwitchThreshold,
       "fclX25InDSwSwitchBackThreshold": fclX25InDSwSwitchBackThreshold,
       "fclX25InDIsdnBackupTable": fclX25InDIsdnBackupTable,
       "fclX25InDIsdnBackupEntry": fclX25InDIsdnBackupEntry,
       "fclX25InDIsdnBackLogPortId": fclX25InDIsdnBackLogPortId,
       "fclX25InDIsdnBackIsdnInterfaceId": fclX25InDIsdnBackIsdnInterfaceId,
       "fclX25InDIsdnBackStatus": fclX25InDIsdnBackStatus,
       "fclX25InDIsdnRemotePeerTable": fclX25InDIsdnRemotePeerTable,
       "fclX25InDIsdnRemotePeerEntry": fclX25InDIsdnRemotePeerEntry,
       "fclX25InDIsdnRemLogPortId": fclX25InDIsdnRemLogPortId,
       "fclX25InDIsdnRemIsdnInterfaceId": fclX25InDIsdnRemIsdnInterfaceId,
       "fclX25InDIsdnRemStatus": fclX25InDIsdnRemStatus,
       "fclX25InDIsdnRemConnectionType": fclX25InDIsdnRemConnectionType,
       "fclX25InDIsdnRemSubscriberNumber": fclX25InDIsdnRemSubscriberNumber,
       "fclX25InDIsdnRemPdnLinkAddress": fclX25InDIsdnRemPdnLinkAddress,
       "fclX25InDIsdnRemX25AccConfigId": fclX25InDIsdnRemX25AccConfigId,
       "fclX25InDIsdnRemPriority": fclX25InDIsdnRemPriority,
       "fclX25InDIsdnRemCallRetryCount": fclX25InDIsdnRemCallRetryCount,
       "fclX25InBIsdn": fclX25InBIsdn,
       "fclX25InBIsdnTable": fclX25InBIsdnTable,
       "fclX25InBIsdnEntry": fclX25InBIsdnEntry,
       "fclX25InBLogPortId": fclX25InBLogPortId,
       "fclX25InBIsdnInterfaceId": fclX25InBIsdnInterfaceId,
       "fclX25InBRemotePeerTable": fclX25InBRemotePeerTable,
       "fclX25InBRemotePeerEntry": fclX25InBRemotePeerEntry,
       "fclX25InBRemX121Addr": fclX25InBRemX121Addr,
       "fclX25InBRemPeerId": fclX25InBRemPeerId,
       "fclX25InBRemStatus": fclX25InBRemStatus,
       "fclX25InBRemConnectionType": fclX25InBRemConnectionType,
       "fclX25InBRemSubscriberNumber": fclX25InBRemSubscriberNumber,
       "fclX25InBRemPdnLinkAddress": fclX25InBRemPdnLinkAddress,
       "fclX25InBRemX25ConfigId": fclX25InBRemX25ConfigId,
       "fclX25InBRemPriority": fclX25InBRemPriority,
       "fclX25InBRemCallRetryCount": fclX25InBRemCallRetryCount,
       "fclX25InBRemLinkCheckPeriod": fclX25InBRemLinkCheckPeriod,
       "fclX25InBRemCheckPeriodCount": fclX25InBRemCheckPeriodCount,
       "fclX25InPstn": fclX25InPstn,
       "fclX25InPstnTable": fclX25InPstnTable,
       "fclX25InPstnEntry": fclX25InPstnEntry,
       "fclX25PstnLogPortId": fclX25PstnLogPortId,
       "fclX25PstnInterfaceId": fclX25PstnInterfaceId,
       "fclX25PstnX25InterNodeConfigId": fclX25PstnX25InterNodeConfigId,
       "fclX25PstnRemotePeerTable": fclX25PstnRemotePeerTable,
       "fclX25PstnRemotePeerEntry": fclX25PstnRemotePeerEntry,
       "fclX25PstnRemX121Addr": fclX25PstnRemX121Addr,
       "fclX25PstnRemStatus": fclX25PstnRemStatus,
       "fclX25PstnRemPstnNumber": fclX25PstnRemPstnNumber,
       "fclX25SlpInterNode": fclX25SlpInterNode,
       "fclX25SlpInterNodeTable": fclX25SlpInterNodeTable,
       "fclX25SlpInterNodeEntry": fclX25SlpInterNodeEntry,
       "fclX25SlpLogPortId": fclX25SlpLogPortId,
       "fclX25SlpInterfaceId": fclX25SlpInterfaceId,
       "fclX25SlpIsdnBackupEnabling": fclX25SlpIsdnBackupEnabling,
       "fclX25SlpPstnBackupEnabling": fclX25SlpPstnBackupEnabling,
       "fclX25SlpX25InterNodeConfigId": fclX25SlpX25InterNodeConfigId,
       "fclX25SlpDARApplicable": fclX25SlpDARApplicable,
       "fclX25SlpBackupTimer": fclX25SlpBackupTimer,
       "fclX25SlpSwitchOverTable": fclX25SlpSwitchOverTable,
       "fclX25SlpSwitchOverEntry": fclX25SlpSwitchOverEntry,
       "fclX25SlpSwLogPortId": fclX25SlpSwLogPortId,
       "fclX25SlpSwMeasureCount": fclX25SlpSwMeasureCount,
       "fclX25SlpSwSwitchThreshold": fclX25SlpSwSwitchThreshold,
       "fclX25SlpSwSwitchBackThreshold": fclX25SlpSwSwitchBackThreshold,
       "fclX25SlpIsdnBackupTable": fclX25SlpIsdnBackupTable,
       "fclX25SlpIsdnBackupEntry": fclX25SlpIsdnBackupEntry,
       "fclX25SlpIsdnBackLogPortId": fclX25SlpIsdnBackLogPortId,
       "fclX25SlpIsdnBackIsdnInterfaceId": fclX25SlpIsdnBackIsdnInterfaceId,
       "fclX25SlpIsdnBackStatus": fclX25SlpIsdnBackStatus,
       "fclX25SlpIsdnRemotePeerTable": fclX25SlpIsdnRemotePeerTable,
       "fclX25SlpIsdnRemotePeerEntry": fclX25SlpIsdnRemotePeerEntry,
       "fclX25SlpIsdnRemLogPortId": fclX25SlpIsdnRemLogPortId,
       "fclX25SlpIsdnRemIsdnInterfaceId": fclX25SlpIsdnRemIsdnInterfaceId,
       "fclX25SlpIsdnRemStatus": fclX25SlpIsdnRemStatus,
       "fclX25SlpIsdnRemX25InterNodeConfigId": fclX25SlpIsdnRemX25InterNodeConfigId,
       "fclX25SlpIsdnRemPriority": fclX25SlpIsdnRemPriority,
       "fclX25SlpIsdnRemCallRetryCount": fclX25SlpIsdnRemCallRetryCount,
       "fclX25SlpPstnBackupTable": fclX25SlpPstnBackupTable,
       "fclX25SlpPstnBackupEntry": fclX25SlpPstnBackupEntry,
       "fclX25SlpPstnBackLogPortId": fclX25SlpPstnBackLogPortId,
       "fclX25SlpPstnBackStatus": fclX25SlpPstnBackStatus,
       "fclX25SlpPstnBackInterfaceId": fclX25SlpPstnBackInterfaceId,
       "fclX25SlpPstnBackPstnNumber": fclX25SlpPstnBackPstnNumber,
       "fclX25SlpPstnBackX25InterNodeConfigId": fclX25SlpPstnBackX25InterNodeConfigId,
       "fclX25Mlp": fclX25Mlp,
       "fclX25MlpTable": fclX25MlpTable,
       "fclX25MlpEntry": fclX25MlpEntry,
       "fclX25MlpLogPortId": fclX25MlpLogPortId,
       "fclX25MlpLink1InterfaceId": fclX25MlpLink1InterfaceId,
       "fclX25MlpLink2InterfaceId": fclX25MlpLink2InterfaceId,
       "fclX25MlpLink3InterfaceId": fclX25MlpLink3InterfaceId,
       "fclX25MlpLink4InterfaceId": fclX25MlpLink4InterfaceId,
       "fclX25MlpIsdnOverflow": fclX25MlpIsdnOverflow,
       "fclX25MlpPstnOverflow": fclX25MlpPstnOverflow,
       "fclX25MlpX25InterNodeConfigId": fclX25MlpX25InterNodeConfigId,
       "fclX25MlpDARApplicable": fclX25MlpDARApplicable,
       "fclX25MlpParameterTable": fclX25MlpParameterTable,
       "fclX25MlpParameterEntry": fclX25MlpParameterEntry,
       "fclX25MlpParamLogPortId": fclX25MlpParamLogPortId,
       "fclX25MlpMwMultilinkWindowSize": fclX25MlpMwMultilinkWindowSize,
       "fclX25MlpRxMlpMxWinGuardRegion": fclX25MlpRxMlpMxWinGuardRegion,
       "fclX25MlpMt1LostFrameTimer": fclX25MlpMt1LostFrameTimer,
       "fclX25MlpMt3ResetConfirmationTimer": fclX25MlpMt3ResetConfirmationTimer,
       "fclX25MlpMt4DownLinkDetectionTimer": fclX25MlpMt4DownLinkDetectionTimer,
       "fclX25MlpFramesMaxCountByLink": fclX25MlpFramesMaxCountByLink,
       "fclX25MlpRestartTxAfterResetRx": fclX25MlpRestartTxAfterResetRx,
       "fclX25MlpTns3Level3CheckTimer": fclX25MlpTns3Level3CheckTimer,
       "fclX25MlpOverflowTable": fclX25MlpOverflowTable,
       "fclX25MlpOverflowEntry": fclX25MlpOverflowEntry,
       "fclX25MlpOvLogPortId": fclX25MlpOvLogPortId,
       "fclX25MlpOvMeasureCount": fclX25MlpOvMeasureCount,
       "fclX25MlpOvOverflowThreshold": fclX25MlpOvOverflowThreshold,
       "fclX25MlpOvOverflowBackThreshold": fclX25MlpOvOverflowBackThreshold,
       "fclX25MlpIsdnOverflowTable": fclX25MlpIsdnOverflowTable,
       "fclX25MlpIsdnOverflowEntry": fclX25MlpIsdnOverflowEntry,
       "fclX25MlpIsdnOverLogPortId": fclX25MlpIsdnOverLogPortId,
       "fclX25MlpIsdnOverIsdnInterfaceId": fclX25MlpIsdnOverIsdnInterfaceId,
       "fclX25MlpIsdnOverStatus": fclX25MlpIsdnOverStatus,
       "fclX25MlpIsdnOverBChannelCount": fclX25MlpIsdnOverBChannelCount,
       "fclX25MlpIsdnRemotePeerTable": fclX25MlpIsdnRemotePeerTable,
       "fclX25MlpIsdnRemotePeerEntry": fclX25MlpIsdnRemotePeerEntry,
       "fclX25MlpIsdnRemLogPortId": fclX25MlpIsdnRemLogPortId,
       "fclX25MlpIsdnRemPeerId": fclX25MlpIsdnRemPeerId,
       "fclX25MlpIsdnRemStatus": fclX25MlpIsdnRemStatus,
       "fclX25MlpIsdnRemPriority": fclX25MlpIsdnRemPriority,
       "fclX25MlpIsdnRemCallRetryCount": fclX25MlpIsdnRemCallRetryCount,
       "fclX25MlpPstnOverflowTable": fclX25MlpPstnOverflowTable,
       "fclX25MlpPstnOverflowEntry": fclX25MlpPstnOverflowEntry,
       "fclX25MlpPstnOvLogPortId": fclX25MlpPstnOvLogPortId,
       "fclX25MlpPstnOvStatus": fclX25MlpPstnOvStatus,
       "fclX25MlpPstnOvInterfaceId": fclX25MlpPstnOvInterfaceId,
       "fclX25MlpPstnOvPstnNumber": fclX25MlpPstnOvPstnNumber,
       "fclPointToPointProtocol": fclPointToPointProtocol,
       "fclPppSerialLinkAccess": fclPppSerialLinkAccess,
       "fclPppSerialLogPortTable": fclPppSerialLogPortTable,
       "fclPppSerialLogPortEntry": fclPppSerialLogPortEntry,
       "fclPppSerLpLogPortId": fclPppSerLpLogPortId,
       "fclPppSerLpInterfaceId": fclPppSerLpInterfaceId,
       "fclPppSerLpLocalSubscriberNb": fclPppSerLpLocalSubscriberNb,
       "fclPppSerLpConfigId": fclPppSerLpConfigId,
       "fclPppSerLpCos": fclPppSerLpCos,
       "fclPppSerLpCir": fclPppSerLpCir,
       "fclPppSerLpMinCir": fclPppSerLpMinCir,
       "fclPppSerLpBe": fclPppSerLpBe,
       "fclPppSerialAutoCallTable": fclPppSerialAutoCallTable,
       "fclPppSerialAutoCallEntry": fclPppSerialAutoCallEntry,
       "fclPppSerAutoLogPortId": fclPppSerAutoLogPortId,
       "fclPppSerAutoStatus": fclPppSerAutoStatus,
       "fclPppSerAutoRemoteAddress": fclPppSerAutoRemoteAddress,
       "fclPppSerAutoMinimumRecallTimer": fclPppSerAutoMinimumRecallTimer,
       "fclPppSerAutoInactivityTimer": fclPppSerAutoInactivityTimer,
       "fclPppSerAutoReliableVc": fclPppSerAutoReliableVc,
       "fclPppSerAutoCompression": fclPppSerAutoCompression,
       "fclPppSerAutoCompressNegotiation": fclPppSerAutoCompressNegotiation,
       "fclPppSerAutoCompressScrambling": fclPppSerAutoCompressScrambling,
       "fclPppSerAutoCompressMultiPktTimer": fclPppSerAutoCompressMultiPktTimer,
       "fclPppPstnAccess": fclPppPstnAccess,
       "fclPppPstnLogPortTable": fclPppPstnLogPortTable,
       "fclPppPstnLogPortEntry": fclPppPstnLogPortEntry,
       "fclPppPstnLpLogPortId": fclPppPstnLpLogPortId,
       "fclPppPstnLpInterfaceId": fclPppPstnLpInterfaceId,
       "fclPppPstnLpLocalSubscriberNb": fclPppPstnLpLocalSubscriberNb,
       "fclPppPstnLpConfigId": fclPppPstnLpConfigId,
       "fclPppPstnRemotePeerTable": fclPppPstnRemotePeerTable,
       "fclPppPstnRemotePeerEntry": fclPppPstnRemotePeerEntry,
       "fclPppPstnRemX121Addr": fclPppPstnRemX121Addr,
       "fclPppPstnRemStatus": fclPppPstnRemStatus,
       "fclPppPstnRemPstnNumber": fclPppPstnRemPstnNumber,
       "fclPppBIsdnAccess": fclPppBIsdnAccess,
       "fclPppBIsdnLogPortTable": fclPppBIsdnLogPortTable,
       "fclPppBIsdnLogPortEntry": fclPppBIsdnLogPortEntry,
       "fclPppBIsdnLpLogPortId": fclPppBIsdnLpLogPortId,
       "fclPppBIsdnLpIsdnInterfaceId": fclPppBIsdnLpIsdnInterfaceId,
       "fclPppBIsdnLocalBriTable": fclPppBIsdnLocalBriTable,
       "fclPppBIsdnLocalBriEntry": fclPppBIsdnLocalBriEntry,
       "fclPppBIsdnBriId": fclPppBIsdnBriId,
       "fclPppBIsdnBriStatus": fclPppBIsdnBriStatus,
       "fclPppBIsdnBriLocalSubsNb1": fclPppBIsdnBriLocalSubsNb1,
       "fclPppBIsdnBriLocalSubsNb2": fclPppBIsdnBriLocalSubsNb2,
       "fclPppBIsdnRemotePeerTable": fclPppBIsdnRemotePeerTable,
       "fclPppBIsdnRemotePeerEntry": fclPppBIsdnRemotePeerEntry,
       "fclPppBIsdnRemX121Addr": fclPppBIsdnRemX121Addr,
       "fclPppBIsdnRemPeerId": fclPppBIsdnRemPeerId,
       "fclPppBIsdnRemStatus": fclPppBIsdnRemStatus,
       "fclPppBIsdnRemConfigId": fclPppBIsdnRemConfigId,
       "fclPppBIsdnRemPriority": fclPppBIsdnRemPriority,
       "fclPppBIsdnRemCallRetryCount": fclPppBIsdnRemCallRetryCount,
       "fclPppBIsdnRemLinkCheckPeriod": fclPppBIsdnRemLinkCheckPeriod,
       "fclPppBIsdnRemCheckPeriodCount": fclPppBIsdnRemCheckPeriodCount,
       "fclPppBIsdnLocalPriTable": fclPppBIsdnLocalPriTable,
       "fclPppBIsdnLocalPriEntry": fclPppBIsdnLocalPriEntry,
       "fclPppBIsdnPriId": fclPppBIsdnPriId,
       "fclPppBIsdnPriStatus": fclPppBIsdnPriStatus,
       "fclPppBIsdnPriLocalSubs": fclPppBIsdnPriLocalSubs,
       "fclPppConfig": fclPppConfig,
       "fclPppConfigurationsTable": fclPppConfigurationsTable,
       "fclPppConfigurationsEntry": fclPppConfigurationsEntry,
       "fclPppCfgConfigId": fclPppCfgConfigId,
       "fclPppCfgStatus": fclPppCfgStatus,
       "fclPppCfgDescription": fclPppCfgDescription,
       "fclPppCfgLcpMagicNumber": fclPppCfgLcpMagicNumber,
       "fclPppCfgLcpLocalMru": fclPppCfgLcpLocalMru,
       "fclPppCfgLcpLocalMtu": fclPppCfgLcpLocalMtu,
       "fclPppCfgNcpBridge": fclPppCfgNcpBridge,
       "fclPppCfgNcpIp": fclPppCfgNcpIp,
       "fclPppCfgNcpIpx": fclPppCfgNcpIpx,
       "fclPppCfgNcpClnp": fclPppCfgNcpClnp,
       "fclPppCfgAuthentication": fclPppCfgAuthentication,
       "fclPppCfgAuthenticationMode": fclPppCfgAuthenticationMode,
       "fclPppCfgIpAddrAssignment": fclPppCfgIpAddrAssignment,
       "fclPppConfigTimersTable": fclPppConfigTimersTable,
       "fclPppConfigTimersEntry": fclPppConfigTimersEntry,
       "fclPppCftConfigId": fclPppCftConfigId,
       "fclPppCftLcpEchoRequestPeriod": fclPppCftLcpEchoRequestPeriod,
       "fclPppCftConnectionTimer": fclPppCftConnectionTimer,
       "fclPppCftRestartTimer": fclPppCftRestartTimer,
       "fclPppCftConfigureMaxCount": fclPppCftConfigureMaxCount,
       "fclPppCftTerminateMaxCount": fclPppCftTerminateMaxCount,
       "fclPppCftFailureMaxCount": fclPppCftFailureMaxCount,
       "fclPppConfigAuthentication": fclPppConfigAuthentication,
       "fclPppCfaLocalIdentifier": fclPppCfaLocalIdentifier,
       "fclPppCfaLocalPassword": fclPppCfaLocalPassword,
       "fclPppCfaRemotePeerTable": fclPppCfaRemotePeerTable,
       "fclPppCfaRemotePeerEntry": fclPppCfaRemotePeerEntry,
       "fclPppCfaRemPeerId": fclPppCfaRemPeerId,
       "fclPppCfaRemStatus": fclPppCfaRemStatus,
       "fclPppCfaRemIdentifier": fclPppCfaRemIdentifier,
       "fclPppCfaRemPassword": fclPppCfaRemPassword,
       "fclFrameRelay": fclFrameRelay,
       "fclFrCommunicationEquipment": fclFrCommunicationEquipment,
       "fclFrCeLogPortTable": fclFrCeLogPortTable,
       "fclFrCeLogPortEntry": fclFrCeLogPortEntry,
       "fclFrCeLpLogPortId": fclFrCeLpLogPortId,
       "fclFrCeLpInterfaceId": fclFrCeLpInterfaceId,
       "fclFrCeLpLocalAddress": fclFrCeLpLocalAddress,
       "fclFrCeLpConfigId": fclFrCeLpConfigId,
       "fclFrCeLpLmi": fclFrCeLpLmi,
       "fclFrCeParGenTable": fclFrCeParGenTable,
       "fclFrCeParGenEntry": fclFrCeParGenEntry,
       "fclFrCeParGenLogPortId": fclFrCeParGenLogPortId,
       "fclFrCeParGenDlcSetupAlarmThreshold": fclFrCeParGenDlcSetupAlarmThreshold,
       "fclFrCeParGenDlcSetupDiscardThreshold": fclFrCeParGenDlcSetupDiscardThreshold,
       "fclFrCeParGenBookingUbrThreshold": fclFrCeParGenBookingUbrThreshold,
       "fclFrCeParGenBookingVbrRtThreshold": fclFrCeParGenBookingVbrRtThreshold,
       "fclFrCeParGenVoiceMaxTransitDelay": fclFrCeParGenVoiceMaxTransitDelay,
       "fclFrTerminalEquipment": fclFrTerminalEquipment,
       "fclFrTeLogPortTable": fclFrTeLogPortTable,
       "fclFrTeLogPortEntry": fclFrTeLogPortEntry,
       "fclFrTeLpLogPortId": fclFrTeLpLogPortId,
       "fclFrTeLpInterfaceId": fclFrTeLpInterfaceId,
       "fclFrTeLpLocalAddress": fclFrTeLpLocalAddress,
       "fclFrTeLpConfigId": fclFrTeLpConfigId,
       "fclFrTeLpLmi": fclFrTeLpLmi,
       "fclFrTeLpFragmentation": fclFrTeLpFragmentation,
       "fclFrTeLpLinkLayerConsolidation": fclFrTeLpLinkLayerConsolidation,
       "fclFrTeLpLogPortBackupEnabling": fclFrTeLpLogPortBackupEnabling,
       "fclFrTeLpFragFrameSize": fclFrTeLpFragFrameSize,
       "fclFrTeLpBackupTimer": fclFrTeLpBackupTimer,
       "fclFrTeParGenTable": fclFrTeParGenTable,
       "fclFrTeParGenEntry": fclFrTeParGenEntry,
       "fclFrTeParGenLogPortId": fclFrTeParGenLogPortId,
       "fclFrTeParGenDlcSetupAlarmThreshold": fclFrTeParGenDlcSetupAlarmThreshold,
       "fclFrTeParGenDlcSetupDiscardThreshold": fclFrTeParGenDlcSetupDiscardThreshold,
       "fclFrTeParGenBookingUbrThreshold": fclFrTeParGenBookingUbrThreshold,
       "fclFrTeParGenBookingVbrRtThreshold": fclFrTeParGenBookingVbrRtThreshold,
       "fclFrTeParGenVoiceMaxTransitDelay": fclFrTeParGenVoiceMaxTransitDelay,
       "fclFrTeParGenDynamicEir": fclFrTeParGenDynamicEir,
       "fclFrTeParGenPredictionRoundTripDelay": fclFrTeParGenPredictionRoundTripDelay,
       "fclFrTeParGenNetworkBandwidth": fclFrTeParGenNetworkBandwidth,
       "fclFrTeIsdnBackupTable": fclFrTeIsdnBackupTable,
       "fclFrTeIsdnBackupEntry": fclFrTeIsdnBackupEntry,
       "fclFrTeIsdnBackLogPortId": fclFrTeIsdnBackLogPortId,
       "fclFrTeIsdnBackIsdnInterfaceId": fclFrTeIsdnBackIsdnInterfaceId,
       "fclFrTeIsdnBackStatus": fclFrTeIsdnBackStatus,
       "fclFrTeIsdnRemotePeerTable": fclFrTeIsdnRemotePeerTable,
       "fclFrTeIsdnRemotePeerEntry": fclFrTeIsdnRemotePeerEntry,
       "fclFrTeIsdnRemLogPortId": fclFrTeIsdnRemLogPortId,
       "fclFrTeIsdnRemRemotePeerId": fclFrTeIsdnRemRemotePeerId,
       "fclFrTeIsdnRemStatus": fclFrTeIsdnRemStatus,
       "fclFrTeIsdnRemPriority": fclFrTeIsdnRemPriority,
       "fclFrTeIsdnRemCallRetryCount": fclFrTeIsdnRemCallRetryCount,
       "fclFrTeIsdnRemProtocol": fclFrTeIsdnRemProtocol,
       "fclFrTeIsdnRemConfigId": fclFrTeIsdnRemConfigId,
       "fclFrSwitchEquipment": fclFrSwitchEquipment,
       "fclFrSeLogPortTable": fclFrSeLogPortTable,
       "fclFrSeLogPortEntry": fclFrSeLogPortEntry,
       "fclFrSeLpLogPortId": fclFrSeLpLogPortId,
       "fclFrSeLpInterfaceId": fclFrSeLpInterfaceId,
       "fclFrSeLpConfigId": fclFrSeLpConfigId,
       "fclFrSeLpLogPortBackupEnabling": fclFrSeLpLogPortBackupEnabling,
       "fclFrSeLpBackupTimer": fclFrSeLpBackupTimer,
       "fclFrSeIsdnBackupTable": fclFrSeIsdnBackupTable,
       "fclFrSeIsdnBackupEntry": fclFrSeIsdnBackupEntry,
       "fclFrSeIsdnBackLogPortId": fclFrSeIsdnBackLogPortId,
       "fclFrSeIsdnBackIsdnInterfaceId": fclFrSeIsdnBackIsdnInterfaceId,
       "fclFrSeIsdnBackStatus": fclFrSeIsdnBackStatus,
       "fclFrSeIsdnRemotePeerTable": fclFrSeIsdnRemotePeerTable,
       "fclFrSeIsdnRemotePeerEntry": fclFrSeIsdnRemotePeerEntry,
       "fclFrSeIsdnRemLogPortId": fclFrSeIsdnRemLogPortId,
       "fclFrSeIsdnRemRemotePeerId": fclFrSeIsdnRemRemotePeerId,
       "fclFrSeIsdnRemStatus": fclFrSeIsdnRemStatus,
       "fclFrSeIsdnRemConfigId": fclFrSeIsdnRemConfigId,
       "fclFrSeIsdnRemPriority": fclFrSeIsdnRemPriority,
       "fclFrSeIsdnRemCallRetryCount": fclFrSeIsdnRemCallRetryCount,
       "fclFrSeInBIsdn": fclFrSeInBIsdn,
       "fclFrSeInBIsdnLogPortTable": fclFrSeInBIsdnLogPortTable,
       "fclFrSeInBIsdnLogPortEntry": fclFrSeInBIsdnLogPortEntry,
       "fclFrSeInBLpLogPortId": fclFrSeInBLpLogPortId,
       "fclFrSeInBLpIsdnInterfaceId": fclFrSeInBLpIsdnInterfaceId,
       "fclFrSeInBRemotePeerTable": fclFrSeInBRemotePeerTable,
       "fclFrSeInBRemotePeerEntry": fclFrSeInBRemotePeerEntry,
       "fclFrSeInBRemRemoteAddress": fclFrSeInBRemRemoteAddress,
       "fclFrSeInBRemPeerId": fclFrSeInBRemPeerId,
       "fclFrSeInBRemStatus": fclFrSeInBRemStatus,
       "fclFrSeInBRemPriority": fclFrSeInBRemPriority,
       "fclFrSeInBRemCallRetryCount": fclFrSeInBRemCallRetryCount,
       "fclFrSeInBRemConfigId": fclFrSeInBRemConfigId,
       "fclFrPvcEndPoint": fclFrPvcEndPoint,
       "fclFrPvcEndPointTable": fclFrPvcEndPointTable,
       "fclFrPvcEndPointEntry": fclFrPvcEndPointEntry,
       "fclFrPvcLinkType": fclFrPvcLinkType,
       "fclFrPvcLinkId": fclFrPvcLinkId,
       "fclFrPvcDlci": fclFrPvcDlci,
       "fclFrPvcStatus": fclFrPvcStatus,
       "fclFrPvcCalledAddress": fclFrPvcCalledAddress,
       "fclFrPvcCallDirection": fclFrPvcCallDirection,
       "fclFrPvcEncapsulation": fclFrPvcEncapsulation,
       "fclFrPvcBackupEnabling": fclFrPvcBackupEnabling,
       "fclFrPvcBackupDlci": fclFrPvcBackupDlci,
       "fclFrPvcTrafficManagementStrategy": fclFrPvcTrafficManagementStrategy,
       "fclFrPvcNetworkTransport": fclFrPvcNetworkTransport,
       "fclFrPvcQualityOfServiceTable": fclFrPvcQualityOfServiceTable,
       "fclFrPvcQualityOfServiceEntry": fclFrPvcQualityOfServiceEntry,
       "fclFrPvcQosLinkType": fclFrPvcQosLinkType,
       "fclFrPvcQosLinkId": fclFrPvcQosLinkId,
       "fclFrPvcQosDlci": fclFrPvcQosDlci,
       "fclFrPvcQosCos": fclFrPvcQosCos,
       "fclFrPvcQosInBc": fclFrPvcQosInBc,
       "fclFrPvcQosInBe": fclFrPvcQosInBe,
       "fclFrPvcQosInCir": fclFrPvcQosInCir,
       "fclFrPvcQosInMinCir": fclFrPvcQosInMinCir,
       "fclFrPvcQosOutBc": fclFrPvcQosOutBc,
       "fclFrPvcQosOutBe": fclFrPvcQosOutBe,
       "fclFrPvcQosOutCir": fclFrPvcQosOutCir,
       "fclFrPvcQosOutMinCir": fclFrPvcQosOutMinCir,
       "fclFrPvcX25EncapsulationTable": fclFrPvcX25EncapsulationTable,
       "fclFrPvcX25EncapsulationEntry": fclFrPvcX25EncapsulationEntry,
       "fclFrPvcX25LinkType": fclFrPvcX25LinkType,
       "fclFrPvcX25LinkId": fclFrPvcX25LinkId,
       "fclFrPvcX25Dlci": fclFrPvcX25Dlci,
       "fclFrPvcX25AssociatedAddress": fclFrPvcX25AssociatedAddress,
       "fclFrPvcX25InterNodeConfigId": fclFrPvcX25InterNodeConfigId,
       "fclFrPvcSnaEncapsulationTable": fclFrPvcSnaEncapsulationTable,
       "fclFrPvcSnaEncapsulationEntry": fclFrPvcSnaEncapsulationEntry,
       "fclFrPvcSnaLinkType": fclFrPvcSnaLinkType,
       "fclFrPvcSnaLinkId": fclFrPvcSnaLinkId,
       "fclFrPvcSnaDlci": fclFrPvcSnaDlci,
       "fclFrPvcSnaConnTestEnabling": fclFrPvcSnaConnTestEnabling,
       "fclFrPvcSnaLevel3Pid": fclFrPvcSnaLevel3Pid,
       "fclFrPvcSnaDestinationSap": fclFrPvcSnaDestinationSap,
       "fclFrPvcSnaSourceSap": fclFrPvcSnaSourceSap,
       "fclFrPvcSnaT1ReplyTimer": fclFrPvcSnaT1ReplyTimer,
       "fclFrPvcSnaN2RetryCount": fclFrPvcSnaN2RetryCount,
       "fclFrPvcSnaT2ReceiverAckTimer": fclFrPvcSnaT2ReceiverAckTimer,
       "fclFrPvcSnaN3AcknowledgedCount": fclFrPvcSnaN3AcknowledgedCount,
       "fclFrPvcSnaNwIncrementAckCount": fclFrPvcSnaNwIncrementAckCount,
       "fclFrPvcSnaTwTransmitWinSize": fclFrPvcSnaTwTransmitWinSize,
       "fclFrPvcSnaRwReceiveWinSize": fclFrPvcSnaRwReceiveWinSize,
       "fclFrSnaBan": fclFrSnaBan,
       "fclFrNbStationDlci": fclFrNbStationDlci,
       "fclFrNbStationByDlci": fclFrNbStationByDlci,
       "fclFrPvcSnaBanEncapsulationTable": fclFrPvcSnaBanEncapsulationTable,
       "fclFrPvcSnaBanEncapsulationEntry": fclFrPvcSnaBanEncapsulationEntry,
       "fclFrPvcSnaBanLinkType": fclFrPvcSnaBanLinkType,
       "fclFrPvcSnaBanLinkId": fclFrPvcSnaBanLinkId,
       "fclFrPvcSnaBanDlci": fclFrPvcSnaBanDlci,
       "fclFrPvcSnaBanPuId": fclFrPvcSnaBanPuId,
       "fclFrPvcSnaBanConnTestEnabling": fclFrPvcSnaBanConnTestEnabling,
       "fclFrPvcSnaBanLink": fclFrPvcSnaBanLink,
       "fclFrPvcSnaBanT1ReplyTimer": fclFrPvcSnaBanT1ReplyTimer,
       "fclFrPvcSnaBanN2RetryCount": fclFrPvcSnaBanN2RetryCount,
       "fclFrPvcSnaBanT2ReceiverAckTimer": fclFrPvcSnaBanT2ReceiverAckTimer,
       "fclFrPvcSnaBanN3AcknowledgedCount": fclFrPvcSnaBanN3AcknowledgedCount,
       "fclFrPvcSnaBanNwIncrementAckCount": fclFrPvcSnaBanNwIncrementAckCount,
       "fclFrPvcSnaBanTwTransmitWinSize": fclFrPvcSnaBanTwTransmitWinSize,
       "fclFrPvcSnaBanRwReceiveWinSize": fclFrPvcSnaBanRwReceiveWinSize,
       "fclFrPvcSnaBanMinRecallTimer": fclFrPvcSnaBanMinRecallTimer,
       "fclFrPvcSpecific": fclFrPvcSpecific,
       "fclFrPvcTunEndPointTable": fclFrPvcTunEndPointTable,
       "fclFrPvcTunEndPointEntry": fclFrPvcTunEndPointEntry,
       "fclFrPvcTunLinkType": fclFrPvcTunLinkType,
       "fclFrPvcTunLinkId": fclFrPvcTunLinkId,
       "fclFrPvcTunDlci": fclFrPvcTunDlci,
       "fclFrPvcTunStatus": fclFrPvcTunStatus,
       "fclFrPvcTunInCir": fclFrPvcTunInCir,
       "fclFrPvcTunOutCir": fclFrPvcTunOutCir,
       "fclFrPvcTunBackupEnabling": fclFrPvcTunBackupEnabling,
       "fclFrPvcTunBackupDlci": fclFrPvcTunBackupDlci,
       "fclFrPvcTunAssociatedAddress": fclFrPvcTunAssociatedAddress,
       "fclFrPvcTunFrseConfiguration": fclFrPvcTunFrseConfiguration,
       "fclFrameRelayBackup": fclFrameRelayBackup,
       "fclFrBackupTable": fclFrBackupTable,
       "fclFrBackupEntry": fclFrBackupEntry,
       "fclFrMainLPId": fclFrMainLPId,
       "fclFrMainDlci": fclFrMainDlci,
       "fclFrBackupLPId": fclFrBackupLPId,
       "fclFrBackupDlci": fclFrBackupDlci,
       "fclFrBackupStatus": fclFrBackupStatus,
       "fclFrConfigurationCeTe": fclFrConfigurationCeTe,
       "fclFrConfigCeTeTable": fclFrConfigCeTeTable,
       "fclFrConfigCeTeEntry": fclFrConfigCeTeEntry,
       "fclFrCfcConfigId": fclFrCfcConfigId,
       "fclFrCfcStatus": fclFrCfcStatus,
       "fclFrCfcDescription": fclFrCfcDescription,
       "fclFrCfcProfileId": fclFrCfcProfileId,
       "fclFrCfcModificationCount": fclFrCfcModificationCount,
       "fclFrCfcGeneralParameterTable": fclFrCfcGeneralParameterTable,
       "fclFrCfcGeneralParameterEntry": fclFrCfcGeneralParameterEntry,
       "fclFrCfcGenConfigId": fclFrCfcGenConfigId,
       "fclFrCfcGenMinimumRecallTimer": fclFrCfcGenMinimumRecallTimer,
       "fclFrCfcGenInactivityCheckDelay": fclFrCfcGenInactivityCheckDelay,
       "fclFrCfcGenInactivityTimer": fclFrCfcGenInactivityTimer,
       "fclFrCfcGenUnuseTimer": fclFrCfcGenUnuseTimer,
       "fclFrCfcGenSVC": fclFrCfcGenSVC,
       "fclFrCfcSignallingParameterTable": fclFrCfcSignallingParameterTable,
       "fclFrCfcSignallingParameterEntry": fclFrCfcSignallingParameterEntry,
       "fclFrCfcSigConfigId": fclFrCfcSigConfigId,
       "fclFrCfcSigOuputTimeout": fclFrCfcSigOuputTimeout,
       "fclFrCfcSigSignalOutputWinSize": fclFrCfcSigSignalOutputWinSize,
       "fclFrCfcSigN200RetransMaxCount": fclFrCfcSigN200RetransMaxCount,
       "fclFrCfcSigT200RetransTimer": fclFrCfcSigT200RetransTimer,
       "fclFrCfcSigT203InactivityTimer": fclFrCfcSigT203InactivityTimer,
       "fclFrCfcSigConversionAimedPoint": fclFrCfcSigConversionAimedPoint,
       "fclFrCfcSigT303SetupResponseTimer": fclFrCfcSigT303SetupResponseTimer,
       "fclFrCfcSigT305DisconnectResponseTimer": fclFrCfcSigT305DisconnectResponseTimer,
       "fclFrCfcSigT308ReleaseResponseTimer": fclFrCfcSigT308ReleaseResponseTimer,
       "fclFrCfcSigT310CallProceedingTimer": fclFrCfcSigT310CallProceedingTimer,
       "fclFrCfcSigT316RestartAcknowledgeTimer": fclFrCfcSigT316RestartAcknowledgeTimer,
       "fclFrCfcEiCodingTable": fclFrCfcEiCodingTable,
       "fclFrCfcEiCodingEntry": fclFrCfcEiCodingEntry,
       "fclFrCfcEiCodConfigId": fclFrCfcEiCodConfigId,
       "fclFrCfcEiCodCalledTypNum": fclFrCfcEiCodCalledTypNum,
       "fclFrCfcEiCodCalledNumPlanId": fclFrCfcEiCodCalledNumPlanId,
       "fclFrCfcEiCodCallingTypNum": fclFrCfcEiCodCallingTypNum,
       "fclFrCfcEiCodCallingNumPlanId": fclFrCfcEiCodCallingNumPlanId,
       "fclFrCfcLmiParameterTable": fclFrCfcLmiParameterTable,
       "fclFrCfcLmiParameterEntry": fclFrCfcLmiParameterEntry,
       "fclFrCfcLmiConfigId": fclFrCfcLmiConfigId,
       "fclFrCfcLmiDlci": fclFrCfcLmiDlci,
       "fclFrCfcLmiStandard": fclFrCfcLmiStandard,
       "fclFrCfcLmiAccessibilityCondition": fclFrCfcLmiAccessibilityCondition,
       "fclFrCfcLmiN391FullStatusPollCount": fclFrCfcLmiN391FullStatusPollCount,
       "fclFrCfcLmiN392ErrorThreshold": fclFrCfcLmiN392ErrorThreshold,
       "fclFrCfcLmiN393MonitoredEventCount": fclFrCfcLmiN393MonitoredEventCount,
       "fclFrCfcLmiT391LinkIntegPollTimer": fclFrCfcLmiT391LinkIntegPollTimer,
       "fclFrCfcLmiT392PollingVerifTimer": fclFrCfcLmiT392PollingVerifTimer,
       "fclFrCfcLmiAsynchronousStatusReport": fclFrCfcLmiAsynchronousStatusReport,
       "fclFrConfigurationSe": fclFrConfigurationSe,
       "fclFrConfigSeTable": fclFrConfigSeTable,
       "fclFrConfigSeEntry": fclFrConfigSeEntry,
       "fclFrCfsConfigId": fclFrCfsConfigId,
       "fclFrCfsStatus": fclFrCfsStatus,
       "fclFrCfsDescription": fclFrCfsDescription,
       "fclFrCfsProfileId": fclFrCfsProfileId,
       "fclFrCfsModificationCount": fclFrCfsModificationCount,
       "fclFrCfsGeneralParameterTable": fclFrCfsGeneralParameterTable,
       "fclFrCfsGeneralParameterEntry": fclFrCfsGeneralParameterEntry,
       "fclFrCfsGenConfigId": fclFrCfsGenConfigId,
       "fclFrCfsGenCallReturnTransmission": fclFrCfsGenCallReturnTransmission,
       "fclFrCfsGenUnuseTimer": fclFrCfsGenUnuseTimer,
       "fclFrCfsGenDlcSetupAlarmThreshold": fclFrCfsGenDlcSetupAlarmThreshold,
       "fclFrCfsGenDlcSetupDiscardThreshold": fclFrCfsGenDlcSetupDiscardThreshold,
       "fclFrCfsGenBookingUbrThreshold": fclFrCfsGenBookingUbrThreshold,
       "fclFrCfsGenBookingVbrRtThreshold": fclFrCfsGenBookingVbrRtThreshold,
       "fclFrCfsGenBehavior": fclFrCfsGenBehavior,
       "fclFrCfsGenDynamicEir": fclFrCfsGenDynamicEir,
       "fclFrCfsGenPredictionRoundTripDelay": fclFrCfsGenPredictionRoundTripDelay,
       "fclFrCfsGenNetworkBandwidth": fclFrCfsGenNetworkBandwidth,
       "fclFrCfsSignallingTable": fclFrCfsSignallingTable,
       "fclFrCfsSignallingEntry": fclFrCfsSignallingEntry,
       "fclFrCfsSigConfigId": fclFrCfsSigConfigId,
       "fclFrCfsSigOuputTimeout": fclFrCfsSigOuputTimeout,
       "fclFrCfsSigSignalOutputWinSize": fclFrCfsSigSignalOutputWinSize,
       "fclFrCfsSigN200RetransMaxCount": fclFrCfsSigN200RetransMaxCount,
       "fclFrCfsSigT200RetransTimer": fclFrCfsSigT200RetransTimer,
       "fclFrCfsSigT203InactivityTimer": fclFrCfsSigT203InactivityTimer,
       "fclFrCfsSigT303SetupResponseTimer": fclFrCfsSigT303SetupResponseTimer,
       "fclFrCfsSigT305DisconnectResponseTimer": fclFrCfsSigT305DisconnectResponseTimer,
       "fclFrCfsSigT308ReleaseResponseTimer": fclFrCfsSigT308ReleaseResponseTimer,
       "fclFrCfsSigT310CallProceedingTimer": fclFrCfsSigT310CallProceedingTimer,
       "fclFrCfsSigT316RestartAcknowledgeTimer": fclFrCfsSigT316RestartAcknowledgeTimer,
       "fclInterUnitLink": fclInterUnitLink,
       "fclInterUnitLinkTable": fclInterUnitLinkTable,
       "fclInterUnitLinkEntry": fclInterUnitLinkEntry,
       "fclIulLogPortId": fclIulLogPortId,
       "fclIulInterfaceId": fclIulInterfaceId,
       "fclIulCallReturnTransmission": fclIulCallReturnTransmission,
       "fclIulConversionAimedPoint": fclIulConversionAimedPoint,
       "fclIulConversionIncomingCall": fclIulConversionIncomingCall,
       "fclIulConversionOutgoingCall": fclIulConversionOutgoingCall,
       "fclIulConversionAddressCheck": fclIulConversionAddressCheck,
       "fclX25Configurations": fclX25Configurations,
       "fclX25ConfigAccess": fclX25ConfigAccess,
       "fclX25ConfigAccessTable": fclX25ConfigAccessTable,
       "fclX25ConfigAccessEntry": fclX25ConfigAccessEntry,
       "fclX25CfaConfigId": fclX25CfaConfigId,
       "fclX25CfaStatus": fclX25CfaStatus,
       "fclX25CfaDescription": fclX25CfaDescription,
       "fclX25CfaProfileId": fclX25CfaProfileId,
       "fclX25CfaModificationCount": fclX25CfaModificationCount,
       "fclX25CfaDataLinkNetworkTable": fclX25CfaDataLinkNetworkTable,
       "fclX25CfaDataLinkNetworkEntry": fclX25CfaDataLinkNetworkEntry,
       "fclX25CfaDlnConfigId": fclX25CfaDlnConfigId,
       "fclX25CfaDlnStationType": fclX25CfaDlnStationType,
       "fclX25CfaDlnNetworkType": fclX25CfaDlnNetworkType,
       "fclX25CfaDlnN2RetryCount": fclX25CfaDlnN2RetryCount,
       "fclX25CfaDlnT1AcknowledgeTimer": fclX25CfaDlnT1AcknowledgeTimer,
       "fclX25CfaDlnT2AcknwledgeDelayTimer": fclX25CfaDlnT2AcknwledgeDelayTimer,
       "fclX25CfaDlnKWindowSize": fclX25CfaDlnKWindowSize,
       "fclX25CfaDlnEachPacketAcknowledgement": fclX25CfaDlnEachPacketAcknowledgement,
       "fclX25CfaDlnLowestIncomingChannel": fclX25CfaDlnLowestIncomingChannel,
       "fclX25CfaDlnIncomingChannelCount": fclX25CfaDlnIncomingChannelCount,
       "fclX25CfaDlnLowestTwoWayChannel": fclX25CfaDlnLowestTwoWayChannel,
       "fclX25CfaDlnTwoWayChannelCount": fclX25CfaDlnTwoWayChannelCount,
       "fclX25CfaDlnLowestOutgoingChannel": fclX25CfaDlnLowestOutgoingChannel,
       "fclX25CfaDlnOutgoingChannelCount": fclX25CfaDlnOutgoingChannelCount,
       "fclX25CfaDlnOutgoingChannelNumbering": fclX25CfaDlnOutgoingChannelNumbering,
       "fclX25CfaDlnDBitModification": fclX25CfaDlnDBitModification,
       "fclX25CfaFacilityTable": fclX25CfaFacilityTable,
       "fclX25CfaFacilityEntry": fclX25CfaFacilityEntry,
       "fclX25CfaFacConfigId": fclX25CfaFacConfigId,
       "fclX25CfaFacClosedUserGroup": fclX25CfaFacClosedUserGroup,
       "fclX25CfaFacReverseCharging": fclX25CfaFacReverseCharging,
       "fclX25CfaFacTransitDelay": fclX25CfaFacTransitDelay,
       "fclX25CfaFacOutputMarkers": fclX25CfaFacOutputMarkers,
       "fclX25CfaFacInputMarkers": fclX25CfaFacInputMarkers,
       "fclX25CfaFacOutputUnknownFacility": fclX25CfaFacOutputUnknownFacility,
       "fclX25CfaFacInputUnknownFacility": fclX25CfaFacInputUnknownFacility,
       "fclX25CfaNegotiatedFacilityTable": fclX25CfaNegotiatedFacilityTable,
       "fclX25CfaNegotiatedFacilityEntry": fclX25CfaNegotiatedFacilityEntry,
       "fclX25CfaNegConfigId": fclX25CfaNegConfigId,
       "fclX25CfaNegOutputFastSelect": fclX25CfaNegOutputFastSelect,
       "fclX25CfaNegInputFastSelect": fclX25CfaNegInputFastSelect,
       "fclX25CfaNegThroughputClass": fclX25CfaNegThroughputClass,
       "fclX25CfaNegDefOutThroughputClass": fclX25CfaNegDefOutThroughputClass,
       "fclX25CfaNegDefInThroughputClass": fclX25CfaNegDefInThroughputClass,
       "fclX25CfaNegMaxOutThroughputClass": fclX25CfaNegMaxOutThroughputClass,
       "fclX25CfaNegMaxInThroughputClass": fclX25CfaNegMaxInThroughputClass,
       "fclX25CfaNegPacketSize": fclX25CfaNegPacketSize,
       "fclX25CfaNegDefOutPacketSize": fclX25CfaNegDefOutPacketSize,
       "fclX25CfaNegDefInPacketSize": fclX25CfaNegDefInPacketSize,
       "fclX25CfaNegMaxOutPacketSize": fclX25CfaNegMaxOutPacketSize,
       "fclX25CfaNegMaxInPacketSize": fclX25CfaNegMaxInPacketSize,
       "fclX25CfaNegMinOutPacketSize": fclX25CfaNegMinOutPacketSize,
       "fclX25CfaNegMinInPacketSize": fclX25CfaNegMinInPacketSize,
       "fclX25CfaNegWindowSize": fclX25CfaNegWindowSize,
       "fclX25CfaNegDefOutWindowSize": fclX25CfaNegDefOutWindowSize,
       "fclX25CfaNegDefInWindowSize": fclX25CfaNegDefInWindowSize,
       "fclX25CfaNegMaxOutWindowSize": fclX25CfaNegMaxOutWindowSize,
       "fclX25CfaNegMaxInWindowSize": fclX25CfaNegMaxInWindowSize,
       "fclX25CfaSignallingTable": fclX25CfaSignallingTable,
       "fclX25CfaSignallingEntry": fclX25CfaSignallingEntry,
       "fclX25CfaSigConfigId": fclX25CfaSigConfigId,
       "fclX25CfaSigType": fclX25CfaSigType,
       "fclX25CfaSigPacketAddressCount": fclX25CfaSigPacketAddressCount,
       "fclX25CfaSigSubAddressTransmission": fclX25CfaSigSubAddressTransmission,
       "fclX25CfaSigPdnIndicator": fclX25CfaSigPdnIndicator,
       "fclX25CfaSigConversionAimedPoint": fclX25CfaSigConversionAimedPoint,
       "fclX25CfaSigConversionIncomingCall": fclX25CfaSigConversionIncomingCall,
       "fclX25CfaSigConversionOutgoingCall": fclX25CfaSigConversionOutgoingCall,
       "fclX25CfaSigConversionAddressCheck": fclX25CfaSigConversionAddressCheck,
       "fclX25CfaSigConvMultiCalledAddrInCall": fclX25CfaSigConvMultiCalledAddrInCall,
       "fclX25CfaSigConvMultiCallingAddrInCall": fclX25CfaSigConvMultiCallingAddrInCall,
       "fclX25CfaSigConvMultiCalledAddrOutCall": fclX25CfaSigConvMultiCalledAddrOutCall,
       "fclX25CfaSigConvMultiCallingAddrOutCall": fclX25CfaSigConvMultiCallingAddrOutCall,
       "fclX25CfaSigOutPacketCauseField": fclX25CfaSigOutPacketCauseField,
       "fclX25CfaSigInPacketCauseField": fclX25CfaSigInPacketCauseField,
       "fclX25CfaSigT11CallResponseTimer": fclX25CfaSigT11CallResponseTimer,
       "fclX25CfaSigCallAcceptedFormat": fclX25CfaSigCallAcceptedFormat,
       "fclX25CfaSigClearFormat": fclX25CfaSigClearFormat,
       "fclX25CfaServiceTable": fclX25CfaServiceTable,
       "fclX25CfaServiceEntry": fclX25CfaServiceEntry,
       "fclX25CfaSerConfigId": fclX25CfaSerConfigId,
       "fclX25CfaSerReliableVc": fclX25CfaSerReliableVc,
       "fclX25CfaSerCharging": fclX25CfaSerCharging,
       "fclX25CfaSerX29Reselection": fclX25CfaSerX29Reselection,
       "fclX25CfaSerRemoteExclusiveLink": fclX25CfaSerRemoteExclusiveLink,
       "fclX25CfaSerStatLoadAndTraffic": fclX25CfaSerStatLoadAndTraffic,
       "fclX25CfaSerStatSignalling": fclX25CfaSerStatSignalling,
       "fclX25CfaSerStatTotalizer": fclX25CfaSerStatTotalizer,
       "fclX25CfaSerStatCompression": fclX25CfaSerStatCompression,
       "fclX25CfaSerCompression": fclX25CfaSerCompression,
       "fclX25CfaSerCompressNegotiation": fclX25CfaSerCompressNegotiation,
       "fclX25CfaSerCompressScrambling": fclX25CfaSerCompressScrambling,
       "fclX25CfaSerCompressMultiPacketsTimer": fclX25CfaSerCompressMultiPacketsTimer,
       "fclX25CfaSerCos": fclX25CfaSerCos,
       "fclX25CfaSerCir": fclX25CfaSerCir,
       "fclX25CfaSerMinCir": fclX25CfaSerMinCir,
       "fclX25CfaSerBe": fclX25CfaSerBe,
       "fclX25CfaPackingAddresses": fclX25CfaPackingAddresses,
       "fclX25CfaPackOutSubAddressCheck": fclX25CfaPackOutSubAddressCheck,
       "fclX25CfaPackOutSubAddressSize": fclX25CfaPackOutSubAddressSize,
       "fclX25CfaPackPdnCallingSubAddress": fclX25CfaPackPdnCallingSubAddress,
       "fclX25CfaPackingTable": fclX25CfaPackingTable,
       "fclX25CfaPackingEntry": fclX25CfaPackingEntry,
       "fclX25CfaPackPrivateZoSb": fclX25CfaPackPrivateZoSb,
       "fclX25CfaPackStatus": fclX25CfaPackStatus,
       "fclX25CfaPackSubAddress": fclX25CfaPackSubAddress,
       "fclX25CfaClosedUserGroupTable": fclX25CfaClosedUserGroupTable,
       "fclX25CfaClosedUserGroupEntry": fclX25CfaClosedUserGroupEntry,
       "fclX25CfaCugLogPortId": fclX25CfaCugLogPortId,
       "fclX25CfaCugClosedUserGroupId": fclX25CfaCugClosedUserGroupId,
       "fclX25CfaCugStatus": fclX25CfaCugStatus,
       "fclX25CfaCugChecking": fclX25CfaCugChecking,
       "fclX25CfaCugClosedUserGroupExt": fclX25CfaCugClosedUserGroupExt,
       "fclX25ConfigInterNode": fclX25ConfigInterNode,
       "fclX25ConfigInterNodeTable": fclX25ConfigInterNodeTable,
       "fclX25ConfigInterNodeEntry": fclX25ConfigInterNodeEntry,
       "fclX25CfnConfigId": fclX25CfnConfigId,
       "fclX25CfnStatus": fclX25CfnStatus,
       "fclX25CfnDescription": fclX25CfnDescription,
       "fclX25CfnProfileId": fclX25CfnProfileId,
       "fclX25CfnModificationCount": fclX25CfnModificationCount,
       "fclX25CfnDataLinkNetworkTable": fclX25CfnDataLinkNetworkTable,
       "fclX25CfnDataLinkNetworkEntry": fclX25CfnDataLinkNetworkEntry,
       "fclX25CfnDlnConfigId": fclX25CfnDlnConfigId,
       "fclX25CfnDlnStationType": fclX25CfnDlnStationType,
       "fclX25CfnDlnN2RetryCount": fclX25CfnDlnN2RetryCount,
       "fclX25CfnDlnT1AcknowledgeTimer": fclX25CfnDlnT1AcknowledgeTimer,
       "fclX25CfnDlnT2AcknowledgeDelayTimer": fclX25CfnDlnT2AcknowledgeDelayTimer,
       "fclX25CfnDlnKWindowSize": fclX25CfnDlnKWindowSize,
       "fclX25CfnDlnEachPacketAcknowledgement": fclX25CfnDlnEachPacketAcknowledgement,
       "fclX25CfnDlnLowestIncomingChannel": fclX25CfnDlnLowestIncomingChannel,
       "fclX25CfnDlnIncomingChannelCount": fclX25CfnDlnIncomingChannelCount,
       "fclX25CfnDlnLowestTwoWayChannel": fclX25CfnDlnLowestTwoWayChannel,
       "fclX25CfnDlnTwoWayChannelCount": fclX25CfnDlnTwoWayChannelCount,
       "fclX25CfnDlnLowestOutgoingChannel": fclX25CfnDlnLowestOutgoingChannel,
       "fclX25CfnDlnOutgoingChannelCount": fclX25CfnDlnOutgoingChannelCount,
       "fclX25CfnDlnOutgoingChannelNumbering": fclX25CfnDlnOutgoingChannelNumbering,
       "fclX25CfnDlnDBitModification": fclX25CfnDlnDBitModification,
       "fclX25CfnNegotiatedFacilityTable": fclX25CfnNegotiatedFacilityTable,
       "fclX25CfnNegotiatedFacilityEntry": fclX25CfnNegotiatedFacilityEntry,
       "fclX25CfnNegConfigId": fclX25CfnNegConfigId,
       "fclX25CfnNegOutputFastSelect": fclX25CfnNegOutputFastSelect,
       "fclX25CfnNegInputFastSelect": fclX25CfnNegInputFastSelect,
       "fclX25CfnNegThroughputClass": fclX25CfnNegThroughputClass,
       "fclX25CfnNegDefOutThroughputClass": fclX25CfnNegDefOutThroughputClass,
       "fclX25CfnNegDefInThroughputClass": fclX25CfnNegDefInThroughputClass,
       "fclX25CfnNegMaxOutThroughputClass": fclX25CfnNegMaxOutThroughputClass,
       "fclX25CfnNegMaxInThroughputClass": fclX25CfnNegMaxInThroughputClass,
       "fclX25CfnNegPacketSize": fclX25CfnNegPacketSize,
       "fclX25CfnNegDefOutPacketSize": fclX25CfnNegDefOutPacketSize,
       "fclX25CfnNegDefInPacketSize": fclX25CfnNegDefInPacketSize,
       "fclX25CfnNegMaxOutPacketSize": fclX25CfnNegMaxOutPacketSize,
       "fclX25CfnNegMaxInPacketSize": fclX25CfnNegMaxInPacketSize,
       "fclX25CfnNegMinOutPacketSize": fclX25CfnNegMinOutPacketSize,
       "fclX25CfnNegMinInPacketSize": fclX25CfnNegMinInPacketSize,
       "fclX25CfnNegWindowSize": fclX25CfnNegWindowSize,
       "fclX25CfnNegDefOutWindowSize": fclX25CfnNegDefOutWindowSize,
       "fclX25CfnNegDefInWindowSize": fclX25CfnNegDefInWindowSize,
       "fclX25CfnNegMaxOutWindowSize": fclX25CfnNegMaxOutWindowSize,
       "fclX25CfnNegMaxInWindowSize": fclX25CfnNegMaxInWindowSize,
       "fclX25CfnSignallingTable": fclX25CfnSignallingTable,
       "fclX25CfnSignallingEntry": fclX25CfnSignallingEntry,
       "fclX25CfnSigConfigId": fclX25CfnSigConfigId,
       "fclX25CfnSigSubAddressTransmission": fclX25CfnSigSubAddressTransmission,
       "fclX25CfnSigConversionAimedPoint": fclX25CfnSigConversionAimedPoint,
       "fclX25CfnSigConversionIncomingCall": fclX25CfnSigConversionIncomingCall,
       "fclX25CfnSigConversionOutgoingCall": fclX25CfnSigConversionOutgoingCall,
       "fclX25CfnSigConversionAddressCheck": fclX25CfnSigConversionAddressCheck,
       "fclX25CfnSigConvMultiCalledAddrInCall": fclX25CfnSigConvMultiCalledAddrInCall,
       "fclX25CfnSigConvMultiCallingAddrInCall": fclX25CfnSigConvMultiCallingAddrInCall,
       "fclX25CfnSigConvMultiCalledAddrOutCall": fclX25CfnSigConvMultiCalledAddrOutCall,
       "fclX25CfnSigConvMultiCallingAddrOutCall": fclX25CfnSigConvMultiCallingAddrOutCall,
       "fclX25CfnSigT11CallResponseTimer": fclX25CfnSigT11CallResponseTimer,
       "fclX25CfnSigCallAcceptedFormat": fclX25CfnSigCallAcceptedFormat,
       "fclX25CfnServiceTable": fclX25CfnServiceTable,
       "fclX25CfnServiceEntry": fclX25CfnServiceEntry,
       "fclX25CfnSerConfigId": fclX25CfnSerConfigId,
       "fclX25CfnSerReliableVc": fclX25CfnSerReliableVc,
       "fclX25CfnSerCharging": fclX25CfnSerCharging,
       "fclX25CfnSerX29Reselection": fclX25CfnSerX29Reselection,
       "fclX25CfnSerRemoteExclusiveLink": fclX25CfnSerRemoteExclusiveLink,
       "fclX25CfnSerCallReturnTransmission": fclX25CfnSerCallReturnTransmission,
       "fclX25CfnSerStatLoadAndTraffic": fclX25CfnSerStatLoadAndTraffic,
       "fclX25CfnSerStatSignalling": fclX25CfnSerStatSignalling,
       "fclX25CfnSerStatTotalizer": fclX25CfnSerStatTotalizer,
       "fclX25CfnSerStatCompression": fclX25CfnSerStatCompression,
       "fclX25ConfigMiscellaneous": fclX25ConfigMiscellaneous,
       "fclX25CfmDiagnosticCodeField": fclX25CfmDiagnosticCodeField,
       "fclX25CfmTransmitFlowControl": fclX25CfmTransmitFlowControl,
       "fclX25CfmAddress14DigitsTruncation": fclX25CfmAddress14DigitsTruncation,
       "fclX25CfmTransmitFlowControlTable": fclX25CfmTransmitFlowControlTable,
       "fclX25CfmTransmitFlowControlEntry": fclX25CfmTransmitFlowControlEntry,
       "fclX25CfmFlowCtrlPacketSize": fclX25CfmFlowCtrlPacketSize,
       "fclX25CfmFlowCtrlMaxWindowSize": fclX25CfmFlowCtrlMaxWindowSize,
       "fcWanSwitch": fcWanSwitch,
       "fcwDnicZoAddress": fcwDnicZoAddress,
       "fcwMaxActiveCommunications": fcwMaxActiveCommunications,
       "fcwDataPacketsDiscardThreshold": fcwDataPacketsDiscardThreshold,
       "fcwDataPacketsAcceptThreshold": fcwDataPacketsAcceptThreshold,
       "fcwCallPacketsDiscardThreshold": fcwCallPacketsDiscardThreshold,
       "fcwCallPacketsAcceptThreshold": fcwCallPacketsAcceptThreshold,
       "fcwLocalCommunications": fcwLocalCommunications,
       "fcwLocalIncomingCallsRouteId": fcwLocalIncomingCallsRouteId,
       "fcwLoadAndTrafficSummingPeriod": fcwLoadAndTrafficSummingPeriod,
       "fcwLoadAndTrafficEventsTimer": fcwLoadAndTrafficEventsTimer,
       "fcwFrameRelay": fcwFrameRelay,
       "fcwFrDlcStatusChangeTrapEnabling": fcwFrDlcStatusChangeTrapEnabling,
       "fcwFrAnnexeGInternalStacksMaxCount": fcwFrAnnexeGInternalStacksMaxCount,
       "fcwFrEndPointMaxCount": fcwFrEndPointMaxCount,
       "fcwFrFrameAcceptCpuThreshold": fcwFrFrameAcceptCpuThreshold,
       "fcwFrFrameAcceptMemoryThreshold": fcwFrFrameAcceptMemoryThreshold,
       "fcwFrDlcSetupAlarmThreshold": fcwFrDlcSetupAlarmThreshold,
       "fcwFrDlcSetupDiscardThreshold": fcwFrDlcSetupDiscardThreshold,
       "fcwFrVoiceFrameSize": fcwFrVoiceFrameSize,
       "fcwFrVoiceMaxTransitDelay": fcwFrVoiceMaxTransitDelay,
       "fcwFrCongestionCheckTimer": fcwFrCongestionCheckTimer,
       "fcwFrCongestionCount": fcwFrCongestionCount,
       "fcwFrCirTimer": fcwFrCirTimer,
       "fcwFrEventOutput": fcwFrEventOutput,
       "fcwFrSlowingDownThreshold": fcwFrSlowingDownThreshold,
       "fcwFrFecnBecnOfDeFramesThreshold": fcwFrFecnBecnOfDeFramesThreshold,
       "fcwFrFecnBecnOfAllFramesThreshold": fcwFrFecnBecnOfAllFramesThreshold,
       "fcwFrDeFramesDiscardThreshold": fcwFrDeFramesDiscardThreshold,
       "fcwFrAllFramesDiscardThreshold": fcwFrAllFramesDiscardThreshold,
       "fcwAddressConversion": fcwAddressConversion,
       "fcwAddrConvIncomingCallTable": fcwAddrConvIncomingCallTable,
       "fcwAddrConvIncomingCallEntry": fcwAddrConvIncomingCallEntry,
       "fcwConvInExternalAddr": fcwConvInExternalAddr,
       "fcwConvInStatus": fcwConvInStatus,
       "fcwConvInConvertedAddr": fcwConvInConvertedAddr,
       "fcwConvInOrderNum": fcwConvInOrderNum,
       "fcwAddrConvOutgoingCallTable": fcwAddrConvOutgoingCallTable,
       "fcwAddrConvOutgoingCallEntry": fcwAddrConvOutgoingCallEntry,
       "fcwConvOutExternalAddr": fcwConvOutExternalAddr,
       "fcwConvOutStatus": fcwConvOutStatus,
       "fcwConvOutConvertedAddr": fcwConvOutConvertedAddr,
       "fcwConvOutOrderNum": fcwConvOutOrderNum,
       "fcwAddrConvMultiCriterionInCallTable": fcwAddrConvMultiCriterionInCallTable,
       "fcwAddrConvMultiCriterionInCallEntry": fcwAddrConvMultiCriterionInCallEntry,
       "fcwConvMultiInConvID": fcwConvMultiInConvID,
       "fcwConvMultiInExternalAddr": fcwConvMultiInExternalAddr,
       "fcwConvMultiInStatus": fcwConvMultiInStatus,
       "fcwConvMultiInConvertedAddr": fcwConvMultiInConvertedAddr,
       "fcwConvMultiInOrderNum": fcwConvMultiInOrderNum,
       "fcwAddrConvMultiCriterionOutCallTable": fcwAddrConvMultiCriterionOutCallTable,
       "fcwAddrConvMultiCriterionOutCallEntry": fcwAddrConvMultiCriterionOutCallEntry,
       "fcwConvMultiOutConvID": fcwConvMultiOutConvID,
       "fcwConvMultiOutExternalAddr": fcwConvMultiOutExternalAddr,
       "fcwConvMultiOutStatus": fcwConvMultiOutStatus,
       "fcwConvMultiOutConvertedAddr": fcwConvMultiOutConvertedAddr,
       "fcwConvMultiOutOrderNum": fcwConvMultiOutOrderNum,
       "fcwAddrConvCondOutgoingCallTable": fcwAddrConvCondOutgoingCallTable,
       "fcwAddrConvCondOutgoingCallEntry": fcwAddrConvCondOutgoingCallEntry,
       "fcwConvCondOutExternalAddr": fcwConvCondOutExternalAddr,
       "fcwConvCondOutTryOn": fcwConvCondOutTryOn,
       "fcwConvCondOutStatus": fcwConvCondOutStatus,
       "fcwConvCondOutConvertedAddr": fcwConvCondOutConvertedAddr,
       "fcwRouteTable": fcwRouteTable,
       "fcwRouteEntry": fcwRouteEntry,
       "fcwRoutRouteId": fcwRoutRouteId,
       "fcwRoutLogPortId": fcwRoutLogPortId,
       "fcwRoutChannelId": fcwRoutChannelId,
       "fcwRoutStatus": fcwRoutStatus,
       "fcwRoutType": fcwRoutType,
       "fcwDnicRoutingTable": fcwDnicRoutingTable,
       "fcwDnicRoutingEntry": fcwDnicRoutingEntry,
       "fcwDnicDataNetworkIdentifierCode": fcwDnicDataNetworkIdentifierCode,
       "fcwDnicRouteId": fcwDnicRouteId,
       "fcwDnicStatus": fcwDnicStatus,
       "fcwZoRoutingTable": fcwZoRoutingTable,
       "fcwZoRoutingEntry": fcwZoRoutingEntry,
       "fcwZoZone": fcwZoZone,
       "fcwZoRouteId": fcwZoRouteId,
       "fcwZoStatus": fcwZoStatus,
       "fcwSbRoutingTable": fcwSbRoutingTable,
       "fcwSbRoutingEntry": fcwSbRoutingEntry,
       "fcwSbSubscriberNumber": fcwSbSubscriberNumber,
       "fcwSbRouteId": fcwSbRouteId,
       "fcwSbStatus": fcwSbStatus,
       "fcwServices": fcwServices,
       "fcwSerCompression": fcwSerCompression,
       "fcwSCompModule0CompressedVcCount": fcwSCompModule0CompressedVcCount,
       "fcwSCompModule1CompressedVcCount": fcwSCompModule1CompressedVcCount,
       "fcwSCompModule2CompressedVcCount": fcwSCompModule2CompressedVcCount,
       "fcwSCompAlgorithmSelection": fcwSCompAlgorithmSelection,
       "fcwSerReliableVirtualCircuits": fcwSerReliableVirtualCircuits,
       "fcwSRvcReliableVcCount": fcwSRvcReliableVcCount,
       "fcwSRvcFirstDataPacketTimer": fcwSRvcFirstDataPacketTimer,
       "fcwSRvcRestoreOutgoingCallRetryCount": fcwSRvcRestoreOutgoingCallRetryCount,
       "fcwSRvcRestoreMinimumRecallTimer": fcwSRvcRestoreMinimumRecallTimer,
       "fcwSRvcRestoreIncomingCallTimer": fcwSRvcRestoreIncomingCallTimer,
       "fcwSRvcRestoreOutgoingCallDelay": fcwSRvcRestoreOutgoingCallDelay,
       "fcwSRvcKWindowSize": fcwSRvcKWindowSize,
       "fcwSRvcFastSelectUse": fcwSRvcFastSelectUse,
       "fcwSRvcOutputMarkers": fcwSRvcOutputMarkers,
       "fcwSRvcConversionAimedPoint": fcwSRvcConversionAimedPoint,
       "fcwSRvcConversionIncomingCall": fcwSRvcConversionIncomingCall,
       "fcwSRvcConversionOutgoingCall": fcwSRvcConversionOutgoingCall,
       "fcwSRvcConversionAddressCheck": fcwSRvcConversionAddressCheck,
       "fcwSerReselectionX29": fcwSerReselectionX29,
       "fcwSResLogChannelCount": fcwSResLogChannelCount,
       "fcwSResProtocolIdentifierTransmission": fcwSResProtocolIdentifierTransmission,
       "fcwSResConversionAimedPoint": fcwSResConversionAimedPoint,
       "fcwSResConversionIncomingCall": fcwSResConversionIncomingCall,
       "fcwSResConversionOutgoingCall": fcwSResConversionOutgoingCall,
       "fcwSResConversionAddressCheck": fcwSResConversionAddressCheck,
       "fcwSerDynamicRouting": fcwSerDynamicRouting,
       "fcwSDynDynamicRouting": fcwSDynDynamicRouting,
       "fcwSDynPassword": fcwSDynPassword,
       "fcwSDynNeighborMaxCount": fcwSDynNeighborMaxCount,
       "fcwSDynLspAgingTimer": fcwSDynLspAgingTimer,
       "fcwSDynLspRetransRequestTimer": fcwSDynLspRetransRequestTimer,
       "fcwSDynLspRetransmissionTimer": fcwSDynLspRetransmissionTimer,
       "fcwSDynRouteCalculationTimer": fcwSDynRouteCalculationTimer,
       "fcwSDynRouteCalculLockingTimer": fcwSDynRouteCalculLockingTimer,
       "fcwSerClearAnalysisTable": fcwSerClearAnalysisTable,
       "fcwSerClearAnalysisEntry": fcwSerClearAnalysisEntry,
       "fcwSClearAnalysId": fcwSClearAnalysId,
       "fcwSClearAnalysStatus": fcwSClearAnalysStatus,
       "fcwSClearAnalysCause": fcwSClearAnalysCause,
       "fcwSClearAnalysDiag": fcwSClearAnalysDiag,
       "fcwSerQOSX25": fcwSerQOSX25,
       "fcwSQOSX25Table": fcwSQOSX25Table,
       "fcwSQOSX25Entry": fcwSQOSX25Entry,
       "fcwSQOSX25CalledAddress": fcwSQOSX25CalledAddress,
       "fcwSQOSX25CallingAddress": fcwSQOSX25CallingAddress,
       "fcwSQOSX25CUDProfileId": fcwSQOSX25CUDProfileId,
       "fcwSQOSX25Status": fcwSQOSX25Status,
       "fcwSQOSX25PriorityLevel": fcwSQOSX25PriorityLevel,
       "fcwSQOSX25QOSProfileId": fcwSQOSX25QOSProfileId,
       "fcwSQOSX25Cos": fcwSQOSX25Cos,
       "fcwSQOSX25TrafficManagementStrategy": fcwSQOSX25TrafficManagementStrategy,
       "fcwSCUDProfilesTable": fcwSCUDProfilesTable,
       "fcwSCUDProfilesEntry": fcwSCUDProfilesEntry,
       "fcwSCUDProfilesId": fcwSCUDProfilesId,
       "fcwSCUDProfilesStatus": fcwSCUDProfilesStatus,
       "fcwSCUDProfilesCUD": fcwSCUDProfilesCUD,
       "fcwSQOSProfilesTable": fcwSQOSProfilesTable,
       "fcwSQOSProfilesEntry": fcwSQOSProfilesEntry,
       "fcwSQOSProfilesId": fcwSQOSProfilesId,
       "fcwSQOSProfilesStatus": fcwSQOSProfilesStatus,
       "fcwSQOSProfilesCIR": fcwSQOSProfilesCIR,
       "fcwSQOSProfilesCIRmin": fcwSQOSProfilesCIRmin,
       "fcwSQOSProfilesBc": fcwSQOSProfilesBc,
       "fcwSQOSProfilesBe": fcwSQOSProfilesBe,
       "fcVirtualPorts": fcVirtualPorts,
       "fcvVirtualPortTable": fcvVirtualPortTable,
       "fcvVirtualPortEntry": fcvVirtualPortEntry,
       "fcvVpVirtualPortId": fcvVpVirtualPortId,
       "fcvVpStatus": fcvVpStatus,
       "fcvVpType": fcvVpType,
       "fcvVpModuleId": fcvVpModuleId,
       "fcvLocalVirtualPorts": fcvLocalVirtualPorts,
       "fcvLocalVirtualPortTable": fcvLocalVirtualPortTable,
       "fcvLocalVirtualPortEntry": fcvLocalVirtualPortEntry,
       "fcvLvpVirtualPortId": fcvLvpVirtualPortId,
       "fcvLvpLogicalPortId": fcvLvpLogicalPortId,
       "fcvLvpFiltering": fcvLvpFiltering,
       "fcvLvpFltConditionTable": fcvLvpFltConditionTable,
       "fcvLvpFltConditionEntry": fcvLvpFltConditionEntry,
       "fcvLvpFltCondConditionId": fcvLvpFltCondConditionId,
       "fcvLvpFltCondStatus": fcvLvpFltCondStatus,
       "fcvLvpFltCondOffset": fcvLvpFltCondOffset,
       "fcvLvpFltCondMask": fcvLvpFltCondMask,
       "fcvLvpFltCondValue": fcvLvpFltCondValue,
       "fcvLvpFltFilterTable": fcvLvpFltFilterTable,
       "fcvLvpFltFilterEntry": fcvLvpFltFilterEntry,
       "fcvLvpFltFilterId": fcvLvpFltFilterId,
       "fcvLvpFltFilterStatus": fcvLvpFltFilterStatus,
       "fcvLvpFltFilterCondition1Id": fcvLvpFltFilterCondition1Id,
       "fcvLvpFltFilterCondition2Id": fcvLvpFltFilterCondition2Id,
       "fcvLvpFltFilterCondition3Id": fcvLvpFltFilterCondition3Id,
       "fcvLvpFltFilteringTable": fcvLvpFltFilteringTable,
       "fcvLvpFltFilteringEntry": fcvLvpFltFilteringEntry,
       "fcvLvpFltFilteringVirtualPortId": fcvLvpFltFilteringVirtualPortId,
       "fcvLvpFltFilteringFilterId": fcvLvpFltFilteringFilterId,
       "fcvLvpFltFilteringStatus": fcvLvpFltFilteringStatus,
       "fcvLvpFltFilteringType": fcvLvpFltFilteringType,
       "fcvRemoteVirtualPorts": fcvRemoteVirtualPorts,
       "fcvRvpCompression": fcvRvpCompression,
       "fcvRvpCompressNegotiation": fcvRvpCompressNegotiation,
       "fcvRvpCompressScrambling": fcvRvpCompressScrambling,
       "fcvRvpCompressMultiPacketsTimer": fcvRvpCompressMultiPacketsTimer,
       "fcvRvpReliableVirtualCircuit": fcvRvpReliableVirtualCircuit,
       "fcvRvpBe": fcvRvpBe,
       "fcvRvpConversionAimedPoint": fcvRvpConversionAimedPoint,
       "fcvRvpConversionIncomingCall": fcvRvpConversionIncomingCall,
       "fcvRvpConversionOutgoingCall": fcvRvpConversionOutgoingCall,
       "fcvRvpConversionAddressCheck": fcvRvpConversionAddressCheck,
       "fcvRvpConvMultiCalledAddrInCall": fcvRvpConvMultiCalledAddrInCall,
       "fcvRvpConvMultiCallingAddrInCall": fcvRvpConvMultiCallingAddrInCall,
       "fcvRvpConvMultiCalledAddrOutCall": fcvRvpConvMultiCalledAddrOutCall,
       "fcvRvpConvMultiCallingAddrOutCall": fcvRvpConvMultiCallingAddrOutCall,
       "fcvRvpCallAcceptwithReverseCharging": fcvRvpCallAcceptwithReverseCharging,
       "fcvRvpCos": fcvRvpCos,
       "fcvRvpCir": fcvRvpCir,
       "fcvRvpMinCir": fcvRvpMinCir,
       "fcvRvpConnectionTable": fcvRvpConnectionTable,
       "fcvRvpConnectionEntry": fcvRvpConnectionEntry,
       "fcvRvpConnRemoteAddress": fcvRvpConnRemoteAddress,
       "fcvRvpConnEncapsulation": fcvRvpConnEncapsulation,
       "fcvRvpConnConnectionId": fcvRvpConnConnectionId,
       "fcvRvpConnStatus": fcvRvpConnStatus,
       "fcvRvpConnFlowTypeMask": fcvRvpConnFlowTypeMask,
       "fcvRvpConnModule0VpId": fcvRvpConnModule0VpId,
       "fcvRvpConnModule1VpId": fcvRvpConnModule1VpId,
       "fcvRvpConnModule2VpId": fcvRvpConnModule2VpId,
       "fcvRvpConnCallDirection": fcvRvpConnCallDirection,
       "fcvRvpConnGrouping": fcvRvpConnGrouping,
       "fcvRvpConnMinimumRecallTimer": fcvRvpConnMinimumRecallTimer,
       "fcvRvpConnInactivityTimer": fcvRvpConnInactivityTimer,
       "fcvRvpConnCir": fcvRvpConnCir,
       "fcvRvpConnCos": fcvRvpConnCos,
       "fcvRvpConnBe": fcvRvpConnBe,
       "fcSna": fcSna,
       "fcsnaLocalVirtualPort": fcsnaLocalVirtualPort,
       "fcsnaLvpLocalLanPuTable": fcsnaLvpLocalLanPuTable,
       "fcsnaLvpLocalLanPuEntry": fcsnaLvpLocalLanPuEntry,
       "fcsnaLvpLlpVirtualPortId": fcsnaLvpLlpVirtualPortId,
       "fcsnaLvpLlpPuId": fcsnaLvpLlpPuId,
       "fcsnaLvpLlpStatus": fcsnaLvpLlpStatus,
       "fcsnaLvpParameters": fcsnaLvpParameters,
       "fcsnaLvpParamLinkType": fcsnaLvpParamLinkType,
       "fcsnaLvpParamFrameFormat": fcsnaLvpParamFrameFormat,
       "fcsnaLvpParamLocalTest": fcsnaLvpParamLocalTest,
       "fcsnaLvpParamCallDirection": fcsnaLvpParamCallDirection,
       "fcsnaLvpMacAddressTrans": fcsnaLvpMacAddressTrans,
       "fcsnaLvpParamT1": fcsnaLvpParamT1,
       "fcsnaLvpParamN2": fcsnaLvpParamN2,
       "fcsnaLvpParamT2": fcsnaLvpParamT2,
       "fcsnaLvpParamN3": fcsnaLvpParamN3,
       "fcsnaLvpParamNW": fcsnaLvpParamNW,
       "fcsnaLvpParamTW": fcsnaLvpParamTW,
       "fcsnaLvpParamRW": fcsnaLvpParamRW,
       "fcsnaLvpParamMinRecallTimer": fcsnaLvpParamMinRecallTimer,
       "fcsnaLvpParamSubscriberNumber": fcsnaLvpParamSubscriberNumber,
       "fcsnaLvpParamReliableVc": fcsnaLvpParamReliableVc,
       "fcsnaLvpParamCompression": fcsnaLvpParamCompression,
       "fcsnaLvpParamCompressNegotiation": fcsnaLvpParamCompressNegotiation,
       "fcsnaLvpParamCompressScrambling": fcsnaLvpParamCompressScrambling,
       "fcsnaLvpParamCompressMultiPacketsTimer": fcsnaLvpParamCompressMultiPacketsTimer,
       "fcsnaLvpParamCos": fcsnaLvpParamCos,
       "fcsnaLvpParamCir": fcsnaLvpParamCir,
       "fcsnaLvpParamCirMin": fcsnaLvpParamCirMin,
       "fcsnaLvpParamBc": fcsnaLvpParamBc,
       "fcsnaLvpParamBe": fcsnaLvpParamBe,
       "fcsnaLvpTrParameters": fcsnaLvpTrParameters,
       "fcsnaLvpTrParamLinkType": fcsnaLvpTrParamLinkType,
       "fcsnaLvpTrParamBroadcastType": fcsnaLvpTrParamBroadcastType,
       "fcsnaLvpTrParamLocalTest": fcsnaLvpTrParamLocalTest,
       "fcsnaLvpTrParamCallDirection": fcsnaLvpTrParamCallDirection,
       "fcsnaLvpTrRingNo": fcsnaLvpTrRingNo,
       "fcsnaLvpTrBridgeNo": fcsnaLvpTrBridgeNo,
       "fcsnaLvpTrMacAddressTrans": fcsnaLvpTrMacAddressTrans,
       "fcsnaLvpTrParamT1": fcsnaLvpTrParamT1,
       "fcsnaLvpTrParamN2": fcsnaLvpTrParamN2,
       "fcsnaLvpTrParamT2": fcsnaLvpTrParamT2,
       "fcsnaLvpTrParamN3": fcsnaLvpTrParamN3,
       "fcsnaLvpTrParamNW": fcsnaLvpTrParamNW,
       "fcsnaLvpTrParamTW": fcsnaLvpTrParamTW,
       "fcsnaLvpTrParamRW": fcsnaLvpTrParamRW,
       "fcsnaLvpTrParamMinRecallTimer": fcsnaLvpTrParamMinRecallTimer,
       "fcsnaLvpTrParamSubscriberNumber": fcsnaLvpTrParamSubscriberNumber,
       "fcsnaLvpTrParamReliableVc": fcsnaLvpTrParamReliableVc,
       "fcsnaLvpTrParamCompression": fcsnaLvpTrParamCompression,
       "fcsnaLvpTrParamCompressNegotiation": fcsnaLvpTrParamCompressNegotiation,
       "fcsnaLvpTrParamCompressScrambling": fcsnaLvpTrParamCompressScrambling,
       "fcsnaLvpTrParamCompressMultiPacketsTimer": fcsnaLvpTrParamCompressMultiPacketsTimer,
       "fcsnaLvpTrParamCos": fcsnaLvpTrParamCos,
       "fcsnaLvpTrParamCir": fcsnaLvpTrParamCir,
       "fcsnaLvpTrParamCirMin": fcsnaLvpTrParamCirMin,
       "fcsnaLvpTrParamBc": fcsnaLvpTrParamBc,
       "fcsnaLvpTrParamBe": fcsnaLvpTrParamBe,
       "fcsnaGeneralParameters": fcsnaGeneralParameters,
       "fcsnaGpRoutingTable": fcsnaGpRoutingTable,
       "fcsnaGpRoutingEntry": fcsnaGpRoutingEntry,
       "fcsnaGpRoutClusterPuId": fcsnaGpRoutClusterPuId,
       "fcsnaGpRoutHostPuId": fcsnaGpRoutHostPuId,
       "fcsnaGpRoutStatus": fcsnaGpRoutStatus,
       "fcsnaGpRoutDsap": fcsnaGpRoutDsap,
       "fcsnaGpRoutSsap": fcsnaGpRoutSsap,
       "fcsnaGpRoutCos": fcsnaGpRoutCos,
       "fcsnaGpRoutCir": fcsnaGpRoutCir,
       "fcsnaGpRoutCirmin": fcsnaGpRoutCirmin,
       "fcsnaGpRoutBc": fcsnaGpRoutBc,
       "fcsnaGpRoutBe": fcsnaGpRoutBe,
       "fcsnaGpRemotePuTable": fcsnaGpRemotePuTable,
       "fcsnaGpRemotePuEntry": fcsnaGpRemotePuEntry,
       "fcsnaGpRemPuPuId": fcsnaGpRemPuPuId,
       "fcsnaGpRemPuStatus": fcsnaGpRemPuStatus,
       "fcsnaGpRemPuProtocol": fcsnaGpRemPuProtocol,
       "fcsnaGpSdlcTable": fcsnaGpSdlcTable,
       "fcsnaGpSdlcEntry": fcsnaGpSdlcEntry,
       "fcsnaGpSdlcPuId": fcsnaGpSdlcPuId,
       "fcsnaGpSdlcStatus": fcsnaGpSdlcStatus,
       "fcsnaGpSdlcLp": fcsnaGpSdlcLp,
       "fcsnaGpSdlcCluster": fcsnaGpSdlcCluster,
       "fcsnaGpX25Table": fcsnaGpX25Table,
       "fcsnaGpX25Entry": fcsnaGpX25Entry,
       "fcsnaGpX25PuId": fcsnaGpX25PuId,
       "fcsnaGpX25Status": fcsnaGpX25Status,
       "fcsnaGpX25Address": fcsnaGpX25Address,
       "fcsnaGpLanFrTable": fcsnaGpLanFrTable,
       "fcsnaGpLanFrEntry": fcsnaGpLanFrEntry,
       "fcsnaGpLanFrPuId": fcsnaGpLanFrPuId,
       "fcsnaGpLanFrStatus": fcsnaGpLanFrStatus,
       "fcsnaGpLanFrMacAddress": fcsnaGpLanFrMacAddress,
       "fcsnaGpMiscellaneousParameters": fcsnaGpMiscellaneousParameters,
       "fcsnaGpMiscMacAddrLearningMode": fcsnaGpMiscMacAddrLearningMode,
       "fcBridge": fcBridge,
       "fcbBridging": fcbBridging,
       "fcbBridgingBetweenRemoteVp": fcbBridgingBetweenRemoteVp,
       "fcbTransparentBridge": fcbTransparentBridge,
       "fcbBrdgVirtualPortTable": fcbBrdgVirtualPortTable,
       "fcbBrdgVirtualPortEntry": fcbBrdgVirtualPortEntry,
       "fcbBrdgVpVirtualPortId": fcbBrdgVpVirtualPortId,
       "fcbBrdgVpStatus": fcbBrdgVpStatus,
       "fcbBrdgVpAgingTime": fcbBrdgVpAgingTime,
       "fcbBrdgVpBroadcasting": fcbBrdgVpBroadcasting,
       "fcbBrdgVpFcsPreservation": fcbBrdgVpFcsPreservation,
       "fcbBrdgRemoteAddressMappingTable": fcbBrdgRemoteAddressMappingTable,
       "fcbBrdgRemoteAddressMappingEntry": fcbBrdgRemoteAddressMappingEntry,
       "fcbBrdgMapMacAddress": fcbBrdgMapMacAddress,
       "fcbBrdgMapStatus": fcbBrdgMapStatus,
       "fcbBrdgMapRemoteAddress": fcbBrdgMapRemoteAddress,
       "fcbSpanningTreeProtocol": fcbSpanningTreeProtocol,
       "fcbStpPriority": fcbStpPriority,
       "fcbStpMaxAge": fcbStpMaxAge,
       "fcbStpHelloTime": fcbStpHelloTime,
       "fcbStpForwardDelay": fcbStpForwardDelay,
       "fcbStpVirtualPortTable": fcbStpVirtualPortTable,
       "fcbStpVirtualPortEntry": fcbStpVirtualPortEntry,
       "fcbStpVpVirtualPortId": fcbStpVpVirtualPortId,
       "fcbStpVpPortPriority": fcbStpVpPortPriority,
       "fcbStpVpPortPathCost": fcbStpVpPortPathCost,
       "fcbStpVpBpduEncapsulation": fcbStpVpBpduEncapsulation,
       "fcIpRouter": fcIpRouter,
       "fciIpRouting": fciIpRouting,
       "fciFastIpRouting": fciFastIpRouting,
       "fciIcmpRedirection": fciIcmpRedirection,
       "fciSourceRouting": fciSourceRouting,
       "fciVirtualPortTable": fciVirtualPortTable,
       "fciVirtualPortEntry": fciVirtualPortEntry,
       "fciVpVirtualPortId": fciVpVirtualPortId,
       "fciVpStatus": fciVpStatus,
       "fciVpIpAddress": fciVpIpAddress,
       "fciVpNetMask": fciVpNetMask,
       "fciVpMtu": fciVpMtu,
       "fciVpProxyArp": fciVpProxyArp,
       "fciVpInverseArp": fciVpInverseArp,
       "fciLocalVirtualPortTable": fciLocalVirtualPortTable,
       "fciLocalVirtualPortEntry": fciLocalVirtualPortEntry,
       "fciLvpVirtualPortId": fciLvpVirtualPortId,
       "fciLvpStatus": fciLvpStatus,
       "fciLvpEncapsulation": fciLvpEncapsulation,
       "fciLocalClusterTable": fciLocalClusterTable,
       "fciLocalClusterEntry": fciLocalClusterEntry,
       "fciLclVirtualPortId": fciLclVirtualPortId,
       "fciLclClusterNumber": fciLclClusterNumber,
       "fciLclStatus": fciLclStatus,
       "fciLclVirtualIpAddress": fciLclVirtualIpAddress,
       "fciLclPriority": fciLclPriority,
       "fciRemoteNetToMediaTable": fciRemoteNetToMediaTable,
       "fciRemoteNetToMediaEntry": fciRemoteNetToMediaEntry,
       "fciRemIpAddress": fciRemIpAddress,
       "fciRemStatus": fciRemStatus,
       "fciRemRemoteAddress": fciRemRemoteAddress,
       "fciNetToMediaTable": fciNetToMediaTable,
       "fciNetToMediaEntry": fciNetToMediaEntry,
       "fciNetToMediaIpAddress": fciNetToMediaIpAddress,
       "fciNetToMediaStatus": fciNetToMediaStatus,
       "fciNetToMediaMacAddress": fciNetToMediaMacAddress,
       "fciIpRouteTable": fciIpRouteTable,
       "fciIpRouteEntry": fciIpRouteEntry,
       "fciRouteDest": fciRouteDest,
       "fciRouteMask": fciRouteMask,
       "fciRouteStatus": fciRouteStatus,
       "fciRouteNextHop": fciRouteNextHop,
       "fciRouteMetric": fciRouteMetric,
       "fciFlowManagement": fciFlowManagement,
       "fciFlowTable": fciFlowTable,
       "fciFlowEntry": fciFlowEntry,
       "fciFlowFlowId": fciFlowFlowId,
       "fciFlowStatus": fciFlowStatus,
       "fciFlowType": fciFlowType,
       "fciFlowVpId": fciFlowVpId,
       "fciFlowSrcIpAddress": fciFlowSrcIpAddress,
       "fciFlowSrcMask": fciFlowSrcMask,
       "fciFlowDestIpAddress": fciFlowDestIpAddress,
       "fciFlowDestMask": fciFlowDestMask,
       "fciFlowProtocol": fciFlowProtocol,
       "fciFlowPortMin": fciFlowPortMin,
       "fciFlowPortMax": fciFlowPortMax,
       "fciFlowLengthMax": fciFlowLengthMax,
       "fciFlowSegmented": fciFlowSegmented,
       "fciFlowAddrSubstituteTable": fciFlowAddrSubstituteTable,
       "fciFlowAddrSubstituteEntry": fciFlowAddrSubstituteEntry,
       "fciFlowSubstFlowId": fciFlowSubstFlowId,
       "fciFlowSubstDestIpAddress": fciFlowSubstDestIpAddress,
       "fciFlowSubstStatus": fciFlowSubstStatus,
       "fciFlowRouteTable": fciFlowRouteTable,
       "fciFlowRouteEntry": fciFlowRouteEntry,
       "fciFlowRouteFlowId": fciFlowRouteFlowId,
       "fciFlowRouteStatus": fciFlowRouteStatus,
       "fciFlowRouteNextHop": fciFlowRouteNextHop,
       "fciRip": fciRip,
       "fciRipAdminStatus": fciRipAdminStatus,
       "fciRipStaticRoutesDistribution": fciRipStaticRoutesDistribution,
       "fciRipEgpRoutesDistribution": fciRipEgpRoutesDistribution,
       "fciRipDistributionTimer": fciRipDistributionTimer,
       "fciRipPreference": fciRipPreference,
       "fciRipOspfRoutesDistribution": fciRipOspfRoutesDistribution,
       "fciRipOspfRoutesDistributionMetric": fciRipOspfRoutesDistributionMetric,
       "fciRipStaticRoutesDistributionMetric": fciRipStaticRoutesDistributionMetric,
       "fciRipVirtualPortTable": fciRipVirtualPortTable,
       "fciRipVirtualPortEntry": fciRipVirtualPortEntry,
       "fciRipVpVirtualPortId": fciRipVpVirtualPortId,
       "fciRipVpDistribution": fciRipVpDistribution,
       "fciRipVpMetricOut": fciRipVpMetricOut,
       "fciRipVpRipIn": fciRipVpRipIn,
       "fciRipVpMetricIn": fciRipVpMetricIn,
       "fciRipVpVersion": fciRipVpVersion,
       "fciRipVpMulticast": fciRipVpMulticast,
       "fciRipVpAuthType": fciRipVpAuthType,
       "fciRipVpAuthKey": fciRipVpAuthKey,
       "fciRipNeighborTable": fciRipNeighborTable,
       "fciRipNeighborEntry": fciRipNeighborEntry,
       "fciRipNeighborIpAddress": fciRipNeighborIpAddress,
       "fciRipNeighborStatus": fciRipNeighborStatus,
       "fciRipNeighborOutput": fciRipNeighborOutput,
       "fciRipNeighborInput": fciRipNeighborInput,
       "fciRipNeighborBackupGroup": fciRipNeighborBackupGroup,
       "fciRipEgpRoutesDistributionTable": fciRipEgpRoutesDistributionTable,
       "fciRipEgpRoutesDistributionEntry": fciRipEgpRoutesDistributionEntry,
       "fciRipEgpRoutesAsNumber": fciRipEgpRoutesAsNumber,
       "fciRipEgpRoutesStatus": fciRipEgpRoutesStatus,
       "fciRipEgpRoutesMetric": fciRipEgpRoutesMetric,
       "fciOspf": fciOspf,
       "fciOspfGeneralParameters": fciOspfGeneralParameters,
       "fciOspfAdminStatus": fciOspfAdminStatus,
       "fciOspfRouterId": fciOspfRouterId,
       "fciOspfRoutesPreference": fciOspfRoutesPreference,
       "fciOspfAsePreference": fciOspfAsePreference,
       "fciOspfVirtualPortsTable": fciOspfVirtualPortsTable,
       "fciOspfVirtualPortsEntry": fciOspfVirtualPortsEntry,
       "fciOspfVpId": fciOspfVpId,
       "fciOspfVpAdminStatus": fciOspfVpAdminStatus,
       "fciOspfVpAreaId": fciOspfVpAreaId,
       "fciOspfVpMetric": fciOspfVpMetric,
       "fciOspfVpType": fciOspfVpType,
       "fciOspfVpDRPriority": fciOspfVpDRPriority,
       "fciOspfVpTransitDelay": fciOspfVpTransitDelay,
       "fciOspfVpRetransmitInterval": fciOspfVpRetransmitInterval,
       "fciOspfVpHelloInterval": fciOspfVpHelloInterval,
       "fciOspfVpRouterDeadInterval": fciOspfVpRouterDeadInterval,
       "fciOspfVpPollInterval": fciOspfVpPollInterval,
       "fciOspfVpAuthenticationKey": fciOspfVpAuthenticationKey,
       "fciOspfNeighborsTable": fciOspfNeighborsTable,
       "fciOspfNeighborsEntry": fciOspfNeighborsEntry,
       "fciOspfNeighborIpAddress": fciOspfNeighborIpAddress,
       "fciOspfNeighborStatus": fciOspfNeighborStatus,
       "fciOspfNeighborEligibleStatus": fciOspfNeighborEligibleStatus,
       "fciOspfAreasTable": fciOspfAreasTable,
       "fciOspfAreasEntry": fciOspfAreasEntry,
       "fciOspfAreaId": fciOspfAreaId,
       "fciOspfAreaStatus": fciOspfAreaStatus,
       "fciOspfAreaAuthType": fciOspfAreaAuthType,
       "fciOspfAreaStubStatus": fciOspfAreaStubStatus,
       "fciOspfAreaStubMetric": fciOspfAreaStubMetric,
       "fciOspfAreaRangesTable": fciOspfAreaRangesTable,
       "fciOspfAreaRangesEntry": fciOspfAreaRangesEntry,
       "fciOspfAreaRangeIpAddress": fciOspfAreaRangeIpAddress,
       "fciOspfAreaRangeIpMask": fciOspfAreaRangeIpMask,
       "fciOspfAreaRangeStatus": fciOspfAreaRangeStatus,
       "fciOspfAreaRangeAreaId": fciOspfAreaRangeAreaId,
       "fciOspfAreaRangeRestrict": fciOspfAreaRangeRestrict,
       "fciOspfVirtualLinksTable": fciOspfVirtualLinksTable,
       "fciOspfVirtualLinksEntry": fciOspfVirtualLinksEntry,
       "fciOspfVlNeighborId": fciOspfVlNeighborId,
       "fciOspfVlTransitAreaId": fciOspfVlTransitAreaId,
       "fciOspfVlStatus": fciOspfVlStatus,
       "fciOspfVlDRPriority": fciOspfVlDRPriority,
       "fciOspfVlTransitDelay": fciOspfVlTransitDelay,
       "fciOspfVlRetransmitInterval": fciOspfVlRetransmitInterval,
       "fciOspfVlHelloInterval": fciOspfVlHelloInterval,
       "fciOspfVlRouterDeadInterval": fciOspfVlRouterDeadInterval,
       "fciOspfVlAuthenticationKey": fciOspfVlAuthenticationKey,
       "fciOspfExportingGroup": fciOspfExportingGroup,
       "fciOspfAseExportInterval": fciOspfAseExportInterval,
       "fciOspfAseExportLimit": fciOspfAseExportLimit,
       "fciOspfAseExportStaticsStatus": fciOspfAseExportStaticsStatus,
       "fciOspfAseExportStaticsMetric": fciOspfAseExportStaticsMetric,
       "fciOspfAseExportStaticsTag": fciOspfAseExportStaticsTag,
       "fciOspfAseExportStaticsType": fciOspfAseExportStaticsType,
       "fciOspfAseExportRipStatus": fciOspfAseExportRipStatus,
       "fciOspfAseExportRipMetric": fciOspfAseExportRipMetric,
       "fciOspfAseExportRipTag": fciOspfAseExportRipTag,
       "fciOspfAseExportRipType": fciOspfAseExportRipType,
       "fciEgp": fciEgp,
       "fciEgpAdminStatus": fciEgpAdminStatus,
       "fciEgpAutonomousSystemNumber": fciEgpAutonomousSystemNumber,
       "fciEgpStaticRoutesDistribution": fciEgpStaticRoutesDistribution,
       "fciEgpRipRoutesDistribution": fciEgpRipRoutesDistribution,
       "fciEgpMetricDistribution": fciEgpMetricDistribution,
       "fciEgpNeighborTable": fciEgpNeighborTable,
       "fciEgpNeighborEntry": fciEgpNeighborEntry,
       "fciEgpNeighborIpAddress": fciEgpNeighborIpAddress,
       "fciEgpNeighborStatus": fciEgpNeighborStatus,
       "fciEgpNeighborAsNumber": fciEgpNeighborAsNumber,
       "fciEgpTargetAsDistributionTable": fciEgpTargetAsDistributionTable,
       "fciEgpTargetAsDistributionEntry": fciEgpTargetAsDistributionEntry,
       "fciEgpTargetAsNumber": fciEgpTargetAsNumber,
       "fciEgpTargetAsStatus": fciEgpTargetAsStatus,
       "fciSnmp": fciSnmp,
       "fciSnmpCommunityStringReadOnly": fciSnmpCommunityStringReadOnly,
       "fciSnmpCommunityStringReadWrite": fciSnmpCommunityStringReadWrite,
       "fciSnmpCommunityStringTrap": fciSnmpCommunityStringTrap,
       "fciSnmpAuthenticationFailureTrap": fciSnmpAuthenticationFailureTrap,
       "fciSnmpModule0TrapSourceAddrVpId": fciSnmpModule0TrapSourceAddrVpId,
       "fciSnmpModule1TrapSourceAddrVpId": fciSnmpModule1TrapSourceAddrVpId,
       "fciSnmpModule2TrapSourceAddrVpId": fciSnmpModule2TrapSourceAddrVpId,
       "fciSnmpManagerFiltering": fciSnmpManagerFiltering,
       "fciSnmpManagerTable": fciSnmpManagerTable,
       "fciSnmpManagerEntry": fciSnmpManagerEntry,
       "fciSnmpManagerIpAddress": fciSnmpManagerIpAddress,
       "fciSnmpManagerStatus": fciSnmpManagerStatus,
       "fciSnmpManagerSendTraps": fciSnmpManagerSendTraps,
       "fciSnmpManagerTrapsUdpPort": fciSnmpManagerTrapsUdpPort,
       "fciBootP": fciBootP,
       "fciBootPClient": fciBootPClient,
       "fciBootPClientStart": fciBootPClientStart,
       "fciBootPClientServer": fciBootPClientServer,
       "fciBootPClientBootFile": fciBootPClientBootFile,
       "fciBootPClientBootTime": fciBootPClientBootTime,
       "fciBootPClientRetransNb": fciBootPClientRetransNb,
       "fciBootPInterfaceTable": fciBootPInterfaceTable,
       "fciBootPInterfaceEntry": fciBootPInterfaceEntry,
       "fciBootPInterfaceVpId": fciBootPInterfaceVpId,
       "fciBootPInterfaceIpAddress": fciBootPInterfaceIpAddress,
       "fciBootPInterfaceStatus": fciBootPInterfaceStatus,
       "fciBootPInterfaceType": fciBootPInterfaceType,
       "fciTelnet": fciTelnet,
       "fciTelnetConfiguration": fciTelnetConfiguration,
       "fciTelnetMaxSession": fciTelnetMaxSession,
       "fciTelnetTimer": fciTelnetTimer,
       "fciTelnetPwd": fciTelnetPwd,
       "fciTelnetPwdP0": fciTelnetPwdP0,
       "fciTelnetPwdP1": fciTelnetPwdP1,
       "fciTelnetPwdP2": fciTelnetPwdP2,
       "fciTelnetPwdP3": fciTelnetPwdP3,
       "fciTelnetPwdP4": fciTelnetPwdP4,
       "fciTelnetPwdP5": fciTelnetPwdP5,
       "fciTelnetPwdP6": fciTelnetPwdP6,
       "fciTelnetPwdP7": fciTelnetPwdP7,
       "fciTelnetPwdP8": fciTelnetPwdP8,
       "fciTelnetPwdP9": fciTelnetPwdP9,
       "fciTelnetUserTable": fciTelnetUserTable,
       "fciTelnetUserEntry": fciTelnetUserEntry,
       "fciTelnetUserId": fciTelnetUserId,
       "fciTelnetUserStatus": fciTelnetUserStatus,
       "fciTelnetUserLogin": fciTelnetUserLogin,
       "fciTelnetUserPriority": fciTelnetUserPriority,
       "fcIpx": fcIpx,
       "fcxInstance": fcxInstance,
       "fcxIpxRouting": fcxIpxRouting,
       "fcxBasicSysName": fcxBasicSysName,
       "fcxAdvSysMaxPathSplits": fcxAdvSysMaxPathSplits,
       "fcxAdvSysMaxHops": fcxAdvSysMaxHops,
       "fcxCircuits": fcxCircuits,
       "fcxCircuitTable": fcxCircuitTable,
       "fcxCircuitEntry": fcxCircuitEntry,
       "fcxCircCircuitId": fcxCircCircuitId,
       "fcxCircStatus": fcxCircStatus,
       "fcxCircVirtualPortId": fcxCircVirtualPortId,
       "fcxCircOperState": fcxCircOperState,
       "fcxCircName": fcxCircName,
       "fcxCircType": fcxCircType,
       "fcxCircLocalMaxPacketSize": fcxCircLocalMaxPacketSize,
       "fcxCircNetNumber": fcxCircNetNumber,
       "fcxCircChecksumEnabling": fcxCircChecksumEnabling,
       "fcxCircuitLocalVpTable": fcxCircuitLocalVpTable,
       "fcxCircuitLocalVpEntry": fcxCircuitLocalVpEntry,
       "fcxCircLvpCircuitId": fcxCircLvpCircuitId,
       "fcxCircLvpStatus": fcxCircLvpStatus,
       "fcxCircLvpEncapsulation": fcxCircLvpEncapsulation,
       "fcxCircuitRemoteVpTable": fcxCircuitRemoteVpTable,
       "fcxCircuitRemoteVpEntry": fcxCircuitRemoteVpEntry,
       "fcxCircRvpCircuitId": fcxCircRvpCircuitId,
       "fcxCircRvpStatus": fcxCircRvpStatus,
       "fcxCircRvpRemoteAddress": fcxCircRvpRemoteAddress,
       "fcxCircRvpLocalNode": fcxCircRvpLocalNode,
       "fcxRouting": fcxRouting,
       "fcxRoutInstance": fcxRoutInstance,
       "fcxRoutType20PacketBroadcasting": fcxRoutType20PacketBroadcasting,
       "fcxRoutCircuitTable": fcxRoutCircuitTable,
       "fcxRoutCircuitEntry": fcxRoutCircuitEntry,
       "fcxRoutCircCircuitId": fcxRoutCircCircuitId,
       "fcxRoutCircNcpSpoofing": fcxRoutCircNcpSpoofing,
       "fcxRoutCircType20PacketBroadcasting": fcxRoutCircType20PacketBroadcasting,
       "fcxRoutCircAddressFiltering": fcxRoutCircAddressFiltering,
       "fcxRoutIpxStaticRouteTable": fcxRoutIpxStaticRouteTable,
       "fcxRoutIpxStaticRouteEntry": fcxRoutIpxStaticRouteEntry,
       "fcxRoutStaticRouteCircuitId": fcxRoutStaticRouteCircuitId,
       "fcxRoutStaticRouteNetNum": fcxRoutStaticRouteNetNum,
       "fcxRoutStaticRouteStatus": fcxRoutStaticRouteStatus,
       "fcxRoutStaticRouteTicks": fcxRoutStaticRouteTicks,
       "fcxRoutStaticRouteHopCount": fcxRoutStaticRouteHopCount,
       "fcxRoutAddressFilteringTable": fcxRoutAddressFilteringTable,
       "fcxRoutAddressFilteringEntry": fcxRoutAddressFilteringEntry,
       "fcxRoutAddrFltCircuitId": fcxRoutAddrFltCircuitId,
       "fcxRoutAddrFltFilterId": fcxRoutAddrFltFilterId,
       "fcxRoutAddrFltStatus": fcxRoutAddrFltStatus,
       "fcxRoutAddrFltFiltering": fcxRoutAddrFltFiltering,
       "fcxRoutAddrFltField": fcxRoutAddrFltField,
       "fcxRoutAddrFltMask": fcxRoutAddrFltMask,
       "fcxRoutAddrFltValue": fcxRoutAddrFltValue,
       "fcxRoutingInformationProtocol": fcxRoutingInformationProtocol,
       "fcxRipInstance": fcxRipInstance,
       "fcxRipSysState": fcxRipSysState,
       "fcxRipInputFiltering": fcxRipInputFiltering,
       "fcxRipCircuitTable": fcxRipCircuitTable,
       "fcxRipCircuitEntry": fcxRipCircuitEntry,
       "fcxRipCircCircuitId": fcxRipCircCircuitId,
       "fcxRipCircState": fcxRipCircState,
       "fcxRipCircPace": fcxRipCircPace,
       "fcxRipCircUpdate": fcxRipCircUpdate,
       "fcxRipCircAgeMultiplier": fcxRipCircAgeMultiplier,
       "fcxRipCircPacketSize": fcxRipCircPacketSize,
       "fcxRipCircOutputFiltering": fcxRipCircOutputFiltering,
       "fcxRipInputFilteringTable": fcxRipInputFilteringTable,
       "fcxRipInputFilteringEntry": fcxRipInputFilteringEntry,
       "fcxRipInFltFilterId": fcxRipInFltFilterId,
       "fcxRipInFltStatus": fcxRipInFltStatus,
       "fcxRipInFltFiltering": fcxRipInFltFiltering,
       "fcxRipInFltNetAddress": fcxRipInFltNetAddress,
       "fcxRipInFltMask": fcxRipInFltMask,
       "fcxRipOutputFilteringTable": fcxRipOutputFilteringTable,
       "fcxRipOutputFilteringEntry": fcxRipOutputFilteringEntry,
       "fcxRipOutFltCircuitId": fcxRipOutFltCircuitId,
       "fcxRipOutFltFilterId": fcxRipOutFltFilterId,
       "fcxRipOutFltStatus": fcxRipOutFltStatus,
       "fcxRipOutFltFiltering": fcxRipOutFltFiltering,
       "fcxRipOutFltNetAddress": fcxRipOutFltNetAddress,
       "fcxRipOutFltMask": fcxRipOutFltMask,
       "fcxServices": fcxServices,
       "fcxServInstance": fcxServInstance,
       "fcxServSapSysState": fcxServSapSysState,
       "fcxServSapInputFiltering": fcxServSapInputFiltering,
       "fcxServCircuitTable": fcxServCircuitTable,
       "fcxServCircuitEntry": fcxServCircuitEntry,
       "fcxServCircSapCircuitId": fcxServCircSapCircuitId,
       "fcxServCircSapState": fcxServCircSapState,
       "fcxServCircSapPace": fcxServCircSapPace,
       "fcxServCircSapUpdate": fcxServCircSapUpdate,
       "fcxServCircSapAgeMultiplier": fcxServCircSapAgeMultiplier,
       "fcxServCircSapPacketSize": fcxServCircSapPacketSize,
       "fcxServCircSapGetNearestServerReply": fcxServCircSapGetNearestServerReply,
       "fcxServCircSapOutputFiltering": fcxServCircSapOutputFiltering,
       "fcxServStaticServiceTable": fcxServStaticServiceTable,
       "fcxServStaticServiceEntry": fcxServStaticServiceEntry,
       "fcxServStaticServiceId": fcxServStaticServiceId,
       "fcxServStaticStatus": fcxServStaticStatus,
       "fcxServStaticCircuitId": fcxServStaticCircuitId,
       "fcxServStaticName": fcxServStaticName,
       "fcxServStaticType": fcxServStaticType,
       "fcxServStaticNetNum": fcxServStaticNetNum,
       "fcxServStaticNode": fcxServStaticNode,
       "fcxServStaticSocket": fcxServStaticSocket,
       "fcxServStaticHopCount": fcxServStaticHopCount,
       "fcxServSapInputFilteringTable": fcxServSapInputFilteringTable,
       "fcxServSapInputFilteringEntry": fcxServSapInputFilteringEntry,
       "fcxServSapInFltFilterId": fcxServSapInFltFilterId,
       "fcxServSapInFltStatus": fcxServSapInFltStatus,
       "fcxServSapInFltFiltering": fcxServSapInFltFiltering,
       "fcxServSapInFltCheckedField": fcxServSapInFltCheckedField,
       "fcxServSapInFltServiceNameType": fcxServSapInFltServiceNameType,
       "fcxServSapInFltServiceName": fcxServSapInFltServiceName,
       "fcxServSapInFltServiceType": fcxServSapInFltServiceType,
       "fcxServSapOutputFilteringTable": fcxServSapOutputFilteringTable,
       "fcxServSapOutputFilteringEntry": fcxServSapOutputFilteringEntry,
       "fcxServSapOutFltCircuitId": fcxServSapOutFltCircuitId,
       "fcxServSapOutFltFilterId": fcxServSapOutFltFilterId,
       "fcxServSapOutFltStatus": fcxServSapOutFltStatus,
       "fcxServSapOutFltFiltering": fcxServSapOutFltFiltering,
       "fcxServSapOutFltCheckedField": fcxServSapOutFltCheckedField,
       "fcxServSapOutFltServiceNameType": fcxServSapOutFltServiceNameType,
       "fcxServSapOutFltServiceName": fcxServSapOutFltServiceName,
       "fcxServSapOutFltServiceType": fcxServSapOutFltServiceType,
       "fcClnp": fcClnp,
       "fccClnpRouting": fccClnpRouting,
       "fccLocalNetworkEntityTitle": fccLocalNetworkEntityTitle,
       "fccErrorFramesSending": fccErrorFramesSending,
       "fccVirtualPortTable": fccVirtualPortTable,
       "fccVirtualPortEntry": fccVirtualPortEntry,
       "fccVpVirtualPortId": fccVpVirtualPortId,
       "fccVpStatus": fccVpStatus,
       "fccVpMtu": fccVpMtu,
       "fccLocalVirtualPortTable": fccLocalVirtualPortTable,
       "fccLocalVirtualPortEntry": fccLocalVirtualPortEntry,
       "fccLvpVirtualPortId": fccLvpVirtualPortId,
       "fccLvpStatus": fccLvpStatus,
       "fccLvpEsIsRedirection": fccLvpEsIsRedirection,
       "fccLvpEsIsConfigTimer": fccLvpEsIsConfigTimer,
       "fccLvpEsIsHoldingTimer": fccLvpEsIsHoldingTimer,
       "fccNeighborTable": fccNeighborTable,
       "fccNeighborEntry": fccNeighborEntry,
       "fccNeighNeighborId": fccNeighNeighborId,
       "fccNeighStatus": fccNeighStatus,
       "fccNeighType": fccNeighType,
       "fccNeighVirtualPortId": fccNeighVirtualPortId,
       "fccNeighClnpAddress": fccNeighClnpAddress,
       "fccLocalNeighborTable": fccLocalNeighborTable,
       "fccLocalNeighborEntry": fccLocalNeighborEntry,
       "fccLneighNeighborId": fccLneighNeighborId,
       "fccLneighStatus": fccLneighStatus,
       "fccLneighMacAddress": fccLneighMacAddress,
       "fccRemoteNeighborTable": fccRemoteNeighborTable,
       "fccRemoteNeighborEntry": fccRemoteNeighborEntry,
       "fccRneighNeighborId": fccRneighNeighborId,
       "fccRneighStatus": fccRneighStatus,
       "fccRneighRemoteAddress": fccRneighRemoteAddress,
       "fccClnpRouteTable": fccClnpRouteTable,
       "fccClnpRouteEntry": fccClnpRouteEntry,
       "fccRoutRouteId": fccRoutRouteId,
       "fccRoutStatus": fccRoutStatus,
       "fccRoutDestClnpAddress": fccRoutDestClnpAddress,
       "fccRoutNextHopNeighborId": fccRoutNextHopNeighborId,
       "frxManagement": frxManagement,
       "fmEvents": fmEvents,
       "fmeTroubleReport": fmeTroubleReport,
       "fmeTrblEventType": fmeTrblEventType,
       "fmeTroubleReportInfoTable": fmeTroubleReportInfoTable,
       "fmeTroubleReportInfoEntry": fmeTroubleReportInfoEntry,
       "fmeTrblInfoIndex": fmeTrblInfoIndex,
       "fmeTrblInfoData": fmeTrblInfoData,
       "fmeFamilyTable": fmeFamilyTable,
       "fmeFamilyEntry": fmeFamilyEntry,
       "fmeFamFamilyId": fmeFamFamilyId,
       "fmeFamStoredEventsCount": fmeFamStoredEventsCount,
       "fmeFamStoredEventsCommand": fmeFamStoredEventsCommand,
       "fmeEventTable": fmeEventTable,
       "fmeEventEntry": fmeEventEntry,
       "fmeEvtFamilyId": fmeEvtFamilyId,
       "fmeEvtEventIndex": fmeEvtEventIndex,
       "fmeEvtEventType": fmeEvtEventType,
       "fmeEvtTime": fmeEvtTime,
       "fmeEvtLineId": fmeEvtLineId,
       "fmeEvtData": fmeEvtData,
       "fmeTrapInfo": fmeTrapInfo,
       "fmeTrapLineId": fmeTrapLineId,
       "fmeTrapFamilyId": fmeTrapFamilyId,
       "fmeTrapEventType": fmeTrapEventType,
       "fmeTrapEventData": fmeTrapEventData,
       "fmStat": fmStat,
       "fmStatControl": fmStatControl,
       "fmsCtrlStatus": fmsCtrlStatus,
       "fmsCtrlSumming": fmsCtrlSumming,
       "fmsCtrlCountersCommand": fmsCtrlCountersCommand,
       "fmsCtrlResetTime": fmsCtrlResetTime,
       "fmStatGlobal": fmStatGlobal,
       "fmsGlobInitBuffCount": fmsGlobInitBuffCount,
       "fmsGlobFreeBuffCount": fmsGlobFreeBuffCount,
       "fmsGlobCpuA": fmsGlobCpuA,
       "fmsGlobCpuB": fmsGlobCpuB,
       "fmsGlobVcInUseCount": fmsGlobVcInUseCount,
       "fmsGlobGeneratorsInUseCount": fmsGlobGeneratorsInUseCount,
       "fmsGlobCompressOctetGain": fmsGlobCompressOctetGain,
       "fmsGlobCompressBillGain": fmsGlobCompressBillGain,
       "fmsGlobLanCpu": fmsGlobLanCpu,
       "fmsGlobCongCpuLostBlocks": fmsGlobCongCpuLostBlocks,
       "fmsGlobCongRamLostBlocks": fmsGlobCongRamLostBlocks,
       "fmStatInputTraffic": fmStatInputTraffic,
       "fmsInputDataPktsCounter": fmsInputDataPktsCounter,
       "fmsInputDataBytesCounter": fmsInputDataBytesCounter,
       "fmsInputIntrPktsCounter": fmsInputIntrPktsCounter,
       "fmsInputReinitPktsCounter": fmsInputReinitPktsCounter,
       "fmsInputCallPktsCounter": fmsInputCallPktsCounter,
       "fmsInputCallConfPktsCounter": fmsInputCallConfPktsCounter,
       "fmStatLineTable": fmStatLineTable,
       "fmStatLineEntry": fmStatLineEntry,
       "fmsLineId": fmsLineId,
       "fmsLineState": fmsLineState,
       "fmsLineLcInUseCount": fmsLineLcInUseCount,
       "fmsLineReinitsCounter": fmsLineReinitsCounter,
       "fmsLineIncidentsCounter": fmsLineIncidentsCounter,
       "fmsLineInputOctetsCounter": fmsLineInputOctetsCounter,
       "fmsLineOutputOctetsCounter": fmsLineOutputOctetsCounter,
       "fmsLineType": fmsLineType,
       "fmsLineTestState": fmsLineTestState,
       "fmStatSignalTable": fmStatSignalTable,
       "fmStatSignalEntry": fmStatSignalEntry,
       "fmsSigPhysPortId": fmsSigPhysPortId,
       "fmsSigState": fmsSigState,
       "fmsSigDceOrDte": fmsSigDceOrDte,
       "fmsSig105": fmsSig105,
       "fmsSig106": fmsSig106,
       "fmsSig107": fmsSig107,
       "fmsSig108": fmsSig108,
       "fmsSig109": fmsSig109,
       "fmsSig111": fmsSig111,
       "fmsSig125": fmsSig125,
       "fmsSig140": fmsSig140,
       "fmsSig141": fmsSig141,
       "fmsSig142": fmsSig142,
       "fmsSigSyn": fmsSigSyn,
       "fmStatLinesSummary": fmStatLinesSummary,
       "fmsLinesSummState": fmsLinesSummState,
       "fmStatStateTable": fmStatStateTable,
       "fmStatStateEntry": fmStatStateEntry,
       "fmsStateLine": fmsStateLine,
       "fmsStateLineType": fmsStateLineType,
       "fmsStateOsiState": fmsStateOsiState,
       "fmsStateTestState": fmsStateTestState,
       "fmsStateMlpTrunkMainLine": fmsStateMlpTrunkMainLine,
       "fmsStateMlpTrunkNumber": fmsStateMlpTrunkNumber,
       "fmsStateMlpTrunkState": fmsStateMlpTrunkState,
       "fmStatMlpTable": fmStatMlpTable,
       "fmStatMlpEntry": fmStatMlpEntry,
       "fmsMlpTrunkNumber": fmsMlpTrunkNumber,
       "fmsMlpLineId": fmsMlpLineId,
       "fmsMlpLineType": fmsMlpLineType,
       "fmStatEthernet": fmStatEthernet,
       "fmStatEthernetTable": fmStatEthernetTable,
       "fmStatEthernetEntry": fmStatEthernetEntry,
       "fmsEthLineId": fmsEthLineId,
       "fmsEthPhysAddr": fmsEthPhysAddr,
       "fmsEthOperStatus": fmsEthOperStatus,
       "fmsEthInterface": fmsEthInterface,
       "fmsEthAutoPortSelection": fmsEthAutoPortSelection,
       "fmsEthPolarityCorrection": fmsEthPolarityCorrection,
       "fmsEthPolarityInversion": fmsEthPolarityInversion,
       "fmsEthLinkIntegrity": fmsEthLinkIntegrity,
       "fmsEthTestLoopback": fmsEthTestLoopback,
       "fmsEthJabber": fmsEthJabber,
       "fmsEthTestMode": fmsEthTestMode,
       "fmsEthTdrState": fmsEthTdrState,
       "fmsEthTdrLoc": fmsEthTdrLoc,
       "fmsEthUpTime": fmsEthUpTime,
       "fmStatEthInputTrafficTable": fmStatEthInputTrafficTable,
       "fmStatEthInputTrafficEntry": fmStatEthInputTrafficEntry,
       "fmsEthInLineId": fmsEthInLineId,
       "fmsEthInOctetsCounter": fmsEthInOctetsCounter,
       "fmsEthInPktsCounter": fmsEthInPktsCounter,
       "fmsEthInNoErrCounter": fmsEthInNoErrCounter,
       "fmsEthInUcastPktsCounter": fmsEthInUcastPktsCounter,
       "fmsEthInAlignmentErrorsCounter": fmsEthInAlignmentErrorsCounter,
       "fmsEthInFCSErrorsCounter": fmsEthInFCSErrorsCounter,
       "fmsEthInPktsTooLongsCounter": fmsEthInPktsTooLongsCounter,
       "fmsEthInPktsTooShortsCounter": fmsEthInPktsTooShortsCounter,
       "fmsEthInErrOutOfResourcesCounter": fmsEthInErrOutOfResourcesCounter,
       "fmsEthInErrDmaOverrunCounter": fmsEthInErrDmaOverrunCounter,
       "fmsEthInErrCollCounter": fmsEthInErrCollCounter,
       "fmsEthInErrOverFlowCounter": fmsEthInErrOverFlowCounter,
       "fmStatEthOutputTrafficTable": fmStatEthOutputTrafficTable,
       "fmStatEthOutputTrafficEntry": fmStatEthOutputTrafficEntry,
       "fmsEthOutLineId": fmsEthOutLineId,
       "fmsEthOutOctetsCounter": fmsEthOutOctetsCounter,
       "fmsEthOutPktsCounter": fmsEthOutPktsCounter,
       "fmsEthOutNoErrCounter": fmsEthOutNoErrCounter,
       "fmsEthOutSingleCollisionFramesCounter": fmsEthOutSingleCollisionFramesCounter,
       "fmsEthOutMultipleCollisionFramesCounter": fmsEthOutMultipleCollisionFramesCounter,
       "fmsEthOutDeferredTransmissionsCounter": fmsEthOutDeferredTransmissionsCounter,
       "fmsEthOutSQETestErrorsCounter": fmsEthOutSQETestErrorsCounter,
       "fmsEthOutLateCollisionsCounter": fmsEthOutLateCollisionsCounter,
       "fmsEthOutExcessiveCollisionsCounter": fmsEthOutExcessiveCollisionsCounter,
       "fmsEthOutCarrierSenseErrorsCounter": fmsEthOutCarrierSenseErrorsCounter,
       "fmsEthOutErrExcdDelayCounter": fmsEthOutErrExcdDelayCounter,
       "fmsEthOutErrCtsLossCounter": fmsEthOutErrCtsLossCounter,
       "fmsEthOutErrDmaUnderrunCounter": fmsEthOutErrDmaUnderrunCounter,
       "fmStatEthManagementTable": fmStatEthManagementTable,
       "fmStatEthManagementEntry": fmStatEthManagementEntry,
       "fmsEthManLineId": fmsEthManLineId,
       "fmsEthManSupervisionOkCounter": fmsEthManSupervisionOkCounter,
       "fmsEthManSupervisionNokCounter": fmsEthManSupervisionNokCounter,
       "fmsEthManInputResetCounter": fmsEthManInputResetCounter,
       "fmsEthManFilterPermitCounter": fmsEthManFilterPermitCounter,
       "fmsEthManFilterDenyCounter": fmsEthManFilterDenyCounter,
       "fmStatWanConnectionsTable": fmStatWanConnectionsTable,
       "fmStatWanConnectionsEntry": fmStatWanConnectionsEntry,
       "fmsWanConnId": fmsWanConnId,
       "fmsWanConnRemoteAddr": fmsWanConnRemoteAddr,
       "fmsWanConnEncapsulation": fmsWanConnEncapsulation,
       "fmsWanConnStatus": fmsWanConnStatus,
       "fmsWanConnGrouping": fmsWanConnGrouping,
       "fmsWanConnLocalSbNumber": fmsWanConnLocalSbNumber,
       "fmsWanConnInPktsCounter": fmsWanConnInPktsCounter,
       "fmsWanConnInErrPktsCounter": fmsWanConnInErrPktsCounter,
       "fmsWanConnInOctetsCounter": fmsWanConnInOctetsCounter,
       "fmsWanConnOutPktsCounter": fmsWanConnOutPktsCounter,
       "fmsWanConnOutOctetsCounter": fmsWanConnOutOctetsCounter,
       "fmStatRemoteVirtualPorts": fmStatRemoteVirtualPorts,
       "fmStatRvpConnectionsTable": fmStatRvpConnectionsTable,
       "fmStatRvpConnectionsEntry": fmStatRvpConnectionsEntry,
       "fmsRvpConnRemoteAddr": fmsRvpConnRemoteAddr,
       "fmsRvpConnEncapsulation": fmsRvpConnEncapsulation,
       "fmsRvpConnId": fmsRvpConnId,
       "fmsRvpConnStatus": fmsRvpConnStatus,
       "fmsRvpConnGrouping": fmsRvpConnGrouping,
       "fmsRvpConnLocalSbNumber": fmsRvpConnLocalSbNumber,
       "fmsRvpConnInPktsCounter": fmsRvpConnInPktsCounter,
       "fmsRvpConnInErrPktsCounter": fmsRvpConnInErrPktsCounter,
       "fmsRvpConnInOctetsCounter": fmsRvpConnInOctetsCounter,
       "fmsRvpConnOutPktsCounter": fmsRvpConnOutPktsCounter,
       "fmsRvpConnOutOctetsCounter": fmsRvpConnOutOctetsCounter,
       "fmStatBridge": fmStatBridge,
       "fmsBridgeState": fmsBridgeState,
       "fmStatBrdgTraffic": fmStatBrdgTraffic,
       "fmsBrdgTrafInPktsCounter": fmsBrdgTrafInPktsCounter,
       "fmsBrdgTrafOutPktsCounter": fmsBrdgTrafOutPktsCounter,
       "fmsBrdgTrafOutBroadcastPktsCounter": fmsBrdgTrafOutBroadcastPktsCounter,
       "fmsBrdgTrafInServCounter": fmsBrdgTrafInServCounter,
       "fmsBrdgTrafOutServCounter": fmsBrdgTrafOutServCounter,
       "fmsBrdgTrafOutBroadcastServCounter": fmsBrdgTrafOutBroadcastServCounter,
       "fmStatIpRouter": fmStatIpRouter,
       "fmsIpRouterState": fmsIpRouterState,
       "fmStatIpTraffic": fmStatIpTraffic,
       "fmsIpTrafInReceivesCounter": fmsIpTrafInReceivesCounter,
       "fmsIpTrafOutRequestsCounter": fmsIpTrafOutRequestsCounter,
       "fmsIpTrafInOctetsCounter": fmsIpTrafInOctetsCounter,
       "fmsIpTrafOutOctetsCounter": fmsIpTrafOutOctetsCounter,
       "fmsIpTrafInUnknownProtosCounter": fmsIpTrafInUnknownProtosCounter,
       "fmsIpTrafNoRoutesCounter": fmsIpTrafNoRoutesCounter,
       "fmsIpTrafInHdrErrorsCounter": fmsIpTrafInHdrErrorsCounter,
       "fmsIpTrafOutForwDatagramsCounter": fmsIpTrafOutForwDatagramsCounter,
       "fmsIpTrafOutForwDefRouteCounter": fmsIpTrafOutForwDefRouteCounter,
       "fmsIpTrafIcmpOutMsgsCounter": fmsIpTrafIcmpOutMsgsCounter,
       "fmsIpTrafIcmpInMsgsCounter": fmsIpTrafIcmpInMsgsCounter,
       "fmStatIpLanTraffic": fmStatIpLanTraffic,
       "fmsIpLanIpAddr": fmsIpLanIpAddr,
       "fmsIpLanNetMask": fmsIpLanNetMask,
       "fmsIpLanOutRequestsCounter": fmsIpLanOutRequestsCounter,
       "fmsIpLanInReceivesCounter": fmsIpLanInReceivesCounter,
       "fmsIpLanOutOctetsIpCounter": fmsIpLanOutOctetsIpCounter,
       "fmsIpLanInOctetsIpCounter": fmsIpLanInOctetsIpCounter,
       "fmsIpLanNoRoutesCounter": fmsIpLanNoRoutesCounter,
       "fmsIpLanInHdrErrorsCounter": fmsIpLanInHdrErrorsCounter,
       "fmsIpLanArpFailedCounter": fmsIpLanArpFailedCounter,
       "fmStatIpClusterStateTable": fmStatIpClusterStateTable,
       "fmStatIpClusterStateEntry": fmStatIpClusterStateEntry,
       "fmsIpCluVpId": fmsIpCluVpId,
       "fmsIpCluClusterNumber": fmsIpCluClusterNumber,
       "fmsIpCluVirtualIpAddress": fmsIpCluVirtualIpAddress,
       "fmsIpCluOperStatus": fmsIpCluOperStatus,
       "fmsIpCluAdminStatus": fmsIpCluAdminStatus,
       "fmsIpCluLastChange": fmsIpCluLastChange,
       "fmStatFrameRelay": fmStatFrameRelay,
       "fmsFrSwitch": fmsFrSwitch,
       "fmsFrSwDataLinkConnEstablished": fmsFrSwDataLinkConnEstablished,
       "fmsFrSwBookingInputThrouhput": fmsFrSwBookingInputThrouhput,
       "fmsFrSwOverBookingThrouhput": fmsFrSwOverBookingThrouhput,
       "fmsFrLogicalPort": fmsFrLogicalPort,
       "fmsFrLpLogPortTable": fmsFrLpLogPortTable,
       "fmsFrLpLogPortEntry": fmsFrLpLogPortEntry,
       "fmsFrLpLogPortId": fmsFrLpLogPortId,
       "fmsFrLpInterfaceType": fmsFrLpInterfaceType,
       "fmsFrLpNumPlan": fmsFrLpNumPlan,
       "fmsFrLpAddrDlciLen": fmsFrLpAddrDlciLen,
       "fmsFrLpVcSigProtocol": fmsFrLpVcSigProtocol,
       "fmsFrLpIncomingTable": fmsFrLpIncomingTable,
       "fmsFrLpIncomingEntry": fmsFrLpIncomingEntry,
       "fmsFrLpInLogPortId": fmsFrLpInLogPortId,
       "fmsFrLpInOctets": fmsFrLpInOctets,
       "fmsFrLpInFrames": fmsFrLpInFrames,
       "fmsFrLpInErrors": fmsFrLpInErrors,
       "fmsFrLpInFrHeaderErrors": fmsFrLpInFrHeaderErrors,
       "fmsFrLpInFecnFrames": fmsFrLpInFecnFrames,
       "fmsFrLpInBecnFrames": fmsFrLpInBecnFrames,
       "fmsFrLpInExcessFrames": fmsFrLpInExcessFrames,
       "fmsFrLpInDiscards": fmsFrLpInDiscards,
       "fmsFrLpOutgoingTable": fmsFrLpOutgoingTable,
       "fmsFrLpOutgoingEntry": fmsFrLpOutgoingEntry,
       "fmsFrLpOutLogPortId": fmsFrLpOutLogPortId,
       "fmsFrLpOutOctets": fmsFrLpOutOctets,
       "fmsFrLpOutFrames": fmsFrLpOutFrames,
       "fmsFrLpOutFecnFrames": fmsFrLpOutFecnFrames,
       "fmsFrLpOutLocalCongFecnFrames": fmsFrLpOutLocalCongFecnFrames,
       "fmsFrLpOutBecnFrames": fmsFrLpOutBecnFrames,
       "fmsFrLpOutLocalCongBecnFrames": fmsFrLpOutLocalCongBecnFrames,
       "fmsFrLpOutLocalCongDiscards": fmsFrLpOutLocalCongDiscards,
       "fmsFrLpLmiTable": fmsFrLpLmiTable,
       "fmsFrLpLmiEntry": fmsFrLpLmiEntry,
       "fmsFrLpLmiLogPortId": fmsFrLpLmiLogPortId,
       "fmsFrLpLmiProced": fmsFrLpLmiProced,
       "fmsFrLpLmiUserN391": fmsFrLpLmiUserN391,
       "fmsFrLpLmiUserN392": fmsFrLpLmiUserN392,
       "fmsFrLpLmiUserN393": fmsFrLpLmiUserN393,
       "fmsFrLpLmiUserT391": fmsFrLpLmiUserT391,
       "fmsFrLpLmiNetN392": fmsFrLpLmiNetN392,
       "fmsFrLpLmiNetN393": fmsFrLpLmiNetN393,
       "fmsFrLpLmiNetT392": fmsFrLpLmiNetT392,
       "fmsFrLpLmiUserLinkRelErrors": fmsFrLpLmiUserLinkRelErrors,
       "fmsFrLpLmiUserProtErrors": fmsFrLpLmiUserProtErrors,
       "fmsFrLpLmiUserChanInactive": fmsFrLpLmiUserChanInactive,
       "fmsFrLpLmiNetLinkRelErrors": fmsFrLpLmiNetLinkRelErrors,
       "fmsFrLpLmiNetProtErrors": fmsFrLpLmiNetProtErrors,
       "fmsFrLpLmiNetChanInactive": fmsFrLpLmiNetChanInactive,
       "fmsFrLpSvcSignallingTable": fmsFrLpSvcSignallingTable,
       "fmsFrLpSvcSignallingEntry": fmsFrLpSvcSignallingEntry,
       "fmsFrLpSvcLogPortId": fmsFrLpSvcLogPortId,
       "fmsFrLpSvcDlcInitialized": fmsFrLpSvcDlcInitialized,
       "fmsFrLpSvcDlcUbr": fmsFrLpSvcDlcUbr,
       "fmsFrLpSvcDlcVbr": fmsFrLpSvcDlcVbr,
       "fmsFrLpSvcDlcVbrRt": fmsFrLpSvcDlcVbrRt,
       "fmsFrLpSvcBookingVbrThroughput": fmsFrLpSvcBookingVbrThroughput,
       "fmsFrLpSvcBookingVbrRtThroughput": fmsFrLpSvcBookingVbrRtThroughput,
       "fmsFrLpSvcOverBookingThroughput": fmsFrLpSvcOverBookingThroughput,
       "fmsFrLpSvcBookingRate": fmsFrLpSvcBookingRate,
       "fmsFrDataLinkConnection": fmsFrDataLinkConnection,
       "fmsFrDlcTable": fmsFrDlcTable,
       "fmsFrDlcEntry": fmsFrDlcEntry,
       "fmsFrDlcLogPortId": fmsFrDlcLogPortId,
       "fmsFrDlcDlci": fmsFrDlcDlci,
       "fmsFrDlcState": fmsFrDlcState,
       "fmsFrDlcRcvdSigStatus": fmsFrDlcRcvdSigStatus,
       "fmsFrDlcCos": fmsFrDlcCos,
       "fmsFrDlcIncomingTable": fmsFrDlcIncomingTable,
       "fmsFrDlcIncomingEntry": fmsFrDlcIncomingEntry,
       "fmsFrDlcInLogPortId": fmsFrDlcInLogPortId,
       "fmsFrDlcInDlci": fmsFrDlcInDlci,
       "fmsFrDlcInFrames": fmsFrDlcInFrames,
       "fmsFrDlcInOctets": fmsFrDlcInOctets,
       "fmsFrDlcInDeFrames": fmsFrDlcInDeFrames,
       "fmsFrDlcInFecnFrames": fmsFrDlcInFecnFrames,
       "fmsFrDlcInBecnFrames": fmsFrDlcInBecnFrames,
       "fmsFrDlcInExcessFrames": fmsFrDlcInExcessFrames,
       "fmsFrDlcInDiscards": fmsFrDlcInDiscards,
       "fmsFrDlcInLostFrames": fmsFrDlcInLostFrames,
       "fmsFrDlcInLostSegments": fmsFrDlcInLostSegments,
       "fmsFrDlcOutgoingTable": fmsFrDlcOutgoingTable,
       "fmsFrDlcOutgoingEntry": fmsFrDlcOutgoingEntry,
       "fmsFrDlcOutLogPortId": fmsFrDlcOutLogPortId,
       "fmsFrDlcOutDlci": fmsFrDlcOutDlci,
       "fmsFrDlcOutFrames": fmsFrDlcOutFrames,
       "fmsFrDlcOutOctets": fmsFrDlcOutOctets,
       "fmsFrDlcOutFecnFrames": fmsFrDlcOutFecnFrames,
       "fmsFrDlcOutBecnFrames": fmsFrDlcOutBecnFrames,
       "fmsFrDlcOutExcessFrames": fmsFrDlcOutExcessFrames,
       "fmsFrDlcOutDiscards": fmsFrDlcOutDiscards,
       "fmStatFrLineTable": fmStatFrLineTable,
       "fmStatFrLineEntry": fmStatFrLineEntry,
       "fmsFrLineId": fmsFrLineId,
       "fmsFrLineStatus": fmsFrLineStatus,
       "fmsFrLineLmiStatus": fmsFrLineLmiStatus,
       "fmsFrLineCircuitCount": fmsFrLineCircuitCount,
       "fmsFrLineActiveCircuitCount": fmsFrLineActiveCircuitCount,
       "fmStatFrCircuitTable": fmStatFrCircuitTable,
       "fmStatFrCircuitEntry": fmStatFrCircuitEntry,
       "fmsFrCircuitLineId": fmsFrCircuitLineId,
       "fmsFrCircuitDlci": fmsFrCircuitDlci,
       "fmsFrCircuitStatus": fmsFrCircuitStatus,
       "fmsFrCircuitAge": fmsFrCircuitAge,
       "fmsFrCircuitOutOctetsCounter": fmsFrCircuitOutOctetsCounter,
       "fmsFrCircuitInOctetsCounter": fmsFrCircuitInOctetsCounter,
       "fmsFrCommIdentification": fmsFrCommIdentification,
       "fmsFrCommStorageTable": fmsFrCommStorageTable,
       "fmsFrCommStorageEntry": fmsFrCommStorageEntry,
       "fmsFrcStoragePhysIfId": fmsFrcStoragePhysIfId,
       "fmsFrcStorageChannelId": fmsFrcStorageChannelId,
       "fmsFrcStorageDlci": fmsFrcStorageDlci,
       "fmsFrcStorageSubDlci": fmsFrcStorageSubDlci,
       "fmsFrcStorageTypeOfDlci": fmsFrcStorageTypeOfDlci,
       "fmsFrcStorageDirection": fmsFrcStorageDirection,
       "fmsFrcStorageTypeOfTransport": fmsFrcStorageTypeOfTransport,
       "fmsFrcStoragePvcStatus": fmsFrcStoragePvcStatus,
       "fmsFrcStorageDestAddr": fmsFrcStorageDestAddr,
       "fmsFrcStorageSrcAddr": fmsFrcStorageSrcAddr,
       "fmsFrcStorageCos": fmsFrcStorageCos,
       "fmsFrcStorageCir": fmsFrcStorageCir,
       "fmsFrcStorageMinCir": fmsFrcStorageMinCir,
       "fmsFrcStorageBc": fmsFrcStorageBc,
       "fmsFrcStorageBe": fmsFrcStorageBe,
       "fmsFrCommFilter": fmsFrCommFilter,
       "fmsFrcFilterPhysIfId": fmsFrcFilterPhysIfId,
       "fmsFrcFilterChannelId": fmsFrcFilterChannelId,
       "fmsFrcFilterDlci": fmsFrcFilterDlci,
       "fmsFrcFilterAction": fmsFrcFilterAction,
       "fmStatPointToPointProtocol": fmStatPointToPointProtocol,
       "fmStatPppPhysLineTable": fmStatPppPhysLineTable,
       "fmStatPppPhysLineEntry": fmStatPppPhysLineEntry,
       "fmsPppPhysLineId": fmsPppPhysLineId,
       "fmsPppPhysLocalMru": fmsPppPhysLocalMru,
       "fmsPppPhysRemoteMru": fmsPppPhysRemoteMru,
       "fmsPppPhysMagicNumber": fmsPppPhysMagicNumber,
       "fmStatPppProtocolStatusTable": fmStatPppProtocolStatusTable,
       "fmStatPppProtocolStatusEntry": fmStatPppProtocolStatusEntry,
       "fmsPppProtoLineId": fmsPppProtoLineId,
       "fmsPppProtoLcpStatus": fmsPppProtoLcpStatus,
       "fmsPppProtoLcpDiag": fmsPppProtoLcpDiag,
       "fmsPppProtoIpNcpStatus": fmsPppProtoIpNcpStatus,
       "fmsPppProtoIpNcpDiag": fmsPppProtoIpNcpDiag,
       "fmsPppProtoBrdgNcpStatus": fmsPppProtoBrdgNcpStatus,
       "fmsPppProtoBrdgNcpDiag": fmsPppProtoBrdgNcpDiag,
       "fmsPppProtoIpxNcpStatus": fmsPppProtoIpxNcpStatus,
       "fmsPppProtoIpxNcpDiag": fmsPppProtoIpxNcpDiag,
       "fmsPppProtoClnpNcpStatus": fmsPppProtoClnpNcpStatus,
       "fmsPppProtoClnpNcpDiag": fmsPppProtoClnpNcpDiag,
       "fmStatPppAuthenticationTable": fmStatPppAuthenticationTable,
       "fmStatPppAuthenticationEntry": fmStatPppAuthenticationEntry,
       "fmsPppAuthLineId": fmsPppAuthLineId,
       "fmsPppAuthMasterAuthentication": fmsPppAuthMasterAuthentication,
       "fmsPppAuthMasterSuccessCounter": fmsPppAuthMasterSuccessCounter,
       "fmsPppAuthMasterFailureCounter": fmsPppAuthMasterFailureCounter,
       "fmsPppAuthSlaveAuthentication": fmsPppAuthSlaveAuthentication,
       "fmsPppAuthSlaveSuccessCounter": fmsPppAuthSlaveSuccessCounter,
       "fmsPppAuthSlaveFailureCounter": fmsPppAuthSlaveFailureCounter,
       "fmStatPppIpAddrAssignmentTable": fmStatPppIpAddrAssignmentTable,
       "fmStatPppIpAddrAssignmentEntry": fmStatPppIpAddrAssignmentEntry,
       "fmsPppIpAddrLineId": fmsPppIpAddrLineId,
       "fmsPppIpAddrReceived": fmsPppIpAddrReceived,
       "fmsPppIpAddrSent": fmsPppIpAddrSent,
       "fmStatE1": fmStatE1,
       "fmStatE1Ds1ChannelNumber": fmStatE1Ds1ChannelNumber,
       "fmsE1Ds1ChIfNumber": fmsE1Ds1ChIfNumber,
       "fmStatE1Ds1ChannelTable": fmStatE1Ds1ChannelTable,
       "fmStatE1Ds1ChannelEntry": fmStatE1Ds1ChannelEntry,
       "fmsE1Ds1ChIfPhysId": fmsE1Ds1ChIfPhysId,
       "fmsE1Ds1ChIfChannelId": fmsE1Ds1ChIfChannelId,
       "fmsE1Ds1ChIfType": fmsE1Ds1ChIfType,
       "fmsE1Ds1ChIfDescr": fmsE1Ds1ChIfDescr,
       "fmsE1Ds1ChIfMtu": fmsE1Ds1ChIfMtu,
       "fmsE1Ds1ChIfSpeed": fmsE1Ds1ChIfSpeed,
       "fmsE1Ds1ChIfPhysAddress": fmsE1Ds1ChIfPhysAddress,
       "fmsE1Ds1ChIfAdminStatus": fmsE1Ds1ChIfAdminStatus,
       "fmsE1Ds1ChIfOperStatus": fmsE1Ds1ChIfOperStatus,
       "fmsE1Ds1ChIfLastChange": fmsE1Ds1ChIfLastChange,
       "fmsE1Ds1ChIfInOctets": fmsE1Ds1ChIfInOctets,
       "fmsE1Ds1ChIfInUcastPkts": fmsE1Ds1ChIfInUcastPkts,
       "fmsE1Ds1ChIfInNUcastPkts": fmsE1Ds1ChIfInNUcastPkts,
       "fmsE1Ds1ChIfInDiscards": fmsE1Ds1ChIfInDiscards,
       "fmsE1Ds1ChIfInErrors": fmsE1Ds1ChIfInErrors,
       "fmsE1Ds1ChIfInUnknownProtos": fmsE1Ds1ChIfInUnknownProtos,
       "fmsE1Ds1ChIfOutOctets": fmsE1Ds1ChIfOutOctets,
       "fmsE1Ds1ChIfOutUcastPkts": fmsE1Ds1ChIfOutUcastPkts,
       "fmsE1Ds1ChIfOutNUcastPkts": fmsE1Ds1ChIfOutNUcastPkts,
       "fmsE1Ds1ChIfOutDiscards": fmsE1Ds1ChIfOutDiscards,
       "fmsE1Ds1ChIfOutErrors": fmsE1Ds1ChIfOutErrors,
       "fmsE1Ds1ChIfOutQLen": fmsE1Ds1ChIfOutQLen,
       "fmsE1Ds1ChIfSpecific": fmsE1Ds1ChIfSpecific,
       "fmStatS2": fmStatS2,
       "fmStatS2BChannelTable": fmStatS2BChannelTable,
       "fmStatS2BChannelEntry": fmStatS2BChannelEntry,
       "fmsS2BChPhysIfId": fmsS2BChPhysIfId,
       "fmsS2BChChannelId": fmsS2BChChannelId,
       "fmsS2BChProto": fmsS2BChProto,
       "fmsS2BChIfSpeed": fmsS2BChIfSpeed,
       "fmsS2BChAdminStatus": fmsS2BChAdminStatus,
       "fmsS2BChOperStatus": fmsS2BChOperStatus,
       "fmsS2BChIfLastChange": fmsS2BChIfLastChange,
       "fmsS2BChIfInOctets": fmsS2BChIfInOctets,
       "fmsS2BChIfOutOctets": fmsS2BChIfOutOctets,
       "fmsS2BChIfCalledAddress": fmsS2BChIfCalledAddress,
       "fmsS2BChIfCallingAddress": fmsS2BChIfCallingAddress,
       "fmStatS0": fmStatS0,
       "fmStatS0BChannelTable": fmStatS0BChannelTable,
       "fmStatS0BChannelEntry": fmStatS0BChannelEntry,
       "fmsS0BChPhysIfId": fmsS0BChPhysIfId,
       "fmsS0BChChannelId": fmsS0BChChannelId,
       "fmsS0BChProto": fmsS0BChProto,
       "fmsS0BChIfSpeed": fmsS0BChIfSpeed,
       "fmsS0BChAdminStatus": fmsS0BChAdminStatus,
       "fmsS0BChOperStatus": fmsS0BChOperStatus,
       "fmsS0BChIfLastChange": fmsS0BChIfLastChange,
       "fmsS0BChIfInOctets": fmsS0BChIfInOctets,
       "fmsS0BChIfOutOctets": fmsS0BChIfOutOctets,
       "fmsS0BChIfCalledAddress": fmsS0BChIfCalledAddress,
       "fmsS0BChIfCallingAddress": fmsS0BChIfCallingAddress,
       "fmOsi": fmOsi,
       "fmOsiCLNP": fmOsiCLNP,
       "fmOsiCLNPSystem": fmOsiCLNPSystem,
       "fmOsiForwarding": fmOsiForwarding,
       "fmOsiCLNPSysOutPDUs": fmOsiCLNPSysOutPDUs,
       "fmOsiCLNPSysInPDUs": fmOsiCLNPSysInPDUs,
       "fmOsiCLNPSysErrMemFails": fmOsiCLNPSysErrMemFails,
       "fmOsiCLNPCircuitTable": fmOsiCLNPCircuitTable,
       "fmOsiCLNPCircuitEntry": fmOsiCLNPCircuitEntry,
       "fmOsiCLNPCircIndex": fmOsiCLNPCircIndex,
       "fmOsiCLNPCircOutPDUs": fmOsiCLNPCircOutPDUs,
       "fmOsiCLNPCircInPDUs": fmOsiCLNPCircInPDUs,
       "fmOsiESIS": fmOsiESIS,
       "fmOsiESISSystem": fmOsiESISSystem,
       "fmOsiESISSysOutPDUs": fmOsiESISSysOutPDUs,
       "fmOsiESISSysInPDUs": fmOsiESISSysInPDUs,
       "fmOsiESISCircuitTable": fmOsiESISCircuitTable,
       "fmOsiESISCircuitEntry": fmOsiESISCircuitEntry,
       "fmOsiESISCircIndex": fmOsiESISCircIndex,
       "fmOsiESISCircOutPDUs": fmOsiESISCircOutPDUs,
       "fmOsiESISCircInPDUs": fmOsiESISCircInPDUs,
       "fmOsiISIS": fmOsiISIS,
       "fmOsiISISSystem": fmOsiISISSystem,
       "fmOsiISISSysOutPdu": fmOsiISISSysOutPdu,
       "fmOsiISISSysInPdu": fmOsiISISSysInPdu,
       "fmOsiISISSysL1State": fmOsiISISSysL1State,
       "fmOsiISISSysCorrLSP": fmOsiISISSysCorrLSP,
       "fmOsiISISSysL1DbaseOloads": fmOsiISISSysL1DbaseOloads,
       "fmOsiISISSysttmpToExMaxSaqNums": fmOsiISISSysttmpToExMaxSaqNums,
       "fmOsiISISSysSeqNumSkips": fmOsiISISSysSeqNumSkips,
       "fmOsiISISSysOwnLSPPurges": fmOsiISISSysOwnLSPPurges,
       "fmOsiISISSysISFieldLenMismatches": fmOsiISISSysISFieldLenMismatches,
       "fmOsiISISSysMaxAreaAddrMismatches": fmOsiISISSysMaxAreaAddrMismatches,
       "fmOsiISISSysL2State": fmOsiISISSysL2State,
       "fmOsiISISSysLSPL2DbaseOloads": fmOsiISISSysLSPL2DbaseOloads,
       "fmOsiISISSysAuthFails": fmOsiISISSysAuthFails,
       "fmOsiISISLogAdjcencyStateChanges": fmOsiISISLogAdjcencyStateChanges,
       "fmOsiISISCircuitTable": fmOsiISISCircuitTable,
       "fmOsiISISCircuitEntry": fmOsiISISCircuitEntry,
       "fmOsiISISCircIndex": fmOsiISISCircIndex,
       "fmOsiISISCircOutPdu": fmOsiISISCircOutPdu,
       "fmOsiISISCircInPdu": fmOsiISISCircInPdu,
       "fmOsiISISCircAdjChanges": fmOsiISISCircAdjChanges,
       "fmOsiISISCircInitFails": fmOsiISISCircInitFails,
       "fmOsiISISCircRejAdjs": fmOsiISISCircRejAdjs,
       "fmOsiISISCircOutCtrlPdu": fmOsiISISCircOutCtrlPdu,
       "fmOsiISISCircInCrtlPdu": fmOsiISISCircInCrtlPdu,
       "fmOsiISISCircIDFieldLenMismatches": fmOsiISISCircIDFieldLenMismatches,
       "fmOsiISISCircMaxAreaAddrMismatches": fmOsiISISCircMaxAreaAddrMismatches,
       "fmOsiISISCircL1DesIS": fmOsiISISCircL1DesIS,
       "fmOsiISISCircLANL1DesISChanges": fmOsiISISCircLANL1DesISChanges,
       "fmOsiISISCircL2DesIS": fmOsiISISCircL2DesIS,
       "fmOsiISISCircLANL2DesISChanges": fmOsiISISCircLANL2DesISChanges,
       "fmOsiISISCircAuthFails": fmOsiISISCircAuthFails,
       "fmOsiISISAreaTable": fmOsiISISAreaTable,
       "fmOsiISISAreaEntry": fmOsiISISAreaEntry,
       "fmOsiISISAreaAddress": fmOsiISISAreaAddress,
       "fmOsiISISISAdjacencyTable": fmOsiISISISAdjacencyTable,
       "fmOsiISISISAdjacencyEntry": fmOsiISISISAdjacencyEntry,
       "fmOsiISISISAdjCircIndex": fmOsiISISISAdjCircIndex,
       "fmOsiISISISAdjIndex": fmOsiISISISAdjIndex,
       "fmOsiISISISAdjSysID": fmOsiISISISAdjSysID,
       "fmOsiISISISAdjState": fmOsiISISISAdjState,
       "fmOsiISISISAdjSNPAAddress": fmOsiISISISAdjSNPAAddress,
       "fmOsiISISISAdjType": fmOsiISISISAdjType,
       "fmOsiISISISAdjUsage": fmOsiISISISAdjUsage,
       "fmOsiISISISAdjHoldTimer": fmOsiISISISAdjHoldTimer,
       "fmOsiISISISAdjPriority": fmOsiISISISAdjPriority,
       "fmOsiISISISAdjacencyAreaAddressTable": fmOsiISISISAdjacencyAreaAddressTable,
       "fmOsiISISISAdjacencyAreaAddressEntry": fmOsiISISISAdjacencyAreaAddressEntry,
       "fmOsiISISISAdjAreaAddrCircIndex": fmOsiISISISAdjAreaAddrCircIndex,
       "fmOsiISISISAdjAreaAddrAdjIndex": fmOsiISISISAdjAreaAddrAdjIndex,
       "fmOsiISISISAdjAreaAddress": fmOsiISISISAdjAreaAddress,
       "fmOsiISISESAdjacencyTable": fmOsiISISESAdjacencyTable,
       "fmOsiISISESAdjacencyEntry": fmOsiISISESAdjacencyEntry,
       "fmOsiISISESAdjCircIndex": fmOsiISISESAdjCircIndex,
       "fmOsiISISESAdjAdjIndex": fmOsiISISESAdjAdjIndex,
       "fmOsiISISESAdjESID": fmOsiISISESAdjESID,
       "fmOsiISISESAdjState": fmOsiISISESAdjState,
       "fmOsiISISESAdjNeighSNPAAdress": fmOsiISISESAdjNeighSNPAAdress,
       "fmOsiISISESAdjType": fmOsiISISESAdjType,
       "fmOsiISISReachableAddressTable": fmOsiISISReachableAddressTable,
       "fmOsiISISReachableAddressEntry": fmOsiISISReachableAddressEntry,
       "fmOsiISISRASystemType": fmOsiISISRASystemType,
       "fmOsiISISRAAddress": fmOsiISISRAAddress,
       "fmOsiISISRAMetric": fmOsiISISRAMetric,
       "fmOsiISISRAPathIdentifier": fmOsiISISRAPathIdentifier,
       "fmOsiISISRAType": fmOsiISISRAType,
       "fmOsiISISRACircuitId": fmOsiISISRACircuitId,
       "fmOsiISISRAAdjacencyId": fmOsiISISRAAdjacencyId,
       "fmOsiISISRAPathCost": fmOsiISISRAPathCost,
       "fmOsiISISRASNPAAddress": fmOsiISISRASNPAAddress,
       "fmPing": fmPing,
       "fmPingTable": fmPingTable,
       "fmPingEntry": fmPingEntry,
       "fmPingIdentifier": fmPingIdentifier,
       "fmPingProtocol": fmPingProtocol,
       "fmPingAddress": fmPingAddress,
       "fmPingCountRequest": fmPingCountRequest,
       "fmPingPacketSize": fmPingPacketSize,
       "fmPingDelay": fmPingDelay,
       "fmPingTimeout": fmPingTimeout,
       "fmPingPermanent": fmPingPermanent,
       "fmPingSentPackets": fmPingSentPackets,
       "fmPingReceivedPackets": fmPingReceivedPackets,
       "fmPingMinRoundTrip": fmPingMinRoundTrip,
       "fmPingAvgRoundTrip": fmPingAvgRoundTrip,
       "fmPingMaxRoundTrip": fmPingMaxRoundTrip,
       "fmPingCompletedFlag": fmPingCompletedFlag,
       "fmPingOwner": fmPingOwner,
       "fmPingAdminState": fmPingAdminState,
       "fmRip2": fmRip2,
       "fmRip2GlobalGroup": fmRip2GlobalGroup,
       "fmRip2GlobalRouteChanges": fmRip2GlobalRouteChanges,
       "fmRip2GlobalQueries": fmRip2GlobalQueries,
       "fmRip2IfStatTable": fmRip2IfStatTable,
       "fmRip2IfStatEntry": fmRip2IfStatEntry,
       "fmRip2IfStatAddress": fmRip2IfStatAddress,
       "fmRip2IfStatRcvBadPackets": fmRip2IfStatRcvBadPackets,
       "fmRip2IfStatRcvBadRoutes": fmRip2IfStatRcvBadRoutes,
       "fmRip2IfStatSentUpdates": fmRip2IfStatSentUpdates,
       "fmRip2IfStatStatus": fmRip2IfStatStatus,
       "fmRip2IfConfTable": fmRip2IfConfTable,
       "fmRip2IfConfEntry": fmRip2IfConfEntry,
       "fmRip2IfConfAddress": fmRip2IfConfAddress,
       "fmRip2IfConfDomain": fmRip2IfConfDomain,
       "fmRip2IfConfAuthType": fmRip2IfConfAuthType,
       "fmRip2IfConfAuthKey": fmRip2IfConfAuthKey,
       "fmRip2IfConfSend": fmRip2IfConfSend,
       "fmRip2IfConfReceive": fmRip2IfConfReceive,
       "fmRip2IfConfDefaultMetric": fmRip2IfConfDefaultMetric,
       "fmRip2IfConfStatus": fmRip2IfConfStatus,
       "fmRip2PeerTable": fmRip2PeerTable,
       "fmRip2PeerEntry": fmRip2PeerEntry,
       "fmRip2PeerAddress": fmRip2PeerAddress,
       "fmRip2PeerDomain": fmRip2PeerDomain,
       "fmRip2PeerLastUpdate": fmRip2PeerLastUpdate,
       "fmRip2PeerVersion": fmRip2PeerVersion,
       "fmRip2PeerRcvBadPackets": fmRip2PeerRcvBadPackets,
       "fmRip2PeerRcvBadRoutes": fmRip2PeerRcvBadRoutes,
       "fmOspf": fmOspf,
       "fmOspfStandard": fmOspfStandard,
       "fmOspfStandardGeneralGroup": fmOspfStandardGeneralGroup,
       "fmOspfStandardRouterId": fmOspfStandardRouterId,
       "fmOspfStandardAdminStat": fmOspfStandardAdminStat,
       "fmOspfStandardVersionNumber": fmOspfStandardVersionNumber,
       "fmOspfStandardAreaBdrRtrStatus": fmOspfStandardAreaBdrRtrStatus,
       "fmOspfStandardASBdrRtrStatus": fmOspfStandardASBdrRtrStatus,
       "fmOspfStandardExternLSACount": fmOspfStandardExternLSACount,
       "fmOspfStandardExternLSACksumSum": fmOspfStandardExternLSACksumSum,
       "fmOspfStandardTOSSupport": fmOspfStandardTOSSupport,
       "fmOspfStandardOriginateNewLSAs": fmOspfStandardOriginateNewLSAs,
       "fmOspfStandardRxNewLSAs": fmOspfStandardRxNewLSAs,
       "fmOspfStandardAreaTable": fmOspfStandardAreaTable,
       "fmOspfStandardAreaEntry": fmOspfStandardAreaEntry,
       "fmOspfStandardAreaId": fmOspfStandardAreaId,
       "fmOspfStandardAuthType": fmOspfStandardAuthType,
       "fmOspfStandardImportASExtern": fmOspfStandardImportASExtern,
       "fmOspfStandardSpfRuns": fmOspfStandardSpfRuns,
       "fmOspfStandardAreaBdrRtrCount": fmOspfStandardAreaBdrRtrCount,
       "fmOspfStandardASBdrRtrCount": fmOspfStandardASBdrRtrCount,
       "fmOspfStandardAreaLSACount": fmOspfStandardAreaLSACount,
       "fmOspfStandardAreaLSACksumSum": fmOspfStandardAreaLSACksumSum,
       "fmOspfStandardStubAreaTable": fmOspfStandardStubAreaTable,
       "fmOspfStandardStubAreaEntry": fmOspfStandardStubAreaEntry,
       "fmOspfStandardStubAreaID": fmOspfStandardStubAreaID,
       "fmOspfStandardStubTOS": fmOspfStandardStubTOS,
       "fmOspfStandardStubMetric": fmOspfStandardStubMetric,
       "fmOspfStandardStubStatus": fmOspfStandardStubStatus,
       "fmOspfStandardLsdbTable": fmOspfStandardLsdbTable,
       "fmOspfStandardLsdbEntry": fmOspfStandardLsdbEntry,
       "fmOspfStandardLsdbAreaId": fmOspfStandardLsdbAreaId,
       "fmOspfStandardLsdbType": fmOspfStandardLsdbType,
       "fmOspfStandardLsdbLSID": fmOspfStandardLsdbLSID,
       "fmOspfStandardLsdbRouterId": fmOspfStandardLsdbRouterId,
       "fmOspfStandardLsdbSequence": fmOspfStandardLsdbSequence,
       "fmOspfStandardLsdbAge": fmOspfStandardLsdbAge,
       "fmOspfStandardLsdbChecksum": fmOspfStandardLsdbChecksum,
       "fmOspfStandardLsdbAdvertisement": fmOspfStandardLsdbAdvertisement,
       "fmOspfStandardAreaRangeTable": fmOspfStandardAreaRangeTable,
       "fmOspfStandardAreaRangeEntry": fmOspfStandardAreaRangeEntry,
       "fmOspfStandardAreaRangeAreaID": fmOspfStandardAreaRangeAreaID,
       "fmOspfStandardAreaRangeNet": fmOspfStandardAreaRangeNet,
       "fmOspfStandardAreaRangeMask": fmOspfStandardAreaRangeMask,
       "fmOspfStandardAreaRangeStatus": fmOspfStandardAreaRangeStatus,
       "fmOspfStandardHostTable": fmOspfStandardHostTable,
       "fmOspfStandardHostEntry": fmOspfStandardHostEntry,
       "fmOspfStandardHostIpAddress": fmOspfStandardHostIpAddress,
       "fmOspfStandardHostTOS": fmOspfStandardHostTOS,
       "fmOspfStandardHostMetric": fmOspfStandardHostMetric,
       "fmOspfStandardHostStatus": fmOspfStandardHostStatus,
       "fmOspfStandardIfTable": fmOspfStandardIfTable,
       "fmOspfStandardIfEntry": fmOspfStandardIfEntry,
       "fmOspfStandardIfIpAddress": fmOspfStandardIfIpAddress,
       "fmOspfStandardAddressLessIf": fmOspfStandardAddressLessIf,
       "fmOspfStandardIfAreaId": fmOspfStandardIfAreaId,
       "fmOspfStandardIfType": fmOspfStandardIfType,
       "fmOspfStandardIfAdminStat": fmOspfStandardIfAdminStat,
       "fmOspfStandardIfRtrPriority": fmOspfStandardIfRtrPriority,
       "fmOspfStandardIfTransitDelay": fmOspfStandardIfTransitDelay,
       "fmOspfStandardIfRetransInterval": fmOspfStandardIfRetransInterval,
       "fmOspfStandardIfHelloInterval": fmOspfStandardIfHelloInterval,
       "fmOspfStandardIfRtrDeadInterval": fmOspfStandardIfRtrDeadInterval,
       "fmOspfStandardIfPollInterval": fmOspfStandardIfPollInterval,
       "fmOspfStandardIfState": fmOspfStandardIfState,
       "fmOspfStandardIfDesignatedRouter": fmOspfStandardIfDesignatedRouter,
       "fmOspfStandardIfBackupDesignatedRouter": fmOspfStandardIfBackupDesignatedRouter,
       "fmOspfStandardIfEvents": fmOspfStandardIfEvents,
       "fmOspfStandardIfAuthKey": fmOspfStandardIfAuthKey,
       "fmOspfStandardIfMetricTable": fmOspfStandardIfMetricTable,
       "fmOspfStandardIfMetricEntry": fmOspfStandardIfMetricEntry,
       "fmOspfStandardIfMetricIpAddress": fmOspfStandardIfMetricIpAddress,
       "fmOspfStandardIfMetricAddressLessIf": fmOspfStandardIfMetricAddressLessIf,
       "fmOspfStandardIfMetricTOS": fmOspfStandardIfMetricTOS,
       "fmOspfStandardIfMetricMetric": fmOspfStandardIfMetricMetric,
       "fmOspfStandardIfMetricStatus": fmOspfStandardIfMetricStatus,
       "fmOspfStandardVirtIfTable": fmOspfStandardVirtIfTable,
       "fmOspfStandardVirtIfEntry": fmOspfStandardVirtIfEntry,
       "fmOspfStandardVirtIfAreaID": fmOspfStandardVirtIfAreaID,
       "fmOspfStandardVirtIfNeighbor": fmOspfStandardVirtIfNeighbor,
       "fmOspfStandardVirtIfTransitDelay": fmOspfStandardVirtIfTransitDelay,
       "fmOspfStandardVirtIfRetransInterval": fmOspfStandardVirtIfRetransInterval,
       "fmOspfStandardVirtIfHelloInterval": fmOspfStandardVirtIfHelloInterval,
       "fmOspfStandardVirtIfRtrDeadInterval": fmOspfStandardVirtIfRtrDeadInterval,
       "fmOspfStandardVirtIfState": fmOspfStandardVirtIfState,
       "fmOspfStandardVirtIfEvents": fmOspfStandardVirtIfEvents,
       "fmOspfStandardVirtIfAuthKey": fmOspfStandardVirtIfAuthKey,
       "fmOspfStandardVirtIfStatus": fmOspfStandardVirtIfStatus,
       "fmOspfStandardNbrTable": fmOspfStandardNbrTable,
       "fmOspfStandardNbrEntry": fmOspfStandardNbrEntry,
       "fmOspfStandardNbrIpAddress": fmOspfStandardNbrIpAddress,
       "fmOspfStandardNbrAddressLessIndex": fmOspfStandardNbrAddressLessIndex,
       "fmOspfStandardNbrRtrId": fmOspfStandardNbrRtrId,
       "fmOspfStandardNbrOptions": fmOspfStandardNbrOptions,
       "fmOspfStandardNbrPriority": fmOspfStandardNbrPriority,
       "fmOspfStandardNbrState": fmOspfStandardNbrState,
       "fmOspfStandardNbrEvents": fmOspfStandardNbrEvents,
       "fmOspfStandardNbrLSRetransQLen": fmOspfStandardNbrLSRetransQLen,
       "fmOspfStandardNBMANbrStatus": fmOspfStandardNBMANbrStatus,
       "fmOspfStandardVirtNbrTable": fmOspfStandardVirtNbrTable,
       "fmOspfStandardVirtNbrEntry": fmOspfStandardVirtNbrEntry,
       "fmOspfStandardVirtNbrArea": fmOspfStandardVirtNbrArea,
       "fmOspfStandardVirtNbrRtrId": fmOspfStandardVirtNbrRtrId,
       "fmOspfStandardVirtNbrIpAddr": fmOspfStandardVirtNbrIpAddr,
       "fmOspfStandardVirtNbrOptions": fmOspfStandardVirtNbrOptions,
       "fmOspfStandardVirtNbrState": fmOspfStandardVirtNbrState,
       "fmOspfStandardVirtNbrEvents": fmOspfStandardVirtNbrEvents,
       "fmOspfStandardVirtNbrLSRetransQLen": fmOspfStandardVirtNbrLSRetransQLen,
       "fmUsersRights": fmUsersRights,
       "fmuVersionRight": fmuVersionRight,
       "fmuVersMax": fmuVersMax,
       "fmuLineAccess": fmuLineAccess,
       "fmuAccessLineNbMax": fmuAccessLineNbMax,
       "fmuAccessX25PlsLineNbMax": fmuAccessX25PlsLineNbMax,
       "fmuAccessX25MlpLineNbMax": fmuAccessX25MlpLineNbMax,
       "fmuAccessAsynLineNbMax": fmuAccessAsynLineNbMax,
       "fmuAccessVipLineNbMax": fmuAccessVipLineNbMax,
       "fmuAccessSdlcLineNbMax": fmuAccessSdlcLineNbMax,
       "fmuAccessBsc3270LineNbMax": fmuAccessBsc3270LineNbMax,
       "fmuAccessBsc2780LineNbMax": fmuAccessBsc2780LineNbMax,
       "fmuAccessBscTranspLineNbMax": fmuAccessBscTranspLineNbMax,
       "fmuAccessRnisChannelBNbMax": fmuAccessRnisChannelBNbMax,
       "fmuAccessRnisChannelDNbMax": fmuAccessRnisChannelDNbMax,
       "fmuAccessHdlcTranspLineNbMax": fmuAccessHdlcTranspLineNbMax,
       "fmuAccessFrSuscribLineNbMax": fmuAccessFrSuscribLineNbMax,
       "fmuAccessFrPublicNetworkLineNbMax": fmuAccessFrPublicNetworkLineNbMax,
       "fmuAccessFrseLineNbMax": fmuAccessFrseLineNbMax,
       "fmuAccessX29ReroutLineNbMax": fmuAccessX29ReroutLineNbMax,
       "fmuAccessCvfLineNbMax": fmuAccessCvfLineNbMax,
       "fmuAccessX75LineNbMax": fmuAccessX75LineNbMax,
       "fmuAccessPaviLineNbMax": fmuAccessPaviLineNbMax,
       "fmuAccessX28PlusLineNbMax": fmuAccessX28PlusLineNbMax,
       "fmuAccessPadLineNbMax": fmuAccessPadLineNbMax,
       "fmuAccessPppaLineNbMax": fmuAccessPppaLineNbMax,
       "fmuAccessPppsLineNbMax": fmuAccessPppsLineNbMax,
       "fmuFunctionRight": fmuFunctionRight,
       "fmuFunctionRouterAndBridge": fmuFunctionRouterAndBridge,
       "fmuFunctionMemTypeForMCXType4": fmuFunctionMemTypeForMCXType4,
       "fmuFunctionAccessFrProtoco": fmuFunctionAccessFrProtoco,
       "fmuFunctionBridgeAndStp": fmuFunctionBridgeAndStp,
       "fmuFunctionIpRouter": fmuFunctionIpRouter,
       "fmuFunctionIpxRouter": fmuFunctionIpxRouter,
       "fmuFunctionClnpRouter": fmuFunctionClnpRouter,
       "fmuFunctionLz77Compression": fmuFunctionLz77Compression,
       "fmuFunctionLz78Compression": fmuFunctionLz78Compression,
       "fmuFunctionSecurCard": fmuFunctionSecurCard,
       "fmuFunctionLoadStat": fmuFunctionLoadStat,
       "fmuFunctionOverflowResc": fmuFunctionOverflowResc,
       "fmuFunctionPae": fmuFunctionPae,
       "fmuFunctionOnlineFileTransfer": fmuFunctionOnlineFileTransfer,
       "fmuFunctionDPacket": fmuFunctionDPacket,
       "fmuFunctionExploitMibUse": fmuFunctionExploitMibUse,
       "fmuFunctionLlcOnEthernet": fmuFunctionLlcOnEthernet,
       "fmHardwareId": fmHardwareId,
       "fmhTechnicalsFeatures": fmhTechnicalsFeatures,
       "fmhTechnicEquipmType": fmhTechnicEquipmType,
       "fmhTechnicLineNb": fmhTechnicLineNb,
       "fmhTechnicPromFlashSize": fmhTechnicPromFlashSize,
       "fmhTechnicRamSize": fmhTechnicRamSize,
       "fmhTechnicEepromSize": fmhTechnicEepromSize,
       "fmhTechnicTransputerPresence": fmhTechnicTransputerPresence,
       "fmhTechnicEthernetPresence": fmhTechnicEthernetPresence,
       "fmhTechnicTokenRingPresence": fmhTechnicTokenRingPresence,
       "fmhTechnicMacAdress": fmhTechnicMacAdress,
       "fmhEquipmentId": fmhEquipmentId,
       "fmhEqIdReference": fmhEqIdReference,
       "fmhEqIdSerialNbEncodingType": fmhEqIdSerialNbEncodingType,
       "fmhEqIdSerialNb": fmhEqIdSerialNb,
       "fmhEqIdFactoryReleaseDate": fmhEqIdFactoryReleaseDate,
       "fmhEqIdFirstFactoryReturnDate": fmhEqIdFirstFactoryReturnDate,
       "fmhEqIdSecondFactoryReturnDate": fmhEqIdSecondFactoryReturnDate,
       "fmhEqIdThirdFactoryReturnDate": fmhEqIdThirdFactoryReturnDate,
       "fmhEqIdFourthFactoryReturnDate": fmhEqIdFourthFactoryReturnDate,
       "fmhEqIdFifthFactoryReturnDate": fmhEqIdFifthFactoryReturnDate,
       "fmhE1S2ModuleDescription": fmhE1S2ModuleDescription,
       "fmhE1S2ModDescSoftwareVersion": fmhE1S2ModDescSoftwareVersion,
       "fmhE1S2ModDescHardwareVersion": fmhE1S2ModDescHardwareVersion,
       "fmsInverseArp": fmsInverseArp,
       "fmsInArpVirtualPortTable": fmsInArpVirtualPortTable,
       "fmsInArpVirtualPortEntry": fmsInArpVirtualPortEntry,
       "fmsInArpVpConnX121": fmsInArpVpConnX121,
       "fmsInArpVpVirtualPortId": fmsInArpVpVirtualPortId,
       "fmsInArpVpOutRequests": fmsInArpVpOutRequests,
       "fmsInArpVpInResponses": fmsInArpVpInResponses,
       "fmsInArpVpInRequests": fmsInArpVpInRequests,
       "fmsInArpVpOutResponses": fmsInArpVpOutResponses,
       "fmsInArpVpInverseArpStatus": fmsInArpVpInverseArpStatus,
       "fmsInArpVpRemoteIpAddr": fmsInArpVpRemoteIpAddr,
       "fmsInArpVpLocalIpAddr": fmsInArpVpLocalIpAddr,
       "fmsBootP": fmsBootP,
       "fmsBootPClient": fmsBootPClient,
       "fmsBootPClientStatus": fmsBootPClientStatus,
       "fmsBootPClientFileName": fmsBootPClientFileName,
       "fmsBootPClientServerIpAddr": fmsBootPClientServerIpAddr,
       "fmsBootPClientGatewayIpAddr": fmsBootPClientGatewayIpAddr,
       "fmsBootPRelayTable": fmsBootPRelayTable,
       "fmsBootPRelayEntry": fmsBootPRelayEntry,
       "fmsBootPRelayVirtualPortId": fmsBootPRelayVirtualPortId,
       "fmsBootPRelayRelayedPkts": fmsBootPRelayRelayedPkts,
       "fmsBootPRelayDroppedPkts": fmsBootPRelayDroppedPkts,
       "fmsBootPRelayRecRequests": fmsBootPRelayRecRequests,
       "fmsBootPRelayRecReplies": fmsBootPRelayRecReplies,
       "frxDiagnostic": frxDiagnostic,
       "fdPhysicalPorts": fdPhysicalPorts,
       "fdpIdentification": fdpIdentification,
       "fdpIdentPhysPortId": fdpIdentPhysPortId,
       "fdpIdentPhysPortState": fdpIdentPhysPortState,
       "fdpControl": fdpControl,
       "fdpCtrlCommand": fdpCtrlCommand,
       "fdpCtrlDiagCode": fdpCtrlDiagCode,
       "fdpTest": fdpTest,
       "fdpTestLoopBackType": fdpTestLoopBackType,
       "fdpTestOutputPacketsCount": fdpTestOutputPacketsCount,
       "fdpTestMaxDuration": fdpTestMaxDuration,
       "fdpTestCommand": fdpTestCommand,
       "fdpTestDiagCode": fdpTestDiagCode,
       "fdpTestState": fdpTestState,
       "fdpTestOutPktsCounter": fdpTestOutPktsCounter,
       "fdpTestInPktsCounter": fdpTestInPktsCounter,
       "fdpTestInErrPktsCounter": fdpTestInErrPktsCounter,
       "fdpTestInErrOctetsCounter": fdpTestInErrOctetsCounter,
       "fdpModemManagement": fdpModemManagement,
       "fdpModCommand": fdpModCommand,
       "fdpModControlData": fdpModControlData,
       "fdpModDiagCode": fdpModDiagCode,
       "fdpModResponseTable": fdpModResponseTable,
       "fdpModResponseEntry": fdpModResponseEntry,
       "fdpModRespEltNum": fdpModRespEltNum,
       "fdpModRespElement": fdpModRespElement,
       "vcxSoftware": vcxSoftware,
       "vcxConfig": vcxConfig,
       "vcControl": vcControl,
       "vcCtlDate": vcCtlDate,
       "vcCtlHour": vcCtlHour,
       "vcCtlConfigCom": vcCtlConfigCom,
       "vcCtlConfigLoad": vcCtlConfigLoad,
       "vcCtlErrorTable": vcCtlErrorTable,
       "vcCtlErrorEntry": vcCtlErrorEntry,
       "vcCtlErrorIndex": vcCtlErrorIndex,
       "vcCtlErrorCode": vcCtlErrorCode,
       "vcCtlErrorMessage": vcCtlErrorMessage,
       "vcCtlErrorTime": vcCtlErrorTime,
       "vcSystem": vcSystem,
       "vcSysConfActive": vcSysConfActive,
       "vcSysConfDate": vcSysConfDate,
       "vcSysConfHour": vcSysConfHour,
       "vcManagement": vcManagement,
       "vcmAlrmGenTable": vcmAlrmGenTable,
       "vcmAlrmGenEntry": vcmAlrmGenEntry,
       "vcmAlrmGenFamilyId": vcmAlrmGenFamilyId,
       "vcmAlrmGenTyp": vcmAlrmGenTyp,
       "vcmAlrmGenTrapSend": vcmAlrmGenTrapSend,
       "vcmAlrmGenDisplay": vcmAlrmGenDisplay,
       "vcmAlrmSCTable": vcmAlrmSCTable,
       "vcmAlrmSCEntry": vcmAlrmSCEntry,
       "vcmAlrmSCFamilyId": vcmAlrmSCFamilyId,
       "vcmAlrmSCTyp": vcmAlrmSCTyp,
       "vcmAlrmSCTrapSend": vcmAlrmSCTrapSend,
       "vcmAlrmSCDisplay": vcmAlrmSCDisplay,
       "vcmAlrmVCTable": vcmAlrmVCTable,
       "vcmAlrmVCEntry": vcmAlrmVCEntry,
       "vcmAlrmVCFamilyId": vcmAlrmVCFamilyId,
       "vcmAlrmVCTyp": vcmAlrmVCTyp,
       "vcmAlrmVCTrapSend": vcmAlrmVCTrapSend,
       "vcmAlrmVCDisplay": vcmAlrmVCDisplay,
       "vcmAlrmLMITable": vcmAlrmLMITable,
       "vcmAlrmLMIEntry": vcmAlrmLMIEntry,
       "vcmAlrmLMIFamilyId": vcmAlrmLMIFamilyId,
       "vcmAlrmLMITyp": vcmAlrmLMITyp,
       "vcmAlrmLMITrapSend": vcmAlrmLMITrapSend,
       "vcmAlrmLMIDisplay": vcmAlrmLMIDisplay,
       "vcmAlrmSwTable": vcmAlrmSwTable,
       "vcmAlrmSwEntry": vcmAlrmSwEntry,
       "vcmAlrmSwFamilyId": vcmAlrmSwFamilyId,
       "vcmAlrmSwTyp": vcmAlrmSwTyp,
       "vcmAlrmSwTrapSend": vcmAlrmSwTrapSend,
       "vcmAlrmSwDisplay": vcmAlrmSwDisplay,
       "vcmAlrmCmpTable": vcmAlrmCmpTable,
       "vcmAlrmCmpEntry": vcmAlrmCmpEntry,
       "vcmAlrmCmpFamilyId": vcmAlrmCmpFamilyId,
       "vcmAlrmCmpTyp": vcmAlrmCmpTyp,
       "vcmAlrmCmpTrapSend": vcmAlrmCmpTrapSend,
       "vcmAlrmCmpDisplay": vcmAlrmCmpDisplay,
       "vcmAlrmFaxTable": vcmAlrmFaxTable,
       "vcmAlrmFaxEntry": vcmAlrmFaxEntry,
       "vcmAlrmFaxFamilyId": vcmAlrmFaxFamilyId,
       "vcmAlrmFaxTyp": vcmAlrmFaxTyp,
       "vcmAlrmFaxTrapSend": vcmAlrmFaxTrapSend,
       "vcmAlrmFaxDisplay": vcmAlrmFaxDisplay,
       "vcmAlrmTftpTable": vcmAlrmTftpTable,
       "vcmAlrmTftpEntry": vcmAlrmTftpEntry,
       "vcmAlrmTftpFamilyId": vcmAlrmTftpFamilyId,
       "vcmAlrmTftpTyp": vcmAlrmTftpTyp,
       "vcmAlrmTftpTrapSend": vcmAlrmTftpTrapSend,
       "vcmAlrmTftpDisplay": vcmAlrmTftpDisplay,
       "vcmAlrmSvcTable": vcmAlrmSvcTable,
       "vcmAlrmSvcEntry": vcmAlrmSvcEntry,
       "vcmAlrmSvcFamilyId": vcmAlrmSvcFamilyId,
       "vcmAlrmSvcTyp": vcmAlrmSvcTyp,
       "vcmAlrmSvcTrapSend": vcmAlrmSvcTrapSend,
       "vcmAlrmSvcDisplay": vcmAlrmSvcDisplay,
       "vcInterfaces": vcInterfaces,
       "vcfPhysicalPortTable": vcfPhysicalPortTable,
       "vcfPhysicalPortEntry": vcfPhysicalPortEntry,
       "vcfPhysPortId": vcfPhysPortId,
       "vcfPhysPortConnector": vcfPhysPortConnector,
       "vcfNumericLines": vcfNumericLines,
       "vcfNumericLineTable": vcfNumericLineTable,
       "vcfNumericLineEntry": vcfNumericLineEntry,
       "vcfNumericLineInterfaceId": vcfNumericLineInterfaceId,
       "vcfNumericLineType": vcfNumericLineType,
       "vcfDataLineTable": vcfDataLineTable,
       "vcfDataLineEntry": vcfDataLineEntry,
       "vcfDataLineInterfaceId": vcfDataLineInterfaceId,
       "vcfDataLineRate": vcfDataLineRate,
       "vcfDataLineRts105": vcfDataLineRts105,
       "vcfDataLineDtr108": vcfDataLineDtr108,
       "vcfDataLineCts106": vcfDataLineCts106,
       "vcfDataLineDsr107": vcfDataLineDsr107,
       "vcfDataLineDcd109": vcfDataLineDcd109,
       "vcfConfLineTable": vcfConfLineTable,
       "vcfConfLineEntry": vcfConfLineEntry,
       "vcfConfLineInterfaceId": vcfConfLineInterfaceId,
       "vcfConfLineRate": vcfConfLineRate,
       "vcFrameRelaySw": vcFrameRelaySw,
       "vcFrSwitchingTable": vcFrSwitchingTable,
       "vcFrSwitchingEntry": vcFrSwitchingEntry,
       "vcFrSwL0Dlci": vcFrSwL0Dlci,
       "vcFrSwL1Dlci": vcFrSwL1Dlci,
       "vcFrSwStatus": vcFrSwStatus,
       "vcFrSwL0DlciPriority": vcFrSwL0DlciPriority,
       "vcFrSwL0MuxEnable": vcFrSwL0MuxEnable,
       "vcFrSwL0ChanelIdentifierCID": vcFrSwL0ChanelIdentifierCID,
       "vcFrSwL1DlciPriority": vcFrSwL1DlciPriority,
       "vcFrSwL1MuxEnable": vcFrSwL1MuxEnable,
       "vcFrSwL1ChanelIdentifierCID": vcFrSwL1ChanelIdentifierCID,
       "vcLogicalPorts": vcLogicalPorts,
       "vclLogicalPortTable": vclLogicalPortTable,
       "vclLogicalPortEntry": vclLogicalPortEntry,
       "vclLogPortId": vclLogPortId,
       "vclLogPortStatus": vclLogPortStatus,
       "vclLogPortType": vclLogPortType,
       "vclHdlcAccessLogPort": vclHdlcAccessLogPort,
       "vclHdlcLogPortTable": vclHdlcLogPortTable,
       "vclHdlcLogPortEntry": vclHdlcLogPortEntry,
       "vclHdlcLpLogPortId": vclHdlcLpLogPortId,
       "vclHdlcLpFragmentationLength": vclHdlcLpFragmentationLength,
       "vclHdlcLpRemoteAddress": vclHdlcLpRemoteAddress,
       "vclFrameRelay": vclFrameRelay,
       "vclFrCommunicationEquipment": vclFrCommunicationEquipment,
       "vclFrCeLogPortTable": vclFrCeLogPortTable,
       "vclFrCeLogPortEntry": vclFrCeLogPortEntry,
       "vclFrCeLpLogPortId": vclFrCeLpLogPortId,
       "vclFrCeLpInterfaceId": vclFrCeLpInterfaceId,
       "vclFrTerminalEquipment": vclFrTerminalEquipment,
       "vclFrTeLogPortTable": vclFrTeLogPortTable,
       "vclFrTeLogPortEntry": vclFrTeLogPortEntry,
       "vclFrTeLpLogPortId": vclFrTeLpLogPortId,
       "vclFrTeLpInterfaceId": vclFrTeLpInterfaceId,
       "vclFrTeLpConfigId": vclFrTeLpConfigId,
       "vclFrTeLpLmi": vclFrTeLpLmi,
       "vclFrSwitchEquipment": vclFrSwitchEquipment,
       "vclFrSeLogPortTable": vclFrSeLogPortTable,
       "vclFrSeLogPortEntry": vclFrSeLogPortEntry,
       "vclFrSeLpLogPortId": vclFrSeLpLogPortId,
       "vclFrSeLpInterfaceId": vclFrSeLpInterfaceId,
       "vclFrSeLpConfigId": vclFrSeLpConfigId,
       "vclFrConfigurationTe": vclFrConfigurationTe,
       "vclFrLmiParameterTable": vclFrLmiParameterTable,
       "vclFrLmiParameterEntry": vclFrLmiParameterEntry,
       "vclFrLmiParaConfigId": vclFrLmiParaConfigId,
       "vclFrLmiParaDlci": vclFrLmiParaDlci,
       "vclFrLmiParaStandard": vclFrLmiParaStandard,
       "vclFrLmiParaAccessibilityCondition": vclFrLmiParaAccessibilityCondition,
       "vclFrLmiParaN391FullStatusPollCount": vclFrLmiParaN391FullStatusPollCount,
       "vclFrLmiParaN392ErrorThreshold": vclFrLmiParaN392ErrorThreshold,
       "vclFrLmiParaN393MonitoredEventCount": vclFrLmiParaN393MonitoredEventCount,
       "vclFrLmiParaT391LinkIntegPollTimer": vclFrLmiParaT391LinkIntegPollTimer,
       "vclFrConfigurationSe": vclFrConfigurationSe,
       "vclFrSeSignallingTable": vclFrSeSignallingTable,
       "vclFrSeSignallingEntry": vclFrSeSignallingEntry,
       "vclFrSeSigConfigId": vclFrSeSigConfigId,
       "vclFrSeSigOuputTimeout": vclFrSeSigOuputTimeout,
       "vclFrSeSigSignalOutputWinSize": vclFrSeSigSignalOutputWinSize,
       "vclFrSeSigN200RetransMaxCount": vclFrSeSigN200RetransMaxCount,
       "vclFrSeSigT200RetransTimer": vclFrSeSigT200RetransTimer,
       "vclFrSeSigT203InactivityTimer": vclFrSeSigT203InactivityTimer,
       "vclFrSeSigT303SetupResponseTimer": vclFrSeSigT303SetupResponseTimer,
       "vclFrSeSigT305DisconnectResponseTimer": vclFrSeSigT305DisconnectResponseTimer,
       "vclFrSeSigT308ReleaseResponseTimer": vclFrSeSigT308ReleaseResponseTimer,
       "vclFrSeSigT310CallProceedingTimer": vclFrSeSigT310CallProceedingTimer,
       "vclFrSeSigT316RestartAcknowledgeTimer": vclFrSeSigT316RestartAcknowledgeTimer,
       "vcWanSwitch": vcWanSwitch,
       "vcwEquipParams": vcwEquipParams,
       "vcwEquipDnicZoAddr": vcwEquipDnicZoAddr,
       "vcwEquipVoiceRoutingServicePortAddr": vcwEquipVoiceRoutingServicePortAddr,
       "vcwEquipIpVirtualPortAddr": vcwEquipIpVirtualPortAddr,
       "vcwEquipRemoteConfPortAddr": vcwEquipRemoteConfPortAddr,
       "vcwEquipVoiceVirtualPortAddr": vcwEquipVoiceVirtualPortAddr,
       "vcwEquipSVCDisconnectOnCongestion": vcwEquipSVCDisconnectOnCongestion,
       "vcwEquipOutLogPort": vcwEquipOutLogPort,
       "vcwABPvcLpTable": vcwABPvcLpTable,
       "vcwABPvcLpEntry": vcwABPvcLpEntry,
       "vcwABPvcLpId": vcwABPvcLpId,
       "vcwABPvcLpAddress": vcwABPvcLpAddress,
       "vcwWanRouteTable": vcwWanRouteTable,
       "vcwWanRouteEntry": vcwWanRouteEntry,
       "vcwWanRouteDnicZoAddress": vcwWanRouteDnicZoAddress,
       "vcwWanRouteStatus": vcwWanRouteStatus,
       "vcwWanRouteLogPortId": vcwWanRouteLogPortId,
       "vcVirtualPorts": vcVirtualPorts,
       "vcvVirtualPortTable": vcvVirtualPortTable,
       "vcvVirtualPortEntry": vcvVirtualPortEntry,
       "vcvVirtualPortId": vcvVirtualPortId,
       "vcvIpVirtualPort": vcvIpVirtualPort,
       "vcvIpLocalTable": vcvIpLocalTable,
       "vcvIpLocalEntry": vcvIpLocalEntry,
       "vcvIpLocVirtualPortId": vcvIpLocVirtualPortId,
       "vcvIpLocAddressHost": vcvIpLocAddressHost,
       "vcvIpLocSubNetMask": vcvIpLocSubNetMask,
       "vcvIpLocMtu": vcvIpLocMtu,
       "vcvIpLocRouteNextHop": vcvIpLocRouteNextHop,
       "vcvIpLocMinimumRecallTimer": vcvIpLocMinimumRecallTimer,
       "vcvIpLocSvcClearCallTimer": vcvIpLocSvcClearCallTimer,
       "vcvIpLocSvcCallRetryCount": vcvIpLocSvcCallRetryCount,
       "vcvSnmp": vcvSnmp,
       "vcvSnmpGen": vcvSnmpGen,
       "vcvSnmpGenVirtualPortId": vcvSnmpGenVirtualPortId,
       "vcvSnmpGenCommunityStringReadOnly": vcvSnmpGenCommunityStringReadOnly,
       "vcvSnmpGenCommunityStringReadWrite": vcvSnmpGenCommunityStringReadWrite,
       "vcvSnmpGenCommunityStringTrap": vcvSnmpGenCommunityStringTrap,
       "vcvSnmpGenAuthenticationFailureTrap": vcvSnmpGenAuthenticationFailureTrap,
       "vcvSnmpManagerTable": vcvSnmpManagerTable,
       "vcvSnmpManagerEntry": vcvSnmpManagerEntry,
       "vcvSnmpManagerIpAddress": vcvSnmpManagerIpAddress,
       "vcvSnmpManagerStatus": vcvSnmpManagerStatus,
       "vcvSnmpManagerName": vcvSnmpManagerName,
       "vcvSnmpManagerSendTraps": vcvSnmpManagerSendTraps,
       "vcvSnmpManagerTrapsUdpPort": vcvSnmpManagerTrapsUdpPort,
       "vcvRemoteConfTable": vcvRemoteConfTable,
       "vcvRemoteConfEntry": vcvRemoteConfEntry,
       "vcvRemoteConfName": vcvRemoteConfName,
       "vcvRemoteConfStatus": vcvRemoteConfStatus,
       "vcvRemoteConfWanAddress": vcvRemoteConfWanAddress,
       "vcvTftpTable": vcvTftpTable,
       "vcvTftpEntry": vcvTftpEntry,
       "vcvTftpIpAddress": vcvTftpIpAddress,
       "vcvTftpStatus": vcvTftpStatus,
       "vcvTftpName": vcvTftpName,
       "vcvTftpRetryTimer": vcvTftpRetryTimer,
       "vcvTftpInactTimer": vcvTftpInactTimer,
       "vcvRemoteNetToMediaTable": vcvRemoteNetToMediaTable,
       "vcvRemoteNetToMediaEntry": vcvRemoteNetToMediaEntry,
       "vcvRemNetIpAddress": vcvRemNetIpAddress,
       "vcvRemNetStatus": vcvRemNetStatus,
       "vcvRemNetWanAddress": vcvRemNetWanAddress,
       "vcvRemNetEncapsulation": vcvRemNetEncapsulation,
       "vcvVoiceVirtualPort": vcvVoiceVirtualPort,
       "vcvVoiceGen": vcvVoiceGen,
       "vcvVoiceVirtualPortId": vcvVoiceVirtualPortId,
       "vcvVoiceTransportTable": vcvVoiceTransportTable,
       "vcvVoiceTransportEntry": vcvVoiceTransportEntry,
       "vcvVoiceTransProfileId": vcvVoiceTransProfileId,
       "vcvVoiceTransEncapsulationMode": vcvVoiceTransEncapsulationMode,
       "vcvVoiceTransMaxPayLoadNumber": vcvVoiceTransMaxPayLoadNumber,
       "vcvVoiceTransCompressionAlgorithm": vcvVoiceTransCompressionAlgorithm,
       "vcvVoiceTransJitterCompensation": vcvVoiceTransJitterCompensation,
       "vcvVoiceTransVoicePacketsCombination": vcvVoiceTransVoicePacketsCombination,
       "vcvVoiceTransQosBc": vcvVoiceTransQosBc,
       "vcvVoiceTransQosBe": vcvVoiceTransQosBe,
       "vcvVoiceTransQosCir": vcvVoiceTransQosCir,
       "vcvVoiceSuscriberTable": vcvVoiceSuscriberTable,
       "vcvVoiceSuscriberEntry": vcvVoiceSuscriberEntry,
       "vcvVoiceSuscrOrderNumber": vcvVoiceSuscrOrderNumber,
       "vcvVoiceSuscrNumber": vcvVoiceSuscrNumber,
       "vcvVoiceSuscrStatus": vcvVoiceSuscrStatus,
       "vcvVoiceSuscrTransportNetwork": vcvVoiceSuscrTransportNetwork,
       "vcvVoiceSuscrTransportNetworkAddress": vcvVoiceSuscrTransportNetworkAddress,
       "vcvVoiceSuscrTransportProfileId": vcvVoiceSuscrTransportProfileId,
       "vcvVoiceSuscrRemovedDigitNumber": vcvVoiceSuscrRemovedDigitNumber,
       "vcvVoiceSuscrInsPrefix": vcvVoiceSuscrInsPrefix,
       "vcvVoiceSuscrInsSuffix": vcvVoiceSuscrInsSuffix,
       "vcvVoiceSwTable": vcvVoiceSwTable,
       "vcvVoiceSwEntry": vcvVoiceSwEntry,
       "vcvVoiceSwOrderNumber": vcvVoiceSwOrderNumber,
       "vcvVoiceSwSuscriberNumber": vcvVoiceSwSuscriberNumber,
       "vcvVoiceSwStatus": vcvVoiceSwStatus,
       "vcvVoiceSwLogPortSetId": vcvVoiceSwLogPortSetId,
       "vcvVoiceSwRemovedDigitNumber": vcvVoiceSwRemovedDigitNumber,
       "vcvVoiceSwInsPrefix": vcvVoiceSwInsPrefix,
       "vcvVoiceSwInsSuffix": vcvVoiceSwInsSuffix,
       "vcvDialingReceptTable": vcvDialingReceptTable,
       "vcvDialingReceptEntry": vcvDialingReceptEntry,
       "vcvDialRxSuscriberNumber": vcvDialRxSuscriberNumber,
       "vcvDialRxStatus": vcvDialRxStatus,
       "vcvDialRxNumberLength": vcvDialRxNumberLength,
       "vcvDialRxEndOfDialingTimer": vcvDialRxEndOfDialingTimer,
       "vcvVoiceLogPort": vcvVoiceLogPort,
       "vcvVoiceLogicalPortTable": vcvVoiceLogicalPortTable,
       "vcvVoiceLogicalPortEntry": vcvVoiceLogicalPortEntry,
       "vcvVoiceLogPortId": vcvVoiceLogPortId,
       "vcvVoiceLogPortStatus": vcvVoiceLogPortStatus,
       "vcvVoiceLogPortType": vcvVoiceLogPortType,
       "vcvProfileTone": vcvProfileTone,
       "vcvToneGenTable": vcvToneGenTable,
       "vcvToneGenEntry": vcvToneGenEntry,
       "vcvToneGenProfileId": vcvToneGenProfileId,
       "vcvToneGenLevel": vcvToneGenLevel,
       "vcvToneTable": vcvToneTable,
       "vcvToneEntry": vcvToneEntry,
       "vcvToneProfileId": vcvToneProfileId,
       "vcvToneType": vcvToneType,
       "vcvToneEnable": vcvToneEnable,
       "vcvToneFreq1": vcvToneFreq1,
       "vcvToneDuration1": vcvToneDuration1,
       "vcvToneFreq2": vcvToneFreq2,
       "vcvToneDuration2": vcvToneDuration2,
       "vcvVoiceLogicalPortEM": vcvVoiceLogicalPortEM,
       "vcvEMPerm": vcvEMPerm,
       "vcvEMPermTable": vcvEMPermTable,
       "vcvEMPermEntry": vcvEMPermEntry,
       "vcvEMPermLpId": vcvEMPermLpId,
       "vcvEMPermCommunicationMode": vcvEMPermCommunicationMode,
       "vcvEMPermRemoteNumber": vcvEMPermRemoteNumber,
       "vcvEMPermInterfaceId": vcvEMPermInterfaceId,
       "vcvEMSw": vcvEMSw,
       "vcvEMSwTable": vcvEMSwTable,
       "vcvEMSwEntry": vcvEMSwEntry,
       "vcvEMSwLpId": vcvEMSwLpId,
       "vcvEMSwLogPortSetId": vcvEMSwLogPortSetId,
       "vcvEMSwCallType": vcvEMSwCallType,
       "vcvEMSwRemoteNumber": vcvEMSwRemoteNumber,
       "vcvEMSwConfigId": vcvEMSwConfigId,
       "vcvEMSwInterfaceId": vcvEMSwInterfaceId,
       "vcvEMConfigTable": vcvEMConfigTable,
       "vcvEMConfigEntry": vcvEMConfigEntry,
       "vcvEMConfId": vcvEMConfId,
       "vcvEMConfCallSignalling": vcvEMConfCallSignalling,
       "vcvEMConfDialingMode": vcvEMConfDialingMode,
       "vcvEMConfDialingTimeOut": vcvEMConfDialingTimeOut,
       "vcvEMConfSigChannelDiscTimeOut": vcvEMConfSigChannelDiscTimeOut,
       "vcvEMConfTimeBetweenSuccOutCall": vcvEMConfTimeBetweenSuccOutCall,
       "vcvEMConfLineInterfacePolarity": vcvEMConfLineInterfacePolarity,
       "vcvEMConfMinLineSeizureAckTime": vcvEMConfMinLineSeizureAckTime,
       "vcvEMConfMaxLineSeizureAckTime": vcvEMConfMaxLineSeizureAckTime,
       "vcvEMConfLineSeizureAckTime": vcvEMConfLineSeizureAckTime,
       "vcvEMConfClearToIncCallTime": vcvEMConfClearToIncCallTime,
       "vcvEMConfSeizureAckPulseDuration": vcvEMConfSeizureAckPulseDuration,
       "vcvEMConfMinSeizureAckPulseDuration": vcvEMConfMinSeizureAckPulseDuration,
       "vcvEMConfDialingFormat": vcvEMConfDialingFormat,
       "vcvEMConfInterdigitTime": vcvEMConfInterdigitTime,
       "vcvEMConfPauseTime": vcvEMConfPauseTime,
       "vcvEMConfDtmfDigitTime": vcvEMConfDtmfDigitTime,
       "vcvEMConfDtmfDigitLevel": vcvEMConfDtmfDigitLevel,
       "vcvEMConfDelayBeforeDialing": vcvEMConfDelayBeforeDialing,
       "vcvEMConfDigitReceptionTimeOut": vcvEMConfDigitReceptionTimeOut,
       "vcvEMConfEndOfDialingTimer": vcvEMConfEndOfDialingTimer,
       "vcvEMConfToneProfile": vcvEMConfToneProfile,
       "vcvVoiceLogicalPortFxx": vcvVoiceLogicalPortFxx,
       "vcvFxxLpTable": vcvFxxLpTable,
       "vcvFxxLpEntry": vcvFxxLpEntry,
       "vcvFxxLpLogPortId": vcvFxxLpLogPortId,
       "vcvFxxLpSetId": vcvFxxLpSetId,
       "vcvFxxLpCallType": vcvFxxLpCallType,
       "vcvFxxLpRemoteNumber": vcvFxxLpRemoteNumber,
       "vcvFxxLpConfigId": vcvFxxLpConfigId,
       "vcvFxxLpInterfaceId": vcvFxxLpInterfaceId,
       "vcvFxxConfigTable": vcvFxxConfigTable,
       "vcvFxxConfigEntry": vcvFxxConfigEntry,
       "vcvFxxConfId": vcvFxxConfId,
       "vcvFxxConfCallSignalling": vcvFxxConfCallSignalling,
       "vcvFxxConfDialingMode": vcvFxxConfDialingMode,
       "vcvFxxConfSigChannelDiscTimeOut": vcvFxxConfSigChannelDiscTimeOut,
       "vcvFxxConfTimeBetweenSuccOutCall": vcvFxxConfTimeBetweenSuccOutCall,
       "vcvFxxConfDialingFormat": vcvFxxConfDialingFormat,
       "vcvFxxConfInterdigitTime": vcvFxxConfInterdigitTime,
       "vcvFxxConfPauseTime": vcvFxxConfPauseTime,
       "vcvFxxConfDtmfDigitTime": vcvFxxConfDtmfDigitTime,
       "vcvFxxConfDtmfDigitLevel": vcvFxxConfDtmfDigitLevel,
       "vcvFxxConfTxRecallSignalDuration": vcvFxxConfTxRecallSignalDuration,
       "vcvFxxConfDelayBeforeDialing": vcvFxxConfDelayBeforeDialing,
       "vcvFxxConfDialingTimeOut": vcvFxxConfDialingTimeOut,
       "vcvFxxConfDigitReceptionTimeOut": vcvFxxConfDigitReceptionTimeOut,
       "vcvFxxConfEndOfDialingTimer": vcvFxxConfEndOfDialingTimer,
       "vcvFxxConfMinRxRecallSignalDuration": vcvFxxConfMinRxRecallSignalDuration,
       "vcvFxxConfToneProfile": vcvFxxConfToneProfile,
       "vcvFxxConfRingingProfile": vcvFxxConfRingingProfile,
       "vcvFxxRingTable": vcvFxxRingTable,
       "vcvFxxRingEntry": vcvFxxRingEntry,
       "vcvFxxRingProfile": vcvFxxRingProfile,
       "vcvFxxRingFrequency": vcvFxxRingFrequency,
       "vcvFxxRingTopDuration": vcvFxxRingTopDuration,
       "vcvFxxRingSilenceDuration": vcvFxxRingSilenceDuration,
       "vcvFxxRingMaxRingingTime": vcvFxxRingMaxRingingTime,
       "vcvAnalogLines": vcvAnalogLines,
       "vcvAnalogLineTable": vcvAnalogLineTable,
       "vcvAnalogLineEntry": vcvAnalogLineEntry,
       "vcvAnalogLineInterfaceId": vcvAnalogLineInterfaceId,
       "vcvAnalogLineTypeInterface": vcvAnalogLineTypeInterface,
       "vcvAnalogLineVoiceProfile": vcvAnalogLineVoiceProfile,
       "vcvVoiceProfileTable": vcvVoiceProfileTable,
       "vcvVoiceProfileEntry": vcvVoiceProfileEntry,
       "vcvVoiceProfId": vcvVoiceProfId,
       "vcvVoiceProfTransmitLevel": vcvVoiceProfTransmitLevel,
       "vcvVoiceProfReceiveLevel": vcvVoiceProfReceiveLevel,
       "vcvVoiceProfSilenceDetection": vcvVoiceProfSilenceDetection,
       "vcvVoiceProfSilenceDetectionLevel": vcvVoiceProfSilenceDetectionLevel,
       "vcvVoiceProfEchoCancellation": vcvVoiceProfEchoCancellation,
       "vcvVoiceProfEchoCancellationLength": vcvVoiceProfEchoCancellationLength,
       "vcvVoiceProfNoiseFramesPeriodicity": vcvVoiceProfNoiseFramesPeriodicity,
       "vcvVoiceProfLoopActivation": vcvVoiceProfLoopActivation,
       "vcvVoiceProfFaxActivation": vcvVoiceProfFaxActivation,
       "vcvVoiceProfMaximumFaxSpeed": vcvVoiceProfMaximumFaxSpeed,
       "vcvVoicePhysicalPortTable": vcvVoicePhysicalPortTable,
       "vcvVoicePhysicalPortEntry": vcvVoicePhysicalPortEntry,
       "vcvVoicePhysPortId": vcvVoicePhysPortId,
       "vcvVoicePhysPortConnector": vcvVoicePhysPortConnector,
       "dvbConfig": dvbConfig,
       "dcControl": dcControl,
       "dcCtlDate": dcCtlDate,
       "dcCtlHour": dcCtlHour,
       "dcCtlConfigCom": dcCtlConfigCom,
       "dcCtlConfigLoad": dcCtlConfigLoad,
       "dcCtlErrorTable": dcCtlErrorTable,
       "dcCtlErrorEntry": dcCtlErrorEntry,
       "dcCtlErrorIndex": dcCtlErrorIndex,
       "dcCtlErrorCode": dcCtlErrorCode,
       "dcCtlErrorMessage": dcCtlErrorMessage,
       "dcCtlErrorTime": dcCtlErrorTime,
       "dcSystem": dcSystem,
       "dcSysConfActive": dcSysConfActive,
       "dcSysConfDate": dcSysConfDate,
       "dcSysConfHour": dcSysConfHour,
       "dcManagement": dcManagement,
       "dcmAlrmGenTable": dcmAlrmGenTable,
       "dcmAlrmGenEntry": dcmAlrmGenEntry,
       "dcmAlrmGenFamilyId": dcmAlrmGenFamilyId,
       "dcmAlrmGenTyp": dcmAlrmGenTyp,
       "dcmAlrmGenTrapSend": dcmAlrmGenTrapSend,
       "dcmAlrmGenDisplay": dcmAlrmGenDisplay,
       "dcmAlrmSCTable": dcmAlrmSCTable,
       "dcmAlrmSCEntry": dcmAlrmSCEntry,
       "dcmAlrmSCFamilyId": dcmAlrmSCFamilyId,
       "dcmAlrmSCTyp": dcmAlrmSCTyp,
       "dcmAlrmSCTrapSend": dcmAlrmSCTrapSend,
       "dcmAlrmSCDisplay": dcmAlrmSCDisplay,
       "dcmAlrmVCTable": dcmAlrmVCTable,
       "dcmAlrmVCEntry": dcmAlrmVCEntry,
       "dcmAlrmVCFamilyId": dcmAlrmVCFamilyId,
       "dcmAlrmVCTyp": dcmAlrmVCTyp,
       "dcmAlrmVCTrapSend": dcmAlrmVCTrapSend,
       "dcmAlrmVCDisplay": dcmAlrmVCDisplay,
       "dcmAlrmLMITable": dcmAlrmLMITable,
       "dcmAlrmLMIEntry": dcmAlrmLMIEntry,
       "dcmAlrmLMIFamilyId": dcmAlrmLMIFamilyId,
       "dcmAlrmLMITyp": dcmAlrmLMITyp,
       "dcmAlrmLMITrapSend": dcmAlrmLMITrapSend,
       "dcmAlrmLMIDisplay": dcmAlrmLMIDisplay,
       "dcmAlrmSwTable": dcmAlrmSwTable,
       "dcmAlrmSwEntry": dcmAlrmSwEntry,
       "dcmAlrmSwFamilyId": dcmAlrmSwFamilyId,
       "dcmAlrmSwTyp": dcmAlrmSwTyp,
       "dcmAlrmSwTrapSend": dcmAlrmSwTrapSend,
       "dcmAlrmSwDisplay": dcmAlrmSwDisplay,
       "dcmAlrmCmpTable": dcmAlrmCmpTable,
       "dcmAlrmCmpEntry": dcmAlrmCmpEntry,
       "dcmAlrmCmpFamilyId": dcmAlrmCmpFamilyId,
       "dcmAlrmCmpTyp": dcmAlrmCmpTyp,
       "dcmAlrmCmpTrapSend": dcmAlrmCmpTrapSend,
       "dcmAlrmCmpDisplay": dcmAlrmCmpDisplay,
       "dcmAlrmFaxTable": dcmAlrmFaxTable,
       "dcmAlrmFaxEntry": dcmAlrmFaxEntry,
       "dcmAlrmFaxFamilyId": dcmAlrmFaxFamilyId,
       "dcmAlrmFaxTyp": dcmAlrmFaxTyp,
       "dcmAlrmFaxTrapSend": dcmAlrmFaxTrapSend,
       "dcmAlrmFaxDisplay": dcmAlrmFaxDisplay,
       "dcmAlrmTftpTable": dcmAlrmTftpTable,
       "dcmAlrmTftpEntry": dcmAlrmTftpEntry,
       "dcmAlrmTftpFamilyId": dcmAlrmTftpFamilyId,
       "dcmAlrmTftpTyp": dcmAlrmTftpTyp,
       "dcmAlrmTftpTrapSend": dcmAlrmTftpTrapSend,
       "dcmAlrmTftpDisplay": dcmAlrmTftpDisplay,
       "dcmAlrmSvcTable": dcmAlrmSvcTable,
       "dcmAlrmSvcEntry": dcmAlrmSvcEntry,
       "dcmAlrmSvcFamilyId": dcmAlrmSvcFamilyId,
       "dcmAlrmSvcTyp": dcmAlrmSvcTyp,
       "dcmAlrmSvcTrapSend": dcmAlrmSvcTrapSend,
       "dcmAlrmSvcDisplay": dcmAlrmSvcDisplay,
       "dcmAlrmSyncTable": dcmAlrmSyncTable,
       "dcmAlrmSyncEntry": dcmAlrmSyncEntry,
       "dcmAlrmSyncFamilyId": dcmAlrmSyncFamilyId,
       "dcmAlrmSyncTyp": dcmAlrmSyncTyp,
       "dcmAlrmSyncTrapSend": dcmAlrmSyncTrapSend,
       "dcmAlrmSyncDisplay": dcmAlrmSyncDisplay,
       "dcInterfaces": dcInterfaces,
       "dcfPhysicalPortTable": dcfPhysicalPortTable,
       "dcfPhysicalPortEntry": dcfPhysicalPortEntry,
       "dcfPhysPortId": dcfPhysPortId,
       "dcfPhysPortConnector": dcfPhysPortConnector,
       "dcfNumericLines": dcfNumericLines,
       "dcfNumericLineTable": dcfNumericLineTable,
       "dcfNumericLineEntry": dcfNumericLineEntry,
       "dcfNumericLineInterfaceId": dcfNumericLineInterfaceId,
       "dcfNumericLineType": dcfNumericLineType,
       "dcfDataLineTable": dcfDataLineTable,
       "dcfDataLineEntry": dcfDataLineEntry,
       "dcfDataLineInterfaceId": dcfDataLineInterfaceId,
       "dcfDataLineRate": dcfDataLineRate,
       "dcfDataLineRts105": dcfDataLineRts105,
       "dcfDataLineDtr108": dcfDataLineDtr108,
       "dcfDataLineCts106": dcfDataLineCts106,
       "dcfDataLineDsr107": dcfDataLineDsr107,
       "dcfDataLineDcd109": dcfDataLineDcd109,
       "dcfConfLineTable": dcfConfLineTable,
       "dcfConfLineEntry": dcfConfLineEntry,
       "dcfConfLineInterfaceId": dcfConfLineInterfaceId,
       "dcfConfLineRate": dcfConfLineRate,
       "dcLogicalPorts": dcLogicalPorts,
       "dclLogicalPortTable": dclLogicalPortTable,
       "dclLogicalPortEntry": dclLogicalPortEntry,
       "dclLogPortId": dclLogPortId,
       "dclLogPortStatus": dclLogPortStatus,
       "dclLogPortType": dclLogPortType,
       "dclFrameRelay": dclFrameRelay,
       "dclFrTerminalEquipment": dclFrTerminalEquipment,
       "dclFrTeLogPortTable": dclFrTeLogPortTable,
       "dclFrTeLogPortEntry": dclFrTeLogPortEntry,
       "dclFrTeLpLogPortId": dclFrTeLpLogPortId,
       "dclFrTeLpInterfaceId": dclFrTeLpInterfaceId,
       "dclFrTeLpConfigId": dclFrTeLpConfigId,
       "dclFrTeLpLmi": dclFrTeLpLmi,
       "dclFrSwitchEquipment": dclFrSwitchEquipment,
       "dclFrSeLogPortTable": dclFrSeLogPortTable,
       "dclFrSeLogPortEntry": dclFrSeLogPortEntry,
       "dclFrSeLpLogPortId": dclFrSeLpLogPortId,
       "dclFrSeLpInterfaceId": dclFrSeLpInterfaceId,
       "dclFrSeLpConfigId": dclFrSeLpConfigId,
       "dclFrConfigurationTe": dclFrConfigurationTe,
       "dclFrLmiParameterTable": dclFrLmiParameterTable,
       "dclFrLmiParameterEntry": dclFrLmiParameterEntry,
       "dclFrLmiParaConfigId": dclFrLmiParaConfigId,
       "dclFrLmiParaDlci": dclFrLmiParaDlci,
       "dclFrLmiParaStandard": dclFrLmiParaStandard,
       "dclFrLmiParaAccessibilityCondition": dclFrLmiParaAccessibilityCondition,
       "dclFrLmiParaN391FullStatusPollCount": dclFrLmiParaN391FullStatusPollCount,
       "dclFrLmiParaN392ErrorThreshold": dclFrLmiParaN392ErrorThreshold,
       "dclFrLmiParaN393MonitoredEventCount": dclFrLmiParaN393MonitoredEventCount,
       "dclFrLmiParaT391LinkIntegPollTimer": dclFrLmiParaT391LinkIntegPollTimer,
       "dclFrConfigurationSe": dclFrConfigurationSe,
       "dclFrSeSignallingTable": dclFrSeSignallingTable,
       "dclFrSeSignallingEntry": dclFrSeSignallingEntry,
       "dclFrSeSigConfigId": dclFrSeSigConfigId,
       "dclFrSeSigOuputTimeout": dclFrSeSigOuputTimeout,
       "dclFrSeSigSignalOutputWinSize": dclFrSeSigSignalOutputWinSize,
       "dclFrSeSigN200RetransMaxCount": dclFrSeSigN200RetransMaxCount,
       "dclFrSeSigT200RetransTimer": dclFrSeSigT200RetransTimer,
       "dclFrSeSigT203InactivityTimer": dclFrSeSigT203InactivityTimer,
       "dclFrSeSigT303SetupResponseTimer": dclFrSeSigT303SetupResponseTimer,
       "dclFrSeSigT305DisconnectResponseTimer": dclFrSeSigT305DisconnectResponseTimer,
       "dclFrSeSigT308ReleaseResponseTimer": dclFrSeSigT308ReleaseResponseTimer,
       "dclFrSeSigT310CallProceedingTimer": dclFrSeSigT310CallProceedingTimer,
       "dclFrSeSigT316RestartAcknowledgeTimer": dclFrSeSigT316RestartAcknowledgeTimer,
       "dcWanSwitch": dcWanSwitch,
       "dcwEquipParams": dcwEquipParams,
       "dcwEquipDnicZoAddr": dcwEquipDnicZoAddr,
       "dcwEquipVoiceRoutingServicePortAddr": dcwEquipVoiceRoutingServicePortAddr,
       "dcwEquipIpVirtualPortAddr": dcwEquipIpVirtualPortAddr,
       "dcwEquipRemoteConfPortAddr": dcwEquipRemoteConfPortAddr,
       "dcwEquipVoiceVirtualPortAddr": dcwEquipVoiceVirtualPortAddr,
       "dcwEquipSVCDisconnectOnCongestion": dcwEquipSVCDisconnectOnCongestion,
       "dcwABPvcLpTable": dcwABPvcLpTable,
       "dcwABPvcLpEntry": dcwABPvcLpEntry,
       "dcwABPvcLpId": dcwABPvcLpId,
       "dcwABPvcLpAddress": dcwABPvcLpAddress,
       "dcVirtualPorts": dcVirtualPorts,
       "dcvVirtualPortTable": dcvVirtualPortTable,
       "dcvVirtualPortEntry": dcvVirtualPortEntry,
       "dcvVirtualPortId": dcvVirtualPortId,
       "dcvIpVirtualPort": dcvIpVirtualPort,
       "dcvIpLocalTable": dcvIpLocalTable,
       "dcvIpLocalEntry": dcvIpLocalEntry,
       "dcvIpLocVirtualPortId": dcvIpLocVirtualPortId,
       "dcvIpLocAddressHost": dcvIpLocAddressHost,
       "dcvIpLocSubNetMask": dcvIpLocSubNetMask,
       "dcvIpLocMtu": dcvIpLocMtu,
       "dcvIpLocRouteNextHop": dcvIpLocRouteNextHop,
       "dcvIpLocMinimumRecallTimer": dcvIpLocMinimumRecallTimer,
       "dcvIpLocSvcClearCallTimer": dcvIpLocSvcClearCallTimer,
       "dcvIpLocSvcCallRetryCount": dcvIpLocSvcCallRetryCount,
       "dcvSnmp": dcvSnmp,
       "dcvSnmpGen": dcvSnmpGen,
       "dcvSnmpGenVirtualPortId": dcvSnmpGenVirtualPortId,
       "dcvSnmpGenCommunityStringReadOnly": dcvSnmpGenCommunityStringReadOnly,
       "dcvSnmpGenCommunityStringReadWrite": dcvSnmpGenCommunityStringReadWrite,
       "dcvSnmpGenCommunityStringTrap": dcvSnmpGenCommunityStringTrap,
       "dcvSnmpGenAuthenticationFailureTrap": dcvSnmpGenAuthenticationFailureTrap,
       "dcvSnmpManagerTable": dcvSnmpManagerTable,
       "dcvSnmpManagerEntry": dcvSnmpManagerEntry,
       "dcvSnmpManagerIpAddress": dcvSnmpManagerIpAddress,
       "dcvSnmpManagerStatus": dcvSnmpManagerStatus,
       "dcvSnmpManagerName": dcvSnmpManagerName,
       "dcvSnmpManagerSendTraps": dcvSnmpManagerSendTraps,
       "dcvSnmpManagerTrapsUdpPort": dcvSnmpManagerTrapsUdpPort,
       "dcvRemoteConfTable": dcvRemoteConfTable,
       "dcvRemoteConfEntry": dcvRemoteConfEntry,
       "dcvRemoteConfName": dcvRemoteConfName,
       "dcvRemoteConfStatus": dcvRemoteConfStatus,
       "dcvRemoteConfWanAddress": dcvRemoteConfWanAddress,
       "dcvTftpTable": dcvTftpTable,
       "dcvTftpEntry": dcvTftpEntry,
       "dcvTftpIpAddress": dcvTftpIpAddress,
       "dcvTftpStatus": dcvTftpStatus,
       "dcvTftpName": dcvTftpName,
       "dcvTftpRetryTimer": dcvTftpRetryTimer,
       "dcvTftpInactTimer": dcvTftpInactTimer,
       "dcvRemoteNetToMediaTable": dcvRemoteNetToMediaTable,
       "dcvRemoteNetToMediaEntry": dcvRemoteNetToMediaEntry,
       "dcvRemNetIpAddress": dcvRemNetIpAddress,
       "dcvRemNetStatus": dcvRemNetStatus,
       "dcvRemNetWanAddress": dcvRemNetWanAddress,
       "dcvRemNetEncapsulation": dcvRemNetEncapsulation,
       "dcvVoiceVirtualPort": dcvVoiceVirtualPort,
       "dcvVoiceGen": dcvVoiceGen,
       "dcvVoiceVirtualPortId": dcvVoiceVirtualPortId,
       "dcvVoiceTransportTable": dcvVoiceTransportTable,
       "dcvVoiceTransportEntry": dcvVoiceTransportEntry,
       "dcvVoiceTransProfileId": dcvVoiceTransProfileId,
       "dcvVoiceTransEncapsulationMode": dcvVoiceTransEncapsulationMode,
       "dcvVoiceTransMaxPayLoadNumber": dcvVoiceTransMaxPayLoadNumber,
       "dcvVoiceTransCompressionAlgorithm": dcvVoiceTransCompressionAlgorithm,
       "dcvVoiceTransJitterCompensation": dcvVoiceTransJitterCompensation,
       "dcvVoiceTransVoicePacketsCombination": dcvVoiceTransVoicePacketsCombination,
       "dcvVoiceTransQosBc": dcvVoiceTransQosBc,
       "dcvVoiceTransQosBe": dcvVoiceTransQosBe,
       "dcvVoiceTransQosCir": dcvVoiceTransQosCir,
       "dcvVoiceSuscriberTable": dcvVoiceSuscriberTable,
       "dcvVoiceSuscriberEntry": dcvVoiceSuscriberEntry,
       "dcvVoiceSuscrOrderNumber": dcvVoiceSuscrOrderNumber,
       "dcvVoiceSuscrNumber": dcvVoiceSuscrNumber,
       "dcvVoiceSuscrStatus": dcvVoiceSuscrStatus,
       "dcvVoiceSuscrTransportNetwork": dcvVoiceSuscrTransportNetwork,
       "dcvVoiceSuscrTransportNetworkAddress": dcvVoiceSuscrTransportNetworkAddress,
       "dcvVoiceSuscrTransportProfileId": dcvVoiceSuscrTransportProfileId,
       "dcvVoiceSuscrRemovedDigitNumber": dcvVoiceSuscrRemovedDigitNumber,
       "dcvVoiceSuscrInsPrefix": dcvVoiceSuscrInsPrefix,
       "dcvVoiceSuscrInsSuffix": dcvVoiceSuscrInsSuffix,
       "dcvVoiceSwTable": dcvVoiceSwTable,
       "dcvVoiceSwEntry": dcvVoiceSwEntry,
       "dcvVoiceSwOrderNumber": dcvVoiceSwOrderNumber,
       "dcvVoiceSwSuscriberNumber": dcvVoiceSwSuscriberNumber,
       "dcvVoiceSwStatus": dcvVoiceSwStatus,
       "dcvVoiceSwLogPortSetId": dcvVoiceSwLogPortSetId,
       "dcvVoiceSwRemovedDigitNumber": dcvVoiceSwRemovedDigitNumber,
       "dcvVoiceSwInsPrefix": dcvVoiceSwInsPrefix,
       "dcvVoiceSwInsSuffix": dcvVoiceSwInsSuffix,
       "dcvDialingReceptTable": dcvDialingReceptTable,
       "dcvDialingReceptEntry": dcvDialingReceptEntry,
       "dcvDialRxSuscriberNumber": dcvDialRxSuscriberNumber,
       "dcvDialRxStatus": dcvDialRxStatus,
       "dcvDialRxNumberLength": dcvDialRxNumberLength,
       "dcvDialRxEndOfDialingTimer": dcvDialRxEndOfDialingTimer,
       "dcvVoiceLogPort": dcvVoiceLogPort,
       "dcvVoiceLogicalPortTable": dcvVoiceLogicalPortTable,
       "dcvVoiceLogicalPortEntry": dcvVoiceLogicalPortEntry,
       "dcvVoiceLogPortId": dcvVoiceLogPortId,
       "dcvVoiceLogPortStatus": dcvVoiceLogPortStatus,
       "dcvVoiceLogPortType": dcvVoiceLogPortType,
       "dcvProfileTone": dcvProfileTone,
       "dcvToneGenTable": dcvToneGenTable,
       "dcvToneGenEntry": dcvToneGenEntry,
       "dcvToneGenProfileId": dcvToneGenProfileId,
       "dcvToneGenLevel": dcvToneGenLevel,
       "dcvToneTable": dcvToneTable,
       "dcvToneEntry": dcvToneEntry,
       "dcvToneProfileId": dcvToneProfileId,
       "dcvToneType": dcvToneType,
       "dcvToneEnable": dcvToneEnable,
       "dcvToneFreq1": dcvToneFreq1,
       "dcvToneDuration1": dcvToneDuration1,
       "dcvToneFreq2": dcvToneFreq2,
       "dcvToneDuration2": dcvToneDuration2,
       "dcvVoiceLogicalPortTSPCM": dcvVoiceLogicalPortTSPCM,
       "dcvTSPCMPerm": dcvTSPCMPerm,
       "dcvTSPCMPermTable": dcvTSPCMPermTable,
       "dcvTSPCMPermEntry": dcvTSPCMPermEntry,
       "dcvTSPCMPermLpId": dcvTSPCMPermLpId,
       "dcvTSPCMPermCommunicationMode": dcvTSPCMPermCommunicationMode,
       "dcvTSPCMPermRemoteNumber": dcvTSPCMPermRemoteNumber,
       "dcvTSPCMPermConfigId": dcvTSPCMPermConfigId,
       "dcvTSPCMPermChannIfId": dcvTSPCMPermChannIfId,
       "dcvTSPCMSw": dcvTSPCMSw,
       "dcvTSPCMSwTable": dcvTSPCMSwTable,
       "dcvTSPCMSwEntry": dcvTSPCMSwEntry,
       "dcvTSPCMSwLpId": dcvTSPCMSwLpId,
       "dcvTSPCMSwLogPortSetId": dcvTSPCMSwLogPortSetId,
       "dcvTSPCMSwCallType": dcvTSPCMSwCallType,
       "dcvTSPCMSwRemoteNumber": dcvTSPCMSwRemoteNumber,
       "dcvTSPCMSwConfigId": dcvTSPCMSwConfigId,
       "dcvTSPCMSwChannIfId": dcvTSPCMSwChannIfId,
       "dcvCASConfigTable": dcvCASConfigTable,
       "dcvCASConfigEntry": dcvCASConfigEntry,
       "dcvCASConfId": dcvCASConfId,
       "dcvCASConfSignallingTransport": dcvCASConfSignallingTransport,
       "dcvCASConfCallSignalling": dcvCASConfCallSignalling,
       "dcvCASConfDialingMode": dcvCASConfDialingMode,
       "dcvCASConfDialingTimeOut": dcvCASConfDialingTimeOut,
       "dcvCASConfSigChannelDiscTimeOut": dcvCASConfSigChannelDiscTimeOut,
       "dcvCASConfTimeBetweenSuccOutCall": dcvCASConfTimeBetweenSuccOutCall,
       "dcvCASConfLineInterfacePolarity": dcvCASConfLineInterfacePolarity,
       "dcvCASConfMinLineSeizureAckTime": dcvCASConfMinLineSeizureAckTime,
       "dcvCASConfMaxLineSeizureAckTime": dcvCASConfMaxLineSeizureAckTime,
       "dcvCASConfLineSeizureAckTime": dcvCASConfLineSeizureAckTime,
       "dcvCASConfClearToIncCallTime": dcvCASConfClearToIncCallTime,
       "dcvCASConfSeizureAckPulseDuration": dcvCASConfSeizureAckPulseDuration,
       "dcvCASConfMinSeizureAckPulseDuration": dcvCASConfMinSeizureAckPulseDuration,
       "dcvCASConfDialingFormat": dcvCASConfDialingFormat,
       "dcvCASConfInterdigitTime": dcvCASConfInterdigitTime,
       "dcvCASConfPauseTime": dcvCASConfPauseTime,
       "dcvCASConfDtmfDigitTime": dcvCASConfDtmfDigitTime,
       "dcvCASConfDtmfDigitLevel": dcvCASConfDtmfDigitLevel,
       "dcvCASConfDelayBeforeDialing": dcvCASConfDelayBeforeDialing,
       "dcvCASConfDigitReceptionTimeOut": dcvCASConfDigitReceptionTimeOut,
       "dcvCASConfEndOfDialingTimer": dcvCASConfEndOfDialingTimer,
       "dcvCASConfToneProfile": dcvCASConfToneProfile,
       "dcvCASConfIdleState": dcvCASConfIdleState,
       "dcvCASConfAlarmState": dcvCASConfAlarmState,
       "dcvDigitalLines": dcvDigitalLines,
       "dcvIfPCM": dcvIfPCM,
       "dcvIfPCMPhysTable": dcvIfPCMPhysTable,
       "dcvIfPCMPhysEntry": dcvIfPCMPhysEntry,
       "dcvIfPCMPhysIfId": dcvIfPCMPhysIfId,
       "dcvIfPCMPhysTypeId": dcvIfPCMPhysTypeId,
       "dcvIfPCMPhysPhysicalPort": dcvIfPCMPhysPhysicalPort,
       "dcvIfPCMChannelTable": dcvIfPCMChannelTable,
       "dcvIfPCMChannelEntry": dcvIfPCMChannelEntry,
       "dcvIfPCMChannelIfId": dcvIfPCMChannelIfId,
       "dcvIfPCMChannelStatus": dcvIfPCMChannelStatus,
       "dcvIfPCMChannelVoiceProfId": dcvIfPCMChannelVoiceProfId,
       "dcvIfPCMChannelPhysIf": dcvIfPCMChannelPhysIf,
       "dcvVoiceProfileTable": dcvVoiceProfileTable,
       "dcvVoiceProfileEntry": dcvVoiceProfileEntry,
       "dcvVoiceProfId": dcvVoiceProfId,
       "dcvVoiceProfTransmitLevel": dcvVoiceProfTransmitLevel,
       "dcvVoiceProfReceiveLevel": dcvVoiceProfReceiveLevel,
       "dcvVoiceProfSilenceDetection": dcvVoiceProfSilenceDetection,
       "dcvVoiceProfSilenceDetectionLevel": dcvVoiceProfSilenceDetectionLevel,
       "dcvVoiceProfEchoCancellation": dcvVoiceProfEchoCancellation,
       "dcvVoiceProfEchoCancellationLength": dcvVoiceProfEchoCancellationLength,
       "dcvVoiceProfNoiseFramesPeriodicity": dcvVoiceProfNoiseFramesPeriodicity,
       "dcvVoiceProfLoopActivation": dcvVoiceProfLoopActivation,
       "dcvVoiceProfFaxActivation": dcvVoiceProfFaxActivation,
       "dcvVoiceProfMaximumFaxSpeed": dcvVoiceProfMaximumFaxSpeed,
       "dcvVoiceProfCESMode": dcvVoiceProfCESMode,
       "dcvVoiceProfCESModeAverageDelay": dcvVoiceProfCESModeAverageDelay,
       "dcvVoicePhysicalPortTable": dcvVoicePhysicalPortTable,
       "dcvVoicePhysicalPortEntry": dcvVoicePhysicalPortEntry,
       "dcvVoicePhysPortId": dcvVoicePhysPortId,
       "dcvVoicePhysPortConnector": dcvVoicePhysPortConnector,
       "mmxSoftware": mmxSoftware,
       "compacProxySoftware": compacProxySoftware,
       "cpcManagement": cpcManagement,
       "cmEvents": cmEvents,
       "cmeEventSynchronize": cmeEventSynchronize,
       "cmeClearVirtualCircuitInfo": cmeClearVirtualCircuitInfo,
       "cmeClearX121Address": cmeClearX121Address,
       "cmeClearCallUserData": cmeClearCallUserData,
       "cmeClearEvent": cmeClearEvent,
       "cmeClearCause": cmeClearCause,
       "cmeClearDiag": cmeClearDiag,
       "cmeClearTimeStamp": cmeClearTimeStamp,
       "cpcDiagnostic": cpcDiagnostic,
       "cdPhysicalPorts": cdPhysicalPorts,
       "cdpIdentification": cdpIdentification,
       "cdpIdentPhysPortType": cdpIdentPhysPortType,
       "cpcFileTransfer": cpcFileTransfer,
       "cfFileTransferService": cfFileTransferService,
       "cfConfigurationFileToDownload": cfConfigurationFileToDownload,
       "cfConfigurationFileToUpload": cfConfigurationFileToUpload,
       "cfSoftwareFileToDownload": cfSoftwareFileToDownload,
       "cfStartUpChoiceAfterReset": cfStartUpChoiceAfterReset,
       "cfModuleToIdentify": cfModuleToIdentify,
       "cfZoneToIdentify": cfZoneToIdentify,
       "cfHardwareIdentificationPassword": cfHardwareIdentificationPassword,
       "cfSoftwareListPassword": cfSoftwareListPassword,
       "cfServiceReport": cfServiceReport,
       "cfVersion": cfVersion,
       "cfRevision": cfRevision,
       "cfEdition": cfEdition,
       "cfCpuBoardType": cfCpuBoardType,
       "cfProductType": cfProductType,
       "cfConfigurationVersion": cfConfigurationVersion,
       "cfConfigurationRelease": cfConfigurationRelease,
       "cfConfigurationEdition": cfConfigurationEdition,
       "cfConfigurationDate": cfConfigurationDate,
       "cfUserField": cfUserField,
       "cf12NcNumber35": cf12NcNumber35,
       "cf12NcNumber75": cf12NcNumber75,
       "cfField1": cfField1,
       "cfField2": cfField2,
       "cfField3": cfField3,
       "cfField4": cfField4,
       "cfFlashSize": cfFlashSize,
       "cfRamSize": cfRamSize,
       "cfEepromSize": cfEepromSize,
       "cfNumberOfLines": cfNumberOfLines,
       "cfTransputerPresence": cfTransputerPresence,
       "cfMpbBoardReference255": cfMpbBoardReference255,
       "cfMpbBoardSerialNumber": cfMpbBoardSerialNumber,
       "cfMtbBoardReference255": cfMtbBoardReference255,
       "cfMtbBoardSerialNumber": cfMtbBoardSerialNumber,
       "cfReleaseDate": cfReleaseDate,
       "cfFactoryReturnDate1": cfFactoryReturnDate1,
       "cfFactoryReturnDate2": cfFactoryReturnDate2,
       "cfFactoryReturnDate3": cfFactoryReturnDate3,
       "cfFactoryReturnDate4": cfFactoryReturnDate4,
       "cfFactoryReturnDate5": cfFactoryReturnDate5,
       "cfSoftwareList": cfSoftwareList}
)

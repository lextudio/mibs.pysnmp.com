# SNMP MIB module (RAD-MIB) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file:///Users/lextm/pysnmp.com/mibs.pysnmp.com/asn1/RAD-MIB
# Produced by pysmi-1.5.4 at Mon Oct 14 20:33:29 2024
# On host MacBook-Pro.local platform Darwin version 24.0.0 by user lextm
# Using Python version 3.12.0 (main, Nov 14 2023, 23:52:11) [Clang 15.0.0 (clang-1500.0.40.1)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint,
 ConstraintsUnion) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint",
    "ConstraintsUnion")

# Import SMI symbols from the MIBs this MIB depends on

(atmTrafficDescrParamEntry,
 atmVcCrossConnectEntry,
 atmVclVci,
 atmVclVpi,
 atmVpCrossConnectEntry,
 atmVplVpi) = mibBuilder.importSymbols(
    "ATM-MIB",
    "atmTrafficDescrParamEntry",
    "atmVcCrossConnectEntry",
    "atmVclVci",
    "atmVclVpi",
    "atmVpCrossConnectEntry",
    "atmVplVpi")

(BridgeId,
 Timeout,
 dot1dBasePortEntry) = mibBuilder.importSymbols(
    "BRIDGE-MIB",
    "BridgeId",
    "Timeout",
    "dot1dBasePortEntry")

(schedEntry,) = mibBuilder.importSymbols(
    "DISMAN-SCHEDULE-MIB",
    "schedEntry")

(dot3OamEntry,
 dot3OamOperStatus) = mibBuilder.importSymbols(
    "DOT3-OAM-MIB",
    "dot3OamEntry",
    "dot3OamOperStatus")

(dsx1CurrentIndex,
 dsx1IntervalIndex,
 dsx1IntervalNumber,
 dsx1LineIndex,
 dsx1LineStatus,
 dsx1LineStatusLastChange,
 dsx1LoopbackStatus,
 dsx1TotalIndex) = mibBuilder.importSymbols(
    "DS1-MIB",
    "dsx1CurrentIndex",
    "dsx1IntervalIndex",
    "dsx1IntervalNumber",
    "dsx1LineIndex",
    "dsx1LineStatus",
    "dsx1LineStatusLastChange",
    "dsx1LoopbackStatus",
    "dsx1TotalIndex")

(dsx3ConfigEntry,
 dsx3LineStatus,
 dsx3LoopbackStatus) = mibBuilder.importSymbols(
    "DS3-MIB",
    "dsx3ConfigEntry",
    "dsx3LineStatus",
    "dsx3LoopbackStatus")

(IANAifType,) = mibBuilder.importSymbols(
    "IANAifType-MIB",
    "IANAifType")

(dot1agCfmMaIndex,
 dot1agCfmMdIndex,
 dot1agCfmMepDbRMepIdentifier,
 dot1agCfmMepIdentifier) = mibBuilder.importSymbols(
    "IEEE8021-CFM-MIB",
    "dot1agCfmMaIndex",
    "dot1agCfmMdIndex",
    "dot1agCfmMepDbRMepIdentifier",
    "dot1agCfmMepIdentifier")

(InterfaceIndex,
 ifAlias,
 ifDescr,
 ifIndex) = mibBuilder.importSymbols(
    "IF-MIB",
    "InterfaceIndex",
    "ifAlias",
    "ifDescr",
    "ifIndex")

(InetAddress,
 InetAddressType) = mibBuilder.importSymbols(
    "INET-ADDRESS-MIB",
    "InetAddress",
    "InetAddressType")

(LldpPortIdSubtype,) = mibBuilder.importSymbols(
    "LLDP-MIB",
    "LldpPortIdSubtype")

(PerfCurrentCount,
 PerfIntervalCount,
 PerfTotalCount) = mibBuilder.importSymbols(
    "PerfHist-TC-MIB",
    "PerfCurrentCount",
    "PerfIntervalCount",
    "PerfTotalCount")

(PortList,
 VlanId,
 dot1qVlanStaticEntry) = mibBuilder.importSymbols(
    "Q-BRIDGE-MIB",
    "PortList",
    "VlanId",
    "dot1qVlanStaticEntry")

(SnmpAdminString,) = mibBuilder.importSymbols(
    "SNMP-FRAMEWORK-MIB",
    "SnmpAdminString")

(ModuleCompliance,
 NotificationGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup")

(Bits,
 Counter32,
 Counter64,
 Gauge32,
 Integer32,
 IpAddress,
 ModuleIdentity,
 MibIdentifier,
 NotificationType,
 ObjectIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 TimeTicks,
 Unsigned32,
 enterprises,
 iso) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Bits",
    "Counter32",
    "Counter64",
    "Gauge32",
    "Integer32",
    "IpAddress",
    "ModuleIdentity",
    "MibIdentifier",
    "NotificationType",
    "ObjectIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "TimeTicks",
    "Unsigned32",
    "enterprises",
    "iso")

(DateAndTime,
 DisplayString,
 MacAddress,
 RowPointer,
 RowStatus,
 TextualConvention,
 TimeStamp,
 TruthValue) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "DateAndTime",
    "DisplayString",
    "MacAddress",
    "RowPointer",
    "RowStatus",
    "TextualConvention",
    "TimeStamp",
    "TruthValue")


# MODULE-IDENTITY


# Types definitions



class SysIfEntityType(Integer32):
    """Custom type SysIfEntityType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              6,
              37,
              62,
              142,
              200,
              209)
        )
    )
    namedValues = NamedValues(
        *(("atm", 37),
          ("bridge", 209),
          ("ethernetLan", 6),
          ("fastEther", 62),
          ("ipForward", 142),
          ("other", 1),
          ("teLink", 200))
    )





class GenAddress(OctetString):
    """Custom type GenAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(12, 12),
    )




# TEXTUAL-CONVENTIONS



class RadTransportAddressType(Integer32, TextualConvention):
    status = "current"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("efmOam", 1),
          ("unknown", 0))
    )



class RadTransportAddressEfmOam(OctetString, TextualConvention):
    status = "current"
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )



class Dscp(Integer32, TextualConvention):
    status = "current"
    displayHint = "d"
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )



# MIB Managed Objects in the order of their OIDs

_Rad_ObjectIdentity = ObjectIdentity
rad = _Rad_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164)
)
_RadTokenRing_ObjectIdentity = ObjectIdentity
radTokenRing = _RadTokenRing_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 1)
)
_RadFddi_ObjectIdentity = ObjectIdentity
radFddi = _RadFddi_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 2)
)
_RadWan_ObjectIdentity = ObjectIdentity
radWan = _RadWan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3)
)
_WanGen_ObjectIdentity = ObjectIdentity
wanGen = _WanGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1)
)
_ChasWanGen_ObjectIdentity = ObjectIdentity
chasWanGen = _ChasWanGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 1)
)


class _ChasVersion_Type(DisplayString):
    """Custom type chasVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_ChasVersion_Type.__name__ = "DisplayString"
_ChasVersion_Object = MibScalar
chasVersion = _ChasVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 1, 1),
    _ChasVersion_Type()
)
chasVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chasVersion.setStatus("current")
_ChasTotalNoOfSlt_Type = Integer32
_ChasTotalNoOfSlt_Object = MibScalar
chasTotalNoOfSlt = _ChasTotalNoOfSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 1, 2),
    _ChasTotalNoOfSlt_Type()
)
chasTotalNoOfSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chasTotalNoOfSlt.setStatus("current")
_ChasTotalNoOfIoSlt_Type = Integer32
_ChasTotalNoOfIoSlt_Object = MibScalar
chasTotalNoOfIoSlt = _ChasTotalNoOfIoSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 1, 3),
    _ChasTotalNoOfIoSlt_Type()
)
chasTotalNoOfIoSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chasTotalNoOfIoSlt.setStatus("current")
_ChasTotalNoOfPsSlt_Type = Integer32
_ChasTotalNoOfPsSlt_Object = MibScalar
chasTotalNoOfPsSlt = _ChasTotalNoOfPsSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 1, 4),
    _ChasTotalNoOfPsSlt_Type()
)
chasTotalNoOfPsSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chasTotalNoOfPsSlt.setStatus("current")
_ChasTotalNoOfClSlt_Type = Integer32
_ChasTotalNoOfClSlt_Object = MibScalar
chasTotalNoOfClSlt = _ChasTotalNoOfClSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 1, 5),
    _ChasTotalNoOfClSlt_Type()
)
chasTotalNoOfClSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chasTotalNoOfClSlt.setStatus("current")
_AgnWanGen_ObjectIdentity = ObjectIdentity
agnWanGen = _AgnWanGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2)
)
_StatAgnGen_ObjectIdentity = ObjectIdentity
statAgnGen = _StatAgnGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1)
)


class _AgnSDateFormat_Type(Integer32):
    """Custom type agnSDateFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ddMMYYYY", 1),
          ("mmDDYYYY", 2),
          ("yyyyDDMM", 3),
          ("yyyyMMDD", 4))
    )


_AgnSDateFormat_Type.__name__ = "Integer32"
_AgnSDateFormat_Object = MibScalar
agnSDateFormat = _AgnSDateFormat_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 1),
    _AgnSDateFormat_Type()
)
agnSDateFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnSDateFormat.setStatus("current")


class _AgnSDateCmd_Type(DisplayString):
    """Custom type agnSDateCmd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgnSDateCmd_Type.__name__ = "DisplayString"
_AgnSDateCmd_Object = MibScalar
agnSDateCmd = _AgnSDateCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 2),
    _AgnSDateCmd_Type()
)
agnSDateCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnSDateCmd.setStatus("current")


class _AgnSTimeCmd_Type(DisplayString):
    """Custom type agnSTimeCmd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgnSTimeCmd_Type.__name__ = "DisplayString"
_AgnSTimeCmd_Object = MibScalar
agnSTimeCmd = _AgnSTimeCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 3),
    _AgnSTimeCmd_Type()
)
agnSTimeCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnSTimeCmd.setStatus("current")
_AgnSActiveCnfg_Type = Integer32
_AgnSActiveCnfg_Object = MibScalar
agnSActiveCnfg = _AgnSActiveCnfg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 4),
    _AgnSActiveCnfg_Type()
)
agnSActiveCnfg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSActiveCnfg.setStatus("current")
_AgnSEditCnfg_Type = Integer32
_AgnSEditCnfg_Object = MibScalar
agnSEditCnfg = _AgnSEditCnfg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 5),
    _AgnSEditCnfg_Type()
)
agnSEditCnfg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSEditCnfg.setStatus("current")


class _AgnSLastCnfgFlipTime_Type(DisplayString):
    """Custom type agnSLastCnfgFlipTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgnSLastCnfgFlipTime_Type.__name__ = "DisplayString"
_AgnSLastCnfgFlipTime_Object = MibScalar
agnSLastCnfgFlipTime = _AgnSLastCnfgFlipTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 6),
    _AgnSLastCnfgFlipTime_Type()
)
agnSLastCnfgFlipTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSLastCnfgFlipTime.setStatus("current")


class _AgnSLastCnfgFlipCause_Type(DisplayString):
    """Custom type agnSLastCnfgFlipCause based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgnSLastCnfgFlipCause_Type.__name__ = "DisplayString"
_AgnSLastCnfgFlipCause_Object = MibScalar
agnSLastCnfgFlipCause = _AgnSLastCnfgFlipCause_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 7),
    _AgnSLastCnfgFlipCause_Type()
)
agnSLastCnfgFlipCause.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSLastCnfgFlipCause.setStatus("current")


class _AgnSEditBy_Type(Integer32):
    """Custom type agnSEditBy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("lcd", 7),
          ("none", 1),
          ("snmp", 2),
          ("terCon1", 3),
          ("terCon2", 4),
          ("terInbandCon1", 5),
          ("terInbandCon2", 6))
    )


_AgnSEditBy_Type.__name__ = "Integer32"
_AgnSEditBy_Object = MibScalar
agnSEditBy = _AgnSEditBy_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 8),
    _AgnSEditBy_Type()
)
agnSEditBy.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSEditBy.setStatus("current")


class _AgnSClkSrc_Type(Integer32):
    """Custom type agnSClkSrc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fallback", 2),
          ("internal", 3),
          ("master", 1))
    )


_AgnSClkSrc_Type.__name__ = "Integer32"
_AgnSClkSrc_Object = MibScalar
agnSClkSrc = _AgnSClkSrc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 9),
    _AgnSClkSrc_Type()
)
agnSClkSrc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSClkSrc.setStatus("current")


class _AgnSAlrStatus_Type(Integer32):
    """Custom type agnSAlrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_AgnSAlrStatus_Type.__name__ = "Integer32"
_AgnSAlrStatus_Object = MibScalar
agnSAlrStatus = _AgnSAlrStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 10),
    _AgnSAlrStatus_Type()
)
agnSAlrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSAlrStatus.setStatus("current")


class _AgnSAlrStatusAll_Type(Integer32):
    """Custom type agnSAlrStatusAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_AgnSAlrStatusAll_Type.__name__ = "Integer32"
_AgnSAlrStatusAll_Object = MibScalar
agnSAlrStatusAll = _AgnSAlrStatusAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 11),
    _AgnSAlrStatusAll_Type()
)
agnSAlrStatusAll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSAlrStatusAll.setStatus("current")


class _AgnSMaskedAlrStat_Type(Integer32):
    """Custom type agnSMaskedAlrStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_AgnSMaskedAlrStat_Type.__name__ = "Integer32"
_AgnSMaskedAlrStat_Object = MibScalar
agnSMaskedAlrStat = _AgnSMaskedAlrStat_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 12),
    _AgnSMaskedAlrStat_Type()
)
agnSMaskedAlrStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSMaskedAlrStat.setStatus("current")


class _AgnSMaskedAlrStatAll_Type(Integer32):
    """Custom type agnSMaskedAlrStatAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_AgnSMaskedAlrStatAll_Type.__name__ = "Integer32"
_AgnSMaskedAlrStatAll_Object = MibScalar
agnSMaskedAlrStatAll = _AgnSMaskedAlrStatAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 13),
    _AgnSMaskedAlrStatAll_Type()
)
agnSMaskedAlrStatAll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSMaskedAlrStatAll.setStatus("current")


class _AgnSTstStatAll_Type(Integer32):
    """Custom type agnSTstStatAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnSTstStatAll_Type.__name__ = "Integer32"
_AgnSTstStatAll_Object = MibScalar
agnSTstStatAll = _AgnSTstStatAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 14),
    _AgnSTstStatAll_Type()
)
agnSTstStatAll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSTstStatAll.setStatus("current")
_AgnSAlrTable_Object = MibTable
agnSAlrTable = _AgnSAlrTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15)
)
if mibBuilder.loadTexts:
    agnSAlrTable.setStatus("current")
_AgnSAlrEntry_Object = MibTableRow
agnSAlrEntry = _AgnSAlrEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1)
)
agnSAlrEntry.setIndexNames(
    (0, "RAD-MIB", "agnSAlrIdx"),
)
if mibBuilder.loadTexts:
    agnSAlrEntry.setStatus("current")
_AgnSAlrIdx_Type = Integer32
_AgnSAlrIdx_Object = MibTableColumn
agnSAlrIdx = _AgnSAlrIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 1),
    _AgnSAlrIdx_Type()
)
agnSAlrIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSAlrIdx.setStatus("current")


class _AgnSAlrCodeDescription_Type(DisplayString):
    """Custom type agnSAlrCodeDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgnSAlrCodeDescription_Type.__name__ = "DisplayString"
_AgnSAlrCodeDescription_Object = MibTableColumn
agnSAlrCodeDescription = _AgnSAlrCodeDescription_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 2),
    _AgnSAlrCodeDescription_Type()
)
agnSAlrCodeDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSAlrCodeDescription.setStatus("current")
_AgnSAlrCode_Type = Integer32
_AgnSAlrCode_Object = MibTableColumn
agnSAlrCode = _AgnSAlrCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 3),
    _AgnSAlrCode_Type()
)
agnSAlrCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSAlrCode.setStatus("current")


class _AgnSAlrSeverity_Type(Integer32):
    """Custom type agnSAlrSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("warning", 6))
    )


_AgnSAlrSeverity_Type.__name__ = "Integer32"
_AgnSAlrSeverity_Object = MibTableColumn
agnSAlrSeverity = _AgnSAlrSeverity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 4),
    _AgnSAlrSeverity_Type()
)
agnSAlrSeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSAlrSeverity.setStatus("current")


class _AgnSAlrState_Type(Integer32):
    """Custom type agnSAlrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnSAlrState_Type.__name__ = "Integer32"
_AgnSAlrState_Object = MibTableColumn
agnSAlrState = _AgnSAlrState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 5),
    _AgnSAlrState_Type()
)
agnSAlrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSAlrState.setStatus("current")
_AgnSAlrCounter_Type = Integer32
_AgnSAlrCounter_Object = MibTableColumn
agnSAlrCounter = _AgnSAlrCounter_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 6),
    _AgnSAlrCounter_Type()
)
agnSAlrCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSAlrCounter.setStatus("current")


class _AgnSAlrMask_Type(Integer32):
    """Custom type agnSAlrMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnSAlrMask_Type.__name__ = "Integer32"
_AgnSAlrMask_Object = MibTableColumn
agnSAlrMask = _AgnSAlrMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 7),
    _AgnSAlrMask_Type()
)
agnSAlrMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSAlrMask.setStatus("current")


class _AgnSAlrInvert_Type(Integer32):
    """Custom type agnSAlrInvert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnSAlrInvert_Type.__name__ = "Integer32"
_AgnSAlrInvert_Object = MibTableColumn
agnSAlrInvert = _AgnSAlrInvert_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 8),
    _AgnSAlrInvert_Type()
)
agnSAlrInvert.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSAlrInvert.setStatus("current")


class _AgnSClearAlrCmd_Type(Integer32):
    """Custom type agnSClearAlrCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnSClearAlrCmd_Type.__name__ = "Integer32"
_AgnSClearAlrCmd_Object = MibScalar
agnSClearAlrCmd = _AgnSClearAlrCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 16),
    _AgnSClearAlrCmd_Type()
)
agnSClearAlrCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnSClearAlrCmd.setStatus("current")


class _AgnSClearAllAlrCmd_Type(Integer32):
    """Custom type agnSClearAllAlrCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnSClearAllAlrCmd_Type.__name__ = "Integer32"
_AgnSClearAllAlrCmd_Object = MibScalar
agnSClearAllAlrCmd = _AgnSClearAllAlrCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 17),
    _AgnSClearAllAlrCmd_Type()
)
agnSClearAllAlrCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnSClearAllAlrCmd.setStatus("current")


class _AgnSSanityCheckStatus_Type(Integer32):
    """Custom type agnSSanityCheckStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("fail", 2),
          ("ok", 4),
          ("unknown", 1),
          ("warning", 3))
    )


_AgnSSanityCheckStatus_Type.__name__ = "Integer32"
_AgnSSanityCheckStatus_Object = MibScalar
agnSSanityCheckStatus = _AgnSSanityCheckStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 18),
    _AgnSSanityCheckStatus_Type()
)
agnSSanityCheckStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSSanityCheckStatus.setStatus("current")
_AgnSNoOfSanityCheckErr_Type = Integer32
_AgnSNoOfSanityCheckErr_Object = MibScalar
agnSNoOfSanityCheckErr = _AgnSNoOfSanityCheckErr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 19),
    _AgnSNoOfSanityCheckErr_Type()
)
agnSNoOfSanityCheckErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSNoOfSanityCheckErr.setStatus("current")
_AgnSErrListTable_Object = MibTable
agnSErrListTable = _AgnSErrListTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 20)
)
if mibBuilder.loadTexts:
    agnSErrListTable.setStatus("current")
_AgnSErrListEntry_Object = MibTableRow
agnSErrListEntry = _AgnSErrListEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 20, 1)
)
agnSErrListEntry.setIndexNames(
    (0, "RAD-MIB", "agnSErrIdx"),
)
if mibBuilder.loadTexts:
    agnSErrListEntry.setStatus("current")
_AgnSErrIdx_Type = Integer32
_AgnSErrIdx_Object = MibTableColumn
agnSErrIdx = _AgnSErrIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 20, 1, 1),
    _AgnSErrIdx_Type()
)
agnSErrIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSErrIdx.setStatus("current")


class _AgnSErrDescription_Type(DisplayString):
    """Custom type agnSErrDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgnSErrDescription_Type.__name__ = "DisplayString"
_AgnSErrDescription_Object = MibTableColumn
agnSErrDescription = _AgnSErrDescription_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 20, 1, 2),
    _AgnSErrDescription_Type()
)
agnSErrDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSErrDescription.setStatus("current")
_AgnSMaxNoOfCnfg_Type = Integer32
_AgnSMaxNoOfCnfg_Object = MibScalar
agnSMaxNoOfCnfg = _AgnSMaxNoOfCnfg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 21),
    _AgnSMaxNoOfCnfg_Type()
)
agnSMaxNoOfCnfg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSMaxNoOfCnfg.setStatus("current")
_AgnSCnfgTable_Object = MibTable
agnSCnfgTable = _AgnSCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 22)
)
if mibBuilder.loadTexts:
    agnSCnfgTable.setStatus("current")
_AgnSCnfgEntry_Object = MibTableRow
agnSCnfgEntry = _AgnSCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 22, 1)
)
agnSCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "agnSEntryIdx"),
)
if mibBuilder.loadTexts:
    agnSCnfgEntry.setStatus("current")
_AgnSEntryIdx_Type = Integer32
_AgnSEntryIdx_Object = MibTableColumn
agnSEntryIdx = _AgnSEntryIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 22, 1, 1),
    _AgnSEntryIdx_Type()
)
agnSEntryIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSEntryIdx.setStatus("current")


class _AgnSEntryIsValid_Type(Integer32):
    """Custom type agnSEntryIsValid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_AgnSEntryIsValid_Type.__name__ = "Integer32"
_AgnSEntryIsValid_Object = MibTableColumn
agnSEntryIsValid = _AgnSEntryIsValid_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 22, 1, 2),
    _AgnSEntryIsValid_Type()
)
agnSEntryIsValid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSEntryIsValid.setStatus("current")
_CnfgAgnGen_ObjectIdentity = ObjectIdentity
cnfgAgnGen = _CnfgAgnGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2)
)


class _AgnCSanityCheckCmd_Type(Integer32):
    """Custom type agnCSanityCheckCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnCSanityCheckCmd_Type.__name__ = "Integer32"
_AgnCSanityCheckCmd_Object = MibScalar
agnCSanityCheckCmd = _AgnCSanityCheckCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 1),
    _AgnCSanityCheckCmd_Type()
)
agnCSanityCheckCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCSanityCheckCmd.setStatus("current")


class _AgnCSaveCnfgIdxCmd_Type(Integer32):
    """Custom type agnCSaveCnfgIdxCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_AgnCSaveCnfgIdxCmd_Type.__name__ = "Integer32"
_AgnCSaveCnfgIdxCmd_Object = MibScalar
agnCSaveCnfgIdxCmd = _AgnCSaveCnfgIdxCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 2),
    _AgnCSaveCnfgIdxCmd_Type()
)
agnCSaveCnfgIdxCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCSaveCnfgIdxCmd.setStatus("current")


class _AgnCLoadCnfgIdxCmd_Type(Integer32):
    """Custom type agnCLoadCnfgIdxCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_AgnCLoadCnfgIdxCmd_Type.__name__ = "Integer32"
_AgnCLoadCnfgIdxCmd_Object = MibScalar
agnCLoadCnfgIdxCmd = _AgnCLoadCnfgIdxCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 3),
    _AgnCLoadCnfgIdxCmd_Type()
)
agnCLoadCnfgIdxCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCLoadCnfgIdxCmd.setStatus("current")
_AgnCClkSrcTable_Object = MibTable
agnCClkSrcTable = _AgnCClkSrcTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 4)
)
if mibBuilder.loadTexts:
    agnCClkSrcTable.setStatus("current")
_AgnCClkSrcEntry_Object = MibTableRow
agnCClkSrcEntry = _AgnCClkSrcEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 4, 1)
)
agnCClkSrcEntry.setIndexNames(
    (0, "RAD-MIB", "agnCClkCnfgIdx"),
    (0, "RAD-MIB", "agnCClkSrcIdx"),
)
if mibBuilder.loadTexts:
    agnCClkSrcEntry.setStatus("current")


class _AgnCClkCnfgIdx_Type(Integer32):
    """Custom type agnCClkCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_AgnCClkCnfgIdx_Type.__name__ = "Integer32"
_AgnCClkCnfgIdx_Object = MibTableColumn
agnCClkCnfgIdx = _AgnCClkCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 4, 1, 1),
    _AgnCClkCnfgIdx_Type()
)
agnCClkCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCClkCnfgIdx.setStatus("current")


class _AgnCClkSrcIdx_Type(Integer32):
    """Custom type agnCClkSrcIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_AgnCClkSrcIdx_Type.__name__ = "Integer32"
_AgnCClkSrcIdx_Object = MibTableColumn
agnCClkSrcIdx = _AgnCClkSrcIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 4, 1, 2),
    _AgnCClkSrcIdx_Type()
)
agnCClkSrcIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCClkSrcIdx.setStatus("current")


class _AgnCClkSrcMode_Type(Integer32):
    """Custom type agnCClkSrcMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("adaptive", 3),
          ("internal", 1),
          ("rxClk", 2))
    )


_AgnCClkSrcMode_Type.__name__ = "Integer32"
_AgnCClkSrcMode_Object = MibTableColumn
agnCClkSrcMode = _AgnCClkSrcMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 4, 1, 3),
    _AgnCClkSrcMode_Type()
)
agnCClkSrcMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCClkSrcMode.setStatus("current")


class _AgnCClkSrcSlt_Type(Integer32):
    """Custom type agnCClkSrcSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 1))
    )


_AgnCClkSrcSlt_Type.__name__ = "Integer32"
_AgnCClkSrcSlt_Object = MibTableColumn
agnCClkSrcSlt = _AgnCClkSrcSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 4, 1, 4),
    _AgnCClkSrcSlt_Type()
)
agnCClkSrcSlt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCClkSrcSlt.setStatus("current")
_AgnCClkSrcPrt_Type = Integer32
_AgnCClkSrcPrt_Object = MibTableColumn
agnCClkSrcPrt = _AgnCClkSrcPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 4, 1, 5),
    _AgnCClkSrcPrt_Type()
)
agnCClkSrcPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCClkSrcPrt.setStatus("current")


class _AgnCDeleteCnfgIdxCmd_Type(Integer32):
    """Custom type agnCDeleteCnfgIdxCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_AgnCDeleteCnfgIdxCmd_Type.__name__ = "Integer32"
_AgnCDeleteCnfgIdxCmd_Object = MibScalar
agnCDeleteCnfgIdxCmd = _AgnCDeleteCnfgIdxCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 5),
    _AgnCDeleteCnfgIdxCmd_Type()
)
agnCDeleteCnfgIdxCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCDeleteCnfgIdxCmd.setStatus("current")


class _AgnCDefaultCnfgIdxCmd_Type(Integer32):
    """Custom type agnCDefaultCnfgIdxCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )


_AgnCDefaultCnfgIdxCmd_Type.__name__ = "Integer32"
_AgnCDefaultCnfgIdxCmd_Object = MibScalar
agnCDefaultCnfgIdxCmd = _AgnCDefaultCnfgIdxCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 6),
    _AgnCDefaultCnfgIdxCmd_Type()
)
agnCDefaultCnfgIdxCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCDefaultCnfgIdxCmd.setStatus("current")
_AgnCnfgDataTable_Object = MibTable
agnCnfgDataTable = _AgnCnfgDataTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 7)
)
if mibBuilder.loadTexts:
    agnCnfgDataTable.setStatus("current")
_AgnCnfgDataEntry_Object = MibTableRow
agnCnfgDataEntry = _AgnCnfgDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 7, 1)
)
agnCnfgDataEntry.setIndexNames(
    (0, "RAD-MIB", "agnCnfgIdx"),
)
if mibBuilder.loadTexts:
    agnCnfgDataEntry.setStatus("current")


class _AgnCnfgIdx_Type(Integer32):
    """Custom type agnCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_AgnCnfgIdx_Type.__name__ = "Integer32"
_AgnCnfgIdx_Object = MibTableColumn
agnCnfgIdx = _AgnCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 7, 1, 1),
    _AgnCnfgIdx_Type()
)
agnCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCnfgIdx.setStatus("current")


class _AgnCnfgDesc_Type(DisplayString):
    """Custom type agnCnfgDesc based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 30),
    )


_AgnCnfgDesc_Type.__name__ = "DisplayString"
_AgnCnfgDesc_Object = MibTableColumn
agnCnfgDesc = _AgnCnfgDesc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 7, 1, 2),
    _AgnCnfgDesc_Type()
)
agnCnfgDesc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCnfgDesc.setStatus("current")


class _AgnCnfgUpdDate_Type(DisplayString):
    """Custom type agnCnfgUpdDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgnCnfgUpdDate_Type.__name__ = "DisplayString"
_AgnCnfgUpdDate_Object = MibTableColumn
agnCnfgUpdDate = _AgnCnfgUpdDate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 7, 1, 3),
    _AgnCnfgUpdDate_Type()
)
agnCnfgUpdDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCnfgUpdDate.setStatus("current")


class _AgnCnfgUpdTime_Type(DisplayString):
    """Custom type agnCnfgUpdTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgnCnfgUpdTime_Type.__name__ = "DisplayString"
_AgnCnfgUpdTime_Object = MibTableColumn
agnCnfgUpdTime = _AgnCnfgUpdTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 7, 1, 4),
    _AgnCnfgUpdTime_Type()
)
agnCnfgUpdTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCnfgUpdTime.setStatus("current")
_AgnCnfgUpdMnger_Type = IpAddress
_AgnCnfgUpdMnger_Object = MibTableColumn
agnCnfgUpdMnger = _AgnCnfgUpdMnger_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 7, 1, 5),
    _AgnCnfgUpdMnger_Type()
)
agnCnfgUpdMnger.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCnfgUpdMnger.setStatus("current")
_AgnCnfgAlarm_ObjectIdentity = ObjectIdentity
agnCnfgAlarm = _AgnCnfgAlarm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8)
)


class _AgnCnfgAlrFilterWindow_Type(Integer32):
    """Custom type agnCnfgAlrFilterWindow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_AgnCnfgAlrFilterWindow_Type.__name__ = "Integer32"
_AgnCnfgAlrFilterWindow_Object = MibScalar
agnCnfgAlrFilterWindow = _AgnCnfgAlrFilterWindow_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 1),
    _AgnCnfgAlrFilterWindow_Type()
)
agnCnfgAlrFilterWindow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCnfgAlrFilterWindow.setStatus("current")
_AgnCnfgAlrTable_Object = MibTable
agnCnfgAlrTable = _AgnCnfgAlrTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2)
)
if mibBuilder.loadTexts:
    agnCnfgAlrTable.setStatus("current")
_AgnCnfgAlrEntry_Object = MibTableRow
agnCnfgAlrEntry = _AgnCnfgAlrEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1)
)
agnCnfgAlrEntry.setIndexNames(
    (0, "RAD-MIB", "agnCnfgAlrCode"),
    (0, "RAD-MIB", "agnCnfgAlrSlot"),
    (0, "RAD-MIB", "agnCnfgAlrPort"),
)
if mibBuilder.loadTexts:
    agnCnfgAlrEntry.setStatus("current")
_AgnCnfgAlrCode_Type = Integer32
_AgnCnfgAlrCode_Object = MibTableColumn
agnCnfgAlrCode = _AgnCnfgAlrCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 1),
    _AgnCnfgAlrCode_Type()
)
agnCnfgAlrCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCnfgAlrCode.setStatus("current")


class _AgnCnfgAlrSlot_Type(Integer32):
    """Custom type agnCnfgAlrSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              200,
              255)
        )
    )
    namedValues = NamedValues(
        *(("all", 200),
          ("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255),
          ("psA", 1),
          ("psB", 2))
    )


_AgnCnfgAlrSlot_Type.__name__ = "Integer32"
_AgnCnfgAlrSlot_Object = MibTableColumn
agnCnfgAlrSlot = _AgnCnfgAlrSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 2),
    _AgnCnfgAlrSlot_Type()
)
agnCnfgAlrSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCnfgAlrSlot.setStatus("current")
_AgnCnfgAlrPort_Type = Integer32
_AgnCnfgAlrPort_Object = MibTableColumn
agnCnfgAlrPort = _AgnCnfgAlrPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 3),
    _AgnCnfgAlrPort_Type()
)
agnCnfgAlrPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCnfgAlrPort.setStatus("current")


class _AgnCnfgAlrMask_Type(Integer32):
    """Custom type agnCnfgAlrMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("noAndSave", 2),
          ("yes", 3),
          ("yesAndSave", 4))
    )


_AgnCnfgAlrMask_Type.__name__ = "Integer32"
_AgnCnfgAlrMask_Object = MibTableColumn
agnCnfgAlrMask = _AgnCnfgAlrMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 4),
    _AgnCnfgAlrMask_Type()
)
agnCnfgAlrMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCnfgAlrMask.setStatus("current")


class _AgnCnfgAlrInvert_Type(Integer32):
    """Custom type agnCnfgAlrInvert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_AgnCnfgAlrInvert_Type.__name__ = "Integer32"
_AgnCnfgAlrInvert_Object = MibTableColumn
agnCnfgAlrInvert = _AgnCnfgAlrInvert_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 5),
    _AgnCnfgAlrInvert_Type()
)
agnCnfgAlrInvert.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCnfgAlrInvert.setStatus("current")


class _AgnCnfgAlrFilter_Type(Integer32):
    """Custom type agnCnfgAlrFilter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_AgnCnfgAlrFilter_Type.__name__ = "Integer32"
_AgnCnfgAlrFilter_Object = MibTableColumn
agnCnfgAlrFilter = _AgnCnfgAlrFilter_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 6),
    _AgnCnfgAlrFilter_Type()
)
agnCnfgAlrFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCnfgAlrFilter.setStatus("current")
_AgnCnfgAlrFilterSet_Type = Integer32
_AgnCnfgAlrFilterSet_Object = MibTableColumn
agnCnfgAlrFilterSet = _AgnCnfgAlrFilterSet_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 7),
    _AgnCnfgAlrFilterSet_Type()
)
agnCnfgAlrFilterSet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCnfgAlrFilterSet.setStatus("current")
_AgnCnfgAlrFilterReset_Type = Integer32
_AgnCnfgAlrFilterReset_Object = MibTableColumn
agnCnfgAlrFilterReset = _AgnCnfgAlrFilterReset_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 8),
    _AgnCnfgAlrFilterReset_Type()
)
agnCnfgAlrFilterReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCnfgAlrFilterReset.setStatus("current")


class _AgnCnfgAlrSeverity_Type(Integer32):
    """Custom type agnCnfgAlrSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("warning", 6))
    )


_AgnCnfgAlrSeverity_Type.__name__ = "Integer32"
_AgnCnfgAlrSeverity_Object = MibTableColumn
agnCnfgAlrSeverity = _AgnCnfgAlrSeverity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 9),
    _AgnCnfgAlrSeverity_Type()
)
agnCnfgAlrSeverity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCnfgAlrSeverity.setStatus("current")
_AgnCnfgAlrReportTable_Object = MibTable
agnCnfgAlrReportTable = _AgnCnfgAlrReportTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 3)
)
if mibBuilder.loadTexts:
    agnCnfgAlrReportTable.setStatus("current")
_AgnCnfgAlrReportEntry_Object = MibTableRow
agnCnfgAlrReportEntry = _AgnCnfgAlrReportEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 3, 1)
)
agnCnfgAlrReportEntry.setIndexNames(
    (0, "RAD-MIB", "agnCnfgAlrReportType"),
)
if mibBuilder.loadTexts:
    agnCnfgAlrReportEntry.setStatus("current")


class _AgnCnfgAlrReportType_Type(Integer32):
    """Custom type agnCnfgAlrReportType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("alrLedBlink", 5),
          ("alrLedOn", 4),
          ("buffer", 2),
          ("relay", 3),
          ("relay2", 6),
          ("trap", 1))
    )


_AgnCnfgAlrReportType_Type.__name__ = "Integer32"
_AgnCnfgAlrReportType_Object = MibTableColumn
agnCnfgAlrReportType = _AgnCnfgAlrReportType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 3, 1, 1),
    _AgnCnfgAlrReportType_Type()
)
agnCnfgAlrReportType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCnfgAlrReportType.setStatus("current")


class _AgnCnfgAlrStartReportOn_Type(Integer32):
    """Custom type agnCnfgAlrStartReportOn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("noReport", 2),
          ("warning", 6))
    )


_AgnCnfgAlrStartReportOn_Type.__name__ = "Integer32"
_AgnCnfgAlrStartReportOn_Object = MibTableColumn
agnCnfgAlrStartReportOn = _AgnCnfgAlrStartReportOn_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 3, 1, 2),
    _AgnCnfgAlrStartReportOn_Type()
)
agnCnfgAlrStartReportOn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCnfgAlrStartReportOn.setStatus("current")


class _AgnCnfgAlrStartReportOff_Type(Integer32):
    """Custom type agnCnfgAlrStartReportOff based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("noReport", 2),
          ("notApplicable", 1),
          ("warning", 6))
    )


_AgnCnfgAlrStartReportOff_Type.__name__ = "Integer32"
_AgnCnfgAlrStartReportOff_Object = MibTableColumn
agnCnfgAlrStartReportOff = _AgnCnfgAlrStartReportOff_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 3, 1, 3),
    _AgnCnfgAlrStartReportOff_Type()
)
agnCnfgAlrStartReportOff.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCnfgAlrStartReportOff.setStatus("current")


class _AgnCOffsetCmd_Type(Integer32):
    """Custom type agnCOffsetCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("normal", 2),
          ("notApplicable", 1),
          ("u1", 3))
    )


_AgnCOffsetCmd_Type.__name__ = "Integer32"
_AgnCOffsetCmd_Object = MibScalar
agnCOffsetCmd = _AgnCOffsetCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 9),
    _AgnCOffsetCmd_Type()
)
agnCOffsetCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCOffsetCmd.setStatus("current")
_AgnCT1E1RingTable_Object = MibTable
agnCT1E1RingTable = _AgnCT1E1RingTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 10)
)
if mibBuilder.loadTexts:
    agnCT1E1RingTable.setStatus("current")
_AgnCT1E1RingEntry_Object = MibTableRow
agnCT1E1RingEntry = _AgnCT1E1RingEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 10, 1)
)
agnCT1E1RingEntry.setIndexNames(
    (0, "RAD-MIB", "agnCT1E1RingCnfgIdx"),
    (0, "RAD-MIB", "agnCT1E1RingPrimeSlot"),
    (0, "RAD-MIB", "agnCT1E1RingPrimePort"),
)
if mibBuilder.loadTexts:
    agnCT1E1RingEntry.setStatus("current")
_AgnCT1E1RingCnfgIdx_Type = Integer32
_AgnCT1E1RingCnfgIdx_Object = MibTableColumn
agnCT1E1RingCnfgIdx = _AgnCT1E1RingCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 10, 1, 1),
    _AgnCT1E1RingCnfgIdx_Type()
)
agnCT1E1RingCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCT1E1RingCnfgIdx.setStatus("current")


class _AgnCT1E1RingPrimeSlot_Type(Integer32):
    """Custom type agnCT1E1RingPrimeSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_AgnCT1E1RingPrimeSlot_Type.__name__ = "Integer32"
_AgnCT1E1RingPrimeSlot_Object = MibTableColumn
agnCT1E1RingPrimeSlot = _AgnCT1E1RingPrimeSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 10, 1, 2),
    _AgnCT1E1RingPrimeSlot_Type()
)
agnCT1E1RingPrimeSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCT1E1RingPrimeSlot.setStatus("current")
_AgnCT1E1RingPrimePort_Type = Integer32
_AgnCT1E1RingPrimePort_Object = MibTableColumn
agnCT1E1RingPrimePort = _AgnCT1E1RingPrimePort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 10, 1, 3),
    _AgnCT1E1RingPrimePort_Type()
)
agnCT1E1RingPrimePort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCT1E1RingPrimePort.setStatus("current")


class _AgnCT1E1RingSecSlot_Type(Integer32):
    """Custom type agnCT1E1RingSecSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_AgnCT1E1RingSecSlot_Type.__name__ = "Integer32"
_AgnCT1E1RingSecSlot_Object = MibTableColumn
agnCT1E1RingSecSlot = _AgnCT1E1RingSecSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 10, 1, 4),
    _AgnCT1E1RingSecSlot_Type()
)
agnCT1E1RingSecSlot.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnCT1E1RingSecSlot.setStatus("current")
_AgnCT1E1RingSecPort_Type = Integer32
_AgnCT1E1RingSecPort_Object = MibTableColumn
agnCT1E1RingSecPort = _AgnCT1E1RingSecPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 10, 1, 5),
    _AgnCT1E1RingSecPort_Type()
)
agnCT1E1RingSecPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnCT1E1RingSecPort.setStatus("current")
_AgnCT1E1RingRecTime_Type = Integer32
_AgnCT1E1RingRecTime_Object = MibTableColumn
agnCT1E1RingRecTime = _AgnCT1E1RingRecTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 10, 1, 6),
    _AgnCT1E1RingRecTime_Type()
)
agnCT1E1RingRecTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnCT1E1RingRecTime.setStatus("current")
_AgnCT1E1RingRowStatus_Type = RowStatus
_AgnCT1E1RingRowStatus_Object = MibTableColumn
agnCT1E1RingRowStatus = _AgnCT1E1RingRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 10, 1, 7),
    _AgnCT1E1RingRowStatus_Type()
)
agnCT1E1RingRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnCT1E1RingRowStatus.setStatus("current")
_AgnCT1E1RingWTR_Type = Unsigned32
_AgnCT1E1RingWTR_Object = MibTableColumn
agnCT1E1RingWTR = _AgnCT1E1RingWTR_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 10, 1, 8),
    _AgnCT1E1RingWTR_Type()
)
agnCT1E1RingWTR.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnCT1E1RingWTR.setStatus("current")


class _AgnCT1E1RingDualFailDetection_Type(Integer32):
    """Custom type agnCT1E1RingDualFailDetection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_AgnCT1E1RingDualFailDetection_Type.__name__ = "Integer32"
_AgnCT1E1RingDualFailDetection_Object = MibTableColumn
agnCT1E1RingDualFailDetection = _AgnCT1E1RingDualFailDetection_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 10, 1, 9),
    _AgnCT1E1RingDualFailDetection_Type()
)
agnCT1E1RingDualFailDetection.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnCT1E1RingDualFailDetection.setStatus("current")


class _AgnCMainExitPort_Type(Integer32):
    """Custom type agnCMainExitPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("e1T1SerialLink", 3),
          ("eth", 2),
          ("notApplicable", 1))
    )


_AgnCMainExitPort_Type.__name__ = "Integer32"
_AgnCMainExitPort_Object = MibScalar
agnCMainExitPort = _AgnCMainExitPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 11),
    _AgnCMainExitPort_Type()
)
agnCMainExitPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCMainExitPort.setStatus("current")
_AgnCBuMlTable_Object = MibTable
agnCBuMlTable = _AgnCBuMlTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 12)
)
if mibBuilder.loadTexts:
    agnCBuMlTable.setStatus("current")
_AgnCBuMlEntry_Object = MibTableRow
agnCBuMlEntry = _AgnCBuMlEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 12, 1)
)
agnCBuMlEntry.setIndexNames(
    (0, "RAD-MIB", "agnCBuMlCnfgIdx"),
    (0, "RAD-MIB", "agnCBuMlRole"),
)
if mibBuilder.loadTexts:
    agnCBuMlEntry.setStatus("current")
_AgnCBuMlCnfgIdx_Type = Integer32
_AgnCBuMlCnfgIdx_Object = MibTableColumn
agnCBuMlCnfgIdx = _AgnCBuMlCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 12, 1, 1),
    _AgnCBuMlCnfgIdx_Type()
)
agnCBuMlCnfgIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    agnCBuMlCnfgIdx.setStatus("current")


class _AgnCBuMlRole_Type(Integer32):
    """Custom type agnCBuMlRole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("fourth", 5),
          ("primary", 2),
          ("secondary", 3),
          ("third", 4))
    )


_AgnCBuMlRole_Type.__name__ = "Integer32"
_AgnCBuMlRole_Object = MibTableColumn
agnCBuMlRole = _AgnCBuMlRole_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 12, 1, 2),
    _AgnCBuMlRole_Type()
)
agnCBuMlRole.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    agnCBuMlRole.setStatus("current")


class _AgnCBuMlType_Type(Integer32):
    """Custom type agnCBuMlType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("e1T1a", 3),
          ("e1T1b", 4),
          ("eth", 5),
          ("none", 2))
    )


_AgnCBuMlType_Type.__name__ = "Integer32"
_AgnCBuMlType_Object = MibTableColumn
agnCBuMlType = _AgnCBuMlType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 12, 1, 3),
    _AgnCBuMlType_Type()
)
agnCBuMlType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCBuMlType.setStatus("current")
_AgnCBuMlDefaultGateway_Type = IpAddress
_AgnCBuMlDefaultGateway_Object = MibTableColumn
agnCBuMlDefaultGateway = _AgnCBuMlDefaultGateway_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 12, 1, 4),
    _AgnCBuMlDefaultGateway_Type()
)
agnCBuMlDefaultGateway.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCBuMlDefaultGateway.setStatus("current")
_AgnCBuMlSubnetMask_Type = IpAddress
_AgnCBuMlSubnetMask_Object = MibTableColumn
agnCBuMlSubnetMask = _AgnCBuMlSubnetMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 12, 1, 5),
    _AgnCBuMlSubnetMask_Type()
)
agnCBuMlSubnetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCBuMlSubnetMask.setStatus("current")
_AgnCBuMlOamFrequency_Type = Integer32
_AgnCBuMlOamFrequency_Object = MibTableColumn
agnCBuMlOamFrequency = _AgnCBuMlOamFrequency_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 12, 1, 6),
    _AgnCBuMlOamFrequency_Type()
)
agnCBuMlOamFrequency.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCBuMlOamFrequency.setStatus("current")
_AgnCBuMlOamTimeoutCycles_Type = Integer32
_AgnCBuMlOamTimeoutCycles_Object = MibTableColumn
agnCBuMlOamTimeoutCycles = _AgnCBuMlOamTimeoutCycles_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 12, 1, 7),
    _AgnCBuMlOamTimeoutCycles_Type()
)
agnCBuMlOamTimeoutCycles.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCBuMlOamTimeoutCycles.setStatus("current")
_AgnCBuMlWaitToRestore_Type = Unsigned32
_AgnCBuMlWaitToRestore_Object = MibTableColumn
agnCBuMlWaitToRestore = _AgnCBuMlWaitToRestore_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 12, 1, 8),
    _AgnCBuMlWaitToRestore_Type()
)
agnCBuMlWaitToRestore.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCBuMlWaitToRestore.setStatus("current")
_AgnCQ50Table_Object = MibTable
agnCQ50Table = _AgnCQ50Table_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 13)
)
if mibBuilder.loadTexts:
    agnCQ50Table.setStatus("current")
_AgnCQ50Entry_Object = MibTableRow
agnCQ50Entry = _AgnCQ50Entry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 13, 1)
)
agnCQ50Entry.setIndexNames(
    (0, "RAD-MIB", "agnCQ50CnfgIdx"),
)
if mibBuilder.loadTexts:
    agnCQ50Entry.setStatus("current")
_AgnCQ50CnfgIdx_Type = Integer32
_AgnCQ50CnfgIdx_Object = MibTableColumn
agnCQ50CnfgIdx = _AgnCQ50CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 13, 1, 1),
    _AgnCQ50CnfgIdx_Type()
)
agnCQ50CnfgIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    agnCQ50CnfgIdx.setStatus("current")
_AgnCQ50StopCallsThresh_Type = Integer32
_AgnCQ50StopCallsThresh_Object = MibTableColumn
agnCQ50StopCallsThresh = _AgnCQ50StopCallsThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 13, 1, 2),
    _AgnCQ50StopCallsThresh_Type()
)
agnCQ50StopCallsThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCQ50StopCallsThresh.setStatus("current")
_AgnCQ50DiscardPktThresh_Type = Integer32
_AgnCQ50DiscardPktThresh_Object = MibTableColumn
agnCQ50DiscardPktThresh = _AgnCQ50DiscardPktThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 13, 1, 3),
    _AgnCQ50DiscardPktThresh_Type()
)
agnCQ50DiscardPktThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCQ50DiscardPktThresh.setStatus("current")
_AgnCQ50BlockNewModemVbdCallsThresh_Type = Integer32
_AgnCQ50BlockNewModemVbdCallsThresh_Object = MibTableColumn
agnCQ50BlockNewModemVbdCallsThresh = _AgnCQ50BlockNewModemVbdCallsThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 13, 1, 4),
    _AgnCQ50BlockNewModemVbdCallsThresh_Type()
)
agnCQ50BlockNewModemVbdCallsThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCQ50BlockNewModemVbdCallsThresh.setStatus("current")
_AgnCQ50BlockNewModemRelayCallsThresh_Type = Integer32
_AgnCQ50BlockNewModemRelayCallsThresh_Object = MibTableColumn
agnCQ50BlockNewModemRelayCallsThresh = _AgnCQ50BlockNewModemRelayCallsThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 13, 1, 5),
    _AgnCQ50BlockNewModemRelayCallsThresh_Type()
)
agnCQ50BlockNewModemRelayCallsThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCQ50BlockNewModemRelayCallsThresh.setStatus("current")
_CmprAgnGen_ObjectIdentity = ObjectIdentity
cmprAgnGen = _CmprAgnGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3)
)
_AgnCmprTable_Object = MibTable
agnCmprTable = _AgnCmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 1)
)
if mibBuilder.loadTexts:
    agnCmprTable.setStatus("current")
_AgnCmprEntry_Object = MibTableRow
agnCmprEntry = _AgnCmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 1, 1)
)
agnCmprEntry.setIndexNames(
    (0, "RAD-MIB", "agnCmprTypIdx"),
    (0, "RAD-MIB", "agnCmprCnfgIdx"),
    (0, "RAD-MIB", "agnCmprVersion"),
)
if mibBuilder.loadTexts:
    agnCmprEntry.setStatus("current")
_AgnCmprTypIdx_Type = Integer32
_AgnCmprTypIdx_Object = MibTableColumn
agnCmprTypIdx = _AgnCmprTypIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 1, 1, 1),
    _AgnCmprTypIdx_Type()
)
agnCmprTypIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCmprTypIdx.setStatus("current")
_AgnCmprCnfgIdx_Type = Integer32
_AgnCmprCnfgIdx_Object = MibTableColumn
agnCmprCnfgIdx = _AgnCmprCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 1, 1, 2),
    _AgnCmprCnfgIdx_Type()
)
agnCmprCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCmprCnfgIdx.setStatus("current")
_AgnCmprVersion_Type = Integer32
_AgnCmprVersion_Object = MibTableColumn
agnCmprVersion = _AgnCmprVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 1, 1, 3),
    _AgnCmprVersion_Type()
)
agnCmprVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCmprVersion.setStatus("current")
_AgnCmprObj_Type = OctetString
_AgnCmprObj_Object = MibTableColumn
agnCmprObj = _AgnCmprObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 1, 1, 4),
    _AgnCmprObj_Type()
)
agnCmprObj.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCmprObj.setStatus("current")
_AgnDlciCmprTable_Object = MibTable
agnDlciCmprTable = _AgnDlciCmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 2)
)
if mibBuilder.loadTexts:
    agnDlciCmprTable.setStatus("current")
_AgnDlciCmprEntry_Object = MibTableRow
agnDlciCmprEntry = _AgnDlciCmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 2, 1)
)
agnDlciCmprEntry.setIndexNames(
    (0, "RAD-MIB", "agnDlciCmprCnfgIdx"),
    (0, "RAD-MIB", "agnDlciCmprVersion"),
    (0, "RAD-MIB", "agnDlciCmprDlciIdx"),
)
if mibBuilder.loadTexts:
    agnDlciCmprEntry.setStatus("current")
_AgnDlciCmprCnfgIdx_Type = Integer32
_AgnDlciCmprCnfgIdx_Object = MibTableColumn
agnDlciCmprCnfgIdx = _AgnDlciCmprCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 2, 1, 1),
    _AgnDlciCmprCnfgIdx_Type()
)
agnDlciCmprCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDlciCmprCnfgIdx.setStatus("current")
_AgnDlciCmprVersion_Type = Integer32
_AgnDlciCmprVersion_Object = MibTableColumn
agnDlciCmprVersion = _AgnDlciCmprVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 2, 1, 2),
    _AgnDlciCmprVersion_Type()
)
agnDlciCmprVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDlciCmprVersion.setStatus("current")
_AgnDlciCmprDlciIdx_Type = Integer32
_AgnDlciCmprDlciIdx_Object = MibTableColumn
agnDlciCmprDlciIdx = _AgnDlciCmprDlciIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 2, 1, 3),
    _AgnDlciCmprDlciIdx_Type()
)
agnDlciCmprDlciIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDlciCmprDlciIdx.setStatus("current")
_AgnDlciCmprObj_Type = OctetString
_AgnDlciCmprObj_Object = MibTableColumn
agnDlciCmprObj = _AgnDlciCmprObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 2, 1, 4),
    _AgnDlciCmprObj_Type()
)
agnDlciCmprObj.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnDlciCmprObj.setStatus("current")
_AgnAlarmsCmprTable_Object = MibTable
agnAlarmsCmprTable = _AgnAlarmsCmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 3)
)
if mibBuilder.loadTexts:
    agnAlarmsCmprTable.setStatus("current")
_AgnAlarmsCmprEntry_Object = MibTableRow
agnAlarmsCmprEntry = _AgnAlarmsCmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 3, 1)
)
agnAlarmsCmprEntry.setIndexNames(
    (0, "RAD-MIB", "agnAlarmsCmprVersion"),
    (0, "RAD-MIB", "agnAlarmsCmprAlarmIdx"),
)
if mibBuilder.loadTexts:
    agnAlarmsCmprEntry.setStatus("current")
_AgnAlarmsCmprVersion_Type = Integer32
_AgnAlarmsCmprVersion_Object = MibTableColumn
agnAlarmsCmprVersion = _AgnAlarmsCmprVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 3, 1, 1),
    _AgnAlarmsCmprVersion_Type()
)
agnAlarmsCmprVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnAlarmsCmprVersion.setStatus("current")
_AgnAlarmsCmprAlarmIdx_Type = Integer32
_AgnAlarmsCmprAlarmIdx_Object = MibTableColumn
agnAlarmsCmprAlarmIdx = _AgnAlarmsCmprAlarmIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 3, 1, 2),
    _AgnAlarmsCmprAlarmIdx_Type()
)
agnAlarmsCmprAlarmIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnAlarmsCmprAlarmIdx.setStatus("current")
_AgnAlarmsCmprObj_Type = OctetString
_AgnAlarmsCmprObj_Object = MibTableColumn
agnAlarmsCmprObj = _AgnAlarmsCmprObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 3, 1, 3),
    _AgnAlarmsCmprObj_Type()
)
agnAlarmsCmprObj.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnAlarmsCmprObj.setStatus("current")
_AgnAlrBufCmprTable_Object = MibTable
agnAlrBufCmprTable = _AgnAlrBufCmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 4)
)
if mibBuilder.loadTexts:
    agnAlrBufCmprTable.setStatus("current")
_AgnAlrBufCmprEntry_Object = MibTableRow
agnAlrBufCmprEntry = _AgnAlrBufCmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 4, 1)
)
agnAlrBufCmprEntry.setIndexNames(
    (0, "RAD-MIB", "agnAlrBufCmprVersion"),
    (0, "RAD-MIB", "agnAlrBufCmprAlarmIdx"),
)
if mibBuilder.loadTexts:
    agnAlrBufCmprEntry.setStatus("current")
_AgnAlrBufCmprVersion_Type = Integer32
_AgnAlrBufCmprVersion_Object = MibTableColumn
agnAlrBufCmprVersion = _AgnAlrBufCmprVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 4, 1, 1),
    _AgnAlrBufCmprVersion_Type()
)
agnAlrBufCmprVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnAlrBufCmprVersion.setStatus("current")
_AgnAlrBufCmprAlarmIdx_Type = Integer32
_AgnAlrBufCmprAlarmIdx_Object = MibTableColumn
agnAlrBufCmprAlarmIdx = _AgnAlrBufCmprAlarmIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 4, 1, 2),
    _AgnAlrBufCmprAlarmIdx_Type()
)
agnAlrBufCmprAlarmIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnAlrBufCmprAlarmIdx.setStatus("current")
_AgnAlrBufCmprObj_Type = OctetString
_AgnAlrBufCmprObj_Object = MibTableColumn
agnAlrBufCmprObj = _AgnAlrBufCmprObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 4, 1, 3),
    _AgnAlrBufCmprObj_Type()
)
agnAlrBufCmprObj.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnAlrBufCmprObj.setStatus("current")
_AgnSCmprErrListTable_Object = MibTable
agnSCmprErrListTable = _AgnSCmprErrListTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 5)
)
if mibBuilder.loadTexts:
    agnSCmprErrListTable.setStatus("current")
_AgnSCmprErrListEntry_Object = MibTableRow
agnSCmprErrListEntry = _AgnSCmprErrListEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 5, 1)
)
agnSCmprErrListEntry.setIndexNames(
    (0, "RAD-MIB", "agnSCmprErrVersion"),
    (0, "RAD-MIB", "agnSCmprErrIdx"),
)
if mibBuilder.loadTexts:
    agnSCmprErrListEntry.setStatus("current")
_AgnSCmprErrVersion_Type = Integer32
_AgnSCmprErrVersion_Object = MibTableColumn
agnSCmprErrVersion = _AgnSCmprErrVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 5, 1, 1),
    _AgnSCmprErrVersion_Type()
)
agnSCmprErrVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSCmprErrVersion.setStatus("current")
_AgnSCmprErrIdx_Type = Integer32
_AgnSCmprErrIdx_Object = MibTableColumn
agnSCmprErrIdx = _AgnSCmprErrIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 5, 1, 2),
    _AgnSCmprErrIdx_Type()
)
agnSCmprErrIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSCmprErrIdx.setStatus("current")
_AgnSCmprErrObj_Type = OctetString
_AgnSCmprErrObj_Object = MibTableColumn
agnSCmprErrObj = _AgnSCmprErrObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 5, 1, 3),
    _AgnSCmprErrObj_Type()
)
agnSCmprErrObj.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSCmprErrObj.setStatus("current")
_AgnTsCmprTable_Object = MibTable
agnTsCmprTable = _AgnTsCmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6)
)
if mibBuilder.loadTexts:
    agnTsCmprTable.setStatus("current")
_AgnTsCmprEntry_Object = MibTableRow
agnTsCmprEntry = _AgnTsCmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6, 1)
)
agnTsCmprEntry.setIndexNames(
    (0, "RAD-MIB", "agnTsCmprVerIdx"),
    (0, "RAD-MIB", "agnTsCmprCnfgIdx"),
    (0, "RAD-MIB", "agnTsCmprSlotIdx"),
    (0, "RAD-MIB", "agnTsCmprPortIdx"),
    (0, "RAD-MIB", "agnTsCmprPduIdx"),
)
if mibBuilder.loadTexts:
    agnTsCmprEntry.setStatus("current")
_AgnTsCmprVerIdx_Type = Integer32
_AgnTsCmprVerIdx_Object = MibTableColumn
agnTsCmprVerIdx = _AgnTsCmprVerIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6, 1, 1),
    _AgnTsCmprVerIdx_Type()
)
agnTsCmprVerIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnTsCmprVerIdx.setStatus("current")
_AgnTsCmprCnfgIdx_Type = Integer32
_AgnTsCmprCnfgIdx_Object = MibTableColumn
agnTsCmprCnfgIdx = _AgnTsCmprCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6, 1, 2),
    _AgnTsCmprCnfgIdx_Type()
)
agnTsCmprCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnTsCmprCnfgIdx.setStatus("current")
_AgnTsCmprSlotIdx_Type = Integer32
_AgnTsCmprSlotIdx_Object = MibTableColumn
agnTsCmprSlotIdx = _AgnTsCmprSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6, 1, 3),
    _AgnTsCmprSlotIdx_Type()
)
agnTsCmprSlotIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnTsCmprSlotIdx.setStatus("current")
_AgnTsCmprPortIdx_Type = Integer32
_AgnTsCmprPortIdx_Object = MibTableColumn
agnTsCmprPortIdx = _AgnTsCmprPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6, 1, 4),
    _AgnTsCmprPortIdx_Type()
)
agnTsCmprPortIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnTsCmprPortIdx.setStatus("current")
_AgnTsCmprPduIdx_Type = Integer32
_AgnTsCmprPduIdx_Object = MibTableColumn
agnTsCmprPduIdx = _AgnTsCmprPduIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6, 1, 5),
    _AgnTsCmprPduIdx_Type()
)
agnTsCmprPduIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnTsCmprPduIdx.setStatus("current")
_AgnTsCmprData_Type = OctetString
_AgnTsCmprData_Object = MibTableColumn
agnTsCmprData = _AgnTsCmprData_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6, 1, 6),
    _AgnTsCmprData_Type()
)
agnTsCmprData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnTsCmprData.setStatus("current")
_AgnXCmprTable_Object = MibTable
agnXCmprTable = _AgnXCmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7)
)
if mibBuilder.loadTexts:
    agnXCmprTable.setStatus("current")
_AgnXCmprEntry_Object = MibTableRow
agnXCmprEntry = _AgnXCmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1)
)
agnXCmprEntry.setIndexNames(
    (0, "RAD-MIB", "agnXCmprTypIdx"),
    (0, "RAD-MIB", "agnXCmprVersion"),
    (0, "RAD-MIB", "agnXCmprIdx3"),
    (0, "RAD-MIB", "agnXCmprIdx4"),
    (0, "RAD-MIB", "agnXCmprIdx5"),
    (0, "RAD-MIB", "agnXCmprIdx6"),
    (0, "RAD-MIB", "agnXCmprIdx7"),
)
if mibBuilder.loadTexts:
    agnXCmprEntry.setStatus("current")
_AgnXCmprTypIdx_Type = Integer32
_AgnXCmprTypIdx_Object = MibTableColumn
agnXCmprTypIdx = _AgnXCmprTypIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 1),
    _AgnXCmprTypIdx_Type()
)
agnXCmprTypIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnXCmprTypIdx.setStatus("current")
_AgnXCmprVersion_Type = Integer32
_AgnXCmprVersion_Object = MibTableColumn
agnXCmprVersion = _AgnXCmprVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 2),
    _AgnXCmprVersion_Type()
)
agnXCmprVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnXCmprVersion.setStatus("current")
_AgnXCmprIdx3_Type = Integer32
_AgnXCmprIdx3_Object = MibTableColumn
agnXCmprIdx3 = _AgnXCmprIdx3_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 3),
    _AgnXCmprIdx3_Type()
)
agnXCmprIdx3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnXCmprIdx3.setStatus("current")
_AgnXCmprIdx4_Type = Integer32
_AgnXCmprIdx4_Object = MibTableColumn
agnXCmprIdx4 = _AgnXCmprIdx4_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 4),
    _AgnXCmprIdx4_Type()
)
agnXCmprIdx4.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnXCmprIdx4.setStatus("current")
_AgnXCmprIdx5_Type = Integer32
_AgnXCmprIdx5_Object = MibTableColumn
agnXCmprIdx5 = _AgnXCmprIdx5_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 5),
    _AgnXCmprIdx5_Type()
)
agnXCmprIdx5.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnXCmprIdx5.setStatus("current")
_AgnXCmprIdx6_Type = Integer32
_AgnXCmprIdx6_Object = MibTableColumn
agnXCmprIdx6 = _AgnXCmprIdx6_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 6),
    _AgnXCmprIdx6_Type()
)
agnXCmprIdx6.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnXCmprIdx6.setStatus("current")
_AgnXCmprIdx7_Type = Integer32
_AgnXCmprIdx7_Object = MibTableColumn
agnXCmprIdx7 = _AgnXCmprIdx7_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 7),
    _AgnXCmprIdx7_Type()
)
agnXCmprIdx7.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnXCmprIdx7.setStatus("current")
_AgnXCmprObj_Type = OctetString
_AgnXCmprObj_Object = MibTableColumn
agnXCmprObj = _AgnXCmprObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 8),
    _AgnXCmprObj_Type()
)
agnXCmprObj.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnXCmprObj.setStatus("current")
_AlrBuffGen_ObjectIdentity = ObjectIdentity
alrBuffGen = _AlrBuffGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 4)
)
_AlrBufTable_Object = MibTable
alrBufTable = _AlrBufTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 4, 1)
)
if mibBuilder.loadTexts:
    alrBufTable.setStatus("current")
_AlrBufEntry_Object = MibTableRow
alrBufEntry = _AlrBufEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 4, 1, 1)
)
alrBufEntry.setIndexNames(
    (0, "RAD-MIB", "alrBufIdx"),
)
if mibBuilder.loadTexts:
    alrBufEntry.setStatus("current")
_AlrBufIdx_Type = Integer32
_AlrBufIdx_Object = MibTableColumn
alrBufIdx = _AlrBufIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 4, 1, 1, 1),
    _AlrBufIdx_Type()
)
alrBufIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alrBufIdx.setStatus("current")


class _AlrBufDescription_Type(DisplayString):
    """Custom type alrBufDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AlrBufDescription_Type.__name__ = "DisplayString"
_AlrBufDescription_Object = MibTableColumn
alrBufDescription = _AlrBufDescription_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 4, 1, 1, 2),
    _AlrBufDescription_Type()
)
alrBufDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alrBufDescription.setStatus("current")
_AlrBufCode_Type = Unsigned32
_AlrBufCode_Object = MibTableColumn
alrBufCode = _AlrBufCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 4, 1, 1, 3),
    _AlrBufCode_Type()
)
alrBufCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alrBufCode.setStatus("current")


class _AlrBufSlot_Type(Integer32):
    """Custom type alrBufSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255),
          ("psA", 1),
          ("psB", 2))
    )


_AlrBufSlot_Type.__name__ = "Integer32"
_AlrBufSlot_Object = MibTableColumn
alrBufSlot = _AlrBufSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 4, 1, 1, 4),
    _AlrBufSlot_Type()
)
alrBufSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alrBufSlot.setStatus("current")
_AlrBufPort_Type = Unsigned32
_AlrBufPort_Object = MibTableColumn
alrBufPort = _AlrBufPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 4, 1, 1, 5),
    _AlrBufPort_Type()
)
alrBufPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alrBufPort.setStatus("current")


class _AlrBufSeverity_Type(Integer32):
    """Custom type alrBufSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("warning", 6))
    )


_AlrBufSeverity_Type.__name__ = "Integer32"
_AlrBufSeverity_Object = MibTableColumn
alrBufSeverity = _AlrBufSeverity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 4, 1, 1, 6),
    _AlrBufSeverity_Type()
)
alrBufSeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alrBufSeverity.setStatus("current")


class _AlrBufState_Type(Integer32):
    """Custom type alrBufState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AlrBufState_Type.__name__ = "Integer32"
_AlrBufState_Object = MibTableColumn
alrBufState = _AlrBufState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 4, 1, 1, 7),
    _AlrBufState_Type()
)
alrBufState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alrBufState.setStatus("current")


class _AlrBufferClearCmd_Type(Integer32):
    """Custom type alrBufferClearCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AlrBufferClearCmd_Type.__name__ = "Integer32"
_AlrBufferClearCmd_Object = MibScalar
alrBufferClearCmd = _AlrBufferClearCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 4, 2),
    _AlrBufferClearCmd_Type()
)
alrBufferClearCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alrBufferClearCmd.setStatus("current")
_AlrBufIdxUponLastAck_Type = Unsigned32
_AlrBufIdxUponLastAck_Object = MibScalar
alrBufIdxUponLastAck = _AlrBufIdxUponLastAck_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 4, 3),
    _AlrBufIdxUponLastAck_Type()
)
alrBufIdxUponLastAck.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alrBufIdxUponLastAck.setStatus("current")
_AgnFlipDb_ObjectIdentity = ObjectIdentity
agnFlipDb = _AgnFlipDb_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5)
)
_AgnCAgendaTable_Object = MibTable
agnCAgendaTable = _AgnCAgendaTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 1)
)
if mibBuilder.loadTexts:
    agnCAgendaTable.setStatus("current")
_AgnCAgendaEntry_Object = MibTableRow
agnCAgendaEntry = _AgnCAgendaEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 1, 1)
)
agnCAgendaEntry.setIndexNames(
    (0, "RAD-MIB", "agnCAgendaCnfgIdx"),
    (0, "RAD-MIB", "agnCAgendaDayIdx"),
)
if mibBuilder.loadTexts:
    agnCAgendaEntry.setStatus("current")


class _AgnCAgendaCnfgIdx_Type(Integer32):
    """Custom type agnCAgendaCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("temporary", 255))
    )


_AgnCAgendaCnfgIdx_Type.__name__ = "Integer32"
_AgnCAgendaCnfgIdx_Object = MibTableColumn
agnCAgendaCnfgIdx = _AgnCAgendaCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 1, 1, 1),
    _AgnCAgendaCnfgIdx_Type()
)
agnCAgendaCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCAgendaCnfgIdx.setStatus("current")


class _AgnCAgendaDayIdx_Type(Integer32):
    """Custom type agnCAgendaDayIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("friday", 6),
          ("monday", 2),
          ("saturday", 7),
          ("sunday", 1),
          ("thursday", 5),
          ("tuesday", 3),
          ("wednesday", 4))
    )


_AgnCAgendaDayIdx_Type.__name__ = "Integer32"
_AgnCAgendaDayIdx_Object = MibTableColumn
agnCAgendaDayIdx = _AgnCAgendaDayIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 1, 1, 2),
    _AgnCAgendaDayIdx_Type()
)
agnCAgendaDayIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCAgendaDayIdx.setStatus("current")


class _AgnCAgendaDayCategory_Type(Integer32):
    """Custom type agnCAgendaDayCategory based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fullWorkday", 1),
          ("partialWorkday", 2),
          ("weekend", 3))
    )


_AgnCAgendaDayCategory_Type.__name__ = "Integer32"
_AgnCAgendaDayCategory_Object = MibTableColumn
agnCAgendaDayCategory = _AgnCAgendaDayCategory_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 1, 1, 3),
    _AgnCAgendaDayCategory_Type()
)
agnCAgendaDayCategory.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCAgendaDayCategory.setStatus("current")
_AgnCFlipNetEventsTable_Object = MibTable
agnCFlipNetEventsTable = _AgnCFlipNetEventsTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2)
)
if mibBuilder.loadTexts:
    agnCFlipNetEventsTable.setStatus("current")
_AgnCFlipNetEventsEntry_Object = MibTableRow
agnCFlipNetEventsEntry = _AgnCFlipNetEventsEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1)
)
agnCFlipNetEventsEntry.setIndexNames(
    (0, "RAD-MIB", "agnCFlipNetEventsCnfgIdx"),
    (0, "RAD-MIB", "agnCFlipNetEventIdx"),
)
if mibBuilder.loadTexts:
    agnCFlipNetEventsEntry.setStatus("current")


class _AgnCFlipNetEventsCnfgIdx_Type(Integer32):
    """Custom type agnCFlipNetEventsCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("temporary", 255))
    )


_AgnCFlipNetEventsCnfgIdx_Type.__name__ = "Integer32"
_AgnCFlipNetEventsCnfgIdx_Object = MibTableColumn
agnCFlipNetEventsCnfgIdx = _AgnCFlipNetEventsCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 1),
    _AgnCFlipNetEventsCnfgIdx_Type()
)
agnCFlipNetEventsCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCFlipNetEventsCnfgIdx.setStatus("current")


class _AgnCFlipNetEventIdx_Type(Integer32):
    """Custom type agnCFlipNetEventIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_AgnCFlipNetEventIdx_Type.__name__ = "Integer32"
_AgnCFlipNetEventIdx_Object = MibTableColumn
agnCFlipNetEventIdx = _AgnCFlipNetEventIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 2),
    _AgnCFlipNetEventIdx_Type()
)
agnCFlipNetEventIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCFlipNetEventIdx.setStatus("current")


class _AgnCFlipNetEventActive_Type(Integer32):
    """Custom type agnCFlipNetEventActive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_AgnCFlipNetEventActive_Type.__name__ = "Integer32"
_AgnCFlipNetEventActive_Object = MibTableColumn
agnCFlipNetEventActive = _AgnCFlipNetEventActive_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 3),
    _AgnCFlipNetEventActive_Type()
)
agnCFlipNetEventActive.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipNetEventActive.setStatus("current")


class _AgnCFlipNetEventType_Type(Integer32):
    """Custom type agnCFlipNetEventType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("congestion", 3),
          ("linkDown", 2),
          ("time", 1))
    )


_AgnCFlipNetEventType_Type.__name__ = "Integer32"
_AgnCFlipNetEventType_Object = MibTableColumn
agnCFlipNetEventType = _AgnCFlipNetEventType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 4),
    _AgnCFlipNetEventType_Type()
)
agnCFlipNetEventType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipNetEventType.setStatus("current")


class _AgnCFlipNetEventNo_Type(Integer32):
    """Custom type agnCFlipNetEventNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 512),
    )


_AgnCFlipNetEventNo_Type.__name__ = "Integer32"
_AgnCFlipNetEventNo_Object = MibTableColumn
agnCFlipNetEventNo = _AgnCFlipNetEventNo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 5),
    _AgnCFlipNetEventNo_Type()
)
agnCFlipNetEventNo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipNetEventNo.setStatus("current")


class _AgnCFlipNetEventSlot_Type(Integer32):
    """Custom type agnCFlipNetEventSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 1))
    )


_AgnCFlipNetEventSlot_Type.__name__ = "Integer32"
_AgnCFlipNetEventSlot_Object = MibTableColumn
agnCFlipNetEventSlot = _AgnCFlipNetEventSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 6),
    _AgnCFlipNetEventSlot_Type()
)
agnCFlipNetEventSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipNetEventSlot.setStatus("current")
_AgnCFlipNetEventPort_Type = Integer32
_AgnCFlipNetEventPort_Object = MibTableColumn
agnCFlipNetEventPort = _AgnCFlipNetEventPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 7),
    _AgnCFlipNetEventPort_Type()
)
agnCFlipNetEventPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipNetEventPort.setStatus("current")


class _AgnCFlipNetEventISD_Type(Integer32):
    """Custom type agnCFlipNetEventISD based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 999),
    )


_AgnCFlipNetEventISD_Type.__name__ = "Integer32"
_AgnCFlipNetEventISD_Object = MibTableColumn
agnCFlipNetEventISD = _AgnCFlipNetEventISD_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 8),
    _AgnCFlipNetEventISD_Type()
)
agnCFlipNetEventISD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipNetEventISD.setStatus("current")


class _AgnCFlipNetEventOSD_Type(Integer32):
    """Custom type agnCFlipNetEventOSD based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 999),
    )


_AgnCFlipNetEventOSD_Type.__name__ = "Integer32"
_AgnCFlipNetEventOSD_Object = MibTableColumn
agnCFlipNetEventOSD = _AgnCFlipNetEventOSD_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 9),
    _AgnCFlipNetEventOSD_Type()
)
agnCFlipNetEventOSD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipNetEventOSD.setStatus("current")


class _AgnCFlipNetEventDayType_Type(Integer32):
    """Custom type agnCFlipNetEventDayType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("fullWorkday", 2),
          ("notApplicable", 1),
          ("partialWorkday", 3),
          ("weekend", 4))
    )


_AgnCFlipNetEventDayType_Type.__name__ = "Integer32"
_AgnCFlipNetEventDayType_Object = MibTableColumn
agnCFlipNetEventDayType = _AgnCFlipNetEventDayType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 10),
    _AgnCFlipNetEventDayType_Type()
)
agnCFlipNetEventDayType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipNetEventDayType.setStatus("current")


class _AgnCFlipNetEventStartTime_Type(DisplayString):
    """Custom type agnCFlipNetEventStartTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )


_AgnCFlipNetEventStartTime_Type.__name__ = "DisplayString"
_AgnCFlipNetEventStartTime_Object = MibTableColumn
agnCFlipNetEventStartTime = _AgnCFlipNetEventStartTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 11),
    _AgnCFlipNetEventStartTime_Type()
)
agnCFlipNetEventStartTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipNetEventStartTime.setStatus("current")


class _AgnCFlipNetEventEndTime_Type(DisplayString):
    """Custom type agnCFlipNetEventEndTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )


_AgnCFlipNetEventEndTime_Type.__name__ = "DisplayString"
_AgnCFlipNetEventEndTime_Object = MibTableColumn
agnCFlipNetEventEndTime = _AgnCFlipNetEventEndTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 12),
    _AgnCFlipNetEventEndTime_Type()
)
agnCFlipNetEventEndTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipNetEventEndTime.setStatus("current")
_AgnCFlipTable_Object = MibTable
agnCFlipTable = _AgnCFlipTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3)
)
if mibBuilder.loadTexts:
    agnCFlipTable.setStatus("current")
_AgnCFlipEntry_Object = MibTableRow
agnCFlipEntry = _AgnCFlipEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3, 1)
)
agnCFlipEntry.setIndexNames(
    (0, "RAD-MIB", "agnCFlipCnfgIdx"),
    (0, "RAD-MIB", "agnCFlipIdx"),
)
if mibBuilder.loadTexts:
    agnCFlipEntry.setStatus("current")


class _AgnCFlipCnfgIdx_Type(Integer32):
    """Custom type agnCFlipCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("temporary", 255))
    )


_AgnCFlipCnfgIdx_Type.__name__ = "Integer32"
_AgnCFlipCnfgIdx_Object = MibTableColumn
agnCFlipCnfgIdx = _AgnCFlipCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3, 1, 1),
    _AgnCFlipCnfgIdx_Type()
)
agnCFlipCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCFlipCnfgIdx.setStatus("current")


class _AgnCFlipIdx_Type(Integer32):
    """Custom type agnCFlipIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_AgnCFlipIdx_Type.__name__ = "Integer32"
_AgnCFlipIdx_Object = MibTableColumn
agnCFlipIdx = _AgnCFlipIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3, 1, 2),
    _AgnCFlipIdx_Type()
)
agnCFlipIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCFlipIdx.setStatus("current")


class _AgnCFlipActive_Type(Integer32):
    """Custom type agnCFlipActive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_AgnCFlipActive_Type.__name__ = "Integer32"
_AgnCFlipActive_Object = MibTableColumn
agnCFlipActive = _AgnCFlipActive_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3, 1, 3),
    _AgnCFlipActive_Type()
)
agnCFlipActive.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipActive.setStatus("current")


class _AgnCFlipLogicalExp_Type(DisplayString):
    """Custom type agnCFlipLogicalExp based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )


_AgnCFlipLogicalExp_Type.__name__ = "DisplayString"
_AgnCFlipLogicalExp_Object = MibTableColumn
agnCFlipLogicalExp = _AgnCFlipLogicalExp_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3, 1, 4),
    _AgnCFlipLogicalExp_Type()
)
agnCFlipLogicalExp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipLogicalExp.setStatus("current")


class _AgnCFlipDbNo_Type(Integer32):
    """Custom type agnCFlipDbNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_AgnCFlipDbNo_Type.__name__ = "Integer32"
_AgnCFlipDbNo_Object = MibTableColumn
agnCFlipDbNo = _AgnCFlipDbNo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3, 1, 5),
    _AgnCFlipDbNo_Type()
)
agnCFlipDbNo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipDbNo.setStatus("current")


class _AgnCFlipDiscardDe_Type(Integer32):
    """Custom type agnCFlipDiscardDe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_AgnCFlipDiscardDe_Type.__name__ = "Integer32"
_AgnCFlipDiscardDe_Object = MibTableColumn
agnCFlipDiscardDe = _AgnCFlipDiscardDe_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3, 1, 6),
    _AgnCFlipDiscardDe_Type()
)
agnCFlipDiscardDe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipDiscardDe.setStatus("current")
_AgnFlipDbControls_ObjectIdentity = ObjectIdentity
agnFlipDbControls = _AgnFlipDbControls_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4)
)


class _AgnCFlipDbSanityCheckCmd_Type(Integer32):
    """Custom type agnCFlipDbSanityCheckCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnCFlipDbSanityCheckCmd_Type.__name__ = "Integer32"
_AgnCFlipDbSanityCheckCmd_Object = MibScalar
agnCFlipDbSanityCheckCmd = _AgnCFlipDbSanityCheckCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 1),
    _AgnCFlipDbSanityCheckCmd_Type()
)
agnCFlipDbSanityCheckCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCFlipDbSanityCheckCmd.setStatus("current")


class _AgnCSaveFlipDbCmd_Type(Integer32):
    """Custom type agnCSaveFlipDbCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnCSaveFlipDbCmd_Type.__name__ = "Integer32"
_AgnCSaveFlipDbCmd_Object = MibScalar
agnCSaveFlipDbCmd = _AgnCSaveFlipDbCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 2),
    _AgnCSaveFlipDbCmd_Type()
)
agnCSaveFlipDbCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCSaveFlipDbCmd.setStatus("current")


class _AgnCSaveNetCnfgIdxCmd_Type(Integer32):
    """Custom type agnCSaveNetCnfgIdxCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_AgnCSaveNetCnfgIdxCmd_Type.__name__ = "Integer32"
_AgnCSaveNetCnfgIdxCmd_Object = MibScalar
agnCSaveNetCnfgIdxCmd = _AgnCSaveNetCnfgIdxCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 3),
    _AgnCSaveNetCnfgIdxCmd_Type()
)
agnCSaveNetCnfgIdxCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCSaveNetCnfgIdxCmd.setStatus("current")


class _AgnCSaveNetFlipDbCmd_Type(Integer32):
    """Custom type agnCSaveNetFlipDbCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnCSaveNetFlipDbCmd_Type.__name__ = "Integer32"
_AgnCSaveNetFlipDbCmd_Object = MibScalar
agnCSaveNetFlipDbCmd = _AgnCSaveNetFlipDbCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 4),
    _AgnCSaveNetFlipDbCmd_Type()
)
agnCSaveNetFlipDbCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCSaveNetFlipDbCmd.setStatus("current")


class _AgnCNetGoCmd_Type(Integer32):
    """Custom type agnCNetGoCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnCNetGoCmd_Type.__name__ = "Integer32"
_AgnCNetGoCmd_Object = MibScalar
agnCNetGoCmd = _AgnCNetGoCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 5),
    _AgnCNetGoCmd_Type()
)
agnCNetGoCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCNetGoCmd.setStatus("current")


class _AgnCNetDelay_Type(Integer32):
    """Custom type agnCNetDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 999),
    )


_AgnCNetDelay_Type.__name__ = "Integer32"
_AgnCNetDelay_Object = MibScalar
agnCNetDelay = _AgnCNetDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 6),
    _AgnCNetDelay_Type()
)
agnCNetDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCNetDelay.setStatus("current")


class _AgnCNetEventsBcast_Type(Integer32):
    """Custom type agnCNetEventsBcast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3))
    )


_AgnCNetEventsBcast_Type.__name__ = "Integer32"
_AgnCNetEventsBcast_Object = MibScalar
agnCNetEventsBcast = _AgnCNetEventsBcast_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 7),
    _AgnCNetEventsBcast_Type()
)
agnCNetEventsBcast.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCNetEventsBcast.setStatus("current")


class _AgnCNetEventsBcastInterval_Type(Integer32):
    """Custom type agnCNetEventsBcastInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 60),
    )


_AgnCNetEventsBcastInterval_Type.__name__ = "Integer32"
_AgnCNetEventsBcastInterval_Object = MibScalar
agnCNetEventsBcastInterval = _AgnCNetEventsBcastInterval_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 8),
    _AgnCNetEventsBcastInterval_Type()
)
agnCNetEventsBcastInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnCNetEventsBcastInterval.setStatus("current")
_AgnSa_ObjectIdentity = ObjectIdentity
agnSa = _AgnSa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 6)
)
_AgnSaSwchStatus_Type = Integer32
_AgnSaSwchStatus_Object = MibScalar
agnSaSwchStatus = _AgnSaSwchStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 6, 1),
    _AgnSaSwchStatus_Type()
)
agnSaSwchStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSaSwchStatus.setStatus("current")
_AgnListDecoding_ObjectIdentity = ObjectIdentity
agnListDecoding = _AgnListDecoding_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7)
)
_AgnListDecodingTable_Object = MibTable
agnListDecodingTable = _AgnListDecodingTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1)
)
if mibBuilder.loadTexts:
    agnListDecodingTable.setStatus("current")
_AgnListDecodingEntry_Object = MibTableRow
agnListDecodingEntry = _AgnListDecodingEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1)
)
agnListDecodingEntry.setIndexNames(
    (0, "RAD-MIB", "agnListDecodingType"),
    (0, "RAD-MIB", "agnListDecodingCode"),
)
if mibBuilder.loadTexts:
    agnListDecodingEntry.setStatus("current")


class _AgnListDecodingType_Type(Integer32):
    """Custom type agnListDecodingType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("alr", 1),
          ("counter", 3),
          ("sanity", 2))
    )


_AgnListDecodingType_Type.__name__ = "Integer32"
_AgnListDecodingType_Object = MibTableColumn
agnListDecodingType = _AgnListDecodingType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1, 1),
    _AgnListDecodingType_Type()
)
agnListDecodingType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnListDecodingType.setStatus("current")
_AgnListDecodingCode_Type = Integer32
_AgnListDecodingCode_Object = MibTableColumn
agnListDecodingCode = _AgnListDecodingCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1, 2),
    _AgnListDecodingCode_Type()
)
agnListDecodingCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnListDecodingCode.setStatus("current")


class _AgnListDecodingDescription_Type(DisplayString):
    """Custom type agnListDecodingDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AgnListDecodingDescription_Type.__name__ = "DisplayString"
_AgnListDecodingDescription_Object = MibTableColumn
agnListDecodingDescription = _AgnListDecodingDescription_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1, 3),
    _AgnListDecodingDescription_Type()
)
agnListDecodingDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnListDecodingDescription.setStatus("current")


class _AgnListDecodingDefState_Type(Integer32):
    """Custom type agnListDecodingDefState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("notApplicable", 1),
          ("warning", 6))
    )


_AgnListDecodingDefState_Type.__name__ = "Integer32"
_AgnListDecodingDefState_Object = MibTableColumn
agnListDecodingDefState = _AgnListDecodingDefState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1, 4),
    _AgnListDecodingDefState_Type()
)
agnListDecodingDefState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnListDecodingDefState.setStatus("current")


class _AgnListDecodingSeverity_Type(Integer32):
    """Custom type agnListDecodingSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("notApplicable", 1),
          ("warning", 6))
    )


_AgnListDecodingSeverity_Type.__name__ = "Integer32"
_AgnListDecodingSeverity_Object = MibTableColumn
agnListDecodingSeverity = _AgnListDecodingSeverity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1, 5),
    _AgnListDecodingSeverity_Type()
)
agnListDecodingSeverity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnListDecodingSeverity.setStatus("current")


class _AgnListDecodingAcmRelaySlt_Type(Integer32):
    """Custom type agnListDecodingAcmRelaySlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("none", 1),
          ("notApplicable", 255))
    )


_AgnListDecodingAcmRelaySlt_Type.__name__ = "Integer32"
_AgnListDecodingAcmRelaySlt_Object = MibTableColumn
agnListDecodingAcmRelaySlt = _AgnListDecodingAcmRelaySlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1, 6),
    _AgnListDecodingAcmRelaySlt_Type()
)
agnListDecodingAcmRelaySlt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnListDecodingAcmRelaySlt.setStatus("current")


class _AgnListDecodingAcmRelayPrt_Type(Integer32):
    """Custom type agnListDecodingAcmRelayPrt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("notApplicable", 255))
    )


_AgnListDecodingAcmRelayPrt_Type.__name__ = "Integer32"
_AgnListDecodingAcmRelayPrt_Object = MibTableColumn
agnListDecodingAcmRelayPrt = _AgnListDecodingAcmRelayPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1, 7),
    _AgnListDecodingAcmRelayPrt_Type()
)
agnListDecodingAcmRelayPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnListDecodingAcmRelayPrt.setStatus("current")
_AgnSystemDlci_ObjectIdentity = ObjectIdentity
agnSystemDlci = _AgnSystemDlci_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8)
)
_AgnDlciTable_Object = MibTable
agnDlciTable = _AgnDlciTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1)
)
if mibBuilder.loadTexts:
    agnDlciTable.setStatus("current")
_AgnDlciEntry_Object = MibTableRow
agnDlciEntry = _AgnDlciEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1)
)
agnDlciEntry.setIndexNames(
    (0, "RAD-MIB", "agnDlciCnfgIdx"),
    (0, "RAD-MIB", "agnDlciLSltIdx"),
    (0, "RAD-MIB", "agnDlciLPrtIdx"),
    (0, "RAD-MIB", "agnDlciHIdx"),
    (0, "RAD-MIB", "agnDlciHSltIdx"),
    (0, "RAD-MIB", "agnDlciHPrtIdx"),
    (0, "RAD-MIB", "agnDlciLIdx"),
)
if mibBuilder.loadTexts:
    agnDlciEntry.setStatus("current")


class _AgnDlciCnfgIdx_Type(Integer32):
    """Custom type agnDlciCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_AgnDlciCnfgIdx_Type.__name__ = "Integer32"
_AgnDlciCnfgIdx_Object = MibTableColumn
agnDlciCnfgIdx = _AgnDlciCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 1),
    _AgnDlciCnfgIdx_Type()
)
agnDlciCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDlciCnfgIdx.setStatus("current")


class _AgnDlciLSltIdx_Type(Integer32):
    """Custom type agnDlciLSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              254,
              255)
        )
    )
    namedValues = NamedValues(
        *(("cl", 3),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255),
          ("vs", 254))
    )


_AgnDlciLSltIdx_Type.__name__ = "Integer32"
_AgnDlciLSltIdx_Object = MibTableColumn
agnDlciLSltIdx = _AgnDlciLSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 2),
    _AgnDlciLSltIdx_Type()
)
agnDlciLSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDlciLSltIdx.setStatus("current")
_AgnDlciLPrtIdx_Type = Integer32
_AgnDlciLPrtIdx_Object = MibTableColumn
agnDlciLPrtIdx = _AgnDlciLPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 3),
    _AgnDlciLPrtIdx_Type()
)
agnDlciLPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDlciLPrtIdx.setStatus("current")


class _AgnDlciLIdx_Type(Integer32):
    """Custom type agnDlciLIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 991),
    )


_AgnDlciLIdx_Type.__name__ = "Integer32"
_AgnDlciLIdx_Object = MibTableColumn
agnDlciLIdx = _AgnDlciLIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 4),
    _AgnDlciLIdx_Type()
)
agnDlciLIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDlciLIdx.setStatus("current")


class _AgnDlciHSltIdx_Type(Integer32):
    """Custom type agnDlciHSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("cl", 3),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_AgnDlciHSltIdx_Type.__name__ = "Integer32"
_AgnDlciHSltIdx_Object = MibTableColumn
agnDlciHSltIdx = _AgnDlciHSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 5),
    _AgnDlciHSltIdx_Type()
)
agnDlciHSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDlciHSltIdx.setStatus("current")
_AgnDlciHPrtIdx_Type = Integer32
_AgnDlciHPrtIdx_Object = MibTableColumn
agnDlciHPrtIdx = _AgnDlciHPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 6),
    _AgnDlciHPrtIdx_Type()
)
agnDlciHPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDlciHPrtIdx.setStatus("current")


class _AgnDlciHIdx_Type(Integer32):
    """Custom type agnDlciHIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 991),
    )


_AgnDlciHIdx_Type.__name__ = "Integer32"
_AgnDlciHIdx_Object = MibTableColumn
agnDlciHIdx = _AgnDlciHIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 7),
    _AgnDlciHIdx_Type()
)
agnDlciHIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDlciHIdx.setStatus("current")


class _AgnDlciTxBc_Type(Integer32):
    """Custom type agnDlciTxBc based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("txBc1024Kbps", 25),
          ("txBc112Kbps", 37),
          ("txBc1152Kbps", 26),
          ("txBc1280Kbps", 27),
          ("txBc128Kbps", 16),
          ("txBc1344Kbps", 28),
          ("txBc14400bps", 7),
          ("txBc1472Kbps", 29),
          ("txBc1536Kbps", 42),
          ("txBc16000bps", 36),
          ("txBc1600Kbps", 30),
          ("txBc168Kbps", 38),
          ("txBc1728Kbps", 31),
          ("txBc1792Kbps", 43),
          ("txBc1856Kbps", 32),
          ("txBc19200bps", 8),
          ("txBc1920Kbps", 33),
          ("txBc192Kbps", 17),
          ("txBc1984Kbps", 34),
          ("txBc2048Kbps", 35),
          ("txBc224Kbps", 39),
          ("txBc256Kbps", 18),
          ("txBc28800bps", 9),
          ("txBc32000bps", 10),
          ("txBc320Kbps", 19),
          ("txBc336Kbps", 40),
          ("txBc38400bps", 11),
          ("txBc384Kbps", 20),
          ("txBc448Kbps", 21),
          ("txBc48000bps", 12),
          ("txBc5100bps", 3),
          ("txBc512Kbps", 22),
          ("txBc56000bps", 13),
          ("txBc57600bps", 14),
          ("txBc6400bps", 4),
          ("txBc64Kbps", 15),
          ("txBc672Kbps", 41),
          ("txBc768Kbps", 23),
          ("txBc8300bps", 5),
          ("txBc896Kbps", 24),
          ("txBc9600bps", 6),
          ("zero", 2))
    )


_AgnDlciTxBc_Type.__name__ = "Integer32"
_AgnDlciTxBc_Object = MibTableColumn
agnDlciTxBc = _AgnDlciTxBc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 8),
    _AgnDlciTxBc_Type()
)
agnDlciTxBc.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnDlciTxBc.setStatus("current")


class _AgnDlciTxBe_Type(Integer32):
    """Custom type agnDlciTxBe based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("txBe1024Kbps", 25),
          ("txBe112Kbps", 37),
          ("txBe1152Kbps", 26),
          ("txBe1280Kbps", 27),
          ("txBe128Kbps", 16),
          ("txBe1344Kbps", 28),
          ("txBe14400bps", 7),
          ("txBe1472Kbps", 29),
          ("txBe1536Kbps", 42),
          ("txBe16000bps", 36),
          ("txBe1600Kbps", 30),
          ("txBe168Kbps", 38),
          ("txBe1728Kbps", 31),
          ("txBe1792Kbps", 43),
          ("txBe1856Kbps", 32),
          ("txBe19200bps", 8),
          ("txBe1920Kbps", 33),
          ("txBe192Kbps", 17),
          ("txBe1984Kbps", 34),
          ("txBe2048Kbps", 35),
          ("txBe224Kbps", 39),
          ("txBe256Kbps", 18),
          ("txBe28800bps", 9),
          ("txBe32000bps", 10),
          ("txBe320Kbps", 19),
          ("txBe336Kbps", 40),
          ("txBe38400bps", 11),
          ("txBe384Kbps", 20),
          ("txBe448Kbps", 21),
          ("txBe48000bps", 12),
          ("txBe5100bps", 3),
          ("txBe512Kbps", 22),
          ("txBe56000bps", 13),
          ("txBe57600bps", 14),
          ("txBe6400bps", 4),
          ("txBe64Kbps", 15),
          ("txBe672Kbps", 41),
          ("txBe768Kbps", 23),
          ("txBe8300bps", 5),
          ("txBe896Kbps", 24),
          ("txBe9600bps", 6),
          ("zero", 2))
    )


_AgnDlciTxBe_Type.__name__ = "Integer32"
_AgnDlciTxBe_Object = MibTableColumn
agnDlciTxBe = _AgnDlciTxBe_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 9),
    _AgnDlciTxBe_Type()
)
agnDlciTxBe.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnDlciTxBe.setStatus("current")


class _AgnDlciRxBc_Type(Integer32):
    """Custom type agnDlciRxBc based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("rxBc1024Kbps", 25),
          ("rxBc112Kbps", 37),
          ("rxBc1152Kbps", 26),
          ("rxBc1280Kbps", 27),
          ("rxBc128Kbps", 16),
          ("rxBc1344Kbps", 28),
          ("rxBc14400bps", 7),
          ("rxBc1472Kbps", 29),
          ("rxBc1536Kbps", 42),
          ("rxBc16000bps", 36),
          ("rxBc1600Kbps", 30),
          ("rxBc168Kbps", 38),
          ("rxBc1728Kbps", 31),
          ("rxBc1792Kbps", 43),
          ("rxBc1856Kbps", 32),
          ("rxBc19200bps", 8),
          ("rxBc1920Kbps", 33),
          ("rxBc192Kbps", 17),
          ("rxBc1984Kbps", 34),
          ("rxBc2048Kbps", 35),
          ("rxBc224Kbps", 39),
          ("rxBc256Kbps", 18),
          ("rxBc28800bps", 9),
          ("rxBc32000bps", 10),
          ("rxBc320Kbps", 19),
          ("rxBc336Kbps", 40),
          ("rxBc38400bps", 11),
          ("rxBc384Kbps", 20),
          ("rxBc448Kbps", 21),
          ("rxBc48000bps", 12),
          ("rxBc5100bps", 3),
          ("rxBc512Kbps", 22),
          ("rxBc56000bps", 13),
          ("rxBc57600bps", 14),
          ("rxBc6400bps", 4),
          ("rxBc64Kbps", 15),
          ("rxBc672Kbps", 41),
          ("rxBc768Kbps", 23),
          ("rxBc8300bps", 5),
          ("rxBc896Kbps", 24),
          ("rxBc9600bps", 6),
          ("zero", 2))
    )


_AgnDlciRxBc_Type.__name__ = "Integer32"
_AgnDlciRxBc_Object = MibTableColumn
agnDlciRxBc = _AgnDlciRxBc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 10),
    _AgnDlciRxBc_Type()
)
agnDlciRxBc.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnDlciRxBc.setStatus("current")


class _AgnDlciRxBe_Type(Integer32):
    """Custom type agnDlciRxBe based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("rxBe1024Kbps", 25),
          ("rxBe112Kbps", 37),
          ("rxBe1152Kbps", 26),
          ("rxBe1280Kbps", 27),
          ("rxBe128Kbps", 16),
          ("rxBe1344Kbps", 28),
          ("rxBe14400bps", 7),
          ("rxBe1472Kbps", 29),
          ("rxBe1536Kbps", 42),
          ("rxBe16000bps", 36),
          ("rxBe1600Kbps", 30),
          ("rxBe168Kbps", 38),
          ("rxBe1728Kbps", 31),
          ("rxBe1792Kbps", 43),
          ("rxBe1856Kbps", 32),
          ("rxBe19200bps", 8),
          ("rxBe1920Kbps", 33),
          ("rxBe192Kbps", 17),
          ("rxBe1984Kbps", 34),
          ("rxBe2048Kbps", 35),
          ("rxBe224Kbps", 39),
          ("rxBe256Kbps", 18),
          ("rxBe28800bps", 9),
          ("rxBe32000bps", 10),
          ("rxBe320Kbps", 19),
          ("rxBe336Kbps", 40),
          ("rxBe38400bps", 11),
          ("rxBe384Kbps", 20),
          ("rxBe448Kbps", 21),
          ("rxBe48000bps", 12),
          ("rxBe5100bps", 3),
          ("rxBe512Kbps", 22),
          ("rxBe56000bps", 13),
          ("rxBe57600bps", 14),
          ("rxBe6400bps", 4),
          ("rxBe64Kbps", 15),
          ("rxBe672Kbps", 41),
          ("rxBe768Kbps", 23),
          ("rxBe8300bps", 5),
          ("rxBe896Kbps", 24),
          ("rxBe9600bps", 6),
          ("zero", 2))
    )


_AgnDlciRxBe_Type.__name__ = "Integer32"
_AgnDlciRxBe_Object = MibTableColumn
agnDlciRxBe = _AgnDlciRxBe_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 11),
    _AgnDlciRxBe_Type()
)
agnDlciRxBe.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnDlciRxBe.setStatus("current")


class _AgnDlciPriority_Type(Integer32):
    """Custom type agnDlciPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_AgnDlciPriority_Type.__name__ = "Integer32"
_AgnDlciPriority_Object = MibTableColumn
agnDlciPriority = _AgnDlciPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 12),
    _AgnDlciPriority_Type()
)
agnDlciPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnDlciPriority.setStatus("current")


class _AgnDlciStatus_Type(Integer32):
    """Custom type agnDlciStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("connected", 2),
          ("disconnected", 1))
    )


_AgnDlciStatus_Type.__name__ = "Integer32"
_AgnDlciStatus_Object = MibTableColumn
agnDlciStatus = _AgnDlciStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 13),
    _AgnDlciStatus_Type()
)
agnDlciStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDlciStatus.setStatus("current")


class _AgnDlciSpoofing_Type(Integer32):
    """Custom type agnDlciSpoofing based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_AgnDlciSpoofing_Type.__name__ = "Integer32"
_AgnDlciSpoofing_Object = MibTableColumn
agnDlciSpoofing = _AgnDlciSpoofing_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 14),
    _AgnDlciSpoofing_Type()
)
agnDlciSpoofing.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnDlciSpoofing.setStatus("current")


class _AgnDlciFunnelEnable_Type(Integer32):
    """Custom type agnDlciFunnelEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("destination", 5),
          ("disabled", 2),
          ("enabled", 3),
          ("source", 4))
    )


_AgnDlciFunnelEnable_Type.__name__ = "Integer32"
_AgnDlciFunnelEnable_Object = MibTableColumn
agnDlciFunnelEnable = _AgnDlciFunnelEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 15),
    _AgnDlciFunnelEnable_Type()
)
agnDlciFunnelEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnDlciFunnelEnable.setStatus("current")


class _AgnDlciRoutingProtocol_Type(Integer32):
    """Custom type agnDlciRoutingProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 4),
          ("notApplicable", 1),
          ("rip", 2),
          ("rip2", 3))
    )


_AgnDlciRoutingProtocol_Type.__name__ = "Integer32"
_AgnDlciRoutingProtocol_Object = MibTableColumn
agnDlciRoutingProtocol = _AgnDlciRoutingProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 16),
    _AgnDlciRoutingProtocol_Type()
)
agnDlciRoutingProtocol.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnDlciRoutingProtocol.setStatus("current")
_AgnDlciRowStatus_Type = RowStatus
_AgnDlciRowStatus_Object = MibTableColumn
agnDlciRowStatus = _AgnDlciRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 17),
    _AgnDlciRowStatus_Type()
)
agnDlciRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnDlciRowStatus.setStatus("current")
_AgnVoiceSwitching_ObjectIdentity = ObjectIdentity
agnVoiceSwitching = _AgnVoiceSwitching_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9)
)
_AgnVoiceSwConfTable_Object = MibTable
agnVoiceSwConfTable = _AgnVoiceSwConfTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 1)
)
if mibBuilder.loadTexts:
    agnVoiceSwConfTable.setStatus("current")
_AgnVoiceSwConfEntry_Object = MibTableRow
agnVoiceSwConfEntry = _AgnVoiceSwConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 1, 1)
)
agnVoiceSwConfEntry.setIndexNames(
    (0, "RAD-MIB", "agnVoiceSwConfIdx"),
)
if mibBuilder.loadTexts:
    agnVoiceSwConfEntry.setStatus("current")


class _AgnVoiceSwConfIdx_Type(Integer32):
    """Custom type agnVoiceSwConfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("temporary", 255))
    )


_AgnVoiceSwConfIdx_Type.__name__ = "Integer32"
_AgnVoiceSwConfIdx_Object = MibTableColumn
agnVoiceSwConfIdx = _AgnVoiceSwConfIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 1, 1, 1),
    _AgnVoiceSwConfIdx_Type()
)
agnVoiceSwConfIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnVoiceSwConfIdx.setStatus("current")


class _AgnVoiceSwConfZoneId_Type(DisplayString):
    """Custom type agnVoiceSwConfZoneId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 2),
    )


_AgnVoiceSwConfZoneId_Type.__name__ = "DisplayString"
_AgnVoiceSwConfZoneId_Object = MibTableColumn
agnVoiceSwConfZoneId = _AgnVoiceSwConfZoneId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 1, 1, 2),
    _AgnVoiceSwConfZoneId_Type()
)
agnVoiceSwConfZoneId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfZoneId.setStatus("current")


class _AgnVoiceSwConfNodeId_Type(DisplayString):
    """Custom type agnVoiceSwConfNodeId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 3),
    )


_AgnVoiceSwConfNodeId_Type.__name__ = "DisplayString"
_AgnVoiceSwConfNodeId_Object = MibTableColumn
agnVoiceSwConfNodeId = _AgnVoiceSwConfNodeId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 1, 1, 3),
    _AgnVoiceSwConfNodeId_Type()
)
agnVoiceSwConfNodeId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfNodeId.setStatus("current")


class _AgnVoiceSwConfNoOfHops_Type(Integer32):
    """Custom type agnVoiceSwConfNoOfHops based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_AgnVoiceSwConfNoOfHops_Type.__name__ = "Integer32"
_AgnVoiceSwConfNoOfHops_Object = MibTableColumn
agnVoiceSwConfNoOfHops = _AgnVoiceSwConfNoOfHops_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 1, 1, 4),
    _AgnVoiceSwConfNoOfHops_Type()
)
agnVoiceSwConfNoOfHops.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfNoOfHops.setStatus("current")


class _AgnVoiceSwConfSidt_Type(Integer32):
    """Custom type agnVoiceSwConfSidt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30),
    )


_AgnVoiceSwConfSidt_Type.__name__ = "Integer32"
_AgnVoiceSwConfSidt_Object = MibTableColumn
agnVoiceSwConfSidt = _AgnVoiceSwConfSidt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 1, 1, 5),
    _AgnVoiceSwConfSidt_Type()
)
agnVoiceSwConfSidt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfSidt.setStatus("current")


class _AgnVoiceSwConfLidt_Type(Integer32):
    """Custom type agnVoiceSwConfLidt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30),
    )


_AgnVoiceSwConfLidt_Type.__name__ = "Integer32"
_AgnVoiceSwConfLidt_Object = MibTableColumn
agnVoiceSwConfLidt = _AgnVoiceSwConfLidt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 1, 1, 6),
    _AgnVoiceSwConfLidt_Type()
)
agnVoiceSwConfLidt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfLidt.setStatus("current")


class _AgnVoiceSwConfDialPlan_Type(Integer32):
    """Custom type agnVoiceSwConfDialPlan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("flexDialPlan", 4),
          ("staticDialPlan", 2),
          ("staticDialPlanPlus", 3))
    )


_AgnVoiceSwConfDialPlan_Type.__name__ = "Integer32"
_AgnVoiceSwConfDialPlan_Object = MibTableColumn
agnVoiceSwConfDialPlan = _AgnVoiceSwConfDialPlan_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 1, 1, 7),
    _AgnVoiceSwConfDialPlan_Type()
)
agnVoiceSwConfDialPlan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfDialPlan.setStatus("current")
_AgnVoiceSwConfRtTable_Object = MibTable
agnVoiceSwConfRtTable = _AgnVoiceSwConfRtTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2)
)
if mibBuilder.loadTexts:
    agnVoiceSwConfRtTable.setStatus("current")
_AgnVoiceSwConfRtEntry_Object = MibTableRow
agnVoiceSwConfRtEntry = _AgnVoiceSwConfRtEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1)
)
agnVoiceSwConfRtEntry.setIndexNames(
    (0, "RAD-MIB", "agnVoiceSwConfRtDbId"),
    (0, "RAD-MIB", "agnVoiceSwConfRtIdx"),
)
if mibBuilder.loadTexts:
    agnVoiceSwConfRtEntry.setStatus("current")


class _AgnVoiceSwConfRtDbId_Type(Integer32):
    """Custom type agnVoiceSwConfRtDbId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("temporary", 255))
    )


_AgnVoiceSwConfRtDbId_Type.__name__ = "Integer32"
_AgnVoiceSwConfRtDbId_Object = MibTableColumn
agnVoiceSwConfRtDbId = _AgnVoiceSwConfRtDbId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 1),
    _AgnVoiceSwConfRtDbId_Type()
)
agnVoiceSwConfRtDbId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnVoiceSwConfRtDbId.setStatus("current")
_AgnVoiceSwConfRtIdx_Type = Integer32
_AgnVoiceSwConfRtIdx_Object = MibTableColumn
agnVoiceSwConfRtIdx = _AgnVoiceSwConfRtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 2),
    _AgnVoiceSwConfRtIdx_Type()
)
agnVoiceSwConfRtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnVoiceSwConfRtIdx.setStatus("current")


class _AgnVoiceSwConfRtDigits_Type(DisplayString):
    """Custom type agnVoiceSwConfRtDigits based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 7),
    )


_AgnVoiceSwConfRtDigits_Type.__name__ = "DisplayString"
_AgnVoiceSwConfRtDigits_Object = MibTableColumn
agnVoiceSwConfRtDigits = _AgnVoiceSwConfRtDigits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 3),
    _AgnVoiceSwConfRtDigits_Type()
)
agnVoiceSwConfRtDigits.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnVoiceSwConfRtDigits.setStatus("current")


class _AgnVoiceSwConfRtAction_Type(Integer32):
    """Custom type agnVoiceSwConfRtAction based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("bri", 10),
          ("del", 7),
          ("ext", 13),
          ("hgr", 6),
          ("in", 5),
          ("node", 3),
          ("notApplicable", 1),
          ("numDigDP", 11),
          ("pri", 9),
          ("rep", 8),
          ("route", 12),
          ("shortDialing", 4),
          ("zone", 2))
    )


_AgnVoiceSwConfRtAction_Type.__name__ = "Integer32"
_AgnVoiceSwConfRtAction_Object = MibTableColumn
agnVoiceSwConfRtAction = _AgnVoiceSwConfRtAction_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 4),
    _AgnVoiceSwConfRtAction_Type()
)
agnVoiceSwConfRtAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnVoiceSwConfRtAction.setStatus("current")


class _AgnVoiceSwConfRtData_Type(DisplayString):
    """Custom type agnVoiceSwConfRtData based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 7),
    )


_AgnVoiceSwConfRtData_Type.__name__ = "DisplayString"
_AgnVoiceSwConfRtData_Object = MibTableColumn
agnVoiceSwConfRtData = _AgnVoiceSwConfRtData_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 5),
    _AgnVoiceSwConfRtData_Type()
)
agnVoiceSwConfRtData.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnVoiceSwConfRtData.setStatus("current")


class _AgnVoiceSwConfRtSlot_Type(Integer32):
    """Custom type agnVoiceSwConfRtSlot based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("cl", 3),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("noConnect", 2),
          ("notApplicable", 255))
    )


_AgnVoiceSwConfRtSlot_Type.__name__ = "Integer32"
_AgnVoiceSwConfRtSlot_Object = MibTableColumn
agnVoiceSwConfRtSlot = _AgnVoiceSwConfRtSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 6),
    _AgnVoiceSwConfRtSlot_Type()
)
agnVoiceSwConfRtSlot.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnVoiceSwConfRtSlot.setStatus("current")


class _AgnVoiceSwConfRtPort_Type(Integer32):
    """Custom type agnVoiceSwConfRtPort based on Integer32"""
    defaultValue = 0


_AgnVoiceSwConfRtPort_Object = MibTableColumn
agnVoiceSwConfRtPort = _AgnVoiceSwConfRtPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 7),
    _AgnVoiceSwConfRtPort_Type()
)
agnVoiceSwConfRtPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnVoiceSwConfRtPort.setStatus("current")


class _AgnVoiceSwConfRtDlci_Type(Integer32):
    """Custom type agnVoiceSwConfRtDlci based on Integer32"""
    defaultValue = 15


_AgnVoiceSwConfRtDlci_Object = MibTableColumn
agnVoiceSwConfRtDlci = _AgnVoiceSwConfRtDlci_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 8),
    _AgnVoiceSwConfRtDlci_Type()
)
agnVoiceSwConfRtDlci.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnVoiceSwConfRtDlci.setStatus("current")
_AgnVoiceSwConfRtRowStatus_Type = RowStatus
_AgnVoiceSwConfRtRowStatus_Object = MibTableColumn
agnVoiceSwConfRtRowStatus = _AgnVoiceSwConfRtRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 9),
    _AgnVoiceSwConfRtRowStatus_Type()
)
agnVoiceSwConfRtRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnVoiceSwConfRtRowStatus.setStatus("current")
_AgnVoiceSwConfRtMaxCalls_Type = Integer32
_AgnVoiceSwConfRtMaxCalls_Object = MibTableColumn
agnVoiceSwConfRtMaxCalls = _AgnVoiceSwConfRtMaxCalls_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 10),
    _AgnVoiceSwConfRtMaxCalls_Type()
)
agnVoiceSwConfRtMaxCalls.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnVoiceSwConfRtMaxCalls.setStatus("current")
_AgnVoiceSwConfRtPriority_Type = Integer32
_AgnVoiceSwConfRtPriority_Object = MibTableColumn
agnVoiceSwConfRtPriority = _AgnVoiceSwConfRtPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 11),
    _AgnVoiceSwConfRtPriority_Type()
)
agnVoiceSwConfRtPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnVoiceSwConfRtPriority.setStatus("current")
_AgnVoiceSwConfHGTable_Object = MibTable
agnVoiceSwConfHGTable = _AgnVoiceSwConfHGTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 5)
)
if mibBuilder.loadTexts:
    agnVoiceSwConfHGTable.setStatus("current")
_AgnVoiceSwConfHGEntry_Object = MibTableRow
agnVoiceSwConfHGEntry = _AgnVoiceSwConfHGEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 5, 1)
)
agnVoiceSwConfHGEntry.setIndexNames(
    (0, "RAD-MIB", "agnVoiceSwConfHGdbIdx"),
    (0, "RAD-MIB", "agnVoiceSwConfHGIdx"),
)
if mibBuilder.loadTexts:
    agnVoiceSwConfHGEntry.setStatus("current")


class _AgnVoiceSwConfHGdbIdx_Type(Integer32):
    """Custom type agnVoiceSwConfHGdbIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              255)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("temporary", 255))
    )


_AgnVoiceSwConfHGdbIdx_Type.__name__ = "Integer32"
_AgnVoiceSwConfHGdbIdx_Object = MibTableColumn
agnVoiceSwConfHGdbIdx = _AgnVoiceSwConfHGdbIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 5, 1, 1),
    _AgnVoiceSwConfHGdbIdx_Type()
)
agnVoiceSwConfHGdbIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnVoiceSwConfHGdbIdx.setStatus("current")
_AgnVoiceSwConfHGIdx_Type = Integer32
_AgnVoiceSwConfHGIdx_Object = MibTableColumn
agnVoiceSwConfHGIdx = _AgnVoiceSwConfHGIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 5, 1, 2),
    _AgnVoiceSwConfHGIdx_Type()
)
agnVoiceSwConfHGIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnVoiceSwConfHGIdx.setStatus("current")


class _AgnVoiceSwConfHGConnect_Type(Integer32):
    """Custom type agnVoiceSwConfHGConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_AgnVoiceSwConfHGConnect_Type.__name__ = "Integer32"
_AgnVoiceSwConfHGConnect_Object = MibTableColumn
agnVoiceSwConfHGConnect = _AgnVoiceSwConfHGConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 5, 1, 3),
    _AgnVoiceSwConfHGConnect_Type()
)
agnVoiceSwConfHGConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfHGConnect.setStatus("current")


class _AgnVoiceSwConfHGExt_Type(Integer32):
    """Custom type agnVoiceSwConfHGExt based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_AgnVoiceSwConfHGExt_Type.__name__ = "Integer32"
_AgnVoiceSwConfHGExt_Object = MibTableColumn
agnVoiceSwConfHGExt = _AgnVoiceSwConfHGExt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 5, 1, 4),
    _AgnVoiceSwConfHGExt_Type()
)
agnVoiceSwConfHGExt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfHGExt.setStatus("current")
_AgnVoiceSwConfHGExtString_Type = SnmpAdminString
_AgnVoiceSwConfHGExtString_Object = MibTableColumn
agnVoiceSwConfHGExtString = _AgnVoiceSwConfHGExtString_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 5, 1, 5),
    _AgnVoiceSwConfHGExtString_Type()
)
agnVoiceSwConfHGExtString.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfHGExtString.setStatus("current")
_AgnVoiceSwConfHGUserParams_Type = SnmpAdminString
_AgnVoiceSwConfHGUserParams_Object = MibTableColumn
agnVoiceSwConfHGUserParams = _AgnVoiceSwConfHGUserParams_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 5, 1, 6),
    _AgnVoiceSwConfHGUserParams_Type()
)
agnVoiceSwConfHGUserParams.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfHGUserParams.setStatus("current")


class _AgnVoiceSwConfHGStatus_Type(Integer32):
    """Custom type agnVoiceSwConfHGStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              255)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("createAndGo", 4),
          ("createAndWait", 5),
          ("destroy", 6),
          ("notApplicable", 255),
          ("notInService", 2),
          ("notReady", 3))
    )


_AgnVoiceSwConfHGStatus_Type.__name__ = "Integer32"
_AgnVoiceSwConfHGStatus_Object = MibTableColumn
agnVoiceSwConfHGStatus = _AgnVoiceSwConfHGStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 5, 1, 7),
    _AgnVoiceSwConfHGStatus_Type()
)
agnVoiceSwConfHGStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnVoiceSwConfHGStatus.setStatus("current")
_AgnSigProfile_ObjectIdentity = ObjectIdentity
agnSigProfile = _AgnSigProfile_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10)
)
_AgnSigProfileTable_Object = MibTable
agnSigProfileTable = _AgnSigProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 1)
)
if mibBuilder.loadTexts:
    agnSigProfileTable.setStatus("current")
_AgnSigProfileEntry_Object = MibTableRow
agnSigProfileEntry = _AgnSigProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 1, 1)
)
agnSigProfileEntry.setIndexNames(
    (0, "RAD-MIB", "agnSigProfileCnfgIdx"),
    (0, "RAD-MIB", "agnSigProfileIdx"),
    (0, "RAD-MIB", "agnSigProfileRxTx"),
)
if mibBuilder.loadTexts:
    agnSigProfileEntry.setStatus("current")
_AgnSigProfileCnfgIdx_Type = Integer32
_AgnSigProfileCnfgIdx_Object = MibTableColumn
agnSigProfileCnfgIdx = _AgnSigProfileCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 1, 1, 1),
    _AgnSigProfileCnfgIdx_Type()
)
agnSigProfileCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSigProfileCnfgIdx.setStatus("current")


class _AgnSigProfileIdx_Type(Integer32):
    """Custom type agnSigProfileIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )


_AgnSigProfileIdx_Type.__name__ = "Integer32"
_AgnSigProfileIdx_Object = MibTableColumn
agnSigProfileIdx = _AgnSigProfileIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 1, 1, 2),
    _AgnSigProfileIdx_Type()
)
agnSigProfileIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSigProfileIdx.setStatus("current")


class _AgnSigProfileRxTx_Type(Integer32):
    """Custom type agnSigProfileRxTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("rx", 1),
          ("tx", 2))
    )


_AgnSigProfileRxTx_Type.__name__ = "Integer32"
_AgnSigProfileRxTx_Object = MibTableColumn
agnSigProfileRxTx = _AgnSigProfileRxTx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 1, 1, 3),
    _AgnSigProfileRxTx_Type()
)
agnSigProfileRxTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSigProfileRxTx.setStatus("current")
_AgnSigProfileABCD_Type = OctetString
_AgnSigProfileABCD_Object = MibTableColumn
agnSigProfileABCD = _AgnSigProfileABCD_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 1, 1, 4),
    _AgnSigProfileABCD_Type()
)
agnSigProfileABCD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnSigProfileABCD.setStatus("current")
_AgnSigProfTable_Object = MibTable
agnSigProfTable = _AgnSigProfTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 2)
)
if mibBuilder.loadTexts:
    agnSigProfTable.setStatus("current")
_AgnSigProfEntry_Object = MibTableRow
agnSigProfEntry = _AgnSigProfEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 2, 1)
)
agnSigProfEntry.setIndexNames(
    (0, "RAD-MIB", "agnSigProfCnfgIdx"),
    (0, "RAD-MIB", "agnSigProfIdx"),
)
if mibBuilder.loadTexts:
    agnSigProfEntry.setStatus("current")


class _AgnSigProfCnfgIdx_Type(Integer32):
    """Custom type agnSigProfCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_AgnSigProfCnfgIdx_Type.__name__ = "Integer32"
_AgnSigProfCnfgIdx_Object = MibTableColumn
agnSigProfCnfgIdx = _AgnSigProfCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 2, 1, 1),
    _AgnSigProfCnfgIdx_Type()
)
agnSigProfCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSigProfCnfgIdx.setStatus("current")


class _AgnSigProfIdx_Type(Integer32):
    """Custom type agnSigProfIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )


_AgnSigProfIdx_Type.__name__ = "Integer32"
_AgnSigProfIdx_Object = MibTableColumn
agnSigProfIdx = _AgnSigProfIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 2, 1, 2),
    _AgnSigProfIdx_Type()
)
agnSigProfIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSigProfIdx.setStatus("current")


class _AgnSigProfName_Type(DisplayString):
    """Custom type agnSigProfName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 12),
    )


_AgnSigProfName_Type.__name__ = "DisplayString"
_AgnSigProfName_Object = MibTableColumn
agnSigProfName = _AgnSigProfName_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 2, 1, 3),
    _AgnSigProfName_Type()
)
agnSigProfName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnSigProfName.setStatus("current")


class _AgnSigProfType_Type(Integer32):
    """Custom type agnSigProfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("legacy", 2),
          ("notApplicable", 1),
          ("r2Cas", 3))
    )


_AgnSigProfType_Type.__name__ = "Integer32"
_AgnSigProfType_Object = MibTableColumn
agnSigProfType = _AgnSigProfType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 2, 1, 4),
    _AgnSigProfType_Type()
)
agnSigProfType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnSigProfType.setStatus("current")
_AgnSystemTs_ObjectIdentity = ObjectIdentity
agnSystemTs = _AgnSystemTs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11)
)
_SystemVoice_ObjectIdentity = ObjectIdentity
systemVoice = _SystemVoice_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 12)
)
_SystemVoiceTable_Object = MibTable
systemVoiceTable = _SystemVoiceTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 12, 1)
)
if mibBuilder.loadTexts:
    systemVoiceTable.setStatus("current")
_SystemVoiceEntry_Object = MibTableRow
systemVoiceEntry = _SystemVoiceEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 12, 1, 1)
)
systemVoiceEntry.setIndexNames(
    (0, "RAD-MIB", "systemVoiceConfIdx"),
)
if mibBuilder.loadTexts:
    systemVoiceEntry.setStatus("current")
_SystemVoiceConfIdx_Type = Integer32
_SystemVoiceConfIdx_Object = MibTableColumn
systemVoiceConfIdx = _SystemVoiceConfIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 12, 1, 1, 1),
    _SystemVoiceConfIdx_Type()
)
systemVoiceConfIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemVoiceConfIdx.setStatus("current")


class _SystemVoiceNationalTone_Type(Integer32):
    """Custom type systemVoiceNationalTone based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15)
        )
    )
    namedValues = NamedValues(
        *(("australia", 3),
          ("brazil", 4),
          ("canada", 5),
          ("china", 15),
          ("czech", 14),
          ("france", 6),
          ("germany", 7),
          ("israel", 8),
          ("mexico", 9),
          ("notApplicable", 1),
          ("portugal", 10),
          ("russia", 11),
          ("spain", 12),
          ("unitedKingdom", 13),
          ("usa", 2))
    )


_SystemVoiceNationalTone_Type.__name__ = "Integer32"
_SystemVoiceNationalTone_Object = MibTableColumn
systemVoiceNationalTone = _SystemVoiceNationalTone_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 12, 1, 1, 2),
    _SystemVoiceNationalTone_Type()
)
systemVoiceNationalTone.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemVoiceNationalTone.setStatus("current")
_SystemVoicePacketRate_Type = Unsigned32
_SystemVoicePacketRate_Object = MibTableColumn
systemVoicePacketRate = _SystemVoicePacketRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 12, 1, 1, 3),
    _SystemVoicePacketRate_Type()
)
systemVoicePacketRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemVoicePacketRate.setStatus("current")


class _SystemVoiceFaxSupport_Type(Integer32):
    """Custom type systemVoiceFaxSupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("faxRelayT38", 3),
          ("notApplicable", 1),
          ("vbdPassThrou", 4))
    )


_SystemVoiceFaxSupport_Type.__name__ = "Integer32"
_SystemVoiceFaxSupport_Object = MibTableColumn
systemVoiceFaxSupport = _SystemVoiceFaxSupport_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 12, 1, 1, 4),
    _SystemVoiceFaxSupport_Type()
)
systemVoiceFaxSupport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemVoiceFaxSupport.setStatus("current")


class _SystemVoiceFaxRate_Type(Integer32):
    """Custom type systemVoiceFaxRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              6)
        )
    )
    namedValues = NamedValues(
        *(("notConnected", 1),
          ("r14400bps", 6),
          ("r4800bps", 2),
          ("r9600bps", 4))
    )


_SystemVoiceFaxRate_Type.__name__ = "Integer32"
_SystemVoiceFaxRate_Object = MibTableColumn
systemVoiceFaxRate = _SystemVoiceFaxRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 12, 1, 1, 5),
    _SystemVoiceFaxRate_Type()
)
systemVoiceFaxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemVoiceFaxRate.setStatus("current")


class _SystemVoiceModemSupport_Type(Integer32):
    """Custom type systemVoiceModemSupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("notApplicable", 1),
          ("vbdPassThrou", 4),
          ("vbdV152", 3))
    )


_SystemVoiceModemSupport_Type.__name__ = "Integer32"
_SystemVoiceModemSupport_Object = MibTableColumn
systemVoiceModemSupport = _SystemVoiceModemSupport_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 12, 1, 1, 6),
    _SystemVoiceModemSupport_Type()
)
systemVoiceModemSupport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemVoiceModemSupport.setStatus("current")


class _SystemVoiceCoderAndRate_Type(Integer32):
    """Custom type systemVoiceCoderAndRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("g711aLAW", 5),
          ("g711uLAW", 6),
          ("notApplicable", 1))
    )


_SystemVoiceCoderAndRate_Type.__name__ = "Integer32"
_SystemVoiceCoderAndRate_Object = MibTableColumn
systemVoiceCoderAndRate = _SystemVoiceCoderAndRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 12, 1, 1, 7),
    _SystemVoiceCoderAndRate_Type()
)
systemVoiceCoderAndRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemVoiceCoderAndRate.setStatus("current")


class _SystemVoiceEchoCanceler_Type(Integer32):
    """Custom type systemVoiceEchoCanceler based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_SystemVoiceEchoCanceler_Type.__name__ = "Integer32"
_SystemVoiceEchoCanceler_Object = MibTableColumn
systemVoiceEchoCanceler = _SystemVoiceEchoCanceler_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 12, 1, 1, 8),
    _SystemVoiceEchoCanceler_Type()
)
systemVoiceEchoCanceler.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemVoiceEchoCanceler.setStatus("current")
_SystemVoiceTxGain_Type = Integer32
_SystemVoiceTxGain_Object = MibTableColumn
systemVoiceTxGain = _SystemVoiceTxGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 12, 1, 1, 9),
    _SystemVoiceTxGain_Type()
)
systemVoiceTxGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemVoiceTxGain.setStatus("current")


class _SystemVoiceDtmfRelayMethod_Type(Integer32):
    """Custom type systemVoiceDtmfRelayMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("rfc2833", 1),
          ("sipInfo", 2))
    )


_SystemVoiceDtmfRelayMethod_Type.__name__ = "Integer32"
_SystemVoiceDtmfRelayMethod_Object = MibTableColumn
systemVoiceDtmfRelayMethod = _SystemVoiceDtmfRelayMethod_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 12, 1, 1, 10),
    _SystemVoiceDtmfRelayMethod_Type()
)
systemVoiceDtmfRelayMethod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemVoiceDtmfRelayMethod.setStatus("current")
_SystemVoiceDtmfRelayRxPayloadType_Type = Unsigned32
_SystemVoiceDtmfRelayRxPayloadType_Object = MibTableColumn
systemVoiceDtmfRelayRxPayloadType = _SystemVoiceDtmfRelayRxPayloadType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 12, 1, 1, 11),
    _SystemVoiceDtmfRelayRxPayloadType_Type()
)
systemVoiceDtmfRelayRxPayloadType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemVoiceDtmfRelayRxPayloadType.setStatus("current")


class _SystemVoiceDtmfRelayPayloadTypeNeg_Type(Integer32):
    """Custom type systemVoiceDtmfRelayPayloadTypeNeg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_SystemVoiceDtmfRelayPayloadTypeNeg_Type.__name__ = "Integer32"
_SystemVoiceDtmfRelayPayloadTypeNeg_Object = MibTableColumn
systemVoiceDtmfRelayPayloadTypeNeg = _SystemVoiceDtmfRelayPayloadTypeNeg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 12, 1, 1, 12),
    _SystemVoiceDtmfRelayPayloadTypeNeg_Type()
)
systemVoiceDtmfRelayPayloadTypeNeg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemVoiceDtmfRelayPayloadTypeNeg.setStatus("current")
_SystemVoiceDtmfRelayTxPayloadType_Type = Unsigned32
_SystemVoiceDtmfRelayTxPayloadType_Object = MibTableColumn
systemVoiceDtmfRelayTxPayloadType = _SystemVoiceDtmfRelayTxPayloadType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 12, 1, 1, 13),
    _SystemVoiceDtmfRelayTxPayloadType_Type()
)
systemVoiceDtmfRelayTxPayloadType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemVoiceDtmfRelayTxPayloadType.setStatus("current")
_SystemVoiceCoderTable_Object = MibTable
systemVoiceCoderTable = _SystemVoiceCoderTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 12, 2)
)
if mibBuilder.loadTexts:
    systemVoiceCoderTable.setStatus("current")
_SystemVoiceCoderEntry_Object = MibTableRow
systemVoiceCoderEntry = _SystemVoiceCoderEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 12, 2, 1)
)
systemVoiceCoderEntry.setIndexNames(
    (0, "RAD-MIB", "systemVoiceCoderConfIdx"),
    (0, "RAD-MIB", "systemVoiceCoderPriority"),
)
if mibBuilder.loadTexts:
    systemVoiceCoderEntry.setStatus("current")
_SystemVoiceCoderConfIdx_Type = Unsigned32
_SystemVoiceCoderConfIdx_Object = MibTableColumn
systemVoiceCoderConfIdx = _SystemVoiceCoderConfIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 12, 2, 1, 1),
    _SystemVoiceCoderConfIdx_Type()
)
systemVoiceCoderConfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    systemVoiceCoderConfIdx.setStatus("current")
_SystemVoiceCoderPriority_Type = Unsigned32
_SystemVoiceCoderPriority_Object = MibTableColumn
systemVoiceCoderPriority = _SystemVoiceCoderPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 12, 2, 1, 2),
    _SystemVoiceCoderPriority_Type()
)
systemVoiceCoderPriority.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    systemVoiceCoderPriority.setStatus("current")


class _SystemVoiceCoderCoderAndRate_Type(Integer32):
    """Custom type systemVoiceCoderCoderAndRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              255)
        )
    )
    namedValues = NamedValues(
        *(("g711aLAW", 5),
          ("g711uLAW", 6),
          ("g7231r5300BPS", 3),
          ("g7231r6300BPS", 2),
          ("g729A8KBPS", 4),
          ("none", 255),
          ("notApplicable", 1))
    )


_SystemVoiceCoderCoderAndRate_Type.__name__ = "Integer32"
_SystemVoiceCoderCoderAndRate_Object = MibTableColumn
systemVoiceCoderCoderAndRate = _SystemVoiceCoderCoderAndRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 12, 2, 1, 3),
    _SystemVoiceCoderCoderAndRate_Type()
)
systemVoiceCoderCoderAndRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemVoiceCoderCoderAndRate.setStatus("current")
_MdlWanGen_ObjectIdentity = ObjectIdentity
mdlWanGen = _MdlWanGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3)
)
_StatMdlGen_ObjectIdentity = ObjectIdentity
statMdlGen = _StatMdlGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1)
)
_MdlSInstTable_Object = MibTable
mdlSInstTable = _MdlSInstTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1)
)
if mibBuilder.loadTexts:
    mdlSInstTable.setStatus("current")
_MdlSInstEntry_Object = MibTableRow
mdlSInstEntry = _MdlSInstEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1)
)
mdlSInstEntry.setIndexNames(
    (0, "RAD-MIB", "mdlSInstSltIdx"),
)
if mibBuilder.loadTexts:
    mdlSInstEntry.setStatus("current")


class _MdlSInstSltIdx_Type(Integer32):
    """Custom type mdlSInstSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("psA", 1),
          ("psB", 2))
    )


_MdlSInstSltIdx_Type.__name__ = "Integer32"
_MdlSInstSltIdx_Object = MibTableColumn
mdlSInstSltIdx = _MdlSInstSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 1),
    _MdlSInstSltIdx_Type()
)
mdlSInstSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSInstSltIdx.setStatus("current")


class _MdlSInstCardType_Type(Integer32):
    """Custom type mdlSInstCardType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              9,
              10,
              11,
              17,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              60,
              61,
              62,
              63,
              64,
              65,
              68,
              69,
              70,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85,
              86,
              87,
              88,
              89,
              90,
              91,
              92,
              93,
              94,
              95,
              96,
              97,
              98,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              123,
              124,
              125,
              126,
              127,
              128,
              129,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              147,
              148,
              149,
              150,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              158,
              159,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              181,
              182,
              183,
              184,
              185,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              199,
              200,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              208,
              209,
              210,
              211,
              212,
              213,
              214,
              215,
              216,
              217,
              218,
              219,
              220,
              221,
              222,
              223,
              224,
              225,
              226,
              227,
              228,
              229,
              230,
              231,
              232,
              233,
              234,
              235,
              236,
              237,
              238,
              239,
              240,
              241,
              242,
              243,
              244,
              245,
              246,
              247,
              248,
              249,
              250,
              251,
              252,
              253,
              254,
              255,
              256,
              257,
              258,
              260,
              261,
              262,
              263,
              264,
              265,
              266,
              267,
              271,
              272,
              273,
              281,
              282,
              283,
              284,
              285,
              286,
              291,
              292,
              301,
              302,
              303,
              304,
              305,
              306,
              307,
              308,
              309,
              310,
              311,
              312,
              321,
              322,
              323,
              324,
              325,
              326,
              327,
              328,
              329,
              330,
              331,
              332)
        )
    )
    namedValues = NamedValues(
        *(("acm", 9),
          ("asmi54cE1AndEth", 266),
          ("asmi54cT1AndEth", 267),
          ("cl1", 20),
          ("cl1Clk", 26),
          ("cl2", 22),
          ("cl2Eth", 23),
          ("cl3", 24),
          ("cl3Eth", 25),
          ("clEth", 21),
          ("clx1", 301),
          ("clx1GbE", 302),
          ("clx1S155", 303),
          ("clx1S155GbE", 304),
          ("empty", 2),
          ("evc2E1", 281),
          ("evc2T1", 283),
          ("evc4E1", 282),
          ("evc4T1", 284),
          ("hs12", 127),
          ("hs12N", 272),
          ("hs2", 120),
          ("hs3", 121),
          ("hs4", 132),
          ("hs4E1", 131),
          ("hs4T1", 130),
          ("hs6", 126),
          ("hs6N", 271),
          ("hs703", 123),
          ("hsDp", 128),
          ("hsDp3", 244),
          ("hsDp6", 245),
          ("hsEth", 133),
          ("hsEthSwitch", 224),
          ("hsNRZ", 273),
          ("hsQM", 124),
          ("hsf1", 246),
          ("hsf2", 258),
          ("hsh2E1", 51),
          ("hsh2E12W", 52),
          ("hsh2T1", 53),
          ("hsh2T12W", 54),
          ("hsp", 129),
          ("hsq", 122),
          ("hsqN", 125),
          ("hsr", 156),
          ("hss", 157),
          ("hss12", 242),
          ("hss6", 243),
          ("hsu", 150),
          ("hsu1", 158),
          ("hsu12", 240),
          ("hsu6", 241),
          ("hsuI", 155),
          ("ls12", 159),
          ("ls2A2Ts", 116),
          ("ls2AATandTSdm", 115),
          ("ls2ACcittX50", 113),
          ("ls2ACcittX58", 114),
          ("ls2ATandTSdm", 112),
          ("ls2CcittX50", 110),
          ("ls2CcittX58", 111),
          ("ls2M", 117),
          ("ls6", 160),
          ("ls6V1EandM", 161),
          ("ls6V1Fxo", 162),
          ("ls6V1Fxs", 163),
          ("ls6V2EandM", 164),
          ("ls6V2Fxo", 165),
          ("ls6V2Fxs", 166),
          ("ls6VfEandM", 167),
          ("ls6VfFxo", 168),
          ("ls6VfFxs", 169),
          ("ls6n", 180),
          ("mDualBri", 229),
          ("mPh1", 31),
          ("mPh1E1DSU", 35),
          ("mPh1E1LTU", 36),
          ("mPh1T1CSU", 34),
          ("mPh1T1DSU", 33),
          ("mPh3", 32),
          ("mPl3", 61),
          ("mPl6", 60),
          ("mPriE1FramerCcs", 225),
          ("mPriE1SlaveCcs", 227),
          ("mPriT1FramerCcs", 226),
          ("mPriT1SlaveCcs", 228),
          ("mPv4", 72),
          ("mbeA", 151),
          ("mbeB", 152),
          ("mbeU", 153),
          ("mhs1DDS", 184),
          ("mhs1G703", 183),
          ("mhs1V24", 187),
          ("mhs1V35", 182),
          ("mhs1V36", 181),
          ("mhs1X21", 186),
          ("mhs2e1", 195),
          ("mhs2t1", 196),
          ("mhs3", 185),
          ("mhs4", 188),
          ("mhsE1Hs", 189),
          ("mhsHy2e1", 197),
          ("mhsHy2t1", 198),
          ("mhsHyE1", 247),
          ("mhsHyE1Hs", 191),
          ("mhsHyT1", 248),
          ("mhsHyT1Hs", 192),
          ("mhsIp", 249),
          ("mhsPriE1", 222),
          ("mhsPriT1", 223),
          ("mhsS", 220),
          ("mhsT1Hs", 190),
          ("mhsU", 221),
          ("ml20", 97),
          ("ml20N1", 57),
          ("ml20N2", 58),
          ("ml2E1", 68),
          ("ml2T1", 70),
          ("ml4E1", 69),
          ("ml4T1", 71),
          ("ml8E1", 135),
          ("ml8E1Eth", 306),
          ("ml8T1", 134),
          ("ml8T1Eth", 305),
          ("mlHybAtmE1", 202),
          ("mlHybAtmT1", 203),
          ("mlHybIpE1", 251),
          ("mlHybIpT1", 252),
          ("mlIp", 55),
          ("mlIpHs", 250),
          ("mlfHybE12", 199),
          ("mlfHybE1Hs", 193),
          ("mlfHybT12", 204),
          ("mlfHybT1Hs", 194),
          ("mls3", 201),
          ("mls6", 200),
          ("mm12E1", 329),
          ("mm12T1", 330),
          ("mm16E1", 331),
          ("mm16T1", 332),
          ("mm4E1", 325),
          ("mm4T1", 326),
          ("mm8E1", 327),
          ("mm8T1", 328),
          ("mpw1", 312),
          ("msl4E1W2", 261),
          ("msl4E1W2Eth", 264),
          ("msl4E1W4", 262),
          ("msl8E1W2", 263),
          ("msl8E1W2Eth", 265),
          ("mtHsh4E1", 43),
          ("mtHsh4E12W", 44),
          ("mtHsh4T1", 45),
          ("mtHsh4T12W", 46),
          ("mtMl1E1DSU", 102),
          ("mtMl1E1DSUfb", 106),
          ("mtMl1E1LTU", 103),
          ("mtMl1E1LTUfb", 107),
          ("mtMl1T1CSU", 101),
          ("mtMl1T1CSUfb", 105),
          ("mtMl1T1DSU", 100),
          ("mtMl1T1DSUfb", 104),
          ("mtMl2E1", 109),
          ("mtMl2T1", 108),
          ("mtMl4E1", 99),
          ("mtMl4T1", 98),
          ("mtMlE1", 119),
          ("mtMlE1Fiber", 91),
          ("mtMlE1FiberFb", 93),
          ("mtMlE2D", 87),
          ("mtMlE2S", 86),
          ("mtMlF2E1", 89),
          ("mtMlF2T1", 88),
          ("mtMlT1", 118),
          ("mtMlT1Fiber", 90),
          ("mtMlT1FiberFb", 92),
          ("mtml4Ip", 56),
          ("mtmlFE1", 38),
          ("mtmlFT1", 37),
          ("mtmlH1E1", 95),
          ("mtmlH2E1", 47),
          ("mtmlH2E12W", 48),
          ("mtmlH2T1", 49),
          ("mtmlH2T12W", 50),
          ("mtmlH4E1", 39),
          ("mtmlH4E12W", 40),
          ("mtmlH4T1", 41),
          ("mtmlH4T12W", 42),
          ("mtmlHE1", 94),
          ("mtmlHSE1", 96),
          ("mtvc2", 148),
          ("mvc4", 210),
          ("mvc4PbxE1", 211),
          ("mvc4PbxE1Slave", 214),
          ("mvc4PbxT1Csu", 213),
          ("mvc4PbxT1Dsu", 212),
          ("mvc4PbxT1Slave", 215),
          ("mvc8", 205),
          ("mvc8ExtAnalog", 217),
          ("mvc8PbxE1", 206),
          ("mvc8PbxE1Slave", 209),
          ("mvc8PbxT1Csu", 208),
          ("mvc8PbxT1Dsu", 207),
          ("mvc8PbxT1Slave", 216),
          ("mvcE1", 218),
          ("mvcT1", 219),
          ("mvg1Lan", 253),
          ("mvg2Lan", 254),
          ("mvgSwitch4Lan", 260),
          ("op106cEth", 307),
          ("op106cEthT1", 309),
          ("op108cEth", 308),
          ("op108cEthE1", 310),
          ("op108cEthE1Unbal", 311),
          ("ps", 17),
          ("ps100W", 11),
          ("ps60W", 10),
          ("tre", 154),
          ("unknown", 1),
          ("vc12EandM", 230),
          ("vc12Fxo", 231),
          ("vc12Fxs", 232),
          ("vc16A", 73),
          ("vc16EandM", 77),
          ("vc16Fxo", 78),
          ("vc16Fxs", 79),
          ("vc26EandM", 147),
          ("vc2E1", 136),
          ("vc2E1Pri", 285),
          ("vc2EandM", 140),
          ("vc2Fxo1", 142),
          ("vc2Fxo2", 144),
          ("vc2Fxo3", 146),
          ("vc2Fxs1Plar", 141),
          ("vc2Fxs2", 143),
          ("vc2Fxs3", 145),
          ("vc2R2Fxs", 149),
          ("vc2T1", 138),
          ("vc3EandM", 170),
          ("vc3Fxo", 171),
          ("vc3Fxs", 172),
          ("vc4E1", 137),
          ("vc4E1Pri", 286),
          ("vc4EandM", 256),
          ("vc4Fxo", 257),
          ("vc4Fxs", 255),
          ("vc4OmniEandM", 291),
          ("vc4OmniWestern", 292),
          ("vc4T1", 139),
          ("vc6AgFxo", 236),
          ("vc6AgFxs", 237),
          ("vc6EandM", 176),
          ("vc6Fxo", 177),
          ("vc6Fxs", 178),
          ("vc6a4LB", 238),
          ("vc6aEandM", 233),
          ("vc6aFxo", 234),
          ("vc6aFxs", 235),
          ("vc8EandM", 74),
          ("vc8Fxo", 75),
          ("vc8Fxs", 76),
          ("vcPbx", 173),
          ("vcPbxE1", 175),
          ("vcPbxT1", 174),
          ("vcq", 179),
          ("vf24T1", 62),
          ("vf30E1", 63),
          ("vf3EandM", 80),
          ("vf3Fxo", 82),
          ("vf3Fxs", 81),
          ("vf48T1", 64),
          ("vf60E1", 65),
          ("vfPbx", 83),
          ("vfPbxE1", 85),
          ("vfPbxT1", 84),
          ("vfs24T1", 321),
          ("vfs30E1", 322),
          ("vfs48T1", 323),
          ("vfs60E1", 324),
          ("vid", 239))
    )


_MdlSInstCardType_Type.__name__ = "Integer32"
_MdlSInstCardType_Object = MibTableColumn
mdlSInstCardType = _MdlSInstCardType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 2),
    _MdlSInstCardType_Type()
)
mdlSInstCardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSInstCardType.setStatus("current")


class _MdlSHwVersion_Type(DisplayString):
    """Custom type mdlSHwVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_MdlSHwVersion_Type.__name__ = "DisplayString"
_MdlSHwVersion_Object = MibTableColumn
mdlSHwVersion = _MdlSHwVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 3),
    _MdlSHwVersion_Type()
)
mdlSHwVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSHwVersion.setStatus("current")


class _MdlSSwVersion_Type(DisplayString):
    """Custom type mdlSSwVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_MdlSSwVersion_Type.__name__ = "DisplayString"
_MdlSSwVersion_Object = MibTableColumn
mdlSSwVersion = _MdlSSwVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 4),
    _MdlSSwVersion_Type()
)
mdlSSwVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSSwVersion.setStatus("current")


class _MdlSAlrStatus_Type(Integer32):
    """Custom type mdlSAlrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_MdlSAlrStatus_Type.__name__ = "Integer32"
_MdlSAlrStatus_Object = MibTableColumn
mdlSAlrStatus = _MdlSAlrStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 5),
    _MdlSAlrStatus_Type()
)
mdlSAlrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlrStatus.setStatus("current")


class _MdlSAlrStatusAll_Type(Integer32):
    """Custom type mdlSAlrStatusAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_MdlSAlrStatusAll_Type.__name__ = "Integer32"
_MdlSAlrStatusAll_Object = MibTableColumn
mdlSAlrStatusAll = _MdlSAlrStatusAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 6),
    _MdlSAlrStatusAll_Type()
)
mdlSAlrStatusAll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlrStatusAll.setStatus("current")


class _MdlSMaskedAlrStat_Type(Integer32):
    """Custom type mdlSMaskedAlrStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_MdlSMaskedAlrStat_Type.__name__ = "Integer32"
_MdlSMaskedAlrStat_Object = MibTableColumn
mdlSMaskedAlrStat = _MdlSMaskedAlrStat_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 7),
    _MdlSMaskedAlrStat_Type()
)
mdlSMaskedAlrStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSMaskedAlrStat.setStatus("current")


class _MdlSMaskedAlrStatAll_Type(Integer32):
    """Custom type mdlSMaskedAlrStatAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_MdlSMaskedAlrStatAll_Type.__name__ = "Integer32"
_MdlSMaskedAlrStatAll_Object = MibTableColumn
mdlSMaskedAlrStatAll = _MdlSMaskedAlrStatAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 8),
    _MdlSMaskedAlrStatAll_Type()
)
mdlSMaskedAlrStatAll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSMaskedAlrStatAll.setStatus("current")


class _MdlSTstStatusAll_Type(Integer32):
    """Custom type mdlSTstStatusAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlSTstStatusAll_Type.__name__ = "Integer32"
_MdlSTstStatusAll_Object = MibTableColumn
mdlSTstStatusAll = _MdlSTstStatusAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 9),
    _MdlSTstStatusAll_Type()
)
mdlSTstStatusAll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSTstStatusAll.setStatus("current")


class _MdlSClearAlrCmd_Type(Integer32):
    """Custom type mdlSClearAlrCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlSClearAlrCmd_Type.__name__ = "Integer32"
_MdlSClearAlrCmd_Object = MibTableColumn
mdlSClearAlrCmd = _MdlSClearAlrCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 10),
    _MdlSClearAlrCmd_Type()
)
mdlSClearAlrCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlSClearAlrCmd.setStatus("current")


class _MdlSClearAllAlrCmd_Type(Integer32):
    """Custom type mdlSClearAllAlrCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlSClearAllAlrCmd_Type.__name__ = "Integer32"
_MdlSClearAllAlrCmd_Object = MibTableColumn
mdlSClearAllAlrCmd = _MdlSClearAllAlrCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 11),
    _MdlSClearAllAlrCmd_Type()
)
mdlSClearAllAlrCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlSClearAllAlrCmd.setStatus("current")
_MdlSTemperature_Type = Integer32
_MdlSTemperature_Object = MibTableColumn
mdlSTemperature = _MdlSTemperature_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 12),
    _MdlSTemperature_Type()
)
mdlSTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSTemperature.setStatus("current")
_MdlSAlrTable_Object = MibTable
mdlSAlrTable = _MdlSAlrTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2)
)
if mibBuilder.loadTexts:
    mdlSAlrTable.setStatus("current")
_MdlSAlrEntry_Object = MibTableRow
mdlSAlrEntry = _MdlSAlrEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1)
)
mdlSAlrEntry.setIndexNames(
    (0, "RAD-MIB", "mdlSAlrSltIdx"),
    (0, "RAD-MIB", "mdlSAlrIdx"),
)
if mibBuilder.loadTexts:
    mdlSAlrEntry.setStatus("current")
_MdlSAlrIdx_Type = Integer32
_MdlSAlrIdx_Object = MibTableColumn
mdlSAlrIdx = _MdlSAlrIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 1),
    _MdlSAlrIdx_Type()
)
mdlSAlrIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlrIdx.setStatus("current")


class _MdlSAlrSltIdx_Type(Integer32):
    """Custom type mdlSAlrSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("psA", 1),
          ("psB", 2))
    )


_MdlSAlrSltIdx_Type.__name__ = "Integer32"
_MdlSAlrSltIdx_Object = MibTableColumn
mdlSAlrSltIdx = _MdlSAlrSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 2),
    _MdlSAlrSltIdx_Type()
)
mdlSAlrSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlrSltIdx.setStatus("current")


class _MdlSAlrCodeDescription_Type(DisplayString):
    """Custom type mdlSAlrCodeDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_MdlSAlrCodeDescription_Type.__name__ = "DisplayString"
_MdlSAlrCodeDescription_Object = MibTableColumn
mdlSAlrCodeDescription = _MdlSAlrCodeDescription_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 3),
    _MdlSAlrCodeDescription_Type()
)
mdlSAlrCodeDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlrCodeDescription.setStatus("current")
_MdlSAlrCode_Type = Integer32
_MdlSAlrCode_Object = MibTableColumn
mdlSAlrCode = _MdlSAlrCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 4),
    _MdlSAlrCode_Type()
)
mdlSAlrCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlrCode.setStatus("current")


class _MdlSAlrSeverity_Type(Integer32):
    """Custom type mdlSAlrSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("warning", 6))
    )


_MdlSAlrSeverity_Type.__name__ = "Integer32"
_MdlSAlrSeverity_Object = MibTableColumn
mdlSAlrSeverity = _MdlSAlrSeverity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 5),
    _MdlSAlrSeverity_Type()
)
mdlSAlrSeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlrSeverity.setStatus("current")


class _MdlSAlrState_Type(Integer32):
    """Custom type mdlSAlrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlSAlrState_Type.__name__ = "Integer32"
_MdlSAlrState_Object = MibTableColumn
mdlSAlrState = _MdlSAlrState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 6),
    _MdlSAlrState_Type()
)
mdlSAlrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlrState.setStatus("current")
_MdlSAlrCounter_Type = Integer32
_MdlSAlrCounter_Object = MibTableColumn
mdlSAlrCounter = _MdlSAlrCounter_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 7),
    _MdlSAlrCounter_Type()
)
mdlSAlrCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlrCounter.setStatus("current")


class _MdlSAlrMask_Type(Integer32):
    """Custom type mdlSAlrMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlSAlrMask_Type.__name__ = "Integer32"
_MdlSAlrMask_Object = MibTableColumn
mdlSAlrMask = _MdlSAlrMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 8),
    _MdlSAlrMask_Type()
)
mdlSAlrMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlrMask.setStatus("current")


class _MdlSAlrInvert_Type(Integer32):
    """Custom type mdlSAlrInvert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlSAlrInvert_Type.__name__ = "Integer32"
_MdlSAlrInvert_Object = MibTableColumn
mdlSAlrInvert = _MdlSAlrInvert_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 9),
    _MdlSAlrInvert_Type()
)
mdlSAlrInvert.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlrInvert.setStatus("current")
_CnfgMdlGen_ObjectIdentity = ObjectIdentity
cnfgMdlGen = _CnfgMdlGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2)
)
_MdlCPrgTable_Object = MibTable
mdlCPrgTable = _MdlCPrgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1)
)
if mibBuilder.loadTexts:
    mdlCPrgTable.setStatus("current")
_MdlCPrgEntry_Object = MibTableRow
mdlCPrgEntry = _MdlCPrgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1, 1)
)
mdlCPrgEntry.setIndexNames(
    (0, "RAD-MIB", "mdlCCnfgIdx"),
    (0, "RAD-MIB", "mdlCSltIdx"),
)
if mibBuilder.loadTexts:
    mdlCPrgEntry.setStatus("current")


class _MdlCCnfgIdx_Type(Integer32):
    """Custom type mdlCCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_MdlCCnfgIdx_Type.__name__ = "Integer32"
_MdlCCnfgIdx_Object = MibTableColumn
mdlCCnfgIdx = _MdlCCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1, 1, 1),
    _MdlCCnfgIdx_Type()
)
mdlCCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCCnfgIdx.setStatus("current")


class _MdlCSltIdx_Type(Integer32):
    """Custom type mdlCSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("psA", 1),
          ("psB", 2))
    )


_MdlCSltIdx_Type.__name__ = "Integer32"
_MdlCSltIdx_Object = MibTableColumn
mdlCSltIdx = _MdlCSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1, 1, 2),
    _MdlCSltIdx_Type()
)
mdlCSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCSltIdx.setStatus("current")


class _MdlCPrgCardType_Type(Integer32):
    """Custom type mdlCPrgCardType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              60,
              62,
              63,
              64,
              65,
              68,
              69,
              70,
              71,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85,
              86,
              87,
              88,
              89,
              90,
              91,
              92,
              93,
              94,
              95,
              96,
              97,
              98,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              123,
              124,
              125,
              126,
              127,
              128,
              129,
              130,
              131,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              147,
              148,
              149,
              150,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              158,
              159,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              181,
              182,
              183,
              184,
              185,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              199,
              200,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              208,
              209,
              210,
              211,
              212,
              213,
              214,
              215,
              216,
              217,
              218,
              219,
              220,
              221,
              222,
              223,
              224,
              225,
              226,
              227,
              228,
              229,
              230,
              231,
              232,
              233,
              234,
              235,
              236,
              237,
              238,
              239,
              240,
              241,
              242,
              243,
              244,
              245,
              246,
              247,
              248,
              249,
              250,
              251,
              252,
              253,
              254,
              255,
              256,
              257,
              258,
              260,
              261,
              262,
              263,
              264,
              265,
              266,
              267,
              271,
              272,
              273,
              281,
              282,
              283,
              284,
              285,
              286,
              291,
              292,
              301,
              302,
              303,
              304,
              305,
              306,
              307,
              308,
              309,
              310,
              311,
              312,
              321,
              322,
              323,
              324)
        )
    )
    namedValues = NamedValues(
        *(("acm", 9),
          ("asmi54cE1AndEth", 266),
          ("asmi54cT1AndEth", 267),
          ("cl1", 20),
          ("cl1Clk", 26),
          ("cl2", 22),
          ("cl2Eth", 23),
          ("cl3", 24),
          ("cl3Eth", 25),
          ("clEth", 21),
          ("clx1", 301),
          ("clx1GbE", 302),
          ("clx1S155", 303),
          ("clx1S155GbE", 304),
          ("empty", 2),
          ("evc2E1", 281),
          ("evc2T1", 283),
          ("evc4E1", 282),
          ("evc4T1", 284),
          ("hs12", 127),
          ("hs12N", 272),
          ("hs2", 120),
          ("hs3", 121),
          ("hs4E1", 131),
          ("hs4T1", 130),
          ("hs6", 126),
          ("hs6N", 271),
          ("hs703", 123),
          ("hsDp", 128),
          ("hsDp3", 244),
          ("hsDp6", 245),
          ("hsEth", 133),
          ("hsEthSwitch", 224),
          ("hsNRZ", 273),
          ("hsQM", 124),
          ("hsf1", 246),
          ("hsf2", 258),
          ("hsh2E1", 51),
          ("hsh2E12W", 52),
          ("hsh2T1", 53),
          ("hsh2T12W", 54),
          ("hsp", 129),
          ("hsq", 122),
          ("hsqN", 125),
          ("hsr", 156),
          ("hss", 157),
          ("hss12", 242),
          ("hss6", 243),
          ("hsu", 150),
          ("hsu1", 158),
          ("hsu12", 240),
          ("hsu6", 241),
          ("hsuI", 155),
          ("ls12", 159),
          ("ls2A2Ts", 116),
          ("ls2AATandTSdm", 115),
          ("ls2ACcittX50", 113),
          ("ls2ACcittX58", 114),
          ("ls2ATandTSdm", 112),
          ("ls2CcittX50", 110),
          ("ls2CcittX58", 111),
          ("ls2M", 117),
          ("ls6", 160),
          ("ls6V1EandM", 161),
          ("ls6V1Fxo", 162),
          ("ls6V1Fxs", 163),
          ("ls6V2EandM", 164),
          ("ls6V2Fxo", 165),
          ("ls6V2Fxs", 166),
          ("ls6VfEandM", 167),
          ("ls6VfFxo", 168),
          ("ls6VfFxs", 169),
          ("ls6n", 180),
          ("mDualBri", 229),
          ("mPh1", 31),
          ("mPh1E1DSU", 35),
          ("mPh1E1LTU", 36),
          ("mPh1T1CSU", 34),
          ("mPh1T1DSU", 33),
          ("mPh3", 32),
          ("mPl6", 60),
          ("mPriE1FramerCcs", 225),
          ("mPriT1FramerCcs", 226),
          ("mbeA", 151),
          ("mbeB", 152),
          ("mbeU", 153),
          ("mhs1DDS", 184),
          ("mhs1G703", 183),
          ("mhs1V24", 187),
          ("mhs1V35", 182),
          ("mhs1V36", 181),
          ("mhs1X21", 186),
          ("mhs2e1", 195),
          ("mhs2t1", 196),
          ("mhs3", 185),
          ("mhs4", 188),
          ("mhsE1Hs", 189),
          ("mhsHy2e1", 197),
          ("mhsHy2t1", 198),
          ("mhsHyE1", 247),
          ("mhsHyE1Hs", 191),
          ("mhsHyT1", 248),
          ("mhsHyT1Hs", 192),
          ("mhsIp", 249),
          ("mhsPriE1", 222),
          ("mhsPriT1", 223),
          ("mhsS", 220),
          ("mhsT1Hs", 190),
          ("mhsU", 221),
          ("ml20", 97),
          ("ml20N1", 57),
          ("ml20N2", 58),
          ("ml2E1", 68),
          ("ml2T1", 70),
          ("ml4E1", 69),
          ("ml4T1", 71),
          ("ml8E1", 135),
          ("ml8E1Eth", 306),
          ("ml8T1", 134),
          ("ml8T1Eth", 305),
          ("mlHybAtmE1", 202),
          ("mlHybAtmT1", 203),
          ("mlHybIpE1", 251),
          ("mlHybIpT1", 252),
          ("mlIp", 55),
          ("mlIpHs", 250),
          ("mlfHybE12", 199),
          ("mlfHybE1Hs", 193),
          ("mlfHybT12", 204),
          ("mlfHybT1Hs", 194),
          ("mls3", 201),
          ("mls6", 200),
          ("mpriE1SlaveCcs", 227),
          ("mpriT1SlaveCcs", 228),
          ("mpw1", 312),
          ("msl4E1W2", 261),
          ("msl4E1W2Eth", 264),
          ("msl4E1W4", 262),
          ("msl8E1W2", 263),
          ("msl8E1W2Eth", 265),
          ("mtHsh4E1", 43),
          ("mtHsh4E12W", 44),
          ("mtHsh4T1", 45),
          ("mtHsh4T12W", 46),
          ("mtMl1E1DSU", 102),
          ("mtMl1E1DSUfb", 106),
          ("mtMl1E1LTU", 103),
          ("mtMl1E1LTUfb", 107),
          ("mtMl1T1CSU", 101),
          ("mtMl1T1CSUfb", 105),
          ("mtMl1T1DSU", 100),
          ("mtMl1T1DSUfb", 104),
          ("mtMl2E1", 109),
          ("mtMl2T1", 108),
          ("mtMl4E1", 99),
          ("mtMl4T1", 98),
          ("mtMlE1", 119),
          ("mtMlE1Fiber", 91),
          ("mtMlE1FiberFb", 93),
          ("mtMlE2D", 87),
          ("mtMlE2S", 86),
          ("mtMlF2E1", 89),
          ("mtMlF2T1", 88),
          ("mtMlT1", 118),
          ("mtMlT1Fiber", 90),
          ("mtMlT1FiberFb", 92),
          ("mtml4Ip", 56),
          ("mtmlFE1", 38),
          ("mtmlFT1", 37),
          ("mtmlH1E1", 95),
          ("mtmlH2E1", 47),
          ("mtmlH2E12W", 48),
          ("mtmlH2T1", 49),
          ("mtmlH2T12W", 50),
          ("mtmlH4E1", 39),
          ("mtmlH4E12W", 40),
          ("mtmlH4T1", 41),
          ("mtmlH4T12W", 42),
          ("mtmlHE1", 94),
          ("mtmlHSE1", 96),
          ("mtvc2", 148),
          ("mvc4", 210),
          ("mvc4PbxE1", 211),
          ("mvc4PbxE1Slave", 214),
          ("mvc4PbxT1Csu", 213),
          ("mvc4PbxT1Dsu", 212),
          ("mvc4PbxT1Slave", 215),
          ("mvc8", 205),
          ("mvc8ExtAnalog", 217),
          ("mvc8PbxE1", 206),
          ("mvc8PbxE1Slave", 209),
          ("mvc8PbxT1Csu", 208),
          ("mvc8PbxT1Dsu", 207),
          ("mvc8PbxT1Slave", 216),
          ("mvcE1", 218),
          ("mvcT1", 219),
          ("mvg1Lan", 253),
          ("mvg2Lan", 254),
          ("mvgSwitch4Lan", 260),
          ("op106cEth", 307),
          ("op106cEthT1", 309),
          ("op108cEth", 308),
          ("op108cEthE1", 310),
          ("op108cEthE1Unbal", 311),
          ("ps", 17),
          ("ps110x100W", 13),
          ("ps110x60W", 12),
          ("ps180W", 16),
          ("ps220x100W", 15),
          ("ps220x60W", 14),
          ("ps48x100W", 11),
          ("ps48x60W", 10),
          ("tre", 154),
          ("unknown", 1),
          ("vc12EandM", 230),
          ("vc12Fxo", 231),
          ("vc12Fxs", 232),
          ("vc16A", 73),
          ("vc16EandM", 77),
          ("vc16Fxo", 78),
          ("vc16Fxs", 79),
          ("vc26EandM", 147),
          ("vc2E1", 136),
          ("vc2E1Pri", 285),
          ("vc2EandM", 140),
          ("vc2Fxo1", 142),
          ("vc2Fxo2", 144),
          ("vc2Fxo3", 146),
          ("vc2Fxs1Plar", 141),
          ("vc2Fxs2", 143),
          ("vc2Fxs3", 145),
          ("vc2R2Fxs", 149),
          ("vc2T1", 138),
          ("vc3EandM", 170),
          ("vc3Fxo", 171),
          ("vc3Fxs", 172),
          ("vc4E1", 137),
          ("vc4E1Pri", 286),
          ("vc4EandM", 256),
          ("vc4Fxo", 257),
          ("vc4Fxs", 255),
          ("vc4OmniEandM", 291),
          ("vc4OmniWestern", 292),
          ("vc4T1", 139),
          ("vc6AgFxo", 236),
          ("vc6AgFxs", 237),
          ("vc6EandM", 176),
          ("vc6Fxo", 177),
          ("vc6Fxs", 178),
          ("vc6a4LB", 238),
          ("vc6aEandM", 233),
          ("vc6aFxo", 234),
          ("vc6aFxs", 235),
          ("vc8EandM", 74),
          ("vc8Fxo", 75),
          ("vc8Fxs", 76),
          ("vcPbx", 173),
          ("vcPbxE1", 175),
          ("vcPbxT1", 174),
          ("vcq", 179),
          ("vf24T1", 62),
          ("vf30E1", 63),
          ("vf3EandM", 80),
          ("vf3Fxo", 82),
          ("vf3Fxs", 81),
          ("vf48T1", 64),
          ("vf60E1", 65),
          ("vfPbx", 83),
          ("vfPbxE1", 85),
          ("vfPbxT1", 84),
          ("vfs24T1", 321),
          ("vfs30E1", 322),
          ("vfs48T1", 323),
          ("vfs60E1", 324),
          ("vid", 239))
    )


_MdlCPrgCardType_Type.__name__ = "Integer32"
_MdlCPrgCardType_Object = MibTableColumn
mdlCPrgCardType = _MdlCPrgCardType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1, 1, 3),
    _MdlCPrgCardType_Type()
)
mdlCPrgCardType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlCPrgCardType.setStatus("current")
_MdlCNoOfExternPrt_Type = Integer32
_MdlCNoOfExternPrt_Object = MibTableColumn
mdlCNoOfExternPrt = _MdlCNoOfExternPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1, 1, 4),
    _MdlCNoOfExternPrt_Type()
)
mdlCNoOfExternPrt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCNoOfExternPrt.setStatus("current")
_MdlCNoOfInternPrt_Type = Integer32
_MdlCNoOfInternPrt_Object = MibTableColumn
mdlCNoOfInternPrt = _MdlCNoOfInternPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1, 1, 5),
    _MdlCNoOfInternPrt_Type()
)
mdlCNoOfInternPrt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCNoOfInternPrt.setStatus("current")


class _MdlCWorkMode_Type(Integer32):
    """Custom type mdlCWorkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("integrated", 3),
          ("notApplicable", 1),
          ("standAlone", 2))
    )


_MdlCWorkMode_Type.__name__ = "Integer32"
_MdlCWorkMode_Object = MibTableColumn
mdlCWorkMode = _MdlCWorkMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1, 1, 6),
    _MdlCWorkMode_Type()
)
mdlCWorkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlCWorkMode.setStatus("current")


class _MdlCDhcpClientEnable_Type(Integer32):
    """Custom type mdlCDhcpClientEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_MdlCDhcpClientEnable_Type.__name__ = "Integer32"
_MdlCDhcpClientEnable_Object = MibTableColumn
mdlCDhcpClientEnable = _MdlCDhcpClientEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1, 1, 7),
    _MdlCDhcpClientEnable_Type()
)
mdlCDhcpClientEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlCDhcpClientEnable.setStatus("current")


class _MdlCRdnExists_Type(Integer32):
    """Custom type mdlCRdnExists based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_MdlCRdnExists_Type.__name__ = "Integer32"
_MdlCRdnExists_Object = MibTableColumn
mdlCRdnExists = _MdlCRdnExists_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1, 1, 8),
    _MdlCRdnExists_Type()
)
mdlCRdnExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCRdnExists.setStatus("current")
_MdlCInterfaces_Type = OctetString
_MdlCInterfaces_Object = MibTableColumn
mdlCInterfaces = _MdlCInterfaces_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1, 1, 9),
    _MdlCInterfaces_Type()
)
mdlCInterfaces.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCInterfaces.setStatus("current")
_CmprMdlGen_ObjectIdentity = ObjectIdentity
cmprMdlGen = _CmprMdlGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3)
)
_MdlCmprTable_Object = MibTable
mdlCmprTable = _MdlCmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 1)
)
if mibBuilder.loadTexts:
    mdlCmprTable.setStatus("current")
_MdlCmprEntry_Object = MibTableRow
mdlCmprEntry = _MdlCmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 1, 1)
)
mdlCmprEntry.setIndexNames(
    (0, "RAD-MIB", "mdlCmprTypIdx"),
    (0, "RAD-MIB", "mdlCmprCnfgIdx"),
    (0, "RAD-MIB", "mdlCmprVersion"),
    (0, "RAD-MIB", "mdlCmprSltIdx"),
)
if mibBuilder.loadTexts:
    mdlCmprEntry.setStatus("current")
_MdlCmprTypIdx_Type = Integer32
_MdlCmprTypIdx_Object = MibTableColumn
mdlCmprTypIdx = _MdlCmprTypIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 1, 1, 1),
    _MdlCmprTypIdx_Type()
)
mdlCmprTypIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCmprTypIdx.setStatus("current")
_MdlCmprCnfgIdx_Type = Integer32
_MdlCmprCnfgIdx_Object = MibTableColumn
mdlCmprCnfgIdx = _MdlCmprCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 1, 1, 2),
    _MdlCmprCnfgIdx_Type()
)
mdlCmprCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCmprCnfgIdx.setStatus("current")
_MdlCmprVersion_Type = Integer32
_MdlCmprVersion_Object = MibTableColumn
mdlCmprVersion = _MdlCmprVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 1, 1, 3),
    _MdlCmprVersion_Type()
)
mdlCmprVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCmprVersion.setStatus("current")


class _MdlCmprSltIdx_Type(Integer32):
    """Custom type mdlCmprSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("psA", 1),
          ("psB", 2))
    )


_MdlCmprSltIdx_Type.__name__ = "Integer32"
_MdlCmprSltIdx_Object = MibTableColumn
mdlCmprSltIdx = _MdlCmprSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 1, 1, 4),
    _MdlCmprSltIdx_Type()
)
mdlCmprSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCmprSltIdx.setStatus("current")
_MdlCmprObj_Type = OctetString
_MdlCmprObj_Object = MibTableColumn
mdlCmprObj = _MdlCmprObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 1, 1, 5),
    _MdlCmprObj_Type()
)
mdlCmprObj.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlCmprObj.setStatus("current")
_MdlAlarmsCmprTable_Object = MibTable
mdlAlarmsCmprTable = _MdlAlarmsCmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 2)
)
if mibBuilder.loadTexts:
    mdlAlarmsCmprTable.setStatus("current")
_MdlAlarmsCmprEntry_Object = MibTableRow
mdlAlarmsCmprEntry = _MdlAlarmsCmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 2, 1)
)
mdlAlarmsCmprEntry.setIndexNames(
    (0, "RAD-MIB", "mdlAlarmsCmprVersion"),
    (0, "RAD-MIB", "mdlAlarmsCmprAlarmSlot"),
    (0, "RAD-MIB", "mdlAlarmsCmprAlarmIdx"),
)
if mibBuilder.loadTexts:
    mdlAlarmsCmprEntry.setStatus("current")
_MdlAlarmsCmprVersion_Type = Integer32
_MdlAlarmsCmprVersion_Object = MibTableColumn
mdlAlarmsCmprVersion = _MdlAlarmsCmprVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 2, 1, 1),
    _MdlAlarmsCmprVersion_Type()
)
mdlAlarmsCmprVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlAlarmsCmprVersion.setStatus("current")
_MdlAlarmsCmprAlarmSlot_Type = Integer32
_MdlAlarmsCmprAlarmSlot_Object = MibTableColumn
mdlAlarmsCmprAlarmSlot = _MdlAlarmsCmprAlarmSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 2, 1, 2),
    _MdlAlarmsCmprAlarmSlot_Type()
)
mdlAlarmsCmprAlarmSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlAlarmsCmprAlarmSlot.setStatus("current")
_MdlAlarmsCmprAlarmIdx_Type = Integer32
_MdlAlarmsCmprAlarmIdx_Object = MibTableColumn
mdlAlarmsCmprAlarmIdx = _MdlAlarmsCmprAlarmIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 2, 1, 3),
    _MdlAlarmsCmprAlarmIdx_Type()
)
mdlAlarmsCmprAlarmIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlAlarmsCmprAlarmIdx.setStatus("current")
_MdlAlarmsCmprObj_Type = OctetString
_MdlAlarmsCmprObj_Object = MibTableColumn
mdlAlarmsCmprObj = _MdlAlarmsCmprObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 2, 1, 4),
    _MdlAlarmsCmprObj_Type()
)
mdlAlarmsCmprObj.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlAlarmsCmprObj.setStatus("current")
_PrtWanGen_ObjectIdentity = ObjectIdentity
prtWanGen = _PrtWanGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4)
)
_StatPrtGen_ObjectIdentity = ObjectIdentity
statPrtGen = _StatPrtGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1)
)
_PrtSInstTable_Object = MibTable
prtSInstTable = _PrtSInstTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1)
)
if mibBuilder.loadTexts:
    prtSInstTable.setStatus("current")
_PrtSInstEntry_Object = MibTableRow
prtSInstEntry = _PrtSInstEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1)
)
prtSInstEntry.setIndexNames(
    (0, "RAD-MIB", "prtSInstSltIdx"),
    (0, "RAD-MIB", "prtSInstPrtIdx"),
)
if mibBuilder.loadTexts:
    prtSInstEntry.setStatus("current")


class _PrtSInstSltIdx_Type(Integer32):
    """Custom type prtSInstSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtSInstSltIdx_Type.__name__ = "Integer32"
_PrtSInstSltIdx_Object = MibTableColumn
prtSInstSltIdx = _PrtSInstSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 1),
    _PrtSInstSltIdx_Type()
)
prtSInstSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSInstSltIdx.setStatus("current")
_PrtSInstPrtIdx_Type = Integer32
_PrtSInstPrtIdx_Object = MibTableColumn
prtSInstPrtIdx = _PrtSInstPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 2),
    _PrtSInstPrtIdx_Type()
)
prtSInstPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSInstPrtIdx.setStatus("current")


class _PrtSInstPrtType_Type(Integer32):
    """Custom type prtSInstPrtType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19)
        )
    )
    namedValues = NamedValues(
        *(("cl", 12),
          ("ethernet", 15),
          ("external", 2),
          ("highSpeedDDS", 9),
          ("highSpeedG703", 8),
          ("highSpeedV24", 5),
          ("highSpeedV35", 4),
          ("highSpeedV36", 6),
          ("highSpeedX21", 7),
          ("internal", 3),
          ("isdns", 13),
          ("isdnu", 14),
          ("lowSpeed", 10),
          ("voice", 11),
          ("voiceQsigS", 18),
          ("voiceQsigU", 19),
          ("voiceS0", 16),
          ("voiceU", 17))
    )


_PrtSInstPrtType_Type.__name__ = "Integer32"
_PrtSInstPrtType_Object = MibTableColumn
prtSInstPrtType = _PrtSInstPrtType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 3),
    _PrtSInstPrtType_Type()
)
prtSInstPrtType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSInstPrtType.setStatus("current")
_PrtSInstIfIndex_Type = Integer32
_PrtSInstIfIndex_Object = MibTableColumn
prtSInstIfIndex = _PrtSInstIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 4),
    _PrtSInstIfIndex_Type()
)
prtSInstIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSInstIfIndex.setStatus("current")


class _PrtSActiveStatus_Type(Integer32):
    """Custom type prtSActiveStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("notUsed", 2),
          ("offLine", 3),
          ("offLineRedundancy", 5),
          ("onLine", 4),
          ("onLineRedundancy", 6),
          ("unknown", 1))
    )


_PrtSActiveStatus_Type.__name__ = "Integer32"
_PrtSActiveStatus_Object = MibTableColumn
prtSActiveStatus = _PrtSActiveStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 5),
    _PrtSActiveStatus_Type()
)
prtSActiveStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSActiveStatus.setStatus("current")


class _PrtSAlrStatus_Type(Integer32):
    """Custom type prtSAlrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_PrtSAlrStatus_Type.__name__ = "Integer32"
_PrtSAlrStatus_Object = MibTableColumn
prtSAlrStatus = _PrtSAlrStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 6),
    _PrtSAlrStatus_Type()
)
prtSAlrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrStatus.setStatus("current")


class _PrtSMaskedAlrStat_Type(Integer32):
    """Custom type prtSMaskedAlrStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_PrtSMaskedAlrStat_Type.__name__ = "Integer32"
_PrtSMaskedAlrStat_Object = MibTableColumn
prtSMaskedAlrStat = _PrtSMaskedAlrStat_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 7),
    _PrtSMaskedAlrStat_Type()
)
prtSMaskedAlrStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSMaskedAlrStat.setStatus("current")


class _PrtSClearAlrCmd_Type(Integer32):
    """Custom type prtSClearAlrCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtSClearAlrCmd_Type.__name__ = "Integer32"
_PrtSClearAlrCmd_Object = MibTableColumn
prtSClearAlrCmd = _PrtSClearAlrCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 8),
    _PrtSClearAlrCmd_Type()
)
prtSClearAlrCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSClearAlrCmd.setStatus("current")
_PrtSTestMask_Type = Integer32
_PrtSTestMask_Object = MibTableColumn
prtSTestMask = _PrtSTestMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 9),
    _PrtSTestMask_Type()
)
prtSTestMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSTestMask.setStatus("current")


class _PrtSTstCmd_Type(Integer32):
    """Custom type prtSTstCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36)
        )
    )
    namedValues = NamedValues(
        *(("allDlciLocalLoop", 11),
          ("allDlciRemoteLoop", 13),
          ("backwardToneInject", 18),
          ("bert", 8),
          ("bertAndRemLoopOnRemUnit", 15),
          ("bertOnRemAndLlbOnRemUnit", 27),
          ("bertOnRemUnit", 26),
          ("block", 17),
          ("csuLoopAndBert", 32),
          ("dlciLocalLoop", 10),
          ("dlciRemoteLoop", 12),
          ("dsuLoopAndBert", 33),
          ("extInitLocalLoop", 14),
          ("ft1Enable", 21),
          ("lb1", 23),
          ("lb2", 24),
          ("lbbd", 22),
          ("llb", 19),
          ("llbOnRemUnit", 25),
          ("locAndRemMainLoops", 4),
          ("localAndBertOnRemUnit", 28),
          ("localBert", 30),
          ("localLoop", 2),
          ("localLoopOnRemUnit", 29),
          ("none", 1),
          ("remLoopOnExtUnit", 7),
          ("remLoopOnRemUnit", 16),
          ("remoteAnalogLoop", 5),
          ("remoteCsuLoopAndBert", 35),
          ("remoteDigitalLoop", 6),
          ("remoteDsuLoopAndBert", 36),
          ("remoteLoop", 3),
          ("remoteOcuLoopAndBert", 34),
          ("rlb", 20),
          ("testPerTS", 31),
          ("toneInjection", 9))
    )


_PrtSTstCmd_Type.__name__ = "Integer32"
_PrtSTstCmd_Object = MibTableColumn
prtSTstCmd = _PrtSTstCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 10),
    _PrtSTstCmd_Type()
)
prtSTstCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSTstCmd.setStatus("current")
_PrtSTstDuration_Type = Integer32
_PrtSTstDuration_Object = MibTableColumn
prtSTstDuration = _PrtSTstDuration_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 11),
    _PrtSTstDuration_Type()
)
prtSTstDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSTstDuration.setStatus("current")


class _PrtSBertClrCmd_Type(Integer32):
    """Custom type prtSBertClrCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtSBertClrCmd_Type.__name__ = "Integer32"
_PrtSBertClrCmd_Object = MibTableColumn
prtSBertClrCmd = _PrtSBertClrCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 12),
    _PrtSBertClrCmd_Type()
)
prtSBertClrCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSBertClrCmd.setStatus("current")
_PrtSBertTstRslt_Type = Integer32
_PrtSBertTstRslt_Object = MibTableColumn
prtSBertTstRslt = _PrtSBertTstRslt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 13),
    _PrtSBertTstRslt_Type()
)
prtSBertTstRslt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSBertTstRslt.setStatus("current")


class _PrtSInterfaceType_Type(DisplayString):
    """Custom type prtSInterfaceType based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_PrtSInterfaceType_Type.__name__ = "DisplayString"
_PrtSInterfaceType_Object = MibTableColumn
prtSInterfaceType = _PrtSInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 14),
    _PrtSInterfaceType_Type()
)
prtSInterfaceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSInterfaceType.setStatus("current")
_PrtSParamStatus_Type = OctetString
_PrtSParamStatus_Object = MibTableColumn
prtSParamStatus = _PrtSParamStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 15),
    _PrtSParamStatus_Type()
)
prtSParamStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSParamStatus.setStatus("current")
_PrtSTestMaskXp_Type = OctetString
_PrtSTestMaskXp_Object = MibTableColumn
prtSTestMaskXp = _PrtSTestMaskXp_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 16),
    _PrtSTestMaskXp_Type()
)
prtSTestMaskXp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSTestMaskXp.setStatus("current")


class _PrtSRdnStatus_Type(Integer32):
    """Custom type prtSRdnStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noRdn", 1),
          ("offline", 2),
          ("online", 3))
    )


_PrtSRdnStatus_Type.__name__ = "Integer32"
_PrtSRdnStatus_Object = MibTableColumn
prtSRdnStatus = _PrtSRdnStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 17),
    _PrtSRdnStatus_Type()
)
prtSRdnStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSRdnStatus.setStatus("current")
_PrtSAlrTable_Object = MibTable
prtSAlrTable = _PrtSAlrTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2)
)
if mibBuilder.loadTexts:
    prtSAlrTable.setStatus("current")
_PrtSAlrEntry_Object = MibTableRow
prtSAlrEntry = _PrtSAlrEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1)
)
prtSAlrEntry.setIndexNames(
    (0, "RAD-MIB", "prtSAlrSltIdx"),
    (0, "RAD-MIB", "prtSAlrPrtIdx"),
    (0, "RAD-MIB", "prtSAlrIdx"),
)
if mibBuilder.loadTexts:
    prtSAlrEntry.setStatus("current")
_PrtSAlrIdx_Type = Integer32
_PrtSAlrIdx_Object = MibTableColumn
prtSAlrIdx = _PrtSAlrIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 1),
    _PrtSAlrIdx_Type()
)
prtSAlrIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrIdx.setStatus("current")


class _PrtSAlrSltIdx_Type(Integer32):
    """Custom type prtSAlrSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255),
          ("psA", 1),
          ("psB", 2))
    )


_PrtSAlrSltIdx_Type.__name__ = "Integer32"
_PrtSAlrSltIdx_Object = MibTableColumn
prtSAlrSltIdx = _PrtSAlrSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 2),
    _PrtSAlrSltIdx_Type()
)
prtSAlrSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrSltIdx.setStatus("current")
_PrtSAlrPrtIdx_Type = Integer32
_PrtSAlrPrtIdx_Object = MibTableColumn
prtSAlrPrtIdx = _PrtSAlrPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 3),
    _PrtSAlrPrtIdx_Type()
)
prtSAlrPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrPrtIdx.setStatus("current")


class _PrtSAlrCodeDescription_Type(DisplayString):
    """Custom type prtSAlrCodeDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_PrtSAlrCodeDescription_Type.__name__ = "DisplayString"
_PrtSAlrCodeDescription_Object = MibTableColumn
prtSAlrCodeDescription = _PrtSAlrCodeDescription_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 4),
    _PrtSAlrCodeDescription_Type()
)
prtSAlrCodeDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrCodeDescription.setStatus("current")
_PrtSAlrCode_Type = Integer32
_PrtSAlrCode_Object = MibTableColumn
prtSAlrCode = _PrtSAlrCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 5),
    _PrtSAlrCode_Type()
)
prtSAlrCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrCode.setStatus("current")


class _PrtSAlrSeverity_Type(Integer32):
    """Custom type prtSAlrSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("warning", 6))
    )


_PrtSAlrSeverity_Type.__name__ = "Integer32"
_PrtSAlrSeverity_Object = MibTableColumn
prtSAlrSeverity = _PrtSAlrSeverity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 6),
    _PrtSAlrSeverity_Type()
)
prtSAlrSeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrSeverity.setStatus("current")


class _PrtSAlrState_Type(Integer32):
    """Custom type prtSAlrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtSAlrState_Type.__name__ = "Integer32"
_PrtSAlrState_Object = MibTableColumn
prtSAlrState = _PrtSAlrState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 7),
    _PrtSAlrState_Type()
)
prtSAlrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrState.setStatus("current")
_PrtSAlrCounter_Type = Integer32
_PrtSAlrCounter_Object = MibTableColumn
prtSAlrCounter = _PrtSAlrCounter_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 8),
    _PrtSAlrCounter_Type()
)
prtSAlrCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrCounter.setStatus("current")


class _PrtSAlrMask_Type(Integer32):
    """Custom type prtSAlrMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtSAlrMask_Type.__name__ = "Integer32"
_PrtSAlrMask_Object = MibTableColumn
prtSAlrMask = _PrtSAlrMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 9),
    _PrtSAlrMask_Type()
)
prtSAlrMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrMask.setStatus("current")


class _PrtSAlrInvert_Type(Integer32):
    """Custom type prtSAlrInvert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtSAlrInvert_Type.__name__ = "Integer32"
_PrtSAlrInvert_Object = MibTableColumn
prtSAlrInvert = _PrtSAlrInvert_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 10),
    _PrtSAlrInvert_Type()
)
prtSAlrInvert.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrInvert.setStatus("current")


class _PrtSAlrCardType_Type(Integer32):
    """Custom type prtSAlrCardType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              17,
              20,
              26,
              62,
              63,
              64,
              65,
              74,
              75,
              76,
              77,
              78,
              79,
              134,
              135,
              156,
              159,
              180,
              224,
              240,
              241,
              255,
              256,
              257,
              261,
              263,
              264,
              265,
              266,
              267,
              271,
              272,
              301,
              302,
              303,
              304,
              305,
              306,
              307,
              308,
              309,
              310,
              311,
              312,
              321,
              322,
              323,
              324)
        )
    )
    namedValues = NamedValues(
        *(("asmi54cE1AndEth", 266),
          ("asmi54cT1AndEth", 267),
          ("cl1", 20),
          ("cl1Clk", 26),
          ("clx1", 301),
          ("clx1GbE", 302),
          ("clx1S155", 303),
          ("clx1S155GbE", 304),
          ("empty", 2),
          ("hs12N", 272),
          ("hs6N", 271),
          ("hsEthSwitch", 224),
          ("hsr", 156),
          ("hsu12", 240),
          ("hsu6", 241),
          ("ls12", 159),
          ("ls6n", 180),
          ("ml8E1", 135),
          ("ml8E1Eth", 306),
          ("ml8T1", 134),
          ("ml8T1Eth", 305),
          ("mpw1", 312),
          ("msl4E1W2", 261),
          ("msl4E1W2Eth", 264),
          ("msl8E1W2", 263),
          ("msl8E1W2Eth", 265),
          ("op106cEth", 307),
          ("op106cEthT1", 309),
          ("op108cEth", 308),
          ("op108cEthE1", 310),
          ("op108cEthE1Unbal", 311),
          ("ps", 17),
          ("unknown", 1),
          ("vc16EandM", 77),
          ("vc16Fxo", 78),
          ("vc16Fxs", 79),
          ("vc4EandM", 256),
          ("vc4Fxo", 257),
          ("vc4Fxs", 255),
          ("vc8EandM", 74),
          ("vc8Fxo", 75),
          ("vc8Fxs", 76),
          ("vf24T1", 62),
          ("vf30E1", 63),
          ("vf48T1", 64),
          ("vf60E1", 65),
          ("vfs24T1", 321),
          ("vfs30E1", 322),
          ("vfs48T1", 323),
          ("vfs60E1", 324))
    )


_PrtSAlrCardType_Type.__name__ = "Integer32"
_PrtSAlrCardType_Object = MibTableColumn
prtSAlrCardType = _PrtSAlrCardType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 11),
    _PrtSAlrCardType_Type()
)
prtSAlrCardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlrCardType.setStatus("current")
_StatisPrtGen_ObjectIdentity = ObjectIdentity
statisPrtGen = _StatisPrtGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3)
)
_PrtFrStatis_ObjectIdentity = ObjectIdentity
prtFrStatis = _PrtFrStatis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1)
)
_PrtFrStatisTable_Object = MibTable
prtFrStatisTable = _PrtFrStatisTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1)
)
if mibBuilder.loadTexts:
    prtFrStatisTable.setStatus("current")
_PrtFrStatisEntry_Object = MibTableRow
prtFrStatisEntry = _PrtFrStatisEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1)
)
prtFrStatisEntry.setIndexNames(
    (0, "RAD-MIB", "prtFrStatisSltIdx"),
    (0, "RAD-MIB", "prtFrStatisPrtIdx"),
    (0, "RAD-MIB", "prtFrStatisInvIdx"),
)
if mibBuilder.loadTexts:
    prtFrStatisEntry.setStatus("current")


class _PrtFrStatisSltIdx_Type(Integer32):
    """Custom type prtFrStatisSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtFrStatisSltIdx_Type.__name__ = "Integer32"
_PrtFrStatisSltIdx_Object = MibTableColumn
prtFrStatisSltIdx = _PrtFrStatisSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 1),
    _PrtFrStatisSltIdx_Type()
)
prtFrStatisSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrStatisSltIdx.setStatus("current")


class _PrtFrStatisPrtIdx_Type(Integer32):
    """Custom type prtFrStatisPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6))
    )


_PrtFrStatisPrtIdx_Type.__name__ = "Integer32"
_PrtFrStatisPrtIdx_Object = MibTableColumn
prtFrStatisPrtIdx = _PrtFrStatisPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 2),
    _PrtFrStatisPrtIdx_Type()
)
prtFrStatisPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrStatisPrtIdx.setStatus("current")


class _PrtFrStatisInvIdx_Type(Integer32):
    """Custom type prtFrStatisInvIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("currentInv", 1),
          ("last", 2))
    )


_PrtFrStatisInvIdx_Type.__name__ = "Integer32"
_PrtFrStatisInvIdx_Object = MibTableColumn
prtFrStatisInvIdx = _PrtFrStatisInvIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 3),
    _PrtFrStatisInvIdx_Type()
)
prtFrStatisInvIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrStatisInvIdx.setStatus("current")


class _PrtFrTimeElapsed_Type(Integer32):
    """Custom type prtFrTimeElapsed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 899),
    )


_PrtFrTimeElapsed_Type.__name__ = "Integer32"
_PrtFrTimeElapsed_Object = MibTableColumn
prtFrTimeElapsed = _PrtFrTimeElapsed_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 4),
    _PrtFrTimeElapsed_Type()
)
prtFrTimeElapsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrTimeElapsed.setStatus("current")
_PrtFrRxTotalFrames_Type = Counter32
_PrtFrRxTotalFrames_Object = MibTableColumn
prtFrRxTotalFrames = _PrtFrRxTotalFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 5),
    _PrtFrRxTotalFrames_Type()
)
prtFrRxTotalFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrRxTotalFrames.setStatus("current")
_PrtFrTxTotalFrames_Type = Counter32
_PrtFrTxTotalFrames_Object = MibTableColumn
prtFrTxTotalFrames = _PrtFrTxTotalFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 6),
    _PrtFrTxTotalFrames_Type()
)
prtFrTxTotalFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrTxTotalFrames.setStatus("current")
_PrtFrRxTotalBytes_Type = Counter32
_PrtFrRxTotalBytes_Object = MibTableColumn
prtFrRxTotalBytes = _PrtFrRxTotalBytes_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 7),
    _PrtFrRxTotalBytes_Type()
)
prtFrRxTotalBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrRxTotalBytes.setStatus("current")
_PrtFrTxTotalBytes_Type = Counter32
_PrtFrTxTotalBytes_Object = MibTableColumn
prtFrTxTotalBytes = _PrtFrTxTotalBytes_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 8),
    _PrtFrTxTotalBytes_Type()
)
prtFrTxTotalBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrTxTotalBytes.setStatus("current")
_PrtFrRxMngFrames_Type = Counter32
_PrtFrRxMngFrames_Object = MibTableColumn
prtFrRxMngFrames = _PrtFrRxMngFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 9),
    _PrtFrRxMngFrames_Type()
)
prtFrRxMngFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrRxMngFrames.setStatus("current")
_PrtFrTxMngFrames_Type = Counter32
_PrtFrTxMngFrames_Object = MibTableColumn
prtFrTxMngFrames = _PrtFrTxMngFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 10),
    _PrtFrTxMngFrames_Type()
)
prtFrTxMngFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrTxMngFrames.setStatus("current")
_PrtFrRxDeFrames_Type = Counter32
_PrtFrRxDeFrames_Object = MibTableColumn
prtFrRxDeFrames = _PrtFrRxDeFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 11),
    _PrtFrRxDeFrames_Type()
)
prtFrRxDeFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrRxDeFrames.setStatus("current")
_PrtFrTxDeFrames_Type = Counter32
_PrtFrTxDeFrames_Object = MibTableColumn
prtFrTxDeFrames = _PrtFrTxDeFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 12),
    _PrtFrTxDeFrames_Type()
)
prtFrTxDeFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrTxDeFrames.setStatus("current")
_PrtFrRxDcrdCongDeFr_Type = Counter32
_PrtFrRxDcrdCongDeFr_Object = MibTableColumn
prtFrRxDcrdCongDeFr = _PrtFrRxDcrdCongDeFr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 13),
    _PrtFrRxDcrdCongDeFr_Type()
)
prtFrRxDcrdCongDeFr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrRxDcrdCongDeFr.setStatus("current")
_PrtFrTxDcrdCongDeFr_Type = Counter32
_PrtFrTxDcrdCongDeFr_Object = MibTableColumn
prtFrTxDcrdCongDeFr = _PrtFrTxDcrdCongDeFr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 14),
    _PrtFrTxDcrdCongDeFr_Type()
)
prtFrTxDcrdCongDeFr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrTxDcrdCongDeFr.setStatus("current")
_PrtFrRxDcrdCongAllFr_Type = Counter32
_PrtFrRxDcrdCongAllFr_Object = MibTableColumn
prtFrRxDcrdCongAllFr = _PrtFrRxDcrdCongAllFr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 15),
    _PrtFrRxDcrdCongAllFr_Type()
)
prtFrRxDcrdCongAllFr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrRxDcrdCongAllFr.setStatus("current")
_PrtFrTxDcrdCongAllFr_Type = Counter32
_PrtFrTxDcrdCongAllFr_Object = MibTableColumn
prtFrTxDcrdCongAllFr = _PrtFrTxDcrdCongAllFr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 16),
    _PrtFrTxDcrdCongAllFr_Type()
)
prtFrTxDcrdCongAllFr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrTxDcrdCongAllFr.setStatus("current")
_PrtFrRxFecn_Type = Counter32
_PrtFrRxFecn_Object = MibTableColumn
prtFrRxFecn = _PrtFrRxFecn_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 17),
    _PrtFrRxFecn_Type()
)
prtFrRxFecn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrRxFecn.setStatus("current")
_PrtFrTxFecn_Type = Counter32
_PrtFrTxFecn_Object = MibTableColumn
prtFrTxFecn = _PrtFrTxFecn_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 18),
    _PrtFrTxFecn_Type()
)
prtFrTxFecn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrTxFecn.setStatus("current")
_PrtFrRxBecn_Type = Counter32
_PrtFrRxBecn_Object = MibTableColumn
prtFrRxBecn = _PrtFrRxBecn_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 19),
    _PrtFrRxBecn_Type()
)
prtFrRxBecn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrRxBecn.setStatus("current")
_PrtFrTxBecn_Type = Counter32
_PrtFrTxBecn_Object = MibTableColumn
prtFrTxBecn = _PrtFrTxBecn_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 20),
    _PrtFrTxBecn_Type()
)
prtFrTxBecn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrTxBecn.setStatus("current")
_PrtFrRxBeViol_Type = Counter32
_PrtFrRxBeViol_Object = MibTableColumn
prtFrRxBeViol = _PrtFrRxBeViol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 21),
    _PrtFrRxBeViol_Type()
)
prtFrRxBeViol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrRxBeViol.setStatus("current")
_PrtFrTxBeViol_Type = Counter32
_PrtFrTxBeViol_Object = MibTableColumn
prtFrTxBeViol = _PrtFrTxBeViol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 22),
    _PrtFrTxBeViol_Type()
)
prtFrTxBeViol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrTxBeViol.setStatus("current")
_PrtFrRxBcViol_Type = Counter32
_PrtFrRxBcViol_Object = MibTableColumn
prtFrRxBcViol = _PrtFrRxBcViol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 23),
    _PrtFrRxBcViol_Type()
)
prtFrRxBcViol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrRxBcViol.setStatus("current")
_PrtFrTxBcViol_Type = Counter32
_PrtFrTxBcViol_Object = MibTableColumn
prtFrTxBcViol = _PrtFrTxBcViol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 24),
    _PrtFrTxBcViol_Type()
)
prtFrTxBcViol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrTxBcViol.setStatus("current")
_PrtCrStatis_ObjectIdentity = ObjectIdentity
prtCrStatis = _PrtCrStatis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2)
)
_PrtCrStatisTable_Object = MibTable
prtCrStatisTable = _PrtCrStatisTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1)
)
if mibBuilder.loadTexts:
    prtCrStatisTable.setStatus("current")
_PrtCrStatisEntry_Object = MibTableRow
prtCrStatisEntry = _PrtCrStatisEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1)
)
prtCrStatisEntry.setIndexNames(
    (0, "RAD-MIB", "prtCrStatisSltIdx"),
    (0, "RAD-MIB", "prtCrStatisPrtIdx"),
    (0, "RAD-MIB", "prtCrStatisInvIdx"),
)
if mibBuilder.loadTexts:
    prtCrStatisEntry.setStatus("current")


class _PrtCrStatisSltIdx_Type(Integer32):
    """Custom type prtCrStatisSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtCrStatisSltIdx_Type.__name__ = "Integer32"
_PrtCrStatisSltIdx_Object = MibTableColumn
prtCrStatisSltIdx = _PrtCrStatisSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 1),
    _PrtCrStatisSltIdx_Type()
)
prtCrStatisSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCrStatisSltIdx.setStatus("current")


class _PrtCrStatisPrtIdx_Type(Integer32):
    """Custom type prtCrStatisPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6))
    )


_PrtCrStatisPrtIdx_Type.__name__ = "Integer32"
_PrtCrStatisPrtIdx_Object = MibTableColumn
prtCrStatisPrtIdx = _PrtCrStatisPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 2),
    _PrtCrStatisPrtIdx_Type()
)
prtCrStatisPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCrStatisPrtIdx.setStatus("current")


class _PrtCrStatisInvIdx_Type(Integer32):
    """Custom type prtCrStatisInvIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("currentInv", 1),
          ("last", 2))
    )


_PrtCrStatisInvIdx_Type.__name__ = "Integer32"
_PrtCrStatisInvIdx_Object = MibTableColumn
prtCrStatisInvIdx = _PrtCrStatisInvIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 3),
    _PrtCrStatisInvIdx_Type()
)
prtCrStatisInvIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCrStatisInvIdx.setStatus("current")


class _PrtCrTimeElapsed_Type(Integer32):
    """Custom type prtCrTimeElapsed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 899),
    )


_PrtCrTimeElapsed_Type.__name__ = "Integer32"
_PrtCrTimeElapsed_Object = MibTableColumn
prtCrTimeElapsed = _PrtCrTimeElapsed_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 4),
    _PrtCrTimeElapsed_Type()
)
prtCrTimeElapsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCrTimeElapsed.setStatus("current")
_PrtCrRxTotalCells_Type = Counter32
_PrtCrRxTotalCells_Object = MibTableColumn
prtCrRxTotalCells = _PrtCrRxTotalCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 5),
    _PrtCrRxTotalCells_Type()
)
prtCrRxTotalCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCrRxTotalCells.setStatus("current")
_PrtCrTxTotalCells_Type = Counter32
_PrtCrTxTotalCells_Object = MibTableColumn
prtCrTxTotalCells = _PrtCrTxTotalCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 6),
    _PrtCrTxTotalCells_Type()
)
prtCrTxTotalCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCrTxTotalCells.setStatus("current")
_PrtCrRxDataCells_Type = Counter32
_PrtCrRxDataCells_Object = MibTableColumn
prtCrRxDataCells = _PrtCrRxDataCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 7),
    _PrtCrRxDataCells_Type()
)
prtCrRxDataCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCrRxDataCells.setStatus("current")
_PrtCrTxDataCells_Type = Counter32
_PrtCrTxDataCells_Object = MibTableColumn
prtCrTxDataCells = _PrtCrTxDataCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 8),
    _PrtCrTxDataCells_Type()
)
prtCrTxDataCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCrTxDataCells.setStatus("current")
_PrtDlciStatis_ObjectIdentity = ObjectIdentity
prtDlciStatis = _PrtDlciStatis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3)
)
_PrtDlciStatisTable_Object = MibTable
prtDlciStatisTable = _PrtDlciStatisTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1)
)
if mibBuilder.loadTexts:
    prtDlciStatisTable.setStatus("current")
_PrtDlciStatisEntry_Object = MibTableRow
prtDlciStatisEntry = _PrtDlciStatisEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1)
)
prtDlciStatisEntry.setIndexNames(
    (0, "RAD-MIB", "prtDlciSltIdx"),
    (0, "RAD-MIB", "prtDlciPrtIdx"),
    (0, "RAD-MIB", "prtDlciIdx"),
)
if mibBuilder.loadTexts:
    prtDlciStatisEntry.setStatus("current")


class _PrtDlciSltIdx_Type(Integer32):
    """Custom type prtDlciSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtDlciSltIdx_Type.__name__ = "Integer32"
_PrtDlciSltIdx_Object = MibTableColumn
prtDlciSltIdx = _PrtDlciSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 1),
    _PrtDlciSltIdx_Type()
)
prtDlciSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciSltIdx.setStatus("current")


class _PrtDlciPrtIdx_Type(Integer32):
    """Custom type prtDlciPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6))
    )


_PrtDlciPrtIdx_Type.__name__ = "Integer32"
_PrtDlciPrtIdx_Object = MibTableColumn
prtDlciPrtIdx = _PrtDlciPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 2),
    _PrtDlciPrtIdx_Type()
)
prtDlciPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciPrtIdx.setStatus("current")


class _PrtDlciIdx_Type(Integer32):
    """Custom type prtDlciIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 991),
    )


_PrtDlciIdx_Type.__name__ = "Integer32"
_PrtDlciIdx_Object = MibTableColumn
prtDlciIdx = _PrtDlciIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 3),
    _PrtDlciIdx_Type()
)
prtDlciIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciIdx.setStatus("current")
_PrtDlciRxDeFrames_Type = Counter32
_PrtDlciRxDeFrames_Object = MibTableColumn
prtDlciRxDeFrames = _PrtDlciRxDeFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 4),
    _PrtDlciRxDeFrames_Type()
)
prtDlciRxDeFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciRxDeFrames.setStatus("current")
_PrtDlciTxDeFrames_Type = Counter32
_PrtDlciTxDeFrames_Object = MibTableColumn
prtDlciTxDeFrames = _PrtDlciTxDeFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 5),
    _PrtDlciTxDeFrames_Type()
)
prtDlciTxDeFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciTxDeFrames.setStatus("current")
_PrtDlciRxDcrdCongDeFr_Type = Counter32
_PrtDlciRxDcrdCongDeFr_Object = MibTableColumn
prtDlciRxDcrdCongDeFr = _PrtDlciRxDcrdCongDeFr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 6),
    _PrtDlciRxDcrdCongDeFr_Type()
)
prtDlciRxDcrdCongDeFr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciRxDcrdCongDeFr.setStatus("current")
_PrtDlciTxDcrdCongDeFr_Type = Counter32
_PrtDlciTxDcrdCongDeFr_Object = MibTableColumn
prtDlciTxDcrdCongDeFr = _PrtDlciTxDcrdCongDeFr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 7),
    _PrtDlciTxDcrdCongDeFr_Type()
)
prtDlciTxDcrdCongDeFr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciTxDcrdCongDeFr.setStatus("current")
_PrtDlciRxDcrdCongAllFr_Type = Counter32
_PrtDlciRxDcrdCongAllFr_Object = MibTableColumn
prtDlciRxDcrdCongAllFr = _PrtDlciRxDcrdCongAllFr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 8),
    _PrtDlciRxDcrdCongAllFr_Type()
)
prtDlciRxDcrdCongAllFr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciRxDcrdCongAllFr.setStatus("current")
_PrtDlciTxDcrdCongAllFr_Type = Counter32
_PrtDlciTxDcrdCongAllFr_Object = MibTableColumn
prtDlciTxDcrdCongAllFr = _PrtDlciTxDcrdCongAllFr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 9),
    _PrtDlciTxDcrdCongAllFr_Type()
)
prtDlciTxDcrdCongAllFr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciTxDcrdCongAllFr.setStatus("current")
_PrtDlciTxFecn_Type = Counter32
_PrtDlciTxFecn_Object = MibTableColumn
prtDlciTxFecn = _PrtDlciTxFecn_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 10),
    _PrtDlciTxFecn_Type()
)
prtDlciTxFecn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciTxFecn.setStatus("current")
_PrtDlciTxBecn_Type = Counter32
_PrtDlciTxBecn_Object = MibTableColumn
prtDlciTxBecn = _PrtDlciTxBecn_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 11),
    _PrtDlciTxBecn_Type()
)
prtDlciTxBecn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciTxBecn.setStatus("current")
_PrtDlciRxBeViol_Type = Counter32
_PrtDlciRxBeViol_Object = MibTableColumn
prtDlciRxBeViol = _PrtDlciRxBeViol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 12),
    _PrtDlciRxBeViol_Type()
)
prtDlciRxBeViol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciRxBeViol.setStatus("current")
_PrtDlciTxBeViol_Type = Counter32
_PrtDlciTxBeViol_Object = MibTableColumn
prtDlciTxBeViol = _PrtDlciTxBeViol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 13),
    _PrtDlciTxBeViol_Type()
)
prtDlciTxBeViol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciTxBeViol.setStatus("current")
_PrtDlciRxBcViol_Type = Counter32
_PrtDlciRxBcViol_Object = MibTableColumn
prtDlciRxBcViol = _PrtDlciRxBcViol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 14),
    _PrtDlciRxBcViol_Type()
)
prtDlciRxBcViol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciRxBcViol.setStatus("current")
_PrtDlciTxBcViol_Type = Counter32
_PrtDlciTxBcViol_Object = MibTableColumn
prtDlciTxBcViol = _PrtDlciTxBcViol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 15),
    _PrtDlciTxBcViol_Type()
)
prtDlciTxBcViol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciTxBcViol.setStatus("current")
_PrtT1Statis_ObjectIdentity = ObjectIdentity
prtT1Statis = _PrtT1Statis_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 4)
)
_PrtT1FdlMsgTable_Object = MibTable
prtT1FdlMsgTable = _PrtT1FdlMsgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 4, 1)
)
if mibBuilder.loadTexts:
    prtT1FdlMsgTable.setStatus("current")
_PrtT1FdlMsgEntry_Object = MibTableRow
prtT1FdlMsgEntry = _PrtT1FdlMsgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 4, 1, 1)
)
prtT1FdlMsgEntry.setIndexNames(
    (0, "RAD-MIB", "prtT1FdlMsgSltIdx"),
    (0, "RAD-MIB", "prtT1FdlMsgPrtIdx"),
    (0, "RAD-MIB", "prtT1FdlMsgFdlTxRx"),
)
if mibBuilder.loadTexts:
    prtT1FdlMsgEntry.setStatus("current")


class _PrtT1FdlMsgSltIdx_Type(Integer32):
    """Custom type prtT1FdlMsgSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtT1FdlMsgSltIdx_Type.__name__ = "Integer32"
_PrtT1FdlMsgSltIdx_Object = MibTableColumn
prtT1FdlMsgSltIdx = _PrtT1FdlMsgSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 4, 1, 1, 1),
    _PrtT1FdlMsgSltIdx_Type()
)
prtT1FdlMsgSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1FdlMsgSltIdx.setStatus("current")


class _PrtT1FdlMsgPrtIdx_Type(Integer32):
    """Custom type prtT1FdlMsgPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("exPrt1", 1)
    )


_PrtT1FdlMsgPrtIdx_Type.__name__ = "Integer32"
_PrtT1FdlMsgPrtIdx_Object = MibTableColumn
prtT1FdlMsgPrtIdx = _PrtT1FdlMsgPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 4, 1, 1, 2),
    _PrtT1FdlMsgPrtIdx_Type()
)
prtT1FdlMsgPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1FdlMsgPrtIdx.setStatus("current")


class _PrtT1FdlMsgFdlTxRx_Type(Integer32):
    """Custom type prtT1FdlMsgFdlTxRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("rx", 2),
          ("tx", 1))
    )


_PrtT1FdlMsgFdlTxRx_Type.__name__ = "Integer32"
_PrtT1FdlMsgFdlTxRx_Object = MibTableColumn
prtT1FdlMsgFdlTxRx = _PrtT1FdlMsgFdlTxRx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 4, 1, 1, 3),
    _PrtT1FdlMsgFdlTxRx_Type()
)
prtT1FdlMsgFdlTxRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1FdlMsgFdlTxRx.setStatus("current")
_PrtT1FdlMsg_Type = OctetString
_PrtT1FdlMsg_Object = MibTableColumn
prtT1FdlMsg = _PrtT1FdlMsg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 4, 1, 1, 4),
    _PrtT1FdlMsg_Type()
)
prtT1FdlMsg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1FdlMsg.setStatus("current")
_CnfgPrtGen_ObjectIdentity = ObjectIdentity
cnfgPrtGen = _CnfgPrtGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2)
)
_PrtExTsSplitTable_Object = MibTable
prtExTsSplitTable = _PrtExTsSplitTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1)
)
if mibBuilder.loadTexts:
    prtExTsSplitTable.setStatus("current")
_PrtExTsSplitEntry_Object = MibTableRow
prtExTsSplitEntry = _PrtExTsSplitEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1)
)
prtExTsSplitEntry.setIndexNames(
    (0, "RAD-MIB", "prtExTsCnfgIdx"),
    (0, "RAD-MIB", "prtExTsSltIdx"),
    (0, "RAD-MIB", "prtExTsPrtIdx"),
    (0, "RAD-MIB", "prtExTsIdx"),
    (0, "RAD-MIB", "prtExTsBit"),
)
if mibBuilder.loadTexts:
    prtExTsSplitEntry.setStatus("current")


class _PrtExTsCnfgIdx_Type(Integer32):
    """Custom type prtExTsCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExTsCnfgIdx_Type.__name__ = "Integer32"
_PrtExTsCnfgIdx_Object = MibTableColumn
prtExTsCnfgIdx = _PrtExTsCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 1),
    _PrtExTsCnfgIdx_Type()
)
prtExTsCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExTsCnfgIdx.setStatus("current")


class _PrtExTsSltIdx_Type(Integer32):
    """Custom type prtExTsSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtExTsSltIdx_Type.__name__ = "Integer32"
_PrtExTsSltIdx_Object = MibTableColumn
prtExTsSltIdx = _PrtExTsSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 2),
    _PrtExTsSltIdx_Type()
)
prtExTsSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExTsSltIdx.setStatus("current")
_PrtExTsPrtIdx_Type = Integer32
_PrtExTsPrtIdx_Object = MibTableColumn
prtExTsPrtIdx = _PrtExTsPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 3),
    _PrtExTsPrtIdx_Type()
)
prtExTsPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExTsPrtIdx.setStatus("current")
_PrtExTsIdx_Type = Integer32
_PrtExTsIdx_Object = MibTableColumn
prtExTsIdx = _PrtExTsIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 4),
    _PrtExTsIdx_Type()
)
prtExTsIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExTsIdx.setStatus("current")
_PrtExTsBit_Type = Integer32
_PrtExTsBit_Object = MibTableColumn
prtExTsBit = _PrtExTsBit_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 5),
    _PrtExTsBit_Type()
)
prtExTsBit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExTsBit.setStatus("current")


class _PrtExTsIConSlot_Type(Integer32):
    """Custom type prtExTsIConSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("noConnect", 2),
          ("notApplicable", 255))
    )


_PrtExTsIConSlot_Type.__name__ = "Integer32"
_PrtExTsIConSlot_Object = MibTableColumn
prtExTsIConSlot = _PrtExTsIConSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 6),
    _PrtExTsIConSlot_Type()
)
prtExTsIConSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExTsIConSlot.setStatus("current")
_PrtExTsIConPrt_Type = Integer32
_PrtExTsIConPrt_Object = MibTableColumn
prtExTsIConPrt = _PrtExTsIConPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 7),
    _PrtExTsIConPrt_Type()
)
prtExTsIConPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExTsIConPrt.setStatus("current")


class _PrtExTsBitTest_Type(Integer32):
    """Custom type prtExTsBitTest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              8,
              30,
              255)
        )
    )
    namedValues = NamedValues(
        *(("localBert", 30),
          ("none", 1),
          ("notApplicable", 255),
          ("remoteBert", 8))
    )


_PrtExTsBitTest_Type.__name__ = "Integer32"
_PrtExTsBitTest_Object = MibTableColumn
prtExTsBitTest = _PrtExTsBitTest_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 8),
    _PrtExTsBitTest_Type()
)
prtExTsBitTest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExTsBitTest.setStatus("current")
_PrtExTsTxSignaling_Type = OctetString
_PrtExTsTxSignaling_Object = MibTableColumn
prtExTsTxSignaling = _PrtExTsTxSignaling_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 9),
    _PrtExTsTxSignaling_Type()
)
prtExTsTxSignaling.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExTsTxSignaling.setStatus("current")
_PrtExTsRxSignaling_Type = OctetString
_PrtExTsRxSignaling_Object = MibTableColumn
prtExTsRxSignaling = _PrtExTsRxSignaling_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 10),
    _PrtExTsRxSignaling_Type()
)
prtExTsRxSignaling.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExTsRxSignaling.setStatus("current")
_PrtExTsTxIoSignaling_Type = OctetString
_PrtExTsTxIoSignaling_Object = MibTableColumn
prtExTsTxIoSignaling = _PrtExTsTxIoSignaling_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 11),
    _PrtExTsTxIoSignaling_Type()
)
prtExTsTxIoSignaling.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExTsTxIoSignaling.setStatus("current")
_PrtExTsRxIoSignaling_Type = OctetString
_PrtExTsRxIoSignaling_Object = MibTableColumn
prtExTsRxIoSignaling = _PrtExTsRxIoSignaling_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 12),
    _PrtExTsRxIoSignaling_Type()
)
prtExTsRxIoSignaling.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExTsRxIoSignaling.setStatus("current")
_PrtCnfgAgenda_ObjectIdentity = ObjectIdentity
prtCnfgAgenda = _PrtCnfgAgenda_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2)
)
_PrtAgendaBehaviourTable_Object = MibTable
prtAgendaBehaviourTable = _PrtAgendaBehaviourTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 1)
)
if mibBuilder.loadTexts:
    prtAgendaBehaviourTable.setStatus("current")
_PrtAgendaBehaviourEntry_Object = MibTableRow
prtAgendaBehaviourEntry = _PrtAgendaBehaviourEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 1, 1)
)
prtAgendaBehaviourEntry.setIndexNames(
    (0, "RAD-MIB", "prtAgendaBehaviourCnfgIdx"),
    (0, "RAD-MIB", "prtAgendaBehaviourSltIdx"),
    (0, "RAD-MIB", "prtAgendaBehaviourPrtIdx"),
)
if mibBuilder.loadTexts:
    prtAgendaBehaviourEntry.setStatus("current")


class _PrtAgendaBehaviourCnfgIdx_Type(Integer32):
    """Custom type prtAgendaBehaviourCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtAgendaBehaviourCnfgIdx_Type.__name__ = "Integer32"
_PrtAgendaBehaviourCnfgIdx_Object = MibTableColumn
prtAgendaBehaviourCnfgIdx = _PrtAgendaBehaviourCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 1, 1, 1),
    _PrtAgendaBehaviourCnfgIdx_Type()
)
prtAgendaBehaviourCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAgendaBehaviourCnfgIdx.setStatus("current")
_PrtAgendaBehaviourSltIdx_Type = Integer32
_PrtAgendaBehaviourSltIdx_Object = MibTableColumn
prtAgendaBehaviourSltIdx = _PrtAgendaBehaviourSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 1, 1, 2),
    _PrtAgendaBehaviourSltIdx_Type()
)
prtAgendaBehaviourSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAgendaBehaviourSltIdx.setStatus("current")
_PrtAgendaBehaviourPrtIdx_Type = Integer32
_PrtAgendaBehaviourPrtIdx_Object = MibTableColumn
prtAgendaBehaviourPrtIdx = _PrtAgendaBehaviourPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 1, 1, 3),
    _PrtAgendaBehaviourPrtIdx_Type()
)
prtAgendaBehaviourPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAgendaBehaviourPrtIdx.setStatus("current")


class _PrtAgendaBehaviourOnOff_Type(Integer32):
    """Custom type prtAgendaBehaviourOnOff based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_PrtAgendaBehaviourOnOff_Type.__name__ = "Integer32"
_PrtAgendaBehaviourOnOff_Object = MibTableColumn
prtAgendaBehaviourOnOff = _PrtAgendaBehaviourOnOff_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 1, 1, 4),
    _PrtAgendaBehaviourOnOff_Type()
)
prtAgendaBehaviourOnOff.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtAgendaBehaviourOnOff.setStatus("current")
_PrtCnfgAgendaTable_Object = MibTable
prtCnfgAgendaTable = _PrtCnfgAgendaTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2)
)
if mibBuilder.loadTexts:
    prtCnfgAgendaTable.setStatus("current")
_PrtCnfgAgendaEntry_Object = MibTableRow
prtCnfgAgendaEntry = _PrtCnfgAgendaEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1)
)
prtCnfgAgendaEntry.setIndexNames(
    (0, "RAD-MIB", "prtCnfgAgendaCnfgIdx"),
    (0, "RAD-MIB", "prtCnfgAgendaSltIdx"),
    (0, "RAD-MIB", "prtCnfgAgendaPrtIdx"),
    (0, "RAD-MIB", "prtCnfgAgendaDayIdx"),
    (0, "RAD-MIB", "prtCnfgAgendaSesId"),
)
if mibBuilder.loadTexts:
    prtCnfgAgendaEntry.setStatus("current")


class _PrtCnfgAgendaCnfgIdx_Type(Integer32):
    """Custom type prtCnfgAgendaCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtCnfgAgendaCnfgIdx_Type.__name__ = "Integer32"
_PrtCnfgAgendaCnfgIdx_Object = MibTableColumn
prtCnfgAgendaCnfgIdx = _PrtCnfgAgendaCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1, 1),
    _PrtCnfgAgendaCnfgIdx_Type()
)
prtCnfgAgendaCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCnfgAgendaCnfgIdx.setStatus("current")
_PrtCnfgAgendaSltIdx_Type = Integer32
_PrtCnfgAgendaSltIdx_Object = MibTableColumn
prtCnfgAgendaSltIdx = _PrtCnfgAgendaSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1, 2),
    _PrtCnfgAgendaSltIdx_Type()
)
prtCnfgAgendaSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCnfgAgendaSltIdx.setStatus("current")
_PrtCnfgAgendaPrtIdx_Type = Integer32
_PrtCnfgAgendaPrtIdx_Object = MibTableColumn
prtCnfgAgendaPrtIdx = _PrtCnfgAgendaPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1, 3),
    _PrtCnfgAgendaPrtIdx_Type()
)
prtCnfgAgendaPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCnfgAgendaPrtIdx.setStatus("current")


class _PrtCnfgAgendaDayIdx_Type(Integer32):
    """Custom type prtCnfgAgendaDayIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("friday", 5),
          ("monday", 1),
          ("saturday", 6),
          ("sunday", 7),
          ("thursday", 4),
          ("tuesday", 2),
          ("wednesday", 3))
    )


_PrtCnfgAgendaDayIdx_Type.__name__ = "Integer32"
_PrtCnfgAgendaDayIdx_Object = MibTableColumn
prtCnfgAgendaDayIdx = _PrtCnfgAgendaDayIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1, 4),
    _PrtCnfgAgendaDayIdx_Type()
)
prtCnfgAgendaDayIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCnfgAgendaDayIdx.setStatus("current")


class _PrtCnfgAgendaSesId_Type(Integer32):
    """Custom type prtCnfgAgendaSesId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_PrtCnfgAgendaSesId_Type.__name__ = "Integer32"
_PrtCnfgAgendaSesId_Object = MibTableColumn
prtCnfgAgendaSesId = _PrtCnfgAgendaSesId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1, 5),
    _PrtCnfgAgendaSesId_Type()
)
prtCnfgAgendaSesId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCnfgAgendaSesId.setStatus("current")


class _PrtCnfgAgendaFrom_Type(Integer32):
    """Custom type prtCnfgAgendaFrom based on Integer32"""
    defaultValue = 86400

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 86400),
    )


_PrtCnfgAgendaFrom_Type.__name__ = "Integer32"
_PrtCnfgAgendaFrom_Object = MibTableColumn
prtCnfgAgendaFrom = _PrtCnfgAgendaFrom_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1, 6),
    _PrtCnfgAgendaFrom_Type()
)
prtCnfgAgendaFrom.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtCnfgAgendaFrom.setStatus("current")


class _PrtCnfgAgendaTo_Type(Integer32):
    """Custom type prtCnfgAgendaTo based on Integer32"""
    defaultValue = 86400

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 86400),
    )


_PrtCnfgAgendaTo_Type.__name__ = "Integer32"
_PrtCnfgAgendaTo_Object = MibTableColumn
prtCnfgAgendaTo = _PrtCnfgAgendaTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1, 7),
    _PrtCnfgAgendaTo_Type()
)
prtCnfgAgendaTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtCnfgAgendaTo.setStatus("current")
_PrtGenCnfgTable_Object = MibTable
prtGenCnfgTable = _PrtGenCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3)
)
if mibBuilder.loadTexts:
    prtGenCnfgTable.setStatus("current")
_PrtGenCnfgEntry_Object = MibTableRow
prtGenCnfgEntry = _PrtGenCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1)
)
prtGenCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtGenCnfgIdx"),
    (0, "RAD-MIB", "prtGenCnfgSltIdx"),
    (0, "RAD-MIB", "prtGenCnfgPrtIdx"),
)
if mibBuilder.loadTexts:
    prtGenCnfgEntry.setStatus("current")


class _PrtGenCnfgIdx_Type(Integer32):
    """Custom type prtGenCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtGenCnfgIdx_Type.__name__ = "Integer32"
_PrtGenCnfgIdx_Object = MibTableColumn
prtGenCnfgIdx = _PrtGenCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 1),
    _PrtGenCnfgIdx_Type()
)
prtGenCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenCnfgIdx.setStatus("current")


class _PrtGenCnfgSltIdx_Type(Integer32):
    """Custom type prtGenCnfgSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtGenCnfgSltIdx_Type.__name__ = "Integer32"
_PrtGenCnfgSltIdx_Object = MibTableColumn
prtGenCnfgSltIdx = _PrtGenCnfgSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 2),
    _PrtGenCnfgSltIdx_Type()
)
prtGenCnfgSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenCnfgSltIdx.setStatus("current")
_PrtGenCnfgPrtIdx_Type = Integer32
_PrtGenCnfgPrtIdx_Object = MibTableColumn
prtGenCnfgPrtIdx = _PrtGenCnfgPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 3),
    _PrtGenCnfgPrtIdx_Type()
)
prtGenCnfgPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenCnfgPrtIdx.setStatus("current")


class _PrtGenCnfgLinkToSlot_Type(Integer32):
    """Custom type prtGenCnfgLinkToSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtGenCnfgLinkToSlot_Type.__name__ = "Integer32"
_PrtGenCnfgLinkToSlot_Object = MibTableColumn
prtGenCnfgLinkToSlot = _PrtGenCnfgLinkToSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 4),
    _PrtGenCnfgLinkToSlot_Type()
)
prtGenCnfgLinkToSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenCnfgLinkToSlot.setStatus("current")
_PrtGenCnfgLinkToPort_Type = Integer32
_PrtGenCnfgLinkToPort_Object = MibTableColumn
prtGenCnfgLinkToPort = _PrtGenCnfgLinkToPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 5),
    _PrtGenCnfgLinkToPort_Type()
)
prtGenCnfgLinkToPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenCnfgLinkToPort.setStatus("current")


class _PrtGenCnfgPortId_Type(Integer32):
    """Custom type prtGenCnfgPortId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PrtGenCnfgPortId_Type.__name__ = "Integer32"
_PrtGenCnfgPortId_Object = MibTableColumn
prtGenCnfgPortId = _PrtGenCnfgPortId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 6),
    _PrtGenCnfgPortId_Type()
)
prtGenCnfgPortId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenCnfgPortId.setStatus("current")


class _PrtGenCnfgBusConnection_Type(Integer32):
    """Custom type prtGenCnfgBusConnection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("full", 3),
          ("notApplicable", 1),
          ("partial", 2),
          ("partialCD", 4))
    )


_PrtGenCnfgBusConnection_Type.__name__ = "Integer32"
_PrtGenCnfgBusConnection_Object = MibTableColumn
prtGenCnfgBusConnection = _PrtGenCnfgBusConnection_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 7),
    _PrtGenCnfgBusConnection_Type()
)
prtGenCnfgBusConnection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenCnfgBusConnection.setStatus("current")


class _PrtGenCnfgInbandMng_Type(Integer32):
    """Custom type prtGenCnfgInbandMng based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_PrtGenCnfgInbandMng_Type.__name__ = "Integer32"
_PrtGenCnfgInbandMng_Object = MibTableColumn
prtGenCnfgInbandMng = _PrtGenCnfgInbandMng_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 8),
    _PrtGenCnfgInbandMng_Type()
)
prtGenCnfgInbandMng.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenCnfgInbandMng.setStatus("current")


class _PrtGenCnfgInbandMngRoutProt_Type(Integer32):
    """Custom type prtGenCnfgInbandMngRoutProt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("notApplicable", 255),
          ("proprietaryRip", 3),
          ("rip2", 2))
    )


_PrtGenCnfgInbandMngRoutProt_Type.__name__ = "Integer32"
_PrtGenCnfgInbandMngRoutProt_Object = MibTableColumn
prtGenCnfgInbandMngRoutProt = _PrtGenCnfgInbandMngRoutProt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 9),
    _PrtGenCnfgInbandMngRoutProt_Type()
)
prtGenCnfgInbandMngRoutProt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenCnfgInbandMngRoutProt.setStatus("current")


class _PrtGenCnfgProtectionMode_Type(Integer32):
    """Custom type prtGenCnfgProtectionMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("primary", 3),
          ("secondary", 2))
    )


_PrtGenCnfgProtectionMode_Type.__name__ = "Integer32"
_PrtGenCnfgProtectionMode_Object = MibTableColumn
prtGenCnfgProtectionMode = _PrtGenCnfgProtectionMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 10),
    _PrtGenCnfgProtectionMode_Type()
)
prtGenCnfgProtectionMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenCnfgProtectionMode.setStatus("current")


class _PrtGenCnfgConnect_Type(Integer32):
    """Custom type prtGenCnfgConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtGenCnfgConnect_Type.__name__ = "Integer32"
_PrtGenCnfgConnect_Object = MibTableColumn
prtGenCnfgConnect = _PrtGenCnfgConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 11),
    _PrtGenCnfgConnect_Type()
)
prtGenCnfgConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenCnfgConnect.setStatus("current")


class _PrtGenCnfgSignalingType_Type(Integer32):
    """Custom type prtGenCnfgSignalingType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("abcd", 4),
          ("legacy", 3),
          ("none", 5))
    )


_PrtGenCnfgSignalingType_Type.__name__ = "Integer32"
_PrtGenCnfgSignalingType_Object = MibTableColumn
prtGenCnfgSignalingType = _PrtGenCnfgSignalingType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 12),
    _PrtGenCnfgSignalingType_Type()
)
prtGenCnfgSignalingType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenCnfgSignalingType.setStatus("current")
_CmprPrtGen_ObjectIdentity = ObjectIdentity
cmprPrtGen = _CmprPrtGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3)
)
_PrtCmprTable_Object = MibTable
prtCmprTable = _PrtCmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1)
)
if mibBuilder.loadTexts:
    prtCmprTable.setStatus("current")
_PrtCmprEntry_Object = MibTableRow
prtCmprEntry = _PrtCmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1, 1)
)
prtCmprEntry.setIndexNames(
    (0, "RAD-MIB", "prtCmprTypIdx"),
    (0, "RAD-MIB", "prtCmprCnfgIdx"),
    (0, "RAD-MIB", "prtCmprVersion"),
    (0, "RAD-MIB", "prtCmprSltIdx"),
    (0, "RAD-MIB", "prtCmprPrtIdx"),
)
if mibBuilder.loadTexts:
    prtCmprEntry.setStatus("current")
_PrtCmprTypIdx_Type = Integer32
_PrtCmprTypIdx_Object = MibTableColumn
prtCmprTypIdx = _PrtCmprTypIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1, 1, 1),
    _PrtCmprTypIdx_Type()
)
prtCmprTypIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCmprTypIdx.setStatus("current")
_PrtCmprCnfgIdx_Type = Integer32
_PrtCmprCnfgIdx_Object = MibTableColumn
prtCmprCnfgIdx = _PrtCmprCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1, 1, 2),
    _PrtCmprCnfgIdx_Type()
)
prtCmprCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCmprCnfgIdx.setStatus("current")
_PrtCmprVersion_Type = Integer32
_PrtCmprVersion_Object = MibTableColumn
prtCmprVersion = _PrtCmprVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1, 1, 3),
    _PrtCmprVersion_Type()
)
prtCmprVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCmprVersion.setStatus("current")


class _PrtCmprSltIdx_Type(Integer32):
    """Custom type prtCmprSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255),
          ("psA", 1),
          ("psB", 2))
    )


_PrtCmprSltIdx_Type.__name__ = "Integer32"
_PrtCmprSltIdx_Object = MibTableColumn
prtCmprSltIdx = _PrtCmprSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1, 1, 4),
    _PrtCmprSltIdx_Type()
)
prtCmprSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCmprSltIdx.setStatus("current")
_PrtCmprPrtIdx_Type = Integer32
_PrtCmprPrtIdx_Object = MibTableColumn
prtCmprPrtIdx = _PrtCmprPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1, 1, 5),
    _PrtCmprPrtIdx_Type()
)
prtCmprPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCmprPrtIdx.setStatus("current")
_PrtCmprObj_Type = OctetString
_PrtCmprObj_Object = MibTableColumn
prtCmprObj = _PrtCmprObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1, 1, 6),
    _PrtCmprObj_Type()
)
prtCmprObj.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtCmprObj.setStatus("current")
_PrtCmprStatisticObj_Type = OctetString
_PrtCmprStatisticObj_Object = MibTableColumn
prtCmprStatisticObj = _PrtCmprStatisticObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1, 1, 7),
    _PrtCmprStatisticObj_Type()
)
prtCmprStatisticObj.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCmprStatisticObj.setStatus("current")
_PrtDlciCmprTable_Object = MibTable
prtDlciCmprTable = _PrtDlciCmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2)
)
if mibBuilder.loadTexts:
    prtDlciCmprTable.setStatus("current")
_PrtDlciCmprEntry_Object = MibTableRow
prtDlciCmprEntry = _PrtDlciCmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2, 1)
)
prtDlciCmprEntry.setIndexNames(
    (0, "RAD-MIB", "prtDlciCmprCnfgIdx"),
    (0, "RAD-MIB", "prtDlciCmprVersion"),
    (0, "RAD-MIB", "prtDlciCmprSltIdx"),
    (0, "RAD-MIB", "prtDlciCmprPrtIdx"),
    (0, "RAD-MIB", "prtDlciCmprDlciIdx"),
)
if mibBuilder.loadTexts:
    prtDlciCmprEntry.setStatus("current")
_PrtDlciCmprCnfgIdx_Type = Integer32
_PrtDlciCmprCnfgIdx_Object = MibTableColumn
prtDlciCmprCnfgIdx = _PrtDlciCmprCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2, 1, 1),
    _PrtDlciCmprCnfgIdx_Type()
)
prtDlciCmprCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciCmprCnfgIdx.setStatus("current")
_PrtDlciCmprVersion_Type = Integer32
_PrtDlciCmprVersion_Object = MibTableColumn
prtDlciCmprVersion = _PrtDlciCmprVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2, 1, 2),
    _PrtDlciCmprVersion_Type()
)
prtDlciCmprVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciCmprVersion.setStatus("current")


class _PrtDlciCmprSltIdx_Type(Integer32):
    """Custom type prtDlciCmprSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtDlciCmprSltIdx_Type.__name__ = "Integer32"
_PrtDlciCmprSltIdx_Object = MibTableColumn
prtDlciCmprSltIdx = _PrtDlciCmprSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2, 1, 3),
    _PrtDlciCmprSltIdx_Type()
)
prtDlciCmprSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciCmprSltIdx.setStatus("current")


class _PrtDlciCmprPrtIdx_Type(Integer32):
    """Custom type prtDlciCmprPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9),
          ("inPrt1", 101),
          ("inPrt10", 110),
          ("inPrt11", 111),
          ("inPrt12", 112),
          ("inPrt2", 102),
          ("inPrt3", 103),
          ("inPrt4", 104),
          ("inPrt5", 105),
          ("inPrt6", 106),
          ("inPrt7", 107),
          ("inPrt8", 108),
          ("inPrt9", 109))
    )


_PrtDlciCmprPrtIdx_Type.__name__ = "Integer32"
_PrtDlciCmprPrtIdx_Object = MibTableColumn
prtDlciCmprPrtIdx = _PrtDlciCmprPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2, 1, 4),
    _PrtDlciCmprPrtIdx_Type()
)
prtDlciCmprPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciCmprPrtIdx.setStatus("current")
_PrtDlciCmprDlciIdx_Type = Integer32
_PrtDlciCmprDlciIdx_Object = MibTableColumn
prtDlciCmprDlciIdx = _PrtDlciCmprDlciIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2, 1, 5),
    _PrtDlciCmprDlciIdx_Type()
)
prtDlciCmprDlciIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDlciCmprDlciIdx.setStatus("current")
_PrtDlciCmprObj_Type = OctetString
_PrtDlciCmprObj_Object = MibTableColumn
prtDlciCmprObj = _PrtDlciCmprObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2, 1, 6),
    _PrtDlciCmprObj_Type()
)
prtDlciCmprObj.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtDlciCmprObj.setStatus("current")
_PrtAlarmsCmprTable_Object = MibTable
prtAlarmsCmprTable = _PrtAlarmsCmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 3)
)
if mibBuilder.loadTexts:
    prtAlarmsCmprTable.setStatus("current")
_PrtAlarmsCmprEntry_Object = MibTableRow
prtAlarmsCmprEntry = _PrtAlarmsCmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 3, 1)
)
prtAlarmsCmprEntry.setIndexNames(
    (0, "RAD-MIB", "prtAlarmsCmprVersion"),
    (0, "RAD-MIB", "prtAlarmsCmprAlarmSlot"),
    (0, "RAD-MIB", "prtAlarmsCmprAlarmPort"),
    (0, "RAD-MIB", "prtAlarmsCmprAlarmIdx"),
)
if mibBuilder.loadTexts:
    prtAlarmsCmprEntry.setStatus("current")
_PrtAlarmsCmprVersion_Type = Integer32
_PrtAlarmsCmprVersion_Object = MibTableColumn
prtAlarmsCmprVersion = _PrtAlarmsCmprVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 3, 1, 1),
    _PrtAlarmsCmprVersion_Type()
)
prtAlarmsCmprVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAlarmsCmprVersion.setStatus("current")
_PrtAlarmsCmprAlarmSlot_Type = Integer32
_PrtAlarmsCmprAlarmSlot_Object = MibTableColumn
prtAlarmsCmprAlarmSlot = _PrtAlarmsCmprAlarmSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 3, 1, 2),
    _PrtAlarmsCmprAlarmSlot_Type()
)
prtAlarmsCmprAlarmSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAlarmsCmprAlarmSlot.setStatus("current")
_PrtAlarmsCmprAlarmPort_Type = Integer32
_PrtAlarmsCmprAlarmPort_Object = MibTableColumn
prtAlarmsCmprAlarmPort = _PrtAlarmsCmprAlarmPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 3, 1, 3),
    _PrtAlarmsCmprAlarmPort_Type()
)
prtAlarmsCmprAlarmPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAlarmsCmprAlarmPort.setStatus("current")
_PrtAlarmsCmprAlarmIdx_Type = Integer32
_PrtAlarmsCmprAlarmIdx_Object = MibTableColumn
prtAlarmsCmprAlarmIdx = _PrtAlarmsCmprAlarmIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 3, 1, 4),
    _PrtAlarmsCmprAlarmIdx_Type()
)
prtAlarmsCmprAlarmIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAlarmsCmprAlarmIdx.setStatus("current")
_PrtAlarmsCmprObj_Type = OctetString
_PrtAlarmsCmprObj_Object = MibTableColumn
prtAlarmsCmprObj = _PrtAlarmsCmprObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 3, 1, 5),
    _PrtAlarmsCmprObj_Type()
)
prtAlarmsCmprObj.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAlarmsCmprObj.setStatus("current")
_MapWanGen_ObjectIdentity = ObjectIdentity
mapWanGen = _MapWanGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 5)
)
_AgnLinkMapTable_Object = MibTable
agnLinkMapTable = _AgnLinkMapTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 5, 1)
)
if mibBuilder.loadTexts:
    agnLinkMapTable.setStatus("current")
_AgnLinkMapEntry_Object = MibTableRow
agnLinkMapEntry = _AgnLinkMapEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 5, 1, 1)
)
agnLinkMapEntry.setIndexNames(
    (0, "RAD-MIB", "mapLinkId"),
)
if mibBuilder.loadTexts:
    agnLinkMapEntry.setStatus("current")
_MapLinkId_Type = Integer32
_MapLinkId_Object = MibTableColumn
mapLinkId = _MapLinkId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 5, 1, 1, 1),
    _MapLinkId_Type()
)
mapLinkId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mapLinkId.setStatus("current")


class _MapLinkSltIdx_Type(Integer32):
    """Custom type mapLinkSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("noConnect", 2),
          ("notApplicable", 255))
    )


_MapLinkSltIdx_Type.__name__ = "Integer32"
_MapLinkSltIdx_Object = MibTableColumn
mapLinkSltIdx = _MapLinkSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 5, 1, 1, 2),
    _MapLinkSltIdx_Type()
)
mapLinkSltIdx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mapLinkSltIdx.setStatus("current")


class _MapLinkPrtIdx_Type(Integer32):
    """Custom type mapLinkPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt11", 11),
          ("exPrt12", 12),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9),
          ("inPrt1", 101),
          ("inPrt10", 110),
          ("inPrt11", 111),
          ("inPrt12", 112),
          ("inPrt2", 102),
          ("inPrt3", 103),
          ("inPrt4", 104),
          ("inPrt5", 105),
          ("inPrt6", 106),
          ("inPrt7", 107),
          ("inPrt8", 108),
          ("inPrt9", 109),
          ("noConnect", 100))
    )


_MapLinkPrtIdx_Type.__name__ = "Integer32"
_MapLinkPrtIdx_Object = MibTableColumn
mapLinkPrtIdx = _MapLinkPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 5, 1, 1, 3),
    _MapLinkPrtIdx_Type()
)
mapLinkPrtIdx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mapLinkPrtIdx.setStatus("current")


class _MapLinkStatus_Type(Integer32):
    """Custom type mapLinkStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("unknown", 1),
          ("up", 3))
    )


_MapLinkStatus_Type.__name__ = "Integer32"
_MapLinkStatus_Object = MibTableColumn
mapLinkStatus = _MapLinkStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 5, 1, 1, 4),
    _MapLinkStatus_Type()
)
mapLinkStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mapLinkStatus.setStatus("current")
_DiverseIfWanGen_ObjectIdentity = ObjectIdentity
diverseIfWanGen = _DiverseIfWanGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6)
)
_EthIf_ObjectIdentity = ObjectIdentity
ethIf = _EthIf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1)
)
_EthIfTable_Object = MibTable
ethIfTable = _EthIfTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1)
)
if mibBuilder.loadTexts:
    ethIfTable.setStatus("current")
_EthIfEntry_Object = MibTableRow
ethIfEntry = _EthIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1)
)
ethIfEntry.setIndexNames(
    (0, "RAD-MIB", "ethIfIdx"),
)
if mibBuilder.loadTexts:
    ethIfEntry.setStatus("current")
_EthIfIdx_Type = Integer32
_EthIfIdx_Object = MibTableColumn
ethIfIdx = _EthIfIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 1),
    _EthIfIdx_Type()
)
ethIfIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIdx.setStatus("current")


class _EthMode_Type(Integer32):
    """Custom type ethMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("fullDuplex", 2),
          ("halfDuplex", 1),
          ("notApplicable", 255))
    )


_EthMode_Type.__name__ = "Integer32"
_EthMode_Object = MibTableColumn
ethMode = _EthMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 2),
    _EthMode_Type()
)
ethMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethMode.setStatus("current")


class _EthBridgingMode_Type(Integer32):
    """Custom type ethBridgingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("filtered", 1),
          ("transparent", 2))
    )


_EthBridgingMode_Type.__name__ = "Integer32"
_EthBridgingMode_Object = MibTableColumn
ethBridgingMode = _EthBridgingMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 3),
    _EthBridgingMode_Type()
)
ethBridgingMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethBridgingMode.setStatus("current")


class _EthEncapsulationCRCMode_Type(Integer32):
    """Custom type ethEncapsulationCRCMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("withCRC", 2),
          ("withoutCRC", 3))
    )


_EthEncapsulationCRCMode_Type.__name__ = "Integer32"
_EthEncapsulationCRCMode_Object = MibTableColumn
ethEncapsulationCRCMode = _EthEncapsulationCRCMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 4),
    _EthEncapsulationCRCMode_Type()
)
ethEncapsulationCRCMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethEncapsulationCRCMode.setStatus("current")


class _EthBackPressure_Type(Integer32):
    """Custom type ethBackPressure based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_EthBackPressure_Type.__name__ = "Integer32"
_EthBackPressure_Object = MibTableColumn
ethBackPressure = _EthBackPressure_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 5),
    _EthBackPressure_Type()
)
ethBackPressure.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethBackPressure.setStatus("current")


class _EthLimit4_Type(Integer32):
    """Custom type ethLimit4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_EthLimit4_Type.__name__ = "Integer32"
_EthLimit4_Object = MibTableColumn
ethLimit4 = _EthLimit4_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 6),
    _EthLimit4_Type()
)
ethLimit4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethLimit4.setStatus("current")


class _EthSkipInitReset_Type(Integer32):
    """Custom type ethSkipInitReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("notSkip", 2),
          ("skip", 3))
    )


_EthSkipInitReset_Type.__name__ = "Integer32"
_EthSkipInitReset_Object = MibTableColumn
ethSkipInitReset = _EthSkipInitReset_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 7),
    _EthSkipInitReset_Type()
)
ethSkipInitReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethSkipInitReset.setStatus("current")


class _EthMulticastBlock_Type(Integer32):
    """Custom type ethMulticastBlock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("block", 3),
          ("notApplicable", 1),
          ("unBlock", 2))
    )


_EthMulticastBlock_Type.__name__ = "Integer32"
_EthMulticastBlock_Object = MibTableColumn
ethMulticastBlock = _EthMulticastBlock_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 8),
    _EthMulticastBlock_Type()
)
ethMulticastBlock.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethMulticastBlock.setStatus("current")


class _EthBroadcastBlock_Type(Integer32):
    """Custom type ethBroadcastBlock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("block", 3),
          ("notApplicable", 1),
          ("unBlock", 2))
    )


_EthBroadcastBlock_Type.__name__ = "Integer32"
_EthBroadcastBlock_Object = MibTableColumn
ethBroadcastBlock = _EthBroadcastBlock_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 9),
    _EthBroadcastBlock_Type()
)
ethBroadcastBlock.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethBroadcastBlock.setStatus("current")


class _EthSpeed_Type(Integer32):
    """Custom type ethSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("s100Mbps", 3),
          ("s10Mbps", 2),
          ("s1Gbps", 4))
    )


_EthSpeed_Type.__name__ = "Integer32"
_EthSpeed_Object = MibTableColumn
ethSpeed = _EthSpeed_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 10),
    _EthSpeed_Type()
)
ethSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethSpeed.setStatus("current")


class _EthRip2_Type(Integer32):
    """Custom type ethRip2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_EthRip2_Type.__name__ = "Integer32"
_EthRip2_Object = MibTableColumn
ethRip2 = _EthRip2_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 11),
    _EthRip2_Type()
)
ethRip2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethRip2.setStatus("current")


class _EthPortPriority_Type(Integer32):
    """Custom type ethPortPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fixed", 3),
          ("none", 2),
          ("notApplicable", 1))
    )


_EthPortPriority_Type.__name__ = "Integer32"
_EthPortPriority_Object = MibTableColumn
ethPortPriority = _EthPortPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 12),
    _EthPortPriority_Type()
)
ethPortPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethPortPriority.setStatus("current")


class _EthPortMngEnable_Type(Integer32):
    """Custom type ethPortMngEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("localOnly", 4),
          ("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_EthPortMngEnable_Type.__name__ = "Integer32"
_EthPortMngEnable_Object = MibTableColumn
ethPortMngEnable = _EthPortMngEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 13),
    _EthPortMngEnable_Type()
)
ethPortMngEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethPortMngEnable.setStatus("current")
_EthFlowCtrlMacAddress_Type = MacAddress
_EthFlowCtrlMacAddress_Object = MibTableColumn
ethFlowCtrlMacAddress = _EthFlowCtrlMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 14),
    _EthFlowCtrlMacAddress_Type()
)
ethFlowCtrlMacAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethFlowCtrlMacAddress.setStatus("current")
_EthRateLimit_Type = Integer32
_EthRateLimit_Object = MibTableColumn
ethRateLimit = _EthRateLimit_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 15),
    _EthRateLimit_Type()
)
ethRateLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethRateLimit.setStatus("current")


class _EthJumboFrameEnable_Type(Integer32):
    """Custom type ethJumboFrameEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_EthJumboFrameEnable_Type.__name__ = "Integer32"
_EthJumboFrameEnable_Object = MibTableColumn
ethJumboFrameEnable = _EthJumboFrameEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 16),
    _EthJumboFrameEnable_Type()
)
ethJumboFrameEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethJumboFrameEnable.setStatus("current")


class _EthAutoMdiXEnable_Type(Integer32):
    """Custom type ethAutoMdiXEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_EthAutoMdiXEnable_Type.__name__ = "Integer32"
_EthAutoMdiXEnable_Object = MibTableColumn
ethAutoMdiXEnable = _EthAutoMdiXEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 17),
    _EthAutoMdiXEnable_Type()
)
ethAutoMdiXEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethAutoMdiXEnable.setStatus("current")


class _EthPortDataEnable_Type(Integer32):
    """Custom type ethPortDataEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_EthPortDataEnable_Type.__name__ = "Integer32"
_EthPortDataEnable_Object = MibTableColumn
ethPortDataEnable = _EthPortDataEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 18),
    _EthPortDataEnable_Type()
)
ethPortDataEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethPortDataEnable.setStatus("current")
_EthIfUse_Type = Integer32
_EthIfUse_Object = MibTableColumn
ethIfUse = _EthIfUse_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 19),
    _EthIfUse_Type()
)
ethIfUse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethIfUse.setStatus("current")


class _EthLineOam_Type(Integer32):
    """Custom type ethLineOam based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("passive", 3))
    )


_EthLineOam_Type.__name__ = "Integer32"
_EthLineOam_Object = MibTableColumn
ethLineOam = _EthLineOam_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 20),
    _EthLineOam_Type()
)
ethLineOam.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethLineOam.setStatus("current")


class _EthRoutingProtocol_Type(Integer32):
    """Custom type ethRoutingProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 2),
          ("notApplicable", 1),
          ("proprietary", 3),
          ("rip1and2", 6),
          ("rip2", 4))
    )


_EthRoutingProtocol_Type.__name__ = "Integer32"
_EthRoutingProtocol_Object = MibTableColumn
ethRoutingProtocol = _EthRoutingProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 21),
    _EthRoutingProtocol_Type()
)
ethRoutingProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethRoutingProtocol.setStatus("current")


class _EthMdiXManualSwitch_Type(Integer32):
    """Custom type ethMdiXManualSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("crossOver", 1),
          ("straightThrough", 2))
    )


_EthMdiXManualSwitch_Type.__name__ = "Integer32"
_EthMdiXManualSwitch_Object = MibTableColumn
ethMdiXManualSwitch = _EthMdiXManualSwitch_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 22),
    _EthMdiXManualSwitch_Type()
)
ethMdiXManualSwitch.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethMdiXManualSwitch.setStatus("current")


class _EthDot1xEnable_Type(Integer32):
    """Custom type ethDot1xEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_EthDot1xEnable_Type.__name__ = "Integer32"
_EthDot1xEnable_Object = MibTableColumn
ethDot1xEnable = _EthDot1xEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 23),
    _EthDot1xEnable_Type()
)
ethDot1xEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethDot1xEnable.setStatus("current")


class _EthPartnerRateMode_Type(Integer32):
    """Custom type ethPartnerRateMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 2),
          ("manual", 1))
    )


_EthPartnerRateMode_Type.__name__ = "Integer32"
_EthPartnerRateMode_Object = MibTableColumn
ethPartnerRateMode = _EthPartnerRateMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 24),
    _EthPartnerRateMode_Type()
)
ethPartnerRateMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethPartnerRateMode.setStatus("current")


class _EthDot1xPortRole_Type(Integer32):
    """Custom type ethDot1xPortRole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("authenticator", 1),
          ("supplicant", 2))
    )


_EthDot1xPortRole_Type.__name__ = "Integer32"
_EthDot1xPortRole_Object = MibTableColumn
ethDot1xPortRole = _EthDot1xPortRole_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 25),
    _EthDot1xPortRole_Type()
)
ethDot1xPortRole.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethDot1xPortRole.setStatus("current")
_EthIfPerformance_ObjectIdentity = ObjectIdentity
ethIfPerformance = _EthIfPerformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2)
)
_EthIfCurrentTable_Object = MibTable
ethIfCurrentTable = _EthIfCurrentTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1)
)
if mibBuilder.loadTexts:
    ethIfCurrentTable.setStatus("current")
_EthIfCurrentEntry_Object = MibTableRow
ethIfCurrentEntry = _EthIfCurrentEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1)
)
ethIfCurrentEntry.setIndexNames(
    (0, "RAD-MIB", "ethIfCurrentIndex"),
)
if mibBuilder.loadTexts:
    ethIfCurrentEntry.setStatus("current")
_EthIfCurrentIndex_Type = Integer32
_EthIfCurrentIndex_Object = MibTableColumn
ethIfCurrentIndex = _EthIfCurrentIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 1),
    _EthIfCurrentIndex_Type()
)
ethIfCurrentIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentIndex.setStatus("current")


class _EthIfCurrentStatus_Type(OctetString):
    """Custom type ethIfCurrentStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_EthIfCurrentStatus_Type.__name__ = "OctetString"
_EthIfCurrentStatus_Object = MibTableColumn
ethIfCurrentStatus = _EthIfCurrentStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 2),
    _EthIfCurrentStatus_Type()
)
ethIfCurrentStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentStatus.setStatus("current")
_EthIfCurrentInFrames_Type = Gauge32
_EthIfCurrentInFrames_Object = MibTableColumn
ethIfCurrentInFrames = _EthIfCurrentInFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 3),
    _EthIfCurrentInFrames_Type()
)
ethIfCurrentInFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentInFrames.setStatus("current")
_EthIfCurrentInOctets_Type = Gauge32
_EthIfCurrentInOctets_Object = MibTableColumn
ethIfCurrentInOctets = _EthIfCurrentInOctets_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 4),
    _EthIfCurrentInOctets_Type()
)
ethIfCurrentInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentInOctets.setStatus("current")
_EthIfCurrentAlignmentErrors_Type = Gauge32
_EthIfCurrentAlignmentErrors_Object = MibTableColumn
ethIfCurrentAlignmentErrors = _EthIfCurrentAlignmentErrors_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 5),
    _EthIfCurrentAlignmentErrors_Type()
)
ethIfCurrentAlignmentErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentAlignmentErrors.setStatus("current")
_EthIfCurrentFCSErrors_Type = Gauge32
_EthIfCurrentFCSErrors_Object = MibTableColumn
ethIfCurrentFCSErrors = _EthIfCurrentFCSErrors_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 6),
    _EthIfCurrentFCSErrors_Type()
)
ethIfCurrentFCSErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentFCSErrors.setStatus("current")
_EthIfCurrentLengthError_Type = Gauge32
_EthIfCurrentLengthError_Object = MibTableColumn
ethIfCurrentLengthError = _EthIfCurrentLengthError_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 7),
    _EthIfCurrentLengthError_Type()
)
ethIfCurrentLengthError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentLengthError.setStatus("current")
_EthIfCurrentOutFrames_Type = Gauge32
_EthIfCurrentOutFrames_Object = MibTableColumn
ethIfCurrentOutFrames = _EthIfCurrentOutFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 8),
    _EthIfCurrentOutFrames_Type()
)
ethIfCurrentOutFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOutFrames.setStatus("current")
_EthIfCurrentOutOctets_Type = Gauge32
_EthIfCurrentOutOctets_Object = MibTableColumn
ethIfCurrentOutOctets = _EthIfCurrentOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 9),
    _EthIfCurrentOutOctets_Type()
)
ethIfCurrentOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOutOctets.setStatus("current")
_EthIfCurrentSingleCollisionFrames_Type = Gauge32
_EthIfCurrentSingleCollisionFrames_Object = MibTableColumn
ethIfCurrentSingleCollisionFrames = _EthIfCurrentSingleCollisionFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 10),
    _EthIfCurrentSingleCollisionFrames_Type()
)
ethIfCurrentSingleCollisionFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentSingleCollisionFrames.setStatus("current")
_EthIfCurrentMultipleCollisionFrames_Type = Gauge32
_EthIfCurrentMultipleCollisionFrames_Object = MibTableColumn
ethIfCurrentMultipleCollisionFrames = _EthIfCurrentMultipleCollisionFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 11),
    _EthIfCurrentMultipleCollisionFrames_Type()
)
ethIfCurrentMultipleCollisionFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentMultipleCollisionFrames.setStatus("current")
_EthIfCurrentDeferredTransmissions_Type = Gauge32
_EthIfCurrentDeferredTransmissions_Object = MibTableColumn
ethIfCurrentDeferredTransmissions = _EthIfCurrentDeferredTransmissions_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 12),
    _EthIfCurrentDeferredTransmissions_Type()
)
ethIfCurrentDeferredTransmissions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentDeferredTransmissions.setStatus("current")
_EthIfCurrentLateCollisions_Type = Gauge32
_EthIfCurrentLateCollisions_Object = MibTableColumn
ethIfCurrentLateCollisions = _EthIfCurrentLateCollisions_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 13),
    _EthIfCurrentLateCollisions_Type()
)
ethIfCurrentLateCollisions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentLateCollisions.setStatus("current")
_EthIfCurrentCarrierSenseErrors_Type = Gauge32
_EthIfCurrentCarrierSenseErrors_Object = MibTableColumn
ethIfCurrentCarrierSenseErrors = _EthIfCurrentCarrierSenseErrors_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 14),
    _EthIfCurrentCarrierSenseErrors_Type()
)
ethIfCurrentCarrierSenseErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentCarrierSenseErrors.setStatus("current")
_EthIfCurrentInputCongestionDropped_Type = Gauge32
_EthIfCurrentInputCongestionDropped_Object = MibTableColumn
ethIfCurrentInputCongestionDropped = _EthIfCurrentInputCongestionDropped_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 15),
    _EthIfCurrentInputCongestionDropped_Type()
)
ethIfCurrentInputCongestionDropped.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentInputCongestionDropped.setStatus("current")
_EthIfCurrentOutputCongestionDropped_Type = Gauge32
_EthIfCurrentOutputCongestionDropped_Object = MibTableColumn
ethIfCurrentOutputCongestionDropped = _EthIfCurrentOutputCongestionDropped_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 16),
    _EthIfCurrentOutputCongestionDropped_Type()
)
ethIfCurrentOutputCongestionDropped.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOutputCongestionDropped.setStatus("current")
_EthIfCurrentOverflowInFrames_Type = Gauge32
_EthIfCurrentOverflowInFrames_Object = MibTableColumn
ethIfCurrentOverflowInFrames = _EthIfCurrentOverflowInFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 17),
    _EthIfCurrentOverflowInFrames_Type()
)
ethIfCurrentOverflowInFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOverflowInFrames.setStatus("current")
_EthIfCurrentOverflowInOctets_Type = Gauge32
_EthIfCurrentOverflowInOctets_Object = MibTableColumn
ethIfCurrentOverflowInOctets = _EthIfCurrentOverflowInOctets_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 18),
    _EthIfCurrentOverflowInOctets_Type()
)
ethIfCurrentOverflowInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOverflowInOctets.setStatus("current")
_EthIfCurrentOverflowFCSErrors_Type = Gauge32
_EthIfCurrentOverflowFCSErrors_Object = MibTableColumn
ethIfCurrentOverflowFCSErrors = _EthIfCurrentOverflowFCSErrors_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 19),
    _EthIfCurrentOverflowFCSErrors_Type()
)
ethIfCurrentOverflowFCSErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOverflowFCSErrors.setStatus("current")
_EthIfCurrentOverflowOutFrames_Type = Gauge32
_EthIfCurrentOverflowOutFrames_Object = MibTableColumn
ethIfCurrentOverflowOutFrames = _EthIfCurrentOverflowOutFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 20),
    _EthIfCurrentOverflowOutFrames_Type()
)
ethIfCurrentOverflowOutFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOverflowOutFrames.setStatus("current")
_EthIfCurrentOverflowOutOctets_Type = Gauge32
_EthIfCurrentOverflowOutOctets_Object = MibTableColumn
ethIfCurrentOverflowOutOctets = _EthIfCurrentOverflowOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 21),
    _EthIfCurrentOverflowOutOctets_Type()
)
ethIfCurrentOverflowOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOverflowOutOctets.setStatus("current")
_EthIfCurrentOverflowMultipleCollisionFrames_Type = Gauge32
_EthIfCurrentOverflowMultipleCollisionFrames_Object = MibTableColumn
ethIfCurrentOverflowMultipleCollisionFrames = _EthIfCurrentOverflowMultipleCollisionFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 22),
    _EthIfCurrentOverflowMultipleCollisionFrames_Type()
)
ethIfCurrentOverflowMultipleCollisionFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOverflowMultipleCollisionFrames.setStatus("current")
_EthIfCurrentInUnicastFrames_Type = Gauge32
_EthIfCurrentInUnicastFrames_Object = MibTableColumn
ethIfCurrentInUnicastFrames = _EthIfCurrentInUnicastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 23),
    _EthIfCurrentInUnicastFrames_Type()
)
ethIfCurrentInUnicastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentInUnicastFrames.setStatus("current")
_EthIfCurrentOutUnicastFrames_Type = Gauge32
_EthIfCurrentOutUnicastFrames_Object = MibTableColumn
ethIfCurrentOutUnicastFrames = _EthIfCurrentOutUnicastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 24),
    _EthIfCurrentOutUnicastFrames_Type()
)
ethIfCurrentOutUnicastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOutUnicastFrames.setStatus("current")
_EthIfCurrentInMulticastFrames_Type = Gauge32
_EthIfCurrentInMulticastFrames_Object = MibTableColumn
ethIfCurrentInMulticastFrames = _EthIfCurrentInMulticastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 25),
    _EthIfCurrentInMulticastFrames_Type()
)
ethIfCurrentInMulticastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentInMulticastFrames.setStatus("current")
_EthIfCurrentOutMulticastFrames_Type = Gauge32
_EthIfCurrentOutMulticastFrames_Object = MibTableColumn
ethIfCurrentOutMulticastFrames = _EthIfCurrentOutMulticastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 26),
    _EthIfCurrentOutMulticastFrames_Type()
)
ethIfCurrentOutMulticastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOutMulticastFrames.setStatus("current")
_EthIfCurrentInBroadcastFrames_Type = Gauge32
_EthIfCurrentInBroadcastFrames_Object = MibTableColumn
ethIfCurrentInBroadcastFrames = _EthIfCurrentInBroadcastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 27),
    _EthIfCurrentInBroadcastFrames_Type()
)
ethIfCurrentInBroadcastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentInBroadcastFrames.setStatus("current")
_EthIfCurrentOutBroadcastFrames_Type = Gauge32
_EthIfCurrentOutBroadcastFrames_Object = MibTableColumn
ethIfCurrentOutBroadcastFrames = _EthIfCurrentOutBroadcastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 28),
    _EthIfCurrentOutBroadcastFrames_Type()
)
ethIfCurrentOutBroadcastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOutBroadcastFrames.setStatus("current")
_EthIfCurrentInDiscardFrames_Type = Gauge32
_EthIfCurrentInDiscardFrames_Object = MibTableColumn
ethIfCurrentInDiscardFrames = _EthIfCurrentInDiscardFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 29),
    _EthIfCurrentInDiscardFrames_Type()
)
ethIfCurrentInDiscardFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentInDiscardFrames.setStatus("current")
_EthIfCurrentOutDiscardFrames_Type = Gauge32
_EthIfCurrentOutDiscardFrames_Object = MibTableColumn
ethIfCurrentOutDiscardFrames = _EthIfCurrentOutDiscardFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 30),
    _EthIfCurrentOutDiscardFrames_Type()
)
ethIfCurrentOutDiscardFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOutDiscardFrames.setStatus("current")
_EthIfCurrentInPauseFrames_Type = Gauge32
_EthIfCurrentInPauseFrames_Object = MibTableColumn
ethIfCurrentInPauseFrames = _EthIfCurrentInPauseFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 31),
    _EthIfCurrentInPauseFrames_Type()
)
ethIfCurrentInPauseFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentInPauseFrames.setStatus("current")
_EthIfCurrentOutPauseFrames_Type = Gauge32
_EthIfCurrentOutPauseFrames_Object = MibTableColumn
ethIfCurrentOutPauseFrames = _EthIfCurrentOutPauseFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 32),
    _EthIfCurrentOutPauseFrames_Type()
)
ethIfCurrentOutPauseFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOutPauseFrames.setStatus("current")
_EthIfCurrentOverflowInUnicastFrames_Type = Gauge32
_EthIfCurrentOverflowInUnicastFrames_Object = MibTableColumn
ethIfCurrentOverflowInUnicastFrames = _EthIfCurrentOverflowInUnicastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 33),
    _EthIfCurrentOverflowInUnicastFrames_Type()
)
ethIfCurrentOverflowInUnicastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOverflowInUnicastFrames.setStatus("current")
_EthIfCurrentOverflowOutUnicastFrames_Type = Gauge32
_EthIfCurrentOverflowOutUnicastFrames_Object = MibTableColumn
ethIfCurrentOverflowOutUnicastFrames = _EthIfCurrentOverflowOutUnicastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 34),
    _EthIfCurrentOverflowOutUnicastFrames_Type()
)
ethIfCurrentOverflowOutUnicastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOverflowOutUnicastFrames.setStatus("current")
_EthIfCurrentOverflowInMulticastFrames_Type = Gauge32
_EthIfCurrentOverflowInMulticastFrames_Object = MibTableColumn
ethIfCurrentOverflowInMulticastFrames = _EthIfCurrentOverflowInMulticastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 35),
    _EthIfCurrentOverflowInMulticastFrames_Type()
)
ethIfCurrentOverflowInMulticastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOverflowInMulticastFrames.setStatus("current")
_EthIfCurrentOverflowOutMulticastFrames_Type = Gauge32
_EthIfCurrentOverflowOutMulticastFrames_Object = MibTableColumn
ethIfCurrentOverflowOutMulticastFrames = _EthIfCurrentOverflowOutMulticastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 36),
    _EthIfCurrentOverflowOutMulticastFrames_Type()
)
ethIfCurrentOverflowOutMulticastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOverflowOutMulticastFrames.setStatus("current")
_EthIfCurrentOverflowInBroadcastFrames_Type = Gauge32
_EthIfCurrentOverflowInBroadcastFrames_Object = MibTableColumn
ethIfCurrentOverflowInBroadcastFrames = _EthIfCurrentOverflowInBroadcastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 37),
    _EthIfCurrentOverflowInBroadcastFrames_Type()
)
ethIfCurrentOverflowInBroadcastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOverflowInBroadcastFrames.setStatus("current")
_EthIfCurrentOverflowOutBroadcastFrames_Type = Gauge32
_EthIfCurrentOverflowOutBroadcastFrames_Object = MibTableColumn
ethIfCurrentOverflowOutBroadcastFrames = _EthIfCurrentOverflowOutBroadcastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 38),
    _EthIfCurrentOverflowOutBroadcastFrames_Type()
)
ethIfCurrentOverflowOutBroadcastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOverflowOutBroadcastFrames.setStatus("current")
_EthIfCurrentOverflowInDiscardFrames_Type = Gauge32
_EthIfCurrentOverflowInDiscardFrames_Object = MibTableColumn
ethIfCurrentOverflowInDiscardFrames = _EthIfCurrentOverflowInDiscardFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 39),
    _EthIfCurrentOverflowInDiscardFrames_Type()
)
ethIfCurrentOverflowInDiscardFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOverflowInDiscardFrames.setStatus("current")
_EthIfCurrentOverflowOutDiscardFrames_Type = Gauge32
_EthIfCurrentOverflowOutDiscardFrames_Object = MibTableColumn
ethIfCurrentOverflowOutDiscardFrames = _EthIfCurrentOverflowOutDiscardFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 40),
    _EthIfCurrentOverflowOutDiscardFrames_Type()
)
ethIfCurrentOverflowOutDiscardFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOverflowOutDiscardFrames.setStatus("current")
_EthIfCurrentOverflowInPauseFrames_Type = Gauge32
_EthIfCurrentOverflowInPauseFrames_Object = MibTableColumn
ethIfCurrentOverflowInPauseFrames = _EthIfCurrentOverflowInPauseFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 41),
    _EthIfCurrentOverflowInPauseFrames_Type()
)
ethIfCurrentOverflowInPauseFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOverflowInPauseFrames.setStatus("current")
_EthIfCurrentOverflowOutPauseFrames_Type = Gauge32
_EthIfCurrentOverflowOutPauseFrames_Object = MibTableColumn
ethIfCurrentOverflowOutPauseFrames = _EthIfCurrentOverflowOutPauseFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 1, 1, 42),
    _EthIfCurrentOverflowOutPauseFrames_Type()
)
ethIfCurrentOverflowOutPauseFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfCurrentOverflowOutPauseFrames.setStatus("current")
_EthIfIntervalTable_Object = MibTable
ethIfIntervalTable = _EthIfIntervalTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2)
)
if mibBuilder.loadTexts:
    ethIfIntervalTable.setStatus("current")
_EthIfIntervalEntry_Object = MibTableRow
ethIfIntervalEntry = _EthIfIntervalEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1)
)
ethIfIntervalEntry.setIndexNames(
    (0, "RAD-MIB", "ethIfIntervalIndex"),
    (0, "RAD-MIB", "ethIfIntervalNumber"),
)
if mibBuilder.loadTexts:
    ethIfIntervalEntry.setStatus("current")
_EthIfIntervalIndex_Type = Integer32
_EthIfIntervalIndex_Object = MibTableColumn
ethIfIntervalIndex = _EthIfIntervalIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 1),
    _EthIfIntervalIndex_Type()
)
ethIfIntervalIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalIndex.setStatus("current")


class _EthIfIntervalNumber_Type(Integer32):
    """Custom type ethIfIntervalNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 200),
    )


_EthIfIntervalNumber_Type.__name__ = "Integer32"
_EthIfIntervalNumber_Object = MibTableColumn
ethIfIntervalNumber = _EthIfIntervalNumber_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 2),
    _EthIfIntervalNumber_Type()
)
ethIfIntervalNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalNumber.setStatus("current")


class _EthIfIntervalStatus_Type(OctetString):
    """Custom type ethIfIntervalStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_EthIfIntervalStatus_Type.__name__ = "OctetString"
_EthIfIntervalStatus_Object = MibTableColumn
ethIfIntervalStatus = _EthIfIntervalStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 3),
    _EthIfIntervalStatus_Type()
)
ethIfIntervalStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalStatus.setStatus("current")
_EthIfIntervalInFrames_Type = Gauge32
_EthIfIntervalInFrames_Object = MibTableColumn
ethIfIntervalInFrames = _EthIfIntervalInFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 4),
    _EthIfIntervalInFrames_Type()
)
ethIfIntervalInFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalInFrames.setStatus("current")
_EthIfIntervalInOctets_Type = Gauge32
_EthIfIntervalInOctets_Object = MibTableColumn
ethIfIntervalInOctets = _EthIfIntervalInOctets_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 5),
    _EthIfIntervalInOctets_Type()
)
ethIfIntervalInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalInOctets.setStatus("current")
_EthIfIntervalAlignmentErrors_Type = Gauge32
_EthIfIntervalAlignmentErrors_Object = MibTableColumn
ethIfIntervalAlignmentErrors = _EthIfIntervalAlignmentErrors_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 6),
    _EthIfIntervalAlignmentErrors_Type()
)
ethIfIntervalAlignmentErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalAlignmentErrors.setStatus("current")
_EthIfIntervalFCSErrors_Type = Gauge32
_EthIfIntervalFCSErrors_Object = MibTableColumn
ethIfIntervalFCSErrors = _EthIfIntervalFCSErrors_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 7),
    _EthIfIntervalFCSErrors_Type()
)
ethIfIntervalFCSErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalFCSErrors.setStatus("current")
_EthIfIntervalLengthError_Type = Gauge32
_EthIfIntervalLengthError_Object = MibTableColumn
ethIfIntervalLengthError = _EthIfIntervalLengthError_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 8),
    _EthIfIntervalLengthError_Type()
)
ethIfIntervalLengthError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalLengthError.setStatus("current")
_EthIfIntervalOutFrames_Type = Gauge32
_EthIfIntervalOutFrames_Object = MibTableColumn
ethIfIntervalOutFrames = _EthIfIntervalOutFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 9),
    _EthIfIntervalOutFrames_Type()
)
ethIfIntervalOutFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOutFrames.setStatus("current")
_EthIfIntervalOutOctets_Type = Gauge32
_EthIfIntervalOutOctets_Object = MibTableColumn
ethIfIntervalOutOctets = _EthIfIntervalOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 10),
    _EthIfIntervalOutOctets_Type()
)
ethIfIntervalOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOutOctets.setStatus("current")
_EthIfIntervalSingleCollisionFrames_Type = Gauge32
_EthIfIntervalSingleCollisionFrames_Object = MibTableColumn
ethIfIntervalSingleCollisionFrames = _EthIfIntervalSingleCollisionFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 11),
    _EthIfIntervalSingleCollisionFrames_Type()
)
ethIfIntervalSingleCollisionFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalSingleCollisionFrames.setStatus("current")
_EthIfIntervalMultipleCollisionFrames_Type = Gauge32
_EthIfIntervalMultipleCollisionFrames_Object = MibTableColumn
ethIfIntervalMultipleCollisionFrames = _EthIfIntervalMultipleCollisionFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 12),
    _EthIfIntervalMultipleCollisionFrames_Type()
)
ethIfIntervalMultipleCollisionFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalMultipleCollisionFrames.setStatus("current")
_EthIfIntervalDeferredTransmissions_Type = Gauge32
_EthIfIntervalDeferredTransmissions_Object = MibTableColumn
ethIfIntervalDeferredTransmissions = _EthIfIntervalDeferredTransmissions_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 13),
    _EthIfIntervalDeferredTransmissions_Type()
)
ethIfIntervalDeferredTransmissions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalDeferredTransmissions.setStatus("current")
_EthIfIntervalLateCollisions_Type = Gauge32
_EthIfIntervalLateCollisions_Object = MibTableColumn
ethIfIntervalLateCollisions = _EthIfIntervalLateCollisions_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 14),
    _EthIfIntervalLateCollisions_Type()
)
ethIfIntervalLateCollisions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalLateCollisions.setStatus("current")
_EthIfIntervalCarrierSenseErrors_Type = Gauge32
_EthIfIntervalCarrierSenseErrors_Object = MibTableColumn
ethIfIntervalCarrierSenseErrors = _EthIfIntervalCarrierSenseErrors_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 15),
    _EthIfIntervalCarrierSenseErrors_Type()
)
ethIfIntervalCarrierSenseErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalCarrierSenseErrors.setStatus("current")
_EthIfIntervalInputCongestionDropped_Type = Gauge32
_EthIfIntervalInputCongestionDropped_Object = MibTableColumn
ethIfIntervalInputCongestionDropped = _EthIfIntervalInputCongestionDropped_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 16),
    _EthIfIntervalInputCongestionDropped_Type()
)
ethIfIntervalInputCongestionDropped.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalInputCongestionDropped.setStatus("current")
_EthIfIntervalOutputCongestionDropped_Type = Gauge32
_EthIfIntervalOutputCongestionDropped_Object = MibTableColumn
ethIfIntervalOutputCongestionDropped = _EthIfIntervalOutputCongestionDropped_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 17),
    _EthIfIntervalOutputCongestionDropped_Type()
)
ethIfIntervalOutputCongestionDropped.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOutputCongestionDropped.setStatus("current")
_EthIfIntervalOverflowInFrames_Type = Gauge32
_EthIfIntervalOverflowInFrames_Object = MibTableColumn
ethIfIntervalOverflowInFrames = _EthIfIntervalOverflowInFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 18),
    _EthIfIntervalOverflowInFrames_Type()
)
ethIfIntervalOverflowInFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOverflowInFrames.setStatus("current")
_EthIfIntervalOverflowInOctets_Type = Gauge32
_EthIfIntervalOverflowInOctets_Object = MibTableColumn
ethIfIntervalOverflowInOctets = _EthIfIntervalOverflowInOctets_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 19),
    _EthIfIntervalOverflowInOctets_Type()
)
ethIfIntervalOverflowInOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOverflowInOctets.setStatus("current")
_EthIfIntervalOverflowFCSErrors_Type = Gauge32
_EthIfIntervalOverflowFCSErrors_Object = MibTableColumn
ethIfIntervalOverflowFCSErrors = _EthIfIntervalOverflowFCSErrors_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 20),
    _EthIfIntervalOverflowFCSErrors_Type()
)
ethIfIntervalOverflowFCSErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOverflowFCSErrors.setStatus("current")
_EthIfIntervalOverflowOutFrames_Type = Gauge32
_EthIfIntervalOverflowOutFrames_Object = MibTableColumn
ethIfIntervalOverflowOutFrames = _EthIfIntervalOverflowOutFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 21),
    _EthIfIntervalOverflowOutFrames_Type()
)
ethIfIntervalOverflowOutFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOverflowOutFrames.setStatus("current")
_EthIfIntervalOverflowOutOctets_Type = Gauge32
_EthIfIntervalOverflowOutOctets_Object = MibTableColumn
ethIfIntervalOverflowOutOctets = _EthIfIntervalOverflowOutOctets_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 22),
    _EthIfIntervalOverflowOutOctets_Type()
)
ethIfIntervalOverflowOutOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOverflowOutOctets.setStatus("current")
_EthIfIntervalOverflowMultipleCollisionFrames_Type = Gauge32
_EthIfIntervalOverflowMultipleCollisionFrames_Object = MibTableColumn
ethIfIntervalOverflowMultipleCollisionFrames = _EthIfIntervalOverflowMultipleCollisionFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 23),
    _EthIfIntervalOverflowMultipleCollisionFrames_Type()
)
ethIfIntervalOverflowMultipleCollisionFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOverflowMultipleCollisionFrames.setStatus("current")
_EthIfIntervalInUnicastFrames_Type = Gauge32
_EthIfIntervalInUnicastFrames_Object = MibTableColumn
ethIfIntervalInUnicastFrames = _EthIfIntervalInUnicastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 24),
    _EthIfIntervalInUnicastFrames_Type()
)
ethIfIntervalInUnicastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalInUnicastFrames.setStatus("current")
_EthIfIntervalOutUnicastFrames_Type = Gauge32
_EthIfIntervalOutUnicastFrames_Object = MibTableColumn
ethIfIntervalOutUnicastFrames = _EthIfIntervalOutUnicastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 25),
    _EthIfIntervalOutUnicastFrames_Type()
)
ethIfIntervalOutUnicastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOutUnicastFrames.setStatus("current")
_EthIfIntervalInMulticastFrames_Type = Gauge32
_EthIfIntervalInMulticastFrames_Object = MibTableColumn
ethIfIntervalInMulticastFrames = _EthIfIntervalInMulticastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 26),
    _EthIfIntervalInMulticastFrames_Type()
)
ethIfIntervalInMulticastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalInMulticastFrames.setStatus("current")
_EthIfIntervalOutMulticastFrames_Type = Gauge32
_EthIfIntervalOutMulticastFrames_Object = MibTableColumn
ethIfIntervalOutMulticastFrames = _EthIfIntervalOutMulticastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 27),
    _EthIfIntervalOutMulticastFrames_Type()
)
ethIfIntervalOutMulticastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOutMulticastFrames.setStatus("current")
_EthIfIntervalInBroadcastFrames_Type = Gauge32
_EthIfIntervalInBroadcastFrames_Object = MibTableColumn
ethIfIntervalInBroadcastFrames = _EthIfIntervalInBroadcastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 28),
    _EthIfIntervalInBroadcastFrames_Type()
)
ethIfIntervalInBroadcastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalInBroadcastFrames.setStatus("current")
_EthIfIntervalOutBroadcastFrames_Type = Gauge32
_EthIfIntervalOutBroadcastFrames_Object = MibTableColumn
ethIfIntervalOutBroadcastFrames = _EthIfIntervalOutBroadcastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 29),
    _EthIfIntervalOutBroadcastFrames_Type()
)
ethIfIntervalOutBroadcastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOutBroadcastFrames.setStatus("current")
_EthIfIntervalInDiscardFrames_Type = Gauge32
_EthIfIntervalInDiscardFrames_Object = MibTableColumn
ethIfIntervalInDiscardFrames = _EthIfIntervalInDiscardFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 30),
    _EthIfIntervalInDiscardFrames_Type()
)
ethIfIntervalInDiscardFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalInDiscardFrames.setStatus("current")
_EthIfIntervalOutDiscardFrames_Type = Gauge32
_EthIfIntervalOutDiscardFrames_Object = MibTableColumn
ethIfIntervalOutDiscardFrames = _EthIfIntervalOutDiscardFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 31),
    _EthIfIntervalOutDiscardFrames_Type()
)
ethIfIntervalOutDiscardFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOutDiscardFrames.setStatus("current")
_EthIfIntervalInPauseFrames_Type = Gauge32
_EthIfIntervalInPauseFrames_Object = MibTableColumn
ethIfIntervalInPauseFrames = _EthIfIntervalInPauseFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 32),
    _EthIfIntervalInPauseFrames_Type()
)
ethIfIntervalInPauseFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalInPauseFrames.setStatus("current")
_EthIfIntervalOutPauseFrames_Type = Gauge32
_EthIfIntervalOutPauseFrames_Object = MibTableColumn
ethIfIntervalOutPauseFrames = _EthIfIntervalOutPauseFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 33),
    _EthIfIntervalOutPauseFrames_Type()
)
ethIfIntervalOutPauseFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOutPauseFrames.setStatus("current")
_EthIfIntervalOverflowInUnicastFrames_Type = Gauge32
_EthIfIntervalOverflowInUnicastFrames_Object = MibTableColumn
ethIfIntervalOverflowInUnicastFrames = _EthIfIntervalOverflowInUnicastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 34),
    _EthIfIntervalOverflowInUnicastFrames_Type()
)
ethIfIntervalOverflowInUnicastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOverflowInUnicastFrames.setStatus("current")
_EthIfIntervalOverflowOutUnicastFrames_Type = Gauge32
_EthIfIntervalOverflowOutUnicastFrames_Object = MibTableColumn
ethIfIntervalOverflowOutUnicastFrames = _EthIfIntervalOverflowOutUnicastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 35),
    _EthIfIntervalOverflowOutUnicastFrames_Type()
)
ethIfIntervalOverflowOutUnicastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOverflowOutUnicastFrames.setStatus("current")
_EthIfIntervalOverflowInMulticastFrames_Type = Gauge32
_EthIfIntervalOverflowInMulticastFrames_Object = MibTableColumn
ethIfIntervalOverflowInMulticastFrames = _EthIfIntervalOverflowInMulticastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 36),
    _EthIfIntervalOverflowInMulticastFrames_Type()
)
ethIfIntervalOverflowInMulticastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOverflowInMulticastFrames.setStatus("current")
_EthIfIntervalOverflowOutMulticastFrames_Type = Gauge32
_EthIfIntervalOverflowOutMulticastFrames_Object = MibTableColumn
ethIfIntervalOverflowOutMulticastFrames = _EthIfIntervalOverflowOutMulticastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 37),
    _EthIfIntervalOverflowOutMulticastFrames_Type()
)
ethIfIntervalOverflowOutMulticastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOverflowOutMulticastFrames.setStatus("current")
_EthIfIntervalOverflowInBroadcastFrames_Type = Gauge32
_EthIfIntervalOverflowInBroadcastFrames_Object = MibTableColumn
ethIfIntervalOverflowInBroadcastFrames = _EthIfIntervalOverflowInBroadcastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 38),
    _EthIfIntervalOverflowInBroadcastFrames_Type()
)
ethIfIntervalOverflowInBroadcastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOverflowInBroadcastFrames.setStatus("current")
_EthIfIntervalOverflowOutBroadcastFrames_Type = Gauge32
_EthIfIntervalOverflowOutBroadcastFrames_Object = MibTableColumn
ethIfIntervalOverflowOutBroadcastFrames = _EthIfIntervalOverflowOutBroadcastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 39),
    _EthIfIntervalOverflowOutBroadcastFrames_Type()
)
ethIfIntervalOverflowOutBroadcastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOverflowOutBroadcastFrames.setStatus("current")
_EthIfIntervalOverflowInDiscardFrames_Type = Gauge32
_EthIfIntervalOverflowInDiscardFrames_Object = MibTableColumn
ethIfIntervalOverflowInDiscardFrames = _EthIfIntervalOverflowInDiscardFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 40),
    _EthIfIntervalOverflowInDiscardFrames_Type()
)
ethIfIntervalOverflowInDiscardFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOverflowInDiscardFrames.setStatus("current")
_EthIfIntervalOverflowOutDiscardFrames_Type = Gauge32
_EthIfIntervalOverflowOutDiscardFrames_Object = MibTableColumn
ethIfIntervalOverflowOutDiscardFrames = _EthIfIntervalOverflowOutDiscardFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 41),
    _EthIfIntervalOverflowOutDiscardFrames_Type()
)
ethIfIntervalOverflowOutDiscardFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOverflowOutDiscardFrames.setStatus("current")
_EthIfIntervalOverflowInPauseFrames_Type = Gauge32
_EthIfIntervalOverflowInPauseFrames_Object = MibTableColumn
ethIfIntervalOverflowInPauseFrames = _EthIfIntervalOverflowInPauseFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 42),
    _EthIfIntervalOverflowInPauseFrames_Type()
)
ethIfIntervalOverflowInPauseFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOverflowInPauseFrames.setStatus("current")
_EthIfIntervalOverflowOutPauseFrames_Type = Gauge32
_EthIfIntervalOverflowOutPauseFrames_Object = MibTableColumn
ethIfIntervalOverflowOutPauseFrames = _EthIfIntervalOverflowOutPauseFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 2, 1, 43),
    _EthIfIntervalOverflowOutPauseFrames_Type()
)
ethIfIntervalOverflowOutPauseFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfIntervalOverflowOutPauseFrames.setStatus("current")


class _EthPerformanceMode_Type(Integer32):
    """Custom type ethPerformanceMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("countFail", 3),
          ("countOK", 2),
          ("notApplicable", 1))
    )


_EthPerformanceMode_Type.__name__ = "Integer32"
_EthPerformanceMode_Object = MibScalar
ethPerformanceMode = _EthPerformanceMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 3),
    _EthPerformanceMode_Type()
)
ethPerformanceMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethPerformanceMode.setStatus("current")
_EthIfPerfTable_Object = MibTable
ethIfPerfTable = _EthIfPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 4)
)
if mibBuilder.loadTexts:
    ethIfPerfTable.setStatus("current")
_EthIfPerfEntry_Object = MibTableRow
ethIfPerfEntry = _EthIfPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 4, 1)
)
ethIfPerfEntry.setIndexNames(
    (0, "RAD-MIB", "ethIfIdx"),
)
if mibBuilder.loadTexts:
    ethIfPerfEntry.setStatus("current")
_EthIfPerfInOkFrames_Type = Gauge32
_EthIfPerfInOkFrames_Object = MibTableColumn
ethIfPerfInOkFrames = _EthIfPerfInOkFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 4, 1, 1),
    _EthIfPerfInOkFrames_Type()
)
ethIfPerfInOkFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfPerfInOkFrames.setStatus("current")
_EthIfPerfOutOkFrames_Type = Gauge32
_EthIfPerfOutOkFrames_Object = MibTableColumn
ethIfPerfOutOkFrames = _EthIfPerfOutOkFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 4, 1, 2),
    _EthIfPerfOutOkFrames_Type()
)
ethIfPerfOutOkFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfPerfOutOkFrames.setStatus("current")
_EthIfPerfTotalCollisions_Type = Gauge32
_EthIfPerfTotalCollisions_Object = MibTableColumn
ethIfPerfTotalCollisions = _EthIfPerfTotalCollisions_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 4, 1, 3),
    _EthIfPerfTotalCollisions_Type()
)
ethIfPerfTotalCollisions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfPerfTotalCollisions.setStatus("current")
_EthIfPerfInOkOctets_Type = Gauge32
_EthIfPerfInOkOctets_Object = MibTableColumn
ethIfPerfInOkOctets = _EthIfPerfInOkOctets_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 2, 4, 1, 4),
    _EthIfPerfInOkOctets_Type()
)
ethIfPerfInOkOctets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfPerfInOkOctets.setStatus("current")
_EthIfOamCfm_ObjectIdentity = ObjectIdentity
ethIfOamCfm = _EthIfOamCfm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3)
)
_EthIfOamCfmEvents_ObjectIdentity = ObjectIdentity
ethIfOamCfmEvents = _EthIfOamCfmEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 0)
)
_RadMepTable_Object = MibTable
radMepTable = _RadMepTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1)
)
if mibBuilder.loadTexts:
    radMepTable.setStatus("current")
_RadMepEntry_Object = MibTableRow
radMepEntry = _RadMepEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1)
)
radMepEntry.setIndexNames(
    (0, "RAD-MIB", "radOamIdx1"),
    (0, "RAD-MIB", "radOamEvcIdx"),
    (0, "RAD-MIB", "radMepIdx"),
)
if mibBuilder.loadTexts:
    radMepEntry.setStatus("current")
_RadOamIdx1_Type = Unsigned32
_RadOamIdx1_Object = MibTableColumn
radOamIdx1 = _RadOamIdx1_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 1),
    _RadOamIdx1_Type()
)
radOamIdx1.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    radOamIdx1.setStatus("current")
_RadOamEvcIdx_Type = Unsigned32
_RadOamEvcIdx_Object = MibTableColumn
radOamEvcIdx = _RadOamEvcIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 2),
    _RadOamEvcIdx_Type()
)
radOamEvcIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    radOamEvcIdx.setStatus("current")
_RadMepIdx_Type = Unsigned32
_RadMepIdx_Object = MibTableColumn
radMepIdx = _RadMepIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 3),
    _RadMepIdx_Type()
)
radMepIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    radMepIdx.setStatus("current")
_RadMepRowStatus_Type = RowStatus
_RadMepRowStatus_Object = MibTableColumn
radMepRowStatus = _RadMepRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 4),
    _RadMepRowStatus_Type()
)
radMepRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepRowStatus.setStatus("current")
_RadMepLocalMepId_Type = Unsigned32
_RadMepLocalMepId_Object = MibTableColumn
radMepLocalMepId = _RadMepLocalMepId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 5),
    _RadMepLocalMepId_Type()
)
radMepLocalMepId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepLocalMepId.setStatus("current")
_RadMepRemoteMepId_Type = Unsigned32
_RadMepRemoteMepId_Object = MibTableColumn
radMepRemoteMepId = _RadMepRemoteMepId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 6),
    _RadMepRemoteMepId_Type()
)
radMepRemoteMepId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepRemoteMepId.setStatus("current")


class _RadMepOamMode_Type(Integer32):
    """Custom type radMepOamMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("initiate", 3),
          ("react", 4))
    )


_RadMepOamMode_Type.__name__ = "Integer32"
_RadMepOamMode_Object = MibTableColumn
radMepOamMode = _RadMepOamMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 7),
    _RadMepOamMode_Type()
)
radMepOamMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepOamMode.setStatus("current")


class _RadMepContinuityVerMode_Type(Integer32):
    """Custom type radMepContinuityVerMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ccBased", 3),
          ("disabled", 2),
          ("lbBased", 4))
    )


_RadMepContinuityVerMode_Type.__name__ = "Integer32"
_RadMepContinuityVerMode_Object = MibTableColumn
radMepContinuityVerMode = _RadMepContinuityVerMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 8),
    _RadMepContinuityVerMode_Type()
)
radMepContinuityVerMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepContinuityVerMode.setStatus("current")


class _RadMepMeLevel_Type(Unsigned32):
    """Custom type radMepMeLevel based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_RadMepMeLevel_Type.__name__ = "Unsigned32"
_RadMepMeLevel_Object = MibTableColumn
radMepMeLevel = _RadMepMeLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 9),
    _RadMepMeLevel_Type()
)
radMepMeLevel.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepMeLevel.setStatus("current")


class _RadMepOamDestAddrType_Type(Integer32):
    """Custom type radMepOamDestAddrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("multicast", 2),
          ("unicast", 1))
    )


_RadMepOamDestAddrType_Type.__name__ = "Integer32"
_RadMepOamDestAddrType_Object = MibTableColumn
radMepOamDestAddrType = _RadMepOamDestAddrType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 10),
    _RadMepOamDestAddrType_Type()
)
radMepOamDestAddrType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepOamDestAddrType.setStatus("current")
_RadMepOamDestMacAddr_Type = MacAddress
_RadMepOamDestMacAddr_Object = MibTableColumn
radMepOamDestMacAddr = _RadMepOamDestMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 11),
    _RadMepOamDestMacAddr_Type()
)
radMepOamDestMacAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepOamDestMacAddr.setStatus("current")


class _RadMepDefaultPriority_Type(Unsigned32):
    """Custom type radMepDefaultPriority based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_RadMepDefaultPriority_Type.__name__ = "Unsigned32"
_RadMepDefaultPriority_Object = MibTableColumn
radMepDefaultPriority = _RadMepDefaultPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 12),
    _RadMepDefaultPriority_Type()
)
radMepDefaultPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepDefaultPriority.setStatus("current")


class _RadMepCcStatus_Type(Integer32):
    """Custom type radMepCcStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("fail", 2),
          ("mismerge", 4),
          ("notApplicable", 1),
          ("ok", 3),
          ("unexpectedMeLevel", 6),
          ("unexpectedMep", 5))
    )


_RadMepCcStatus_Type.__name__ = "Integer32"
_RadMepCcStatus_Object = MibTableColumn
radMepCcStatus = _RadMepCcStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 13),
    _RadMepCcStatus_Type()
)
radMepCcStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radMepCcStatus.setStatus("current")


class _RadMepOamProtocol_Type(Integer32):
    """Custom type radMepOamProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("proprietary", 1),
          ("standard", 2))
    )


_RadMepOamProtocol_Type.__name__ = "Integer32"
_RadMepOamProtocol_Object = MibTableColumn
radMepOamProtocol = _RadMepOamProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 14),
    _RadMepOamProtocol_Type()
)
radMepOamProtocol.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepOamProtocol.setStatus("current")
_RadMepMdId_Type = Unsigned32
_RadMepMdId_Object = MibTableColumn
radMepMdId = _RadMepMdId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 15),
    _RadMepMdId_Type()
)
radMepMdId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepMdId.setStatus("current")


class _RadMepMaFormat_Type(Integer32):
    """Custom type radMepMaFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              32)
        )
    )
    namedValues = NamedValues(
        *(("charString", 2),
          ("icc", 32),
          ("primaryVid", 1),
          ("rfc2865VpnId", 4),
          ("unsignedInt16", 3))
    )


_RadMepMaFormat_Type.__name__ = "Integer32"
_RadMepMaFormat_Object = MibTableColumn
radMepMaFormat = _RadMepMaFormat_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 16),
    _RadMepMaFormat_Type()
)
radMepMaFormat.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepMaFormat.setStatus("current")


class _RadMepMaName_Type(OctetString):
    """Custom type radMepMaName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 45),
    )


_RadMepMaName_Type.__name__ = "OctetString"
_RadMepMaName_Object = MibTableColumn
radMepMaName = _RadMepMaName_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 17),
    _RadMepMaName_Type()
)
radMepMaName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepMaName.setStatus("current")
_RadMepSpVlanId_Type = Unsigned32
_RadMepSpVlanId_Object = MibTableColumn
radMepSpVlanId = _RadMepSpVlanId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 18),
    _RadMepSpVlanId_Type()
)
radMepSpVlanId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepSpVlanId.setStatus("current")


class _RadMepCcInterval_Type(Integer32):
    """Custom type radMepCcInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("interval100ms", 3),
          ("interval10min", 7),
          ("interval10ms", 2),
          ("interval10s", 5),
          ("interval1min", 6),
          ("interval1s", 4),
          ("interval300Hz", 1),
          ("intervalInvalid", 0))
    )


_RadMepCcInterval_Type.__name__ = "Integer32"
_RadMepCcInterval_Object = MibTableColumn
radMepCcInterval = _RadMepCcInterval_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 19),
    _RadMepCcInterval_Type()
)
radMepCcInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepCcInterval.setStatus("current")
_RadMepTransmitLbmDestMacAddress_Type = MacAddress
_RadMepTransmitLbmDestMacAddress_Object = MibTableColumn
radMepTransmitLbmDestMacAddress = _RadMepTransmitLbmDestMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 20),
    _RadMepTransmitLbmDestMacAddress_Type()
)
radMepTransmitLbmDestMacAddress.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepTransmitLbmDestMacAddress.setStatus("current")
_RadMepTransmitLbmDestMepId_Type = Unsigned32
_RadMepTransmitLbmDestMepId_Object = MibTableColumn
radMepTransmitLbmDestMepId = _RadMepTransmitLbmDestMepId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 21),
    _RadMepTransmitLbmDestMepId_Type()
)
radMepTransmitLbmDestMepId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepTransmitLbmDestMepId.setStatus("current")


class _RadMepTransmitLbmDestIsMepId_Type(Integer32):
    """Custom type radMepTransmitLbmDestIsMepId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_RadMepTransmitLbmDestIsMepId_Type.__name__ = "Integer32"
_RadMepTransmitLbmDestIsMepId_Object = MibTableColumn
radMepTransmitLbmDestIsMepId = _RadMepTransmitLbmDestIsMepId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 22),
    _RadMepTransmitLbmDestIsMepId_Type()
)
radMepTransmitLbmDestIsMepId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepTransmitLbmDestIsMepId.setStatus("current")


class _RadMepTransmitLbmMassages_Type(Integer32):
    """Custom type radMepTransmitLbmMassages based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1024),
    )


_RadMepTransmitLbmMassages_Type.__name__ = "Integer32"
_RadMepTransmitLbmMassages_Object = MibTableColumn
radMepTransmitLbmMassages = _RadMepTransmitLbmMassages_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 23),
    _RadMepTransmitLbmMassages_Type()
)
radMepTransmitLbmMassages.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepTransmitLbmMassages.setStatus("current")


class _RadMepTransmitLbmVlanPriority_Type(Unsigned32):
    """Custom type radMepTransmitLbmVlanPriority based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_RadMepTransmitLbmVlanPriority_Type.__name__ = "Unsigned32"
_RadMepTransmitLbmVlanPriority_Object = MibTableColumn
radMepTransmitLbmVlanPriority = _RadMepTransmitLbmVlanPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 24),
    _RadMepTransmitLbmVlanPriority_Type()
)
radMepTransmitLbmVlanPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepTransmitLbmVlanPriority.setStatus("current")


class _RadMepTransmitLbmVlanDropEnable_Type(Integer32):
    """Custom type radMepTransmitLbmVlanDropEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_RadMepTransmitLbmVlanDropEnable_Type.__name__ = "Integer32"
_RadMepTransmitLbmVlanDropEnable_Object = MibTableColumn
radMepTransmitLbmVlanDropEnable = _RadMepTransmitLbmVlanDropEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 25),
    _RadMepTransmitLbmVlanDropEnable_Type()
)
radMepTransmitLbmVlanDropEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepTransmitLbmVlanDropEnable.setStatus("current")
_RadMepLbrIn_Type = Counter32
_RadMepLbrIn_Object = MibTableColumn
radMepLbrIn = _RadMepLbrIn_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 26),
    _RadMepLbrIn_Type()
)
radMepLbrIn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radMepLbrIn.setStatus("current")
_RadMepLbrInOutOfOrder_Type = Counter32
_RadMepLbrInOutOfOrder_Object = MibTableColumn
radMepLbrInOutOfOrder = _RadMepLbrInOutOfOrder_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 27),
    _RadMepLbrInOutOfOrder_Type()
)
radMepLbrInOutOfOrder.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radMepLbrInOutOfOrder.setStatus("current")
_RadMepLbmOut_Type = Counter32
_RadMepLbmOut_Object = MibTableColumn
radMepLbmOut = _RadMepLbmOut_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 28),
    _RadMepLbmOut_Type()
)
radMepLbmOut.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radMepLbmOut.setStatus("current")
_RadMepTransmitLtmTargetMacAddress_Type = MacAddress
_RadMepTransmitLtmTargetMacAddress_Object = MibTableColumn
radMepTransmitLtmTargetMacAddress = _RadMepTransmitLtmTargetMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 29),
    _RadMepTransmitLtmTargetMacAddress_Type()
)
radMepTransmitLtmTargetMacAddress.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepTransmitLtmTargetMacAddress.setStatus("current")
_RadMepTransmitLtmTargetMepId_Type = Unsigned32
_RadMepTransmitLtmTargetMepId_Object = MibTableColumn
radMepTransmitLtmTargetMepId = _RadMepTransmitLtmTargetMepId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 30),
    _RadMepTransmitLtmTargetMepId_Type()
)
radMepTransmitLtmTargetMepId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepTransmitLtmTargetMepId.setStatus("current")


class _RadMepTransmitLtmTargetIsMepId_Type(Integer32):
    """Custom type radMepTransmitLtmTargetIsMepId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_RadMepTransmitLtmTargetIsMepId_Type.__name__ = "Integer32"
_RadMepTransmitLtmTargetIsMepId_Object = MibTableColumn
radMepTransmitLtmTargetIsMepId = _RadMepTransmitLtmTargetIsMepId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 31),
    _RadMepTransmitLtmTargetIsMepId_Type()
)
radMepTransmitLtmTargetIsMepId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepTransmitLtmTargetIsMepId.setStatus("current")
_RadMepTransmitLtmTtl_Type = Unsigned32
_RadMepTransmitLtmTtl_Object = MibTableColumn
radMepTransmitLtmTtl = _RadMepTransmitLtmTtl_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 32),
    _RadMepTransmitLtmTtl_Type()
)
radMepTransmitLtmTtl.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepTransmitLtmTtl.setStatus("current")


class _RadMepTransmitLtmActivationCmd_Type(Integer32):
    """Custom type radMepTransmitLtmActivationCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_RadMepTransmitLtmActivationCmd_Type.__name__ = "Integer32"
_RadMepTransmitLtmActivationCmd_Object = MibTableColumn
radMepTransmitLtmActivationCmd = _RadMepTransmitLtmActivationCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 1, 1, 33),
    _RadMepTransmitLtmActivationCmd_Type()
)
radMepTransmitLtmActivationCmd.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepTransmitLtmActivationCmd.setStatus("current")
_EthOamService_ObjectIdentity = ObjectIdentity
ethOamService = _EthOamService_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2)
)
_EthOamServiceTable_Object = MibTable
ethOamServiceTable = _EthOamServiceTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 1)
)
if mibBuilder.loadTexts:
    ethOamServiceTable.setStatus("current")
_EthOamServiceEntry_Object = MibTableRow
ethOamServiceEntry = _EthOamServiceEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 1, 1)
)
ethOamServiceEntry.setIndexNames(
    (0, "RAD-MIB", "radOamIdx1"),
    (0, "RAD-MIB", "radOamEvcIdx"),
    (0, "RAD-MIB", "radMepIdx"),
    (0, "RAD-MIB", "ethOamServiceIdx"),
)
if mibBuilder.loadTexts:
    ethOamServiceEntry.setStatus("current")
_EthOamServiceIdx_Type = Unsigned32
_EthOamServiceIdx_Object = MibTableColumn
ethOamServiceIdx = _EthOamServiceIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 1, 1, 1),
    _EthOamServiceIdx_Type()
)
ethOamServiceIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethOamServiceIdx.setStatus("current")
_EthOamServiceRowStatus_Type = RowStatus
_EthOamServiceRowStatus_Object = MibTableColumn
ethOamServiceRowStatus = _EthOamServiceRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 1, 1, 2),
    _EthOamServiceRowStatus_Type()
)
ethOamServiceRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethOamServiceRowStatus.setStatus("current")


class _EthOamServicePriority_Type(Unsigned32):
    """Custom type ethOamServicePriority based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_EthOamServicePriority_Type.__name__ = "Unsigned32"
_EthOamServicePriority_Object = MibTableColumn
ethOamServicePriority = _EthOamServicePriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 1, 1, 3),
    _EthOamServicePriority_Type()
)
ethOamServicePriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethOamServicePriority.setStatus("current")


class _EthOamServicePmEnable_Type(Integer32):
    """Custom type ethOamServicePmEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_EthOamServicePmEnable_Type.__name__ = "Integer32"
_EthOamServicePmEnable_Object = MibTableColumn
ethOamServicePmEnable = _EthOamServicePmEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 1, 1, 4),
    _EthOamServicePmEnable_Type()
)
ethOamServicePmEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethOamServicePmEnable.setStatus("current")


class _EthOamServiceFrameLossRatioThresh_Type(Integer32):
    """Custom type ethOamServiceFrameLossRatioThresh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 10),
    )


_EthOamServiceFrameLossRatioThresh_Type.__name__ = "Integer32"
_EthOamServiceFrameLossRatioThresh_Object = MibTableColumn
ethOamServiceFrameLossRatioThresh = _EthOamServiceFrameLossRatioThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 1, 1, 5),
    _EthOamServiceFrameLossRatioThresh_Type()
)
ethOamServiceFrameLossRatioThresh.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethOamServiceFrameLossRatioThresh.setStatus("current")


class _EthOamServiceDelayThresh_Type(Integer32):
    """Custom type ethOamServiceDelayThresh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 50000),
    )


_EthOamServiceDelayThresh_Type.__name__ = "Integer32"
_EthOamServiceDelayThresh_Object = MibTableColumn
ethOamServiceDelayThresh = _EthOamServiceDelayThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 1, 1, 6),
    _EthOamServiceDelayThresh_Type()
)
ethOamServiceDelayThresh.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethOamServiceDelayThresh.setStatus("current")


class _EthOamServiceDelayVarThresh_Type(Integer32):
    """Custom type ethOamServiceDelayVarThresh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 50000),
    )


_EthOamServiceDelayVarThresh_Type.__name__ = "Integer32"
_EthOamServiceDelayVarThresh_Object = MibTableColumn
ethOamServiceDelayVarThresh = _EthOamServiceDelayVarThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 1, 1, 7),
    _EthOamServiceDelayVarThresh_Type()
)
ethOamServiceDelayVarThresh.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethOamServiceDelayVarThresh.setStatus("current")


class _EthOamServiceUnavailRatioThresh_Type(Integer32):
    """Custom type ethOamServiceUnavailRatioThresh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 10),
    )


_EthOamServiceUnavailRatioThresh_Type.__name__ = "Integer32"
_EthOamServiceUnavailRatioThresh_Object = MibTableColumn
ethOamServiceUnavailRatioThresh = _EthOamServiceUnavailRatioThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 1, 1, 8),
    _EthOamServiceUnavailRatioThresh_Type()
)
ethOamServiceUnavailRatioThresh.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ethOamServiceUnavailRatioThresh.setStatus("current")
_EthOamServiceTxFrames_Type = Counter32
_EthOamServiceTxFrames_Object = MibTableColumn
ethOamServiceTxFrames = _EthOamServiceTxFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 1, 1, 9),
    _EthOamServiceTxFrames_Type()
)
ethOamServiceTxFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamServiceTxFrames.setStatus("current")
_EthOamServiceOverflowTxFrames_Type = Counter32
_EthOamServiceOverflowTxFrames_Object = MibTableColumn
ethOamServiceOverflowTxFrames = _EthOamServiceOverflowTxFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 1, 1, 10),
    _EthOamServiceOverflowTxFrames_Type()
)
ethOamServiceOverflowTxFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamServiceOverflowTxFrames.setStatus("current")
_EthOamServiceFrameLoss_Type = Counter32
_EthOamServiceFrameLoss_Object = MibTableColumn
ethOamServiceFrameLoss = _EthOamServiceFrameLoss_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 1, 1, 11),
    _EthOamServiceFrameLoss_Type()
)
ethOamServiceFrameLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamServiceFrameLoss.setStatus("current")
_EthOamServiceOverflowFrameLoss_Type = Counter32
_EthOamServiceOverflowFrameLoss_Object = MibTableColumn
ethOamServiceOverflowFrameLoss = _EthOamServiceOverflowFrameLoss_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 1, 1, 12),
    _EthOamServiceOverflowFrameLoss_Type()
)
ethOamServiceOverflowFrameLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamServiceOverflowFrameLoss.setStatus("current")
_EthOamServiceFrameLossRatio_Type = Unsigned32
_EthOamServiceFrameLossRatio_Object = MibTableColumn
ethOamServiceFrameLossRatio = _EthOamServiceFrameLossRatio_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 1, 1, 13),
    _EthOamServiceFrameLossRatio_Type()
)
ethOamServiceFrameLossRatio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamServiceFrameLossRatio.setStatus("current")
_EthOamServiceElapsedTime_Type = Counter32
_EthOamServiceElapsedTime_Object = MibTableColumn
ethOamServiceElapsedTime = _EthOamServiceElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 1, 1, 14),
    _EthOamServiceElapsedTime_Type()
)
ethOamServiceElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamServiceElapsedTime.setStatus("current")
_EthOamServiceUnavailSec_Type = Counter32
_EthOamServiceUnavailSec_Object = MibTableColumn
ethOamServiceUnavailSec = _EthOamServiceUnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 1, 1, 15),
    _EthOamServiceUnavailSec_Type()
)
ethOamServiceUnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamServiceUnavailSec.setStatus("current")
_EthOamServiceUnavailRatio_Type = Unsigned32
_EthOamServiceUnavailRatio_Object = MibTableColumn
ethOamServiceUnavailRatio = _EthOamServiceUnavailRatio_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 1, 1, 16),
    _EthOamServiceUnavailRatio_Type()
)
ethOamServiceUnavailRatio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamServiceUnavailRatio.setStatus("current")
_EthOamServiceFramesAboveDelay_Type = Counter32
_EthOamServiceFramesAboveDelay_Object = MibTableColumn
ethOamServiceFramesAboveDelay = _EthOamServiceFramesAboveDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 1, 1, 17),
    _EthOamServiceFramesAboveDelay_Type()
)
ethOamServiceFramesAboveDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamServiceFramesAboveDelay.setStatus("current")
_EthOamServiceOverflowFramesAboveDelay_Type = Counter32
_EthOamServiceOverflowFramesAboveDelay_Object = MibTableColumn
ethOamServiceOverflowFramesAboveDelay = _EthOamServiceOverflowFramesAboveDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 1, 1, 18),
    _EthOamServiceOverflowFramesAboveDelay_Type()
)
ethOamServiceOverflowFramesAboveDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamServiceOverflowFramesAboveDelay.setStatus("current")
_EthOamServiceFramesAboveDelayVar_Type = Counter32
_EthOamServiceFramesAboveDelayVar_Object = MibTableColumn
ethOamServiceFramesAboveDelayVar = _EthOamServiceFramesAboveDelayVar_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 1, 1, 19),
    _EthOamServiceFramesAboveDelayVar_Type()
)
ethOamServiceFramesAboveDelayVar.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamServiceFramesAboveDelayVar.setStatus("current")
_EthOamServiceOverflowFramesAboveDelayVar_Type = Counter32
_EthOamServiceOverflowFramesAboveDelayVar_Object = MibTableColumn
ethOamServiceOverflowFramesAboveDelayVar = _EthOamServiceOverflowFramesAboveDelayVar_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 1, 1, 20),
    _EthOamServiceOverflowFramesAboveDelayVar_Type()
)
ethOamServiceOverflowFramesAboveDelayVar.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamServiceOverflowFramesAboveDelayVar.setStatus("current")
_EthOamSvcCurrentStatTable_Object = MibTable
ethOamSvcCurrentStatTable = _EthOamSvcCurrentStatTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 2)
)
if mibBuilder.loadTexts:
    ethOamSvcCurrentStatTable.setStatus("current")
_EthOamSvcCurrentStatEntry_Object = MibTableRow
ethOamSvcCurrentStatEntry = _EthOamSvcCurrentStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 2, 1)
)
ethOamSvcCurrentStatEntry.setIndexNames(
    (0, "RAD-MIB", "radOamIdx1"),
    (0, "RAD-MIB", "radOamEvcIdx"),
    (0, "RAD-MIB", "radMepIdx"),
    (0, "RAD-MIB", "ethOamServiceIdx"),
)
if mibBuilder.loadTexts:
    ethOamSvcCurrentStatEntry.setStatus("current")
_EthOamSvcCurrFramesAboveDelayThresh_Type = PerfCurrentCount
_EthOamSvcCurrFramesAboveDelayThresh_Object = MibTableColumn
ethOamSvcCurrFramesAboveDelayThresh = _EthOamSvcCurrFramesAboveDelayThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 2, 1, 1),
    _EthOamSvcCurrFramesAboveDelayThresh_Type()
)
ethOamSvcCurrFramesAboveDelayThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcCurrFramesAboveDelayThresh.setStatus("current")
_EthOamSvcCurrFramesBelowDelayThresh_Type = PerfCurrentCount
_EthOamSvcCurrFramesBelowDelayThresh_Object = MibTableColumn
ethOamSvcCurrFramesBelowDelayThresh = _EthOamSvcCurrFramesBelowDelayThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 2, 1, 2),
    _EthOamSvcCurrFramesBelowDelayThresh_Type()
)
ethOamSvcCurrFramesBelowDelayThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcCurrFramesBelowDelayThresh.setStatus("current")
_EthOamSvcCurrFramesAboveDVarThresh_Type = PerfCurrentCount
_EthOamSvcCurrFramesAboveDVarThresh_Object = MibTableColumn
ethOamSvcCurrFramesAboveDVarThresh = _EthOamSvcCurrFramesAboveDVarThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 2, 1, 3),
    _EthOamSvcCurrFramesAboveDVarThresh_Type()
)
ethOamSvcCurrFramesAboveDVarThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcCurrFramesAboveDVarThresh.setStatus("current")
_EthOamSvcCurrFramesBelowDVarThresh_Type = PerfCurrentCount
_EthOamSvcCurrFramesBelowDVarThresh_Object = MibTableColumn
ethOamSvcCurrFramesBelowDVarThresh = _EthOamSvcCurrFramesBelowDVarThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 2, 1, 4),
    _EthOamSvcCurrFramesBelowDVarThresh_Type()
)
ethOamSvcCurrFramesBelowDVarThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcCurrFramesBelowDVarThresh.setStatus("current")
_EthOamSvcCurrFramesTxCounter_Type = PerfCurrentCount
_EthOamSvcCurrFramesTxCounter_Object = MibTableColumn
ethOamSvcCurrFramesTxCounter = _EthOamSvcCurrFramesTxCounter_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 2, 1, 5),
    _EthOamSvcCurrFramesTxCounter_Type()
)
ethOamSvcCurrFramesTxCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcCurrFramesTxCounter.setStatus("current")
_EthOamSvcCurrFramesLossCounter_Type = PerfCurrentCount
_EthOamSvcCurrFramesLossCounter_Object = MibTableColumn
ethOamSvcCurrFramesLossCounter = _EthOamSvcCurrFramesLossCounter_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 2, 1, 6),
    _EthOamSvcCurrFramesLossCounter_Type()
)
ethOamSvcCurrFramesLossCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcCurrFramesLossCounter.setStatus("current")
_EthOamSvcCurrMinRoundTripDelay_Type = Unsigned32
_EthOamSvcCurrMinRoundTripDelay_Object = MibTableColumn
ethOamSvcCurrMinRoundTripDelay = _EthOamSvcCurrMinRoundTripDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 2, 1, 7),
    _EthOamSvcCurrMinRoundTripDelay_Type()
)
ethOamSvcCurrMinRoundTripDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcCurrMinRoundTripDelay.setStatus("current")
_EthOamSvcCurrMaxRoundTripDelay_Type = Unsigned32
_EthOamSvcCurrMaxRoundTripDelay_Object = MibTableColumn
ethOamSvcCurrMaxRoundTripDelay = _EthOamSvcCurrMaxRoundTripDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 2, 1, 8),
    _EthOamSvcCurrMaxRoundTripDelay_Type()
)
ethOamSvcCurrMaxRoundTripDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcCurrMaxRoundTripDelay.setStatus("current")
_EthOamSvcCurrAvgRoundTripDelay_Type = Unsigned32
_EthOamSvcCurrAvgRoundTripDelay_Object = MibTableColumn
ethOamSvcCurrAvgRoundTripDelay = _EthOamSvcCurrAvgRoundTripDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 2, 1, 9),
    _EthOamSvcCurrAvgRoundTripDelay_Type()
)
ethOamSvcCurrAvgRoundTripDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcCurrAvgRoundTripDelay.setStatus("current")
_EthOamSvcCurrMaxRoundTripDVar_Type = Unsigned32
_EthOamSvcCurrMaxRoundTripDVar_Object = MibTableColumn
ethOamSvcCurrMaxRoundTripDVar = _EthOamSvcCurrMaxRoundTripDVar_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 2, 1, 10),
    _EthOamSvcCurrMaxRoundTripDVar_Type()
)
ethOamSvcCurrMaxRoundTripDVar.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcCurrMaxRoundTripDVar.setStatus("current")
_EthOamSvcCurrAvgRoundTripDVar_Type = Unsigned32
_EthOamSvcCurrAvgRoundTripDVar_Object = MibTableColumn
ethOamSvcCurrAvgRoundTripDVar = _EthOamSvcCurrAvgRoundTripDVar_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 2, 1, 11),
    _EthOamSvcCurrAvgRoundTripDVar_Type()
)
ethOamSvcCurrAvgRoundTripDVar.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcCurrAvgRoundTripDVar.setStatus("current")


class _EthOamSvcCurrElapsedTime_Type(Integer32):
    """Custom type ethOamSvcCurrElapsedTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 899),
    )


_EthOamSvcCurrElapsedTime_Type.__name__ = "Integer32"
_EthOamSvcCurrElapsedTime_Object = MibTableColumn
ethOamSvcCurrElapsedTime = _EthOamSvcCurrElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 2, 1, 12),
    _EthOamSvcCurrElapsedTime_Type()
)
ethOamSvcCurrElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcCurrElapsedTime.setStatus("current")
_EthOamSvcCurrUnavailSec_Type = PerfCurrentCount
_EthOamSvcCurrUnavailSec_Object = MibTableColumn
ethOamSvcCurrUnavailSec = _EthOamSvcCurrUnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 2, 1, 13),
    _EthOamSvcCurrUnavailSec_Type()
)
ethOamSvcCurrUnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcCurrUnavailSec.setStatus("current")
_EthOamSvcIntervalTable_Object = MibTable
ethOamSvcIntervalTable = _EthOamSvcIntervalTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 3)
)
if mibBuilder.loadTexts:
    ethOamSvcIntervalTable.setStatus("current")
_EthOamSvcIntervalEntry_Object = MibTableRow
ethOamSvcIntervalEntry = _EthOamSvcIntervalEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 3, 1)
)
ethOamSvcIntervalEntry.setIndexNames(
    (0, "RAD-MIB", "radOamIdx1"),
    (0, "RAD-MIB", "radOamEvcIdx"),
    (0, "RAD-MIB", "radMepIdx"),
    (0, "RAD-MIB", "ethOamServiceIdx"),
    (0, "RAD-MIB", "ethOamSvcIntervalNum"),
)
if mibBuilder.loadTexts:
    ethOamSvcIntervalEntry.setStatus("current")


class _EthOamSvcIntervalNum_Type(Integer32):
    """Custom type ethOamSvcIntervalNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_EthOamSvcIntervalNum_Type.__name__ = "Integer32"
_EthOamSvcIntervalNum_Object = MibTableColumn
ethOamSvcIntervalNum = _EthOamSvcIntervalNum_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 3, 1, 1),
    _EthOamSvcIntervalNum_Type()
)
ethOamSvcIntervalNum.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethOamSvcIntervalNum.setStatus("current")
_EthOamSvcIntervalFramesAboveDelayThresh_Type = PerfIntervalCount
_EthOamSvcIntervalFramesAboveDelayThresh_Object = MibTableColumn
ethOamSvcIntervalFramesAboveDelayThresh = _EthOamSvcIntervalFramesAboveDelayThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 3, 1, 2),
    _EthOamSvcIntervalFramesAboveDelayThresh_Type()
)
ethOamSvcIntervalFramesAboveDelayThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcIntervalFramesAboveDelayThresh.setStatus("current")
_EthOamSvcIntervalFramesBelowDelayThresh_Type = PerfIntervalCount
_EthOamSvcIntervalFramesBelowDelayThresh_Object = MibTableColumn
ethOamSvcIntervalFramesBelowDelayThresh = _EthOamSvcIntervalFramesBelowDelayThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 3, 1, 3),
    _EthOamSvcIntervalFramesBelowDelayThresh_Type()
)
ethOamSvcIntervalFramesBelowDelayThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcIntervalFramesBelowDelayThresh.setStatus("current")
_EthOamSvcIntervalFramesAboveDVarThresh_Type = PerfIntervalCount
_EthOamSvcIntervalFramesAboveDVarThresh_Object = MibTableColumn
ethOamSvcIntervalFramesAboveDVarThresh = _EthOamSvcIntervalFramesAboveDVarThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 3, 1, 4),
    _EthOamSvcIntervalFramesAboveDVarThresh_Type()
)
ethOamSvcIntervalFramesAboveDVarThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcIntervalFramesAboveDVarThresh.setStatus("current")
_EthOamSvcIntervalFramesBelowDVarThresh_Type = PerfIntervalCount
_EthOamSvcIntervalFramesBelowDVarThresh_Object = MibTableColumn
ethOamSvcIntervalFramesBelowDVarThresh = _EthOamSvcIntervalFramesBelowDVarThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 3, 1, 5),
    _EthOamSvcIntervalFramesBelowDVarThresh_Type()
)
ethOamSvcIntervalFramesBelowDVarThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcIntervalFramesBelowDVarThresh.setStatus("current")
_EthOamSvcIntervalFramesTxCounter_Type = PerfIntervalCount
_EthOamSvcIntervalFramesTxCounter_Object = MibTableColumn
ethOamSvcIntervalFramesTxCounter = _EthOamSvcIntervalFramesTxCounter_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 3, 1, 6),
    _EthOamSvcIntervalFramesTxCounter_Type()
)
ethOamSvcIntervalFramesTxCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcIntervalFramesTxCounter.setStatus("current")
_EthOamSvcIntervalFramesLossCounter_Type = PerfIntervalCount
_EthOamSvcIntervalFramesLossCounter_Object = MibTableColumn
ethOamSvcIntervalFramesLossCounter = _EthOamSvcIntervalFramesLossCounter_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 3, 1, 7),
    _EthOamSvcIntervalFramesLossCounter_Type()
)
ethOamSvcIntervalFramesLossCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcIntervalFramesLossCounter.setStatus("current")
_EthOamSvcIntervalMinRoundTripDelay_Type = Unsigned32
_EthOamSvcIntervalMinRoundTripDelay_Object = MibTableColumn
ethOamSvcIntervalMinRoundTripDelay = _EthOamSvcIntervalMinRoundTripDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 3, 1, 8),
    _EthOamSvcIntervalMinRoundTripDelay_Type()
)
ethOamSvcIntervalMinRoundTripDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcIntervalMinRoundTripDelay.setStatus("current")
_EthOamSvcIntervalMaxRoundTripDelay_Type = Unsigned32
_EthOamSvcIntervalMaxRoundTripDelay_Object = MibTableColumn
ethOamSvcIntervalMaxRoundTripDelay = _EthOamSvcIntervalMaxRoundTripDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 3, 1, 9),
    _EthOamSvcIntervalMaxRoundTripDelay_Type()
)
ethOamSvcIntervalMaxRoundTripDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcIntervalMaxRoundTripDelay.setStatus("current")
_EthOamSvcIntervalAvgRoundTripDelay_Type = Unsigned32
_EthOamSvcIntervalAvgRoundTripDelay_Object = MibTableColumn
ethOamSvcIntervalAvgRoundTripDelay = _EthOamSvcIntervalAvgRoundTripDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 3, 1, 10),
    _EthOamSvcIntervalAvgRoundTripDelay_Type()
)
ethOamSvcIntervalAvgRoundTripDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcIntervalAvgRoundTripDelay.setStatus("current")
_EthOamSvcIntervalMaxRoundTripDVar_Type = Unsigned32
_EthOamSvcIntervalMaxRoundTripDVar_Object = MibTableColumn
ethOamSvcIntervalMaxRoundTripDVar = _EthOamSvcIntervalMaxRoundTripDVar_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 3, 1, 11),
    _EthOamSvcIntervalMaxRoundTripDVar_Type()
)
ethOamSvcIntervalMaxRoundTripDVar.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcIntervalMaxRoundTripDVar.setStatus("current")
_EthOamSvcIntervalAvgRoundTripDVar_Type = Unsigned32
_EthOamSvcIntervalAvgRoundTripDVar_Object = MibTableColumn
ethOamSvcIntervalAvgRoundTripDVar = _EthOamSvcIntervalAvgRoundTripDVar_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 3, 1, 12),
    _EthOamSvcIntervalAvgRoundTripDVar_Type()
)
ethOamSvcIntervalAvgRoundTripDVar.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcIntervalAvgRoundTripDVar.setStatus("current")
_EthOamSvcIntervalUnavailSec_Type = PerfIntervalCount
_EthOamSvcIntervalUnavailSec_Object = MibTableColumn
ethOamSvcIntervalUnavailSec = _EthOamSvcIntervalUnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 3, 1, 13),
    _EthOamSvcIntervalUnavailSec_Type()
)
ethOamSvcIntervalUnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcIntervalUnavailSec.setStatus("current")
_EthOamSvcTotalTable_Object = MibTable
ethOamSvcTotalTable = _EthOamSvcTotalTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 4)
)
if mibBuilder.loadTexts:
    ethOamSvcTotalTable.setStatus("current")
_EthOamSvcTotalEntry_Object = MibTableRow
ethOamSvcTotalEntry = _EthOamSvcTotalEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 4, 1)
)
ethOamSvcTotalEntry.setIndexNames(
    (0, "RAD-MIB", "radOamIdx1"),
    (0, "RAD-MIB", "radOamEvcIdx"),
    (0, "RAD-MIB", "radMepIdx"),
    (0, "RAD-MIB", "ethOamServiceIdx"),
)
if mibBuilder.loadTexts:
    ethOamSvcTotalEntry.setStatus("current")
_EthOamSvcTotalFramesAboveDelayThresh_Type = PerfTotalCount
_EthOamSvcTotalFramesAboveDelayThresh_Object = MibTableColumn
ethOamSvcTotalFramesAboveDelayThresh = _EthOamSvcTotalFramesAboveDelayThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 4, 1, 1),
    _EthOamSvcTotalFramesAboveDelayThresh_Type()
)
ethOamSvcTotalFramesAboveDelayThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcTotalFramesAboveDelayThresh.setStatus("current")
_EthOamSvcTotalFramesBelowDelayThresh_Type = PerfTotalCount
_EthOamSvcTotalFramesBelowDelayThresh_Object = MibTableColumn
ethOamSvcTotalFramesBelowDelayThresh = _EthOamSvcTotalFramesBelowDelayThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 4, 1, 2),
    _EthOamSvcTotalFramesBelowDelayThresh_Type()
)
ethOamSvcTotalFramesBelowDelayThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcTotalFramesBelowDelayThresh.setStatus("current")
_EthOamSvcTotalFramesAboveDVarThresh_Type = PerfTotalCount
_EthOamSvcTotalFramesAboveDVarThresh_Object = MibTableColumn
ethOamSvcTotalFramesAboveDVarThresh = _EthOamSvcTotalFramesAboveDVarThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 4, 1, 3),
    _EthOamSvcTotalFramesAboveDVarThresh_Type()
)
ethOamSvcTotalFramesAboveDVarThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcTotalFramesAboveDVarThresh.setStatus("current")
_EthOamSvcTotalFramesBelowDVarThresh_Type = PerfTotalCount
_EthOamSvcTotalFramesBelowDVarThresh_Object = MibTableColumn
ethOamSvcTotalFramesBelowDVarThresh = _EthOamSvcTotalFramesBelowDVarThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 4, 1, 4),
    _EthOamSvcTotalFramesBelowDVarThresh_Type()
)
ethOamSvcTotalFramesBelowDVarThresh.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcTotalFramesBelowDVarThresh.setStatus("current")
_EthOamSvcTotalFramesTxCounter_Type = PerfTotalCount
_EthOamSvcTotalFramesTxCounter_Object = MibTableColumn
ethOamSvcTotalFramesTxCounter = _EthOamSvcTotalFramesTxCounter_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 4, 1, 5),
    _EthOamSvcTotalFramesTxCounter_Type()
)
ethOamSvcTotalFramesTxCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcTotalFramesTxCounter.setStatus("current")
_EthOamSvcTotalFramesLossCounter_Type = PerfTotalCount
_EthOamSvcTotalFramesLossCounter_Object = MibTableColumn
ethOamSvcTotalFramesLossCounter = _EthOamSvcTotalFramesLossCounter_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 4, 1, 6),
    _EthOamSvcTotalFramesLossCounter_Type()
)
ethOamSvcTotalFramesLossCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcTotalFramesLossCounter.setStatus("current")
_EthOamSvcTotalMinRoundTripDelay_Type = Unsigned32
_EthOamSvcTotalMinRoundTripDelay_Object = MibTableColumn
ethOamSvcTotalMinRoundTripDelay = _EthOamSvcTotalMinRoundTripDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 4, 1, 7),
    _EthOamSvcTotalMinRoundTripDelay_Type()
)
ethOamSvcTotalMinRoundTripDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcTotalMinRoundTripDelay.setStatus("current")
_EthOamSvcTotalMaxRoundTripDelay_Type = Unsigned32
_EthOamSvcTotalMaxRoundTripDelay_Object = MibTableColumn
ethOamSvcTotalMaxRoundTripDelay = _EthOamSvcTotalMaxRoundTripDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 4, 1, 8),
    _EthOamSvcTotalMaxRoundTripDelay_Type()
)
ethOamSvcTotalMaxRoundTripDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcTotalMaxRoundTripDelay.setStatus("current")
_EthOamSvcTotalAvgRoundTripDelay_Type = Unsigned32
_EthOamSvcTotalAvgRoundTripDelay_Object = MibTableColumn
ethOamSvcTotalAvgRoundTripDelay = _EthOamSvcTotalAvgRoundTripDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 4, 1, 9),
    _EthOamSvcTotalAvgRoundTripDelay_Type()
)
ethOamSvcTotalAvgRoundTripDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcTotalAvgRoundTripDelay.setStatus("current")
_EthOamSvcTotalMaxRoundTripDVar_Type = Unsigned32
_EthOamSvcTotalMaxRoundTripDVar_Object = MibTableColumn
ethOamSvcTotalMaxRoundTripDVar = _EthOamSvcTotalMaxRoundTripDVar_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 4, 1, 10),
    _EthOamSvcTotalMaxRoundTripDVar_Type()
)
ethOamSvcTotalMaxRoundTripDVar.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcTotalMaxRoundTripDVar.setStatus("current")
_EthOamSvcTotalAvgRoundTripDVar_Type = Unsigned32
_EthOamSvcTotalAvgRoundTripDVar_Object = MibTableColumn
ethOamSvcTotalAvgRoundTripDVar = _EthOamSvcTotalAvgRoundTripDVar_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 4, 1, 11),
    _EthOamSvcTotalAvgRoundTripDVar_Type()
)
ethOamSvcTotalAvgRoundTripDVar.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcTotalAvgRoundTripDVar.setStatus("current")
_EthOamSvcTotalUnavailSec_Type = PerfTotalCount
_EthOamSvcTotalUnavailSec_Object = MibTableColumn
ethOamSvcTotalUnavailSec = _EthOamSvcTotalUnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 2, 4, 1, 12),
    _EthOamSvcTotalUnavailSec_Type()
)
ethOamSvcTotalUnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethOamSvcTotalUnavailSec.setStatus("current")
_RadMdTable_Object = MibTable
radMdTable = _RadMdTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 3)
)
if mibBuilder.loadTexts:
    radMdTable.setStatus("current")
_RadMdEntry_Object = MibTableRow
radMdEntry = _RadMdEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 3, 1)
)
radMdEntry.setIndexNames(
    (0, "RAD-MIB", "radMdIndex"),
)
if mibBuilder.loadTexts:
    radMdEntry.setStatus("current")
_RadMdIndex_Type = Unsigned32
_RadMdIndex_Object = MibTableColumn
radMdIndex = _RadMdIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 3, 1, 1),
    _RadMdIndex_Type()
)
radMdIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    radMdIndex.setStatus("current")


class _RadMdFormat_Type(Integer32):
    """Custom type radMdFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("charString", 4),
          ("dnsLikeName", 2),
          ("macAddressAndUint", 3),
          ("none", 1))
    )


_RadMdFormat_Type.__name__ = "Integer32"
_RadMdFormat_Object = MibTableColumn
radMdFormat = _RadMdFormat_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 3, 1, 2),
    _RadMdFormat_Type()
)
radMdFormat.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMdFormat.setStatus("current")


class _RadMdName_Type(OctetString):
    """Custom type radMdName based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 43),
    )


_RadMdName_Type.__name__ = "OctetString"
_RadMdName_Object = MibTableColumn
radMdName = _RadMdName_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 3, 1, 3),
    _RadMdName_Type()
)
radMdName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMdName.setStatus("current")
_RadMdRowStatus_Type = RowStatus
_RadMdRowStatus_Object = MibTableColumn
radMdRowStatus = _RadMdRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 3, 1, 4),
    _RadMdRowStatus_Type()
)
radMdRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMdRowStatus.setStatus("current")
_RadMepLtrTable_Object = MibTable
radMepLtrTable = _RadMepLtrTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 4)
)
if mibBuilder.loadTexts:
    radMepLtrTable.setStatus("current")
_RadMepLtrEntry_Object = MibTableRow
radMepLtrEntry = _RadMepLtrEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 4, 1)
)
radMepLtrEntry.setIndexNames(
    (0, "RAD-MIB", "radOamIdx1"),
    (0, "RAD-MIB", "radMepIdx"),
    (0, "RAD-MIB", "radMepLtrReceiveOrder"),
)
if mibBuilder.loadTexts:
    radMepLtrEntry.setStatus("current")
_RadMepLtrReceiveOrder_Type = Unsigned32
_RadMepLtrReceiveOrder_Object = MibTableColumn
radMepLtrReceiveOrder = _RadMepLtrReceiveOrder_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 4, 1, 1),
    _RadMepLtrReceiveOrder_Type()
)
radMepLtrReceiveOrder.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    radMepLtrReceiveOrder.setStatus("current")


class _RadMepLtrTtl_Type(Unsigned32):
    """Custom type radMepLtrTtl based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_RadMepLtrTtl_Type.__name__ = "Unsigned32"
_RadMepLtrTtl_Object = MibTableColumn
radMepLtrTtl = _RadMepLtrTtl_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 4, 1, 2),
    _RadMepLtrTtl_Type()
)
radMepLtrTtl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radMepLtrTtl.setStatus("current")
_RadMepLtrMacAddr_Type = MacAddress
_RadMepLtrMacAddr_Object = MibTableColumn
radMepLtrMacAddr = _RadMepLtrMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 4, 1, 3),
    _RadMepLtrMacAddr_Type()
)
radMepLtrMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radMepLtrMacAddr.setStatus("current")


class _RadMepLtrRelay_Type(Integer32):
    """Custom type radMepLtrRelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("rlyFdb", 2),
          ("rlyHit", 1),
          ("rlyMpdb", 3))
    )


_RadMepLtrRelay_Type.__name__ = "Integer32"
_RadMepLtrRelay_Object = MibTableColumn
radMepLtrRelay = _RadMepLtrRelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 4, 1, 4),
    _RadMepLtrRelay_Type()
)
radMepLtrRelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radMepLtrRelay.setStatus("current")


class _RadMepLtrIngress_Type(Integer32):
    """Custom type radMepLtrIngress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("ingBlocked", 4),
          ("ingDown", 3),
          ("ingNoTlv", 1),
          ("ingOk", 2),
          ("ingVid", 5))
    )


_RadMepLtrIngress_Type.__name__ = "Integer32"
_RadMepLtrIngress_Object = MibTableColumn
radMepLtrIngress = _RadMepLtrIngress_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 4, 1, 5),
    _RadMepLtrIngress_Type()
)
radMepLtrIngress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radMepLtrIngress.setStatus("current")
_RadMepLtrIngressPortIdSubtype_Type = LldpPortIdSubtype
_RadMepLtrIngressPortIdSubtype_Object = MibTableColumn
radMepLtrIngressPortIdSubtype = _RadMepLtrIngressPortIdSubtype_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 4, 1, 6),
    _RadMepLtrIngressPortIdSubtype_Type()
)
radMepLtrIngressPortIdSubtype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radMepLtrIngressPortIdSubtype.setStatus("current")


class _RadMepLtrIngressPortId_Type(OctetString):
    """Custom type radMepLtrIngressPortId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 255),
    )


_RadMepLtrIngressPortId_Type.__name__ = "OctetString"
_RadMepLtrIngressPortId_Object = MibTableColumn
radMepLtrIngressPortId = _RadMepLtrIngressPortId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 4, 1, 7),
    _RadMepLtrIngressPortId_Type()
)
radMepLtrIngressPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radMepLtrIngressPortId.setStatus("current")


class _RadMepLtrEgress_Type(Integer32):
    """Custom type radMepLtrEgress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("egrBlocked", 4),
          ("egrDown", 3),
          ("egrNoTlv", 1),
          ("egrOK", 2),
          ("egrVid", 5))
    )


_RadMepLtrEgress_Type.__name__ = "Integer32"
_RadMepLtrEgress_Object = MibTableColumn
radMepLtrEgress = _RadMepLtrEgress_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 4, 1, 8),
    _RadMepLtrEgress_Type()
)
radMepLtrEgress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radMepLtrEgress.setStatus("current")
_RadMepLtrEgressPortIdSubtype_Type = LldpPortIdSubtype
_RadMepLtrEgressPortIdSubtype_Object = MibTableColumn
radMepLtrEgressPortIdSubtype = _RadMepLtrEgressPortIdSubtype_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 4, 1, 9),
    _RadMepLtrEgressPortIdSubtype_Type()
)
radMepLtrEgressPortIdSubtype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radMepLtrEgressPortIdSubtype.setStatus("current")


class _RadMepLtrEgressPortId_Type(OctetString):
    """Custom type radMepLtrEgressPortId based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 255),
    )


_RadMepLtrEgressPortId_Type.__name__ = "OctetString"
_RadMepLtrEgressPortId_Object = MibTableColumn
radMepLtrEgressPortId = _RadMepLtrEgressPortId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 4, 1, 10),
    _RadMepLtrEgressPortId_Type()
)
radMepLtrEgressPortId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radMepLtrEgressPortId.setStatus("current")
_RadMepCcStatusTable_Object = MibTable
radMepCcStatusTable = _RadMepCcStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 5)
)
if mibBuilder.loadTexts:
    radMepCcStatusTable.setStatus("current")
_RadMepCcStatusEntry_Object = MibTableRow
radMepCcStatusEntry = _RadMepCcStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 5, 1)
)
radMepCcStatusEntry.setIndexNames(
    (0, "RAD-MIB", "radOamIdx1"),
    (0, "RAD-MIB", "radMepIdx"),
    (0, "RAD-MIB", "radMepRemoteMepIdx"),
)
if mibBuilder.loadTexts:
    radMepCcStatusEntry.setStatus("current")
_RadMepRemoteMepIdx_Type = Unsigned32
_RadMepRemoteMepIdx_Object = MibTableColumn
radMepRemoteMepIdx = _RadMepRemoteMepIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 5, 1, 1),
    _RadMepRemoteMepIdx_Type()
)
radMepRemoteMepIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    radMepRemoteMepIdx.setStatus("current")
_RadMepCcStatusRemMepId_Type = Unsigned32
_RadMepCcStatusRemMepId_Object = MibTableColumn
radMepCcStatusRemMepId = _RadMepCcStatusRemMepId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 5, 1, 2),
    _RadMepCcStatusRemMepId_Type()
)
radMepCcStatusRemMepId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radMepCcStatusRemMepId.setStatus("current")


class _RadMepCcStat_Type(Integer32):
    """Custom type radMepCcStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("fail", 2),
          ("mismerge", 4),
          ("notApplicable", 1),
          ("ok", 3),
          ("rdi", 8),
          ("unexpectedMeLevel", 6),
          ("unexpectedMep", 5),
          ("unexpectedPeriod", 7))
    )


_RadMepCcStat_Type.__name__ = "Integer32"
_RadMepCcStat_Object = MibTableColumn
radMepCcStat = _RadMepCcStat_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 5, 1, 3),
    _RadMepCcStat_Type()
)
radMepCcStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radMepCcStat.setStatus("current")
_RadMepCcStatusMacAddr_Type = MacAddress
_RadMepCcStatusMacAddr_Object = MibTableColumn
radMepCcStatusMacAddr = _RadMepCcStatusMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 5, 1, 4),
    _RadMepCcStatusMacAddr_Type()
)
radMepCcStatusMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radMepCcStatusMacAddr.setStatus("current")
_EthOamStdEtherType_Type = Unsigned32
_EthOamStdEtherType_Object = MibScalar
ethOamStdEtherType = _EthOamStdEtherType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 6),
    _EthOamStdEtherType_Type()
)
ethOamStdEtherType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethOamStdEtherType.setStatus("current")
_EthOamStdMacAddress_Type = MacAddress
_EthOamStdMacAddress_Object = MibScalar
ethOamStdMacAddress = _EthOamStdMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 7),
    _EthOamStdMacAddress_Type()
)
ethOamStdMacAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethOamStdMacAddress.setStatus("current")
_Dot1agXCfmMdTable_Object = MibTable
dot1agXCfmMdTable = _Dot1agXCfmMdTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 8)
)
if mibBuilder.loadTexts:
    dot1agXCfmMdTable.setStatus("current")
_Dot1agXCfmMdEntry_Object = MibTableRow
dot1agXCfmMdEntry = _Dot1agXCfmMdEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 8, 1)
)
dot1agXCfmMdEntry.setIndexNames(
    (0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"),
)
if mibBuilder.loadTexts:
    dot1agXCfmMdEntry.setStatus("current")


class _Dot1agXCfmMdProtocol_Type(Integer32):
    """Custom type dot1agXCfmMdProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("preStandard", 1),
          ("standard", 2))
    )


_Dot1agXCfmMdProtocol_Type.__name__ = "Integer32"
_Dot1agXCfmMdProtocol_Object = MibTableColumn
dot1agXCfmMdProtocol = _Dot1agXCfmMdProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 8, 1, 1),
    _Dot1agXCfmMdProtocol_Type()
)
dot1agXCfmMdProtocol.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1agXCfmMdProtocol.setStatus("current")
_Dot1agXCfmMepTable_Object = MibTable
dot1agXCfmMepTable = _Dot1agXCfmMepTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 9)
)
if mibBuilder.loadTexts:
    dot1agXCfmMepTable.setStatus("current")
_Dot1agXCfmMepEntry_Object = MibTableRow
dot1agXCfmMepEntry = _Dot1agXCfmMepEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 9, 1)
)
dot1agXCfmMepEntry.setIndexNames(
    (0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"),
    (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"),
    (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"),
)
if mibBuilder.loadTexts:
    dot1agXCfmMepEntry.setStatus("current")


class _Dot1agXCfmMepContinuityVerMode_Type(Integer32):
    """Custom type dot1agXCfmMepContinuityVerMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ccBased", 3),
          ("disabled", 2),
          ("lbBased", 4))
    )


_Dot1agXCfmMepContinuityVerMode_Type.__name__ = "Integer32"
_Dot1agXCfmMepContinuityVerMode_Object = MibTableColumn
dot1agXCfmMepContinuityVerMode = _Dot1agXCfmMepContinuityVerMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 9, 1, 1),
    _Dot1agXCfmMepContinuityVerMode_Type()
)
dot1agXCfmMepContinuityVerMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1agXCfmMepContinuityVerMode.setStatus("current")


class _Dot1agXCfmMepDestAddrType_Type(Integer32):
    """Custom type dot1agXCfmMepDestAddrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("multicast", 2),
          ("unicast", 1))
    )


_Dot1agXCfmMepDestAddrType_Type.__name__ = "Integer32"
_Dot1agXCfmMepDestAddrType_Object = MibTableColumn
dot1agXCfmMepDestAddrType = _Dot1agXCfmMepDestAddrType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 9, 1, 2),
    _Dot1agXCfmMepDestAddrType_Type()
)
dot1agXCfmMepDestAddrType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1agXCfmMepDestAddrType.setStatus("current")
_Dot1agXCfmMepDestMacAddr_Type = MacAddress
_Dot1agXCfmMepDestMacAddr_Object = MibTableColumn
dot1agXCfmMepDestMacAddr = _Dot1agXCfmMepDestMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 9, 1, 3),
    _Dot1agXCfmMepDestMacAddr_Type()
)
dot1agXCfmMepDestMacAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot1agXCfmMepDestMacAddr.setStatus("current")
_Dot1agXCfmMepDbTable_Object = MibTable
dot1agXCfmMepDbTable = _Dot1agXCfmMepDbTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 10)
)
if mibBuilder.loadTexts:
    dot1agXCfmMepDbTable.setStatus("current")
_Dot1agXCfmMepDbEntry_Object = MibTableRow
dot1agXCfmMepDbEntry = _Dot1agXCfmMepDbEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 10, 1)
)
dot1agXCfmMepDbEntry.setIndexNames(
    (0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"),
    (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"),
    (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"),
    (0, "IEEE8021-CFM-MIB", "dot1agCfmMepDbRMepIdentifier"),
)
if mibBuilder.loadTexts:
    dot1agXCfmMepDbEntry.setStatus("current")


class _Dot1agXCfmMepCcStat_Type(Integer32):
    """Custom type dot1agXCfmMepCcStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("fail", 2),
          ("mismerge", 4),
          ("notApplicable", 1),
          ("ok", 3),
          ("rdi", 8),
          ("unexpectedMeLevel", 6),
          ("unexpectedMep", 5),
          ("unexpectedPeriod", 7))
    )


_Dot1agXCfmMepCcStat_Type.__name__ = "Integer32"
_Dot1agXCfmMepCcStat_Object = MibTableColumn
dot1agXCfmMepCcStat = _Dot1agXCfmMepCcStat_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 10, 1, 1),
    _Dot1agXCfmMepCcStat_Type()
)
dot1agXCfmMepCcStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot1agXCfmMepCcStat.setStatus("current")
_EthIfRing_ObjectIdentity = ObjectIdentity
ethIfRing = _EthIfRing_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 4)
)
_EthIfRingEvents_ObjectIdentity = ObjectIdentity
ethIfRingEvents = _EthIfRingEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 4, 0)
)
_EthIfRingTable_Object = MibTable
ethIfRingTable = _EthIfRingTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 4, 1)
)
if mibBuilder.loadTexts:
    ethIfRingTable.setStatus("current")
_EthIfRingEntry_Object = MibTableRow
ethIfRingEntry = _EthIfRingEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 4, 1, 1)
)
ethIfRingEntry.setIndexNames(
    (0, "RAD-MIB", "ethIfRingIdx"),
)
if mibBuilder.loadTexts:
    ethIfRingEntry.setStatus("current")
_EthIfRingIdx_Type = Unsigned32
_EthIfRingIdx_Object = MibTableColumn
ethIfRingIdx = _EthIfRingIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 4, 1, 1, 1),
    _EthIfRingIdx_Type()
)
ethIfRingIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethIfRingIdx.setStatus("current")


class _EthIfRingAdminStatus_Type(Integer32):
    """Custom type ethIfRingAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 3))
    )


_EthIfRingAdminStatus_Type.__name__ = "Integer32"
_EthIfRingAdminStatus_Object = MibTableColumn
ethIfRingAdminStatus = _EthIfRingAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 4, 1, 1, 2),
    _EthIfRingAdminStatus_Type()
)
ethIfRingAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethIfRingAdminStatus.setStatus("current")
_EthIfRingPorts_Type = PortList
_EthIfRingPorts_Object = MibTableColumn
ethIfRingPorts = _EthIfRingPorts_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 4, 1, 1, 3),
    _EthIfRingPorts_Type()
)
ethIfRingPorts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethIfRingPorts.setStatus("current")


class _EthIfRingOperStatus_Type(Integer32):
    """Custom type ethIfRingOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("close", 3),
          ("notApplicable", 1),
          ("open", 2))
    )


_EthIfRingOperStatus_Type.__name__ = "Integer32"
_EthIfRingOperStatus_Object = MibTableColumn
ethIfRingOperStatus = _EthIfRingOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 4, 1, 1, 4),
    _EthIfRingOperStatus_Type()
)
ethIfRingOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfRingOperStatus.setStatus("current")
_EthIfRingKeepAliveInterval_Type = Unsigned32
_EthIfRingKeepAliveInterval_Object = MibTableColumn
ethIfRingKeepAliveInterval = _EthIfRingKeepAliveInterval_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 4, 1, 1, 5),
    _EthIfRingKeepAliveInterval_Type()
)
ethIfRingKeepAliveInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethIfRingKeepAliveInterval.setStatus("current")
_EthIfRingKeepAliveThresh_Type = Unsigned32
_EthIfRingKeepAliveThresh_Object = MibTableColumn
ethIfRingKeepAliveThresh = _EthIfRingKeepAliveThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 4, 1, 1, 6),
    _EthIfRingKeepAliveThresh_Type()
)
ethIfRingKeepAliveThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethIfRingKeepAliveThresh.setStatus("current")
_EthIfRingKeepAliveVlanId_Type = Unsigned32
_EthIfRingKeepAliveVlanId_Object = MibTableColumn
ethIfRingKeepAliveVlanId = _EthIfRingKeepAliveVlanId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 4, 1, 1, 7),
    _EthIfRingKeepAliveVlanId_Type()
)
ethIfRingKeepAliveVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethIfRingKeepAliveVlanId.setStatus("current")
_EthIfRingMultiCastVlanId_Type = Unsigned32
_EthIfRingMultiCastVlanId_Object = MibTableColumn
ethIfRingMultiCastVlanId = _EthIfRingMultiCastVlanId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 4, 1, 1, 8),
    _EthIfRingMultiCastVlanId_Type()
)
ethIfRingMultiCastVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethIfRingMultiCastVlanId.setStatus("current")


class _EthIfRingRowStatus_Type(Integer32):
    """Custom type ethIfRingRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              4,
              6)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("createAndGo", 4),
          ("destroy", 6))
    )


_EthIfRingRowStatus_Type.__name__ = "Integer32"
_EthIfRingRowStatus_Object = MibTableColumn
ethIfRingRowStatus = _EthIfRingRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 4, 1, 1, 9),
    _EthIfRingRowStatus_Type()
)
ethIfRingRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethIfRingRowStatus.setStatus("current")
_EthIfStorming_ObjectIdentity = ObjectIdentity
ethIfStorming = _EthIfStorming_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 5)
)
_EthIfStormTable_Object = MibTable
ethIfStormTable = _EthIfStormTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 5, 1)
)
if mibBuilder.loadTexts:
    ethIfStormTable.setStatus("current")
_EthIfStormEntry_Object = MibTableRow
ethIfStormEntry = _EthIfStormEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 5, 1, 1)
)
ethIfStormEntry.setIndexNames(
    (0, "RAD-MIB", "ethIfStormCnfgIdx"),
    (0, "RAD-MIB", "ethIfStormIfIdx"),
    (0, "RAD-MIB", "ethIfStormDirection"),
    (0, "RAD-MIB", "ethIfStormPacketType"),
)
if mibBuilder.loadTexts:
    ethIfStormEntry.setStatus("current")


class _EthIfStormCnfgIdx_Type(Unsigned32):
    """Custom type ethIfStormCnfgIdx based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_EthIfStormCnfgIdx_Type.__name__ = "Unsigned32"
_EthIfStormCnfgIdx_Object = MibTableColumn
ethIfStormCnfgIdx = _EthIfStormCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 5, 1, 1, 1),
    _EthIfStormCnfgIdx_Type()
)
ethIfStormCnfgIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethIfStormCnfgIdx.setStatus("current")
_EthIfStormIfIdx_Type = Unsigned32
_EthIfStormIfIdx_Object = MibTableColumn
ethIfStormIfIdx = _EthIfStormIfIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 5, 1, 1, 2),
    _EthIfStormIfIdx_Type()
)
ethIfStormIfIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethIfStormIfIdx.setStatus("current")


class _EthIfStormDirection_Type(Integer32):
    """Custom type ethIfStormDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("all", 1),
          ("egress", 3),
          ("ingress", 2))
    )


_EthIfStormDirection_Type.__name__ = "Integer32"
_EthIfStormDirection_Object = MibTableColumn
ethIfStormDirection = _EthIfStormDirection_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 5, 1, 1, 3),
    _EthIfStormDirection_Type()
)
ethIfStormDirection.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethIfStormDirection.setStatus("current")


class _EthIfStormPacketType_Type(Bits):
    """Custom type ethIfStormPacketType based on Bits"""
    namedValues = NamedValues(
        *(("broadcast", 1),
          ("multicast", 2),
          ("unknownUnicast", 0))
    )

_EthIfStormPacketType_Type.__name__ = "Bits"
_EthIfStormPacketType_Object = MibTableColumn
ethIfStormPacketType = _EthIfStormPacketType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 5, 1, 1, 4),
    _EthIfStormPacketType_Type()
)
ethIfStormPacketType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethIfStormPacketType.setStatus("current")


class _EthIfStormCtrlEnable_Type(Integer32):
    """Custom type ethIfStormCtrlEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_EthIfStormCtrlEnable_Type.__name__ = "Integer32"
_EthIfStormCtrlEnable_Object = MibTableColumn
ethIfStormCtrlEnable = _EthIfStormCtrlEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 5, 1, 1, 5),
    _EthIfStormCtrlEnable_Type()
)
ethIfStormCtrlEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethIfStormCtrlEnable.setStatus("current")
_EthIfStormMaxRate_Type = Unsigned32
_EthIfStormMaxRate_Object = MibTableColumn
ethIfStormMaxRate = _EthIfStormMaxRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 5, 1, 1, 6),
    _EthIfStormMaxRate_Type()
)
ethIfStormMaxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethIfStormMaxRate.setStatus("current")
_EthIfOamEfm_ObjectIdentity = ObjectIdentity
ethIfOamEfm = _EthIfOamEfm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 6)
)
_Dot3OamEvents_ObjectIdentity = ObjectIdentity
dot3OamEvents = _Dot3OamEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 6, 0)
)
_Dot3OamDescrTable_Object = MibTable
dot3OamDescrTable = _Dot3OamDescrTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 6, 1)
)
if mibBuilder.loadTexts:
    dot3OamDescrTable.setStatus("current")
_Dot3OamDescrEntry_Object = MibTableRow
dot3OamDescrEntry = _Dot3OamDescrEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 6, 1, 1)
)
dot3OamDescrEntry.setIndexNames(
    (0, "RAD-MIB", "dot3OamDescrId"),
)
if mibBuilder.loadTexts:
    dot3OamDescrEntry.setStatus("current")


class _Dot3OamDescrId_Type(Unsigned32):
    """Custom type dot3OamDescrId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4294967295),
    )


_Dot3OamDescrId_Type.__name__ = "Unsigned32"
_Dot3OamDescrId_Object = MibTableColumn
dot3OamDescrId = _Dot3OamDescrId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 6, 1, 1, 1),
    _Dot3OamDescrId_Type()
)
dot3OamDescrId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dot3OamDescrId.setStatus("current")
_Dot3OamDescrRowStatus_Type = RowStatus
_Dot3OamDescrRowStatus_Object = MibTableColumn
dot3OamDescrRowStatus = _Dot3OamDescrRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 6, 1, 1, 2),
    _Dot3OamDescrRowStatus_Type()
)
dot3OamDescrRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot3OamDescrRowStatus.setStatus("current")


class _Dot3OamDescrMode_Type(Integer32):
    """Custom type dot3OamDescrMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("passive", 1))
    )


_Dot3OamDescrMode_Type.__name__ = "Integer32"
_Dot3OamDescrMode_Object = MibTableColumn
dot3OamDescrMode = _Dot3OamDescrMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 6, 1, 1, 3),
    _Dot3OamDescrMode_Type()
)
dot3OamDescrMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot3OamDescrMode.setStatus("current")


class _Dot3OamDescrLbRxOperation_Type(Integer32):
    """Custom type dot3OamDescrLbRxOperation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ignore", 1),
          ("process", 2))
    )


_Dot3OamDescrLbRxOperation_Type.__name__ = "Integer32"
_Dot3OamDescrLbRxOperation_Object = MibTableColumn
dot3OamDescrLbRxOperation = _Dot3OamDescrLbRxOperation_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 6, 1, 1, 4),
    _Dot3OamDescrLbRxOperation_Type()
)
dot3OamDescrLbRxOperation.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot3OamDescrLbRxOperation.setStatus("current")
_Dot3OamDescrRateLimit_Type = Unsigned32
_Dot3OamDescrRateLimit_Object = MibTableColumn
dot3OamDescrRateLimit = _Dot3OamDescrRateLimit_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 6, 1, 1, 5),
    _Dot3OamDescrRateLimit_Type()
)
dot3OamDescrRateLimit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dot3OamDescrRateLimit.setStatus("current")
_Dot3OamXTable_Object = MibTable
dot3OamXTable = _Dot3OamXTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 6, 2)
)
if mibBuilder.loadTexts:
    dot3OamXTable.setStatus("current")
_Dot3OamXEntry_Object = MibTableRow
dot3OamXEntry = _Dot3OamXEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 6, 2, 1)
)
if mibBuilder.loadTexts:
    dot3OamXEntry.setStatus("current")


class _Dot3OamXDescrId_Type(Unsigned32):
    """Custom type dot3OamXDescrId based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4294967295),
    )


_Dot3OamXDescrId_Type.__name__ = "Unsigned32"
_Dot3OamXDescrId_Object = MibTableColumn
dot3OamXDescrId = _Dot3OamXDescrId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 6, 2, 1, 1),
    _Dot3OamXDescrId_Type()
)
dot3OamXDescrId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dot3OamXDescrId.setStatus("current")


class _Dot3OamXPeerState_Type(Integer32):
    """Custom type dot3OamXPeerState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("criticalEvent", 5),
          ("dyingGasp", 4),
          ("linkFault", 3),
          ("operational", 2),
          ("unknown", 1))
    )


_Dot3OamXPeerState_Type.__name__ = "Integer32"
_Dot3OamXPeerState_Object = MibTableColumn
dot3OamXPeerState = _Dot3OamXPeerState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 6, 2, 1, 2),
    _Dot3OamXPeerState_Type()
)
dot3OamXPeerState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dot3OamXPeerState.setStatus("current")
_EthIfMacLayer_ObjectIdentity = ObjectIdentity
ethIfMacLayer = _EthIfMacLayer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7)
)
_EthIfMacLayerEvents_ObjectIdentity = ObjectIdentity
ethIfMacLayerEvents = _EthIfMacLayerEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7, 0)
)
_EthIfSrcMacCtrlTable_Object = MibTable
ethIfSrcMacCtrlTable = _EthIfSrcMacCtrlTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7, 1)
)
if mibBuilder.loadTexts:
    ethIfSrcMacCtrlTable.setStatus("current")
_EthIfSrcMacCtrlEntry_Object = MibTableRow
ethIfSrcMacCtrlEntry = _EthIfSrcMacCtrlEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7, 1, 1)
)
ethIfSrcMacCtrlEntry.setIndexNames(
    (0, "RAD-MIB", "ethIfSrcMacCtrlIndex"),
    (0, "RAD-MIB", "ethIfSrcMacCtrlIdx2"),
)
if mibBuilder.loadTexts:
    ethIfSrcMacCtrlEntry.setStatus("current")
_EthIfSrcMacCtrlIndex_Type = Unsigned32
_EthIfSrcMacCtrlIndex_Object = MibTableColumn
ethIfSrcMacCtrlIndex = _EthIfSrcMacCtrlIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7, 1, 1, 1),
    _EthIfSrcMacCtrlIndex_Type()
)
ethIfSrcMacCtrlIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethIfSrcMacCtrlIndex.setStatus("current")
_EthIfSrcMacCtrlIdx2_Type = Unsigned32
_EthIfSrcMacCtrlIdx2_Object = MibTableColumn
ethIfSrcMacCtrlIdx2 = _EthIfSrcMacCtrlIdx2_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7, 1, 1, 2),
    _EthIfSrcMacCtrlIdx2_Type()
)
ethIfSrcMacCtrlIdx2.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethIfSrcMacCtrlIdx2.setStatus("current")


class _EthIfSrcMacCtrl_Type(Integer32):
    """Custom type ethIfSrcMacCtrl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_EthIfSrcMacCtrl_Type.__name__ = "Integer32"
_EthIfSrcMacCtrl_Object = MibTableColumn
ethIfSrcMacCtrl = _EthIfSrcMacCtrl_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7, 1, 1, 3),
    _EthIfSrcMacCtrl_Type()
)
ethIfSrcMacCtrl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethIfSrcMacCtrl.setStatus("current")
_EthIfSrcMacCtrlMaxPermitAddr_Type = Unsigned32
_EthIfSrcMacCtrlMaxPermitAddr_Object = MibTableColumn
ethIfSrcMacCtrlMaxPermitAddr = _EthIfSrcMacCtrlMaxPermitAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7, 1, 1, 4),
    _EthIfSrcMacCtrlMaxPermitAddr_Type()
)
ethIfSrcMacCtrlMaxPermitAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethIfSrcMacCtrlMaxPermitAddr.setStatus("current")
_EthIfSrcMacCtrlCurNumPermitAddr_Type = Unsigned32
_EthIfSrcMacCtrlCurNumPermitAddr_Object = MibTableColumn
ethIfSrcMacCtrlCurNumPermitAddr = _EthIfSrcMacCtrlCurNumPermitAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7, 1, 1, 5),
    _EthIfSrcMacCtrlCurNumPermitAddr_Type()
)
ethIfSrcMacCtrlCurNumPermitAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfSrcMacCtrlCurNumPermitAddr.setStatus("current")


class _EthIfSrcMacCtrlFlushAddrCmd_Type(Integer32):
    """Custom type ethIfSrcMacCtrlFlushAddrCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_EthIfSrcMacCtrlFlushAddrCmd_Type.__name__ = "Integer32"
_EthIfSrcMacCtrlFlushAddrCmd_Object = MibTableColumn
ethIfSrcMacCtrlFlushAddrCmd = _EthIfSrcMacCtrlFlushAddrCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7, 1, 1, 6),
    _EthIfSrcMacCtrlFlushAddrCmd_Type()
)
ethIfSrcMacCtrlFlushAddrCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethIfSrcMacCtrlFlushAddrCmd.setStatus("current")
_EthIfSrcMacCtrlAging_Type = Unsigned32
_EthIfSrcMacCtrlAging_Object = MibTableColumn
ethIfSrcMacCtrlAging = _EthIfSrcMacCtrlAging_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7, 1, 1, 7),
    _EthIfSrcMacCtrlAging_Type()
)
ethIfSrcMacCtrlAging.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethIfSrcMacCtrlAging.setStatus("current")


class _EthIfSrcMacCtrlLocking_Type(Integer32):
    """Custom type ethIfSrcMacCtrlLocking based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("lock", 3),
          ("unlock", 2))
    )


_EthIfSrcMacCtrlLocking_Type.__name__ = "Integer32"
_EthIfSrcMacCtrlLocking_Object = MibTableColumn
ethIfSrcMacCtrlLocking = _EthIfSrcMacCtrlLocking_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7, 1, 1, 8),
    _EthIfSrcMacCtrlLocking_Type()
)
ethIfSrcMacCtrlLocking.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethIfSrcMacCtrlLocking.setStatus("current")


class _EthIfSrcMacCtrlViolationAction_Type(Integer32):
    """Custom type ethIfSrcMacCtrlViolationAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("drop", 2),
          ("dropNotify", 3),
          ("shutdown", 4))
    )


_EthIfSrcMacCtrlViolationAction_Type.__name__ = "Integer32"
_EthIfSrcMacCtrlViolationAction_Object = MibTableColumn
ethIfSrcMacCtrlViolationAction = _EthIfSrcMacCtrlViolationAction_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7, 1, 1, 9),
    _EthIfSrcMacCtrlViolationAction_Type()
)
ethIfSrcMacCtrlViolationAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethIfSrcMacCtrlViolationAction.setStatus("current")
_EthIfSrcMacCtrlLastViolatingAddr_Type = MacAddress
_EthIfSrcMacCtrlLastViolatingAddr_Object = MibTableColumn
ethIfSrcMacCtrlLastViolatingAddr = _EthIfSrcMacCtrlLastViolatingAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7, 1, 1, 10),
    _EthIfSrcMacCtrlLastViolatingAddr_Type()
)
ethIfSrcMacCtrlLastViolatingAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethIfSrcMacCtrlLastViolatingAddr.setStatus("current")


class _EthIfSrcMacCtrlPortStatus_Type(Integer32):
    """Custom type ethIfSrcMacCtrlPortStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("secureActive", 3),
          ("secureInactive", 4),
          ("shutdown", 2))
    )


_EthIfSrcMacCtrlPortStatus_Type.__name__ = "Integer32"
_EthIfSrcMacCtrlPortStatus_Object = MibTableColumn
ethIfSrcMacCtrlPortStatus = _EthIfSrcMacCtrlPortStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7, 1, 1, 11),
    _EthIfSrcMacCtrlPortStatus_Type()
)
ethIfSrcMacCtrlPortStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfSrcMacCtrlPortStatus.setStatus("current")
_EthIfSrcMacCtrlAddrTable_Object = MibTable
ethIfSrcMacCtrlAddrTable = _EthIfSrcMacCtrlAddrTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7, 2)
)
if mibBuilder.loadTexts:
    ethIfSrcMacCtrlAddrTable.setStatus("current")
_EthIfSrcMacCtrlAddrEntry_Object = MibTableRow
ethIfSrcMacCtrlAddrEntry = _EthIfSrcMacCtrlAddrEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7, 2, 1)
)
ethIfSrcMacCtrlAddrEntry.setIndexNames(
    (0, "RAD-MIB", "ethIfSrcMacCtrlAddrIndex"),
    (0, "RAD-MIB", "ethIfSrcMacCtrlAddr"),
    (0, "RAD-MIB", "ethIfSrcMacCtrlAddrIdx3"),
)
if mibBuilder.loadTexts:
    ethIfSrcMacCtrlAddrEntry.setStatus("current")
_EthIfSrcMacCtrlAddrIndex_Type = Unsigned32
_EthIfSrcMacCtrlAddrIndex_Object = MibTableColumn
ethIfSrcMacCtrlAddrIndex = _EthIfSrcMacCtrlAddrIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7, 2, 1, 1),
    _EthIfSrcMacCtrlAddrIndex_Type()
)
ethIfSrcMacCtrlAddrIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethIfSrcMacCtrlAddrIndex.setStatus("current")
_EthIfSrcMacCtrlAddr_Type = MacAddress
_EthIfSrcMacCtrlAddr_Object = MibTableColumn
ethIfSrcMacCtrlAddr = _EthIfSrcMacCtrlAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7, 2, 1, 2),
    _EthIfSrcMacCtrlAddr_Type()
)
ethIfSrcMacCtrlAddr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethIfSrcMacCtrlAddr.setStatus("current")
_EthIfSrcMacCtrlAddrIdx3_Type = Unsigned32
_EthIfSrcMacCtrlAddrIdx3_Object = MibTableColumn
ethIfSrcMacCtrlAddrIdx3 = _EthIfSrcMacCtrlAddrIdx3_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7, 2, 1, 3),
    _EthIfSrcMacCtrlAddrIdx3_Type()
)
ethIfSrcMacCtrlAddrIdx3.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ethIfSrcMacCtrlAddrIdx3.setStatus("current")


class _EthIfSrcMacCtrlAddrRowStatus_Type(Integer32):
    """Custom type ethIfSrcMacCtrlAddrRowStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              4,
              6)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("createAndGo", 4),
          ("destroy", 6))
    )


_EthIfSrcMacCtrlAddrRowStatus_Type.__name__ = "Integer32"
_EthIfSrcMacCtrlAddrRowStatus_Object = MibTableColumn
ethIfSrcMacCtrlAddrRowStatus = _EthIfSrcMacCtrlAddrRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7, 2, 1, 4),
    _EthIfSrcMacCtrlAddrRowStatus_Type()
)
ethIfSrcMacCtrlAddrRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ethIfSrcMacCtrlAddrRowStatus.setStatus("current")


class _EthIfSrcMacCtrlAddrStatus_Type(Integer32):
    """Custom type ethIfSrcMacCtrlAddrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              5)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("learned", 3),
          ("mgmt", 5))
    )


_EthIfSrcMacCtrlAddrStatus_Type.__name__ = "Integer32"
_EthIfSrcMacCtrlAddrStatus_Object = MibTableColumn
ethIfSrcMacCtrlAddrStatus = _EthIfSrcMacCtrlAddrStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7, 2, 1, 5),
    _EthIfSrcMacCtrlAddrStatus_Type()
)
ethIfSrcMacCtrlAddrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ethIfSrcMacCtrlAddrStatus.setStatus("current")
_Ds3Interface_ObjectIdentity = ObjectIdentity
ds3Interface = _Ds3Interface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3)
)
_PrtDs3PerfHistory_ObjectIdentity = ObjectIdentity
prtDs3PerfHistory = _PrtDs3PerfHistory_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1)
)
_PrtSDs3IfTable_Object = MibTable
prtSDs3IfTable = _PrtSDs3IfTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 1)
)
if mibBuilder.loadTexts:
    prtSDs3IfTable.setStatus("current")
_PrtDs3IfEntry_Object = MibTableRow
prtDs3IfEntry = _PrtDs3IfEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 1, 1)
)
prtDs3IfEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    prtDs3IfEntry.setStatus("current")


class _PrtDs3IfTimeElapsed_Type(Integer32):
    """Custom type prtDs3IfTimeElapsed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 899),
    )


_PrtDs3IfTimeElapsed_Type.__name__ = "Integer32"
_PrtDs3IfTimeElapsed_Object = MibTableColumn
prtDs3IfTimeElapsed = _PrtDs3IfTimeElapsed_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 1, 1, 1),
    _PrtDs3IfTimeElapsed_Type()
)
prtDs3IfTimeElapsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3IfTimeElapsed.setStatus("current")


class _PrtDs3IfValidIntervals_Type(Integer32):
    """Custom type prtDs3IfValidIntervals based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 96),
    )


_PrtDs3IfValidIntervals_Type.__name__ = "Integer32"
_PrtDs3IfValidIntervals_Object = MibTableColumn
prtDs3IfValidIntervals = _PrtDs3IfValidIntervals_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 1, 1, 2),
    _PrtDs3IfValidIntervals_Type()
)
prtDs3IfValidIntervals.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3IfValidIntervals.setStatus("current")
_PrtDs3CurrentTable_Object = MibTable
prtDs3CurrentTable = _PrtDs3CurrentTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 2)
)
if mibBuilder.loadTexts:
    prtDs3CurrentTable.setStatus("current")
_PrtDs3CurrentEntry_Object = MibTableRow
prtDs3CurrentEntry = _PrtDs3CurrentEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 2, 1)
)
prtDs3CurrentEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    prtDs3CurrentEntry.setStatus("current")
_PrtDs3CurrentLOS_Type = Gauge32
_PrtDs3CurrentLOS_Object = MibTableColumn
prtDs3CurrentLOS = _PrtDs3CurrentLOS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 2, 1, 1),
    _PrtDs3CurrentLOS_Type()
)
prtDs3CurrentLOS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3CurrentLOS.setStatus("current")
_PrtDs3CurrentOOF_Type = Gauge32
_PrtDs3CurrentOOF_Object = MibTableColumn
prtDs3CurrentOOF = _PrtDs3CurrentOOF_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 2, 1, 2),
    _PrtDs3CurrentOOF_Type()
)
prtDs3CurrentOOF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3CurrentOOF.setStatus("current")
_PrtDs3CurrentLOC_Type = Gauge32
_PrtDs3CurrentLOC_Object = MibTableColumn
prtDs3CurrentLOC = _PrtDs3CurrentLOC_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 2, 1, 3),
    _PrtDs3CurrentLOC_Type()
)
prtDs3CurrentLOC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3CurrentLOC.setStatus("current")
_PrtDs3CurrentAIS_Type = Gauge32
_PrtDs3CurrentAIS_Object = MibTableColumn
prtDs3CurrentAIS = _PrtDs3CurrentAIS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 2, 1, 4),
    _PrtDs3CurrentAIS_Type()
)
prtDs3CurrentAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3CurrentAIS.setStatus("current")
_PrtDs3CurrentRDI_Type = Gauge32
_PrtDs3CurrentRDI_Object = MibTableColumn
prtDs3CurrentRDI = _PrtDs3CurrentRDI_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 2, 1, 5),
    _PrtDs3CurrentRDI_Type()
)
prtDs3CurrentRDI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3CurrentRDI.setStatus("current")
_PrtDs3CurrentUAS_Type = Gauge32
_PrtDs3CurrentUAS_Object = MibTableColumn
prtDs3CurrentUAS = _PrtDs3CurrentUAS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 2, 1, 6),
    _PrtDs3CurrentUAS_Type()
)
prtDs3CurrentUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3CurrentUAS.setStatus("current")
_PrtDs3CurrentBIP_Type = Gauge32
_PrtDs3CurrentBIP_Object = MibTableColumn
prtDs3CurrentBIP = _PrtDs3CurrentBIP_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 2, 1, 7),
    _PrtDs3CurrentBIP_Type()
)
prtDs3CurrentBIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3CurrentBIP.setStatus("current")
_PrtDs3CurrentFEBE_Type = Gauge32
_PrtDs3CurrentFEBE_Object = MibTableColumn
prtDs3CurrentFEBE = _PrtDs3CurrentFEBE_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 2, 1, 8),
    _PrtDs3CurrentFEBE_Type()
)
prtDs3CurrentFEBE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3CurrentFEBE.setStatus("current")
_PrtDs3CurrentSLM_Type = Gauge32
_PrtDs3CurrentSLM_Object = MibTableColumn
prtDs3CurrentSLM = _PrtDs3CurrentSLM_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 2, 1, 9),
    _PrtDs3CurrentSLM_Type()
)
prtDs3CurrentSLM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3CurrentSLM.setStatus("current")
_PrtDs3CurrentSES_Type = Gauge32
_PrtDs3CurrentSES_Object = MibTableColumn
prtDs3CurrentSES = _PrtDs3CurrentSES_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 2, 1, 10),
    _PrtDs3CurrentSES_Type()
)
prtDs3CurrentSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3CurrentSES.setStatus("current")
_PrtDs3CurrentES_Type = Gauge32
_PrtDs3CurrentES_Object = MibTableColumn
prtDs3CurrentES = _PrtDs3CurrentES_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 2, 1, 11),
    _PrtDs3CurrentES_Type()
)
prtDs3CurrentES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3CurrentES.setStatus("current")
_PrtDs3CurrentBitParity_Type = Gauge32
_PrtDs3CurrentBitParity_Object = MibTableColumn
prtDs3CurrentBitParity = _PrtDs3CurrentBitParity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 2, 1, 12),
    _PrtDs3CurrentBitParity_Type()
)
prtDs3CurrentBitParity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3CurrentBitParity.setStatus("current")
_PrtDs3CurrentPlcpLOF_Type = Gauge32
_PrtDs3CurrentPlcpLOF_Object = MibTableColumn
prtDs3CurrentPlcpLOF = _PrtDs3CurrentPlcpLOF_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 2, 1, 13),
    _PrtDs3CurrentPlcpLOF_Type()
)
prtDs3CurrentPlcpLOF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3CurrentPlcpLOF.setStatus("current")
_PrtDs3CurrentPlcpRAI_Type = Gauge32
_PrtDs3CurrentPlcpRAI_Object = MibTableColumn
prtDs3CurrentPlcpRAI = _PrtDs3CurrentPlcpRAI_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 2, 1, 14),
    _PrtDs3CurrentPlcpRAI_Type()
)
prtDs3CurrentPlcpRAI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3CurrentPlcpRAI.setStatus("current")
_PrtDs3CurrentPlcpBIP_Type = Gauge32
_PrtDs3CurrentPlcpBIP_Object = MibTableColumn
prtDs3CurrentPlcpBIP = _PrtDs3CurrentPlcpBIP_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 2, 1, 15),
    _PrtDs3CurrentPlcpBIP_Type()
)
prtDs3CurrentPlcpBIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3CurrentPlcpBIP.setStatus("current")
_PrtDs3CurrentPlcpFEBE_Type = Gauge32
_PrtDs3CurrentPlcpFEBE_Object = MibTableColumn
prtDs3CurrentPlcpFEBE = _PrtDs3CurrentPlcpFEBE_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 2, 1, 16),
    _PrtDs3CurrentPlcpFEBE_Type()
)
prtDs3CurrentPlcpFEBE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3CurrentPlcpFEBE.setStatus("current")
_PrtDs3CurrentBPV_Type = Gauge32
_PrtDs3CurrentBPV_Object = MibTableColumn
prtDs3CurrentBPV = _PrtDs3CurrentBPV_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 2, 1, 17),
    _PrtDs3CurrentBPV_Type()
)
prtDs3CurrentBPV.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3CurrentBPV.setStatus("current")
_PrtDs3CurrentLCE_Type = Gauge32
_PrtDs3CurrentLCE_Object = MibTableColumn
prtDs3CurrentLCE = _PrtDs3CurrentLCE_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 2, 1, 18),
    _PrtDs3CurrentLCE_Type()
)
prtDs3CurrentLCE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3CurrentLCE.setStatus("current")


class _PrtDs3CurrentStatus_Type(OctetString):
    """Custom type prtDs3CurrentStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_PrtDs3CurrentStatus_Type.__name__ = "OctetString"
_PrtDs3CurrentStatus_Object = MibTableColumn
prtDs3CurrentStatus = _PrtDs3CurrentStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 2, 1, 19),
    _PrtDs3CurrentStatus_Type()
)
prtDs3CurrentStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3CurrentStatus.setStatus("current")
_PrtDs3IntervalTable_Object = MibTable
prtDs3IntervalTable = _PrtDs3IntervalTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 3)
)
if mibBuilder.loadTexts:
    prtDs3IntervalTable.setStatus("current")
_PrtDs3IntervalEntry_Object = MibTableRow
prtDs3IntervalEntry = _PrtDs3IntervalEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 3, 1)
)
prtDs3IntervalEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RAD-MIB", "prtDs3IntervalNumber"),
)
if mibBuilder.loadTexts:
    prtDs3IntervalEntry.setStatus("current")


class _PrtDs3IntervalNumber_Type(Integer32):
    """Custom type prtDs3IntervalNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_PrtDs3IntervalNumber_Type.__name__ = "Integer32"
_PrtDs3IntervalNumber_Object = MibTableColumn
prtDs3IntervalNumber = _PrtDs3IntervalNumber_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 3, 1, 1),
    _PrtDs3IntervalNumber_Type()
)
prtDs3IntervalNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3IntervalNumber.setStatus("current")
_PrtDs3IntervalLOS_Type = Gauge32
_PrtDs3IntervalLOS_Object = MibTableColumn
prtDs3IntervalLOS = _PrtDs3IntervalLOS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 3, 1, 2),
    _PrtDs3IntervalLOS_Type()
)
prtDs3IntervalLOS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3IntervalLOS.setStatus("current")
_PrtDs3IntervalOOF_Type = Gauge32
_PrtDs3IntervalOOF_Object = MibTableColumn
prtDs3IntervalOOF = _PrtDs3IntervalOOF_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 3, 1, 3),
    _PrtDs3IntervalOOF_Type()
)
prtDs3IntervalOOF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3IntervalOOF.setStatus("current")
_PrtDs3IntervalLOC_Type = Gauge32
_PrtDs3IntervalLOC_Object = MibTableColumn
prtDs3IntervalLOC = _PrtDs3IntervalLOC_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 3, 1, 4),
    _PrtDs3IntervalLOC_Type()
)
prtDs3IntervalLOC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3IntervalLOC.setStatus("current")
_PrtDs3IntervalAIS_Type = Gauge32
_PrtDs3IntervalAIS_Object = MibTableColumn
prtDs3IntervalAIS = _PrtDs3IntervalAIS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 3, 1, 5),
    _PrtDs3IntervalAIS_Type()
)
prtDs3IntervalAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3IntervalAIS.setStatus("current")
_PrtDs3IntervalRDI_Type = Gauge32
_PrtDs3IntervalRDI_Object = MibTableColumn
prtDs3IntervalRDI = _PrtDs3IntervalRDI_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 3, 1, 6),
    _PrtDs3IntervalRDI_Type()
)
prtDs3IntervalRDI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3IntervalRDI.setStatus("current")
_PrtDs3IntervalUAS_Type = Gauge32
_PrtDs3IntervalUAS_Object = MibTableColumn
prtDs3IntervalUAS = _PrtDs3IntervalUAS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 3, 1, 7),
    _PrtDs3IntervalUAS_Type()
)
prtDs3IntervalUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3IntervalUAS.setStatus("current")
_PrtDs3IntervalBIP_Type = Gauge32
_PrtDs3IntervalBIP_Object = MibTableColumn
prtDs3IntervalBIP = _PrtDs3IntervalBIP_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 3, 1, 8),
    _PrtDs3IntervalBIP_Type()
)
prtDs3IntervalBIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3IntervalBIP.setStatus("current")
_PrtDs3IntervalFEBE_Type = Gauge32
_PrtDs3IntervalFEBE_Object = MibTableColumn
prtDs3IntervalFEBE = _PrtDs3IntervalFEBE_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 3, 1, 9),
    _PrtDs3IntervalFEBE_Type()
)
prtDs3IntervalFEBE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3IntervalFEBE.setStatus("current")
_PrtDs3IntervalSLM_Type = Gauge32
_PrtDs3IntervalSLM_Object = MibTableColumn
prtDs3IntervalSLM = _PrtDs3IntervalSLM_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 3, 1, 10),
    _PrtDs3IntervalSLM_Type()
)
prtDs3IntervalSLM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3IntervalSLM.setStatus("current")
_PrtDs3IntervalSES_Type = Gauge32
_PrtDs3IntervalSES_Object = MibTableColumn
prtDs3IntervalSES = _PrtDs3IntervalSES_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 3, 1, 11),
    _PrtDs3IntervalSES_Type()
)
prtDs3IntervalSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3IntervalSES.setStatus("current")
_PrtDs3IntervalES_Type = Gauge32
_PrtDs3IntervalES_Object = MibTableColumn
prtDs3IntervalES = _PrtDs3IntervalES_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 3, 1, 12),
    _PrtDs3IntervalES_Type()
)
prtDs3IntervalES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3IntervalES.setStatus("current")
_PrtDs3IntervalBitParity_Type = Gauge32
_PrtDs3IntervalBitParity_Object = MibTableColumn
prtDs3IntervalBitParity = _PrtDs3IntervalBitParity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 3, 1, 13),
    _PrtDs3IntervalBitParity_Type()
)
prtDs3IntervalBitParity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3IntervalBitParity.setStatus("current")
_PrtDs3IntervalPlcpLOF_Type = Gauge32
_PrtDs3IntervalPlcpLOF_Object = MibTableColumn
prtDs3IntervalPlcpLOF = _PrtDs3IntervalPlcpLOF_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 3, 1, 14),
    _PrtDs3IntervalPlcpLOF_Type()
)
prtDs3IntervalPlcpLOF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3IntervalPlcpLOF.setStatus("current")
_PrtDs3IntervalPlcpRAI_Type = Gauge32
_PrtDs3IntervalPlcpRAI_Object = MibTableColumn
prtDs3IntervalPlcpRAI = _PrtDs3IntervalPlcpRAI_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 3, 1, 15),
    _PrtDs3IntervalPlcpRAI_Type()
)
prtDs3IntervalPlcpRAI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3IntervalPlcpRAI.setStatus("current")
_PrtDs3IntervalPlcpBIP_Type = Gauge32
_PrtDs3IntervalPlcpBIP_Object = MibTableColumn
prtDs3IntervalPlcpBIP = _PrtDs3IntervalPlcpBIP_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 3, 1, 16),
    _PrtDs3IntervalPlcpBIP_Type()
)
prtDs3IntervalPlcpBIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3IntervalPlcpBIP.setStatus("current")
_PrtDs3IntervalPlcpFEBE_Type = Gauge32
_PrtDs3IntervalPlcpFEBE_Object = MibTableColumn
prtDs3IntervalPlcpFEBE = _PrtDs3IntervalPlcpFEBE_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 3, 1, 17),
    _PrtDs3IntervalPlcpFEBE_Type()
)
prtDs3IntervalPlcpFEBE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3IntervalPlcpFEBE.setStatus("current")
_PrtDs3IntervalBPV_Type = Gauge32
_PrtDs3IntervalBPV_Object = MibTableColumn
prtDs3IntervalBPV = _PrtDs3IntervalBPV_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 3, 1, 18),
    _PrtDs3IntervalBPV_Type()
)
prtDs3IntervalBPV.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3IntervalBPV.setStatus("current")
_PrtDs3IntervalLCE_Type = Gauge32
_PrtDs3IntervalLCE_Object = MibTableColumn
prtDs3IntervalLCE = _PrtDs3IntervalLCE_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 3, 1, 19),
    _PrtDs3IntervalLCE_Type()
)
prtDs3IntervalLCE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3IntervalLCE.setStatus("current")


class _PrtDs3IntervalStatus_Type(OctetString):
    """Custom type prtDs3IntervalStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_PrtDs3IntervalStatus_Type.__name__ = "OctetString"
_PrtDs3IntervalStatus_Object = MibTableColumn
prtDs3IntervalStatus = _PrtDs3IntervalStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 3, 1, 20),
    _PrtDs3IntervalStatus_Type()
)
prtDs3IntervalStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3IntervalStatus.setStatus("current")
_PrtDs3TotalTable_Object = MibTable
prtDs3TotalTable = _PrtDs3TotalTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 4)
)
if mibBuilder.loadTexts:
    prtDs3TotalTable.setStatus("current")
_PrtDs3TotalEntry_Object = MibTableRow
prtDs3TotalEntry = _PrtDs3TotalEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 4, 1)
)
prtDs3TotalEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    prtDs3TotalEntry.setStatus("current")
_PrtDs3TotalUAS_Type = Gauge32
_PrtDs3TotalUAS_Object = MibTableColumn
prtDs3TotalUAS = _PrtDs3TotalUAS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 4, 1, 6),
    _PrtDs3TotalUAS_Type()
)
prtDs3TotalUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3TotalUAS.setStatus("current")
_PrtDs3TotalBPV_Type = Gauge32
_PrtDs3TotalBPV_Object = MibTableColumn
prtDs3TotalBPV = _PrtDs3TotalBPV_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 4, 1, 17),
    _PrtDs3TotalBPV_Type()
)
prtDs3TotalBPV.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3TotalBPV.setStatus("current")
_PrtDs3TotalLCE_Type = Gauge32
_PrtDs3TotalLCE_Object = MibTableColumn
prtDs3TotalLCE = _PrtDs3TotalLCE_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 4, 1, 18),
    _PrtDs3TotalLCE_Type()
)
prtDs3TotalLCE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3TotalLCE.setStatus("current")
_PrtDs3TotalSES_Type = Gauge32
_PrtDs3TotalSES_Object = MibTableColumn
prtDs3TotalSES = _PrtDs3TotalSES_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 1, 4, 1, 19),
    _PrtDs3TotalSES_Type()
)
prtDs3TotalSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDs3TotalSES.setStatus("current")
_Dsx3XConfigTable_Object = MibTable
dsx3XConfigTable = _Dsx3XConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 2)
)
if mibBuilder.loadTexts:
    dsx3XConfigTable.setStatus("current")
_Dsx3XConfigEntry_Object = MibTableRow
dsx3XConfigEntry = _Dsx3XConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 2, 1)
)
if mibBuilder.loadTexts:
    dsx3XConfigEntry.setStatus("current")


class _Dsx3AisEnable_Type(Integer32):
    """Custom type dsx3AisEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_Dsx3AisEnable_Type.__name__ = "Integer32"
_Dsx3AisEnable_Object = MibTableColumn
dsx3AisEnable = _Dsx3AisEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 2, 1, 1),
    _Dsx3AisEnable_Type()
)
dsx3AisEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx3AisEnable.setStatus("current")


class _Dsx3TxClockSource_Type(Integer32):
    """Custom type dsx3TxClockSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("localTiming", 2),
          ("loopTiming", 1),
          ("system", 4),
          ("throughTiming", 3))
    )


_Dsx3TxClockSource_Type.__name__ = "Integer32"
_Dsx3TxClockSource_Object = MibTableColumn
dsx3TxClockSource = _Dsx3TxClockSource_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 2, 1, 2),
    _Dsx3TxClockSource_Type()
)
dsx3TxClockSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx3TxClockSource.setStatus("current")
_Dsx3MappingTable_Object = MibTable
dsx3MappingTable = _Dsx3MappingTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 3)
)
if mibBuilder.loadTexts:
    dsx3MappingTable.setStatus("current")
_Dsx3MappingEntry_Object = MibTableRow
dsx3MappingEntry = _Dsx3MappingEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 3, 1)
)
dsx3MappingEntry.setIndexNames(
    (0, "RAD-MIB", "dsx3MappingDs3Index"),
    (0, "RAD-MIB", "dsx3MappingNumber"),
)
if mibBuilder.loadTexts:
    dsx3MappingEntry.setStatus("deprecated")
_Dsx3MappingDs3Index_Type = InterfaceIndex
_Dsx3MappingDs3Index_Object = MibTableColumn
dsx3MappingDs3Index = _Dsx3MappingDs3Index_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 3, 1, 1),
    _Dsx3MappingDs3Index_Type()
)
dsx3MappingDs3Index.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dsx3MappingDs3Index.setStatus("current")
_Dsx3MappingNumber_Type = Unsigned32
_Dsx3MappingNumber_Object = MibTableColumn
dsx3MappingNumber = _Dsx3MappingNumber_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 3, 1, 2),
    _Dsx3MappingNumber_Type()
)
dsx3MappingNumber.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dsx3MappingNumber.setStatus("current")
_Dsx3MappingIfIndex_Type = InterfaceIndex
_Dsx3MappingIfIndex_Object = MibTableColumn
dsx3MappingIfIndex = _Dsx3MappingIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 3, 3, 1, 3),
    _Dsx3MappingIfIndex_Type()
)
dsx3MappingIfIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx3MappingIfIndex.setStatus("current")
_Ds1Interface_ObjectIdentity = ObjectIdentity
ds1Interface = _Ds1Interface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4)
)
_PrtDS1Events_ObjectIdentity = ObjectIdentity
prtDS1Events = _PrtDS1Events_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0)
)
_PrtDs1PerfHistory_ObjectIdentity = ObjectIdentity
prtDs1PerfHistory = _PrtDs1PerfHistory_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1)
)
_Dsx1XCurrentTable_Object = MibTable
dsx1XCurrentTable = _Dsx1XCurrentTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2)
)
if mibBuilder.loadTexts:
    dsx1XCurrentTable.setStatus("current")
_Dsx1XCurrentEntry_Object = MibTableRow
dsx1XCurrentEntry = _Dsx1XCurrentEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1)
)
dsx1XCurrentEntry.setIndexNames(
    (0, "DS1-MIB", "dsx1CurrentIndex"),
)
if mibBuilder.loadTexts:
    dsx1XCurrentEntry.setStatus("current")
_Dsx1CurrentLOS_Type = PerfCurrentCount
_Dsx1CurrentLOS_Object = MibTableColumn
dsx1CurrentLOS = _Dsx1CurrentLOS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 1),
    _Dsx1CurrentLOS_Type()
)
dsx1CurrentLOS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1CurrentLOS.setStatus("current")
_Dsx1CurrentLOF_Type = PerfCurrentCount
_Dsx1CurrentLOF_Object = MibTableColumn
dsx1CurrentLOF = _Dsx1CurrentLOF_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 2),
    _Dsx1CurrentLOF_Type()
)
dsx1CurrentLOF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1CurrentLOF.setStatus("current")
_Dsx1CurrentLOC_Type = PerfCurrentCount
_Dsx1CurrentLOC_Object = MibTableColumn
dsx1CurrentLOC = _Dsx1CurrentLOC_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 3),
    _Dsx1CurrentLOC_Type()
)
dsx1CurrentLOC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1CurrentLOC.setStatus("current")
_Dsx1CurrentAIS_Type = PerfCurrentCount
_Dsx1CurrentAIS_Object = MibTableColumn
dsx1CurrentAIS = _Dsx1CurrentAIS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 4),
    _Dsx1CurrentAIS_Type()
)
dsx1CurrentAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1CurrentAIS.setStatus("current")
_Dsx1CurrentRAI_Type = PerfCurrentCount
_Dsx1CurrentRAI_Object = MibTableColumn
dsx1CurrentRAI = _Dsx1CurrentRAI_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 5),
    _Dsx1CurrentRAI_Type()
)
dsx1CurrentRAI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1CurrentRAI.setStatus("current")
_Dsx1CurrentLOMF_Type = PerfCurrentCount
_Dsx1CurrentLOMF_Object = MibTableColumn
dsx1CurrentLOMF = _Dsx1CurrentLOMF_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 6),
    _Dsx1CurrentLOMF_Type()
)
dsx1CurrentLOMF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1CurrentLOMF.setStatus("current")
_Dsx1CurrentFEBE_Type = PerfCurrentCount
_Dsx1CurrentFEBE_Object = MibTableColumn
dsx1CurrentFEBE = _Dsx1CurrentFEBE_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 7),
    _Dsx1CurrentFEBE_Type()
)
dsx1CurrentFEBE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1CurrentFEBE.setStatus("current")


class _Dsx1CurrentStatus_Type(OctetString):
    """Custom type dsx1CurrentStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_Dsx1CurrentStatus_Type.__name__ = "OctetString"
_Dsx1CurrentStatus_Object = MibTableColumn
dsx1CurrentStatus = _Dsx1CurrentStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 8),
    _Dsx1CurrentStatus_Type()
)
dsx1CurrentStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1CurrentStatus.setStatus("current")
_Dsx1CurrentBPV_Type = PerfCurrentCount
_Dsx1CurrentBPV_Object = MibTableColumn
dsx1CurrentBPV = _Dsx1CurrentBPV_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 9),
    _Dsx1CurrentBPV_Type()
)
dsx1CurrentBPV.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1CurrentBPV.setStatus("current")
_Dsx1CurrentLOCRCMF_Type = PerfCurrentCount
_Dsx1CurrentLOCRCMF_Object = MibTableColumn
dsx1CurrentLOCRCMF = _Dsx1CurrentLOCRCMF_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 10),
    _Dsx1CurrentLOCRCMF_Type()
)
dsx1CurrentLOCRCMF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1CurrentLOCRCMF.setStatus("current")
_Dsx1CurrentLOFC_Type = PerfCurrentCount
_Dsx1CurrentLOFC_Object = MibTableColumn
dsx1CurrentLOFC = _Dsx1CurrentLOFC_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 11),
    _Dsx1CurrentLOFC_Type()
)
dsx1CurrentLOFC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1CurrentLOFC.setStatus("current")
_Dsx1CurrentCRCErrors_Type = PerfCurrentCount
_Dsx1CurrentCRCErrors_Object = MibTableColumn
dsx1CurrentCRCErrors = _Dsx1CurrentCRCErrors_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 12),
    _Dsx1CurrentCRCErrors_Type()
)
dsx1CurrentCRCErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1CurrentCRCErrors.setStatus("current")
_Dsx1XIntervalTable_Object = MibTable
dsx1XIntervalTable = _Dsx1XIntervalTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3)
)
if mibBuilder.loadTexts:
    dsx1XIntervalTable.setStatus("current")
_Dsx1XIntervalEntry_Object = MibTableRow
dsx1XIntervalEntry = _Dsx1XIntervalEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1)
)
dsx1XIntervalEntry.setIndexNames(
    (0, "DS1-MIB", "dsx1IntervalIndex"),
    (0, "DS1-MIB", "dsx1IntervalNumber"),
)
if mibBuilder.loadTexts:
    dsx1XIntervalEntry.setStatus("current")
_Dsx1IntervalLOS_Type = PerfIntervalCount
_Dsx1IntervalLOS_Object = MibTableColumn
dsx1IntervalLOS = _Dsx1IntervalLOS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 1),
    _Dsx1IntervalLOS_Type()
)
dsx1IntervalLOS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1IntervalLOS.setStatus("current")
_Dsx1IntervalLOF_Type = PerfIntervalCount
_Dsx1IntervalLOF_Object = MibTableColumn
dsx1IntervalLOF = _Dsx1IntervalLOF_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 2),
    _Dsx1IntervalLOF_Type()
)
dsx1IntervalLOF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1IntervalLOF.setStatus("current")
_Dsx1IntervalLOC_Type = PerfIntervalCount
_Dsx1IntervalLOC_Object = MibTableColumn
dsx1IntervalLOC = _Dsx1IntervalLOC_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 3),
    _Dsx1IntervalLOC_Type()
)
dsx1IntervalLOC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1IntervalLOC.setStatus("current")
_Dsx1IntervalAIS_Type = PerfIntervalCount
_Dsx1IntervalAIS_Object = MibTableColumn
dsx1IntervalAIS = _Dsx1IntervalAIS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 4),
    _Dsx1IntervalAIS_Type()
)
dsx1IntervalAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1IntervalAIS.setStatus("current")
_Dsx1IntervalRAI_Type = PerfIntervalCount
_Dsx1IntervalRAI_Object = MibTableColumn
dsx1IntervalRAI = _Dsx1IntervalRAI_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 5),
    _Dsx1IntervalRAI_Type()
)
dsx1IntervalRAI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1IntervalRAI.setStatus("current")
_Dsx1IntervalLOMF_Type = PerfIntervalCount
_Dsx1IntervalLOMF_Object = MibTableColumn
dsx1IntervalLOMF = _Dsx1IntervalLOMF_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 6),
    _Dsx1IntervalLOMF_Type()
)
dsx1IntervalLOMF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1IntervalLOMF.setStatus("current")
_Dsx1IntervalFEBE_Type = PerfIntervalCount
_Dsx1IntervalFEBE_Object = MibTableColumn
dsx1IntervalFEBE = _Dsx1IntervalFEBE_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 7),
    _Dsx1IntervalFEBE_Type()
)
dsx1IntervalFEBE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1IntervalFEBE.setStatus("current")


class _Dsx1IntervalStatus_Type(OctetString):
    """Custom type dsx1IntervalStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_Dsx1IntervalStatus_Type.__name__ = "OctetString"
_Dsx1IntervalStatus_Object = MibTableColumn
dsx1IntervalStatus = _Dsx1IntervalStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 8),
    _Dsx1IntervalStatus_Type()
)
dsx1IntervalStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1IntervalStatus.setStatus("current")
_Dsx1IntervalBPV_Type = PerfIntervalCount
_Dsx1IntervalBPV_Object = MibTableColumn
dsx1IntervalBPV = _Dsx1IntervalBPV_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 9),
    _Dsx1IntervalBPV_Type()
)
dsx1IntervalBPV.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1IntervalBPV.setStatus("current")
_Dsx1IntervalLOCRCMF_Type = PerfIntervalCount
_Dsx1IntervalLOCRCMF_Object = MibTableColumn
dsx1IntervalLOCRCMF = _Dsx1IntervalLOCRCMF_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 10),
    _Dsx1IntervalLOCRCMF_Type()
)
dsx1IntervalLOCRCMF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1IntervalLOCRCMF.setStatus("current")
_Dsx1IntervalLOFC_Type = PerfIntervalCount
_Dsx1IntervalLOFC_Object = MibTableColumn
dsx1IntervalLOFC = _Dsx1IntervalLOFC_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 11),
    _Dsx1IntervalLOFC_Type()
)
dsx1IntervalLOFC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1IntervalLOFC.setStatus("current")
_Dsx1XTotalTable_Object = MibTable
dsx1XTotalTable = _Dsx1XTotalTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 4)
)
if mibBuilder.loadTexts:
    dsx1XTotalTable.setStatus("current")
_Dsx1XTotalEntry_Object = MibTableRow
dsx1XTotalEntry = _Dsx1XTotalEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 4, 1)
)
dsx1XTotalEntry.setIndexNames(
    (0, "DS1-MIB", "dsx1TotalIndex"),
)
if mibBuilder.loadTexts:
    dsx1XTotalEntry.setStatus("current")
_Dsx1TotalLOS_Type = PerfTotalCount
_Dsx1TotalLOS_Object = MibTableColumn
dsx1TotalLOS = _Dsx1TotalLOS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 4, 1, 1),
    _Dsx1TotalLOS_Type()
)
dsx1TotalLOS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1TotalLOS.setStatus("current")
_Dsx1TotalBPV_Type = PerfTotalCount
_Dsx1TotalBPV_Object = MibTableColumn
dsx1TotalBPV = _Dsx1TotalBPV_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 4, 1, 9),
    _Dsx1TotalBPV_Type()
)
dsx1TotalBPV.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1TotalBPV.setStatus("current")
_Dsx1TotalLOFC_Type = PerfTotalCount
_Dsx1TotalLOFC_Object = MibTableColumn
dsx1TotalLOFC = _Dsx1TotalLOFC_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 4, 1, 11),
    _Dsx1TotalLOFC_Type()
)
dsx1TotalLOFC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1TotalLOFC.setStatus("current")
_Dsx1DataStreamStatTable_Object = MibTable
dsx1DataStreamStatTable = _Dsx1DataStreamStatTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5)
)
if mibBuilder.loadTexts:
    dsx1DataStreamStatTable.setStatus("current")
_Dsx1DataStreamStatEntry_Object = MibTableRow
dsx1DataStreamStatEntry = _Dsx1DataStreamStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1)
)
dsx1DataStreamStatEntry.setIndexNames(
    (0, "RAD-MIB", "dsx1DataStreamStatIfIndex"),
    (0, "RAD-MIB", "dsx1DataStreamStatIndex"),
)
if mibBuilder.loadTexts:
    dsx1DataStreamStatEntry.setStatus("current")
_Dsx1DataStreamStatIfIndex_Type = Integer32
_Dsx1DataStreamStatIfIndex_Object = MibTableColumn
dsx1DataStreamStatIfIndex = _Dsx1DataStreamStatIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 1),
    _Dsx1DataStreamStatIfIndex_Type()
)
dsx1DataStreamStatIfIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dsx1DataStreamStatIfIndex.setStatus("current")
_Dsx1DataStreamStatIndex_Type = Integer32
_Dsx1DataStreamStatIndex_Object = MibTableColumn
dsx1DataStreamStatIndex = _Dsx1DataStreamStatIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 2),
    _Dsx1DataStreamStatIndex_Type()
)
dsx1DataStreamStatIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dsx1DataStreamStatIndex.setStatus("current")
_Dsx1DataStreamStatValid_Type = TruthValue
_Dsx1DataStreamStatValid_Object = MibTableColumn
dsx1DataStreamStatValid = _Dsx1DataStreamStatValid_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 3),
    _Dsx1DataStreamStatValid_Type()
)
dsx1DataStreamStatValid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1DataStreamStatValid.setStatus("current")
_Dsx1DataStreamStatInFrames_Type = Counter32
_Dsx1DataStreamStatInFrames_Object = MibTableColumn
dsx1DataStreamStatInFrames = _Dsx1DataStreamStatInFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 4),
    _Dsx1DataStreamStatInFrames_Type()
)
dsx1DataStreamStatInFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1DataStreamStatInFrames.setStatus("current")
_Dsx1DataStreamStatInBytes_Type = Counter32
_Dsx1DataStreamStatInBytes_Object = MibTableColumn
dsx1DataStreamStatInBytes = _Dsx1DataStreamStatInBytes_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 5),
    _Dsx1DataStreamStatInBytes_Type()
)
dsx1DataStreamStatInBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1DataStreamStatInBytes.setStatus("current")
_Dsx1DataStreamStatInDiscards_Type = Counter32
_Dsx1DataStreamStatInDiscards_Object = MibTableColumn
dsx1DataStreamStatInDiscards = _Dsx1DataStreamStatInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 6),
    _Dsx1DataStreamStatInDiscards_Type()
)
dsx1DataStreamStatInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1DataStreamStatInDiscards.setStatus("current")
_Dsx1DataStreamStatInErrors_Type = Counter32
_Dsx1DataStreamStatInErrors_Object = MibTableColumn
dsx1DataStreamStatInErrors = _Dsx1DataStreamStatInErrors_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 7),
    _Dsx1DataStreamStatInErrors_Type()
)
dsx1DataStreamStatInErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1DataStreamStatInErrors.setStatus("current")
_Dsx1DataStreamStatOutFrames_Type = Counter32
_Dsx1DataStreamStatOutFrames_Object = MibTableColumn
dsx1DataStreamStatOutFrames = _Dsx1DataStreamStatOutFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 8),
    _Dsx1DataStreamStatOutFrames_Type()
)
dsx1DataStreamStatOutFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1DataStreamStatOutFrames.setStatus("current")
_Dsx1DataStreamStatOutBytes_Type = Counter32
_Dsx1DataStreamStatOutBytes_Object = MibTableColumn
dsx1DataStreamStatOutBytes = _Dsx1DataStreamStatOutBytes_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 9),
    _Dsx1DataStreamStatOutBytes_Type()
)
dsx1DataStreamStatOutBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1DataStreamStatOutBytes.setStatus("current")
_Dsx1DataStreamStatOutDiscards_Type = Counter32
_Dsx1DataStreamStatOutDiscards_Object = MibTableColumn
dsx1DataStreamStatOutDiscards = _Dsx1DataStreamStatOutDiscards_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 10),
    _Dsx1DataStreamStatOutDiscards_Type()
)
dsx1DataStreamStatOutDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1DataStreamStatOutDiscards.setStatus("current")
_Dsx1DataStreamStatOutErrors_Type = Counter32
_Dsx1DataStreamStatOutErrors_Object = MibTableColumn
dsx1DataStreamStatOutErrors = _Dsx1DataStreamStatOutErrors_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 11),
    _Dsx1DataStreamStatOutErrors_Type()
)
dsx1DataStreamStatOutErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1DataStreamStatOutErrors.setStatus("current")
_Dsx1XConfigTable_Object = MibTable
dsx1XConfigTable = _Dsx1XConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2)
)
if mibBuilder.loadTexts:
    dsx1XConfigTable.setStatus("current")
_Dsx1XConfigEntry_Object = MibTableRow
dsx1XConfigEntry = _Dsx1XConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1)
)
dsx1XConfigEntry.setIndexNames(
    (0, "DS1-MIB", "dsx1LineIndex"),
)
if mibBuilder.loadTexts:
    dsx1XConfigEntry.setStatus("current")
_Dsx1IdleCode_Type = Integer32
_Dsx1IdleCode_Object = MibTableColumn
dsx1IdleCode = _Dsx1IdleCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 1),
    _Dsx1IdleCode_Type()
)
dsx1IdleCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx1IdleCode.setStatus("current")


class _Dsx1LineMode_Type(Integer32):
    """Custom type dsx1LineMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("csu", 1),
          ("dsu", 2))
    )


_Dsx1LineMode_Type.__name__ = "Integer32"
_Dsx1LineMode_Object = MibTableColumn
dsx1LineMode = _Dsx1LineMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 2),
    _Dsx1LineMode_Type()
)
dsx1LineMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx1LineMode.setStatus("current")


class _Dsx1dBTxGain_Type(Integer32):
    """Custom type dsx1dBTxGain based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("neg15dB", 3),
          ("neg225dB", 4),
          ("neg75dB", 2),
          ("notApplicable", 1),
          ("zerodB", 5))
    )


_Dsx1dBTxGain_Type.__name__ = "Integer32"
_Dsx1dBTxGain_Object = MibTableColumn
dsx1dBTxGain = _Dsx1dBTxGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 3),
    _Dsx1dBTxGain_Type()
)
dsx1dBTxGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx1dBTxGain.setStatus("current")


class _Dsx1RxSensitivity_Type(Integer32):
    """Custom type dsx1RxSensitivity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("longHaul", 2),
          ("notApplicable", 1),
          ("shortHaul", 3))
    )


_Dsx1RxSensitivity_Type.__name__ = "Integer32"
_Dsx1RxSensitivity_Object = MibTableColumn
dsx1RxSensitivity = _Dsx1RxSensitivity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 4),
    _Dsx1RxSensitivity_Type()
)
dsx1RxSensitivity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx1RxSensitivity.setStatus("current")


class _Dsx1RestoreTime_Type(Integer32):
    """Custom type dsx1RestoreTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("immediate", 4),
          ("other", 1),
          ("sec1", 2),
          ("sec10", 3))
    )


_Dsx1RestoreTime_Type.__name__ = "Integer32"
_Dsx1RestoreTime_Object = MibTableColumn
dsx1RestoreTime = _Dsx1RestoreTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 5),
    _Dsx1RestoreTime_Type()
)
dsx1RestoreTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx1RestoreTime.setStatus("current")
_Dsx1TcFirstSignal_Type = Integer32
_Dsx1TcFirstSignal_Object = MibTableColumn
dsx1TcFirstSignal = _Dsx1TcFirstSignal_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 6),
    _Dsx1TcFirstSignal_Type()
)
dsx1TcFirstSignal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx1TcFirstSignal.setStatus("current")
_Dsx1TcSignal_Type = Integer32
_Dsx1TcSignal_Object = MibTableColumn
dsx1TcSignal = _Dsx1TcSignal_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 7),
    _Dsx1TcSignal_Type()
)
dsx1TcSignal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx1TcSignal.setStatus("current")
_Dsx1TcPattern_Type = Integer32
_Dsx1TcPattern_Object = MibTableColumn
dsx1TcPattern = _Dsx1TcPattern_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 8),
    _Dsx1TcPattern_Type()
)
dsx1TcPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx1TcPattern.setStatus("current")


class _Dsx1Scramble_Type(Integer32):
    """Custom type dsx1Scramble based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 3),
          ("notActive", 2),
          ("notApplicable", 1))
    )


_Dsx1Scramble_Type.__name__ = "Integer32"
_Dsx1Scramble_Object = MibTableColumn
dsx1Scramble = _Dsx1Scramble_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 9),
    _Dsx1Scramble_Type()
)
dsx1Scramble.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx1Scramble.setStatus("current")


class _Dsx1LineAdaptiveTimingMode_Type(Integer32):
    """Custom type dsx1LineAdaptiveTimingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_Dsx1LineAdaptiveTimingMode_Type.__name__ = "Integer32"
_Dsx1LineAdaptiveTimingMode_Object = MibTableColumn
dsx1LineAdaptiveTimingMode = _Dsx1LineAdaptiveTimingMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 10),
    _Dsx1LineAdaptiveTimingMode_Type()
)
dsx1LineAdaptiveTimingMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx1LineAdaptiveTimingMode.setStatus("current")


class _Dsx1TxClockSource_Type(Integer32):
    """Custom type dsx1TxClockSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("adaptive", 4),
          ("localTiming", 2),
          ("loopTiming", 1),
          ("system", 5),
          ("throughTiming", 3))
    )


_Dsx1TxClockSource_Type.__name__ = "Integer32"
_Dsx1TxClockSource_Object = MibTableColumn
dsx1TxClockSource = _Dsx1TxClockSource_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 11),
    _Dsx1TxClockSource_Type()
)
dsx1TxClockSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx1TxClockSource.setStatus("current")


class _Dsx1AisEnable_Type(Integer32):
    """Custom type dsx1AisEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_Dsx1AisEnable_Type.__name__ = "Integer32"
_Dsx1AisEnable_Object = MibTableColumn
dsx1AisEnable = _Dsx1AisEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 12),
    _Dsx1AisEnable_Type()
)
dsx1AisEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx1AisEnable.setStatus("current")


class _Dsx1TsEchoCancel_Type(OctetString):
    """Custom type dsx1TsEchoCancel based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_Dsx1TsEchoCancel_Type.__name__ = "OctetString"
_Dsx1TsEchoCancel_Object = MibTableColumn
dsx1TsEchoCancel = _Dsx1TsEchoCancel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 13),
    _Dsx1TsEchoCancel_Type()
)
dsx1TsEchoCancel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx1TsEchoCancel.setStatus("current")


class _Dsx1EchoCancelerModule_Type(Integer32):
    """Custom type dsx1EchoCancelerModule based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("exist", 3),
          ("notExist", 2))
    )


_Dsx1EchoCancelerModule_Type.__name__ = "Integer32"
_Dsx1EchoCancelerModule_Object = MibTableColumn
dsx1EchoCancelerModule = _Dsx1EchoCancelerModule_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 14),
    _Dsx1EchoCancelerModule_Type()
)
dsx1EchoCancelerModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1EchoCancelerModule.setStatus("current")


class _Dsx1PortFunction_Type(Integer32):
    """Custom type dsx1PortFunction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("abis", 6),
          ("ces", 3),
          ("cesPsn", 5),
          ("ima", 4),
          ("notApplicable", 1),
          ("uni", 2))
    )


_Dsx1PortFunction_Type.__name__ = "Integer32"
_Dsx1PortFunction_Object = MibTableColumn
dsx1PortFunction = _Dsx1PortFunction_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 15),
    _Dsx1PortFunction_Type()
)
dsx1PortFunction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx1PortFunction.setStatus("current")


class _Dsx1PortMultiplier_Type(Integer32):
    """Custom type dsx1PortMultiplier based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("r56", 2),
          ("r64", 3))
    )


_Dsx1PortMultiplier_Type.__name__ = "Integer32"
_Dsx1PortMultiplier_Object = MibTableColumn
dsx1PortMultiplier = _Dsx1PortMultiplier_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 16),
    _Dsx1PortMultiplier_Type()
)
dsx1PortMultiplier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx1PortMultiplier.setStatus("current")


class _Dsx1LeasedLine_Type(Integer32):
    """Custom type dsx1LeasedLine based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_Dsx1LeasedLine_Type.__name__ = "Integer32"
_Dsx1LeasedLine_Object = MibTableColumn
dsx1LeasedLine = _Dsx1LeasedLine_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 17),
    _Dsx1LeasedLine_Type()
)
dsx1LeasedLine.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx1LeasedLine.setStatus("current")


class _Dsx1CsuLoop_Type(Integer32):
    """Custom type dsx1CsuLoop based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("local", 2),
          ("notApplicable", 1),
          ("remote", 4),
          ("transparent", 3))
    )


_Dsx1CsuLoop_Type.__name__ = "Integer32"
_Dsx1CsuLoop_Object = MibTableColumn
dsx1CsuLoop = _Dsx1CsuLoop_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 18),
    _Dsx1CsuLoop_Type()
)
dsx1CsuLoop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx1CsuLoop.setStatus("current")
_Dsx1ClockSource_Type = Integer32
_Dsx1ClockSource_Object = MibTableColumn
dsx1ClockSource = _Dsx1ClockSource_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 19),
    _Dsx1ClockSource_Type()
)
dsx1ClockSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx1ClockSource.setStatus("current")


class _Dsx1OosSignal_Type(Integer32):
    """Custom type dsx1OosSignal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("mark", 3),
          ("markSpace", 5),
          ("notApplicable", 1),
          ("space", 2),
          ("spaceMark", 4))
    )


_Dsx1OosSignal_Type.__name__ = "Integer32"
_Dsx1OosSignal_Object = MibTableColumn
dsx1OosSignal = _Dsx1OosSignal_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 20),
    _Dsx1OosSignal_Type()
)
dsx1OosSignal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx1OosSignal.setStatus("current")
_Dsx1BundleNextIndex_Type = Integer32
_Dsx1BundleNextIndex_Object = MibTableColumn
dsx1BundleNextIndex = _Dsx1BundleNextIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 21),
    _Dsx1BundleNextIndex_Type()
)
dsx1BundleNextIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dsx1BundleNextIndex.setStatus("current")


class _Dsx1CRC6CalcMode_Type(Integer32):
    """Custom type dsx1CRC6CalcMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ituG704", 2),
          ("jtG704", 1))
    )


_Dsx1CRC6CalcMode_Type.__name__ = "Integer32"
_Dsx1CRC6CalcMode_Object = MibTableColumn
dsx1CRC6CalcMode = _Dsx1CRC6CalcMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 22),
    _Dsx1CRC6CalcMode_Type()
)
dsx1CRC6CalcMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx1CRC6CalcMode.setStatus("current")


class _Dsx1SendUponFail_Type(Integer32):
    """Custom type dsx1SendUponFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ais", 3),
          ("oosCode", 2))
    )


_Dsx1SendUponFail_Type.__name__ = "Integer32"
_Dsx1SendUponFail_Object = MibTableColumn
dsx1SendUponFail = _Dsx1SendUponFail_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 23),
    _Dsx1SendUponFail_Type()
)
dsx1SendUponFail.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dsx1SendUponFail.setStatus("current")
_Ip2If_ObjectIdentity = ObjectIdentity
ip2If = _Ip2If_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7)
)
_Ip2IfTable_Object = MibTable
ip2IfTable = _Ip2IfTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1)
)
if mibBuilder.loadTexts:
    ip2IfTable.setStatus("current")
_Ip2IfEntry_Object = MibTableRow
ip2IfEntry = _Ip2IfEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1)
)
ip2IfEntry.setIndexNames(
    (0, "RAD-MIB", "ip2IfChannelIndex"),
)
if mibBuilder.loadTexts:
    ip2IfEntry.setStatus("current")
_Ip2IfChannelIndex_Type = Integer32
_Ip2IfChannelIndex_Object = MibTableColumn
ip2IfChannelIndex = _Ip2IfChannelIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 1),
    _Ip2IfChannelIndex_Type()
)
ip2IfChannelIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfChannelIndex.setStatus("current")
_Ip2IfRowStatus_Type = RowStatus
_Ip2IfRowStatus_Object = MibTableColumn
ip2IfRowStatus = _Ip2IfRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 2),
    _Ip2IfRowStatus_Type()
)
ip2IfRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfRowStatus.setStatus("current")


class _Ip2IfOperStatus_Type(Integer32):
    """Custom type ip2IfOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 4),
          ("down", 2),
          ("hwMismatch", 11),
          ("localFail", 6),
          ("remoteFail", 5),
          ("standby", 9),
          ("tdmFail", 10),
          ("unavailable", 7),
          ("up", 3),
          ("validationFail", 8))
    )


_Ip2IfOperStatus_Type.__name__ = "Integer32"
_Ip2IfOperStatus_Object = MibTableColumn
ip2IfOperStatus = _Ip2IfOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 3),
    _Ip2IfOperStatus_Type()
)
ip2IfOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfOperStatus.setStatus("current")


class _Ip2IfAdminStatus_Type(Integer32):
    """Custom type ip2IfAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 3))
    )


_Ip2IfAdminStatus_Type.__name__ = "Integer32"
_Ip2IfAdminStatus_Object = MibTableColumn
ip2IfAdminStatus = _Ip2IfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 4),
    _Ip2IfAdminStatus_Type()
)
ip2IfAdminStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfAdminStatus.setStatus("current")
_Ip2IfDestAddr_Type = IpAddress
_Ip2IfDestAddr_Object = MibTableColumn
ip2IfDestAddr = _Ip2IfDestAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 5),
    _Ip2IfDestAddr_Type()
)
ip2IfDestAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfDestAddr.setStatus("current")
_Ip2IfNextHop_Type = IpAddress
_Ip2IfNextHop_Object = MibTableColumn
ip2IfNextHop = _Ip2IfNextHop_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 6),
    _Ip2IfNextHop_Type()
)
ip2IfNextHop.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfNextHop.setStatus("current")
_Ip2IfDestPort_Type = Integer32
_Ip2IfDestPort_Object = MibTableColumn
ip2IfDestPort = _Ip2IfDestPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 7),
    _Ip2IfDestPort_Type()
)
ip2IfDestPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfDestPort.setStatus("current")
_Ip2IfMacAddr_Type = MacAddress
_Ip2IfMacAddr_Object = MibTableColumn
ip2IfMacAddr = _Ip2IfMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 8),
    _Ip2IfMacAddr_Type()
)
ip2IfMacAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfMacAddr.setStatus("current")
_Ip2IfJitterBuffer_Type = Integer32
_Ip2IfJitterBuffer_Object = MibTableColumn
ip2IfJitterBuffer = _Ip2IfJitterBuffer_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 9),
    _Ip2IfJitterBuffer_Type()
)
ip2IfJitterBuffer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfJitterBuffer.setStatus("current")
_Ip2IfTos_Type = Integer32
_Ip2IfTos_Object = MibTableColumn
ip2IfTos = _Ip2IfTos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 10),
    _Ip2IfTos_Type()
)
ip2IfTos.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfTos.setStatus("current")
_Ip2IfTDMBytesInFrame_Type = Integer32
_Ip2IfTDMBytesInFrame_Object = MibTableColumn
ip2IfTDMBytesInFrame = _Ip2IfTDMBytesInFrame_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 11),
    _Ip2IfTDMBytesInFrame_Type()
)
ip2IfTDMBytesInFrame.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfTDMBytesInFrame.setStatus("current")


class _Ip2IfVlanSupport_Type(Integer32):
    """Custom type ip2IfVlanSupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_Ip2IfVlanSupport_Type.__name__ = "Integer32"
_Ip2IfVlanSupport_Object = MibTableColumn
ip2IfVlanSupport = _Ip2IfVlanSupport_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 12),
    _Ip2IfVlanSupport_Type()
)
ip2IfVlanSupport.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfVlanSupport.setStatus("current")
_Ip2IfVlanIdentifier_Type = Integer32
_Ip2IfVlanIdentifier_Object = MibTableColumn
ip2IfVlanIdentifier = _Ip2IfVlanIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 13),
    _Ip2IfVlanIdentifier_Type()
)
ip2IfVlanIdentifier.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfVlanIdentifier.setStatus("current")
_Ip2IfVlanFramePriority_Type = Integer32
_Ip2IfVlanFramePriority_Object = MibTableColumn
ip2IfVlanFramePriority = _Ip2IfVlanFramePriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 14),
    _Ip2IfVlanFramePriority_Type()
)
ip2IfVlanFramePriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfVlanFramePriority.setStatus("current")


class _Ip2IfExitPort_Type(Integer32):
    """Custom type ip2IfExitPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35)
        )
    )
    namedValues = NamedValues(
        *(("auto", 4),
          ("card1Ext3", 24),
          ("card1Ext4", 25),
          ("card1Ext5", 26),
          ("card1Ext6", 27),
          ("card1Ext7", 28),
          ("card1Ext8", 29),
          ("card2Ext1", 5),
          ("card2Ext2", 6),
          ("card2Ext3", 30),
          ("card2Ext4", 31),
          ("card2Ext5", 32),
          ("card2Ext6", 33),
          ("card2Ext7", 34),
          ("card2Ext8", 35),
          ("card3Ext1", 16),
          ("card3Ext2", 17),
          ("card3Ext3", 18),
          ("card3Ext4", 19),
          ("card4Ext1", 20),
          ("card4Ext2", 21),
          ("card4Ext3", 22),
          ("card4Ext4", 23),
          ("ext1", 2),
          ("ext2", 3),
          ("ext5", 7),
          ("ext6", 9),
          ("ext7", 8),
          ("notApplicable", 1),
          ("prt17", 10),
          ("prt18", 11),
          ("prt19", 12),
          ("prt20", 13),
          ("prtE1T1B", 14),
          ("prtEthUser", 15))
    )


_Ip2IfExitPort_Type.__name__ = "Integer32"
_Ip2IfExitPort_Object = MibTableColumn
ip2IfExitPort = _Ip2IfExitPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 15),
    _Ip2IfExitPort_Type()
)
ip2IfExitPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfExitPort.setStatus("current")
_Ip2IfVoiceOos_Type = OctetString
_Ip2IfVoiceOos_Object = MibTableColumn
ip2IfVoiceOos = _Ip2IfVoiceOos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 16),
    _Ip2IfVoiceOos_Type()
)
ip2IfVoiceOos.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfVoiceOos.setStatus("current")
_Ip2IfDataOos_Type = OctetString
_Ip2IfDataOos_Object = MibTableColumn
ip2IfDataOos = _Ip2IfDataOos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 17),
    _Ip2IfDataOos_Type()
)
ip2IfDataOos.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfDataOos.setStatus("current")
_Ip2IfBundleUsage_Type = Integer32
_Ip2IfBundleUsage_Object = MibTableColumn
ip2IfBundleUsage = _Ip2IfBundleUsage_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 18),
    _Ip2IfBundleUsage_Type()
)
ip2IfBundleUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfBundleUsage.setStatus("current")
_Ip2IfOAM_Type = OctetString
_Ip2IfOAM_Object = MibTableColumn
ip2IfOAM = _Ip2IfOAM_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 19),
    _Ip2IfOAM_Type()
)
ip2IfOAM.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfOAM.setStatus("current")


class _Ip2IfTDMoIpMode_Type(Integer32):
    """Custom type ip2IfTDMoIpMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("cesOverIp", 5),
          ("cesOverPsn", 11),
          ("dynamicCAS", 4),
          ("dynamicLES", 3),
          ("hdlc", 7),
          ("hdlcOverPsn", 12),
          ("notApplicable", 1),
          ("satop", 10),
          ("static", 2),
          ("voIpComprHeader", 8),
          ("voMplsComprHeader", 9),
          ("voiceOverMpls", 6))
    )


_Ip2IfTDMoIpMode_Type.__name__ = "Integer32"
_Ip2IfTDMoIpMode_Object = MibTableColumn
ip2IfTDMoIpMode = _Ip2IfTDMoIpMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 20),
    _Ip2IfTDMoIpMode_Type()
)
ip2IfTDMoIpMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfTDMoIpMode.setStatus("current")


class _Ip2IfTimeElapsed_Type(Integer32):
    """Custom type ip2IfTimeElapsed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 899),
    )


_Ip2IfTimeElapsed_Type.__name__ = "Integer32"
_Ip2IfTimeElapsed_Object = MibTableColumn
ip2IfTimeElapsed = _Ip2IfTimeElapsed_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 21),
    _Ip2IfTimeElapsed_Type()
)
ip2IfTimeElapsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfTimeElapsed.setStatus("current")


class _Ip2IfValidIntervals_Type(Integer32):
    """Custom type ip2IfValidIntervals based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 96),
    )


_Ip2IfValidIntervals_Type.__name__ = "Integer32"
_Ip2IfValidIntervals_Object = MibTableColumn
ip2IfValidIntervals = _Ip2IfValidIntervals_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 22),
    _Ip2IfValidIntervals_Type()
)
ip2IfValidIntervals.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfValidIntervals.setStatus("current")


class _Ip2IfFarEndType_Type(Integer32):
    """Custom type ip2IfFarEndType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("e1", 2),
          ("fxs", 5),
          ("notApplicable", 1),
          ("serialLink", 6),
          ("t1D4", 4),
          ("t1Esf", 3),
          ("t1Unframed", 7))
    )


_Ip2IfFarEndType_Type.__name__ = "Integer32"
_Ip2IfFarEndType_Object = MibTableColumn
ip2IfFarEndType = _Ip2IfFarEndType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 23),
    _Ip2IfFarEndType_Type()
)
ip2IfFarEndType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfFarEndType.setStatus("current")


class _Ip2IfRdnState_Type(Integer32):
    """Custom type ip2IfRdnState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 2),
          ("notApplicable", 1),
          ("primary", 3),
          ("secondary", 4))
    )


_Ip2IfRdnState_Type.__name__ = "Integer32"
_Ip2IfRdnState_Object = MibTableColumn
ip2IfRdnState = _Ip2IfRdnState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 24),
    _Ip2IfRdnState_Type()
)
ip2IfRdnState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfRdnState.setStatus("current")
_Ip2IfSourceAddr_Type = IpAddress
_Ip2IfSourceAddr_Object = MibTableColumn
ip2IfSourceAddr = _Ip2IfSourceAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 25),
    _Ip2IfSourceAddr_Type()
)
ip2IfSourceAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfSourceAddr.setStatus("current")
_Ip2IfBandWidth_Type = Integer32
_Ip2IfBandWidth_Object = MibTableColumn
ip2IfBandWidth = _Ip2IfBandWidth_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 26),
    _Ip2IfBandWidth_Type()
)
ip2IfBandWidth.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfBandWidth.setStatus("current")
_Ip2IfMeasuredSilence_Type = Integer32
_Ip2IfMeasuredSilence_Object = MibTableColumn
ip2IfMeasuredSilence = _Ip2IfMeasuredSilence_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 27),
    _Ip2IfMeasuredSilence_Type()
)
ip2IfMeasuredSilence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfMeasuredSilence.setStatus("current")


class _Ip2IfPayloadType_Type(Integer32):
    """Custom type ip2IfPayloadType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("data", 2),
          ("notApplicable", 1),
          ("voice", 3),
          ("voiceAndCas", 4))
    )


_Ip2IfPayloadType_Type.__name__ = "Integer32"
_Ip2IfPayloadType_Object = MibTableColumn
ip2IfPayloadType = _Ip2IfPayloadType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 28),
    _Ip2IfPayloadType_Type()
)
ip2IfPayloadType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfPayloadType.setStatus("current")


class _Ip2IfProtocolVersion_Type(Integer32):
    """Custom type ip2IfProtocolVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("v1", 2),
          ("v2", 3))
    )


_Ip2IfProtocolVersion_Type.__name__ = "Integer32"
_Ip2IfProtocolVersion_Object = MibTableColumn
ip2IfProtocolVersion = _Ip2IfProtocolVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 29),
    _Ip2IfProtocolVersion_Type()
)
ip2IfProtocolVersion.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfProtocolVersion.setStatus("current")
_Ip2IfTdmBackUpNextHop_Type = IpAddress
_Ip2IfTdmBackUpNextHop_Object = MibTableColumn
ip2IfTdmBackUpNextHop = _Ip2IfTdmBackUpNextHop_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 30),
    _Ip2IfTdmBackUpNextHop_Type()
)
ip2IfTdmBackUpNextHop.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfTdmBackUpNextHop.setStatus("current")


class _Ip2IfOosTxEnable_Type(Integer32):
    """Custom type ip2IfOosTxEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_Ip2IfOosTxEnable_Type.__name__ = "Integer32"
_Ip2IfOosTxEnable_Object = MibTableColumn
ip2IfOosTxEnable = _Ip2IfOosTxEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 31),
    _Ip2IfOosTxEnable_Type()
)
ip2IfOosTxEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfOosTxEnable.setStatus("current")
_Ip2IfConnCheckPktFrequency_Type = Integer32
_Ip2IfConnCheckPktFrequency_Object = MibTableColumn
ip2IfConnCheckPktFrequency = _Ip2IfConnCheckPktFrequency_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 32),
    _Ip2IfConnCheckPktFrequency_Type()
)
ip2IfConnCheckPktFrequency.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfConnCheckPktFrequency.setStatus("current")
_Ip2IfConnPktTimeOutCycles_Type = Integer32
_Ip2IfConnPktTimeOutCycles_Object = MibTableColumn
ip2IfConnPktTimeOutCycles = _Ip2IfConnPktTimeOutCycles_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 33),
    _Ip2IfConnPktTimeOutCycles_Type()
)
ip2IfConnPktTimeOutCycles.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfConnPktTimeOutCycles.setStatus("current")


class _Ip2IfMfRelay_Type(Integer32):
    """Custom type ip2IfMfRelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_Ip2IfMfRelay_Type.__name__ = "Integer32"
_Ip2IfMfRelay_Object = MibTableColumn
ip2IfMfRelay = _Ip2IfMfRelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 34),
    _Ip2IfMfRelay_Type()
)
ip2IfMfRelay.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfMfRelay.setStatus("current")
_Ip2IfTxGain_Type = Integer32
_Ip2IfTxGain_Object = MibTableColumn
ip2IfTxGain = _Ip2IfTxGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 35),
    _Ip2IfTxGain_Type()
)
ip2IfTxGain.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfTxGain.setStatus("current")


class _Ip2IfSuperTandem_Type(Integer32):
    """Custom type ip2IfSuperTandem based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_Ip2IfSuperTandem_Type.__name__ = "Integer32"
_Ip2IfSuperTandem_Object = MibTableColumn
ip2IfSuperTandem = _Ip2IfSuperTandem_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 36),
    _Ip2IfSuperTandem_Type()
)
ip2IfSuperTandem.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfSuperTandem.setStatus("current")
_Ip2IfSrcPort_Type = Integer32
_Ip2IfSrcPort_Object = MibTableColumn
ip2IfSrcPort = _Ip2IfSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 37),
    _Ip2IfSrcPort_Type()
)
ip2IfSrcPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfSrcPort.setStatus("current")


class _Ip2IfModemCalls_Type(Integer32):
    """Custom type ip2IfModemCalls based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("relay", 4))
    )


_Ip2IfModemCalls_Type.__name__ = "Integer32"
_Ip2IfModemCalls_Object = MibTableColumn
ip2IfModemCalls = _Ip2IfModemCalls_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 38),
    _Ip2IfModemCalls_Type()
)
ip2IfModemCalls.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfModemCalls.setStatus("current")
_Ip2IfMinPulseWidth_Type = Integer32
_Ip2IfMinPulseWidth_Object = MibTableColumn
ip2IfMinPulseWidth = _Ip2IfMinPulseWidth_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 39),
    _Ip2IfMinPulseWidth_Type()
)
ip2IfMinPulseWidth.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfMinPulseWidth.setStatus("current")
_Ip2IfMinPowerLevel_Type = Integer32
_Ip2IfMinPowerLevel_Object = MibTableColumn
ip2IfMinPowerLevel = _Ip2IfMinPowerLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 40),
    _Ip2IfMinPowerLevel_Type()
)
ip2IfMinPowerLevel.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfMinPowerLevel.setStatus("current")


class _Ip2IfEchoCanceler_Type(Integer32):
    """Custom type ip2IfEchoCanceler based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_Ip2IfEchoCanceler_Type.__name__ = "Integer32"
_Ip2IfEchoCanceler_Object = MibTableColumn
ip2IfEchoCanceler = _Ip2IfEchoCanceler_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 41),
    _Ip2IfEchoCanceler_Type()
)
ip2IfEchoCanceler.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfEchoCanceler.setStatus("current")


class _Ip2IfCodingLaw_Type(Integer32):
    """Custom type ip2IfCodingLaw based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("aLAW", 1),
          ("uLAW", 2))
    )


_Ip2IfCodingLaw_Type.__name__ = "Integer32"
_Ip2IfCodingLaw_Object = MibTableColumn
ip2IfCodingLaw = _Ip2IfCodingLaw_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 42),
    _Ip2IfCodingLaw_Type()
)
ip2IfCodingLaw.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfCodingLaw.setStatus("current")


class _Ip2IfCustomToneDetect_Type(Integer32):
    """Custom type ip2IfCustomToneDetect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_Ip2IfCustomToneDetect_Type.__name__ = "Integer32"
_Ip2IfCustomToneDetect_Object = MibTableColumn
ip2IfCustomToneDetect = _Ip2IfCustomToneDetect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 43),
    _Ip2IfCustomToneDetect_Type()
)
ip2IfCustomToneDetect.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfCustomToneDetect.setStatus("current")
_Ip2IfCallerIdDelay_Type = Integer32
_Ip2IfCallerIdDelay_Object = MibTableColumn
ip2IfCallerIdDelay = _Ip2IfCallerIdDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 44),
    _Ip2IfCallerIdDelay_Type()
)
ip2IfCallerIdDelay.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfCallerIdDelay.setStatus("current")


class _Ip2IfConnectivityMode_Type(Integer32):
    """Custom type ip2IfConnectivityMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("oam", 3),
          ("ping", 2))
    )


_Ip2IfConnectivityMode_Type.__name__ = "Integer32"
_Ip2IfConnectivityMode_Object = MibTableColumn
ip2IfConnectivityMode = _Ip2IfConnectivityMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 45),
    _Ip2IfConnectivityMode_Type()
)
ip2IfConnectivityMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfConnectivityMode.setStatus("current")


class _Ip2IfClockSourceEnable_Type(Integer32):
    """Custom type ip2IfClockSourceEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_Ip2IfClockSourceEnable_Type.__name__ = "Integer32"
_Ip2IfClockSourceEnable_Object = MibTableColumn
ip2IfClockSourceEnable = _Ip2IfClockSourceEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 46),
    _Ip2IfClockSourceEnable_Type()
)
ip2IfClockSourceEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfClockSourceEnable.setStatus("current")


class _Ip2IfNetworkType_Type(Integer32):
    """Custom type ip2IfNetworkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("ip", 2),
          ("ipComprHeader", 5),
          ("mac", 4),
          ("mplsComprHeader", 6),
          ("mplsEth", 3),
          ("notApplicable", 1),
          ("udp", 7))
    )


_Ip2IfNetworkType_Type.__name__ = "Integer32"
_Ip2IfNetworkType_Object = MibTableColumn
ip2IfNetworkType = _Ip2IfNetworkType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 47),
    _Ip2IfNetworkType_Type()
)
ip2IfNetworkType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfNetworkType.setStatus("current")


class _Ip2IfMplsRxLabelEnable_Type(Integer32):
    """Custom type ip2IfMplsRxLabelEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_Ip2IfMplsRxLabelEnable_Type.__name__ = "Integer32"
_Ip2IfMplsRxLabelEnable_Object = MibTableColumn
ip2IfMplsRxLabelEnable = _Ip2IfMplsRxLabelEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 48),
    _Ip2IfMplsRxLabelEnable_Type()
)
ip2IfMplsRxLabelEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfMplsRxLabelEnable.setStatus("current")
_Ip2IfMplsRxLabel_Type = Integer32
_Ip2IfMplsRxLabel_Object = MibTableColumn
ip2IfMplsRxLabel = _Ip2IfMplsRxLabel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 49),
    _Ip2IfMplsRxLabel_Type()
)
ip2IfMplsRxLabel.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfMplsRxLabel.setStatus("current")


class _Ip2IfMplsTxLabelEnable_Type(Integer32):
    """Custom type ip2IfMplsTxLabelEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_Ip2IfMplsTxLabelEnable_Type.__name__ = "Integer32"
_Ip2IfMplsTxLabelEnable_Object = MibTableColumn
ip2IfMplsTxLabelEnable = _Ip2IfMplsTxLabelEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 50),
    _Ip2IfMplsTxLabelEnable_Type()
)
ip2IfMplsTxLabelEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfMplsTxLabelEnable.setStatus("current")
_Ip2IfMplsTxLabel_Type = Integer32
_Ip2IfMplsTxLabel_Object = MibTableColumn
ip2IfMplsTxLabel = _Ip2IfMplsTxLabel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 51),
    _Ip2IfMplsTxLabel_Type()
)
ip2IfMplsTxLabel.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfMplsTxLabel.setStatus("current")


class _Ip2IfMplsTxExpBits_Type(Integer32):
    """Custom type ip2IfMplsTxExpBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_Ip2IfMplsTxExpBits_Type.__name__ = "Integer32"
_Ip2IfMplsTxExpBits_Object = MibTableColumn
ip2IfMplsTxExpBits = _Ip2IfMplsTxExpBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 52),
    _Ip2IfMplsTxExpBits_Type()
)
ip2IfMplsTxExpBits.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfMplsTxExpBits.setStatus("current")


class _Ip2IfMfcSpoofing_Type(Integer32):
    """Custom type ip2IfMfcSpoofing based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_Ip2IfMfcSpoofing_Type.__name__ = "Integer32"
_Ip2IfMfcSpoofing_Object = MibTableColumn
ip2IfMfcSpoofing = _Ip2IfMfcSpoofing_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 53),
    _Ip2IfMfcSpoofing_Type()
)
ip2IfMfcSpoofing.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfMfcSpoofing.setStatus("current")
_Ip2IfToneAckInterval_Type = Integer32
_Ip2IfToneAckInterval_Object = MibTableColumn
ip2IfToneAckInterval = _Ip2IfToneAckInterval_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 54),
    _Ip2IfToneAckInterval_Type()
)
ip2IfToneAckInterval.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfToneAckInterval.setStatus("current")


class _Ip2IfNextHopType_Type(Integer32):
    """Custom type ip2IfNextHopType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ipAddress", 2),
          ("macAddress", 3),
          ("notApplicable", 1))
    )


_Ip2IfNextHopType_Type.__name__ = "Integer32"
_Ip2IfNextHopType_Object = MibTableColumn
ip2IfNextHopType = _Ip2IfNextHopType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 55),
    _Ip2IfNextHopType_Type()
)
ip2IfNextHopType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfNextHopType.setStatus("current")


class _Ip2IfNoiseLevelForVAD_Type(Integer32):
    """Custom type ip2IfNoiseLevelForVAD based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("high", 3),
          ("low", 2),
          ("off", 4))
    )


_Ip2IfNoiseLevelForVAD_Type.__name__ = "Integer32"
_Ip2IfNoiseLevelForVAD_Object = MibTableColumn
ip2IfNoiseLevelForVAD = _Ip2IfNoiseLevelForVAD_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 56),
    _Ip2IfNoiseLevelForVAD_Type()
)
ip2IfNoiseLevelForVAD.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfNoiseLevelForVAD.setStatus("current")


class _Ip2IfClockPreferences_Type(Integer32):
    """Custom type ip2IfClockPreferences based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("accurateness", 2),
          ("constantDelay", 3))
    )


_Ip2IfClockPreferences_Type.__name__ = "Integer32"
_Ip2IfClockPreferences_Object = MibTableColumn
ip2IfClockPreferences = _Ip2IfClockPreferences_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 57),
    _Ip2IfClockPreferences_Type()
)
ip2IfClockPreferences.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfClockPreferences.setStatus("current")


class _Ip2IfConnectionMode_Type(Integer32):
    """Custom type ip2IfConnectionMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("tdmOIpCe", 2),
          ("tdmOIpCv", 3))
    )


_Ip2IfConnectionMode_Type.__name__ = "Integer32"
_Ip2IfConnectionMode_Object = MibTableColumn
ip2IfConnectionMode = _Ip2IfConnectionMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 58),
    _Ip2IfConnectionMode_Type()
)
ip2IfConnectionMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfConnectionMode.setStatus("current")


class _Ip2IfRingBack_Type(Integer32):
    """Custom type ip2IfRingBack based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_Ip2IfRingBack_Type.__name__ = "Integer32"
_Ip2IfRingBack_Object = MibTableColumn
ip2IfRingBack = _Ip2IfRingBack_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 59),
    _Ip2IfRingBack_Type()
)
ip2IfRingBack.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfRingBack.setStatus("current")


class _Ip2IfReversePolarity_Type(Integer32):
    """Custom type ip2IfReversePolarity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_Ip2IfReversePolarity_Type.__name__ = "Integer32"
_Ip2IfReversePolarity_Object = MibTableColumn
ip2IfReversePolarity = _Ip2IfReversePolarity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 60),
    _Ip2IfReversePolarity_Type()
)
ip2IfReversePolarity.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfReversePolarity.setStatus("current")


class _Ip2IfPulseMeter_Type(Integer32):
    """Custom type ip2IfPulseMeter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_Ip2IfPulseMeter_Type.__name__ = "Integer32"
_Ip2IfPulseMeter_Object = MibTableColumn
ip2IfPulseMeter = _Ip2IfPulseMeter_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 61),
    _Ip2IfPulseMeter_Type()
)
ip2IfPulseMeter.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfPulseMeter.setStatus("current")


class _Ip2IfPulseMeterFreq_Type(Integer32):
    """Custom type ip2IfPulseMeterFreq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("rate12Khz", 2),
          ("rate16Khz", 3))
    )


_Ip2IfPulseMeterFreq_Type.__name__ = "Integer32"
_Ip2IfPulseMeterFreq_Object = MibTableColumn
ip2IfPulseMeterFreq = _Ip2IfPulseMeterFreq_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 62),
    _Ip2IfPulseMeterFreq_Type()
)
ip2IfPulseMeterFreq.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfPulseMeterFreq.setStatus("current")
_Ip2IfPulseMeterPeriod_Type = Integer32
_Ip2IfPulseMeterPeriod_Object = MibTableColumn
ip2IfPulseMeterPeriod = _Ip2IfPulseMeterPeriod_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 63),
    _Ip2IfPulseMeterPeriod_Type()
)
ip2IfPulseMeterPeriod.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfPulseMeterPeriod.setStatus("current")


class _Ip2IfOnHookDetect_Type(Integer32):
    """Custom type ip2IfOnHookDetect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_Ip2IfOnHookDetect_Type.__name__ = "Integer32"
_Ip2IfOnHookDetect_Object = MibTableColumn
ip2IfOnHookDetect = _Ip2IfOnHookDetect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 64),
    _Ip2IfOnHookDetect_Type()
)
ip2IfOnHookDetect.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfOnHookDetect.setStatus("current")


class _Ip2IfComfortNoiseGen_Type(Integer32):
    """Custom type ip2IfComfortNoiseGen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_Ip2IfComfortNoiseGen_Type.__name__ = "Integer32"
_Ip2IfComfortNoiseGen_Object = MibTableColumn
ip2IfComfortNoiseGen = _Ip2IfComfortNoiseGen_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 65),
    _Ip2IfComfortNoiseGen_Type()
)
ip2IfComfortNoiseGen.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfComfortNoiseGen.setStatus("current")
_Ip2IfExitChannel_Type = Integer32
_Ip2IfExitChannel_Object = MibTableColumn
ip2IfExitChannel = _Ip2IfExitChannel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 66),
    _Ip2IfExitChannel_Type()
)
ip2IfExitChannel.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfExitChannel.setStatus("current")
_Ip2IfMaxVBDModemCalls_Type = Integer32
_Ip2IfMaxVBDModemCalls_Object = MibTableColumn
ip2IfMaxVBDModemCalls = _Ip2IfMaxVBDModemCalls_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 67),
    _Ip2IfMaxVBDModemCalls_Type()
)
ip2IfMaxVBDModemCalls.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfMaxVBDModemCalls.setStatus("current")
_Ip2IfMaxRelayModemCalls_Type = Integer32
_Ip2IfMaxRelayModemCalls_Object = MibTableColumn
ip2IfMaxRelayModemCalls = _Ip2IfMaxRelayModemCalls_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 68),
    _Ip2IfMaxRelayModemCalls_Type()
)
ip2IfMaxRelayModemCalls.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfMaxRelayModemCalls.setStatus("current")


class _Ip2IfCustomToneFrequency_Type(Integer32):
    """Custom type ip2IfCustomToneFrequency based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("f1780Hz", 2),
          ("f1780Plus2000Hz", 4),
          ("f2000Hz", 3),
          ("notApplicable", 1))
    )


_Ip2IfCustomToneFrequency_Type.__name__ = "Integer32"
_Ip2IfCustomToneFrequency_Object = MibTableColumn
ip2IfCustomToneFrequency = _Ip2IfCustomToneFrequency_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 69),
    _Ip2IfCustomToneFrequency_Type()
)
ip2IfCustomToneFrequency.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfCustomToneFrequency.setStatus("current")


class _Ip2IfVadMethod_Type(Integer32):
    """Custom type ip2IfVadMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("internalITUT", 3),
          ("proprietary", 2))
    )


_Ip2IfVadMethod_Type.__name__ = "Integer32"
_Ip2IfVadMethod_Object = MibTableColumn
ip2IfVadMethod = _Ip2IfVadMethod_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 70),
    _Ip2IfVadMethod_Type()
)
ip2IfVadMethod.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfVadMethod.setStatus("current")
_Ip2IfRxGain_Type = Integer32
_Ip2IfRxGain_Object = MibTableColumn
ip2IfRxGain = _Ip2IfRxGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 71),
    _Ip2IfRxGain_Type()
)
ip2IfRxGain.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfRxGain.setStatus("current")


class _Ip2IfCallerIDType_Type(Integer32):
    """Custom type ip2IfCallerIDType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bellcoreType1", 2),
          ("v23", 3))
    )


_Ip2IfCallerIDType_Type.__name__ = "Integer32"
_Ip2IfCallerIDType_Object = MibTableColumn
ip2IfCallerIDType = _Ip2IfCallerIDType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 72),
    _Ip2IfCallerIDType_Type()
)
ip2IfCallerIDType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfCallerIDType.setStatus("current")


class _Ip2IfPeerAddrType_Type(Integer32):
    """Custom type ip2IfPeerAddrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ipAddress", 2),
          ("macAddress", 3),
          ("notApplicable", 1))
    )


_Ip2IfPeerAddrType_Type.__name__ = "Integer32"
_Ip2IfPeerAddrType_Object = MibTableColumn
ip2IfPeerAddrType = _Ip2IfPeerAddrType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 73),
    _Ip2IfPeerAddrType_Type()
)
ip2IfPeerAddrType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfPeerAddrType.setStatus("current")


class _Ip2IfVbdRate_Type(Integer32):
    """Custom type ip2IfVbdRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("r24KbpsG726", 5),
          ("r32KbpsG726", 4),
          ("r64KbpsIn10msecIntervalsG711", 3),
          ("r64KbpsIn5msecIntervalsG711", 2))
    )


_Ip2IfVbdRate_Type.__name__ = "Integer32"
_Ip2IfVbdRate_Object = MibTableColumn
ip2IfVbdRate = _Ip2IfVbdRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 74),
    _Ip2IfVbdRate_Type()
)
ip2IfVbdRate.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfVbdRate.setStatus("current")


class _Ip2IfDtmfDetection_Type(Integer32):
    """Custom type ip2IfDtmfDetection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_Ip2IfDtmfDetection_Type.__name__ = "Integer32"
_Ip2IfDtmfDetection_Object = MibTableColumn
ip2IfDtmfDetection = _Ip2IfDtmfDetection_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 75),
    _Ip2IfDtmfDetection_Type()
)
ip2IfDtmfDetection.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfDtmfDetection.setStatus("current")
_Ip2IfNlpCutoffLevel_Type = Unsigned32
_Ip2IfNlpCutoffLevel_Object = MibTableColumn
ip2IfNlpCutoffLevel = _Ip2IfNlpCutoffLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 76),
    _Ip2IfNlpCutoffLevel_Type()
)
ip2IfNlpCutoffLevel.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfNlpCutoffLevel.setStatus("current")
_Ip2IfDtdErlRatioCutoffQ3_Type = Unsigned32
_Ip2IfDtdErlRatioCutoffQ3_Object = MibTableColumn
ip2IfDtdErlRatioCutoffQ3 = _Ip2IfDtdErlRatioCutoffQ3_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 77),
    _Ip2IfDtdErlRatioCutoffQ3_Type()
)
ip2IfDtdErlRatioCutoffQ3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfDtdErlRatioCutoffQ3.setStatus("current")


class _Ip2IfCASRedundancy_Type(Integer32):
    """Custom type ip2IfCASRedundancy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_Ip2IfCASRedundancy_Type.__name__ = "Integer32"
_Ip2IfCASRedundancy_Object = MibTableColumn
ip2IfCASRedundancy = _Ip2IfCASRedundancy_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 78),
    _Ip2IfCASRedundancy_Type()
)
ip2IfCASRedundancy.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfCASRedundancy.setStatus("current")


class _Ip2IfBundleSensitivity_Type(Integer32):
    """Custom type ip2IfBundleSensitivity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dataSensitive", 3),
          ("delaySensitive", 2))
    )


_Ip2IfBundleSensitivity_Type.__name__ = "Integer32"
_Ip2IfBundleSensitivity_Object = MibTableColumn
ip2IfBundleSensitivity = _Ip2IfBundleSensitivity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 79),
    _Ip2IfBundleSensitivity_Type()
)
ip2IfBundleSensitivity.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfBundleSensitivity.setStatus("current")


class _Ip2IfOAMBundleIdent_Type(Integer32):
    """Custom type ip2IfOAMBundleIdent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bundleNumber", 2),
          ("vccvCtrlWord", 3))
    )


_Ip2IfOAMBundleIdent_Type.__name__ = "Integer32"
_Ip2IfOAMBundleIdent_Object = MibTableColumn
ip2IfOAMBundleIdent = _Ip2IfOAMBundleIdent_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 80),
    _Ip2IfOAMBundleIdent_Type()
)
ip2IfOAMBundleIdent.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfOAMBundleIdent.setStatus("current")
_Ip2IfMaxTxQueue_Type = Unsigned32
_Ip2IfMaxTxQueue_Object = MibTableColumn
ip2IfMaxTxQueue = _Ip2IfMaxTxQueue_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 81),
    _Ip2IfMaxTxQueue_Type()
)
ip2IfMaxTxQueue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfMaxTxQueue.setStatus("current")
_Ip2IfMaxGprsTxQueue_Type = Unsigned32
_Ip2IfMaxGprsTxQueue_Object = MibTableColumn
ip2IfMaxGprsTxQueue = _Ip2IfMaxGprsTxQueue_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 82),
    _Ip2IfMaxGprsTxQueue_Type()
)
ip2IfMaxGprsTxQueue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfMaxGprsTxQueue.setStatus("current")


class _Ip2IfV23HD_Type(Integer32):
    """Custom type ip2IfV23HD based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_Ip2IfV23HD_Type.__name__ = "Integer32"
_Ip2IfV23HD_Object = MibTableColumn
ip2IfV23HD = _Ip2IfV23HD_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 83),
    _Ip2IfV23HD_Type()
)
ip2IfV23HD.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfV23HD.setStatus("current")
_Ip2IfModemProtocolMode_Type = OctetString
_Ip2IfModemProtocolMode_Object = MibTableColumn
ip2IfModemProtocolMode = _Ip2IfModemProtocolMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 84),
    _Ip2IfModemProtocolMode_Type()
)
ip2IfModemProtocolMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfModemProtocolMode.setStatus("current")
_Ip2IfCdisCngDetectionTime_Type = Unsigned32
_Ip2IfCdisCngDetectionTime_Object = MibTableColumn
ip2IfCdisCngDetectionTime = _Ip2IfCdisCngDetectionTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 85),
    _Ip2IfCdisCngDetectionTime_Type()
)
ip2IfCdisCngDetectionTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfCdisCngDetectionTime.setStatus("current")
_Ip2IfSuperTandemBitMask_Type = OctetString
_Ip2IfSuperTandemBitMask_Object = MibTableColumn
ip2IfSuperTandemBitMask = _Ip2IfSuperTandemBitMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 86),
    _Ip2IfSuperTandemBitMask_Type()
)
ip2IfSuperTandemBitMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfSuperTandemBitMask.setStatus("current")
_Ip2IfVbdSwitchbackTime_Type = Unsigned32
_Ip2IfVbdSwitchbackTime_Object = MibTableColumn
ip2IfVbdSwitchbackTime = _Ip2IfVbdSwitchbackTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 87),
    _Ip2IfVbdSwitchbackTime_Type()
)
ip2IfVbdSwitchbackTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfVbdSwitchbackTime.setStatus("current")
_Ip2IfCallerIdTxGain_Type = Integer32
_Ip2IfCallerIdTxGain_Object = MibTableColumn
ip2IfCallerIdTxGain = _Ip2IfCallerIdTxGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 88),
    _Ip2IfCallerIdTxGain_Type()
)
ip2IfCallerIdTxGain.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfCallerIdTxGain.setStatus("current")
_Ip2IfCallerIdRxGain_Type = Integer32
_Ip2IfCallerIdRxGain_Object = MibTableColumn
ip2IfCallerIdRxGain = _Ip2IfCallerIdRxGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 89),
    _Ip2IfCallerIdRxGain_Type()
)
ip2IfCallerIdRxGain.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfCallerIdRxGain.setStatus("current")


class _Ip2IfUdpMuxMethod_Type(Integer32):
    """Custom type ip2IfUdpMuxMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("destPort", 3),
          ("srcPort", 2))
    )


_Ip2IfUdpMuxMethod_Type.__name__ = "Integer32"
_Ip2IfUdpMuxMethod_Object = MibTableColumn
ip2IfUdpMuxMethod = _Ip2IfUdpMuxMethod_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 90),
    _Ip2IfUdpMuxMethod_Type()
)
ip2IfUdpMuxMethod.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfUdpMuxMethod.setStatus("current")


class _Ip2IfCallerIdDetection_Type(Integer32):
    """Custom type ip2IfCallerIdDetection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_Ip2IfCallerIdDetection_Type.__name__ = "Integer32"
_Ip2IfCallerIdDetection_Object = MibTableColumn
ip2IfCallerIdDetection = _Ip2IfCallerIdDetection_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 91),
    _Ip2IfCallerIdDetection_Type()
)
ip2IfCallerIdDetection.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfCallerIdDetection.setStatus("current")


class _Ip2IfWap_Type(Integer32):
    """Custom type ip2IfWap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_Ip2IfWap_Type.__name__ = "Integer32"
_Ip2IfWap_Object = MibTableColumn
ip2IfWap = _Ip2IfWap_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 1, 1, 92),
    _Ip2IfWap_Type()
)
ip2IfWap.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ip2IfWap.setStatus("current")
_Ip2IfTDMFrameBytes_Type = Integer32
_Ip2IfTDMFrameBytes_Object = MibScalar
ip2IfTDMFrameBytes = _Ip2IfTDMFrameBytes_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 2),
    _Ip2IfTDMFrameBytes_Type()
)
ip2IfTDMFrameBytes.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ip2IfTDMFrameBytes.setStatus("current")
_Ip2IfTosValue_Type = Integer32
_Ip2IfTosValue_Object = MibScalar
ip2IfTosValue = _Ip2IfTosValue_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 3),
    _Ip2IfTosValue_Type()
)
ip2IfTosValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ip2IfTosValue.setStatus("current")


class _Ip2IfVlanTagging_Type(Integer32):
    """Custom type ip2IfVlanTagging based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Ip2IfVlanTagging_Type.__name__ = "Integer32"
_Ip2IfVlanTagging_Object = MibScalar
ip2IfVlanTagging = _Ip2IfVlanTagging_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 4),
    _Ip2IfVlanTagging_Type()
)
ip2IfVlanTagging.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ip2IfVlanTagging.setStatus("current")
_Ip2IfVlanID_Type = Integer32
_Ip2IfVlanID_Object = MibScalar
ip2IfVlanID = _Ip2IfVlanID_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 5),
    _Ip2IfVlanID_Type()
)
ip2IfVlanID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ip2IfVlanID.setStatus("current")
_Ip2IfVlanPriority_Type = Integer32
_Ip2IfVlanPriority_Object = MibScalar
ip2IfVlanPriority = _Ip2IfVlanPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 6),
    _Ip2IfVlanPriority_Type()
)
ip2IfVlanPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ip2IfVlanPriority.setStatus("current")
_Ip2IfStatTable_Object = MibTable
ip2IfStatTable = _Ip2IfStatTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7)
)
if mibBuilder.loadTexts:
    ip2IfStatTable.setStatus("current")
_Ip2IfStatEntry_Object = MibTableRow
ip2IfStatEntry = _Ip2IfStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1)
)
ip2IfStatEntry.setIndexNames(
    (0, "RAD-MIB", "ip2IfStatChIndex"),
)
if mibBuilder.loadTexts:
    ip2IfStatEntry.setStatus("current")
_Ip2IfStatChIndex_Type = Integer32
_Ip2IfStatChIndex_Object = MibTableColumn
ip2IfStatChIndex = _Ip2IfStatChIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 1),
    _Ip2IfStatChIndex_Type()
)
ip2IfStatChIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatChIndex.setStatus("current")
_Ip2IfStatSeqErrors_Type = Integer32
_Ip2IfStatSeqErrors_Object = MibTableColumn
ip2IfStatSeqErrors = _Ip2IfStatSeqErrors_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 2),
    _Ip2IfStatSeqErrors_Type()
)
ip2IfStatSeqErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatSeqErrors.setStatus("current")
_Ip2IfStatBufUnderflows_Type = Integer32
_Ip2IfStatBufUnderflows_Object = MibTableColumn
ip2IfStatBufUnderflows = _Ip2IfStatBufUnderflows_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 3),
    _Ip2IfStatBufUnderflows_Type()
)
ip2IfStatBufUnderflows.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatBufUnderflows.setStatus("current")
_Ip2IfStatBufOverflows_Type = Integer32
_Ip2IfStatBufOverflows_Object = MibTableColumn
ip2IfStatBufOverflows = _Ip2IfStatBufOverflows_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 4),
    _Ip2IfStatBufOverflows_Type()
)
ip2IfStatBufOverflows.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatBufOverflows.setStatus("current")
_Ip2IfStatTxOnTimeInterval_Type = Counter32
_Ip2IfStatTxOnTimeInterval_Object = MibTableColumn
ip2IfStatTxOnTimeInterval = _Ip2IfStatTxOnTimeInterval_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 5),
    _Ip2IfStatTxOnTimeInterval_Type()
)
ip2IfStatTxOnTimeInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatTxOnTimeInterval.setStatus("current")
_Ip2IfStatTxOnMaxSize_Type = Counter32
_Ip2IfStatTxOnMaxSize_Object = MibTableColumn
ip2IfStatTxOnMaxSize = _Ip2IfStatTxOnMaxSize_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 6),
    _Ip2IfStatTxOnMaxSize_Type()
)
ip2IfStatTxOnMaxSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatTxOnMaxSize.setStatus("current")
_Ip2IfStatRxSignaling_Type = Counter32
_Ip2IfStatRxSignaling_Object = MibTableColumn
ip2IfStatRxSignaling = _Ip2IfStatRxSignaling_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 7),
    _Ip2IfStatRxSignaling_Type()
)
ip2IfStatRxSignaling.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatRxSignaling.setStatus("current")
_Ip2IfStatRxVoice_Type = Counter32
_Ip2IfStatRxVoice_Object = MibTableColumn
ip2IfStatRxVoice = _Ip2IfStatRxVoice_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 8),
    _Ip2IfStatRxVoice_Type()
)
ip2IfStatRxVoice.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatRxVoice.setStatus("current")
_Ip2IfStatRxHdlc_Type = Counter32
_Ip2IfStatRxHdlc_Object = MibTableColumn
ip2IfStatRxHdlc = _Ip2IfStatRxHdlc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 9),
    _Ip2IfStatRxHdlc_Type()
)
ip2IfStatRxHdlc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatRxHdlc.setStatus("current")
_Ip2IfStatTxSignaling_Type = Counter32
_Ip2IfStatTxSignaling_Object = MibTableColumn
ip2IfStatTxSignaling = _Ip2IfStatTxSignaling_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 10),
    _Ip2IfStatTxSignaling_Type()
)
ip2IfStatTxSignaling.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatTxSignaling.setStatus("current")
_Ip2IfStatTxVoice_Type = Counter32
_Ip2IfStatTxVoice_Object = MibTableColumn
ip2IfStatTxVoice = _Ip2IfStatTxVoice_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 11),
    _Ip2IfStatTxVoice_Type()
)
ip2IfStatTxVoice.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatTxVoice.setStatus("current")
_Ip2IfStatTxHdlc_Type = Counter32
_Ip2IfStatTxHdlc_Object = MibTableColumn
ip2IfStatTxHdlc = _Ip2IfStatTxHdlc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 12),
    _Ip2IfStatTxHdlc_Type()
)
ip2IfStatTxHdlc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatTxHdlc.setStatus("current")
_Ip2IfStatRdnFlip_Type = Counter32
_Ip2IfStatRdnFlip_Object = MibTableColumn
ip2IfStatRdnFlip = _Ip2IfStatRdnFlip_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 13),
    _Ip2IfStatRdnFlip_Type()
)
ip2IfStatRdnFlip.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatRdnFlip.setStatus("current")


class _Ip2IfFarEndTdmStatus_Type(Integer32):
    """Custom type ip2IfFarEndTdmStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6),
    )


_Ip2IfFarEndTdmStatus_Type.__name__ = "Integer32"
_Ip2IfFarEndTdmStatus_Object = MibTableColumn
ip2IfFarEndTdmStatus = _Ip2IfFarEndTdmStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 14),
    _Ip2IfFarEndTdmStatus_Type()
)
ip2IfFarEndTdmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfFarEndTdmStatus.setStatus("current")
_Ip2IfStatPsnTxFrames_Type = Counter32
_Ip2IfStatPsnTxFrames_Object = MibTableColumn
ip2IfStatPsnTxFrames = _Ip2IfStatPsnTxFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 15),
    _Ip2IfStatPsnTxFrames_Type()
)
ip2IfStatPsnTxFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatPsnTxFrames.setStatus("current")
_Ip2IfStatPsnRxFrames_Type = Counter32
_Ip2IfStatPsnRxFrames_Object = MibTableColumn
ip2IfStatPsnRxFrames = _Ip2IfStatPsnRxFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 16),
    _Ip2IfStatPsnRxFrames_Type()
)
ip2IfStatPsnRxFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatPsnRxFrames.setStatus("current")
_Ip2IfStatMinJittBufLevel_Type = Unsigned32
_Ip2IfStatMinJittBufLevel_Object = MibTableColumn
ip2IfStatMinJittBufLevel = _Ip2IfStatMinJittBufLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 17),
    _Ip2IfStatMinJittBufLevel_Type()
)
ip2IfStatMinJittBufLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatMinJittBufLevel.setStatus("current")
_Ip2IfStatMaxJittBufLevel_Type = Unsigned32
_Ip2IfStatMaxJittBufLevel_Object = MibTableColumn
ip2IfStatMaxJittBufLevel = _Ip2IfStatMaxJittBufLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 18),
    _Ip2IfStatMaxJittBufLevel_Type()
)
ip2IfStatMaxJittBufLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatMaxJittBufLevel.setStatus("current")
_Ip2IfStatRecommendedJittBufSize_Type = Unsigned32
_Ip2IfStatRecommendedJittBufSize_Object = MibTableColumn
ip2IfStatRecommendedJittBufSize = _Ip2IfStatRecommendedJittBufSize_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 19),
    _Ip2IfStatRecommendedJittBufSize_Type()
)
ip2IfStatRecommendedJittBufSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatRecommendedJittBufSize.setStatus("current")
_Ip2IfStatPsnSeqErrors_Type = Counter32
_Ip2IfStatPsnSeqErrors_Object = MibTableColumn
ip2IfStatPsnSeqErrors = _Ip2IfStatPsnSeqErrors_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 20),
    _Ip2IfStatPsnSeqErrors_Type()
)
ip2IfStatPsnSeqErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatPsnSeqErrors.setStatus("current")
_Ip2IfStatPsnReorderFrames_Type = Counter32
_Ip2IfStatPsnReorderFrames_Object = MibTableColumn
ip2IfStatPsnReorderFrames = _Ip2IfStatPsnReorderFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 21),
    _Ip2IfStatPsnReorderFrames_Type()
)
ip2IfStatPsnReorderFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatPsnReorderFrames.setStatus("current")
_Ip2IfStatMinRoundTripDelay_Type = Unsigned32
_Ip2IfStatMinRoundTripDelay_Object = MibTableColumn
ip2IfStatMinRoundTripDelay = _Ip2IfStatMinRoundTripDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 22),
    _Ip2IfStatMinRoundTripDelay_Type()
)
ip2IfStatMinRoundTripDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatMinRoundTripDelay.setStatus("current")
_Ip2IfStatMaxRoundTripDelay_Type = Unsigned32
_Ip2IfStatMaxRoundTripDelay_Object = MibTableColumn
ip2IfStatMaxRoundTripDelay = _Ip2IfStatMaxRoundTripDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 23),
    _Ip2IfStatMaxRoundTripDelay_Type()
)
ip2IfStatMaxRoundTripDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatMaxRoundTripDelay.setStatus("current")
_Ip2IfStatAvrRoundTripDelay_Type = Unsigned32
_Ip2IfStatAvrRoundTripDelay_Object = MibTableColumn
ip2IfStatAvrRoundTripDelay = _Ip2IfStatAvrRoundTripDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 24),
    _Ip2IfStatAvrRoundTripDelay_Type()
)
ip2IfStatAvrRoundTripDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatAvrRoundTripDelay.setStatus("current")
_Ip2IfStatFrameTrackDupDrop_Type = Counter32
_Ip2IfStatFrameTrackDupDrop_Object = MibTableColumn
ip2IfStatFrameTrackDupDrop = _Ip2IfStatFrameTrackDupDrop_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 25),
    _Ip2IfStatFrameTrackDupDrop_Type()
)
ip2IfStatFrameTrackDupDrop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatFrameTrackDupDrop.setStatus("current")
_Ip2IfStatFrameTrackMissing_Type = Counter32
_Ip2IfStatFrameTrackMissing_Object = MibTableColumn
ip2IfStatFrameTrackMissing = _Ip2IfStatFrameTrackMissing_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 26),
    _Ip2IfStatFrameTrackMissing_Type()
)
ip2IfStatFrameTrackMissing.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatFrameTrackMissing.setStatus("current")
_Ip2IfStatFrameTrackLongSerMiss_Type = Integer32
_Ip2IfStatFrameTrackLongSerMiss_Object = MibTableColumn
ip2IfStatFrameTrackLongSerMiss = _Ip2IfStatFrameTrackLongSerMiss_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 27),
    _Ip2IfStatFrameTrackLongSerMiss_Type()
)
ip2IfStatFrameTrackLongSerMiss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatFrameTrackLongSerMiss.setStatus("current")
_Ip2IfStatTxMeasuredSilence_Type = Integer32
_Ip2IfStatTxMeasuredSilence_Object = MibTableColumn
ip2IfStatTxMeasuredSilence = _Ip2IfStatTxMeasuredSilence_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 28),
    _Ip2IfStatTxMeasuredSilence_Type()
)
ip2IfStatTxMeasuredSilence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatTxMeasuredSilence.setStatus("current")
_Ip2IfStatRxMeasuredSilence_Type = Integer32
_Ip2IfStatRxMeasuredSilence_Object = MibTableColumn
ip2IfStatRxMeasuredSilence = _Ip2IfStatRxMeasuredSilence_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 29),
    _Ip2IfStatRxMeasuredSilence_Type()
)
ip2IfStatRxMeasuredSilence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatRxMeasuredSilence.setStatus("current")
_Ip2IfStatHdlcCrcErr_Type = Counter32
_Ip2IfStatHdlcCrcErr_Object = MibTableColumn
ip2IfStatHdlcCrcErr = _Ip2IfStatHdlcCrcErr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 30),
    _Ip2IfStatHdlcCrcErr_Type()
)
ip2IfStatHdlcCrcErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatHdlcCrcErr.setStatus("current")
_Ip2IfStatHdlcAlignErr_Type = Counter32
_Ip2IfStatHdlcAlignErr_Object = MibTableColumn
ip2IfStatHdlcAlignErr = _Ip2IfStatHdlcAlignErr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 31),
    _Ip2IfStatHdlcAlignErr_Type()
)
ip2IfStatHdlcAlignErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatHdlcAlignErr.setStatus("current")
_Ip2IfStatHdlcOversize_Type = Counter32
_Ip2IfStatHdlcOversize_Object = MibTableColumn
ip2IfStatHdlcOversize = _Ip2IfStatHdlcOversize_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 32),
    _Ip2IfStatHdlcOversize_Type()
)
ip2IfStatHdlcOversize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatHdlcOversize.setStatus("current")
_Ip2IfStatHdlcUndersize_Type = Counter32
_Ip2IfStatHdlcUndersize_Object = MibTableColumn
ip2IfStatHdlcUndersize = _Ip2IfStatHdlcUndersize_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 33),
    _Ip2IfStatHdlcUndersize_Type()
)
ip2IfStatHdlcUndersize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatHdlcUndersize.setStatus("current")
_Ip2IfStatHdlcAbort_Type = Counter32
_Ip2IfStatHdlcAbort_Object = MibTableColumn
ip2IfStatHdlcAbort = _Ip2IfStatHdlcAbort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 34),
    _Ip2IfStatHdlcAbort_Type()
)
ip2IfStatHdlcAbort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatHdlcAbort.setStatus("current")
_Ip2IfStatRxCorrectFrames_Type = Counter32
_Ip2IfStatRxCorrectFrames_Object = MibTableColumn
ip2IfStatRxCorrectFrames = _Ip2IfStatRxCorrectFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 35),
    _Ip2IfStatRxCorrectFrames_Type()
)
ip2IfStatRxCorrectFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatRxCorrectFrames.setStatus("current")
_Ip2IfStatHdlcErroredFrames_Type = Counter32
_Ip2IfStatHdlcErroredFrames_Object = MibTableColumn
ip2IfStatHdlcErroredFrames = _Ip2IfStatHdlcErroredFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 7, 1, 36),
    _Ip2IfStatHdlcErroredFrames_Type()
)
ip2IfStatHdlcErroredFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfStatHdlcErroredFrames.setStatus("current")
_Ip2IfRateLimit_Type = Integer32
_Ip2IfRateLimit_Object = MibScalar
ip2IfRateLimit = _Ip2IfRateLimit_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 8),
    _Ip2IfRateLimit_Type()
)
ip2IfRateLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ip2IfRateLimit.setStatus("current")
_Ip2IfPortTable_Object = MibTable
ip2IfPortTable = _Ip2IfPortTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 9)
)
if mibBuilder.loadTexts:
    ip2IfPortTable.setStatus("current")
_Ip2IfPortEntry_Object = MibTableRow
ip2IfPortEntry = _Ip2IfPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 9, 1)
)
ip2IfPortEntry.setIndexNames(
    (0, "RAD-MIB", "ip2IfPortIndex"),
)
if mibBuilder.loadTexts:
    ip2IfPortEntry.setStatus("current")
_Ip2IfPortIndex_Type = Integer32
_Ip2IfPortIndex_Object = MibTableColumn
ip2IfPortIndex = _Ip2IfPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 9, 1, 1),
    _Ip2IfPortIndex_Type()
)
ip2IfPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfPortIndex.setStatus("current")
_Ip2IfPortUsage_Type = Integer32
_Ip2IfPortUsage_Object = MibTableColumn
ip2IfPortUsage = _Ip2IfPortUsage_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 9, 1, 2),
    _Ip2IfPortUsage_Type()
)
ip2IfPortUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfPortUsage.setStatus("current")


class _Ip2IfPortMask_Type(Integer32):
    """Custom type ip2IfPortMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dontMask", 2),
          ("mask", 3),
          ("notApplicable", 1))
    )


_Ip2IfPortMask_Type.__name__ = "Integer32"
_Ip2IfPortMask_Object = MibTableColumn
ip2IfPortMask = _Ip2IfPortMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 9, 1, 3),
    _Ip2IfPortMask_Type()
)
ip2IfPortMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ip2IfPortMask.setStatus("current")
_Ip2IfPortTotalThroughput_Type = Integer32
_Ip2IfPortTotalThroughput_Object = MibTableColumn
ip2IfPortTotalThroughput = _Ip2IfPortTotalThroughput_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 9, 1, 4),
    _Ip2IfPortTotalThroughput_Type()
)
ip2IfPortTotalThroughput.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfPortTotalThroughput.setStatus("current")
_Ip2IfCurrentStatTable_Object = MibTable
ip2IfCurrentStatTable = _Ip2IfCurrentStatTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 10)
)
if mibBuilder.loadTexts:
    ip2IfCurrentStatTable.setStatus("current")
_Ip2IfCurrentStatEntry_Object = MibTableRow
ip2IfCurrentStatEntry = _Ip2IfCurrentStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 10, 1)
)
ip2IfCurrentStatEntry.setIndexNames(
    (0, "RAD-MIB", "ip2IfChannelIndex"),
)
if mibBuilder.loadTexts:
    ip2IfCurrentStatEntry.setStatus("current")
_Ip2IfCurrentStatSeqErrors_Type = Counter32
_Ip2IfCurrentStatSeqErrors_Object = MibTableColumn
ip2IfCurrentStatSeqErrors = _Ip2IfCurrentStatSeqErrors_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 10, 1, 1),
    _Ip2IfCurrentStatSeqErrors_Type()
)
ip2IfCurrentStatSeqErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfCurrentStatSeqErrors.setStatus("current")
_Ip2IfCurrentStatBufUnderflows_Type = Counter32
_Ip2IfCurrentStatBufUnderflows_Object = MibTableColumn
ip2IfCurrentStatBufUnderflows = _Ip2IfCurrentStatBufUnderflows_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 10, 1, 2),
    _Ip2IfCurrentStatBufUnderflows_Type()
)
ip2IfCurrentStatBufUnderflows.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfCurrentStatBufUnderflows.setStatus("current")
_Ip2IfCurrentStatBufOverflows_Type = Counter32
_Ip2IfCurrentStatBufOverflows_Object = MibTableColumn
ip2IfCurrentStatBufOverflows = _Ip2IfCurrentStatBufOverflows_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 10, 1, 3),
    _Ip2IfCurrentStatBufOverflows_Type()
)
ip2IfCurrentStatBufOverflows.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfCurrentStatBufOverflows.setStatus("current")
_Ip2IfCurrentStatMaxDelayVar_Type = Integer32
_Ip2IfCurrentStatMaxDelayVar_Object = MibTableColumn
ip2IfCurrentStatMaxDelayVar = _Ip2IfCurrentStatMaxDelayVar_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 10, 1, 4),
    _Ip2IfCurrentStatMaxDelayVar_Type()
)
ip2IfCurrentStatMaxDelayVar.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfCurrentStatMaxDelayVar.setStatus("current")
_Ip2IfCurrentStatMinJittBufLevel_Type = Unsigned32
_Ip2IfCurrentStatMinJittBufLevel_Object = MibTableColumn
ip2IfCurrentStatMinJittBufLevel = _Ip2IfCurrentStatMinJittBufLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 10, 1, 5),
    _Ip2IfCurrentStatMinJittBufLevel_Type()
)
ip2IfCurrentStatMinJittBufLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfCurrentStatMinJittBufLevel.setStatus("current")
_Ip2IfCurrentStatMaxJittBufLevel_Type = Unsigned32
_Ip2IfCurrentStatMaxJittBufLevel_Object = MibTableColumn
ip2IfCurrentStatMaxJittBufLevel = _Ip2IfCurrentStatMaxJittBufLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 10, 1, 6),
    _Ip2IfCurrentStatMaxJittBufLevel_Type()
)
ip2IfCurrentStatMaxJittBufLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfCurrentStatMaxJittBufLevel.setStatus("current")
_Ip2IfCurrentStatTxErrFrameSec_Type = Counter32
_Ip2IfCurrentStatTxErrFrameSec_Object = MibTableColumn
ip2IfCurrentStatTxErrFrameSec = _Ip2IfCurrentStatTxErrFrameSec_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 10, 1, 7),
    _Ip2IfCurrentStatTxErrFrameSec_Type()
)
ip2IfCurrentStatTxErrFrameSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfCurrentStatTxErrFrameSec.setStatus("current")
_Ip2IfIntervalStatTable_Object = MibTable
ip2IfIntervalStatTable = _Ip2IfIntervalStatTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 11)
)
if mibBuilder.loadTexts:
    ip2IfIntervalStatTable.setStatus("current")
_Ip2IfIntervalStatEntry_Object = MibTableRow
ip2IfIntervalStatEntry = _Ip2IfIntervalStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 11, 1)
)
ip2IfIntervalStatEntry.setIndexNames(
    (0, "RAD-MIB", "ip2IfChannelIndex"),
    (0, "RAD-MIB", "ip2IfIntervalStatIndex"),
)
if mibBuilder.loadTexts:
    ip2IfIntervalStatEntry.setStatus("current")
_Ip2IfIntervalStatIndex_Type = Integer32
_Ip2IfIntervalStatIndex_Object = MibTableColumn
ip2IfIntervalStatIndex = _Ip2IfIntervalStatIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 11, 1, 1),
    _Ip2IfIntervalStatIndex_Type()
)
ip2IfIntervalStatIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfIntervalStatIndex.setStatus("current")
_Ip2IfIntervalStatSeqErrors_Type = Counter32
_Ip2IfIntervalStatSeqErrors_Object = MibTableColumn
ip2IfIntervalStatSeqErrors = _Ip2IfIntervalStatSeqErrors_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 11, 1, 2),
    _Ip2IfIntervalStatSeqErrors_Type()
)
ip2IfIntervalStatSeqErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfIntervalStatSeqErrors.setStatus("current")
_Ip2IfIntervalStatBufUnderflows_Type = Counter32
_Ip2IfIntervalStatBufUnderflows_Object = MibTableColumn
ip2IfIntervalStatBufUnderflows = _Ip2IfIntervalStatBufUnderflows_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 11, 1, 3),
    _Ip2IfIntervalStatBufUnderflows_Type()
)
ip2IfIntervalStatBufUnderflows.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfIntervalStatBufUnderflows.setStatus("current")
_Ip2IfIntervalStatBufOverflows_Type = Counter32
_Ip2IfIntervalStatBufOverflows_Object = MibTableColumn
ip2IfIntervalStatBufOverflows = _Ip2IfIntervalStatBufOverflows_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 11, 1, 4),
    _Ip2IfIntervalStatBufOverflows_Type()
)
ip2IfIntervalStatBufOverflows.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfIntervalStatBufOverflows.setStatus("current")
_Ip2IfIntervalStatMaxDelayVar_Type = Integer32
_Ip2IfIntervalStatMaxDelayVar_Object = MibTableColumn
ip2IfIntervalStatMaxDelayVar = _Ip2IfIntervalStatMaxDelayVar_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 11, 1, 5),
    _Ip2IfIntervalStatMaxDelayVar_Type()
)
ip2IfIntervalStatMaxDelayVar.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfIntervalStatMaxDelayVar.setStatus("current")
_Ip2IfIntervalStatMinJittBufLevel_Type = Unsigned32
_Ip2IfIntervalStatMinJittBufLevel_Object = MibTableColumn
ip2IfIntervalStatMinJittBufLevel = _Ip2IfIntervalStatMinJittBufLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 11, 1, 6),
    _Ip2IfIntervalStatMinJittBufLevel_Type()
)
ip2IfIntervalStatMinJittBufLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfIntervalStatMinJittBufLevel.setStatus("current")
_Ip2IfIntervalStatMaxJittBufLevel_Type = Unsigned32
_Ip2IfIntervalStatMaxJittBufLevel_Object = MibTableColumn
ip2IfIntervalStatMaxJittBufLevel = _Ip2IfIntervalStatMaxJittBufLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 11, 1, 7),
    _Ip2IfIntervalStatMaxJittBufLevel_Type()
)
ip2IfIntervalStatMaxJittBufLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfIntervalStatMaxJittBufLevel.setStatus("current")
_Ip2IfIntervalStatTxErrFrameSec_Type = Counter32
_Ip2IfIntervalStatTxErrFrameSec_Object = MibTableColumn
ip2IfIntervalStatTxErrFrameSec = _Ip2IfIntervalStatTxErrFrameSec_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 11, 1, 8),
    _Ip2IfIntervalStatTxErrFrameSec_Type()
)
ip2IfIntervalStatTxErrFrameSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ip2IfIntervalStatTxErrFrameSec.setStatus("current")


class _Ip2IfLogEvents_Type(Integer32):
    """Custom type ip2IfLogEvents based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("all", 2),
          ("notApplicable", 1),
          ("oneMinStep", 3))
    )


_Ip2IfLogEvents_Type.__name__ = "Integer32"
_Ip2IfLogEvents_Object = MibScalar
ip2IfLogEvents = _Ip2IfLogEvents_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 12),
    _Ip2IfLogEvents_Type()
)
ip2IfLogEvents.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ip2IfLogEvents.setStatus("current")


class _Ip2IfEthSwitchMode_Type(Integer32):
    """Custom type ip2IfEthSwitchMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("tagged", 3),
          ("unTagged", 2))
    )


_Ip2IfEthSwitchMode_Type.__name__ = "Integer32"
_Ip2IfEthSwitchMode_Object = MibScalar
ip2IfEthSwitchMode = _Ip2IfEthSwitchMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 7, 13),
    _Ip2IfEthSwitchMode_Type()
)
ip2IfEthSwitchMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ip2IfEthSwitchMode.setStatus("current")
_BroadbandIf_ObjectIdentity = ObjectIdentity
broadbandIf = _BroadbandIf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8)
)
_BdbandConfig_ObjectIdentity = ObjectIdentity
bdbandConfig = _BdbandConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 1)
)
_PrtBdbandIndTable_Object = MibTable
prtBdbandIndTable = _PrtBdbandIndTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 1, 1)
)
if mibBuilder.loadTexts:
    prtBdbandIndTable.setStatus("current")
_PrtBdbandIndEntry_Object = MibTableRow
prtBdbandIndEntry = _PrtBdbandIndEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 1, 1, 1)
)
prtBdbandIndEntry.setIndexNames(
    (0, "RAD-MIB", "prtBdbandCnfgIdx"),
    (0, "RAD-MIB", "prtBdbandIdx"),
    (0, "RAD-MIB", "prtBdbandIndSig"),
    (0, "RAD-MIB", "prtBdbandIndEvent"),
)
if mibBuilder.loadTexts:
    prtBdbandIndEntry.setStatus("current")


class _PrtBdbandCnfgIdx_Type(Integer32):
    """Custom type prtBdbandCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtBdbandCnfgIdx_Type.__name__ = "Integer32"
_PrtBdbandCnfgIdx_Object = MibTableColumn
prtBdbandCnfgIdx = _PrtBdbandCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 1, 1, 1, 1),
    _PrtBdbandCnfgIdx_Type()
)
prtBdbandCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtBdbandCnfgIdx.setStatus("current")
_PrtBdbandIdx_Type = Integer32
_PrtBdbandIdx_Object = MibTableColumn
prtBdbandIdx = _PrtBdbandIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 1, 1, 1, 2),
    _PrtBdbandIdx_Type()
)
prtBdbandIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtBdbandIdx.setStatus("current")


class _PrtBdbandIndSig_Type(Integer32):
    """Custom type prtBdbandIndSig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ais", 1),
          ("aisAndRdi", 3),
          ("rdi", 2))
    )


_PrtBdbandIndSig_Type.__name__ = "Integer32"
_PrtBdbandIndSig_Object = MibTableColumn
prtBdbandIndSig = _PrtBdbandIndSig_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 1, 1, 1, 3),
    _PrtBdbandIndSig_Type()
)
prtBdbandIndSig.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtBdbandIndSig.setStatus("current")


class _PrtBdbandIndEvent_Type(Integer32):
    """Custom type prtBdbandIndEvent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("eed", 4),
          ("fail", 3),
          ("lom", 6),
          ("lop", 7),
          ("notApplicable", 1),
          ("pathTrace", 5),
          ("slm", 2),
          ("slu", 8))
    )


_PrtBdbandIndEvent_Type.__name__ = "Integer32"
_PrtBdbandIndEvent_Object = MibTableColumn
prtBdbandIndEvent = _PrtBdbandIndEvent_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 1, 1, 1, 4),
    _PrtBdbandIndEvent_Type()
)
prtBdbandIndEvent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtBdbandIndEvent.setStatus("current")


class _PrtBdbandIndSigEnable_Type(Integer32):
    """Custom type prtBdbandIndSigEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_PrtBdbandIndSigEnable_Type.__name__ = "Integer32"
_PrtBdbandIndSigEnable_Object = MibTableColumn
prtBdbandIndSigEnable = _PrtBdbandIndSigEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 1, 1, 1, 5),
    _PrtBdbandIndSigEnable_Type()
)
prtBdbandIndSigEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    prtBdbandIndSigEnable.setStatus("current")
_PrtBdbandRowStatus_Type = RowStatus
_PrtBdbandRowStatus_Object = MibTableColumn
prtBdbandRowStatus = _PrtBdbandRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 1, 1, 1, 6),
    _PrtBdbandRowStatus_Type()
)
prtBdbandRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    prtBdbandRowStatus.setStatus("current")
_PrtPhyConfigTable_Object = MibTable
prtPhyConfigTable = _PrtPhyConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 1, 2)
)
if mibBuilder.loadTexts:
    prtPhyConfigTable.setStatus("current")
_PrtPhyConfigEntry_Object = MibTableRow
prtPhyConfigEntry = _PrtPhyConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 1, 2, 1)
)
prtPhyConfigEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    prtPhyConfigEntry.setStatus("current")


class _PrtPhyTimeElapsed_Type(Integer32):
    """Custom type prtPhyTimeElapsed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 899),
    )


_PrtPhyTimeElapsed_Type.__name__ = "Integer32"
_PrtPhyTimeElapsed_Object = MibTableColumn
prtPhyTimeElapsed = _PrtPhyTimeElapsed_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 1, 2, 1, 1),
    _PrtPhyTimeElapsed_Type()
)
prtPhyTimeElapsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhyTimeElapsed.setStatus("current")


class _PrtPhyValidIntervals_Type(Integer32):
    """Custom type prtPhyValidIntervals based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 96),
    )


_PrtPhyValidIntervals_Type.__name__ = "Integer32"
_PrtPhyValidIntervals_Object = MibTableColumn
prtPhyValidIntervals = _PrtPhyValidIntervals_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 1, 2, 1, 2),
    _PrtPhyValidIntervals_Type()
)
prtPhyValidIntervals.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhyValidIntervals.setStatus("current")
_PrtPhyPerfHistory_ObjectIdentity = ObjectIdentity
prtPhyPerfHistory = _PrtPhyPerfHistory_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 2)
)
_PrtPhyCurrentTable_Object = MibTable
prtPhyCurrentTable = _PrtPhyCurrentTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 2, 1)
)
if mibBuilder.loadTexts:
    prtPhyCurrentTable.setStatus("current")
_PrtPhyCurrentEntry_Object = MibTableRow
prtPhyCurrentEntry = _PrtPhyCurrentEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 2, 1, 1)
)
prtPhyCurrentEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    prtPhyCurrentEntry.setStatus("current")
_PrtPhyCurrentLOS_Type = Gauge32
_PrtPhyCurrentLOS_Object = MibTableColumn
prtPhyCurrentLOS = _PrtPhyCurrentLOS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 2, 1, 1, 1),
    _PrtPhyCurrentLOS_Type()
)
prtPhyCurrentLOS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhyCurrentLOS.setStatus("current")
_PrtPhyCurrentLSV_Type = Gauge32
_PrtPhyCurrentLSV_Object = MibTableColumn
prtPhyCurrentLSV = _PrtPhyCurrentLSV_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 2, 1, 1, 2),
    _PrtPhyCurrentLSV_Type()
)
prtPhyCurrentLSV.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhyCurrentLSV.setStatus("current")
_PrtPhyCurrentUAS_Type = Gauge32
_PrtPhyCurrentUAS_Object = MibTableColumn
prtPhyCurrentUAS = _PrtPhyCurrentUAS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 2, 1, 1, 3),
    _PrtPhyCurrentUAS_Type()
)
prtPhyCurrentUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhyCurrentUAS.setStatus("current")
_PrtPhyCurrentSES_Type = Gauge32
_PrtPhyCurrentSES_Object = MibTableColumn
prtPhyCurrentSES = _PrtPhyCurrentSES_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 2, 1, 1, 4),
    _PrtPhyCurrentSES_Type()
)
prtPhyCurrentSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhyCurrentSES.setStatus("current")
_PrtPhyCurrentES_Type = Gauge32
_PrtPhyCurrentES_Object = MibTableColumn
prtPhyCurrentES = _PrtPhyCurrentES_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 2, 1, 1, 5),
    _PrtPhyCurrentES_Type()
)
prtPhyCurrentES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhyCurrentES.setStatus("current")


class _PrtPhyCurrentStatus_Type(OctetString):
    """Custom type prtPhyCurrentStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_PrtPhyCurrentStatus_Type.__name__ = "OctetString"
_PrtPhyCurrentStatus_Object = MibTableColumn
prtPhyCurrentStatus = _PrtPhyCurrentStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 2, 1, 1, 6),
    _PrtPhyCurrentStatus_Type()
)
prtPhyCurrentStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhyCurrentStatus.setStatus("current")
_PrtPhyCurrentLOF_Type = Gauge32
_PrtPhyCurrentLOF_Object = MibTableColumn
prtPhyCurrentLOF = _PrtPhyCurrentLOF_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 2, 1, 1, 7),
    _PrtPhyCurrentLOF_Type()
)
prtPhyCurrentLOF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhyCurrentLOF.setStatus("current")
_PrtPhyIntervalTable_Object = MibTable
prtPhyIntervalTable = _PrtPhyIntervalTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 2, 2)
)
if mibBuilder.loadTexts:
    prtPhyIntervalTable.setStatus("current")
_PrtPhyIntervalEntry_Object = MibTableRow
prtPhyIntervalEntry = _PrtPhyIntervalEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 2, 2, 1)
)
prtPhyIntervalEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RAD-MIB", "prtPhyIntervalNumber"),
)
if mibBuilder.loadTexts:
    prtPhyIntervalEntry.setStatus("current")


class _PrtPhyIntervalNumber_Type(Integer32):
    """Custom type prtPhyIntervalNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_PrtPhyIntervalNumber_Type.__name__ = "Integer32"
_PrtPhyIntervalNumber_Object = MibTableColumn
prtPhyIntervalNumber = _PrtPhyIntervalNumber_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 2, 2, 1, 1),
    _PrtPhyIntervalNumber_Type()
)
prtPhyIntervalNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhyIntervalNumber.setStatus("current")
_PrtPhyIntervalLOS_Type = Gauge32
_PrtPhyIntervalLOS_Object = MibTableColumn
prtPhyIntervalLOS = _PrtPhyIntervalLOS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 2, 2, 1, 2),
    _PrtPhyIntervalLOS_Type()
)
prtPhyIntervalLOS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhyIntervalLOS.setStatus("current")
_PrtPhyIntervalLSV_Type = Gauge32
_PrtPhyIntervalLSV_Object = MibTableColumn
prtPhyIntervalLSV = _PrtPhyIntervalLSV_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 2, 2, 1, 3),
    _PrtPhyIntervalLSV_Type()
)
prtPhyIntervalLSV.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhyIntervalLSV.setStatus("current")
_PrtPhyIntervalUAS_Type = Gauge32
_PrtPhyIntervalUAS_Object = MibTableColumn
prtPhyIntervalUAS = _PrtPhyIntervalUAS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 2, 2, 1, 4),
    _PrtPhyIntervalUAS_Type()
)
prtPhyIntervalUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhyIntervalUAS.setStatus("current")
_PrtPhyIntervalSES_Type = Gauge32
_PrtPhyIntervalSES_Object = MibTableColumn
prtPhyIntervalSES = _PrtPhyIntervalSES_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 2, 2, 1, 5),
    _PrtPhyIntervalSES_Type()
)
prtPhyIntervalSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhyIntervalSES.setStatus("current")
_PrtPhyIntervalES_Type = Gauge32
_PrtPhyIntervalES_Object = MibTableColumn
prtPhyIntervalES = _PrtPhyIntervalES_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 2, 2, 1, 6),
    _PrtPhyIntervalES_Type()
)
prtPhyIntervalES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhyIntervalES.setStatus("current")


class _PrtPhyIntervalStatus_Type(OctetString):
    """Custom type prtPhyIntervalStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_PrtPhyIntervalStatus_Type.__name__ = "OctetString"
_PrtPhyIntervalStatus_Object = MibTableColumn
prtPhyIntervalStatus = _PrtPhyIntervalStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 2, 2, 1, 7),
    _PrtPhyIntervalStatus_Type()
)
prtPhyIntervalStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhyIntervalStatus.setStatus("current")
_PrtPhyIntervalLOF_Type = Gauge32
_PrtPhyIntervalLOF_Object = MibTableColumn
prtPhyIntervalLOF = _PrtPhyIntervalLOF_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 8, 2, 2, 1, 8),
    _PrtPhyIntervalLOF_Type()
)
prtPhyIntervalLOF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhyIntervalLOF.setStatus("current")
_MuxHub_ObjectIdentity = ObjectIdentity
muxHub = _MuxHub_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2)
)
_MuxHubEvents_ObjectIdentity = ObjectIdentity
muxHubEvents = _MuxHubEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 0)
)
if mibBuilder.loadTexts:
    muxHubEvents.setStatus("current")
_AgnMux_ObjectIdentity = ObjectIdentity
agnMux = _AgnMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 1)
)
_MdlMux_ObjectIdentity = ObjectIdentity
mdlMux = _MdlMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2)
)
_CnfgMdlMux_ObjectIdentity = ObjectIdentity
cnfgMdlMux = _CnfgMdlMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1)
)
_MdlPbxFramerCnfg_ObjectIdentity = ObjectIdentity
mdlPbxFramerCnfg = _MdlPbxFramerCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1)
)
_MdlPbxFramerCnfgTable_Object = MibTable
mdlPbxFramerCnfgTable = _MdlPbxFramerCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1)
)
if mibBuilder.loadTexts:
    mdlPbxFramerCnfgTable.setStatus("current")
_MdlPbxFramerCnfgEntry_Object = MibTableRow
mdlPbxFramerCnfgEntry = _MdlPbxFramerCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1)
)
mdlPbxFramerCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "mdlPbxFraCnfgIdx"),
    (0, "RAD-MIB", "mdlPbxFraSltIdx"),
)
if mibBuilder.loadTexts:
    mdlPbxFramerCnfgEntry.setStatus("current")
_MdlPbxFraCnfgIdx_Type = Integer32
_MdlPbxFraCnfgIdx_Object = MibTableColumn
mdlPbxFraCnfgIdx = _MdlPbxFraCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 1),
    _MdlPbxFraCnfgIdx_Type()
)
mdlPbxFraCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlPbxFraCnfgIdx.setStatus("current")


class _MdlPbxFraSltIdx_Type(Integer32):
    """Custom type mdlPbxFraSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_MdlPbxFraSltIdx_Type.__name__ = "Integer32"
_MdlPbxFraSltIdx_Object = MibTableColumn
mdlPbxFraSltIdx = _MdlPbxFraSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 2),
    _MdlPbxFraSltIdx_Type()
)
mdlPbxFraSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlPbxFraSltIdx.setStatus("current")


class _MdlPbxFraEnhEcho_Type(Integer32):
    """Custom type mdlPbxFraEnhEcho based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("ms16", 3),
          ("ms32", 4),
          ("notApplicable", 1))
    )


_MdlPbxFraEnhEcho_Type.__name__ = "Integer32"
_MdlPbxFraEnhEcho_Object = MibTableColumn
mdlPbxFraEnhEcho = _MdlPbxFraEnhEcho_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 3),
    _MdlPbxFraEnhEcho_Type()
)
mdlPbxFraEnhEcho.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlPbxFraEnhEcho.setStatus("current")


class _MdlPbxFraTSGroupAss_Type(Integer32):
    """Custom type mdlPbxFraTSGroupAss based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              255)
        )
    )
    namedValues = NamedValues(
        *(("group1", 1),
          ("group2", 2),
          ("group3", 3),
          ("group4", 4),
          ("group5", 5),
          ("group6", 6),
          ("group7", 7),
          ("group8", 8),
          ("notApplicable", 255))
    )


_MdlPbxFraTSGroupAss_Type.__name__ = "Integer32"
_MdlPbxFraTSGroupAss_Object = MibTableColumn
mdlPbxFraTSGroupAss = _MdlPbxFraTSGroupAss_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 4),
    _MdlPbxFraTSGroupAss_Type()
)
mdlPbxFraTSGroupAss.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlPbxFraTSGroupAss.setStatus("current")


class _MdlPbxFraSignalMode_Type(Integer32):
    """Custom type mdlPbxFraSignalMode based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("casTrans", 4),
          ("ccsTrans", 6),
          ("noSignaling", 7),
          ("notApplicable", 1),
          ("tieInvert", 3),
          ("tieTrunk", 2),
          ("userDefined", 5))
    )


_MdlPbxFraSignalMode_Type.__name__ = "Integer32"
_MdlPbxFraSignalMode_Object = MibTableColumn
mdlPbxFraSignalMode = _MdlPbxFraSignalMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 5),
    _MdlPbxFraSignalMode_Type()
)
mdlPbxFraSignalMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlPbxFraSignalMode.setStatus("current")


class _MdlPbxFraSignalVector_Type(OctetString):
    """Custom type mdlPbxFraSignalVector based on OctetString"""
    defaultHexValue = "0000"


_MdlPbxFraSignalVector_Object = MibTableColumn
mdlPbxFraSignalVector = _MdlPbxFraSignalVector_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 6),
    _MdlPbxFraSignalVector_Type()
)
mdlPbxFraSignalVector.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlPbxFraSignalVector.setStatus("current")


class _MdlPbxFraSignalMask_Type(OctetString):
    """Custom type mdlPbxFraSignalMask based on OctetString"""
    defaultHexValue = "ffff"


_MdlPbxFraSignalMask_Object = MibTableColumn
mdlPbxFraSignalMask = _MdlPbxFraSignalMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 7),
    _MdlPbxFraSignalMask_Type()
)
mdlPbxFraSignalMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlPbxFraSignalMask.setStatus("current")


class _MdlPbxFraFramerSlot_Type(Integer32):
    """Custom type mdlPbxFraFramerSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_MdlPbxFraFramerSlot_Type.__name__ = "Integer32"
_MdlPbxFraFramerSlot_Object = MibTableColumn
mdlPbxFraFramerSlot = _MdlPbxFraFramerSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 8),
    _MdlPbxFraFramerSlot_Type()
)
mdlPbxFraFramerSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlPbxFraFramerSlot.setStatus("current")


class _MdlPbxFraSignaling_Type(Integer32):
    """Custom type mdlPbxFraSignaling based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("endToEnd", 2),
          ("localTermination", 3),
          ("notApplicable", 1))
    )


_MdlPbxFraSignaling_Type.__name__ = "Integer32"
_MdlPbxFraSignaling_Object = MibTableColumn
mdlPbxFraSignaling = _MdlPbxFraSignaling_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 9),
    _MdlPbxFraSignaling_Type()
)
mdlPbxFraSignaling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlPbxFraSignaling.setStatus("current")
_MdlPbxFraTransSigTs_Type = Integer32
_MdlPbxFraTransSigTs_Object = MibTableColumn
mdlPbxFraTransSigTs = _MdlPbxFraTransSigTs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 10),
    _MdlPbxFraTransSigTs_Type()
)
mdlPbxFraTransSigTs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlPbxFraTransSigTs.setStatus("current")
_MdlProtIpTable_Object = MibTable
mdlProtIpTable = _MdlProtIpTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 2)
)
if mibBuilder.loadTexts:
    mdlProtIpTable.setStatus("current")
_MdlProtIpEntry_Object = MibTableRow
mdlProtIpEntry = _MdlProtIpEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 2, 1)
)
mdlProtIpEntry.setIndexNames(
    (0, "RAD-MIB", "mdlProtIpCnfgIdx"),
    (0, "RAD-MIB", "mdlProtIpSlotIdx"),
    (0, "RAD-MIB", "mdlProtIpAddress"),
)
if mibBuilder.loadTexts:
    mdlProtIpEntry.setStatus("current")


class _MdlProtIpCnfgIdx_Type(Integer32):
    """Custom type mdlProtIpCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_MdlProtIpCnfgIdx_Type.__name__ = "Integer32"
_MdlProtIpCnfgIdx_Object = MibTableColumn
mdlProtIpCnfgIdx = _MdlProtIpCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 2, 1, 1),
    _MdlProtIpCnfgIdx_Type()
)
mdlProtIpCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlProtIpCnfgIdx.setStatus("current")


class _MdlProtIpSlotIdx_Type(Integer32):
    """Custom type mdlProtIpSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 1))
    )


_MdlProtIpSlotIdx_Type.__name__ = "Integer32"
_MdlProtIpSlotIdx_Object = MibTableColumn
mdlProtIpSlotIdx = _MdlProtIpSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 2, 1, 2),
    _MdlProtIpSlotIdx_Type()
)
mdlProtIpSlotIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlProtIpSlotIdx.setStatus("current")
_MdlProtIpAddress_Type = IpAddress
_MdlProtIpAddress_Object = MibTableColumn
mdlProtIpAddress = _MdlProtIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 2, 1, 3),
    _MdlProtIpAddress_Type()
)
mdlProtIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlProtIpAddress.setStatus("current")
_MdlProtIpRowStatus_Type = RowStatus
_MdlProtIpRowStatus_Object = MibTableColumn
mdlProtIpRowStatus = _MdlProtIpRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 2, 1, 4),
    _MdlProtIpRowStatus_Type()
)
mdlProtIpRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    mdlProtIpRowStatus.setStatus("current")
_StatMdlMux_ObjectIdentity = ObjectIdentity
statMdlMux = _StatMdlMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 2)
)
_MdlStatTable_Object = MibTable
mdlStatTable = _MdlStatTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 2, 1)
)
if mibBuilder.loadTexts:
    mdlStatTable.setStatus("current")
_MdlStatEntry_Object = MibTableRow
mdlStatEntry = _MdlStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 2, 1, 1)
)
mdlStatEntry.setIndexNames(
    (0, "RAD-MIB", "mdlStatSltIdx"),
)
if mibBuilder.loadTexts:
    mdlStatEntry.setStatus("current")


class _MdlStatSltIdx_Type(Integer32):
    """Custom type mdlStatSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("psA", 1),
          ("psB", 2))
    )


_MdlStatSltIdx_Type.__name__ = "Integer32"
_MdlStatSltIdx_Object = MibTableColumn
mdlStatSltIdx = _MdlStatSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 2, 1, 1, 1),
    _MdlStatSltIdx_Type()
)
mdlStatSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlStatSltIdx.setStatus("current")
_MdlStatHostIP_Type = IpAddress
_MdlStatHostIP_Object = MibTableColumn
mdlStatHostIP = _MdlStatHostIP_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 2, 1, 1, 2),
    _MdlStatHostIP_Type()
)
mdlStatHostIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlStatHostIP.setStatus("current")
_MdlStatHostMask_Type = IpAddress
_MdlStatHostMask_Object = MibTableColumn
mdlStatHostMask = _MdlStatHostMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 2, 1, 1, 3),
    _MdlStatHostMask_Type()
)
mdlStatHostMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlStatHostMask.setStatus("current")
_MdlStatDefaultGateway_Type = IpAddress
_MdlStatDefaultGateway_Object = MibTableColumn
mdlStatDefaultGateway = _MdlStatDefaultGateway_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 2, 1, 1, 4),
    _MdlStatDefaultGateway_Type()
)
mdlStatDefaultGateway.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlStatDefaultGateway.setStatus("current")
_PrtMux_ObjectIdentity = ObjectIdentity
prtMux = _PrtMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3)
)
_StatPrtMux_ObjectIdentity = ObjectIdentity
statPrtMux = _StatPrtMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1)
)
_PrtSExHsfStatTable_Object = MibTable
prtSExHsfStatTable = _PrtSExHsfStatTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 6)
)
if mibBuilder.loadTexts:
    prtSExHsfStatTable.setStatus("current")
_PrtSExHsfStatEntry_Object = MibTableRow
prtSExHsfStatEntry = _PrtSExHsfStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 6, 1)
)
prtSExHsfStatEntry.setIndexNames(
    (0, "RAD-MIB", "prtSExHsfSltIdx"),
    (0, "RAD-MIB", "prtSExHsfPrtIdx"),
)
if mibBuilder.loadTexts:
    prtSExHsfStatEntry.setStatus("current")


class _PrtSExHsfSltIdx_Type(Integer32):
    """Custom type prtSExHsfSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtSExHsfSltIdx_Type.__name__ = "Integer32"
_PrtSExHsfSltIdx_Object = MibTableColumn
prtSExHsfSltIdx = _PrtSExHsfSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 6, 1, 1),
    _PrtSExHsfSltIdx_Type()
)
prtSExHsfSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSExHsfSltIdx.setStatus("current")


class _PrtSExHsfPrtIdx_Type(Integer32):
    """Custom type prtSExHsfPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt11", 11),
          ("exPrt12", 12),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9))
    )


_PrtSExHsfPrtIdx_Type.__name__ = "Integer32"
_PrtSExHsfPrtIdx_Object = MibTableColumn
prtSExHsfPrtIdx = _PrtSExHsfPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 6, 1, 2),
    _PrtSExHsfPrtIdx_Type()
)
prtSExHsfPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSExHsfPrtIdx.setStatus("current")


class _PrtSExHsfInterfaceTyp_Type(Integer32):
    """Custom type prtSExHsfInterfaceTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("rs422", 3),
          ("unknown", 1),
          ("v35", 2))
    )


_PrtSExHsfInterfaceTyp_Type.__name__ = "Integer32"
_PrtSExHsfInterfaceTyp_Object = MibTableColumn
prtSExHsfInterfaceTyp = _PrtSExHsfInterfaceTyp_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 6, 1, 3),
    _PrtSExHsfInterfaceTyp_Type()
)
prtSExHsfInterfaceTyp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSExHsfInterfaceTyp.setStatus("current")


class _PrtSExHsfRts_Type(Integer32):
    """Custom type prtSExHsfRts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 3),
          ("notActive", 2),
          ("unknown", 1))
    )


_PrtSExHsfRts_Type.__name__ = "Integer32"
_PrtSExHsfRts_Object = MibTableColumn
prtSExHsfRts = _PrtSExHsfRts_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 6, 1, 4),
    _PrtSExHsfRts_Type()
)
prtSExHsfRts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSExHsfRts.setStatus("current")
_PrtIsdnStatusTable_Object = MibTable
prtIsdnStatusTable = _PrtIsdnStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 16)
)
if mibBuilder.loadTexts:
    prtIsdnStatusTable.setStatus("current")
_PrtIsdnStatusEntry_Object = MibTableRow
prtIsdnStatusEntry = _PrtIsdnStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 16, 1)
)
prtIsdnStatusEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    prtIsdnStatusEntry.setStatus("current")


class _PrtIsdnStatusDspMode_Type(Integer32):
    """Custom type prtIsdnStatusDspMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("fax", 4),
          ("idle", 3),
          ("vbd", 5),
          ("voice", 2))
    )


_PrtIsdnStatusDspMode_Type.__name__ = "Integer32"
_PrtIsdnStatusDspMode_Object = MibTableColumn
prtIsdnStatusDspMode = _PrtIsdnStatusDspMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 16, 1, 1),
    _PrtIsdnStatusDspMode_Type()
)
prtIsdnStatusDspMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnStatusDspMode.setStatus("current")


class _PrtIsdnStatusCallState_Type(Integer32):
    """Custom type prtIsdnStatusCallState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("active", 10),
          ("callDeliver", 9),
          ("disconnectIndicate", 11),
          ("disconnectReq", 13),
          ("incoming", 4),
          ("initiated", 6),
          ("notActive", 14),
          ("outGoingProceed", 8),
          ("overlapReceive", 3),
          ("overlapSend", 7),
          ("present", 2),
          ("receive", 5),
          ("releaseRequest", 12))
    )


_PrtIsdnStatusCallState_Type.__name__ = "Integer32"
_PrtIsdnStatusCallState_Object = MibTableColumn
prtIsdnStatusCallState = _PrtIsdnStatusCallState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 16, 1, 2),
    _PrtIsdnStatusCallState_Type()
)
prtIsdnStatusCallState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnStatusCallState.setStatus("current")
_PrtIsdnStatusCallingNumber_Type = DisplayString
_PrtIsdnStatusCallingNumber_Object = MibTableColumn
prtIsdnStatusCallingNumber = _PrtIsdnStatusCallingNumber_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 16, 1, 3),
    _PrtIsdnStatusCallingNumber_Type()
)
prtIsdnStatusCallingNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnStatusCallingNumber.setStatus("current")
_PrtIsdnStatusCalledNumber_Type = DisplayString
_PrtIsdnStatusCalledNumber_Object = MibTableColumn
prtIsdnStatusCalledNumber = _PrtIsdnStatusCalledNumber_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 16, 1, 4),
    _PrtIsdnStatusCalledNumber_Type()
)
prtIsdnStatusCalledNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnStatusCalledNumber.setStatus("current")
_PrtIsdnStatusCalledIP_Type = IpAddress
_PrtIsdnStatusCalledIP_Object = MibTableColumn
prtIsdnStatusCalledIP = _PrtIsdnStatusCalledIP_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 16, 1, 5),
    _PrtIsdnStatusCalledIP_Type()
)
prtIsdnStatusCalledIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnStatusCalledIP.setStatus("current")


class _PrtIsdnStatusCallDirection_Type(Integer32):
    """Custom type prtIsdnStatusCallDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("incoming", 2),
          ("notApplicable", 1),
          ("outgoing", 3))
    )


_PrtIsdnStatusCallDirection_Type.__name__ = "Integer32"
_PrtIsdnStatusCallDirection_Object = MibTableColumn
prtIsdnStatusCallDirection = _PrtIsdnStatusCallDirection_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 16, 1, 6),
    _PrtIsdnStatusCallDirection_Type()
)
prtIsdnStatusCallDirection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnStatusCallDirection.setStatus("current")
_CnfgPrtMux_ObjectIdentity = ObjectIdentity
cnfgPrtMux = _CnfgPrtMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2)
)
_PrtClCnfg_ObjectIdentity = ObjectIdentity
prtClCnfg = _PrtClCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1)
)
_PrtExClCnfgTable_Object = MibTable
prtExClCnfgTable = _PrtExClCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1)
)
if mibBuilder.loadTexts:
    prtExClCnfgTable.setStatus("current")
_PrtExClCnfgEntry_Object = MibTableRow
prtExClCnfgEntry = _PrtExClCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1)
)
prtExClCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtExClCnfgIdx"),
    (0, "RAD-MIB", "prtExClSltIdx"),
    (0, "RAD-MIB", "prtExClPrtIdx"),
)
if mibBuilder.loadTexts:
    prtExClCnfgEntry.setStatus("current")


class _PrtExClCnfgIdx_Type(Integer32):
    """Custom type prtExClCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExClCnfgIdx_Type.__name__ = "Integer32"
_PrtExClCnfgIdx_Object = MibTableColumn
prtExClCnfgIdx = _PrtExClCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 1),
    _PrtExClCnfgIdx_Type()
)
prtExClCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExClCnfgIdx.setStatus("current")


class _PrtExClSltIdx_Type(Integer32):
    """Custom type prtExClSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("notApplicable", 255))
    )


_PrtExClSltIdx_Type.__name__ = "Integer32"
_PrtExClSltIdx_Object = MibTableColumn
prtExClSltIdx = _PrtExClSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 2),
    _PrtExClSltIdx_Type()
)
prtExClSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExClSltIdx.setStatus("current")


class _PrtExClPrtIdx_Type(Integer32):
    """Custom type prtExClPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2))
    )


_PrtExClPrtIdx_Type.__name__ = "Integer32"
_PrtExClPrtIdx_Object = MibTableColumn
prtExClPrtIdx = _PrtExClPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 3),
    _PrtExClPrtIdx_Type()
)
prtExClPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExClPrtIdx.setStatus("current")


class _PrtExClUsage_Type(Integer32):
    """Custom type prtExClUsage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("muxPpp", 6),
          ("muxSlip", 5),
          ("nmsPpp", 4),
          ("nmsSlip", 3),
          ("noUse", 2),
          ("terminal", 7),
          ("unknown", 1))
    )


_PrtExClUsage_Type.__name__ = "Integer32"
_PrtExClUsage_Object = MibTableColumn
prtExClUsage = _PrtExClUsage_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 4),
    _PrtExClUsage_Type()
)
prtExClUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExClUsage.setStatus("current")


class _PrtExClRate_Type(Integer32):
    """Custom type prtExClRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("r115200Bps", 9),
          ("r1200Bps", 2),
          ("r19200Bps", 6),
          ("r2400Bps", 3),
          ("r300Bps", 1),
          ("r38400Bps", 7),
          ("r4800Bps", 4),
          ("r57600Bps", 8),
          ("r9600Bps", 5))
    )


_PrtExClRate_Type.__name__ = "Integer32"
_PrtExClRate_Object = MibTableColumn
prtExClRate = _PrtExClRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 5),
    _PrtExClRate_Type()
)
prtExClRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExClRate.setStatus("current")


class _PrtExClDataBits_Type(Integer32):
    """Custom type prtExClDataBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dataBits7Bits", 1),
          ("dataBits8Bits", 2))
    )


_PrtExClDataBits_Type.__name__ = "Integer32"
_PrtExClDataBits_Object = MibTableColumn
prtExClDataBits = _PrtExClDataBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 6),
    _PrtExClDataBits_Type()
)
prtExClDataBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExClDataBits.setStatus("current")


class _PrtExClParity_Type(Integer32):
    """Custom type prtExClParity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("even", 2),
          ("none", 3),
          ("odd", 1))
    )


_PrtExClParity_Type.__name__ = "Integer32"
_PrtExClParity_Object = MibTableColumn
prtExClParity = _PrtExClParity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 7),
    _PrtExClParity_Type()
)
prtExClParity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExClParity.setStatus("current")


class _PrtExClStopBits_Type(Integer32):
    """Custom type prtExClStopBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("stopBits1Bit", 1),
          ("stopBits1dot5Bits", 2),
          ("stopBits2Bits", 3))
    )


_PrtExClStopBits_Type.__name__ = "Integer32"
_PrtExClStopBits_Object = MibTableColumn
prtExClStopBits = _PrtExClStopBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 8),
    _PrtExClStopBits_Type()
)
prtExClStopBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExClStopBits.setStatus("current")


class _PrtExClRoutingProtocol_Type(Integer32):
    """Custom type prtExClRoutingProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("rip2", 2))
    )


_PrtExClRoutingProtocol_Type.__name__ = "Integer32"
_PrtExClRoutingProtocol_Object = MibTableColumn
prtExClRoutingProtocol = _PrtExClRoutingProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 9),
    _PrtExClRoutingProtocol_Type()
)
prtExClRoutingProtocol.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExClRoutingProtocol.setStatus("current")


class _PrtExClEnabled_Type(Integer32):
    """Custom type prtExClEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_PrtExClEnabled_Type.__name__ = "Integer32"
_PrtExClEnabled_Object = MibTableColumn
prtExClEnabled = _PrtExClEnabled_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 10),
    _PrtExClEnabled_Type()
)
prtExClEnabled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExClEnabled.setStatus("current")
_PrtPh1MlCnfg_ObjectIdentity = ObjectIdentity
prtPh1MlCnfg = _PrtPh1MlCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2)
)
_PrtExPh1MlCnfgTable_Object = MibTable
prtExPh1MlCnfgTable = _PrtExPh1MlCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1)
)
if mibBuilder.loadTexts:
    prtExPh1MlCnfgTable.setStatus("current")
_PrtExPh1MlCnfgEntry_Object = MibTableRow
prtExPh1MlCnfgEntry = _PrtExPh1MlCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1)
)
prtExPh1MlCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtExPh1MlCnfgIdx"),
    (0, "RAD-MIB", "prtExPh1MlSltIdx"),
    (0, "RAD-MIB", "prtExPh1MlPrtIdx"),
)
if mibBuilder.loadTexts:
    prtExPh1MlCnfgEntry.setStatus("current")


class _PrtExPh1MlCnfgIdx_Type(Integer32):
    """Custom type prtExPh1MlCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExPh1MlCnfgIdx_Type.__name__ = "Integer32"
_PrtExPh1MlCnfgIdx_Object = MibTableColumn
prtExPh1MlCnfgIdx = _PrtExPh1MlCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 1),
    _PrtExPh1MlCnfgIdx_Type()
)
prtExPh1MlCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPh1MlCnfgIdx.setStatus("current")


class _PrtExPh1MlSltIdx_Type(Integer32):
    """Custom type prtExPh1MlSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 1))
    )


_PrtExPh1MlSltIdx_Type.__name__ = "Integer32"
_PrtExPh1MlSltIdx_Object = MibTableColumn
prtExPh1MlSltIdx = _PrtExPh1MlSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 2),
    _PrtExPh1MlSltIdx_Type()
)
prtExPh1MlSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPh1MlSltIdx.setStatus("current")


class _PrtExPh1MlPrtIdx_Type(Integer32):
    """Custom type prtExPh1MlPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              123,
              124,
              125,
              126,
              127,
              128,
              129,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              147,
              148,
              149,
              150,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              158,
              159,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              181,
              182,
              183,
              184)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt11", 11),
          ("exPrt12", 12),
          ("exPrt13", 13),
          ("exPrt14", 14),
          ("exPrt15", 15),
          ("exPrt16", 16),
          ("exPrt17", 17),
          ("exPrt18", 18),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9),
          ("inPrt1", 101),
          ("inPrt10", 110),
          ("inPrt11", 111),
          ("inPrt12", 112),
          ("inPrt13", 113),
          ("inPrt14", 114),
          ("inPrt15", 115),
          ("inPrt16", 116),
          ("inPrt17", 117),
          ("inPrt18", 118),
          ("inPrt19", 119),
          ("inPrt2", 102),
          ("inPrt20", 120),
          ("inPrt21", 121),
          ("inPrt22", 122),
          ("inPrt23", 123),
          ("inPrt24", 124),
          ("inPrt25", 125),
          ("inPrt26", 126),
          ("inPrt27", 127),
          ("inPrt28", 128),
          ("inPrt29", 129),
          ("inPrt3", 103),
          ("inPrt30", 130),
          ("inPrt31", 131),
          ("inPrt32", 132),
          ("inPrt33", 133),
          ("inPrt34", 134),
          ("inPrt35", 135),
          ("inPrt36", 136),
          ("inPrt37", 137),
          ("inPrt38", 138),
          ("inPrt39", 139),
          ("inPrt4", 104),
          ("inPrt40", 140),
          ("inPrt41", 141),
          ("inPrt42", 142),
          ("inPrt43", 143),
          ("inPrt44", 144),
          ("inPrt45", 145),
          ("inPrt46", 146),
          ("inPrt47", 147),
          ("inPrt48", 148),
          ("inPrt49", 149),
          ("inPrt5", 105),
          ("inPrt50", 150),
          ("inPrt51", 151),
          ("inPrt52", 152),
          ("inPrt53", 153),
          ("inPrt54", 154),
          ("inPrt55", 155),
          ("inPrt56", 156),
          ("inPrt57", 157),
          ("inPrt58", 158),
          ("inPrt59", 159),
          ("inPrt6", 106),
          ("inPrt60", 160),
          ("inPrt61", 161),
          ("inPrt62", 162),
          ("inPrt63", 163),
          ("inPrt64", 164),
          ("inPrt65", 165),
          ("inPrt66", 166),
          ("inPrt67", 167),
          ("inPrt68", 168),
          ("inPrt69", 169),
          ("inPrt7", 107),
          ("inPrt70", 170),
          ("inPrt71", 171),
          ("inPrt72", 172),
          ("inPrt73", 173),
          ("inPrt74", 174),
          ("inPrt75", 175),
          ("inPrt76", 176),
          ("inPrt77", 177),
          ("inPrt78", 178),
          ("inPrt79", 179),
          ("inPrt8", 108),
          ("inPrt80", 180),
          ("inPrt81", 181),
          ("inPrt82", 182),
          ("inPrt83", 183),
          ("inPrt84", 184),
          ("inPrt9", 109))
    )


_PrtExPh1MlPrtIdx_Type.__name__ = "Integer32"
_PrtExPh1MlPrtIdx_Object = MibTableColumn
prtExPh1MlPrtIdx = _PrtExPh1MlPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 3),
    _PrtExPh1MlPrtIdx_Type()
)
prtExPh1MlPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPh1MlPrtIdx.setStatus("current")


class _PrtExPh1MlConnect_Type(Integer32):
    """Custom type prtExPh1MlConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExPh1MlConnect_Type.__name__ = "Integer32"
_PrtExPh1MlConnect_Object = MibTableColumn
prtExPh1MlConnect = _PrtExPh1MlConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 4),
    _PrtExPh1MlConnect_Type()
)
prtExPh1MlConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlConnect.setStatus("current")


class _PrtExPh1MlLineType_Type(Integer32):
    """Custom type prtExPh1MlLineType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              101)
        )
    )
    namedValues = NamedValues(
        *(("e1Unframed", 9),
          ("esfT1", 2),
          ("framed", 101),
          ("g732nE1", 4),
          ("g732nE1CRC", 5),
          ("g732sE1", 6),
          ("g732sE1CRC", 7),
          ("g732unframed", 8),
          ("sfT1", 3))
    )


_PrtExPh1MlLineType_Type.__name__ = "Integer32"
_PrtExPh1MlLineType_Object = MibTableColumn
prtExPh1MlLineType = _PrtExPh1MlLineType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 5),
    _PrtExPh1MlLineType_Type()
)
prtExPh1MlLineType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlLineType.setStatus("current")


class _PrtExPh1MlLineCode_Type(Integer32):
    """Custom type prtExPh1MlLineCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("b7T1", 1),
          ("b8zsT1", 2),
          ("hdb3E1", 4),
          ("notApplicable", 255),
          ("transT1", 3))
    )


_PrtExPh1MlLineCode_Type.__name__ = "Integer32"
_PrtExPh1MlLineCode_Object = MibTableColumn
prtExPh1MlLineCode = _PrtExPh1MlLineCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 6),
    _PrtExPh1MlLineCode_Type()
)
prtExPh1MlLineCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlLineCode.setStatus("current")


class _PrtExPh1MlLineLen_Type(Integer32):
    """Custom type prtExPh1MlLineLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              255)
        )
    )
    namedValues = NamedValues(
        *(("len0p133ft", 2),
          ("len134p266ft", 3),
          ("len267p399ft", 4),
          ("len400p533ft", 5),
          ("len534p655ft", 6),
          ("lenFcc68", 7),
          ("notApplicable", 255),
          ("unknown", 1))
    )


_PrtExPh1MlLineLen_Type.__name__ = "Integer32"
_PrtExPh1MlLineLen_Object = MibTableColumn
prtExPh1MlLineLen = _PrtExPh1MlLineLen_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 7),
    _PrtExPh1MlLineLen_Type()
)
prtExPh1MlLineLen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlLineLen.setStatus("current")


class _PrtExPh1MlRestoreTime_Type(Integer32):
    """Custom type prtExPh1MlRestoreTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ccittE1", 4),
          ("restoreT10sec62411", 3),
          ("restoreT1secFast", 2))
    )


_PrtExPh1MlRestoreTime_Type.__name__ = "Integer32"
_PrtExPh1MlRestoreTime_Object = MibTableColumn
prtExPh1MlRestoreTime = _PrtExPh1MlRestoreTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 8),
    _PrtExPh1MlRestoreTime_Type()
)
prtExPh1MlRestoreTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlRestoreTime.setStatus("current")


class _PrtExPh1MlTxGain_Type(Integer32):
    """Custom type prtExPh1MlTxGain based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("txGain0db", 2),
          ("txGain15db", 4),
          ("txGain22dot5db", 5),
          ("txGain7dot5db", 3))
    )


_PrtExPh1MlTxGain_Type.__name__ = "Integer32"
_PrtExPh1MlTxGain_Object = MibTableColumn
prtExPh1MlTxGain = _PrtExPh1MlTxGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 9),
    _PrtExPh1MlTxGain_Type()
)
prtExPh1MlTxGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlTxGain.setStatus("current")


class _PrtExPh1MlRxSensitivity_Type(Integer32):
    """Custom type prtExPh1MlRxSensitivity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("high36dBm", 3),
          ("longHaul", 5),
          ("low15dbm", 6),
          ("low26dBm", 2),
          ("notApplicable", 1),
          ("shortHaul", 4))
    )


_PrtExPh1MlRxSensitivity_Type.__name__ = "Integer32"
_PrtExPh1MlRxSensitivity_Object = MibTableColumn
prtExPh1MlRxSensitivity = _PrtExPh1MlRxSensitivity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 10),
    _PrtExPh1MlRxSensitivity_Type()
)
prtExPh1MlRxSensitivity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlRxSensitivity.setStatus("current")
_PrtExPh1MlIdleCode_Type = Integer32
_PrtExPh1MlIdleCode_Object = MibTableColumn
prtExPh1MlIdleCode = _PrtExPh1MlIdleCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 11),
    _PrtExPh1MlIdleCode_Type()
)
prtExPh1MlIdleCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlIdleCode.setStatus("current")


class _PrtExPh1MlTdmTrunk_Type(Integer32):
    """Custom type prtExPh1MlTdmTrunk based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("linkA", 1),
          ("linkB", 2),
          ("none", 3),
          ("notApplicable", 255))
    )


_PrtExPh1MlTdmTrunk_Type.__name__ = "Integer32"
_PrtExPh1MlTdmTrunk_Object = MibTableColumn
prtExPh1MlTdmTrunk = _PrtExPh1MlTdmTrunk_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 12),
    _PrtExPh1MlTdmTrunk_Type()
)
prtExPh1MlTdmTrunk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlTdmTrunk.setStatus("current")


class _PrtExPh1MlClkMode_Type(Integer32):
    """Custom type prtExPh1MlClkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("internalLocal", 1),
          ("loopBackFromChannel", 5),
          ("loopBackFromLink", 4),
          ("loopBackLocal", 2),
          ("loopbackFromSystem", 6),
          ("nodalTiming", 3))
    )


_PrtExPh1MlClkMode_Type.__name__ = "Integer32"
_PrtExPh1MlClkMode_Object = MibTableColumn
prtExPh1MlClkMode = _PrtExPh1MlClkMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 13),
    _PrtExPh1MlClkMode_Type()
)
prtExPh1MlClkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlClkMode.setStatus("current")


class _PrtExPh1MlMfClkSrcSlt_Type(Integer32):
    """Custom type prtExPh1MlMfClkSrcSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("local", 2),
          ("notApplicable", 1))
    )


_PrtExPh1MlMfClkSrcSlt_Type.__name__ = "Integer32"
_PrtExPh1MlMfClkSrcSlt_Object = MibTableColumn
prtExPh1MlMfClkSrcSlt = _PrtExPh1MlMfClkSrcSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 14),
    _PrtExPh1MlMfClkSrcSlt_Type()
)
prtExPh1MlMfClkSrcSlt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlMfClkSrcSlt.setStatus("current")


class _PrtExPh1MlMfClkSrcPrt_Type(Integer32):
    """Custom type prtExPh1MlMfClkSrcPrt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              101,
              255)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("inPrt1", 101),
          ("notApplicable", 255))
    )


_PrtExPh1MlMfClkSrcPrt_Type.__name__ = "Integer32"
_PrtExPh1MlMfClkSrcPrt_Object = MibTableColumn
prtExPh1MlMfClkSrcPrt = _PrtExPh1MlMfClkSrcPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 15),
    _PrtExPh1MlMfClkSrcPrt_Type()
)
prtExPh1MlMfClkSrcPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlMfClkSrcPrt.setStatus("current")


class _PrtExPh1MlFdlType_Type(Integer32):
    """Custom type prtExPh1MlFdlType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("command", 3),
          ("notApplicable", 1),
          ("response", 2))
    )


_PrtExPh1MlFdlType_Type.__name__ = "Integer32"
_PrtExPh1MlFdlType_Object = MibTableColumn
prtExPh1MlFdlType = _PrtExPh1MlFdlType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 16),
    _PrtExPh1MlFdlType_Type()
)
prtExPh1MlFdlType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlFdlType.setStatus("current")


class _PrtExPh1MlInbandMng_Type(Integer32):
    """Custom type prtExPh1MlInbandMng based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              255)
        )
    )
    namedValues = NamedValues(
        *(("dedicatedFr", 6),
          ("dedicatedPpp", 5),
          ("dedicatedTs", 4),
          ("fdlOrTs0", 3),
          ("notApplicable", 255),
          ("off", 2))
    )


_PrtExPh1MlInbandMng_Type.__name__ = "Integer32"
_PrtExPh1MlInbandMng_Object = MibTableColumn
prtExPh1MlInbandMng = _PrtExPh1MlInbandMng_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 17),
    _PrtExPh1MlInbandMng_Type()
)
prtExPh1MlInbandMng.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlInbandMng.setStatus("current")


class _PrtExPh1MlInbandMngRate_Type(Integer32):
    """Custom type prtExPh1MlInbandMngRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("r12k", 4),
          ("r16k", 5),
          ("r20k", 8),
          ("r32k", 6),
          ("r4k", 2),
          ("r64k", 7),
          ("r8k", 3))
    )


_PrtExPh1MlInbandMngRate_Type.__name__ = "Integer32"
_PrtExPh1MlInbandMngRate_Object = MibTableColumn
prtExPh1MlInbandMngRate = _PrtExPh1MlInbandMngRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 18),
    _PrtExPh1MlInbandMngRate_Type()
)
prtExPh1MlInbandMngRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlInbandMngRate.setStatus("current")


class _PrtExPh1MlRedundType_Type(Integer32):
    """Custom type prtExPh1MlRedundType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dualCableAIS", 2),
          ("dualCableParallelTx", 4),
          ("none", 1),
          ("yCable", 3))
    )


_PrtExPh1MlRedundType_Type.__name__ = "Integer32"
_PrtExPh1MlRedundType_Object = MibTableColumn
prtExPh1MlRedundType = _PrtExPh1MlRedundType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 19),
    _PrtExPh1MlRedundType_Type()
)
prtExPh1MlRedundType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlRedundType.setStatus("current")


class _PrtExPh1MlRedundSlot_Type(Integer32):
    """Custom type prtExPh1MlRedundSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 1))
    )


_PrtExPh1MlRedundSlot_Type.__name__ = "Integer32"
_PrtExPh1MlRedundSlot_Object = MibTableColumn
prtExPh1MlRedundSlot = _PrtExPh1MlRedundSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 20),
    _PrtExPh1MlRedundSlot_Type()
)
prtExPh1MlRedundSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlRedundSlot.setStatus("current")


class _PrtExPh1MlRedundPort_Type(Integer32):
    """Custom type prtExPh1MlRedundPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              101,
              102,
              103,
              104,
              255)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("inPrt1", 101),
          ("inPrt2", 102),
          ("inPrt3", 103),
          ("inPrt4", 104),
          ("notApplicable", 255))
    )


_PrtExPh1MlRedundPort_Type.__name__ = "Integer32"
_PrtExPh1MlRedundPort_Object = MibTableColumn
prtExPh1MlRedundPort = _PrtExPh1MlRedundPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 21),
    _PrtExPh1MlRedundPort_Type()
)
prtExPh1MlRedundPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlRedundPort.setStatus("current")


class _PrtExPh1MlRedundRecTime_Type(Integer32):
    """Custom type prtExPh1MlRedundRecTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 99),
    )


_PrtExPh1MlRedundRecTime_Type.__name__ = "Integer32"
_PrtExPh1MlRedundRecTime_Object = MibTableColumn
prtExPh1MlRedundRecTime = _PrtExPh1MlRedundRecTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 22),
    _PrtExPh1MlRedundRecTime_Type()
)
prtExPh1MlRedundRecTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlRedundRecTime.setStatus("current")


class _PrtExPh1MlInbandMngRoutProt_Type(Integer32):
    """Custom type prtExPh1MlInbandMngRoutProt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("proprietary", 3),
          ("proprietaryNoNmsTx", 4),
          ("rip2", 2))
    )


_PrtExPh1MlInbandMngRoutProt_Type.__name__ = "Integer32"
_PrtExPh1MlInbandMngRoutProt_Object = MibTableColumn
prtExPh1MlInbandMngRoutProt = _PrtExPh1MlInbandMngRoutProt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 23),
    _PrtExPh1MlInbandMngRoutProt_Type()
)
prtExPh1MlInbandMngRoutProt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlInbandMngRoutProt.setStatus("current")


class _PrtExPh1MlIfType_Type(Integer32):
    """Custom type prtExPh1MlIfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("csu", 2),
          ("dsu", 3),
          ("ltu", 4),
          ("notApplicable", 1))
    )


_PrtExPh1MlIfType_Type.__name__ = "Integer32"
_PrtExPh1MlIfType_Object = MibTableColumn
prtExPh1MlIfType = _PrtExPh1MlIfType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 24),
    _PrtExPh1MlIfType_Type()
)
prtExPh1MlIfType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlIfType.setStatus("current")


class _PrtExPh1MlMultiplier_Type(Integer32):
    """Custom type prtExPh1MlMultiplier based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("br56", 2),
          ("br64", 3),
          ("notApplicable", 1))
    )


_PrtExPh1MlMultiplier_Type.__name__ = "Integer32"
_PrtExPh1MlMultiplier_Object = MibTableColumn
prtExPh1MlMultiplier = _PrtExPh1MlMultiplier_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 25),
    _PrtExPh1MlMultiplier_Type()
)
prtExPh1MlMultiplier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlMultiplier.setStatus("current")
_PrtExPh1MlSupportedTS_Type = Integer32
_PrtExPh1MlSupportedTS_Object = MibTableColumn
prtExPh1MlSupportedTS = _PrtExPh1MlSupportedTS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 26),
    _PrtExPh1MlSupportedTS_Type()
)
prtExPh1MlSupportedTS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPh1MlSupportedTS.setStatus("current")


class _PrtExPh1MlImpedance_Type(Integer32):
    """Custom type prtExPh1MlImpedance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("balanced", 3),
          ("notApplicable", 1),
          ("unbalanced", 2))
    )


_PrtExPh1MlImpedance_Type.__name__ = "Integer32"
_PrtExPh1MlImpedance_Object = MibTableColumn
prtExPh1MlImpedance = _PrtExPh1MlImpedance_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 27),
    _PrtExPh1MlImpedance_Type()
)
prtExPh1MlImpedance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlImpedance.setStatus("current")


class _PrtExPh1MlQ50BwControl_Type(Integer32):
    """Custom type prtExPh1MlQ50BwControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("annexA", 3),
          ("annexB", 4),
          ("disable", 2))
    )


_PrtExPh1MlQ50BwControl_Type.__name__ = "Integer32"
_PrtExPh1MlQ50BwControl_Object = MibTableColumn
prtExPh1MlQ50BwControl = _PrtExPh1MlQ50BwControl_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 28),
    _PrtExPh1MlQ50BwControl_Type()
)
prtExPh1MlQ50BwControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlQ50BwControl.setStatus("current")


class _PrtExPh1MlQ50SignalPair_Type(Integer32):
    """Custom type prtExPh1MlQ50SignalPair based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("aAndB", 2),
          ("cAndD", 3),
          ("notApplicable", 1))
    )


_PrtExPh1MlQ50SignalPair_Type.__name__ = "Integer32"
_PrtExPh1MlQ50SignalPair_Object = MibTableColumn
prtExPh1MlQ50SignalPair = _PrtExPh1MlQ50SignalPair_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 29),
    _PrtExPh1MlQ50SignalPair_Type()
)
prtExPh1MlQ50SignalPair.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlQ50SignalPair.setStatus("current")


class _PrtExPh1MlInternalSwitch_Type(Integer32):
    """Custom type prtExPh1MlInternalSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_PrtExPh1MlInternalSwitch_Type.__name__ = "Integer32"
_PrtExPh1MlInternalSwitch_Object = MibTableColumn
prtExPh1MlInternalSwitch = _PrtExPh1MlInternalSwitch_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 30),
    _PrtExPh1MlInternalSwitch_Type()
)
prtExPh1MlInternalSwitch.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlInternalSwitch.setStatus("current")


class _PrtExPh1MlSigService_Type(Integer32):
    """Custom type prtExPh1MlSigService based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("advanced", 3),
          ("normal", 2),
          ("notApplicable", 1))
    )


_PrtExPh1MlSigService_Type.__name__ = "Integer32"
_PrtExPh1MlSigService_Object = MibTableColumn
prtExPh1MlSigService = _PrtExPh1MlSigService_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 31),
    _PrtExPh1MlSigService_Type()
)
prtExPh1MlSigService.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlSigService.setStatus("current")
_PrtExPh1MlFragmentSize_Type = Integer32
_PrtExPh1MlFragmentSize_Object = MibTableColumn
prtExPh1MlFragmentSize = _PrtExPh1MlFragmentSize_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 32),
    _PrtExPh1MlFragmentSize_Type()
)
prtExPh1MlFragmentSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlFragmentSize.setStatus("current")
_PrtExPh1MlTsTable_Object = MibTable
prtExPh1MlTsTable = _PrtExPh1MlTsTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2)
)
if mibBuilder.loadTexts:
    prtExPh1MlTsTable.setStatus("current")
_PrtExPh1MlTsEntry_Object = MibTableRow
prtExPh1MlTsEntry = _PrtExPh1MlTsEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1)
)
prtExPh1MlTsEntry.setIndexNames(
    (0, "RAD-MIB", "prtExPh1MlTsCnfgIdx"),
    (0, "RAD-MIB", "prtExPh1MlTsSltIdx"),
    (0, "RAD-MIB", "prtExPh1MlTsPrtIdx"),
    (0, "RAD-MIB", "prtExPh1MlTsIdx"),
)
if mibBuilder.loadTexts:
    prtExPh1MlTsEntry.setStatus("current")


class _PrtExPh1MlTsCnfgIdx_Type(Integer32):
    """Custom type prtExPh1MlTsCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExPh1MlTsCnfgIdx_Type.__name__ = "Integer32"
_PrtExPh1MlTsCnfgIdx_Object = MibTableColumn
prtExPh1MlTsCnfgIdx = _PrtExPh1MlTsCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 1),
    _PrtExPh1MlTsCnfgIdx_Type()
)
prtExPh1MlTsCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPh1MlTsCnfgIdx.setStatus("current")


class _PrtExPh1MlTsSltIdx_Type(Integer32):
    """Custom type prtExPh1MlTsSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtExPh1MlTsSltIdx_Type.__name__ = "Integer32"
_PrtExPh1MlTsSltIdx_Object = MibTableColumn
prtExPh1MlTsSltIdx = _PrtExPh1MlTsSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 2),
    _PrtExPh1MlTsSltIdx_Type()
)
prtExPh1MlTsSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPh1MlTsSltIdx.setStatus("current")


class _PrtExPh1MlTsPrtIdx_Type(Integer32):
    """Custom type prtExPh1MlTsPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt11", 11),
          ("exPrt12", 12),
          ("exPrt13", 13),
          ("exPrt14", 14),
          ("exPrt15", 15),
          ("exPrt16", 16),
          ("exPrt17", 17),
          ("exPrt18", 18),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9),
          ("inPrt1", 101),
          ("inPrt10", 110),
          ("inPrt11", 111),
          ("inPrt12", 112),
          ("inPrt13", 113),
          ("inPrt14", 114),
          ("inPrt15", 115),
          ("inPrt16", 116),
          ("inPrt17", 117),
          ("inPrt18", 118),
          ("inPrt19", 119),
          ("inPrt2", 102),
          ("inPrt20", 120),
          ("inPrt3", 103),
          ("inPrt4", 104),
          ("inPrt5", 105),
          ("inPrt6", 106),
          ("inPrt7", 107),
          ("inPrt8", 108),
          ("inPrt9", 109))
    )


_PrtExPh1MlTsPrtIdx_Type.__name__ = "Integer32"
_PrtExPh1MlTsPrtIdx_Object = MibTableColumn
prtExPh1MlTsPrtIdx = _PrtExPh1MlTsPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 3),
    _PrtExPh1MlTsPrtIdx_Type()
)
prtExPh1MlTsPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPh1MlTsPrtIdx.setStatus("current")
_PrtExPh1MlTsIdx_Type = Integer32
_PrtExPh1MlTsIdx_Object = MibTableColumn
prtExPh1MlTsIdx = _PrtExPh1MlTsIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 4),
    _PrtExPh1MlTsIdx_Type()
)
prtExPh1MlTsIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPh1MlTsIdx.setStatus("current")


class _PrtExPh1MlTsIConSlot_Type(Integer32):
    """Custom type prtExPh1MlTsIConSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("noConnect", 2),
          ("notApplicable", 255),
          ("split", 4),
          ("unknown", 1))
    )


_PrtExPh1MlTsIConSlot_Type.__name__ = "Integer32"
_PrtExPh1MlTsIConSlot_Object = MibTableColumn
prtExPh1MlTsIConSlot = _PrtExPh1MlTsIConSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 5),
    _PrtExPh1MlTsIConSlot_Type()
)
prtExPh1MlTsIConSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlTsIConSlot.setStatus("current")
_PrtExPh1MlTsIConPrt_Type = Integer32
_PrtExPh1MlTsIConPrt_Object = MibTableColumn
prtExPh1MlTsIConPrt = _PrtExPh1MlTsIConPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 6),
    _PrtExPh1MlTsIConPrt_Type()
)
prtExPh1MlTsIConPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlTsIConPrt.setStatus("current")
_PrtExPh1MlTsIConTs_Type = Integer32
_PrtExPh1MlTsIConTs_Object = MibTableColumn
prtExPh1MlTsIConTs = _PrtExPh1MlTsIConTs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 7),
    _PrtExPh1MlTsIConTs_Type()
)
prtExPh1MlTsIConTs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlTsIConTs.setStatus("current")
_PrtExPh1MlTsExt_Type = ObjectIdentifier
_PrtExPh1MlTsExt_Object = MibTableColumn
prtExPh1MlTsExt = _PrtExPh1MlTsExt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 8),
    _PrtExPh1MlTsExt_Type()
)
prtExPh1MlTsExt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPh1MlTsExt.setStatus("current")


class _PrtExPh1MlTsTest_Type(Integer32):
    """Custom type prtExPh1MlTsTest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              8,
              9,
              18,
              30,
              254,
              255)
        )
    )
    namedValues = NamedValues(
        *(("localBert", 30),
          ("localLoop", 2),
          ("localToneInjection", 9),
          ("none", 1),
          ("notApplicable", 255),
          ("remoteBert", 8),
          ("remoteLoop", 3),
          ("remoteToneInjection", 18),
          ("split", 254))
    )


_PrtExPh1MlTsTest_Type.__name__ = "Integer32"
_PrtExPh1MlTsTest_Object = MibTableColumn
prtExPh1MlTsTest = _PrtExPh1MlTsTest_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 9),
    _PrtExPh1MlTsTest_Type()
)
prtExPh1MlTsTest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlTsTest.setStatus("current")


class _PrtExPh1MlTsType_Type(Integer32):
    """Custom type prtExPh1MlTsType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              255)
        )
    )
    namedValues = NamedValues(
        *(("cas", 5),
          ("data", 3),
          ("data2", 8),
          ("data3", 9),
          ("data4", 10),
          ("dynamic", 23),
          ("hdlcV2Compatible", 12),
          ("noConnect", 2),
          ("notApplicable", 255),
          ("qmux", 22),
          ("signaling", 24),
          ("ss7", 6),
          ("ss7n2", 11),
          ("subCh1", 13),
          ("subCh2", 14),
          ("subCh3", 15),
          ("subCh4", 16),
          ("subCh5", 17),
          ("subCh6", 18),
          ("subCh7", 19),
          ("subCh8", 20),
          ("transparent", 7),
          ("trau", 21),
          ("voice", 4))
    )


_PrtExPh1MlTsType_Type.__name__ = "Integer32"
_PrtExPh1MlTsType_Object = MibTableColumn
prtExPh1MlTsType = _PrtExPh1MlTsType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 10),
    _PrtExPh1MlTsType_Type()
)
prtExPh1MlTsType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlTsType.setStatus("current")
_PrtExPh1MlTsBundle_Type = Integer32
_PrtExPh1MlTsBundle_Object = MibTableColumn
prtExPh1MlTsBundle = _PrtExPh1MlTsBundle_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 11),
    _PrtExPh1MlTsBundle_Type()
)
prtExPh1MlTsBundle.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlTsBundle.setStatus("current")
_PrtExPh1MlTsTestDuration_Type = Integer32
_PrtExPh1MlTsTestDuration_Object = MibTableColumn
prtExPh1MlTsTestDuration = _PrtExPh1MlTsTestDuration_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 12),
    _PrtExPh1MlTsTestDuration_Type()
)
prtExPh1MlTsTestDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlTsTestDuration.setStatus("current")


class _PrtExPh1MlTsSubChType_Type(Integer32):
    """Custom type prtExPh1MlTsSubChType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("hdlc", 1),
          ("notApplicable", 255),
          ("transparent", 2))
    )


_PrtExPh1MlTsSubChType_Type.__name__ = "Integer32"
_PrtExPh1MlTsSubChType_Object = MibTableColumn
prtExPh1MlTsSubChType = _PrtExPh1MlTsSubChType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 13),
    _PrtExPh1MlTsSubChType_Type()
)
prtExPh1MlTsSubChType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlTsSubChType.setStatus("current")
_PrtExPh1MlTsSubChMask_Type = Integer32
_PrtExPh1MlTsSubChMask_Object = MibTableColumn
prtExPh1MlTsSubChMask = _PrtExPh1MlTsSubChMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 14),
    _PrtExPh1MlTsSubChMask_Type()
)
prtExPh1MlTsSubChMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlTsSubChMask.setStatus("current")


class _PrtExPh1MlTsChRate_Type(Integer32):
    """Custom type prtExPh1MlTsChRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("auto", 6),
          ("notApplicable", 1),
          ("r16Kbps", 2),
          ("r32Kbps", 3),
          ("r64Kbps", 4),
          ("r8Kbps", 5))
    )


_PrtExPh1MlTsChRate_Type.__name__ = "Integer32"
_PrtExPh1MlTsChRate_Object = MibTableColumn
prtExPh1MlTsChRate = _PrtExPh1MlTsChRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 15),
    _PrtExPh1MlTsChRate_Type()
)
prtExPh1MlTsChRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlTsChRate.setStatus("current")


class _PrtExPh1MlTsByteReversal_Type(Integer32):
    """Custom type prtExPh1MlTsByteReversal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtExPh1MlTsByteReversal_Type.__name__ = "Integer32"
_PrtExPh1MlTsByteReversal_Object = MibTableColumn
prtExPh1MlTsByteReversal = _PrtExPh1MlTsByteReversal_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 16),
    _PrtExPh1MlTsByteReversal_Type()
)
prtExPh1MlTsByteReversal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlTsByteReversal.setStatus("current")


class _PrtExPh1MlTsSigProfile_Type(Integer32):
    """Custom type prtExPh1MlTsSigProfile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("p1", 3),
          ("p2", 4),
          ("p3", 5),
          ("p4", 6),
          ("p5", 7))
    )


_PrtExPh1MlTsSigProfile_Type.__name__ = "Integer32"
_PrtExPh1MlTsSigProfile_Object = MibTableColumn
prtExPh1MlTsSigProfile = _PrtExPh1MlTsSigProfile_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 17),
    _PrtExPh1MlTsSigProfile_Type()
)
prtExPh1MlTsSigProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPh1MlTsSigProfile.setStatus("current")
_PrtInPh1MlCnfgTable_Object = MibTable
prtInPh1MlCnfgTable = _PrtInPh1MlCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3)
)
if mibBuilder.loadTexts:
    prtInPh1MlCnfgTable.setStatus("current")
_PrtInPh1MlCnfgEntry_Object = MibTableRow
prtInPh1MlCnfgEntry = _PrtInPh1MlCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1)
)
prtInPh1MlCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtInPh1MlCnfgIdx"),
    (0, "RAD-MIB", "prtInPh1MlSltType"),
    (0, "RAD-MIB", "prtInPh1MlPrtIdx"),
)
if mibBuilder.loadTexts:
    prtInPh1MlCnfgEntry.setStatus("current")


class _PrtInPh1MlCnfgIdx_Type(Integer32):
    """Custom type prtInPh1MlCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtInPh1MlCnfgIdx_Type.__name__ = "Integer32"
_PrtInPh1MlCnfgIdx_Object = MibTableColumn
prtInPh1MlCnfgIdx = _PrtInPh1MlCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 1),
    _PrtInPh1MlCnfgIdx_Type()
)
prtInPh1MlCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInPh1MlCnfgIdx.setStatus("current")


class _PrtInPh1MlSltType_Type(Integer32):
    """Custom type prtInPh1MlSltType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtInPh1MlSltType_Type.__name__ = "Integer32"
_PrtInPh1MlSltType_Object = MibTableColumn
prtInPh1MlSltType = _PrtInPh1MlSltType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 2),
    _PrtInPh1MlSltType_Type()
)
prtInPh1MlSltType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInPh1MlSltType.setStatus("current")
_PrtInPh1MlPrtIdx_Type = Integer32
_PrtInPh1MlPrtIdx_Object = MibTableColumn
prtInPh1MlPrtIdx = _PrtInPh1MlPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 3),
    _PrtInPh1MlPrtIdx_Type()
)
prtInPh1MlPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInPh1MlPrtIdx.setStatus("current")


class _PrtInPh1MlConnect_Type(Integer32):
    """Custom type prtInPh1MlConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtInPh1MlConnect_Type.__name__ = "Integer32"
_PrtInPh1MlConnect_Object = MibTableColumn
prtInPh1MlConnect = _PrtInPh1MlConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 4),
    _PrtInPh1MlConnect_Type()
)
prtInPh1MlConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlConnect.setStatus("current")


class _PrtInPh1MlRate_Type(Integer32):
    """Custom type prtInPh1MlRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              65,
              66,
              67,
              68,
              69,
              70,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              100)
        )
    )
    namedValues = NamedValues(
        *(("noRate", 100),
          ("r10x56eq560Kbps", 19),
          ("r10x64eq640Kbps", 20),
          ("r11x56eq616Kbps", 21),
          ("r11x64eq704Kbps", 22),
          ("r12x56eq672Kbps", 23),
          ("r12x64eq768Kbps", 24),
          ("r13x56eq728Kbps", 25),
          ("r13x64eq832Kbps", 26),
          ("r14x56eq784Kbps", 27),
          ("r14x64eq896Kbps", 28),
          ("r15x56eq840Kbps", 29),
          ("r15x64eq960Kbps", 30),
          ("r16x56eq896Kbps", 31),
          ("r16x64eq1024Kbps", 32),
          ("r17x56eq952Kbps", 33),
          ("r17x64eq1088Kbps", 34),
          ("r18x56eq1008Kbps", 35),
          ("r18x64eq1152Kbps", 36),
          ("r19x56eq1064Kbps", 37),
          ("r19x64eq1216Kbps", 38),
          ("r1x1dot5eq1dot5M", 65),
          ("r1x2Meq2M", 73),
          ("r1x56eq56Kbps", 1),
          ("r1x64eq64Kbps", 2),
          ("r20x56eq1120Kbps", 39),
          ("r20x64eq1280Kbps", 40),
          ("r21x56eq1176Kbps", 41),
          ("r21x64eq1344Kbps", 42),
          ("r22x56eq1232Kbps", 43),
          ("r22x64eq1408Kbps", 44),
          ("r23x56eq1288Kbps", 45),
          ("r23x64eq1472Kbps", 46),
          ("r24x56eq1344Kbps", 47),
          ("r24x64eq1536Kbps", 48),
          ("r25x56eq1400Kbps", 49),
          ("r25x64eq1600Kbps", 50),
          ("r26x56eq1456Kbps", 51),
          ("r26x64eq1664Kbps", 52),
          ("r27x56eq1512Kbps", 53),
          ("r27x64eq1728Kbps", 54),
          ("r28x56eq1568Kbps", 55),
          ("r28x64eq1792Kbps", 56),
          ("r29x56eq1624Kbps", 57),
          ("r29x64eq1856Kbps", 58),
          ("r2x1dot5eq3M", 66),
          ("r2x2Meq4M", 74),
          ("r2x56eq112Kbps", 3),
          ("r2x64eq128Kbps", 4),
          ("r30x56eq1680Kbps", 59),
          ("r30x64eq1920Kbps", 60),
          ("r31x56eq1736Kbps", 61),
          ("r31x64eq1984Kbps", 62),
          ("r32x56eq1792Kbps", 63),
          ("r32x64eq2048Kbps", 64),
          ("r3x1dot5eq4dot5M", 67),
          ("r3x2Meq6M", 75),
          ("r3x56eq168Kbps", 5),
          ("r3x64eq192Kbps", 6),
          ("r4x1dot5eq6M", 68),
          ("r4x2Meq8M", 76),
          ("r4x56eq224Kbps", 7),
          ("r4x64eq256Kbps", 8),
          ("r5x1dot5eq7dot5M", 69),
          ("r5x2Meq10M", 77),
          ("r5x56eq280Kbps", 9),
          ("r5x64eq320Kbps", 10),
          ("r6x1dot5eq9M", 70),
          ("r6x2Meq12M", 78),
          ("r6x56eq336Kbps", 11),
          ("r6x64eq384Kbps", 12),
          ("r7x1dot5eq10dot5M", 71),
          ("r7x2Meq14M", 79),
          ("r7x56eq392Kbps", 13),
          ("r7x64eq448Kbps", 14),
          ("r8x1dot5eq12M", 72),
          ("r8x2Meq16M", 80),
          ("r8x56eq448Kbps", 15),
          ("r8x64eq512Kbps", 16),
          ("r9x56eq504Kbps", 17),
          ("r9x64eq576Kbps", 18))
    )


_PrtInPh1MlRate_Type.__name__ = "Integer32"
_PrtInPh1MlRate_Object = MibTableColumn
prtInPh1MlRate = _PrtInPh1MlRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 5),
    _PrtInPh1MlRate_Type()
)
prtInPh1MlRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlRate.setStatus("current")


class _PrtInPh1MlProtocol_Type(Integer32):
    """Custom type prtInPh1MlProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("ciscoBridgedEth", 6),
          ("fr", 1),
          ("frPlus", 2),
          ("hdlcSdlc", 4),
          ("pCellRelay", 3),
          ("transparentHdlc", 5))
    )


_PrtInPh1MlProtocol_Type.__name__ = "Integer32"
_PrtInPh1MlProtocol_Object = MibTableColumn
prtInPh1MlProtocol = _PrtInPh1MlProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 6),
    _PrtInPh1MlProtocol_Type()
)
prtInPh1MlProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlProtocol.setStatus("current")


class _PrtInPh1MlConnectionTyp_Type(Integer32):
    """Custom type prtInPh1MlConnectionTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("otherNet", 4),
          ("pubNet", 5),
          ("sameNetManaged", 1),
          ("sameNetNotMana", 2),
          ("user", 3))
    )


_PrtInPh1MlConnectionTyp_Type.__name__ = "Integer32"
_PrtInPh1MlConnectionTyp_Object = MibTableColumn
prtInPh1MlConnectionTyp = _PrtInPh1MlConnectionTyp_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 7),
    _PrtInPh1MlConnectionTyp_Type()
)
prtInPh1MlConnectionTyp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlConnectionTyp.setStatus("current")


class _PrtInPh1MlCongResponse_Type(Integer32):
    """Custom type prtInPh1MlCongResponse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("flowControl", 3),
          ("no", 2))
    )


_PrtInPh1MlCongResponse_Type.__name__ = "Integer32"
_PrtInPh1MlCongResponse_Object = MibTableColumn
prtInPh1MlCongResponse = _PrtInPh1MlCongResponse_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 8),
    _PrtInPh1MlCongResponse_Type()
)
prtInPh1MlCongResponse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlCongResponse.setStatus("current")
_PrtInPh1MlCongLevel_Type = Integer32
_PrtInPh1MlCongLevel_Object = MibTableColumn
prtInPh1MlCongLevel = _PrtInPh1MlCongLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 9),
    _PrtInPh1MlCongLevel_Type()
)
prtInPh1MlCongLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlCongLevel.setStatus("current")


class _PrtInPh1MlTc_Type(Integer32):
    """Custom type prtInPh1MlTc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("tc1sec", 1),
          ("tc2sec", 2),
          ("tc3sec", 3),
          ("tc4sec", 4))
    )


_PrtInPh1MlTc_Type.__name__ = "Integer32"
_PrtInPh1MlTc_Object = MibTableColumn
prtInPh1MlTc = _PrtInPh1MlTc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 10),
    _PrtInPh1MlTc_Type()
)
prtInPh1MlTc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlTc.setStatus("current")


class _PrtInPh1MlFlowControl_Type(Integer32):
    """Custom type prtInPh1MlFlowControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fecnBecn", 3),
          ("none", 2))
    )


_PrtInPh1MlFlowControl_Type.__name__ = "Integer32"
_PrtInPh1MlFlowControl_Object = MibTableColumn
prtInPh1MlFlowControl = _PrtInPh1MlFlowControl_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 11),
    _PrtInPh1MlFlowControl_Type()
)
prtInPh1MlFlowControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlFlowControl.setStatus("current")


class _PrtInPh1MlSegment_Type(Integer32):
    """Custom type prtInPh1MlSegment based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("s1180Byte", 11),
          ("s150Byte", 3),
          ("s236Byte", 7),
          ("s264Byte", 4),
          ("s36Byte", 2),
          ("s378Byte", 5),
          ("s472Byte", 8),
          ("s492Byte", 6),
          ("s708Byte", 9),
          ("s944Byte", 10))
    )


_PrtInPh1MlSegment_Type.__name__ = "Integer32"
_PrtInPh1MlSegment_Object = MibTableColumn
prtInPh1MlSegment = _PrtInPh1MlSegment_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 12),
    _PrtInPh1MlSegment_Type()
)
prtInPh1MlSegment.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlSegment.setStatus("current")


class _PrtInPh1MlFrMngProt_Type(Integer32):
    """Custom type prtInPh1MlFrMngProt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("annexA", 5),
          ("ansiT1", 4),
          ("lmi", 3),
          ("none", 2),
          ("notApplicable", 1))
    )


_PrtInPh1MlFrMngProt_Type.__name__ = "Integer32"
_PrtInPh1MlFrMngProt_Object = MibTableColumn
prtInPh1MlFrMngProt = _PrtInPh1MlFrMngProt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 13),
    _PrtInPh1MlFrMngProt_Type()
)
prtInPh1MlFrMngProt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlFrMngProt.setStatus("current")


class _PrtInPh1MlEnqPeriod_Type(Integer32):
    """Custom type prtInPh1MlEnqPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30),
    )


_PrtInPh1MlEnqPeriod_Type.__name__ = "Integer32"
_PrtInPh1MlEnqPeriod_Object = MibTableColumn
prtInPh1MlEnqPeriod = _PrtInPh1MlEnqPeriod_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 14),
    _PrtInPh1MlEnqPeriod_Type()
)
prtInPh1MlEnqPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlEnqPeriod.setStatus("current")


class _PrtInPh1MlFullRptPeriod_Type(Integer32):
    """Custom type prtInPh1MlFullRptPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_PrtInPh1MlFullRptPeriod_Type.__name__ = "Integer32"
_PrtInPh1MlFullRptPeriod_Object = MibTableColumn
prtInPh1MlFullRptPeriod = _PrtInPh1MlFullRptPeriod_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 15),
    _PrtInPh1MlFullRptPeriod_Type()
)
prtInPh1MlFullRptPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlFullRptPeriod.setStatus("current")


class _PrtInPh1MlFrWindowSize_Type(Integer32):
    """Custom type prtInPh1MlFrWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_PrtInPh1MlFrWindowSize_Type.__name__ = "Integer32"
_PrtInPh1MlFrWindowSize_Object = MibTableColumn
prtInPh1MlFrWindowSize = _PrtInPh1MlFrWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 16),
    _PrtInPh1MlFrWindowSize_Type()
)
prtInPh1MlFrWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlFrWindowSize.setStatus("current")


class _PrtInPh1MlErrorsThreshold_Type(Integer32):
    """Custom type prtInPh1MlErrorsThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_PrtInPh1MlErrorsThreshold_Type.__name__ = "Integer32"
_PrtInPh1MlErrorsThreshold_Object = MibTableColumn
prtInPh1MlErrorsThreshold = _PrtInPh1MlErrorsThreshold_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 17),
    _PrtInPh1MlErrorsThreshold_Type()
)
prtInPh1MlErrorsThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlErrorsThreshold.setStatus("current")


class _PrtInPh1MlMaxIdleTime_Type(Integer32):
    """Custom type prtInPh1MlMaxIdleTime based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1800),
    )


_PrtInPh1MlMaxIdleTime_Type.__name__ = "Integer32"
_PrtInPh1MlMaxIdleTime_Object = MibTableColumn
prtInPh1MlMaxIdleTime = _PrtInPh1MlMaxIdleTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 18),
    _PrtInPh1MlMaxIdleTime_Type()
)
prtInPh1MlMaxIdleTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlMaxIdleTime.setStatus("current")


class _PrtInPh1MlBearerCh_Type(Integer32):
    """Custom type prtInPh1MlBearerCh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4,
              5,
              255)
        )
    )
    namedValues = NamedValues(
        *(("chB1andchB2", 5),
          ("channelB1", 3),
          ("channelB2", 4),
          ("none", 255),
          ("notApplicable", 1))
    )


_PrtInPh1MlBearerCh_Type.__name__ = "Integer32"
_PrtInPh1MlBearerCh_Object = MibTableColumn
prtInPh1MlBearerCh = _PrtInPh1MlBearerCh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 19),
    _PrtInPh1MlBearerCh_Type()
)
prtInPh1MlBearerCh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlBearerCh.setStatus("current")


class _PrtInPh1MlAssociatedExCh_Type(Integer32):
    """Custom type prtInPh1MlAssociatedExCh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("notApplicable", 255))
    )


_PrtInPh1MlAssociatedExCh_Type.__name__ = "Integer32"
_PrtInPh1MlAssociatedExCh_Object = MibTableColumn
prtInPh1MlAssociatedExCh = _PrtInPh1MlAssociatedExCh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 20),
    _PrtInPh1MlAssociatedExCh_Type()
)
prtInPh1MlAssociatedExCh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlAssociatedExCh.setStatus("current")


class _PrtInPh1MlClockEncoding_Type(Integer32):
    """Custom type prtInPh1MlClockEncoding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("diffManchester", 6),
          ("fm0", 4),
          ("manchester", 5),
          ("notApplicable", 1),
          ("nrz", 2),
          ("nrzI", 3))
    )


_PrtInPh1MlClockEncoding_Type.__name__ = "Integer32"
_PrtInPh1MlClockEncoding_Object = MibTableColumn
prtInPh1MlClockEncoding = _PrtInPh1MlClockEncoding_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 21),
    _PrtInPh1MlClockEncoding_Type()
)
prtInPh1MlClockEncoding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlClockEncoding.setStatus("current")


class _PrtInPh1MlMinSeparators_Type(Integer32):
    """Custom type prtInPh1MlMinSeparators based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_PrtInPh1MlMinSeparators_Type.__name__ = "Integer32"
_PrtInPh1MlMinSeparators_Object = MibTableColumn
prtInPh1MlMinSeparators = _PrtInPh1MlMinSeparators_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 22),
    _PrtInPh1MlMinSeparators_Type()
)
prtInPh1MlMinSeparators.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlMinSeparators.setStatus("current")


class _PrtInPh1MlCcittCrc_Type(Integer32):
    """Custom type prtInPh1MlCcittCrc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("crc16", 2),
          ("crc32", 3),
          ("notApplicable", 1))
    )


_PrtInPh1MlCcittCrc_Type.__name__ = "Integer32"
_PrtInPh1MlCcittCrc_Object = MibTableColumn
prtInPh1MlCcittCrc = _PrtInPh1MlCcittCrc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 23),
    _PrtInPh1MlCcittCrc_Type()
)
prtInPh1MlCcittCrc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlCcittCrc.setStatus("current")


class _PrtInPh1MlFrameSeparator_Type(Integer32):
    """Custom type prtInPh1MlFrameSeparator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("flags", 3),
          ("idles", 2),
          ("notApplicable", 1))
    )


_PrtInPh1MlFrameSeparator_Type.__name__ = "Integer32"
_PrtInPh1MlFrameSeparator_Object = MibTableColumn
prtInPh1MlFrameSeparator = _PrtInPh1MlFrameSeparator_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 24),
    _PrtInPh1MlFrameSeparator_Type()
)
prtInPh1MlFrameSeparator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlFrameSeparator.setStatus("current")
_PrtInPh1MlDlciTable_Object = MibTable
prtInPh1MlDlciTable = _PrtInPh1MlDlciTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4)
)
if mibBuilder.loadTexts:
    prtInPh1MlDlciTable.setStatus("current")
_PrtInPh1MlDlciEntry_Object = MibTableRow
prtInPh1MlDlciEntry = _PrtInPh1MlDlciEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1)
)
prtInPh1MlDlciEntry.setIndexNames(
    (0, "RAD-MIB", "prtInPh1MlDlciCnfgIdx"),
    (0, "RAD-MIB", "prtInPh1MlDlciSltIdx"),
    (0, "RAD-MIB", "prtInPh1MlDlciPrtIdx"),
    (0, "RAD-MIB", "prtInPh1MlDlciIdx"),
)
if mibBuilder.loadTexts:
    prtInPh1MlDlciEntry.setStatus("current")


class _PrtInPh1MlDlciCnfgIdx_Type(Integer32):
    """Custom type prtInPh1MlDlciCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtInPh1MlDlciCnfgIdx_Type.__name__ = "Integer32"
_PrtInPh1MlDlciCnfgIdx_Object = MibTableColumn
prtInPh1MlDlciCnfgIdx = _PrtInPh1MlDlciCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 1),
    _PrtInPh1MlDlciCnfgIdx_Type()
)
prtInPh1MlDlciCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInPh1MlDlciCnfgIdx.setStatus("current")


class _PrtInPh1MlDlciSltIdx_Type(Integer32):
    """Custom type prtInPh1MlDlciSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtInPh1MlDlciSltIdx_Type.__name__ = "Integer32"
_PrtInPh1MlDlciSltIdx_Object = MibTableColumn
prtInPh1MlDlciSltIdx = _PrtInPh1MlDlciSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 2),
    _PrtInPh1MlDlciSltIdx_Type()
)
prtInPh1MlDlciSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInPh1MlDlciSltIdx.setStatus("current")


class _PrtInPh1MlDlciPrtIdx_Type(Integer32):
    """Custom type prtInPh1MlDlciPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(101,
              102,
              103)
        )
    )
    namedValues = NamedValues(
        *(("inPrt1", 101),
          ("inPrt2", 102),
          ("inPrt3", 103))
    )


_PrtInPh1MlDlciPrtIdx_Type.__name__ = "Integer32"
_PrtInPh1MlDlciPrtIdx_Object = MibTableColumn
prtInPh1MlDlciPrtIdx = _PrtInPh1MlDlciPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 3),
    _PrtInPh1MlDlciPrtIdx_Type()
)
prtInPh1MlDlciPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInPh1MlDlciPrtIdx.setStatus("current")


class _PrtInPh1MlDlciIdx_Type(Integer32):
    """Custom type prtInPh1MlDlciIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 991),
    )


_PrtInPh1MlDlciIdx_Type.__name__ = "Integer32"
_PrtInPh1MlDlciIdx_Object = MibTableColumn
prtInPh1MlDlciIdx = _PrtInPh1MlDlciIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 4),
    _PrtInPh1MlDlciIdx_Type()
)
prtInPh1MlDlciIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInPh1MlDlciIdx.setStatus("current")


class _PrtInPh1MlDlciValid_Type(Integer32):
    """Custom type prtInPh1MlDlciValid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtInPh1MlDlciValid_Type.__name__ = "Integer32"
_PrtInPh1MlDlciValid_Object = MibTableColumn
prtInPh1MlDlciValid = _PrtInPh1MlDlciValid_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 5),
    _PrtInPh1MlDlciValid_Type()
)
prtInPh1MlDlciValid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlDlciValid.setStatus("current")


class _PrtInPh1MlDlciIConSlt_Type(Integer32):
    """Custom type prtInPh1MlDlciIConSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("cl", 3),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("noConnect", 2))
    )


_PrtInPh1MlDlciIConSlt_Type.__name__ = "Integer32"
_PrtInPh1MlDlciIConSlt_Object = MibTableColumn
prtInPh1MlDlciIConSlt = _PrtInPh1MlDlciIConSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 6),
    _PrtInPh1MlDlciIConSlt_Type()
)
prtInPh1MlDlciIConSlt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlDlciIConSlt.setStatus("current")


class _PrtInPh1MlDlciIConPrt_Type(Integer32):
    """Custom type prtInPh1MlDlciIConPrt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112)
        )
    )
    namedValues = NamedValues(
        *(("clNMS", 99),
          ("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9),
          ("inPrt1", 101),
          ("inPrt10", 110),
          ("inPrt11", 111),
          ("inPrt12", 112),
          ("inPrt2", 102),
          ("inPrt3", 103),
          ("inPrt4", 104),
          ("inPrt5", 105),
          ("inPrt6", 106),
          ("inPrt7", 107),
          ("inPrt8", 108),
          ("inPrt9", 109),
          ("noConnect", 100))
    )


_PrtInPh1MlDlciIConPrt_Type.__name__ = "Integer32"
_PrtInPh1MlDlciIConPrt_Object = MibTableColumn
prtInPh1MlDlciIConPrt = _PrtInPh1MlDlciIConPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 7),
    _PrtInPh1MlDlciIConPrt_Type()
)
prtInPh1MlDlciIConPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlDlciIConPrt.setStatus("current")


class _PrtInPh1MlDlciIConDlci_Type(Integer32):
    """Custom type prtInPh1MlDlciIConDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 991),
    )


_PrtInPh1MlDlciIConDlci_Type.__name__ = "Integer32"
_PrtInPh1MlDlciIConDlci_Object = MibTableColumn
prtInPh1MlDlciIConDlci = _PrtInPh1MlDlciIConDlci_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 8),
    _PrtInPh1MlDlciIConDlci_Type()
)
prtInPh1MlDlciIConDlci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlDlciIConDlci.setStatus("current")


class _PrtInPh1MlDlciTxBc_Type(Integer32):
    """Custom type prtInPh1MlDlciTxBc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("txBc1024Kbps", 21),
          ("txBc128Kbps", 13),
          ("txBc14200bps", 4),
          ("txBc19200bps", 5),
          ("txBc192Kbps", 14),
          ("txBc256Kbps", 15),
          ("txBc28800bps", 6),
          ("txBc32000bps", 7),
          ("txBc320Kbps", 16),
          ("txBc38400bps", 8),
          ("txBc384Kbps", 17),
          ("txBc448Kbps", 18),
          ("txBc48000bps", 9),
          ("txBc512Kbps", 19),
          ("txBc56000bps", 10),
          ("txBc57600bps", 11),
          ("txBc64Kbps", 12),
          ("txBc768Kbps", 20),
          ("txBc9600bps", 3),
          ("zero", 2))
    )


_PrtInPh1MlDlciTxBc_Type.__name__ = "Integer32"
_PrtInPh1MlDlciTxBc_Object = MibTableColumn
prtInPh1MlDlciTxBc = _PrtInPh1MlDlciTxBc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 9),
    _PrtInPh1MlDlciTxBc_Type()
)
prtInPh1MlDlciTxBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlDlciTxBc.setStatus("current")


class _PrtInPh1MlDlciTxBe_Type(Integer32):
    """Custom type prtInPh1MlDlciTxBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("txBe1024Kbps", 21),
          ("txBe128Kbps", 13),
          ("txBe14200bps", 4),
          ("txBe19200bps", 5),
          ("txBe192Kbps", 14),
          ("txBe256Kbps", 15),
          ("txBe28800bps", 6),
          ("txBe32000bps", 7),
          ("txBe320Kbps", 16),
          ("txBe38400bps", 8),
          ("txBe384Kbps", 17),
          ("txBe448Kbps", 18),
          ("txBe48000bps", 9),
          ("txBe512Kbps", 19),
          ("txBe56000bps", 10),
          ("txBe57600bps", 11),
          ("txBe64Kbps", 12),
          ("txBe768Kbps", 20),
          ("txBe9600bps", 3),
          ("zero", 2))
    )


_PrtInPh1MlDlciTxBe_Type.__name__ = "Integer32"
_PrtInPh1MlDlciTxBe_Object = MibTableColumn
prtInPh1MlDlciTxBe = _PrtInPh1MlDlciTxBe_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 10),
    _PrtInPh1MlDlciTxBe_Type()
)
prtInPh1MlDlciTxBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlDlciTxBe.setStatus("current")


class _PrtInPh1MlDlciRxBc_Type(Integer32):
    """Custom type prtInPh1MlDlciRxBc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("rxBc1024Kbps", 21),
          ("rxBc128Kbps", 13),
          ("rxBc14200bps", 4),
          ("rxBc19200bps", 5),
          ("rxBc192Kbps", 14),
          ("rxBc256Kbps", 15),
          ("rxBc28800bps", 6),
          ("rxBc32000bps", 7),
          ("rxBc320Kbps", 16),
          ("rxBc38400bps", 8),
          ("rxBc384Kbps", 17),
          ("rxBc448Kbps", 18),
          ("rxBc48000bps", 9),
          ("rxBc512Kbps", 19),
          ("rxBc56000bps", 10),
          ("rxBc57600bps", 11),
          ("rxBc64Kbps", 12),
          ("rxBc768Kbps", 20),
          ("rxBc9600bps", 3),
          ("zero", 2))
    )


_PrtInPh1MlDlciRxBc_Type.__name__ = "Integer32"
_PrtInPh1MlDlciRxBc_Object = MibTableColumn
prtInPh1MlDlciRxBc = _PrtInPh1MlDlciRxBc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 11),
    _PrtInPh1MlDlciRxBc_Type()
)
prtInPh1MlDlciRxBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlDlciRxBc.setStatus("current")


class _PrtInPh1MlDlciRxBe_Type(Integer32):
    """Custom type prtInPh1MlDlciRxBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("rxBe1024Kbps", 21),
          ("rxBe128Kbps", 13),
          ("rxBe14200bps", 4),
          ("rxBe19200bps", 5),
          ("rxBe192Kbps", 14),
          ("rxBe256Kbps", 15),
          ("rxBe28800bps", 6),
          ("rxBe32000bps", 7),
          ("rxBe320Kbps", 16),
          ("rxBe38400bps", 8),
          ("rxBe384Kbps", 17),
          ("rxBe448Kbps", 18),
          ("rxBe48000bps", 9),
          ("rxBe512Kbps", 19),
          ("rxBe56000bps", 10),
          ("rxBe57600bps", 11),
          ("rxBe64Kbps", 12),
          ("rxBe768Kbps", 20),
          ("rxBe9600bps", 3),
          ("zero", 2))
    )


_PrtInPh1MlDlciRxBe_Type.__name__ = "Integer32"
_PrtInPh1MlDlciRxBe_Object = MibTableColumn
prtInPh1MlDlciRxBe = _PrtInPh1MlDlciRxBe_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 12),
    _PrtInPh1MlDlciRxBe_Type()
)
prtInPh1MlDlciRxBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlDlciRxBe.setStatus("current")


class _PrtInPh1MlDlciPriority_Type(Integer32):
    """Custom type prtInPh1MlDlciPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_PrtInPh1MlDlciPriority_Type.__name__ = "Integer32"
_PrtInPh1MlDlciPriority_Object = MibTableColumn
prtInPh1MlDlciPriority = _PrtInPh1MlDlciPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 13),
    _PrtInPh1MlDlciPriority_Type()
)
prtInPh1MlDlciPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInPh1MlDlciPriority.setStatus("current")


class _PrtInPh1MlDlciStatus_Type(Integer32):
    """Custom type prtInPh1MlDlciStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("connected", 2),
          ("disconnected", 1))
    )


_PrtInPh1MlDlciStatus_Type.__name__ = "Integer32"
_PrtInPh1MlDlciStatus_Object = MibTableColumn
prtInPh1MlDlciStatus = _PrtInPh1MlDlciStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 14),
    _PrtInPh1MlDlciStatus_Type()
)
prtInPh1MlDlciStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInPh1MlDlciStatus.setStatus("current")
_PrtPhMlCnfgTable_Object = MibTable
prtPhMlCnfgTable = _PrtPhMlCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5)
)
if mibBuilder.loadTexts:
    prtPhMlCnfgTable.setStatus("current")
_PrtPhMlCnfgEntry_Object = MibTableRow
prtPhMlCnfgEntry = _PrtPhMlCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1)
)
prtPhMlCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtPhMlCnfgIdx"),
    (0, "RAD-MIB", "prtPhMlSltIdx"),
    (0, "RAD-MIB", "prtPhMlPrtIdx"),
)
if mibBuilder.loadTexts:
    prtPhMlCnfgEntry.setStatus("current")


class _PrtPhMlCnfgIdx_Type(Integer32):
    """Custom type prtPhMlCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtPhMlCnfgIdx_Type.__name__ = "Integer32"
_PrtPhMlCnfgIdx_Object = MibTableColumn
prtPhMlCnfgIdx = _PrtPhMlCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 1),
    _PrtPhMlCnfgIdx_Type()
)
prtPhMlCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhMlCnfgIdx.setStatus("current")


class _PrtPhMlSltIdx_Type(Integer32):
    """Custom type prtPhMlSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 1))
    )


_PrtPhMlSltIdx_Type.__name__ = "Integer32"
_PrtPhMlSltIdx_Object = MibTableColumn
prtPhMlSltIdx = _PrtPhMlSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 2),
    _PrtPhMlSltIdx_Type()
)
prtPhMlSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhMlSltIdx.setStatus("current")


class _PrtPhMlPrtIdx_Type(Integer32):
    """Custom type prtPhMlPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("exPrt1", 1)
    )


_PrtPhMlPrtIdx_Type.__name__ = "Integer32"
_PrtPhMlPrtIdx_Object = MibTableColumn
prtPhMlPrtIdx = _PrtPhMlPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 3),
    _PrtPhMlPrtIdx_Type()
)
prtPhMlPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPhMlPrtIdx.setStatus("current")


class _PrtPhMlConnect_Type(Integer32):
    """Custom type prtPhMlConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtPhMlConnect_Type.__name__ = "Integer32"
_PrtPhMlConnect_Object = MibTableColumn
prtPhMlConnect = _PrtPhMlConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 4),
    _PrtPhMlConnect_Type()
)
prtPhMlConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlConnect.setStatus("current")


class _PrtPhMlRate_Type(Integer32):
    """Custom type prtPhMlRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              4,
              6,
              8,
              10,
              12,
              14,
              16,
              18,
              20,
              22,
              24,
              26,
              28,
              30,
              32,
              34,
              36,
              38,
              40,
              42,
              44,
              46,
              48,
              50,
              52,
              54,
              56,
              58,
              60,
              62,
              64,
              70)
        )
    )
    namedValues = NamedValues(
        *(("auto", 70),
          ("r10x64eq640Kbps", 20),
          ("r11x64eq704Kbps", 22),
          ("r12x64eq768Kbps", 24),
          ("r13x64eq832Kbps", 26),
          ("r14x64eq896Kbps", 28),
          ("r15x64eq960Kbps", 30),
          ("r16x64eq1024Kbps", 32),
          ("r17x64eq1088Kbps", 34),
          ("r18x64eq1152Kbps", 36),
          ("r19x64eq1216Kbps", 38),
          ("r1x64eq64Kbps", 2),
          ("r20x64eq1280Kbps", 40),
          ("r21x64eq1344Kbps", 42),
          ("r22x64eq1408Kbps", 44),
          ("r23x64eq1472Kbps", 46),
          ("r24x64eq1536Kbps", 48),
          ("r25x64eq1600Kbps", 50),
          ("r26x64eq1664Kbps", 52),
          ("r27x64eq1728Kbps", 54),
          ("r28x64eq1792Kbps", 56),
          ("r29x64eq1856Kbps", 58),
          ("r2x64eq128Kbps", 4),
          ("r30x64eq1920Kbps", 60),
          ("r31x64eq1984Kbps", 62),
          ("r32x64eq2048Kbps", 64),
          ("r3x64eq192Kbps", 6),
          ("r4x64eq256Kbps", 8),
          ("r5x64eq320Kbps", 10),
          ("r6x64eq384Kbps", 12),
          ("r7x64eq448Kbps", 14),
          ("r8x64eq512Kbps", 16),
          ("r9x64eq576Kbps", 18))
    )


_PrtPhMlRate_Type.__name__ = "Integer32"
_PrtPhMlRate_Object = MibTableColumn
prtPhMlRate = _PrtPhMlRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 5),
    _PrtPhMlRate_Type()
)
prtPhMlRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlRate.setStatus("current")


class _PrtPhMlCAS_Type(Integer32):
    """Custom type prtPhMlCAS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtPhMlCAS_Type.__name__ = "Integer32"
_PrtPhMlCAS_Object = MibTableColumn
prtPhMlCAS = _PrtPhMlCAS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 6),
    _PrtPhMlCAS_Type()
)
prtPhMlCAS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlCAS.setStatus("current")


class _PrtPhMlClockMode_Type(Integer32):
    """Custom type prtPhMlClockMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dce", 2),
          ("dte", 4),
          ("ext-dce", 3))
    )


_PrtPhMlClockMode_Type.__name__ = "Integer32"
_PrtPhMlClockMode_Object = MibTableColumn
prtPhMlClockMode = _PrtPhMlClockMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 7),
    _PrtPhMlClockMode_Type()
)
prtPhMlClockMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlClockMode.setStatus("current")


class _PrtPhMlSatBuffer_Type(Integer32):
    """Custom type prtPhMlSatBuffer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtPhMlSatBuffer_Type.__name__ = "Integer32"
_PrtPhMlSatBuffer_Object = MibTableColumn
prtPhMlSatBuffer = _PrtPhMlSatBuffer_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 8),
    _PrtPhMlSatBuffer_Type()
)
prtPhMlSatBuffer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlSatBuffer.setStatus("current")


class _PrtPhMlDialProcess_Type(Integer32):
    """Custom type prtPhMlDialProcess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("callIn", 3),
          ("callOut", 4),
          ("no", 2),
          ("notApplicable", 1))
    )


_PrtPhMlDialProcess_Type.__name__ = "Integer32"
_PrtPhMlDialProcess_Object = MibTableColumn
prtPhMlDialProcess = _PrtPhMlDialProcess_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 9),
    _PrtPhMlDialProcess_Type()
)
prtPhMlDialProcess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlDialProcess.setStatus("current")


class _PrtPhMlSyncRestore_Type(Integer32):
    """Custom type prtPhMlSyncRestore based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_PrtPhMlSyncRestore_Type.__name__ = "Integer32"
_PrtPhMlSyncRestore_Object = MibTableColumn
prtPhMlSyncRestore = _PrtPhMlSyncRestore_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 10),
    _PrtPhMlSyncRestore_Type()
)
prtPhMlSyncRestore.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlSyncRestore.setStatus("current")


class _PrtPhMlBus_Type(Integer32):
    """Custom type prtPhMlBus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("busA", 2),
          ("busB", 3),
          ("none", 1))
    )


_PrtPhMlBus_Type.__name__ = "Integer32"
_PrtPhMlBus_Object = MibTableColumn
prtPhMlBus = _PrtPhMlBus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 11),
    _PrtPhMlBus_Type()
)
prtPhMlBus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlBus.setStatus("current")


class _PrtPhMlMfSyncSlot_Type(Integer32):
    """Custom type prtPhMlMfSyncSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("none", 2))
    )


_PrtPhMlMfSyncSlot_Type.__name__ = "Integer32"
_PrtPhMlMfSyncSlot_Object = MibTableColumn
prtPhMlMfSyncSlot = _PrtPhMlMfSyncSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 12),
    _PrtPhMlMfSyncSlot_Type()
)
prtPhMlMfSyncSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlMfSyncSlot.setStatus("current")


class _PrtPhMlClockSource_Type(Integer32):
    """Custom type prtPhMlClockSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("rxClock", 3),
          ("txClock", 2))
    )


_PrtPhMlClockSource_Type.__name__ = "Integer32"
_PrtPhMlClockSource_Object = MibTableColumn
prtPhMlClockSource = _PrtPhMlClockSource_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 13),
    _PrtPhMlClockSource_Type()
)
prtPhMlClockSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlClockSource.setStatus("current")


class _PrtPhMlErrCorrection_Type(Integer32):
    """Custom type prtPhMlErrCorrection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtPhMlErrCorrection_Type.__name__ = "Integer32"
_PrtPhMlErrCorrection_Object = MibTableColumn
prtPhMlErrCorrection = _PrtPhMlErrCorrection_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 14),
    _PrtPhMlErrCorrection_Type()
)
prtPhMlErrCorrection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlErrCorrection.setStatus("current")


class _PrtPhMlCorrectionMode_Type(Integer32):
    """Custom type prtPhMlCorrectionMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bursty", 3),
          ("notApplicable", 1),
          ("random", 2))
    )


_PrtPhMlCorrectionMode_Type.__name__ = "Integer32"
_PrtPhMlCorrectionMode_Object = MibTableColumn
prtPhMlCorrectionMode = _PrtPhMlCorrectionMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 15),
    _PrtPhMlCorrectionMode_Type()
)
prtPhMlCorrectionMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlCorrectionMode.setStatus("current")


class _PrtPhMlControlSignals_Type(Integer32):
    """Custom type prtPhMlControlSignals based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ignore", 2),
          ("implement", 3),
          ("notApplicable", 1))
    )


_PrtPhMlControlSignals_Type.__name__ = "Integer32"
_PrtPhMlControlSignals_Object = MibTableColumn
prtPhMlControlSignals = _PrtPhMlControlSignals_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 16),
    _PrtPhMlControlSignals_Type()
)
prtPhMlControlSignals.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlControlSignals.setStatus("current")


class _PrtPhMlInterfaceType_Type(Integer32):
    """Custom type prtPhMlInterfaceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("ei530", 6),
          ("ei530a", 7),
          ("notApplicable", 1),
          ("rs232", 4),
          ("rs449", 5),
          ("v35", 2),
          ("x21", 3))
    )


_PrtPhMlInterfaceType_Type.__name__ = "Integer32"
_PrtPhMlInterfaceType_Object = MibTableColumn
prtPhMlInterfaceType = _PrtPhMlInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 17),
    _PrtPhMlInterfaceType_Type()
)
prtPhMlInterfaceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlInterfaceType.setStatus("current")


class _PrtPhMlClockPolarity_Type(Integer32):
    """Custom type prtPhMlClockPolarity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("inverted", 3),
          ("normal", 2),
          ("notApplicable", 1))
    )


_PrtPhMlClockPolarity_Type.__name__ = "Integer32"
_PrtPhMlClockPolarity_Object = MibTableColumn
prtPhMlClockPolarity = _PrtPhMlClockPolarity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 18),
    _PrtPhMlClockPolarity_Type()
)
prtPhMlClockPolarity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPhMlClockPolarity.setStatus("current")
_PrtPhPlCnfg_ObjectIdentity = ObjectIdentity
prtPhPlCnfg = _PrtPhPlCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3)
)
_PrtExPhPlCnfgTable_Object = MibTable
prtExPhPlCnfgTable = _PrtExPhPlCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1)
)
if mibBuilder.loadTexts:
    prtExPhPlCnfgTable.setStatus("current")
_PrtExPhPlCnfgEntry_Object = MibTableRow
prtExPhPlCnfgEntry = _PrtExPhPlCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1)
)
prtExPhPlCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtExPhPlCnfgIdx"),
    (0, "RAD-MIB", "prtExPhPlSltIdx"),
    (0, "RAD-MIB", "prtExPhPlPrtIdx"),
)
if mibBuilder.loadTexts:
    prtExPhPlCnfgEntry.setStatus("current")


class _PrtExPhPlCnfgIdx_Type(Integer32):
    """Custom type prtExPhPlCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExPhPlCnfgIdx_Type.__name__ = "Integer32"
_PrtExPhPlCnfgIdx_Object = MibTableColumn
prtExPhPlCnfgIdx = _PrtExPhPlCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 1),
    _PrtExPhPlCnfgIdx_Type()
)
prtExPhPlCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPhPlCnfgIdx.setStatus("current")


class _PrtExPhPlSltIdx_Type(Integer32):
    """Custom type prtExPhPlSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtExPhPlSltIdx_Type.__name__ = "Integer32"
_PrtExPhPlSltIdx_Object = MibTableColumn
prtExPhPlSltIdx = _PrtExPhPlSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 2),
    _PrtExPhPlSltIdx_Type()
)
prtExPhPlSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPhPlSltIdx.setStatus("current")


class _PrtExPhPlPrtIdx_Type(Integer32):
    """Custom type prtExPhPlPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6))
    )


_PrtExPhPlPrtIdx_Type.__name__ = "Integer32"
_PrtExPhPlPrtIdx_Object = MibTableColumn
prtExPhPlPrtIdx = _PrtExPhPlPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 3),
    _PrtExPhPlPrtIdx_Type()
)
prtExPhPlPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPhPlPrtIdx.setStatus("current")


class _PrtExPhPlConnect_Type(Integer32):
    """Custom type prtExPhPlConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExPhPlConnect_Type.__name__ = "Integer32"
_PrtExPhPlConnect_Object = MibTableColumn
prtExPhPlConnect = _PrtExPhPlConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 4),
    _PrtExPhPlConnect_Type()
)
prtExPhPlConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlConnect.setStatus("current")


class _PrtExPhPlHRate_Type(Integer32):
    """Custom type prtExPhPlHRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              65,
              66,
              67,
              68,
              69,
              70,
              71,
              72,
              73)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("r1008KbpsLE", 34),
          ("r1024KbpsE", 35),
          ("r1064KbpsE", 36),
          ("r1088KbpsE", 37),
          ("r1120KbpsE", 38),
          ("r112KbpsNLE", 6),
          ("r1152KbpsLE", 39),
          ("r115d2KbpsNLE", 72),
          ("r1176KbpsE", 40),
          ("r1216KbpsE", 41),
          ("r1232KbpsE", 42),
          ("r1280KbpsE", 43),
          ("r1288KbpsE", 44),
          ("r128KbpsNLE", 7),
          ("r1344KbpsNLE", 45),
          ("r1400KbpsE", 46),
          ("r1408KbpsE", 47),
          ("r1456KbpsE", 48),
          ("r1472KbpsE", 49),
          ("r14d4KbpsNLE", 66),
          ("r1512KbpsE", 50),
          ("r1536KbpsE", 51),
          ("r1568KbpsE", 52),
          ("r1600KbpsE", 53),
          ("r1624KbpsE", 54),
          ("r1664KbpsE", 55),
          ("r1680KbpsE", 56),
          ("r168KbpsNLE", 8),
          ("r16KbpsNLE", 67),
          ("r1728KbpsE", 57),
          ("r1736KbpsE", 58),
          ("r1792KbpsNLE", 59),
          ("r1856KbpsE", 60),
          ("r1920KbpsE", 61),
          ("r192KbpsNLE", 9),
          ("r1984KbpsE", 62),
          ("r19d2KbpsNLE", 68),
          ("r2048KbpsE", 63),
          ("r224KbpsNLE", 10),
          ("r24000bps", 73),
          ("r256KbpsNLE", 11),
          ("r280KbpsE", 12),
          ("r28d8KbpsNLE", 69),
          ("r320KbpsE", 13),
          ("r32KbpsNLE", 2),
          ("r336KbpsNLE", 14),
          ("r384KbpsNLE", 15),
          ("r38d4KbpsNLE", 70),
          ("r392KbpsE", 16),
          ("r448KbpsNLE", 17),
          ("r48KbpsNLE", 3),
          ("r504KbpsLE", 18),
          ("r512KbpsE", 19),
          ("r560KbpsE", 20),
          ("r56KbpsNLE", 4),
          ("r576KbpsLE", 21),
          ("r57d6KbpsNLE", 71),
          ("r616KbpsE", 22),
          ("r640KbpsE", 23),
          ("r64KbpsNLE", 5),
          ("r672KbpsNLE", 24),
          ("r704KbpsE", 25),
          ("r728KbpsE", 26),
          ("r768KbpsNLE", 27),
          ("r784KbpsE", 28),
          ("r832KbpsE", 29),
          ("r840KbpsE", 30),
          ("r896KbpsNLE", 31),
          ("r952KbpsE", 32),
          ("r960KbpsE", 33),
          ("r9d6KbpsNLE", 65))
    )


_PrtExPhPlHRate_Type.__name__ = "Integer32"
_PrtExPhPlHRate_Object = MibTableColumn
prtExPhPlHRate = _PrtExPhPlHRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 5),
    _PrtExPhPlHRate_Type()
)
prtExPhPlHRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlHRate.setStatus("current")


class _PrtExPhPlLRate_Type(Integer32):
    """Custom type prtExPhPlLRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("r100bpsNLE", 21),
          ("r112000bps", 18),
          ("r115200bps", 19),
          ("r1200bpsNLE", 5),
          ("r128000bps", 22),
          ("r14400bpsLE", 9),
          ("r16000bpsNLE", 20),
          ("r19200bpsNLE", 10),
          ("r24000bps", 23),
          ("r2400bpsNLE", 6),
          ("r28800bpsLE", 11),
          ("r300bpsNLE", 2),
          ("r32000bpsNLE", 12),
          ("r38400bpsNLE", 13),
          ("r48000bpsNLE", 14),
          ("r4800bpsNLE", 7),
          ("r56000bpsNLE", 15),
          ("r57600bpsLE", 16),
          ("r600bpsNLE", 3),
          ("r64000bpsNLE", 17),
          ("r800bpsNLE", 4),
          ("r9600bpsNLE", 8))
    )


_PrtExPhPlLRate_Type.__name__ = "Integer32"
_PrtExPhPlLRate_Object = MibTableColumn
prtExPhPlLRate = _PrtExPhPlLRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 6),
    _PrtExPhPlLRate_Type()
)
prtExPhPlLRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlLRate.setStatus("current")


class _PrtExPhPlProtocol_Type(Integer32):
    """Custom type prtExPhPlProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("activePPP", 8),
          ("async", 6),
          ("asyncReliable", 7),
          ("fr", 1),
          ("frPlus", 2),
          ("ft1Dot2", 14),
          ("hdlcSdlc", 4),
          ("pCellRelay", 3),
          ("pppAgent", 10),
          ("slip", 9),
          ("slipAgent", 11),
          ("sna", 13),
          ("transparent", 12),
          ("transparentHdlc", 5))
    )


_PrtExPhPlProtocol_Type.__name__ = "Integer32"
_PrtExPhPlProtocol_Object = MibTableColumn
prtExPhPlProtocol = _PrtExPhPlProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 7),
    _PrtExPhPlProtocol_Type()
)
prtExPhPlProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlProtocol.setStatus("current")


class _PrtExPhPlConnectionTyp_Type(Integer32):
    """Custom type prtExPhPlConnectionTyp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("otherNet", 4),
          ("pubNet", 5),
          ("sameNetManaged", 1),
          ("sameNetNotMana", 2),
          ("user", 3))
    )


_PrtExPhPlConnectionTyp_Type.__name__ = "Integer32"
_PrtExPhPlConnectionTyp_Object = MibTableColumn
prtExPhPlConnectionTyp = _PrtExPhPlConnectionTyp_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 8),
    _PrtExPhPlConnectionTyp_Type()
)
prtExPhPlConnectionTyp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlConnectionTyp.setStatus("current")


class _PrtExPhPlClkMode_Type(Integer32):
    """Custom type prtExPhPlClkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("dce", 1),
          ("dte", 3),
          ("extDce", 2),
          ("int", 4),
          ("lbt", 5))
    )


_PrtExPhPlClkMode_Type.__name__ = "Integer32"
_PrtExPhPlClkMode_Object = MibTableColumn
prtExPhPlClkMode = _PrtExPhPlClkMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 9),
    _PrtExPhPlClkMode_Type()
)
prtExPhPlClkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlClkMode.setStatus("current")


class _PrtExPhPlDceClkSrc_Type(Integer32):
    """Custom type prtExPhPlDceClkSrc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("local", 2),
          ("nodalTiming", 3),
          ("notApplicable", 1))
    )


_PrtExPhPlDceClkSrc_Type.__name__ = "Integer32"
_PrtExPhPlDceClkSrc_Object = MibTableColumn
prtExPhPlDceClkSrc = _PrtExPhPlDceClkSrc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 10),
    _PrtExPhPlDceClkSrc_Type()
)
prtExPhPlDceClkSrc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDceClkSrc.setStatus("current")


class _PrtExPhPlCongResponse_Type(Integer32):
    """Custom type prtExPhPlCongResponse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("flowControl", 3),
          ("no", 2),
          ("toFlowControl", 4))
    )


_PrtExPhPlCongResponse_Type.__name__ = "Integer32"
_PrtExPhPlCongResponse_Object = MibTableColumn
prtExPhPlCongResponse = _PrtExPhPlCongResponse_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 11),
    _PrtExPhPlCongResponse_Type()
)
prtExPhPlCongResponse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlCongResponse.setStatus("current")


class _PrtExPhPlCongLevel_Type(Integer32):
    """Custom type prtExPhPlCongLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 70),
    )


_PrtExPhPlCongLevel_Type.__name__ = "Integer32"
_PrtExPhPlCongLevel_Object = MibTableColumn
prtExPhPlCongLevel = _PrtExPhPlCongLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 12),
    _PrtExPhPlCongLevel_Type()
)
prtExPhPlCongLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlCongLevel.setStatus("current")


class _PrtExPhPlTc_Type(Integer32):
    """Custom type prtExPhPlTc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("tc1sec", 1),
          ("tc2sec", 2),
          ("tc3sec", 3),
          ("tc4sec", 4))
    )


_PrtExPhPlTc_Type.__name__ = "Integer32"
_PrtExPhPlTc_Object = MibTableColumn
prtExPhPlTc = _PrtExPhPlTc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 13),
    _PrtExPhPlTc_Type()
)
prtExPhPlTc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlTc.setStatus("current")


class _PrtExPhPlFlowControl_Type(Integer32):
    """Custom type prtExPhPlFlowControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("dtrCts", 5),
          ("fecnBecn", 3),
          ("none", 2),
          ("speedReduction", 6),
          ("xonXoff", 4))
    )


_PrtExPhPlFlowControl_Type.__name__ = "Integer32"
_PrtExPhPlFlowControl_Object = MibTableColumn
prtExPhPlFlowControl = _PrtExPhPlFlowControl_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 14),
    _PrtExPhPlFlowControl_Type()
)
prtExPhPlFlowControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlFlowControl.setStatus("current")


class _PrtExPhPlDcdRts_Type(Integer32):
    """Custom type prtExPhPlDcdRts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("endToEnd", 3),
          ("notApplicable", 1),
          ("on", 2))
    )


_PrtExPhPlDcdRts_Type.__name__ = "Integer32"
_PrtExPhPlDcdRts_Object = MibTableColumn
prtExPhPlDcdRts = _PrtExPhPlDcdRts_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 15),
    _PrtExPhPlDcdRts_Type()
)
prtExPhPlDcdRts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDcdRts.setStatus("current")


class _PrtExPhPlDcdRtsControlPath_Type(Integer32):
    """Custom type prtExPhPlDcdRtsControlPath based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_PrtExPhPlDcdRtsControlPath_Type.__name__ = "Integer32"
_PrtExPhPlDcdRtsControlPath_Object = MibTableColumn
prtExPhPlDcdRtsControlPath = _PrtExPhPlDcdRtsControlPath_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 16),
    _PrtExPhPlDcdRtsControlPath_Type()
)
prtExPhPlDcdRtsControlPath.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDcdRtsControlPath.setStatus("current")


class _PrtExPhPlDataBits_Type(Integer32):
    """Custom type prtExPhPlDataBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dataBits7Bits", 2),
          ("dataBits8Bits", 3),
          ("notApplicable", 1))
    )


_PrtExPhPlDataBits_Type.__name__ = "Integer32"
_PrtExPhPlDataBits_Object = MibTableColumn
prtExPhPlDataBits = _PrtExPhPlDataBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 17),
    _PrtExPhPlDataBits_Type()
)
prtExPhPlDataBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDataBits.setStatus("current")


class _PrtExPhPlParity_Type(Integer32):
    """Custom type prtExPhPlParity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("even", 3),
          ("none", 4),
          ("notApplicable", 1),
          ("odd", 2))
    )


_PrtExPhPlParity_Type.__name__ = "Integer32"
_PrtExPhPlParity_Object = MibTableColumn
prtExPhPlParity = _PrtExPhPlParity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 18),
    _PrtExPhPlParity_Type()
)
prtExPhPlParity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlParity.setStatus("current")


class _PrtExPhPlStopBits_Type(Integer32):
    """Custom type prtExPhPlStopBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("sb1Bit", 2),
          ("sb1dot5Bits", 3),
          ("sb2Bits", 4))
    )


_PrtExPhPlStopBits_Type.__name__ = "Integer32"
_PrtExPhPlStopBits_Object = MibTableColumn
prtExPhPlStopBits = _PrtExPhPlStopBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 19),
    _PrtExPhPlStopBits_Type()
)
prtExPhPlStopBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlStopBits.setStatus("current")
_PrtExPhPlLXon_Type = Integer32
_PrtExPhPlLXon_Object = MibTableColumn
prtExPhPlLXon = _PrtExPhPlLXon_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 20),
    _PrtExPhPlLXon_Type()
)
prtExPhPlLXon.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlLXon.setStatus("current")
_PrtExPhPlLXoff_Type = Integer32
_PrtExPhPlLXoff_Object = MibTableColumn
prtExPhPlLXoff = _PrtExPhPlLXoff_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 21),
    _PrtExPhPlLXoff_Type()
)
prtExPhPlLXoff.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlLXoff.setStatus("current")


class _PrtExPhPlFrMngProt_Type(Integer32):
    """Custom type prtExPhPlFrMngProt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("annexA", 5),
          ("ansiT1", 4),
          ("lmi", 3),
          ("none", 2),
          ("notApplicable", 1))
    )


_PrtExPhPlFrMngProt_Type.__name__ = "Integer32"
_PrtExPhPlFrMngProt_Object = MibTableColumn
prtExPhPlFrMngProt = _PrtExPhPlFrMngProt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 22),
    _PrtExPhPlFrMngProt_Type()
)
prtExPhPlFrMngProt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlFrMngProt.setStatus("current")


class _PrtExPhPlEnqPeriod_Type(Integer32):
    """Custom type prtExPhPlEnqPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30),
    )


_PrtExPhPlEnqPeriod_Type.__name__ = "Integer32"
_PrtExPhPlEnqPeriod_Object = MibTableColumn
prtExPhPlEnqPeriod = _PrtExPhPlEnqPeriod_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 23),
    _PrtExPhPlEnqPeriod_Type()
)
prtExPhPlEnqPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlEnqPeriod.setStatus("current")


class _PrtExPhPlFullRptPeriod_Type(Integer32):
    """Custom type prtExPhPlFullRptPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExPhPlFullRptPeriod_Type.__name__ = "Integer32"
_PrtExPhPlFullRptPeriod_Object = MibTableColumn
prtExPhPlFullRptPeriod = _PrtExPhPlFullRptPeriod_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 24),
    _PrtExPhPlFullRptPeriod_Type()
)
prtExPhPlFullRptPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlFullRptPeriod.setStatus("current")


class _PrtExPhPlFrWindowSize_Type(Integer32):
    """Custom type prtExPhPlFrWindowSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_PrtExPhPlFrWindowSize_Type.__name__ = "Integer32"
_PrtExPhPlFrWindowSize_Object = MibTableColumn
prtExPhPlFrWindowSize = _PrtExPhPlFrWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 25),
    _PrtExPhPlFrWindowSize_Type()
)
prtExPhPlFrWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlFrWindowSize.setStatus("current")


class _PrtExPhPlErrorsThreshold_Type(Integer32):
    """Custom type prtExPhPlErrorsThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_PrtExPhPlErrorsThreshold_Type.__name__ = "Integer32"
_PrtExPhPlErrorsThreshold_Object = MibTableColumn
prtExPhPlErrorsThreshold = _PrtExPhPlErrorsThreshold_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 26),
    _PrtExPhPlErrorsThreshold_Type()
)
prtExPhPlErrorsThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlErrorsThreshold.setStatus("current")


class _PrtExPhPlPvcCreateMsg_Type(Integer32):
    """Custom type prtExPhPlPvcCreateMsg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtExPhPlPvcCreateMsg_Type.__name__ = "Integer32"
_PrtExPhPlPvcCreateMsg_Object = MibTableColumn
prtExPhPlPvcCreateMsg = _PrtExPhPlPvcCreateMsg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 27),
    _PrtExPhPlPvcCreateMsg_Type()
)
prtExPhPlPvcCreateMsg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlPvcCreateMsg.setStatus("current")


class _PrtExPhPlCllmMsg_Type(Integer32):
    """Custom type prtExPhPlCllmMsg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtExPhPlCllmMsg_Type.__name__ = "Integer32"
_PrtExPhPlCllmMsg_Object = MibTableColumn
prtExPhPlCllmMsg = _PrtExPhPlCllmMsg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 28),
    _PrtExPhPlCllmMsg_Type()
)
prtExPhPlCllmMsg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlCllmMsg.setStatus("current")


class _PrtExPhPlProtDelayLevel_Type(Integer32):
    """Custom type prtExPhPlProtDelayLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("s150Byte", 3),
          ("s264Byte", 4),
          ("s36Byte", 2),
          ("s378Byte", 5),
          ("s492Byte", 6))
    )


_PrtExPhPlProtDelayLevel_Type.__name__ = "Integer32"
_PrtExPhPlProtDelayLevel_Object = MibTableColumn
prtExPhPlProtDelayLevel = _PrtExPhPlProtDelayLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 29),
    _PrtExPhPlProtDelayLevel_Type()
)
prtExPhPlProtDelayLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlProtDelayLevel.setStatus("current")


class _PrtExPhPlClockEncoding_Type(Integer32):
    """Custom type prtExPhPlClockEncoding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("diffManchester", 6),
          ("fm0", 4),
          ("manchester", 5),
          ("notApplicable", 1),
          ("nrz", 2),
          ("nrzI", 3),
          ("nrzIMark", 8),
          ("nrzISpace", 7))
    )


_PrtExPhPlClockEncoding_Type.__name__ = "Integer32"
_PrtExPhPlClockEncoding_Object = MibTableColumn
prtExPhPlClockEncoding = _PrtExPhPlClockEncoding_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 30),
    _PrtExPhPlClockEncoding_Type()
)
prtExPhPlClockEncoding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlClockEncoding.setStatus("current")


class _PrtExPhPlMinSeparators_Type(Integer32):
    """Custom type prtExPhPlMinSeparators based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_PrtExPhPlMinSeparators_Type.__name__ = "Integer32"
_PrtExPhPlMinSeparators_Object = MibTableColumn
prtExPhPlMinSeparators = _PrtExPhPlMinSeparators_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 31),
    _PrtExPhPlMinSeparators_Type()
)
prtExPhPlMinSeparators.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlMinSeparators.setStatus("current")


class _PrtExPhPlCcittCrc_Type(Integer32):
    """Custom type prtExPhPlCcittCrc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("crc16", 2),
          ("crc32", 3),
          ("notApplicable", 1))
    )


_PrtExPhPlCcittCrc_Type.__name__ = "Integer32"
_PrtExPhPlCcittCrc_Object = MibTableColumn
prtExPhPlCcittCrc = _PrtExPhPlCcittCrc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 32),
    _PrtExPhPlCcittCrc_Type()
)
prtExPhPlCcittCrc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlCcittCrc.setStatus("current")


class _PrtExPhPlFrameSeparator_Type(Integer32):
    """Custom type prtExPhPlFrameSeparator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("flags", 3),
          ("idles", 2),
          ("notApplicable", 1))
    )


_PrtExPhPlFrameSeparator_Type.__name__ = "Integer32"
_PrtExPhPlFrameSeparator_Object = MibTableColumn
prtExPhPlFrameSeparator = _PrtExPhPlFrameSeparator_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 33),
    _PrtExPhPlFrameSeparator_Type()
)
prtExPhPlFrameSeparator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlFrameSeparator.setStatus("current")
_PrtExPhPlIdleCode_Type = Integer32
_PrtExPhPlIdleCode_Object = MibTableColumn
prtExPhPlIdleCode = _PrtExPhPlIdleCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 34),
    _PrtExPhPlIdleCode_Type()
)
prtExPhPlIdleCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlIdleCode.setStatus("current")


class _PrtExPhPlJitter_Type(Integer32):
    """Custom type prtExPhPlJitter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_PrtExPhPlJitter_Type.__name__ = "Integer32"
_PrtExPhPlJitter_Object = MibTableColumn
prtExPhPlJitter = _PrtExPhPlJitter_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 35),
    _PrtExPhPlJitter_Type()
)
prtExPhPlJitter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlJitter.setStatus("current")
_PrtExPhPlDlciTable_Object = MibTable
prtExPhPlDlciTable = _PrtExPhPlDlciTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2)
)
if mibBuilder.loadTexts:
    prtExPhPlDlciTable.setStatus("current")
_PrtExPhPlDlciEntry_Object = MibTableRow
prtExPhPlDlciEntry = _PrtExPhPlDlciEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1)
)
prtExPhPlDlciEntry.setIndexNames(
    (0, "RAD-MIB", "prtExPhPlDlciCnfgIdx"),
    (0, "RAD-MIB", "prtExPhPlDlciSltIdx"),
    (0, "RAD-MIB", "prtExPhPlDlciPrtIdx"),
    (0, "RAD-MIB", "prtExPhPlDlciIdx"),
)
if mibBuilder.loadTexts:
    prtExPhPlDlciEntry.setStatus("current")


class _PrtExPhPlDlciCnfgIdx_Type(Integer32):
    """Custom type prtExPhPlDlciCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExPhPlDlciCnfgIdx_Type.__name__ = "Integer32"
_PrtExPhPlDlciCnfgIdx_Object = MibTableColumn
prtExPhPlDlciCnfgIdx = _PrtExPhPlDlciCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 1),
    _PrtExPhPlDlciCnfgIdx_Type()
)
prtExPhPlDlciCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPhPlDlciCnfgIdx.setStatus("current")


class _PrtExPhPlDlciSltIdx_Type(Integer32):
    """Custom type prtExPhPlDlciSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtExPhPlDlciSltIdx_Type.__name__ = "Integer32"
_PrtExPhPlDlciSltIdx_Object = MibTableColumn
prtExPhPlDlciSltIdx = _PrtExPhPlDlciSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 2),
    _PrtExPhPlDlciSltIdx_Type()
)
prtExPhPlDlciSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPhPlDlciSltIdx.setStatus("current")


class _PrtExPhPlDlciPrtIdx_Type(Integer32):
    """Custom type prtExPhPlDlciPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6))
    )


_PrtExPhPlDlciPrtIdx_Type.__name__ = "Integer32"
_PrtExPhPlDlciPrtIdx_Object = MibTableColumn
prtExPhPlDlciPrtIdx = _PrtExPhPlDlciPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 3),
    _PrtExPhPlDlciPrtIdx_Type()
)
prtExPhPlDlciPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPhPlDlciPrtIdx.setStatus("current")


class _PrtExPhPlDlciIdx_Type(Integer32):
    """Custom type prtExPhPlDlciIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 991),
    )


_PrtExPhPlDlciIdx_Type.__name__ = "Integer32"
_PrtExPhPlDlciIdx_Object = MibTableColumn
prtExPhPlDlciIdx = _PrtExPhPlDlciIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 4),
    _PrtExPhPlDlciIdx_Type()
)
prtExPhPlDlciIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPhPlDlciIdx.setStatus("current")


class _PrtExPhPlDlciValid_Type(Integer32):
    """Custom type prtExPhPlDlciValid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExPhPlDlciValid_Type.__name__ = "Integer32"
_PrtExPhPlDlciValid_Object = MibTableColumn
prtExPhPlDlciValid = _PrtExPhPlDlciValid_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 5),
    _PrtExPhPlDlciValid_Type()
)
prtExPhPlDlciValid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDlciValid.setStatus("current")


class _PrtExPhPlDlciIConSlt_Type(Integer32):
    """Custom type prtExPhPlDlciIConSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("cl", 3),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("noConnect", 2),
          ("notApplicable", 255))
    )


_PrtExPhPlDlciIConSlt_Type.__name__ = "Integer32"
_PrtExPhPlDlciIConSlt_Object = MibTableColumn
prtExPhPlDlciIConSlt = _PrtExPhPlDlciIConSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 6),
    _PrtExPhPlDlciIConSlt_Type()
)
prtExPhPlDlciIConSlt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDlciIConSlt.setStatus("current")


class _PrtExPhPlDlciIConPrt_Type(Integer32):
    """Custom type prtExPhPlDlciIConPrt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110)
        )
    )
    namedValues = NamedValues(
        *(("clNMS", 99),
          ("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9),
          ("inPrt1", 101),
          ("inPrt10", 110),
          ("inPrt2", 102),
          ("inPrt3", 103),
          ("inPrt4", 104),
          ("inPrt5", 105),
          ("inPrt6", 106),
          ("inPrt7", 107),
          ("inPrt8", 108),
          ("inPrt9", 109),
          ("noConnect", 100))
    )


_PrtExPhPlDlciIConPrt_Type.__name__ = "Integer32"
_PrtExPhPlDlciIConPrt_Object = MibTableColumn
prtExPhPlDlciIConPrt = _PrtExPhPlDlciIConPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 7),
    _PrtExPhPlDlciIConPrt_Type()
)
prtExPhPlDlciIConPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDlciIConPrt.setStatus("current")


class _PrtExPhPlDlciIConDlci_Type(Integer32):
    """Custom type prtExPhPlDlciIConDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 991),
    )


_PrtExPhPlDlciIConDlci_Type.__name__ = "Integer32"
_PrtExPhPlDlciIConDlci_Object = MibTableColumn
prtExPhPlDlciIConDlci = _PrtExPhPlDlciIConDlci_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 8),
    _PrtExPhPlDlciIConDlci_Type()
)
prtExPhPlDlciIConDlci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDlciIConDlci.setStatus("current")


class _PrtExPhPlDlciTxBc_Type(Integer32):
    """Custom type prtExPhPlDlciTxBc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              25,
              26)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("txBc1024Kbps", 21),
          ("txBc112Kbps", 26),
          ("txBc128Kbps", 13),
          ("txBc14400bps", 4),
          ("txBc16000bps", 25),
          ("txBc19200bps", 5),
          ("txBc192Kbps", 14),
          ("txBc256Kbps", 15),
          ("txBc28800bps", 6),
          ("txBc32000bps", 7),
          ("txBc320Kbps", 16),
          ("txBc38400bps", 8),
          ("txBc384Kbps", 17),
          ("txBc448Kbps", 18),
          ("txBc48000bps", 9),
          ("txBc512Kbps", 19),
          ("txBc56000bps", 10),
          ("txBc57600bps", 11),
          ("txBc64Kbps", 12),
          ("txBc768Kbps", 20),
          ("txBc9600bps", 3),
          ("zero", 2))
    )


_PrtExPhPlDlciTxBc_Type.__name__ = "Integer32"
_PrtExPhPlDlciTxBc_Object = MibTableColumn
prtExPhPlDlciTxBc = _PrtExPhPlDlciTxBc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 9),
    _PrtExPhPlDlciTxBc_Type()
)
prtExPhPlDlciTxBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDlciTxBc.setStatus("current")


class _PrtExPhPlDlciTxBe_Type(Integer32):
    """Custom type prtExPhPlDlciTxBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              25,
              26)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("txBc112Kbps", 26),
          ("txBc16000bps", 25),
          ("txBe1024Kbps", 21),
          ("txBe128Kbps", 13),
          ("txBe14400bps", 4),
          ("txBe19200bps", 5),
          ("txBe192Kbps", 14),
          ("txBe256Kbps", 15),
          ("txBe28800bps", 6),
          ("txBe32000bps", 7),
          ("txBe320Kbps", 16),
          ("txBe38400bps", 8),
          ("txBe384Kbps", 17),
          ("txBe448Kbps", 18),
          ("txBe48000bps", 9),
          ("txBe512Kbps", 19),
          ("txBe56000bps", 10),
          ("txBe57600bps", 11),
          ("txBe64Kbps", 12),
          ("txBe768Kbps", 20),
          ("txBe9600bps", 3),
          ("zero", 2))
    )


_PrtExPhPlDlciTxBe_Type.__name__ = "Integer32"
_PrtExPhPlDlciTxBe_Object = MibTableColumn
prtExPhPlDlciTxBe = _PrtExPhPlDlciTxBe_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 10),
    _PrtExPhPlDlciTxBe_Type()
)
prtExPhPlDlciTxBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDlciTxBe.setStatus("current")


class _PrtExPhPlDlciRxBc_Type(Integer32):
    """Custom type prtExPhPlDlciRxBc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              25,
              26)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("rxBc1024Kbps", 21),
          ("rxBc112Kbps", 26),
          ("rxBc128Kbps", 13),
          ("rxBc14400bps", 4),
          ("rxBc16000bps", 25),
          ("rxBc19200bps", 5),
          ("rxBc192Kbps", 14),
          ("rxBc256Kbps", 15),
          ("rxBc28800bps", 6),
          ("rxBc32000bps", 7),
          ("rxBc320Kbps", 16),
          ("rxBc38400bps", 8),
          ("rxBc384Kbps", 17),
          ("rxBc448Kbps", 18),
          ("rxBc48000bps", 9),
          ("rxBc512Kbps", 19),
          ("rxBc56000bps", 10),
          ("rxBc57600bps", 11),
          ("rxBc64Kbps", 12),
          ("rxBc768Kbps", 20),
          ("rxBc9600bps", 3),
          ("zero", 2))
    )


_PrtExPhPlDlciRxBc_Type.__name__ = "Integer32"
_PrtExPhPlDlciRxBc_Object = MibTableColumn
prtExPhPlDlciRxBc = _PrtExPhPlDlciRxBc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 11),
    _PrtExPhPlDlciRxBc_Type()
)
prtExPhPlDlciRxBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDlciRxBc.setStatus("current")


class _PrtExPhPlDlciRxBe_Type(Integer32):
    """Custom type prtExPhPlDlciRxBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              25,
              26)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("rxBc112Kbps", 26),
          ("rxBc16000bps", 25),
          ("rxBe1024Kbps", 21),
          ("rxBe128Kbps", 13),
          ("rxBe14400bps", 4),
          ("rxBe19200bps", 5),
          ("rxBe192Kbps", 14),
          ("rxBe256Kbps", 15),
          ("rxBe28800bps", 6),
          ("rxBe32000bps", 7),
          ("rxBe320Kbps", 16),
          ("rxBe38400bps", 8),
          ("rxBe384Kbps", 17),
          ("rxBe448Kbps", 18),
          ("rxBe48000bps", 9),
          ("rxBe512Kbps", 19),
          ("rxBe56000bps", 10),
          ("rxBe57600bps", 11),
          ("rxBe64Kbps", 12),
          ("rxBe768Kbps", 20),
          ("rxBe9600bps", 3),
          ("zero", 2))
    )


_PrtExPhPlDlciRxBe_Type.__name__ = "Integer32"
_PrtExPhPlDlciRxBe_Object = MibTableColumn
prtExPhPlDlciRxBe = _PrtExPhPlDlciRxBe_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 12),
    _PrtExPhPlDlciRxBe_Type()
)
prtExPhPlDlciRxBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDlciRxBe.setStatus("current")


class _PrtExPhPlDlciPriority_Type(Integer32):
    """Custom type prtExPhPlDlciPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_PrtExPhPlDlciPriority_Type.__name__ = "Integer32"
_PrtExPhPlDlciPriority_Object = MibTableColumn
prtExPhPlDlciPriority = _PrtExPhPlDlciPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 13),
    _PrtExPhPlDlciPriority_Type()
)
prtExPhPlDlciPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlDlciPriority.setStatus("current")


class _PrtExPhPlDlciStatus_Type(Integer32):
    """Custom type prtExPhPlDlciStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("connected", 2),
          ("disconnected", 1))
    )


_PrtExPhPlDlciStatus_Type.__name__ = "Integer32"
_PrtExPhPlDlciStatus_Object = MibTableColumn
prtExPhPlDlciStatus = _PrtExPhPlDlciStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 14),
    _PrtExPhPlDlciStatus_Type()
)
prtExPhPlDlciStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPhPlDlciStatus.setStatus("current")
_PrtExPhPlModemTable_Object = MibTable
prtExPhPlModemTable = _PrtExPhPlModemTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3)
)
if mibBuilder.loadTexts:
    prtExPhPlModemTable.setStatus("current")
_PrtExPhPlModemEntry_Object = MibTableRow
prtExPhPlModemEntry = _PrtExPhPlModemEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1)
)
prtExPhPlModemEntry.setIndexNames(
    (0, "RAD-MIB", "prtExPhPlModemCnfgIdx"),
    (0, "RAD-MIB", "prtExPhPlModemSltIdx"),
    (0, "RAD-MIB", "prtExPhPlModemPrtIdx"),
)
if mibBuilder.loadTexts:
    prtExPhPlModemEntry.setStatus("current")


class _PrtExPhPlModemCnfgIdx_Type(Integer32):
    """Custom type prtExPhPlModemCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExPhPlModemCnfgIdx_Type.__name__ = "Integer32"
_PrtExPhPlModemCnfgIdx_Object = MibTableColumn
prtExPhPlModemCnfgIdx = _PrtExPhPlModemCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 1),
    _PrtExPhPlModemCnfgIdx_Type()
)
prtExPhPlModemCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPhPlModemCnfgIdx.setStatus("current")


class _PrtExPhPlModemSltIdx_Type(Integer32):
    """Custom type prtExPhPlModemSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtExPhPlModemSltIdx_Type.__name__ = "Integer32"
_PrtExPhPlModemSltIdx_Object = MibTableColumn
prtExPhPlModemSltIdx = _PrtExPhPlModemSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 2),
    _PrtExPhPlModemSltIdx_Type()
)
prtExPhPlModemSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPhPlModemSltIdx.setStatus("current")


class _PrtExPhPlModemPrtIdx_Type(Integer32):
    """Custom type prtExPhPlModemPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6))
    )


_PrtExPhPlModemPrtIdx_Type.__name__ = "Integer32"
_PrtExPhPlModemPrtIdx_Object = MibTableColumn
prtExPhPlModemPrtIdx = _PrtExPhPlModemPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 3),
    _PrtExPhPlModemPrtIdx_Type()
)
prtExPhPlModemPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPhPlModemPrtIdx.setStatus("current")


class _PrtExPhPlModemStatus_Type(Integer32):
    """Custom type prtExPhPlModemStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("relay", 4))
    )


_PrtExPhPlModemStatus_Type.__name__ = "Integer32"
_PrtExPhPlModemStatus_Object = MibTableColumn
prtExPhPlModemStatus = _PrtExPhPlModemStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 4),
    _PrtExPhPlModemStatus_Type()
)
prtExPhPlModemStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlModemStatus.setStatus("current")


class _PrtExPhPlModemActivate_Type(Integer32):
    """Custom type prtExPhPlModemActivate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("always", 3),
          ("notApplicable", 255),
          ("onFirstFrame", 2))
    )


_PrtExPhPlModemActivate_Type.__name__ = "Integer32"
_PrtExPhPlModemActivate_Object = MibTableColumn
prtExPhPlModemActivate = _PrtExPhPlModemActivate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 5),
    _PrtExPhPlModemActivate_Type()
)
prtExPhPlModemActivate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlModemActivate.setStatus("current")
_PrtExPhPlModemMaxIdleTime_Type = Integer32
_PrtExPhPlModemMaxIdleTime_Object = MibTableColumn
prtExPhPlModemMaxIdleTime = _PrtExPhPlModemMaxIdleTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 6),
    _PrtExPhPlModemMaxIdleTime_Type()
)
prtExPhPlModemMaxIdleTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlModemMaxIdleTime.setStatus("current")
_PrtExPhPlModemTimeBtwnCalls_Type = Integer32
_PrtExPhPlModemTimeBtwnCalls_Object = MibTableColumn
prtExPhPlModemTimeBtwnCalls = _PrtExPhPlModemTimeBtwnCalls_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 7),
    _PrtExPhPlModemTimeBtwnCalls_Type()
)
prtExPhPlModemTimeBtwnCalls.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlModemTimeBtwnCalls.setStatus("current")
_PrtExPhPlModemCallDelay_Type = Integer32
_PrtExPhPlModemCallDelay_Object = MibTableColumn
prtExPhPlModemCallDelay = _PrtExPhPlModemCallDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 8),
    _PrtExPhPlModemCallDelay_Type()
)
prtExPhPlModemCallDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPhPlModemCallDelay.setStatus("current")
_PrtLs2Cnfg_ObjectIdentity = ObjectIdentity
prtLs2Cnfg = _PrtLs2Cnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4)
)
_PrtExLs2CnfgTable_Object = MibTable
prtExLs2CnfgTable = _PrtExLs2CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1)
)
if mibBuilder.loadTexts:
    prtExLs2CnfgTable.setStatus("current")
_PrtExLs2CnfgEntry_Object = MibTableRow
prtExLs2CnfgEntry = _PrtExLs2CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1)
)
prtExLs2CnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtExLs2CnfgIdx"),
    (0, "RAD-MIB", "prtExLs2SltIdx"),
    (0, "RAD-MIB", "prtExLs2PrtIdx"),
)
if mibBuilder.loadTexts:
    prtExLs2CnfgEntry.setStatus("current")


class _PrtExLs2CnfgIdx_Type(Integer32):
    """Custom type prtExLs2CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExLs2CnfgIdx_Type.__name__ = "Integer32"
_PrtExLs2CnfgIdx_Object = MibTableColumn
prtExLs2CnfgIdx = _PrtExLs2CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 1),
    _PrtExLs2CnfgIdx_Type()
)
prtExLs2CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExLs2CnfgIdx.setStatus("current")


class _PrtExLs2SltIdx_Type(Integer32):
    """Custom type prtExLs2SltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExLs2SltIdx_Type.__name__ = "Integer32"
_PrtExLs2SltIdx_Object = MibTableColumn
prtExLs2SltIdx = _PrtExLs2SltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 2),
    _PrtExLs2SltIdx_Type()
)
prtExLs2SltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExLs2SltIdx.setStatus("current")


class _PrtExLs2PrtIdx_Type(Integer32):
    """Custom type prtExLs2PrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9))
    )


_PrtExLs2PrtIdx_Type.__name__ = "Integer32"
_PrtExLs2PrtIdx_Object = MibTableColumn
prtExLs2PrtIdx = _PrtExLs2PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 3),
    _PrtExLs2PrtIdx_Type()
)
prtExLs2PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExLs2PrtIdx.setStatus("current")


class _PrtExLs2Connect_Type(Integer32):
    """Custom type prtExLs2Connect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExLs2Connect_Type.__name__ = "Integer32"
_PrtExLs2Connect_Object = MibTableColumn
prtExLs2Connect = _PrtExLs2Connect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 4),
    _PrtExLs2Connect_Type()
)
prtExLs2Connect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs2Connect.setStatus("current")


class _PrtExLs2Rate_Type(Integer32):
    """Custom type prtExLs2Rate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("r19200bps", 5),
          ("r2400bps", 2),
          ("r4800bps", 3),
          ("r9600bps", 4))
    )


_PrtExLs2Rate_Type.__name__ = "Integer32"
_PrtExLs2Rate_Object = MibTableColumn
prtExLs2Rate = _PrtExLs2Rate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 5),
    _PrtExLs2Rate_Type()
)
prtExLs2Rate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs2Rate.setStatus("current")


class _PrtExLs2ClkMode_Type(Integer32):
    """Custom type prtExLs2ClkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dce", 1),
          ("dte", 3),
          ("ext-dce", 2))
    )


_PrtExLs2ClkMode_Type.__name__ = "Integer32"
_PrtExLs2ClkMode_Object = MibTableColumn
prtExLs2ClkMode = _PrtExLs2ClkMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 6),
    _PrtExLs2ClkMode_Type()
)
prtExLs2ClkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs2ClkMode.setStatus("current")


class _PrtExLs2Cts_Type(Integer32):
    """Custom type prtExLs2Cts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("on", 2),
          ("rts-max", 4),
          ("rts-min", 3))
    )


_PrtExLs2Cts_Type.__name__ = "Integer32"
_PrtExLs2Cts_Object = MibTableColumn
prtExLs2Cts = _PrtExLs2Cts_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 7),
    _PrtExLs2Cts_Type()
)
prtExLs2Cts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs2Cts.setStatus("current")


class _PrtExLs2Dcd_Type(Integer32):
    """Custom type prtExLs2Dcd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("card-sync", 3),
          ("on", 2))
    )


_PrtExLs2Dcd_Type.__name__ = "Integer32"
_PrtExLs2Dcd_Object = MibTableColumn
prtExLs2Dcd = _PrtExLs2Dcd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 8),
    _PrtExLs2Dcd_Type()
)
prtExLs2Dcd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs2Dcd.setStatus("current")


class _PrtExLs2EnvIdx_Type(Integer32):
    """Custom type prtExLs2EnvIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 24),
    )


_PrtExLs2EnvIdx_Type.__name__ = "Integer32"
_PrtExLs2EnvIdx_Object = MibTableColumn
prtExLs2EnvIdx = _PrtExLs2EnvIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 9),
    _PrtExLs2EnvIdx_Type()
)
prtExLs2EnvIdx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs2EnvIdx.setStatus("current")
_PrtInLs2CnfgTable_Object = MibTable
prtInLs2CnfgTable = _PrtInLs2CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2)
)
if mibBuilder.loadTexts:
    prtInLs2CnfgTable.setStatus("current")
_PrtInLs2CnfgEntry_Object = MibTableRow
prtInLs2CnfgEntry = _PrtInLs2CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1)
)
prtInLs2CnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtInLs2CnfgIdx"),
    (0, "RAD-MIB", "prtInLs2SltIdx"),
    (0, "RAD-MIB", "prtInLs2PrtIdx"),
)
if mibBuilder.loadTexts:
    prtInLs2CnfgEntry.setStatus("current")


class _PrtInLs2CnfgIdx_Type(Integer32):
    """Custom type prtInLs2CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtInLs2CnfgIdx_Type.__name__ = "Integer32"
_PrtInLs2CnfgIdx_Object = MibTableColumn
prtInLs2CnfgIdx = _PrtInLs2CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 1),
    _PrtInLs2CnfgIdx_Type()
)
prtInLs2CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInLs2CnfgIdx.setStatus("current")


class _PrtInLs2SltIdx_Type(Integer32):
    """Custom type prtInLs2SltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtInLs2SltIdx_Type.__name__ = "Integer32"
_PrtInLs2SltIdx_Object = MibTableColumn
prtInLs2SltIdx = _PrtInLs2SltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 2),
    _PrtInLs2SltIdx_Type()
)
prtInLs2SltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInLs2SltIdx.setStatus("current")


class _PrtInLs2PrtIdx_Type(Integer32):
    """Custom type prtInLs2PrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(101,
              102)
        )
    )
    namedValues = NamedValues(
        *(("inPrt1", 101),
          ("inPrt2", 102))
    )


_PrtInLs2PrtIdx_Type.__name__ = "Integer32"
_PrtInLs2PrtIdx_Object = MibTableColumn
prtInLs2PrtIdx = _PrtInLs2PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 3),
    _PrtInLs2PrtIdx_Type()
)
prtInLs2PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInLs2PrtIdx.setStatus("current")


class _PrtInLs2Connect_Type(Integer32):
    """Custom type prtInLs2Connect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtInLs2Connect_Type.__name__ = "Integer32"
_PrtInLs2Connect_Object = MibTableColumn
prtInLs2Connect = _PrtInLs2Connect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 4),
    _PrtInLs2Connect_Type()
)
prtInLs2Connect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInLs2Connect.setStatus("current")


class _PrtInLs2Group_Type(Integer32):
    """Custom type prtInLs2Group based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 12),
    )


_PrtInLs2Group_Type.__name__ = "Integer32"
_PrtInLs2Group_Object = MibTableColumn
prtInLs2Group = _PrtInLs2Group_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 5),
    _PrtInLs2Group_Type()
)
prtInLs2Group.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInLs2Group.setStatus("current")


class _PrtInLs2Member_Type(Integer32):
    """Custom type prtInLs2Member based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_PrtInLs2Member_Type.__name__ = "Integer32"
_PrtInLs2Member_Object = MibTableColumn
prtInLs2Member = _PrtInLs2Member_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 6),
    _PrtInLs2Member_Type()
)
prtInLs2Member.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInLs2Member.setStatus("current")


class _PrtInLs2LinkTo_Type(Integer32):
    """Custom type prtInLs2LinkTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtInLs2LinkTo_Type.__name__ = "Integer32"
_PrtInLs2LinkTo_Object = MibTableColumn
prtInLs2LinkTo = _PrtInLs2LinkTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 7),
    _PrtInLs2LinkTo_Type()
)
prtInLs2LinkTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInLs2LinkTo.setStatus("deprecated")


class _PrtInLs2EnvAssign_Type(Integer32):
    """Custom type prtInLs2EnvAssign based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 2),
          ("manual", 3))
    )


_PrtInLs2EnvAssign_Type.__name__ = "Integer32"
_PrtInLs2EnvAssign_Object = MibTableColumn
prtInLs2EnvAssign = _PrtInLs2EnvAssign_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 8),
    _PrtInLs2EnvAssign_Type()
)
prtInLs2EnvAssign.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInLs2EnvAssign.setStatus("current")
_PrtVc2CnfgTable_Object = MibTable
prtVc2CnfgTable = _PrtVc2CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5)
)
if mibBuilder.loadTexts:
    prtVc2CnfgTable.setStatus("current")
_PrtVc2CnfgEntry_Object = MibTableRow
prtVc2CnfgEntry = _PrtVc2CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1)
)
prtVc2CnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtVc2CnfgIdx"),
    (0, "RAD-MIB", "prtVc2SltIdx"),
    (0, "RAD-MIB", "prtVc2PrtIdx"),
)
if mibBuilder.loadTexts:
    prtVc2CnfgEntry.setStatus("current")


class _PrtVc2CnfgIdx_Type(Integer32):
    """Custom type prtVc2CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtVc2CnfgIdx_Type.__name__ = "Integer32"
_PrtVc2CnfgIdx_Object = MibTableColumn
prtVc2CnfgIdx = _PrtVc2CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 1),
    _PrtVc2CnfgIdx_Type()
)
prtVc2CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtVc2CnfgIdx.setStatus("current")


class _PrtVc2SltIdx_Type(Integer32):
    """Custom type prtVc2SltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtVc2SltIdx_Type.__name__ = "Integer32"
_PrtVc2SltIdx_Object = MibTableColumn
prtVc2SltIdx = _PrtVc2SltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 2),
    _PrtVc2SltIdx_Type()
)
prtVc2SltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtVc2SltIdx.setStatus("current")
_PrtVc2PrtIdx_Type = Integer32
_PrtVc2PrtIdx_Object = MibTableColumn
prtVc2PrtIdx = _PrtVc2PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 3),
    _PrtVc2PrtIdx_Type()
)
prtVc2PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtVc2PrtIdx.setStatus("current")


class _PrtExVc2Connect_Type(Integer32):
    """Custom type prtExVc2Connect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("v51", 4),
          ("v52", 5),
          ("yes", 3))
    )


_PrtExVc2Connect_Type.__name__ = "Integer32"
_PrtExVc2Connect_Object = MibTableColumn
prtExVc2Connect = _PrtExVc2Connect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 4),
    _PrtExVc2Connect_Type()
)
prtExVc2Connect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2Connect.setStatus("current")
_PrtExVc2TransGain_Type = Integer32
_PrtExVc2TransGain_Object = MibTableColumn
prtExVc2TransGain = _PrtExVc2TransGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 5),
    _PrtExVc2TransGain_Type()
)
prtExVc2TransGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2TransGain.setStatus("current")
_PrtExVc2ReceiveGain_Type = Integer32
_PrtExVc2ReceiveGain_Object = MibTableColumn
prtExVc2ReceiveGain = _PrtExVc2ReceiveGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 6),
    _PrtExVc2ReceiveGain_Type()
)
prtExVc2ReceiveGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2ReceiveGain.setStatus("current")


class _PrtExVc2Wire_Type(Integer32):
    """Custom type prtExVc2Wire based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("w2wire", 1),
          ("w4wire", 2))
    )


_PrtExVc2Wire_Type.__name__ = "Integer32"
_PrtExVc2Wire_Object = MibTableColumn
prtExVc2Wire = _PrtExVc2Wire_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 7),
    _PrtExVc2Wire_Type()
)
prtExVc2Wire.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2Wire.setStatus("current")


class _PrtExVc2CodingLaw_Type(Integer32):
    """Custom type prtExVc2CodingLaw based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("aLAW", 1),
          ("uLAW", 2))
    )


_PrtExVc2CodingLaw_Type.__name__ = "Integer32"
_PrtExVc2CodingLaw_Object = MibTableColumn
prtExVc2CodingLaw = _PrtExVc2CodingLaw_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 8),
    _PrtExVc2CodingLaw_Type()
)
prtExVc2CodingLaw.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2CodingLaw.setStatus("current")


class _PrtExVc2Sig_Type(Integer32):
    """Custom type prtExVc2Sig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("chAssociatedE1", 3),
          ("noSignaling", 1),
          ("robbedBitFrame", 4),
          ("robbedBitMultiFrame", 2))
    )


_PrtExVc2Sig_Type.__name__ = "Integer32"
_PrtExVc2Sig_Object = MibTableColumn
prtExVc2Sig = _PrtExVc2Sig_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 9),
    _PrtExVc2Sig_Type()
)
prtExVc2Sig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2Sig.setStatus("current")


class _PrtExVc2Oos_Type(Integer32):
    """Custom type prtExVc2Oos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("busyIdle", 3),
          ("forcedBusy", 2),
          ("forcedIdle", 1),
          ("idleBusy", 4),
          ("notApplicable", 5))
    )


_PrtExVc2Oos_Type.__name__ = "Integer32"
_PrtExVc2Oos_Object = MibTableColumn
prtExVc2Oos = _PrtExVc2Oos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 10),
    _PrtExVc2Oos_Type()
)
prtExVc2Oos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2Oos.setStatus("current")


class _PrtExVc2LinkTo_Type(Integer32):
    """Custom type prtExVc2LinkTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtExVc2LinkTo_Type.__name__ = "Integer32"
_PrtExVc2LinkTo_Object = MibTableColumn
prtExVc2LinkTo = _PrtExVc2LinkTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 11),
    _PrtExVc2LinkTo_Type()
)
prtExVc2LinkTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2LinkTo.setStatus("deprecated")


class _PrtExVc2OperMode_Type(Integer32):
    """Custom type prtExVc2OperMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("broadcast", 4),
          ("normal", 2),
          ("unidirectRx", 3))
    )


_PrtExVc2OperMode_Type.__name__ = "Integer32"
_PrtExVc2OperMode_Object = MibTableColumn
prtExVc2OperMode = _PrtExVc2OperMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 12),
    _PrtExVc2OperMode_Type()
)
prtExVc2OperMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2OperMode.setStatus("current")


class _PrtExVc2SigProfile_Type(Integer32):
    """Custom type prtExVc2SigProfile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("manual", 2),
          ("meteringPulse", 7),
          ("notApplicable", 1),
          ("p1", 3),
          ("p2", 4),
          ("p3Fxo3S3", 5),
          ("p4", 8),
          ("reversePolarity", 6))
    )


_PrtExVc2SigProfile_Type.__name__ = "Integer32"
_PrtExVc2SigProfile_Object = MibTableColumn
prtExVc2SigProfile = _PrtExVc2SigProfile_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 13),
    _PrtExVc2SigProfile_Type()
)
prtExVc2SigProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2SigProfile.setStatus("current")


class _PrtExVc2CallEnable_Type(Integer32):
    """Custom type prtExVc2CallEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("both", 4),
          ("incoming", 2),
          ("notApplicable", 1),
          ("outgoing", 3))
    )


_PrtExVc2CallEnable_Type.__name__ = "Integer32"
_PrtExVc2CallEnable_Object = MibTableColumn
prtExVc2CallEnable = _PrtExVc2CallEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 14),
    _PrtExVc2CallEnable_Type()
)
prtExVc2CallEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2CallEnable.setStatus("current")


class _PrtExVc2R2Delay_Type(Integer32):
    """Custom type prtExVc2R2Delay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("satellite", 3),
          ("terrestrial", 2))
    )


_PrtExVc2R2Delay_Type.__name__ = "Integer32"
_PrtExVc2R2Delay_Object = MibTableColumn
prtExVc2R2Delay = _PrtExVc2R2Delay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 15),
    _PrtExVc2R2Delay_Type()
)
prtExVc2R2Delay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2R2Delay.setStatus("current")


class _PrtExVc2CasStd_Type(Integer32):
    """Custom type prtExVc2CasStd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("r2Q422", 2),
          ("specialA", 3),
          ("specialB", 4),
          ("specialC", 5),
          ("specialD", 6),
          ("specialE", 7),
          ("specialF", 8),
          ("specialG", 9))
    )


_PrtExVc2CasStd_Type.__name__ = "Integer32"
_PrtExVc2CasStd_Object = MibTableColumn
prtExVc2CasStd = _PrtExVc2CasStd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 16),
    _PrtExVc2CasStd_Type()
)
prtExVc2CasStd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2CasStd.setStatus("current")


class _PrtExVc2EchoCanceler_Type(Integer32):
    """Custom type prtExVc2EchoCanceler based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_PrtExVc2EchoCanceler_Type.__name__ = "Integer32"
_PrtExVc2EchoCanceler_Object = MibTableColumn
prtExVc2EchoCanceler = _PrtExVc2EchoCanceler_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 17),
    _PrtExVc2EchoCanceler_Type()
)
prtExVc2EchoCanceler.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2EchoCanceler.setStatus("current")


class _PrtExVc2IfType_Type(Integer32):
    """Custom type prtExVc2IfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("fxo", 4),
          ("fxs", 5),
          ("notApplicable", 1),
          ("w2Em", 2),
          ("w4Em", 3))
    )


_PrtExVc2IfType_Type.__name__ = "Integer32"
_PrtExVc2IfType_Object = MibTableColumn
prtExVc2IfType = _PrtExVc2IfType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 18),
    _PrtExVc2IfType_Type()
)
prtExVc2IfType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2IfType.setStatus("current")


class _PrtExVc2Encoding_Type(Integer32):
    """Custom type prtExVc2Encoding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("adpcm", 3),
          ("linear", 4),
          ("notApplicable", 1),
          ("pcm", 2))
    )


_PrtExVc2Encoding_Type.__name__ = "Integer32"
_PrtExVc2Encoding_Object = MibTableColumn
prtExVc2Encoding = _PrtExVc2Encoding_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 19),
    _PrtExVc2Encoding_Type()
)
prtExVc2Encoding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2Encoding.setStatus("current")
_PrtExVc2TxBitCode_Type = OctetString
_PrtExVc2TxBitCode_Object = MibTableColumn
prtExVc2TxBitCode = _PrtExVc2TxBitCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 20),
    _PrtExVc2TxBitCode_Type()
)
prtExVc2TxBitCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2TxBitCode.setStatus("current")
_PrtExVc2RxBitOutput_Type = OctetString
_PrtExVc2RxBitOutput_Object = MibTableColumn
prtExVc2RxBitOutput = _PrtExVc2RxBitOutput_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 21),
    _PrtExVc2RxBitOutput_Type()
)
prtExVc2RxBitOutput.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2RxBitOutput.setStatus("current")


class _PrtExVc2MeterRate_Type(Integer32):
    """Custom type prtExVc2MeterRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 4),
          ("notApplicable", 1),
          ("r12Khz", 3),
          ("r16Khz", 2))
    )


_PrtExVc2MeterRate_Type.__name__ = "Integer32"
_PrtExVc2MeterRate_Object = MibTableColumn
prtExVc2MeterRate = _PrtExVc2MeterRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 22),
    _PrtExVc2MeterRate_Type()
)
prtExVc2MeterRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2MeterRate.setStatus("current")


class _PrtExVc2IfSignaling_Type(Integer32):
    """Custom type prtExVc2IfSignaling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("groundStart", 3),
          ("loopStart", 2),
          ("notApplicable", 1),
          ("winkStart", 4))
    )


_PrtExVc2IfSignaling_Type.__name__ = "Integer32"
_PrtExVc2IfSignaling_Object = MibTableColumn
prtExVc2IfSignaling = _PrtExVc2IfSignaling_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 23),
    _PrtExVc2IfSignaling_Type()
)
prtExVc2IfSignaling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2IfSignaling.setStatus("current")


class _PrtExVc2SeizeAck_Type(Integer32):
    """Custom type prtExVc2SeizeAck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtExVc2SeizeAck_Type.__name__ = "Integer32"
_PrtExVc2SeizeAck_Object = MibTableColumn
prtExVc2SeizeAck = _PrtExVc2SeizeAck_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 24),
    _PrtExVc2SeizeAck_Type()
)
prtExVc2SeizeAck.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2SeizeAck.setStatus("current")


class _PrtExVc2EandMType_Type(Integer32):
    """Custom type prtExVc2EandMType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("type1", 2),
          ("type2", 3),
          ("type3", 4),
          ("type5", 5))
    )


_PrtExVc2EandMType_Type.__name__ = "Integer32"
_PrtExVc2EandMType_Object = MibTableColumn
prtExVc2EandMType = _PrtExVc2EandMType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 25),
    _PrtExVc2EandMType_Type()
)
prtExVc2EandMType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2EandMType.setStatus("current")


class _PrtExVc2RemType_Type(Integer32):
    """Custom type prtExVc2RemType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("e1", 4),
          ("lb", 2),
          ("notApplicable", 1),
          ("pbx", 3),
          ("t1", 5),
          ("t1D4", 6))
    )


_PrtExVc2RemType_Type.__name__ = "Integer32"
_PrtExVc2RemType_Object = MibTableColumn
prtExVc2RemType = _PrtExVc2RemType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 26),
    _PrtExVc2RemType_Type()
)
prtExVc2RemType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2RemType.setStatus("current")


class _PrtExVc2ConvTime_Type(Integer32):
    """Custom type prtExVc2ConvTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("m2", 2),
          ("m3", 3),
          ("m5", 4),
          ("notApplicable", 1),
          ("unlimited", 5))
    )


_PrtExVc2ConvTime_Type.__name__ = "Integer32"
_PrtExVc2ConvTime_Object = MibTableColumn
prtExVc2ConvTime = _PrtExVc2ConvTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 27),
    _PrtExVc2ConvTime_Type()
)
prtExVc2ConvTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2ConvTime.setStatus("current")


class _PrtExVc2SigFeedback_Type(Integer32):
    """Custom type prtExVc2SigFeedback based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtExVc2SigFeedback_Type.__name__ = "Integer32"
_PrtExVc2SigFeedback_Object = MibTableColumn
prtExVc2SigFeedback = _PrtExVc2SigFeedback_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 28),
    _PrtExVc2SigFeedback_Type()
)
prtExVc2SigFeedback.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2SigFeedback.setStatus("current")


class _PrtExVc2EchoCancelerModule_Type(Integer32):
    """Custom type prtExVc2EchoCancelerModule based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("exist", 3),
          ("notApplicable", 1),
          ("notExist", 2))
    )


_PrtExVc2EchoCancelerModule_Type.__name__ = "Integer32"
_PrtExVc2EchoCancelerModule_Object = MibTableColumn
prtExVc2EchoCancelerModule = _PrtExVc2EchoCancelerModule_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 29),
    _PrtExVc2EchoCancelerModule_Type()
)
prtExVc2EchoCancelerModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVc2EchoCancelerModule.setStatus("current")


class _PrtExVc2ReversePolarity_Type(Integer32):
    """Custom type prtExVc2ReversePolarity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_PrtExVc2ReversePolarity_Type.__name__ = "Integer32"
_PrtExVc2ReversePolarity_Object = MibTableColumn
prtExVc2ReversePolarity = _PrtExVc2ReversePolarity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 30),
    _PrtExVc2ReversePolarity_Type()
)
prtExVc2ReversePolarity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2ReversePolarity.setStatus("current")


class _PrtExVc2RingerFrequency_Type(Integer32):
    """Custom type prtExVc2RingerFrequency based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("f20Hz", 2),
          ("f25Hz", 3),
          ("f50Hz", 4),
          ("notApplicable", 1))
    )


_PrtExVc2RingerFrequency_Type.__name__ = "Integer32"
_PrtExVc2RingerFrequency_Object = MibTableColumn
prtExVc2RingerFrequency = _PrtExVc2RingerFrequency_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 31),
    _PrtExVc2RingerFrequency_Type()
)
prtExVc2RingerFrequency.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2RingerFrequency.setStatus("current")


class _PrtExVc2SigService_Type(Integer32):
    """Custom type prtExVc2SigService based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("advanced", 3),
          ("normal", 2),
          ("notApplicable", 1))
    )


_PrtExVc2SigService_Type.__name__ = "Integer32"
_PrtExVc2SigService_Object = MibTableColumn
prtExVc2SigService = _PrtExVc2SigService_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 32),
    _PrtExVc2SigService_Type()
)
prtExVc2SigService.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2SigService.setStatus("current")


class _PrtExVc2CallerIdEnable_Type(Integer32):
    """Custom type prtExVc2CallerIdEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_PrtExVc2CallerIdEnable_Type.__name__ = "Integer32"
_PrtExVc2CallerIdEnable_Object = MibTableColumn
prtExVc2CallerIdEnable = _PrtExVc2CallerIdEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 33),
    _PrtExVc2CallerIdEnable_Type()
)
prtExVc2CallerIdEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2CallerIdEnable.setStatus("current")


class _PrtExVc2CompressMethod_Type(Integer32):
    """Custom type prtExVc2CompressMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("g726", 2),
          ("g727", 3),
          ("notApplicable", 1))
    )


_PrtExVc2CompressMethod_Type.__name__ = "Integer32"
_PrtExVc2CompressMethod_Object = MibTableColumn
prtExVc2CompressMethod = _PrtExVc2CompressMethod_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 34),
    _PrtExVc2CompressMethod_Type()
)
prtExVc2CompressMethod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2CompressMethod.setStatus("current")


class _PrtExVc2ObMode_Type(Integer32):
    """Custom type prtExVc2ObMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("omniBus", 2),
          ("pointToMultiPointDst", 4),
          ("pointToMultiPointSrc", 3),
          ("pointToPoint", 1))
    )


_PrtExVc2ObMode_Type.__name__ = "Integer32"
_PrtExVc2ObMode_Object = MibTableColumn
prtExVc2ObMode = _PrtExVc2ObMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 35),
    _PrtExVc2ObMode_Type()
)
prtExVc2ObMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2ObMode.setStatus("current")


class _PrtExVc2VAD_Type(Integer32):
    """Custom type prtExVc2VAD based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_PrtExVc2VAD_Type.__name__ = "Integer32"
_PrtExVc2VAD_Object = MibTableColumn
prtExVc2VAD = _PrtExVc2VAD_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 36),
    _PrtExVc2VAD_Type()
)
prtExVc2VAD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2VAD.setStatus("current")


class _PrtExVc2NoiseLevelForVAD_Type(Integer32):
    """Custom type prtExVc2NoiseLevelForVAD based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("high", 4),
          ("low", 2),
          ("medium", 3),
          ("notApplicable", 1))
    )


_PrtExVc2NoiseLevelForVAD_Type.__name__ = "Integer32"
_PrtExVc2NoiseLevelForVAD_Object = MibTableColumn
prtExVc2NoiseLevelForVAD = _PrtExVc2NoiseLevelForVAD_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 37),
    _PrtExVc2NoiseLevelForVAD_Type()
)
prtExVc2NoiseLevelForVAD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2NoiseLevelForVAD.setStatus("current")


class _PrtExVc2WesternSigMode_Type(Integer32):
    """Custom type prtExVc2WesternSigMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("detector", 2),
          ("generator", 3),
          ("notApplicable", 1))
    )


_PrtExVc2WesternSigMode_Type.__name__ = "Integer32"
_PrtExVc2WesternSigMode_Object = MibTableColumn
prtExVc2WesternSigMode = _PrtExVc2WesternSigMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 38),
    _PrtExVc2WesternSigMode_Type()
)
prtExVc2WesternSigMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2WesternSigMode.setStatus("current")


class _PrtExVc2BusProtectionPoint_Type(Integer32):
    """Custom type prtExVc2BusProtectionPoint based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("first", 3),
          ("last", 4),
          ("no", 2),
          ("notApplicable", 1))
    )


_PrtExVc2BusProtectionPoint_Type.__name__ = "Integer32"
_PrtExVc2BusProtectionPoint_Object = MibTableColumn
prtExVc2BusProtectionPoint = _PrtExVc2BusProtectionPoint_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 39),
    _PrtExVc2BusProtectionPoint_Type()
)
prtExVc2BusProtectionPoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2BusProtectionPoint.setStatus("current")


class _PrtExVc2ImpedanceStandard_Type(Integer32):
    """Custom type prtExVc2ImpedanceStandard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("g712", 1),
          ("q522Italy", 3),
          ("q552ETSI", 2))
    )


_PrtExVc2ImpedanceStandard_Type.__name__ = "Integer32"
_PrtExVc2ImpedanceStandard_Object = MibTableColumn
prtExVc2ImpedanceStandard = _PrtExVc2ImpedanceStandard_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 40),
    _PrtExVc2ImpedanceStandard_Type()
)
prtExVc2ImpedanceStandard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc2ImpedanceStandard.setStatus("current")
_PrtHsfCnfgTable_Object = MibTable
prtHsfCnfgTable = _PrtHsfCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6)
)
if mibBuilder.loadTexts:
    prtHsfCnfgTable.setStatus("current")
_PrtHsfCnfgEntry_Object = MibTableRow
prtHsfCnfgEntry = _PrtHsfCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1)
)
prtHsfCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtHsfCnfgIdx"),
    (0, "RAD-MIB", "prtHsfSltIdx"),
    (0, "RAD-MIB", "prtHsfPrtIdx"),
)
if mibBuilder.loadTexts:
    prtHsfCnfgEntry.setStatus("current")


class _PrtHsfCnfgIdx_Type(Integer32):
    """Custom type prtHsfCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtHsfCnfgIdx_Type.__name__ = "Integer32"
_PrtHsfCnfgIdx_Object = MibTableColumn
prtHsfCnfgIdx = _PrtHsfCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 1),
    _PrtHsfCnfgIdx_Type()
)
prtHsfCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHsfCnfgIdx.setStatus("current")


class _PrtHsfSltIdx_Type(Integer32):
    """Custom type prtHsfSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtHsfSltIdx_Type.__name__ = "Integer32"
_PrtHsfSltIdx_Object = MibTableColumn
prtHsfSltIdx = _PrtHsfSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 2),
    _PrtHsfSltIdx_Type()
)
prtHsfSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHsfSltIdx.setStatus("current")


class _PrtHsfPrtIdx_Type(Integer32):
    """Custom type prtHsfPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              101,
              102)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt11", 11),
          ("exPrt12", 12),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9),
          ("inPrt1", 101),
          ("inPrt2", 102))
    )


_PrtHsfPrtIdx_Type.__name__ = "Integer32"
_PrtHsfPrtIdx_Object = MibTableColumn
prtHsfPrtIdx = _PrtHsfPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 3),
    _PrtHsfPrtIdx_Type()
)
prtHsfPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHsfPrtIdx.setStatus("current")


class _PrtExHsfConnect_Type(Integer32):
    """Custom type prtExHsfConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExHsfConnect_Type.__name__ = "Integer32"
_PrtExHsfConnect_Object = MibTableColumn
prtExHsfConnect = _PrtExHsfConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 4),
    _PrtExHsfConnect_Type()
)
prtExHsfConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsfConnect.setStatus("current")


class _PrtExHsfRate_Type(Integer32):
    """Custom type prtExHsfRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63)
        )
    )
    namedValues = NamedValues(
        *(("r10x56eq560Kbps", 19),
          ("r10x64eq640Kbps", 20),
          ("r11x56eq616Kbps", 21),
          ("r11x64eq704Kbps", 22),
          ("r12x56eq672Kbps", 23),
          ("r12x64eq768Kbps", 24),
          ("r13x56eq728Kbps", 25),
          ("r13x64eq832Kbps", 26),
          ("r14x56eq784Kbps", 27),
          ("r14x64eq896Kbps", 28),
          ("r15x56eq840Kbps", 29),
          ("r15x64eq960Kbps", 30),
          ("r16x56eq896Kbps", 31),
          ("r16x64eq1024Kbps", 32),
          ("r17x56eq952Kbps", 33),
          ("r17x64eq1088Kbps", 34),
          ("r18x56eq1008Kbps", 35),
          ("r18x64eq1152Kbps", 36),
          ("r19x56eq1064Kbps", 37),
          ("r19x64eq1216Kbps", 38),
          ("r1x56eq56Kbps", 1),
          ("r1x64eq64Kbps", 2),
          ("r20x56eq1120Kbps", 39),
          ("r20x64eq1280Kbps", 40),
          ("r21x56eq1176Kbps", 41),
          ("r21x64eq1344Kbps", 42),
          ("r22x56eq1232Kbps", 43),
          ("r22x64eq1408Kbps", 44),
          ("r23x56eq1288Kbps", 45),
          ("r23x64eq1472Kbps", 46),
          ("r24x56eq1344Kbps", 47),
          ("r24x64eq1536Kbps", 48),
          ("r25x56eq1400Kbps", 49),
          ("r25x64eq1600Kbps", 50),
          ("r26x56eq1456Kbps", 51),
          ("r26x64eq1664Kbps", 52),
          ("r27x56eq1512Kbps", 53),
          ("r27x64eq1728Kbps", 54),
          ("r28x56eq1568Kbps", 55),
          ("r28x64eq1792Kbps", 56),
          ("r29x56eq1624Kbps", 57),
          ("r29x64eq1856Kbps", 58),
          ("r2x56eq112Kbps", 3),
          ("r2x64eq128Kbps", 4),
          ("r30x56eq1680Kbps", 59),
          ("r30x64eq1920Kbps", 60),
          ("r31x56eq1736Kbps", 61),
          ("r31x64eq1984Kbps", 62),
          ("r32Kbps", 63),
          ("r3x56eq168Kbps", 5),
          ("r3x64eq192Kbps", 6),
          ("r4x56eq224Kbps", 7),
          ("r4x64eq256Kbps", 8),
          ("r5x56eq280Kbps", 9),
          ("r5x64eq320Kbps", 10),
          ("r6x56eq336Kbps", 11),
          ("r6x64eq384Kbps", 12),
          ("r7x56eq392Kbps", 13),
          ("r7x64eq448Kbps", 14),
          ("r8x56eq448Kbps", 15),
          ("r8x64eq512Kbps", 16),
          ("r9x56eq504Kbps", 17),
          ("r9x64eq576Kbps", 18))
    )


_PrtExHsfRate_Type.__name__ = "Integer32"
_PrtExHsfRate_Object = MibTableColumn
prtExHsfRate = _PrtExHsfRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 5),
    _PrtExHsfRate_Type()
)
prtExHsfRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsfRate.setStatus("current")


class _PrtExHsfClkMode_Type(Integer32):
    """Custom type prtExHsfClkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dce", 1),
          ("dte", 3),
          ("ext-dce", 2),
          ("none", 4))
    )


_PrtExHsfClkMode_Type.__name__ = "Integer32"
_PrtExHsfClkMode_Object = MibTableColumn
prtExHsfClkMode = _PrtExHsfClkMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 6),
    _PrtExHsfClkMode_Type()
)
prtExHsfClkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsfClkMode.setStatus("current")


class _PrtExHsfCts_Type(Integer32):
    """Custom type prtExHsfCts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("on", 2),
          ("rts", 3))
    )


_PrtExHsfCts_Type.__name__ = "Integer32"
_PrtExHsfCts_Object = MibTableColumn
prtExHsfCts = _PrtExHsfCts_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 7),
    _PrtExHsfCts_Type()
)
prtExHsfCts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsfCts.setStatus("current")


class _PrtExHsfFifoSize_Type(Integer32):
    """Custom type prtExHsfFifoSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("auto", 2),
          ("s16bits", 3),
          ("s30bits", 4),
          ("s52bits", 5),
          ("s72bits", 6))
    )


_PrtExHsfFifoSize_Type.__name__ = "Integer32"
_PrtExHsfFifoSize_Object = MibTableColumn
prtExHsfFifoSize = _PrtExHsfFifoSize_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 8),
    _PrtExHsfFifoSize_Type()
)
prtExHsfFifoSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsfFifoSize.setStatus("current")


class _PrtExHsfLinkTo_Type(Integer32):
    """Custom type prtExHsfLinkTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExHsfLinkTo_Type.__name__ = "Integer32"
_PrtExHsfLinkTo_Object = MibTableColumn
prtExHsfLinkTo = _PrtExHsfLinkTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 9),
    _PrtExHsfLinkTo_Type()
)
prtExHsfLinkTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsfLinkTo.setStatus("deprecated")


class _PrtExHsfOperMode_Type(Integer32):
    """Custom type prtExHsfOperMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("bidirBcastRing", 5),
          ("broadcast", 4),
          ("normal", 2),
          ("unidirectRx", 3))
    )


_PrtExHsfOperMode_Type.__name__ = "Integer32"
_PrtExHsfOperMode_Object = MibTableColumn
prtExHsfOperMode = _PrtExHsfOperMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 10),
    _PrtExHsfOperMode_Type()
)
prtExHsfOperMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsfOperMode.setStatus("current")


class _PrtExHsfInbandLoopback_Type(Integer32):
    """Custom type prtExHsfInbandLoopback based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("ft1Enabled", 3),
          ("notApplicable", 1))
    )


_PrtExHsfInbandLoopback_Type.__name__ = "Integer32"
_PrtExHsfInbandLoopback_Object = MibTableColumn
prtExHsfInbandLoopback = _PrtExHsfInbandLoopback_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 11),
    _PrtExHsfInbandLoopback_Type()
)
prtExHsfInbandLoopback.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsfInbandLoopback.setStatus("current")


class _PrtExHsfClkPolarity_Type(Integer32):
    """Custom type prtExHsfClkPolarity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("invert", 3),
          ("normal", 2),
          ("notApplicable", 1))
    )


_PrtExHsfClkPolarity_Type.__name__ = "Integer32"
_PrtExHsfClkPolarity_Object = MibTableColumn
prtExHsfClkPolarity = _PrtExHsfClkPolarity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 12),
    _PrtExHsfClkPolarity_Type()
)
prtExHsfClkPolarity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsfClkPolarity.setStatus("current")


class _PrtExHsfControlSignal_Type(Integer32):
    """Custom type prtExHsfControlSignal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("endToEnd", 3),
          ("local", 2),
          ("notApplicable", 1))
    )


_PrtExHsfControlSignal_Type.__name__ = "Integer32"
_PrtExHsfControlSignal_Object = MibTableColumn
prtExHsfControlSignal = _PrtExHsfControlSignal_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 13),
    _PrtExHsfControlSignal_Type()
)
prtExHsfControlSignal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsfControlSignal.setStatus("current")


class _PrtExHsfBcastRingSrcPort_Type(Integer32):
    """Custom type prtExHsfBcastRingSrcPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              100,
              255)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt11", 11),
          ("exPrt12", 12),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9),
          ("none", 100),
          ("notApplicable", 255))
    )


_PrtExHsfBcastRingSrcPort_Type.__name__ = "Integer32"
_PrtExHsfBcastRingSrcPort_Object = MibTableColumn
prtExHsfBcastRingSrcPort = _PrtExHsfBcastRingSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 14),
    _PrtExHsfBcastRingSrcPort_Type()
)
prtExHsfBcastRingSrcPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsfBcastRingSrcPort.setStatus("current")
_PrtHs4Cnfg_ObjectIdentity = ObjectIdentity
prtHs4Cnfg = _PrtHs4Cnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7)
)
_PrtExHs4CnfgTable_Object = MibTable
prtExHs4CnfgTable = _PrtExHs4CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1)
)
if mibBuilder.loadTexts:
    prtExHs4CnfgTable.setStatus("current")
_PrtExHs4CnfgEntry_Object = MibTableRow
prtExHs4CnfgEntry = _PrtExHs4CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1)
)
prtExHs4CnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtExHs4CnfgIdx"),
    (0, "RAD-MIB", "prtExHs4SltIdx"),
    (0, "RAD-MIB", "prtExHs4PrtIdx"),
)
if mibBuilder.loadTexts:
    prtExHs4CnfgEntry.setStatus("current")


class _PrtExHs4CnfgIdx_Type(Integer32):
    """Custom type prtExHs4CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExHs4CnfgIdx_Type.__name__ = "Integer32"
_PrtExHs4CnfgIdx_Object = MibTableColumn
prtExHs4CnfgIdx = _PrtExHs4CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 1),
    _PrtExHs4CnfgIdx_Type()
)
prtExHs4CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHs4CnfgIdx.setStatus("current")


class _PrtExHs4SltIdx_Type(Integer32):
    """Custom type prtExHs4SltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExHs4SltIdx_Type.__name__ = "Integer32"
_PrtExHs4SltIdx_Object = MibTableColumn
prtExHs4SltIdx = _PrtExHs4SltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 2),
    _PrtExHs4SltIdx_Type()
)
prtExHs4SltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHs4SltIdx.setStatus("current")


class _PrtExHs4PrtIdx_Type(Integer32):
    """Custom type prtExHs4PrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("exPrt1", 1)
    )


_PrtExHs4PrtIdx_Type.__name__ = "Integer32"
_PrtExHs4PrtIdx_Object = MibTableColumn
prtExHs4PrtIdx = _PrtExHs4PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 3),
    _PrtExHs4PrtIdx_Type()
)
prtExHs4PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHs4PrtIdx.setStatus("current")


class _PrtExHs4Connect_Type(Integer32):
    """Custom type prtExHs4Connect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExHs4Connect_Type.__name__ = "Integer32"
_PrtExHs4Connect_Object = MibTableColumn
prtExHs4Connect = _PrtExHs4Connect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 4),
    _PrtExHs4Connect_Type()
)
prtExHs4Connect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4Connect.setStatus("current")


class _PrtExHs4LineType_Type(Integer32):
    """Custom type prtExHs4LineType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("esfT1", 2),
          ("g732nE1", 4),
          ("g732nE1CRC", 5),
          ("g732sE1", 6),
          ("g732sE1CRC", 7),
          ("sfT1", 3))
    )


_PrtExHs4LineType_Type.__name__ = "Integer32"
_PrtExHs4LineType_Object = MibTableColumn
prtExHs4LineType = _PrtExHs4LineType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 5),
    _PrtExHs4LineType_Type()
)
prtExHs4LineType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4LineType.setStatus("current")


class _PrtExHs4LineCode_Type(Integer32):
    """Custom type prtExHs4LineCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("b7T1", 1),
          ("b8zsT1", 2),
          ("hdb3E1", 4))
    )


_PrtExHs4LineCode_Type.__name__ = "Integer32"
_PrtExHs4LineCode_Object = MibTableColumn
prtExHs4LineCode = _PrtExHs4LineCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 6),
    _PrtExHs4LineCode_Type()
)
prtExHs4LineCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4LineCode.setStatus("current")


class _PrtExHs4LineLen_Type(Integer32):
    """Custom type prtExHs4LineLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("fcc68", 7),
          ("len0p133ft", 2),
          ("len134p266ft", 3),
          ("len267p399ft", 4),
          ("len400p533ft", 5),
          ("len534p655ft", 6),
          ("unknown", 1))
    )


_PrtExHs4LineLen_Type.__name__ = "Integer32"
_PrtExHs4LineLen_Object = MibTableColumn
prtExHs4LineLen = _PrtExHs4LineLen_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 7),
    _PrtExHs4LineLen_Type()
)
prtExHs4LineLen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4LineLen.setStatus("current")


class _PrtExHs4RestoreT_Type(Integer32):
    """Custom type prtExHs4RestoreT based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ccittE1", 4),
          ("restoreT10sec62411", 3),
          ("restoreT1secFast", 2))
    )


_PrtExHs4RestoreT_Type.__name__ = "Integer32"
_PrtExHs4RestoreT_Object = MibTableColumn
prtExHs4RestoreT = _PrtExHs4RestoreT_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 8),
    _PrtExHs4RestoreT_Type()
)
prtExHs4RestoreT.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4RestoreT.setStatus("current")


class _PrtExHs4OosSig_Type(Integer32):
    """Custom type prtExHs4OosSig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("busyIdle", 5),
          ("forcedBusy", 4),
          ("forcedIdle", 3),
          ("idleBusy", 6),
          ("notsupported", 2))
    )


_PrtExHs4OosSig_Type.__name__ = "Integer32"
_PrtExHs4OosSig_Object = MibTableColumn
prtExHs4OosSig = _PrtExHs4OosSig_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 9),
    _PrtExHs4OosSig_Type()
)
prtExHs4OosSig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4OosSig.setStatus("current")


class _PrtExHs4OosCode_Type(Integer32):
    """Custom type prtExHs4OosCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("notsupported", 2),
          ("oosCode00H", 3),
          ("oosCode1aH", 4),
          ("oosCode54H", 5),
          ("oosCode7eH", 6),
          ("oosCode7fH", 7),
          ("oosCode98H", 8),
          ("oosCode9eH", 9),
          ("oosCoded5H", 10),
          ("oosCodee4H", 11),
          ("oosCodeffH", 12))
    )


_PrtExHs4OosCode_Type.__name__ = "Integer32"
_PrtExHs4OosCode_Object = MibTableColumn
prtExHs4OosCode = _PrtExHs4OosCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 10),
    _PrtExHs4OosCode_Type()
)
prtExHs4OosCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4OosCode.setStatus("current")
_PrtExHs4IdleCode_Type = Integer32
_PrtExHs4IdleCode_Object = MibTableColumn
prtExHs4IdleCode = _PrtExHs4IdleCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 11),
    _PrtExHs4IdleCode_Type()
)
prtExHs4IdleCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4IdleCode.setStatus("current")


class _PrtExHs4MfClkSrcSlt_Type(Integer32):
    """Custom type prtExHs4MfClkSrcSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("local", 2))
    )


_PrtExHs4MfClkSrcSlt_Type.__name__ = "Integer32"
_PrtExHs4MfClkSrcSlt_Object = MibTableColumn
prtExHs4MfClkSrcSlt = _PrtExHs4MfClkSrcSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 12),
    _PrtExHs4MfClkSrcSlt_Type()
)
prtExHs4MfClkSrcSlt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4MfClkSrcSlt.setStatus("current")


class _PrtExHs4MfClkSrcPrt_Type(Integer32):
    """Custom type prtExHs4MfClkSrcPrt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              101)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("inPrt1", 101))
    )


_PrtExHs4MfClkSrcPrt_Type.__name__ = "Integer32"
_PrtExHs4MfClkSrcPrt_Object = MibTableColumn
prtExHs4MfClkSrcPrt = _PrtExHs4MfClkSrcPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 13),
    _PrtExHs4MfClkSrcPrt_Type()
)
prtExHs4MfClkSrcPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4MfClkSrcPrt.setStatus("current")
_PrtExHs4TsCnfgTable_Object = MibTable
prtExHs4TsCnfgTable = _PrtExHs4TsCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2)
)
if mibBuilder.loadTexts:
    prtExHs4TsCnfgTable.setStatus("current")
_PrtExHs4TsEntry_Object = MibTableRow
prtExHs4TsEntry = _PrtExHs4TsEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1)
)
prtExHs4TsEntry.setIndexNames(
    (0, "RAD-MIB", "prtExHs4TsCnfgIdx"),
    (0, "RAD-MIB", "prtExHs4TsSltIdx"),
    (0, "RAD-MIB", "prtExHs4TsPrtIdx"),
    (0, "RAD-MIB", "prtExHs4TsIdx"),
)
if mibBuilder.loadTexts:
    prtExHs4TsEntry.setStatus("current")


class _PrtExHs4TsCnfgIdx_Type(Integer32):
    """Custom type prtExHs4TsCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExHs4TsCnfgIdx_Type.__name__ = "Integer32"
_PrtExHs4TsCnfgIdx_Object = MibTableColumn
prtExHs4TsCnfgIdx = _PrtExHs4TsCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1, 1),
    _PrtExHs4TsCnfgIdx_Type()
)
prtExHs4TsCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHs4TsCnfgIdx.setStatus("current")


class _PrtExHs4TsSltIdx_Type(Integer32):
    """Custom type prtExHs4TsSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExHs4TsSltIdx_Type.__name__ = "Integer32"
_PrtExHs4TsSltIdx_Object = MibTableColumn
prtExHs4TsSltIdx = _PrtExHs4TsSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1, 2),
    _PrtExHs4TsSltIdx_Type()
)
prtExHs4TsSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHs4TsSltIdx.setStatus("current")


class _PrtExHs4TsPrtIdx_Type(Integer32):
    """Custom type prtExHs4TsPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("exPrt1", 1)
    )


_PrtExHs4TsPrtIdx_Type.__name__ = "Integer32"
_PrtExHs4TsPrtIdx_Object = MibTableColumn
prtExHs4TsPrtIdx = _PrtExHs4TsPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1, 3),
    _PrtExHs4TsPrtIdx_Type()
)
prtExHs4TsPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHs4TsPrtIdx.setStatus("current")
_PrtExHs4TsIdx_Type = Integer32
_PrtExHs4TsIdx_Object = MibTableColumn
prtExHs4TsIdx = _PrtExHs4TsIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1, 4),
    _PrtExHs4TsIdx_Type()
)
prtExHs4TsIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHs4TsIdx.setStatus("current")


class _PrtExHs4TsIConSlot_Type(Integer32):
    """Custom type prtExHs4TsIConSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              100)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("noConnect", 2),
          ("split", 100))
    )


_PrtExHs4TsIConSlot_Type.__name__ = "Integer32"
_PrtExHs4TsIConSlot_Object = MibTableColumn
prtExHs4TsIConSlot = _PrtExHs4TsIConSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1, 5),
    _PrtExHs4TsIConSlot_Type()
)
prtExHs4TsIConSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4TsIConSlot.setStatus("current")


class _PrtExHs4TsIConPrt_Type(Integer32):
    """Custom type prtExHs4TsIConPrt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              100)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt11", 11),
          ("exPrt12", 12),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9),
          ("noConnect", 100))
    )


_PrtExHs4TsIConPrt_Type.__name__ = "Integer32"
_PrtExHs4TsIConPrt_Object = MibTableColumn
prtExHs4TsIConPrt = _PrtExHs4TsIConPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1, 6),
    _PrtExHs4TsIConPrt_Type()
)
prtExHs4TsIConPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4TsIConPrt.setStatus("current")
_PrtExHs4TsIConTs_Type = Integer32
_PrtExHs4TsIConTs_Object = MibTableColumn
prtExHs4TsIConTs = _PrtExHs4TsIConTs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1, 7),
    _PrtExHs4TsIConTs_Type()
)
prtExHs4TsIConTs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHs4TsIConTs.setStatus("current")
_PrtHsiCnfg_ObjectIdentity = ObjectIdentity
prtHsiCnfg = _PrtHsiCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8)
)
_PrtExHsiCnfgTable_Object = MibTable
prtExHsiCnfgTable = _PrtExHsiCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1)
)
if mibBuilder.loadTexts:
    prtExHsiCnfgTable.setStatus("current")
_PrtExHsiCnfgEntry_Object = MibTableRow
prtExHsiCnfgEntry = _PrtExHsiCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1)
)
prtExHsiCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtExHsiCnfgIdx"),
    (0, "RAD-MIB", "prtExHsiSltIdx"),
    (0, "RAD-MIB", "prtExHsiPrtIdx"),
)
if mibBuilder.loadTexts:
    prtExHsiCnfgEntry.setStatus("current")


class _PrtExHsiCnfgIdx_Type(Integer32):
    """Custom type prtExHsiCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExHsiCnfgIdx_Type.__name__ = "Integer32"
_PrtExHsiCnfgIdx_Object = MibTableColumn
prtExHsiCnfgIdx = _PrtExHsiCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 1),
    _PrtExHsiCnfgIdx_Type()
)
prtExHsiCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHsiCnfgIdx.setStatus("current")


class _PrtExHsiSltIdx_Type(Integer32):
    """Custom type prtExHsiSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtExHsiSltIdx_Type.__name__ = "Integer32"
_PrtExHsiSltIdx_Object = MibTableColumn
prtExHsiSltIdx = _PrtExHsiSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 2),
    _PrtExHsiSltIdx_Type()
)
prtExHsiSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHsiSltIdx.setStatus("current")
_PrtExHsiPrtIdx_Type = Integer32
_PrtExHsiPrtIdx_Object = MibTableColumn
prtExHsiPrtIdx = _PrtExHsiPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 3),
    _PrtExHsiPrtIdx_Type()
)
prtExHsiPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHsiPrtIdx.setStatus("current")


class _PrtExHsiConnect_Type(Integer32):
    """Custom type prtExHsiConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("v51", 4),
          ("v52", 5),
          ("yes", 3))
    )


_PrtExHsiConnect_Type.__name__ = "Integer32"
_PrtExHsiConnect_Object = MibTableColumn
prtExHsiConnect = _PrtExHsiConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 4),
    _PrtExHsiConnect_Type()
)
prtExHsiConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsiConnect.setStatus("current")


class _PrtExHsiRate_Type(Integer32):
    """Custom type prtExHsiRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("r1200bps", 3),
          ("r128kbps", 12),
          ("r19200bps", 7),
          ("r2400bps", 4),
          ("r38400bps", 8),
          ("r4800bps", 5),
          ("r48kbps", 9),
          ("r56kbps", 10),
          ("r600bps", 2),
          ("r64kbps", 11),
          ("r9600bps", 6))
    )


_PrtExHsiRate_Type.__name__ = "Integer32"
_PrtExHsiRate_Object = MibTableColumn
prtExHsiRate = _PrtExHsiRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 5),
    _PrtExHsiRate_Type()
)
prtExHsiRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsiRate.setStatus("current")


class _PrtExHsiLinkTo_Type(Integer32):
    """Custom type prtExHsiLinkTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExHsiLinkTo_Type.__name__ = "Integer32"
_PrtExHsiLinkTo_Object = MibTableColumn
prtExHsiLinkTo = _PrtExHsiLinkTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 6),
    _PrtExHsiLinkTo_Type()
)
prtExHsiLinkTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsiLinkTo.setStatus("deprecated")


class _PrtExHsiInterface_Type(Integer32):
    """Custom type prtExHsiInterface based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("lt", 1),
          ("lt1", 4),
          ("notApplicable", 255),
          ("nt", 2),
          ("te", 3))
    )


_PrtExHsiInterface_Type.__name__ = "Integer32"
_PrtExHsiInterface_Object = MibTableColumn
prtExHsiInterface = _PrtExHsiInterface_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 7),
    _PrtExHsiInterface_Type()
)
prtExHsiInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsiInterface.setStatus("current")


class _PrtExHsiActType_Type(Integer32):
    """Custom type prtExHsiActType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("type1", 2),
          ("type2", 3),
          ("type3", 4))
    )


_PrtExHsiActType_Type.__name__ = "Integer32"
_PrtExHsiActType_Object = MibTableColumn
prtExHsiActType = _PrtExHsiActType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 8),
    _PrtExHsiActType_Type()
)
prtExHsiActType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsiActType.setStatus("current")
_PrtInHsiCnfgTable_Object = MibTable
prtInHsiCnfgTable = _PrtInHsiCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2)
)
if mibBuilder.loadTexts:
    prtInHsiCnfgTable.setStatus("current")
_PrtInHsiCnfgEntry_Object = MibTableRow
prtInHsiCnfgEntry = _PrtInHsiCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2, 1)
)
prtInHsiCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtInHsiCnfgIdx"),
    (0, "RAD-MIB", "prtInHsiSltIdx"),
    (0, "RAD-MIB", "prtInHsiPrtIdx"),
)
if mibBuilder.loadTexts:
    prtInHsiCnfgEntry.setStatus("current")


class _PrtInHsiCnfgIdx_Type(Integer32):
    """Custom type prtInHsiCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtInHsiCnfgIdx_Type.__name__ = "Integer32"
_PrtInHsiCnfgIdx_Object = MibTableColumn
prtInHsiCnfgIdx = _PrtInHsiCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2, 1, 1),
    _PrtInHsiCnfgIdx_Type()
)
prtInHsiCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInHsiCnfgIdx.setStatus("current")


class _PrtInHsiSltIdx_Type(Integer32):
    """Custom type prtInHsiSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtInHsiSltIdx_Type.__name__ = "Integer32"
_PrtInHsiSltIdx_Object = MibTableColumn
prtInHsiSltIdx = _PrtInHsiSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2, 1, 2),
    _PrtInHsiSltIdx_Type()
)
prtInHsiSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInHsiSltIdx.setStatus("current")
_PrtInHsiPrtIdx_Type = Integer32
_PrtInHsiPrtIdx_Object = MibTableColumn
prtInHsiPrtIdx = _PrtInHsiPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2, 1, 3),
    _PrtInHsiPrtIdx_Type()
)
prtInHsiPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInHsiPrtIdx.setStatus("current")


class _PrtInHsiConnect_Type(Integer32):
    """Custom type prtInHsiConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtInHsiConnect_Type.__name__ = "Integer32"
_PrtInHsiConnect_Object = MibTableColumn
prtInHsiConnect = _PrtInHsiConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2, 1, 4),
    _PrtInHsiConnect_Type()
)
prtInHsiConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInHsiConnect.setStatus("current")


class _PrtInHsiRate_Type(Integer32):
    """Custom type prtInHsiRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              100,
              255)
        )
    )
    namedValues = NamedValues(
        *(("concentrated", 13),
          ("notApplicable", 255),
          ("notConnected", 100),
          ("r1200bps", 3),
          ("r128kbps", 12),
          ("r19200bps", 7),
          ("r2400bps", 4),
          ("r38400bps", 8),
          ("r4800bps", 5),
          ("r48kbps", 9),
          ("r56kbps", 10),
          ("r600bps", 2),
          ("r64kbps", 11),
          ("r9600bps", 6))
    )


_PrtInHsiRate_Type.__name__ = "Integer32"
_PrtInHsiRate_Object = MibTableColumn
prtInHsiRate = _PrtInHsiRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2, 1, 5),
    _PrtInHsiRate_Type()
)
prtInHsiRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInHsiRate.setStatus("current")
_PrtInHsiConcentratedTo_Type = Integer32
_PrtInHsiConcentratedTo_Object = MibTableColumn
prtInHsiConcentratedTo = _PrtInHsiConcentratedTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2, 1, 6),
    _PrtInHsiConcentratedTo_Type()
)
prtInHsiConcentratedTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInHsiConcentratedTo.setStatus("current")
_PrtPVc4Cnfg_ObjectIdentity = ObjectIdentity
prtPVc4Cnfg = _PrtPVc4Cnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9)
)
_PrtExPVc4CnfgTable_Object = MibTable
prtExPVc4CnfgTable = _PrtExPVc4CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1)
)
if mibBuilder.loadTexts:
    prtExPVc4CnfgTable.setStatus("current")
_PrtExPVc4CnfgEntry_Object = MibTableRow
prtExPVc4CnfgEntry = _PrtExPVc4CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1)
)
prtExPVc4CnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtExPVc4CnfgIdx"),
    (0, "RAD-MIB", "prtExPVc4SltIdx"),
    (0, "RAD-MIB", "prtExPVc4PrtIdx"),
)
if mibBuilder.loadTexts:
    prtExPVc4CnfgEntry.setStatus("current")


class _PrtExPVc4CnfgIdx_Type(Integer32):
    """Custom type prtExPVc4CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExPVc4CnfgIdx_Type.__name__ = "Integer32"
_PrtExPVc4CnfgIdx_Object = MibTableColumn
prtExPVc4CnfgIdx = _PrtExPVc4CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 1),
    _PrtExPVc4CnfgIdx_Type()
)
prtExPVc4CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPVc4CnfgIdx.setStatus("current")


class _PrtExPVc4SltIdx_Type(Integer32):
    """Custom type prtExPVc4SltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtExPVc4SltIdx_Type.__name__ = "Integer32"
_PrtExPVc4SltIdx_Object = MibTableColumn
prtExPVc4SltIdx = _PrtExPVc4SltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 2),
    _PrtExPVc4SltIdx_Type()
)
prtExPVc4SltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPVc4SltIdx.setStatus("current")


class _PrtExPVc4PrtIdx_Type(Integer32):
    """Custom type prtExPVc4PrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("inPrt1", 101),
          ("inPrt2", 102),
          ("inPrt3", 103),
          ("inPrt4", 104),
          ("inPrt5", 105),
          ("inPrt6", 106),
          ("inPrt7", 107),
          ("inPrt8", 108))
    )


_PrtExPVc4PrtIdx_Type.__name__ = "Integer32"
_PrtExPVc4PrtIdx_Object = MibTableColumn
prtExPVc4PrtIdx = _PrtExPVc4PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 3),
    _PrtExPVc4PrtIdx_Type()
)
prtExPVc4PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPVc4PrtIdx.setStatus("current")


class _PrtExPVc4PrtType_Type(Integer32):
    """Custom type prtExPVc4PrtType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("eAndM", 1),
          ("fxo", 2),
          ("fxs", 3),
          ("internal", 4),
          ("s0", 5),
          ("sQsig", 7),
          ("u", 6),
          ("uQsig", 8))
    )


_PrtExPVc4PrtType_Type.__name__ = "Integer32"
_PrtExPVc4PrtType_Object = MibTableColumn
prtExPVc4PrtType = _PrtExPVc4PrtType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 4),
    _PrtExPVc4PrtType_Type()
)
prtExPVc4PrtType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4PrtType.setStatus("current")


class _PrtExPVc4Connect_Type(Integer32):
    """Custom type prtExPVc4Connect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExPVc4Connect_Type.__name__ = "Integer32"
_PrtExPVc4Connect_Object = MibTableColumn
prtExPVc4Connect = _PrtExPVc4Connect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 5),
    _PrtExPVc4Connect_Type()
)
prtExPVc4Connect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4Connect.setStatus("current")


class _PrtExPVc4IfType_Type(Integer32):
    """Custom type prtExPVc4IfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("e1Framer", 8),
          ("e1Slave", 9),
          ("eAndM2wires", 3),
          ("eAndM4wires", 2),
          ("fxoGnd", 4),
          ("fxoLoop", 5),
          ("fxsGnd", 6),
          ("fxsLoop", 7),
          ("t1Framer", 10),
          ("t1Slave", 11),
          ("unknown", 1))
    )


_PrtExPVc4IfType_Type.__name__ = "Integer32"
_PrtExPVc4IfType_Object = MibTableColumn
prtExPVc4IfType = _PrtExPVc4IfType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 6),
    _PrtExPVc4IfType_Type()
)
prtExPVc4IfType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4IfType.setStatus("current")
_PrtExPVc4TxGain_Type = Integer32
_PrtExPVc4TxGain_Object = MibTableColumn
prtExPVc4TxGain = _PrtExPVc4TxGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 7),
    _PrtExPVc4TxGain_Type()
)
prtExPVc4TxGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4TxGain.setStatus("current")
_PrtExPVc4RxGain_Type = Integer32
_PrtExPVc4RxGain_Object = MibTableColumn
prtExPVc4RxGain = _PrtExPVc4RxGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 8),
    _PrtExPVc4RxGain_Type()
)
prtExPVc4RxGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4RxGain.setStatus("current")


class _PrtExPVc4MaxRate_Type(Integer32):
    """Custom type prtExPVc4MaxRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicatble", 255),
          ("notConnected", 1),
          ("r4800bps", 2),
          ("r7200bps", 3),
          ("r9600bps", 4))
    )


_PrtExPVc4MaxRate_Type.__name__ = "Integer32"
_PrtExPVc4MaxRate_Object = MibTableColumn
prtExPVc4MaxRate = _PrtExPVc4MaxRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 9),
    _PrtExPVc4MaxRate_Type()
)
prtExPVc4MaxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4MaxRate.setStatus("current")


class _PrtExPVc4Tc_Type(Integer32):
    """Custom type prtExPVc4Tc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("t1sec", 1),
          ("t2sec", 2),
          ("t3sec", 3),
          ("t4sec", 4))
    )


_PrtExPVc4Tc_Type.__name__ = "Integer32"
_PrtExPVc4Tc_Object = MibTableColumn
prtExPVc4Tc = _PrtExPVc4Tc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 10),
    _PrtExPVc4Tc_Type()
)
prtExPVc4Tc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4Tc.setStatus("current")


class _PrtExPVc4Oos_Type(Integer32):
    """Custom type prtExPVc4Oos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("busyIdle", 5),
          ("forcedBusy", 4),
          ("forcedIdle", 3),
          ("idleBusy", 6),
          ("notSupported", 2))
    )


_PrtExPVc4Oos_Type.__name__ = "Integer32"
_PrtExPVc4Oos_Object = MibTableColumn
prtExPVc4Oos = _PrtExPVc4Oos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 11),
    _PrtExPVc4Oos_Type()
)
prtExPVc4Oos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4Oos.setStatus("current")


class _PrtExPVc4EchoCanceler_Type(Integer32):
    """Custom type prtExPVc4EchoCanceler based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtExPVc4EchoCanceler_Type.__name__ = "Integer32"
_PrtExPVc4EchoCanceler_Object = MibTableColumn
prtExPVc4EchoCanceler = _PrtExPVc4EchoCanceler_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 12),
    _PrtExPVc4EchoCanceler_Type()
)
prtExPVc4EchoCanceler.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4EchoCanceler.setStatus("current")


class _PrtExPVc4VarDelay_Type(Integer32):
    """Custom type prtExPVc4VarDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 300),
    )


_PrtExPVc4VarDelay_Type.__name__ = "Integer32"
_PrtExPVc4VarDelay_Object = MibTableColumn
prtExPVc4VarDelay = _PrtExPVc4VarDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 13),
    _PrtExPVc4VarDelay_Type()
)
prtExPVc4VarDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4VarDelay.setStatus("current")


class _PrtExPVc4CongLevel_Type(Integer32):
    """Custom type prtExPVc4CongLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 70),
    )


_PrtExPVc4CongLevel_Type.__name__ = "Integer32"
_PrtExPVc4CongLevel_Object = MibTableColumn
prtExPVc4CongLevel = _PrtExPVc4CongLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 14),
    _PrtExPVc4CongLevel_Type()
)
prtExPVc4CongLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4CongLevel.setStatus("current")


class _PrtExPVc4Wire_Type(Integer32):
    """Custom type prtExPVc4Wire based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("w2wire", 1),
          ("w4wire", 2))
    )


_PrtExPVc4Wire_Type.__name__ = "Integer32"
_PrtExPVc4Wire_Object = MibTableColumn
prtExPVc4Wire = _PrtExPVc4Wire_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 15),
    _PrtExPVc4Wire_Type()
)
prtExPVc4Wire.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4Wire.setStatus("current")


class _PrtExPVc4ExtensionType_Type(Integer32):
    """Custom type prtExPVc4ExtensionType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("autoAccept", 8),
          ("forceConnect", 2),
          ("ipForceConnect", 6),
          ("notApplicable", 1),
          ("permanentDial", 7),
          ("transparent", 4),
          ("transparentPlus", 5),
          ("voiceSwitching", 3))
    )


_PrtExPVc4ExtensionType_Type.__name__ = "Integer32"
_PrtExPVc4ExtensionType_Object = MibTableColumn
prtExPVc4ExtensionType = _PrtExPVc4ExtensionType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 16),
    _PrtExPVc4ExtensionType_Type()
)
prtExPVc4ExtensionType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4ExtensionType.setStatus("current")


class _PrtExPVc4ExtensionNumber_Type(DisplayString):
    """Custom type prtExPVc4ExtensionNumber based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_PrtExPVc4ExtensionNumber_Type.__name__ = "DisplayString"
_PrtExPVc4ExtensionNumber_Object = MibTableColumn
prtExPVc4ExtensionNumber = _PrtExPVc4ExtensionNumber_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 17),
    _PrtExPVc4ExtensionNumber_Type()
)
prtExPVc4ExtensionNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4ExtensionNumber.setStatus("current")


class _PrtExPVc4OutPulsing_Type(Integer32):
    """Custom type prtExPVc4OutPulsing based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtExPVc4OutPulsing_Type.__name__ = "Integer32"
_PrtExPVc4OutPulsing_Object = MibTableColumn
prtExPVc4OutPulsing = _PrtExPVc4OutPulsing_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 18),
    _PrtExPVc4OutPulsing_Type()
)
prtExPVc4OutPulsing.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4OutPulsing.setStatus("current")


class _PrtExPVc4HuntGroupMb_Type(Integer32):
    """Custom type prtExPVc4HuntGroupMb based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtExPVc4HuntGroupMb_Type.__name__ = "Integer32"
_PrtExPVc4HuntGroupMb_Object = MibTableColumn
prtExPVc4HuntGroupMb = _PrtExPVc4HuntGroupMb_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 19),
    _PrtExPVc4HuntGroupMb_Type()
)
prtExPVc4HuntGroupMb.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4HuntGroupMb.setStatus("current")


class _PrtExPVc4HuntGroupIdx_Type(Integer32):
    """Custom type prtExPVc4HuntGroupIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_PrtExPVc4HuntGroupIdx_Type.__name__ = "Integer32"
_PrtExPVc4HuntGroupIdx_Object = MibTableColumn
prtExPVc4HuntGroupIdx = _PrtExPVc4HuntGroupIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 20),
    _PrtExPVc4HuntGroupIdx_Type()
)
prtExPVc4HuntGroupIdx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4HuntGroupIdx.setStatus("current")


class _PrtExPVc4AutoFaxMode_Type(Integer32):
    """Custom type prtExPVc4AutoFaxMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtExPVc4AutoFaxMode_Type.__name__ = "Integer32"
_PrtExPVc4AutoFaxMode_Object = MibTableColumn
prtExPVc4AutoFaxMode = _PrtExPVc4AutoFaxMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 21),
    _PrtExPVc4AutoFaxMode_Type()
)
prtExPVc4AutoFaxMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4AutoFaxMode.setStatus("current")


class _PrtExPVc4FaxRate_Type(Integer32):
    """Custom type prtExPVc4FaxRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("notConnected", 1),
          ("r12000bps", 5),
          ("r14400bps", 6),
          ("r2400bps", 7),
          ("r4800bps", 2),
          ("r7200bps", 3),
          ("r9600bps", 4),
          ("vbdFax", 8))
    )


_PrtExPVc4FaxRate_Type.__name__ = "Integer32"
_PrtExPVc4FaxRate_Object = MibTableColumn
prtExPVc4FaxRate = _PrtExPVc4FaxRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 22),
    _PrtExPVc4FaxRate_Type()
)
prtExPVc4FaxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4FaxRate.setStatus("current")


class _PrtExPVc4SeizeAck_Type(Integer32):
    """Custom type prtExPVc4SeizeAck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExPVc4SeizeAck_Type.__name__ = "Integer32"
_PrtExPVc4SeizeAck_Object = MibTableColumn
prtExPVc4SeizeAck = _PrtExPVc4SeizeAck_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 23),
    _PrtExPVc4SeizeAck_Type()
)
prtExPVc4SeizeAck.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4SeizeAck.setStatus("current")


class _PrtExPVc4SignalingProtocol_Type(Integer32):
    """Custom type prtExPVc4SignalingProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("delayStart", 2),
          ("immediateStart", 3),
          ("winkStart", 4))
    )


_PrtExPVc4SignalingProtocol_Type.__name__ = "Integer32"
_PrtExPVc4SignalingProtocol_Object = MibTableColumn
prtExPVc4SignalingProtocol = _PrtExPVc4SignalingProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 24),
    _PrtExPVc4SignalingProtocol_Type()
)
prtExPVc4SignalingProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4SignalingProtocol.setStatus("current")
_PrtExPVc4DelayStart_Type = Integer32
_PrtExPVc4DelayStart_Object = MibTableColumn
prtExPVc4DelayStart = _PrtExPVc4DelayStart_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 25),
    _PrtExPVc4DelayStart_Type()
)
prtExPVc4DelayStart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DelayStart.setStatus("current")
_PrtExPVc4WinkMinDuration_Type = Integer32
_PrtExPVc4WinkMinDuration_Object = MibTableColumn
prtExPVc4WinkMinDuration = _PrtExPVc4WinkMinDuration_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 26),
    _PrtExPVc4WinkMinDuration_Type()
)
prtExPVc4WinkMinDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4WinkMinDuration.setStatus("current")
_PrtExPVc4WinkMaxDuration_Type = Integer32
_PrtExPVc4WinkMaxDuration_Object = MibTableColumn
prtExPVc4WinkMaxDuration = _PrtExPVc4WinkMaxDuration_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 27),
    _PrtExPVc4WinkMaxDuration_Type()
)
prtExPVc4WinkMaxDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4WinkMaxDuration.setStatus("current")


class _PrtExPVc4GenerateTone_Type(Integer32):
    """Custom type prtExPVc4GenerateTone based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtExPVc4GenerateTone_Type.__name__ = "Integer32"
_PrtExPVc4GenerateTone_Object = MibTableColumn
prtExPVc4GenerateTone = _PrtExPVc4GenerateTone_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 28),
    _PrtExPVc4GenerateTone_Type()
)
prtExPVc4GenerateTone.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4GenerateTone.setStatus("current")


class _PrtExPVc4CodingLaw_Type(Integer32):
    """Custom type prtExPVc4CodingLaw based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("aLAW", 1),
          ("uLAW", 2))
    )


_PrtExPVc4CodingLaw_Type.__name__ = "Integer32"
_PrtExPVc4CodingLaw_Object = MibTableColumn
prtExPVc4CodingLaw = _PrtExPVc4CodingLaw_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 29),
    _PrtExPVc4CodingLaw_Type()
)
prtExPVc4CodingLaw.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4CodingLaw.setStatus("current")


class _PrtExPVc4GenerateRingBack_Type(Integer32):
    """Custom type prtExPVc4GenerateRingBack based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtExPVc4GenerateRingBack_Type.__name__ = "Integer32"
_PrtExPVc4GenerateRingBack_Object = MibTableColumn
prtExPVc4GenerateRingBack = _PrtExPVc4GenerateRingBack_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 30),
    _PrtExPVc4GenerateRingBack_Type()
)
prtExPVc4GenerateRingBack.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4GenerateRingBack.setStatus("current")


class _PrtExPVc4ChannelId_Type(Integer32):
    """Custom type prtExPVc4ChannelId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 256),
    )


_PrtExPVc4ChannelId_Type.__name__ = "Integer32"
_PrtExPVc4ChannelId_Object = MibTableColumn
prtExPVc4ChannelId = _PrtExPVc4ChannelId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 31),
    _PrtExPVc4ChannelId_Type()
)
prtExPVc4ChannelId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4ChannelId.setStatus("current")


class _PrtExPVc4PortConnection_Type(Integer32):
    """Custom type prtExPVc4PortConnection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("line", 2),
          ("notApplicable", 1),
          ("trunk", 3))
    )


_PrtExPVc4PortConnection_Type.__name__ = "Integer32"
_PrtExPVc4PortConnection_Object = MibTableColumn
prtExPVc4PortConnection = _PrtExPVc4PortConnection_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 32),
    _PrtExPVc4PortConnection_Type()
)
prtExPVc4PortConnection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4PortConnection.setStatus("current")


class _PrtExPVc4CoderAndRate_Type(Integer32):
    """Custom type prtExPVc4CoderAndRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34)
        )
    )
    namedValues = NamedValues(
        *(("amr10200BPS", 33),
          ("amr12200BPS", 34),
          ("amr4750BPS", 27),
          ("amr5150BPS", 28),
          ("amr5900BPS", 29),
          ("amr6700BPS", 30),
          ("amr7400BPS", 31),
          ("amr7950BPS", 32),
          ("g711aLAW", 5),
          ("g711uLAW", 6),
          ("g7231r5300BPS", 3),
          ("g7231r6300BPS", 2),
          ("g726r16KBPS", 7),
          ("g726r24KBPS", 8),
          ("g726r32KBPS", 9),
          ("g726r40KBPS", 10),
          ("g727r16KBPS", 11),
          ("g727r16r32KBPS", 14),
          ("g727r24KBPS", 13),
          ("g727r24r16KBPS", 12),
          ("g727r32KBPS", 16),
          ("g727r32r24KBPS", 15),
          ("g727r40r16KBPS", 17),
          ("g727r40r24KBPS", 18),
          ("g727r40r32KBPS", 19),
          ("g729A8KBPS", 4),
          ("lowBitRateR2660BPS", 26),
          ("netcoder6400BPS", 21),
          ("netcoder7200BPS", 22),
          ("netcoder8800BPS", 24),
          ("netcoder8KBPS", 23),
          ("netcoder9600BPS", 25),
          ("notApplicable", 1),
          ("transparent", 20))
    )


_PrtExPVc4CoderAndRate_Type.__name__ = "Integer32"
_PrtExPVc4CoderAndRate_Object = MibTableColumn
prtExPVc4CoderAndRate = _PrtExPVc4CoderAndRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 33),
    _PrtExPVc4CoderAndRate_Type()
)
prtExPVc4CoderAndRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4CoderAndRate.setStatus("current")
_PrtExPVc4DestinationNum_Type = DisplayString
_PrtExPVc4DestinationNum_Object = MibTableColumn
prtExPVc4DestinationNum = _PrtExPVc4DestinationNum_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 34),
    _PrtExPVc4DestinationNum_Type()
)
prtExPVc4DestinationNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DestinationNum.setStatus("current")


class _PrtExPVc4DtmfRelay_Type(Integer32):
    """Custom type prtExPVc4DtmfRelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_PrtExPVc4DtmfRelay_Type.__name__ = "Integer32"
_PrtExPVc4DtmfRelay_Object = MibTableColumn
prtExPVc4DtmfRelay = _PrtExPVc4DtmfRelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 35),
    _PrtExPVc4DtmfRelay_Type()
)
prtExPVc4DtmfRelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DtmfRelay.setStatus("current")
_PrtExPVc4DiscOnSilence_Type = Integer32
_PrtExPVc4DiscOnSilence_Object = MibTableColumn
prtExPVc4DiscOnSilence = _PrtExPVc4DiscOnSilence_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 36),
    _PrtExPVc4DiscOnSilence_Type()
)
prtExPVc4DiscOnSilence.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DiscOnSilence.setStatus("current")


class _PrtExPVc4DynamicJitter_Type(Integer32):
    """Custom type prtExPVc4DynamicJitter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_PrtExPVc4DynamicJitter_Type.__name__ = "Integer32"
_PrtExPVc4DynamicJitter_Object = MibTableColumn
prtExPVc4DynamicJitter = _PrtExPVc4DynamicJitter_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 37),
    _PrtExPVc4DynamicJitter_Type()
)
prtExPVc4DynamicJitter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DynamicJitter.setStatus("current")


class _PrtExPVc4EandMType_Type(Integer32):
    """Custom type prtExPVc4EandMType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("ssdc5", 5),
          ("type1", 2),
          ("type2", 3),
          ("type3", 4))
    )


_PrtExPVc4EandMType_Type.__name__ = "Integer32"
_PrtExPVc4EandMType_Object = MibTableColumn
prtExPVc4EandMType = _PrtExPVc4EandMType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 38),
    _PrtExPVc4EandMType_Type()
)
prtExPVc4EandMType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4EandMType.setStatus("current")


class _PrtExPVc4Rate_Type(Integer32):
    """Custom type prtExPVc4Rate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_PrtExPVc4Rate_Type.__name__ = "Integer32"
_PrtExPVc4Rate_Object = MibTableColumn
prtExPVc4Rate = _PrtExPVc4Rate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 39),
    _PrtExPVc4Rate_Type()
)
prtExPVc4Rate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4Rate.setStatus("current")
_PrtExPVc4FrameSize_Type = Integer32
_PrtExPVc4FrameSize_Object = MibTableColumn
prtExPVc4FrameSize = _PrtExPVc4FrameSize_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 40),
    _PrtExPVc4FrameSize_Type()
)
prtExPVc4FrameSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4FrameSize.setStatus("current")
_PrtExPVc4MultiplexInterval_Type = Integer32
_PrtExPVc4MultiplexInterval_Object = MibTableColumn
prtExPVc4MultiplexInterval = _PrtExPVc4MultiplexInterval_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 41),
    _PrtExPVc4MultiplexInterval_Type()
)
prtExPVc4MultiplexInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4MultiplexInterval.setStatus("current")


class _PrtExPVc4TransportProtocol_Type(Integer32):
    """Custom type prtExPVc4TransportProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("aal2oMpls", 3),
          ("notApplicable", 1),
          ("ptp", 2))
    )


_PrtExPVc4TransportProtocol_Type.__name__ = "Integer32"
_PrtExPVc4TransportProtocol_Object = MibTableColumn
prtExPVc4TransportProtocol = _PrtExPVc4TransportProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 42),
    _PrtExPVc4TransportProtocol_Type()
)
prtExPVc4TransportProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4TransportProtocol.setStatus("current")


class _PrtExPVc4MultiFreqRelay_Type(Integer32):
    """Custom type prtExPVc4MultiFreqRelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_PrtExPVc4MultiFreqRelay_Type.__name__ = "Integer32"
_PrtExPVc4MultiFreqRelay_Object = MibTableColumn
prtExPVc4MultiFreqRelay = _PrtExPVc4MultiFreqRelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 43),
    _PrtExPVc4MultiFreqRelay_Type()
)
prtExPVc4MultiFreqRelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4MultiFreqRelay.setStatus("current")
_PrtExPVc4MinPulseWidth_Type = Integer32
_PrtExPVc4MinPulseWidth_Object = MibTableColumn
prtExPVc4MinPulseWidth = _PrtExPVc4MinPulseWidth_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 44),
    _PrtExPVc4MinPulseWidth_Type()
)
prtExPVc4MinPulseWidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4MinPulseWidth.setStatus("current")
_PrtExPVc4MinPowerLevel_Type = Integer32
_PrtExPVc4MinPowerLevel_Object = MibTableColumn
prtExPVc4MinPowerLevel = _PrtExPVc4MinPowerLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 45),
    _PrtExPVc4MinPowerLevel_Type()
)
prtExPVc4MinPowerLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4MinPowerLevel.setStatus("current")


class _PrtExPVc4SuperTandem_Type(Integer32):
    """Custom type prtExPVc4SuperTandem based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_PrtExPVc4SuperTandem_Type.__name__ = "Integer32"
_PrtExPVc4SuperTandem_Object = MibTableColumn
prtExPVc4SuperTandem = _PrtExPVc4SuperTandem_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 46),
    _PrtExPVc4SuperTandem_Type()
)
prtExPVc4SuperTandem.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4SuperTandem.setStatus("current")
_PrtExPVc4DestIp_Type = IpAddress
_PrtExPVc4DestIp_Object = MibTableColumn
prtExPVc4DestIp = _PrtExPVc4DestIp_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 47),
    _PrtExPVc4DestIp_Type()
)
prtExPVc4DestIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DestIp.setStatus("current")
_PrtExPVc4DestBundle_Type = Integer32
_PrtExPVc4DestBundle_Object = MibTableColumn
prtExPVc4DestBundle = _PrtExPVc4DestBundle_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 48),
    _PrtExPVc4DestBundle_Type()
)
prtExPVc4DestBundle.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DestBundle.setStatus("current")
_PrtExPVc4SrcIpAddress_Type = IpAddress
_PrtExPVc4SrcIpAddress_Object = MibTableColumn
prtExPVc4SrcIpAddress = _PrtExPVc4SrcIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 49),
    _PrtExPVc4SrcIpAddress_Type()
)
prtExPVc4SrcIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4SrcIpAddress.setStatus("current")
_PrtExPVc4SrcIpMask_Type = IpAddress
_PrtExPVc4SrcIpMask_Object = MibTableColumn
prtExPVc4SrcIpMask = _PrtExPVc4SrcIpMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 50),
    _PrtExPVc4SrcIpMask_Type()
)
prtExPVc4SrcIpMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4SrcIpMask.setStatus("current")
_PrtExPVc4DefaultGateway_Type = IpAddress
_PrtExPVc4DefaultGateway_Object = MibTableColumn
prtExPVc4DefaultGateway = _PrtExPVc4DefaultGateway_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 51),
    _PrtExPVc4DefaultGateway_Type()
)
prtExPVc4DefaultGateway.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DefaultGateway.setStatus("current")
_PrtExPVc4SigPacketInterval_Type = Unsigned32
_PrtExPVc4SigPacketInterval_Object = MibTableColumn
prtExPVc4SigPacketInterval = _PrtExPVc4SigPacketInterval_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 52),
    _PrtExPVc4SigPacketInterval_Type()
)
prtExPVc4SigPacketInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4SigPacketInterval.setStatus("current")
_PrtExPVc4DlciTable_Object = MibTable
prtExPVc4DlciTable = _PrtExPVc4DlciTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2)
)
if mibBuilder.loadTexts:
    prtExPVc4DlciTable.setStatus("current")
_PrtExPVc4DlciEntry_Object = MibTableRow
prtExPVc4DlciEntry = _PrtExPVc4DlciEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1)
)
prtExPVc4DlciEntry.setIndexNames(
    (0, "RAD-MIB", "prtExPVc4DlciCnfgIdx"),
    (0, "RAD-MIB", "prtExPVc4DlciSltIdx"),
    (0, "RAD-MIB", "prtExPVc4DlciPrtIdx"),
)
if mibBuilder.loadTexts:
    prtExPVc4DlciEntry.setStatus("current")


class _PrtExPVc4DlciCnfgIdx_Type(Integer32):
    """Custom type prtExPVc4DlciCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExPVc4DlciCnfgIdx_Type.__name__ = "Integer32"
_PrtExPVc4DlciCnfgIdx_Object = MibTableColumn
prtExPVc4DlciCnfgIdx = _PrtExPVc4DlciCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 1),
    _PrtExPVc4DlciCnfgIdx_Type()
)
prtExPVc4DlciCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPVc4DlciCnfgIdx.setStatus("current")


class _PrtExPVc4DlciSltIdx_Type(Integer32):
    """Custom type prtExPVc4DlciSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtExPVc4DlciSltIdx_Type.__name__ = "Integer32"
_PrtExPVc4DlciSltIdx_Object = MibTableColumn
prtExPVc4DlciSltIdx = _PrtExPVc4DlciSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 2),
    _PrtExPVc4DlciSltIdx_Type()
)
prtExPVc4DlciSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPVc4DlciSltIdx.setStatus("current")


class _PrtExPVc4DlciPrtIdx_Type(Integer32):
    """Custom type prtExPVc4DlciPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4))
    )


_PrtExPVc4DlciPrtIdx_Type.__name__ = "Integer32"
_PrtExPVc4DlciPrtIdx_Object = MibTableColumn
prtExPVc4DlciPrtIdx = _PrtExPVc4DlciPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 3),
    _PrtExPVc4DlciPrtIdx_Type()
)
prtExPVc4DlciPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPVc4DlciPrtIdx.setStatus("current")


class _PrtExPVc4DlciValid_Type(Integer32):
    """Custom type prtExPVc4DlciValid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExPVc4DlciValid_Type.__name__ = "Integer32"
_PrtExPVc4DlciValid_Object = MibTableColumn
prtExPVc4DlciValid = _PrtExPVc4DlciValid_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 4),
    _PrtExPVc4DlciValid_Type()
)
prtExPVc4DlciValid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DlciValid.setStatus("current")


class _PrtExPVc4DlciIConSlt_Type(Integer32):
    """Custom type prtExPVc4DlciIConSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("noConnect", 2),
          ("notApplicable", 255))
    )


_PrtExPVc4DlciIConSlt_Type.__name__ = "Integer32"
_PrtExPVc4DlciIConSlt_Object = MibTableColumn
prtExPVc4DlciIConSlt = _PrtExPVc4DlciIConSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 5),
    _PrtExPVc4DlciIConSlt_Type()
)
prtExPVc4DlciIConSlt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DlciIConSlt.setStatus("current")


class _PrtExPVc4DlciIConPrt_Type(Integer32):
    """Custom type prtExPVc4DlciIConPrt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9),
          ("inPrt1", 101),
          ("inPrt10", 110),
          ("inPrt11", 111),
          ("inPrt12", 112),
          ("inPrt2", 102),
          ("inPrt3", 103),
          ("inPrt4", 104),
          ("inPrt5", 105),
          ("inPrt6", 106),
          ("inPrt7", 107),
          ("inPrt8", 108),
          ("inPrt9", 109),
          ("noConnect", 100))
    )


_PrtExPVc4DlciIConPrt_Type.__name__ = "Integer32"
_PrtExPVc4DlciIConPrt_Object = MibTableColumn
prtExPVc4DlciIConPrt = _PrtExPVc4DlciIConPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 6),
    _PrtExPVc4DlciIConPrt_Type()
)
prtExPVc4DlciIConPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DlciIConPrt.setStatus("current")


class _PrtExPVc4DlciIConDlci_Type(Integer32):
    """Custom type prtExPVc4DlciIConDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 991),
    )


_PrtExPVc4DlciIConDlci_Type.__name__ = "Integer32"
_PrtExPVc4DlciIConDlci_Object = MibTableColumn
prtExPVc4DlciIConDlci = _PrtExPVc4DlciIConDlci_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 7),
    _PrtExPVc4DlciIConDlci_Type()
)
prtExPVc4DlciIConDlci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DlciIConDlci.setStatus("current")


class _PrtExPVc4DlciTxBc_Type(Integer32):
    """Custom type prtExPVc4DlciTxBc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              25,
              26)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("txBc1024Kbps", 21),
          ("txBc112Kbps", 26),
          ("txBc128Kbps", 13),
          ("txBc14400bps", 4),
          ("txBc16000bps", 25),
          ("txBc19200bps", 5),
          ("txBc192Kbps", 14),
          ("txBc256Kbps", 15),
          ("txBc28800bps", 6),
          ("txBc32000bps", 7),
          ("txBc320Kbps", 16),
          ("txBc38400bps", 8),
          ("txBc384Kbps", 17),
          ("txBc448Kbps", 18),
          ("txBc48000bps", 9),
          ("txBc512Kbps", 19),
          ("txBc56000bps", 10),
          ("txBc57600bps", 11),
          ("txBc64Kbps", 12),
          ("txBc768Kbps", 20),
          ("txBc9600bps", 3),
          ("zero", 2))
    )


_PrtExPVc4DlciTxBc_Type.__name__ = "Integer32"
_PrtExPVc4DlciTxBc_Object = MibTableColumn
prtExPVc4DlciTxBc = _PrtExPVc4DlciTxBc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 8),
    _PrtExPVc4DlciTxBc_Type()
)
prtExPVc4DlciTxBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DlciTxBc.setStatus("current")


class _PrtExPVc4DlciTxBe_Type(Integer32):
    """Custom type prtExPVc4DlciTxBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              25,
              26)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("txBc112Kbps", 26),
          ("txBc16000bps", 25),
          ("txBe1024Kbps", 21),
          ("txBe128Kbps", 13),
          ("txBe14400bps", 4),
          ("txBe19200bps", 5),
          ("txBe192Kbps", 14),
          ("txBe256Kbps", 15),
          ("txBe28800bps", 6),
          ("txBe32000bps", 7),
          ("txBe320Kbps", 16),
          ("txBe38400bps", 8),
          ("txBe384Kbps", 17),
          ("txBe448Kbps", 18),
          ("txBe48000bps", 9),
          ("txBe512Kbps", 19),
          ("txBe56000bps", 10),
          ("txBe57600bps", 11),
          ("txBe64Kbps", 12),
          ("txBe768Kbps", 20),
          ("txBe9600bps", 3),
          ("zero", 2))
    )


_PrtExPVc4DlciTxBe_Type.__name__ = "Integer32"
_PrtExPVc4DlciTxBe_Object = MibTableColumn
prtExPVc4DlciTxBe = _PrtExPVc4DlciTxBe_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 9),
    _PrtExPVc4DlciTxBe_Type()
)
prtExPVc4DlciTxBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DlciTxBe.setStatus("current")


class _PrtExPVc4DlciRxBc_Type(Integer32):
    """Custom type prtExPVc4DlciRxBc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              25,
              26)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("rxBc1024Kbps", 21),
          ("rxBc112Kbps", 26),
          ("rxBc128Kbps", 13),
          ("rxBc14400bps", 4),
          ("rxBc16000bps", 25),
          ("rxBc19200bps", 5),
          ("rxBc192Kbps", 14),
          ("rxBc256Kbps", 15),
          ("rxBc28800bps", 6),
          ("rxBc32000bps", 7),
          ("rxBc320Kbps", 16),
          ("rxBc38400bps", 8),
          ("rxBc384Kbps", 17),
          ("rxBc448Kbps", 18),
          ("rxBc48000bps", 9),
          ("rxBc512Kbps", 19),
          ("rxBc56000bps", 10),
          ("rxBc57600bps", 11),
          ("rxBc64Kbps", 12),
          ("rxBc768Kbps", 20),
          ("rxBc9600bps", 3),
          ("zero", 2))
    )


_PrtExPVc4DlciRxBc_Type.__name__ = "Integer32"
_PrtExPVc4DlciRxBc_Object = MibTableColumn
prtExPVc4DlciRxBc = _PrtExPVc4DlciRxBc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 10),
    _PrtExPVc4DlciRxBc_Type()
)
prtExPVc4DlciRxBc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DlciRxBc.setStatus("current")


class _PrtExPVc4DlciRxBe_Type(Integer32):
    """Custom type prtExPVc4DlciRxBe based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              25,
              26)
        )
    )
    namedValues = NamedValues(
        *(("full", 1),
          ("rxBc112Kbps", 26),
          ("rxBc16000bps", 25),
          ("rxBe1024Kbps", 21),
          ("rxBe128Kbps", 13),
          ("rxBe14400bps", 4),
          ("rxBe19200bps", 5),
          ("rxBe192Kbps", 14),
          ("rxBe256Kbps", 15),
          ("rxBe28800bps", 6),
          ("rxBe32000bps", 7),
          ("rxBe320Kbps", 16),
          ("rxBe38400bps", 8),
          ("rxBe384Kbps", 17),
          ("rxBe448Kbps", 18),
          ("rxBe48000bps", 9),
          ("rxBe512Kbps", 19),
          ("rxBe56000bps", 10),
          ("rxBe57600bps", 11),
          ("rxBe64Kbps", 12),
          ("rxBe768Kbps", 20),
          ("rxBe9600bps", 3),
          ("zero", 2))
    )


_PrtExPVc4DlciRxBe_Type.__name__ = "Integer32"
_PrtExPVc4DlciRxBe_Object = MibTableColumn
prtExPVc4DlciRxBe = _PrtExPVc4DlciRxBe_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 11),
    _PrtExPVc4DlciRxBe_Type()
)
prtExPVc4DlciRxBe.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DlciRxBe.setStatus("current")


class _PrtExPVc4DlciPriority_Type(Integer32):
    """Custom type prtExPVc4DlciPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(6, 8),
    )


_PrtExPVc4DlciPriority_Type.__name__ = "Integer32"
_PrtExPVc4DlciPriority_Object = MibTableColumn
prtExPVc4DlciPriority = _PrtExPVc4DlciPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 12),
    _PrtExPVc4DlciPriority_Type()
)
prtExPVc4DlciPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExPVc4DlciPriority.setStatus("current")


class _PrtExPVc4DlciStatus_Type(Integer32):
    """Custom type prtExPVc4DlciStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("connected", 2),
          ("disconnected", 1))
    )


_PrtExPVc4DlciStatus_Type.__name__ = "Integer32"
_PrtExPVc4DlciStatus_Object = MibTableColumn
prtExPVc4DlciStatus = _PrtExPVc4DlciStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 13),
    _PrtExPVc4DlciStatus_Type()
)
prtExPVc4DlciStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExPVc4DlciStatus.setStatus("current")
_PrtHsrCnfg_ObjectIdentity = ObjectIdentity
prtHsrCnfg = _PrtHsrCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10)
)
_PrtExHsrCnfgTable_Object = MibTable
prtExHsrCnfgTable = _PrtExHsrCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1)
)
if mibBuilder.loadTexts:
    prtExHsrCnfgTable.setStatus("current")
_PrtExHsrCnfgEntry_Object = MibTableRow
prtExHsrCnfgEntry = _PrtExHsrCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1)
)
prtExHsrCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtExHsrCnfgIdx"),
    (0, "RAD-MIB", "prtExHsrSltIdx"),
    (0, "RAD-MIB", "prtExHsrPrtIdx"),
)
if mibBuilder.loadTexts:
    prtExHsrCnfgEntry.setStatus("current")


class _PrtExHsrCnfgIdx_Type(Integer32):
    """Custom type prtExHsrCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExHsrCnfgIdx_Type.__name__ = "Integer32"
_PrtExHsrCnfgIdx_Object = MibTableColumn
prtExHsrCnfgIdx = _PrtExHsrCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 1),
    _PrtExHsrCnfgIdx_Type()
)
prtExHsrCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHsrCnfgIdx.setStatus("current")


class _PrtExHsrSltIdx_Type(Integer32):
    """Custom type prtExHsrSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExHsrSltIdx_Type.__name__ = "Integer32"
_PrtExHsrSltIdx_Object = MibTableColumn
prtExHsrSltIdx = _PrtExHsrSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 2),
    _PrtExHsrSltIdx_Type()
)
prtExHsrSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHsrSltIdx.setStatus("current")
_PrtExHsrPrtIdx_Type = Integer32
_PrtExHsrPrtIdx_Object = MibTableColumn
prtExHsrPrtIdx = _PrtExHsrPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 3),
    _PrtExHsrPrtIdx_Type()
)
prtExHsrPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExHsrPrtIdx.setStatus("current")


class _PrtExHsrConnect_Type(Integer32):
    """Custom type prtExHsrConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExHsrConnect_Type.__name__ = "Integer32"
_PrtExHsrConnect_Object = MibTableColumn
prtExHsrConnect = _PrtExHsrConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 4),
    _PrtExHsrConnect_Type()
)
prtExHsrConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrConnect.setStatus("current")


class _PrtExHsrProtocol_Type(Integer32):
    """Custom type prtExHsrProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("async", 3),
          ("sync", 2))
    )


_PrtExHsrProtocol_Type.__name__ = "Integer32"
_PrtExHsrProtocol_Object = MibTableColumn
prtExHsrProtocol = _PrtExHsrProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 5),
    _PrtExHsrProtocol_Type()
)
prtExHsrProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrProtocol.setStatus("current")


class _PrtExHsrRate_Type(Integer32):
    """Custom type prtExHsrRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              100)
        )
    )
    namedValues = NamedValues(
        *(("notConnected", 100),
          ("r115200bps", 15),
          ("r1200bps", 3),
          ("r128000bps", 16),
          ("r14400bps", 18),
          ("r16000bps", 12),
          ("r19200bps", 7),
          ("r2400bps", 4),
          ("r28800bps", 19),
          ("r32000bps", 13),
          ("r38400bps", 8),
          ("r4800bps", 5),
          ("r48kbps", 9),
          ("r56kbps", 10),
          ("r57600bps", 14),
          ("r600bps", 2),
          ("r64kbps", 11),
          ("r7200bps", 17),
          ("r9600bps", 6))
    )


_PrtExHsrRate_Type.__name__ = "Integer32"
_PrtExHsrRate_Object = MibTableColumn
prtExHsrRate = _PrtExHsrRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 6),
    _PrtExHsrRate_Type()
)
prtExHsrRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrRate.setStatus("current")


class _PrtExHsrDataBits_Type(Integer32):
    """Custom type prtExHsrDataBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("d5bits", 1),
          ("d6bits", 2),
          ("d7bits", 3),
          ("d8bits", 4),
          ("notApplicable", 255))
    )


_PrtExHsrDataBits_Type.__name__ = "Integer32"
_PrtExHsrDataBits_Object = MibTableColumn
prtExHsrDataBits = _PrtExHsrDataBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 7),
    _PrtExHsrDataBits_Type()
)
prtExHsrDataBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrDataBits.setStatus("current")


class _PrtExHsrParity_Type(Integer32):
    """Custom type prtExHsrParity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              255)
        )
    )
    namedValues = NamedValues(
        *(("even", 5),
          ("no", 2),
          ("notApplicable", 255),
          ("odd", 4),
          ("yes", 3))
    )


_PrtExHsrParity_Type.__name__ = "Integer32"
_PrtExHsrParity_Object = MibTableColumn
prtExHsrParity = _PrtExHsrParity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 8),
    _PrtExHsrParity_Type()
)
prtExHsrParity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrParity.setStatus("current")


class _PrtExHsrStopBits_Type(Integer32):
    """Custom type prtExHsrStopBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("stopBits1Bit", 1),
          ("stopBits2Bits", 2))
    )


_PrtExHsrStopBits_Type.__name__ = "Integer32"
_PrtExHsrStopBits_Object = MibTableColumn
prtExHsrStopBits = _PrtExHsrStopBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 9),
    _PrtExHsrStopBits_Type()
)
prtExHsrStopBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrStopBits.setStatus("current")


class _PrtExHsrCts_Type(Integer32):
    """Custom type prtExHsrCts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("on", 2),
          ("rts", 3))
    )


_PrtExHsrCts_Type.__name__ = "Integer32"
_PrtExHsrCts_Object = MibTableColumn
prtExHsrCts = _PrtExHsrCts_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 10),
    _PrtExHsrCts_Type()
)
prtExHsrCts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrCts.setStatus("current")


class _PrtExHsrClkMode_Type(Integer32):
    """Custom type prtExHsrClkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("dce", 1),
          ("extDce", 2),
          ("notApplicable", 255))
    )


_PrtExHsrClkMode_Type.__name__ = "Integer32"
_PrtExHsrClkMode_Object = MibTableColumn
prtExHsrClkMode = _PrtExHsrClkMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 11),
    _PrtExHsrClkMode_Type()
)
prtExHsrClkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrClkMode.setStatus("current")


class _PrtExHsrLinkTo_Type(Integer32):
    """Custom type prtExHsrLinkTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 1))
    )


_PrtExHsrLinkTo_Type.__name__ = "Integer32"
_PrtExHsrLinkTo_Object = MibTableColumn
prtExHsrLinkTo = _PrtExHsrLinkTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 12),
    _PrtExHsrLinkTo_Type()
)
prtExHsrLinkTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrLinkTo.setStatus("deprecated")


class _PrtExHsrDcdDsr_Type(Integer32):
    """Custom type prtExHsrDcdDsr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("endToEnd", 3),
          ("local", 2),
          ("notApplicable", 1))
    )


_PrtExHsrDcdDsr_Type.__name__ = "Integer32"
_PrtExHsrDcdDsr_Object = MibTableColumn
prtExHsrDcdDsr = _PrtExHsrDcdDsr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 13),
    _PrtExHsrDcdDsr_Type()
)
prtExHsrDcdDsr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrDcdDsr.setStatus("current")


class _PrtExHsrOperMode_Type(Integer32):
    """Custom type prtExHsrOperMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("broadcast", 4),
          ("normal", 2),
          ("unidirectRx", 3))
    )


_PrtExHsrOperMode_Type.__name__ = "Integer32"
_PrtExHsrOperMode_Object = MibTableColumn
prtExHsrOperMode = _PrtExHsrOperMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 14),
    _PrtExHsrOperMode_Type()
)
prtExHsrOperMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrOperMode.setStatus("current")


class _PrtExHsrRtsDtr_Type(Integer32):
    """Custom type prtExHsrRtsDtr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("endToEnd", 3),
          ("local", 2),
          ("notApplicable", 1))
    )


_PrtExHsrRtsDtr_Type.__name__ = "Integer32"
_PrtExHsrRtsDtr_Object = MibTableColumn
prtExHsrRtsDtr = _PrtExHsrRtsDtr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 15),
    _PrtExHsrRtsDtr_Type()
)
prtExHsrRtsDtr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrRtsDtr.setStatus("current")


class _PrtExHsrLlbEnable_Type(Integer32):
    """Custom type prtExHsrLlbEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_PrtExHsrLlbEnable_Type.__name__ = "Integer32"
_PrtExHsrLlbEnable_Object = MibTableColumn
prtExHsrLlbEnable = _PrtExHsrLlbEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 16),
    _PrtExHsrLlbEnable_Type()
)
prtExHsrLlbEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrLlbEnable.setStatus("current")


class _PrtExHsrRlbEnable_Type(Integer32):
    """Custom type prtExHsrRlbEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_PrtExHsrRlbEnable_Type.__name__ = "Integer32"
_PrtExHsrRlbEnable_Object = MibTableColumn
prtExHsrRlbEnable = _PrtExHsrRlbEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 17),
    _PrtExHsrRlbEnable_Type()
)
prtExHsrRlbEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrRlbEnable.setStatus("current")


class _PrtExHsrRateAdapt_Type(Integer32):
    """Custom type prtExHsrRateAdapt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("proprietary", 2),
          ("v110", 3))
    )


_PrtExHsrRateAdapt_Type.__name__ = "Integer32"
_PrtExHsrRateAdapt_Object = MibTableColumn
prtExHsrRateAdapt = _PrtExHsrRateAdapt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 18),
    _PrtExHsrRateAdapt_Type()
)
prtExHsrRateAdapt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrRateAdapt.setStatus("current")


class _PrtExHsrRemoteModem_Type(Integer32):
    """Custom type prtExHsrRemoteModem based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("asmi31", 2),
          ("asmi31s2", 3),
          ("notApplicable", 1))
    )


_PrtExHsrRemoteModem_Type.__name__ = "Integer32"
_PrtExHsrRemoteModem_Object = MibTableColumn
prtExHsrRemoteModem = _PrtExHsrRemoteModem_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 19),
    _PrtExHsrRemoteModem_Type()
)
prtExHsrRemoteModem.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrRemoteModem.setStatus("current")


class _PrtExHsrEncapsMode_Type(Integer32):
    """Custom type prtExHsrEncapsMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("asmi31", 4),
          ("bwOptimized", 2),
          ("latencyOptimized", 3),
          ("notApplicable", 1))
    )


_PrtExHsrEncapsMode_Type.__name__ = "Integer32"
_PrtExHsrEncapsMode_Object = MibTableColumn
prtExHsrEncapsMode = _PrtExHsrEncapsMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 20),
    _PrtExHsrEncapsMode_Type()
)
prtExHsrEncapsMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExHsrEncapsMode.setStatus("current")
_PrtMbeCnfg_ObjectIdentity = ObjectIdentity
prtMbeCnfg = _PrtMbeCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11)
)
_PrtExMbeCnfgTable_Object = MibTable
prtExMbeCnfgTable = _PrtExMbeCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 1)
)
if mibBuilder.loadTexts:
    prtExMbeCnfgTable.setStatus("current")
_PrtExMbeCnfgEntry_Object = MibTableRow
prtExMbeCnfgEntry = _PrtExMbeCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 1, 1)
)
prtExMbeCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtExMbeCnfgIdx"),
    (0, "RAD-MIB", "prtExMbeSltIdx"),
    (0, "RAD-MIB", "prtExMbePrtIdx"),
)
if mibBuilder.loadTexts:
    prtExMbeCnfgEntry.setStatus("current")


class _PrtExMbeCnfgIdx_Type(Integer32):
    """Custom type prtExMbeCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExMbeCnfgIdx_Type.__name__ = "Integer32"
_PrtExMbeCnfgIdx_Object = MibTableColumn
prtExMbeCnfgIdx = _PrtExMbeCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 1, 1, 1),
    _PrtExMbeCnfgIdx_Type()
)
prtExMbeCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExMbeCnfgIdx.setStatus("current")


class _PrtExMbeSltIdx_Type(Integer32):
    """Custom type prtExMbeSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExMbeSltIdx_Type.__name__ = "Integer32"
_PrtExMbeSltIdx_Object = MibTableColumn
prtExMbeSltIdx = _PrtExMbeSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 1, 1, 2),
    _PrtExMbeSltIdx_Type()
)
prtExMbeSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExMbeSltIdx.setStatus("current")


class _PrtExMbePrtIdx_Type(Integer32):
    """Custom type prtExMbePrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("exPrt1", 1)
    )


_PrtExMbePrtIdx_Type.__name__ = "Integer32"
_PrtExMbePrtIdx_Object = MibTableColumn
prtExMbePrtIdx = _PrtExMbePrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 1, 1, 3),
    _PrtExMbePrtIdx_Type()
)
prtExMbePrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExMbePrtIdx.setStatus("current")


class _PrtExMbeLan_Type(Integer32):
    """Custom type prtExMbeLan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("main", 2),
          ("remote", 1))
    )


_PrtExMbeLan_Type.__name__ = "Integer32"
_PrtExMbeLan_Object = MibTableColumn
prtExMbeLan = _PrtExMbeLan_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 1, 1, 4),
    _PrtExMbeLan_Type()
)
prtExMbeLan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExMbeLan.setStatus("current")
_PrtInMbeCnfgTable_Object = MibTable
prtInMbeCnfgTable = _PrtInMbeCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2)
)
if mibBuilder.loadTexts:
    prtInMbeCnfgTable.setStatus("current")
_PrtInMbeCnfgEntry_Object = MibTableRow
prtInMbeCnfgEntry = _PrtInMbeCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2, 1)
)
prtInMbeCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtInMbeCnfgIdx"),
    (0, "RAD-MIB", "prtInMbeSltIdx"),
    (0, "RAD-MIB", "prtInMbePrtIdx"),
)
if mibBuilder.loadTexts:
    prtInMbeCnfgEntry.setStatus("current")


class _PrtInMbeCnfgIdx_Type(Integer32):
    """Custom type prtInMbeCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtInMbeCnfgIdx_Type.__name__ = "Integer32"
_PrtInMbeCnfgIdx_Object = MibTableColumn
prtInMbeCnfgIdx = _PrtInMbeCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2, 1, 1),
    _PrtInMbeCnfgIdx_Type()
)
prtInMbeCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInMbeCnfgIdx.setStatus("current")


class _PrtInMbeSltIdx_Type(Integer32):
    """Custom type prtInMbeSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtInMbeSltIdx_Type.__name__ = "Integer32"
_PrtInMbeSltIdx_Object = MibTableColumn
prtInMbeSltIdx = _PrtInMbeSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2, 1, 2),
    _PrtInMbeSltIdx_Type()
)
prtInMbeSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInMbeSltIdx.setStatus("current")


class _PrtInMbePrtIdx_Type(Integer32):
    """Custom type prtInMbePrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            101
        )
    )
    namedValues = NamedValues(
        ("inPrt1", 101)
    )


_PrtInMbePrtIdx_Type.__name__ = "Integer32"
_PrtInMbePrtIdx_Object = MibTableColumn
prtInMbePrtIdx = _PrtInMbePrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2, 1, 3),
    _PrtInMbePrtIdx_Type()
)
prtInMbePrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInMbePrtIdx.setStatus("current")


class _PrtInMbeConnect_Type(Integer32):
    """Custom type prtInMbeConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtInMbeConnect_Type.__name__ = "Integer32"
_PrtInMbeConnect_Object = MibTableColumn
prtInMbeConnect = _PrtInMbeConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2, 1, 4),
    _PrtInMbeConnect_Type()
)
prtInMbeConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInMbeConnect.setStatus("current")


class _PrtInMbeRate_Type(Integer32):
    """Custom type prtInMbeRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24)
        )
    )
    namedValues = NamedValues(
        *(("r10x64eq640Kbps", 10),
          ("r11x64eq704Kbps", 11),
          ("r12x64eq768Kbps", 12),
          ("r13x64eq832Kbps", 13),
          ("r14x64eq896Kbps", 14),
          ("r15x64eq960Kbps", 15),
          ("r16x64eq1024Kbps", 16),
          ("r17x64eq1088Kbps", 17),
          ("r18x64eq1152Kbps", 18),
          ("r19x64eq1216Kbps", 19),
          ("r1x64eq64Kbps", 1),
          ("r20x64eq1280Kbps", 20),
          ("r21x64eq1344Kbps", 21),
          ("r22x64eq1408Kbps", 22),
          ("r23x64eq1472Kbps", 23),
          ("r24x64eq1536Kbps", 24),
          ("r2x64eq128Kbps", 2),
          ("r3x64eq192Kbps", 3),
          ("r4x64eq256Kbps", 4),
          ("r5x64eq320Kbps", 5),
          ("r6x64eq384Kbps", 6),
          ("r7x64eq448Kbps", 7),
          ("r8x64eq512Kbps", 8),
          ("r9x64eq576Kbps", 9))
    )


_PrtInMbeRate_Type.__name__ = "Integer32"
_PrtInMbeRate_Object = MibTableColumn
prtInMbeRate = _PrtInMbeRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2, 1, 5),
    _PrtInMbeRate_Type()
)
prtInMbeRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInMbeRate.setStatus("current")


class _PrtInMbeLinkTo_Type(Integer32):
    """Custom type prtInMbeLinkTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtInMbeLinkTo_Type.__name__ = "Integer32"
_PrtInMbeLinkTo_Object = MibTableColumn
prtInMbeLinkTo = _PrtInMbeLinkTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2, 1, 6),
    _PrtInMbeLinkTo_Type()
)
prtInMbeLinkTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInMbeLinkTo.setStatus("deprecated")
_PrtTreCnfg_ObjectIdentity = ObjectIdentity
prtTreCnfg = _PrtTreCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12)
)
_PrtExTreCnfgTable_Object = MibTable
prtExTreCnfgTable = _PrtExTreCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 1)
)
if mibBuilder.loadTexts:
    prtExTreCnfgTable.setStatus("current")
_PrtExTreCnfgEntry_Object = MibTableRow
prtExTreCnfgEntry = _PrtExTreCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 1, 1)
)
prtExTreCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtExTreCnfgIdx"),
    (0, "RAD-MIB", "prtExTreSltIdx"),
    (0, "RAD-MIB", "prtExTrePrtIdx"),
)
if mibBuilder.loadTexts:
    prtExTreCnfgEntry.setStatus("current")


class _PrtExTreCnfgIdx_Type(Integer32):
    """Custom type prtExTreCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExTreCnfgIdx_Type.__name__ = "Integer32"
_PrtExTreCnfgIdx_Object = MibTableColumn
prtExTreCnfgIdx = _PrtExTreCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 1, 1, 1),
    _PrtExTreCnfgIdx_Type()
)
prtExTreCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExTreCnfgIdx.setStatus("current")


class _PrtExTreSltIdx_Type(Integer32):
    """Custom type prtExTreSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExTreSltIdx_Type.__name__ = "Integer32"
_PrtExTreSltIdx_Object = MibTableColumn
prtExTreSltIdx = _PrtExTreSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 1, 1, 2),
    _PrtExTreSltIdx_Type()
)
prtExTreSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExTreSltIdx.setStatus("current")


class _PrtExTrePrtIdx_Type(Integer32):
    """Custom type prtExTrePrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("exPrt1", 1)
    )


_PrtExTrePrtIdx_Type.__name__ = "Integer32"
_PrtExTrePrtIdx_Object = MibTableColumn
prtExTrePrtIdx = _PrtExTrePrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 1, 1, 3),
    _PrtExTrePrtIdx_Type()
)
prtExTrePrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExTrePrtIdx.setStatus("current")


class _PrtExTreLan_Type(Integer32):
    """Custom type prtExTreLan based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("main", 2),
          ("remote", 1))
    )


_PrtExTreLan_Type.__name__ = "Integer32"
_PrtExTreLan_Object = MibTableColumn
prtExTreLan = _PrtExTreLan_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 1, 1, 4),
    _PrtExTreLan_Type()
)
prtExTreLan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExTreLan.setStatus("current")


class _PrtExTreLanRate_Type(Integer32):
    """Custom type prtExTreLanRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("r16M", 2),
          ("r4M", 1))
    )


_PrtExTreLanRate_Type.__name__ = "Integer32"
_PrtExTreLanRate_Object = MibTableColumn
prtExTreLanRate = _PrtExTreLanRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 1, 1, 5),
    _PrtExTreLanRate_Type()
)
prtExTreLanRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExTreLanRate.setStatus("current")
_PrtInTreCnfgTable_Object = MibTable
prtInTreCnfgTable = _PrtInTreCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2)
)
if mibBuilder.loadTexts:
    prtInTreCnfgTable.setStatus("current")
_PrtInTreCnfgEntry_Object = MibTableRow
prtInTreCnfgEntry = _PrtInTreCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2, 1)
)
prtInTreCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtInTreCnfgIdx"),
    (0, "RAD-MIB", "prtInTreSltIdx"),
    (0, "RAD-MIB", "prtInTrePrtIdx"),
)
if mibBuilder.loadTexts:
    prtInTreCnfgEntry.setStatus("current")


class _PrtInTreCnfgIdx_Type(Integer32):
    """Custom type prtInTreCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtInTreCnfgIdx_Type.__name__ = "Integer32"
_PrtInTreCnfgIdx_Object = MibTableColumn
prtInTreCnfgIdx = _PrtInTreCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2, 1, 1),
    _PrtInTreCnfgIdx_Type()
)
prtInTreCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInTreCnfgIdx.setStatus("current")


class _PrtInTreSltIdx_Type(Integer32):
    """Custom type prtInTreSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtInTreSltIdx_Type.__name__ = "Integer32"
_PrtInTreSltIdx_Object = MibTableColumn
prtInTreSltIdx = _PrtInTreSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2, 1, 2),
    _PrtInTreSltIdx_Type()
)
prtInTreSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInTreSltIdx.setStatus("current")


class _PrtInTrePrtIdx_Type(Integer32):
    """Custom type prtInTrePrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            101
        )
    )
    namedValues = NamedValues(
        ("inPrt1", 101)
    )


_PrtInTrePrtIdx_Type.__name__ = "Integer32"
_PrtInTrePrtIdx_Object = MibTableColumn
prtInTrePrtIdx = _PrtInTrePrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2, 1, 3),
    _PrtInTrePrtIdx_Type()
)
prtInTrePrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInTrePrtIdx.setStatus("current")


class _PrtInTreConnect_Type(Integer32):
    """Custom type prtInTreConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtInTreConnect_Type.__name__ = "Integer32"
_PrtInTreConnect_Object = MibTableColumn
prtInTreConnect = _PrtInTreConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2, 1, 4),
    _PrtInTreConnect_Type()
)
prtInTreConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInTreConnect.setStatus("current")


class _PrtInTreRate_Type(Integer32):
    """Custom type prtInTreRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17)
        )
    )
    namedValues = NamedValues(
        *(("r1x56eq56Kbps", 1),
          ("r1x64eq64Kbps", 2),
          ("r2x56eq112Kbps", 3),
          ("r2x64eq128Kbps", 4),
          ("r3x56eq168Kbps", 5),
          ("r3x64eq192Kbps", 6),
          ("r4x56eq224Kbps", 7),
          ("r4x64eq256Kbps", 8),
          ("r5x56eq280Kbps", 9),
          ("r5x64eq320Kbps", 10),
          ("r6x56eq336Kbps", 11),
          ("r6x64eq384Kbps", 12),
          ("r7x56eq392Kbps", 13),
          ("r7x64eq448Kbps", 14),
          ("r8x56eq448Kbps", 15),
          ("r8x64eq512Kbps", 16),
          ("r9x56eq504Kbps", 17))
    )


_PrtInTreRate_Type.__name__ = "Integer32"
_PrtInTreRate_Object = MibTableColumn
prtInTreRate = _PrtInTreRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2, 1, 5),
    _PrtInTreRate_Type()
)
prtInTreRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInTreRate.setStatus("current")


class _PrtInTreLinkTo_Type(Integer32):
    """Custom type prtInTreLinkTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtInTreLinkTo_Type.__name__ = "Integer32"
_PrtInTreLinkTo_Object = MibTableColumn
prtInTreLinkTo = _PrtInTreLinkTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2, 1, 6),
    _PrtInTreLinkTo_Type()
)
prtInTreLinkTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInTreLinkTo.setStatus("deprecated")
_PrtLs6Cnfg_ObjectIdentity = ObjectIdentity
prtLs6Cnfg = _PrtLs6Cnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13)
)
_PrtExLs6CnfgTable_Object = MibTable
prtExLs6CnfgTable = _PrtExLs6CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1)
)
if mibBuilder.loadTexts:
    prtExLs6CnfgTable.setStatus("current")
_PrtExLs6CnfgEntry_Object = MibTableRow
prtExLs6CnfgEntry = _PrtExLs6CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1)
)
prtExLs6CnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtExLs6CnfgIdx"),
    (0, "RAD-MIB", "prtExLs6SltIdx"),
    (0, "RAD-MIB", "prtExLs6PrtIdx"),
)
if mibBuilder.loadTexts:
    prtExLs6CnfgEntry.setStatus("current")


class _PrtExLs6CnfgIdx_Type(Integer32):
    """Custom type prtExLs6CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExLs6CnfgIdx_Type.__name__ = "Integer32"
_PrtExLs6CnfgIdx_Object = MibTableColumn
prtExLs6CnfgIdx = _PrtExLs6CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 1),
    _PrtExLs6CnfgIdx_Type()
)
prtExLs6CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExLs6CnfgIdx.setStatus("current")


class _PrtExLs6SltIdx_Type(Integer32):
    """Custom type prtExLs6SltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtExLs6SltIdx_Type.__name__ = "Integer32"
_PrtExLs6SltIdx_Object = MibTableColumn
prtExLs6SltIdx = _PrtExLs6SltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 2),
    _PrtExLs6SltIdx_Type()
)
prtExLs6SltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExLs6SltIdx.setStatus("current")


class _PrtExLs6PrtIdx_Type(Integer32):
    """Custom type prtExLs6PrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt11", 11),
          ("exPrt12", 12),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9))
    )


_PrtExLs6PrtIdx_Type.__name__ = "Integer32"
_PrtExLs6PrtIdx_Object = MibTableColumn
prtExLs6PrtIdx = _PrtExLs6PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 3),
    _PrtExLs6PrtIdx_Type()
)
prtExLs6PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExLs6PrtIdx.setStatus("current")


class _PrtExLs6Connect_Type(Integer32):
    """Custom type prtExLs6Connect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExLs6Connect_Type.__name__ = "Integer32"
_PrtExLs6Connect_Object = MibTableColumn
prtExLs6Connect = _PrtExLs6Connect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 4),
    _PrtExLs6Connect_Type()
)
prtExLs6Connect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6Connect.setStatus("current")


class _PrtExLs6Protocol_Type(Integer32):
    """Custom type prtExLs6Protocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("async", 3),
          ("sync", 2))
    )


_PrtExLs6Protocol_Type.__name__ = "Integer32"
_PrtExLs6Protocol_Object = MibTableColumn
prtExLs6Protocol = _PrtExLs6Protocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 5),
    _PrtExLs6Protocol_Type()
)
prtExLs6Protocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6Protocol.setStatus("current")


class _PrtExLs6Rate_Type(Integer32):
    """Custom type prtExLs6Rate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20)
        )
    )
    namedValues = NamedValues(
        *(("r1200bps", 4),
          ("r14400bps", 10),
          ("r16000bps", 11),
          ("r19200bps", 12),
          ("r24000bps", 13),
          ("r2400bps", 5),
          ("r28800bps", 14),
          ("r300bps", 2),
          ("r32000bps", 15),
          ("r38400bps", 16),
          ("r48000bps", 17),
          ("r4800bps", 6),
          ("r56000bps", 18),
          ("r57600bps", 19),
          ("r600bps", 3),
          ("r64000bps", 20),
          ("r7200bps", 7),
          ("r8000bps", 8),
          ("r9600bps", 9))
    )


_PrtExLs6Rate_Type.__name__ = "Integer32"
_PrtExLs6Rate_Object = MibTableColumn
prtExLs6Rate = _PrtExLs6Rate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 6),
    _PrtExLs6Rate_Type()
)
prtExLs6Rate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6Rate.setStatus("current")


class _PrtExLs6ClkMode_Type(Integer32):
    """Custom type prtExLs6ClkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("dce", 1),
          ("dte1", 3),
          ("extDce", 2),
          ("notApplicable", 255))
    )


_PrtExLs6ClkMode_Type.__name__ = "Integer32"
_PrtExLs6ClkMode_Object = MibTableColumn
prtExLs6ClkMode = _PrtExLs6ClkMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 7),
    _PrtExLs6ClkMode_Type()
)
prtExLs6ClkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6ClkMode.setStatus("current")


class _PrtExLs6CtrlSignal_Type(Integer32):
    """Custom type prtExLs6CtrlSignal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dtrAndRts", 4),
          ("local", 2),
          ("rts", 3))
    )


_PrtExLs6CtrlSignal_Type.__name__ = "Integer32"
_PrtExLs6CtrlSignal_Object = MibTableColumn
prtExLs6CtrlSignal = _PrtExLs6CtrlSignal_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 8),
    _PrtExLs6CtrlSignal_Type()
)
prtExLs6CtrlSignal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6CtrlSignal.setStatus("current")


class _PrtExLs6DataBits_Type(Integer32):
    """Custom type prtExLs6DataBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("d6bits", 1),
          ("d7bits", 2),
          ("d8bits", 3),
          ("d9bits", 4),
          ("notApplicable", 255))
    )


_PrtExLs6DataBits_Type.__name__ = "Integer32"
_PrtExLs6DataBits_Object = MibTableColumn
prtExLs6DataBits = _PrtExLs6DataBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 9),
    _PrtExLs6DataBits_Type()
)
prtExLs6DataBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6DataBits.setStatus("current")


class _PrtExLs6Cts_Type(Integer32):
    """Custom type prtExLs6Cts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("on", 2),
          ("rts", 3))
    )


_PrtExLs6Cts_Type.__name__ = "Integer32"
_PrtExLs6Cts_Object = MibTableColumn
prtExLs6Cts = _PrtExLs6Cts_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 10),
    _PrtExLs6Cts_Type()
)
prtExLs6Cts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6Cts.setStatus("current")


class _PrtExLs6LinkToInternal_Type(Integer32):
    """Custom type prtExLs6LinkToInternal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(101,
              102,
              255)
        )
    )
    namedValues = NamedValues(
        *(("inPrt1", 101),
          ("inPrt2", 102),
          ("notApplicable", 255))
    )


_PrtExLs6LinkToInternal_Type.__name__ = "Integer32"
_PrtExLs6LinkToInternal_Object = MibTableColumn
prtExLs6LinkToInternal = _PrtExLs6LinkToInternal_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 11),
    _PrtExLs6LinkToInternal_Type()
)
prtExLs6LinkToInternal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6LinkToInternal.setStatus("current")
_PrtExLs6VCnfgTable_Object = MibTable
prtExLs6VCnfgTable = _PrtExLs6VCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2)
)
if mibBuilder.loadTexts:
    prtExLs6VCnfgTable.setStatus("current")
_PrtExLs6VCnfgEntry_Object = MibTableRow
prtExLs6VCnfgEntry = _PrtExLs6VCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1)
)
prtExLs6VCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtExLs6VCnfgIdx"),
    (0, "RAD-MIB", "prtExLs6VSltIdx"),
    (0, "RAD-MIB", "prtExLs6VPrtIdx"),
)
if mibBuilder.loadTexts:
    prtExLs6VCnfgEntry.setStatus("current")


class _PrtExLs6VCnfgIdx_Type(Integer32):
    """Custom type prtExLs6VCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExLs6VCnfgIdx_Type.__name__ = "Integer32"
_PrtExLs6VCnfgIdx_Object = MibTableColumn
prtExLs6VCnfgIdx = _PrtExLs6VCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 1),
    _PrtExLs6VCnfgIdx_Type()
)
prtExLs6VCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExLs6VCnfgIdx.setStatus("current")


class _PrtExLs6VSltIdx_Type(Integer32):
    """Custom type prtExLs6VSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExLs6VSltIdx_Type.__name__ = "Integer32"
_PrtExLs6VSltIdx_Object = MibTableColumn
prtExLs6VSltIdx = _PrtExLs6VSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 2),
    _PrtExLs6VSltIdx_Type()
)
prtExLs6VSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExLs6VSltIdx.setStatus("current")


class _PrtExLs6VPrtIdx_Type(Integer32):
    """Custom type prtExLs6VPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("exPrt7", 7),
          ("exPrt8", 8))
    )


_PrtExLs6VPrtIdx_Type.__name__ = "Integer32"
_PrtExLs6VPrtIdx_Object = MibTableColumn
prtExLs6VPrtIdx = _PrtExLs6VPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 3),
    _PrtExLs6VPrtIdx_Type()
)
prtExLs6VPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExLs6VPrtIdx.setStatus("current")


class _PrtExLs6VConnect_Type(Integer32):
    """Custom type prtExLs6VConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExLs6VConnect_Type.__name__ = "Integer32"
_PrtExLs6VConnect_Object = MibTableColumn
prtExLs6VConnect = _PrtExLs6VConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 4),
    _PrtExLs6VConnect_Type()
)
prtExLs6VConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6VConnect.setStatus("current")


class _PrtExLs6VRate_Type(Integer32):
    """Custom type prtExLs6VRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("r16000bps", 6),
          ("r24000bps", 7),
          ("r32000bps", 8),
          ("r64000bps", 9),
          ("r6400bps", 2),
          ("r7200bps", 3),
          ("r8000bps", 4),
          ("r9600bps", 5))
    )


_PrtExLs6VRate_Type.__name__ = "Integer32"
_PrtExLs6VRate_Object = MibTableColumn
prtExLs6VRate = _PrtExLs6VRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 5),
    _PrtExLs6VRate_Type()
)
prtExLs6VRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6VRate.setStatus("current")


class _PrtExLs6VEchoCanceler_Type(Integer32):
    """Custom type prtExLs6VEchoCanceler based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtExLs6VEchoCanceler_Type.__name__ = "Integer32"
_PrtExLs6VEchoCanceler_Object = MibTableColumn
prtExLs6VEchoCanceler = _PrtExLs6VEchoCanceler_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 6),
    _PrtExLs6VEchoCanceler_Type()
)
prtExLs6VEchoCanceler.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6VEchoCanceler.setStatus("current")


class _PrtExLs6VIfType_Type(Integer32):
    """Custom type prtExLs6VIfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("w2wire", 1),
          ("w4wire", 2))
    )


_PrtExLs6VIfType_Type.__name__ = "Integer32"
_PrtExLs6VIfType_Object = MibTableColumn
prtExLs6VIfType = _PrtExLs6VIfType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 7),
    _PrtExLs6VIfType_Type()
)
prtExLs6VIfType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6VIfType.setStatus("current")
_PrtExLs6VTxGain_Type = Integer32
_PrtExLs6VTxGain_Object = MibTableColumn
prtExLs6VTxGain = _PrtExLs6VTxGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 8),
    _PrtExLs6VTxGain_Type()
)
prtExLs6VTxGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6VTxGain.setStatus("current")
_PrtExLs6VRxGain_Type = Integer32
_PrtExLs6VRxGain_Object = MibTableColumn
prtExLs6VRxGain = _PrtExLs6VRxGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 9),
    _PrtExLs6VRxGain_Type()
)
prtExLs6VRxGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6VRxGain.setStatus("current")


class _PrtExLs6VOos_Type(Integer32):
    """Custom type prtExLs6VOos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("busyIdle", 3),
          ("forcedBusy", 2),
          ("forcedIdle", 1),
          ("idleBusy", 4))
    )


_PrtExLs6VOos_Type.__name__ = "Integer32"
_PrtExLs6VOos_Object = MibTableColumn
prtExLs6VOos = _PrtExLs6VOos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 10),
    _PrtExLs6VOos_Type()
)
prtExLs6VOos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExLs6VOos.setStatus("current")
_PrtInLs6CnfgTable_Object = MibTable
prtInLs6CnfgTable = _PrtInLs6CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3)
)
if mibBuilder.loadTexts:
    prtInLs6CnfgTable.setStatus("current")
_PrtInLs6CnfgEntry_Object = MibTableRow
prtInLs6CnfgEntry = _PrtInLs6CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1)
)
prtInLs6CnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtInLs6CnfgIdx"),
    (0, "RAD-MIB", "prtInLs6SltIdx"),
    (0, "RAD-MIB", "prtInLs6PrtIdx"),
)
if mibBuilder.loadTexts:
    prtInLs6CnfgEntry.setStatus("current")


class _PrtInLs6CnfgIdx_Type(Integer32):
    """Custom type prtInLs6CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtInLs6CnfgIdx_Type.__name__ = "Integer32"
_PrtInLs6CnfgIdx_Object = MibTableColumn
prtInLs6CnfgIdx = _PrtInLs6CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 1),
    _PrtInLs6CnfgIdx_Type()
)
prtInLs6CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInLs6CnfgIdx.setStatus("current")


class _PrtInLs6SltIdx_Type(Integer32):
    """Custom type prtInLs6SltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtInLs6SltIdx_Type.__name__ = "Integer32"
_PrtInLs6SltIdx_Object = MibTableColumn
prtInLs6SltIdx = _PrtInLs6SltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 2),
    _PrtInLs6SltIdx_Type()
)
prtInLs6SltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInLs6SltIdx.setStatus("current")


class _PrtInLs6PrtIdx_Type(Integer32):
    """Custom type prtInLs6PrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(101,
              102)
        )
    )
    namedValues = NamedValues(
        *(("inPrt1", 101),
          ("inPrt2", 102))
    )


_PrtInLs6PrtIdx_Type.__name__ = "Integer32"
_PrtInLs6PrtIdx_Object = MibTableColumn
prtInLs6PrtIdx = _PrtInLs6PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 3),
    _PrtInLs6PrtIdx_Type()
)
prtInLs6PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInLs6PrtIdx.setStatus("current")


class _PrtInLs6Connect_Type(Integer32):
    """Custom type prtInLs6Connect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtInLs6Connect_Type.__name__ = "Integer32"
_PrtInLs6Connect_Object = MibTableColumn
prtInLs6Connect = _PrtInLs6Connect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 4),
    _PrtInLs6Connect_Type()
)
prtInLs6Connect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInLs6Connect.setStatus("current")


class _PrtInLs6TandemMode_Type(Integer32):
    """Custom type prtInLs6TandemMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noTandem", 1),
          ("tandemMaster", 2),
          ("tandemSlave", 3))
    )


_PrtInLs6TandemMode_Type.__name__ = "Integer32"
_PrtInLs6TandemMode_Object = MibTableColumn
prtInLs6TandemMode = _PrtInLs6TandemMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 5),
    _PrtInLs6TandemMode_Type()
)
prtInLs6TandemMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInLs6TandemMode.setStatus("current")


class _PrtInLs6Rate_Type(Integer32):
    """Custom type prtInLs6Rate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("r128Kbps", 4),
          ("r14400bps", 10),
          ("r192Kbps", 7),
          ("r256Kbps", 5),
          ("r32Kbps", 1),
          ("r384Kbps", 6),
          ("r512Kbps", 8),
          ("r56Kbps", 2),
          ("r64Kpbs", 3),
          ("r768Kbps", 9))
    )


_PrtInLs6Rate_Type.__name__ = "Integer32"
_PrtInLs6Rate_Object = MibTableColumn
prtInLs6Rate = _PrtInLs6Rate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 6),
    _PrtInLs6Rate_Type()
)
prtInLs6Rate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInLs6Rate.setStatus("current")


class _PrtInLs6RemoteType_Type(Integer32):
    """Custom type prtInLs6RemoteType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("km2kSlave", 2),
          ("km2kStandalone", 3),
          ("ls6", 1),
          ("notApplicable", 255))
    )


_PrtInLs6RemoteType_Type.__name__ = "Integer32"
_PrtInLs6RemoteType_Object = MibTableColumn
prtInLs6RemoteType = _PrtInLs6RemoteType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 7),
    _PrtInLs6RemoteType_Type()
)
prtInLs6RemoteType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInLs6RemoteType.setStatus("current")


class _PrtInLs6LinkTo_Type(Integer32):
    """Custom type prtInLs6LinkTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtInLs6LinkTo_Type.__name__ = "Integer32"
_PrtInLs6LinkTo_Object = MibTableColumn
prtInLs6LinkTo = _PrtInLs6LinkTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 8),
    _PrtInLs6LinkTo_Type()
)
prtInLs6LinkTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInLs6LinkTo.setStatus("deprecated")
_PrtVc3Cnfg_ObjectIdentity = ObjectIdentity
prtVc3Cnfg = _PrtVc3Cnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14)
)
_PrtExVc3CnfgTable_Object = MibTable
prtExVc3CnfgTable = _PrtExVc3CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1)
)
if mibBuilder.loadTexts:
    prtExVc3CnfgTable.setStatus("current")
_PrtExVc3CnfgEntry_Object = MibTableRow
prtExVc3CnfgEntry = _PrtExVc3CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1)
)
prtExVc3CnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtExVc3CnfgIdx"),
    (0, "RAD-MIB", "prtExVc3SltIdx"),
    (0, "RAD-MIB", "prtExVc3PrtIdx"),
)
if mibBuilder.loadTexts:
    prtExVc3CnfgEntry.setStatus("current")


class _PrtExVc3CnfgIdx_Type(Integer32):
    """Custom type prtExVc3CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExVc3CnfgIdx_Type.__name__ = "Integer32"
_PrtExVc3CnfgIdx_Object = MibTableColumn
prtExVc3CnfgIdx = _PrtExVc3CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 1),
    _PrtExVc3CnfgIdx_Type()
)
prtExVc3CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVc3CnfgIdx.setStatus("current")


class _PrtExVc3SltIdx_Type(Integer32):
    """Custom type prtExVc3SltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExVc3SltIdx_Type.__name__ = "Integer32"
_PrtExVc3SltIdx_Object = MibTableColumn
prtExVc3SltIdx = _PrtExVc3SltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 2),
    _PrtExVc3SltIdx_Type()
)
prtExVc3SltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVc3SltIdx.setStatus("current")


class _PrtExVc3PrtIdx_Type(Integer32):
    """Custom type prtExVc3PrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3))
    )


_PrtExVc3PrtIdx_Type.__name__ = "Integer32"
_PrtExVc3PrtIdx_Object = MibTableColumn
prtExVc3PrtIdx = _PrtExVc3PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 3),
    _PrtExVc3PrtIdx_Type()
)
prtExVc3PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVc3PrtIdx.setStatus("current")


class _PrtExVc3Connect_Type(Integer32):
    """Custom type prtExVc3Connect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExVc3Connect_Type.__name__ = "Integer32"
_PrtExVc3Connect_Object = MibTableColumn
prtExVc3Connect = _PrtExVc3Connect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 4),
    _PrtExVc3Connect_Type()
)
prtExVc3Connect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc3Connect.setStatus("current")
_PrtExVc3TransGain_Type = Integer32
_PrtExVc3TransGain_Object = MibTableColumn
prtExVc3TransGain = _PrtExVc3TransGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 5),
    _PrtExVc3TransGain_Type()
)
prtExVc3TransGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc3TransGain.setStatus("current")
_PrtExVc3ReceiveGain_Type = Integer32
_PrtExVc3ReceiveGain_Object = MibTableColumn
prtExVc3ReceiveGain = _PrtExVc3ReceiveGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 6),
    _PrtExVc3ReceiveGain_Type()
)
prtExVc3ReceiveGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc3ReceiveGain.setStatus("current")


class _PrtExVc3Wire_Type(Integer32):
    """Custom type prtExVc3Wire based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("w2wire", 1),
          ("w4wire", 2))
    )


_PrtExVc3Wire_Type.__name__ = "Integer32"
_PrtExVc3Wire_Object = MibTableColumn
prtExVc3Wire = _PrtExVc3Wire_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 7),
    _PrtExVc3Wire_Type()
)
prtExVc3Wire.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc3Wire.setStatus("current")


class _PrtExVc3Rate_Type(Integer32):
    """Custom type prtExVc3Rate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("r4800bps", 2),
          ("r9600bps", 1))
    )


_PrtExVc3Rate_Type.__name__ = "Integer32"
_PrtExVc3Rate_Object = MibTableColumn
prtExVc3Rate = _PrtExVc3Rate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 8),
    _PrtExVc3Rate_Type()
)
prtExVc3Rate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc3Rate.setStatus("current")


class _PrtExVc3EchoCanceler_Type(Integer32):
    """Custom type prtExVc3EchoCanceler based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtExVc3EchoCanceler_Type.__name__ = "Integer32"
_PrtExVc3EchoCanceler_Object = MibTableColumn
prtExVc3EchoCanceler = _PrtExVc3EchoCanceler_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 9),
    _PrtExVc3EchoCanceler_Type()
)
prtExVc3EchoCanceler.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVc3EchoCanceler.setStatus("current")
_PrtInVc3CnfgTable_Object = MibTable
prtInVc3CnfgTable = _PrtInVc3CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2)
)
if mibBuilder.loadTexts:
    prtInVc3CnfgTable.setStatus("current")
_PrtInVc3CnfgEntry_Object = MibTableRow
prtInVc3CnfgEntry = _PrtInVc3CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1)
)
prtInVc3CnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtInVc3CnfgIdx"),
    (0, "RAD-MIB", "prtInVc3SltIdx"),
    (0, "RAD-MIB", "prtInVc3PrtIdx"),
)
if mibBuilder.loadTexts:
    prtInVc3CnfgEntry.setStatus("current")


class _PrtInVc3CnfgIdx_Type(Integer32):
    """Custom type prtInVc3CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtInVc3CnfgIdx_Type.__name__ = "Integer32"
_PrtInVc3CnfgIdx_Object = MibTableColumn
prtInVc3CnfgIdx = _PrtInVc3CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1, 1),
    _PrtInVc3CnfgIdx_Type()
)
prtInVc3CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInVc3CnfgIdx.setStatus("current")


class _PrtInVc3SltIdx_Type(Integer32):
    """Custom type prtInVc3SltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtInVc3SltIdx_Type.__name__ = "Integer32"
_PrtInVc3SltIdx_Object = MibTableColumn
prtInVc3SltIdx = _PrtInVc3SltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1, 2),
    _PrtInVc3SltIdx_Type()
)
prtInVc3SltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInVc3SltIdx.setStatus("current")


class _PrtInVc3PrtIdx_Type(Integer32):
    """Custom type prtInVc3PrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            101
        )
    )
    namedValues = NamedValues(
        ("inPrt1", 101)
    )


_PrtInVc3PrtIdx_Type.__name__ = "Integer32"
_PrtInVc3PrtIdx_Object = MibTableColumn
prtInVc3PrtIdx = _PrtInVc3PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1, 3),
    _PrtInVc3PrtIdx_Type()
)
prtInVc3PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtInVc3PrtIdx.setStatus("current")


class _PrtInVc3Connect_Type(Integer32):
    """Custom type prtInVc3Connect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtInVc3Connect_Type.__name__ = "Integer32"
_PrtInVc3Connect_Object = MibTableColumn
prtInVc3Connect = _PrtInVc3Connect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1, 4),
    _PrtInVc3Connect_Type()
)
prtInVc3Connect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInVc3Connect.setStatus("current")


class _PrtInVc3Rate_Type(Integer32):
    """Custom type prtInVc3Rate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("r16000bps", 2),
          ("r32000bps", 1))
    )


_PrtInVc3Rate_Type.__name__ = "Integer32"
_PrtInVc3Rate_Object = MibTableColumn
prtInVc3Rate = _PrtInVc3Rate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1, 5),
    _PrtInVc3Rate_Type()
)
prtInVc3Rate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInVc3Rate.setStatus("current")


class _PrtInVc3Oos_Type(Integer32):
    """Custom type prtInVc3Oos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("busyIdle", 3),
          ("forcedBusy", 2),
          ("forcedIdle", 1),
          ("idleBusy", 4))
    )


_PrtInVc3Oos_Type.__name__ = "Integer32"
_PrtInVc3Oos_Object = MibTableColumn
prtInVc3Oos = _PrtInVc3Oos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1, 6),
    _PrtInVc3Oos_Type()
)
prtInVc3Oos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInVc3Oos.setStatus("current")


class _PrtInVc3LinkTo_Type(Integer32):
    """Custom type prtInVc3LinkTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtInVc3LinkTo_Type.__name__ = "Integer32"
_PrtInVc3LinkTo_Object = MibTableColumn
prtInVc3LinkTo = _PrtInVc3LinkTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1, 7),
    _PrtInVc3LinkTo_Type()
)
prtInVc3LinkTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtInVc3LinkTo.setStatus("deprecated")
_PrtVcPbxCnfg_ObjectIdentity = ObjectIdentity
prtVcPbxCnfg = _PrtVcPbxCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15)
)
_PrtExVcPbxCnfgTable_Object = MibTable
prtExVcPbxCnfgTable = _PrtExVcPbxCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1)
)
if mibBuilder.loadTexts:
    prtExVcPbxCnfgTable.setStatus("current")
_PrtExVcPbxCnfgEntry_Object = MibTableRow
prtExVcPbxCnfgEntry = _PrtExVcPbxCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1)
)
prtExVcPbxCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtExVcPbxCnfgIdx"),
    (0, "RAD-MIB", "prtExVcPbxSltIdx"),
    (0, "RAD-MIB", "prtExVcPbxPrtIdx"),
)
if mibBuilder.loadTexts:
    prtExVcPbxCnfgEntry.setStatus("current")


class _PrtExVcPbxCnfgIdx_Type(Integer32):
    """Custom type prtExVcPbxCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExVcPbxCnfgIdx_Type.__name__ = "Integer32"
_PrtExVcPbxCnfgIdx_Object = MibTableColumn
prtExVcPbxCnfgIdx = _PrtExVcPbxCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 1),
    _PrtExVcPbxCnfgIdx_Type()
)
prtExVcPbxCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVcPbxCnfgIdx.setStatus("current")


class _PrtExVcPbxSltIdx_Type(Integer32):
    """Custom type prtExVcPbxSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExVcPbxSltIdx_Type.__name__ = "Integer32"
_PrtExVcPbxSltIdx_Object = MibTableColumn
prtExVcPbxSltIdx = _PrtExVcPbxSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 2),
    _PrtExVcPbxSltIdx_Type()
)
prtExVcPbxSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVcPbxSltIdx.setStatus("current")


class _PrtExVcPbxPrtIdx_Type(Integer32):
    """Custom type prtExVcPbxPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("exPrt1", 1)
    )


_PrtExVcPbxPrtIdx_Type.__name__ = "Integer32"
_PrtExVcPbxPrtIdx_Object = MibTableColumn
prtExVcPbxPrtIdx = _PrtExVcPbxPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 3),
    _PrtExVcPbxPrtIdx_Type()
)
prtExVcPbxPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVcPbxPrtIdx.setStatus("current")


class _PrtExVcPbxConnect_Type(Integer32):
    """Custom type prtExVcPbxConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtExVcPbxConnect_Type.__name__ = "Integer32"
_PrtExVcPbxConnect_Object = MibTableColumn
prtExVcPbxConnect = _PrtExVcPbxConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 4),
    _PrtExVcPbxConnect_Type()
)
prtExVcPbxConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxConnect.setStatus("current")


class _PrtExVcPbxGroup_Type(Integer32):
    """Custom type prtExVcPbxGroup based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtExVcPbxGroup_Type.__name__ = "Integer32"
_PrtExVcPbxGroup_Object = MibTableColumn
prtExVcPbxGroup = _PrtExVcPbxGroup_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 5),
    _PrtExVcPbxGroup_Type()
)
prtExVcPbxGroup.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVcPbxGroup.setStatus("current")


class _PrtExVcPbxTransparent_Type(Integer32):
    """Custom type prtExVcPbxTransparent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 255),
          ("yes", 3))
    )


_PrtExVcPbxTransparent_Type.__name__ = "Integer32"
_PrtExVcPbxTransparent_Object = MibTableColumn
prtExVcPbxTransparent = _PrtExVcPbxTransparent_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 6),
    _PrtExVcPbxTransparent_Type()
)
prtExVcPbxTransparent.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxTransparent.setStatus("current")
_PrtExVcPbxTransSignalTs_Type = Integer32
_PrtExVcPbxTransSignalTs_Object = MibTableColumn
prtExVcPbxTransSignalTs = _PrtExVcPbxTransSignalTs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 7),
    _PrtExVcPbxTransSignalTs_Type()
)
prtExVcPbxTransSignalTs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxTransSignalTs.setStatus("current")


class _PrtExVcPbxFrame_Type(Integer32):
    """Custom type prtExVcPbxFrame based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              255)
        )
    )
    namedValues = NamedValues(
        *(("esfT1", 2),
          ("g732nE1", 4),
          ("g732nE1CRC", 5),
          ("g732sE1", 6),
          ("g732sE1CRC", 7),
          ("notApplicable", 255),
          ("sfT1", 3))
    )


_PrtExVcPbxFrame_Type.__name__ = "Integer32"
_PrtExVcPbxFrame_Object = MibTableColumn
prtExVcPbxFrame = _PrtExVcPbxFrame_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 8),
    _PrtExVcPbxFrame_Type()
)
prtExVcPbxFrame.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxFrame.setStatus("current")


class _PrtExVcPbxRestoreTime_Type(Integer32):
    """Custom type prtExVcPbxRestoreTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("ccittE1", 4),
          ("notApplicable", 255),
          ("restoreT10sec62411", 3),
          ("restoreT1secFast", 2))
    )


_PrtExVcPbxRestoreTime_Type.__name__ = "Integer32"
_PrtExVcPbxRestoreTime_Object = MibTableColumn
prtExVcPbxRestoreTime = _PrtExVcPbxRestoreTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 9),
    _PrtExVcPbxRestoreTime_Type()
)
prtExVcPbxRestoreTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxRestoreTime.setStatus("current")


class _PrtExVcPbxLineCode_Type(Integer32):
    """Custom type prtExVcPbxLineCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              255)
        )
    )
    namedValues = NamedValues(
        *(("b7zsT1", 1),
          ("b8zsT1", 2),
          ("hdb3E1", 4),
          ("notApplicable", 255),
          ("transT1", 3))
    )


_PrtExVcPbxLineCode_Type.__name__ = "Integer32"
_PrtExVcPbxLineCode_Object = MibTableColumn
prtExVcPbxLineCode = _PrtExVcPbxLineCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 10),
    _PrtExVcPbxLineCode_Type()
)
prtExVcPbxLineCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxLineCode.setStatus("current")


class _PrtExVcPbxLineLength_Type(Integer32):
    """Custom type prtExVcPbxLineLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              255)
        )
    )
    namedValues = NamedValues(
        *(("len0p133ft", 2),
          ("len134p266ft", 3),
          ("len267p399ft", 4),
          ("len400p533ft", 5),
          ("len534p655ft", 6),
          ("notApplicable", 255),
          ("unknown", 1))
    )


_PrtExVcPbxLineLength_Type.__name__ = "Integer32"
_PrtExVcPbxLineLength_Object = MibTableColumn
prtExVcPbxLineLength = _PrtExVcPbxLineLength_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 11),
    _PrtExVcPbxLineLength_Type()
)
prtExVcPbxLineLength.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxLineLength.setStatus("current")


class _PrtExVcPbxLinkTo_Type(Integer32):
    """Custom type prtExVcPbxLinkTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtExVcPbxLinkTo_Type.__name__ = "Integer32"
_PrtExVcPbxLinkTo_Object = MibTableColumn
prtExVcPbxLinkTo = _PrtExVcPbxLinkTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 12),
    _PrtExVcPbxLinkTo_Type()
)
prtExVcPbxLinkTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxLinkTo.setStatus("deprecated")


class _PrtExVcPbxSignalOper_Type(Integer32):
    """Custom type prtExVcPbxSignalOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bEqA", 3),
          ("inverseA", 4),
          ("normal", 2),
          ("notApplicable", 1))
    )


_PrtExVcPbxSignalOper_Type.__name__ = "Integer32"
_PrtExVcPbxSignalOper_Object = MibTableColumn
prtExVcPbxSignalOper = _PrtExVcPbxSignalOper_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 13),
    _PrtExVcPbxSignalOper_Type()
)
prtExVcPbxSignalOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxSignalOper.setStatus("current")


class _PrtExVcPbxIdleCode_Type(Integer32):
    """Custom type prtExVcPbxIdleCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("h1a", 10),
          ("h54", 9),
          ("h7e", 8),
          ("h7f", 7),
          ("h98", 6),
          ("h9e", 5),
          ("hd5", 4),
          ("he4", 3),
          ("hff", 2),
          ("notApplicable", 1))
    )


_PrtExVcPbxIdleCode_Type.__name__ = "Integer32"
_PrtExVcPbxIdleCode_Object = MibTableColumn
prtExVcPbxIdleCode = _PrtExVcPbxIdleCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 14),
    _PrtExVcPbxIdleCode_Type()
)
prtExVcPbxIdleCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxIdleCode.setStatus("current")
_PrtIn1p6VcPbxCnfgTable_Object = MibTable
prtIn1p6VcPbxCnfgTable = _PrtIn1p6VcPbxCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2)
)
if mibBuilder.loadTexts:
    prtIn1p6VcPbxCnfgTable.setStatus("current")
_PrtIn1p6VcPbxCnfgEntry_Object = MibTableRow
prtIn1p6VcPbxCnfgEntry = _PrtIn1p6VcPbxCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1)
)
prtIn1p6VcPbxCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtIn1p6VcPbxCnfgIdx"),
    (0, "RAD-MIB", "prtIn1p6VcPbxSltIdx"),
    (0, "RAD-MIB", "prtIn1p6VcPbxPrtIdx"),
)
if mibBuilder.loadTexts:
    prtIn1p6VcPbxCnfgEntry.setStatus("current")


class _PrtIn1p6VcPbxCnfgIdx_Type(Integer32):
    """Custom type prtIn1p6VcPbxCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtIn1p6VcPbxCnfgIdx_Type.__name__ = "Integer32"
_PrtIn1p6VcPbxCnfgIdx_Object = MibTableColumn
prtIn1p6VcPbxCnfgIdx = _PrtIn1p6VcPbxCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1, 1),
    _PrtIn1p6VcPbxCnfgIdx_Type()
)
prtIn1p6VcPbxCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIn1p6VcPbxCnfgIdx.setStatus("current")


class _PrtIn1p6VcPbxSltIdx_Type(Integer32):
    """Custom type prtIn1p6VcPbxSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtIn1p6VcPbxSltIdx_Type.__name__ = "Integer32"
_PrtIn1p6VcPbxSltIdx_Object = MibTableColumn
prtIn1p6VcPbxSltIdx = _PrtIn1p6VcPbxSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1, 2),
    _PrtIn1p6VcPbxSltIdx_Type()
)
prtIn1p6VcPbxSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIn1p6VcPbxSltIdx.setStatus("current")


class _PrtIn1p6VcPbxPrtIdx_Type(Integer32):
    """Custom type prtIn1p6VcPbxPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(101,
              102,
              103,
              104,
              105,
              106)
        )
    )
    namedValues = NamedValues(
        *(("inPrt1", 101),
          ("inPrt2", 102),
          ("inPrt3", 103),
          ("inPrt4", 104),
          ("inPrt5", 105),
          ("inPrt6", 106))
    )


_PrtIn1p6VcPbxPrtIdx_Type.__name__ = "Integer32"
_PrtIn1p6VcPbxPrtIdx_Object = MibTableColumn
prtIn1p6VcPbxPrtIdx = _PrtIn1p6VcPbxPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1, 3),
    _PrtIn1p6VcPbxPrtIdx_Type()
)
prtIn1p6VcPbxPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIn1p6VcPbxPrtIdx.setStatus("current")


class _PrtIn1p6VcPbxConnect_Type(Integer32):
    """Custom type prtIn1p6VcPbxConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtIn1p6VcPbxConnect_Type.__name__ = "Integer32"
_PrtIn1p6VcPbxConnect_Object = MibTableColumn
prtIn1p6VcPbxConnect = _PrtIn1p6VcPbxConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1, 4),
    _PrtIn1p6VcPbxConnect_Type()
)
prtIn1p6VcPbxConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIn1p6VcPbxConnect.setStatus("current")


class _PrtIn1p6VcPbxRate_Type(Integer32):
    """Custom type prtIn1p6VcPbxRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("r12800bps", 6),
          ("r4800bps", 1),
          ("r6400bps", 2),
          ("r7200bps", 3),
          ("r8000bps", 4),
          ("r9600bps", 5))
    )


_PrtIn1p6VcPbxRate_Type.__name__ = "Integer32"
_PrtIn1p6VcPbxRate_Object = MibTableColumn
prtIn1p6VcPbxRate = _PrtIn1p6VcPbxRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1, 5),
    _PrtIn1p6VcPbxRate_Type()
)
prtIn1p6VcPbxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIn1p6VcPbxRate.setStatus("current")


class _PrtIn1p6VcPbxEchoCanceler_Type(Integer32):
    """Custom type prtIn1p6VcPbxEchoCanceler based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtIn1p6VcPbxEchoCanceler_Type.__name__ = "Integer32"
_PrtIn1p6VcPbxEchoCanceler_Object = MibTableColumn
prtIn1p6VcPbxEchoCanceler = _PrtIn1p6VcPbxEchoCanceler_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1, 6),
    _PrtIn1p6VcPbxEchoCanceler_Type()
)
prtIn1p6VcPbxEchoCanceler.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIn1p6VcPbxEchoCanceler.setStatus("current")


class _PrtIn1p6VcPbxPabxTs_Type(Integer32):
    """Custom type prtIn1p6VcPbxPabxTs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 31),
    )


_PrtIn1p6VcPbxPabxTs_Type.__name__ = "Integer32"
_PrtIn1p6VcPbxPabxTs_Object = MibTableColumn
prtIn1p6VcPbxPabxTs = _PrtIn1p6VcPbxPabxTs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1, 7),
    _PrtIn1p6VcPbxPabxTs_Type()
)
prtIn1p6VcPbxPabxTs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIn1p6VcPbxPabxTs.setStatus("current")
_PrtIn7p8VcPbxCnfgTable_Object = MibTable
prtIn7p8VcPbxCnfgTable = _PrtIn7p8VcPbxCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3)
)
if mibBuilder.loadTexts:
    prtIn7p8VcPbxCnfgTable.setStatus("current")
_PrtIn7p8VcPbxCnfgEntry_Object = MibTableRow
prtIn7p8VcPbxCnfgEntry = _PrtIn7p8VcPbxCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1)
)
prtIn7p8VcPbxCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtIn7p8VcPbxCnfgIdx"),
    (0, "RAD-MIB", "prtIn7p8VcPbxSltIdx"),
    (0, "RAD-MIB", "prtIn7p8VcPbxPrtIdx"),
)
if mibBuilder.loadTexts:
    prtIn7p8VcPbxCnfgEntry.setStatus("current")


class _PrtIn7p8VcPbxCnfgIdx_Type(Integer32):
    """Custom type prtIn7p8VcPbxCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtIn7p8VcPbxCnfgIdx_Type.__name__ = "Integer32"
_PrtIn7p8VcPbxCnfgIdx_Object = MibTableColumn
prtIn7p8VcPbxCnfgIdx = _PrtIn7p8VcPbxCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 1),
    _PrtIn7p8VcPbxCnfgIdx_Type()
)
prtIn7p8VcPbxCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIn7p8VcPbxCnfgIdx.setStatus("current")


class _PrtIn7p8VcPbxSltIdx_Type(Integer32):
    """Custom type prtIn7p8VcPbxSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtIn7p8VcPbxSltIdx_Type.__name__ = "Integer32"
_PrtIn7p8VcPbxSltIdx_Object = MibTableColumn
prtIn7p8VcPbxSltIdx = _PrtIn7p8VcPbxSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 2),
    _PrtIn7p8VcPbxSltIdx_Type()
)
prtIn7p8VcPbxSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIn7p8VcPbxSltIdx.setStatus("current")


class _PrtIn7p8VcPbxPrtIdx_Type(Integer32):
    """Custom type prtIn7p8VcPbxPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(107,
              108)
        )
    )
    namedValues = NamedValues(
        *(("inPrt7", 107),
          ("inPrt8", 108))
    )


_PrtIn7p8VcPbxPrtIdx_Type.__name__ = "Integer32"
_PrtIn7p8VcPbxPrtIdx_Object = MibTableColumn
prtIn7p8VcPbxPrtIdx = _PrtIn7p8VcPbxPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 3),
    _PrtIn7p8VcPbxPrtIdx_Type()
)
prtIn7p8VcPbxPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIn7p8VcPbxPrtIdx.setStatus("current")


class _PrtIn7p8VcPbxConnect_Type(Integer32):
    """Custom type prtIn7p8VcPbxConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtIn7p8VcPbxConnect_Type.__name__ = "Integer32"
_PrtIn7p8VcPbxConnect_Object = MibTableColumn
prtIn7p8VcPbxConnect = _PrtIn7p8VcPbxConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 4),
    _PrtIn7p8VcPbxConnect_Type()
)
prtIn7p8VcPbxConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIn7p8VcPbxConnect.setStatus("current")


class _PrtIn7p8VcPbxMode_Type(Integer32):
    """Custom type prtIn7p8VcPbxMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("normal", 1),
          ("server", 2))
    )


_PrtIn7p8VcPbxMode_Type.__name__ = "Integer32"
_PrtIn7p8VcPbxMode_Object = MibTableColumn
prtIn7p8VcPbxMode = _PrtIn7p8VcPbxMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 5),
    _PrtIn7p8VcPbxMode_Type()
)
prtIn7p8VcPbxMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIn7p8VcPbxMode.setStatus("current")


class _PrtIn7p8VcPbxRate_Type(Integer32):
    """Custom type prtIn7p8VcPbxRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("r16Kbps", 2),
          ("r32Kbps", 1))
    )


_PrtIn7p8VcPbxRate_Type.__name__ = "Integer32"
_PrtIn7p8VcPbxRate_Object = MibTableColumn
prtIn7p8VcPbxRate = _PrtIn7p8VcPbxRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 6),
    _PrtIn7p8VcPbxRate_Type()
)
prtIn7p8VcPbxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIn7p8VcPbxRate.setStatus("current")


class _PrtIn7p8VcPbxSignalMode_Type(Integer32):
    """Custom type prtIn7p8VcPbxSignalMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("aBit", 2),
          ("abcBit", 3),
          ("abcdBit", 4),
          ("none", 1))
    )


_PrtIn7p8VcPbxSignalMode_Type.__name__ = "Integer32"
_PrtIn7p8VcPbxSignalMode_Object = MibTableColumn
prtIn7p8VcPbxSignalMode = _PrtIn7p8VcPbxSignalMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 7),
    _PrtIn7p8VcPbxSignalMode_Type()
)
prtIn7p8VcPbxSignalMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIn7p8VcPbxSignalMode.setStatus("current")


class _PrtIn7p8VcPbxOos_Type(Integer32):
    """Custom type prtIn7p8VcPbxOos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("forcedBusy", 2),
          ("forcedIdle", 1))
    )


_PrtIn7p8VcPbxOos_Type.__name__ = "Integer32"
_PrtIn7p8VcPbxOos_Object = MibTableColumn
prtIn7p8VcPbxOos = _PrtIn7p8VcPbxOos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 8),
    _PrtIn7p8VcPbxOos_Type()
)
prtIn7p8VcPbxOos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIn7p8VcPbxOos.setStatus("current")


class _PrtIn7p8VcPbxLinkTo_Type(Integer32):
    """Custom type prtIn7p8VcPbxLinkTo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtIn7p8VcPbxLinkTo_Type.__name__ = "Integer32"
_PrtIn7p8VcPbxLinkTo_Object = MibTableColumn
prtIn7p8VcPbxLinkTo = _PrtIn7p8VcPbxLinkTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 9),
    _PrtIn7p8VcPbxLinkTo_Type()
)
prtIn7p8VcPbxLinkTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIn7p8VcPbxLinkTo.setStatus("deprecated")
_PrtExVcPbxTsTable_Object = MibTable
prtExVcPbxTsTable = _PrtExVcPbxTsTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4)
)
if mibBuilder.loadTexts:
    prtExVcPbxTsTable.setStatus("current")
_PrtExVcPbxTsEntry_Object = MibTableRow
prtExVcPbxTsEntry = _PrtExVcPbxTsEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1)
)
prtExVcPbxTsEntry.setIndexNames(
    (0, "RAD-MIB", "prtExVcPbxTsCnfgIdx"),
    (0, "RAD-MIB", "prtExVcPbxTsSltIdx"),
    (0, "RAD-MIB", "prtExVcPbxTsPrtIdx"),
    (0, "RAD-MIB", "prtExVcPbxTsIdx"),
)
if mibBuilder.loadTexts:
    prtExVcPbxTsEntry.setStatus("current")


class _PrtExVcPbxTsCnfgIdx_Type(Integer32):
    """Custom type prtExVcPbxTsCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExVcPbxTsCnfgIdx_Type.__name__ = "Integer32"
_PrtExVcPbxTsCnfgIdx_Object = MibTableColumn
prtExVcPbxTsCnfgIdx = _PrtExVcPbxTsCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 1),
    _PrtExVcPbxTsCnfgIdx_Type()
)
prtExVcPbxTsCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVcPbxTsCnfgIdx.setStatus("current")


class _PrtExVcPbxTsSltIdx_Type(Integer32):
    """Custom type prtExVcPbxTsSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtExVcPbxTsSltIdx_Type.__name__ = "Integer32"
_PrtExVcPbxTsSltIdx_Object = MibTableColumn
prtExVcPbxTsSltIdx = _PrtExVcPbxTsSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 2),
    _PrtExVcPbxTsSltIdx_Type()
)
prtExVcPbxTsSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVcPbxTsSltIdx.setStatus("current")


class _PrtExVcPbxTsPrtIdx_Type(Integer32):
    """Custom type prtExVcPbxTsPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              109,
              110)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("inPrt10", 110),
          ("inPrt9", 109))
    )


_PrtExVcPbxTsPrtIdx_Type.__name__ = "Integer32"
_PrtExVcPbxTsPrtIdx_Object = MibTableColumn
prtExVcPbxTsPrtIdx = _PrtExVcPbxTsPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 3),
    _PrtExVcPbxTsPrtIdx_Type()
)
prtExVcPbxTsPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVcPbxTsPrtIdx.setStatus("current")
_PrtExVcPbxTsIdx_Type = Integer32
_PrtExVcPbxTsIdx_Object = MibTableColumn
prtExVcPbxTsIdx = _PrtExVcPbxTsIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 4),
    _PrtExVcPbxTsIdx_Type()
)
prtExVcPbxTsIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtExVcPbxTsIdx.setStatus("current")


class _PrtExVcPbxTsMode_Type(Integer32):
    """Custom type prtExVcPbxTsMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48)
        )
    )
    namedValues = NamedValues(
        *(("ccs1", 11),
          ("ccs2", 12),
          ("ccs3", 13),
          ("ccs4", 14),
          ("ccs5", 15),
          ("ccs6", 16),
          ("ccs7", 17),
          ("ccs8", 18),
          ("compressed", 2),
          ("compressedCcs", 4),
          ("mng", 5),
          ("ss7n1", 41),
          ("ss7n2", 42),
          ("ss7n3", 43),
          ("ss7n4", 44),
          ("ss7n5", 45),
          ("ss7n6", 46),
          ("ss7n7", 47),
          ("ss7n8", 48),
          ("transparent", 3),
          ("unused", 1))
    )


_PrtExVcPbxTsMode_Type.__name__ = "Integer32"
_PrtExVcPbxTsMode_Object = MibTableColumn
prtExVcPbxTsMode = _PrtExVcPbxTsMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 5),
    _PrtExVcPbxTsMode_Type()
)
prtExVcPbxTsMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxTsMode.setStatus("current")


class _PrtExVcPbxTsIConSlot_Type(Integer32):
    """Custom type prtExVcPbxTsIConSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("noConnect", 2))
    )


_PrtExVcPbxTsIConSlot_Type.__name__ = "Integer32"
_PrtExVcPbxTsIConSlot_Object = MibTableColumn
prtExVcPbxTsIConSlot = _PrtExVcPbxTsIConSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 6),
    _PrtExVcPbxTsIConSlot_Type()
)
prtExVcPbxTsIConSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxTsIConSlot.setStatus("current")


class _PrtExVcPbxTsIConPrt_Type(Integer32):
    """Custom type prtExVcPbxTsIConPrt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("inPrt1", 101),
          ("inPrt2", 102),
          ("inPrt3", 103),
          ("inPrt4", 104),
          ("inPrt5", 105),
          ("inPrt6", 106),
          ("inPrt7", 107),
          ("inPrt8", 108),
          ("noConnect", 100))
    )


_PrtExVcPbxTsIConPrt_Type.__name__ = "Integer32"
_PrtExVcPbxTsIConPrt_Object = MibTableColumn
prtExVcPbxTsIConPrt = _PrtExVcPbxTsIConPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 7),
    _PrtExVcPbxTsIConPrt_Type()
)
prtExVcPbxTsIConPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxTsIConPrt.setStatus("current")


class _PrtExVcPbxTsIConTs_Type(Integer32):
    """Custom type prtExVcPbxTsIConTs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtExVcPbxTsIConTs_Type.__name__ = "Integer32"
_PrtExVcPbxTsIConTs_Object = MibTableColumn
prtExVcPbxTsIConTs = _PrtExVcPbxTsIConTs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 8),
    _PrtExVcPbxTsIConTs_Type()
)
prtExVcPbxTsIConTs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxTsIConTs.setStatus("current")


class _PrtExVcPbxTsRemPrt_Type(Integer32):
    """Custom type prtExVcPbxTsRemPrt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              100)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("noConnect", 100))
    )


_PrtExVcPbxTsRemPrt_Type.__name__ = "Integer32"
_PrtExVcPbxTsRemPrt_Object = MibTableColumn
prtExVcPbxTsRemPrt = _PrtExVcPbxTsRemPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 9),
    _PrtExVcPbxTsRemPrt_Type()
)
prtExVcPbxTsRemPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxTsRemPrt.setStatus("current")
_PrtExVcPbxTsRemTs_Type = Integer32
_PrtExVcPbxTsRemTs_Object = MibTableColumn
prtExVcPbxTsRemTs = _PrtExVcPbxTsRemTs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 10),
    _PrtExVcPbxTsRemTs_Type()
)
prtExVcPbxTsRemTs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxTsRemTs.setStatus("current")
_PrtExVcPbxTsRemConnID_Type = Unsigned32
_PrtExVcPbxTsRemConnID_Object = MibTableColumn
prtExVcPbxTsRemConnID = _PrtExVcPbxTsRemConnID_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 11),
    _PrtExVcPbxTsRemConnID_Type()
)
prtExVcPbxTsRemConnID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxTsRemConnID.setStatus("current")


class _PrtExVcPbxTsSourceSlot_Type(Integer32):
    """Custom type prtExVcPbxTsSourceSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("noConnect", 2))
    )


_PrtExVcPbxTsSourceSlot_Type.__name__ = "Integer32"
_PrtExVcPbxTsSourceSlot_Object = MibTableColumn
prtExVcPbxTsSourceSlot = _PrtExVcPbxTsSourceSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 12),
    _PrtExVcPbxTsSourceSlot_Type()
)
prtExVcPbxTsSourceSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxTsSourceSlot.setStatus("current")
_PrtExVcPbxTsSourcePrt_Type = Unsigned32
_PrtExVcPbxTsSourcePrt_Object = MibTableColumn
prtExVcPbxTsSourcePrt = _PrtExVcPbxTsSourcePrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 13),
    _PrtExVcPbxTsSourcePrt_Type()
)
prtExVcPbxTsSourcePrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtExVcPbxTsSourcePrt.setStatus("current")
_PrtIsdnCnfg_ObjectIdentity = ObjectIdentity
prtIsdnCnfg = _PrtIsdnCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16)
)
_PrtIsdnCnfgTable_Object = MibTable
prtIsdnCnfgTable = _PrtIsdnCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1)
)
if mibBuilder.loadTexts:
    prtIsdnCnfgTable.setStatus("current")
_PrtIsdnCnfgEntry_Object = MibTableRow
prtIsdnCnfgEntry = _PrtIsdnCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1)
)
prtIsdnCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtIsdnCnfgIdx"),
    (0, "RAD-MIB", "prtIsdnSltIdx"),
    (0, "RAD-MIB", "prtIsdnPrtIdx"),
)
if mibBuilder.loadTexts:
    prtIsdnCnfgEntry.setStatus("current")


class _PrtIsdnCnfgIdx_Type(Integer32):
    """Custom type prtIsdnCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtIsdnCnfgIdx_Type.__name__ = "Integer32"
_PrtIsdnCnfgIdx_Object = MibTableColumn
prtIsdnCnfgIdx = _PrtIsdnCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 1),
    _PrtIsdnCnfgIdx_Type()
)
prtIsdnCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnCnfgIdx.setStatus("current")


class _PrtIsdnSltIdx_Type(Integer32):
    """Custom type prtIsdnSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              103,
              104,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("kmxMlA", 103),
          ("kmxMlB", 104),
          ("notApplicable", 255))
    )


_PrtIsdnSltIdx_Type.__name__ = "Integer32"
_PrtIsdnSltIdx_Object = MibTableColumn
prtIsdnSltIdx = _PrtIsdnSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 2),
    _PrtIsdnSltIdx_Type()
)
prtIsdnSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnSltIdx.setStatus("current")
_PrtIsdnPrtIdx_Type = Integer32
_PrtIsdnPrtIdx_Object = MibTableColumn
prtIsdnPrtIdx = _PrtIsdnPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 3),
    _PrtIsdnPrtIdx_Type()
)
prtIsdnPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnPrtIdx.setStatus("current")


class _PrtIsdnConnect_Type(Integer32):
    """Custom type prtIsdnConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtIsdnConnect_Type.__name__ = "Integer32"
_PrtIsdnConnect_Object = MibTableColumn
prtIsdnConnect = _PrtIsdnConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 4),
    _PrtIsdnConnect_Type()
)
prtIsdnConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnConnect.setStatus("current")


class _PrtIsdnSignalingProtocol_Type(Integer32):
    """Custom type prtIsdnSignalingProtocol based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              5,
              6,
              7,
              9,
              10,
              17,
              18,
              21,
              255)
        )
    )
    namedValues = NamedValues(
        *(("dms100", 7),
          ("ess4", 5),
          ("ess5", 6),
          ("etsi", 3),
          ("ins1500", 18),
          ("ins64", 17),
          ("ni1", 9),
          ("ni2", 10),
          ("notApplicable", 255),
          ("other", 1),
          ("qsig", 21))
    )


_PrtIsdnSignalingProtocol_Type.__name__ = "Integer32"
_PrtIsdnSignalingProtocol_Object = MibTableColumn
prtIsdnSignalingProtocol = _PrtIsdnSignalingProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 5),
    _PrtIsdnSignalingProtocol_Type()
)
prtIsdnSignalingProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnSignalingProtocol.setStatus("current")


class _PrtIsdnBasicRateLineTopology_Type(Integer32):
    """Custom type prtIsdnBasicRateLineTopology based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("pointToMultipoint", 2),
          ("pointToPoint", 1))
    )


_PrtIsdnBasicRateLineTopology_Type.__name__ = "Integer32"
_PrtIsdnBasicRateLineTopology_Object = MibTableColumn
prtIsdnBasicRateLineTopology = _PrtIsdnBasicRateLineTopology_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 6),
    _PrtIsdnBasicRateLineTopology_Type()
)
prtIsdnBasicRateLineTopology.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnBasicRateLineTopology.setStatus("current")


class _PrtIsdnMode_Type(Integer32):
    """Custom type prtIsdnMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("dialup", 1),
          ("leased", 2),
          ("notApplicable", 255),
          ("syncLeased", 3))
    )


_PrtIsdnMode_Type.__name__ = "Integer32"
_PrtIsdnMode_Object = MibTableColumn
prtIsdnMode = _PrtIsdnMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 7),
    _PrtIsdnMode_Type()
)
prtIsdnMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnMode.setStatus("current")


class _PrtIsdnFilter_Type(Integer32):
    """Custom type prtIsdnFilter based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("answerAll", 2),
          ("callBack", 5),
          ("notApplicable", 1),
          ("rejectAll", 3),
          ("selective", 4))
    )


_PrtIsdnFilter_Type.__name__ = "Integer32"
_PrtIsdnFilter_Object = MibTableColumn
prtIsdnFilter = _PrtIsdnFilter_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 8),
    _PrtIsdnFilter_Type()
)
prtIsdnFilter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnFilter.setStatus("current")


class _PrtIsdnSimultaneousCall_Type(Integer32):
    """Custom type prtIsdnSimultaneousCall based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("accept", 2),
          ("notApplicable", 1),
          ("reject", 3))
    )


_PrtIsdnSimultaneousCall_Type.__name__ = "Integer32"
_PrtIsdnSimultaneousCall_Object = MibTableColumn
prtIsdnSimultaneousCall = _PrtIsdnSimultaneousCall_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 9),
    _PrtIsdnSimultaneousCall_Type()
)
prtIsdnSimultaneousCall.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnSimultaneousCall.setStatus("current")
_PrtIsdnNumOfAbstractTerm_Type = Integer32
_PrtIsdnNumOfAbstractTerm_Object = MibTableColumn
prtIsdnNumOfAbstractTerm = _PrtIsdnNumOfAbstractTerm_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 10),
    _PrtIsdnNumOfAbstractTerm_Type()
)
prtIsdnNumOfAbstractTerm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnNumOfAbstractTerm.setStatus("current")


class _PrtIsdnSwitchMode_Type(Integer32):
    """Custom type prtIsdnSwitchMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("auto", 2),
          ("connect", 4),
          ("manual", 3),
          ("notApplicable", 1))
    )


_PrtIsdnSwitchMode_Type.__name__ = "Integer32"
_PrtIsdnSwitchMode_Object = MibTableColumn
prtIsdnSwitchMode = _PrtIsdnSwitchMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 11),
    _PrtIsdnSwitchMode_Type()
)
prtIsdnSwitchMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnSwitchMode.setStatus("current")


class _PrtIsdnAbSide_Type(Integer32):
    """Custom type prtIsdnAbSide based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("aSide", 2),
          ("bSide", 3),
          ("notApplicable", 1))
    )


_PrtIsdnAbSide_Type.__name__ = "Integer32"
_PrtIsdnAbSide_Object = MibTableColumn
prtIsdnAbSide = _PrtIsdnAbSide_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 12),
    _PrtIsdnAbSide_Type()
)
prtIsdnAbSide.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnAbSide.setStatus("current")


class _PrtIsdnQsigRole_Type(Integer32):
    """Custom type prtIsdnQsigRole based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("master", 3),
          ("notApplicable", 1),
          ("slave", 2))
    )


_PrtIsdnQsigRole_Type.__name__ = "Integer32"
_PrtIsdnQsigRole_Object = MibTableColumn
prtIsdnQsigRole = _PrtIsdnQsigRole_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 13),
    _PrtIsdnQsigRole_Type()
)
prtIsdnQsigRole.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnQsigRole.setStatus("current")


class _PrtIsdnInterface_Type(Integer32):
    """Custom type prtIsdnInterface based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("lt", 1),
          ("notApplicable", 255),
          ("nt", 2),
          ("te", 3))
    )


_PrtIsdnInterface_Type.__name__ = "Integer32"
_PrtIsdnInterface_Object = MibTableColumn
prtIsdnInterface = _PrtIsdnInterface_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 14),
    _PrtIsdnInterface_Type()
)
prtIsdnInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnInterface.setStatus("current")


class _PrtIsdnCallMode_Type(Integer32):
    """Custom type prtIsdnCallMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("initiate", 2),
          ("listen", 3),
          ("notApplicable", 1))
    )


_PrtIsdnCallMode_Type.__name__ = "Integer32"
_PrtIsdnCallMode_Object = MibTableColumn
prtIsdnCallMode = _PrtIsdnCallMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 15),
    _PrtIsdnCallMode_Type()
)
prtIsdnCallMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnCallMode.setStatus("current")
_PrtIsdnCallBackTimeout_Type = Integer32
_PrtIsdnCallBackTimeout_Object = MibTableColumn
prtIsdnCallBackTimeout = _PrtIsdnCallBackTimeout_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 16),
    _PrtIsdnCallBackTimeout_Type()
)
prtIsdnCallBackTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIsdnCallBackTimeout.setStatus("current")
_PrtIsdnEndpointTable_Object = MibTable
prtIsdnEndpointTable = _PrtIsdnEndpointTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2)
)
if mibBuilder.loadTexts:
    prtIsdnEndpointTable.setStatus("current")
_PrtIsdnEndpointEntry_Object = MibTableRow
prtIsdnEndpointEntry = _PrtIsdnEndpointEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1)
)
prtIsdnEndpointEntry.setIndexNames(
    (0, "RAD-MIB", "prtIsdnEndpointCnfgIdx"),
    (0, "RAD-MIB", "prtIsdnEndpointSltIdx"),
    (0, "RAD-MIB", "prtIsdnEndpointPrtIdx"),
    (0, "RAD-MIB", "prtIsdnEndpointIdx"),
)
if mibBuilder.loadTexts:
    prtIsdnEndpointEntry.setStatus("current")


class _PrtIsdnEndpointCnfgIdx_Type(Integer32):
    """Custom type prtIsdnEndpointCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtIsdnEndpointCnfgIdx_Type.__name__ = "Integer32"
_PrtIsdnEndpointCnfgIdx_Object = MibTableColumn
prtIsdnEndpointCnfgIdx = _PrtIsdnEndpointCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 1),
    _PrtIsdnEndpointCnfgIdx_Type()
)
prtIsdnEndpointCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnEndpointCnfgIdx.setStatus("current")


class _PrtIsdnEndpointSltIdx_Type(Integer32):
    """Custom type prtIsdnEndpointSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              103,
              104,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("kmxMlA", 103),
          ("kmxMlB", 104),
          ("notApplicable", 255))
    )


_PrtIsdnEndpointSltIdx_Type.__name__ = "Integer32"
_PrtIsdnEndpointSltIdx_Object = MibTableColumn
prtIsdnEndpointSltIdx = _PrtIsdnEndpointSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 2),
    _PrtIsdnEndpointSltIdx_Type()
)
prtIsdnEndpointSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnEndpointSltIdx.setStatus("current")
_PrtIsdnEndpointPrtIdx_Type = Integer32
_PrtIsdnEndpointPrtIdx_Object = MibTableColumn
prtIsdnEndpointPrtIdx = _PrtIsdnEndpointPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 3),
    _PrtIsdnEndpointPrtIdx_Type()
)
prtIsdnEndpointPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnEndpointPrtIdx.setStatus("current")


class _PrtIsdnEndpointIdx_Type(Integer32):
    """Custom type prtIsdnEndpointIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("atei1", 1),
          ("atei2", 2))
    )


_PrtIsdnEndpointIdx_Type.__name__ = "Integer32"
_PrtIsdnEndpointIdx_Object = MibTableColumn
prtIsdnEndpointIdx = _PrtIsdnEndpointIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 4),
    _PrtIsdnEndpointIdx_Type()
)
prtIsdnEndpointIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnEndpointIdx.setStatus("current")


class _PrtIsdnEndpointTeiType_Type(Integer32):
    """Custom type prtIsdnEndpointTeiType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("dynamic", 1),
          ("notApplicable", 255),
          ("static", 2))
    )


_PrtIsdnEndpointTeiType_Type.__name__ = "Integer32"
_PrtIsdnEndpointTeiType_Object = MibTableColumn
prtIsdnEndpointTeiType = _PrtIsdnEndpointTeiType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 5),
    _PrtIsdnEndpointTeiType_Type()
)
prtIsdnEndpointTeiType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    prtIsdnEndpointTeiType.setStatus("current")
_PrtIsdnEndpointTeiValue_Type = Integer32
_PrtIsdnEndpointTeiValue_Object = MibTableColumn
prtIsdnEndpointTeiValue = _PrtIsdnEndpointTeiValue_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 6),
    _PrtIsdnEndpointTeiValue_Type()
)
prtIsdnEndpointTeiValue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    prtIsdnEndpointTeiValue.setStatus("current")
_PrtIsdnEndpointSpid_Type = DisplayString
_PrtIsdnEndpointSpid_Object = MibTableColumn
prtIsdnEndpointSpid = _PrtIsdnEndpointSpid_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 7),
    _PrtIsdnEndpointSpid_Type()
)
prtIsdnEndpointSpid.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    prtIsdnEndpointSpid.setStatus("current")


class _PrtIsdnEndpointBearerCh_Type(Integer32):
    """Custom type prtIsdnEndpointBearerCh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("anyChannel", 2),
          ("channelB1", 3),
          ("channelB2", 4),
          ("notApplicable", 1))
    )


_PrtIsdnEndpointBearerCh_Type.__name__ = "Integer32"
_PrtIsdnEndpointBearerCh_Object = MibTableColumn
prtIsdnEndpointBearerCh = _PrtIsdnEndpointBearerCh_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 8),
    _PrtIsdnEndpointBearerCh_Type()
)
prtIsdnEndpointBearerCh.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    prtIsdnEndpointBearerCh.setStatus("current")
_PrtIsdnEndpointRowStatus_Type = RowStatus
_PrtIsdnEndpointRowStatus_Object = MibTableColumn
prtIsdnEndpointRowStatus = _PrtIsdnEndpointRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 9),
    _PrtIsdnEndpointRowStatus_Type()
)
prtIsdnEndpointRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    prtIsdnEndpointRowStatus.setStatus("current")
_PrtIsdnDirectoryTable_Object = MibTable
prtIsdnDirectoryTable = _PrtIsdnDirectoryTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3)
)
if mibBuilder.loadTexts:
    prtIsdnDirectoryTable.setStatus("current")
_PrtIsdnDirectoryEntry_Object = MibTableRow
prtIsdnDirectoryEntry = _PrtIsdnDirectoryEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1)
)
prtIsdnDirectoryEntry.setIndexNames(
    (0, "RAD-MIB", "prtIsdnDirectoryCnfgIdx"),
    (0, "RAD-MIB", "prtIsdnDirectorySltIdx"),
    (0, "RAD-MIB", "prtIsdnDirectoryPrtIdx"),
)
if mibBuilder.loadTexts:
    prtIsdnDirectoryEntry.setStatus("current")


class _PrtIsdnDirectoryCnfgIdx_Type(Integer32):
    """Custom type prtIsdnDirectoryCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtIsdnDirectoryCnfgIdx_Type.__name__ = "Integer32"
_PrtIsdnDirectoryCnfgIdx_Object = MibTableColumn
prtIsdnDirectoryCnfgIdx = _PrtIsdnDirectoryCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 1),
    _PrtIsdnDirectoryCnfgIdx_Type()
)
prtIsdnDirectoryCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnDirectoryCnfgIdx.setStatus("current")


class _PrtIsdnDirectorySltIdx_Type(Integer32):
    """Custom type prtIsdnDirectorySltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              103,
              104,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("kmxMlA", 103),
          ("kmxMlB", 104),
          ("notApplicable", 255))
    )


_PrtIsdnDirectorySltIdx_Type.__name__ = "Integer32"
_PrtIsdnDirectorySltIdx_Object = MibTableColumn
prtIsdnDirectorySltIdx = _PrtIsdnDirectorySltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 2),
    _PrtIsdnDirectorySltIdx_Type()
)
prtIsdnDirectorySltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnDirectorySltIdx.setStatus("current")
_PrtIsdnDirectoryPrtIdx_Type = Integer32
_PrtIsdnDirectoryPrtIdx_Object = MibTableColumn
prtIsdnDirectoryPrtIdx = _PrtIsdnDirectoryPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 3),
    _PrtIsdnDirectoryPrtIdx_Type()
)
prtIsdnDirectoryPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIsdnDirectoryPrtIdx.setStatus("current")


class _PrtIsdnDirectoryLocalAddr_Type(DisplayString):
    """Custom type prtIsdnDirectoryLocalAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 20),
    )


_PrtIsdnDirectoryLocalAddr_Type.__name__ = "DisplayString"
_PrtIsdnDirectoryLocalAddr_Object = MibTableColumn
prtIsdnDirectoryLocalAddr = _PrtIsdnDirectoryLocalAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 4),
    _PrtIsdnDirectoryLocalAddr_Type()
)
prtIsdnDirectoryLocalAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    prtIsdnDirectoryLocalAddr.setStatus("current")


class _PrtIsdnDirectoryLocalSubAddr_Type(DisplayString):
    """Custom type prtIsdnDirectoryLocalSubAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 6),
    )


_PrtIsdnDirectoryLocalSubAddr_Type.__name__ = "DisplayString"
_PrtIsdnDirectoryLocalSubAddr_Object = MibTableColumn
prtIsdnDirectoryLocalSubAddr = _PrtIsdnDirectoryLocalSubAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 5),
    _PrtIsdnDirectoryLocalSubAddr_Type()
)
prtIsdnDirectoryLocalSubAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    prtIsdnDirectoryLocalSubAddr.setStatus("current")


class _PrtIsdnDirectoryRemoteAddr_Type(DisplayString):
    """Custom type prtIsdnDirectoryRemoteAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 20),
    )


_PrtIsdnDirectoryRemoteAddr_Type.__name__ = "DisplayString"
_PrtIsdnDirectoryRemoteAddr_Object = MibTableColumn
prtIsdnDirectoryRemoteAddr = _PrtIsdnDirectoryRemoteAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 6),
    _PrtIsdnDirectoryRemoteAddr_Type()
)
prtIsdnDirectoryRemoteAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    prtIsdnDirectoryRemoteAddr.setStatus("current")


class _PrtIsdnDirectoryRemoteSubAddr_Type(DisplayString):
    """Custom type prtIsdnDirectoryRemoteSubAddr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 6),
    )


_PrtIsdnDirectoryRemoteSubAddr_Type.__name__ = "DisplayString"
_PrtIsdnDirectoryRemoteSubAddr_Object = MibTableColumn
prtIsdnDirectoryRemoteSubAddr = _PrtIsdnDirectoryRemoteSubAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 7),
    _PrtIsdnDirectoryRemoteSubAddr_Type()
)
prtIsdnDirectoryRemoteSubAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    prtIsdnDirectoryRemoteSubAddr.setStatus("current")


class _PrtIsdnDirectoryPrtNu_Type(Integer32):
    """Custom type prtIsdnDirectoryPrtNu based on Integer32"""
    defaultValue = 1


_PrtIsdnDirectoryPrtNu_Object = MibTableColumn
prtIsdnDirectoryPrtNu = _PrtIsdnDirectoryPrtNu_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 8),
    _PrtIsdnDirectoryPrtNu_Type()
)
prtIsdnDirectoryPrtNu.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    prtIsdnDirectoryPrtNu.setStatus("current")


class _PrtIsdnDirectoryTeiId_Type(Integer32):
    """Custom type prtIsdnDirectoryTeiId based on Integer32"""
    defaultValue = 1


_PrtIsdnDirectoryTeiId_Object = MibTableColumn
prtIsdnDirectoryTeiId = _PrtIsdnDirectoryTeiId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 9),
    _PrtIsdnDirectoryTeiId_Type()
)
prtIsdnDirectoryTeiId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    prtIsdnDirectoryTeiId.setStatus("current")
_PrtIsdnDirectoryRowStatus_Type = RowStatus
_PrtIsdnDirectoryRowStatus_Object = MibTableColumn
prtIsdnDirectoryRowStatus = _PrtIsdnDirectoryRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 10),
    _PrtIsdnDirectoryRowStatus_Type()
)
prtIsdnDirectoryRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    prtIsdnDirectoryRowStatus.setStatus("current")


class _PrtIsdnDirectoryLocalAddr2_Type(DisplayString):
    """Custom type prtIsdnDirectoryLocalAddr2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 20),
    )


_PrtIsdnDirectoryLocalAddr2_Type.__name__ = "DisplayString"
_PrtIsdnDirectoryLocalAddr2_Object = MibTableColumn
prtIsdnDirectoryLocalAddr2 = _PrtIsdnDirectoryLocalAddr2_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 11),
    _PrtIsdnDirectoryLocalAddr2_Type()
)
prtIsdnDirectoryLocalAddr2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    prtIsdnDirectoryLocalAddr2.setStatus("current")


class _PrtIsdnDirectoryLocalSubAddr2_Type(DisplayString):
    """Custom type prtIsdnDirectoryLocalSubAddr2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 6),
    )


_PrtIsdnDirectoryLocalSubAddr2_Type.__name__ = "DisplayString"
_PrtIsdnDirectoryLocalSubAddr2_Object = MibTableColumn
prtIsdnDirectoryLocalSubAddr2 = _PrtIsdnDirectoryLocalSubAddr2_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 12),
    _PrtIsdnDirectoryLocalSubAddr2_Type()
)
prtIsdnDirectoryLocalSubAddr2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    prtIsdnDirectoryLocalSubAddr2.setStatus("current")


class _PrtIsdnDirectoryRemoteAddr2_Type(DisplayString):
    """Custom type prtIsdnDirectoryRemoteAddr2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(17, 20),
    )


_PrtIsdnDirectoryRemoteAddr2_Type.__name__ = "DisplayString"
_PrtIsdnDirectoryRemoteAddr2_Object = MibTableColumn
prtIsdnDirectoryRemoteAddr2 = _PrtIsdnDirectoryRemoteAddr2_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 13),
    _PrtIsdnDirectoryRemoteAddr2_Type()
)
prtIsdnDirectoryRemoteAddr2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    prtIsdnDirectoryRemoteAddr2.setStatus("current")


class _PrtIsdnDirectoryRemoteSubAddr2_Type(DisplayString):
    """Custom type prtIsdnDirectoryRemoteSubAddr2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 6),
    )


_PrtIsdnDirectoryRemoteSubAddr2_Type.__name__ = "DisplayString"
_PrtIsdnDirectoryRemoteSubAddr2_Object = MibTableColumn
prtIsdnDirectoryRemoteSubAddr2 = _PrtIsdnDirectoryRemoteSubAddr2_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 14),
    _PrtIsdnDirectoryRemoteSubAddr2_Type()
)
prtIsdnDirectoryRemoteSubAddr2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    prtIsdnDirectoryRemoteSubAddr2.setStatus("current")
_PrtLogicalCnfg_ObjectIdentity = ObjectIdentity
prtLogicalCnfg = _PrtLogicalCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17)
)
_PrtLogicalCnfgTable_Object = MibTable
prtLogicalCnfgTable = _PrtLogicalCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1)
)
if mibBuilder.loadTexts:
    prtLogicalCnfgTable.setStatus("current")
_PrtLogicalCnfgEntry_Object = MibTableRow
prtLogicalCnfgEntry = _PrtLogicalCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1, 1)
)
prtLogicalCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtLogicalCnfgIdx"),
    (0, "RAD-MIB", "prtLogicalSltIdx"),
    (0, "RAD-MIB", "prtLogicalPrtIdx"),
)
if mibBuilder.loadTexts:
    prtLogicalCnfgEntry.setStatus("current")


class _PrtLogicalCnfgIdx_Type(Integer32):
    """Custom type prtLogicalCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtLogicalCnfgIdx_Type.__name__ = "Integer32"
_PrtLogicalCnfgIdx_Object = MibTableColumn
prtLogicalCnfgIdx = _PrtLogicalCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1, 1, 1),
    _PrtLogicalCnfgIdx_Type()
)
prtLogicalCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtLogicalCnfgIdx.setStatus("current")


class _PrtLogicalSltIdx_Type(Integer32):
    """Custom type prtLogicalSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtLogicalSltIdx_Type.__name__ = "Integer32"
_PrtLogicalSltIdx_Object = MibTableColumn
prtLogicalSltIdx = _PrtLogicalSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1, 1, 2),
    _PrtLogicalSltIdx_Type()
)
prtLogicalSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtLogicalSltIdx.setStatus("current")
_PrtLogicalPrtIdx_Type = Integer32
_PrtLogicalPrtIdx_Object = MibTableColumn
prtLogicalPrtIdx = _PrtLogicalPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1, 1, 3),
    _PrtLogicalPrtIdx_Type()
)
prtLogicalPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtLogicalPrtIdx.setStatus("current")


class _PrtLogicalConnect_Type(Integer32):
    """Custom type prtLogicalConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtLogicalConnect_Type.__name__ = "Integer32"
_PrtLogicalConnect_Object = MibTableColumn
prtLogicalConnect = _PrtLogicalConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1, 1, 4),
    _PrtLogicalConnect_Type()
)
prtLogicalConnect.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    prtLogicalConnect.setStatus("current")


class _PrtLogicalFunction_Type(Integer32):
    """Custom type prtLogicalFunction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("encapsulator", 3),
          ("huntGroup", 4),
          ("linkSelector", 2),
          ("notApplicable", 1))
    )


_PrtLogicalFunction_Type.__name__ = "Integer32"
_PrtLogicalFunction_Object = MibTableColumn
prtLogicalFunction = _PrtLogicalFunction_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1, 1, 5),
    _PrtLogicalFunction_Type()
)
prtLogicalFunction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    prtLogicalFunction.setStatus("current")
_PrtLogicalRowStatus_Type = RowStatus
_PrtLogicalRowStatus_Object = MibTableColumn
prtLogicalRowStatus = _PrtLogicalRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1, 1, 6),
    _PrtLogicalRowStatus_Type()
)
prtLogicalRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    prtLogicalRowStatus.setStatus("current")
_LinkSelectorCnfgTable_Object = MibTable
linkSelectorCnfgTable = _LinkSelectorCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2)
)
if mibBuilder.loadTexts:
    linkSelectorCnfgTable.setStatus("current")
_LinkSelectorCnfgEntry_Object = MibTableRow
linkSelectorCnfgEntry = _LinkSelectorCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1)
)
linkSelectorCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "linkSelectorCnfgIdx"),
    (0, "RAD-MIB", "linkSelectorSltIdx"),
    (0, "RAD-MIB", "linkSelectorPrtIdx"),
)
if mibBuilder.loadTexts:
    linkSelectorCnfgEntry.setStatus("current")


class _LinkSelectorCnfgIdx_Type(Integer32):
    """Custom type linkSelectorCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_LinkSelectorCnfgIdx_Type.__name__ = "Integer32"
_LinkSelectorCnfgIdx_Object = MibTableColumn
linkSelectorCnfgIdx = _LinkSelectorCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1, 1),
    _LinkSelectorCnfgIdx_Type()
)
linkSelectorCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    linkSelectorCnfgIdx.setStatus("current")


class _LinkSelectorSltIdx_Type(Integer32):
    """Custom type linkSelectorSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_LinkSelectorSltIdx_Type.__name__ = "Integer32"
_LinkSelectorSltIdx_Object = MibTableColumn
linkSelectorSltIdx = _LinkSelectorSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1, 2),
    _LinkSelectorSltIdx_Type()
)
linkSelectorSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    linkSelectorSltIdx.setStatus("current")
_LinkSelectorPrtIdx_Type = Integer32
_LinkSelectorPrtIdx_Object = MibTableColumn
linkSelectorPrtIdx = _LinkSelectorPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1, 3),
    _LinkSelectorPrtIdx_Type()
)
linkSelectorPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    linkSelectorPrtIdx.setStatus("current")


class _LinkSelectorMaxIdleTime_Type(Integer32):
    """Custom type linkSelectorMaxIdleTime based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_LinkSelectorMaxIdleTime_Type.__name__ = "Integer32"
_LinkSelectorMaxIdleTime_Object = MibTableColumn
linkSelectorMaxIdleTime = _LinkSelectorMaxIdleTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1, 4),
    _LinkSelectorMaxIdleTime_Type()
)
linkSelectorMaxIdleTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    linkSelectorMaxIdleTime.setStatus("current")


class _LinkSelectorMode_Type(Integer32):
    """Custom type linkSelectorMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("backup", 2),
          ("bod", 3),
          ("notApplicable", 1))
    )


_LinkSelectorMode_Type.__name__ = "Integer32"
_LinkSelectorMode_Object = MibTableColumn
linkSelectorMode = _LinkSelectorMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1, 5),
    _LinkSelectorMode_Type()
)
linkSelectorMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    linkSelectorMode.setStatus("current")


class _LinkSelectorRevert_Type(Integer32):
    """Custom type linkSelectorRevert based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 2),
          ("manual", 3),
          ("notApplicable", 1))
    )


_LinkSelectorRevert_Type.__name__ = "Integer32"
_LinkSelectorRevert_Object = MibTableColumn
linkSelectorRevert = _LinkSelectorRevert_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1, 6),
    _LinkSelectorRevert_Type()
)
linkSelectorRevert.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    linkSelectorRevert.setStatus("current")


class _LinkSelectorMinBUSession_Type(Integer32):
    """Custom type linkSelectorMinBUSession based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_LinkSelectorMinBUSession_Type.__name__ = "Integer32"
_LinkSelectorMinBUSession_Object = MibTableColumn
linkSelectorMinBUSession = _LinkSelectorMinBUSession_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1, 7),
    _LinkSelectorMinBUSession_Type()
)
linkSelectorMinBUSession.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    linkSelectorMinBUSession.setStatus("current")
_LinkSelectorPLinkTable_Object = MibTable
linkSelectorPLinkTable = _LinkSelectorPLinkTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3)
)
if mibBuilder.loadTexts:
    linkSelectorPLinkTable.setStatus("current")
_LinkSelectorPLinkEntry_Object = MibTableRow
linkSelectorPLinkEntry = _LinkSelectorPLinkEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1)
)
linkSelectorPLinkEntry.setIndexNames(
    (0, "RAD-MIB", "pLinkCnfgIdx"),
    (0, "RAD-MIB", "pLinkSltIdx"),
    (0, "RAD-MIB", "pLinkPrtIdx"),
    (0, "RAD-MIB", "pLinkIdx"),
)
if mibBuilder.loadTexts:
    linkSelectorPLinkEntry.setStatus("current")


class _PLinkCnfgIdx_Type(Integer32):
    """Custom type pLinkCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PLinkCnfgIdx_Type.__name__ = "Integer32"
_PLinkCnfgIdx_Object = MibTableColumn
pLinkCnfgIdx = _PLinkCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 1),
    _PLinkCnfgIdx_Type()
)
pLinkCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pLinkCnfgIdx.setStatus("current")


class _PLinkSltIdx_Type(Integer32):
    """Custom type pLinkSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PLinkSltIdx_Type.__name__ = "Integer32"
_PLinkSltIdx_Object = MibTableColumn
pLinkSltIdx = _PLinkSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 2),
    _PLinkSltIdx_Type()
)
pLinkSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pLinkSltIdx.setStatus("current")


class _PLinkPrtIdx_Type(Integer32):
    """Custom type pLinkPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(200, 250),
    )


_PLinkPrtIdx_Type.__name__ = "Integer32"
_PLinkPrtIdx_Object = MibTableColumn
pLinkPrtIdx = _PLinkPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 3),
    _PLinkPrtIdx_Type()
)
pLinkPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pLinkPrtIdx.setStatus("current")


class _PLinkIdx_Type(Integer32):
    """Custom type pLinkIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_PLinkIdx_Type.__name__ = "Integer32"
_PLinkIdx_Object = MibTableColumn
pLinkIdx = _PLinkIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 4),
    _PLinkIdx_Type()
)
pLinkIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pLinkIdx.setStatus("current")


class _PLinkSlotNu_Type(Integer32):
    """Custom type pLinkSlotNu based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("cl", 3),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("noConnect", 2),
          ("notApplicable", 255))
    )


_PLinkSlotNu_Type.__name__ = "Integer32"
_PLinkSlotNu_Object = MibTableColumn
pLinkSlotNu = _PLinkSlotNu_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 5),
    _PLinkSlotNu_Type()
)
pLinkSlotNu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pLinkSlotNu.setStatus("current")


class _PLinkPortNu_Type(Integer32):
    """Custom type pLinkPortNu based on Integer32"""
    defaultValue = 100


_PLinkPortNu_Object = MibTableColumn
pLinkPortNu = _PLinkPortNu_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 6),
    _PLinkPortNu_Type()
)
pLinkPortNu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pLinkPortNu.setStatus("current")


class _PLinkPrioNu_Type(Integer32):
    """Custom type pLinkPrioNu based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_PLinkPrioNu_Type.__name__ = "Integer32"
_PLinkPrioNu_Object = MibTableColumn
pLinkPrioNu = _PLinkPrioNu_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 7),
    _PLinkPrioNu_Type()
)
pLinkPrioNu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pLinkPrioNu.setStatus("current")


class _PLinkVRate_Type(Integer32):
    """Custom type pLinkVRate based on Integer32"""
    defaultValue = 100

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              100)
        )
    )
    namedValues = NamedValues(
        *(("noRate", 100),
          ("r10x56eq560Kbps", 19),
          ("r10x64eq640Kbps", 20),
          ("r11x56eq616Kbps", 21),
          ("r11x64eq704Kbps", 22),
          ("r12x56eq672Kbps", 23),
          ("r12x64eq768Kbps", 24),
          ("r13x56eq728Kbps", 25),
          ("r13x64eq832Kbps", 26),
          ("r14x56eq784Kbps", 27),
          ("r14x64eq896Kbps", 28),
          ("r15x56eq840Kbps", 29),
          ("r15x64eq960Kbps", 30),
          ("r16x56eq896Kbps", 31),
          ("r16x64eq1024Kbps", 32),
          ("r17x56eq952Kbps", 33),
          ("r17x64eq1088Kbps", 34),
          ("r18x56eq1008Kbps", 35),
          ("r18x64eq1152Kbps", 36),
          ("r19x56eq1064Kbps", 37),
          ("r19x64eq1216Kbps", 38),
          ("r1x56eq56Kbps", 1),
          ("r1x64eq64Kbps", 2),
          ("r20x56eq1120Kbps", 39),
          ("r20x64eq1280Kbps", 40),
          ("r21x56eq1176Kbps", 41),
          ("r21x64eq1344Kbps", 42),
          ("r22x56eq1232Kbps", 43),
          ("r22x64eq1408Kbps", 44),
          ("r23x56eq1288Kbps", 45),
          ("r23x64eq1472Kbps", 46),
          ("r24x56eq1344Kbps", 47),
          ("r24x64eq1536Kbps", 48),
          ("r25x56eq1400Kbps", 49),
          ("r25x64eq1600Kbps", 50),
          ("r26x56eq1456Kbps", 51),
          ("r26x64eq1664Kbps", 52),
          ("r27x56eq1512Kbps", 53),
          ("r27x64eq1728Kbps", 54),
          ("r28x56eq1568Kbps", 55),
          ("r28x64eq1792Kbps", 56),
          ("r29x56eq1624Kbps", 57),
          ("r29x64eq1856Kbps", 58),
          ("r2x56eq112Kbps", 3),
          ("r2x64eq128Kbps", 4),
          ("r30x56eq1680Kbps", 59),
          ("r30x64eq1920Kbps", 60),
          ("r31x56eq1736Kbps", 61),
          ("r31x64eq1984Kbps", 62),
          ("r3x56eq168Kbps", 5),
          ("r3x64eq192Kbps", 6),
          ("r4x56eq224Kbps", 7),
          ("r4x64eq256Kbps", 8),
          ("r5x56eq280Kbps", 9),
          ("r5x64eq320Kbps", 10),
          ("r6x56eq336Kbps", 11),
          ("r6x64eq384Kbps", 12),
          ("r7x56eq392Kbps", 13),
          ("r7x64eq448Kbps", 14),
          ("r8x56eq448Kbps", 15),
          ("r8x64eq512Kbps", 16),
          ("r9x56eq504Kbps", 17),
          ("r9x64eq576Kbps", 18))
    )


_PLinkVRate_Type.__name__ = "Integer32"
_PLinkVRate_Object = MibTableColumn
pLinkVRate = _PLinkVRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 8),
    _PLinkVRate_Type()
)
pLinkVRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pLinkVRate.setStatus("current")
_PrtFrPlusCnfg_ObjectIdentity = ObjectIdentity
prtFrPlusCnfg = _PrtFrPlusCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 18)
)
_PrtFrPlusCnfgTable_Object = MibTable
prtFrPlusCnfgTable = _PrtFrPlusCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 18, 1)
)
if mibBuilder.loadTexts:
    prtFrPlusCnfgTable.setStatus("current")
_PrtFrPlusCnfgEntry_Object = MibTableRow
prtFrPlusCnfgEntry = _PrtFrPlusCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 18, 1, 1)
)
prtFrPlusCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtFrPlusCnfgIdx"),
    (0, "RAD-MIB", "prtFrPlusSltIdx"),
    (0, "RAD-MIB", "prtFrPlusPrtIdx"),
)
if mibBuilder.loadTexts:
    prtFrPlusCnfgEntry.setStatus("current")


class _PrtFrPlusCnfgIdx_Type(Integer32):
    """Custom type prtFrPlusCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtFrPlusCnfgIdx_Type.__name__ = "Integer32"
_PrtFrPlusCnfgIdx_Object = MibTableColumn
prtFrPlusCnfgIdx = _PrtFrPlusCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 18, 1, 1, 1),
    _PrtFrPlusCnfgIdx_Type()
)
prtFrPlusCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrPlusCnfgIdx.setStatus("current")


class _PrtFrPlusSltIdx_Type(Integer32):
    """Custom type prtFrPlusSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtFrPlusSltIdx_Type.__name__ = "Integer32"
_PrtFrPlusSltIdx_Object = MibTableColumn
prtFrPlusSltIdx = _PrtFrPlusSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 18, 1, 1, 2),
    _PrtFrPlusSltIdx_Type()
)
prtFrPlusSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrPlusSltIdx.setStatus("current")
_PrtFrPlusPrtIdx_Type = Integer32
_PrtFrPlusPrtIdx_Object = MibTableColumn
prtFrPlusPrtIdx = _PrtFrPlusPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 18, 1, 1, 3),
    _PrtFrPlusPrtIdx_Type()
)
prtFrPlusPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtFrPlusPrtIdx.setStatus("current")


class _PrtFrPlusNotSegmentedPriorities_Type(OctetString):
    """Custom type prtFrPlusNotSegmentedPriorities based on OctetString"""
    defaultHexValue = "00"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_PrtFrPlusNotSegmentedPriorities_Type.__name__ = "OctetString"
_PrtFrPlusNotSegmentedPriorities_Object = MibTableColumn
prtFrPlusNotSegmentedPriorities = _PrtFrPlusNotSegmentedPriorities_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 18, 1, 1, 4),
    _PrtFrPlusNotSegmentedPriorities_Type()
)
prtFrPlusNotSegmentedPriorities.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtFrPlusNotSegmentedPriorities.setStatus("current")
_PrtMl4Cnfg_ObjectIdentity = ObjectIdentity
prtMl4Cnfg = _PrtMl4Cnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19)
)
_PrtMl4CnfgTable_Object = MibTable
prtMl4CnfgTable = _PrtMl4CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1)
)
if mibBuilder.loadTexts:
    prtMl4CnfgTable.setStatus("current")
_PrtMl4CnfgEntry_Object = MibTableRow
prtMl4CnfgEntry = _PrtMl4CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1)
)
prtMl4CnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtMl4CnfgIdx"),
    (0, "RAD-MIB", "prtMl4SltIdx"),
    (0, "RAD-MIB", "prtMl4PrtIdx"),
)
if mibBuilder.loadTexts:
    prtMl4CnfgEntry.setStatus("current")


class _PrtMl4CnfgIdx_Type(Integer32):
    """Custom type prtMl4CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtMl4CnfgIdx_Type.__name__ = "Integer32"
_PrtMl4CnfgIdx_Object = MibTableColumn
prtMl4CnfgIdx = _PrtMl4CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 1),
    _PrtMl4CnfgIdx_Type()
)
prtMl4CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtMl4CnfgIdx.setStatus("current")


class _PrtMl4SltIdx_Type(Integer32):
    """Custom type prtMl4SltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtMl4SltIdx_Type.__name__ = "Integer32"
_PrtMl4SltIdx_Object = MibTableColumn
prtMl4SltIdx = _PrtMl4SltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 2),
    _PrtMl4SltIdx_Type()
)
prtMl4SltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtMl4SltIdx.setStatus("current")


class _PrtMl4PrtIdx_Type(Integer32):
    """Custom type prtMl4PrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              123,
              124,
              125,
              126,
              127,
              128,
              129,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              147,
              148,
              149,
              150,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              158,
              159,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              181,
              182,
              183,
              184)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("inPrt1", 101),
          ("inPrt10", 110),
          ("inPrt11", 111),
          ("inPrt12", 112),
          ("inPrt13", 113),
          ("inPrt14", 114),
          ("inPrt15", 115),
          ("inPrt16", 116),
          ("inPrt17", 117),
          ("inPrt18", 118),
          ("inPrt19", 119),
          ("inPrt2", 102),
          ("inPrt20", 120),
          ("inPrt21", 121),
          ("inPrt22", 122),
          ("inPrt23", 123),
          ("inPrt24", 124),
          ("inPrt25", 125),
          ("inPrt26", 126),
          ("inPrt27", 127),
          ("inPrt28", 128),
          ("inPrt29", 129),
          ("inPrt3", 103),
          ("inPrt30", 130),
          ("inPrt31", 131),
          ("inPrt32", 132),
          ("inPrt33", 133),
          ("inPrt34", 134),
          ("inPrt35", 135),
          ("inPrt36", 136),
          ("inPrt37", 137),
          ("inPrt38", 138),
          ("inPrt39", 139),
          ("inPrt4", 104),
          ("inPrt40", 140),
          ("inPrt41", 141),
          ("inPrt42", 142),
          ("inPrt43", 143),
          ("inPrt44", 144),
          ("inPrt45", 145),
          ("inPrt46", 146),
          ("inPrt47", 147),
          ("inPrt48", 148),
          ("inPrt49", 149),
          ("inPrt5", 105),
          ("inPrt50", 150),
          ("inPrt51", 151),
          ("inPrt52", 152),
          ("inPrt53", 153),
          ("inPrt54", 154),
          ("inPrt55", 155),
          ("inPrt56", 156),
          ("inPrt57", 157),
          ("inPrt58", 158),
          ("inPrt59", 159),
          ("inPrt6", 106),
          ("inPrt60", 160),
          ("inPrt61", 161),
          ("inPrt62", 162),
          ("inPrt63", 163),
          ("inPrt64", 164),
          ("inPrt65", 165),
          ("inPrt66", 166),
          ("inPrt67", 167),
          ("inPrt68", 168),
          ("inPrt69", 169),
          ("inPrt7", 107),
          ("inPrt70", 170),
          ("inPrt71", 171),
          ("inPrt72", 172),
          ("inPrt73", 173),
          ("inPrt74", 174),
          ("inPrt75", 175),
          ("inPrt76", 176),
          ("inPrt77", 177),
          ("inPrt78", 178),
          ("inPrt79", 179),
          ("inPrt8", 108),
          ("inPrt80", 180),
          ("inPrt81", 181),
          ("inPrt82", 182),
          ("inPrt83", 183),
          ("inPrt84", 184),
          ("inPrt9", 109))
    )


_PrtMl4PrtIdx_Type.__name__ = "Integer32"
_PrtMl4PrtIdx_Object = MibTableColumn
prtMl4PrtIdx = _PrtMl4PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 3),
    _PrtMl4PrtIdx_Type()
)
prtMl4PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtMl4PrtIdx.setStatus("current")


class _PrtMl4SigProfile_Type(Integer32):
    """Custom type prtMl4SigProfile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("none", 2),
          ("notApplicable", 1),
          ("p1", 3),
          ("p2", 4),
          ("p3", 5),
          ("p4", 6),
          ("p5", 7),
          ("perTS", 8))
    )


_PrtMl4SigProfile_Type.__name__ = "Integer32"
_PrtMl4SigProfile_Object = MibTableColumn
prtMl4SigProfile = _PrtMl4SigProfile_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 4),
    _PrtMl4SigProfile_Type()
)
prtMl4SigProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4SigProfile.setStatus("current")


class _PrtMl4CGA_Type(Integer32):
    """Custom type prtMl4CGA based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("full", 3),
          ("none", 1),
          ("trans", 2))
    )


_PrtMl4CGA_Type.__name__ = "Integer32"
_PrtMl4CGA_Object = MibTableColumn
prtMl4CGA = _PrtMl4CGA_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 5),
    _PrtMl4CGA_Type()
)
prtMl4CGA.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4CGA.setStatus("current")


class _PrtMl4Oos_Type(Integer32):
    """Custom type prtMl4Oos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("busyIdle", 5),
          ("forcedBusy", 4),
          ("forcedIdle", 3),
          ("idleBusy", 6),
          ("notSupported", 2))
    )


_PrtMl4Oos_Type.__name__ = "Integer32"
_PrtMl4Oos_Object = MibTableColumn
prtMl4Oos = _PrtMl4Oos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 6),
    _PrtMl4Oos_Type()
)
prtMl4Oos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4Oos.setStatus("current")


class _PrtMl4VoiceOos_Type(OctetString):
    """Custom type prtMl4VoiceOos based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_PrtMl4VoiceOos_Type.__name__ = "OctetString"
_PrtMl4VoiceOos_Object = MibTableColumn
prtMl4VoiceOos = _PrtMl4VoiceOos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 7),
    _PrtMl4VoiceOos_Type()
)
prtMl4VoiceOos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4VoiceOos.setStatus("current")


class _PrtMl4DataOos_Type(OctetString):
    """Custom type prtMl4DataOos based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_PrtMl4DataOos_Type.__name__ = "OctetString"
_PrtMl4DataOos_Object = MibTableColumn
prtMl4DataOos = _PrtMl4DataOos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 8),
    _PrtMl4DataOos_Type()
)
prtMl4DataOos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4DataOos.setStatus("current")


class _PrtMl4Service_Type(Integer32):
    """Custom type prtMl4Service based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("leasedLine", 2),
          ("notApplicable", 1),
          ("v51", 3),
          ("v52Master", 4),
          ("v52Slave", 5))
    )


_PrtMl4Service_Type.__name__ = "Integer32"
_PrtMl4Service_Object = MibTableColumn
prtMl4Service = _PrtMl4Service_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 9),
    _PrtMl4Service_Type()
)
prtMl4Service.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4Service.setStatus("current")
_PrtMl4IpAddress_Type = IpAddress
_PrtMl4IpAddress_Object = MibTableColumn
prtMl4IpAddress = _PrtMl4IpAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 10),
    _PrtMl4IpAddress_Type()
)
prtMl4IpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4IpAddress.setStatus("current")
_PrtMl4IpMask_Type = IpAddress
_PrtMl4IpMask_Object = MibTableColumn
prtMl4IpMask = _PrtMl4IpMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 11),
    _PrtMl4IpMask_Type()
)
prtMl4IpMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4IpMask.setStatus("current")


class _PrtMl4SignalingMode_Type(Integer32):
    """Custom type prtMl4SignalingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("cas", 2),
          ("ccs", 3),
          ("notApplicable", 1),
          ("other", 5),
          ("robbedBit", 4))
    )


_PrtMl4SignalingMode_Type.__name__ = "Integer32"
_PrtMl4SignalingMode_Object = MibTableColumn
prtMl4SignalingMode = _PrtMl4SignalingMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 12),
    _PrtMl4SignalingMode_Type()
)
prtMl4SignalingMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4SignalingMode.setStatus("current")


class _PrtMl4EchoCanceler_Type(Integer32):
    """Custom type prtMl4EchoCanceler based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_PrtMl4EchoCanceler_Type.__name__ = "Integer32"
_PrtMl4EchoCanceler_Object = MibTableColumn
prtMl4EchoCanceler = _PrtMl4EchoCanceler_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 13),
    _PrtMl4EchoCanceler_Type()
)
prtMl4EchoCanceler.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4EchoCanceler.setStatus("current")


class _PrtMl4OosErrorSource_Type(Integer32):
    """Custom type prtMl4OosErrorSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bpv", 4),
          ("framing", 3),
          ("none", 2),
          ("notApplicable", 1))
    )


_PrtMl4OosErrorSource_Type.__name__ = "Integer32"
_PrtMl4OosErrorSource_Object = MibTableColumn
prtMl4OosErrorSource = _PrtMl4OosErrorSource_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 14),
    _PrtMl4OosErrorSource_Type()
)
prtMl4OosErrorSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4OosErrorSource.setStatus("current")


class _PrtMl4OosEntryThreshold_Type(Integer32):
    """Custom type prtMl4OosEntryThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 999),
    )


_PrtMl4OosEntryThreshold_Type.__name__ = "Integer32"
_PrtMl4OosEntryThreshold_Object = MibTableColumn
prtMl4OosEntryThreshold = _PrtMl4OosEntryThreshold_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 15),
    _PrtMl4OosEntryThreshold_Type()
)
prtMl4OosEntryThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4OosEntryThreshold.setStatus("current")


class _PrtMl4OosExitThreshold_Type(Integer32):
    """Custom type prtMl4OosExitThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 99),
    )


_PrtMl4OosExitThreshold_Type.__name__ = "Integer32"
_PrtMl4OosExitThreshold_Object = MibTableColumn
prtMl4OosExitThreshold = _PrtMl4OosExitThreshold_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 16),
    _PrtMl4OosExitThreshold_Type()
)
prtMl4OosExitThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4OosExitThreshold.setStatus("current")


class _PrtMl4LogicalLinkId_Type(Integer32):
    """Custom type prtMl4LogicalLinkId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 257),
    )


_PrtMl4LogicalLinkId_Type.__name__ = "Integer32"
_PrtMl4LogicalLinkId_Object = MibTableColumn
prtMl4LogicalLinkId = _PrtMl4LogicalLinkId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 17),
    _PrtMl4LogicalLinkId_Type()
)
prtMl4LogicalLinkId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4LogicalLinkId.setStatus("current")


class _PrtMl4DedicatedTs_Type(Integer32):
    """Custom type prtMl4DedicatedTs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtMl4DedicatedTs_Type.__name__ = "Integer32"
_PrtMl4DedicatedTs_Object = MibTableColumn
prtMl4DedicatedTs = _PrtMl4DedicatedTs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 18),
    _PrtMl4DedicatedTs_Type()
)
prtMl4DedicatedTs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4DedicatedTs.setStatus("current")


class _PrtMl4RemCrc_Type(Integer32):
    """Custom type prtMl4RemCrc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtMl4RemCrc_Type.__name__ = "Integer32"
_PrtMl4RemCrc_Object = MibTableColumn
prtMl4RemCrc = _PrtMl4RemCrc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 19),
    _PrtMl4RemCrc_Type()
)
prtMl4RemCrc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4RemCrc.setStatus("current")


class _PrtMl4CrossConnectLevel_Type(Integer32):
    """Custom type prtMl4CrossConnectLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ds0", 2),
          ("ds1", 3),
          ("notApplicable", 1))
    )


_PrtMl4CrossConnectLevel_Type.__name__ = "Integer32"
_PrtMl4CrossConnectLevel_Object = MibTableColumn
prtMl4CrossConnectLevel = _PrtMl4CrossConnectLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 20),
    _PrtMl4CrossConnectLevel_Type()
)
prtMl4CrossConnectLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4CrossConnectLevel.setStatus("current")


class _PrtMl4PppEchoFailDetection_Type(Integer32):
    """Custom type prtMl4PppEchoFailDetection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_PrtMl4PppEchoFailDetection_Type.__name__ = "Integer32"
_PrtMl4PppEchoFailDetection_Object = MibTableColumn
prtMl4PppEchoFailDetection = _PrtMl4PppEchoFailDetection_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 21),
    _PrtMl4PppEchoFailDetection_Type()
)
prtMl4PppEchoFailDetection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMl4PppEchoFailDetection.setStatus("current")
_PrtAcmCnfg_ObjectIdentity = ObjectIdentity
prtAcmCnfg = _PrtAcmCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20)
)
_PrtAcmCnfgTable_Object = MibTable
prtAcmCnfgTable = _PrtAcmCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1)
)
if mibBuilder.loadTexts:
    prtAcmCnfgTable.setStatus("current")
_PrtAcmCnfgEntry_Object = MibTableRow
prtAcmCnfgEntry = _PrtAcmCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1, 1)
)
prtAcmCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtAcmCnfgIdx"),
    (0, "RAD-MIB", "prtAcmSltIdx"),
    (0, "RAD-MIB", "prtAcmPrtIdx"),
)
if mibBuilder.loadTexts:
    prtAcmCnfgEntry.setStatus("current")


class _PrtAcmCnfgIdx_Type(Integer32):
    """Custom type prtAcmCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtAcmCnfgIdx_Type.__name__ = "Integer32"
_PrtAcmCnfgIdx_Object = MibTableColumn
prtAcmCnfgIdx = _PrtAcmCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1, 1, 1),
    _PrtAcmCnfgIdx_Type()
)
prtAcmCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAcmCnfgIdx.setStatus("current")


class _PrtAcmSltIdx_Type(Integer32):
    """Custom type prtAcmSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_PrtAcmSltIdx_Type.__name__ = "Integer32"
_PrtAcmSltIdx_Object = MibTableColumn
prtAcmSltIdx = _PrtAcmSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1, 1, 2),
    _PrtAcmSltIdx_Type()
)
prtAcmSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAcmSltIdx.setStatus("current")


class _PrtAcmPrtIdx_Type(Integer32):
    """Custom type prtAcmPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt10", 10),
          ("exPrt11", 11),
          ("exPrt12", 12),
          ("exPrt2", 2),
          ("exPrt3", 3),
          ("exPrt4", 4),
          ("exPrt5", 5),
          ("exPrt6", 6),
          ("exPrt7", 7),
          ("exPrt8", 8),
          ("exPrt9", 9))
    )


_PrtAcmPrtIdx_Type.__name__ = "Integer32"
_PrtAcmPrtIdx_Object = MibTableColumn
prtAcmPrtIdx = _PrtAcmPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1, 1, 3),
    _PrtAcmPrtIdx_Type()
)
prtAcmPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAcmPrtIdx.setStatus("current")


class _PrtAcmConnect_Type(Integer32):
    """Custom type prtAcmConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtAcmConnect_Type.__name__ = "Integer32"
_PrtAcmConnect_Object = MibTableColumn
prtAcmConnect = _PrtAcmConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1, 1, 4),
    _PrtAcmConnect_Type()
)
prtAcmConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtAcmConnect.setStatus("current")


class _PrtAcmActiveState_Type(Integer32):
    """Custom type prtAcmActiveState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("high", 3),
          ("low", 2))
    )


_PrtAcmActiveState_Type.__name__ = "Integer32"
_PrtAcmActiveState_Object = MibTableColumn
prtAcmActiveState = _PrtAcmActiveState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1, 1, 5),
    _PrtAcmActiveState_Type()
)
prtAcmActiveState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtAcmActiveState.setStatus("current")


class _PrtAcmAlrString_Type(DisplayString):
    """Custom type prtAcmAlrString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 35),
    )


_PrtAcmAlrString_Type.__name__ = "DisplayString"
_PrtAcmAlrString_Object = MibTableColumn
prtAcmAlrString = _PrtAcmAlrString_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1, 1, 6),
    _PrtAcmAlrString_Type()
)
prtAcmAlrString.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtAcmAlrString.setStatus("current")
_PrtE2Cnfg_ObjectIdentity = ObjectIdentity
prtE2Cnfg = _PrtE2Cnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 21)
)
_PrtE2CnfgTable_Object = MibTable
prtE2CnfgTable = _PrtE2CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 21, 1)
)
if mibBuilder.loadTexts:
    prtE2CnfgTable.setStatus("current")
_PrtE2CnfgEntry_Object = MibTableRow
prtE2CnfgEntry = _PrtE2CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 21, 1, 1)
)
prtE2CnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtE2CnfgIdx"),
    (0, "RAD-MIB", "prtE2SltIdx"),
    (0, "RAD-MIB", "prtE2PrtIdx"),
)
if mibBuilder.loadTexts:
    prtE2CnfgEntry.setStatus("current")


class _PrtE2CnfgIdx_Type(Integer32):
    """Custom type prtE2CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtE2CnfgIdx_Type.__name__ = "Integer32"
_PrtE2CnfgIdx_Object = MibTableColumn
prtE2CnfgIdx = _PrtE2CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 21, 1, 1, 1),
    _PrtE2CnfgIdx_Type()
)
prtE2CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtE2CnfgIdx.setStatus("current")


class _PrtE2SltIdx_Type(Integer32):
    """Custom type prtE2SltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13))
    )


_PrtE2SltIdx_Type.__name__ = "Integer32"
_PrtE2SltIdx_Object = MibTableColumn
prtE2SltIdx = _PrtE2SltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 21, 1, 1, 2),
    _PrtE2SltIdx_Type()
)
prtE2SltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtE2SltIdx.setStatus("current")


class _PrtE2PrtIdx_Type(Integer32):
    """Custom type prtE2PrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("exPrt1", 1),
          ("exPrt2", 2))
    )


_PrtE2PrtIdx_Type.__name__ = "Integer32"
_PrtE2PrtIdx_Object = MibTableColumn
prtE2PrtIdx = _PrtE2PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 21, 1, 1, 3),
    _PrtE2PrtIdx_Type()
)
prtE2PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtE2PrtIdx.setStatus("current")


class _PrtE2Connect_Type(Integer32):
    """Custom type prtE2Connect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtE2Connect_Type.__name__ = "Integer32"
_PrtE2Connect_Object = MibTableColumn
prtE2Connect = _PrtE2Connect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 21, 1, 1, 4),
    _PrtE2Connect_Type()
)
prtE2Connect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtE2Connect.setStatus("current")


class _PrtE2MngOnNationalBit_Type(Integer32):
    """Custom type prtE2MngOnNationalBit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtE2MngOnNationalBit_Type.__name__ = "Integer32"
_PrtE2MngOnNationalBit_Object = MibTableColumn
prtE2MngOnNationalBit = _PrtE2MngOnNationalBit_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 21, 1, 1, 5),
    _PrtE2MngOnNationalBit_Type()
)
prtE2MngOnNationalBit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtE2MngOnNationalBit.setStatus("current")
_PrtLanWanCnfg_ObjectIdentity = ObjectIdentity
prtLanWanCnfg = _PrtLanWanCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 22)
)
_PrtLanWanCnfgTable_Object = MibTable
prtLanWanCnfgTable = _PrtLanWanCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 22, 1)
)
if mibBuilder.loadTexts:
    prtLanWanCnfgTable.setStatus("current")
_PrtLanWanCnfgEntry_Object = MibTableRow
prtLanWanCnfgEntry = _PrtLanWanCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 22, 1, 1)
)
prtLanWanCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtLanWanCnfgIdx"),
    (0, "RAD-MIB", "prtLanWanSltIdx"),
    (0, "RAD-MIB", "prtLanWanPrtIdx"),
)
if mibBuilder.loadTexts:
    prtLanWanCnfgEntry.setStatus("current")


class _PrtLanWanCnfgIdx_Type(Integer32):
    """Custom type prtLanWanCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtLanWanCnfgIdx_Type.__name__ = "Integer32"
_PrtLanWanCnfgIdx_Object = MibTableColumn
prtLanWanCnfgIdx = _PrtLanWanCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 22, 1, 1, 1),
    _PrtLanWanCnfgIdx_Type()
)
prtLanWanCnfgIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    prtLanWanCnfgIdx.setStatus("current")


class _PrtLanWanSltIdx_Type(Integer32):
    """Custom type prtLanWanSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 1))
    )


_PrtLanWanSltIdx_Type.__name__ = "Integer32"
_PrtLanWanSltIdx_Object = MibTableColumn
prtLanWanSltIdx = _PrtLanWanSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 22, 1, 1, 2),
    _PrtLanWanSltIdx_Type()
)
prtLanWanSltIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    prtLanWanSltIdx.setStatus("current")
_PrtLanWanPrtIdx_Type = Integer32
_PrtLanWanPrtIdx_Object = MibTableColumn
prtLanWanPrtIdx = _PrtLanWanPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 22, 1, 1, 3),
    _PrtLanWanPrtIdx_Type()
)
prtLanWanPrtIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    prtLanWanPrtIdx.setStatus("current")


class _PrtLanWanMode_Type(Integer32):
    """Custom type prtLanWanMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bridge", 2),
          ("bridgeAndStp", 3),
          ("layer3SubnetSwitch", 4),
          ("notApplicable", 1))
    )


_PrtLanWanMode_Type.__name__ = "Integer32"
_PrtLanWanMode_Object = MibTableColumn
prtLanWanMode = _PrtLanWanMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 22, 1, 1, 4),
    _PrtLanWanMode_Type()
)
prtLanWanMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtLanWanMode.setStatus("current")
_PrtLanWanDestIf_Type = Integer32
_PrtLanWanDestIf_Object = MibTableColumn
prtLanWanDestIf = _PrtLanWanDestIf_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 22, 1, 1, 5),
    _PrtLanWanDestIf_Type()
)
prtLanWanDestIf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtLanWanDestIf.setStatus("current")


class _PrtLanWanEgressVlanMode_Type(Integer32):
    """Custom type prtLanWanEgressVlanMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("doubleTag", 4),
          ("notApplicable", 1),
          ("tag", 3),
          ("unmodified", 2),
          ("untag", 5))
    )


_PrtLanWanEgressVlanMode_Type.__name__ = "Integer32"
_PrtLanWanEgressVlanMode_Object = MibTableColumn
prtLanWanEgressVlanMode = _PrtLanWanEgressVlanMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 22, 1, 1, 6),
    _PrtLanWanEgressVlanMode_Type()
)
prtLanWanEgressVlanMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtLanWanEgressVlanMode.setStatus("current")


class _PrtLanWanL2Protocol_Type(Integer32):
    """Custom type prtLanWanL2Protocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("hdlc", 4),
          ("mlppp", 6),
          ("none", 2),
          ("notApplicable", 1),
          ("ppp", 3),
          ("pppoHdlc", 5))
    )


_PrtLanWanL2Protocol_Type.__name__ = "Integer32"
_PrtLanWanL2Protocol_Object = MibTableColumn
prtLanWanL2Protocol = _PrtLanWanL2Protocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 22, 1, 1, 7),
    _PrtLanWanL2Protocol_Type()
)
prtLanWanL2Protocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtLanWanL2Protocol.setStatus("current")


class _PrtLanWanStpPriority_Type(Integer32):
    """Custom type prtLanWanStpPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_PrtLanWanStpPriority_Type.__name__ = "Integer32"
_PrtLanWanStpPriority_Object = MibTableColumn
prtLanWanStpPriority = _PrtLanWanStpPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 22, 1, 1, 8),
    _PrtLanWanStpPriority_Type()
)
prtLanWanStpPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtLanWanStpPriority.setStatus("current")


class _PrtLanWanStpCost_Type(Integer32):
    """Custom type prtLanWanStpCost based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_PrtLanWanStpCost_Type.__name__ = "Integer32"
_PrtLanWanStpCost_Object = MibTableColumn
prtLanWanStpCost = _PrtLanWanStpCost_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 22, 1, 1, 9),
    _PrtLanWanStpCost_Type()
)
prtLanWanStpCost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtLanWanStpCost.setStatus("current")


class _PrtLanWanToLanVlanMode_Type(Integer32):
    """Custom type prtLanWanToLanVlanMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("doubleTag", 4),
          ("notApplicable", 1),
          ("tag", 3),
          ("unmodified", 2),
          ("untag", 5))
    )


_PrtLanWanToLanVlanMode_Type.__name__ = "Integer32"
_PrtLanWanToLanVlanMode_Object = MibTableColumn
prtLanWanToLanVlanMode = _PrtLanWanToLanVlanMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 22, 1, 1, 10),
    _PrtLanWanToLanVlanMode_Type()
)
prtLanWanToLanVlanMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtLanWanToLanVlanMode.setStatus("current")


class _PrtLanWanVlanId_Type(Integer32):
    """Custom type prtLanWanVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_PrtLanWanVlanId_Type.__name__ = "Integer32"
_PrtLanWanVlanId_Object = MibTableColumn
prtLanWanVlanId = _PrtLanWanVlanId_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 22, 1, 1, 11),
    _PrtLanWanVlanId_Type()
)
prtLanWanVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtLanWanVlanId.setStatus("current")
_PrtLanWanVlanPriority_Type = Integer32
_PrtLanWanVlanPriority_Object = MibTableColumn
prtLanWanVlanPriority = _PrtLanWanVlanPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 22, 1, 1, 12),
    _PrtLanWanVlanPriority_Type()
)
prtLanWanVlanPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtLanWanVlanPriority.setStatus("current")
_PrtLanWanMtu_Type = Integer32
_PrtLanWanMtu_Object = MibTableColumn
prtLanWanMtu = _PrtLanWanMtu_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 22, 1, 1, 13),
    _PrtLanWanMtu_Type()
)
prtLanWanMtu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtLanWanMtu.setStatus("current")


class _PrtLanWanVlanType_Type(Integer32):
    """Custom type prtLanWanVlanType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ieee802dot1q", 3),
          ("ieee802dot1qTaggedOnly", 4),
          ("notApplicable", 1),
          ("portBasedVlan", 2))
    )


_PrtLanWanVlanType_Type.__name__ = "Integer32"
_PrtLanWanVlanType_Object = MibTableColumn
prtLanWanVlanType = _PrtLanWanVlanType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 22, 1, 1, 14),
    _PrtLanWanVlanType_Type()
)
prtLanWanVlanType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtLanWanVlanType.setStatus("current")
_DacsMux_ObjectIdentity = ObjectIdentity
dacsMux = _DacsMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3)
)
_DacsMuxEvents_ObjectIdentity = ObjectIdentity
dacsMuxEvents = _DacsMuxEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 0)
)
if mibBuilder.loadTexts:
    dacsMuxEvents.setStatus("current")
_SystemDacsMux_ObjectIdentity = ObjectIdentity
systemDacsMux = _SystemDacsMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1)
)
_SysSa_ObjectIdentity = ObjectIdentity
sysSa = _SysSa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 1)
)
_SysSaSwchStatus_Type = Integer32
_SysSaSwchStatus_Object = MibScalar
sysSaSwchStatus = _SysSaSwchStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 1, 1),
    _SysSaSwchStatus_Type()
)
sysSaSwchStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSaSwchStatus.setStatus("current")


class _SysSaSwRevision_Type(DisplayString):
    """Custom type sysSaSwRevision based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SysSaSwRevision_Type.__name__ = "DisplayString"
_SysSaSwRevision_Object = MibScalar
sysSaSwRevision = _SysSaSwRevision_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 1, 2),
    _SysSaSwRevision_Type()
)
sysSaSwRevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSaSwRevision.setStatus("current")


class _SysSaHwVersion_Type(DisplayString):
    """Custom type sysSaHwVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SysSaHwVersion_Type.__name__ = "DisplayString"
_SysSaHwVersion_Object = MibScalar
sysSaHwVersion = _SysSaHwVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 1, 3),
    _SysSaHwVersion_Type()
)
sysSaHwVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSaHwVersion.setStatus("current")
_SysSaPorts_Type = Integer32
_SysSaPorts_Object = MibScalar
sysSaPorts = _SysSaPorts_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 1, 4),
    _SysSaPorts_Type()
)
sysSaPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSaPorts.setStatus("current")
_SysSaReadSwch_Type = Integer32
_SysSaReadSwch_Object = MibScalar
sysSaReadSwch = _SysSaReadSwch_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 1, 5),
    _SysSaReadSwch_Type()
)
sysSaReadSwch.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSaReadSwch.setStatus("current")


class _SysSaBuActivePort_Type(Integer32):
    """Custom type sysSaBuActivePort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("e1T1orSerial", 2),
          ("eth", 3),
          ("fourth", 7),
          ("notApplicable", 1),
          ("primary", 4),
          ("secondary", 5),
          ("third", 6))
    )


_SysSaBuActivePort_Type.__name__ = "Integer32"
_SysSaBuActivePort_Object = MibScalar
sysSaBuActivePort = _SysSaBuActivePort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 1, 6),
    _SysSaBuActivePort_Type()
)
sysSaBuActivePort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSaBuActivePort.setStatus("current")
_SysHub_ObjectIdentity = ObjectIdentity
sysHub = _SysHub_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2)
)
_SysChas_ObjectIdentity = ObjectIdentity
sysChas = _SysChas_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 1)
)
_ChassTotalNoOfSlt_Type = Integer32
_ChassTotalNoOfSlt_Object = MibScalar
chassTotalNoOfSlt = _ChassTotalNoOfSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 1, 1),
    _ChassTotalNoOfSlt_Type()
)
chassTotalNoOfSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassTotalNoOfSlt.setStatus("current")
_ChassTotalNoOfIoSlt_Type = Integer32
_ChassTotalNoOfIoSlt_Object = MibScalar
chassTotalNoOfIoSlt = _ChassTotalNoOfIoSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 1, 2),
    _ChassTotalNoOfIoSlt_Type()
)
chassTotalNoOfIoSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassTotalNoOfIoSlt.setStatus("current")
_ChassTotalNoOfPsSlt_Type = Integer32
_ChassTotalNoOfPsSlt_Object = MibScalar
chassTotalNoOfPsSlt = _ChassTotalNoOfPsSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 1, 3),
    _ChassTotalNoOfPsSlt_Type()
)
chassTotalNoOfPsSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassTotalNoOfPsSlt.setStatus("current")
_ChassTotalNoOfClSlt_Type = Integer32
_ChassTotalNoOfClSlt_Object = MibScalar
chassTotalNoOfClSlt = _ChassTotalNoOfClSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 1, 4),
    _ChassTotalNoOfClSlt_Type()
)
chassTotalNoOfClSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassTotalNoOfClSlt.setStatus("current")
_ChassTotalNoOfMlSlt_Type = Integer32
_ChassTotalNoOfMlSlt_Object = MibScalar
chassTotalNoOfMlSlt = _ChassTotalNoOfMlSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 1, 5),
    _ChassTotalNoOfMlSlt_Type()
)
chassTotalNoOfMlSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    chassTotalNoOfMlSlt.setStatus("current")
_SysDcl_ObjectIdentity = ObjectIdentity
sysDcl = _SysDcl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2)
)
_SysDclTable_Object = MibTable
sysDclTable = _SysDclTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1)
)
if mibBuilder.loadTexts:
    sysDclTable.setStatus("current")
_SysDclEntry_Object = MibTableRow
sysDclEntry = _SysDclEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1, 1)
)
sysDclEntry.setIndexNames(
    (0, "RAD-MIB", "sysDclCnfgIdx"),
)
if mibBuilder.loadTexts:
    sysDclEntry.setStatus("current")


class _SysDclCnfgIdx_Type(Integer32):
    """Custom type sysDclCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SysDclCnfgIdx_Type.__name__ = "Integer32"
_SysDclCnfgIdx_Object = MibTableColumn
sysDclCnfgIdx = _SysDclCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1, 1, 1),
    _SysDclCnfgIdx_Type()
)
sysDclCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysDclCnfgIdx.setStatus("current")


class _SysDclRedundancy_Type(Integer32):
    """Custom type sysDclRedundancy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysDclRedundancy_Type.__name__ = "Integer32"
_SysDclRedundancy_Object = MibTableColumn
sysDclRedundancy = _SysDclRedundancy_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1, 1, 2),
    _SysDclRedundancy_Type()
)
sysDclRedundancy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDclRedundancy.setStatus("current")


class _SysDclActiveCl_Type(Integer32):
    """Custom type sysDclActiveCl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("dclA", 2),
          ("dclB", 3))
    )


_SysDclActiveCl_Type.__name__ = "Integer32"
_SysDclActiveCl_Object = MibTableColumn
sysDclActiveCl = _SysDclActiveCl_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1, 1, 3),
    _SysDclActiveCl_Type()
)
sysDclActiveCl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDclActiveCl.setStatus("current")
_SysDclFlipDelay_Type = Integer32
_SysDclFlipDelay_Object = MibTableColumn
sysDclFlipDelay = _SysDclFlipDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1, 1, 4),
    _SysDclFlipDelay_Type()
)
sysDclFlipDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDclFlipDelay.setStatus("current")


class _SysDclFlipUponStnClk_Type(Integer32):
    """Custom type sysDclFlipUponStnClk based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_SysDclFlipUponStnClk_Type.__name__ = "Integer32"
_SysDclFlipUponStnClk_Object = MibTableColumn
sysDclFlipUponStnClk = _SysDclFlipUponStnClk_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1, 1, 5),
    _SysDclFlipUponStnClk_Type()
)
sysDclFlipUponStnClk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDclFlipUponStnClk.setStatus("current")
_SysDclChFailThreshold_Type = Integer32
_SysDclChFailThreshold_Object = MibTableColumn
sysDclChFailThreshold = _SysDclChFailThreshold_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1, 1, 6),
    _SysDclChFailThreshold_Type()
)
sysDclChFailThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDclChFailThreshold.setStatus("current")
_SysDclChPriority_Type = OctetString
_SysDclChPriority_Object = MibTableColumn
sysDclChPriority = _SysDclChPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1, 1, 7),
    _SysDclChPriority_Type()
)
sysDclChPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDclChPriority.setStatus("current")


class _SysDclConfigDownloadSrc_Type(Integer32):
    """Custom type sysDclConfigDownloadSrc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dclA", 2),
          ("dclB", 3),
          ("off", 1))
    )


_SysDclConfigDownloadSrc_Type.__name__ = "Integer32"
_SysDclConfigDownloadSrc_Object = MibTableColumn
sysDclConfigDownloadSrc = _SysDclConfigDownloadSrc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1, 1, 8),
    _SysDclConfigDownloadSrc_Type()
)
sysDclConfigDownloadSrc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDclConfigDownloadSrc.setStatus("current")


class _SysDclSwDownloadSrc_Type(Integer32):
    """Custom type sysDclSwDownloadSrc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dclA", 2),
          ("dclB", 3),
          ("off", 1))
    )


_SysDclSwDownloadSrc_Type.__name__ = "Integer32"
_SysDclSwDownloadSrc_Object = MibTableColumn
sysDclSwDownloadSrc = _SysDclSwDownloadSrc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1, 1, 9),
    _SysDclSwDownloadSrc_Type()
)
sysDclSwDownloadSrc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDclSwDownloadSrc.setStatus("current")


class _SysDclRedundancyStatus_Type(Bits):
    """Custom type sysDclRedundancyStatus based on Bits"""
    namedValues = NamedValues(
        *(("cardAAbsent", 2),
          ("cardBAbsent", 3),
          ("cnfgMismatch", 0),
          ("cnfgUpdate", 6),
          ("hwMismatch", 5),
          ("lossOfCommunication", 4),
          ("swMismatch", 1),
          ("swUpdate", 7))
    )

_SysDclRedundancyStatus_Type.__name__ = "Bits"
_SysDclRedundancyStatus_Object = MibTableColumn
sysDclRedundancyStatus = _SysDclRedundancyStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1, 1, 10),
    _SysDclRedundancyStatus_Type()
)
sysDclRedundancyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysDclRedundancyStatus.setStatus("current")


class _SysDclOnline_Type(Integer32):
    """Custom type sysDclOnline based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dclA", 1),
          ("dclB", 2))
    )


_SysDclOnline_Type.__name__ = "Integer32"
_SysDclOnline_Object = MibScalar
sysDclOnline = _SysDclOnline_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 2),
    _SysDclOnline_Type()
)
sysDclOnline.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysDclOnline.setStatus("current")
_SysDclCopyDbTable_Object = MibTable
sysDclCopyDbTable = _SysDclCopyDbTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 3)
)
if mibBuilder.loadTexts:
    sysDclCopyDbTable.setStatus("current")
_SysDclCopyDbEntry_Object = MibTableRow
sysDclCopyDbEntry = _SysDclCopyDbEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 3, 1)
)
sysDclCopyDbEntry.setIndexNames(
    (0, "RAD-MIB", "sysDclCopyDbIdx"),
)
if mibBuilder.loadTexts:
    sysDclCopyDbEntry.setStatus("current")


class _SysDclCopyDbIdx_Type(Integer32):
    """Custom type sysDclCopyDbIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SysDclCopyDbIdx_Type.__name__ = "Integer32"
_SysDclCopyDbIdx_Object = MibTableColumn
sysDclCopyDbIdx = _SysDclCopyDbIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 3, 1, 1),
    _SysDclCopyDbIdx_Type()
)
sysDclCopyDbIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysDclCopyDbIdx.setStatus("current")


class _SysDclCopyDbCmd_Type(Integer32):
    """Custom type sysDclCopyDbCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysDclCopyDbCmd_Type.__name__ = "Integer32"
_SysDclCopyDbCmd_Object = MibTableColumn
sysDclCopyDbCmd = _SysDclCopyDbCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 3, 1, 2),
    _SysDclCopyDbCmd_Type()
)
sysDclCopyDbCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDclCopyDbCmd.setStatus("current")


class _SysDclFlipCmd_Type(Integer32):
    """Custom type sysDclFlipCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("flip", 3),
          ("off", 2))
    )


_SysDclFlipCmd_Type.__name__ = "Integer32"
_SysDclFlipCmd_Object = MibScalar
sysDclFlipCmd = _SysDclFlipCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 4),
    _SysDclFlipCmd_Type()
)
sysDclFlipCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDclFlipCmd.setStatus("current")
_SysStatus_ObjectIdentity = ObjectIdentity
sysStatus = _SysStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3)
)


class _SysSDateFormat_Type(Integer32):
    """Custom type sysSDateFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ddMMYYYY", 1),
          ("mmDDYYYY", 2),
          ("yyyyMMDD", 4))
    )


_SysSDateFormat_Type.__name__ = "Integer32"
_SysSDateFormat_Object = MibScalar
sysSDateFormat = _SysSDateFormat_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 1),
    _SysSDateFormat_Type()
)
sysSDateFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSDateFormat.setStatus("current")


class _SysSDateCmd_Type(DisplayString):
    """Custom type sysSDateCmd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SysSDateCmd_Type.__name__ = "DisplayString"
_SysSDateCmd_Object = MibScalar
sysSDateCmd = _SysSDateCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 2),
    _SysSDateCmd_Type()
)
sysSDateCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSDateCmd.setStatus("current")


class _SysSTimeCmd_Type(DisplayString):
    """Custom type sysSTimeCmd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SysSTimeCmd_Type.__name__ = "DisplayString"
_SysSTimeCmd_Object = MibScalar
sysSTimeCmd = _SysSTimeCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 3),
    _SysSTimeCmd_Type()
)
sysSTimeCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSTimeCmd.setStatus("current")
_SysSActiveCnfg_Type = Integer32
_SysSActiveCnfg_Object = MibScalar
sysSActiveCnfg = _SysSActiveCnfg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 4),
    _SysSActiveCnfg_Type()
)
sysSActiveCnfg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSActiveCnfg.setStatus("current")
_SysSEditCnfg_Type = Integer32
_SysSEditCnfg_Object = MibScalar
sysSEditCnfg = _SysSEditCnfg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 5),
    _SysSEditCnfg_Type()
)
sysSEditCnfg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSEditCnfg.setStatus("current")


class _SysSEditBy_Type(Integer32):
    """Custom type sysSEditBy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("lcd", 7),
          ("none", 1),
          ("snmp", 2),
          ("terCon1", 3),
          ("terCon2", 4),
          ("terInbandCon1", 5),
          ("terInbandCon2", 6))
    )


_SysSEditBy_Type.__name__ = "Integer32"
_SysSEditBy_Object = MibScalar
sysSEditBy = _SysSEditBy_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 6),
    _SysSEditBy_Type()
)
sysSEditBy.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSEditBy.setStatus("current")


class _SysSClkSrc_Type(Integer32):
    """Custom type sysSClkSrc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("fallback", 2),
          ("internal", 3),
          ("master", 1),
          ("ml", 4))
    )


_SysSClkSrc_Type.__name__ = "Integer32"
_SysSClkSrc_Object = MibScalar
sysSClkSrc = _SysSClkSrc_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 7),
    _SysSClkSrc_Type()
)
sysSClkSrc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSClkSrc.setStatus("current")


class _SysSAlrStatus_Type(Integer32):
    """Custom type sysSAlrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 5),
          ("major", 3),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_SysSAlrStatus_Type.__name__ = "Integer32"
_SysSAlrStatus_Object = MibScalar
sysSAlrStatus = _SysSAlrStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 8),
    _SysSAlrStatus_Type()
)
sysSAlrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSAlrStatus.setStatus("current")


class _SysSAlrStatusAll_Type(Integer32):
    """Custom type sysSAlrStatusAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 5),
          ("major", 3),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_SysSAlrStatusAll_Type.__name__ = "Integer32"
_SysSAlrStatusAll_Object = MibScalar
sysSAlrStatusAll = _SysSAlrStatusAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 9),
    _SysSAlrStatusAll_Type()
)
sysSAlrStatusAll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSAlrStatusAll.setStatus("current")


class _SysSTestStatus_Type(Integer32):
    """Custom type sysSTestStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysSTestStatus_Type.__name__ = "Integer32"
_SysSTestStatus_Object = MibScalar
sysSTestStatus = _SysSTestStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 10),
    _SysSTestStatus_Type()
)
sysSTestStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSTestStatus.setStatus("current")


class _SysSSanityCheckStatus_Type(Integer32):
    """Custom type sysSSanityCheckStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("fail", 2),
          ("ok", 4),
          ("unknown", 1),
          ("warning", 3))
    )


_SysSSanityCheckStatus_Type.__name__ = "Integer32"
_SysSSanityCheckStatus_Object = MibScalar
sysSSanityCheckStatus = _SysSSanityCheckStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 11),
    _SysSSanityCheckStatus_Type()
)
sysSSanityCheckStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSSanityCheckStatus.setStatus("current")
_SysSNoOfSanityCheckErr_Type = Integer32
_SysSNoOfSanityCheckErr_Object = MibScalar
sysSNoOfSanityCheckErr = _SysSNoOfSanityCheckErr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 12),
    _SysSNoOfSanityCheckErr_Type()
)
sysSNoOfSanityCheckErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSNoOfSanityCheckErr.setStatus("current")
_SysSErrListTable_Object = MibTable
sysSErrListTable = _SysSErrListTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 13)
)
if mibBuilder.loadTexts:
    sysSErrListTable.setStatus("current")
_SysSErrListEntry_Object = MibTableRow
sysSErrListEntry = _SysSErrListEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 13, 1)
)
sysSErrListEntry.setIndexNames(
    (0, "RAD-MIB", "sysSErrType"),
    (0, "RAD-MIB", "sysSErrIdx"),
)
if mibBuilder.loadTexts:
    sysSErrListEntry.setStatus("current")


class _SysSErrType_Type(Integer32):
    """Custom type sysSErrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("error", 1),
          ("warning", 2))
    )


_SysSErrType_Type.__name__ = "Integer32"
_SysSErrType_Object = MibTableColumn
sysSErrType = _SysSErrType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 13, 1, 1),
    _SysSErrType_Type()
)
sysSErrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSErrType.setStatus("current")
_SysSErrIdx_Type = Integer32
_SysSErrIdx_Object = MibTableColumn
sysSErrIdx = _SysSErrIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 13, 1, 2),
    _SysSErrIdx_Type()
)
sysSErrIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSErrIdx.setStatus("current")


class _SysSErrDescription_Type(DisplayString):
    """Custom type sysSErrDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SysSErrDescription_Type.__name__ = "DisplayString"
_SysSErrDescription_Object = MibTableColumn
sysSErrDescription = _SysSErrDescription_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 13, 1, 3),
    _SysSErrDescription_Type()
)
sysSErrDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSErrDescription.setStatus("current")
_SysSMaxNoOfCnfg_Type = Integer32
_SysSMaxNoOfCnfg_Object = MibScalar
sysSMaxNoOfCnfg = _SysSMaxNoOfCnfg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 14),
    _SysSMaxNoOfCnfg_Type()
)
sysSMaxNoOfCnfg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSMaxNoOfCnfg.setStatus("current")
_SysSSelfTestResult_Type = Integer32
_SysSSelfTestResult_Object = MibScalar
sysSSelfTestResult = _SysSSelfTestResult_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 15),
    _SysSSelfTestResult_Type()
)
sysSSelfTestResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSSelfTestResult.setStatus("current")


class _SysSRelayState_Type(Integer32):
    """Custom type sysSRelayState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_SysSRelayState_Type.__name__ = "Integer32"
_SysSRelayState_Object = MibScalar
sysSRelayState = _SysSRelayState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 16),
    _SysSRelayState_Type()
)
sysSRelayState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSRelayState.setStatus("current")


class _SysSInvertedAlr_Type(Integer32):
    """Custom type sysSInvertedAlr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_SysSInvertedAlr_Type.__name__ = "Integer32"
_SysSInvertedAlr_Object = MibScalar
sysSInvertedAlr = _SysSInvertedAlr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 17),
    _SysSInvertedAlr_Type()
)
sysSInvertedAlr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSInvertedAlr.setStatus("current")
_SysSRdnFlipTable_Object = MibTable
sysSRdnFlipTable = _SysSRdnFlipTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18)
)
if mibBuilder.loadTexts:
    sysSRdnFlipTable.setStatus("current")
_SysSRdnFlipEntry_Object = MibTableRow
sysSRdnFlipEntry = _SysSRdnFlipEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18, 1)
)
sysSRdnFlipEntry.setIndexNames(
    (0, "RAD-MIB", "sysSRdnFlipIdx"),
)
if mibBuilder.loadTexts:
    sysSRdnFlipEntry.setStatus("current")
_SysSRdnFlipIdx_Type = Integer32
_SysSRdnFlipIdx_Object = MibTableColumn
sysSRdnFlipIdx = _SysSRdnFlipIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18, 1, 1),
    _SysSRdnFlipIdx_Type()
)
sysSRdnFlipIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSRdnFlipIdx.setStatus("current")


class _SysSRdnFlipSlot_Type(Integer32):
    """Custom type sysSRdnFlipSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_SysSRdnFlipSlot_Type.__name__ = "Integer32"
_SysSRdnFlipSlot_Object = MibTableColumn
sysSRdnFlipSlot = _SysSRdnFlipSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18, 1, 2),
    _SysSRdnFlipSlot_Type()
)
sysSRdnFlipSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSRdnFlipSlot.setStatus("current")
_SysSRdnFlipPort_Type = Integer32
_SysSRdnFlipPort_Object = MibTableColumn
sysSRdnFlipPort = _SysSRdnFlipPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18, 1, 3),
    _SysSRdnFlipPort_Type()
)
sysSRdnFlipPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSRdnFlipPort.setStatus("current")
_SysSRdnFlipCause_Type = DisplayString
_SysSRdnFlipCause_Object = MibTableColumn
sysSRdnFlipCause = _SysSRdnFlipCause_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18, 1, 4),
    _SysSRdnFlipCause_Type()
)
sysSRdnFlipCause.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSRdnFlipCause.setStatus("current")
_SysSRdnFlipDate_Type = DisplayString
_SysSRdnFlipDate_Object = MibTableColumn
sysSRdnFlipDate = _SysSRdnFlipDate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18, 1, 5),
    _SysSRdnFlipDate_Type()
)
sysSRdnFlipDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSRdnFlipDate.setStatus("current")
_SysSRdnFlipTime_Type = DisplayString
_SysSRdnFlipTime_Object = MibTableColumn
sysSRdnFlipTime = _SysSRdnFlipTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18, 1, 6),
    _SysSRdnFlipTime_Type()
)
sysSRdnFlipTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSRdnFlipTime.setStatus("current")


class _SysSRdnFlipTableClearCmd_Type(Integer32):
    """Custom type sysSRdnFlipTableClearCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysSRdnFlipTableClearCmd_Type.__name__ = "Integer32"
_SysSRdnFlipTableClearCmd_Object = MibScalar
sysSRdnFlipTableClearCmd = _SysSRdnFlipTableClearCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 19),
    _SysSRdnFlipTableClearCmd_Type()
)
sysSRdnFlipTableClearCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSRdnFlipTableClearCmd.setStatus("current")
_SysSRdnFlipCmd_Type = ObjectIdentifier
_SysSRdnFlipCmd_Object = MibScalar
sysSRdnFlipCmd = _SysSRdnFlipCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 20),
    _SysSRdnFlipCmd_Type()
)
sysSRdnFlipCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSRdnFlipCmd.setStatus("current")
_SysSBusTable_Object = MibTable
sysSBusTable = _SysSBusTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 21)
)
if mibBuilder.loadTexts:
    sysSBusTable.setStatus("current")
_SysSBusEntry_Object = MibTableRow
sysSBusEntry = _SysSBusEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 21, 1)
)
sysSBusEntry.setIndexNames(
    (0, "RAD-MIB", "sysSBusPortIdx"),
)
if mibBuilder.loadTexts:
    sysSBusEntry.setStatus("current")
_SysSBusPortIdx_Type = Integer32
_SysSBusPortIdx_Object = MibTableColumn
sysSBusPortIdx = _SysSBusPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 21, 1, 1),
    _SysSBusPortIdx_Type()
)
sysSBusPortIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSBusPortIdx.setStatus("current")


class _SysSBusStatus_Type(Integer32):
    """Custom type sysSBusStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("free", 1),
          ("physical", 2),
          ("virtual", 3))
    )


_SysSBusStatus_Type.__name__ = "Integer32"
_SysSBusStatus_Object = MibTableColumn
sysSBusStatus = _SysSBusStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 21, 1, 2),
    _SysSBusStatus_Type()
)
sysSBusStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSBusStatus.setStatus("current")
_SysSBusCapturePort_Type = Integer32
_SysSBusCapturePort_Object = MibTableColumn
sysSBusCapturePort = _SysSBusCapturePort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 21, 1, 3),
    _SysSBusCapturePort_Type()
)
sysSBusCapturePort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSBusCapturePort.setStatus("current")
_SysSBusUtilization_Type = Integer32
_SysSBusUtilization_Object = MibTableColumn
sysSBusUtilization = _SysSBusUtilization_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 21, 1, 4),
    _SysSBusUtilization_Type()
)
sysSBusUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSBusUtilization.setStatus("current")
_SysSRdnCmdTable_Object = MibTable
sysSRdnCmdTable = _SysSRdnCmdTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 22)
)
if mibBuilder.loadTexts:
    sysSRdnCmdTable.setStatus("current")
_SysSRdnCmdEntry_Object = MibTableRow
sysSRdnCmdEntry = _SysSRdnCmdEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 22, 1)
)
sysSRdnCmdEntry.setIndexNames(
    (0, "RAD-MIB", "sysCRdnPrimeSlot"),
    (0, "RAD-MIB", "sysCRdnPrimePort"),
)
if mibBuilder.loadTexts:
    sysSRdnCmdEntry.setStatus("current")


class _SysSRdnEnforcedChannel_Type(Integer32):
    """Custom type sysSRdnEnforcedChannel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noEnforcement", 2),
          ("notApplicable", 1),
          ("primary", 3),
          ("secondary", 4))
    )


_SysSRdnEnforcedChannel_Type.__name__ = "Integer32"
_SysSRdnEnforcedChannel_Object = MibTableColumn
sysSRdnEnforcedChannel = _SysSRdnEnforcedChannel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 22, 1, 1),
    _SysSRdnEnforcedChannel_Type()
)
sysSRdnEnforcedChannel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSRdnEnforcedChannel.setStatus("current")


class _SysSRdnLockFlip_Type(Integer32):
    """Custom type sysSRdnLockFlip based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_SysSRdnLockFlip_Type.__name__ = "Integer32"
_SysSRdnLockFlip_Object = MibTableColumn
sysSRdnLockFlip = _SysSRdnLockFlip_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 22, 1, 2),
    _SysSRdnLockFlip_Type()
)
sysSRdnLockFlip.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSRdnLockFlip.setStatus("current")


class _SysSRdnManualFlip_Type(Integer32):
    """Custom type sysSRdnManualFlip based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_SysSRdnManualFlip_Type.__name__ = "Integer32"
_SysSRdnManualFlip_Object = MibTableColumn
sysSRdnManualFlip = _SysSRdnManualFlip_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 22, 1, 3),
    _SysSRdnManualFlip_Type()
)
sysSRdnManualFlip.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSRdnManualFlip.setStatus("current")
_SysSAlrAttrIndication_Type = Integer32
_SysSAlrAttrIndication_Object = MibScalar
sysSAlrAttrIndication = _SysSAlrAttrIndication_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 23),
    _SysSAlrAttrIndication_Type()
)
sysSAlrAttrIndication.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSAlrAttrIndication.setStatus("current")
_SysCurrentAlr_ObjectIdentity = ObjectIdentity
sysCurrentAlr = _SysCurrentAlr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4)
)
_SysSAlrTable_Object = MibTable
sysSAlrTable = _SysSAlrTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1)
)
if mibBuilder.loadTexts:
    sysSAlrTable.setStatus("current")
_SysSAlrEntry_Object = MibTableRow
sysSAlrEntry = _SysSAlrEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1, 1)
)
sysSAlrEntry.setIndexNames(
    (0, "RAD-MIB", "sysSAlrIdx"),
)
if mibBuilder.loadTexts:
    sysSAlrEntry.setStatus("current")
_SysSAlrIdx_Type = Integer32
_SysSAlrIdx_Object = MibTableColumn
sysSAlrIdx = _SysSAlrIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1, 1, 1),
    _SysSAlrIdx_Type()
)
sysSAlrIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSAlrIdx.setStatus("current")
_SysSAlrCode_Type = Integer32
_SysSAlrCode_Object = MibTableColumn
sysSAlrCode = _SysSAlrCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1, 1, 2),
    _SysSAlrCode_Type()
)
sysSAlrCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSAlrCode.setStatus("current")


class _SysSAlrState_Type(Integer32):
    """Custom type sysSAlrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("warning", 6))
    )


_SysSAlrState_Type.__name__ = "Integer32"
_SysSAlrState_Object = MibTableColumn
sysSAlrState = _SysSAlrState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1, 1, 3),
    _SysSAlrState_Type()
)
sysSAlrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSAlrState.setStatus("current")


class _SysSAlarmMask_Type(Integer32):
    """Custom type sysSAlarmMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysSAlarmMask_Type.__name__ = "Integer32"
_SysSAlarmMask_Object = MibTableColumn
sysSAlarmMask = _SysSAlarmMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1, 1, 4),
    _SysSAlarmMask_Type()
)
sysSAlarmMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSAlarmMask.setStatus("current")


class _SysSAlarmInvert_Type(Integer32):
    """Custom type sysSAlarmInvert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysSAlarmInvert_Type.__name__ = "Integer32"
_SysSAlarmInvert_Object = MibTableColumn
sysSAlarmInvert = _SysSAlarmInvert_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1, 1, 5),
    _SysSAlarmInvert_Type()
)
sysSAlarmInvert.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSAlarmInvert.setStatus("current")


class _SysSAlarmOnOff_Type(Integer32):
    """Custom type sysSAlarmOnOff based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysSAlarmOnOff_Type.__name__ = "Integer32"
_SysSAlarmOnOff_Object = MibTableColumn
sysSAlarmOnOff = _SysSAlarmOnOff_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1, 1, 6),
    _SysSAlarmOnOff_Type()
)
sysSAlarmOnOff.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSAlarmOnOff.setStatus("current")
_SysSAlarmCounter_Type = Integer32
_SysSAlarmCounter_Object = MibTableColumn
sysSAlarmCounter = _SysSAlarmCounter_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1, 1, 7),
    _SysSAlarmCounter_Type()
)
sysSAlarmCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSAlarmCounter.setStatus("current")


class _SysSAlrClearCmd_Type(Integer32):
    """Custom type sysSAlrClearCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysSAlrClearCmd_Type.__name__ = "Integer32"
_SysSAlrClearCmd_Object = MibScalar
sysSAlrClearCmd = _SysSAlrClearCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 2),
    _SysSAlrClearCmd_Type()
)
sysSAlrClearCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSAlrClearCmd.setStatus("current")


class _SysSAlrClearAllCmd_Type(Integer32):
    """Custom type sysSAlrClearAllCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysSAlrClearAllCmd_Type.__name__ = "Integer32"
_SysSAlrClearAllCmd_Object = MibScalar
sysSAlrClearAllCmd = _SysSAlrClearAllCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 3),
    _SysSAlrClearAllCmd_Type()
)
sysSAlrClearAllCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSAlrClearAllCmd.setStatus("current")


class _SysSAlrMaskAll_Type(Integer32):
    """Custom type sysSAlrMaskAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysSAlrMaskAll_Type.__name__ = "Integer32"
_SysSAlrMaskAll_Object = MibScalar
sysSAlrMaskAll = _SysSAlrMaskAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 4),
    _SysSAlrMaskAll_Type()
)
sysSAlrMaskAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSAlrMaskAll.setStatus("current")


class _SysSAlrMask_Type(OctetString):
    """Custom type sysSAlrMask based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_SysSAlrMask_Type.__name__ = "OctetString"
_SysSAlrMask_Object = MibScalar
sysSAlrMask = _SysSAlrMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 5),
    _SysSAlrMask_Type()
)
sysSAlrMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSAlrMask.setStatus("current")


class _SysSAlrDataUpdateCmd_Type(Integer32):
    """Custom type sysSAlrDataUpdateCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysSAlrDataUpdateCmd_Type.__name__ = "Integer32"
_SysSAlrDataUpdateCmd_Object = MibScalar
sysSAlrDataUpdateCmd = _SysSAlrDataUpdateCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 6),
    _SysSAlrDataUpdateCmd_Type()
)
sysSAlrDataUpdateCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSAlrDataUpdateCmd.setStatus("current")
_SysBufferAlr_ObjectIdentity = ObjectIdentity
sysBufferAlr = _SysBufferAlr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5)
)
_SysBufferAlrTable_Object = MibTable
sysBufferAlrTable = _SysBufferAlrTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1)
)
if mibBuilder.loadTexts:
    sysBufferAlrTable.setStatus("current")
_SysBufferAlrEntry_Object = MibTableRow
sysBufferAlrEntry = _SysBufferAlrEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1)
)
sysBufferAlrEntry.setIndexNames(
    (0, "RAD-MIB", "sysBufferAlrIdx"),
)
if mibBuilder.loadTexts:
    sysBufferAlrEntry.setStatus("current")
_SysBufferAlrIdx_Type = Integer32
_SysBufferAlrIdx_Object = MibTableColumn
sysBufferAlrIdx = _SysBufferAlrIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 1),
    _SysBufferAlrIdx_Type()
)
sysBufferAlrIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysBufferAlrIdx.setStatus("current")
_SysBufferAlrCode_Type = Integer32
_SysBufferAlrCode_Object = MibTableColumn
sysBufferAlrCode = _SysBufferAlrCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 2),
    _SysBufferAlrCode_Type()
)
sysBufferAlrCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysBufferAlrCode.setStatus("current")


class _SysBufferAlrState_Type(Integer32):
    """Custom type sysBufferAlrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_SysBufferAlrState_Type.__name__ = "Integer32"
_SysBufferAlrState_Object = MibTableColumn
sysBufferAlrState = _SysBufferAlrState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 3),
    _SysBufferAlrState_Type()
)
sysBufferAlrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysBufferAlrState.setStatus("current")


class _SysBufferAlrSlot_Type(Integer32):
    """Custom type sysBufferAlrSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              120,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("kmxCl", 105),
          ("kmxIO1", 107),
          ("kmxIO10", 116),
          ("kmxIO11", 117),
          ("kmxIO12", 118),
          ("kmxIO2", 108),
          ("kmxIO3", 109),
          ("kmxIO4", 110),
          ("kmxIO5", 111),
          ("kmxIO6", 112),
          ("kmxIO7", 113),
          ("kmxIO8", 114),
          ("kmxIO9", 115),
          ("kmxMlA", 103),
          ("kmxMlB", 104),
          ("kmxOpt", 106),
          ("kmxPsA", 101),
          ("kmxPsB", 102),
          ("local", 20),
          ("notApplicable", 255),
          ("psA", 1),
          ("psB", 2),
          ("psC", 21),
          ("remote", 120))
    )


_SysBufferAlrSlot_Type.__name__ = "Integer32"
_SysBufferAlrSlot_Object = MibTableColumn
sysBufferAlrSlot = _SysBufferAlrSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 4),
    _SysBufferAlrSlot_Type()
)
sysBufferAlrSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysBufferAlrSlot.setStatus("current")
_SysBufferAlrPort_Type = Integer32
_SysBufferAlrPort_Object = MibTableColumn
sysBufferAlrPort = _SysBufferAlrPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 5),
    _SysBufferAlrPort_Type()
)
sysBufferAlrPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysBufferAlrPort.setStatus("current")


class _SysBufferAlrDate_Type(DisplayString):
    """Custom type sysBufferAlrDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SysBufferAlrDate_Type.__name__ = "DisplayString"
_SysBufferAlrDate_Object = MibTableColumn
sysBufferAlrDate = _SysBufferAlrDate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 6),
    _SysBufferAlrDate_Type()
)
sysBufferAlrDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysBufferAlrDate.setStatus("current")


class _SysBufferAlrTime_Type(DisplayString):
    """Custom type sysBufferAlrTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SysBufferAlrTime_Type.__name__ = "DisplayString"
_SysBufferAlrTime_Object = MibTableColumn
sysBufferAlrTime = _SysBufferAlrTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 7),
    _SysBufferAlrTime_Type()
)
sysBufferAlrTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysBufferAlrTime.setStatus("current")
_SysBufferAlrUpTime_Type = TimeTicks
_SysBufferAlrUpTime_Object = MibTableColumn
sysBufferAlrUpTime = _SysBufferAlrUpTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 8),
    _SysBufferAlrUpTime_Type()
)
sysBufferAlrUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysBufferAlrUpTime.setStatus("current")
_SysBufferAlrInfo_Type = SnmpAdminString
_SysBufferAlrInfo_Object = MibTableColumn
sysBufferAlrInfo = _SysBufferAlrInfo_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 9),
    _SysBufferAlrInfo_Type()
)
sysBufferAlrInfo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysBufferAlrInfo.setStatus("current")


class _SysBufferAlrClearCmd_Type(Integer32):
    """Custom type sysBufferAlrClearCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysBufferAlrClearCmd_Type.__name__ = "Integer32"
_SysBufferAlrClearCmd_Object = MibScalar
sysBufferAlrClearCmd = _SysBufferAlrClearCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 2),
    _SysBufferAlrClearCmd_Type()
)
sysBufferAlrClearCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysBufferAlrClearCmd.setStatus("current")
_SysConfig_ObjectIdentity = ObjectIdentity
sysConfig = _SysConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6)
)
_SysCClkSrcTable_Object = MibTable
sysCClkSrcTable = _SysCClkSrcTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1)
)
if mibBuilder.loadTexts:
    sysCClkSrcTable.setStatus("current")
_SysCClkSrcEntry_Object = MibTableRow
sysCClkSrcEntry = _SysCClkSrcEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1)
)
sysCClkSrcEntry.setIndexNames(
    (0, "RAD-MIB", "sysCClkCnfgIdx"),
    (0, "RAD-MIB", "sysCClkSrcIdx"),
)
if mibBuilder.loadTexts:
    sysCClkSrcEntry.setStatus("current")


class _SysCClkCnfgIdx_Type(Integer32):
    """Custom type sysCClkCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_SysCClkCnfgIdx_Type.__name__ = "Integer32"
_SysCClkCnfgIdx_Object = MibTableColumn
sysCClkCnfgIdx = _SysCClkCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1, 1),
    _SysCClkCnfgIdx_Type()
)
sysCClkCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCClkCnfgIdx.setStatus("current")


class _SysCClkSrcIdx_Type(Integer32):
    """Custom type sysCClkSrcIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fallback", 2),
          ("master", 1))
    )


_SysCClkSrcIdx_Type.__name__ = "Integer32"
_SysCClkSrcIdx_Object = MibTableColumn
sysCClkSrcIdx = _SysCClkSrcIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1, 2),
    _SysCClkSrcIdx_Type()
)
sysCClkSrcIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCClkSrcIdx.setStatus("current")


class _SysCClkSrcMode_Type(Integer32):
    """Custom type sysCClkSrcMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              255)
        )
    )
    namedValues = NamedValues(
        *(("adaptive", 7),
          ("automatic", 9),
          ("internal", 2),
          ("lbt", 5),
          ("none", 1),
          ("notApplicable", 255),
          ("ntr", 6),
          ("recovered", 12),
          ("rxClk", 3),
          ("sSubSystem", 11),
          ("station", 4),
          ("stationB", 8),
          ("system", 10))
    )


_SysCClkSrcMode_Type.__name__ = "Integer32"
_SysCClkSrcMode_Object = MibTableColumn
sysCClkSrcMode = _SysCClkSrcMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1, 3),
    _SysCClkSrcMode_Type()
)
sysCClkSrcMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCClkSrcMode.setStatus("current")
_SysCClkSrcPrt_Type = Integer32
_SysCClkSrcPrt_Object = MibTableColumn
sysCClkSrcPrt = _SysCClkSrcPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1, 4),
    _SysCClkSrcPrt_Type()
)
sysCClkSrcPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCClkSrcPrt.setStatus("current")


class _SysCClkStationFreq_Type(Integer32):
    """Custom type sysCClkStationFreq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("f1544Khz", 2),
          ("f2048Khz", 3),
          ("notApplicable", 1))
    )


_SysCClkStationFreq_Type.__name__ = "Integer32"
_SysCClkStationFreq_Object = MibTableColumn
sysCClkStationFreq = _SysCClkStationFreq_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1, 5),
    _SysCClkStationFreq_Type()
)
sysCClkStationFreq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCClkStationFreq.setStatus("current")
_SysCClkRevertiveTimeout_Type = Integer32
_SysCClkRevertiveTimeout_Object = MibTableColumn
sysCClkRevertiveTimeout = _SysCClkRevertiveTimeout_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1, 6),
    _SysCClkRevertiveTimeout_Type()
)
sysCClkRevertiveTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCClkRevertiveTimeout.setStatus("current")


class _SysCClkStationIf_Type(Integer32):
    """Custom type sysCClkStationIf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("g703", 2),
          ("g703E1Unbalanced", 4),
          ("g703T1", 5),
          ("notApplicable", 1),
          ("rs422", 3),
          ("rs422T1", 6))
    )


_SysCClkStationIf_Type.__name__ = "Integer32"
_SysCClkStationIf_Object = MibTableColumn
sysCClkStationIf = _SysCClkStationIf_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1, 7),
    _SysCClkStationIf_Type()
)
sysCClkStationIf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCClkStationIf.setStatus("current")


class _SysCClkStationCableMode_Type(Integer32):
    """Custom type sysCClkStationCableMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("normal", 2),
          ("notApplicable", 1),
          ("yCable", 3))
    )


_SysCClkStationCableMode_Type.__name__ = "Integer32"
_SysCClkStationCableMode_Object = MibTableColumn
sysCClkStationCableMode = _SysCClkStationCableMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1, 8),
    _SysCClkStationCableMode_Type()
)
sysCClkStationCableMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCClkStationCableMode.setStatus("current")


class _SysCClkStationOutState_Type(Integer32):
    """Custom type sysCClkStationOutState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_SysCClkStationOutState_Type.__name__ = "Integer32"
_SysCClkStationOutState_Object = MibTableColumn
sysCClkStationOutState = _SysCClkStationOutState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1, 9),
    _SysCClkStationOutState_Type()
)
sysCClkStationOutState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCClkStationOutState.setStatus("current")


class _SysCClkSsmBased_Type(Integer32):
    """Custom type sysCClkSsmBased based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_SysCClkSsmBased_Type.__name__ = "Integer32"
_SysCClkSsmBased_Object = MibTableColumn
sysCClkSsmBased = _SysCClkSsmBased_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1, 10),
    _SysCClkSsmBased_Type()
)
sysCClkSsmBased.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCClkSsmBased.setStatus("current")


class _SysCClkSSubsystemSlot_Type(Integer32):
    """Custom type sysCClkSSubsystemSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("notApplicable", 1))
    )


_SysCClkSSubsystemSlot_Type.__name__ = "Integer32"
_SysCClkSSubsystemSlot_Object = MibTableColumn
sysCClkSSubsystemSlot = _SysCClkSSubsystemSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1, 11),
    _SysCClkSSubsystemSlot_Type()
)
sysCClkSSubsystemSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCClkSSubsystemSlot.setStatus("current")
_SysCClkRecoveredID_Type = Unsigned32
_SysCClkRecoveredID_Object = MibTableColumn
sysCClkRecoveredID = _SysCClkRecoveredID_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1, 12),
    _SysCClkRecoveredID_Type()
)
sysCClkRecoveredID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCClkRecoveredID.setStatus("current")
_SysCnfgTable_Object = MibTable
sysCnfgTable = _SysCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2)
)
if mibBuilder.loadTexts:
    sysCnfgTable.setStatus("current")
_SysCnfgEntry_Object = MibTableRow
sysCnfgEntry = _SysCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2, 1)
)
sysCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "sysCnfgIdx"),
)
if mibBuilder.loadTexts:
    sysCnfgEntry.setStatus("current")
_SysCnfgIdx_Type = Integer32
_SysCnfgIdx_Object = MibTableColumn
sysCnfgIdx = _SysCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2, 1, 1),
    _SysCnfgIdx_Type()
)
sysCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCnfgIdx.setStatus("current")


class _SysCMatrixMode_Type(Integer32):
    """Custom type sysCMatrixMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bidirectional", 2),
          ("notApplicable", 1),
          ("unidirectional", 3))
    )


_SysCMatrixMode_Type.__name__ = "Integer32"
_SysCMatrixMode_Object = MibTableColumn
sysCMatrixMode = _SysCMatrixMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2, 1, 2),
    _SysCMatrixMode_Type()
)
sysCMatrixMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCMatrixMode.setStatus("current")


class _SysCIsdnFormat_Type(Integer32):
    """Custom type sysCIsdnFormat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("nt", 3),
          ("te", 2))
    )


_SysCIsdnFormat_Type.__name__ = "Integer32"
_SysCIsdnFormat_Object = MibTableColumn
sysCIsdnFormat = _SysCIsdnFormat_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2, 1, 3),
    _SysCIsdnFormat_Type()
)
sysCIsdnFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCIsdnFormat.setStatus("current")


class _SysCRoutingOnEth_Type(Integer32):
    """Custom type sysCRoutingOnEth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("none", 2),
          ("notApplicable", 1),
          ("proprietary", 3),
          ("rip1", 5),
          ("rip1and2", 6),
          ("rip2", 4))
    )


_SysCRoutingOnEth_Type.__name__ = "Integer32"
_SysCRoutingOnEth_Object = MibTableColumn
sysCRoutingOnEth = _SysCRoutingOnEth_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2, 1, 4),
    _SysCRoutingOnEth_Type()
)
sysCRoutingOnEth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCRoutingOnEth.setStatus("current")


class _SysCAutoConfigEnable_Type(Integer32):
    """Custom type sysCAutoConfigEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_SysCAutoConfigEnable_Type.__name__ = "Integer32"
_SysCAutoConfigEnable_Object = MibTableColumn
sysCAutoConfigEnable = _SysCAutoConfigEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2, 1, 5),
    _SysCAutoConfigEnable_Type()
)
sysCAutoConfigEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCAutoConfigEnable.setStatus("current")


class _SysCIntTsAllocMode_Type(Integer32):
    """Custom type sysCIntTsAllocMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dynamic", 3),
          ("notApplicable", 1),
          ("static", 2),
          ("staticOneToOne", 4))
    )


_SysCIntTsAllocMode_Type.__name__ = "Integer32"
_SysCIntTsAllocMode_Object = MibTableColumn
sysCIntTsAllocMode = _SysCIntTsAllocMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2, 1, 6),
    _SysCIntTsAllocMode_Type()
)
sysCIntTsAllocMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCIntTsAllocMode.setStatus("current")


class _SysCBuPrimaryPort_Type(Integer32):
    """Custom type sysCBuPrimaryPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("e1T1orSerial", 3),
          ("eth", 4),
          ("noBackup", 2))
    )


_SysCBuPrimaryPort_Type.__name__ = "Integer32"
_SysCBuPrimaryPort_Object = MibTableColumn
sysCBuPrimaryPort = _SysCBuPrimaryPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2, 1, 7),
    _SysCBuPrimaryPort_Type()
)
sysCBuPrimaryPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCBuPrimaryPort.setStatus("current")


class _SysCEnableLanOverTdm_Type(Integer32):
    """Custom type sysCEnableLanOverTdm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("enableAll", 2),
          ("enableVoiceAndMng", 4),
          ("enableVoiceOnly", 3))
    )


_SysCEnableLanOverTdm_Type.__name__ = "Integer32"
_SysCEnableLanOverTdm_Object = MibTableColumn
sysCEnableLanOverTdm = _SysCEnableLanOverTdm_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2, 1, 8),
    _SysCEnableLanOverTdm_Type()
)
sysCEnableLanOverTdm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCEnableLanOverTdm.setStatus("current")
_SysCSs7FisuSuppression_Type = Integer32
_SysCSs7FisuSuppression_Object = MibTableColumn
sysCSs7FisuSuppression = _SysCSs7FisuSuppression_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2, 1, 9),
    _SysCSs7FisuSuppression_Type()
)
sysCSs7FisuSuppression.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCSs7FisuSuppression.setStatus("current")


class _SysCBuRecMode_Type(Integer32):
    """Custom type sysCBuRecMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 2),
          ("manual", 3))
    )


_SysCBuRecMode_Type.__name__ = "Integer32"
_SysCBuRecMode_Object = MibTableColumn
sysCBuRecMode = _SysCBuRecMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2, 1, 10),
    _SysCBuRecMode_Type()
)
sysCBuRecMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCBuRecMode.setStatus("current")
_SysCRdnTable_Object = MibTable
sysCRdnTable = _SysCRdnTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3)
)
if mibBuilder.loadTexts:
    sysCRdnTable.setStatus("current")
_SysCRdnEntry_Object = MibTableRow
sysCRdnEntry = _SysCRdnEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1)
)
sysCRdnEntry.setIndexNames(
    (0, "RAD-MIB", "sysCRdnCnfgIdx"),
    (0, "RAD-MIB", "sysCRdnPrimeSlot"),
    (0, "RAD-MIB", "sysCRdnPrimePort"),
)
if mibBuilder.loadTexts:
    sysCRdnEntry.setStatus("current")
_SysCRdnCnfgIdx_Type = Integer32
_SysCRdnCnfgIdx_Object = MibTableColumn
sysCRdnCnfgIdx = _SysCRdnCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 1),
    _SysCRdnCnfgIdx_Type()
)
sysCRdnCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCRdnCnfgIdx.setStatus("current")


class _SysCRdnPrimeSlot_Type(Integer32):
    """Custom type sysCRdnPrimeSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_SysCRdnPrimeSlot_Type.__name__ = "Integer32"
_SysCRdnPrimeSlot_Object = MibTableColumn
sysCRdnPrimeSlot = _SysCRdnPrimeSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 2),
    _SysCRdnPrimeSlot_Type()
)
sysCRdnPrimeSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCRdnPrimeSlot.setStatus("current")
_SysCRdnPrimePort_Type = Integer32
_SysCRdnPrimePort_Object = MibTableColumn
sysCRdnPrimePort = _SysCRdnPrimePort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 3),
    _SysCRdnPrimePort_Type()
)
sysCRdnPrimePort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCRdnPrimePort.setStatus("current")


class _SysCRdnSecSlot_Type(Integer32):
    """Custom type sysCRdnSecSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255))
    )


_SysCRdnSecSlot_Type.__name__ = "Integer32"
_SysCRdnSecSlot_Object = MibTableColumn
sysCRdnSecSlot = _SysCRdnSecSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 4),
    _SysCRdnSecSlot_Type()
)
sysCRdnSecSlot.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sysCRdnSecSlot.setStatus("current")
_SysCRdnSecPort_Type = Integer32
_SysCRdnSecPort_Object = MibTableColumn
sysCRdnSecPort = _SysCRdnSecPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 5),
    _SysCRdnSecPort_Type()
)
sysCRdnSecPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sysCRdnSecPort.setStatus("current")


class _SysCRdnMode_Type(Integer32):
    """Custom type sysCRdnMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("backup", 5),
          ("dualCableAIS", 2),
          ("dualCableParallelTx", 4),
          ("linkAggregation", 9),
          ("manual", 10),
          ("onePlusOne", 7),
          ("oneToOne", 8),
          ("singleSlotProtection", 6),
          ("yCable", 3))
    )


_SysCRdnMode_Type.__name__ = "Integer32"
_SysCRdnMode_Object = MibTableColumn
sysCRdnMode = _SysCRdnMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 6),
    _SysCRdnMode_Type()
)
sysCRdnMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sysCRdnMode.setStatus("current")


class _SysCRdnRecMode_Type(Integer32):
    """Custom type sysCRdnRecMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("auto", 2),
          ("manual", 3),
          ("nonRevertive", 4))
    )


_SysCRdnRecMode_Type.__name__ = "Integer32"
_SysCRdnRecMode_Object = MibTableColumn
sysCRdnRecMode = _SysCRdnRecMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 7),
    _SysCRdnRecMode_Type()
)
sysCRdnRecMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sysCRdnRecMode.setStatus("current")
_SysCRdnRecTime_Type = Integer32
_SysCRdnRecTime_Object = MibTableColumn
sysCRdnRecTime = _SysCRdnRecTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 8),
    _SysCRdnRecTime_Type()
)
sysCRdnRecTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sysCRdnRecTime.setStatus("current")


class _SysCRdnHwSwFlip_Type(Integer32):
    """Custom type sysCRdnHwSwFlip based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("hw", 2),
          ("notApplicable", 1),
          ("sw", 3))
    )


_SysCRdnHwSwFlip_Type.__name__ = "Integer32"
_SysCRdnHwSwFlip_Object = MibTableColumn
sysCRdnHwSwFlip = _SysCRdnHwSwFlip_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 9),
    _SysCRdnHwSwFlip_Type()
)
sysCRdnHwSwFlip.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sysCRdnHwSwFlip.setStatus("current")
_SysCRdnRowStatus_Type = RowStatus
_SysCRdnRowStatus_Object = MibTableColumn
sysCRdnRowStatus = _SysCRdnRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 10),
    _SysCRdnRowStatus_Type()
)
sysCRdnRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sysCRdnRowStatus.setStatus("current")


class _SysCRdnOnline_Type(Integer32):
    """Custom type sysCRdnOnline based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("primary", 2),
          ("secondary", 3))
    )


_SysCRdnOnline_Type.__name__ = "Integer32"
_SysCRdnOnline_Object = MibTableColumn
sysCRdnOnline = _SysCRdnOnline_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 11),
    _SysCRdnOnline_Type()
)
sysCRdnOnline.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCRdnOnline.setStatus("current")


class _SysCRdnSwitchingMode_Type(Integer32):
    """Custom type sysCRdnSwitchingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("biDirectional", 2),
          ("linkAggregation", 4),
          ("notApplicable", 1),
          ("uniDirectional", 3))
    )


_SysCRdnSwitchingMode_Type.__name__ = "Integer32"
_SysCRdnSwitchingMode_Object = MibTableColumn
sysCRdnSwitchingMode = _SysCRdnSwitchingMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 12),
    _SysCRdnSwitchingMode_Type()
)
sysCRdnSwitchingMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sysCRdnSwitchingMode.setStatus("current")
_SysCRdnFlipUponEvent_Type = Integer32
_SysCRdnFlipUponEvent_Object = MibTableColumn
sysCRdnFlipUponEvent = _SysCRdnFlipUponEvent_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 13),
    _SysCRdnFlipUponEvent_Type()
)
sysCRdnFlipUponEvent.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sysCRdnFlipUponEvent.setStatus("current")
_SysCRdnLosOrLofTime_Type = Integer32
_SysCRdnLosOrLofTime_Object = MibTableColumn
sysCRdnLosOrLofTime = _SysCRdnLosOrLofTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 14),
    _SysCRdnLosOrLofTime_Type()
)
sysCRdnLosOrLofTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sysCRdnLosOrLofTime.setStatus("current")
_SysCRdnEventsTimeWindow_Type = Integer32
_SysCRdnEventsTimeWindow_Object = MibTableColumn
sysCRdnEventsTimeWindow = _SysCRdnEventsTimeWindow_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 15),
    _SysCRdnEventsTimeWindow_Type()
)
sysCRdnEventsTimeWindow.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sysCRdnEventsTimeWindow.setStatus("current")
_SysCRdnSequenceNumberThreshold_Type = Integer32
_SysCRdnSequenceNumberThreshold_Object = MibTableColumn
sysCRdnSequenceNumberThreshold = _SysCRdnSequenceNumberThreshold_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 16),
    _SysCRdnSequenceNumberThreshold_Type()
)
sysCRdnSequenceNumberThreshold.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sysCRdnSequenceNumberThreshold.setStatus("current")
_SysCRdnBufferErrorsThreshold_Type = Integer32
_SysCRdnBufferErrorsThreshold_Object = MibTableColumn
sysCRdnBufferErrorsThreshold = _SysCRdnBufferErrorsThreshold_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 17),
    _SysCRdnBufferErrorsThreshold_Type()
)
sysCRdnBufferErrorsThreshold.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sysCRdnBufferErrorsThreshold.setStatus("current")
_SysCRdnBuffUnderrunTime_Type = Integer32
_SysCRdnBuffUnderrunTime_Object = MibTableColumn
sysCRdnBuffUnderrunTime = _SysCRdnBuffUnderrunTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 18),
    _SysCRdnBuffUnderrunTime_Type()
)
sysCRdnBuffUnderrunTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sysCRdnBuffUnderrunTime.setStatus("current")


class _SysCRdnPrimePriority_Type(Integer32):
    """Custom type sysCRdnPrimePriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("high", 3),
          ("low", 2),
          ("notApplicable", 1))
    )


_SysCRdnPrimePriority_Type.__name__ = "Integer32"
_SysCRdnPrimePriority_Object = MibTableColumn
sysCRdnPrimePriority = _SysCRdnPrimePriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 19),
    _SysCRdnPrimePriority_Type()
)
sysCRdnPrimePriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sysCRdnPrimePriority.setStatus("current")


class _SysCRdnSecPriority_Type(Integer32):
    """Custom type sysCRdnSecPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("high", 3),
          ("low", 2),
          ("notApplicable", 1))
    )


_SysCRdnSecPriority_Type.__name__ = "Integer32"
_SysCRdnSecPriority_Object = MibTableColumn
sysCRdnSecPriority = _SysCRdnSecPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 20),
    _SysCRdnSecPriority_Type()
)
sysCRdnSecPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sysCRdnSecPriority.setStatus("current")
_SysCRdnWTR_Type = Unsigned32
_SysCRdnWTR_Object = MibTableColumn
sysCRdnWTR = _SysCRdnWTR_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 21),
    _SysCRdnWTR_Type()
)
sysCRdnWTR.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sysCRdnWTR.setStatus("current")
_SysCRdnName_Type = SnmpAdminString
_SysCRdnName_Object = MibTableColumn
sysCRdnName = _SysCRdnName_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 22),
    _SysCRdnName_Type()
)
sysCRdnName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sysCRdnName.setStatus("current")


class _SysCRdnTxDownDurationUponFlip_Type(Unsigned32):
    """Custom type sysCRdnTxDownDurationUponFlip based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30),
    )


_SysCRdnTxDownDurationUponFlip_Type.__name__ = "Unsigned32"
_SysCRdnTxDownDurationUponFlip_Object = MibTableColumn
sysCRdnTxDownDurationUponFlip = _SysCRdnTxDownDurationUponFlip_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 23),
    _SysCRdnTxDownDurationUponFlip_Type()
)
sysCRdnTxDownDurationUponFlip.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    sysCRdnTxDownDurationUponFlip.setStatus("current")
_SysDbase_ObjectIdentity = ObjectIdentity
sysDbase = _SysDbase_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7)
)


class _SysDbaseSanityCheckCmd_Type(Integer32):
    """Custom type sysDbaseSanityCheckCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SysDbaseSanityCheckCmd_Type.__name__ = "Integer32"
_SysDbaseSanityCheckCmd_Object = MibScalar
sysDbaseSanityCheckCmd = _SysDbaseSanityCheckCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 1),
    _SysDbaseSanityCheckCmd_Type()
)
sysDbaseSanityCheckCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDbaseSanityCheckCmd.setStatus("current")


class _SysDbaseDownloadCnfgIdxCmd_Type(Integer32):
    """Custom type sysDbaseDownloadCnfgIdxCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SysDbaseDownloadCnfgIdxCmd_Type.__name__ = "Integer32"
_SysDbaseDownloadCnfgIdxCmd_Object = MibScalar
sysDbaseDownloadCnfgIdxCmd = _SysDbaseDownloadCnfgIdxCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 2),
    _SysDbaseDownloadCnfgIdxCmd_Type()
)
sysDbaseDownloadCnfgIdxCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDbaseDownloadCnfgIdxCmd.setStatus("current")


class _SysDbaseUploadCnfgIdxCmd_Type(Integer32):
    """Custom type sysDbaseUploadCnfgIdxCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SysDbaseUploadCnfgIdxCmd_Type.__name__ = "Integer32"
_SysDbaseUploadCnfgIdxCmd_Object = MibScalar
sysDbaseUploadCnfgIdxCmd = _SysDbaseUploadCnfgIdxCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 3),
    _SysDbaseUploadCnfgIdxCmd_Type()
)
sysDbaseUploadCnfgIdxCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDbaseUploadCnfgIdxCmd.setStatus("current")
_SysDbaseFlipTable_Object = MibTable
sysDbaseFlipTable = _SysDbaseFlipTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 4)
)
if mibBuilder.loadTexts:
    sysDbaseFlipTable.setStatus("current")
_SysDbaseFlipEntry_Object = MibTableRow
sysDbaseFlipEntry = _SysDbaseFlipEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 4, 1)
)
sysDbaseFlipEntry.setIndexNames(
    (0, "RAD-MIB", "sysDbaseFlipIdx"),
)
if mibBuilder.loadTexts:
    sysDbaseFlipEntry.setStatus("current")


class _SysDbaseFlipIdx_Type(Integer32):
    """Custom type sysDbaseFlipIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SysDbaseFlipIdx_Type.__name__ = "Integer32"
_SysDbaseFlipIdx_Object = MibTableColumn
sysDbaseFlipIdx = _SysDbaseFlipIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 4, 1, 1),
    _SysDbaseFlipIdx_Type()
)
sysDbaseFlipIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysDbaseFlipIdx.setStatus("current")


class _SysDbaseFlipTime_Type(DisplayString):
    """Custom type sysDbaseFlipTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_SysDbaseFlipTime_Type.__name__ = "DisplayString"
_SysDbaseFlipTime_Object = MibTableColumn
sysDbaseFlipTime = _SysDbaseFlipTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 4, 1, 2),
    _SysDbaseFlipTime_Type()
)
sysDbaseFlipTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDbaseFlipTime.setStatus("current")


class _SysDbaseFlipActivation_Type(Integer32):
    """Custom type sysDbaseFlipActivation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_SysDbaseFlipActivation_Type.__name__ = "Integer32"
_SysDbaseFlipActivation_Object = MibTableColumn
sysDbaseFlipActivation = _SysDbaseFlipActivation_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 4, 1, 3),
    _SysDbaseFlipActivation_Type()
)
sysDbaseFlipActivation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDbaseFlipActivation.setStatus("current")
_MdlDacsMux_ObjectIdentity = ObjectIdentity
mdlDacsMux = _MdlDacsMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2)
)
_MdlGen_ObjectIdentity = ObjectIdentity
mdlGen = _MdlGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1)
)
_MdlSTable_Object = MibTable
mdlSTable = _MdlSTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1)
)
if mibBuilder.loadTexts:
    mdlSTable.setStatus("current")
_MdlSEntry_Object = MibTableRow
mdlSEntry = _MdlSEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1)
)
mdlSEntry.setIndexNames(
    (0, "RAD-MIB", "mdlSSltIdx"),
)
if mibBuilder.loadTexts:
    mdlSEntry.setStatus("current")


class _MdlSSltIdx_Type(Integer32):
    """Custom type mdlSSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("kmxCl", 105),
          ("kmxIO1", 107),
          ("kmxIO10", 116),
          ("kmxIO11", 117),
          ("kmxIO12", 118),
          ("kmxIO2", 108),
          ("kmxIO3", 109),
          ("kmxIO4", 110),
          ("kmxIO5", 111),
          ("kmxIO6", 112),
          ("kmxIO7", 113),
          ("kmxIO8", 114),
          ("kmxIO9", 115),
          ("kmxMlA", 103),
          ("kmxMlB", 104),
          ("kmxOpt", 106),
          ("kmxPsA", 101),
          ("kmxPsB", 102),
          ("notApplicable", 255),
          ("psA", 1),
          ("psB", 2),
          ("psC", 20))
    )


_MdlSSltIdx_Type.__name__ = "Integer32"
_MdlSSltIdx_Object = MibTableColumn
mdlSSltIdx = _MdlSSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 1),
    _MdlSSltIdx_Type()
)
mdlSSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSSltIdx.setStatus("current")


class _MdlSCardType_Type(Integer32):
    """Custom type mdlSCardType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              10,
              11,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              59,
              60,
              61,
              62,
              63,
              70,
              71,
              72,
              80,
              81,
              82,
              83,
              90,
              91,
              92,
              100,
              101,
              102,
              103,
              104,
              110,
              111,
              112,
              113,
              114,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              181,
              182,
              183,
              184,
              185,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              200,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              208,
              209,
              210,
              211,
              212,
              213,
              214,
              215,
              216,
              217,
              218,
              219,
              220,
              221,
              222,
              223,
              230,
              231,
              232,
              233,
              234,
              235,
              236,
              237,
              238,
              239,
              240,
              241,
              242,
              243,
              244,
              245,
              246,
              247,
              248,
              249,
              250,
              251,
              252,
              253,
              254,
              255,
              256,
              257,
              258,
              259,
              260,
              261,
              262,
              263,
              264,
              265,
              266,
              267,
              268,
              269,
              270,
              271,
              272,
              273,
              280,
              281,
              282,
              283,
              284,
              290,
              300,
              301,
              302,
              303,
              310,
              311,
              312,
              313,
              314,
              315,
              316,
              317,
              318,
              319,
              320,
              321,
              322,
              323,
              324,
              325,
              326,
              327,
              328,
              329,
              330,
              331,
              332,
              333,
              334,
              335,
              336,
              337,
              338,
              339,
              340,
              341,
              342,
              343,
              344,
              345,
              346,
              347,
              348,
              349)
        )
    )
    namedValues = NamedValues(
        *(("cesE128", 301),
          ("cesE1Pw28", 303),
          ("cesT128", 300),
          ("cesT1Pw28", 302),
          ("channelizedT3Pw1", 290),
          ("d16U", 102),
          ("d16gsdsl", 44),
          ("d4E1", 38),
          ("d4HS", 103),
          ("d4T1", 28),
          ("d4slStuC", 46),
          ("d4slStuR", 47),
          ("d8E1", 39),
          ("d8HS", 104),
          ("d8T1", 29),
          ("d8U", 101),
          ("d8sl", 45),
          ("dCl", 20),
          ("dE1DSU", 32),
          ("dE1F", 37),
          ("dE1Hdsl", 40),
          ("dE1HdslS", 42),
          ("dE1LTU", 33),
          ("dE1aDSU", 34),
          ("dE1aLTU", 35),
          ("dHS2", 100),
          ("dT1CSU", 31),
          ("dT1DSU", 30),
          ("dT1F", 36),
          ("dT1Hdsl", 41),
          ("dT1HdslS", 43),
          ("dcl2", 22),
          ("dcl2Eth", 23),
          ("dcl3", 25),
          ("dcl3Eth", 26),
          ("de3", 212),
          ("de3f", 213),
          ("dim100", 208),
          ("dim10BaseT", 206),
          ("dimE1", 207),
          ("dimETUR", 200),
          ("dimHssi", 204),
          ("dimRS422", 202),
          ("dimRS530", 203),
          ("dimV35", 201),
          ("dimX21", 205),
          ("dstm1", 217),
          ("dstm1R", 218),
          ("dstm1s1", 214),
          ("dstm1s2", 215),
          ("dt3", 210),
          ("dt3G747", 209),
          ("dt3f", 211),
          ("empty", 2),
          ("eth2", 282),
          ("eth8", 284),
          ("f2stm1", 219),
          ("fLAN", 83),
          ("fSTM1", 216),
          ("gCl1", 18),
          ("gCl2", 19),
          ("gigabitEth", 280),
          ("gigabitEth2", 281),
          ("gigabitEth8", 283),
          ("goc3", 221),
          ("goc3D", 223),
          ("gstm1", 220),
          ("gstm1D", 222),
          ("kCl", 21),
          ("kClEth", 24),
          ("kHS1", 110),
          ("kHS2", 111),
          ("kHS703", 114),
          ("kHSU1", 112),
          ("kHSU2", 113),
          ("kLS1", 70),
          ("kLS1New", 71),
          ("kLS2", 72),
          ("kMBE", 81),
          ("kMBENew", 82),
          ("kML1", 50),
          ("kML10", 59),
          ("kML10New", 61),
          ("kML11FO", 63),
          ("kML11RJ45", 62),
          ("kML2", 51),
          ("kML3", 52),
          ("kML4", 53),
          ("kML5", 54),
          ("kML6", 55),
          ("kML7", 56),
          ("kML8", 57),
          ("kMLF", 60),
          ("kTRE", 80),
          ("kVC1EM", 130),
          ("kVC1FXO", 131),
          ("kVC1FXS", 132),
          ("kVC1MEM", 133),
          ("kVC1MFXO", 134),
          ("kVC1MFXS", 135),
          ("kVC1MFXSW", 136),
          ("kVC2EM", 137),
          ("kVC2FXO", 138),
          ("kVC2FXS", 139),
          ("kVC2s1EM", 140),
          ("kVC2s1FXO", 141),
          ("kVC2s1FXS", 142),
          ("kVC3EM", 143),
          ("kVC3FXO", 144),
          ("kVC3FXS", 145),
          ("kVC3S0", 146),
          ("kVF1EM", 170),
          ("kVF1FXO", 171),
          ("kVF1FXS", 172),
          ("kVF3EM", 173),
          ("kVF3FXO", 174),
          ("kVF3FXS", 175),
          ("kVF4EM", 176),
          ("kVF4FXO", 177),
          ("kVF4FXO3", 189),
          ("kVF4FXS", 178),
          ("kVF4FXS3", 190),
          ("kVF4FXSW", 179),
          ("kVF4NS0", 191),
          ("kVF4S0", 180),
          ("kVF5E1PbxSlave", 182),
          ("kVF5E1PbxSlaveNew", 186),
          ("kVF5PbxE1", 181),
          ("kVF5PbxE1New", 185),
          ("kVF5PbxT1", 183),
          ("kVF5PbxT1New", 187),
          ("kVF5T1PbxSlave", 184),
          ("kVF5T1PbxSlaveNew", 188),
          ("kVF6E1s16", 192),
          ("kVF6E1s31", 193),
          ("kVF6T1s12", 194),
          ("kVF6T1s24", 195),
          ("kVF8EM", 196),
          ("kVF8FXO", 197),
          ("kVF8FXS", 198),
          ("kai", 90),
          ("kdi", 91),
          ("kdiCH", 92),
          ("laAdslA", 257),
          ("laAdslADp", 258),
          ("laAdslB", 259),
          ("laAdslBDp", 260),
          ("laDp", 254),
          ("laE1", 239),
          ("laE1Vxx", 240),
          ("laEth", 243),
          ("laEthSwitch", 269),
          ("laFXSs", 249),
          ("laFXSwBU", 248),
          ("laFXSwBUs", 250),
          ("laISDN", 241),
          ("laISDNwBU", 244),
          ("laIsdnNT", 245),
          ("laIsdnNTs", 251),
          ("laIsdnNTwBU", 246),
          ("laIsdnNTwBUs", 252),
          ("laIsdnTE", 247),
          ("laIsdnTEs", 253),
          ("laIsdnTEwBU", 265),
          ("laIsdnTEwBUs", 266),
          ("laSUB", 230),
          ("laSdsl", 255),
          ("laSdslDp", 256),
          ("laShdsl", 261),
          ("laShdsl4w", 267),
          ("laShdsl4wDp", 268),
          ("laShdslDp", 262),
          ("laT1", 237),
          ("laT1Vxx", 238),
          ("laT1b", 263),
          ("laT1bDp", 264),
          ("laV11", 234),
          ("laV24", 235),
          ("laV35", 236),
          ("laVEM", 231),
          ("laVFXO", 232),
          ("laVFXS", 233),
          ("laVxx", 242),
          ("psAC", 10),
          ("psDC", 11),
          ("serverE1", 270),
          ("serverE1Pw", 272),
          ("serverT1", 271),
          ("serverT1Pw", 273),
          ("unknown", 1),
          ("vc12E1UeNe", 318),
          ("vc12E1UeNi", 319),
          ("vc12E1UiNe", 320),
          ("vc12E1UiNi", 321),
          ("vc12T1UeNe", 322),
          ("vc12T1UeNi", 323),
          ("vc12T1UiNe", 324),
          ("vc12T1UiNi", 325),
          ("vca12E1UeNe", 334),
          ("vca12E1UeNi", 335),
          ("vca12E1UiNe", 336),
          ("vca12E1UiNi", 337),
          ("vca12T1UeNe", 338),
          ("vca12T1UeNi", 339),
          ("vca12T1UiNe", 340),
          ("vca12T1UiNi", 341),
          ("vca16E1UeNe", 326),
          ("vca16E1UeNi", 327),
          ("vca16E1UiNe", 328),
          ("vca16E1UiNi", 329),
          ("vca16T1UeNe", 330),
          ("vca16T1UeNi", 331),
          ("vca16T1UiNe", 332),
          ("vca16T1UiNi", 333),
          ("vmg12E1Ue", 346),
          ("vmg12E1Ui", 347),
          ("vmg12T1Ue", 348),
          ("vmg12T1Ui", 349),
          ("vmg16E1Ue", 342),
          ("vmg16E1Ui", 343),
          ("vmg16T1Ue", 344),
          ("vmg16T1Ui", 345),
          ("vmxE1VeDe", 310),
          ("vmxE1VeDi", 311),
          ("vmxE1ViDe", 312),
          ("vmxE1ViDi", 313),
          ("vmxT1VeDe", 314),
          ("vmxT1VeDi", 315),
          ("vmxT1ViDe", 316),
          ("vmxT1ViDi", 317))
    )


_MdlSCardType_Type.__name__ = "Integer32"
_MdlSCardType_Object = MibTableColumn
mdlSCardType = _MdlSCardType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 2),
    _MdlSCardType_Type()
)
mdlSCardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSCardType.setStatus("current")


class _MdlSHwVer_Type(DisplayString):
    """Custom type mdlSHwVer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_MdlSHwVer_Type.__name__ = "DisplayString"
_MdlSHwVer_Object = MibTableColumn
mdlSHwVer = _MdlSHwVer_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 3),
    _MdlSHwVer_Type()
)
mdlSHwVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSHwVer.setStatus("current")


class _MdlSSwVer_Type(DisplayString):
    """Custom type mdlSSwVer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_MdlSSwVer_Type.__name__ = "DisplayString"
_MdlSSwVer_Object = MibTableColumn
mdlSSwVer = _MdlSSwVer_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 4),
    _MdlSSwVer_Type()
)
mdlSSwVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSSwVer.setStatus("current")


class _MdlSAlarmStatus_Type(Integer32):
    """Custom type mdlSAlarmStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 5),
          ("major", 3),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_MdlSAlarmStatus_Type.__name__ = "Integer32"
_MdlSAlarmStatus_Object = MibTableColumn
mdlSAlarmStatus = _MdlSAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 5),
    _MdlSAlarmStatus_Type()
)
mdlSAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlarmStatus.setStatus("current")


class _MdlSAlarmStatusAll_Type(Integer32):
    """Custom type mdlSAlarmStatusAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 5),
          ("major", 3),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_MdlSAlarmStatusAll_Type.__name__ = "Integer32"
_MdlSAlarmStatusAll_Object = MibTableColumn
mdlSAlarmStatusAll = _MdlSAlarmStatusAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 6),
    _MdlSAlarmStatusAll_Type()
)
mdlSAlarmStatusAll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSAlarmStatusAll.setStatus("current")


class _MdlSTestStatus_Type(Integer32):
    """Custom type mdlSTestStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlSTestStatus_Type.__name__ = "Integer32"
_MdlSTestStatus_Object = MibTableColumn
mdlSTestStatus = _MdlSTestStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 7),
    _MdlSTestStatus_Type()
)
mdlSTestStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSTestStatus.setStatus("current")


class _MdlSHwStatus_Type(Integer32):
    """Custom type mdlSHwStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fail", 2),
          ("ok", 3))
    )


_MdlSHwStatus_Type.__name__ = "Integer32"
_MdlSHwStatus_Object = MibTableColumn
mdlSHwStatus = _MdlSHwStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 8),
    _MdlSHwStatus_Type()
)
mdlSHwStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSHwStatus.setStatus("current")


class _MdlSActivity_Type(Integer32):
    """Custom type mdlSActivity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("offline", 2),
          ("online", 3))
    )


_MdlSActivity_Type.__name__ = "Integer32"
_MdlSActivity_Object = MibTableColumn
mdlSActivity = _MdlSActivity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 9),
    _MdlSActivity_Type()
)
mdlSActivity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSActivity.setStatus("current")


class _MdlSAlrClearCmd_Type(Integer32):
    """Custom type mdlSAlrClearCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlSAlrClearCmd_Type.__name__ = "Integer32"
_MdlSAlrClearCmd_Object = MibTableColumn
mdlSAlrClearCmd = _MdlSAlrClearCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 10),
    _MdlSAlrClearCmd_Type()
)
mdlSAlrClearCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlSAlrClearCmd.setStatus("current")


class _MdlSAlrClearAllCmd_Type(Integer32):
    """Custom type mdlSAlrClearAllCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlSAlrClearAllCmd_Type.__name__ = "Integer32"
_MdlSAlrClearAllCmd_Object = MibTableColumn
mdlSAlrClearAllCmd = _MdlSAlrClearAllCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 11),
    _MdlSAlrClearAllCmd_Type()
)
mdlSAlrClearAllCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlSAlrClearAllCmd.setStatus("current")


class _MdlSAlrMaskAll_Type(Integer32):
    """Custom type mdlSAlrMaskAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlSAlrMaskAll_Type.__name__ = "Integer32"
_MdlSAlrMaskAll_Object = MibTableColumn
mdlSAlrMaskAll = _MdlSAlrMaskAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 12),
    _MdlSAlrMaskAll_Type()
)
mdlSAlrMaskAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlSAlrMaskAll.setStatus("current")
_MdlSCmd_Type = Integer32
_MdlSCmd_Object = MibTableColumn
mdlSCmd = _MdlSCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 13),
    _MdlSCmd_Type()
)
mdlSCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlSCmd.setStatus("current")


class _MdlSReset_Type(Integer32):
    """Custom type mdlSReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlSReset_Type.__name__ = "Integer32"
_MdlSReset_Object = MibTableColumn
mdlSReset = _MdlSReset_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 14),
    _MdlSReset_Type()
)
mdlSReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlSReset.setStatus("current")


class _MdlSRebuildFrame_Type(Integer32):
    """Custom type mdlSRebuildFrame based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_MdlSRebuildFrame_Type.__name__ = "Integer32"
_MdlSRebuildFrame_Object = MibTableColumn
mdlSRebuildFrame = _MdlSRebuildFrame_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 15),
    _MdlSRebuildFrame_Type()
)
mdlSRebuildFrame.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlSRebuildFrame.setStatus("current")


class _MdlSBackupSwVer_Type(DisplayString):
    """Custom type mdlSBackupSwVer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_MdlSBackupSwVer_Type.__name__ = "DisplayString"
_MdlSBackupSwVer_Object = MibTableColumn
mdlSBackupSwVer = _MdlSBackupSwVer_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 16),
    _MdlSBackupSwVer_Type()
)
mdlSBackupSwVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSBackupSwVer.setStatus("current")


class _MdlSSecondaryBackupSwVer_Type(DisplayString):
    """Custom type mdlSSecondaryBackupSwVer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_MdlSSecondaryBackupSwVer_Type.__name__ = "DisplayString"
_MdlSSecondaryBackupSwVer_Object = MibTableColumn
mdlSSecondaryBackupSwVer = _MdlSSecondaryBackupSwVer_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 17),
    _MdlSSecondaryBackupSwVer_Type()
)
mdlSSecondaryBackupSwVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSSecondaryBackupSwVer.setStatus("current")


class _MdlSPiggybackVer_Type(SnmpAdminString):
    """Custom type mdlSPiggybackVer based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_MdlSPiggybackVer_Type.__name__ = "SnmpAdminString"
_MdlSPiggybackVer_Object = MibTableColumn
mdlSPiggybackVer = _MdlSPiggybackVer_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 18),
    _MdlSPiggybackVer_Type()
)
mdlSPiggybackVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlSPiggybackVer.setStatus("current")
_MdlCTable_Object = MibTable
mdlCTable = _MdlCTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 2)
)
if mibBuilder.loadTexts:
    mdlCTable.setStatus("current")
_MdlCEntry_Object = MibTableRow
mdlCEntry = _MdlCEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 2, 1)
)
mdlCEntry.setIndexNames(
    (0, "RAD-MIB", "mdlCConfigIdx"),
    (0, "RAD-MIB", "mdlCSlotIdx"),
)
if mibBuilder.loadTexts:
    mdlCEntry.setStatus("current")


class _MdlCConfigIdx_Type(Integer32):
    """Custom type mdlCConfigIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_MdlCConfigIdx_Type.__name__ = "Integer32"
_MdlCConfigIdx_Object = MibTableColumn
mdlCConfigIdx = _MdlCConfigIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 2, 1, 1),
    _MdlCConfigIdx_Type()
)
mdlCConfigIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCConfigIdx.setStatus("current")


class _MdlCSlotIdx_Type(Integer32):
    """Custom type mdlCSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("kmxCl", 105),
          ("kmxIO1", 107),
          ("kmxIO10", 116),
          ("kmxIO11", 117),
          ("kmxIO12", 118),
          ("kmxIO2", 108),
          ("kmxIO3", 109),
          ("kmxIO4", 110),
          ("kmxIO5", 111),
          ("kmxIO6", 112),
          ("kmxIO7", 113),
          ("kmxIO8", 114),
          ("kmxIO9", 115),
          ("kmxMlA", 103),
          ("kmxMlB", 104),
          ("kmxOpt", 106),
          ("kmxPsA", 101),
          ("kmxPsB", 102),
          ("notApplicable", 255),
          ("psA", 1),
          ("psB", 2),
          ("psC", 20))
    )


_MdlCSlotIdx_Type.__name__ = "Integer32"
_MdlCSlotIdx_Object = MibTableColumn
mdlCSlotIdx = _MdlCSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 2, 1, 2),
    _MdlCSlotIdx_Type()
)
mdlCSlotIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCSlotIdx.setStatus("current")


class _MdlCProgCardType_Type(Integer32):
    """Custom type mdlCProgCardType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              10,
              11,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              59,
              60,
              61,
              62,
              63,
              70,
              71,
              72,
              80,
              81,
              82,
              83,
              90,
              91,
              92,
              100,
              101,
              102,
              103,
              104,
              110,
              111,
              112,
              113,
              114,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              170,
              171,
              172,
              173,
              174,
              175,
              176,
              177,
              178,
              179,
              180,
              181,
              182,
              183,
              184,
              185,
              186,
              187,
              188,
              189,
              190,
              191,
              192,
              193,
              194,
              195,
              196,
              197,
              198,
              200,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              208,
              209,
              210,
              211,
              212,
              213,
              214,
              215,
              216,
              217,
              218,
              219,
              220,
              221,
              222,
              223,
              270,
              271,
              272,
              273,
              280,
              281,
              282,
              283,
              284,
              290,
              300,
              301,
              302,
              303,
              310,
              311,
              312,
              313,
              314,
              315,
              316,
              317,
              318,
              319,
              320,
              321,
              322,
              323,
              324,
              325,
              326,
              327,
              328,
              329,
              330,
              331,
              332,
              333,
              334,
              335,
              336,
              337,
              338,
              339,
              340,
              341,
              342,
              343,
              344,
              345,
              346,
              347,
              348,
              349)
        )
    )
    namedValues = NamedValues(
        *(("cesE128", 301),
          ("cesE1Pw28", 303),
          ("cesT128", 300),
          ("cesT1Pw28", 302),
          ("channelizedT3Pw1", 290),
          ("d16U", 102),
          ("d16gsdsl", 44),
          ("d4E1", 38),
          ("d4HS", 103),
          ("d4T1", 28),
          ("d4slStuC", 46),
          ("d4slStuR", 47),
          ("d8E1", 39),
          ("d8HS", 104),
          ("d8T1", 29),
          ("d8U", 101),
          ("d8sl", 45),
          ("dCl", 20),
          ("dE1DSU", 32),
          ("dE1F", 37),
          ("dE1Hdsl", 40),
          ("dE1HdslS", 42),
          ("dE1LTU", 33),
          ("dE1aDSU", 34),
          ("dE1aLTU", 35),
          ("dHS2", 100),
          ("dT1CSU", 31),
          ("dT1DSU", 30),
          ("dT1F", 36),
          ("dT1Hdsl", 41),
          ("dT1HdslS", 43),
          ("dcl2", 22),
          ("dcl2Eth", 23),
          ("dcl3", 25),
          ("dcl3Eth", 26),
          ("de3", 212),
          ("de3f", 213),
          ("dim100", 208),
          ("dim10BaseT", 206),
          ("dimE1", 207),
          ("dimETUR", 200),
          ("dimHssi", 204),
          ("dimRS422", 202),
          ("dimRS530", 203),
          ("dimV35", 201),
          ("dimX21", 205),
          ("dstm1", 217),
          ("dstm1R", 218),
          ("dstm1s1", 214),
          ("dstm1s2", 215),
          ("dt3", 210),
          ("dt3G747", 209),
          ("dt3f", 211),
          ("empty", 2),
          ("eth2", 282),
          ("eth8", 284),
          ("f2stm1", 219),
          ("fLAN", 83),
          ("fstm1", 216),
          ("gCl1", 18),
          ("gCl2", 19),
          ("gigabitEth", 280),
          ("gigabitEth2", 281),
          ("gigabitEth8", 283),
          ("goc3", 221),
          ("goc3D", 223),
          ("gstm1", 220),
          ("gstm1D", 222),
          ("kCl", 21),
          ("kClEth", 24),
          ("kHS1", 110),
          ("kHS2", 111),
          ("kHS703", 114),
          ("kHSU1", 112),
          ("kHSU2", 113),
          ("kLS1", 70),
          ("kLS1New", 71),
          ("kLS2", 72),
          ("kMBE", 81),
          ("kMBENew", 82),
          ("kML1", 50),
          ("kML10", 59),
          ("kML10New", 61),
          ("kML11FO", 63),
          ("kML11RJ45", 62),
          ("kML2", 51),
          ("kML3", 52),
          ("kML4", 53),
          ("kML5", 54),
          ("kML6", 55),
          ("kML7", 56),
          ("kML8", 57),
          ("kMLF", 60),
          ("kTRE", 80),
          ("kVC1EM", 130),
          ("kVC1FXO", 131),
          ("kVC1FXS", 132),
          ("kVC1MEM", 133),
          ("kVC1MFXO", 134),
          ("kVC1MFXS", 135),
          ("kVC1MFXSW", 136),
          ("kVC2EM", 137),
          ("kVC2FXO", 138),
          ("kVC2FXS", 139),
          ("kVC2s1EM", 140),
          ("kVC2s1FXO", 141),
          ("kVC2s1FXS", 142),
          ("kVC3EM", 143),
          ("kVC3FXO", 144),
          ("kVC3FXS", 145),
          ("kVC3S0", 146),
          ("kVF1EM", 170),
          ("kVF1FXO", 171),
          ("kVF1FXS", 172),
          ("kVF3EM", 173),
          ("kVF3FXO", 174),
          ("kVF3FXS", 175),
          ("kVF4EM", 176),
          ("kVF4FXO", 177),
          ("kVF4FXO3", 189),
          ("kVF4FXS", 178),
          ("kVF4FXS3", 190),
          ("kVF4FXSW", 179),
          ("kVF4NS0", 191),
          ("kVF4S0", 180),
          ("kVF5E1PbxSlave", 182),
          ("kVF5E1PbxSlaveNew", 186),
          ("kVF5PbxE1", 181),
          ("kVF5PbxE1New", 185),
          ("kVF5PbxT1", 183),
          ("kVF5PbxT1New", 187),
          ("kVF5T1PbxSlave", 184),
          ("kVF5T1PbxSlaveNew", 188),
          ("kVF6E1s16", 192),
          ("kVF6E1s31", 193),
          ("kVF6T1s12", 194),
          ("kVF6T1s24", 195),
          ("kVF8EM", 196),
          ("kVF8FXO", 197),
          ("kVF8FXS", 198),
          ("kai", 90),
          ("kdi", 91),
          ("kdiCH", 92),
          ("psAC", 10),
          ("psDC", 11),
          ("serverE1", 270),
          ("serverE1Pw", 272),
          ("serverT1", 271),
          ("serverT1Pw", 273),
          ("unknown", 1),
          ("vc12E1UeNe", 318),
          ("vc12E1UeNi", 319),
          ("vc12E1UiNe", 320),
          ("vc12E1UiNi", 321),
          ("vc12T1UeNe", 322),
          ("vc12T1UeNi", 323),
          ("vc12T1UiNe", 324),
          ("vc12T1UiNi", 325),
          ("vca12E1UeNe", 334),
          ("vca12E1UeNi", 335),
          ("vca12E1UiNe", 336),
          ("vca12E1UiNi", 337),
          ("vca12T1UeNe", 338),
          ("vca12T1UeNi", 339),
          ("vca12T1UiNe", 340),
          ("vca12T1UiNi", 341),
          ("vca16E1UeNe", 326),
          ("vca16E1UeNi", 327),
          ("vca16E1UiNe", 328),
          ("vca16E1UiNi", 329),
          ("vca16T1UeNe", 330),
          ("vca16T1UeNi", 331),
          ("vca16T1UiNe", 332),
          ("vca16T1UiNi", 333),
          ("vmg12E1Ue", 346),
          ("vmg12E1Ui", 347),
          ("vmg12T1Ue", 348),
          ("vmg12T1Ui", 349),
          ("vmg16E1Ue", 342),
          ("vmg16E1Ui", 343),
          ("vmg16T1Ue", 344),
          ("vmg16T1Ui", 345),
          ("vmxE1VeDe", 310),
          ("vmxE1VeDi", 311),
          ("vmxE1ViDe", 312),
          ("vmxE1ViDi", 313),
          ("vmxT1VeDe", 314),
          ("vmxT1VeDi", 315),
          ("vmxT1ViDe", 316),
          ("vmxT1ViDi", 317))
    )


_MdlCProgCardType_Type.__name__ = "Integer32"
_MdlCProgCardType_Object = MibTableColumn
mdlCProgCardType = _MdlCProgCardType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 2, 1, 3),
    _MdlCProgCardType_Type()
)
mdlCProgCardType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlCProgCardType.setStatus("current")
_MdlCNoOfExtPrt_Type = Integer32
_MdlCNoOfExtPrt_Object = MibTableColumn
mdlCNoOfExtPrt = _MdlCNoOfExtPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 2, 1, 4),
    _MdlCNoOfExtPrt_Type()
)
mdlCNoOfExtPrt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCNoOfExtPrt.setStatus("current")
_MdlCNoOfIntPrt_Type = Integer32
_MdlCNoOfIntPrt_Object = MibTableColumn
mdlCNoOfIntPrt = _MdlCNoOfIntPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 2, 1, 5),
    _MdlCNoOfIntPrt_Type()
)
mdlCNoOfIntPrt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlCNoOfIntPrt.setStatus("current")
_MdlCParam_Type = Integer32
_MdlCParam_Object = MibTableColumn
mdlCParam = _MdlCParam_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 2, 1, 6),
    _MdlCParam_Type()
)
mdlCParam.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlCParam.setStatus("current")
_MdlAlr_ObjectIdentity = ObjectIdentity
mdlAlr = _MdlAlr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3)
)
_MdlAlrTable_Object = MibTable
mdlAlrTable = _MdlAlrTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1)
)
if mibBuilder.loadTexts:
    mdlAlrTable.setStatus("current")
_MdlAlrEntry_Object = MibTableRow
mdlAlrEntry = _MdlAlrEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1)
)
mdlAlrEntry.setIndexNames(
    (0, "RAD-MIB", "mdlAlrSltIdx"),
    (0, "RAD-MIB", "mdlAlrIdx"),
)
if mibBuilder.loadTexts:
    mdlAlrEntry.setStatus("current")
_MdlAlrIdx_Type = Integer32
_MdlAlrIdx_Object = MibTableColumn
mdlAlrIdx = _MdlAlrIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1, 1),
    _MdlAlrIdx_Type()
)
mdlAlrIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlAlrIdx.setStatus("current")


class _MdlAlrSltIdx_Type(Integer32):
    """Custom type mdlAlrSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("kmxCl", 105),
          ("kmxIO1", 107),
          ("kmxIO10", 116),
          ("kmxIO11", 117),
          ("kmxIO12", 118),
          ("kmxIO2", 108),
          ("kmxIO3", 109),
          ("kmxIO4", 110),
          ("kmxIO5", 111),
          ("kmxIO6", 112),
          ("kmxIO7", 113),
          ("kmxIO8", 114),
          ("kmxIO9", 115),
          ("kmxMlA", 103),
          ("kmxMlB", 104),
          ("kmxOpt", 106),
          ("kmxPsA", 101),
          ("kmxPsB", 102),
          ("psA", 1),
          ("psB", 2),
          ("psC", 20))
    )


_MdlAlrSltIdx_Type.__name__ = "Integer32"
_MdlAlrSltIdx_Object = MibTableColumn
mdlAlrSltIdx = _MdlAlrSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1, 2),
    _MdlAlrSltIdx_Type()
)
mdlAlrSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlAlrSltIdx.setStatus("current")
_MdlAlrCode_Type = Integer32
_MdlAlrCode_Object = MibTableColumn
mdlAlrCode = _MdlAlrCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1, 3),
    _MdlAlrCode_Type()
)
mdlAlrCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlAlrCode.setStatus("current")


class _MdlAlrState_Type(Integer32):
    """Custom type mdlAlrState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("warning", 6))
    )


_MdlAlrState_Type.__name__ = "Integer32"
_MdlAlrState_Object = MibTableColumn
mdlAlrState = _MdlAlrState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1, 4),
    _MdlAlrState_Type()
)
mdlAlrState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlAlrState.setStatus("current")


class _MdlAlarmMask_Type(Integer32):
    """Custom type mdlAlarmMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlAlarmMask_Type.__name__ = "Integer32"
_MdlAlarmMask_Object = MibTableColumn
mdlAlarmMask = _MdlAlarmMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1, 5),
    _MdlAlarmMask_Type()
)
mdlAlarmMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlAlarmMask.setStatus("current")


class _MdlAlarmInvert_Type(Integer32):
    """Custom type mdlAlarmInvert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlAlarmInvert_Type.__name__ = "Integer32"
_MdlAlarmInvert_Object = MibTableColumn
mdlAlarmInvert = _MdlAlarmInvert_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1, 6),
    _MdlAlarmInvert_Type()
)
mdlAlarmInvert.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlAlarmInvert.setStatus("current")


class _MdlAlarmOnOff_Type(Integer32):
    """Custom type mdlAlarmOnOff based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_MdlAlarmOnOff_Type.__name__ = "Integer32"
_MdlAlarmOnOff_Object = MibTableColumn
mdlAlarmOnOff = _MdlAlarmOnOff_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1, 7),
    _MdlAlarmOnOff_Type()
)
mdlAlarmOnOff.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlAlarmOnOff.setStatus("current")
_MdlAlarmCounter_Type = Integer32
_MdlAlarmCounter_Object = MibTableColumn
mdlAlarmCounter = _MdlAlarmCounter_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1, 8),
    _MdlAlarmCounter_Type()
)
mdlAlarmCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlAlarmCounter.setStatus("current")
_MdlAlrMaskTable_Object = MibTable
mdlAlrMaskTable = _MdlAlrMaskTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 2)
)
if mibBuilder.loadTexts:
    mdlAlrMaskTable.setStatus("current")
_MdlAlrMaskEntry_Object = MibTableRow
mdlAlrMaskEntry = _MdlAlrMaskEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 2, 1)
)
mdlAlrMaskEntry.setIndexNames(
    (0, "RAD-MIB", "mdlAlrMaskSltIdx"),
)
if mibBuilder.loadTexts:
    mdlAlrMaskEntry.setStatus("current")


class _MdlAlrMaskSltIdx_Type(Integer32):
    """Custom type mdlAlrMaskSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("kmxCl", 105),
          ("kmxIO1", 107),
          ("kmxIO10", 116),
          ("kmxIO11", 117),
          ("kmxIO12", 118),
          ("kmxIO2", 108),
          ("kmxIO3", 109),
          ("kmxIO4", 110),
          ("kmxIO5", 111),
          ("kmxIO6", 112),
          ("kmxIO7", 113),
          ("kmxIO8", 114),
          ("kmxIO9", 115),
          ("kmxMlA", 103),
          ("kmxMlB", 104),
          ("kmxOpt", 106),
          ("kmxPsA", 101),
          ("kmxPsB", 102),
          ("psA", 1),
          ("psB", 2),
          ("psC", 20))
    )


_MdlAlrMaskSltIdx_Type.__name__ = "Integer32"
_MdlAlrMaskSltIdx_Object = MibTableColumn
mdlAlrMaskSltIdx = _MdlAlrMaskSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 2, 1, 1),
    _MdlAlrMaskSltIdx_Type()
)
mdlAlrMaskSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlAlrMaskSltIdx.setStatus("current")


class _MdlAlrMask_Type(OctetString):
    """Custom type mdlAlrMask based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 10),
    )


_MdlAlrMask_Type.__name__ = "OctetString"
_MdlAlrMask_Object = MibTableColumn
mdlAlrMask = _MdlAlrMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 2, 1, 2),
    _MdlAlrMask_Type()
)
mdlAlrMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mdlAlrMask.setStatus("current")
_MdlCl_ObjectIdentity = ObjectIdentity
mdlCl = _MdlCl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2)
)
_MdlClTable_Object = MibTable
mdlClTable = _MdlClTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2, 1)
)
if mibBuilder.loadTexts:
    mdlClTable.setStatus("current")
_MdlClEntry_Object = MibTableRow
mdlClEntry = _MdlClEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2, 1, 1)
)
mdlClEntry.setIndexNames(
    (0, "RAD-MIB", "mdlClIdx"),
)
if mibBuilder.loadTexts:
    mdlClEntry.setStatus("current")


class _MdlClIdx_Type(Integer32):
    """Custom type mdlClIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4))
    )


_MdlClIdx_Type.__name__ = "Integer32"
_MdlClIdx_Object = MibTableColumn
mdlClIdx = _MdlClIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2, 1, 1, 1),
    _MdlClIdx_Type()
)
mdlClIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlClIdx.setStatus("current")
_MdlClSwchStatus_Type = Integer32
_MdlClSwchStatus_Object = MibTableColumn
mdlClSwchStatus = _MdlClSwchStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2, 1, 1, 2),
    _MdlClSwchStatus_Type()
)
mdlClSwchStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlClSwchStatus.setStatus("current")


class _MdlClLastFlipDate_Type(DisplayString):
    """Custom type mdlClLastFlipDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_MdlClLastFlipDate_Type.__name__ = "DisplayString"
_MdlClLastFlipDate_Object = MibTableColumn
mdlClLastFlipDate = _MdlClLastFlipDate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2, 1, 1, 3),
    _MdlClLastFlipDate_Type()
)
mdlClLastFlipDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlClLastFlipDate.setStatus("current")


class _MdlClLastFlipTime_Type(DisplayString):
    """Custom type mdlClLastFlipTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_MdlClLastFlipTime_Type.__name__ = "DisplayString"
_MdlClLastFlipTime_Object = MibTableColumn
mdlClLastFlipTime = _MdlClLastFlipTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2, 1, 1, 4),
    _MdlClLastFlipTime_Type()
)
mdlClLastFlipTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlClLastFlipTime.setStatus("current")


class _MdlClLastFlipCause_Type(DisplayString):
    """Custom type mdlClLastFlipCause based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_MdlClLastFlipCause_Type.__name__ = "DisplayString"
_MdlClLastFlipCause_Object = MibTableColumn
mdlClLastFlipCause = _MdlClLastFlipCause_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2, 1, 1, 5),
    _MdlClLastFlipCause_Type()
)
mdlClLastFlipCause.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlClLastFlipCause.setStatus("current")
_MdlPs_ObjectIdentity = ObjectIdentity
mdlPs = _MdlPs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 3)
)
_MdlPsTable_Object = MibTable
mdlPsTable = _MdlPsTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 3, 1)
)
if mibBuilder.loadTexts:
    mdlPsTable.setStatus("current")
_MdlPsEntry_Object = MibTableRow
mdlPsEntry = _MdlPsEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 3, 1, 1)
)
mdlPsEntry.setIndexNames(
    (0, "RAD-MIB", "mdlPsIdx"),
)
if mibBuilder.loadTexts:
    mdlPsEntry.setStatus("current")


class _MdlPsIdx_Type(Integer32):
    """Custom type mdlPsIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("psA", 1),
          ("psB", 2))
    )


_MdlPsIdx_Type.__name__ = "Integer32"
_MdlPsIdx_Object = MibTableColumn
mdlPsIdx = _MdlPsIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 3, 1, 1, 1),
    _MdlPsIdx_Type()
)
mdlPsIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlPsIdx.setStatus("current")


class _MdlPsStatus_Type(Integer32):
    """Custom type mdlPsStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("notActive", 1))
    )


_MdlPsStatus_Type.__name__ = "Integer32"
_MdlPsStatus_Object = MibTableColumn
mdlPsStatus = _MdlPsStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 3, 1, 1, 2),
    _MdlPsStatus_Type()
)
mdlPsStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlPsStatus.setStatus("current")


class _MdlPsTestResult_Type(Integer32):
    """Custom type mdlPsTestResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("f12V", 2),
          ("f5V", 3),
          ("ok", 1))
    )


_MdlPsTestResult_Type.__name__ = "Integer32"
_MdlPsTestResult_Object = MibTableColumn
mdlPsTestResult = _MdlPsTestResult_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 3, 1, 1, 3),
    _MdlPsTestResult_Type()
)
mdlPsTestResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mdlPsTestResult.setStatus("current")
_PrtDacsMux_ObjectIdentity = ObjectIdentity
prtDacsMux = _PrtDacsMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3)
)
_PrtGen_ObjectIdentity = ObjectIdentity
prtGen = _PrtGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1)
)
_PrtGenParamTable_Object = MibTable
prtGenParamTable = _PrtGenParamTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1)
)
if mibBuilder.loadTexts:
    prtGenParamTable.setStatus("current")
_PrtGenEntry_Object = MibTableRow
prtGenEntry = _PrtGenEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1)
)
prtGenEntry.setIndexNames(
    (0, "RAD-MIB", "prtGenPrtIdx"),
)
if mibBuilder.loadTexts:
    prtGenEntry.setStatus("current")
_PrtGenPrtIdx_Type = Integer32
_PrtGenPrtIdx_Object = MibTableColumn
prtGenPrtIdx = _PrtGenPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 1),
    _PrtGenPrtIdx_Type()
)
prtGenPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenPrtIdx.setStatus("current")


class _PrtGenSlt_Type(Integer32):
    """Custom type prtGenSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("kmxCl", 105),
          ("kmxIO1", 107),
          ("kmxIO10", 116),
          ("kmxIO11", 117),
          ("kmxIO12", 118),
          ("kmxIO2", 108),
          ("kmxIO3", 109),
          ("kmxIO4", 110),
          ("kmxIO5", 111),
          ("kmxIO6", 112),
          ("kmxIO7", 113),
          ("kmxIO8", 114),
          ("kmxIO9", 115),
          ("kmxMlA", 103),
          ("kmxMlB", 104),
          ("kmxOpt", 106),
          ("standAlone", 255))
    )


_PrtGenSlt_Type.__name__ = "Integer32"
_PrtGenSlt_Object = MibTableColumn
prtGenSlt = _PrtGenSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 2),
    _PrtGenSlt_Type()
)
prtGenSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenSlt.setStatus("current")


class _PrtGenExtInt_Type(Integer32):
    """Custom type prtGenExtInt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("external", 2),
          ("internal", 3))
    )


_PrtGenExtInt_Type.__name__ = "Integer32"
_PrtGenExtInt_Object = MibTableColumn
prtGenExtInt = _PrtGenExtInt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 3),
    _PrtGenExtInt_Type()
)
prtGenExtInt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenExtInt.setStatus("current")
_PrtGenIfIndex_Type = Integer32
_PrtGenIfIndex_Object = MibTableColumn
prtGenIfIndex = _PrtGenIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 4),
    _PrtGenIfIndex_Type()
)
prtGenIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenIfIndex.setStatus("current")


class _PrtGenActiveStatus_Type(Integer32):
    """Custom type prtGenActiveStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("notUsed", 2),
          ("offLine", 3),
          ("offLineRedundancy", 5),
          ("onLine", 4),
          ("onLineRedundancy", 6),
          ("unknown", 1))
    )


_PrtGenActiveStatus_Type.__name__ = "Integer32"
_PrtGenActiveStatus_Object = MibTableColumn
prtGenActiveStatus = _PrtGenActiveStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 5),
    _PrtGenActiveStatus_Type()
)
prtGenActiveStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenActiveStatus.setStatus("current")


class _PrtGenAlrStatus_Type(Integer32):
    """Custom type prtGenAlrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 5),
          ("major", 3),
          ("minor", 4),
          ("off", 2),
          ("warning", 6))
    )


_PrtGenAlrStatus_Type.__name__ = "Integer32"
_PrtGenAlrStatus_Object = MibTableColumn
prtGenAlrStatus = _PrtGenAlrStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 6),
    _PrtGenAlrStatus_Type()
)
prtGenAlrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenAlrStatus.setStatus("current")


class _PrtGenTestStatus_Type(Integer32):
    """Custom type prtGenTestStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtGenTestStatus_Type.__name__ = "Integer32"
_PrtGenTestStatus_Object = MibTableColumn
prtGenTestStatus = _PrtGenTestStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 7),
    _PrtGenTestStatus_Type()
)
prtGenTestStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenTestStatus.setStatus("current")
_PrtGenTestMask_Type = Integer32
_PrtGenTestMask_Object = MibTableColumn
prtGenTestMask = _PrtGenTestMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 8),
    _PrtGenTestMask_Type()
)
prtGenTestMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenTestMask.setStatus("current")
_PrtGenTestCmd_Type = Integer32
_PrtGenTestCmd_Object = MibTableColumn
prtGenTestCmd = _PrtGenTestCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 9),
    _PrtGenTestCmd_Type()
)
prtGenTestCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenTestCmd.setStatus("current")
_PrtGenTestRunning_Type = Integer32
_PrtGenTestRunning_Object = MibTableColumn
prtGenTestRunning = _PrtGenTestRunning_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 10),
    _PrtGenTestRunning_Type()
)
prtGenTestRunning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenTestRunning.setStatus("current")


class _PrtGenType_Type(Integer32):
    """Custom type prtGenType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              255)
        )
    )
    namedValues = NamedValues(
        *(("dim", 13),
          ("e1", 3),
          ("e1Dsu", 8),
          ("e1F", 12),
          ("e1Ltu", 7),
          ("e3", 16),
          ("e3f", 18),
          ("eth", 27),
          ("hdsl", 9),
          ("hs", 4),
          ("idsl", 19),
          ("isdn", 14),
          ("msdsl", 23),
          ("other", 255),
          ("shdsl", 28),
          ("soh", 26),
          ("sp", 10),
          ("stm1", 20),
          ("t1", 2),
          ("t1Csu", 5),
          ("t1Dsu", 6),
          ("t1F", 11),
          ("t3", 15),
          ("t3f", 17),
          ("unknown", 1),
          ("vc11", 24),
          ("vc12", 22),
          ("vc3", 25),
          ("vc4", 21))
    )


_PrtGenType_Type.__name__ = "Integer32"
_PrtGenType_Object = MibTableColumn
prtGenType = _PrtGenType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 11),
    _PrtGenType_Type()
)
prtGenType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenType.setStatus("current")


class _PrtGenInterfaceType_Type(DisplayString):
    """Custom type prtGenInterfaceType based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_PrtGenInterfaceType_Type.__name__ = "DisplayString"
_PrtGenInterfaceType_Object = MibTableColumn
prtGenInterfaceType = _PrtGenInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 12),
    _PrtGenInterfaceType_Type()
)
prtGenInterfaceType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenInterfaceType.setStatus("current")


class _PrtGenAlrClearCmd_Type(Integer32):
    """Custom type prtGenAlrClearCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOp", 1),
          ("off", 2),
          ("on", 3))
    )


_PrtGenAlrClearCmd_Type.__name__ = "Integer32"
_PrtGenAlrClearCmd_Object = MibTableColumn
prtGenAlrClearCmd = _PrtGenAlrClearCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 13),
    _PrtGenAlrClearCmd_Type()
)
prtGenAlrClearCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenAlrClearCmd.setStatus("current")


class _PrtGenAlrMaskAll_Type(Integer32):
    """Custom type prtGenAlrMaskAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("noOp", 1),
          ("off", 2),
          ("on", 3))
    )


_PrtGenAlrMaskAll_Type.__name__ = "Integer32"
_PrtGenAlrMaskAll_Object = MibTableColumn
prtGenAlrMaskAll = _PrtGenAlrMaskAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 14),
    _PrtGenAlrMaskAll_Type()
)
prtGenAlrMaskAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenAlrMaskAll.setStatus("current")
_PrtGenParamStatus_Type = OctetString
_PrtGenParamStatus_Object = MibTableColumn
prtGenParamStatus = _PrtGenParamStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 15),
    _PrtGenParamStatus_Type()
)
prtGenParamStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenParamStatus.setStatus("current")


class _PrtGenRdnStatus_Type(Integer32):
    """Custom type prtGenRdnStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("off", 2),
          ("on", 3))
    )


_PrtGenRdnStatus_Type.__name__ = "Integer32"
_PrtGenRdnStatus_Object = MibTableColumn
prtGenRdnStatus = _PrtGenRdnStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 16),
    _PrtGenRdnStatus_Type()
)
prtGenRdnStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenRdnStatus.setStatus("current")
_PrtGenTestMaskXP_Type = OctetString
_PrtGenTestMaskXP_Object = MibTableColumn
prtGenTestMaskXP = _PrtGenTestMaskXP_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 17),
    _PrtGenTestMaskXP_Type()
)
prtGenTestMaskXP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenTestMaskXP.setStatus("current")
_PrtGenTestCmdXP_Type = OctetString
_PrtGenTestCmdXP_Object = MibTableColumn
prtGenTestCmdXP = _PrtGenTestCmdXP_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 18),
    _PrtGenTestCmdXP_Type()
)
prtGenTestCmdXP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenTestCmdXP.setStatus("current")
_PrtGenTestRunningXP_Type = OctetString
_PrtGenTestRunningXP_Object = MibTableColumn
prtGenTestRunningXP = _PrtGenTestRunningXP_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 19),
    _PrtGenTestRunningXP_Type()
)
prtGenTestRunningXP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenTestRunningXP.setStatus("current")
_PrtGenTestDurationTable_Object = MibTable
prtGenTestDurationTable = _PrtGenTestDurationTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 2)
)
if mibBuilder.loadTexts:
    prtGenTestDurationTable.setStatus("current")
_PrtGenTestDurationEntry_Object = MibTableRow
prtGenTestDurationEntry = _PrtGenTestDurationEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 2, 1)
)
prtGenTestDurationEntry.setIndexNames(
    (0, "RAD-MIB", "prtGenTestPrtIdx"),
    (0, "RAD-MIB", "prtGenTestIdx"),
)
if mibBuilder.loadTexts:
    prtGenTestDurationEntry.setStatus("current")
_PrtGenTestPrtIdx_Type = Integer32
_PrtGenTestPrtIdx_Object = MibTableColumn
prtGenTestPrtIdx = _PrtGenTestPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 2, 1, 1),
    _PrtGenTestPrtIdx_Type()
)
prtGenTestPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenTestPrtIdx.setStatus("current")


class _PrtGenTestIdx_Type(Integer32):
    """Custom type prtGenTestIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              14,
              15,
              16,
              20,
              21,
              22,
              23,
              26,
              27,
              28,
              30,
              32,
              33,
              34)
        )
    )
    namedValues = NamedValues(
        *(("bert", 3),
          ("bertOnRemUnit", 11),
          ("downstreamAis", 32),
          ("dteLoop", 16),
          ("hdslRxInband", 21),
          ("hdslTxInband", 20),
          ("lb1", 27),
          ("lb2", 28),
          ("lbbd", 26),
          ("llb", 6),
          ("llbOnRemUnit", 12),
          ("localLoop", 1),
          ("monitor", 22),
          ("plb", 4),
          ("remLoopOnRemUnit", 10),
          ("remoteLoop", 2),
          ("rlb", 5),
          ("rxInband", 9),
          ("sendRdi", 34),
          ("toneInjection", 7),
          ("tsRemoteLoop", 30),
          ("txInband", 8),
          ("txLlb", 15),
          ("txPlb", 14),
          ("upstreamAis", 33),
          ("userLineLoopback", 23))
    )


_PrtGenTestIdx_Type.__name__ = "Integer32"
_PrtGenTestIdx_Object = MibTableColumn
prtGenTestIdx = _PrtGenTestIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 2, 1, 2),
    _PrtGenTestIdx_Type()
)
prtGenTestIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenTestIdx.setStatus("current")
_PrtGenTestDuration_Type = Integer32
_PrtGenTestDuration_Object = MibTableColumn
prtGenTestDuration = _PrtGenTestDuration_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 2, 1, 3),
    _PrtGenTestDuration_Type()
)
prtGenTestDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenTestDuration.setStatus("current")
_PrtGenTsTable_Object = MibTable
prtGenTsTable = _PrtGenTsTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3)
)
if mibBuilder.loadTexts:
    prtGenTsTable.setStatus("current")
_PrtGenTsEntry_Object = MibTableRow
prtGenTsEntry = _PrtGenTsEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3, 1)
)
prtGenTsEntry.setIndexNames(
    (0, "RAD-MIB", "prtGenTsCnfgIdx"),
    (0, "RAD-MIB", "prtGenTsPrtIdx"),
    (0, "RAD-MIB", "prtGenTsIdx"),
)
if mibBuilder.loadTexts:
    prtGenTsEntry.setStatus("current")


class _PrtGenTsCnfgIdx_Type(Integer32):
    """Custom type prtGenTsCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtGenTsCnfgIdx_Type.__name__ = "Integer32"
_PrtGenTsCnfgIdx_Object = MibTableColumn
prtGenTsCnfgIdx = _PrtGenTsCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3, 1, 1),
    _PrtGenTsCnfgIdx_Type()
)
prtGenTsCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenTsCnfgIdx.setStatus("current")
_PrtGenTsPrtIdx_Type = Integer32
_PrtGenTsPrtIdx_Object = MibTableColumn
prtGenTsPrtIdx = _PrtGenTsPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3, 1, 2),
    _PrtGenTsPrtIdx_Type()
)
prtGenTsPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenTsPrtIdx.setStatus("current")
_PrtGenTsIdx_Type = Integer32
_PrtGenTsIdx_Object = MibTableColumn
prtGenTsIdx = _PrtGenTsIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3, 1, 3),
    _PrtGenTsIdx_Type()
)
prtGenTsIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtGenTsIdx.setStatus("current")


class _PrtGenTsType_Type(Integer32):
    """Custom type prtGenTsType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("data", 3),
          ("mng", 6),
          ("nc", 5),
          ("unknown", 1),
          ("vcMP", 4),
          ("voice", 2))
    )


_PrtGenTsType_Type.__name__ = "Integer32"
_PrtGenTsType_Object = MibTableColumn
prtGenTsType = _PrtGenTsType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3, 1, 4),
    _PrtGenTsType_Type()
)
prtGenTsType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenTsType.setStatus("current")
_PrtGenTsIConPrt_Type = Integer32
_PrtGenTsIConPrt_Object = MibTableColumn
prtGenTsIConPrt = _PrtGenTsIConPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3, 1, 5),
    _PrtGenTsIConPrt_Type()
)
prtGenTsIConPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenTsIConPrt.setStatus("current")
_PrtGenTsIConTs_Type = Integer32
_PrtGenTsIConTs_Object = MibTableColumn
prtGenTsIConTs = _PrtGenTsIConTs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3, 1, 6),
    _PrtGenTsIConTs_Type()
)
prtGenTsIConTs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtGenTsIConTs.setStatus("current")
_PrtAlr_ObjectIdentity = ObjectIdentity
prtAlr = _PrtAlr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4)
)
_PrtSAlarmTable_Object = MibTable
prtSAlarmTable = _PrtSAlarmTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1)
)
if mibBuilder.loadTexts:
    prtSAlarmTable.setStatus("current")
_PrtSAlarmEntry_Object = MibTableRow
prtSAlarmEntry = _PrtSAlarmEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1)
)
prtSAlarmEntry.setIndexNames(
    (0, "RAD-MIB", "prtSAlarmPrtIdx"),
    (0, "RAD-MIB", "prtSAlarmIdx"),
)
if mibBuilder.loadTexts:
    prtSAlarmEntry.setStatus("current")
_PrtSAlarmIdx_Type = Integer32
_PrtSAlarmIdx_Object = MibTableColumn
prtSAlarmIdx = _PrtSAlarmIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1, 1),
    _PrtSAlarmIdx_Type()
)
prtSAlarmIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlarmIdx.setStatus("current")
_PrtSAlarmPrtIdx_Type = Integer32
_PrtSAlarmPrtIdx_Object = MibTableColumn
prtSAlarmPrtIdx = _PrtSAlarmPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1, 2),
    _PrtSAlarmPrtIdx_Type()
)
prtSAlarmPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlarmPrtIdx.setStatus("current")
_PrtSAlarmCode_Type = Integer32
_PrtSAlarmCode_Object = MibTableColumn
prtSAlarmCode = _PrtSAlarmCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1, 3),
    _PrtSAlarmCode_Type()
)
prtSAlarmCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlarmCode.setStatus("current")


class _PrtSAlarmState_Type(Integer32):
    """Custom type prtSAlarmState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("warning", 6))
    )


_PrtSAlarmState_Type.__name__ = "Integer32"
_PrtSAlarmState_Object = MibTableColumn
prtSAlarmState = _PrtSAlarmState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1, 4),
    _PrtSAlarmState_Type()
)
prtSAlarmState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlarmState.setStatus("current")


class _PrtSAlarmMask_Type(Integer32):
    """Custom type prtSAlarmMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtSAlarmMask_Type.__name__ = "Integer32"
_PrtSAlarmMask_Object = MibTableColumn
prtSAlarmMask = _PrtSAlarmMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1, 5),
    _PrtSAlarmMask_Type()
)
prtSAlarmMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlarmMask.setStatus("current")


class _PrtSAlarmInvert_Type(Integer32):
    """Custom type prtSAlarmInvert based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtSAlarmInvert_Type.__name__ = "Integer32"
_PrtSAlarmInvert_Object = MibTableColumn
prtSAlarmInvert = _PrtSAlarmInvert_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1, 6),
    _PrtSAlarmInvert_Type()
)
prtSAlarmInvert.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlarmInvert.setStatus("current")


class _PrtSAlarmOnOff_Type(Integer32):
    """Custom type prtSAlarmOnOff based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtSAlarmOnOff_Type.__name__ = "Integer32"
_PrtSAlarmOnOff_Object = MibTableColumn
prtSAlarmOnOff = _PrtSAlarmOnOff_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1, 7),
    _PrtSAlarmOnOff_Type()
)
prtSAlarmOnOff.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlarmOnOff.setStatus("current")
_PrtSAlarmCounter_Type = Integer32
_PrtSAlarmCounter_Object = MibTableColumn
prtSAlarmCounter = _PrtSAlarmCounter_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1, 8),
    _PrtSAlarmCounter_Type()
)
prtSAlarmCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSAlarmCounter.setStatus("current")
_PrtAlrMaskTable_Object = MibTable
prtAlrMaskTable = _PrtAlrMaskTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 2)
)
if mibBuilder.loadTexts:
    prtAlrMaskTable.setStatus("current")
_PrtAlrMaskEntry_Object = MibTableRow
prtAlrMaskEntry = _PrtAlrMaskEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 2, 1)
)
prtAlrMaskEntry.setIndexNames(
    (0, "RAD-MIB", "prtAlrMaskPrtIdx"),
)
if mibBuilder.loadTexts:
    prtAlrMaskEntry.setStatus("current")
_PrtAlrMaskPrtIdx_Type = Integer32
_PrtAlrMaskPrtIdx_Object = MibTableColumn
prtAlrMaskPrtIdx = _PrtAlrMaskPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 2, 1, 1),
    _PrtAlrMaskPrtIdx_Type()
)
prtAlrMaskPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtAlrMaskPrtIdx.setStatus("current")


class _PrtAlrMask_Type(OctetString):
    """Custom type prtAlrMask based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_PrtAlrMask_Type.__name__ = "OctetString"
_PrtAlrMask_Object = MibTableColumn
prtAlrMask = _PrtAlrMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 2, 1, 2),
    _PrtAlrMask_Type()
)
prtAlrMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtAlrMask.setStatus("current")
_PrtBertTable_Object = MibTable
prtBertTable = _PrtBertTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5)
)
if mibBuilder.loadTexts:
    prtBertTable.setStatus("current")
_PrtBertEntry_Object = MibTableRow
prtBertEntry = _PrtBertEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1)
)
prtBertEntry.setIndexNames(
    (0, "RAD-MIB", "prtBertPrtIdx"),
)
if mibBuilder.loadTexts:
    prtBertEntry.setStatus("current")
_PrtBertPrtIdx_Type = Integer32
_PrtBertPrtIdx_Object = MibTableColumn
prtBertPrtIdx = _PrtBertPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 1),
    _PrtBertPrtIdx_Type()
)
prtBertPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtBertPrtIdx.setStatus("current")


class _PrtBertPattern_Type(Integer32):
    """Custom type prtBertPattern based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              255)
        )
    )
    namedValues = NamedValues(
        *(("alternate", 26),
          ("mark", 27),
          ("notApplicable", 255),
          ("p1M7S", 24),
          ("p1S7M", 25),
          ("p2047", 8),
          ("p2E10m1", 7),
          ("p2E11m1", 29),
          ("p2E15m1", 9),
          ("p2E17m1", 10),
          ("p2E18m1", 11),
          ("p2E20m1", 12),
          ("p2E21m1", 14),
          ("p2E22m1", 15),
          ("p2E23m1", 16),
          ("p2E25m1", 17),
          ("p2E28m1", 18),
          ("p2E29m1", 19),
          ("p2E31m1", 20),
          ("p2E32m1", 21),
          ("p2E3m1", 1),
          ("p2E4m1", 2),
          ("p2E5m1", 3),
          ("p2E6m1", 4),
          ("p2E7m1", 5),
          ("p511", 6),
          ("p63", 23),
          ("qrss", 13),
          ("rj011", 22),
          ("space", 28))
    )


_PrtBertPattern_Type.__name__ = "Integer32"
_PrtBertPattern_Object = MibTableColumn
prtBertPattern = _PrtBertPattern_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 2),
    _PrtBertPattern_Type()
)
prtBertPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtBertPattern.setStatus("current")


class _PrtBertInjectRate_Type(Integer32):
    """Custom type prtBertInjectRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              255)
        )
    )
    namedValues = NamedValues(
        *(("noError", 1),
          ("notApplicable", 255),
          ("r10Em1", 2),
          ("r10Em2", 3),
          ("r10Em3", 4),
          ("r10Em4", 5),
          ("r10Em5", 6),
          ("r10Em6", 7),
          ("r10Em7", 8),
          ("single", 9))
    )


_PrtBertInjectRate_Type.__name__ = "Integer32"
_PrtBertInjectRate_Object = MibTableColumn
prtBertInjectRate = _PrtBertInjectRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 3),
    _PrtBertInjectRate_Type()
)
prtBertInjectRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtBertInjectRate.setStatus("current")


class _PrtBertInjectErrRateCmd_Type(Integer32):
    """Custom type prtBertInjectErrRateCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtBertInjectErrRateCmd_Type.__name__ = "Integer32"
_PrtBertInjectErrRateCmd_Object = MibTableColumn
prtBertInjectErrRateCmd = _PrtBertInjectErrRateCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 4),
    _PrtBertInjectErrRateCmd_Type()
)
prtBertInjectErrRateCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtBertInjectErrRateCmd.setStatus("current")


class _PrtBertInjectSingleErrCmd_Type(Integer32):
    """Custom type prtBertInjectSingleErrCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtBertInjectSingleErrCmd_Type.__name__ = "Integer32"
_PrtBertInjectSingleErrCmd_Object = MibTableColumn
prtBertInjectSingleErrCmd = _PrtBertInjectSingleErrCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 5),
    _PrtBertInjectSingleErrCmd_Type()
)
prtBertInjectSingleErrCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtBertInjectSingleErrCmd.setStatus("current")
_PrtBertRunTime_Type = Integer32
_PrtBertRunTime_Object = MibTableColumn
prtBertRunTime = _PrtBertRunTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 6),
    _PrtBertRunTime_Type()
)
prtBertRunTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtBertRunTime.setStatus("current")
_PrtBertESs_Type = Integer32
_PrtBertESs_Object = MibTableColumn
prtBertESs = _PrtBertESs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 7),
    _PrtBertESs_Type()
)
prtBertESs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtBertESs.setStatus("current")
_PrtBertSyncLoss_Type = Integer32
_PrtBertSyncLoss_Object = MibTableColumn
prtBertSyncLoss = _PrtBertSyncLoss_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 8),
    _PrtBertSyncLoss_Type()
)
prtBertSyncLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtBertSyncLoss.setStatus("current")
_PrtBertErrorBits_Type = Integer32
_PrtBertErrorBits_Object = MibTableColumn
prtBertErrorBits = _PrtBertErrorBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 9),
    _PrtBertErrorBits_Type()
)
prtBertErrorBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtBertErrorBits.setStatus("current")


class _PrtBertClearCounters_Type(Integer32):
    """Custom type prtBertClearCounters based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtBertClearCounters_Type.__name__ = "Integer32"
_PrtBertClearCounters_Object = MibTableColumn
prtBertClearCounters = _PrtBertClearCounters_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 10),
    _PrtBertClearCounters_Type()
)
prtBertClearCounters.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtBertClearCounters.setStatus("current")


class _PrtBertSyncStatus_Type(Integer32):
    """Custom type prtBertSyncStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("sync", 3),
          ("syncLoss", 2))
    )


_PrtBertSyncStatus_Type.__name__ = "Integer32"
_PrtBertSyncStatus_Object = MibTableColumn
prtBertSyncStatus = _PrtBertSyncStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 11),
    _PrtBertSyncStatus_Type()
)
prtBertSyncStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtBertSyncStatus.setStatus("current")


class _PrtBertTs_Type(OctetString):
    """Custom type prtBertTs based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_PrtBertTs_Type.__name__ = "OctetString"
_PrtBertTs_Object = MibTableColumn
prtBertTs = _PrtBertTs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 12),
    _PrtBertTs_Type()
)
prtBertTs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtBertTs.setStatus("current")


class _PrtBertResult_Type(DisplayString):
    """Custom type prtBertResult based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_PrtBertResult_Type.__name__ = "DisplayString"
_PrtBertResult_Object = MibTableColumn
prtBertResult = _PrtBertResult_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 13),
    _PrtBertResult_Type()
)
prtBertResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtBertResult.setStatus("current")
_PrtBertTxBits_Type = Integer32
_PrtBertTxBits_Object = MibTableColumn
prtBertTxBits = _PrtBertTxBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 14),
    _PrtBertTxBits_Type()
)
prtBertTxBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtBertTxBits.setStatus("current")
_PrtBertRxBits_Type = Integer32
_PrtBertRxBits_Object = MibTableColumn
prtBertRxBits = _PrtBertRxBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 15),
    _PrtBertRxBits_Type()
)
prtBertRxBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtBertRxBits.setStatus("current")
_PrtBertTxErrorBits_Type = Integer32
_PrtBertTxErrorBits_Object = MibTableColumn
prtBertTxErrorBits = _PrtBertTxErrorBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 16),
    _PrtBertTxErrorBits_Type()
)
prtBertTxErrorBits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtBertTxErrorBits.setStatus("current")
_PrtMonTable_Object = MibTable
prtMonTable = _PrtMonTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6)
)
if mibBuilder.loadTexts:
    prtMonTable.setStatus("current")
_PrtMonEntry_Object = MibTableRow
prtMonEntry = _PrtMonEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6, 1)
)
prtMonEntry.setIndexNames(
    (0, "RAD-MIB", "prtMonCnfgIdx"),
    (0, "RAD-MIB", "prtMonitoringIdx"),
)
if mibBuilder.loadTexts:
    prtMonEntry.setStatus("current")


class _PrtMonCnfgIdx_Type(Integer32):
    """Custom type prtMonCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtMonCnfgIdx_Type.__name__ = "Integer32"
_PrtMonCnfgIdx_Object = MibTableColumn
prtMonCnfgIdx = _PrtMonCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6, 1, 1),
    _PrtMonCnfgIdx_Type()
)
prtMonCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtMonCnfgIdx.setStatus("current")
_PrtMonitoringIdx_Type = Integer32
_PrtMonitoringIdx_Object = MibTableColumn
prtMonitoringIdx = _PrtMonitoringIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6, 1, 2),
    _PrtMonitoringIdx_Type()
)
prtMonitoringIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtMonitoringIdx.setStatus("current")


class _PrtMonitoringEnable_Type(Integer32):
    """Custom type prtMonitoringEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_PrtMonitoringEnable_Type.__name__ = "Integer32"
_PrtMonitoringEnable_Object = MibTableColumn
prtMonitoringEnable = _PrtMonitoringEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6, 1, 3),
    _PrtMonitoringEnable_Type()
)
prtMonitoringEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMonitoringEnable.setStatus("current")


class _PrtMonitoringTSs_Type(OctetString):
    """Custom type prtMonitoringTSs based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_PrtMonitoringTSs_Type.__name__ = "OctetString"
_PrtMonitoringTSs_Object = MibTableColumn
prtMonitoringTSs = _PrtMonitoringTSs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6, 1, 4),
    _PrtMonitoringTSs_Type()
)
prtMonitoringTSs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMonitoringTSs.setStatus("current")
_PrtMonitoredPort_Type = Integer32
_PrtMonitoredPort_Object = MibTableColumn
prtMonitoredPort = _PrtMonitoredPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6, 1, 5),
    _PrtMonitoredPort_Type()
)
prtMonitoredPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMonitoredPort.setStatus("current")


class _PrtMonitoredTSs_Type(OctetString):
    """Custom type prtMonitoredTSs based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_PrtMonitoredTSs_Type.__name__ = "OctetString"
_PrtMonitoredTSs_Object = MibTableColumn
prtMonitoredTSs = _PrtMonitoredTSs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6, 1, 6),
    _PrtMonitoredTSs_Type()
)
prtMonitoredTSs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtMonitoredTSs.setStatus("current")
_PrtCfgParam_ObjectIdentity = ObjectIdentity
prtCfgParam = _PrtCfgParam_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7)
)
_PrtCfgParamTable_Object = MibTable
prtCfgParamTable = _PrtCfgParamTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1)
)
if mibBuilder.loadTexts:
    prtCfgParamTable.setStatus("current")
_PrtCfgParamEntry_Object = MibTableRow
prtCfgParamEntry = _PrtCfgParamEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1)
)
prtCfgParamEntry.setIndexNames(
    (0, "RAD-MIB", "prtCfgParamCnfgIdx"),
    (0, "RAD-MIB", "prtCfgParamIdx"),
)
if mibBuilder.loadTexts:
    prtCfgParamEntry.setStatus("current")


class _PrtCfgParamCnfgIdx_Type(Integer32):
    """Custom type prtCfgParamCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtCfgParamCnfgIdx_Type.__name__ = "Integer32"
_PrtCfgParamCnfgIdx_Object = MibTableColumn
prtCfgParamCnfgIdx = _PrtCfgParamCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 1),
    _PrtCfgParamCnfgIdx_Type()
)
prtCfgParamCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCfgParamCnfgIdx.setStatus("current")
_PrtCfgParamIdx_Type = Integer32
_PrtCfgParamIdx_Object = MibTableColumn
prtCfgParamIdx = _PrtCfgParamIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 2),
    _PrtCfgParamIdx_Type()
)
prtCfgParamIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCfgParamIdx.setStatus("current")


class _PrtCfgParamSlt_Type(Integer32):
    """Custom type prtCfgParamSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("kmxIO1", 107),
          ("kmxIO10", 116),
          ("kmxIO11", 117),
          ("kmxIO12", 118),
          ("kmxIO2", 108),
          ("kmxIO3", 109),
          ("kmxIO4", 110),
          ("kmxIO5", 111),
          ("kmxIO6", 112),
          ("kmxIO7", 113),
          ("kmxIO8", 114),
          ("kmxIO9", 115),
          ("notApplicable", 255))
    )


_PrtCfgParamSlt_Type.__name__ = "Integer32"
_PrtCfgParamSlt_Object = MibTableColumn
prtCfgParamSlt = _PrtCfgParamSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 3),
    _PrtCfgParamSlt_Type()
)
prtCfgParamSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtCfgParamSlt.setStatus("current")


class _PrtCfgParamOperatedMl_Type(Integer32):
    """Custom type prtCfgParamOperatedMl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              103,
              104)
        )
    )
    namedValues = NamedValues(
        *(("kmxMlA", 103),
          ("kmxMlB", 104),
          ("notApplicable", 1))
    )


_PrtCfgParamOperatedMl_Type.__name__ = "Integer32"
_PrtCfgParamOperatedMl_Object = MibTableColumn
prtCfgParamOperatedMl = _PrtCfgParamOperatedMl_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 4),
    _PrtCfgParamOperatedMl_Type()
)
prtCfgParamOperatedMl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtCfgParamOperatedMl.setStatus("current")


class _PrtCfgParamMlAtoMlBPrio_Type(Integer32):
    """Custom type prtCfgParamMlAtoMlBPrio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("high", 3),
          ("low", 2),
          ("notApplicable", 1))
    )


_PrtCfgParamMlAtoMlBPrio_Type.__name__ = "Integer32"
_PrtCfgParamMlAtoMlBPrio_Object = MibTableColumn
prtCfgParamMlAtoMlBPrio = _PrtCfgParamMlAtoMlBPrio_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 5),
    _PrtCfgParamMlAtoMlBPrio_Type()
)
prtCfgParamMlAtoMlBPrio.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtCfgParamMlAtoMlBPrio.setStatus("current")


class _PrtCfgParamMlBtoMlAPrio_Type(Integer32):
    """Custom type prtCfgParamMlBtoMlAPrio based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("high", 3),
          ("low", 2),
          ("notApplicable", 1))
    )


_PrtCfgParamMlBtoMlAPrio_Type.__name__ = "Integer32"
_PrtCfgParamMlBtoMlAPrio_Object = MibTableColumn
prtCfgParamMlBtoMlAPrio = _PrtCfgParamMlBtoMlAPrio_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 6),
    _PrtCfgParamMlBtoMlAPrio_Type()
)
prtCfgParamMlBtoMlAPrio.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtCfgParamMlBtoMlAPrio.setStatus("current")


class _PrtCfgParamInbandLoopDetection_Type(Integer32):
    """Custom type prtCfgParamInbandLoopDetection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_PrtCfgParamInbandLoopDetection_Type.__name__ = "Integer32"
_PrtCfgParamInbandLoopDetection_Object = MibTableColumn
prtCfgParamInbandLoopDetection = _PrtCfgParamInbandLoopDetection_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 7),
    _PrtCfgParamInbandLoopDetection_Type()
)
prtCfgParamInbandLoopDetection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtCfgParamInbandLoopDetection.setStatus("current")


class _PrtCfgParamInbandLoopPatternCfg_Type(Integer32):
    """Custom type prtCfgParamInbandLoopPatternCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("rdlLoop", 2),
          ("userConfig", 3))
    )


_PrtCfgParamInbandLoopPatternCfg_Type.__name__ = "Integer32"
_PrtCfgParamInbandLoopPatternCfg_Object = MibTableColumn
prtCfgParamInbandLoopPatternCfg = _PrtCfgParamInbandLoopPatternCfg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 8),
    _PrtCfgParamInbandLoopPatternCfg_Type()
)
prtCfgParamInbandLoopPatternCfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtCfgParamInbandLoopPatternCfg.setStatus("current")
_PrtCfgParamInbandLoopActPattern_Type = DisplayString
_PrtCfgParamInbandLoopActPattern_Object = MibTableColumn
prtCfgParamInbandLoopActPattern = _PrtCfgParamInbandLoopActPattern_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 9),
    _PrtCfgParamInbandLoopActPattern_Type()
)
prtCfgParamInbandLoopActPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtCfgParamInbandLoopActPattern.setStatus("current")
_PrtCfgParamInbandLoopDeactPattern_Type = DisplayString
_PrtCfgParamInbandLoopDeactPattern_Object = MibTableColumn
prtCfgParamInbandLoopDeactPattern = _PrtCfgParamInbandLoopDeactPattern_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 10),
    _PrtCfgParamInbandLoopDeactPattern_Type()
)
prtCfgParamInbandLoopDeactPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtCfgParamInbandLoopDeactPattern.setStatus("current")
_PrtT1E1_ObjectIdentity = ObjectIdentity
prtT1E1 = _PrtT1E1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2)
)
_PrtT1E1StatTable_Object = MibTable
prtT1E1StatTable = _PrtT1E1StatTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 1)
)
if mibBuilder.loadTexts:
    prtT1E1StatTable.setStatus("current")
_PrtT1E1StatEntry_Object = MibTableRow
prtT1E1StatEntry = _PrtT1E1StatEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 1, 1)
)
prtT1E1StatEntry.setIndexNames(
    (0, "RAD-MIB", "prtT1E1SPrtIdx"),
)
if mibBuilder.loadTexts:
    prtT1E1StatEntry.setStatus("current")
_PrtT1E1SPrtIdx_Type = Integer32
_PrtT1E1SPrtIdx_Object = MibTableColumn
prtT1E1SPrtIdx = _PrtT1E1SPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 1, 1, 1),
    _PrtT1E1SPrtIdx_Type()
)
prtT1E1SPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1SPrtIdx.setStatus("current")


class _PrtT1E1SSlt_Type(Integer32):
    """Custom type prtT1E1SSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("standAlone", 255))
    )


_PrtT1E1SSlt_Type.__name__ = "Integer32"
_PrtT1E1SSlt_Object = MibTableColumn
prtT1E1SSlt = _PrtT1E1SSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 1, 1, 2),
    _PrtT1E1SSlt_Type()
)
prtT1E1SSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1SSlt.setStatus("current")
_PrtT1E1OosCount_Type = Gauge32
_PrtT1E1OosCount_Object = MibTableColumn
prtT1E1OosCount = _PrtT1E1OosCount_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 1, 1, 3),
    _PrtT1E1OosCount_Type()
)
prtT1E1OosCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1OosCount.setStatus("current")
_PrtT1E1BpvLastMin_Type = Gauge32
_PrtT1E1BpvLastMin_Object = MibTableColumn
prtT1E1BpvLastMin = _PrtT1E1BpvLastMin_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 1, 1, 4),
    _PrtT1E1BpvLastMin_Type()
)
prtT1E1BpvLastMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1BpvLastMin.setStatus("current")
_PrtT1E1BpvMax_Type = Gauge32
_PrtT1E1BpvMax_Object = MibTableColumn
prtT1E1BpvMax = _PrtT1E1BpvMax_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 1, 1, 5),
    _PrtT1E1BpvMax_Type()
)
prtT1E1BpvMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1BpvMax.setStatus("current")
_PrtT1E1CnfgTable_Object = MibTable
prtT1E1CnfgTable = _PrtT1E1CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2)
)
if mibBuilder.loadTexts:
    prtT1E1CnfgTable.setStatus("current")
_PrtT1E1CnfgEntry_Object = MibTableRow
prtT1E1CnfgEntry = _PrtT1E1CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1)
)
prtT1E1CnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtT1E1CnfgIdx"),
    (0, "RAD-MIB", "prtT1E1PrtIdx"),
)
if mibBuilder.loadTexts:
    prtT1E1CnfgEntry.setStatus("current")


class _PrtT1E1CnfgIdx_Type(Integer32):
    """Custom type prtT1E1CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtT1E1CnfgIdx_Type.__name__ = "Integer32"
_PrtT1E1CnfgIdx_Object = MibTableColumn
prtT1E1CnfgIdx = _PrtT1E1CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 1),
    _PrtT1E1CnfgIdx_Type()
)
prtT1E1CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1CnfgIdx.setStatus("current")
_PrtT1E1PrtIdx_Type = Integer32
_PrtT1E1PrtIdx_Object = MibTableColumn
prtT1E1PrtIdx = _PrtT1E1PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 2),
    _PrtT1E1PrtIdx_Type()
)
prtT1E1PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1PrtIdx.setStatus("current")


class _PrtT1E1Slt_Type(Integer32):
    """Custom type prtT1E1Slt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              103,
              104,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("kmxIO1", 107),
          ("kmxIO10", 116),
          ("kmxIO11", 117),
          ("kmxIO12", 118),
          ("kmxIO2", 108),
          ("kmxIO3", 109),
          ("kmxIO4", 110),
          ("kmxIO5", 111),
          ("kmxIO6", 112),
          ("kmxIO7", 113),
          ("kmxIO8", 114),
          ("kmxIO9", 115),
          ("kmxMlA", 103),
          ("kmxMlB", 104),
          ("kmxOpt", 106),
          ("standAlone", 255))
    )


_PrtT1E1Slt_Type.__name__ = "Integer32"
_PrtT1E1Slt_Object = MibTableColumn
prtT1E1Slt = _PrtT1E1Slt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 3),
    _PrtT1E1Slt_Type()
)
prtT1E1Slt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1Slt.setStatus("current")


class _PrtT1E1LineType_Type(Integer32):
    """Custom type prtT1E1LineType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("d4", 3),
          ("e1", 4),
          ("e1Crc", 5),
          ("e1CrcMF", 7),
          ("e1MF", 6),
          ("esf", 2),
          ("other", 1),
          ("unframed", 8))
    )


_PrtT1E1LineType_Type.__name__ = "Integer32"
_PrtT1E1LineType_Object = MibTableColumn
prtT1E1LineType = _PrtT1E1LineType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 4),
    _PrtT1E1LineType_Type()
)
prtT1E1LineType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1LineType.setStatus("current")


class _PrtT1E1LineCode_Type(Integer32):
    """Custom type prtT1E1LineCode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("ami", 5),
          ("b8zs", 2),
          ("hdb3", 3),
          ("jbzs", 1),
          ("other", 6),
          ("zbtsi", 4))
    )


_PrtT1E1LineCode_Type.__name__ = "Integer32"
_PrtT1E1LineCode_Object = MibTableColumn
prtT1E1LineCode = _PrtT1E1LineCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 5),
    _PrtT1E1LineCode_Type()
)
prtT1E1LineCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1LineCode.setStatus("current")


class _PrtT1E1SignalMode_Type(Integer32):
    """Custom type prtT1E1SignalMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bitOriented", 3),
          ("messageOriented", 4),
          ("none", 1),
          ("robbedBit", 2))
    )


_PrtT1E1SignalMode_Type.__name__ = "Integer32"
_PrtT1E1SignalMode_Object = MibTableColumn
prtT1E1SignalMode = _PrtT1E1SignalMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 6),
    _PrtT1E1SignalMode_Type()
)
prtT1E1SignalMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1SignalMode.setStatus("current")


class _PrtT1E1Fdl_Type(Integer32):
    """Custom type prtT1E1Fdl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              8,
              16)
        )
    )
    namedValues = NamedValues(
        *(("ansi-T1-403", 2),
          ("att-54016", 4),
          ("fdl-none", 8),
          ("other", 1),
          ("transFdl", 16))
    )


_PrtT1E1Fdl_Type.__name__ = "Integer32"
_PrtT1E1Fdl_Object = MibTableColumn
prtT1E1Fdl = _PrtT1E1Fdl_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 7),
    _PrtT1E1Fdl_Type()
)
prtT1E1Fdl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1Fdl.setStatus("current")


class _PrtT1E1FdlMode_Type(Integer32):
    """Custom type prtT1E1FdlMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("carrier", 3),
          ("notApplicable", 255),
          ("other", 1),
          ("user", 2))
    )


_PrtT1E1FdlMode_Type.__name__ = "Integer32"
_PrtT1E1FdlMode_Object = MibTableColumn
prtT1E1FdlMode = _PrtT1E1FdlMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 8),
    _PrtT1E1FdlMode_Type()
)
prtT1E1FdlMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1FdlMode.setStatus("current")


class _PrtT1E1Sync_Type(Integer32):
    """Custom type prtT1E1Sync based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ccitt", 3),
          ("fast", 4),
          ("other", 1),
          ("tr62411", 2))
    )


_PrtT1E1Sync_Type.__name__ = "Integer32"
_PrtT1E1Sync_Object = MibTableColumn
prtT1E1Sync = _PrtT1E1Sync_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 9),
    _PrtT1E1Sync_Type()
)
prtT1E1Sync.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1Sync.setStatus("current")


class _PrtT1E1CGA_Type(Integer32):
    """Custom type prtT1E1CGA based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("full", 3),
          ("none", 1),
          ("trans", 2))
    )


_PrtT1E1CGA_Type.__name__ = "Integer32"
_PrtT1E1CGA_Object = MibTableColumn
prtT1E1CGA = _PrtT1E1CGA_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 10),
    _PrtT1E1CGA_Type()
)
prtT1E1CGA.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1CGA.setStatus("current")


class _PrtT1E1IdleCode_Type(OctetString):
    """Custom type prtT1E1IdleCode based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_PrtT1E1IdleCode_Type.__name__ = "OctetString"
_PrtT1E1IdleCode_Object = MibTableColumn
prtT1E1IdleCode = _PrtT1E1IdleCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 11),
    _PrtT1E1IdleCode_Type()
)
prtT1E1IdleCode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1IdleCode.setStatus("current")


class _PrtT1E1OosSignal_Type(Integer32):
    """Custom type prtT1E1OosSignal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("busyIdle", 5),
          ("forcedBusy", 4),
          ("forcedIdle", 3),
          ("idleBusy", 6),
          ("notsupported", 2))
    )


_PrtT1E1OosSignal_Type.__name__ = "Integer32"
_PrtT1E1OosSignal_Object = MibTableColumn
prtT1E1OosSignal = _PrtT1E1OosSignal_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 12),
    _PrtT1E1OosSignal_Type()
)
prtT1E1OosSignal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1OosSignal.setStatus("current")


class _PrtT1E1VoiceOos_Type(OctetString):
    """Custom type prtT1E1VoiceOos based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_PrtT1E1VoiceOos_Type.__name__ = "OctetString"
_PrtT1E1VoiceOos_Object = MibTableColumn
prtT1E1VoiceOos = _PrtT1E1VoiceOos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 13),
    _PrtT1E1VoiceOos_Type()
)
prtT1E1VoiceOos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1VoiceOos.setStatus("current")


class _PrtT1E1DataOos_Type(OctetString):
    """Custom type prtT1E1DataOos based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 4),
    )


_PrtT1E1DataOos_Type.__name__ = "OctetString"
_PrtT1E1DataOos_Object = MibTableColumn
prtT1E1DataOos = _PrtT1E1DataOos_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 14),
    _PrtT1E1DataOos_Type()
)
prtT1E1DataOos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1DataOos.setStatus("current")


class _PrtT1E1LineLengthMask_Type(Integer32):
    """Custom type prtT1E1LineLengthMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("fcc68", 7),
          ("len0p133ft", 2),
          ("len134p266ft", 3),
          ("len267p399ft", 4),
          ("len400p533ft", 5),
          ("len534p655ft", 6),
          ("unknown", 1))
    )


_PrtT1E1LineLengthMask_Type.__name__ = "Integer32"
_PrtT1E1LineLengthMask_Object = MibTableColumn
prtT1E1LineLengthMask = _PrtT1E1LineLengthMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 15),
    _PrtT1E1LineLengthMask_Type()
)
prtT1E1LineLengthMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1LineLengthMask.setStatus("current")


class _PrtT1E1TxGainMask_Type(Integer32):
    """Custom type prtT1E1TxGainMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("txGain0db", 2),
          ("txGain15db", 4),
          ("txGain22dot5db", 5),
          ("txGain7dot5db", 3))
    )


_PrtT1E1TxGainMask_Type.__name__ = "Integer32"
_PrtT1E1TxGainMask_Object = MibTableColumn
prtT1E1TxGainMask = _PrtT1E1TxGainMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 16),
    _PrtT1E1TxGainMask_Type()
)
prtT1E1TxGainMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1TxGainMask.setStatus("current")


class _PrtT1E1InbandMng_Type(Integer32):
    """Custom type prtT1E1InbandMng based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("dedicatedFr", 6),
          ("dedicatedPpp", 5),
          ("dedicatedTs", 4),
          ("fdlOrTs0", 3),
          ("internal", 7),
          ("off", 2))
    )


_PrtT1E1InbandMng_Type.__name__ = "Integer32"
_PrtT1E1InbandMng_Object = MibTableColumn
prtT1E1InbandMng = _PrtT1E1InbandMng_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 17),
    _PrtT1E1InbandMng_Type()
)
prtT1E1InbandMng.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1InbandMng.setStatus("current")


class _PrtT1E1InbandMngRate_Type(Integer32):
    """Custom type prtT1E1InbandMngRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("r12k", 4),
          ("r16k", 5),
          ("r20k", 8),
          ("r32k", 6),
          ("r4k", 2),
          ("r64k", 7),
          ("r8k", 3))
    )


_PrtT1E1InbandMngRate_Type.__name__ = "Integer32"
_PrtT1E1InbandMngRate_Object = MibTableColumn
prtT1E1InbandMngRate = _PrtT1E1InbandMngRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 18),
    _PrtT1E1InbandMngRate_Type()
)
prtT1E1InbandMngRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1InbandMngRate.setStatus("current")
_PrtT1E1DedicatedTs_Type = Integer32
_PrtT1E1DedicatedTs_Object = MibTableColumn
prtT1E1DedicatedTs = _PrtT1E1DedicatedTs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 19),
    _PrtT1E1DedicatedTs_Type()
)
prtT1E1DedicatedTs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1DedicatedTs.setStatus("current")


class _PrtT1E1InbandMngRoutProt_Type(Integer32):
    """Custom type prtT1E1InbandMngRoutProt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 2),
          ("notApplicable", 1),
          ("proprietary", 3),
          ("rip2", 4))
    )


_PrtT1E1InbandMngRoutProt_Type.__name__ = "Integer32"
_PrtT1E1InbandMngRoutProt_Object = MibTableColumn
prtT1E1InbandMngRoutProt = _PrtT1E1InbandMngRoutProt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 20),
    _PrtT1E1InbandMngRoutProt_Type()
)
prtT1E1InbandMngRoutProt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1InbandMngRoutProt.setStatus("current")


class _PrtT1E1LinkMode_Type(Integer32):
    """Custom type prtT1E1LinkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("regular", 2),
          ("transparent", 3))
    )


_PrtT1E1LinkMode_Type.__name__ = "Integer32"
_PrtT1E1LinkMode_Object = MibTableColumn
prtT1E1LinkMode = _PrtT1E1LinkMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 21),
    _PrtT1E1LinkMode_Type()
)
prtT1E1LinkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1LinkMode.setStatus("current")


class _PrtT1E1Multiplier_Type(Integer32):
    """Custom type prtT1E1Multiplier based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("br56", 2),
          ("br64", 3),
          ("notApplicable", 1))
    )


_PrtT1E1Multiplier_Type.__name__ = "Integer32"
_PrtT1E1Multiplier_Object = MibTableColumn
prtT1E1Multiplier = _PrtT1E1Multiplier_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 22),
    _PrtT1E1Multiplier_Type()
)
prtT1E1Multiplier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1Multiplier.setStatus("current")


class _PrtT1E1RxGain_Type(Integer32):
    """Custom type prtT1E1RxGain based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("longHaul", 6),
          ("notApplicable", 1),
          ("rxGain12dB", 2),
          ("rxGain20dB", 7),
          ("rxGain30dB", 3),
          ("rxGain36dB", 4),
          ("shortHaul", 5))
    )


_PrtT1E1RxGain_Type.__name__ = "Integer32"
_PrtT1E1RxGain_Object = MibTableColumn
prtT1E1RxGain = _PrtT1E1RxGain_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 23),
    _PrtT1E1RxGain_Type()
)
prtT1E1RxGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1RxGain.setStatus("current")


class _PrtT1E1RAI_Type(Integer32):
    """Custom type prtT1E1RAI based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_PrtT1E1RAI_Type.__name__ = "Integer32"
_PrtT1E1RAI_Object = MibTableColumn
prtT1E1RAI = _PrtT1E1RAI_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 24),
    _PrtT1E1RAI_Type()
)
prtT1E1RAI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1RAI.setStatus("current")


class _PrtT1E1LineMode_Type(Integer32):
    """Custom type prtT1E1LineMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("csu", 2),
          ("dsu", 3),
          ("ltu", 4),
          ("notApplicable", 1))
    )


_PrtT1E1LineMode_Type.__name__ = "Integer32"
_PrtT1E1LineMode_Object = MibTableColumn
prtT1E1LineMode = _PrtT1E1LineMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 25),
    _PrtT1E1LineMode_Type()
)
prtT1E1LineMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1LineMode.setStatus("current")
_PrtT1E1TS0SaBits_Type = OctetString
_PrtT1E1TS0SaBits_Object = MibTableColumn
prtT1E1TS0SaBits = _PrtT1E1TS0SaBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 26),
    _PrtT1E1TS0SaBits_Type()
)
prtT1E1TS0SaBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1TS0SaBits.setStatus("current")


class _PrtT1E1ConnectedTS_Type(Integer32):
    """Custom type prtT1E1ConnectedTS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtT1E1ConnectedTS_Type.__name__ = "Integer32"
_PrtT1E1ConnectedTS_Object = MibTableColumn
prtT1E1ConnectedTS = _PrtT1E1ConnectedTS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 27),
    _PrtT1E1ConnectedTS_Type()
)
prtT1E1ConnectedTS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1ConnectedTS.setStatus("current")


class _PrtT1E1Ts0SaBit_Type(Integer32):
    """Custom type prtT1E1Ts0SaBit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("mng", 3),
          ("noMng", 2),
          ("notApplicable", 1))
    )


_PrtT1E1Ts0SaBit_Type.__name__ = "Integer32"
_PrtT1E1Ts0SaBit_Object = MibTableColumn
prtT1E1Ts0SaBit = _PrtT1E1Ts0SaBit_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 28),
    _PrtT1E1Ts0SaBit_Type()
)
prtT1E1Ts0SaBit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1Ts0SaBit.setStatus("current")


class _PrtT1E1SameFeCnfg_Type(Integer32):
    """Custom type prtT1E1SameFeCnfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtT1E1SameFeCnfg_Type.__name__ = "Integer32"
_PrtT1E1SameFeCnfg_Object = MibTableColumn
prtT1E1SameFeCnfg = _PrtT1E1SameFeCnfg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 29),
    _PrtT1E1SameFeCnfg_Type()
)
prtT1E1SameFeCnfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1SameFeCnfg.setStatus("current")


class _PrtT1E1RemCrc4_Type(Integer32):
    """Custom type prtT1E1RemCrc4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtT1E1RemCrc4_Type.__name__ = "Integer32"
_PrtT1E1RemCrc4_Object = MibTableColumn
prtT1E1RemCrc4 = _PrtT1E1RemCrc4_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 30),
    _PrtT1E1RemCrc4_Type()
)
prtT1E1RemCrc4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1RemCrc4.setStatus("current")
_PrtT1E1MaxTSs_Type = Integer32
_PrtT1E1MaxTSs_Object = MibTableColumn
prtT1E1MaxTSs = _PrtT1E1MaxTSs_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 31),
    _PrtT1E1MaxTSs_Type()
)
prtT1E1MaxTSs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1MaxTSs.setStatus("current")


class _PrtT1E1EocTsConfig_Type(Integer32):
    """Custom type prtT1E1EocTsConfig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_PrtT1E1EocTsConfig_Type.__name__ = "Integer32"
_PrtT1E1EocTsConfig_Object = MibTableColumn
prtT1E1EocTsConfig = _PrtT1E1EocTsConfig_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 32),
    _PrtT1E1EocTsConfig_Type()
)
prtT1E1EocTsConfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1EocTsConfig.setStatus("current")


class _PrtT1E1Role_Type(Integer32):
    """Custom type prtT1E1Role based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("main", 3),
          ("notApplicable", 1),
          ("sub", 2))
    )


_PrtT1E1Role_Type.__name__ = "Integer32"
_PrtT1E1Role_Object = MibTableColumn
prtT1E1Role = _PrtT1E1Role_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 33),
    _PrtT1E1Role_Type()
)
prtT1E1Role.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1Role.setStatus("current")


class _PrtT1E1PppEchoFailDetection_Type(Integer32):
    """Custom type prtT1E1PppEchoFailDetection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_PrtT1E1PppEchoFailDetection_Type.__name__ = "Integer32"
_PrtT1E1PppEchoFailDetection_Object = MibTableColumn
prtT1E1PppEchoFailDetection = _PrtT1E1PppEchoFailDetection_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 34),
    _PrtT1E1PppEchoFailDetection_Type()
)
prtT1E1PppEchoFailDetection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT1E1PppEchoFailDetection.setStatus("current")
_PrtT1E1FdlMsgTable_Object = MibTable
prtT1E1FdlMsgTable = _PrtT1E1FdlMsgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 3)
)
if mibBuilder.loadTexts:
    prtT1E1FdlMsgTable.setStatus("current")
_PrtT1E1FdlMsgEntry_Object = MibTableRow
prtT1E1FdlMsgEntry = _PrtT1E1FdlMsgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 3, 1)
)
prtT1E1FdlMsgEntry.setIndexNames(
    (0, "RAD-MIB", "prtT1E1FdlMsgPrtIdx"),
    (0, "RAD-MIB", "prtT1E1FdlMsgFdlType"),
)
if mibBuilder.loadTexts:
    prtT1E1FdlMsgEntry.setStatus("current")
_PrtT1E1FdlMsgPrtIdx_Type = Integer32
_PrtT1E1FdlMsgPrtIdx_Object = MibTableColumn
prtT1E1FdlMsgPrtIdx = _PrtT1E1FdlMsgPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 3, 1, 1),
    _PrtT1E1FdlMsgPrtIdx_Type()
)
prtT1E1FdlMsgPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1FdlMsgPrtIdx.setStatus("current")


class _PrtT1E1FdlMsgFdlType_Type(Integer32):
    """Custom type prtT1E1FdlMsgFdlType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("receive", 2),
          ("send", 1))
    )


_PrtT1E1FdlMsgFdlType_Type.__name__ = "Integer32"
_PrtT1E1FdlMsgFdlType_Object = MibTableColumn
prtT1E1FdlMsgFdlType = _PrtT1E1FdlMsgFdlType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 3, 1, 2),
    _PrtT1E1FdlMsgFdlType_Type()
)
prtT1E1FdlMsgFdlType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1FdlMsgFdlType.setStatus("current")


class _PrtT1E1FdlMsgSlt_Type(Integer32):
    """Custom type prtT1E1FdlMsgSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("standAlone", 255))
    )


_PrtT1E1FdlMsgSlt_Type.__name__ = "Integer32"
_PrtT1E1FdlMsgSlt_Object = MibTableColumn
prtT1E1FdlMsgSlt = _PrtT1E1FdlMsgSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 3, 1, 3),
    _PrtT1E1FdlMsgSlt_Type()
)
prtT1E1FdlMsgSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1FdlMsgSlt.setStatus("current")
_PrtT1E1FdlMsg_Type = OctetString
_PrtT1E1FdlMsg_Object = MibTableColumn
prtT1E1FdlMsg = _PrtT1E1FdlMsg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 3, 1, 4),
    _PrtT1E1FdlMsg_Type()
)
prtT1E1FdlMsg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT1E1FdlMsg.setStatus("current")
_PrtHS_ObjectIdentity = ObjectIdentity
prtHS = _PrtHS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3)
)
_PrtHSParamTable_Object = MibTable
prtHSParamTable = _PrtHSParamTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1)
)
if mibBuilder.loadTexts:
    prtHSParamTable.setStatus("current")
_PrtHSParamEntry_Object = MibTableRow
prtHSParamEntry = _PrtHSParamEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1)
)
prtHSParamEntry.setIndexNames(
    (0, "RAD-MIB", "prtHSCnfgIdx"),
    (0, "RAD-MIB", "prtHSPrtIdx"),
)
if mibBuilder.loadTexts:
    prtHSParamEntry.setStatus("current")


class _PrtHSCnfgIdx_Type(Integer32):
    """Custom type prtHSCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtHSCnfgIdx_Type.__name__ = "Integer32"
_PrtHSCnfgIdx_Object = MibTableColumn
prtHSCnfgIdx = _PrtHSCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 1),
    _PrtHSCnfgIdx_Type()
)
prtHSCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHSCnfgIdx.setStatus("current")
_PrtHSPrtIdx_Type = Integer32
_PrtHSPrtIdx_Object = MibTableColumn
prtHSPrtIdx = _PrtHSPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 2),
    _PrtHSPrtIdx_Type()
)
prtHSPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHSPrtIdx.setStatus("current")


class _PrtHSSlt_Type(Integer32):
    """Custom type prtHSSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("standAlone", 255))
    )


_PrtHSSlt_Type.__name__ = "Integer32"
_PrtHSSlt_Object = MibTableColumn
prtHSSlt = _PrtHSSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 3),
    _PrtHSSlt_Type()
)
prtHSSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHSSlt.setStatus("current")


class _PrtHSRate_Type(Integer32):
    """Custom type prtHSRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              65,
              66,
              67,
              200)
        )
    )
    namedValues = NamedValues(
        *(("auto", 200),
          ("r0x56eq0Kbps", 1),
          ("r0x64eq0Kbps", 33),
          ("r10x56eq560Kbps", 11),
          ("r10x64eq640Kbps", 43),
          ("r11x56eq616Kbps", 12),
          ("r11x64eq704Kbps", 44),
          ("r12x56eq672Kbps", 13),
          ("r12x64eq768Kbps", 45),
          ("r13x56eq728Kbps", 14),
          ("r13x64eq832Kbps", 46),
          ("r14x56eq784Kbps", 15),
          ("r14x64eq896Kbps", 47),
          ("r15x56eq840Kbps", 16),
          ("r15x64eq960Kbps", 48),
          ("r16x56eq896Kbps", 17),
          ("r16x64eq1024Kbps", 49),
          ("r17x56eq952Kbps", 18),
          ("r17x64eq1088Kbps", 50),
          ("r18x56eq1008Kbps", 19),
          ("r18x64eq1152Kbps", 51),
          ("r19x56eq1064Kbps", 20),
          ("r19x64eq1216Kbps", 52),
          ("r1x56eq56Kbps", 2),
          ("r1x64eq64Kbps", 34),
          ("r20x56eq1120Kbps", 21),
          ("r20x64eq1280Kbps", 53),
          ("r21x56eq1176Kbps", 22),
          ("r21x64eq1344Kbps", 54),
          ("r22x56eq1232Kbps", 23),
          ("r22x64eq1408Kbps", 55),
          ("r23x56eq1288Kbps", 24),
          ("r23x64eq1472Kbps", 56),
          ("r24x56eq1344Kbps", 25),
          ("r24x64eq1536Kbps", 57),
          ("r25x56eq1400Kbps", 26),
          ("r25x64eq1600Kbps", 58),
          ("r26x56eq1456Kbps", 27),
          ("r26x64eq1664Kbps", 59),
          ("r27x56eq1512Kbps", 28),
          ("r27x64eq1728Kbps", 60),
          ("r28x56eq1568Kbps", 29),
          ("r28x64eq1792Kbps", 61),
          ("r29x56eq1624Kbps", 30),
          ("r29x64eq1856Kbps", 62),
          ("r2x56eq112Kbps", 3),
          ("r2x64eq128Kbps", 35),
          ("r30x56eq1680Kbps", 31),
          ("r30x64eq1920Kbps", 63),
          ("r31x56eq1736Kbps", 32),
          ("r31x64eq1984Kbps", 64),
          ("r32x56eq1792Kbps", 66),
          ("r32x64eq2048Kbps", 65),
          ("r3x56eq168Kbps", 4),
          ("r3x64eq192Kbps", 36),
          ("r4x56eq224Kbps", 5),
          ("r4x64eq256Kbps", 37),
          ("r5x56eq280Kbps", 6),
          ("r5x64eq320Kbps", 38),
          ("r64x64eq4096Kbps", 67),
          ("r6x56eq336Kbps", 7),
          ("r6x64eq384Kbps", 39),
          ("r7x56eq392Kbps", 8),
          ("r7x64eq448Kbps", 40),
          ("r8x56eq448Kbps", 9),
          ("r8x64eq512Kbps", 41),
          ("r9x56eq504Kbps", 10),
          ("r9x64eq576Kbps", 42))
    )


_PrtHSRate_Type.__name__ = "Integer32"
_PrtHSRate_Object = MibTableColumn
prtHSRate = _PrtHSRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 4),
    _PrtHSRate_Type()
)
prtHSRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtHSRate.setStatus("current")


class _PrtHSFifoSize_Type(Integer32):
    """Custom type prtHSFifoSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              255)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("b104bit", 4),
          ("b144bit", 5),
          ("b32bit", 2),
          ("b60bit", 3),
          ("notApplicable", 255))
    )


_PrtHSFifoSize_Type.__name__ = "Integer32"
_PrtHSFifoSize_Object = MibTableColumn
prtHSFifoSize = _PrtHSFifoSize_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 5),
    _PrtHSFifoSize_Type()
)
prtHSFifoSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtHSFifoSize.setStatus("current")


class _PrtHSClkMode_Type(Integer32):
    """Custom type prtHSClkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("dce", 1),
          ("dte1", 2),
          ("dte2", 3),
          ("notApplicable", 255))
    )


_PrtHSClkMode_Type.__name__ = "Integer32"
_PrtHSClkMode_Object = MibTableColumn
prtHSClkMode = _PrtHSClkMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 6),
    _PrtHSClkMode_Type()
)
prtHSClkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtHSClkMode.setStatus("current")


class _PrtHSCTS_Type(Integer32):
    """Custom type prtHSCTS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("on", 1),
          ("rts", 2))
    )


_PrtHSCTS_Type.__name__ = "Integer32"
_PrtHSCTS_Object = MibTableColumn
prtHSCTS = _PrtHSCTS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 7),
    _PrtHSCTS_Type()
)
prtHSCTS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtHSCTS.setStatus("current")


class _PrtHSRtsState_Type(Integer32):
    """Custom type prtHSRtsState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 255),
          ("off", 2),
          ("on", 3))
    )


_PrtHSRtsState_Type.__name__ = "Integer32"
_PrtHSRtsState_Object = MibTableColumn
prtHSRtsState = _PrtHSRtsState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 8),
    _PrtHSRtsState_Type()
)
prtHSRtsState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHSRtsState.setStatus("current")


class _PrtHSInbandLoopback_Type(Integer32):
    """Custom type prtHSInbandLoopback based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3),
          ("notApplicable", 1))
    )


_PrtHSInbandLoopback_Type.__name__ = "Integer32"
_PrtHSInbandLoopback_Object = MibTableColumn
prtHSInbandLoopback = _PrtHSInbandLoopback_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 9),
    _PrtHSInbandLoopback_Type()
)
prtHSInbandLoopback.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtHSInbandLoopback.setStatus("current")


class _PrtHSInbandLoopPatternCfg_Type(Integer32):
    """Custom type prtHSInbandLoopPatternCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("rdlLoop", 2),
          ("userConfig", 3))
    )


_PrtHSInbandLoopPatternCfg_Type.__name__ = "Integer32"
_PrtHSInbandLoopPatternCfg_Object = MibTableColumn
prtHSInbandLoopPatternCfg = _PrtHSInbandLoopPatternCfg_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 10),
    _PrtHSInbandLoopPatternCfg_Type()
)
prtHSInbandLoopPatternCfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtHSInbandLoopPatternCfg.setStatus("current")
_PrtHSInbandLoopActPattern_Type = DisplayString
_PrtHSInbandLoopActPattern_Object = MibTableColumn
prtHSInbandLoopActPattern = _PrtHSInbandLoopActPattern_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 11),
    _PrtHSInbandLoopActPattern_Type()
)
prtHSInbandLoopActPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtHSInbandLoopActPattern.setStatus("current")
_PrtHSInbandLoopDeactPattern_Type = DisplayString
_PrtHSInbandLoopDeactPattern_Object = MibTableColumn
prtHSInbandLoopDeactPattern = _PrtHSInbandLoopDeactPattern_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 12),
    _PrtHSInbandLoopDeactPattern_Type()
)
prtHSInbandLoopDeactPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtHSInbandLoopDeactPattern.setStatus("current")


class _PrtHSDCD_Type(Integer32):
    """Custom type prtHSDCD based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("linkOK", 2),
          ("notApplicable", 1),
          ("on", 3))
    )


_PrtHSDCD_Type.__name__ = "Integer32"
_PrtHSDCD_Object = MibTableColumn
prtHSDCD = _PrtHSDCD_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 13),
    _PrtHSDCD_Type()
)
prtHSDCD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtHSDCD.setStatus("current")


class _PrtHSClkPolarity_Type(Integer32):
    """Custom type prtHSClkPolarity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("invert", 3),
          ("normal", 2),
          ("notApplicable", 1))
    )


_PrtHSClkPolarity_Type.__name__ = "Integer32"
_PrtHSClkPolarity_Object = MibTableColumn
prtHSClkPolarity = _PrtHSClkPolarity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 14),
    _PrtHSClkPolarity_Type()
)
prtHSClkPolarity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtHSClkPolarity.setStatus("current")


class _PrtHSInterfaceType_Type(Integer32):
    """Custom type prtHSInterfaceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("rs232", 8),
          ("rs422", 4),
          ("rs449", 9),
          ("rs530", 2),
          ("rs530a", 7),
          ("v24", 6),
          ("v35", 3),
          ("x21", 5))
    )


_PrtHSInterfaceType_Type.__name__ = "Integer32"
_PrtHSInterfaceType_Object = MibTableColumn
prtHSInterfaceType = _PrtHSInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 15),
    _PrtHSInterfaceType_Type()
)
prtHSInterfaceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtHSInterfaceType.setStatus("current")


class _PrtHSUnframed_Type(Integer32):
    """Custom type prtHSUnframed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtHSUnframed_Type.__name__ = "Integer32"
_PrtHSUnframed_Object = MibTableColumn
prtHSUnframed = _PrtHSUnframed_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 16),
    _PrtHSUnframed_Type()
)
prtHSUnframed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtHSUnframed.setStatus("current")
_PrtHSBertTable_Object = MibTable
prtHSBertTable = _PrtHSBertTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 2)
)
if mibBuilder.loadTexts:
    prtHSBertTable.setStatus("current")
_PrtHSBertEntry_Object = MibTableRow
prtHSBertEntry = _PrtHSBertEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 2, 1)
)
prtHSBertEntry.setIndexNames(
    (0, "RAD-MIB", "prtHSBertPrtIdx"),
)
if mibBuilder.loadTexts:
    prtHSBertEntry.setStatus("current")
_PrtHSBertPrtIdx_Type = Integer32
_PrtHSBertPrtIdx_Object = MibTableColumn
prtHSBertPrtIdx = _PrtHSBertPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 2, 1, 1),
    _PrtHSBertPrtIdx_Type()
)
prtHSBertPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHSBertPrtIdx.setStatus("current")


class _PrtHSBertSlt_Type(Integer32):
    """Custom type prtHSBertSlt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("standAlone", 255))
    )


_PrtHSBertSlt_Type.__name__ = "Integer32"
_PrtHSBertSlt_Object = MibTableColumn
prtHSBertSlt = _PrtHSBertSlt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 2, 1, 2),
    _PrtHSBertSlt_Type()
)
prtHSBertSlt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHSBertSlt.setStatus("current")


class _PrtHSBertCountClr_Type(Integer32):
    """Custom type prtHSBertCountClr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtHSBertCountClr_Type.__name__ = "Integer32"
_PrtHSBertCountClr_Object = MibTableColumn
prtHSBertCountClr = _PrtHSBertCountClr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 2, 1, 3),
    _PrtHSBertCountClr_Type()
)
prtHSBertCountClr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtHSBertCountClr.setStatus("current")
_PrtHSBertTestResult_Type = Integer32
_PrtHSBertTestResult_Object = MibTableColumn
prtHSBertTestResult = _PrtHSBertTestResult_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 2, 1, 4),
    _PrtHSBertTestResult_Type()
)
prtHSBertTestResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHSBertTestResult.setStatus("current")
_PrtSP_ObjectIdentity = ObjectIdentity
prtSP = _PrtSP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4)
)
_PrtSpCnfgTable_Object = MibTable
prtSpCnfgTable = _PrtSpCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1)
)
if mibBuilder.loadTexts:
    prtSpCnfgTable.setStatus("current")
_PrtSpCnfgEntry_Object = MibTableRow
prtSpCnfgEntry = _PrtSpCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1)
)
prtSpCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtSpCnfgIdx"),
    (0, "RAD-MIB", "prtSpPrtIdx"),
)
if mibBuilder.loadTexts:
    prtSpCnfgEntry.setStatus("current")


class _PrtSpCnfgIdx_Type(Integer32):
    """Custom type prtSpCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtSpCnfgIdx_Type.__name__ = "Integer32"
_PrtSpCnfgIdx_Object = MibTableColumn
prtSpCnfgIdx = _PrtSpCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 1),
    _PrtSpCnfgIdx_Type()
)
prtSpCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSpCnfgIdx.setStatus("current")
_PrtSpPrtIdx_Type = Integer32
_PrtSpPrtIdx_Object = MibTableColumn
prtSpPrtIdx = _PrtSpPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 2),
    _PrtSpPrtIdx_Type()
)
prtSpPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSpPrtIdx.setStatus("current")


class _PrtSpUsage_Type(Integer32):
    """Custom type prtSpUsage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("dialOut", 8),
          ("muxPpp", 6),
          ("muxSlip", 5),
          ("nmsPpp", 4),
          ("nmsSlip", 3),
          ("noUse", 2),
          ("terminal", 7),
          ("unknown", 1))
    )


_PrtSpUsage_Type.__name__ = "Integer32"
_PrtSpUsage_Object = MibTableColumn
prtSpUsage = _PrtSpUsage_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 3),
    _PrtSpUsage_Type()
)
prtSpUsage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpUsage.setStatus("current")


class _PrtSpRate_Type(Integer32):
    """Custom type prtSpRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("s115200bps", 10),
          ("s1200bps", 3),
          ("s19200bps", 7),
          ("s2400bps", 4),
          ("s300bps", 2),
          ("s38400bps", 8),
          ("s4800bps", 5),
          ("s57600bps", 9),
          ("s9600bps", 6))
    )


_PrtSpRate_Type.__name__ = "Integer32"
_PrtSpRate_Object = MibTableColumn
prtSpRate = _PrtSpRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 4),
    _PrtSpRate_Type()
)
prtSpRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpRate.setStatus("current")


class _PrtSpDataBits_Type(Integer32):
    """Custom type prtSpDataBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dataBits7", 1),
          ("dataBits8", 2))
    )


_PrtSpDataBits_Type.__name__ = "Integer32"
_PrtSpDataBits_Object = MibTableColumn
prtSpDataBits = _PrtSpDataBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 5),
    _PrtSpDataBits_Type()
)
prtSpDataBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpDataBits.setStatus("current")


class _PrtSpParity_Type(Integer32):
    """Custom type prtSpParity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("even", 3),
          ("none", 1),
          ("odd", 2))
    )


_PrtSpParity_Type.__name__ = "Integer32"
_PrtSpParity_Object = MibTableColumn
prtSpParity = _PrtSpParity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 6),
    _PrtSpParity_Type()
)
prtSpParity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpParity.setStatus("current")


class _PrtSpCallOutMode_Type(Integer32):
    """Custom type prtSpCallOutMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("all", 3),
          ("major", 4),
          ("none", 2),
          ("notApplicable", 1))
    )


_PrtSpCallOutMode_Type.__name__ = "Integer32"
_PrtSpCallOutMode_Object = MibTableColumn
prtSpCallOutMode = _PrtSpCallOutMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 7),
    _PrtSpCallOutMode_Type()
)
prtSpCallOutMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpCallOutMode.setStatus("current")


class _PrtSpInterface_Type(Integer32):
    """Custom type prtSpInterface based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dce", 1),
          ("dte", 2))
    )


_PrtSpInterface_Type.__name__ = "Integer32"
_PrtSpInterface_Object = MibTableColumn
prtSpInterface = _PrtSpInterface_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 8),
    _PrtSpInterface_Type()
)
prtSpInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpInterface.setStatus("current")


class _PrtSpCTS_Type(Integer32):
    """Custom type prtSpCTS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("on", 2),
          ("rts", 3))
    )


_PrtSpCTS_Type.__name__ = "Integer32"
_PrtSpCTS_Object = MibTableColumn
prtSpCTS = _PrtSpCTS_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 9),
    _PrtSpCTS_Type()
)
prtSpCTS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpCTS.setStatus("current")


class _PrtSpDcdDelay_Type(Integer32):
    """Custom type prtSpDcdDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("d0", 2),
          ("d10", 3),
          ("d100", 5),
          ("d200", 6),
          ("d300", 7),
          ("d50", 4),
          ("notApplicable", 1))
    )


_PrtSpDcdDelay_Type.__name__ = "Integer32"
_PrtSpDcdDelay_Object = MibTableColumn
prtSpDcdDelay = _PrtSpDcdDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 10),
    _PrtSpDcdDelay_Type()
)
prtSpDcdDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpDcdDelay.setStatus("current")


class _PrtSpDsr_Type(Integer32):
    """Custom type prtSpDsr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dtr", 3),
          ("notApplicable", 1),
          ("on", 2))
    )


_PrtSpDsr_Type.__name__ = "Integer32"
_PrtSpDsr_Object = MibTableColumn
prtSpDsr = _PrtSpDsr_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 11),
    _PrtSpDsr_Type()
)
prtSpDsr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpDsr.setStatus("current")


class _PrtSpNoOfRetries_Type(Integer32):
    """Custom type prtSpNoOfRetries based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 8),
    )


_PrtSpNoOfRetries_Type.__name__ = "Integer32"
_PrtSpNoOfRetries_Object = MibTableColumn
prtSpNoOfRetries = _PrtSpNoOfRetries_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 12),
    _PrtSpNoOfRetries_Type()
)
prtSpNoOfRetries.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpNoOfRetries.setStatus("current")


class _PrtSpWaitForConnect_Type(Integer32):
    """Custom type prtSpWaitForConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("t30sec", 2),
          ("t45sec", 3),
          ("t60sec", 4))
    )


_PrtSpWaitForConnect_Type.__name__ = "Integer32"
_PrtSpWaitForConnect_Object = MibTableColumn
prtSpWaitForConnect = _PrtSpWaitForConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 13),
    _PrtSpWaitForConnect_Type()
)
prtSpWaitForConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpWaitForConnect.setStatus("current")


class _PrtSpDialMode_Type(Integer32):
    """Custom type prtSpDialMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("pulse", 3),
          ("tone", 2))
    )


_PrtSpDialMode_Type.__name__ = "Integer32"
_PrtSpDialMode_Object = MibTableColumn
prtSpDialMode = _PrtSpDialMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 14),
    _PrtSpDialMode_Type()
)
prtSpDialMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpDialMode.setStatus("current")


class _PrtSpAltNumMode_Type(Integer32):
    """Custom type prtSpAltNumMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtSpAltNumMode_Type.__name__ = "Integer32"
_PrtSpAltNumMode_Object = MibTableColumn
prtSpAltNumMode = _PrtSpAltNumMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 15),
    _PrtSpAltNumMode_Type()
)
prtSpAltNumMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpAltNumMode.setStatus("current")


class _PrtSpPrimaryNum_Type(DisplayString):
    """Custom type prtSpPrimaryNum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_PrtSpPrimaryNum_Type.__name__ = "DisplayString"
_PrtSpPrimaryNum_Object = MibTableColumn
prtSpPrimaryNum = _PrtSpPrimaryNum_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 16),
    _PrtSpPrimaryNum_Type()
)
prtSpPrimaryNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpPrimaryNum.setStatus("current")


class _PrtSpAltNum_Type(DisplayString):
    """Custom type prtSpAltNum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_PrtSpAltNum_Type.__name__ = "DisplayString"
_PrtSpAltNum_Object = MibTableColumn
prtSpAltNum = _PrtSpAltNum_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 17),
    _PrtSpAltNum_Type()
)
prtSpAltNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpAltNum.setStatus("current")


class _PrtSpRoutProtocol_Type(Integer32):
    """Custom type prtSpRoutProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 2),
          ("notApplicable", 1),
          ("proprietary", 3),
          ("rip2", 4))
    )


_PrtSpRoutProtocol_Type.__name__ = "Integer32"
_PrtSpRoutProtocol_Object = MibTableColumn
prtSpRoutProtocol = _PrtSpRoutProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 18),
    _PrtSpRoutProtocol_Type()
)
prtSpRoutProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpRoutProtocol.setStatus("current")


class _PrtSpCmd_Type(OctetString):
    """Custom type prtSpCmd based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(20, 20),
    )


_PrtSpCmd_Type.__name__ = "OctetString"
_PrtSpCmd_Object = MibTableColumn
prtSpCmd = _PrtSpCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 19),
    _PrtSpCmd_Type()
)
prtSpCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpCmd.setStatus("current")


class _PrtSpActCallOut_Type(Integer32):
    """Custom type prtSpActCallOut based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("always", 2),
          ("linkFail", 3),
          ("notApplicable", 1))
    )


_PrtSpActCallOut_Type.__name__ = "Integer32"
_PrtSpActCallOut_Object = MibTableColumn
prtSpActCallOut = _PrtSpActCallOut_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 20),
    _PrtSpActCallOut_Type()
)
prtSpActCallOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpActCallOut.setStatus("current")


class _PrtSpAlrRelayMode_Type(Integer32):
    """Custom type prtSpAlrRelayMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("invert", 3),
          ("normal", 2),
          ("notApplicable", 1))
    )


_PrtSpAlrRelayMode_Type.__name__ = "Integer32"
_PrtSpAlrRelayMode_Object = MibTableColumn
prtSpAlrRelayMode = _PrtSpAlrRelayMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 21),
    _PrtSpAlrRelayMode_Type()
)
prtSpAlrRelayMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpAlrRelayMode.setStatus("current")


class _PrtSpStopBits_Type(Integer32):
    """Custom type prtSpStopBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("stopBits1", 2),
          ("stopBits1dot5", 3),
          ("stopBits2", 4))
    )


_PrtSpStopBits_Type.__name__ = "Integer32"
_PrtSpStopBits_Object = MibTableColumn
prtSpStopBits = _PrtSpStopBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 22),
    _PrtSpStopBits_Type()
)
prtSpStopBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSpStopBits.setStatus("current")
_PrtDim_ObjectIdentity = ObjectIdentity
prtDim = _PrtDim_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5)
)
_PrtDimCnfgTable_Object = MibTable
prtDimCnfgTable = _PrtDimCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1)
)
if mibBuilder.loadTexts:
    prtDimCnfgTable.setStatus("current")
_PrtDimCnfgEntry_Object = MibTableRow
prtDimCnfgEntry = _PrtDimCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1)
)
prtDimCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtDimCnfgIdx"),
    (0, "RAD-MIB", "prtDimIdx"),
)
if mibBuilder.loadTexts:
    prtDimCnfgEntry.setStatus("current")


class _PrtDimCnfgIdx_Type(Integer32):
    """Custom type prtDimCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtDimCnfgIdx_Type.__name__ = "Integer32"
_PrtDimCnfgIdx_Object = MibTableColumn
prtDimCnfgIdx = _PrtDimCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1, 1),
    _PrtDimCnfgIdx_Type()
)
prtDimCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDimCnfgIdx.setStatus("current")
_PrtDimIdx_Type = Integer32
_PrtDimIdx_Object = MibTableColumn
prtDimIdx = _PrtDimIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1, 2),
    _PrtDimIdx_Type()
)
prtDimIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDimIdx.setStatus("current")


class _PrtDimTxMode_Type(Integer32):
    """Custom type prtDimTxMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("broadcast", 3),
          ("regularTx", 2))
    )


_PrtDimTxMode_Type.__name__ = "Integer32"
_PrtDimTxMode_Object = MibTableColumn
prtDimTxMode = _PrtDimTxMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1, 3),
    _PrtDimTxMode_Type()
)
prtDimTxMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtDimTxMode.setStatus("current")


class _PrtDimPolarity_Type(Integer32):
    """Custom type prtDimPolarity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("inverted", 3),
          ("normalClk", 2))
    )


_PrtDimPolarity_Type.__name__ = "Integer32"
_PrtDimPolarity_Object = MibTableColumn
prtDimPolarity = _PrtDimPolarity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1, 4),
    _PrtDimPolarity_Type()
)
prtDimPolarity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtDimPolarity.setStatus("current")


class _PrtDimClkMode_Type(Integer32):
    """Custom type prtDimClkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("dce", 3),
          ("extDce", 2),
          ("extSmooth", 5),
          ("smooth", 4))
    )


_PrtDimClkMode_Type.__name__ = "Integer32"
_PrtDimClkMode_Object = MibTableColumn
prtDimClkMode = _PrtDimClkMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1, 5),
    _PrtDimClkMode_Type()
)
prtDimClkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtDimClkMode.setStatus("current")


class _PrtDimMaxDelay_Type(Integer32):
    """Custom type prtDimMaxDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("t16msec", 2),
          ("t64msec", 3))
    )


_PrtDimMaxDelay_Type.__name__ = "Integer32"
_PrtDimMaxDelay_Object = MibTableColumn
prtDimMaxDelay = _PrtDimMaxDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1, 6),
    _PrtDimMaxDelay_Type()
)
prtDimMaxDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtDimMaxDelay.setStatus("current")


class _PrtDimMng_Type(Integer32):
    """Custom type prtDimMng based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dedicatedFr", 4),
          ("disabled", 2),
          ("ts1", 3))
    )


_PrtDimMng_Type.__name__ = "Integer32"
_PrtDimMng_Object = MibTableColumn
prtDimMng = _PrtDimMng_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1, 7),
    _PrtDimMng_Type()
)
prtDimMng.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtDimMng.setStatus("current")


class _PrtDimMngRoutProt_Type(Integer32):
    """Custom type prtDimMngRoutProt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 2),
          ("notApplicable", 1),
          ("proprietary", 3))
    )


_PrtDimMngRoutProt_Type.__name__ = "Integer32"
_PrtDimMngRoutProt_Object = MibTableColumn
prtDimMngRoutProt = _PrtDimMngRoutProt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1, 8),
    _PrtDimMngRoutProt_Type()
)
prtDimMngRoutProt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtDimMngRoutProt.setStatus("current")
_PrtDimDestTable_Object = MibTable
prtDimDestTable = _PrtDimDestTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 2)
)
if mibBuilder.loadTexts:
    prtDimDestTable.setStatus("current")
_PrtDimDestEntry_Object = MibTableRow
prtDimDestEntry = _PrtDimDestEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 2, 1)
)
prtDimDestEntry.setIndexNames(
    (0, "RAD-MIB", "prtDestCnfgIdx"),
    (0, "RAD-MIB", "prtDestDimIdx"),
    (0, "RAD-MIB", "prtDestIdx"),
)
if mibBuilder.loadTexts:
    prtDimDestEntry.setStatus("current")


class _PrtDestCnfgIdx_Type(Integer32):
    """Custom type prtDestCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtDestCnfgIdx_Type.__name__ = "Integer32"
_PrtDestCnfgIdx_Object = MibTableColumn
prtDestCnfgIdx = _PrtDestCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 2, 1, 1),
    _PrtDestCnfgIdx_Type()
)
prtDestCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDestCnfgIdx.setStatus("current")
_PrtDestDimIdx_Type = Integer32
_PrtDestDimIdx_Object = MibTableColumn
prtDestDimIdx = _PrtDestDimIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 2, 1, 2),
    _PrtDestDimIdx_Type()
)
prtDestDimIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDestDimIdx.setStatus("current")


class _PrtDestIdx_Type(Integer32):
    """Custom type prtDestIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 8),
    )


_PrtDestIdx_Type.__name__ = "Integer32"
_PrtDestIdx_Object = MibTableColumn
prtDestIdx = _PrtDestIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 2, 1, 3),
    _PrtDestIdx_Type()
)
prtDestIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDestIdx.setStatus("current")
_PrtDest_Type = Integer32
_PrtDest_Object = MibTableColumn
prtDest = _PrtDest_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 2, 1, 4),
    _PrtDest_Type()
)
prtDest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtDest.setStatus("current")


class _PrtDestConnect_Type(Integer32):
    """Custom type prtDestConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_PrtDestConnect_Type.__name__ = "Integer32"
_PrtDestConnect_Object = MibTableColumn
prtDestConnect = _PrtDestConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 2, 1, 5),
    _PrtDestConnect_Type()
)
prtDestConnect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtDestConnect.setStatus("current")
_PrtI_ObjectIdentity = ObjectIdentity
prtI = _PrtI_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 6)
)
_PrtICnfgTable_Object = MibTable
prtICnfgTable = _PrtICnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 6, 1)
)
if mibBuilder.loadTexts:
    prtICnfgTable.setStatus("current")
_PrtICnfgEntry_Object = MibTableRow
prtICnfgEntry = _PrtICnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 6, 1, 1)
)
prtICnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtICnfgIdx"),
    (0, "RAD-MIB", "prtIIdx"),
)
if mibBuilder.loadTexts:
    prtICnfgEntry.setStatus("current")


class _PrtICnfgIdx_Type(Integer32):
    """Custom type prtICnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtICnfgIdx_Type.__name__ = "Integer32"
_PrtICnfgIdx_Object = MibTableColumn
prtICnfgIdx = _PrtICnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 6, 1, 1, 1),
    _PrtICnfgIdx_Type()
)
prtICnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtICnfgIdx.setStatus("current")
_PrtIIdx_Type = Integer32
_PrtIIdx_Object = MibTableColumn
prtIIdx = _PrtIIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 6, 1, 1, 2),
    _PrtIIdx_Type()
)
prtIIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIIdx.setStatus("current")


class _PrtIRate_Type(Integer32):
    """Custom type prtIRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("nc", 2),
          ("notApplicable", 1),
          ("r2bit", 3),
          ("r4bit", 4),
          ("r8bit", 5))
    )


_PrtIRate_Type.__name__ = "Integer32"
_PrtIRate_Object = MibTableColumn
prtIRate = _PrtIRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 6, 1, 1, 3),
    _PrtIRate_Type()
)
prtIRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIRate.setStatus("current")


class _PrtIConnect_Type(Integer32):
    """Custom type prtIConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtIConnect_Type.__name__ = "Integer32"
_PrtIConnect_Object = MibTableColumn
prtIConnect = _PrtIConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 6, 1, 1, 4),
    _PrtIConnect_Type()
)
prtIConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIConnect.setStatus("current")
_PrtHdsl_ObjectIdentity = ObjectIdentity
prtHdsl = _PrtHdsl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 7)
)
_PrtHdslTable_Object = MibTable
prtHdslTable = _PrtHdslTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 7, 1)
)
if mibBuilder.loadTexts:
    prtHdslTable.setStatus("current")
_PrtHdslEntry_Object = MibTableRow
prtHdslEntry = _PrtHdslEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 7, 1, 1)
)
prtHdslEntry.setIndexNames(
    (0, "RAD-MIB", "prtHdslIdx"),
)
if mibBuilder.loadTexts:
    prtHdslEntry.setStatus("current")
_PrtHdslIdx_Type = Integer32
_PrtHdslIdx_Object = MibTableColumn
prtHdslIdx = _PrtHdslIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 7, 1, 1, 1),
    _PrtHdslIdx_Type()
)
prtHdslIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHdslIdx.setStatus("current")


class _PrtHdslMode_Type(Integer32):
    """Custom type prtHdslMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("central", 2),
          ("notApplicable", 1),
          ("remote", 3))
    )


_PrtHdslMode_Type.__name__ = "Integer32"
_PrtHdslMode_Object = MibTableColumn
prtHdslMode = _PrtHdslMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 7, 1, 1, 2),
    _PrtHdslMode_Type()
)
prtHdslMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtHdslMode.setStatus("current")


class _PrtHdslRptrType_Type(Integer32):
    """Custom type prtHdslRptrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("hrpt", 3),
          ("none", 2),
          ("notApplicable", 1))
    )


_PrtHdslRptrType_Type.__name__ = "Integer32"
_PrtHdslRptrType_Object = MibTableColumn
prtHdslRptrType = _PrtHdslRptrType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 7, 1, 1, 3),
    _PrtHdslRptrType_Type()
)
prtHdslRptrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHdslRptrType.setStatus("current")


class _PrtHdslMaxRate_Type(Integer32):
    """Custom type prtHdslMaxRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("r1024", 12),
          ("r1152", 13),
          ("r1280", 14),
          ("r1536", 15),
          ("r192", 2),
          ("r1920", 16),
          ("r2048", 17),
          ("r256", 3),
          ("r320", 4),
          ("r384", 5),
          ("r448", 6),
          ("r512", 7),
          ("r576", 8),
          ("r640", 9),
          ("r768", 10),
          ("r896", 11))
    )


_PrtHdslMaxRate_Type.__name__ = "Integer32"
_PrtHdslMaxRate_Object = MibTableColumn
prtHdslMaxRate = _PrtHdslMaxRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 7, 1, 1, 4),
    _PrtHdslMaxRate_Type()
)
prtHdslMaxRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtHdslMaxRate.setStatus("current")


class _PrtHdslLinkType_Type(Integer32):
    """Custom type prtHdslLinkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("gDsl", 5),
          ("hdsl2w", 3),
          ("hdsl4w", 4),
          ("msdsl2w", 2),
          ("notApplicable", 1))
    )


_PrtHdslLinkType_Type.__name__ = "Integer32"
_PrtHdslLinkType_Object = MibTableColumn
prtHdslLinkType = _PrtHdslLinkType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 7, 1, 1, 5),
    _PrtHdslLinkType_Type()
)
prtHdslLinkType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHdslLinkType.setStatus("current")


class _PrtHdslCompSwVer_Type(DisplayString):
    """Custom type prtHdslCompSwVer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_PrtHdslCompSwVer_Type.__name__ = "DisplayString"
_PrtHdslCompSwVer_Object = MibTableColumn
prtHdslCompSwVer = _PrtHdslCompSwVer_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 7, 1, 1, 6),
    _PrtHdslCompSwVer_Type()
)
prtHdslCompSwVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHdslCompSwVer.setStatus("current")


class _PrtHdslCompHwVer_Type(DisplayString):
    """Custom type prtHdslCompHwVer based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_PrtHdslCompHwVer_Type.__name__ = "DisplayString"
_PrtHdslCompHwVer_Object = MibTableColumn
prtHdslCompHwVer = _PrtHdslCompHwVer_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 7, 1, 1, 7),
    _PrtHdslCompHwVer_Type()
)
prtHdslCompHwVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtHdslCompHwVer.setStatus("current")
_PrtT3E3_ObjectIdentity = ObjectIdentity
prtT3E3 = _PrtT3E3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8)
)
_PrtT3E3CnfgTable_Object = MibTable
prtT3E3CnfgTable = _PrtT3E3CnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1)
)
if mibBuilder.loadTexts:
    prtT3E3CnfgTable.setStatus("current")
_PrtT3E3CnfgEntry_Object = MibTableRow
prtT3E3CnfgEntry = _PrtT3E3CnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1, 1)
)
prtT3E3CnfgEntry.setIndexNames(
    (0, "RAD-MIB", "prtT3E3CnfgIdx"),
    (0, "RAD-MIB", "prtT3E3PrtIdx"),
)
if mibBuilder.loadTexts:
    prtT3E3CnfgEntry.setStatus("current")


class _PrtT3E3CnfgIdx_Type(Integer32):
    """Custom type prtT3E3CnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtT3E3CnfgIdx_Type.__name__ = "Integer32"
_PrtT3E3CnfgIdx_Object = MibTableColumn
prtT3E3CnfgIdx = _PrtT3E3CnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1, 1, 1),
    _PrtT3E3CnfgIdx_Type()
)
prtT3E3CnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT3E3CnfgIdx.setStatus("current")
_PrtT3E3PrtIdx_Type = Integer32
_PrtT3E3PrtIdx_Object = MibTableColumn
prtT3E3PrtIdx = _PrtT3E3PrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1, 1, 2),
    _PrtT3E3PrtIdx_Type()
)
prtT3E3PrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT3E3PrtIdx.setStatus("current")


class _PrtT3E3Slt_Type(Integer32):
    """Custom type prtT3E3Slt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("standAlone", 255))
    )


_PrtT3E3Slt_Type.__name__ = "Integer32"
_PrtT3E3Slt_Object = MibTableColumn
prtT3E3Slt = _PrtT3E3Slt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1, 1, 3),
    _PrtT3E3Slt_Type()
)
prtT3E3Slt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtT3E3Slt.setStatus("current")


class _PrtT3E3LineLength_Type(Integer32):
    """Custom type prtT3E3LineLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("len0p450ft", 2),
          ("len451p900ft", 3),
          ("notApplicable", 1))
    )


_PrtT3E3LineLength_Type.__name__ = "Integer32"
_PrtT3E3LineLength_Object = MibTableColumn
prtT3E3LineLength = _PrtT3E3LineLength_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1, 1, 4),
    _PrtT3E3LineLength_Type()
)
prtT3E3LineLength.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT3E3LineLength.setStatus("current")


class _PrtT3E3InbandMng_Type(Integer32):
    """Custom type prtT3E3InbandMng based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("cBit", 3),
          ("cBitTx", 5),
          ("cBitTxMng", 6),
          ("cBitTxRxMng", 4),
          ("cdpv", 8),
          ("m13", 7),
          ("nationalBit", 9),
          ("notApplicable", 1),
          ("off", 2))
    )


_PrtT3E3InbandMng_Type.__name__ = "Integer32"
_PrtT3E3InbandMng_Object = MibTableColumn
prtT3E3InbandMng = _PrtT3E3InbandMng_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1, 1, 5),
    _PrtT3E3InbandMng_Type()
)
prtT3E3InbandMng.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT3E3InbandMng.setStatus("current")


class _PrtT3E3AisFrame_Type(Integer32):
    """Custom type prtT3E3AisFrame based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("framed", 3),
          ("notApplicable", 1),
          ("unframed", 2))
    )


_PrtT3E3AisFrame_Type.__name__ = "Integer32"
_PrtT3E3AisFrame_Object = MibTableColumn
prtT3E3AisFrame = _PrtT3E3AisFrame_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1, 1, 6),
    _PrtT3E3AisFrame_Type()
)
prtT3E3AisFrame.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT3E3AisFrame.setStatus("current")


class _PrtT3E3TxClockSource_Type(Integer32):
    """Custom type prtT3E3TxClockSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("external", 1),
          ("internal", 2),
          ("notApplicable", 255))
    )


_PrtT3E3TxClockSource_Type.__name__ = "Integer32"
_PrtT3E3TxClockSource_Object = MibTableColumn
prtT3E3TxClockSource = _PrtT3E3TxClockSource_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1, 1, 7),
    _PrtT3E3TxClockSource_Type()
)
prtT3E3TxClockSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT3E3TxClockSource.setStatus("current")


class _PrtT3E3RoutProt_Type(Integer32):
    """Custom type prtT3E3RoutProt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 2),
          ("notApplicable", 1),
          ("proprietary", 3),
          ("rip2", 4))
    )


_PrtT3E3RoutProt_Type.__name__ = "Integer32"
_PrtT3E3RoutProt_Object = MibTableColumn
prtT3E3RoutProt = _PrtT3E3RoutProt_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1, 1, 8),
    _PrtT3E3RoutProt_Type()
)
prtT3E3RoutProt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT3E3RoutProt.setStatus("current")


class _PrtT3E3AisTransmit_Type(Integer32):
    """Custom type prtT3E3AisTransmit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_PrtT3E3AisTransmit_Type.__name__ = "Integer32"
_PrtT3E3AisTransmit_Object = MibTableColumn
prtT3E3AisTransmit = _PrtT3E3AisTransmit_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1, 1, 9),
    _PrtT3E3AisTransmit_Type()
)
prtT3E3AisTransmit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtT3E3AisTransmit.setStatus("current")
_GenDacsMux_ObjectIdentity = ObjectIdentity
genDacsMux = _GenDacsMux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4)
)
_CmprTable_Object = MibTable
cmprTable = _CmprTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1)
)
if mibBuilder.loadTexts:
    cmprTable.setStatus("current")
_CmprEntry_Object = MibTableRow
cmprEntry = _CmprEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1, 1)
)
cmprEntry.setIndexNames(
    (0, "RAD-MIB", "cmprTypeIdx"),
    (0, "RAD-MIB", "cmprCnfgIdx"),
    (0, "RAD-MIB", "cmprVersion"),
    (0, "RAD-MIB", "cmprSltIdx"),
    (0, "RAD-MIB", "cmprPrtIdx"),
)
if mibBuilder.loadTexts:
    cmprEntry.setStatus("current")
_CmprTypeIdx_Type = Integer32
_CmprTypeIdx_Object = MibTableColumn
cmprTypeIdx = _CmprTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1, 1, 1),
    _CmprTypeIdx_Type()
)
cmprTypeIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmprTypeIdx.setStatus("current")
_CmprCnfgIdx_Type = Integer32
_CmprCnfgIdx_Object = MibTableColumn
cmprCnfgIdx = _CmprCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1, 1, 2),
    _CmprCnfgIdx_Type()
)
cmprCnfgIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmprCnfgIdx.setStatus("current")
_CmprVersion_Type = Integer32
_CmprVersion_Object = MibTableColumn
cmprVersion = _CmprVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1, 1, 3),
    _CmprVersion_Type()
)
cmprVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmprVersion.setStatus("current")


class _CmprSltIdx_Type(Integer32):
    """Custom type cmprSltIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clA", 3),
          ("clB", 4),
          ("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("notApplicable", 255),
          ("psA", 1),
          ("psB", 2))
    )


_CmprSltIdx_Type.__name__ = "Integer32"
_CmprSltIdx_Object = MibTableColumn
cmprSltIdx = _CmprSltIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1, 1, 4),
    _CmprSltIdx_Type()
)
cmprSltIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmprSltIdx.setStatus("current")
_CmprPrtIdx_Type = Integer32
_CmprPrtIdx_Object = MibTableColumn
cmprPrtIdx = _CmprPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1, 1, 5),
    _CmprPrtIdx_Type()
)
cmprPrtIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cmprPrtIdx.setStatus("current")
_CmprObj_Type = OctetString
_CmprObj_Object = MibTableColumn
cmprObj = _CmprObj_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1, 1, 6),
    _CmprObj_Type()
)
cmprObj.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cmprObj.setStatus("current")
_MapLinkTable_Object = MibTable
mapLinkTable = _MapLinkTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 2)
)
if mibBuilder.loadTexts:
    mapLinkTable.setStatus("current")
_MapLinkEntry_Object = MibTableRow
mapLinkEntry = _MapLinkEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 2, 1)
)
mapLinkEntry.setIndexNames(
    (0, "RAD-MIB", "mapLinkIdx"),
)
if mibBuilder.loadTexts:
    mapLinkEntry.setStatus("current")
_MapLinkIdx_Type = Integer32
_MapLinkIdx_Object = MibTableColumn
mapLinkIdx = _MapLinkIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 2, 1, 1),
    _MapLinkIdx_Type()
)
mapLinkIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mapLinkIdx.setStatus("current")


class _MapLinkSlotIdx_Type(Integer32):
    """Custom type mapLinkSlotIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              255)
        )
    )
    namedValues = NamedValues(
        *(("io1", 5),
          ("io10", 14),
          ("io11", 15),
          ("io12", 16),
          ("io13", 17),
          ("io14", 18),
          ("io15", 19),
          ("io2", 6),
          ("io3", 7),
          ("io4", 8),
          ("io5", 9),
          ("io6", 10),
          ("io7", 11),
          ("io8", 12),
          ("io9", 13),
          ("standAlone", 255))
    )


_MapLinkSlotIdx_Type.__name__ = "Integer32"
_MapLinkSlotIdx_Object = MibTableColumn
mapLinkSlotIdx = _MapLinkSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 2, 1, 2),
    _MapLinkSlotIdx_Type()
)
mapLinkSlotIdx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mapLinkSlotIdx.setStatus("current")
_MapLinkPortIdx_Type = Integer32
_MapLinkPortIdx_Object = MibTableColumn
mapLinkPortIdx = _MapLinkPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 2, 1, 3),
    _MapLinkPortIdx_Type()
)
mapLinkPortIdx.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mapLinkPortIdx.setStatus("current")


class _MapLinkState_Type(Integer32):
    """Custom type mapLinkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("unknown", 1),
          ("up", 3))
    )


_MapLinkState_Type.__name__ = "Integer32"
_MapLinkState_Object = MibTableColumn
mapLinkState = _MapLinkState_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 2, 1, 4),
    _MapLinkState_Type()
)
mapLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mapLinkState.setStatus("current")
_AlrGenTable_Object = MibTable
alrGenTable = _AlrGenTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3)
)
if mibBuilder.loadTexts:
    alrGenTable.setStatus("current")
_AlrGenEntry_Object = MibTableRow
alrGenEntry = _AlrGenEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3, 1)
)
alrGenEntry.setIndexNames(
    (0, "RAD-MIB", "alrGenCode"),
)
if mibBuilder.loadTexts:
    alrGenEntry.setStatus("current")
_AlrGenCode_Type = Integer32
_AlrGenCode_Object = MibTableColumn
alrGenCode = _AlrGenCode_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3, 1, 1),
    _AlrGenCode_Type()
)
alrGenCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alrGenCode.setStatus("current")


class _AlrGenDescription_Type(DisplayString):
    """Custom type alrGenDescription based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_AlrGenDescription_Type.__name__ = "DisplayString"
_AlrGenDescription_Object = MibTableColumn
alrGenDescription = _AlrGenDescription_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3, 1, 2),
    _AlrGenDescription_Type()
)
alrGenDescription.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alrGenDescription.setStatus("current")


class _AlrGenLevel_Type(Integer32):
    """Custom type alrGenLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("card", 3),
          ("notApplicable", 1),
          ("port", 4),
          ("system", 2))
    )


_AlrGenLevel_Type.__name__ = "Integer32"
_AlrGenLevel_Object = MibTableColumn
alrGenLevel = _AlrGenLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3, 1, 3),
    _AlrGenLevel_Type()
)
alrGenLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alrGenLevel.setStatus("current")


class _AlrGenSlotType_Type(Integer32):
    """Custom type alrGenSlotType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("cl", 3),
          ("clAndIo", 5),
          ("io", 4),
          ("notApplicable", 1),
          ("ps", 2))
    )


_AlrGenSlotType_Type.__name__ = "Integer32"
_AlrGenSlotType_Object = MibTableColumn
alrGenSlotType = _AlrGenSlotType_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3, 1, 4),
    _AlrGenSlotType_Type()
)
alrGenSlotType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alrGenSlotType.setStatus("current")


class _AlrGenSeverity_Type(Integer32):
    """Custom type alrGenSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("notApplicable", 1),
          ("warning", 6))
    )


_AlrGenSeverity_Type.__name__ = "Integer32"
_AlrGenSeverity_Object = MibTableColumn
alrGenSeverity = _AlrGenSeverity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3, 1, 5),
    _AlrGenSeverity_Type()
)
alrGenSeverity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alrGenSeverity.setStatus("current")


class _AlrGenDebounce_Type(Integer32):
    """Custom type alrGenDebounce based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_AlrGenDebounce_Type.__name__ = "Integer32"
_AlrGenDebounce_Object = MibTableColumn
alrGenDebounce = _AlrGenDebounce_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3, 1, 6),
    _AlrGenDebounce_Type()
)
alrGenDebounce.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alrGenDebounce.setStatus("current")


class _AlrGenDefSeverity_Type(Integer32):
    """Custom type alrGenDefSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("notApplicable", 1),
          ("warning", 6))
    )


_AlrGenDefSeverity_Type.__name__ = "Integer32"
_AlrGenDefSeverity_Object = MibTableColumn
alrGenDefSeverity = _AlrGenDefSeverity_Object(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3, 1, 7),
    _AlrGenDefSeverity_Type()
)
alrGenDefSeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alrGenDefSeverity.setStatus("current")
_RadBridges_ObjectIdentity = ObjectIdentity
radBridges = _RadBridges_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 4)
)
_GenBridge_ObjectIdentity = ObjectIdentity
genBridge = _GenBridge_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 4, 1)
)


class _RadBridgeAction_Type(Integer32):
    """Custom type radBridgeAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              255)
        )
    )
    namedValues = NamedValues(
        *(("clearAllMasksFromNVRAM", 15),
          ("clearIPNVRAM", 18),
          ("deactivateAllMasks", 12),
          ("defaultConfig", 16),
          ("deleteArpTab", 8),
          ("deleteLanTab", 7),
          ("deleteNetworkTab", 3),
          ("deleteRouteTab", 10),
          ("deleteRoutinTab", 5),
          ("loadAndActivateAllMasksFromNVRAM", 14),
          ("noOp", 255),
          ("reset", 1),
          ("resetNVRAM", 17),
          ("saveAllActiveMasks", 13),
          ("sendArpTab", 9),
          ("sendLanTab", 6),
          ("sendNetworkTab", 2),
          ("sendRouteTab", 11),
          ("sendRoutingTab", 4))
    )


_RadBridgeAction_Type.__name__ = "Integer32"
_RadBridgeAction_Object = MibScalar
radBridgeAction = _RadBridgeAction_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 1),
    _RadBridgeAction_Type()
)
radBridgeAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeAction.setStatus("current")
_RadBridgeInactiveArpTimeOut_Type = Integer32
_RadBridgeInactiveArpTimeOut_Object = MibScalar
radBridgeInactiveArpTimeOut = _RadBridgeInactiveArpTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 2),
    _RadBridgeInactiveArpTimeOut_Type()
)
radBridgeInactiveArpTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeInactiveArpTimeOut.setStatus("current")
_RadBridgeMaskTable_Object = MibTable
radBridgeMaskTable = _RadBridgeMaskTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 3)
)
if mibBuilder.loadTexts:
    radBridgeMaskTable.setStatus("current")
_RadBridgeMaskEntry_Object = MibTableRow
radBridgeMaskEntry = _RadBridgeMaskEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 3, 1)
)
radBridgeMaskEntry.setIndexNames(
    (0, "RAD-MIB", "radBridgeMaskType"),
    (0, "RAD-MIB", "radBridgeMaskIfIndex"),
    (0, "RAD-MIB", "radBridgeMaskNum"),
)
if mibBuilder.loadTexts:
    radBridgeMaskEntry.setStatus("current")


class _RadBridgeMaskType_Type(Integer32):
    """Custom type radBridgeMaskType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("codConnect", 7),
          ("codDisconnect", 8),
          ("compress", 3),
          ("facs", 6),
          ("loadSharing", 5),
          ("priority", 4),
          ("rx", 2),
          ("tx", 1))
    )


_RadBridgeMaskType_Type.__name__ = "Integer32"
_RadBridgeMaskType_Object = MibTableColumn
radBridgeMaskType = _RadBridgeMaskType_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 3, 1, 1),
    _RadBridgeMaskType_Type()
)
radBridgeMaskType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeMaskType.setStatus("current")
_RadBridgeMaskIfIndex_Type = Integer32
_RadBridgeMaskIfIndex_Object = MibTableColumn
radBridgeMaskIfIndex = _RadBridgeMaskIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 3, 1, 2),
    _RadBridgeMaskIfIndex_Type()
)
radBridgeMaskIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeMaskIfIndex.setStatus("current")
_RadBridgeMaskNum_Type = Integer32
_RadBridgeMaskNum_Object = MibTableColumn
radBridgeMaskNum = _RadBridgeMaskNum_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 3, 1, 3),
    _RadBridgeMaskNum_Type()
)
radBridgeMaskNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeMaskNum.setStatus("current")


class _RadBridgeMaskDest_Type(Integer32):
    """Custom type radBridgeMaskDest based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("all-msge", 4),
          ("broadcast-msge", 2),
          ("multicast-msge", 3),
          ("none", 5),
          ("unassigned-cond", 1))
    )


_RadBridgeMaskDest_Type.__name__ = "Integer32"
_RadBridgeMaskDest_Object = MibTableColumn
radBridgeMaskDest = _RadBridgeMaskDest_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 3, 1, 4),
    _RadBridgeMaskDest_Type()
)
radBridgeMaskDest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeMaskDest.setStatus("current")
_RadBridgeMaskPat1_Type = OctetString
_RadBridgeMaskPat1_Object = MibTableColumn
radBridgeMaskPat1 = _RadBridgeMaskPat1_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 3, 1, 5),
    _RadBridgeMaskPat1_Type()
)
radBridgeMaskPat1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeMaskPat1.setStatus("current")
_RadBridgeMaskActiveBit1_Type = OctetString
_RadBridgeMaskActiveBit1_Object = MibTableColumn
radBridgeMaskActiveBit1 = _RadBridgeMaskActiveBit1_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 3, 1, 6),
    _RadBridgeMaskActiveBit1_Type()
)
radBridgeMaskActiveBit1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeMaskActiveBit1.setStatus("current")


class _RadBridgeMaskFrom1_Type(Integer32):
    """Custom type radBridgeMaskFrom1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("llc", 2),
          ("mac", 1),
          ("net", 3))
    )


_RadBridgeMaskFrom1_Type.__name__ = "Integer32"
_RadBridgeMaskFrom1_Object = MibTableColumn
radBridgeMaskFrom1 = _RadBridgeMaskFrom1_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 3, 1, 7),
    _RadBridgeMaskFrom1_Type()
)
radBridgeMaskFrom1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeMaskFrom1.setStatus("current")
_RadBridgeMaskOffset1_Type = Integer32
_RadBridgeMaskOffset1_Object = MibTableColumn
radBridgeMaskOffset1 = _RadBridgeMaskOffset1_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 3, 1, 8),
    _RadBridgeMaskOffset1_Type()
)
radBridgeMaskOffset1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeMaskOffset1.setStatus("current")


class _RadBridgeMaskCond1_Type(Integer32):
    """Custom type radBridgeMaskCond1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 1),
          ("true", 2))
    )


_RadBridgeMaskCond1_Type.__name__ = "Integer32"
_RadBridgeMaskCond1_Object = MibTableColumn
radBridgeMaskCond1 = _RadBridgeMaskCond1_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 3, 1, 9),
    _RadBridgeMaskCond1_Type()
)
radBridgeMaskCond1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeMaskCond1.setStatus("current")
_RadBridgeMaskPat2_Type = OctetString
_RadBridgeMaskPat2_Object = MibTableColumn
radBridgeMaskPat2 = _RadBridgeMaskPat2_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 3, 1, 10),
    _RadBridgeMaskPat2_Type()
)
radBridgeMaskPat2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeMaskPat2.setStatus("current")
_RadBridgeMaskActiveBit2_Type = OctetString
_RadBridgeMaskActiveBit2_Object = MibTableColumn
radBridgeMaskActiveBit2 = _RadBridgeMaskActiveBit2_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 3, 1, 11),
    _RadBridgeMaskActiveBit2_Type()
)
radBridgeMaskActiveBit2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeMaskActiveBit2.setStatus("current")


class _RadBridgeMaskFrom2_Type(Integer32):
    """Custom type radBridgeMaskFrom2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("llc", 2),
          ("mac", 1),
          ("net", 3))
    )


_RadBridgeMaskFrom2_Type.__name__ = "Integer32"
_RadBridgeMaskFrom2_Object = MibTableColumn
radBridgeMaskFrom2 = _RadBridgeMaskFrom2_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 3, 1, 12),
    _RadBridgeMaskFrom2_Type()
)
radBridgeMaskFrom2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeMaskFrom2.setStatus("current")
_RadBridgeMaskOffset2_Type = Integer32
_RadBridgeMaskOffset2_Object = MibTableColumn
radBridgeMaskOffset2 = _RadBridgeMaskOffset2_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 3, 1, 13),
    _RadBridgeMaskOffset2_Type()
)
radBridgeMaskOffset2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeMaskOffset2.setStatus("current")


class _RadBridgeMaskCond2_Type(Integer32):
    """Custom type radBridgeMaskCond2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 1),
          ("true", 2))
    )


_RadBridgeMaskCond2_Type.__name__ = "Integer32"
_RadBridgeMaskCond2_Object = MibTableColumn
radBridgeMaskCond2 = _RadBridgeMaskCond2_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 3, 1, 14),
    _RadBridgeMaskCond2_Type()
)
radBridgeMaskCond2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeMaskCond2.setStatus("current")
_RadBridgeMaskPat3_Type = OctetString
_RadBridgeMaskPat3_Object = MibTableColumn
radBridgeMaskPat3 = _RadBridgeMaskPat3_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 3, 1, 15),
    _RadBridgeMaskPat3_Type()
)
radBridgeMaskPat3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeMaskPat3.setStatus("current")
_RadBridgeMaskActiveBit3_Type = OctetString
_RadBridgeMaskActiveBit3_Object = MibTableColumn
radBridgeMaskActiveBit3 = _RadBridgeMaskActiveBit3_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 3, 1, 16),
    _RadBridgeMaskActiveBit3_Type()
)
radBridgeMaskActiveBit3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeMaskActiveBit3.setStatus("current")


class _RadBridgeMaskFrom3_Type(Integer32):
    """Custom type radBridgeMaskFrom3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("llc", 2),
          ("mac", 1),
          ("net", 3))
    )


_RadBridgeMaskFrom3_Type.__name__ = "Integer32"
_RadBridgeMaskFrom3_Object = MibTableColumn
radBridgeMaskFrom3 = _RadBridgeMaskFrom3_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 3, 1, 17),
    _RadBridgeMaskFrom3_Type()
)
radBridgeMaskFrom3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeMaskFrom3.setStatus("current")
_RadBridgeMaskOffset3_Type = Integer32
_RadBridgeMaskOffset3_Object = MibTableColumn
radBridgeMaskOffset3 = _RadBridgeMaskOffset3_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 3, 1, 18),
    _RadBridgeMaskOffset3_Type()
)
radBridgeMaskOffset3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeMaskOffset3.setStatus("current")


class _RadBridgeMaskCond3_Type(Integer32):
    """Custom type radBridgeMaskCond3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 1),
          ("true", 2))
    )


_RadBridgeMaskCond3_Type.__name__ = "Integer32"
_RadBridgeMaskCond3_Object = MibTableColumn
radBridgeMaskCond3 = _RadBridgeMaskCond3_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 3, 1, 19),
    _RadBridgeMaskCond3_Type()
)
radBridgeMaskCond3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeMaskCond3.setStatus("current")


class _RadBridgeMaskOper_Type(Integer32):
    """Custom type radBridgeMaskOper based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("block", 1),
          ("delete", 7),
          ("forward", 2),
          ("forward-route", 4),
          ("high-priority", 5),
          ("noOp", 6),
          ("route", 3))
    )


_RadBridgeMaskOper_Type.__name__ = "Integer32"
_RadBridgeMaskOper_Object = MibTableColumn
radBridgeMaskOper = _RadBridgeMaskOper_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 3, 1, 20),
    _RadBridgeMaskOper_Type()
)
radBridgeMaskOper.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeMaskOper.setStatus("current")
_RadBridgeCOD_ObjectIdentity = ObjectIdentity
radBridgeCOD = _RadBridgeCOD_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4)
)
_RadBridgeCODParamTable_Object = MibTable
radBridgeCODParamTable = _RadBridgeCODParamTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 1)
)
if mibBuilder.loadTexts:
    radBridgeCODParamTable.setStatus("current")
_RadBridgeCODEntry_Object = MibTableRow
radBridgeCODEntry = _RadBridgeCODEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 1, 1)
)
radBridgeCODEntry.setIndexNames(
    (0, "RAD-MIB", "radBridgeCODIfIndex"),
)
if mibBuilder.loadTexts:
    radBridgeCODEntry.setStatus("current")
_RadBridgeCODIfIndex_Type = Integer32
_RadBridgeCODIfIndex_Object = MibTableColumn
radBridgeCODIfIndex = _RadBridgeCODIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 1, 1, 1),
    _RadBridgeCODIfIndex_Type()
)
radBridgeCODIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCODIfIndex.setStatus("current")


class _RadBridgeCODManualConnect_Type(Integer32):
    """Custom type radBridgeCODManualConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("connect", 1),
          ("disconnect", 2))
    )


_RadBridgeCODManualConnect_Type.__name__ = "Integer32"
_RadBridgeCODManualConnect_Object = MibTableColumn
radBridgeCODManualConnect = _RadBridgeCODManualConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 1, 1, 2),
    _RadBridgeCODManualConnect_Type()
)
radBridgeCODManualConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeCODManualConnect.setStatus("current")


class _RadBridgeCODMode_Type(Integer32):
    """Custom type radBridgeCODMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("answer", 1),
          ("answerAndOriginate", 4),
          ("disable", 3),
          ("originate", 2))
    )


_RadBridgeCODMode_Type.__name__ = "Integer32"
_RadBridgeCODMode_Object = MibTableColumn
radBridgeCODMode = _RadBridgeCODMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 1, 1, 3),
    _RadBridgeCODMode_Type()
)
radBridgeCODMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeCODMode.setStatus("current")
_RadBridgeCODConnectDelay_Type = Integer32
_RadBridgeCODConnectDelay_Object = MibTableColumn
radBridgeCODConnectDelay = _RadBridgeCODConnectDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 1, 1, 4),
    _RadBridgeCODConnectDelay_Type()
)
radBridgeCODConnectDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeCODConnectDelay.setStatus("current")
_RadBridgeCODisConnectDelay_Type = Integer32
_RadBridgeCODisConnectDelay_Object = MibTableColumn
radBridgeCODisConnectDelay = _RadBridgeCODisConnectDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 1, 1, 5),
    _RadBridgeCODisConnectDelay_Type()
)
radBridgeCODisConnectDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeCODisConnectDelay.setStatus("current")


class _RadBridgeCODImplicitSwitch_Type(Integer32):
    """Custom type radBridgeCODImplicitSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_RadBridgeCODImplicitSwitch_Type.__name__ = "Integer32"
_RadBridgeCODImplicitSwitch_Object = MibTableColumn
radBridgeCODImplicitSwitch = _RadBridgeCODImplicitSwitch_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 1, 1, 6),
    _RadBridgeCODImplicitSwitch_Type()
)
radBridgeCODImplicitSwitch.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeCODImplicitSwitch.setStatus("current")
_RadBridgeCODNumAccess_Type = Counter32
_RadBridgeCODNumAccess_Object = MibTableColumn
radBridgeCODNumAccess = _RadBridgeCODNumAccess_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 1, 1, 7),
    _RadBridgeCODNumAccess_Type()
)
radBridgeCODNumAccess.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCODNumAccess.setStatus("current")
_RadBridgeCODTotalConnecTime_Type = Integer32
_RadBridgeCODTotalConnecTime_Object = MibTableColumn
radBridgeCODTotalConnecTime = _RadBridgeCODTotalConnecTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 1, 1, 8),
    _RadBridgeCODTotalConnecTime_Type()
)
radBridgeCODTotalConnecTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCODTotalConnecTime.setStatus("current")
_RadBridgeCODTimeTriggerTable_Object = MibTable
radBridgeCODTimeTriggerTable = _RadBridgeCODTimeTriggerTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 2)
)
if mibBuilder.loadTexts:
    radBridgeCODTimeTriggerTable.setStatus("current")
_RadBridgeCODTimeTriggerEntry_Object = MibTableRow
radBridgeCODTimeTriggerEntry = _RadBridgeCODTimeTriggerEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 2, 1)
)
radBridgeCODTimeTriggerEntry.setIndexNames(
    (0, "RAD-MIB", "radBridgeCODTimeIfIndex"),
    (0, "RAD-MIB", "radBridgeCODDay"),
    (0, "RAD-MIB", "radBridgeCODTimeTriggerNum"),
)
if mibBuilder.loadTexts:
    radBridgeCODTimeTriggerEntry.setStatus("current")
_RadBridgeCODTimeIfIndex_Type = Integer32
_RadBridgeCODTimeIfIndex_Object = MibTableColumn
radBridgeCODTimeIfIndex = _RadBridgeCODTimeIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 2, 1, 1),
    _RadBridgeCODTimeIfIndex_Type()
)
radBridgeCODTimeIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCODTimeIfIndex.setStatus("current")


class _RadBridgeCODDay_Type(Integer32):
    """Custom type radBridgeCODDay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("fri", 5),
          ("mon", 1),
          ("sat", 6),
          ("sun", 7),
          ("thu", 4),
          ("tue", 2),
          ("wed", 3))
    )


_RadBridgeCODDay_Type.__name__ = "Integer32"
_RadBridgeCODDay_Object = MibTableColumn
radBridgeCODDay = _RadBridgeCODDay_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 2, 1, 2),
    _RadBridgeCODDay_Type()
)
radBridgeCODDay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCODDay.setStatus("current")


class _RadBridgeCODTimeTriggerNum_Type(Integer32):
    """Custom type radBridgeCODTimeTriggerNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3),
    )


_RadBridgeCODTimeTriggerNum_Type.__name__ = "Integer32"
_RadBridgeCODTimeTriggerNum_Object = MibTableColumn
radBridgeCODTimeTriggerNum = _RadBridgeCODTimeTriggerNum_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 2, 1, 3),
    _RadBridgeCODTimeTriggerNum_Type()
)
radBridgeCODTimeTriggerNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCODTimeTriggerNum.setStatus("current")
_RadBridgeCODTimeTriggerFrom_Type = DisplayString
_RadBridgeCODTimeTriggerFrom_Object = MibTableColumn
radBridgeCODTimeTriggerFrom = _RadBridgeCODTimeTriggerFrom_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 2, 1, 4),
    _RadBridgeCODTimeTriggerFrom_Type()
)
radBridgeCODTimeTriggerFrom.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeCODTimeTriggerFrom.setStatus("current")
_RadBridgeCODTimeTriggerTo_Type = DisplayString
_RadBridgeCODTimeTriggerTo_Object = MibTableColumn
radBridgeCODTimeTriggerTo = _RadBridgeCODTimeTriggerTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 2, 1, 5),
    _RadBridgeCODTimeTriggerTo_Type()
)
radBridgeCODTimeTriggerTo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeCODTimeTriggerTo.setStatus("current")


class _RadBridgeCODTimeTriggerStatus_Type(Integer32):
    """Custom type radBridgeCODTimeTriggerStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_RadBridgeCODTimeTriggerStatus_Type.__name__ = "Integer32"
_RadBridgeCODTimeTriggerStatus_Object = MibTableColumn
radBridgeCODTimeTriggerStatus = _RadBridgeCODTimeTriggerStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 2, 1, 6),
    _RadBridgeCODTimeTriggerStatus_Type()
)
radBridgeCODTimeTriggerStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeCODTimeTriggerStatus.setStatus("current")
_RadBridgeCODTraffic_ObjectIdentity = ObjectIdentity
radBridgeCODTraffic = _RadBridgeCODTraffic_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 3)
)
_RadBridgeCODTrafficTable_Object = MibTable
radBridgeCODTrafficTable = _RadBridgeCODTrafficTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 3, 1)
)
if mibBuilder.loadTexts:
    radBridgeCODTrafficTable.setStatus("current")
_RadBridgeCODTrafficEntry_Object = MibTableRow
radBridgeCODTrafficEntry = _RadBridgeCODTrafficEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 3, 1, 1)
)
radBridgeCODTrafficEntry.setIndexNames(
    (0, "RAD-MIB", "radBridgeCODProtocolType"),
)
if mibBuilder.loadTexts:
    radBridgeCODTrafficEntry.setStatus("current")


class _RadBridgeCODProtocolType_Type(Integer32):
    """Custom type radBridgeCODProtocolType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ip", 1),
          ("ipx", 2),
          ("other", 3))
    )


_RadBridgeCODProtocolType_Type.__name__ = "Integer32"
_RadBridgeCODProtocolType_Object = MibTableColumn
radBridgeCODProtocolType = _RadBridgeCODProtocolType_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 3, 1, 1, 1),
    _RadBridgeCODProtocolType_Type()
)
radBridgeCODProtocolType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCODProtocolType.setStatus("current")


class _RadBridgeCODTrafficTriggerStatus_Type(Integer32):
    """Custom type radBridgeCODTrafficTriggerStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_RadBridgeCODTrafficTriggerStatus_Type.__name__ = "Integer32"
_RadBridgeCODTrafficTriggerStatus_Object = MibTableColumn
radBridgeCODTrafficTriggerStatus = _RadBridgeCODTrafficTriggerStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 3, 1, 1, 2),
    _RadBridgeCODTrafficTriggerStatus_Type()
)
radBridgeCODTrafficTriggerStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeCODTrafficTriggerStatus.setStatus("current")
_RadBridgeCODRemoteIPAddr_Type = IpAddress
_RadBridgeCODRemoteIPAddr_Object = MibScalar
radBridgeCODRemoteIPAddr = _RadBridgeCODRemoteIPAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 3, 2),
    _RadBridgeCODRemoteIPAddr_Type()
)
radBridgeCODRemoteIPAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeCODRemoteIPAddr.setStatus("current")
_RadBridgeCODIPMask_Type = IpAddress
_RadBridgeCODIPMask_Object = MibScalar
radBridgeCODIPMask = _RadBridgeCODIPMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 3, 3),
    _RadBridgeCODIPMask_Type()
)
radBridgeCODIPMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeCODIPMask.setStatus("current")
_RadBridgeCODTrafficTriggerProtType_Type = OctetString
_RadBridgeCODTrafficTriggerProtType_Object = MibScalar
radBridgeCODTrafficTriggerProtType = _RadBridgeCODTrafficTriggerProtType_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 3, 4),
    _RadBridgeCODTrafficTriggerProtType_Type()
)
radBridgeCODTrafficTriggerProtType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeCODTrafficTriggerProtType.setStatus("current")
_RadBridgeCODCondTable_Object = MibTable
radBridgeCODCondTable = _RadBridgeCODCondTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 4)
)
if mibBuilder.loadTexts:
    radBridgeCODCondTable.setStatus("current")
_RadBridgeCODCondEntry_Object = MibTableRow
radBridgeCODCondEntry = _RadBridgeCODCondEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 4, 1)
)
radBridgeCODCondEntry.setIndexNames(
    (0, "RAD-MIB", "radBridgeCODCondIfIndex"),
)
if mibBuilder.loadTexts:
    radBridgeCODCondEntry.setStatus("current")
_RadBridgeCODCondIfIndex_Type = Integer32
_RadBridgeCODCondIfIndex_Object = MibTableColumn
radBridgeCODCondIfIndex = _RadBridgeCODCondIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 4, 1, 1),
    _RadBridgeCODCondIfIndex_Type()
)
radBridgeCODCondIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCODCondIfIndex.setStatus("current")


class _RadBridgeCODOriginateConnectCondition_Type(Integer32):
    """Custom type radBridgeCODOriginateConnectCondition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("onManualConnect", 4),
          ("onPowerOn", 1),
          ("onTraffic", 3),
          ("whenAnyStationOnLan", 2))
    )


_RadBridgeCODOriginateConnectCondition_Type.__name__ = "Integer32"
_RadBridgeCODOriginateConnectCondition_Object = MibTableColumn
radBridgeCODOriginateConnectCondition = _RadBridgeCODOriginateConnectCondition_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 4, 1, 2),
    _RadBridgeCODOriginateConnectCondition_Type()
)
radBridgeCODOriginateConnectCondition.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeCODOriginateConnectCondition.setStatus("current")


class _RadBridgeCODOriginateDisConnectCondition_Type(Integer32):
    """Custom type radBridgeCODOriginateDisConnectCondition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noStationOnLan", 1),
          ("onDelayFromConnectionOnRequest", 3),
          ("onManualDisConnect", 4),
          ("onTraffic", 2))
    )


_RadBridgeCODOriginateDisConnectCondition_Type.__name__ = "Integer32"
_RadBridgeCODOriginateDisConnectCondition_Object = MibTableColumn
radBridgeCODOriginateDisConnectCondition = _RadBridgeCODOriginateDisConnectCondition_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 4, 1, 3),
    _RadBridgeCODOriginateDisConnectCondition_Type()
)
radBridgeCODOriginateDisConnectCondition.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeCODOriginateDisConnectCondition.setStatus("current")
_RadBridgeCODOriginateDisConnectDelay_Type = Integer32
_RadBridgeCODOriginateDisConnectDelay_Object = MibTableColumn
radBridgeCODOriginateDisConnectDelay = _RadBridgeCODOriginateDisConnectDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 4, 1, 4),
    _RadBridgeCODOriginateDisConnectDelay_Type()
)
radBridgeCODOriginateDisConnectDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeCODOriginateDisConnectDelay.setStatus("current")


class _RadBridgeCODAnswerConnectCondition_Type(Integer32):
    """Custom type radBridgeCODAnswerConnectCondition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("onManualConnect", 4),
          ("onPowerOn", 1),
          ("onTraffic", 3),
          ("whenAnyStationOnLan", 2))
    )


_RadBridgeCODAnswerConnectCondition_Type.__name__ = "Integer32"
_RadBridgeCODAnswerConnectCondition_Object = MibTableColumn
radBridgeCODAnswerConnectCondition = _RadBridgeCODAnswerConnectCondition_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 4, 1, 5),
    _RadBridgeCODAnswerConnectCondition_Type()
)
radBridgeCODAnswerConnectCondition.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeCODAnswerConnectCondition.setStatus("current")
_RadBridgeCODSpecificOnTrafficOIDCondition_Type = ObjectIdentifier
_RadBridgeCODSpecificOnTrafficOIDCondition_Object = MibTableColumn
radBridgeCODSpecificOnTrafficOIDCondition = _RadBridgeCODSpecificOnTrafficOIDCondition_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 4, 1, 6),
    _RadBridgeCODSpecificOnTrafficOIDCondition_Type()
)
radBridgeCODSpecificOnTrafficOIDCondition.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCODSpecificOnTrafficOIDCondition.setStatus("current")
_RadBridgeCODDisConnectMinimunFramesNumber_Type = Integer32
_RadBridgeCODDisConnectMinimunFramesNumber_Object = MibTableColumn
radBridgeCODDisConnectMinimunFramesNumber = _RadBridgeCODDisConnectMinimunFramesNumber_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 4, 4, 1, 7),
    _RadBridgeCODDisConnectMinimunFramesNumber_Type()
)
radBridgeCODDisConnectMinimunFramesNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeCODDisConnectMinimunFramesNumber.setStatus("current")
_RadBridgeIPX_ObjectIdentity = ObjectIdentity
radBridgeIPX = _RadBridgeIPX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5)
)
_RadBridgeIPXdriver_ObjectIdentity = ObjectIdentity
radBridgeIPXdriver = _RadBridgeIPXdriver_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 1)
)


class _RadBridgeIPXForwarding_Type(Integer32):
    """Custom type radBridgeIPXForwarding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("forwarding", 1),
          ("not-forwarding", 2))
    )


_RadBridgeIPXForwarding_Type.__name__ = "Integer32"
_RadBridgeIPXForwarding_Object = MibScalar
radBridgeIPXForwarding = _RadBridgeIPXForwarding_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 1, 1),
    _RadBridgeIPXForwarding_Type()
)
radBridgeIPXForwarding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeIPXForwarding.setStatus("current")
_RadBridgeIPXRip_ObjectIdentity = ObjectIdentity
radBridgeIPXRip = _RadBridgeIPXRip_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 2)
)
_RadBridgeIPXRipOutPackets_Type = Counter32
_RadBridgeIPXRipOutPackets_Object = MibScalar
radBridgeIPXRipOutPackets = _RadBridgeIPXRipOutPackets_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 2, 1),
    _RadBridgeIPXRipOutPackets_Type()
)
radBridgeIPXRipOutPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIPXRipOutPackets.setStatus("current")
_RadBridgeIPXRipInPackets_Type = Counter32
_RadBridgeIPXRipInPackets_Object = MibScalar
radBridgeIPXRipInPackets = _RadBridgeIPXRipInPackets_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 2, 2),
    _RadBridgeIPXRipInPackets_Type()
)
radBridgeIPXRipInPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIPXRipInPackets.setStatus("current")
_RadBridgeIPXRipInDiscards_Type = Counter32
_RadBridgeIPXRipInDiscards_Object = MibScalar
radBridgeIPXRipInDiscards = _RadBridgeIPXRipInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 2, 3),
    _RadBridgeIPXRipInDiscards_Type()
)
radBridgeIPXRipInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIPXRipInDiscards.setStatus("current")
_RadBridgeIPXRipTblNoOfEntries_Type = Integer32
_RadBridgeIPXRipTblNoOfEntries_Object = MibScalar
radBridgeIPXRipTblNoOfEntries = _RadBridgeIPXRipTblNoOfEntries_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 2, 4),
    _RadBridgeIPXRipTblNoOfEntries_Type()
)
radBridgeIPXRipTblNoOfEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIPXRipTblNoOfEntries.setStatus("current")
_RadBridgeIPXRipTblBcastTrigUpdateInterval_Type = Integer32
_RadBridgeIPXRipTblBcastTrigUpdateInterval_Object = MibScalar
radBridgeIPXRipTblBcastTrigUpdateInterval = _RadBridgeIPXRipTblBcastTrigUpdateInterval_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 2, 5),
    _RadBridgeIPXRipTblBcastTrigUpdateInterval_Type()
)
radBridgeIPXRipTblBcastTrigUpdateInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeIPXRipTblBcastTrigUpdateInterval.setStatus("current")
_RadBridgeIPXRipTable_Object = MibTable
radBridgeIPXRipTable = _RadBridgeIPXRipTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 2, 6)
)
if mibBuilder.loadTexts:
    radBridgeIPXRipTable.setStatus("current")
_RadBridgeIPXRipTableEntry_Object = MibTableRow
radBridgeIPXRipTableEntry = _RadBridgeIPXRipTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 2, 6, 1)
)
radBridgeIPXRipTableEntry.setIndexNames(
    (0, "RAD-MIB", "radBridgeIPXRipDestNetwork"),
    (0, "RAD-MIB", "radBridgeIPXRipPolicy"),
)
if mibBuilder.loadTexts:
    radBridgeIPXRipTableEntry.setStatus("current")


class _RadBridgeIPXRipDestNetwork_Type(OctetString):
    """Custom type radBridgeIPXRipDestNetwork based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_RadBridgeIPXRipDestNetwork_Type.__name__ = "OctetString"
_RadBridgeIPXRipDestNetwork_Object = MibTableColumn
radBridgeIPXRipDestNetwork = _RadBridgeIPXRipDestNetwork_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 2, 6, 1, 1),
    _RadBridgeIPXRipDestNetwork_Type()
)
radBridgeIPXRipDestNetwork.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIPXRipDestNetwork.setStatus("current")


class _RadBridgeIPXRipPolicy_Type(Integer32):
    """Custom type radBridgeIPXRipPolicy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("alternate", 2),
          ("main", 1))
    )


_RadBridgeIPXRipPolicy_Type.__name__ = "Integer32"
_RadBridgeIPXRipPolicy_Object = MibTableColumn
radBridgeIPXRipPolicy = _RadBridgeIPXRipPolicy_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 2, 6, 1, 2),
    _RadBridgeIPXRipPolicy_Type()
)
radBridgeIPXRipPolicy.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIPXRipPolicy.setStatus("current")


class _RadBridgeIPXRipForwardingRouter_Type(OctetString):
    """Custom type radBridgeIPXRipForwardingRouter based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_RadBridgeIPXRipForwardingRouter_Type.__name__ = "OctetString"
_RadBridgeIPXRipForwardingRouter_Object = MibTableColumn
radBridgeIPXRipForwardingRouter = _RadBridgeIPXRipForwardingRouter_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 2, 6, 1, 3),
    _RadBridgeIPXRipForwardingRouter_Type()
)
radBridgeIPXRipForwardingRouter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeIPXRipForwardingRouter.setStatus("current")
_RadBridgeIPXRipNIC_Type = Integer32
_RadBridgeIPXRipNIC_Object = MibTableColumn
radBridgeIPXRipNIC = _RadBridgeIPXRipNIC_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 2, 6, 1, 4),
    _RadBridgeIPXRipNIC_Type()
)
radBridgeIPXRipNIC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeIPXRipNIC.setStatus("current")
_RadBridgeIPXRipTickMetric_Type = Integer32
_RadBridgeIPXRipTickMetric_Object = MibTableColumn
radBridgeIPXRipTickMetric = _RadBridgeIPXRipTickMetric_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 2, 6, 1, 5),
    _RadBridgeIPXRipTickMetric_Type()
)
radBridgeIPXRipTickMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeIPXRipTickMetric.setStatus("current")
_RadBridgeIPXRipHopMetric_Type = Integer32
_RadBridgeIPXRipHopMetric_Object = MibTableColumn
radBridgeIPXRipHopMetric = _RadBridgeIPXRipHopMetric_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 2, 6, 1, 6),
    _RadBridgeIPXRipHopMetric_Type()
)
radBridgeIPXRipHopMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeIPXRipHopMetric.setStatus("current")
_RadBridgeIPXRipAgingTime_Type = TimeTicks
_RadBridgeIPXRipAgingTime_Object = MibTableColumn
radBridgeIPXRipAgingTime = _RadBridgeIPXRipAgingTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 2, 6, 1, 7),
    _RadBridgeIPXRipAgingTime_Type()
)
radBridgeIPXRipAgingTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIPXRipAgingTime.setStatus("current")


class _RadBridgeIPXRipValueStatus_Type(Integer32):
    """Custom type radBridgeIPXRipValueStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dynamic", 2),
          ("invalid", 3),
          ("semiDynamic", 4),
          ("static", 1))
    )


_RadBridgeIPXRipValueStatus_Type.__name__ = "Integer32"
_RadBridgeIPXRipValueStatus_Object = MibTableColumn
radBridgeIPXRipValueStatus = _RadBridgeIPXRipValueStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 2, 6, 1, 8),
    _RadBridgeIPXRipValueStatus_Type()
)
radBridgeIPXRipValueStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeIPXRipValueStatus.setStatus("current")


class _RadBridgeIPXRipForwardType_Type(Integer32):
    """Custom type radBridgeIPXRipForwardType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("local", 2),
          ("other", 1),
          ("remote", 3))
    )


_RadBridgeIPXRipForwardType_Type.__name__ = "Integer32"
_RadBridgeIPXRipForwardType_Object = MibTableColumn
radBridgeIPXRipForwardType = _RadBridgeIPXRipForwardType_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 2, 6, 1, 9),
    _RadBridgeIPXRipForwardType_Type()
)
radBridgeIPXRipForwardType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeIPXRipForwardType.setStatus("current")
_RadBridgeIPXRipInfTable_Object = MibTable
radBridgeIPXRipInfTable = _RadBridgeIPXRipInfTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 2, 7)
)
if mibBuilder.loadTexts:
    radBridgeIPXRipInfTable.setStatus("current")
_RadBridgeIPXRipInfEntry_Object = MibTableRow
radBridgeIPXRipInfEntry = _RadBridgeIPXRipInfEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 2, 7, 1)
)
radBridgeIPXRipInfEntry.setIndexNames(
    (0, "RAD-MIB", "radBridgeIPXRipInfIfIndex"),
)
if mibBuilder.loadTexts:
    radBridgeIPXRipInfEntry.setStatus("current")
_RadBridgeIPXRipInfIfIndex_Type = Integer32
_RadBridgeIPXRipInfIfIndex_Object = MibTableColumn
radBridgeIPXRipInfIfIndex = _RadBridgeIPXRipInfIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 2, 7, 1, 1),
    _RadBridgeIPXRipInfIfIndex_Type()
)
radBridgeIPXRipInfIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIPXRipInfIfIndex.setStatus("current")
_RadBridgeIPXRipInfBcastUpdate_Type = Integer32
_RadBridgeIPXRipInfBcastUpdate_Object = MibTableColumn
radBridgeIPXRipInfBcastUpdate = _RadBridgeIPXRipInfBcastUpdate_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 2, 7, 1, 2),
    _RadBridgeIPXRipInfBcastUpdate_Type()
)
radBridgeIPXRipInfBcastUpdate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeIPXRipInfBcastUpdate.setStatus("current")
_RadBridgeIPXRipInfAgeMultiplier_Type = Integer32
_RadBridgeIPXRipInfAgeMultiplier_Object = MibTableColumn
radBridgeIPXRipInfAgeMultiplier = _RadBridgeIPXRipInfAgeMultiplier_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 2, 7, 1, 3),
    _RadBridgeIPXRipInfAgeMultiplier_Type()
)
radBridgeIPXRipInfAgeMultiplier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeIPXRipInfAgeMultiplier.setStatus("current")
_RadBridgeIPXSap_ObjectIdentity = ObjectIdentity
radBridgeIPXSap = _RadBridgeIPXSap_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 3)
)
_RadBridgeIPXSapOutPackets_Type = Counter32
_RadBridgeIPXSapOutPackets_Object = MibScalar
radBridgeIPXSapOutPackets = _RadBridgeIPXSapOutPackets_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 3, 1),
    _RadBridgeIPXSapOutPackets_Type()
)
radBridgeIPXSapOutPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIPXSapOutPackets.setStatus("current")
_RadBridgeIPXSapInPackets_Type = Counter32
_RadBridgeIPXSapInPackets_Object = MibScalar
radBridgeIPXSapInPackets = _RadBridgeIPXSapInPackets_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 3, 2),
    _RadBridgeIPXSapInPackets_Type()
)
radBridgeIPXSapInPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIPXSapInPackets.setStatus("current")
_RadBridgeIPXSapInDiscards_Type = Counter32
_RadBridgeIPXSapInDiscards_Object = MibScalar
radBridgeIPXSapInDiscards = _RadBridgeIPXSapInDiscards_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 3, 3),
    _RadBridgeIPXSapInDiscards_Type()
)
radBridgeIPXSapInDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIPXSapInDiscards.setStatus("current")
_RadBridgeIPXSapTblNoOfEntries_Type = Integer32
_RadBridgeIPXSapTblNoOfEntries_Object = MibScalar
radBridgeIPXSapTblNoOfEntries = _RadBridgeIPXSapTblNoOfEntries_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 3, 4),
    _RadBridgeIPXSapTblNoOfEntries_Type()
)
radBridgeIPXSapTblNoOfEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIPXSapTblNoOfEntries.setStatus("current")
_RadBridgeIPXSapTblBcastTrigUpdateInterval_Type = Integer32
_RadBridgeIPXSapTblBcastTrigUpdateInterval_Object = MibScalar
radBridgeIPXSapTblBcastTrigUpdateInterval = _RadBridgeIPXSapTblBcastTrigUpdateInterval_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 3, 5),
    _RadBridgeIPXSapTblBcastTrigUpdateInterval_Type()
)
radBridgeIPXSapTblBcastTrigUpdateInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeIPXSapTblBcastTrigUpdateInterval.setStatus("current")
_RadBridgeIPXSapTable_Object = MibTable
radBridgeIPXSapTable = _RadBridgeIPXSapTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 3, 6)
)
if mibBuilder.loadTexts:
    radBridgeIPXSapTable.setStatus("current")
_RadBridgeIPXSapTableEntry_Object = MibTableRow
radBridgeIPXSapTableEntry = _RadBridgeIPXSapTableEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 3, 6, 1)
)
radBridgeIPXSapTableEntry.setIndexNames(
    (0, "RAD-MIB", "radBridgeIPXSapServerType"),
    (0, "RAD-MIB", "radBridgeIPXSapName"),
)
if mibBuilder.loadTexts:
    radBridgeIPXSapTableEntry.setStatus("current")
_RadBridgeIPXSapServerType_Type = Integer32
_RadBridgeIPXSapServerType_Object = MibTableColumn
radBridgeIPXSapServerType = _RadBridgeIPXSapServerType_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 3, 6, 1, 1),
    _RadBridgeIPXSapServerType_Type()
)
radBridgeIPXSapServerType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIPXSapServerType.setStatus("current")


class _RadBridgeIPXSapName_Type(DisplayString):
    """Custom type radBridgeIPXSapName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(48, 48),
    )


_RadBridgeIPXSapName_Type.__name__ = "DisplayString"
_RadBridgeIPXSapName_Object = MibTableColumn
radBridgeIPXSapName = _RadBridgeIPXSapName_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 3, 6, 1, 2),
    _RadBridgeIPXSapName_Type()
)
radBridgeIPXSapName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIPXSapName.setStatus("current")


class _RadBridgeIPXSapNetwork_Type(OctetString):
    """Custom type radBridgeIPXSapNetwork based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_RadBridgeIPXSapNetwork_Type.__name__ = "OctetString"
_RadBridgeIPXSapNetwork_Object = MibTableColumn
radBridgeIPXSapNetwork = _RadBridgeIPXSapNetwork_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 3, 6, 1, 3),
    _RadBridgeIPXSapNetwork_Type()
)
radBridgeIPXSapNetwork.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeIPXSapNetwork.setStatus("current")


class _RadBridgeIPXSapNode_Type(OctetString):
    """Custom type radBridgeIPXSapNode based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(6, 6),
    )


_RadBridgeIPXSapNode_Type.__name__ = "OctetString"
_RadBridgeIPXSapNode_Object = MibTableColumn
radBridgeIPXSapNode = _RadBridgeIPXSapNode_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 3, 6, 1, 4),
    _RadBridgeIPXSapNode_Type()
)
radBridgeIPXSapNode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeIPXSapNode.setStatus("current")
_RadBridgeIPXSapSocket_Type = Integer32
_RadBridgeIPXSapSocket_Object = MibTableColumn
radBridgeIPXSapSocket = _RadBridgeIPXSapSocket_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 3, 6, 1, 5),
    _RadBridgeIPXSapSocket_Type()
)
radBridgeIPXSapSocket.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeIPXSapSocket.setStatus("current")


class _RadBridgeIPXSapHopsToServer_Type(Integer32):
    """Custom type radBridgeIPXSapHopsToServer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_RadBridgeIPXSapHopsToServer_Type.__name__ = "Integer32"
_RadBridgeIPXSapHopsToServer_Object = MibTableColumn
radBridgeIPXSapHopsToServer = _RadBridgeIPXSapHopsToServer_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 3, 6, 1, 6),
    _RadBridgeIPXSapHopsToServer_Type()
)
radBridgeIPXSapHopsToServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeIPXSapHopsToServer.setStatus("current")
_RadBridgeIPXSapNIC_Type = Integer32
_RadBridgeIPXSapNIC_Object = MibTableColumn
radBridgeIPXSapNIC = _RadBridgeIPXSapNIC_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 3, 6, 1, 7),
    _RadBridgeIPXSapNIC_Type()
)
radBridgeIPXSapNIC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeIPXSapNIC.setStatus("current")
_RadBridgeIPXSapAgingTime_Type = TimeTicks
_RadBridgeIPXSapAgingTime_Object = MibTableColumn
radBridgeIPXSapAgingTime = _RadBridgeIPXSapAgingTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 3, 6, 1, 8),
    _RadBridgeIPXSapAgingTime_Type()
)
radBridgeIPXSapAgingTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIPXSapAgingTime.setStatus("current")


class _RadBridgeIPXSapStatus_Type(Integer32):
    """Custom type radBridgeIPXSapStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dynamic", 2),
          ("invalid", 3),
          ("permanent", 1),
          ("semiDynamic", 4))
    )


_RadBridgeIPXSapStatus_Type.__name__ = "Integer32"
_RadBridgeIPXSapStatus_Object = MibTableColumn
radBridgeIPXSapStatus = _RadBridgeIPXSapStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 3, 6, 1, 9),
    _RadBridgeIPXSapStatus_Type()
)
radBridgeIPXSapStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeIPXSapStatus.setStatus("current")
_RadBridgeIPXSapInfTable_Object = MibTable
radBridgeIPXSapInfTable = _RadBridgeIPXSapInfTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 3, 7)
)
if mibBuilder.loadTexts:
    radBridgeIPXSapInfTable.setStatus("current")
_RadBridgeIPXSapInfEntry_Object = MibTableRow
radBridgeIPXSapInfEntry = _RadBridgeIPXSapInfEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 3, 7, 1)
)
radBridgeIPXSapInfEntry.setIndexNames(
    (0, "RAD-MIB", "radBridgeIPXSapInfIfIndex"),
)
if mibBuilder.loadTexts:
    radBridgeIPXSapInfEntry.setStatus("current")
_RadBridgeIPXSapInfIfIndex_Type = Integer32
_RadBridgeIPXSapInfIfIndex_Object = MibTableColumn
radBridgeIPXSapInfIfIndex = _RadBridgeIPXSapInfIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 3, 7, 1, 1),
    _RadBridgeIPXSapInfIfIndex_Type()
)
radBridgeIPXSapInfIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIPXSapInfIfIndex.setStatus("current")
_RadBridgeIPXSapInfBcastUpdate_Type = Integer32
_RadBridgeIPXSapInfBcastUpdate_Object = MibTableColumn
radBridgeIPXSapInfBcastUpdate = _RadBridgeIPXSapInfBcastUpdate_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 3, 7, 1, 2),
    _RadBridgeIPXSapInfBcastUpdate_Type()
)
radBridgeIPXSapInfBcastUpdate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeIPXSapInfBcastUpdate.setStatus("current")
_RadBridgeIPXSapInfAgeMultiplier_Type = Integer32
_RadBridgeIPXSapInfAgeMultiplier_Object = MibTableColumn
radBridgeIPXSapInfAgeMultiplier = _RadBridgeIPXSapInfAgeMultiplier_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 5, 3, 7, 1, 3),
    _RadBridgeIPXSapInfAgeMultiplier_Type()
)
radBridgeIPXSapInfAgeMultiplier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeIPXSapInfAgeMultiplier.setStatus("current")
_NewMasking_ObjectIdentity = ObjectIdentity
newMasking = _NewMasking_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6)
)
_MaskingMaxEntries_Type = Integer32
_MaskingMaxEntries_Object = MibScalar
maskingMaxEntries = _MaskingMaxEntries_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 1),
    _MaskingMaxEntries_Type()
)
maskingMaxEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maskingMaxEntries.setStatus("current")
_MaskingCurrentEntries_Type = Integer32
_MaskingCurrentEntries_Object = MibScalar
maskingCurrentEntries = _MaskingCurrentEntries_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 2),
    _MaskingCurrentEntries_Type()
)
maskingCurrentEntries.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maskingCurrentEntries.setStatus("current")
_MaskingTable_Object = MibTable
maskingTable = _MaskingTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3)
)
if mibBuilder.loadTexts:
    maskingTable.setStatus("current")
_MaskingEntry_Object = MibTableRow
maskingEntry = _MaskingEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1)
)
maskingEntry.setIndexNames(
    (0, "RAD-MIB", "maskingType"),
    (0, "RAD-MIB", "maskingIfIndex"),
    (0, "RAD-MIB", "maskingIndex"),
)
if mibBuilder.loadTexts:
    maskingEntry.setStatus("current")


class _MaskingType_Type(Integer32):
    """Custom type maskingType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("codConnect", 7),
          ("codDisconnect", 8),
          ("compress", 3),
          ("facs", 6),
          ("loadSharing", 5),
          ("priority", 4),
          ("rx", 2),
          ("tx", 1))
    )


_MaskingType_Type.__name__ = "Integer32"
_MaskingType_Object = MibTableColumn
maskingType = _MaskingType_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 1),
    _MaskingType_Type()
)
maskingType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maskingType.setStatus("current")
_MaskingIfIndex_Type = Integer32
_MaskingIfIndex_Object = MibTableColumn
maskingIfIndex = _MaskingIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 2),
    _MaskingIfIndex_Type()
)
maskingIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maskingIfIndex.setStatus("current")
_MaskingIndex_Type = Integer32
_MaskingIndex_Object = MibTableColumn
maskingIndex = _MaskingIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 3),
    _MaskingIndex_Type()
)
maskingIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maskingIndex.setStatus("current")


class _MaskingProtocolType_Type(Integer32):
    """Custom type maskingProtocolType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              255)
        )
    )
    namedValues = NamedValues(
        *(("all", 255),
          ("apple", 6),
          ("dec", 7),
          ("ip", 2),
          ("ipx", 3),
          ("netbios", 5),
          ("sna", 4),
          ("unknown", 1))
    )


_MaskingProtocolType_Type.__name__ = "Integer32"
_MaskingProtocolType_Object = MibTableColumn
maskingProtocolType = _MaskingProtocolType_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 4),
    _MaskingProtocolType_Type()
)
maskingProtocolType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maskingProtocolType.setStatus("current")
_MaskingSmartMaskOID_Type = ObjectIdentifier
_MaskingSmartMaskOID_Object = MibTableColumn
maskingSmartMaskOID = _MaskingSmartMaskOID_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 5),
    _MaskingSmartMaskOID_Type()
)
maskingSmartMaskOID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    maskingSmartMaskOID.setStatus("current")


class _MaskingFrameType_Type(Integer32):
    """Custom type maskingFrameType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("all", 2),
          ("broadcast", 3),
          ("multicast", 4),
          ("unknown", 1))
    )


_MaskingFrameType_Type.__name__ = "Integer32"
_MaskingFrameType_Object = MibTableColumn
maskingFrameType = _MaskingFrameType_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 6),
    _MaskingFrameType_Type()
)
maskingFrameType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maskingFrameType.setStatus("current")


class _MaskingFrameTypeCondition_Type(Integer32):
    """Custom type maskingFrameTypeCondition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 1),
          ("true", 2))
    )


_MaskingFrameTypeCondition_Type.__name__ = "Integer32"
_MaskingFrameTypeCondition_Object = MibTableColumn
maskingFrameTypeCondition = _MaskingFrameTypeCondition_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 7),
    _MaskingFrameTypeCondition_Type()
)
maskingFrameTypeCondition.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maskingFrameTypeCondition.setStatus("current")
_MaskingSourceAddress_Type = GenAddress
_MaskingSourceAddress_Object = MibTableColumn
maskingSourceAddress = _MaskingSourceAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 8),
    _MaskingSourceAddress_Type()
)
maskingSourceAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maskingSourceAddress.setStatus("current")
_MaskingSourceActiveBits_Type = GenAddress
_MaskingSourceActiveBits_Object = MibTableColumn
maskingSourceActiveBits = _MaskingSourceActiveBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 9),
    _MaskingSourceActiveBits_Type()
)
maskingSourceActiveBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maskingSourceActiveBits.setStatus("current")


class _MaskingSourceMacOrNet_Type(Integer32):
    """Custom type maskingSourceMacOrNet based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("appleAddress", 4),
          ("ipRange", 3),
          ("macAddress", 1),
          ("netAddress", 2))
    )


_MaskingSourceMacOrNet_Type.__name__ = "Integer32"
_MaskingSourceMacOrNet_Object = MibTableColumn
maskingSourceMacOrNet = _MaskingSourceMacOrNet_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 10),
    _MaskingSourceMacOrNet_Type()
)
maskingSourceMacOrNet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maskingSourceMacOrNet.setStatus("current")


class _MaskingSourceCondition_Type(Integer32):
    """Custom type maskingSourceCondition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 1),
          ("true", 2))
    )


_MaskingSourceCondition_Type.__name__ = "Integer32"
_MaskingSourceCondition_Object = MibTableColumn
maskingSourceCondition = _MaskingSourceCondition_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 11),
    _MaskingSourceCondition_Type()
)
maskingSourceCondition.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maskingSourceCondition.setStatus("current")
_MaskingDestAddress_Type = GenAddress
_MaskingDestAddress_Object = MibTableColumn
maskingDestAddress = _MaskingDestAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 12),
    _MaskingDestAddress_Type()
)
maskingDestAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maskingDestAddress.setStatus("current")
_MaskingDestActiveBits_Type = GenAddress
_MaskingDestActiveBits_Object = MibTableColumn
maskingDestActiveBits = _MaskingDestActiveBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 13),
    _MaskingDestActiveBits_Type()
)
maskingDestActiveBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maskingDestActiveBits.setStatus("current")


class _MaskingDestMacOrNet_Type(Integer32):
    """Custom type maskingDestMacOrNet based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("appleAddress", 4),
          ("ipRange", 3),
          ("macAddress", 1),
          ("netAddress", 2))
    )


_MaskingDestMacOrNet_Type.__name__ = "Integer32"
_MaskingDestMacOrNet_Object = MibTableColumn
maskingDestMacOrNet = _MaskingDestMacOrNet_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 14),
    _MaskingDestMacOrNet_Type()
)
maskingDestMacOrNet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maskingDestMacOrNet.setStatus("current")


class _MaskingDestCondition_Type(Integer32):
    """Custom type maskingDestCondition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 1),
          ("true", 2))
    )


_MaskingDestCondition_Type.__name__ = "Integer32"
_MaskingDestCondition_Object = MibTableColumn
maskingDestCondition = _MaskingDestCondition_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 15),
    _MaskingDestCondition_Type()
)
maskingDestCondition.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maskingDestCondition.setStatus("current")


class _MaskingLowLevelProt_Type(Integer32):
    """Custom type maskingLowLevelProt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("ipIcmp", 7),
          ("ipTcp", 6),
          ("ipUdp", 5),
          ("ipxEco", 10),
          ("ipxErr", 11),
          ("ipxNcp", 8),
          ("ipxPep", 12),
          ("ipxRip", 2),
          ("ipxSap", 3),
          ("ipxSpx", 4),
          ("ipxWan", 9),
          ("unknown", 1))
    )


_MaskingLowLevelProt_Type.__name__ = "Integer32"
_MaskingLowLevelProt_Object = MibTableColumn
maskingLowLevelProt = _MaskingLowLevelProt_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 16),
    _MaskingLowLevelProt_Type()
)
maskingLowLevelProt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maskingLowLevelProt.setStatus("current")


class _MaskingLowLevelProtCondition_Type(Integer32):
    """Custom type maskingLowLevelProtCondition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 1),
          ("true", 2))
    )


_MaskingLowLevelProtCondition_Type.__name__ = "Integer32"
_MaskingLowLevelProtCondition_Object = MibTableColumn
maskingLowLevelProtCondition = _MaskingLowLevelProtCondition_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 17),
    _MaskingLowLevelProtCondition_Type()
)
maskingLowLevelProtCondition.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maskingLowLevelProtCondition.setStatus("current")
_MaskingHighLevelProt_Type = Integer32
_MaskingHighLevelProt_Object = MibTableColumn
maskingHighLevelProt = _MaskingHighLevelProt_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 18),
    _MaskingHighLevelProt_Type()
)
maskingHighLevelProt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maskingHighLevelProt.setStatus("current")


class _MaskingHighLevelProtCondition_Type(Integer32):
    """Custom type maskingHighLevelProtCondition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 1),
          ("true", 2))
    )


_MaskingHighLevelProtCondition_Type.__name__ = "Integer32"
_MaskingHighLevelProtCondition_Object = MibTableColumn
maskingHighLevelProtCondition = _MaskingHighLevelProtCondition_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 19),
    _MaskingHighLevelProtCondition_Type()
)
maskingHighLevelProtCondition.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maskingHighLevelProtCondition.setStatus("current")
_MaskingPortNum_Type = Integer32
_MaskingPortNum_Object = MibTableColumn
maskingPortNum = _MaskingPortNum_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 20),
    _MaskingPortNum_Type()
)
maskingPortNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maskingPortNum.setStatus("current")


class _MaskingPortNumCondition_Type(Integer32):
    """Custom type maskingPortNumCondition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 1),
          ("true", 2))
    )


_MaskingPortNumCondition_Type.__name__ = "Integer32"
_MaskingPortNumCondition_Object = MibTableColumn
maskingPortNumCondition = _MaskingPortNumCondition_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 21),
    _MaskingPortNumCondition_Type()
)
maskingPortNumCondition.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maskingPortNumCondition.setStatus("current")


class _MaskingOperation_Type(Integer32):
    """Custom type maskingOperation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("block", 1),
          ("delete", 7),
          ("forward", 2),
          ("forward-route", 4),
          ("high-priority", 5),
          ("noOp", 6),
          ("route", 3),
          ("smartMask", 8))
    )


_MaskingOperation_Type.__name__ = "Integer32"
_MaskingOperation_Object = MibTableColumn
maskingOperation = _MaskingOperation_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 22),
    _MaskingOperation_Type()
)
maskingOperation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maskingOperation.setStatus("current")
_MaskingSrcPortNum_Type = Integer32
_MaskingSrcPortNum_Object = MibTableColumn
maskingSrcPortNum = _MaskingSrcPortNum_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 23),
    _MaskingSrcPortNum_Type()
)
maskingSrcPortNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maskingSrcPortNum.setStatus("current")


class _MaskingSrcPortNumCondition_Type(Integer32):
    """Custom type maskingSrcPortNumCondition based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 1),
          ("true", 2))
    )


_MaskingSrcPortNumCondition_Type.__name__ = "Integer32"
_MaskingSrcPortNumCondition_Object = MibTableColumn
maskingSrcPortNumCondition = _MaskingSrcPortNumCondition_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 6, 3, 1, 24),
    _MaskingSrcPortNumCondition_Type()
)
maskingSrcPortNumCondition.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maskingSrcPortNumCondition.setStatus("current")
_RadBridgePerformance_ObjectIdentity = ObjectIdentity
radBridgePerformance = _RadBridgePerformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7)
)
_RadBridgeCurrentTable_Object = MibTable
radBridgeCurrentTable = _RadBridgeCurrentTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 1)
)
if mibBuilder.loadTexts:
    radBridgeCurrentTable.setStatus("current")
_RadBridgeCurrentEntry_Object = MibTableRow
radBridgeCurrentEntry = _RadBridgeCurrentEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 1, 1)
)
radBridgeCurrentEntry.setIndexNames(
    (0, "RAD-MIB", "radBridgeCurrentIndex"),
)
if mibBuilder.loadTexts:
    radBridgeCurrentEntry.setStatus("current")
_RadBridgeCurrentIndex_Type = Integer32
_RadBridgeCurrentIndex_Object = MibTableColumn
radBridgeCurrentIndex = _RadBridgeCurrentIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 1, 1, 1),
    _RadBridgeCurrentIndex_Type()
)
radBridgeCurrentIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCurrentIndex.setStatus("current")
_RadBridgeCurrentIngressFilteringDiscardedFrames_Type = Gauge32
_RadBridgeCurrentIngressFilteringDiscardedFrames_Object = MibTableColumn
radBridgeCurrentIngressFilteringDiscardedFrames = _RadBridgeCurrentIngressFilteringDiscardedFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 1, 1, 2),
    _RadBridgeCurrentIngressFilteringDiscardedFrames_Type()
)
radBridgeCurrentIngressFilteringDiscardedFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCurrentIngressFilteringDiscardedFrames.setStatus("current")
_RadBridgeCurrentFrameTypeDiscardedFrames_Type = Gauge32
_RadBridgeCurrentFrameTypeDiscardedFrames_Object = MibTableColumn
radBridgeCurrentFrameTypeDiscardedFrames = _RadBridgeCurrentFrameTypeDiscardedFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 1, 1, 3),
    _RadBridgeCurrentFrameTypeDiscardedFrames_Type()
)
radBridgeCurrentFrameTypeDiscardedFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCurrentFrameTypeDiscardedFrames.setStatus("current")
_RadBridgeCurrentRxCorrectFrames_Type = Gauge32
_RadBridgeCurrentRxCorrectFrames_Object = MibTableColumn
radBridgeCurrentRxCorrectFrames = _RadBridgeCurrentRxCorrectFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 1, 1, 4),
    _RadBridgeCurrentRxCorrectFrames_Type()
)
radBridgeCurrentRxCorrectFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCurrentRxCorrectFrames.setStatus("current")
_RadBridgeCurrentRxCorrectBytes_Type = Gauge32
_RadBridgeCurrentRxCorrectBytes_Object = MibTableColumn
radBridgeCurrentRxCorrectBytes = _RadBridgeCurrentRxCorrectBytes_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 1, 1, 5),
    _RadBridgeCurrentRxCorrectBytes_Type()
)
radBridgeCurrentRxCorrectBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCurrentRxCorrectBytes.setStatus("current")
_RadBridgeCurrentRxCorrectBytesHCOverflow_Type = Gauge32
_RadBridgeCurrentRxCorrectBytesHCOverflow_Object = MibTableColumn
radBridgeCurrentRxCorrectBytesHCOverflow = _RadBridgeCurrentRxCorrectBytesHCOverflow_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 1, 1, 6),
    _RadBridgeCurrentRxCorrectBytesHCOverflow_Type()
)
radBridgeCurrentRxCorrectBytesHCOverflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCurrentRxCorrectBytesHCOverflow.setStatus("current")
_RadBridgeCurrentRxBcastFrames_Type = Gauge32
_RadBridgeCurrentRxBcastFrames_Object = MibTableColumn
radBridgeCurrentRxBcastFrames = _RadBridgeCurrentRxBcastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 1, 1, 7),
    _RadBridgeCurrentRxBcastFrames_Type()
)
radBridgeCurrentRxBcastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCurrentRxBcastFrames.setStatus("current")
_RadBridgeCurrentRxMcastFrames_Type = Gauge32
_RadBridgeCurrentRxMcastFrames_Object = MibTableColumn
radBridgeCurrentRxMcastFrames = _RadBridgeCurrentRxMcastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 1, 1, 8),
    _RadBridgeCurrentRxMcastFrames_Type()
)
radBridgeCurrentRxMcastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCurrentRxMcastFrames.setStatus("current")
_RadBridgeCurrentTxCorrectFrames_Type = Gauge32
_RadBridgeCurrentTxCorrectFrames_Object = MibTableColumn
radBridgeCurrentTxCorrectFrames = _RadBridgeCurrentTxCorrectFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 1, 1, 9),
    _RadBridgeCurrentTxCorrectFrames_Type()
)
radBridgeCurrentTxCorrectFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCurrentTxCorrectFrames.setStatus("current")
_RadBridgeCurrentTxCorrectBytes_Type = Gauge32
_RadBridgeCurrentTxCorrectBytes_Object = MibTableColumn
radBridgeCurrentTxCorrectBytes = _RadBridgeCurrentTxCorrectBytes_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 1, 1, 10),
    _RadBridgeCurrentTxCorrectBytes_Type()
)
radBridgeCurrentTxCorrectBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCurrentTxCorrectBytes.setStatus("current")
_RadBridgeCurrentTxCorrectBytesHCOverflow_Type = Gauge32
_RadBridgeCurrentTxCorrectBytesHCOverflow_Object = MibTableColumn
radBridgeCurrentTxCorrectBytesHCOverflow = _RadBridgeCurrentTxCorrectBytesHCOverflow_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 1, 1, 11),
    _RadBridgeCurrentTxCorrectBytesHCOverflow_Type()
)
radBridgeCurrentTxCorrectBytesHCOverflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCurrentTxCorrectBytesHCOverflow.setStatus("current")
_RadBridgeCurrentTxBcastFrames_Type = Gauge32
_RadBridgeCurrentTxBcastFrames_Object = MibTableColumn
radBridgeCurrentTxBcastFrames = _RadBridgeCurrentTxBcastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 1, 1, 12),
    _RadBridgeCurrentTxBcastFrames_Type()
)
radBridgeCurrentTxBcastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCurrentTxBcastFrames.setStatus("current")
_RadBridgeCurrentTxMcastFrames_Type = Gauge32
_RadBridgeCurrentTxMcastFrames_Object = MibTableColumn
radBridgeCurrentTxMcastFrames = _RadBridgeCurrentTxMcastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 1, 1, 13),
    _RadBridgeCurrentTxMcastFrames_Type()
)
radBridgeCurrentTxMcastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCurrentTxMcastFrames.setStatus("current")
_RadBridgeCurrentTxDropFrames_Type = Gauge32
_RadBridgeCurrentTxDropFrames_Object = MibTableColumn
radBridgeCurrentTxDropFrames = _RadBridgeCurrentTxDropFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 1, 1, 14),
    _RadBridgeCurrentTxDropFrames_Type()
)
radBridgeCurrentTxDropFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeCurrentTxDropFrames.setStatus("current")
_RadBridgeIntervalTable_Object = MibTable
radBridgeIntervalTable = _RadBridgeIntervalTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 2)
)
if mibBuilder.loadTexts:
    radBridgeIntervalTable.setStatus("current")
_RadBridgeIntervalEntry_Object = MibTableRow
radBridgeIntervalEntry = _RadBridgeIntervalEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 2, 1)
)
radBridgeIntervalEntry.setIndexNames(
    (0, "RAD-MIB", "radBridgeIntervalIndex"),
    (0, "RAD-MIB", "radBridgeIntervalNumber"),
)
if mibBuilder.loadTexts:
    radBridgeIntervalEntry.setStatus("current")
_RadBridgeIntervalIndex_Type = Integer32
_RadBridgeIntervalIndex_Object = MibTableColumn
radBridgeIntervalIndex = _RadBridgeIntervalIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 2, 1, 1),
    _RadBridgeIntervalIndex_Type()
)
radBridgeIntervalIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIntervalIndex.setStatus("current")


class _RadBridgeIntervalNumber_Type(Integer32):
    """Custom type radBridgeIntervalNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_RadBridgeIntervalNumber_Type.__name__ = "Integer32"
_RadBridgeIntervalNumber_Object = MibTableColumn
radBridgeIntervalNumber = _RadBridgeIntervalNumber_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 2, 1, 2),
    _RadBridgeIntervalNumber_Type()
)
radBridgeIntervalNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIntervalNumber.setStatus("current")
_RadBridgeIntervalIngressFilteringDiscardedFrames_Type = Gauge32
_RadBridgeIntervalIngressFilteringDiscardedFrames_Object = MibTableColumn
radBridgeIntervalIngressFilteringDiscardedFrames = _RadBridgeIntervalIngressFilteringDiscardedFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 2, 1, 3),
    _RadBridgeIntervalIngressFilteringDiscardedFrames_Type()
)
radBridgeIntervalIngressFilteringDiscardedFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIntervalIngressFilteringDiscardedFrames.setStatus("current")
_RadBridgeIntervalFrameTypeDiscardedFrames_Type = Gauge32
_RadBridgeIntervalFrameTypeDiscardedFrames_Object = MibTableColumn
radBridgeIntervalFrameTypeDiscardedFrames = _RadBridgeIntervalFrameTypeDiscardedFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 2, 1, 4),
    _RadBridgeIntervalFrameTypeDiscardedFrames_Type()
)
radBridgeIntervalFrameTypeDiscardedFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIntervalFrameTypeDiscardedFrames.setStatus("current")
_RadBridgeIntervalRxCorrectFrames_Type = Gauge32
_RadBridgeIntervalRxCorrectFrames_Object = MibTableColumn
radBridgeIntervalRxCorrectFrames = _RadBridgeIntervalRxCorrectFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 2, 1, 5),
    _RadBridgeIntervalRxCorrectFrames_Type()
)
radBridgeIntervalRxCorrectFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIntervalRxCorrectFrames.setStatus("current")
_RadBridgeIntervalRxCorrectBytes_Type = Gauge32
_RadBridgeIntervalRxCorrectBytes_Object = MibTableColumn
radBridgeIntervalRxCorrectBytes = _RadBridgeIntervalRxCorrectBytes_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 2, 1, 6),
    _RadBridgeIntervalRxCorrectBytes_Type()
)
radBridgeIntervalRxCorrectBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIntervalRxCorrectBytes.setStatus("current")
_RadBridgeIntervalRxCorrectBytesHCOverflow_Type = Gauge32
_RadBridgeIntervalRxCorrectBytesHCOverflow_Object = MibTableColumn
radBridgeIntervalRxCorrectBytesHCOverflow = _RadBridgeIntervalRxCorrectBytesHCOverflow_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 2, 1, 7),
    _RadBridgeIntervalRxCorrectBytesHCOverflow_Type()
)
radBridgeIntervalRxCorrectBytesHCOverflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIntervalRxCorrectBytesHCOverflow.setStatus("current")
_RadBridgeIntervalRxBcastFrames_Type = Gauge32
_RadBridgeIntervalRxBcastFrames_Object = MibTableColumn
radBridgeIntervalRxBcastFrames = _RadBridgeIntervalRxBcastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 2, 1, 8),
    _RadBridgeIntervalRxBcastFrames_Type()
)
radBridgeIntervalRxBcastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIntervalRxBcastFrames.setStatus("current")
_RadBridgeIntervalRxMcastFrames_Type = Gauge32
_RadBridgeIntervalRxMcastFrames_Object = MibTableColumn
radBridgeIntervalRxMcastFrames = _RadBridgeIntervalRxMcastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 2, 1, 9),
    _RadBridgeIntervalRxMcastFrames_Type()
)
radBridgeIntervalRxMcastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIntervalRxMcastFrames.setStatus("current")
_RadBridgeIntervalTxCorrectFrames_Type = Gauge32
_RadBridgeIntervalTxCorrectFrames_Object = MibTableColumn
radBridgeIntervalTxCorrectFrames = _RadBridgeIntervalTxCorrectFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 2, 1, 10),
    _RadBridgeIntervalTxCorrectFrames_Type()
)
radBridgeIntervalTxCorrectFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIntervalTxCorrectFrames.setStatus("current")
_RadBridgeIntervalTxCorrectBytes_Type = Gauge32
_RadBridgeIntervalTxCorrectBytes_Object = MibTableColumn
radBridgeIntervalTxCorrectBytes = _RadBridgeIntervalTxCorrectBytes_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 2, 1, 11),
    _RadBridgeIntervalTxCorrectBytes_Type()
)
radBridgeIntervalTxCorrectBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIntervalTxCorrectBytes.setStatus("current")
_RadBridgeIntervalTxCorrectBytesHCOverflow_Type = Gauge32
_RadBridgeIntervalTxCorrectBytesHCOverflow_Object = MibTableColumn
radBridgeIntervalTxCorrectBytesHCOverflow = _RadBridgeIntervalTxCorrectBytesHCOverflow_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 2, 1, 12),
    _RadBridgeIntervalTxCorrectBytesHCOverflow_Type()
)
radBridgeIntervalTxCorrectBytesHCOverflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIntervalTxCorrectBytesHCOverflow.setStatus("current")
_RadBridgeIntervalTxBcastFrames_Type = Gauge32
_RadBridgeIntervalTxBcastFrames_Object = MibTableColumn
radBridgeIntervalTxBcastFrames = _RadBridgeIntervalTxBcastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 2, 1, 13),
    _RadBridgeIntervalTxBcastFrames_Type()
)
radBridgeIntervalTxBcastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIntervalTxBcastFrames.setStatus("current")
_RadBridgeIntervalTxMcastFrames_Type = Gauge32
_RadBridgeIntervalTxMcastFrames_Object = MibTableColumn
radBridgeIntervalTxMcastFrames = _RadBridgeIntervalTxMcastFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 2, 1, 14),
    _RadBridgeIntervalTxMcastFrames_Type()
)
radBridgeIntervalTxMcastFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIntervalTxMcastFrames.setStatus("current")
_RadBridgeIntervalTxDropFrames_Type = Gauge32
_RadBridgeIntervalTxDropFrames_Object = MibTableColumn
radBridgeIntervalTxDropFrames = _RadBridgeIntervalTxDropFrames_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 7, 2, 1, 15),
    _RadBridgeIntervalTxDropFrames_Type()
)
radBridgeIntervalTxDropFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeIntervalTxDropFrames.setStatus("current")
_RadBridgePortBaseVlan_ObjectIdentity = ObjectIdentity
radBridgePortBaseVlan = _RadBridgePortBaseVlan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 8)
)
_RadBridgePortBaseVlanTable_Object = MibTable
radBridgePortBaseVlanTable = _RadBridgePortBaseVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 8, 1)
)
if mibBuilder.loadTexts:
    radBridgePortBaseVlanTable.setStatus("current")
_RadBridgePortBaseVlanEntry_Object = MibTableRow
radBridgePortBaseVlanEntry = _RadBridgePortBaseVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 8, 1, 1)
)
radBridgePortBaseVlanEntry.setIndexNames(
    (0, "RAD-MIB", "radBridgePortBaseVlanCnfgIdx"),
    (0, "RAD-MIB", "radBridgePortBaseVlanIdx"),
)
if mibBuilder.loadTexts:
    radBridgePortBaseVlanEntry.setStatus("current")


class _RadBridgePortBaseVlanCnfgIdx_Type(Integer32):
    """Custom type radBridgePortBaseVlanCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RadBridgePortBaseVlanCnfgIdx_Type.__name__ = "Integer32"
_RadBridgePortBaseVlanCnfgIdx_Object = MibTableColumn
radBridgePortBaseVlanCnfgIdx = _RadBridgePortBaseVlanCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 8, 1, 1, 1),
    _RadBridgePortBaseVlanCnfgIdx_Type()
)
radBridgePortBaseVlanCnfgIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    radBridgePortBaseVlanCnfgIdx.setStatus("current")
_RadBridgePortBaseVlanIdx_Type = Integer32
_RadBridgePortBaseVlanIdx_Object = MibTableColumn
radBridgePortBaseVlanIdx = _RadBridgePortBaseVlanIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 8, 1, 1, 2),
    _RadBridgePortBaseVlanIdx_Type()
)
radBridgePortBaseVlanIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    radBridgePortBaseVlanIdx.setStatus("current")


class _RadBridgePortBaseVlanName_Type(SnmpAdminString):
    """Custom type radBridgePortBaseVlanName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RadBridgePortBaseVlanName_Type.__name__ = "SnmpAdminString"
_RadBridgePortBaseVlanName_Object = MibTableColumn
radBridgePortBaseVlanName = _RadBridgePortBaseVlanName_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 8, 1, 1, 3),
    _RadBridgePortBaseVlanName_Type()
)
radBridgePortBaseVlanName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radBridgePortBaseVlanName.setStatus("current")
_RadBridgePortBaseVlanEgressPorts_Type = PortList
_RadBridgePortBaseVlanEgressPorts_Object = MibTableColumn
radBridgePortBaseVlanEgressPorts = _RadBridgePortBaseVlanEgressPorts_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 8, 1, 1, 4),
    _RadBridgePortBaseVlanEgressPorts_Type()
)
radBridgePortBaseVlanEgressPorts.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radBridgePortBaseVlanEgressPorts.setStatus("current")
_RadBridgePortBaseVlanVirtualGroups_Type = PortList
_RadBridgePortBaseVlanVirtualGroups_Object = MibTableColumn
radBridgePortBaseVlanVirtualGroups = _RadBridgePortBaseVlanVirtualGroups_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 8, 1, 1, 5),
    _RadBridgePortBaseVlanVirtualGroups_Type()
)
radBridgePortBaseVlanVirtualGroups.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radBridgePortBaseVlanVirtualGroups.setStatus("current")
_RadBridgePortBaseVlanRowStatus_Type = RowStatus
_RadBridgePortBaseVlanRowStatus_Object = MibTableColumn
radBridgePortBaseVlanRowStatus = _RadBridgePortBaseVlanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 8, 1, 1, 6),
    _RadBridgePortBaseVlanRowStatus_Type()
)
radBridgePortBaseVlanRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radBridgePortBaseVlanRowStatus.setStatus("current")


class _RadBridgePortBaseVlanMng_Type(Integer32):
    """Custom type radBridgePortBaseVlanMng based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_RadBridgePortBaseVlanMng_Type.__name__ = "Integer32"
_RadBridgePortBaseVlanMng_Object = MibTableColumn
radBridgePortBaseVlanMng = _RadBridgePortBaseVlanMng_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 8, 1, 1, 7),
    _RadBridgePortBaseVlanMng_Type()
)
radBridgePortBaseVlanMng.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radBridgePortBaseVlanMng.setStatus("current")
_RadBridgePortVlanMemberTable_Object = MibTable
radBridgePortVlanMemberTable = _RadBridgePortVlanMemberTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 8, 2)
)
if mibBuilder.loadTexts:
    radBridgePortVlanMemberTable.setStatus("current")
_RadBridgePortVlanMemberEntry_Object = MibTableRow
radBridgePortVlanMemberEntry = _RadBridgePortVlanMemberEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 8, 2, 1)
)
radBridgePortVlanMemberEntry.setIndexNames(
    (0, "RAD-MIB", "radBridgePortVlanMemberBridgeIdx"),
    (0, "RAD-MIB", "radBridgePortVlanMemberPortIdx"),
    (0, "RAD-MIB", "radBridgePortVlanMemberVlanId"),
)
if mibBuilder.loadTexts:
    radBridgePortVlanMemberEntry.setStatus("current")
_RadBridgePortVlanMemberBridgeIdx_Type = Integer32
_RadBridgePortVlanMemberBridgeIdx_Object = MibTableColumn
radBridgePortVlanMemberBridgeIdx = _RadBridgePortVlanMemberBridgeIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 8, 2, 1, 1),
    _RadBridgePortVlanMemberBridgeIdx_Type()
)
radBridgePortVlanMemberBridgeIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgePortVlanMemberBridgeIdx.setStatus("current")
_RadBridgePortVlanMemberPortIdx_Type = Integer32
_RadBridgePortVlanMemberPortIdx_Object = MibTableColumn
radBridgePortVlanMemberPortIdx = _RadBridgePortVlanMemberPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 8, 2, 1, 2),
    _RadBridgePortVlanMemberPortIdx_Type()
)
radBridgePortVlanMemberPortIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgePortVlanMemberPortIdx.setStatus("current")
_RadBridgePortVlanMemberVlanId_Type = Integer32
_RadBridgePortVlanMemberVlanId_Object = MibTableColumn
radBridgePortVlanMemberVlanId = _RadBridgePortVlanMemberVlanId_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 8, 2, 1, 3),
    _RadBridgePortVlanMemberVlanId_Type()
)
radBridgePortVlanMemberVlanId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgePortVlanMemberVlanId.setStatus("current")
_RadBridgePortVlanMemberRowStatus_Type = RowStatus
_RadBridgePortVlanMemberRowStatus_Object = MibTableColumn
radBridgePortVlanMemberRowStatus = _RadBridgePortVlanMemberRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 8, 2, 1, 4),
    _RadBridgePortVlanMemberRowStatus_Type()
)
radBridgePortVlanMemberRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radBridgePortVlanMemberRowStatus.setStatus("current")
_RadBridgeGenCnfg_ObjectIdentity = ObjectIdentity
radBridgeGenCnfg = _RadBridgeGenCnfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9)
)
_RadBridgeGenFlowTable_Object = MibTable
radBridgeGenFlowTable = _RadBridgeGenFlowTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 1)
)
if mibBuilder.loadTexts:
    radBridgeGenFlowTable.setStatus("current")
_RadBridgeGenFlowEntry_Object = MibTableRow
radBridgeGenFlowEntry = _RadBridgeGenFlowEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 1, 1)
)
radBridgeGenFlowEntry.setIndexNames(
    (0, "RAD-MIB", "radBridgeGenFlowCnfgIdx"),
    (0, "RAD-MIB", "radBridgeGenFlowIdx"),
)
if mibBuilder.loadTexts:
    radBridgeGenFlowEntry.setStatus("current")


class _RadBridgeGenFlowCnfgIdx_Type(Integer32):
    """Custom type radBridgeGenFlowCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_RadBridgeGenFlowCnfgIdx_Type.__name__ = "Integer32"
_RadBridgeGenFlowCnfgIdx_Object = MibTableColumn
radBridgeGenFlowCnfgIdx = _RadBridgeGenFlowCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 1, 1, 1),
    _RadBridgeGenFlowCnfgIdx_Type()
)
radBridgeGenFlowCnfgIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    radBridgeGenFlowCnfgIdx.setStatus("current")
_RadBridgeGenFlowIdx_Type = Integer32
_RadBridgeGenFlowIdx_Object = MibTableColumn
radBridgeGenFlowIdx = _RadBridgeGenFlowIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 1, 1, 2),
    _RadBridgeGenFlowIdx_Type()
)
radBridgeGenFlowIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    radBridgeGenFlowIdx.setStatus("current")
_RadBridgeGenFlowRowStatus_Type = RowStatus
_RadBridgeGenFlowRowStatus_Object = MibTableColumn
radBridgeGenFlowRowStatus = _RadBridgeGenFlowRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 1, 1, 3),
    _RadBridgeGenFlowRowStatus_Type()
)
radBridgeGenFlowRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radBridgeGenFlowRowStatus.setStatus("current")
_RadBridgeGenFlowFloodOrBcastMaxRate_Type = Integer32
_RadBridgeGenFlowFloodOrBcastMaxRate_Object = MibTableColumn
radBridgeGenFlowFloodOrBcastMaxRate = _RadBridgeGenFlowFloodOrBcastMaxRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 1, 1, 4),
    _RadBridgeGenFlowFloodOrBcastMaxRate_Type()
)
radBridgeGenFlowFloodOrBcastMaxRate.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radBridgeGenFlowFloodOrBcastMaxRate.setStatus("current")


class _RadBridgeGenFlowQosMode_Type(Integer32):
    """Custom type radBridgeGenFlowQosMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("dsField", 10),
          ("dsFieldAndVlanTag", 16),
          ("dscp", 3),
          ("dscpAndVlanTag", 4),
          ("ipPrecedence", 9),
          ("ipPrecedenceAndVlanTag", 14),
          ("none", 6),
          ("notApplicable", 1),
          ("perPort", 8),
          ("tos", 7),
          ("tosAndVlanTag", 12),
          ("vlanTag", 2),
          ("vlanTagAndDsField", 15),
          ("vlanTagAndDscp", 5),
          ("vlanTagAndIpPrecedence", 13),
          ("vlanTagAndTos", 11))
    )


_RadBridgeGenFlowQosMode_Type.__name__ = "Integer32"
_RadBridgeGenFlowQosMode_Object = MibTableColumn
radBridgeGenFlowQosMode = _RadBridgeGenFlowQosMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 1, 1, 5),
    _RadBridgeGenFlowQosMode_Type()
)
radBridgeGenFlowQosMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radBridgeGenFlowQosMode.setStatus("current")


class _RadBridgeGenFlowSchedulingMode_Type(Integer32):
    """Custom type radBridgeGenFlowSchedulingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("atmCos", 4),
          ("notApplicable", 1),
          ("sp", 3),
          ("wfq", 2))
    )


_RadBridgeGenFlowSchedulingMode_Type.__name__ = "Integer32"
_RadBridgeGenFlowSchedulingMode_Object = MibTableColumn
radBridgeGenFlowSchedulingMode = _RadBridgeGenFlowSchedulingMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 1, 1, 6),
    _RadBridgeGenFlowSchedulingMode_Type()
)
radBridgeGenFlowSchedulingMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radBridgeGenFlowSchedulingMode.setStatus("current")


class _RadBridgeGenFlowBasicClassification_Type(Integer32):
    """Custom type radBridgeGenFlowBasicClassification based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 2),
          ("port", 3))
    )


_RadBridgeGenFlowBasicClassification_Type.__name__ = "Integer32"
_RadBridgeGenFlowBasicClassification_Object = MibTableColumn
radBridgeGenFlowBasicClassification = _RadBridgeGenFlowBasicClassification_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 1, 1, 7),
    _RadBridgeGenFlowBasicClassification_Type()
)
radBridgeGenFlowBasicClassification.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radBridgeGenFlowBasicClassification.setStatus("current")
_RadBridgeGenFlowMulticastTrafficClass_Type = Integer32
_RadBridgeGenFlowMulticastTrafficClass_Object = MibTableColumn
radBridgeGenFlowMulticastTrafficClass = _RadBridgeGenFlowMulticastTrafficClass_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 1, 1, 8),
    _RadBridgeGenFlowMulticastTrafficClass_Type()
)
radBridgeGenFlowMulticastTrafficClass.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radBridgeGenFlowMulticastTrafficClass.setStatus("current")
_RadBridgeGenFlowBroadcastTrafficClass_Type = Integer32
_RadBridgeGenFlowBroadcastTrafficClass_Object = MibTableColumn
radBridgeGenFlowBroadcastTrafficClass = _RadBridgeGenFlowBroadcastTrafficClass_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 1, 1, 9),
    _RadBridgeGenFlowBroadcastTrafficClass_Type()
)
radBridgeGenFlowBroadcastTrafficClass.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radBridgeGenFlowBroadcastTrafficClass.setStatus("current")
_RadBridgeGenFlowUnkownUnicastTrafficClass_Type = Integer32
_RadBridgeGenFlowUnkownUnicastTrafficClass_Object = MibTableColumn
radBridgeGenFlowUnkownUnicastTrafficClass = _RadBridgeGenFlowUnkownUnicastTrafficClass_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 1, 1, 10),
    _RadBridgeGenFlowUnkownUnicastTrafficClass_Type()
)
radBridgeGenFlowUnkownUnicastTrafficClass.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radBridgeGenFlowUnkownUnicastTrafficClass.setStatus("current")
_RadBridgeDot1qVlanStaticTable_Object = MibTable
radBridgeDot1qVlanStaticTable = _RadBridgeDot1qVlanStaticTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 2)
)
if mibBuilder.loadTexts:
    radBridgeDot1qVlanStaticTable.setStatus("current")
_RadBridgeDot1qVlanStaticEntry_Object = MibTableRow
radBridgeDot1qVlanStaticEntry = _RadBridgeDot1qVlanStaticEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 2, 1)
)
if mibBuilder.loadTexts:
    radBridgeDot1qVlanStaticEntry.setStatus("current")
_RadBridgeDot1qVlanTaggedPorts_Type = PortList
_RadBridgeDot1qVlanTaggedPorts_Object = MibTableColumn
radBridgeDot1qVlanTaggedPorts = _RadBridgeDot1qVlanTaggedPorts_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 2, 1, 1),
    _RadBridgeDot1qVlanTaggedPorts_Type()
)
radBridgeDot1qVlanTaggedPorts.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radBridgeDot1qVlanTaggedPorts.setStatus("current")
_RadBridgeDot1qVlanUnmodifiedPorts_Type = PortList
_RadBridgeDot1qVlanUnmodifiedPorts_Object = MibTableColumn
radBridgeDot1qVlanUnmodifiedPorts = _RadBridgeDot1qVlanUnmodifiedPorts_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 2, 1, 2),
    _RadBridgeDot1qVlanUnmodifiedPorts_Type()
)
radBridgeDot1qVlanUnmodifiedPorts.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radBridgeDot1qVlanUnmodifiedPorts.setStatus("current")


class _RadBridgeDot1qVlanSplitHorizon_Type(Integer32):
    """Custom type radBridgeDot1qVlanSplitHorizon based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_RadBridgeDot1qVlanSplitHorizon_Type.__name__ = "Integer32"
_RadBridgeDot1qVlanSplitHorizon_Object = MibTableColumn
radBridgeDot1qVlanSplitHorizon = _RadBridgeDot1qVlanSplitHorizon_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 2, 1, 3),
    _RadBridgeDot1qVlanSplitHorizon_Type()
)
radBridgeDot1qVlanSplitHorizon.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    radBridgeDot1qVlanSplitHorizon.setStatus("current")
_RadDot1qPortVlanTable_Object = MibTable
radDot1qPortVlanTable = _RadDot1qPortVlanTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 3)
)
if mibBuilder.loadTexts:
    radDot1qPortVlanTable.setStatus("current")
_RadDot1qPortVlanEntry_Object = MibTableRow
radDot1qPortVlanEntry = _RadDot1qPortVlanEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 3, 1)
)
if mibBuilder.loadTexts:
    radDot1qPortVlanEntry.setStatus("current")


class _RadDot1qPortStacking_Type(Integer32):
    """Custom type radDot1qPortStacking based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("stack", 4),
          ("tag", 3),
          ("unmodify", 2))
    )


_RadDot1qPortStacking_Type.__name__ = "Integer32"
_RadDot1qPortStacking_Object = MibTableColumn
radDot1qPortStacking = _RadDot1qPortStacking_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 3, 1, 1),
    _RadDot1qPortStacking_Type()
)
radDot1qPortStacking.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radDot1qPortStacking.setStatus("current")


class _RadDot1qPortCopyOriginVlanPriority_Type(Integer32):
    """Custom type radDot1qPortCopyOriginVlanPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_RadDot1qPortCopyOriginVlanPriority_Type.__name__ = "Integer32"
_RadDot1qPortCopyOriginVlanPriority_Object = MibTableColumn
radDot1qPortCopyOriginVlanPriority = _RadDot1qPortCopyOriginVlanPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 3, 1, 2),
    _RadDot1qPortCopyOriginVlanPriority_Type()
)
radDot1qPortCopyOriginVlanPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radDot1qPortCopyOriginVlanPriority.setStatus("current")
_RadDot1qPortDefaultVlanPriority_Type = Integer32
_RadDot1qPortDefaultVlanPriority_Object = MibTableColumn
radDot1qPortDefaultVlanPriority = _RadDot1qPortDefaultVlanPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 3, 1, 3),
    _RadDot1qPortDefaultVlanPriority_Type()
)
radDot1qPortDefaultVlanPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radDot1qPortDefaultVlanPriority.setStatus("current")


class _RadDot1qPortTagStripping_Type(Integer32):
    """Custom type radDot1qPortTagStripping based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_RadDot1qPortTagStripping_Type.__name__ = "Integer32"
_RadDot1qPortTagStripping_Object = MibTableColumn
radDot1qPortTagStripping = _RadDot1qPortTagStripping_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 3, 1, 4),
    _RadDot1qPortTagStripping_Type()
)
radDot1qPortTagStripping.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radDot1qPortTagStripping.setStatus("current")


class _RadDot1qPortEgressTagHandling_Type(Integer32):
    """Custom type radDot1qPortEgressTagHandling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 2),
          ("stacking", 3),
          ("stripping", 4))
    )


_RadDot1qPortEgressTagHandling_Type.__name__ = "Integer32"
_RadDot1qPortEgressTagHandling_Object = MibTableColumn
radDot1qPortEgressTagHandling = _RadDot1qPortEgressTagHandling_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 3, 1, 5),
    _RadDot1qPortEgressTagHandling_Type()
)
radDot1qPortEgressTagHandling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radDot1qPortEgressTagHandling.setStatus("current")


class _RadDot1qPortIngressTagHandling_Type(Integer32):
    """Custom type radDot1qPortIngressTagHandling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 2),
          ("stacking", 3),
          ("stripping", 4))
    )


_RadDot1qPortIngressTagHandling_Type.__name__ = "Integer32"
_RadDot1qPortIngressTagHandling_Object = MibTableColumn
radDot1qPortIngressTagHandling = _RadDot1qPortIngressTagHandling_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 3, 1, 6),
    _RadDot1qPortIngressTagHandling_Type()
)
radDot1qPortIngressTagHandling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radDot1qPortIngressTagHandling.setStatus("current")


class _RadDot1qPortReplaceVlanPriority_Type(Integer32):
    """Custom type radDot1qPortReplaceVlanPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_RadDot1qPortReplaceVlanPriority_Type.__name__ = "Integer32"
_RadDot1qPortReplaceVlanPriority_Object = MibTableColumn
radDot1qPortReplaceVlanPriority = _RadDot1qPortReplaceVlanPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 3, 1, 7),
    _RadDot1qPortReplaceVlanPriority_Type()
)
radDot1qPortReplaceVlanPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radDot1qPortReplaceVlanPriority.setStatus("current")
_RadDot1qPortVlanEthType_Type = Unsigned32
_RadDot1qPortVlanEthType_Object = MibTableColumn
radDot1qPortVlanEthType = _RadDot1qPortVlanEthType_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 3, 1, 8),
    _RadDot1qPortVlanEthType_Type()
)
radDot1qPortVlanEthType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radDot1qPortVlanEthType.setStatus("current")


class _RadDot1qPortVlanCnodeLevel1Agent_Type(Integer32):
    """Custom type radDot1qPortVlanCnodeLevel1Agent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_RadDot1qPortVlanCnodeLevel1Agent_Type.__name__ = "Integer32"
_RadDot1qPortVlanCnodeLevel1Agent_Object = MibTableColumn
radDot1qPortVlanCnodeLevel1Agent = _RadDot1qPortVlanCnodeLevel1Agent_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 3, 1, 9),
    _RadDot1qPortVlanCnodeLevel1Agent_Type()
)
radDot1qPortVlanCnodeLevel1Agent.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radDot1qPortVlanCnodeLevel1Agent.setStatus("current")
_RadBridgeGenCfgTable_Object = MibTable
radBridgeGenCfgTable = _RadBridgeGenCfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 4)
)
if mibBuilder.loadTexts:
    radBridgeGenCfgTable.setStatus("current")
_RadBridgeGenCfgEntry_Object = MibTableRow
radBridgeGenCfgEntry = _RadBridgeGenCfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 4, 1)
)
radBridgeGenCfgEntry.setIndexNames(
    (0, "RAD-MIB", "radBridgeGenCfgIdx"),
    (0, "RAD-MIB", "radBridgeGenCfgIdx2"),
)
if mibBuilder.loadTexts:
    radBridgeGenCfgEntry.setStatus("current")


class _RadBridgeGenCfgIdx_Type(Integer32):
    """Custom type radBridgeGenCfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RadBridgeGenCfgIdx_Type.__name__ = "Integer32"
_RadBridgeGenCfgIdx_Object = MibTableColumn
radBridgeGenCfgIdx = _RadBridgeGenCfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 4, 1, 1),
    _RadBridgeGenCfgIdx_Type()
)
radBridgeGenCfgIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    radBridgeGenCfgIdx.setStatus("current")
_RadBridgeGenCfgIdx2_Type = Integer32
_RadBridgeGenCfgIdx2_Object = MibTableColumn
radBridgeGenCfgIdx2 = _RadBridgeGenCfgIdx2_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 4, 1, 2),
    _RadBridgeGenCfgIdx2_Type()
)
radBridgeGenCfgIdx2.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    radBridgeGenCfgIdx2.setStatus("current")


class _RadBridgeGenCfgBridgeAction_Type(Integer32):
    """Custom type radBridgeGenCfgBridgeAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(7,
              255)
        )
    )
    namedValues = NamedValues(
        *(("deleteLanTab", 7),
          ("noOp", 255))
    )


_RadBridgeGenCfgBridgeAction_Type.__name__ = "Integer32"
_RadBridgeGenCfgBridgeAction_Object = MibTableColumn
radBridgeGenCfgBridgeAction = _RadBridgeGenCfgBridgeAction_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 4, 1, 3),
    _RadBridgeGenCfgBridgeAction_Type()
)
radBridgeGenCfgBridgeAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeGenCfgBridgeAction.setStatus("current")


class _RadBridgeAgingTimeSec_Type(Integer32):
    """Custom type radBridgeAgingTimeSec based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 1000000),
    )


_RadBridgeAgingTimeSec_Type.__name__ = "Integer32"
_RadBridgeAgingTimeSec_Object = MibTableColumn
radBridgeAgingTimeSec = _RadBridgeAgingTimeSec_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 4, 1, 4),
    _RadBridgeAgingTimeSec_Type()
)
radBridgeAgingTimeSec.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeAgingTimeSec.setStatus("current")
_RadBridgeMngVlanId_Type = Unsigned32
_RadBridgeMngVlanId_Object = MibTableColumn
radBridgeMngVlanId = _RadBridgeMngVlanId_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 4, 1, 5),
    _RadBridgeMngVlanId_Type()
)
radBridgeMngVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeMngVlanId.setStatus("current")
_RadBridgeLoopDetectVlanId_Type = Unsigned32
_RadBridgeLoopDetectVlanId_Object = MibTableColumn
radBridgeLoopDetectVlanId = _RadBridgeLoopDetectVlanId_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 4, 1, 6),
    _RadBridgeLoopDetectVlanId_Type()
)
radBridgeLoopDetectVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeLoopDetectVlanId.setStatus("current")


class _RadBridgeSplitHorizon_Type(Integer32):
    """Custom type radBridgeSplitHorizon based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enabled", 3),
          ("notApplicable", 1),
          ("vlanBased", 4))
    )


_RadBridgeSplitHorizon_Type.__name__ = "Integer32"
_RadBridgeSplitHorizon_Object = MibTableColumn
radBridgeSplitHorizon = _RadBridgeSplitHorizon_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 4, 1, 7),
    _RadBridgeSplitHorizon_Type()
)
radBridgeSplitHorizon.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeSplitHorizon.setStatus("current")
_RadBridgeEthType_Type = Unsigned32
_RadBridgeEthType_Object = MibTableColumn
radBridgeEthType = _RadBridgeEthType_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 4, 1, 8),
    _RadBridgeEthType_Type()
)
radBridgeEthType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeEthType.setStatus("current")


class _RadBridgeAgingTime_Type(Integer32):
    """Custom type radBridgeAgingTime based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("finite", 3),
          ("infinite", 2),
          ("notApplicable", 1))
    )


_RadBridgeAgingTime_Type.__name__ = "Integer32"
_RadBridgeAgingTime_Object = MibScalar
radBridgeAgingTime = _RadBridgeAgingTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 5),
    _RadBridgeAgingTime_Type()
)
radBridgeAgingTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeAgingTime.setStatus("current")


class _RadBridgeMngFlow_Type(Integer32):
    """Custom type radBridgeMngFlow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_RadBridgeMngFlow_Type.__name__ = "Integer32"
_RadBridgeMngFlow_Object = MibScalar
radBridgeMngFlow = _RadBridgeMngFlow_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 9, 6),
    _RadBridgeMngFlow_Type()
)
radBridgeMngFlow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeMngFlow.setStatus("current")
_RadBridgeStatus_ObjectIdentity = ObjectIdentity
radBridgeStatus = _RadBridgeStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 10)
)
_RadBridgeInvBasePortTable_Object = MibTable
radBridgeInvBasePortTable = _RadBridgeInvBasePortTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 10, 1)
)
if mibBuilder.loadTexts:
    radBridgeInvBasePortTable.setStatus("current")
_RadBridgeInvBasePortEntry_Object = MibTableRow
radBridgeInvBasePortEntry = _RadBridgeInvBasePortEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 10, 1, 1)
)
radBridgeInvBasePortEntry.setIndexNames(
    (0, "RAD-MIB", "radBridgeInvBasePortIfIndex"),
)
if mibBuilder.loadTexts:
    radBridgeInvBasePortEntry.setStatus("current")
_RadBridgeInvBasePortIfIndex_Type = Integer32
_RadBridgeInvBasePortIfIndex_Object = MibTableColumn
radBridgeInvBasePortIfIndex = _RadBridgeInvBasePortIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 10, 1, 1, 1),
    _RadBridgeInvBasePortIfIndex_Type()
)
radBridgeInvBasePortIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeInvBasePortIfIndex.setStatus("current")
_RadBridgeInvBasePort_Type = Integer32
_RadBridgeInvBasePort_Object = MibTableColumn
radBridgeInvBasePort = _RadBridgeInvBasePort_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 10, 1, 1, 2),
    _RadBridgeInvBasePort_Type()
)
radBridgeInvBasePort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeInvBasePort.setStatus("current")
_RadBridgeStp_ObjectIdentity = ObjectIdentity
radBridgeStp = _RadBridgeStp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 11)
)
_RadBridgeStpCnfgTable_Object = MibTable
radBridgeStpCnfgTable = _RadBridgeStpCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 11, 1)
)
if mibBuilder.loadTexts:
    radBridgeStpCnfgTable.setStatus("current")
_RadBridgeStpCnfgEntry_Object = MibTableRow
radBridgeStpCnfgEntry = _RadBridgeStpCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 11, 1, 1)
)
radBridgeStpCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "radBridgeStpCnfgIdx1"),
    (0, "RAD-MIB", "radBridgeStpCnfgIdx2"),
)
if mibBuilder.loadTexts:
    radBridgeStpCnfgEntry.setStatus("current")


class _RadBridgeStpCnfgIdx1_Type(Integer32):
    """Custom type radBridgeStpCnfgIdx1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_RadBridgeStpCnfgIdx1_Type.__name__ = "Integer32"
_RadBridgeStpCnfgIdx1_Object = MibTableColumn
radBridgeStpCnfgIdx1 = _RadBridgeStpCnfgIdx1_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 11, 1, 1, 1),
    _RadBridgeStpCnfgIdx1_Type()
)
radBridgeStpCnfgIdx1.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    radBridgeStpCnfgIdx1.setStatus("current")
_RadBridgeStpCnfgIdx2_Type = Integer32
_RadBridgeStpCnfgIdx2_Object = MibTableColumn
radBridgeStpCnfgIdx2 = _RadBridgeStpCnfgIdx2_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 11, 1, 1, 2),
    _RadBridgeStpCnfgIdx2_Type()
)
radBridgeStpCnfgIdx2.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    radBridgeStpCnfgIdx2.setStatus("current")


class _RadBridgeStpCnfgForwardDelay_Type(Timeout):
    """Custom type radBridgeStpCnfgForwardDelay based on Timeout"""
    subtypeSpec = Timeout.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(400, 3000),
    )


_RadBridgeStpCnfgForwardDelay_Type.__name__ = "Timeout"
_RadBridgeStpCnfgForwardDelay_Object = MibTableColumn
radBridgeStpCnfgForwardDelay = _RadBridgeStpCnfgForwardDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 11, 1, 1, 3),
    _RadBridgeStpCnfgForwardDelay_Type()
)
radBridgeStpCnfgForwardDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeStpCnfgForwardDelay.setStatus("current")


class _RadBridgeStpCnfgMaxAge_Type(Timeout):
    """Custom type radBridgeStpCnfgMaxAge based on Timeout"""
    subtypeSpec = Timeout.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(600, 4000),
    )


_RadBridgeStpCnfgMaxAge_Type.__name__ = "Timeout"
_RadBridgeStpCnfgMaxAge_Object = MibTableColumn
radBridgeStpCnfgMaxAge = _RadBridgeStpCnfgMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 11, 1, 1, 4),
    _RadBridgeStpCnfgMaxAge_Type()
)
radBridgeStpCnfgMaxAge.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeStpCnfgMaxAge.setStatus("current")


class _RadBridgeStpCnfgHelloTime_Type(Timeout):
    """Custom type radBridgeStpCnfgHelloTime based on Timeout"""
    subtypeSpec = Timeout.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 1000),
    )


_RadBridgeStpCnfgHelloTime_Type.__name__ = "Timeout"
_RadBridgeStpCnfgHelloTime_Object = MibTableColumn
radBridgeStpCnfgHelloTime = _RadBridgeStpCnfgHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 11, 1, 1, 5),
    _RadBridgeStpCnfgHelloTime_Type()
)
radBridgeStpCnfgHelloTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeStpCnfgHelloTime.setStatus("current")


class _RadBridgeStpCnfgPriority_Type(Integer32):
    """Custom type radBridgeStpCnfgPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_RadBridgeStpCnfgPriority_Type.__name__ = "Integer32"
_RadBridgeStpCnfgPriority_Object = MibTableColumn
radBridgeStpCnfgPriority = _RadBridgeStpCnfgPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 11, 1, 1, 6),
    _RadBridgeStpCnfgPriority_Type()
)
radBridgeStpCnfgPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeStpCnfgPriority.setStatus("current")


class _RadBridgeStpCnfgStpVersion_Type(Integer32):
    """Custom type radBridgeStpCnfgStpVersion based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("rstp", 3),
          ("stp", 2))
    )


_RadBridgeStpCnfgStpVersion_Type.__name__ = "Integer32"
_RadBridgeStpCnfgStpVersion_Object = MibTableColumn
radBridgeStpCnfgStpVersion = _RadBridgeStpCnfgStpVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 11, 1, 1, 7),
    _RadBridgeStpCnfgStpVersion_Type()
)
radBridgeStpCnfgStpVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeStpCnfgStpVersion.setStatus("current")
_RadBridgeStpStatTable_Object = MibTable
radBridgeStpStatTable = _RadBridgeStpStatTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 11, 2)
)
if mibBuilder.loadTexts:
    radBridgeStpStatTable.setStatus("current")
_RadBridgeStpStatEntry_Object = MibTableRow
radBridgeStpStatEntry = _RadBridgeStpStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 11, 2, 1)
)
radBridgeStpStatEntry.setIndexNames(
    (0, "RAD-MIB", "radBridgeStpStatIdx"),
)
if mibBuilder.loadTexts:
    radBridgeStpStatEntry.setStatus("current")
_RadBridgeStpStatIdx_Type = Integer32
_RadBridgeStpStatIdx_Object = MibTableColumn
radBridgeStpStatIdx = _RadBridgeStpStatIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 11, 2, 1, 1),
    _RadBridgeStpStatIdx_Type()
)
radBridgeStpStatIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    radBridgeStpStatIdx.setStatus("current")
_RadBridgeStpStatForwardDelay_Type = Timeout
_RadBridgeStpStatForwardDelay_Object = MibTableColumn
radBridgeStpStatForwardDelay = _RadBridgeStpStatForwardDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 11, 2, 1, 2),
    _RadBridgeStpStatForwardDelay_Type()
)
radBridgeStpStatForwardDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeStpStatForwardDelay.setStatus("current")
_RadBridgeStpStatMaxAge_Type = Timeout
_RadBridgeStpStatMaxAge_Object = MibTableColumn
radBridgeStpStatMaxAge = _RadBridgeStpStatMaxAge_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 11, 2, 1, 3),
    _RadBridgeStpStatMaxAge_Type()
)
radBridgeStpStatMaxAge.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeStpStatMaxAge.setStatus("current")
_RadBridgeStpStatHelloTime_Type = Timeout
_RadBridgeStpStatHelloTime_Object = MibTableColumn
radBridgeStpStatHelloTime = _RadBridgeStpStatHelloTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 11, 2, 1, 4),
    _RadBridgeStpStatHelloTime_Type()
)
radBridgeStpStatHelloTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeStpStatHelloTime.setStatus("current")
_RadBridgeStpStatDesignatedRoot_Type = BridgeId
_RadBridgeStpStatDesignatedRoot_Object = MibTableColumn
radBridgeStpStatDesignatedRoot = _RadBridgeStpStatDesignatedRoot_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 11, 2, 1, 5),
    _RadBridgeStpStatDesignatedRoot_Type()
)
radBridgeStpStatDesignatedRoot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeStpStatDesignatedRoot.setStatus("current")
_RadBridgeStpStatRootCost_Type = Integer32
_RadBridgeStpStatRootCost_Object = MibTableColumn
radBridgeStpStatRootCost = _RadBridgeStpStatRootCost_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 11, 2, 1, 6),
    _RadBridgeStpStatRootCost_Type()
)
radBridgeStpStatRootCost.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radBridgeStpStatRootCost.setStatus("current")


class _RadBridgeForwardingMode_Type(Integer32):
    """Custom type radBridgeForwardingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("filter", 3),
          ("filterTagged", 4),
          ("notApplicable", 1),
          ("transparent", 2),
          ("transparentTagged", 5))
    )


_RadBridgeForwardingMode_Type.__name__ = "Integer32"
_RadBridgeForwardingMode_Object = MibScalar
radBridgeForwardingMode = _RadBridgeForwardingMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 12),
    _RadBridgeForwardingMode_Type()
)
radBridgeForwardingMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgeForwardingMode.setStatus("current")
_RadBridgePort_ObjectIdentity = ObjectIdentity
radBridgePort = _RadBridgePort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 13)
)
_RadBridgePortCnfgTable_Object = MibTable
radBridgePortCnfgTable = _RadBridgePortCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 13, 1)
)
if mibBuilder.loadTexts:
    radBridgePortCnfgTable.setStatus("current")
_RadBridgePortCnfgEntry_Object = MibTableRow
radBridgePortCnfgEntry = _RadBridgePortCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 13, 1, 1)
)
radBridgePortCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "radBridgePortCnfgIdx"),
    (0, "RAD-MIB", "radBridgePortCnfgPrtIdx"),
)
if mibBuilder.loadTexts:
    radBridgePortCnfgEntry.setStatus("current")
_RadBridgePortCnfgIdx_Type = Integer32
_RadBridgePortCnfgIdx_Object = MibTableColumn
radBridgePortCnfgIdx = _RadBridgePortCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 13, 1, 1, 1),
    _RadBridgePortCnfgIdx_Type()
)
radBridgePortCnfgIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    radBridgePortCnfgIdx.setStatus("current")
_RadBridgePortCnfgPrtIdx_Type = Integer32
_RadBridgePortCnfgPrtIdx_Object = MibTableColumn
radBridgePortCnfgPrtIdx = _RadBridgePortCnfgPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 13, 1, 1, 2),
    _RadBridgePortCnfgPrtIdx_Type()
)
radBridgePortCnfgPrtIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    radBridgePortCnfgPrtIdx.setStatus("current")
_RadBridgePortCnfgMaxMacAddr_Type = Integer32
_RadBridgePortCnfgMaxMacAddr_Object = MibTableColumn
radBridgePortCnfgMaxMacAddr = _RadBridgePortCnfgMaxMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 13, 1, 1, 3),
    _RadBridgePortCnfgMaxMacAddr_Type()
)
radBridgePortCnfgMaxMacAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgePortCnfgMaxMacAddr.setStatus("current")


class _RadBridgePortCnfgMngFlow_Type(Integer32):
    """Custom type radBridgePortCnfgMngFlow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_RadBridgePortCnfgMngFlow_Type.__name__ = "Integer32"
_RadBridgePortCnfgMngFlow_Object = MibTableColumn
radBridgePortCnfgMngFlow = _RadBridgePortCnfgMngFlow_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 13, 1, 1, 4),
    _RadBridgePortCnfgMngFlow_Type()
)
radBridgePortCnfgMngFlow.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgePortCnfgMngFlow.setStatus("current")


class _RadBridgePortCnfgMcastMode_Type(Integer32):
    """Custom type radBridgePortCnfgMcastMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("flooding", 1),
          ("forwarding", 2))
    )


_RadBridgePortCnfgMcastMode_Type.__name__ = "Integer32"
_RadBridgePortCnfgMcastMode_Object = MibTableColumn
radBridgePortCnfgMcastMode = _RadBridgePortCnfgMcastMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 13, 1, 1, 5),
    _RadBridgePortCnfgMcastMode_Type()
)
radBridgePortCnfgMcastMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgePortCnfgMcastMode.setStatus("current")
_RadBridgePortCnfgDefaultVpi_Type = Integer32
_RadBridgePortCnfgDefaultVpi_Object = MibTableColumn
radBridgePortCnfgDefaultVpi = _RadBridgePortCnfgDefaultVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 13, 1, 1, 6),
    _RadBridgePortCnfgDefaultVpi_Type()
)
radBridgePortCnfgDefaultVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgePortCnfgDefaultVpi.setStatus("current")
_RadBridgePortCnfgDefaultVci_Type = Integer32
_RadBridgePortCnfgDefaultVci_Object = MibTableColumn
radBridgePortCnfgDefaultVci = _RadBridgePortCnfgDefaultVci_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 13, 1, 1, 7),
    _RadBridgePortCnfgDefaultVci_Type()
)
radBridgePortCnfgDefaultVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgePortCnfgDefaultVci.setStatus("current")
_RadBridgePortCnfgStatVlanId_Type = Integer32
_RadBridgePortCnfgStatVlanId_Object = MibTableColumn
radBridgePortCnfgStatVlanId = _RadBridgePortCnfgStatVlanId_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 13, 1, 1, 8),
    _RadBridgePortCnfgStatVlanId_Type()
)
radBridgePortCnfgStatVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgePortCnfgStatVlanId.setStatus("current")
_RadBridgePortCnfgIngressMtu_Type = Integer32
_RadBridgePortCnfgIngressMtu_Object = MibTableColumn
radBridgePortCnfgIngressMtu = _RadBridgePortCnfgIngressMtu_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 13, 1, 1, 9),
    _RadBridgePortCnfgIngressMtu_Type()
)
radBridgePortCnfgIngressMtu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgePortCnfgIngressMtu.setStatus("current")
_RadBridgePortCnfgEgressMtu_Type = Integer32
_RadBridgePortCnfgEgressMtu_Object = MibTableColumn
radBridgePortCnfgEgressMtu = _RadBridgePortCnfgEgressMtu_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 13, 1, 1, 10),
    _RadBridgePortCnfgEgressMtu_Type()
)
radBridgePortCnfgEgressMtu.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgePortCnfgEgressMtu.setStatus("current")


class _RadBridgePortCnfgDot1x_Type(Integer32):
    """Custom type radBridgePortCnfgDot1x based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3))
    )


_RadBridgePortCnfgDot1x_Type.__name__ = "Integer32"
_RadBridgePortCnfgDot1x_Object = MibTableColumn
radBridgePortCnfgDot1x = _RadBridgePortCnfgDot1x_Object(
    (1, 3, 6, 1, 4, 1, 164, 4, 1, 13, 1, 1, 11),
    _RadBridgePortCnfgDot1x_Type()
)
radBridgePortCnfgDot1x.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radBridgePortCnfgDot1x.setStatus("current")
_RadConverters_ObjectIdentity = ObjectIdentity
radConverters = _RadConverters_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 5)
)
_RadGen_ObjectIdentity = ObjectIdentity
radGen = _RadGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6)
)
_Systems_ObjectIdentity = ObjectIdentity
systems = _Systems_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1)
)
_SystemsEvents_ObjectIdentity = ObjectIdentity
systemsEvents = _SystemsEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0)
)
if mibBuilder.loadTexts:
    systemsEvents.setStatus("current")
_RadSysTR_ObjectIdentity = ObjectIdentity
radSysTR = _RadSysTR_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 1)
)
_RadRADring_ObjectIdentity = ObjectIdentity
radRADring = _RadRADring_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 1, 1)
)
_RadTMA_ObjectIdentity = ObjectIdentity
radTMA = _RadTMA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 1, 2)
)
_RadRingMonitor_ObjectIdentity = ObjectIdentity
radRingMonitor = _RadRingMonitor_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 1, 3)
)
_RadSysFddi_ObjectIdentity = ObjectIdentity
radSysFddi = _RadSysFddi_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 2)
)
_RadFDX100_ObjectIdentity = ObjectIdentity
radFDX100 = _RadFDX100_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 2, 1)
)
_RadSysWan_ObjectIdentity = ObjectIdentity
radSysWan = _RadSysWan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3)
)
_RadSysWanEvents_ObjectIdentity = ObjectIdentity
radSysWanEvents = _RadSysWanEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 0)
)
if mibBuilder.loadTexts:
    radSysWanEvents.setStatus("current")
_RadMP2100_ObjectIdentity = ObjectIdentity
radMP2100 = _RadMP2100_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 1)
)
_RadMP2104_ObjectIdentity = ObjectIdentity
radMP2104 = _RadMP2104_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 2)
)
_RadMP2100B_ObjectIdentity = ObjectIdentity
radMP2100B = _RadMP2100B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 3)
)
_RadMP2100F_ObjectIdentity = ObjectIdentity
radMP2100F = _RadMP2100F_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 4)
)
_RadMP2100H_ObjectIdentity = ObjectIdentity
radMP2100H = _RadMP2100H_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 5)
)
_RadMP2104H_ObjectIdentity = ObjectIdentity
radMP2104H = _RadMP2104H_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 6)
)
_RadMP2200B_ObjectIdentity = ObjectIdentity
radMP2200B = _RadMP2200B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 7)
)
_RadMP2200F_ObjectIdentity = ObjectIdentity
radMP2200F = _RadMP2200F_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 8)
)
_RadMX3000_ObjectIdentity = ObjectIdentity
radMX3000 = _RadMX3000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 9)
)
_RadMX3004_ObjectIdentity = ObjectIdentity
radMX3004 = _RadMX3004_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 10)
)
_RadMX30_ObjectIdentity = ObjectIdentity
radMX30 = _RadMX30_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 11)
)
_RadMX300_ObjectIdentity = ObjectIdentity
radMX300 = _RadMX300_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 12)
)
_RadVOIP_ObjectIdentity = ObjectIdentity
radVOIP = _RadVOIP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 13)
)
_RadKM2100_ObjectIdentity = ObjectIdentity
radKM2100 = _RadKM2100_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 15)
)
_RadKM2104_ObjectIdentity = ObjectIdentity
radKM2104 = _RadKM2104_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 16)
)
_RadDXC30_ObjectIdentity = ObjectIdentity
radDXC30 = _RadDXC30_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 20)
)
_RadDXC10A_ObjectIdentity = ObjectIdentity
radDXC10A = _RadDXC10A_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 21)
)
_RadDXC8R_ObjectIdentity = ObjectIdentity
radDXC8R = _RadDXC8R_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 22)
)
_RadDXC30E_ObjectIdentity = ObjectIdentity
radDXC30E = _RadDXC30E_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 23)
)
_RadDXC3000_ObjectIdentity = ObjectIdentity
radDXC3000 = _RadDXC3000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 24)
)
_RadDXC8RNew_ObjectIdentity = ObjectIdentity
radDXC8RNew = _RadDXC8RNew_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 25)
)
_RadFcdT1LC_ObjectIdentity = ObjectIdentity
radFcdT1LC = _RadFcdT1LC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 26)
)
_RadFcdE1LC_ObjectIdentity = ObjectIdentity
radFcdE1LC = _RadFcdE1LC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 27)
)
_RadFcdT1L_ObjectIdentity = ObjectIdentity
radFcdT1L = _RadFcdT1L_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 28)
)
_RadFcdE1L_ObjectIdentity = ObjectIdentity
radFcdE1L = _RadFcdE1L_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 29)
)
_RadFcdT1_ObjectIdentity = ObjectIdentity
radFcdT1 = _RadFcdT1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 30)
)
_RadFcdE1_ObjectIdentity = ObjectIdentity
radFcdE1 = _RadFcdE1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 31)
)
_RadFcdE1I_ObjectIdentity = ObjectIdentity
radFcdE1I = _RadFcdE1I_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 32)
)
_RadFcdT1M_ObjectIdentity = ObjectIdentity
radFcdT1M = _RadFcdT1M_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 33)
)
_RadFcdE1M_ObjectIdentity = ObjectIdentity
radFcdE1M = _RadFcdE1M_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 34)
)
_RadFcdIP_ObjectIdentity = ObjectIdentity
radFcdIP = _RadFcdIP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 35)
)
_RadFcdT1A_ObjectIdentity = ObjectIdentity
radFcdT1A = _RadFcdT1A_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 36)
)
_RadFcdE1A_ObjectIdentity = ObjectIdentity
radFcdE1A = _RadFcdE1A_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 37)
)
_RadFcdW_ObjectIdentity = ObjectIdentity
radFcdW = _RadFcdW_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 38)
)
_RadFcdSTM_ObjectIdentity = ObjectIdentity
radFcdSTM = _RadFcdSTM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 39)
)
_RadHtuE1Sa_ObjectIdentity = ObjectIdentity
radHtuE1Sa = _RadHtuE1Sa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 40)
)
_RadHtuE1_ObjectIdentity = ObjectIdentity
radHtuE1 = _RadHtuE1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 41)
)
_RadHtu2Sa_ObjectIdentity = ObjectIdentity
radHtu2Sa = _RadHtu2Sa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 42)
)
_RadHtu2_ObjectIdentity = ObjectIdentity
radHtu2 = _RadHtu2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 43)
)
_RadAsmi450R768Sa_ObjectIdentity = ObjectIdentity
radAsmi450R768Sa = _RadAsmi450R768Sa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 44)
)
_RadAsmi450R768_ObjectIdentity = ObjectIdentity
radAsmi450R768 = _RadAsmi450R768_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 45)
)
_RadAsmi450R1152Sa_ObjectIdentity = ObjectIdentity
radAsmi450R1152Sa = _RadAsmi450R1152Sa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 46)
)
_RadAsmi450R1152_ObjectIdentity = ObjectIdentity
radAsmi450R1152 = _RadAsmi450R1152_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 47)
)
_RadLrs12F_ObjectIdentity = ObjectIdentity
radLrs12F = _RadLrs12F_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 48)
)
_RadLrs12B_ObjectIdentity = ObjectIdentity
radLrs12B = _RadLrs12B_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 49)
)
_RadLrs52_ObjectIdentity = ObjectIdentity
radLrs52 = _RadLrs52_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 50)
)
_RadHcdE1Sa_ObjectIdentity = ObjectIdentity
radHcdE1Sa = _RadHcdE1Sa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 51)
)
_RadHcdE1_ObjectIdentity = ObjectIdentity
radHcdE1 = _RadHcdE1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 52)
)
_RadHtuT1Sa_ObjectIdentity = ObjectIdentity
radHtuT1Sa = _RadHtuT1Sa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 53)
)
_RadHtuT1_ObjectIdentity = ObjectIdentity
radHtuT1 = _RadHtuT1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 54)
)
_RadOptimux4E1_ObjectIdentity = ObjectIdentity
radOptimux4E1 = _RadOptimux4E1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 55)
)
_RadOptimux4T1_ObjectIdentity = ObjectIdentity
radOptimux4T1 = _RadOptimux4T1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 56)
)
_RadOptimuxXLE1_ObjectIdentity = ObjectIdentity
radOptimuxXLE1 = _RadOptimuxXLE1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 57)
)
_RadOptimuxXLT1_ObjectIdentity = ObjectIdentity
radOptimuxXLT1 = _RadOptimuxXLT1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 58)
)
_RadOptimuxXL16E1_ObjectIdentity = ObjectIdentity
radOptimuxXL16E1 = _RadOptimuxXL16E1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 59)
)
_RadImx64_ObjectIdentity = ObjectIdentity
radImx64 = _RadImx64_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 60)
)
_RadImx6L_ObjectIdentity = ObjectIdentity
radImx6L = _RadImx6L_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 61)
)
_RadImx2_ObjectIdentity = ObjectIdentity
radImx2 = _RadImx2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 62)
)
_RadImx4T1_ObjectIdentity = ObjectIdentity
radImx4T1 = _RadImx4T1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 63)
)
_RadImx4E1_ObjectIdentity = ObjectIdentity
radImx4E1 = _RadImx4E1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 64)
)
_RadImx2T1E1_ObjectIdentity = ObjectIdentity
radImx2T1E1 = _RadImx2T1E1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 65)
)
_RadImxi4_ObjectIdentity = ObjectIdentity
radImxi4 = _RadImxi4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 66)
)
_RadOptimux155_ObjectIdentity = ObjectIdentity
radOptimux155 = _RadOptimux155_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 67)
)
_RadOptimux4T1L_ObjectIdentity = ObjectIdentity
radOptimux4T1L = _RadOptimux4T1L_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 68)
)
_RadOptimux4E1L_ObjectIdentity = ObjectIdentity
radOptimux4E1L = _RadOptimux4E1L_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 69)
)
_RadHtuE1SaV2_ObjectIdentity = ObjectIdentity
radHtuE1SaV2 = _RadHtuE1SaV2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 70)
)
_RadHtuE1V2_ObjectIdentity = ObjectIdentity
radHtuE1V2 = _RadHtuE1V2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 71)
)
_RadFomiE3_ObjectIdentity = ObjectIdentity
radFomiE3 = _RadFomiE3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 72)
)
_RadFomiT3_ObjectIdentity = ObjectIdentity
radFomiT3 = _RadFomiT3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 73)
)
_RadOpt4E1C_ObjectIdentity = ObjectIdentity
radOpt4E1C = _RadOpt4E1C_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 74)
)
_RadOpt4T1C_ObjectIdentity = ObjectIdentity
radOpt4T1C = _RadOpt4T1C_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 75)
)
_RadPrbiE3_ObjectIdentity = ObjectIdentity
radPrbiE3 = _RadPrbiE3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 76)
)
_RadPrbiT3_ObjectIdentity = ObjectIdentity
radPrbiT3 = _RadPrbiT3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 77)
)
_RadHcd4Sa_ObjectIdentity = ObjectIdentity
radHcd4Sa = _RadHcd4Sa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 78)
)
_RadOptimuxT3_ObjectIdentity = ObjectIdentity
radOptimuxT3 = _RadOptimuxT3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 79)
)
_RadFRmon_ObjectIdentity = ObjectIdentity
radFRmon = _RadFRmon_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 80)
)
_RadIpMux4_ObjectIdentity = ObjectIdentity
radIpMux4 = _RadIpMux4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 81)
)
_RadIpMux1_ObjectIdentity = ObjectIdentity
radIpMux1 = _RadIpMux1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 82)
)
_RadIpMux16_ObjectIdentity = ObjectIdentity
radIpMux16 = _RadIpMux16_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 83)
)
_RadIpMux1E_ObjectIdentity = ObjectIdentity
radIpMux1E = _RadIpMux1E_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 84)
)
_RadVmux2100_ObjectIdentity = ObjectIdentity
radVmux2100 = _RadVmux2100_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 85)
)
_RadMP104_ObjectIdentity = ObjectIdentity
radMP104 = _RadMP104_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 86)
)
_RadMP204_ObjectIdentity = ObjectIdentity
radMP204 = _RadMP204_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 87)
)
_RadVmux110_ObjectIdentity = ObjectIdentity
radVmux110 = _RadVmux110_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 88)
)
_RadFcd155_ObjectIdentity = ObjectIdentity
radFcd155 = _RadFcd155_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 90)
)
_RadIpMux8_ObjectIdentity = ObjectIdentity
radIpMux8 = _RadIpMux8_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 91)
)
_RadOptimux155DS3_ObjectIdentity = ObjectIdentity
radOptimux155DS3 = _RadOptimux155DS3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 92)
)
_RadOptimuxT3L_ObjectIdentity = ObjectIdentity
radOptimuxT3L = _RadOptimuxT3L_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 93)
)
_RadGmux2000_ObjectIdentity = ObjectIdentity
radGmux2000 = _RadGmux2000_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 94)
)
_RadOp16E1L_ObjectIdentity = ObjectIdentity
radOp16E1L = _RadOp16E1L_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 95)
)
_RadOp16E1LS_ObjectIdentity = ObjectIdentity
radOp16E1LS = _RadOp16E1LS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 96)
)
_RadPRBm20_ObjectIdentity = ObjectIdentity
radPRBm20 = _RadPRBm20_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 97)
)
_RadPRBm22_ObjectIdentity = ObjectIdentity
radPRBm22 = _RadPRBm22_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 98)
)
_RadAsmi52A_ObjectIdentity = ObjectIdentity
radAsmi52A = _RadAsmi52A_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 99)
)
_RadOpXLE1_ObjectIdentity = ObjectIdentity
radOpXLE1 = _RadOpXLE1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 100)
)
_RadOpXLT1_ObjectIdentity = ObjectIdentity
radOpXLT1 = _RadOpXLT1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 101)
)
_RadOpXL16E1_ObjectIdentity = ObjectIdentity
radOpXL16E1 = _RadOpXL16E1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 102)
)
_RadOp4E1_ObjectIdentity = ObjectIdentity
radOp4E1 = _RadOp4E1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 103)
)
_RadOp4T1_ObjectIdentity = ObjectIdentity
radOp4T1 = _RadOp4T1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 104)
)
_RadDxc4_ObjectIdentity = ObjectIdentity
radDxc4 = _RadDxc4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 105)
)
_RadIpMux11_ObjectIdentity = ObjectIdentity
radIpMux11 = _RadIpMux11_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 106)
)
_RadIpMux14_ObjectIdentity = ObjectIdentity
radIpMux14 = _RadIpMux14_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 107)
)
_RadOp1550_ObjectIdentity = ObjectIdentity
radOp1550 = _RadOp1550_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 108)
)
_RadFdsl101_ObjectIdentity = ObjectIdentity
radFdsl101 = _RadFdsl101_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 110)
)
_RadFdsl201_ObjectIdentity = ObjectIdentity
radFdsl201 = _RadFdsl201_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 111)
)
_RadVmux120_ObjectIdentity = ObjectIdentity
radVmux120 = _RadVmux120_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 112)
)
_RadVmux2200_ObjectIdentity = ObjectIdentity
radVmux2200 = _RadVmux2200_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 113)
)
_RadVmux400_ObjectIdentity = ObjectIdentity
radVmux400 = _RadVmux400_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 114)
)
_RadIpMux116_ObjectIdentity = ObjectIdentity
radIpMux116 = _RadIpMux116_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 115)
)
_RadOp4E1LNew_ObjectIdentity = ObjectIdentity
radOp4E1LNew = _RadOp4E1LNew_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 116)
)
_RadOp4T1LNew_ObjectIdentity = ObjectIdentity
radOp4T1LNew = _RadOp4T1LNew_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 117)
)
_RadFcd155E_ObjectIdentity = ObjectIdentity
radFcd155E = _RadFcd155E_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 118)
)
_RadFcd155ES_ObjectIdentity = ObjectIdentity
radFcd155ES = _RadFcd155ES_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 119)
)
_RadMP4100_ObjectIdentity = ObjectIdentity
radMP4100 = _RadMP4100_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 120)
)
_RadAsmi52L_ObjectIdentity = ObjectIdentity
radAsmi52L = _RadAsmi52L_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 121)
)
_RadVmux210_ObjectIdentity = ObjectIdentity
radVmux210 = _RadVmux210_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 122)
)
_RadOp34E1_ObjectIdentity = ObjectIdentity
radOp34E1 = _RadOp34E1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 123)
)
_RadVmux312_ObjectIdentity = ObjectIdentity
radVmux312 = _RadVmux312_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 124)
)
_RadVmux404_ObjectIdentity = ObjectIdentity
radVmux404 = _RadVmux404_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 125)
)
_RadVmux420_ObjectIdentity = ObjectIdentity
radVmux420 = _RadVmux420_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 126)
)
_RadIpMux12_ObjectIdentity = ObjectIdentity
radIpMux12 = _RadIpMux12_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 127)
)
_RadOptimux4E1V3dot5_ObjectIdentity = ObjectIdentity
radOptimux4E1V3dot5 = _RadOptimux4E1V3dot5_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 128)
)
_RadOptimux4E1Mar06_ObjectIdentity = ObjectIdentity
radOptimux4E1Mar06 = _RadOptimux4E1Mar06_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 129)
)
_RadFcd155EwAPS_ObjectIdentity = ObjectIdentity
radFcd155EwAPS = _RadFcd155EwAPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 130)
)
_RadOptimux4T1Mar06_ObjectIdentity = ObjectIdentity
radOptimux4T1Mar06 = _RadOptimux4T1Mar06_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 131)
)
_RadFcd155EwAPS2pdh_ObjectIdentity = ObjectIdentity
radFcd155EwAPS2pdh = _RadFcd155EwAPS2pdh_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 132)
)
_RadVmux320_ObjectIdentity = ObjectIdentity
radVmux320 = _RadVmux320_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 133)
)
_RadMP2100VoIP_ObjectIdentity = ObjectIdentity
radMP2100VoIP = _RadMP2100VoIP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 134)
)
_RadMP2104VoIP_ObjectIdentity = ObjectIdentity
radMP2104VoIP = _RadMP2104VoIP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 135)
)
_RadIpMux24_ObjectIdentity = ObjectIdentity
radIpMux24 = _RadIpMux24_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 136)
)
_RadOp4E1NG1_ObjectIdentity = ObjectIdentity
radOp4E1NG1 = _RadOp4E1NG1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 137)
)
_RadOp4T1NG1_ObjectIdentity = ObjectIdentity
radOp4T1NG1 = _RadOp4T1NG1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 138)
)
_RadOp25_ObjectIdentity = ObjectIdentity
radOp25 = _RadOp25_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 139)
)
_RadAsmi54_ObjectIdentity = ObjectIdentity
radAsmi54 = _RadAsmi54_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 140)
)
_RadVmux314_ObjectIdentity = ObjectIdentity
radVmux314 = _RadVmux314_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 141)
)
_RadFcd622_ObjectIdentity = ObjectIdentity
radFcd622 = _RadFcd622_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 142)
)
_RadLrs22_ObjectIdentity = ObjectIdentity
radLrs22 = _RadLrs22_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 143)
)
_RadUNT20E1_ObjectIdentity = ObjectIdentity
radUNT20E1 = _RadUNT20E1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 144)
)
_RadIpMux2L_ObjectIdentity = ObjectIdentity
radIpMux2L = _RadIpMux2L_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 145)
)
_RadUNT20Fcd_ObjectIdentity = ObjectIdentity
radUNT20Fcd = _RadUNT20Fcd_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 146)
)
_RadIpMux216_ObjectIdentity = ObjectIdentity
radIpMux216 = _RadIpMux216_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 147)
)
_RadLrs102_ObjectIdentity = ObjectIdentity
radLrs102 = _RadLrs102_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 148)
)
_RadGmux2004_ObjectIdentity = ObjectIdentity
radGmux2004 = _RadGmux2004_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 149)
)
_RadLrs102unbal_ObjectIdentity = ObjectIdentity
radLrs102unbal = _RadLrs102unbal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 150)
)
_RadLrs16_ObjectIdentity = ObjectIdentity
radLrs16 = _RadLrs16_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 151)
)
_RadVmux405_ObjectIdentity = ObjectIdentity
radVmux405 = _RadVmux405_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 152)
)
_RadVmux425_ObjectIdentity = ObjectIdentity
radVmux425 = _RadVmux425_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 153)
)
_RadMiniCVS_ObjectIdentity = ObjectIdentity
radMiniCVS = _RadMiniCVS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 154)
)
_RadSysBRG_ObjectIdentity = ObjectIdentity
radSysBRG = _RadSysBRG_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4)
)
_RadTRE1_ObjectIdentity = ObjectIdentity
radTRE1 = _RadTRE1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 1)
)
_RadTRE1D_ObjectIdentity = ObjectIdentity
radTRE1D = _RadTRE1D_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 2)
)
_RadTRE8_ObjectIdentity = ObjectIdentity
radTRE8 = _RadTRE8_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 3)
)
_RadTRE8D_ObjectIdentity = ObjectIdentity
radTRE8D = _RadTRE8D_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 4)
)
_RadMBE1_ObjectIdentity = ObjectIdentity
radMBE1 = _RadMBE1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 5)
)
_RadMBE1D_ObjectIdentity = ObjectIdentity
radMBE1D = _RadMBE1D_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 6)
)
_RadMBE8_ObjectIdentity = ObjectIdentity
radMBE8 = _RadMBE8_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 7)
)
_RadMBE8D_ObjectIdentity = ObjectIdentity
radMBE8D = _RadMBE8D_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 8)
)
_RadMLBT_ObjectIdentity = ObjectIdentity
radMLBT = _RadMLBT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 9)
)
_RadFEB4DAS_ObjectIdentity = ObjectIdentity
radFEB4DAS = _RadFEB4DAS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 10)
)
_RadTrimBrg10_ObjectIdentity = ObjectIdentity
radTrimBrg10 = _RadTrimBrg10_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 11)
)
_RadTrimBrg16_ObjectIdentity = ObjectIdentity
radTrimBrg16 = _RadTrimBrg16_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 12)
)
_RadRRTRE8_ObjectIdentity = ObjectIdentity
radRRTRE8 = _RadRRTRE8_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 13)
)
_RadRRTRE8D_ObjectIdentity = ObjectIdentity
radRRTRE8D = _RadRRTRE8D_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 14)
)
_RadRRMLBT_ObjectIdentity = ObjectIdentity
radRRMLBT = _RadRRMLBT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 15)
)
_RadRRMLBTF_ObjectIdentity = ObjectIdentity
radRRMLBTF = _RadRRMLBTF_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 16)
)
_RadRRTRE1D_ObjectIdentity = ObjectIdentity
radRRTRE1D = _RadRRTRE1D_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 17)
)
_RadTRERAS_ObjectIdentity = ObjectIdentity
radTRERAS = _RadTRERAS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 18)
)
_RadTRERASa_ObjectIdentity = ObjectIdentity
radTRERASa = _RadTRERASa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 19)
)
_RadMBERAS_ObjectIdentity = ObjectIdentity
radMBERAS = _RadMBERAS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 20)
)
_RadMBERASa_ObjectIdentity = ObjectIdentity
radMBERASa = _RadMBERASa_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 21)
)
_RadFEB4FDX_ObjectIdentity = ObjectIdentity
radFEB4FDX = _RadFEB4FDX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 22)
)
_RadFEB4SAS_ObjectIdentity = ObjectIdentity
radFEB4SAS = _RadFEB4SAS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 23)
)
_RadRRFTBDAS_ObjectIdentity = ObjectIdentity
radRRFTBDAS = _RadRRFTBDAS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 24)
)
_RadRRFTBSAS_ObjectIdentity = ObjectIdentity
radRRFTBSAS = _RadRRFTBSAS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 25)
)
_RadFTBDAS_ObjectIdentity = ObjectIdentity
radFTBDAS = _RadFTBDAS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 26)
)
_RadFTBSAS_ObjectIdentity = ObjectIdentity
radFTBSAS = _RadFTBSAS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 27)
)
_RadFastWay100_ObjectIdentity = ObjectIdentity
radFastWay100 = _RadFastWay100_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 28)
)
_RadSysCnvrtr_ObjectIdentity = ObjectIdentity
radSysCnvrtr = _RadSysCnvrtr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5)
)
_RadSTC1_ObjectIdentity = ObjectIdentity
radSTC1 = _RadSTC1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 1)
)
_RadSTC2_ObjectIdentity = ObjectIdentity
radSTC2 = _RadSTC2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 3)
)
_RadSTC1UDP_ObjectIdentity = ObjectIdentity
radSTC1UDP = _RadSTC1UDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 4)
)
_RadSTC2UDP_ObjectIdentity = ObjectIdentity
radSTC2UDP = _RadSTC2UDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 6)
)
_RadFTC1_ObjectIdentity = ObjectIdentity
radFTC1 = _RadFTC1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 10)
)
_RadFTC2_ObjectIdentity = ObjectIdentity
radFTC2 = _RadFTC2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 12)
)
_RadFTC1UDP_ObjectIdentity = ObjectIdentity
radFTC1UDP = _RadFTC1UDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 13)
)
_RadFTC2UDP_ObjectIdentity = ObjectIdentity
radFTC2UDP = _RadFTC2UDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 15)
)
_RadSEC1_ObjectIdentity = ObjectIdentity
radSEC1 = _RadSEC1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 20)
)
_RadSEC2_ObjectIdentity = ObjectIdentity
radSEC2 = _RadSEC2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 22)
)
_RadSEC1UDP_ObjectIdentity = ObjectIdentity
radSEC1UDP = _RadSEC1UDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 23)
)
_RadSEC2UDP_ObjectIdentity = ObjectIdentity
radSEC2UDP = _RadSEC2UDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 25)
)
_RadFEC1_ObjectIdentity = ObjectIdentity
radFEC1 = _RadFEC1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 30)
)
_RadFEC2_ObjectIdentity = ObjectIdentity
radFEC2 = _RadFEC2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 32)
)
_RadFEC1UDP_ObjectIdentity = ObjectIdentity
radFEC1UDP = _RadFEC1UDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 33)
)
_RadFEC2UDP_ObjectIdentity = ObjectIdentity
radFEC2UDP = _RadFEC2UDP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 35)
)
_RadRIC155_ObjectIdentity = ObjectIdentity
radRIC155 = _RadRIC155_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 36)
)
_RadRICE1_ObjectIdentity = ObjectIdentity
radRICE1 = _RadRICE1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 37)
)
_RadETX102_ObjectIdentity = ObjectIdentity
radETX102 = _RadETX102_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 38)
)
_RadRIC155GE_ObjectIdentity = ObjectIdentity
radRIC155GE = _RadRIC155GE_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 39)
)
_RadRiciT3_ObjectIdentity = ObjectIdentity
radRiciT3 = _RadRiciT3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 40)
)
_RadRiciE3_ObjectIdentity = ObjectIdentity
radRiciE3 = _RadRiciE3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 41)
)
_RadRiciT1_ObjectIdentity = ObjectIdentity
radRiciT1 = _RadRiciT1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 42)
)
_RadETX202_ObjectIdentity = ObjectIdentity
radETX202 = _RadETX202_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 43)
)
_RadETX105_ObjectIdentity = ObjectIdentity
radETX105 = _RadETX105_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 44)
)
_RadETX205_ObjectIdentity = ObjectIdentity
radETX205 = _RadETX205_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 45)
)
_RadRiciSE_ObjectIdentity = ObjectIdentity
radRiciSE = _RadRiciSE_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 46)
)
_RadRIC622GE_ObjectIdentity = ObjectIdentity
radRIC622GE = _RadRIC622GE_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 47)
)
_RadSPH_ObjectIdentity = ObjectIdentity
radSPH = _RadSPH_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 48)
)
_RadMiricE1T1_ObjectIdentity = ObjectIdentity
radMiricE1T1 = _RadMiricE1T1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 49)
)
_RadMiricE3T3_ObjectIdentity = ObjectIdentity
radMiricE3T3 = _RadMiricE3T3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 50)
)
_RadEthAccess_ObjectIdentity = ObjectIdentity
radEthAccess = _RadEthAccess_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6)
)
_RadETX510_ObjectIdentity = ObjectIdentity
radETX510 = _RadETX510_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 1)
)
_RadEGate100_ObjectIdentity = ObjectIdentity
radEGate100 = _RadEGate100_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 2)
)
_RadEGate20_ObjectIdentity = ObjectIdentity
radEGate20 = _RadEGate20_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 3)
)
_RadRici8E1_ObjectIdentity = ObjectIdentity
radRici8E1 = _RadRici8E1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 4)
)
_RadRici8T1_ObjectIdentity = ObjectIdentity
radRici8T1 = _RadRici8T1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 5)
)
_RadRici4E1_ObjectIdentity = ObjectIdentity
radRici4E1 = _RadRici4E1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 6)
)
_RadRici4T1_ObjectIdentity = ObjectIdentity
radRici4T1 = _RadRici4T1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 7)
)
_RadIMXI4_ObjectIdentity = ObjectIdentity
radIMXI4 = _RadIMXI4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 8)
)
_RadETX550_ObjectIdentity = ObjectIdentity
radETX550 = _RadETX550_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 9)
)
_RadRici16_ObjectIdentity = ObjectIdentity
radRici16 = _RadRici16_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 10)
)
_RadETX102A_ObjectIdentity = ObjectIdentity
radETX102A = _RadETX102A_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 11)
)
_RadETX202A_ObjectIdentity = ObjectIdentity
radETX202A = _RadETX202A_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 12)
)
_RadETX201A_ObjectIdentity = ObjectIdentity
radETX201A = _RadETX201A_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 13)
)
_RadETX201_ObjectIdentity = ObjectIdentity
radETX201 = _RadETX201_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 14)
)
_RadUNT20Ric_ObjectIdentity = ObjectIdentity
radUNT20Ric = _RadUNT20Ric_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 15)
)
_RadRici4E1L_ObjectIdentity = ObjectIdentity
radRici4E1L = _RadRici4E1L_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 16)
)
_RadRici8E1L_ObjectIdentity = ObjectIdentity
radRici8E1L = _RadRici8E1L_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 17)
)
_RadRici155GE_ObjectIdentity = ObjectIdentity
radRici155GE = _RadRici155GE_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 18)
)
_RadRici622GE_ObjectIdentity = ObjectIdentity
radRici622GE = _RadRici622GE_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 19)
)
_RadETX208_ObjectIdentity = ObjectIdentity
radETX208 = _RadETX208_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 20)
)
_RadETX202AW_ObjectIdentity = ObjectIdentity
radETX202AW = _RadETX202AW_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 21)
)
_RadETX102H_ObjectIdentity = ObjectIdentity
radETX102H = _RadETX102H_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 22)
)
_RadETX202H_ObjectIdentity = ObjectIdentity
radETX202H = _RadETX202H_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 6, 23)
)
_RadSysStkHub_ObjectIdentity = ObjectIdentity
radSysStkHub = _RadSysStkHub_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7)
)
_RadRBHE_ObjectIdentity = ObjectIdentity
radRBHE = _RadRBHE_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 1)
)
_RadRBHEEvents_ObjectIdentity = ObjectIdentity
radRBHEEvents = _RadRBHEEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 1, 0)
)
if mibBuilder.loadTexts:
    radRBHEEvents.setStatus("current")
_RadRBHT_ObjectIdentity = ObjectIdentity
radRBHT = _RadRBHT_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 2)
)
_RadRBHTEvents_ObjectIdentity = ObjectIdentity
radRBHTEvents = _RadRBHTEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 2, 0)
)
if mibBuilder.loadTexts:
    radRBHTEvents.setStatus("current")
_RadETS4fddiDAS_ObjectIdentity = ObjectIdentity
radETS4fddiDAS = _RadETS4fddiDAS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 3)
)
_RadETS4fddiSAS_ObjectIdentity = ObjectIdentity
radETS4fddiSAS = _RadETS4fddiSAS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 4)
)
_RadSAHEMX_ObjectIdentity = ObjectIdentity
radSAHEMX = _RadSAHEMX_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 5)
)
_RadSAHTM_ObjectIdentity = ObjectIdentity
radSAHTM = _RadSAHTM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 6)
)
_RadETS4_ObjectIdentity = ObjectIdentity
radETS4 = _RadETS4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 7)
)
_RadSAHEMU_ObjectIdentity = ObjectIdentity
radSAHEMU = _RadSAHEMU_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 8)
)
_Unknown_ObjectIdentity = ObjectIdentity
unknown = _Unknown_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 9)
)
_RadSAH16Eint_ObjectIdentity = ObjectIdentity
radSAH16Eint = _RadSAH16Eint_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 10)
)
_RadSAH16Tint_ObjectIdentity = ObjectIdentity
radSAH16Tint = _RadSAH16Tint_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 11)
)
_RadSAH16Eext_ObjectIdentity = ObjectIdentity
radSAH16Eext = _RadSAH16Eext_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 12)
)
_RadSAH16Text_ObjectIdentity = ObjectIdentity
radSAH16Text = _RadSAH16Text_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 13)
)
_RadSysPS_ObjectIdentity = ObjectIdentity
radSysPS = _RadSysPS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8)
)
_RadSysPSEvents_ObjectIdentity = ObjectIdentity
radSysPSEvents = _RadSysPSEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 0)
)
if mibBuilder.loadTexts:
    radSysPSEvents.setStatus("current")
_RadSPS2_ObjectIdentity = ObjectIdentity
radSPS2 = _RadSPS2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 1)
)
_RadSPS3_ObjectIdentity = ObjectIdentity
radSPS3 = _RadSPS3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 2)
)
_RadSPS6_ObjectIdentity = ObjectIdentity
radSPS6 = _RadSPS6_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 3)
)
_RadSPS9_ObjectIdentity = ObjectIdentity
radSPS9 = _RadSPS9_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 4)
)
_RadSPS12_ObjectIdentity = ObjectIdentity
radSPS12 = _RadSPS12_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 5)
)
_RadAPD2_ObjectIdentity = ObjectIdentity
radAPD2 = _RadAPD2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 6)
)
_RadAPD8_ObjectIdentity = ObjectIdentity
radAPD8 = _RadAPD8_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 7)
)
_RadAPS8_ObjectIdentity = ObjectIdentity
radAPS8 = _RadAPS8_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 8)
)
_RadAPS16_ObjectIdentity = ObjectIdentity
radAPS16 = _RadAPS16_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 9)
)
_RadAPS24_ObjectIdentity = ObjectIdentity
radAPS24 = _RadAPS24_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 10)
)
_RadSPS3S_ObjectIdentity = ObjectIdentity
radSPS3S = _RadSPS3S_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 11)
)
_RadFPS8_ObjectIdentity = ObjectIdentity
radFPS8 = _RadFPS8_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 12)
)
_RadFPS12_ObjectIdentity = ObjectIdentity
radFPS12 = _RadFPS12_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 13)
)
_RadSPS3ScSL_ObjectIdentity = ObjectIdentity
radSPS3ScSL = _RadSPS3ScSL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 14)
)
_RadSPS3Sc2S_ObjectIdentity = ObjectIdentity
radSPS3Sc2S = _RadSPS3Sc2S_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 15)
)
_RadFPS8c_ObjectIdentity = ObjectIdentity
radFPS8c = _RadFPS8c_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 16)
)
_RadFPS4_ObjectIdentity = ObjectIdentity
radFPS4 = _RadFPS4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 17)
)
_RadSPS4_ObjectIdentity = ObjectIdentity
radSPS4 = _RadSPS4_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 18)
)
_RadSysEth_ObjectIdentity = ObjectIdentity
radSysEth = _RadSysEth_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 9)
)
_RadEP8T_ObjectIdentity = ObjectIdentity
radEP8T = _RadEP8T_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 1)
)
_RadEP4TAUI_ObjectIdentity = ObjectIdentity
radEP4TAUI = _RadEP4TAUI_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 2)
)
_RadEP4T2FL_ObjectIdentity = ObjectIdentity
radEP4T2FL = _RadEP4T2FL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 3)
)
_RadEP4TFL_ObjectIdentity = ObjectIdentity
radEP4TFL = _RadEP4TFL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 4)
)
_RadEP4FL_ObjectIdentity = ObjectIdentity
radEP4FL = _RadEP4FL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 5)
)
_RadEPR8T_ObjectIdentity = ObjectIdentity
radEPR8T = _RadEPR8T_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 7)
)
_RadEPR4TAUI_ObjectIdentity = ObjectIdentity
radEPR4TAUI = _RadEPR4TAUI_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 8)
)
_RadEPR4T2FL_ObjectIdentity = ObjectIdentity
radEPR4T2FL = _RadEPR4T2FL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 9)
)
_RadEPR4TFL_ObjectIdentity = ObjectIdentity
radEPR4TFL = _RadEPR4TFL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 10)
)
_RadEPR4FL_ObjectIdentity = ObjectIdentity
radEPR4FL = _RadEPR4FL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 11)
)
_RadSysRtr_ObjectIdentity = ObjectIdentity
radSysRtr = _RadSysRtr_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 11)
)
_RadSysRtrEvents_ObjectIdentity = ObjectIdentity
radSysRtrEvents = _RadSysRtrEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 0)
)
if mibBuilder.loadTexts:
    radSysRtrEvents.setStatus("current")
_RadRTED_ObjectIdentity = ObjectIdentity
radRTED = _RadRTED_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 1)
)
_RadRTEM_ObjectIdentity = ObjectIdentity
radRTEM = _RadRTEM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 2)
)
_RadRTEC_ObjectIdentity = ObjectIdentity
radRTEC = _RadRTEC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 3)
)
_RadWebRanger_ObjectIdentity = ObjectIdentity
radWebRanger = _RadWebRanger_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 4)
)
_RadTinyRouter_ObjectIdentity = ObjectIdentity
radTinyRouter = _RadTinyRouter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 5)
)
_RadLA240_ObjectIdentity = ObjectIdentity
radLA240 = _RadLA240_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 6)
)
_RadSuperLan_ObjectIdentity = ObjectIdentity
radSuperLan = _RadSuperLan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 7)
)
_RadLA240I_ObjectIdentity = ObjectIdentity
radLA240I = _RadLA240I_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 8)
)
_RadFcdIsdn_ObjectIdentity = ObjectIdentity
radFcdIsdn = _RadFcdIsdn_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 9)
)
_RadEFcdIp_ObjectIdentity = ObjectIdentity
radEFcdIp = _RadEFcdIp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 10)
)
_RadFcdIpD_ObjectIdentity = ObjectIdentity
radFcdIpD = _RadFcdIpD_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 11)
)
_RadFcdIpM_ObjectIdentity = ObjectIdentity
radFcdIpM = _RadFcdIpM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 12)
)
_RadFcdIpL_ObjectIdentity = ObjectIdentity
radFcdIpL = _RadFcdIpL_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 13)
)
_RadSysAtm_ObjectIdentity = ObjectIdentity
radSysAtm = _RadSysAtm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12)
)
_RadSysAtmEvents_ObjectIdentity = ObjectIdentity
radSysAtmEvents = _RadSysAtmEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0)
)
if mibBuilder.loadTexts:
    radSysAtmEvents.setStatus("current")
_RadStarSwitch_ObjectIdentity = ObjectIdentity
radStarSwitch = _RadStarSwitch_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 1)
)
_RadStarSwitchATM25_ObjectIdentity = ObjectIdentity
radStarSwitchATM25 = _RadStarSwitchATM25_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 1, 1)
)
_RadStarSwitchATM25L_ObjectIdentity = ObjectIdentity
radStarSwitchATM25L = _RadStarSwitchATM25L_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 1, 2)
)
_RadStarSwitchATM155_ObjectIdentity = ObjectIdentity
radStarSwitchATM155 = _RadStarSwitchATM155_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 1, 3)
)
_RadAtmCsuDsu_ObjectIdentity = ObjectIdentity
radAtmCsuDsu = _RadAtmCsuDsu_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2)
)
_RadAmcdE1_ObjectIdentity = ObjectIdentity
radAmcdE1 = _RadAmcdE1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 1)
)
_RadAmcdT1_ObjectIdentity = ObjectIdentity
radAmcdT1 = _RadAmcdT1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 2)
)
_RadAce20E_ObjectIdentity = ObjectIdentity
radAce20E = _RadAce20E_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 3)
)
_RadAce20T_ObjectIdentity = ObjectIdentity
radAce20T = _RadAce20T_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 4)
)
_RadAce2005_ObjectIdentity = ObjectIdentity
radAce2005 = _RadAce2005_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 5)
)
_RadAce2002_ObjectIdentity = ObjectIdentity
radAce2002 = _RadAce2002_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 6)
)
_RadAce2002E_ObjectIdentity = ObjectIdentity
radAce2002E = _RadAce2002E_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 7)
)
_RadAce2E_ObjectIdentity = ObjectIdentity
radAce2E = _RadAce2E_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 8)
)
_RadAce2T_ObjectIdentity = ObjectIdentity
radAce2T = _RadAce2T_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 9)
)
_RadMlAtmE1_ObjectIdentity = ObjectIdentity
radMlAtmE1 = _RadMlAtmE1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 10)
)
_RadMlAtmT1_ObjectIdentity = ObjectIdentity
radMlAtmT1 = _RadMlAtmT1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 11)
)
_RadAmc102_ObjectIdentity = ObjectIdentity
radAmc102 = _RadAmc102_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 12)
)
_RadAmc102c_ObjectIdentity = ObjectIdentity
radAmc102c = _RadAmc102c_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 13)
)
_RadAce202_ObjectIdentity = ObjectIdentity
radAce202 = _RadAce202_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 14)
)
_RadAce_ObjectIdentity = ObjectIdentity
radAce = _RadAce_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3)
)
_RadAce101_ObjectIdentity = ObjectIdentity
radAce101 = _RadAce101_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3, 1)
)
_RadAce102_ObjectIdentity = ObjectIdentity
radAce102 = _RadAce102_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3, 2)
)
_RadAce50_ObjectIdentity = ObjectIdentity
radAce50 = _RadAce50_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3, 3)
)
_RadAce52_ObjectIdentity = ObjectIdentity
radAce52 = _RadAce52_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3, 4)
)
_RadAce52L_ObjectIdentity = ObjectIdentity
radAce52L = _RadAce52L_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3, 5)
)
_RadAce201_ObjectIdentity = ObjectIdentity
radAce201 = _RadAce201_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3, 7)
)
_RadAce3200_ObjectIdentity = ObjectIdentity
radAce3200 = _RadAce3200_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3, 8)
)
_RadAce3100_ObjectIdentity = ObjectIdentity
radAce3100 = _RadAce3100_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3, 9)
)
_RadAce3400_ObjectIdentity = ObjectIdentity
radAce3400 = _RadAce3400_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3, 10)
)
_RadAce3402_ObjectIdentity = ObjectIdentity
radAce3402 = _RadAce3402_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3, 11)
)
_RadAce3100PSN_ObjectIdentity = ObjectIdentity
radAce3100PSN = _RadAce3100PSN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3, 12)
)
_RadAce3200PSN_ObjectIdentity = ObjectIdentity
radAce3200PSN = _RadAce3200PSN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3, 13)
)
_RadAce3400PSN_ObjectIdentity = ObjectIdentity
radAce3400PSN = _RadAce3400PSN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3, 14)
)
_RadAce3402PSN_ObjectIdentity = ObjectIdentity
radAce3402PSN = _RadAce3402PSN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3, 15)
)
_RadAce3600_ObjectIdentity = ObjectIdentity
radAce3600 = _RadAce3600_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3, 16)
)
_RadAce3205_ObjectIdentity = ObjectIdentity
radAce3205 = _RadAce3205_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3, 17)
)
_RadAce3105_ObjectIdentity = ObjectIdentity
radAce3105 = _RadAce3105_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3, 18)
)
_RadSysLA_ObjectIdentity = ObjectIdentity
radSysLA = _RadSysLA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 13)
)
_RadLA140_ObjectIdentity = ObjectIdentity
radLA140 = _RadLA140_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 13, 1)
)
_RadLA110_ObjectIdentity = ObjectIdentity
radLA110 = _RadLA110_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 13, 2)
)
_RadLA104_ObjectIdentity = ObjectIdentity
radLA104 = _RadLA104_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 13, 3)
)
_RadLA130_ObjectIdentity = ObjectIdentity
radLA130 = _RadLA130_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 13, 4)
)
_RadLA210_ObjectIdentity = ObjectIdentity
radLA210 = _RadLA210_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 13, 5)
)
_RadSysTerminal_ObjectIdentity = ObjectIdentity
radSysTerminal = _RadSysTerminal_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 100)
)
_Agnt_ObjectIdentity = ObjectIdentity
agnt = _Agnt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2)
)
_AgnHwVersion_Type = DisplayString
_AgnHwVersion_Object = MibScalar
agnHwVersion = _AgnHwVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 1),
    _AgnHwVersion_Type()
)
agnHwVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnHwVersion.setStatus("current")
_AgnTrapMask_Type = Integer32
_AgnTrapMask_Object = MibScalar
agnTrapMask = _AgnTrapMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 2),
    _AgnTrapMask_Type()
)
agnTrapMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnTrapMask.setStatus("current")
_AgnTrapValue_Type = OctetString
_AgnTrapValue_Object = MibScalar
agnTrapValue = _AgnTrapValue_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 3),
    _AgnTrapValue_Type()
)
agnTrapValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnTrapValue.setStatus("deprecated")
_AgnChangeCnt_Type = Counter32
_AgnChangeCnt_Object = MibScalar
agnChangeCnt = _AgnChangeCnt_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 4),
    _AgnChangeCnt_Type()
)
agnChangeCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnChangeCnt.setStatus("current")
_AgnSpecific_Type = ObjectIdentifier
_AgnSpecific_Object = MibScalar
agnSpecific = _AgnSpecific_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 5),
    _AgnSpecific_Type()
)
agnSpecific.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSpecific.setStatus("current")
_AgnConfigMsg_Type = OctetString
_AgnConfigMsg_Object = MibScalar
agnConfigMsg = _AgnConfigMsg_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 6),
    _AgnConfigMsg_Type()
)
agnConfigMsg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnConfigMsg.setStatus("current")
_MngTrapIpTable_Object = MibTable
mngTrapIpTable = _MngTrapIpTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 7)
)
if mibBuilder.loadTexts:
    mngTrapIpTable.setStatus("current")
_MngEntry_Object = MibTableRow
mngEntry = _MngEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1)
)
mngEntry.setIndexNames(
    (0, "RAD-MIB", "mngID"),
)
if mibBuilder.loadTexts:
    mngEntry.setStatus("current")
_MngID_Type = Integer32
_MngID_Object = MibTableColumn
mngID = _MngID_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1, 1),
    _MngID_Type()
)
mngID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mngID.setStatus("current")
_MngIP_Type = IpAddress
_MngIP_Object = MibTableColumn
mngIP = _MngIP_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1, 2),
    _MngIP_Type()
)
mngIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mngIP.setStatus("current")
_MngIPMask_Type = IpAddress
_MngIPMask_Object = MibTableColumn
mngIPMask = _MngIPMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1, 3),
    _MngIPMask_Type()
)
mngIPMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mngIPMask.setStatus("deprecated")
_MngTrapMask_Type = Integer32
_MngTrapMask_Object = MibTableColumn
mngTrapMask = _MngTrapMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1, 4),
    _MngTrapMask_Type()
)
mngTrapMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mngTrapMask.setStatus("current")
_MngAlarmTrapMask_Type = OctetString
_MngAlarmTrapMask_Object = MibTableColumn
mngAlarmTrapMask = _MngAlarmTrapMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1, 5),
    _MngAlarmTrapMask_Type()
)
mngAlarmTrapMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mngAlarmTrapMask.setStatus("current")
_MngSnmpTrapUdpPort_Type = Unsigned32
_MngSnmpTrapUdpPort_Object = MibTableColumn
mngSnmpTrapUdpPort = _MngSnmpTrapUdpPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1, 6),
    _MngSnmpTrapUdpPort_Type()
)
mngSnmpTrapUdpPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mngSnmpTrapUdpPort.setStatus("current")


class _AgnIndication_Type(Integer32):
    """Custom type agnIndication based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 6),
          ("faulty", 1),
          ("major", 5),
          ("minor", 4),
          ("normal", 3),
          ("warning", 2))
    )


_AgnIndication_Type.__name__ = "Integer32"
_AgnIndication_Object = MibScalar
agnIndication = _AgnIndication_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 8),
    _AgnIndication_Type()
)
agnIndication.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnIndication.setStatus("current")


class _AgnMonitorModeCmd_Type(Integer32):
    """Custom type agnMonitorModeCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_AgnMonitorModeCmd_Type.__name__ = "Integer32"
_AgnMonitorModeCmd_Object = MibScalar
agnMonitorModeCmd = _AgnMonitorModeCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 9),
    _AgnMonitorModeCmd_Type()
)
agnMonitorModeCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnMonitorModeCmd.setStatus("current")
_AgnLed_Type = OctetString
_AgnLed_Object = MibScalar
agnLed = _AgnLed_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 10),
    _AgnLed_Type()
)
agnLed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnLed.setStatus("current")
_TrapTable_Object = MibTable
trapTable = _TrapTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 11)
)
if mibBuilder.loadTexts:
    trapTable.setStatus("current")
_TrapEntry_Object = MibTableRow
trapEntry = _TrapEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 11, 1)
)
trapEntry.setIndexNames(
    (0, "RAD-MIB", "trapID"),
)
if mibBuilder.loadTexts:
    trapEntry.setStatus("current")
_TrapID_Type = Integer32
_TrapID_Object = MibTableColumn
trapID = _TrapID_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 11, 1, 1),
    _TrapID_Type()
)
trapID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trapID.setStatus("current")
_TrapVal_Type = DisplayString
_TrapVal_Object = MibTableColumn
trapVal = _TrapVal_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 11, 1, 2),
    _TrapVal_Type()
)
trapVal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trapVal.setStatus("current")
_TrapTimeSinceOccurrence_Type = TimeTicks
_TrapTimeSinceOccurrence_Object = MibTableColumn
trapTimeSinceOccurrence = _TrapTimeSinceOccurrence_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 11, 1, 3),
    _TrapTimeSinceOccurrence_Type()
)
trapTimeSinceOccurrence.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    trapTimeSinceOccurrence.setStatus("current")
_TrapNumeric_Type = Integer32
_TrapNumeric_Object = MibTableColumn
trapNumeric = _TrapNumeric_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 11, 1, 4),
    _TrapNumeric_Type()
)
trapNumeric.setMaxAccess("accessible-for-notify")
if mibBuilder.loadTexts:
    trapNumeric.setStatus("current")
_FileTransfer_ObjectIdentity = ObjectIdentity
fileTransfer = _FileTransfer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12)
)
_FileServerIP_Type = IpAddress
_FileServerIP_Object = MibScalar
fileServerIP = _FileServerIP_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 1),
    _FileServerIP_Type()
)
fileServerIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileServerIP.setStatus("current")
_FileName_Type = DisplayString
_FileName_Object = MibScalar
fileName = _FileName_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 2),
    _FileName_Type()
)
fileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileName.setStatus("current")


class _FileTransCmd_Type(Integer32):
    """Custom type fileTransCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              255)
        )
    )
    namedValues = NamedValues(
        *(("bootDwnLoad", 11),
          ("bootUpLoad", 12),
          ("coProcDwnLoad", 4),
          ("configDwnLoad", 2),
          ("configDwnLoadToDefaultFile", 15),
          ("configUpLoad", 3),
          ("dwnLoadUserFile", 6),
          ("licenseDwnLoad", 14),
          ("noOp", 255),
          ("stateUpLoad", 5),
          ("swDwnLoad", 1),
          ("swDwnLoad2BkupStorage", 10),
          ("swDwnLoadAndReset", 8),
          ("swUpLoad", 9),
          ("swUpLoadFromBkupStorage", 13),
          ("upLoadUserFile", 7))
    )


_FileTransCmd_Type.__name__ = "Integer32"
_FileTransCmd_Object = MibScalar
fileTransCmd = _FileTransCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 3),
    _FileTransCmd_Type()
)
fileTransCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileTransCmd.setStatus("current")
_TftpRetryTimeOut_Type = Integer32
_TftpRetryTimeOut_Object = MibScalar
tftpRetryTimeOut = _TftpRetryTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 4),
    _TftpRetryTimeOut_Type()
)
tftpRetryTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tftpRetryTimeOut.setStatus("current")
_TftpTotalTimeOut_Type = Integer32
_TftpTotalTimeOut_Object = MibScalar
tftpTotalTimeOut = _TftpTotalTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 5),
    _TftpTotalTimeOut_Type()
)
tftpTotalTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tftpTotalTimeOut.setStatus("current")


class _TftpStatus_Type(Integer32):
    """Custom type tftpStatus based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("connecting", 3),
          ("endedOk", 6),
          ("endedTimeOut", 5),
          ("error", 7),
          ("noOp", 2),
          ("transferringData", 4))
    )


_TftpStatus_Type.__name__ = "Integer32"
_TftpStatus_Object = MibScalar
tftpStatus = _TftpStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 6),
    _TftpStatus_Type()
)
tftpStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tftpStatus.setStatus("current")


class _TftpError_Type(OctetString):
    """Custom type tftpError based on OctetString"""
    defaultHexValue = "0000"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_TftpError_Type.__name__ = "OctetString"
_TftpError_Object = MibScalar
tftpError = _TftpError_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 7),
    _TftpError_Type()
)
tftpError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tftpError.setStatus("current")
_FileTransferToSubSystems_Type = OctetString
_FileTransferToSubSystems_Object = MibScalar
fileTransferToSubSystems = _FileTransferToSubSystems_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 8),
    _FileTransferToSubSystems_Type()
)
fileTransferToSubSystems.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileTransferToSubSystems.setStatus("current")
_FileNameWithinProduct_Type = DisplayString
_FileNameWithinProduct_Object = MibScalar
fileNameWithinProduct = _FileNameWithinProduct_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 9),
    _FileNameWithinProduct_Type()
)
fileNameWithinProduct.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileNameWithinProduct.setStatus("current")
_IntSwdlTable_Object = MibTable
intSwdlTable = _IntSwdlTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10)
)
if mibBuilder.loadTexts:
    intSwdlTable.setStatus("current")
_IntSwdlEntry_Object = MibTableRow
intSwdlEntry = _IntSwdlEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10, 1)
)
intSwdlEntry.setIndexNames(
    (0, "RAD-MIB", "intSwdlObjIdx"),
    (0, "RAD-MIB", "intSwdlFileIdx"),
)
if mibBuilder.loadTexts:
    intSwdlEntry.setStatus("current")
_IntSwdlObjIdx_Type = Integer32
_IntSwdlObjIdx_Object = MibTableColumn
intSwdlObjIdx = _IntSwdlObjIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10, 1, 1),
    _IntSwdlObjIdx_Type()
)
intSwdlObjIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intSwdlObjIdx.setStatus("current")
_IntSwdlFileIdx_Type = Integer32
_IntSwdlFileIdx_Object = MibTableColumn
intSwdlFileIdx = _IntSwdlFileIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10, 1, 2),
    _IntSwdlFileIdx_Type()
)
intSwdlFileIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intSwdlFileIdx.setStatus("current")
_IntSwdlFileName_Type = DisplayString
_IntSwdlFileName_Object = MibTableColumn
intSwdlFileName = _IntSwdlFileName_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10, 1, 3),
    _IntSwdlFileName_Type()
)
intSwdlFileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intSwdlFileName.setStatus("current")
_IntSwdlFileSwVer_Type = DisplayString
_IntSwdlFileSwVer_Object = MibTableColumn
intSwdlFileSwVer = _IntSwdlFileSwVer_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10, 1, 4),
    _IntSwdlFileSwVer_Type()
)
intSwdlFileSwVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intSwdlFileSwVer.setStatus("current")
_IntSwdlSwDate_Type = DisplayString
_IntSwdlSwDate_Object = MibTableColumn
intSwdlSwDate = _IntSwdlSwDate_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10, 1, 5),
    _IntSwdlSwDate_Type()
)
intSwdlSwDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intSwdlSwDate.setStatus("current")
_IntSwdlSize_Type = DisplayString
_IntSwdlSize_Object = MibTableColumn
intSwdlSize = _IntSwdlSize_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10, 1, 6),
    _IntSwdlSize_Type()
)
intSwdlSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intSwdlSize.setStatus("current")


class _IntSwdlCmd_Type(Integer32):
    """Custom type intSwdlCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_IntSwdlCmd_Type.__name__ = "Integer32"
_IntSwdlCmd_Object = MibTableColumn
intSwdlCmd = _IntSwdlCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10, 1, 7),
    _IntSwdlCmd_Type()
)
intSwdlCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    intSwdlCmd.setStatus("current")
_IntSwdlToSubSystem_Type = OctetString
_IntSwdlToSubSystem_Object = MibTableColumn
intSwdlToSubSystem = _IntSwdlToSubSystem_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10, 1, 8),
    _IntSwdlToSubSystem_Type()
)
intSwdlToSubSystem.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    intSwdlToSubSystem.setStatus("current")


class _IntSwdlCardType_Type(Integer32):
    """Custom type intSwdlCardType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              220,
              221,
              222,
              223,
              270,
              271,
              272,
              273,
              280,
              281,
              282,
              283,
              284,
              290,
              300,
              301,
              302,
              303,
              310,
              311,
              312,
              313,
              314,
              315,
              316,
              317,
              318,
              319,
              320,
              321,
              322,
              323,
              324,
              325,
              326,
              327,
              328,
              329,
              330,
              331,
              332,
              333,
              334,
              335,
              336,
              337,
              338,
              339,
              340,
              341,
              342,
              343,
              344,
              345,
              346,
              347,
              348,
              349)
        )
    )
    namedValues = NamedValues(
        *(("cesE128", 301),
          ("cesE1Pw28", 303),
          ("cesT128", 300),
          ("cesT1Pw28", 302),
          ("channelizedT3Pw1", 290),
          ("eth2", 282),
          ("eth8", 284),
          ("gigabitEth", 280),
          ("gigabitEth2", 281),
          ("gigabitEth8", 283),
          ("goc3", 221),
          ("goc3D", 223),
          ("gstm1", 220),
          ("gstm1D", 222),
          ("serverE1", 270),
          ("serverE1Pw", 272),
          ("serverT1", 271),
          ("serverT1Pw", 273),
          ("unknown", 1),
          ("vc12E1UeNe", 318),
          ("vc12E1UeNi", 319),
          ("vc12E1UiNe", 320),
          ("vc12E1UiNi", 321),
          ("vc12T1UeNe", 322),
          ("vc12T1UeNi", 323),
          ("vc12T1UiNe", 324),
          ("vc12T1UiNi", 325),
          ("vca12E1UeNe", 334),
          ("vca12E1UeNi", 335),
          ("vca12E1UiNe", 336),
          ("vca12E1UiNi", 337),
          ("vca12T1UeNe", 338),
          ("vca12T1UeNi", 339),
          ("vca12T1UiNe", 340),
          ("vca12T1UiNi", 341),
          ("vca16E1UeNe", 326),
          ("vca16E1UeNi", 327),
          ("vca16E1UiNe", 328),
          ("vca16E1UiNi", 329),
          ("vca16T1UeNe", 330),
          ("vca16T1UeNi", 331),
          ("vca16T1UiNe", 332),
          ("vca16T1UiNi", 333),
          ("vmg12E1Ue", 346),
          ("vmg12E1Ui", 347),
          ("vmg12T1Ue", 348),
          ("vmg12T1Ui", 349),
          ("vmg16E1Ue", 342),
          ("vmg16E1Ui", 343),
          ("vmg16T1Ue", 344),
          ("vmg16T1Ui", 345),
          ("vmxE1VeDe", 310),
          ("vmxE1VeDi", 311),
          ("vmxE1ViDe", 312),
          ("vmxE1ViDi", 313),
          ("vmxT1VeDe", 314),
          ("vmxT1VeDi", 315),
          ("vmxT1ViDe", 316),
          ("vmxT1ViDi", 317))
    )


_IntSwdlCardType_Type.__name__ = "Integer32"
_IntSwdlCardType_Object = MibTableColumn
intSwdlCardType = _IntSwdlCardType_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10, 1, 9),
    _IntSwdlCardType_Type()
)
intSwdlCardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intSwdlCardType.setStatus("current")
_IntSwdlFlashIdx_Type = Integer32
_IntSwdlFlashIdx_Object = MibTableColumn
intSwdlFlashIdx = _IntSwdlFlashIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 10, 1, 10),
    _IntSwdlFlashIdx_Type()
)
intSwdlFlashIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    intSwdlFlashIdx.setStatus("current")
_SwdlStatusTable_Object = MibTable
swdlStatusTable = _SwdlStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 11)
)
if mibBuilder.loadTexts:
    swdlStatusTable.setStatus("current")
_SwdlStatusEntry_Object = MibTableRow
swdlStatusEntry = _SwdlStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 11, 1)
)
swdlStatusEntry.setIndexNames(
    (0, "RAD-MIB", "swdlStatusTypeIdx"),
    (0, "RAD-MIB", "swdlStatusIdx"),
)
if mibBuilder.loadTexts:
    swdlStatusEntry.setStatus("current")
_SwdlStatusTypeIdx_Type = Integer32
_SwdlStatusTypeIdx_Object = MibTableColumn
swdlStatusTypeIdx = _SwdlStatusTypeIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 11, 1, 1),
    _SwdlStatusTypeIdx_Type()
)
swdlStatusTypeIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    swdlStatusTypeIdx.setStatus("current")
_SwdlStatusIdx_Type = Integer32
_SwdlStatusIdx_Object = MibTableColumn
swdlStatusIdx = _SwdlStatusIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 11, 1, 2),
    _SwdlStatusIdx_Type()
)
swdlStatusIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    swdlStatusIdx.setStatus("current")
_SwdlStatusFileName_Type = DisplayString
_SwdlStatusFileName_Object = MibTableColumn
swdlStatusFileName = _SwdlStatusFileName_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 11, 1, 3),
    _SwdlStatusFileName_Type()
)
swdlStatusFileName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    swdlStatusFileName.setStatus("current")
_SwdlStatusSlot_Type = DisplayString
_SwdlStatusSlot_Object = MibTableColumn
swdlStatusSlot = _SwdlStatusSlot_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 11, 1, 4),
    _SwdlStatusSlot_Type()
)
swdlStatusSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    swdlStatusSlot.setStatus("current")
_SwdlStatusSubSystem_Type = DisplayString
_SwdlStatusSubSystem_Object = MibTableColumn
swdlStatusSubSystem = _SwdlStatusSubSystem_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 11, 1, 5),
    _SwdlStatusSubSystem_Type()
)
swdlStatusSubSystem.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    swdlStatusSubSystem.setStatus("current")
_SwdlStatusStatus_Type = Integer32
_SwdlStatusStatus_Object = MibTableColumn
swdlStatusStatus = _SwdlStatusStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 11, 1, 6),
    _SwdlStatusStatus_Type()
)
swdlStatusStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    swdlStatusStatus.setStatus("current")
_SwdlStatusTime_Type = DisplayString
_SwdlStatusTime_Object = MibTableColumn
swdlStatusTime = _SwdlStatusTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 11, 1, 7),
    _SwdlStatusTime_Type()
)
swdlStatusTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    swdlStatusTime.setStatus("current")
_ClearDwldStatusLog_Type = Integer32
_ClearDwldStatusLog_Object = MibScalar
clearDwldStatusLog = _ClearDwldStatusLog_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 12),
    _ClearDwldStatusLog_Type()
)
clearDwldStatusLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clearDwldStatusLog.setStatus("current")
_AutoFileTransfer_ObjectIdentity = ObjectIdentity
autoFileTransfer = _AutoFileTransfer_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 13)
)
_AutoFileTransferTable_Object = MibTable
autoFileTransferTable = _AutoFileTransferTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 13, 1)
)
if mibBuilder.loadTexts:
    autoFileTransferTable.setStatus("current")
_AutoFileTransferEntry_Object = MibTableRow
autoFileTransferEntry = _AutoFileTransferEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 13, 1, 1)
)
autoFileTransferEntry.setIndexNames(
    (0, "RAD-MIB", "autoFileTransferType"),
)
if mibBuilder.loadTexts:
    autoFileTransferEntry.setStatus("current")


class _AutoFileTransferType_Type(Integer32):
    """Custom type autoFileTransferType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("alarmsBuffer", 1)
    )


_AutoFileTransferType_Type.__name__ = "Integer32"
_AutoFileTransferType_Object = MibTableColumn
autoFileTransferType = _AutoFileTransferType_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 13, 1, 1, 1),
    _AutoFileTransferType_Type()
)
autoFileTransferType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    autoFileTransferType.setStatus("current")
_AutoFileTransferServerIp_Type = IpAddress
_AutoFileTransferServerIp_Object = MibTableColumn
autoFileTransferServerIp = _AutoFileTransferServerIp_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 13, 1, 1, 2),
    _AutoFileTransferServerIp_Type()
)
autoFileTransferServerIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    autoFileTransferServerIp.setStatus("current")
_AutoFileTransferFileName_Type = SnmpAdminString
_AutoFileTransferFileName_Object = MibTableColumn
autoFileTransferFileName = _AutoFileTransferFileName_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 13, 1, 1, 3),
    _AutoFileTransferFileName_Type()
)
autoFileTransferFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    autoFileTransferFileName.setStatus("current")


class _AutoFileTransferScheduling_Type(Integer32):
    """Custom type autoFileTransferScheduling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("now", 2),
          ("recurrence", 3))
    )


_AutoFileTransferScheduling_Type.__name__ = "Integer32"
_AutoFileTransferScheduling_Object = MibTableColumn
autoFileTransferScheduling = _AutoFileTransferScheduling_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 13, 1, 1, 4),
    _AutoFileTransferScheduling_Type()
)
autoFileTransferScheduling.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    autoFileTransferScheduling.setStatus("current")
_AutoFileTransferTimeRecurrence_Type = Integer32
_AutoFileTransferTimeRecurrence_Object = MibTableColumn
autoFileTransferTimeRecurrence = _AutoFileTransferTimeRecurrence_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 13, 1, 1, 5),
    _AutoFileTransferTimeRecurrence_Type()
)
autoFileTransferTimeRecurrence.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    autoFileTransferTimeRecurrence.setStatus("current")
_AutoFileTransferOccurrenceRecurrence_Type = Integer32
_AutoFileTransferOccurrenceRecurrence_Object = MibTableColumn
autoFileTransferOccurrenceRecurrence = _AutoFileTransferOccurrenceRecurrence_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 13, 1, 1, 6),
    _AutoFileTransferOccurrenceRecurrence_Type()
)
autoFileTransferOccurrenceRecurrence.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    autoFileTransferOccurrenceRecurrence.setStatus("current")
_FileTransferServerPort_Type = Unsigned32
_FileTransferServerPort_Object = MibScalar
fileTransferServerPort = _FileTransferServerPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 14),
    _FileTransferServerPort_Type()
)
fileTransferServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileTransferServerPort.setStatus("current")


class _FileTransferProtocol_Type(Integer32):
    """Custom type fileTransferProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("sftp", 2),
          ("tftp", 1))
    )


_FileTransferProtocol_Type.__name__ = "Integer32"
_FileTransferProtocol_Object = MibScalar
fileTransferProtocol = _FileTransferProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 15),
    _FileTransferProtocol_Type()
)
fileTransferProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fileTransferProtocol.setStatus("current")


class _SystemReset_Type(Integer32):
    """Custom type systemReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3),
          ("resetConfig", 4),
          ("resetMapping", 5),
          ("resetStandby", 6))
    )


_SystemReset_Type.__name__ = "Integer32"
_SystemReset_Object = MibScalar
systemReset = _SystemReset_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 13),
    _SystemReset_Type()
)
systemReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemReset.setStatus("current")
_SystemTiming_ObjectIdentity = ObjectIdentity
systemTiming = _SystemTiming_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 14)
)
_SystemDate_Type = DisplayString
_SystemDate_Object = MibScalar
systemDate = _SystemDate_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 14, 1),
    _SystemDate_Type()
)
systemDate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemDate.setStatus("current")
_SystemTime_Type = DisplayString
_SystemTime_Object = MibScalar
systemTime = _SystemTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 14, 2),
    _SystemTime_Type()
)
systemTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemTime.setStatus("current")


class _SystemTimeElapsed_Type(Integer32):
    """Custom type systemTimeElapsed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 899),
    )


_SystemTimeElapsed_Type.__name__ = "Integer32"
_SystemTimeElapsed_Object = MibScalar
systemTimeElapsed = _SystemTimeElapsed_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 14, 3),
    _SystemTimeElapsed_Type()
)
systemTimeElapsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemTimeElapsed.setStatus("current")
_SystemNtp_ObjectIdentity = ObjectIdentity
systemNtp = _SystemNtp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 14, 4)
)


class _SystemNtpMode_Type(Integer32):
    """Custom type systemNtpMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("broadcastClient", 3),
          ("disable", 2),
          ("unicastClient", 4))
    )


_SystemNtpMode_Type.__name__ = "Integer32"
_SystemNtpMode_Object = MibScalar
systemNtpMode = _SystemNtpMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 14, 4, 1),
    _SystemNtpMode_Type()
)
systemNtpMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemNtpMode.setStatus("current")
_SystemNtpGmt_Type = Integer32
_SystemNtpGmt_Object = MibScalar
systemNtpGmt = _SystemNtpGmt_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 14, 4, 2),
    _SystemNtpGmt_Type()
)
systemNtpGmt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemNtpGmt.setStatus("current")
_SystemNtpServerAddressType_Type = InetAddressType
_SystemNtpServerAddressType_Object = MibScalar
systemNtpServerAddressType = _SystemNtpServerAddressType_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 14, 4, 3),
    _SystemNtpServerAddressType_Type()
)
systemNtpServerAddressType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemNtpServerAddressType.setStatus("current")
_SystemNtpServerAddress_Type = InetAddress
_SystemNtpServerAddress_Object = MibScalar
systemNtpServerAddress = _SystemNtpServerAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 14, 4, 4),
    _SystemNtpServerAddress_Type()
)
systemNtpServerAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemNtpServerAddress.setStatus("current")
_SystemNtpUpdateInterval_Type = Unsigned32
_SystemNtpUpdateInterval_Object = MibScalar
systemNtpUpdateInterval = _SystemNtpUpdateInterval_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 14, 4, 5),
    _SystemNtpUpdateInterval_Type()
)
systemNtpUpdateInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemNtpUpdateInterval.setStatus("current")


class _SystemNtpCmd_Type(Integer32):
    """Custom type systemNtpCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("sendUpdateRequest", 3))
    )


_SystemNtpCmd_Type.__name__ = "Integer32"
_SystemNtpCmd_Object = MibScalar
systemNtpCmd = _SystemNtpCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 14, 4, 6),
    _SystemNtpCmd_Type()
)
systemNtpCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemNtpCmd.setStatus("current")
_SchedXTable_Object = MibTable
schedXTable = _SchedXTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 14, 5)
)
if mibBuilder.loadTexts:
    schedXTable.setStatus("current")
_SchedXEntry_Object = MibTableRow
schedXEntry = _SchedXEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 14, 5, 1)
)
if mibBuilder.loadTexts:
    schedXEntry.setStatus("current")
_SchedYear_Type = Unsigned32
_SchedYear_Object = MibTableColumn
schedYear = _SchedYear_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 14, 5, 1, 1),
    _SchedYear_Type()
)
schedYear.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    schedYear.setStatus("current")


class _SchedWeekInMonth_Type(Integer32):
    """Custom type schedWeekInMonth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("first", 1),
          ("fourth", 4),
          ("last", 5),
          ("second", 2),
          ("third", 3))
    )


_SchedWeekInMonth_Type.__name__ = "Integer32"
_SchedWeekInMonth_Object = MibTableColumn
schedWeekInMonth = _SchedWeekInMonth_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 14, 5, 1, 2),
    _SchedWeekInMonth_Type()
)
schedWeekInMonth.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    schedWeekInMonth.setStatus("current")
_SchedParam_Type = Integer32
_SchedParam_Object = MibTableColumn
schedParam = _SchedParam_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 14, 5, 1, 3),
    _SchedParam_Type()
)
schedParam.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    schedParam.setStatus("current")
_SystemPort_ObjectIdentity = ObjectIdentity
systemPort = _SystemPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15)
)
_PhysicalConnectorTable_Object = MibTable
physicalConnectorTable = _PhysicalConnectorTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 1)
)
if mibBuilder.loadTexts:
    physicalConnectorTable.setStatus("current")
_PhysicalConnectorEntry_Object = MibTableRow
physicalConnectorEntry = _PhysicalConnectorEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 1, 1)
)
physicalConnectorEntry.setIndexNames(
    (0, "RAD-MIB", "portIdx"),
)
if mibBuilder.loadTexts:
    physicalConnectorEntry.setStatus("current")
_PortIdx_Type = Integer32
_PortIdx_Object = MibTableColumn
portIdx = _PortIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 1, 1, 1),
    _PortIdx_Type()
)
portIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portIdx.setStatus("current")


class _PhysicalConnector_Type(Integer32):
    """Custom type physicalConnector based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              63,
              64,
              65,
              66,
              67,
              68,
              69,
              70,
              71,
              72,
              73,
              74,
              75,
              255)
        )
    )
    namedValues = NamedValues(
        *(("aui", 7),
          ("block4W", 41),
          ("bnc", 5),
          ("crossUtp", 9),
          ("db15", 18),
          ("db25", 17),
          ("db25Balanced", 39),
          ("db26", 75),
          ("db44", 66),
          ("db62", 67),
          ("db9", 21),
          ("eth4381", 32),
          ("ethBnc", 30),
          ("fc", 27),
          ("fcLH", 56),
          ("g703", 12),
          ("g703E1", 22),
          ("g703E1-LTU", 23),
          ("irEth10s100", 53),
          ("irEthQBnc", 47),
          ("irEthQN", 59),
          ("irEthQRj45", 43),
          ("iripBnc", 44),
          ("iripRj45", 42),
          ("lc", 51),
          ("lcLH", 63),
          ("miniUsb5", 74),
          ("mtrj", 50),
          ("none", 255),
          ("other", 1),
          ("rj11", 49),
          ("rj45", 10),
          ("rj45ethernet", 19),
          ("rs422", 8),
          ("rs530", 3),
          ("rs530WA", 45),
          ("sc", 24),
          ("scLH", 61),
          ("scsi26", 31),
          ("scsi40", 69),
          ("scsi50", 34),
          ("scsi68", 54),
          ("sf1", 36),
          ("sf1NineRow", 70),
          ("sf2", 38),
          ("sf2NineRow", 71),
          ("sf3", 55),
          ("sf3NineRow", 72),
          ("sfpIn", 64),
          ("sfpOut", 65),
          ("smartSerial26", 73),
          ("st", 25),
          ("stLH", 62),
          ("stl", 26),
          ("tb5w", 28),
          ("telco50", 57),
          ("telco64", 58),
          ("termBlock3AndRj45", 13),
          ("termBlock5AndRj45", 20),
          ("termBlock6AndRj45", 29),
          ("terminalBlock2", 52),
          ("terminalBlock3", 14),
          ("terminalBlock4", 37),
          ("terminalBlock5", 15),
          ("terminalBlock6", 60),
          ("terminalBlock7", 16),
          ("twoBnc", 33),
          ("twoMiniBnc", 35),
          ("utp", 6),
          ("v24", 11),
          ("v24Db9", 68),
          ("v35", 2),
          ("v35Db25", 48),
          ("v35WA", 46),
          ("v36", 40),
          ("x21", 4))
    )


_PhysicalConnector_Type.__name__ = "Integer32"
_PhysicalConnector_Object = MibTableColumn
physicalConnector = _PhysicalConnector_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 1, 1, 2),
    _PhysicalConnector_Type()
)
physicalConnector.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    physicalConnector.setStatus("current")


class _PortOptWaveLength_Type(Integer32):
    """Custom type portOptWaveLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("nm1310", 3),
          ("nm1310Laser", 4),
          ("nm1470Laser", 6),
          ("nm1490Laser", 7),
          ("nm1510Laser", 8),
          ("nm1530Laser", 9),
          ("nm1550Laser", 5),
          ("nm1570Laser", 10),
          ("nm1590Laser", 11),
          ("nm1610Laser", 12),
          ("nm850", 2),
          ("notApplicable", 1))
    )


_PortOptWaveLength_Type.__name__ = "Integer32"
_PortOptWaveLength_Object = MibTableColumn
portOptWaveLength = _PortOptWaveLength_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 1, 1, 3),
    _PortOptWaveLength_Type()
)
portOptWaveLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portOptWaveLength.setStatus("current")


class _PortOptMode_Type(Integer32):
    """Custom type portOptMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("multiMode", 3),
          ("notApplicable", 1),
          ("singleMode", 2))
    )


_PortOptMode_Type.__name__ = "Integer32"
_PortOptMode_Object = MibTableColumn
portOptMode = _PortOptMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 1, 1, 4),
    _PortOptMode_Type()
)
portOptMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portOptMode.setStatus("current")


class _PortBalance_Type(Integer32):
    """Custom type portBalance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("balanced", 3),
          ("notApplicable", 1),
          ("unbalanced", 2))
    )


_PortBalance_Type.__name__ = "Integer32"
_PortBalance_Object = MibTableColumn
portBalance = _PortBalance_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 1, 1, 5),
    _PortBalance_Type()
)
portBalance.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portBalance.setStatus("current")


class _PortDdmSupport_Type(Integer32):
    """Custom type portDdmSupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PortDdmSupport_Type.__name__ = "Integer32"
_PortDdmSupport_Object = MibTableColumn
portDdmSupport = _PortDdmSupport_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 1, 1, 6),
    _PortDdmSupport_Type()
)
portDdmSupport.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portDdmSupport.setStatus("current")
_PortMfgName_Type = SnmpAdminString
_PortMfgName_Object = MibTableColumn
portMfgName = _PortMfgName_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 1, 1, 7),
    _PortMfgName_Type()
)
portMfgName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portMfgName.setStatus("current")
_PortTypicalMaxRange_Type = Unsigned32
_PortTypicalMaxRange_Object = MibTableColumn
portTypicalMaxRange = _PortTypicalMaxRange_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 1, 1, 8),
    _PortTypicalMaxRange_Type()
)
portTypicalMaxRange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portTypicalMaxRange.setStatus("current")
_PhysicalConnectorString_Type = SnmpAdminString
_PhysicalConnectorString_Object = MibTableColumn
physicalConnectorString = _PhysicalConnectorString_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 1, 1, 9),
    _PhysicalConnectorString_Type()
)
physicalConnectorString.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    physicalConnectorString.setStatus("current")
_PortVendorPartNo_Type = SnmpAdminString
_PortVendorPartNo_Object = MibTableColumn
portVendorPartNo = _PortVendorPartNo_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 1, 1, 10),
    _PortVendorPartNo_Type()
)
portVendorPartNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    portVendorPartNo.setStatus("current")
_PrtSupervisory_ObjectIdentity = ObjectIdentity
prtSupervisory = _PrtSupervisory_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2)
)
_PrtSpTable_Object = MibTable
prtSpTable = _PrtSpTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1)
)
if mibBuilder.loadTexts:
    prtSpTable.setStatus("current")
_PrtSpEntry_Object = MibTableRow
prtSpEntry = _PrtSpEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1)
)
prtSpEntry.setIndexNames(
    (0, "RAD-MIB", "prtSupervisoryIndex"),
)
if mibBuilder.loadTexts:
    prtSpEntry.setStatus("current")
_PrtSupervisoryIndex_Type = Integer32
_PrtSupervisoryIndex_Object = MibTableColumn
prtSupervisoryIndex = _PrtSupervisoryIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 1),
    _PrtSupervisoryIndex_Type()
)
prtSupervisoryIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtSupervisoryIndex.setStatus("current")


class _PrtSupervisoryRate_Type(Integer32):
    """Custom type prtSupervisoryRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("s115200bps", 10),
          ("s1200bps", 3),
          ("s19200bps", 7),
          ("s2400bps", 4),
          ("s300bps", 2),
          ("s38400bps", 8),
          ("s4800bps", 5),
          ("s57600bps", 9),
          ("s9600bps", 6))
    )


_PrtSupervisoryRate_Type.__name__ = "Integer32"
_PrtSupervisoryRate_Object = MibTableColumn
prtSupervisoryRate = _PrtSupervisoryRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 2),
    _PrtSupervisoryRate_Type()
)
prtSupervisoryRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSupervisoryRate.setStatus("current")


class _PrtSupervisoryDataBits_Type(Integer32):
    """Custom type prtSupervisoryDataBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dataBits7", 1),
          ("dataBits8", 2))
    )


_PrtSupervisoryDataBits_Type.__name__ = "Integer32"
_PrtSupervisoryDataBits_Object = MibTableColumn
prtSupervisoryDataBits = _PrtSupervisoryDataBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 3),
    _PrtSupervisoryDataBits_Type()
)
prtSupervisoryDataBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSupervisoryDataBits.setStatus("current")


class _PrtSupervisoryParity_Type(Integer32):
    """Custom type prtSupervisoryParity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("even", 3),
          ("none", 1),
          ("odd", 2))
    )


_PrtSupervisoryParity_Type.__name__ = "Integer32"
_PrtSupervisoryParity_Object = MibTableColumn
prtSupervisoryParity = _PrtSupervisoryParity_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 4),
    _PrtSupervisoryParity_Type()
)
prtSupervisoryParity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSupervisoryParity.setStatus("current")


class _PrtSupervisoryStopBits_Type(Integer32):
    """Custom type prtSupervisoryStopBits based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("stopBits1", 2),
          ("stopBits1dot5", 3),
          ("stopBits2", 4))
    )


_PrtSupervisoryStopBits_Type.__name__ = "Integer32"
_PrtSupervisoryStopBits_Object = MibTableColumn
prtSupervisoryStopBits = _PrtSupervisoryStopBits_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 5),
    _PrtSupervisoryStopBits_Type()
)
prtSupervisoryStopBits.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSupervisoryStopBits.setStatus("current")


class _PrtSupervisoryUsage_Type(Integer32):
    """Custom type prtSupervisoryUsage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("dialOut", 8),
          ("muxPpp", 7),
          ("muxSlip", 6),
          ("nmsPpp", 5),
          ("nmsSlip", 4),
          ("noUse", 2),
          ("terminal", 3),
          ("unknown", 1))
    )


_PrtSupervisoryUsage_Type.__name__ = "Integer32"
_PrtSupervisoryUsage_Object = MibTableColumn
prtSupervisoryUsage = _PrtSupervisoryUsage_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 6),
    _PrtSupervisoryUsage_Type()
)
prtSupervisoryUsage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSupervisoryUsage.setStatus("current")


class _PrtSupervisoryInterface_Type(Integer32):
    """Custom type prtSupervisoryInterface based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dce", 2),
          ("dte", 3),
          ("notApplicable", 1))
    )


_PrtSupervisoryInterface_Type.__name__ = "Integer32"
_PrtSupervisoryInterface_Object = MibTableColumn
prtSupervisoryInterface = _PrtSupervisoryInterface_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 7),
    _PrtSupervisoryInterface_Type()
)
prtSupervisoryInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSupervisoryInterface.setStatus("current")


class _PrtSupervisoryCTS_Type(Integer32):
    """Custom type prtSupervisoryCTS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("dteIgnore", 5),
          ("dteWait", 4),
          ("notApplicable", 1),
          ("on", 2),
          ("rts", 3))
    )


_PrtSupervisoryCTS_Type.__name__ = "Integer32"
_PrtSupervisoryCTS_Object = MibTableColumn
prtSupervisoryCTS = _PrtSupervisoryCTS_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 8),
    _PrtSupervisoryCTS_Type()
)
prtSupervisoryCTS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSupervisoryCTS.setStatus("current")


class _PrtSupervisoryDcdDelay_Type(Integer32):
    """Custom type prtSupervisoryDcdDelay based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("d0", 2),
          ("d10", 3),
          ("d100", 5),
          ("d200", 6),
          ("d300", 7),
          ("d50", 4),
          ("notApplicable", 1))
    )


_PrtSupervisoryDcdDelay_Type.__name__ = "Integer32"
_PrtSupervisoryDcdDelay_Object = MibTableColumn
prtSupervisoryDcdDelay = _PrtSupervisoryDcdDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 9),
    _PrtSupervisoryDcdDelay_Type()
)
prtSupervisoryDcdDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSupervisoryDcdDelay.setStatus("current")


class _PrtSupervisoryDSR_Type(Integer32):
    """Custom type prtSupervisoryDSR based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dtr", 3),
          ("notApplicable", 1),
          ("on", 2))
    )


_PrtSupervisoryDSR_Type.__name__ = "Integer32"
_PrtSupervisoryDSR_Object = MibTableColumn
prtSupervisoryDSR = _PrtSupervisoryDSR_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 10),
    _PrtSupervisoryDSR_Type()
)
prtSupervisoryDSR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSupervisoryDSR.setStatus("current")


class _PrtSupervisoryRoutProtocol_Type(Integer32):
    """Custom type prtSupervisoryRoutProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 2),
          ("notApplicable", 1),
          ("proprietary", 3),
          ("rip2", 4))
    )


_PrtSupervisoryRoutProtocol_Type.__name__ = "Integer32"
_PrtSupervisoryRoutProtocol_Object = MibTableColumn
prtSupervisoryRoutProtocol = _PrtSupervisoryRoutProtocol_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 11),
    _PrtSupervisoryRoutProtocol_Type()
)
prtSupervisoryRoutProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtSupervisoryRoutProtocol.setStatus("current")
_PrtPerformance_ObjectIdentity = ObjectIdentity
prtPerformance = _PrtPerformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3)
)
_PrtPerfTable_Object = MibTable
prtPerfTable = _PrtPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1)
)
if mibBuilder.loadTexts:
    prtPerfTable.setStatus("current")
_PrtPerfEntry_Object = MibTableRow
prtPerfEntry = _PrtPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1)
)
prtPerfEntry.setIndexNames(
    (0, "RAD-MIB", "prtPerfIdx"),
    (0, "RAD-MIB", "prtPerfPeriodRef"),
)
if mibBuilder.loadTexts:
    prtPerfEntry.setStatus("current")
_PrtPerfIdx_Type = Integer32
_PrtPerfIdx_Object = MibTableColumn
prtPerfIdx = _PrtPerfIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 1),
    _PrtPerfIdx_Type()
)
prtPerfIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPerfIdx.setStatus("current")


class _PrtPerfPeriodRef_Type(Integer32):
    """Custom type prtPerfPeriodRef based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("currentPeriod", 1),
          ("lastPeriod", 2))
    )


_PrtPerfPeriodRef_Type.__name__ = "Integer32"
_PrtPerfPeriodRef_Object = MibTableColumn
prtPerfPeriodRef = _PrtPerfPeriodRef_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 2),
    _PrtPerfPeriodRef_Type()
)
prtPerfPeriodRef.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPerfPeriodRef.setStatus("current")
_PrtPerfElapsedTime_Type = Integer32
_PrtPerfElapsedTime_Object = MibTableColumn
prtPerfElapsedTime = _PrtPerfElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 3),
    _PrtPerfElapsedTime_Type()
)
prtPerfElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPerfElapsedTime.setStatus("current")
_PrtPerfUAS_Type = Integer32
_PrtPerfUAS_Object = MibTableColumn
prtPerfUAS = _PrtPerfUAS_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 4),
    _PrtPerfUAS_Type()
)
prtPerfUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPerfUAS.setStatus("current")
_PrtPerfES_Type = Integer32
_PrtPerfES_Object = MibTableColumn
prtPerfES = _PrtPerfES_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 5),
    _PrtPerfES_Type()
)
prtPerfES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPerfES.setStatus("current")
_PrtPerfSES_Type = Integer32
_PrtPerfSES_Object = MibTableColumn
prtPerfSES = _PrtPerfSES_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 6),
    _PrtPerfSES_Type()
)
prtPerfSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPerfSES.setStatus("current")
_PrtPerfBBE_Type = Integer32
_PrtPerfBBE_Object = MibTableColumn
prtPerfBBE = _PrtPerfBBE_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 7),
    _PrtPerfBBE_Type()
)
prtPerfBBE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPerfBBE.setStatus("current")
_PrtPerfBlocksPerSec_Type = Integer32
_PrtPerfBlocksPerSec_Object = MibTableColumn
prtPerfBlocksPerSec = _PrtPerfBlocksPerSec_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 8),
    _PrtPerfBlocksPerSec_Type()
)
prtPerfBlocksPerSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPerfBlocksPerSec.setStatus("current")
_PrtPerfTimeTag_Type = TimeTicks
_PrtPerfTimeTag_Object = MibTableColumn
prtPerfTimeTag = _PrtPerfTimeTag_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 9),
    _PrtPerfTimeTag_Type()
)
prtPerfTimeTag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtPerfTimeTag.setStatus("current")


class _PrtPerfSaveAndResetCmd_Type(Integer32):
    """Custom type prtPerfSaveAndResetCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtPerfSaveAndResetCmd_Type.__name__ = "Integer32"
_PrtPerfSaveAndResetCmd_Object = MibTableColumn
prtPerfSaveAndResetCmd = _PrtPerfSaveAndResetCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 10),
    _PrtPerfSaveAndResetCmd_Type()
)
prtPerfSaveAndResetCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPerfSaveAndResetCmd.setStatus("current")
_PrtTest_ObjectIdentity = ObjectIdentity
prtTest = _PrtTest_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4)
)
_PrtTestTable_Object = MibTable
prtTestTable = _PrtTestTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1)
)
if mibBuilder.loadTexts:
    prtTestTable.setStatus("current")
_PrtTestEntry_Object = MibTableRow
prtTestEntry = _PrtTestEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1)
)
prtTestEntry.setIndexNames(
    (0, "RAD-MIB", "prtTestIdx"),
)
if mibBuilder.loadTexts:
    prtTestEntry.setStatus("current")
_PrtTestIdx_Type = Integer32
_PrtTestIdx_Object = MibTableColumn
prtTestIdx = _PrtTestIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 1),
    _PrtTestIdx_Type()
)
prtTestIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtTestIdx.setStatus("current")
_PrtTestCmdAndStatus_Type = Integer32
_PrtTestCmdAndStatus_Object = MibTableColumn
prtTestCmdAndStatus = _PrtTestCmdAndStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 2),
    _PrtTestCmdAndStatus_Type()
)
prtTestCmdAndStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtTestCmdAndStatus.setStatus("current")
_PrtBertCounter_Type = Integer32
_PrtBertCounter_Object = MibTableColumn
prtBertCounter = _PrtBertCounter_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 3),
    _PrtBertCounter_Type()
)
prtBertCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtBertCounter.setStatus("current")


class _PrtTestInitiator_Type(Integer32):
    """Custom type prtTestInitiator based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dteRouter", 4),
          ("remoteUnit", 3),
          ("unknown", 1),
          ("user", 2))
    )


_PrtTestInitiator_Type.__name__ = "Integer32"
_PrtTestInitiator_Object = MibTableColumn
prtTestInitiator = _PrtTestInitiator_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 4),
    _PrtTestInitiator_Type()
)
prtTestInitiator.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtTestInitiator.setStatus("current")


class _PrtTestTimeout_Type(Integer32):
    """Custom type prtTestTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_PrtTestTimeout_Type.__name__ = "Integer32"
_PrtTestTimeout_Object = MibTableColumn
prtTestTimeout = _PrtTestTimeout_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 5),
    _PrtTestTimeout_Type()
)
prtTestTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtTestTimeout.setStatus("current")


class _PrtTestVctRxResult_Type(Integer32):
    """Custom type prtTestVctRxResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("coupleWithCrossPair", 7),
          ("fail", 2),
          ("normal", 3),
          ("notApplicable", 1),
          ("open", 4),
          ("short", 5),
          ("shortToCrossPair", 6))
    )


_PrtTestVctRxResult_Type.__name__ = "Integer32"
_PrtTestVctRxResult_Object = MibTableColumn
prtTestVctRxResult = _PrtTestVctRxResult_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 6),
    _PrtTestVctRxResult_Type()
)
prtTestVctRxResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtTestVctRxResult.setStatus("current")


class _PrtTestVctTxResult_Type(Integer32):
    """Custom type prtTestVctTxResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("coupleWithCrossPair", 7),
          ("fail", 2),
          ("normal", 3),
          ("notApplicable", 1),
          ("open", 4),
          ("short", 5),
          ("shortToCrossPair", 6))
    )


_PrtTestVctTxResult_Type.__name__ = "Integer32"
_PrtTestVctTxResult_Object = MibTableColumn
prtTestVctTxResult = _PrtTestVctTxResult_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 7),
    _PrtTestVctTxResult_Type()
)
prtTestVctTxResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtTestVctTxResult.setStatus("current")
_PrtTestVctRxDistance_Type = Integer32
_PrtTestVctRxDistance_Object = MibTableColumn
prtTestVctRxDistance = _PrtTestVctRxDistance_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 8),
    _PrtTestVctRxDistance_Type()
)
prtTestVctRxDistance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtTestVctRxDistance.setStatus("current")
_PrtTestVctTxDistance_Type = Integer32
_PrtTestVctTxDistance_Object = MibTableColumn
prtTestVctTxDistance = _PrtTestVctTxDistance_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 9),
    _PrtTestVctTxDistance_Type()
)
prtTestVctTxDistance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtTestVctTxDistance.setStatus("current")


class _PrtTestVctCmd_Type(Integer32):
    """Custom type prtTestVctCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtTestVctCmd_Type.__name__ = "Integer32"
_PrtTestVctCmd_Object = MibTableColumn
prtTestVctCmd = _PrtTestVctCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 10),
    _PrtTestVctCmd_Type()
)
prtTestVctCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtTestVctCmd.setStatus("current")
_PrtTestVctRxCrossPair_Type = Integer32
_PrtTestVctRxCrossPair_Object = MibTableColumn
prtTestVctRxCrossPair = _PrtTestVctRxCrossPair_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 11),
    _PrtTestVctRxCrossPair_Type()
)
prtTestVctRxCrossPair.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtTestVctRxCrossPair.setStatus("current")
_PrtTestVctTxCrossPair_Type = Integer32
_PrtTestVctTxCrossPair_Object = MibTableColumn
prtTestVctTxCrossPair = _PrtTestVctTxCrossPair_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 12),
    _PrtTestVctTxCrossPair_Type()
)
prtTestVctTxCrossPair.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtTestVctTxCrossPair.setStatus("current")
_PrtTestActivationDelay_Type = Unsigned32
_PrtTestActivationDelay_Object = MibTableColumn
prtTestActivationDelay = _PrtTestActivationDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 13),
    _PrtTestActivationDelay_Type()
)
prtTestActivationDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtTestActivationDelay.setStatus("current")


class _PrtTestMacSwapLoopDataMode_Type(Integer32):
    """Custom type prtTestMacSwapLoopDataMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("all", 1),
          ("allExceptMng", 2),
          ("specificVlan", 3))
    )


_PrtTestMacSwapLoopDataMode_Type.__name__ = "Integer32"
_PrtTestMacSwapLoopDataMode_Object = MibTableColumn
prtTestMacSwapLoopDataMode = _PrtTestMacSwapLoopDataMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 14),
    _PrtTestMacSwapLoopDataMode_Type()
)
prtTestMacSwapLoopDataMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtTestMacSwapLoopDataMode.setStatus("current")
_PrtTestMacSwapLoopVlanId_Type = Integer32
_PrtTestMacSwapLoopVlanId_Object = MibTableColumn
prtTestMacSwapLoopVlanId = _PrtTestMacSwapLoopVlanId_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 15),
    _PrtTestMacSwapLoopVlanId_Type()
)
prtTestMacSwapLoopVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtTestMacSwapLoopVlanId.setStatus("current")


class _PrtTestMacSwapLoopDirection_Type(Integer32):
    """Custom type prtTestMacSwapLoopDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("local", 2),
          ("remote", 3))
    )


_PrtTestMacSwapLoopDirection_Type.__name__ = "Integer32"
_PrtTestMacSwapLoopDirection_Object = MibTableColumn
prtTestMacSwapLoopDirection = _PrtTestMacSwapLoopDirection_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 16),
    _PrtTestMacSwapLoopDirection_Type()
)
prtTestMacSwapLoopDirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtTestMacSwapLoopDirection.setStatus("current")
_PrtTestMacSwapLoopDestAddr_Type = MacAddress
_PrtTestMacSwapLoopDestAddr_Object = MibTableColumn
prtTestMacSwapLoopDestAddr = _PrtTestMacSwapLoopDestAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 17),
    _PrtTestMacSwapLoopDestAddr_Type()
)
prtTestMacSwapLoopDestAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtTestMacSwapLoopDestAddr.setStatus("current")
_PrtTestMacSwapLoopSrcAddr_Type = MacAddress
_PrtTestMacSwapLoopSrcAddr_Object = MibTableColumn
prtTestMacSwapLoopSrcAddr = _PrtTestMacSwapLoopSrcAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 18),
    _PrtTestMacSwapLoopSrcAddr_Type()
)
prtTestMacSwapLoopSrcAddr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtTestMacSwapLoopSrcAddr.setStatus("current")
_PrtTestOamMinRoundTripDelay_Type = Unsigned32
_PrtTestOamMinRoundTripDelay_Object = MibTableColumn
prtTestOamMinRoundTripDelay = _PrtTestOamMinRoundTripDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 19),
    _PrtTestOamMinRoundTripDelay_Type()
)
prtTestOamMinRoundTripDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtTestOamMinRoundTripDelay.setStatus("current")
_PrtTestOamMaxRoundTripDelay_Type = Unsigned32
_PrtTestOamMaxRoundTripDelay_Object = MibTableColumn
prtTestOamMaxRoundTripDelay = _PrtTestOamMaxRoundTripDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 20),
    _PrtTestOamMaxRoundTripDelay_Type()
)
prtTestOamMaxRoundTripDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtTestOamMaxRoundTripDelay.setStatus("current")
_PrtTestOamAvgRoundTripDelay_Type = Unsigned32
_PrtTestOamAvgRoundTripDelay_Object = MibTableColumn
prtTestOamAvgRoundTripDelay = _PrtTestOamAvgRoundTripDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 21),
    _PrtTestOamAvgRoundTripDelay_Type()
)
prtTestOamAvgRoundTripDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtTestOamAvgRoundTripDelay.setStatus("current")
_PrtTestOamTxInterval_Type = Unsigned32
_PrtTestOamTxInterval_Object = MibTableColumn
prtTestOamTxInterval = _PrtTestOamTxInterval_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 22),
    _PrtTestOamTxInterval_Type()
)
prtTestOamTxInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtTestOamTxInterval.setStatus("current")
_PrtTestDestinationIpAddress_Type = IpAddress
_PrtTestDestinationIpAddress_Object = MibTableColumn
prtTestDestinationIpAddress = _PrtTestDestinationIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 23),
    _PrtTestDestinationIpAddress_Type()
)
prtTestDestinationIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtTestDestinationIpAddress.setStatus("current")
_PrtTestTTL_Type = Unsigned32
_PrtTestTTL_Object = MibTableColumn
prtTestTTL = _PrtTestTTL_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 24),
    _PrtTestTTL_Type()
)
prtTestTTL.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtTestTTL.setStatus("current")
_PrtTestBwProfile_Type = Unsigned32
_PrtTestBwProfile_Object = MibTableColumn
prtTestBwProfile = _PrtTestBwProfile_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 25),
    _PrtTestBwProfile_Type()
)
prtTestBwProfile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtTestBwProfile.setStatus("current")
_PrtParam_ObjectIdentity = ObjectIdentity
prtParam = _PrtParam_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5)
)
_PrtParamTable_Object = MibTable
prtParamTable = _PrtParamTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1)
)
if mibBuilder.loadTexts:
    prtParamTable.setStatus("current")
_PrtParamEntry_Object = MibTableRow
prtParamEntry = _PrtParamEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1)
)
prtParamEntry.setIndexNames(
    (0, "RAD-MIB", "prtParamIdx"),
)
if mibBuilder.loadTexts:
    prtParamEntry.setStatus("current")
_PrtParamIdx_Type = Integer32
_PrtParamIdx_Object = MibTableColumn
prtParamIdx = _PrtParamIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 1),
    _PrtParamIdx_Type()
)
prtParamIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtParamIdx.setStatus("current")
_PrtControlCnfg_Type = Integer32
_PrtControlCnfg_Object = MibTableColumn
prtControlCnfg = _PrtControlCnfg_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 2),
    _PrtControlCnfg_Type()
)
prtControlCnfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtControlCnfg.setStatus("current")


class _PrtParamClkSrc_Type(Integer32):
    """Custom type prtParamClkSrc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              255)
        )
    )
    namedValues = NamedValues(
        *(("adaptive", 4),
          ("fallback", 6),
          ("localTiming", 2),
          ("loopTiming", 1),
          ("master", 5),
          ("notApplicable", 255),
          ("station", 7),
          ("throughTiming", 3))
    )


_PrtParamClkSrc_Type.__name__ = "Integer32"
_PrtParamClkSrc_Object = MibTableColumn
prtParamClkSrc = _PrtParamClkSrc_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 3),
    _PrtParamClkSrc_Type()
)
prtParamClkSrc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtParamClkSrc.setStatus("current")


class _PrtParamPhantom_Type(Integer32):
    """Custom type prtParamPhantom based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_PrtParamPhantom_Type.__name__ = "Integer32"
_PrtParamPhantom_Object = MibTableColumn
prtParamPhantom = _PrtParamPhantom_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 4),
    _PrtParamPhantom_Type()
)
prtParamPhantom.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtParamPhantom.setStatus("current")


class _PrtParamResetStatsCmd_Type(Integer32):
    """Custom type prtParamResetStatsCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtParamResetStatsCmd_Type.__name__ = "Integer32"
_PrtParamResetStatsCmd_Object = MibTableColumn
prtParamResetStatsCmd = _PrtParamResetStatsCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 5),
    _PrtParamResetStatsCmd_Type()
)
prtParamResetStatsCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtParamResetStatsCmd.setStatus("current")
_PrtParamLastResetStatsTime_Type = TimeStamp
_PrtParamLastResetStatsTime_Object = MibTableColumn
prtParamLastResetStatsTime = _PrtParamLastResetStatsTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 6),
    _PrtParamLastResetStatsTime_Type()
)
prtParamLastResetStatsTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtParamLastResetStatsTime.setStatus("current")


class _PrtParamInterfaceType_Type(Integer32):
    """Custom type prtParamInterfaceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("adsl", 8),
          ("adsl2", 9),
          ("atmIma", 13),
          ("ds1", 14),
          ("e1", 2),
          ("efm", 12),
          ("fr", 4),
          ("hdlc", 5),
          ("hdsl2", 6),
          ("mPair", 11),
          ("notApplicable", 1),
          ("reAdsl2", 10),
          ("shdsl", 7),
          ("t1", 3))
    )


_PrtParamInterfaceType_Type.__name__ = "Integer32"
_PrtParamInterfaceType_Object = MibTableColumn
prtParamInterfaceType = _PrtParamInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 7),
    _PrtParamInterfaceType_Type()
)
prtParamInterfaceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtParamInterfaceType.setStatus("current")


class _PrtParamClearAlarm_Type(Integer32):
    """Custom type prtParamClearAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_PrtParamClearAlarm_Type.__name__ = "Integer32"
_PrtParamClearAlarm_Object = MibTableColumn
prtParamClearAlarm = _PrtParamClearAlarm_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 8),
    _PrtParamClearAlarm_Type()
)
prtParamClearAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtParamClearAlarm.setStatus("current")
_PrtParamLeds_Type = OctetString
_PrtParamLeds_Object = MibTableColumn
prtParamLeds = _PrtParamLeds_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 9),
    _PrtParamLeds_Type()
)
prtParamLeds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtParamLeds.setStatus("current")


class _PrtParamLineLength_Type(Integer32):
    """Custom type prtParamLineLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("long", 2),
          ("normal", 3),
          ("notApplicable", 1),
          ("short", 4))
    )


_PrtParamLineLength_Type.__name__ = "Integer32"
_PrtParamLineLength_Object = MibTableColumn
prtParamLineLength = _PrtParamLineLength_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 10),
    _PrtParamLineLength_Type()
)
prtParamLineLength.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtParamLineLength.setStatus("current")


class _PrtParamUsage_Type(Integer32):
    """Custom type prtParamUsage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("network", 3),
          ("notApplicable", 1),
          ("user", 2))
    )


_PrtParamUsage_Type.__name__ = "Integer32"
_PrtParamUsage_Object = MibTableColumn
prtParamUsage = _PrtParamUsage_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 11),
    _PrtParamUsage_Type()
)
prtParamUsage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtParamUsage.setStatus("current")


class _PrtParamMappingMode_Type(Integer32):
    """Custom type prtParamMappingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("adjacent", 5),
          ("auto", 3),
          ("manual", 4),
          ("notApplicable", 1),
          ("off", 2))
    )


_PrtParamMappingMode_Type.__name__ = "Integer32"
_PrtParamMappingMode_Object = MibTableColumn
prtParamMappingMode = _PrtParamMappingMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 12),
    _PrtParamMappingMode_Type()
)
prtParamMappingMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtParamMappingMode.setStatus("current")


class _PrtParamAlarmIndication_Type(Integer32):
    """Custom type prtParamAlarmIndication based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("off", 2),
          ("on", 3))
    )


_PrtParamAlarmIndication_Type.__name__ = "Integer32"
_PrtParamAlarmIndication_Object = MibTableColumn
prtParamAlarmIndication = _PrtParamAlarmIndication_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 13),
    _PrtParamAlarmIndication_Type()
)
prtParamAlarmIndication.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtParamAlarmIndication.setStatus("current")


class _PrtParamClkQualityLevel_Type(OctetString):
    """Custom type prtParamClkQualityLevel based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_PrtParamClkQualityLevel_Type.__name__ = "OctetString"
_PrtParamClkQualityLevel_Object = MibTableColumn
prtParamClkQualityLevel = _PrtParamClkQualityLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 14),
    _PrtParamClkQualityLevel_Type()
)
prtParamClkQualityLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtParamClkQualityLevel.setStatus("current")


class _PrtParamClkWaveShape_Type(Integer32):
    """Custom type prtParamClkWaveShape based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("sine", 2),
          ("square", 3))
    )


_PrtParamClkWaveShape_Type.__name__ = "Integer32"
_PrtParamClkWaveShape_Object = MibTableColumn
prtParamClkWaveShape = _PrtParamClkWaveShape_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 15),
    _PrtParamClkWaveShape_Type()
)
prtParamClkWaveShape.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtParamClkWaveShape.setStatus("current")


class _PrtParamStatus_Type(Integer32):
    """Custom type prtParamStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("signalLoss", 3),
          ("syncLoss", 4),
          ("up", 2))
    )


_PrtParamStatus_Type.__name__ = "Integer32"
_PrtParamStatus_Object = MibTableColumn
prtParamStatus = _PrtParamStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 16),
    _PrtParamStatus_Type()
)
prtParamStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtParamStatus.setStatus("current")
_PrtParamSignalLevel_Type = Integer32
_PrtParamSignalLevel_Object = MibTableColumn
prtParamSignalLevel = _PrtParamSignalLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 17),
    _PrtParamSignalLevel_Type()
)
prtParamSignalLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtParamSignalLevel.setStatus("current")


class _PrtParamClkUserQualityLevel_Type(OctetString):
    """Custom type prtParamClkUserQualityLevel based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_PrtParamClkUserQualityLevel_Type.__name__ = "OctetString"
_PrtParamClkUserQualityLevel_Object = MibTableColumn
prtParamClkUserQualityLevel = _PrtParamClkUserQualityLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 18),
    _PrtParamClkUserQualityLevel_Type()
)
prtParamClkUserQualityLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtParamClkUserQualityLevel.setStatus("current")
_PrtParamDataRate_Type = Unsigned32
_PrtParamDataRate_Object = MibTableColumn
prtParamDataRate = _PrtParamDataRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 19),
    _PrtParamDataRate_Type()
)
prtParamDataRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtParamDataRate.setStatus("current")


class _PrtParamLoopDetect_Type(Integer32):
    """Custom type prtParamLoopDetect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_PrtParamLoopDetect_Type.__name__ = "Integer32"
_PrtParamLoopDetect_Object = MibTableColumn
prtParamLoopDetect = _PrtParamLoopDetect_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 20),
    _PrtParamLoopDetect_Type()
)
prtParamLoopDetect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtParamLoopDetect.setStatus("current")
_PrtParamActUponLoopDetect_Type = OctetString
_PrtParamActUponLoopDetect_Object = MibTableColumn
prtParamActUponLoopDetect = _PrtParamActUponLoopDetect_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 21),
    _PrtParamActUponLoopDetect_Type()
)
prtParamActUponLoopDetect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtParamActUponLoopDetect.setStatus("current")


class _PrtParamPSNLayer_Type(Integer32):
    """Custom type prtParamPSNLayer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("l2", 2),
          ("l3", 3))
    )


_PrtParamPSNLayer_Type.__name__ = "Integer32"
_PrtParamPSNLayer_Object = MibTableColumn
prtParamPSNLayer = _PrtParamPSNLayer_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 22),
    _PrtParamPSNLayer_Type()
)
prtParamPSNLayer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtParamPSNLayer.setStatus("current")


class _PrtParamRxSsm_Type(Integer32):
    """Custom type prtParamRxSsm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("rx", 3))
    )


_PrtParamRxSsm_Type.__name__ = "Integer32"
_PrtParamRxSsm_Object = MibTableColumn
prtParamRxSsm = _PrtParamRxSsm_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 23),
    _PrtParamRxSsm_Type()
)
prtParamRxSsm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtParamRxSsm.setStatus("current")


class _PrtParamClkSsmRxSource_Type(Integer32):
    """Custom type prtParamClkSsmRxSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("sa4", 2),
          ("sa5", 3),
          ("sa6", 4),
          ("sa7", 5),
          ("sa8", 6))
    )


_PrtParamClkSsmRxSource_Type.__name__ = "Integer32"
_PrtParamClkSsmRxSource_Object = MibTableColumn
prtParamClkSsmRxSource = _PrtParamClkSsmRxSource_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 24),
    _PrtParamClkSsmRxSource_Type()
)
prtParamClkSsmRxSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtParamClkSsmRxSource.setStatus("current")
_PrtParamFarEndDevice_Type = Unsigned32
_PrtParamFarEndDevice_Object = MibTableColumn
prtParamFarEndDevice = _PrtParamFarEndDevice_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 26),
    _PrtParamFarEndDevice_Type()
)
prtParamFarEndDevice.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtParamFarEndDevice.setStatus("current")


class _PrtParamTxClk_Type(Integer32):
    """Custom type prtParamTxClk based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_PrtParamTxClk_Type.__name__ = "Integer32"
_PrtParamTxClk_Object = MibTableColumn
prtParamTxClk = _PrtParamTxClk_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 27),
    _PrtParamTxClk_Type()
)
prtParamTxClk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtParamTxClk.setStatus("current")
_PrtIP_ObjectIdentity = ObjectIdentity
prtIP = _PrtIP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6)
)
_PrtIpParamTable_Object = MibTable
prtIpParamTable = _PrtIpParamTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1)
)
if mibBuilder.loadTexts:
    prtIpParamTable.setStatus("current")
_PrtIpParamEntry_Object = MibTableRow
prtIpParamEntry = _PrtIpParamEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1)
)
prtIpParamEntry.setIndexNames(
    (0, "RAD-MIB", "prtIpParamConfigIdx"),
    (0, "RAD-MIB", "prtIpParamSlotIdx"),
    (0, "RAD-MIB", "prtIpParamIdx"),
)
if mibBuilder.loadTexts:
    prtIpParamEntry.setStatus("current")
_PrtIpParamConfigIdx_Type = Integer32
_PrtIpParamConfigIdx_Object = MibTableColumn
prtIpParamConfigIdx = _PrtIpParamConfigIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 1),
    _PrtIpParamConfigIdx_Type()
)
prtIpParamConfigIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIpParamConfigIdx.setStatus("current")
_PrtIpParamSlotIdx_Type = Integer32
_PrtIpParamSlotIdx_Object = MibTableColumn
prtIpParamSlotIdx = _PrtIpParamSlotIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 2),
    _PrtIpParamSlotIdx_Type()
)
prtIpParamSlotIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIpParamSlotIdx.setStatus("current")
_PrtIpParamIdx_Type = Integer32
_PrtIpParamIdx_Object = MibTableColumn
prtIpParamIdx = _PrtIpParamIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 3),
    _PrtIpParamIdx_Type()
)
prtIpParamIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIpParamIdx.setStatus("current")
_PrtIpParamHostIP_Type = IpAddress
_PrtIpParamHostIP_Object = MibTableColumn
prtIpParamHostIP = _PrtIpParamHostIP_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 4),
    _PrtIpParamHostIP_Type()
)
prtIpParamHostIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamHostIP.setStatus("current")
_PrtIpParamHostMask_Type = IpAddress
_PrtIpParamHostMask_Object = MibTableColumn
prtIpParamHostMask = _PrtIpParamHostMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 5),
    _PrtIpParamHostMask_Type()
)
prtIpParamHostMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamHostMask.setStatus("current")
_PrtIpParamDefaultGateway_Type = IpAddress
_PrtIpParamDefaultGateway_Object = MibTableColumn
prtIpParamDefaultGateway = _PrtIpParamDefaultGateway_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 6),
    _PrtIpParamDefaultGateway_Type()
)
prtIpParamDefaultGateway.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamDefaultGateway.setStatus("current")


class _PrtIpParamMediaMode_Type(Integer32):
    """Custom type prtIpParamMediaMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fullDuplex", 3),
          ("halfDuplex", 2),
          ("notApplicable", 1))
    )


_PrtIpParamMediaMode_Type.__name__ = "Integer32"
_PrtIpParamMediaMode_Object = MibTableColumn
prtIpParamMediaMode = _PrtIpParamMediaMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 7),
    _PrtIpParamMediaMode_Type()
)
prtIpParamMediaMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIpParamMediaMode.setStatus("current")


class _PrtIpParamMediaRate_Type(Integer32):
    """Custom type prtIpParamMediaRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("r100Mbps", 3),
          ("r10Mbps", 2))
    )


_PrtIpParamMediaRate_Type.__name__ = "Integer32"
_PrtIpParamMediaRate_Object = MibTableColumn
prtIpParamMediaRate = _PrtIpParamMediaRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 8),
    _PrtIpParamMediaRate_Type()
)
prtIpParamMediaRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIpParamMediaRate.setStatus("current")


class _PrtIpParamMngVlanSupport_Type(Integer32):
    """Custom type prtIpParamMngVlanSupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtIpParamMngVlanSupport_Type.__name__ = "Integer32"
_PrtIpParamMngVlanSupport_Object = MibTableColumn
prtIpParamMngVlanSupport = _PrtIpParamMngVlanSupport_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 9),
    _PrtIpParamMngVlanSupport_Type()
)
prtIpParamMngVlanSupport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamMngVlanSupport.setStatus("current")
_PrtIpParamMngVlanId_Type = Integer32
_PrtIpParamMngVlanId_Object = MibTableColumn
prtIpParamMngVlanId = _PrtIpParamMngVlanId_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 10),
    _PrtIpParamMngVlanId_Type()
)
prtIpParamMngVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamMngVlanId.setStatus("current")
_PrtIpParamMngVlanPriority_Type = Integer32
_PrtIpParamMngVlanPriority_Object = MibTableColumn
prtIpParamMngVlanPriority = _PrtIpParamMngVlanPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 11),
    _PrtIpParamMngVlanPriority_Type()
)
prtIpParamMngVlanPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamMngVlanPriority.setStatus("current")


class _PrtIpParamRingMode_Type(Integer32):
    """Custom type prtIpParamRingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_PrtIpParamRingMode_Type.__name__ = "Integer32"
_PrtIpParamRingMode_Object = MibTableColumn
prtIpParamRingMode = _PrtIpParamRingMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 12),
    _PrtIpParamRingMode_Type()
)
prtIpParamRingMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamRingMode.setStatus("current")


class _PrtIpParamProtIpEnable_Type(Integer32):
    """Custom type prtIpParamProtIpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_PrtIpParamProtIpEnable_Type.__name__ = "Integer32"
_PrtIpParamProtIpEnable_Object = MibTableColumn
prtIpParamProtIpEnable = _PrtIpParamProtIpEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 13),
    _PrtIpParamProtIpEnable_Type()
)
prtIpParamProtIpEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamProtIpEnable.setStatus("current")


class _PrtIpParamTrafficPriority_Type(Integer32):
    """Custom type prtIpParamTrafficPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("high", 3),
          ("low", 2),
          ("notApplicable", 1))
    )


_PrtIpParamTrafficPriority_Type.__name__ = "Integer32"
_PrtIpParamTrafficPriority_Object = MibTableColumn
prtIpParamTrafficPriority = _PrtIpParamTrafficPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 14),
    _PrtIpParamTrafficPriority_Type()
)
prtIpParamTrafficPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamTrafficPriority.setStatus("current")
_PrtIpParamRemoteIP_Type = IpAddress
_PrtIpParamRemoteIP_Object = MibTableColumn
prtIpParamRemoteIP = _PrtIpParamRemoteIP_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 15),
    _PrtIpParamRemoteIP_Type()
)
prtIpParamRemoteIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamRemoteIP.setStatus("current")


class _PrtIpParamMaxTxBandwidth_Type(Integer32):
    """Custom type prtIpParamMaxTxBandwidth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("e1", 3),
          ("full", 2),
          ("t1", 4))
    )


_PrtIpParamMaxTxBandwidth_Type.__name__ = "Integer32"
_PrtIpParamMaxTxBandwidth_Object = MibTableColumn
prtIpParamMaxTxBandwidth = _PrtIpParamMaxTxBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 16),
    _PrtIpParamMaxTxBandwidth_Type()
)
prtIpParamMaxTxBandwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamMaxTxBandwidth.setStatus("current")
_PrtIpParamTos_Type = Integer32
_PrtIpParamTos_Object = MibTableColumn
prtIpParamTos = _PrtIpParamTos_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 17),
    _PrtIpParamTos_Type()
)
prtIpParamTos.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamTos.setStatus("current")


class _PrtIpParamConnect_Type(Integer32):
    """Custom type prtIpParamConnect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtIpParamConnect_Type.__name__ = "Integer32"
_PrtIpParamConnect_Object = MibTableColumn
prtIpParamConnect = _PrtIpParamConnect_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 18),
    _PrtIpParamConnect_Type()
)
prtIpParamConnect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamConnect.setStatus("current")
_PrtIpParamAgingTime_Type = Integer32
_PrtIpParamAgingTime_Object = MibTableColumn
prtIpParamAgingTime = _PrtIpParamAgingTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 19),
    _PrtIpParamAgingTime_Type()
)
prtIpParamAgingTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamAgingTime.setStatus("current")


class _PrtIpParamEncapsulationProt_Type(Integer32):
    """Custom type prtIpParamEncapsulationProt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("tcp", 2),
          ("udp", 3))
    )


_PrtIpParamEncapsulationProt_Type.__name__ = "Integer32"
_PrtIpParamEncapsulationProt_Object = MibTableColumn
prtIpParamEncapsulationProt = _PrtIpParamEncapsulationProt_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 20),
    _PrtIpParamEncapsulationProt_Type()
)
prtIpParamEncapsulationProt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamEncapsulationProt.setStatus("current")
_PrtIpParamEncapProtPort_Type = Integer32
_PrtIpParamEncapProtPort_Object = MibTableColumn
prtIpParamEncapProtPort = _PrtIpParamEncapProtPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 21),
    _PrtIpParamEncapProtPort_Type()
)
prtIpParamEncapProtPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamEncapProtPort.setStatus("current")


class _PrtIpParamVlanSupport_Type(Integer32):
    """Custom type prtIpParamVlanSupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_PrtIpParamVlanSupport_Type.__name__ = "Integer32"
_PrtIpParamVlanSupport_Object = MibTableColumn
prtIpParamVlanSupport = _PrtIpParamVlanSupport_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 22),
    _PrtIpParamVlanSupport_Type()
)
prtIpParamVlanSupport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamVlanSupport.setStatus("current")
_PrtIpParamVlanId_Type = Integer32
_PrtIpParamVlanId_Object = MibTableColumn
prtIpParamVlanId = _PrtIpParamVlanId_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 23),
    _PrtIpParamVlanId_Type()
)
prtIpParamVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamVlanId.setStatus("current")
_PrtIpParamVlanPriority_Type = Integer32
_PrtIpParamVlanPriority_Object = MibTableColumn
prtIpParamVlanPriority = _PrtIpParamVlanPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 24),
    _PrtIpParamVlanPriority_Type()
)
prtIpParamVlanPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamVlanPriority.setStatus("current")
_PrtIpParamDoubleTagVlanId_Type = Integer32
_PrtIpParamDoubleTagVlanId_Object = MibTableColumn
prtIpParamDoubleTagVlanId = _PrtIpParamDoubleTagVlanId_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 25),
    _PrtIpParamDoubleTagVlanId_Type()
)
prtIpParamDoubleTagVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamDoubleTagVlanId.setStatus("current")
_PrtIpParamDoubleTagVlanPriority_Type = Integer32
_PrtIpParamDoubleTagVlanPriority_Object = MibTableColumn
prtIpParamDoubleTagVlanPriority = _PrtIpParamDoubleTagVlanPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 26),
    _PrtIpParamDoubleTagVlanPriority_Type()
)
prtIpParamDoubleTagVlanPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamDoubleTagVlanPriority.setStatus("current")


class _PrtIpParamVlanTagging_Type(Integer32):
    """Custom type prtIpParamVlanTagging based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("doubleTag", 4),
          ("doubleTagAndFallBack", 5),
          ("notApplicable", 1),
          ("tag", 3),
          ("unmodified", 2),
          ("untag", 6))
    )


_PrtIpParamVlanTagging_Type.__name__ = "Integer32"
_PrtIpParamVlanTagging_Object = MibTableColumn
prtIpParamVlanTagging = _PrtIpParamVlanTagging_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 27),
    _PrtIpParamVlanTagging_Type()
)
prtIpParamVlanTagging.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamVlanTagging.setStatus("current")
_PrtIpParamRateLimit_Type = Integer32
_PrtIpParamRateLimit_Object = MibTableColumn
prtIpParamRateLimit = _PrtIpParamRateLimit_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 28),
    _PrtIpParamRateLimit_Type()
)
prtIpParamRateLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamRateLimit.setStatus("current")
_PrtIpParamDefInterface_Type = Integer32
_PrtIpParamDefInterface_Object = MibTableColumn
prtIpParamDefInterface = _PrtIpParamDefInterface_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 29),
    _PrtIpParamDefInterface_Type()
)
prtIpParamDefInterface.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamDefInterface.setStatus("current")


class _PrtIpParamMng_Type(Integer32):
    """Custom type prtIpParamMng based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_PrtIpParamMng_Type.__name__ = "Integer32"
_PrtIpParamMng_Object = MibTableColumn
prtIpParamMng = _PrtIpParamMng_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 30),
    _PrtIpParamMng_Type()
)
prtIpParamMng.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamMng.setStatus("current")
_PrtIpParamFloodedRateLimit_Type = Integer32
_PrtIpParamFloodedRateLimit_Object = MibTableColumn
prtIpParamFloodedRateLimit = _PrtIpParamFloodedRateLimit_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 31),
    _PrtIpParamFloodedRateLimit_Type()
)
prtIpParamFloodedRateLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamFloodedRateLimit.setStatus("current")
_PrtIpParamBurstSize_Type = Unsigned32
_PrtIpParamBurstSize_Object = MibTableColumn
prtIpParamBurstSize = _PrtIpParamBurstSize_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 32),
    _PrtIpParamBurstSize_Type()
)
prtIpParamBurstSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamBurstSize.setStatus("current")


class _PrtIpParamLimitPacketType_Type(Integer32):
    """Custom type prtIpParamLimitPacketType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("all", 1),
          ("broadMultiFloodedUnicast", 2),
          ("broadcast", 4),
          ("broadcastMulticast", 3))
    )


_PrtIpParamLimitPacketType_Type.__name__ = "Integer32"
_PrtIpParamLimitPacketType_Object = MibTableColumn
prtIpParamLimitPacketType = _PrtIpParamLimitPacketType_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 33),
    _PrtIpParamLimitPacketType_Type()
)
prtIpParamLimitPacketType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamLimitPacketType.setStatus("current")
_PrtIpParamKeepAliveInterval_Type = Integer32
_PrtIpParamKeepAliveInterval_Object = MibTableColumn
prtIpParamKeepAliveInterval = _PrtIpParamKeepAliveInterval_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 34),
    _PrtIpParamKeepAliveInterval_Type()
)
prtIpParamKeepAliveInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamKeepAliveInterval.setStatus("current")
_PrtIpParamKeepAliveThresh_Type = Integer32
_PrtIpParamKeepAliveThresh_Object = MibTableColumn
prtIpParamKeepAliveThresh = _PrtIpParamKeepAliveThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 35),
    _PrtIpParamKeepAliveThresh_Type()
)
prtIpParamKeepAliveThresh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamKeepAliveThresh.setStatus("current")
_PrtIpParamP2pKeepAliveVlanId_Type = Integer32
_PrtIpParamP2pKeepAliveVlanId_Object = MibTableColumn
prtIpParamP2pKeepAliveVlanId = _PrtIpParamP2pKeepAliveVlanId_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 36),
    _PrtIpParamP2pKeepAliveVlanId_Type()
)
prtIpParamP2pKeepAliveVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamP2pKeepAliveVlanId.setStatus("current")
_PrtIpParamP2pKeepAliveVlanPrio_Type = Integer32
_PrtIpParamP2pKeepAliveVlanPrio_Object = MibTableColumn
prtIpParamP2pKeepAliveVlanPrio = _PrtIpParamP2pKeepAliveVlanPrio_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 37),
    _PrtIpParamP2pKeepAliveVlanPrio_Type()
)
prtIpParamP2pKeepAliveVlanPrio.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtIpParamP2pKeepAliveVlanPrio.setStatus("current")
_PrtIpParamRingAdjacentMacAddr_Type = MacAddress
_PrtIpParamRingAdjacentMacAddr_Object = MibTableColumn
prtIpParamRingAdjacentMacAddr = _PrtIpParamRingAdjacentMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 6, 1, 1, 38),
    _PrtIpParamRingAdjacentMacAddr_Type()
)
prtIpParamRingAdjacentMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    prtIpParamRingAdjacentMacAddr.setStatus("current")
_PrtClkSrc_ObjectIdentity = ObjectIdentity
prtClkSrc = _PrtClkSrc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 7)
)
_PrtClkSrcTable_Object = MibTable
prtClkSrcTable = _PrtClkSrcTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 7, 1)
)
if mibBuilder.loadTexts:
    prtClkSrcTable.setStatus("current")
_PrtClkSrcEntry_Object = MibTableRow
prtClkSrcEntry = _PrtClkSrcEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 7, 1, 1)
)
prtClkSrcEntry.setIndexNames(
    (0, "RAD-MIB", "prtClkSrcCnfgIdx"),
    (0, "RAD-MIB", "prtClkSrcPrtIdx"),
    (0, "RAD-MIB", "prtClkSrcIdx"),
)
if mibBuilder.loadTexts:
    prtClkSrcEntry.setStatus("current")


class _PrtClkSrcCnfgIdx_Type(Integer32):
    """Custom type prtClkSrcCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtClkSrcCnfgIdx_Type.__name__ = "Integer32"
_PrtClkSrcCnfgIdx_Object = MibTableColumn
prtClkSrcCnfgIdx = _PrtClkSrcCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 7, 1, 1, 1),
    _PrtClkSrcCnfgIdx_Type()
)
prtClkSrcCnfgIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    prtClkSrcCnfgIdx.setStatus("current")
_PrtClkSrcPrtIdx_Type = Integer32
_PrtClkSrcPrtIdx_Object = MibTableColumn
prtClkSrcPrtIdx = _PrtClkSrcPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 7, 1, 1, 2),
    _PrtClkSrcPrtIdx_Type()
)
prtClkSrcPrtIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    prtClkSrcPrtIdx.setStatus("current")


class _PrtClkSrcIdx_Type(Integer32):
    """Custom type prtClkSrcIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fallback", 2),
          ("master", 1))
    )


_PrtClkSrcIdx_Type.__name__ = "Integer32"
_PrtClkSrcIdx_Object = MibTableColumn
prtClkSrcIdx = _PrtClkSrcIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 7, 1, 1, 3),
    _PrtClkSrcIdx_Type()
)
prtClkSrcIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    prtClkSrcIdx.setStatus("current")


class _PrtClkSrcMode_Type(Integer32):
    """Custom type prtClkSrcMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              255)
        )
    )
    namedValues = NamedValues(
        *(("internal", 2),
          ("notApplicable", 255),
          ("rxClk", 3))
    )


_PrtClkSrcMode_Type.__name__ = "Integer32"
_PrtClkSrcMode_Object = MibTableColumn
prtClkSrcMode = _PrtClkSrcMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 7, 1, 1, 4),
    _PrtClkSrcMode_Type()
)
prtClkSrcMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtClkSrcMode.setStatus("current")
_PrtClkSrcPrt_Type = Integer32
_PrtClkSrcPrt_Object = MibTableColumn
prtClkSrcPrt = _PrtClkSrcPrt_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 7, 1, 1, 5),
    _PrtClkSrcPrt_Type()
)
prtClkSrcPrt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtClkSrcPrt.setStatus("current")
_OpticalPort_ObjectIdentity = ObjectIdentity
opticalPort = _OpticalPort_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 8)
)
_OptPrtMonitorTable_Object = MibTable
optPrtMonitorTable = _OptPrtMonitorTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 8, 1)
)
if mibBuilder.loadTexts:
    optPrtMonitorTable.setStatus("current")
_OptPrtMonitorEntry_Object = MibTableRow
optPrtMonitorEntry = _OptPrtMonitorEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 8, 1, 1)
)
optPrtMonitorEntry.setIndexNames(
    (0, "RAD-MIB", "optPrtMonitorPrtIdx"),
    (0, "RAD-MIB", "optPrtMonitorSample"),
)
if mibBuilder.loadTexts:
    optPrtMonitorEntry.setStatus("current")
_OptPrtMonitorPrtIdx_Type = Integer32
_OptPrtMonitorPrtIdx_Object = MibTableColumn
optPrtMonitorPrtIdx = _OptPrtMonitorPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 8, 1, 1, 1),
    _OptPrtMonitorPrtIdx_Type()
)
optPrtMonitorPrtIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    optPrtMonitorPrtIdx.setStatus("current")


class _OptPrtMonitorSample_Type(Integer32):
    """Custom type optPrtMonitorSample based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("actual", 1),
          ("maximum", 3),
          ("minimum", 2))
    )


_OptPrtMonitorSample_Type.__name__ = "Integer32"
_OptPrtMonitorSample_Object = MibTableColumn
optPrtMonitorSample = _OptPrtMonitorSample_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 8, 1, 1, 2),
    _OptPrtMonitorSample_Type()
)
optPrtMonitorSample.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    optPrtMonitorSample.setStatus("current")
_OptPrtMonitorTxPower_Type = Integer32
_OptPrtMonitorTxPower_Object = MibTableColumn
optPrtMonitorTxPower = _OptPrtMonitorTxPower_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 8, 1, 1, 3),
    _OptPrtMonitorTxPower_Type()
)
optPrtMonitorTxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    optPrtMonitorTxPower.setStatus("current")
_OptPrtMonitorLaserBias_Type = Integer32
_OptPrtMonitorLaserBias_Object = MibTableColumn
optPrtMonitorLaserBias = _OptPrtMonitorLaserBias_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 8, 1, 1, 4),
    _OptPrtMonitorLaserBias_Type()
)
optPrtMonitorLaserBias.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    optPrtMonitorLaserBias.setStatus("current")
_OptPrtMonitorLaserTemp_Type = Integer32
_OptPrtMonitorLaserTemp_Object = MibTableColumn
optPrtMonitorLaserTemp = _OptPrtMonitorLaserTemp_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 8, 1, 1, 5),
    _OptPrtMonitorLaserTemp_Type()
)
optPrtMonitorLaserTemp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    optPrtMonitorLaserTemp.setStatus("current")
_OptPrtMonitorRxPower_Type = Integer32
_OptPrtMonitorRxPower_Object = MibTableColumn
optPrtMonitorRxPower = _OptPrtMonitorRxPower_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 8, 1, 1, 6),
    _OptPrtMonitorRxPower_Type()
)
optPrtMonitorRxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    optPrtMonitorRxPower.setStatus("current")
_OptPrtMonitorSupplyVoltage_Type = Integer32
_OptPrtMonitorSupplyVoltage_Object = MibTableColumn
optPrtMonitorSupplyVoltage = _OptPrtMonitorSupplyVoltage_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 8, 1, 1, 7),
    _OptPrtMonitorSupplyVoltage_Type()
)
optPrtMonitorSupplyVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    optPrtMonitorSupplyVoltage.setStatus("current")
_OptPrtCnfgTable_Object = MibTable
optPrtCnfgTable = _OptPrtCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 8, 2)
)
if mibBuilder.loadTexts:
    optPrtCnfgTable.setStatus("current")
_OptPrtCnfgEntry_Object = MibTableRow
optPrtCnfgEntry = _OptPrtCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 8, 2, 1)
)
optPrtCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "optPrtCnfgIdx"),
    (0, "RAD-MIB", "optPrtCnfgPrtIdx"),
)
if mibBuilder.loadTexts:
    optPrtCnfgEntry.setStatus("current")
_OptPrtCnfgIdx_Type = Unsigned32
_OptPrtCnfgIdx_Object = MibTableColumn
optPrtCnfgIdx = _OptPrtCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 8, 2, 1, 1),
    _OptPrtCnfgIdx_Type()
)
optPrtCnfgIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    optPrtCnfgIdx.setStatus("current")
_OptPrtCnfgPrtIdx_Type = Unsigned32
_OptPrtCnfgPrtIdx_Object = MibTableColumn
optPrtCnfgPrtIdx = _OptPrtCnfgPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 8, 2, 1, 2),
    _OptPrtCnfgPrtIdx_Type()
)
optPrtCnfgPrtIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    optPrtCnfgPrtIdx.setStatus("current")


class _OptPrtCnfgALS_Type(Integer32):
    """Custom type optPrtCnfgALS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_OptPrtCnfgALS_Type.__name__ = "Integer32"
_OptPrtCnfgALS_Object = MibTableColumn
optPrtCnfgALS = _OptPrtCnfgALS_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 8, 2, 1, 3),
    _OptPrtCnfgALS_Type()
)
optPrtCnfgALS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    optPrtCnfgALS.setStatus("current")


class _SystemResetAllStatsCmd_Type(Integer32):
    """Custom type systemResetAllStatsCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SystemResetAllStatsCmd_Type.__name__ = "Integer32"
_SystemResetAllStatsCmd_Object = MibScalar
systemResetAllStatsCmd = _SystemResetAllStatsCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 16),
    _SystemResetAllStatsCmd_Type()
)
systemResetAllStatsCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemResetAllStatsCmd.setStatus("current")


class _SystemClearTablesCmd_Type(Integer32):
    """Custom type systemClearTablesCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("tempCnfgTables", 3))
    )


_SystemClearTablesCmd_Type.__name__ = "Integer32"
_SystemClearTablesCmd_Object = MibScalar
systemClearTablesCmd = _SystemClearTablesCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 17),
    _SystemClearTablesCmd_Type()
)
systemClearTablesCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemClearTablesCmd.setStatus("current")
_SystemParameter_Type = Integer32
_SystemParameter_Object = MibScalar
systemParameter = _SystemParameter_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 18),
    _SystemParameter_Type()
)
systemParameter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemParameter.setStatus("current")
_AgnGlobalAlarmMask_Type = OctetString
_AgnGlobalAlarmMask_Object = MibScalar
agnGlobalAlarmMask = _AgnGlobalAlarmMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 19),
    _AgnGlobalAlarmMask_Type()
)
agnGlobalAlarmMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnGlobalAlarmMask.setStatus("current")


class _AlarmSeverity_Type(Integer32):
    """Custom type alarmSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 7),
          ("event", 3),
          ("major", 5),
          ("minor", 4),
          ("warning", 6))
    )


_AlarmSeverity_Type.__name__ = "Integer32"
_AlarmSeverity_Object = MibScalar
alarmSeverity = _AlarmSeverity_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 20),
    _AlarmSeverity_Type()
)
alarmSeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmSeverity.setStatus("current")


class _AlarmState_Type(Integer32):
    """Custom type alarmState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AlarmState_Type.__name__ = "Integer32"
_AlarmState_Object = MibScalar
alarmState = _AlarmState_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 21),
    _AlarmState_Type()
)
alarmState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmState.setStatus("current")


class _AgnTestStatus_Type(Integer32):
    """Custom type agnTestStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AgnTestStatus_Type.__name__ = "Integer32"
_AgnTestStatus_Object = MibScalar
agnTestStatus = _AgnTestStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 22),
    _AgnTestStatus_Type()
)
agnTestStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnTestStatus.setStatus("current")


class _SystemSaveAndResetAllStatsCmd_Type(Integer32):
    """Custom type systemSaveAndResetAllStatsCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SystemSaveAndResetAllStatsCmd_Type.__name__ = "Integer32"
_SystemSaveAndResetAllStatsCmd_Object = MibScalar
systemSaveAndResetAllStatsCmd = _SystemSaveAndResetAllStatsCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 23),
    _SystemSaveAndResetAllStatsCmd_Type()
)
systemSaveAndResetAllStatsCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemSaveAndResetAllStatsCmd.setStatus("current")
_SystemDefaultGateway_Type = IpAddress
_SystemDefaultGateway_Object = MibScalar
systemDefaultGateway = _SystemDefaultGateway_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 24),
    _SystemDefaultGateway_Type()
)
systemDefaultGateway.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemDefaultGateway.setStatus("current")
_SystemPsTable_Object = MibTable
systemPsTable = _SystemPsTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 25)
)
if mibBuilder.loadTexts:
    systemPsTable.setStatus("current")
_SystemPsEntry_Object = MibTableRow
systemPsEntry = _SystemPsEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 25, 1)
)
systemPsEntry.setIndexNames(
    (0, "RAD-MIB", "systemPsIndex1"),
    (0, "RAD-MIB", "systemPsIndex2"),
)
if mibBuilder.loadTexts:
    systemPsEntry.setStatus("current")
_SystemPsIndex1_Type = Integer32
_SystemPsIndex1_Object = MibTableColumn
systemPsIndex1 = _SystemPsIndex1_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 25, 1, 1),
    _SystemPsIndex1_Type()
)
systemPsIndex1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemPsIndex1.setStatus("current")
_SystemPsIndex2_Type = Integer32
_SystemPsIndex2_Object = MibTableColumn
systemPsIndex2 = _SystemPsIndex2_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 25, 1, 2),
    _SystemPsIndex2_Type()
)
systemPsIndex2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemPsIndex2.setStatus("current")


class _SystemPsType_Type(Integer32):
    """Custom type systemPsType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("ac", 2),
          ("acDc", 4),
          ("acPF", 5),
          ("dc", 3),
          ("dcPF", 6),
          ("none", 1))
    )


_SystemPsType_Type.__name__ = "Integer32"
_SystemPsType_Object = MibTableColumn
systemPsType = _SystemPsType_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 25, 1, 3),
    _SystemPsType_Type()
)
systemPsType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemPsType.setStatus("current")


class _SystemPsStatus_Type(Integer32):
    """Custom type systemPsStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("degraded", 4),
          ("failed", 2),
          ("notApplicable", 1),
          ("ok", 3))
    )


_SystemPsStatus_Type.__name__ = "Integer32"
_SystemPsStatus_Object = MibTableColumn
systemPsStatus = _SystemPsStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 25, 1, 4),
    _SystemPsStatus_Type()
)
systemPsStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemPsStatus.setStatus("current")


class _SystemPsHotSwap_Type(Integer32):
    """Custom type systemPsHotSwap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fixed", 2),
          ("hotSwap", 3),
          ("notApplicable", 1))
    )


_SystemPsHotSwap_Type.__name__ = "Integer32"
_SystemPsHotSwap_Object = MibTableColumn
systemPsHotSwap = _SystemPsHotSwap_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 25, 1, 5),
    _SystemPsHotSwap_Type()
)
systemPsHotSwap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemPsHotSwap.setStatus("current")
_AgnFans_Type = OctetString
_AgnFans_Object = MibScalar
agnFans = _AgnFans_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 26),
    _AgnFans_Type()
)
agnFans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnFans.setStatus("current")
_AgnSendTrapParameter_Type = Integer32
_AgnSendTrapParameter_Object = MibScalar
agnSendTrapParameter = _AgnSendTrapParameter_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 27),
    _AgnSendTrapParameter_Type()
)
agnSendTrapParameter.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnSendTrapParameter.setStatus("current")
_AgnSensorsStatus_Type = OctetString
_AgnSensorsStatus_Object = MibScalar
agnSensorsStatus = _AgnSensorsStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 28),
    _AgnSensorsStatus_Type()
)
agnSensorsStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnSensorsStatus.setStatus("current")


class _AgnStationClockCard_Type(Integer32):
    """Custom type agnStationClockCard based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("notExist", 2),
          ("notValid", 3),
          ("ok", 4))
    )


_AgnStationClockCard_Type.__name__ = "Integer32"
_AgnStationClockCard_Object = MibScalar
agnStationClockCard = _AgnStationClockCard_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 29),
    _AgnStationClockCard_Type()
)
agnStationClockCard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnStationClockCard.setStatus("current")


class _XcIndexNext_Type(Integer32):
    """Custom type xcIndexNext based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_XcIndexNext_Type.__name__ = "Integer32"
_XcIndexNext_Object = MibScalar
xcIndexNext = _XcIndexNext_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 30),
    _XcIndexNext_Type()
)
xcIndexNext.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcIndexNext.setStatus("current")
_XcTable_Object = MibTable
xcTable = _XcTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 31)
)
if mibBuilder.loadTexts:
    xcTable.setStatus("current")
_XcEntry_Object = MibTableRow
xcEntry = _XcEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 31, 1)
)
xcEntry.setIndexNames(
    (0, "RAD-MIB", "xcIndex"),
    (0, "RAD-MIB", "xcIfIndex1"),
    (0, "RAD-MIB", "xcVpi"),
    (0, "RAD-MIB", "xcVci"),
    (0, "RAD-MIB", "xcIfIndex2"),
)
if mibBuilder.loadTexts:
    xcEntry.setStatus("current")
_XcIndex_Type = Integer32
_XcIndex_Object = MibTableColumn
xcIndex = _XcIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 31, 1, 1),
    _XcIndex_Type()
)
xcIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcIndex.setStatus("current")
_XcIfIndex1_Type = Integer32
_XcIfIndex1_Object = MibTableColumn
xcIfIndex1 = _XcIfIndex1_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 31, 1, 2),
    _XcIfIndex1_Type()
)
xcIfIndex1.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcIfIndex1.setStatus("current")
_XcVpi_Type = Integer32
_XcVpi_Object = MibTableColumn
xcVpi = _XcVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 31, 1, 3),
    _XcVpi_Type()
)
xcVpi.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcVpi.setStatus("current")
_XcVci_Type = Integer32
_XcVci_Object = MibTableColumn
xcVci = _XcVci_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 31, 1, 4),
    _XcVci_Type()
)
xcVci.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcVci.setStatus("current")
_XcIfIndex2_Type = Integer32
_XcIfIndex2_Object = MibTableColumn
xcIfIndex2 = _XcIfIndex2_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 31, 1, 5),
    _XcIfIndex2_Type()
)
xcIfIndex2.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    xcIfIndex2.setStatus("current")
_XcRowStatus_Type = RowStatus
_XcRowStatus_Object = MibTableColumn
xcRowStatus = _XcRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 31, 1, 6),
    _XcRowStatus_Type()
)
xcRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcRowStatus.setStatus("current")
_XcDescr_Type = DisplayString
_XcDescr_Object = MibTableColumn
xcDescr = _XcDescr_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 31, 1, 7),
    _XcDescr_Type()
)
xcDescr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcDescr.setStatus("current")


class _XcAdminStatus_Type(Integer32):
    """Custom type xcAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_XcAdminStatus_Type.__name__ = "Integer32"
_XcAdminStatus_Object = MibTableColumn
xcAdminStatus = _XcAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 31, 1, 8),
    _XcAdminStatus_Type()
)
xcAdminStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcAdminStatus.setStatus("current")


class _XcOperStatus_Type(Integer32):
    """Custom type xcOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("unknown", 3),
          ("up", 1))
    )


_XcOperStatus_Type.__name__ = "Integer32"
_XcOperStatus_Object = MibTableColumn
xcOperStatus = _XcOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 31, 1, 9),
    _XcOperStatus_Type()
)
xcOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcOperStatus.setStatus("current")


class _XcAttachedIfType_Type(Integer32):
    """Custom type xcAttachedIfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("free", 2),
          ("lis", 4),
          ("notApplicable", 1),
          ("routerAtm", 3))
    )


_XcAttachedIfType_Type.__name__ = "Integer32"
_XcAttachedIfType_Object = MibTableColumn
xcAttachedIfType = _XcAttachedIfType_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 31, 1, 10),
    _XcAttachedIfType_Type()
)
xcAttachedIfType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcAttachedIfType.setStatus("current")


class _XcInputPriority_Type(Integer32):
    """Custom type xcInputPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_XcInputPriority_Type.__name__ = "Integer32"
_XcInputPriority_Object = MibTableColumn
xcInputPriority = _XcInputPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 31, 1, 11),
    _XcInputPriority_Type()
)
xcInputPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    xcInputPriority.setStatus("current")
_XcBitMapping_Type = Integer32
_XcBitMapping_Object = MibTableColumn
xcBitMapping = _XcBitMapping_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 31, 1, 12),
    _XcBitMapping_Type()
)
xcBitMapping.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xcBitMapping.setStatus("current")
_SystemModule_ObjectIdentity = ObjectIdentity
systemModule = _SystemModule_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 32)
)
_ModlParam_ObjectIdentity = ObjectIdentity
modlParam = _ModlParam_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 32, 1)
)
_ModlParamTable_Object = MibTable
modlParamTable = _ModlParamTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 32, 1, 1)
)
if mibBuilder.loadTexts:
    modlParamTable.setStatus("current")
_ModlParamEntry_Object = MibTableRow
modlParamEntry = _ModlParamEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 32, 1, 1, 1)
)
modlParamEntry.setIndexNames(
    (0, "RAD-MIB", "modlParamIndex"),
)
if mibBuilder.loadTexts:
    modlParamEntry.setStatus("current")
_ModlParamIndex_Type = Integer32
_ModlParamIndex_Object = MibTableColumn
modlParamIndex = _ModlParamIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 32, 1, 1, 1, 1),
    _ModlParamIndex_Type()
)
modlParamIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modlParamIndex.setStatus("current")


class _ModlParamReset_Type(Integer32):
    """Custom type modlParamReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("factory", 4),
          ("off", 2),
          ("on", 3))
    )


_ModlParamReset_Type.__name__ = "Integer32"
_ModlParamReset_Object = MibTableColumn
modlParamReset = _ModlParamReset_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 32, 1, 1, 1, 2),
    _ModlParamReset_Type()
)
modlParamReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    modlParamReset.setStatus("current")


class _ModlParamSwdlStatus_Type(Integer32):
    """Custom type modlParamSwdlStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("inProcess", 3),
          ("notApplicable", 1),
          ("off", 2))
    )


_ModlParamSwdlStatus_Type.__name__ = "Integer32"
_ModlParamSwdlStatus_Object = MibTableColumn
modlParamSwdlStatus = _ModlParamSwdlStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 32, 1, 1, 1, 3),
    _ModlParamSwdlStatus_Type()
)
modlParamSwdlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modlParamSwdlStatus.setStatus("current")
_ModlParamLeds_Type = OctetString
_ModlParamLeds_Object = MibTableColumn
modlParamLeds = _ModlParamLeds_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 32, 1, 1, 1, 4),
    _ModlParamLeds_Type()
)
modlParamLeds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modlParamLeds.setStatus("current")


class _ModlParamType_Type(Integer32):
    """Custom type modlParamType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("empty", 3),
          ("miRicE1", 4),
          ("miRicE3", 6),
          ("miRicT1", 5),
          ("miRicT3", 7),
          ("unknown", 2))
    )


_ModlParamType_Type.__name__ = "Integer32"
_ModlParamType_Object = MibTableColumn
modlParamType = _ModlParamType_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 32, 1, 1, 1, 5),
    _ModlParamType_Type()
)
modlParamType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modlParamType.setStatus("current")
_ModlParamSwVer_Type = DisplayString
_ModlParamSwVer_Object = MibTableColumn
modlParamSwVer = _ModlParamSwVer_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 32, 1, 1, 1, 6),
    _ModlParamSwVer_Type()
)
modlParamSwVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    modlParamSwVer.setStatus("current")


class _AgnNearFarConnection_Type(Integer32):
    """Custom type agnNearFarConnection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("connected", 3),
          ("disconnected", 2),
          ("notApplicable", 1))
    )


_AgnNearFarConnection_Type.__name__ = "Integer32"
_AgnNearFarConnection_Object = MibScalar
agnNearFarConnection = _AgnNearFarConnection_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 33),
    _AgnNearFarConnection_Type()
)
agnNearFarConnection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnNearFarConnection.setStatus("current")
_AgnAccess_ObjectIdentity = ObjectIdentity
agnAccess = _AgnAccess_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 34)
)


class _AgnTelnetAccess_Type(Integer32):
    """Custom type agnTelnetAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("enableSecure", 5),
          ("managersOnly", 4),
          ("managersOnlySecure", 6))
    )


_AgnTelnetAccess_Type.__name__ = "Integer32"
_AgnTelnetAccess_Object = MibScalar
agnTelnetAccess = _AgnTelnetAccess_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 34, 1),
    _AgnTelnetAccess_Type()
)
agnTelnetAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnTelnetAccess.setStatus("current")


class _AgnWebAccess_Type(Integer32):
    """Custom type agnWebAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("enableSecure", 5),
          ("managersOnly", 4),
          ("managersOnlySecure", 6))
    )


_AgnWebAccess_Type.__name__ = "Integer32"
_AgnWebAccess_Object = MibScalar
agnWebAccess = _AgnWebAccess_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 34, 2),
    _AgnWebAccess_Type()
)
agnWebAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnWebAccess.setStatus("current")


class _AgnRadiusAccess_Type(Integer32):
    """Custom type agnRadiusAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_AgnRadiusAccess_Type.__name__ = "Integer32"
_AgnRadiusAccess_Object = MibScalar
agnRadiusAccess = _AgnRadiusAccess_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 34, 3),
    _AgnRadiusAccess_Type()
)
agnRadiusAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnRadiusAccess.setStatus("current")


class _AgnSshAccess_Type(Integer32):
    """Custom type agnSshAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("managersOnly", 4))
    )


_AgnSshAccess_Type.__name__ = "Integer32"
_AgnSshAccess_Object = MibScalar
agnSshAccess = _AgnSshAccess_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 34, 4),
    _AgnSshAccess_Type()
)
agnSshAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnSshAccess.setStatus("current")
_SystemInterface_ObjectIdentity = ObjectIdentity
systemInterface = _SystemInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 35)
)
_IfCreateTable_Object = MibTable
ifCreateTable = _IfCreateTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 35, 1)
)
if mibBuilder.loadTexts:
    ifCreateTable.setStatus("current")
_IfCreateEntry_Object = MibTableRow
ifCreateEntry = _IfCreateEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 35, 1, 1)
)
ifCreateEntry.setIndexNames(
    (0, "RAD-MIB", "ifCreateEntityType"),
    (0, "RAD-MIB", "ifCreateEntityIdx"),
    (0, "RAD-MIB", "ifCreateNumber"),
)
if mibBuilder.loadTexts:
    ifCreateEntry.setStatus("current")
_IfCreateEntityType_Type = SysIfEntityType
_IfCreateEntityType_Object = MibTableColumn
ifCreateEntityType = _IfCreateEntityType_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 35, 1, 1, 1),
    _IfCreateEntityType_Type()
)
ifCreateEntityType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifCreateEntityType.setStatus("current")
_IfCreateEntityIdx_Type = Integer32
_IfCreateEntityIdx_Object = MibTableColumn
ifCreateEntityIdx = _IfCreateEntityIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 35, 1, 1, 2),
    _IfCreateEntityIdx_Type()
)
ifCreateEntityIdx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifCreateEntityIdx.setStatus("current")
_IfCreateNumber_Type = Integer32
_IfCreateNumber_Object = MibTableColumn
ifCreateNumber = _IfCreateNumber_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 35, 1, 1, 3),
    _IfCreateNumber_Type()
)
ifCreateNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifCreateNumber.setStatus("current")
_IfCreateRowStatus_Type = RowStatus
_IfCreateRowStatus_Object = MibTableColumn
ifCreateRowStatus = _IfCreateRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 35, 1, 1, 4),
    _IfCreateRowStatus_Type()
)
ifCreateRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ifCreateRowStatus.setStatus("current")
_IfCreateType_Type = IANAifType
_IfCreateType_Object = MibTableColumn
ifCreateType = _IfCreateType_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 35, 1, 1, 5),
    _IfCreateType_Type()
)
ifCreateType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ifCreateType.setStatus("current")
_IfCreateIndex_Type = Integer32
_IfCreateIndex_Object = MibTableColumn
ifCreateIndex = _IfCreateIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 35, 1, 1, 6),
    _IfCreateIndex_Type()
)
ifCreateIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifCreateIndex.setStatus("current")
_IfCreateConnectedTo_Type = Integer32
_IfCreateConnectedTo_Object = MibTableColumn
ifCreateConnectedTo = _IfCreateConnectedTo_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 35, 1, 1, 7),
    _IfCreateConnectedTo_Type()
)
ifCreateConnectedTo.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ifCreateConnectedTo.setStatus("current")
_IfCreateParams_Type = Unsigned32
_IfCreateParams_Object = MibTableColumn
ifCreateParams = _IfCreateParams_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 35, 1, 1, 8),
    _IfCreateParams_Type()
)
ifCreateParams.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ifCreateParams.setStatus("current")
_IfCreateConnectionPointer_Type = RowPointer
_IfCreateConnectionPointer_Object = MibTableColumn
ifCreateConnectionPointer = _IfCreateConnectionPointer_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 35, 1, 1, 9),
    _IfCreateConnectionPointer_Type()
)
ifCreateConnectionPointer.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ifCreateConnectionPointer.setStatus("current")
_InterfacePerformance_ObjectIdentity = ObjectIdentity
interfacePerformance = _InterfacePerformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 35, 2)
)
_IfPerfTable_Object = MibTable
ifPerfTable = _IfPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 35, 2, 1)
)
if mibBuilder.loadTexts:
    ifPerfTable.setStatus("current")
_IfPerfEntry_Object = MibTableRow
ifPerfEntry = _IfPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 35, 2, 1, 1)
)
ifPerfEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RAD-MIB", "ifPerfCounterType"),
)
if mibBuilder.loadTexts:
    ifPerfEntry.setStatus("current")
_IfPerfCounterType_Type = Integer32
_IfPerfCounterType_Object = MibTableColumn
ifPerfCounterType = _IfPerfCounterType_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 35, 2, 1, 1, 1),
    _IfPerfCounterType_Type()
)
ifPerfCounterType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ifPerfCounterType.setStatus("current")
_IfPerfLowCounterPart_Type = Unsigned32
_IfPerfLowCounterPart_Object = MibTableColumn
ifPerfLowCounterPart = _IfPerfLowCounterPart_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 35, 2, 1, 1, 2),
    _IfPerfLowCounterPart_Type()
)
ifPerfLowCounterPart.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifPerfLowCounterPart.setStatus("current")
_IfPerfHighCounterPart_Type = Unsigned32
_IfPerfHighCounterPart_Object = MibTableColumn
ifPerfHighCounterPart = _IfPerfHighCounterPart_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 35, 2, 1, 1, 3),
    _IfPerfHighCounterPart_Type()
)
ifPerfHighCounterPart.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifPerfHighCounterPart.setStatus("current")
_IfPerfHCCounter_Type = Counter64
_IfPerfHCCounter_Object = MibTableColumn
ifPerfHCCounter = _IfPerfHCCounter_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 35, 2, 1, 1, 4),
    _IfPerfHCCounter_Type()
)
ifPerfHCCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ifPerfHCCounter.setStatus("current")
_SystemOam_ObjectIdentity = ObjectIdentity
systemOam = _SystemOam_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 36)
)
_SystemOamTable_Object = MibTable
systemOamTable = _SystemOamTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 36, 1)
)
if mibBuilder.loadTexts:
    systemOamTable.setStatus("current")
_SystemOamEntry_Object = MibTableRow
systemOamEntry = _SystemOamEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 36, 1, 1)
)
systemOamEntry.setIndexNames(
    (0, "RAD-MIB", "systemOamCnfgIdx"),
)
if mibBuilder.loadTexts:
    systemOamEntry.setStatus("current")


class _SystemOamCnfgIdx_Type(Integer32):
    """Custom type systemOamCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_SystemOamCnfgIdx_Type.__name__ = "Integer32"
_SystemOamCnfgIdx_Object = MibTableColumn
systemOamCnfgIdx = _SystemOamCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 36, 1, 1, 1),
    _SystemOamCnfgIdx_Type()
)
systemOamCnfgIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    systemOamCnfgIdx.setStatus("current")
_SystemOamFrequency_Type = Integer32
_SystemOamFrequency_Object = MibTableColumn
systemOamFrequency = _SystemOamFrequency_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 36, 1, 1, 2),
    _SystemOamFrequency_Type()
)
systemOamFrequency.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemOamFrequency.setStatus("current")
_SystemOamTimeoutCycles_Type = Integer32
_SystemOamTimeoutCycles_Object = MibTableColumn
systemOamTimeoutCycles = _SystemOamTimeoutCycles_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 36, 1, 1, 3),
    _SystemOamTimeoutCycles_Type()
)
systemOamTimeoutCycles.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemOamTimeoutCycles.setStatus("current")


class _SystemOamLinkCheck_Type(Integer32):
    """Custom type systemOamLinkCheck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_SystemOamLinkCheck_Type.__name__ = "Integer32"
_SystemOamLinkCheck_Object = MibTableColumn
systemOamLinkCheck = _SystemOamLinkCheck_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 36, 1, 1, 4),
    _SystemOamLinkCheck_Type()
)
systemOamLinkCheck.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    systemOamLinkCheck.setStatus("current")
_SystemOamDescrTable_Object = MibTable
systemOamDescrTable = _SystemOamDescrTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 36, 2)
)
if mibBuilder.loadTexts:
    systemOamDescrTable.setStatus("current")
_SystemOamDescrEntry_Object = MibTableRow
systemOamDescrEntry = _SystemOamDescrEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 36, 2, 1)
)
systemOamDescrEntry.setIndexNames(
    (0, "RAD-MIB", "systemOamDescrIdx"),
)
if mibBuilder.loadTexts:
    systemOamDescrEntry.setStatus("current")
_SystemOamDescrIdx_Type = Integer32
_SystemOamDescrIdx_Object = MibTableColumn
systemOamDescrIdx = _SystemOamDescrIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 36, 2, 1, 1),
    _SystemOamDescrIdx_Type()
)
systemOamDescrIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    systemOamDescrIdx.setStatus("current")
_SystemOamDescrRowStatus_Type = RowStatus
_SystemOamDescrRowStatus_Object = MibTableColumn
systemOamDescrRowStatus = _SystemOamDescrRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 36, 2, 1, 2),
    _SystemOamDescrRowStatus_Type()
)
systemOamDescrRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    systemOamDescrRowStatus.setStatus("current")


class _SystemOamDescrMode_Type(Integer32):
    """Custom type systemOamDescrMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("endToEndTermination", 3),
          ("intermediate", 1),
          ("segmentTermination", 2))
    )


_SystemOamDescrMode_Type.__name__ = "Integer32"
_SystemOamDescrMode_Object = MibTableColumn
systemOamDescrMode = _SystemOamDescrMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 36, 2, 1, 3),
    _SystemOamDescrMode_Type()
)
systemOamDescrMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    systemOamDescrMode.setStatus("current")


class _SystemOamDescrCCDirection_Type(Integer32):
    """Custom type systemOamDescrCCDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("both", 2),
          ("none", 3),
          ("sink", 5),
          ("source", 4))
    )


_SystemOamDescrCCDirection_Type.__name__ = "Integer32"
_SystemOamDescrCCDirection_Object = MibTableColumn
systemOamDescrCCDirection = _SystemOamDescrCCDirection_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 36, 2, 1, 4),
    _SystemOamDescrCCDirection_Type()
)
systemOamDescrCCDirection.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    systemOamDescrCCDirection.setStatus("current")


class _SystemOamDescrLoopbackOperation_Type(Integer32):
    """Custom type systemOamDescrLoopbackOperation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SystemOamDescrLoopbackOperation_Type.__name__ = "Integer32"
_SystemOamDescrLoopbackOperation_Object = MibTableColumn
systemOamDescrLoopbackOperation = _SystemOamDescrLoopbackOperation_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 36, 2, 1, 5),
    _SystemOamDescrLoopbackOperation_Type()
)
systemOamDescrLoopbackOperation.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    systemOamDescrLoopbackOperation.setStatus("current")
_SystemOamDescrLoopbackDestAddr_Type = OctetString
_SystemOamDescrLoopbackDestAddr_Object = MibTableColumn
systemOamDescrLoopbackDestAddr = _SystemOamDescrLoopbackDestAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 36, 2, 1, 6),
    _SystemOamDescrLoopbackDestAddr_Type()
)
systemOamDescrLoopbackDestAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    systemOamDescrLoopbackDestAddr.setStatus("current")
_SystemOamDescrXcCounter_Type = Gauge32
_SystemOamDescrXcCounter_Object = MibTableColumn
systemOamDescrXcCounter = _SystemOamDescrXcCounter_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 36, 2, 1, 7),
    _SystemOamDescrXcCounter_Type()
)
systemOamDescrXcCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    systemOamDescrXcCounter.setStatus("current")


class _AgnDeviceView_Type(Integer32):
    """Custom type agnDeviceView based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("metal", 6),
          ("newLook", 3),
          ("newLook2", 4),
          ("oldLook", 2),
          ("plastic", 5))
    )


_AgnDeviceView_Type.__name__ = "Integer32"
_AgnDeviceView_Object = MibScalar
agnDeviceView = _AgnDeviceView_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 37),
    _AgnDeviceView_Type()
)
agnDeviceView.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDeviceView.setStatus("current")
_BitMappingTable_Object = MibTable
bitMappingTable = _BitMappingTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 38)
)
if mibBuilder.loadTexts:
    bitMappingTable.setStatus("current")
_BitMappingEntry_Object = MibTableRow
bitMappingEntry = _BitMappingEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 38, 1)
)
bitMappingEntry.setIndexNames(
    (0, "RAD-MIB", "bitMappingLocation"),
)
if mibBuilder.loadTexts:
    bitMappingEntry.setStatus("current")
_BitMappingLocation_Type = Integer32
_BitMappingLocation_Object = MibTableColumn
bitMappingLocation = _BitMappingLocation_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 38, 1, 1),
    _BitMappingLocation_Type()
)
bitMappingLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    bitMappingLocation.setStatus("current")
_BitMappingIndex_Type = Integer32
_BitMappingIndex_Object = MibTableColumn
bitMappingIndex = _BitMappingIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 38, 1, 2),
    _BitMappingIndex_Type()
)
bitMappingIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bitMappingIndex.setStatus("current")
_BitMappingView_Type = OctetString
_BitMappingView_Object = MibScalar
bitMappingView = _BitMappingView_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 39),
    _BitMappingView_Type()
)
bitMappingView.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    bitMappingView.setStatus("current")
_HostTable_Object = MibTable
hostTable = _HostTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 40)
)
if mibBuilder.loadTexts:
    hostTable.setStatus("current")
_HostEntry_Object = MibTableRow
hostEntry = _HostEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 40, 1)
)
hostEntry.setIndexNames(
    (0, "RAD-MIB", "hostIndex"),
)
if mibBuilder.loadTexts:
    hostEntry.setStatus("current")
_HostIndex_Type = Integer32
_HostIndex_Object = MibTableColumn
hostIndex = _HostIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 40, 1, 1),
    _HostIndex_Type()
)
hostIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    hostIndex.setStatus("current")
_HostIP_Type = IpAddress
_HostIP_Object = MibTableColumn
hostIP = _HostIP_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 40, 1, 2),
    _HostIP_Type()
)
hostIP.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    hostIP.setStatus("current")
_HostIPMask_Type = IpAddress
_HostIPMask_Object = MibTableColumn
hostIPMask = _HostIPMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 40, 1, 3),
    _HostIPMask_Type()
)
hostIPMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    hostIPMask.setStatus("current")
_HostDefaultNextHop_Type = IpAddress
_HostDefaultNextHop_Object = MibTableColumn
hostDefaultNextHop = _HostDefaultNextHop_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 40, 1, 4),
    _HostDefaultNextHop_Type()
)
hostDefaultNextHop.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    hostDefaultNextHop.setStatus("current")
_HostMode_Type = Integer32
_HostMode_Object = MibTableColumn
hostMode = _HostMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 40, 1, 5),
    _HostMode_Type()
)
hostMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    hostMode.setStatus("current")
_HostParam1_Type = Integer32
_HostParam1_Object = MibTableColumn
hostParam1 = _HostParam1_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 40, 1, 6),
    _HostParam1_Type()
)
hostParam1.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    hostParam1.setStatus("current")
_HostParam2_Type = Integer32
_HostParam2_Object = MibTableColumn
hostParam2 = _HostParam2_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 40, 1, 7),
    _HostParam2_Type()
)
hostParam2.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    hostParam2.setStatus("current")
_HostParam3_Type = Integer32
_HostParam3_Object = MibTableColumn
hostParam3 = _HostParam3_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 40, 1, 8),
    _HostParam3_Type()
)
hostParam3.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    hostParam3.setStatus("current")
_HostRowStatus_Type = RowStatus
_HostRowStatus_Object = MibTableColumn
hostRowStatus = _HostRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 40, 1, 9),
    _HostRowStatus_Type()
)
hostRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    hostRowStatus.setStatus("current")


class _HostVlanTagging_Type(Integer32):
    """Custom type hostVlanTagging based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("tag", 3),
          ("untag", 2))
    )


_HostVlanTagging_Type.__name__ = "Integer32"
_HostVlanTagging_Object = MibTableColumn
hostVlanTagging = _HostVlanTagging_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 40, 1, 10),
    _HostVlanTagging_Type()
)
hostVlanTagging.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    hostVlanTagging.setStatus("current")
_HostVlanId_Type = Integer32
_HostVlanId_Object = MibTableColumn
hostVlanId = _HostVlanId_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 40, 1, 11),
    _HostVlanId_Type()
)
hostVlanId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    hostVlanId.setStatus("current")
_HostVlanPriority_Type = Integer32
_HostVlanPriority_Object = MibTableColumn
hostVlanPriority = _HostVlanPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 40, 1, 12),
    _HostVlanPriority_Type()
)
hostVlanPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    hostVlanPriority.setStatus("current")
_InvNameXCTable_Object = MibTable
invNameXCTable = _InvNameXCTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 41)
)
if mibBuilder.loadTexts:
    invNameXCTable.setStatus("current")
_InvNameXCEntry_Object = MibTableRow
invNameXCEntry = _InvNameXCEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 41, 1)
)
invNameXCEntry.setIndexNames(
    (1, "RAD-MIB", "invNameXC"),
)
if mibBuilder.loadTexts:
    invNameXCEntry.setStatus("current")


class _InvNameXC_Type(SnmpAdminString):
    """Custom type invNameXC based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_InvNameXC_Type.__name__ = "SnmpAdminString"
_InvNameXC_Object = MibTableColumn
invNameXC = _InvNameXC_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 41, 1, 1),
    _InvNameXC_Type()
)
invNameXC.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    invNameXC.setStatus("current")
_InvNameXCType_Type = ObjectIdentifier
_InvNameXCType_Object = MibTableColumn
invNameXCType = _InvNameXCType_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 41, 1, 2),
    _InvNameXCType_Type()
)
invNameXCType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    invNameXCType.setStatus("current")
_InvNameXCIndex_Type = Integer32
_InvNameXCIndex_Object = MibTableColumn
invNameXCIndex = _InvNameXCIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 41, 1, 3),
    _InvNameXCIndex_Type()
)
invNameXCIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    invNameXCIndex.setStatus("current")
_AgnDeviceCapabilities_Type = OctetString
_AgnDeviceCapabilities_Object = MibScalar
agnDeviceCapabilities = _AgnDeviceCapabilities_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 42),
    _AgnDeviceCapabilities_Type()
)
agnDeviceCapabilities.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnDeviceCapabilities.setStatus("current")
_RowInfoTable_Object = MibTable
rowInfoTable = _RowInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 43)
)
if mibBuilder.loadTexts:
    rowInfoTable.setStatus("current")
_RowInfoEntry_Object = MibTableRow
rowInfoEntry = _RowInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 43, 1)
)
rowInfoEntry.setIndexNames(
    (0, "RAD-MIB", "rowInfoTableId"),
)
if mibBuilder.loadTexts:
    rowInfoEntry.setStatus("current")
_RowInfoTableId_Type = ObjectIdentifier
_RowInfoTableId_Object = MibTableColumn
rowInfoTableId = _RowInfoTableId_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 43, 1, 1),
    _RowInfoTableId_Type()
)
rowInfoTableId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rowInfoTableId.setStatus("current")
_RowInfoCounter_Type = Integer32
_RowInfoCounter_Object = MibTableColumn
rowInfoCounter = _RowInfoCounter_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 43, 1, 2),
    _RowInfoCounter_Type()
)
rowInfoCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rowInfoCounter.setStatus("current")
_RowInfoIndexNext_Type = Integer32
_RowInfoIndexNext_Object = MibTableColumn
rowInfoIndexNext = _RowInfoIndexNext_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 43, 1, 3),
    _RowInfoIndexNext_Type()
)
rowInfoIndexNext.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rowInfoIndexNext.setStatus("current")
_RowInfoMaxNoOfRows_Type = Integer32
_RowInfoMaxNoOfRows_Object = MibTableColumn
rowInfoMaxNoOfRows = _RowInfoMaxNoOfRows_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 43, 1, 4),
    _RowInfoMaxNoOfRows_Type()
)
rowInfoMaxNoOfRows.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rowInfoMaxNoOfRows.setStatus("current")


class _AgnStoreCmd_Type(Integer32):
    """Custom type agnStoreCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("asDefConfigFile", 4),
          ("inFlash", 3),
          ("off", 2))
    )


_AgnStoreCmd_Type.__name__ = "Integer32"
_AgnStoreCmd_Object = MibScalar
agnStoreCmd = _AgnStoreCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 44),
    _AgnStoreCmd_Type()
)
agnStoreCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnStoreCmd.setStatus("current")
_AgnFunctionTable_Object = MibTable
agnFunctionTable = _AgnFunctionTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 45)
)
if mibBuilder.loadTexts:
    agnFunctionTable.setStatus("current")
_AgnFunctionEntry_Object = MibTableRow
agnFunctionEntry = _AgnFunctionEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 45, 1)
)
agnFunctionEntry.setIndexNames(
    (0, "RAD-MIB", "agnFunction"),
)
if mibBuilder.loadTexts:
    agnFunctionEntry.setStatus("current")


class _AgnFunction_Type(Integer32):
    """Custom type agnFunction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("alarmForwarding", 4),
          ("backup", 3),
          ("routing", 2),
          ("systemClock", 6),
          ("uplinkLoopDetect", 5))
    )


_AgnFunction_Type.__name__ = "Integer32"
_AgnFunction_Object = MibTableColumn
agnFunction = _AgnFunction_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 45, 1, 1),
    _AgnFunction_Type()
)
agnFunction.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    agnFunction.setStatus("current")


class _AgnFunctionActivation_Type(Integer32):
    """Custom type agnFunctionActivation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_AgnFunctionActivation_Type.__name__ = "Integer32"
_AgnFunctionActivation_Object = MibTableColumn
agnFunctionActivation = _AgnFunctionActivation_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 45, 1, 2),
    _AgnFunctionActivation_Type()
)
agnFunctionActivation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnFunctionActivation.setStatus("current")
_AgnManagerConfigPorts_Type = Integer32
_AgnManagerConfigPorts_Object = MibScalar
agnManagerConfigPorts = _AgnManagerConfigPorts_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 46),
    _AgnManagerConfigPorts_Type()
)
agnManagerConfigPorts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnManagerConfigPorts.setStatus("current")


class _AgnEgressRateRange_Type(Integer32):
    """Custom type agnEgressRateRange based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("range1", 2),
          ("range2", 3),
          ("range3", 4),
          ("range4", 5),
          ("range5", 6),
          ("range6", 7),
          ("range7", 8),
          ("unlimited", 1))
    )


_AgnEgressRateRange_Type.__name__ = "Integer32"
_AgnEgressRateRange_Object = MibScalar
agnEgressRateRange = _AgnEgressRateRange_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 47),
    _AgnEgressRateRange_Type()
)
agnEgressRateRange.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnEgressRateRange.setStatus("current")
_AgnNoOfCurrentConns_Type = Integer32
_AgnNoOfCurrentConns_Object = MibScalar
agnNoOfCurrentConns = _AgnNoOfCurrentConns_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 48),
    _AgnNoOfCurrentConns_Type()
)
agnNoOfCurrentConns.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnNoOfCurrentConns.setStatus("current")


class _AgnIngressRateRange_Type(Integer32):
    """Custom type agnIngressRateRange based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("range1", 2),
          ("range2", 3),
          ("range3", 4),
          ("range4", 5),
          ("range5", 6),
          ("range6", 7),
          ("range7", 8),
          ("unlimited", 1))
    )


_AgnIngressRateRange_Type.__name__ = "Integer32"
_AgnIngressRateRange_Object = MibScalar
agnIngressRateRange = _AgnIngressRateRange_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 49),
    _AgnIngressRateRange_Type()
)
agnIngressRateRange.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnIngressRateRange.setStatus("current")
_AlarmForwardingTable_Object = MibTable
alarmForwardingTable = _AlarmForwardingTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 50)
)
if mibBuilder.loadTexts:
    alarmForwardingTable.setStatus("current")
_AlarmForwardingEntry_Object = MibTableRow
alarmForwardingEntry = _AlarmForwardingEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 50, 1)
)
alarmForwardingEntry.setIndexNames(
    (0, "RAD-MIB", "alarmForwardingFailPort"),
    (0, "RAD-MIB", "alarmForwardingToPort"),
)
if mibBuilder.loadTexts:
    alarmForwardingEntry.setStatus("current")


class _AlarmForwardingFailPort_Type(Integer32):
    """Custom type alarmForwardingFailPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_AlarmForwardingFailPort_Type.__name__ = "Integer32"
_AlarmForwardingFailPort_Object = MibTableColumn
alarmForwardingFailPort = _AlarmForwardingFailPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 50, 1, 1),
    _AlarmForwardingFailPort_Type()
)
alarmForwardingFailPort.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    alarmForwardingFailPort.setStatus("current")


class _AlarmForwardingToPort_Type(Integer32):
    """Custom type alarmForwardingToPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_AlarmForwardingToPort_Type.__name__ = "Integer32"
_AlarmForwardingToPort_Object = MibTableColumn
alarmForwardingToPort = _AlarmForwardingToPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 50, 1, 2),
    _AlarmForwardingToPort_Type()
)
alarmForwardingToPort.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    alarmForwardingToPort.setStatus("current")
_AlarmForwardingRowStatus_Type = RowStatus
_AlarmForwardingRowStatus_Object = MibTableColumn
alarmForwardingRowStatus = _AlarmForwardingRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 50, 1, 3),
    _AlarmForwardingRowStatus_Type()
)
alarmForwardingRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    alarmForwardingRowStatus.setStatus("current")
_AlarmForwardingRecoveryTime_Type = Integer32
_AlarmForwardingRecoveryTime_Object = MibTableColumn
alarmForwardingRecoveryTime = _AlarmForwardingRecoveryTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 50, 1, 4),
    _AlarmForwardingRecoveryTime_Type()
)
alarmForwardingRecoveryTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    alarmForwardingRecoveryTime.setStatus("current")
_AlarmForwardingGroupConditions_Type = Integer32
_AlarmForwardingGroupConditions_Object = MibTableColumn
alarmForwardingGroupConditions = _AlarmForwardingGroupConditions_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 50, 1, 5),
    _AlarmForwardingGroupConditions_Type()
)
alarmForwardingGroupConditions.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    alarmForwardingGroupConditions.setStatus("current")


class _AlarmForwardingCause_Type(Bits):
    """Custom type alarmForwardingCause based on Bits"""
    namedValues = NamedValues(
        *(("ais", 1),
          ("loss", 0),
          ("protocolDown", 3),
          ("rdi", 2))
    )

_AlarmForwardingCause_Type.__name__ = "Bits"
_AlarmForwardingCause_Object = MibTableColumn
alarmForwardingCause = _AlarmForwardingCause_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 50, 1, 6),
    _AlarmForwardingCause_Type()
)
alarmForwardingCause.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    alarmForwardingCause.setStatus("current")


class _AlarmForwardingRecoveryMode_Type(Integer32):
    """Custom type alarmForwardingRecoveryMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 2),
          ("manual", 1))
    )


_AlarmForwardingRecoveryMode_Type.__name__ = "Integer32"
_AlarmForwardingRecoveryMode_Object = MibTableColumn
alarmForwardingRecoveryMode = _AlarmForwardingRecoveryMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 50, 1, 7),
    _AlarmForwardingRecoveryMode_Type()
)
alarmForwardingRecoveryMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    alarmForwardingRecoveryMode.setStatus("current")


class _AlarmForwardingRecoveryCommand_Type(Integer32):
    """Custom type alarmForwardingRecoveryCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AlarmForwardingRecoveryCommand_Type.__name__ = "Integer32"
_AlarmForwardingRecoveryCommand_Object = MibTableColumn
alarmForwardingRecoveryCommand = _AlarmForwardingRecoveryCommand_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 50, 1, 8),
    _AlarmForwardingRecoveryCommand_Type()
)
alarmForwardingRecoveryCommand.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    alarmForwardingRecoveryCommand.setStatus("current")
_AlarmForwardingDelay_Type = Unsigned32
_AlarmForwardingDelay_Object = MibTableColumn
alarmForwardingDelay = _AlarmForwardingDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 50, 1, 9),
    _AlarmForwardingDelay_Type()
)
alarmForwardingDelay.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    alarmForwardingDelay.setStatus("current")


class _AlarmForwardingDirection_Type(Integer32):
    """Custom type alarmForwardingDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("bidirectional", 2),
          ("unidirectional", 1))
    )


_AlarmForwardingDirection_Type.__name__ = "Integer32"
_AlarmForwardingDirection_Object = MibTableColumn
alarmForwardingDirection = _AlarmForwardingDirection_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 50, 1, 10),
    _AlarmForwardingDirection_Type()
)
alarmForwardingDirection.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    alarmForwardingDirection.setStatus("current")


class _AlarmForwardingAction_Type(Bits):
    """Custom type alarmForwardingAction based on Bits"""
    namedValues = NamedValues(
        *(("interfaceDeactivation", 1),
          ("noAction", 0),
          ("oamSignaling", 2))
    )

_AlarmForwardingAction_Type.__name__ = "Bits"
_AlarmForwardingAction_Object = MibTableColumn
alarmForwardingAction = _AlarmForwardingAction_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 50, 1, 11),
    _AlarmForwardingAction_Type()
)
alarmForwardingAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    alarmForwardingAction.setStatus("current")


class _AgnSwVersionSwapCmd_Type(Integer32):
    """Custom type agnSwVersionSwapCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("mainAndBackup", 3),
          ("off", 2))
    )


_AgnSwVersionSwapCmd_Type.__name__ = "Integer32"
_AgnSwVersionSwapCmd_Object = MibScalar
agnSwVersionSwapCmd = _AgnSwVersionSwapCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 51),
    _AgnSwVersionSwapCmd_Type()
)
agnSwVersionSwapCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnSwVersionSwapCmd.setStatus("current")
_AgnClockSource_ObjectIdentity = ObjectIdentity
agnClockSource = _AgnClockSource_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52)
)
_AgnClkSrcPortTable_Object = MibTable
agnClkSrcPortTable = _AgnClkSrcPortTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 1)
)
if mibBuilder.loadTexts:
    agnClkSrcPortTable.setStatus("current")
_AgnClkSrcPortEntry_Object = MibTableRow
agnClkSrcPortEntry = _AgnClkSrcPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 1, 1)
)
agnClkSrcPortEntry.setIndexNames(
    (0, "RAD-MIB", "agnClkSrcPortCnfgIdx"),
    (0, "RAD-MIB", "agnClkSrcPortSrcIdx"),
    (0, "RAD-MIB", "agnClkSrcPortIdx"),
)
if mibBuilder.loadTexts:
    agnClkSrcPortEntry.setStatus("current")


class _AgnClkSrcPortCnfgIdx_Type(Integer32):
    """Custom type agnClkSrcPortCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_AgnClkSrcPortCnfgIdx_Type.__name__ = "Integer32"
_AgnClkSrcPortCnfgIdx_Object = MibTableColumn
agnClkSrcPortCnfgIdx = _AgnClkSrcPortCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 1, 1, 1),
    _AgnClkSrcPortCnfgIdx_Type()
)
agnClkSrcPortCnfgIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    agnClkSrcPortCnfgIdx.setStatus("current")


class _AgnClkSrcPortSrcIdx_Type(Integer32):
    """Custom type agnClkSrcPortSrcIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fallback", 2),
          ("master", 1),
          ("recovered", 3))
    )


_AgnClkSrcPortSrcIdx_Type.__name__ = "Integer32"
_AgnClkSrcPortSrcIdx_Object = MibTableColumn
agnClkSrcPortSrcIdx = _AgnClkSrcPortSrcIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 1, 1, 2),
    _AgnClkSrcPortSrcIdx_Type()
)
agnClkSrcPortSrcIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    agnClkSrcPortSrcIdx.setStatus("current")


class _AgnClkSrcPortIdx_Type(Integer32):
    """Custom type agnClkSrcPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_AgnClkSrcPortIdx_Type.__name__ = "Integer32"
_AgnClkSrcPortIdx_Object = MibTableColumn
agnClkSrcPortIdx = _AgnClkSrcPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 1, 1, 3),
    _AgnClkSrcPortIdx_Type()
)
agnClkSrcPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    agnClkSrcPortIdx.setStatus("current")


class _AgnClkSrcPort_Type(Integer32):
    """Custom type agnClkSrcPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_AgnClkSrcPort_Type.__name__ = "Integer32"
_AgnClkSrcPort_Object = MibTableColumn
agnClkSrcPort = _AgnClkSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 1, 1, 4),
    _AgnClkSrcPort_Type()
)
agnClkSrcPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnClkSrcPort.setStatus("current")
_AgnClkSrcPortRowStatus_Type = RowStatus
_AgnClkSrcPortRowStatus_Object = MibTableColumn
agnClkSrcPortRowStatus = _AgnClkSrcPortRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 1, 1, 5),
    _AgnClkSrcPortRowStatus_Type()
)
agnClkSrcPortRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnClkSrcPortRowStatus.setStatus("current")


class _AgnClkSrcPortAdminStatus_Type(Integer32):
    """Custom type agnClkSrcPortAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("notApplicable", 1),
          ("up", 3))
    )


_AgnClkSrcPortAdminStatus_Type.__name__ = "Integer32"
_AgnClkSrcPortAdminStatus_Object = MibTableColumn
agnClkSrcPortAdminStatus = _AgnClkSrcPortAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 1, 1, 6),
    _AgnClkSrcPortAdminStatus_Type()
)
agnClkSrcPortAdminStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnClkSrcPortAdminStatus.setStatus("current")


class _AgnClkSrcPortType_Type(Integer32):
    """Custom type agnClkSrcPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("adaptive", 2),
          ("commonClock", 4),
          ("ieee1588v2", 3),
          ("notApplicable", 1))
    )


_AgnClkSrcPortType_Type.__name__ = "Integer32"
_AgnClkSrcPortType_Object = MibTableColumn
agnClkSrcPortType = _AgnClkSrcPortType_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 1, 1, 7),
    _AgnClkSrcPortType_Type()
)
agnClkSrcPortType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnClkSrcPortType.setStatus("current")


class _AgnClkSrcPortQuality_Type(Integer32):
    """Custom type agnClkSrcPortQuality based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("stratum1", 2),
          ("stratum2", 3),
          ("stratum3", 4),
          ("stratum3e", 5),
          ("stratum4", 6))
    )


_AgnClkSrcPortQuality_Type.__name__ = "Integer32"
_AgnClkSrcPortQuality_Object = MibTableColumn
agnClkSrcPortQuality = _AgnClkSrcPortQuality_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 1, 1, 8),
    _AgnClkSrcPortQuality_Type()
)
agnClkSrcPortQuality.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnClkSrcPortQuality.setStatus("current")


class _AgnClkSrcPortNetType_Type(Integer32):
    """Custom type agnClkSrcPortNetType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("typeA", 2),
          ("typeB", 3),
          ("typeC", 4),
          ("typeD", 5),
          ("typeE", 6),
          ("typeF", 7))
    )


_AgnClkSrcPortNetType_Type.__name__ = "Integer32"
_AgnClkSrcPortNetType_Object = MibTableColumn
agnClkSrcPortNetType = _AgnClkSrcPortNetType_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 1, 1, 9),
    _AgnClkSrcPortNetType_Type()
)
agnClkSrcPortNetType.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnClkSrcPortNetType.setStatus("current")


class _AgnClkSrcPortState_Type(Integer32):
    """Custom type agnClkSrcPortState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("finePhaseLock", 4),
          ("freeRun", 1),
          ("frequencyAcquisition", 2),
          ("holdover", 5),
          ("notApplicable", 6),
          ("rapidPhaseLock", 3))
    )


_AgnClkSrcPortState_Type.__name__ = "Integer32"
_AgnClkSrcPortState_Object = MibTableColumn
agnClkSrcPortState = _AgnClkSrcPortState_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 1, 1, 10),
    _AgnClkSrcPortState_Type()
)
agnClkSrcPortState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnClkSrcPortState.setStatus("current")
_AgnCurrClkTable_Object = MibTable
agnCurrClkTable = _AgnCurrClkTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 2)
)
if mibBuilder.loadTexts:
    agnCurrClkTable.setStatus("current")
_AgnCurrClkEntry_Object = MibTableRow
agnCurrClkEntry = _AgnCurrClkEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 2, 1)
)
agnCurrClkEntry.setIndexNames(
    (0, "RAD-MIB", "agnCurrClkObjIdx"),
)
if mibBuilder.loadTexts:
    agnCurrClkEntry.setStatus("current")


class _AgnCurrClkObjIdx_Type(Integer32):
    """Custom type agnCurrClkObjIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_AgnCurrClkObjIdx_Type.__name__ = "Integer32"
_AgnCurrClkObjIdx_Object = MibTableColumn
agnCurrClkObjIdx = _AgnCurrClkObjIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 2, 1, 1),
    _AgnCurrClkObjIdx_Type()
)
agnCurrClkObjIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    agnCurrClkObjIdx.setStatus("current")


class _AgnCurrClkMode_Type(Integer32):
    """Custom type agnCurrClkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fallback", 2),
          ("internal", 3),
          ("master", 1))
    )


_AgnCurrClkMode_Type.__name__ = "Integer32"
_AgnCurrClkMode_Object = MibTableColumn
agnCurrClkMode = _AgnCurrClkMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 2, 1, 2),
    _AgnCurrClkMode_Type()
)
agnCurrClkMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCurrClkMode.setStatus("current")


class _AgnCurrClkSrc_Type(Integer32):
    """Custom type agnCurrClkSrc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              255)
        )
    )
    namedValues = NamedValues(
        *(("adaptive", 7),
          ("automatic", 9),
          ("internal", 2),
          ("lbt", 5),
          ("none", 1),
          ("notApplicable", 255),
          ("ntr", 6),
          ("rxClk", 3),
          ("sSubsystem", 11),
          ("station", 4),
          ("stationB", 8),
          ("system", 10))
    )


_AgnCurrClkSrc_Type.__name__ = "Integer32"
_AgnCurrClkSrc_Object = MibTableColumn
agnCurrClkSrc = _AgnCurrClkSrc_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 2, 1, 3),
    _AgnCurrClkSrc_Type()
)
agnCurrClkSrc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCurrClkSrc.setStatus("current")


class _AgnCurrClkPort_Type(Integer32):
    """Custom type agnCurrClkPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_AgnCurrClkPort_Type.__name__ = "Integer32"
_AgnCurrClkPort_Object = MibTableColumn
agnCurrClkPort = _AgnCurrClkPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 2, 1, 4),
    _AgnCurrClkPort_Type()
)
agnCurrClkPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCurrClkPort.setStatus("current")


class _AgnCurrClkHoldover_Type(Integer32):
    """Custom type agnCurrClkHoldover based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_AgnCurrClkHoldover_Type.__name__ = "Integer32"
_AgnCurrClkHoldover_Object = MibTableColumn
agnCurrClkHoldover = _AgnCurrClkHoldover_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 2, 1, 5),
    _AgnCurrClkHoldover_Type()
)
agnCurrClkHoldover.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCurrClkHoldover.setStatus("current")


class _AgnCurrClkSsmBased_Type(Integer32):
    """Custom type agnCurrClkSsmBased based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("notApplicable", 1),
          ("yes", 3))
    )


_AgnCurrClkSsmBased_Type.__name__ = "Integer32"
_AgnCurrClkSsmBased_Object = MibTableColumn
agnCurrClkSsmBased = _AgnCurrClkSsmBased_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 2, 1, 6),
    _AgnCurrClkSsmBased_Type()
)
agnCurrClkSsmBased.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCurrClkSsmBased.setStatus("current")


class _AgnCurrClkState_Type(Integer32):
    """Custom type agnCurrClkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("finePhaseLock", 3),
          ("freeRun", 1),
          ("holdover", 4),
          ("rapidPhaseLock", 2))
    )


_AgnCurrClkState_Type.__name__ = "Integer32"
_AgnCurrClkState_Object = MibTableColumn
agnCurrClkState = _AgnCurrClkState_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 2, 1, 7),
    _AgnCurrClkState_Type()
)
agnCurrClkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCurrClkState.setStatus("current")


class _AgnCurrClkQualification_Type(Integer32):
    """Custom type agnCurrClkQualification based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disqualified", 2),
          ("notApplicable", 1),
          ("qualified", 3))
    )


_AgnCurrClkQualification_Type.__name__ = "Integer32"
_AgnCurrClkQualification_Object = MibTableColumn
agnCurrClkQualification = _AgnCurrClkQualification_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 2, 1, 8),
    _AgnCurrClkQualification_Type()
)
agnCurrClkQualification.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnCurrClkQualification.setStatus("current")
_AgnClockMonitoring_ObjectIdentity = ObjectIdentity
agnClockMonitoring = _AgnClockMonitoring_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 3)
)
_AgnClkCurrentTable_Object = MibTable
agnClkCurrentTable = _AgnClkCurrentTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 3, 1)
)
if mibBuilder.loadTexts:
    agnClkCurrentTable.setStatus("current")
_AgnClkCurrentEntry_Object = MibTableRow
agnClkCurrentEntry = _AgnClkCurrentEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 3, 1, 1)
)
agnClkCurrentEntry.setIndexNames(
    (0, "RAD-MIB", "agnClkCurrentIndex"),
)
if mibBuilder.loadTexts:
    agnClkCurrentEntry.setStatus("current")
_AgnClkCurrentIndex_Type = Unsigned32
_AgnClkCurrentIndex_Object = MibTableColumn
agnClkCurrentIndex = _AgnClkCurrentIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 3, 1, 1, 1),
    _AgnClkCurrentIndex_Type()
)
agnClkCurrentIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    agnClkCurrentIndex.setStatus("current")
_AgnClkCurrentRxPackets_Type = Gauge32
_AgnClkCurrentRxPackets_Object = MibTableColumn
agnClkCurrentRxPackets = _AgnClkCurrentRxPackets_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 3, 1, 1, 2),
    _AgnClkCurrentRxPackets_Type()
)
agnClkCurrentRxPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnClkCurrentRxPackets.setStatus("current")
_AgnClkCurrentLostPackets_Type = Gauge32
_AgnClkCurrentLostPackets_Object = MibTableColumn
agnClkCurrentLostPackets = _AgnClkCurrentLostPackets_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 3, 1, 1, 3),
    _AgnClkCurrentLostPackets_Type()
)
agnClkCurrentLostPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnClkCurrentLostPackets.setStatus("current")
_AgnClkCurrentOutOfOrderPackets_Type = Gauge32
_AgnClkCurrentOutOfOrderPackets_Object = MibTableColumn
agnClkCurrentOutOfOrderPackets = _AgnClkCurrentOutOfOrderPackets_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 3, 1, 1, 4),
    _AgnClkCurrentOutOfOrderPackets_Type()
)
agnClkCurrentOutOfOrderPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnClkCurrentOutOfOrderPackets.setStatus("current")
_AgnClkCurrentBufferUnderflow_Type = Gauge32
_AgnClkCurrentBufferUnderflow_Object = MibTableColumn
agnClkCurrentBufferUnderflow = _AgnClkCurrentBufferUnderflow_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 3, 1, 1, 5),
    _AgnClkCurrentBufferUnderflow_Type()
)
agnClkCurrentBufferUnderflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnClkCurrentBufferUnderflow.setStatus("current")
_AgnClkIntervalTable_Object = MibTable
agnClkIntervalTable = _AgnClkIntervalTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 3, 2)
)
if mibBuilder.loadTexts:
    agnClkIntervalTable.setStatus("current")
_AgnClkIntervalEntry_Object = MibTableRow
agnClkIntervalEntry = _AgnClkIntervalEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 3, 2, 1)
)
agnClkIntervalEntry.setIndexNames(
    (0, "RAD-MIB", "agnClkIntervalIndex"),
    (0, "RAD-MIB", "agnClkIntervalNumber"),
)
if mibBuilder.loadTexts:
    agnClkIntervalEntry.setStatus("current")
_AgnClkIntervalIndex_Type = Unsigned32
_AgnClkIntervalIndex_Object = MibTableColumn
agnClkIntervalIndex = _AgnClkIntervalIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 3, 2, 1, 1),
    _AgnClkIntervalIndex_Type()
)
agnClkIntervalIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    agnClkIntervalIndex.setStatus("current")
_AgnClkIntervalNumber_Type = Unsigned32
_AgnClkIntervalNumber_Object = MibTableColumn
agnClkIntervalNumber = _AgnClkIntervalNumber_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 3, 2, 1, 2),
    _AgnClkIntervalNumber_Type()
)
agnClkIntervalNumber.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    agnClkIntervalNumber.setStatus("current")
_AgnClkIntervalRxPackets_Type = Gauge32
_AgnClkIntervalRxPackets_Object = MibTableColumn
agnClkIntervalRxPackets = _AgnClkIntervalRxPackets_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 3, 2, 1, 3),
    _AgnClkIntervalRxPackets_Type()
)
agnClkIntervalRxPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnClkIntervalRxPackets.setStatus("current")
_AgnClkIntervalLostPackets_Type = Gauge32
_AgnClkIntervalLostPackets_Object = MibTableColumn
agnClkIntervalLostPackets = _AgnClkIntervalLostPackets_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 3, 2, 1, 4),
    _AgnClkIntervalLostPackets_Type()
)
agnClkIntervalLostPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnClkIntervalLostPackets.setStatus("current")
_AgnClkIntervalOutOfOrderPackets_Type = Gauge32
_AgnClkIntervalOutOfOrderPackets_Object = MibTableColumn
agnClkIntervalOutOfOrderPackets = _AgnClkIntervalOutOfOrderPackets_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 3, 2, 1, 5),
    _AgnClkIntervalOutOfOrderPackets_Type()
)
agnClkIntervalOutOfOrderPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnClkIntervalOutOfOrderPackets.setStatus("current")
_AgnClkIntervalBufferUnderflow_Type = Gauge32
_AgnClkIntervalBufferUnderflow_Object = MibTableColumn
agnClkIntervalBufferUnderflow = _AgnClkIntervalBufferUnderflow_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 52, 3, 2, 1, 6),
    _AgnClkIntervalBufferUnderflow_Type()
)
agnClkIntervalBufferUnderflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnClkIntervalBufferUnderflow.setStatus("current")
_AgnMaxNoOfConns_Type = Integer32
_AgnMaxNoOfConns_Object = MibScalar
agnMaxNoOfConns = _AgnMaxNoOfConns_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 53),
    _AgnMaxNoOfConns_Type()
)
agnMaxNoOfConns.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnMaxNoOfConns.setStatus("current")
_Lag_ObjectIdentity = ObjectIdentity
lag = _Lag_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 54)
)
_LagTable_Object = MibTable
lagTable = _LagTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 54, 1)
)
if mibBuilder.loadTexts:
    lagTable.setStatus("current")
_LagEntry_Object = MibTableRow
lagEntry = _LagEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 54, 1, 1)
)
lagEntry.setIndexNames(
    (0, "RAD-MIB", "lagCnfgIdx"),
    (0, "RAD-MIB", "lagIdx"),
)
if mibBuilder.loadTexts:
    lagEntry.setStatus("current")


class _LagCnfgIdx_Type(Unsigned32):
    """Custom type lagCnfgIdx based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_LagCnfgIdx_Type.__name__ = "Unsigned32"
_LagCnfgIdx_Object = MibTableColumn
lagCnfgIdx = _LagCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 54, 1, 1, 1),
    _LagCnfgIdx_Type()
)
lagCnfgIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    lagCnfgIdx.setStatus("current")
_LagIdx_Type = Unsigned32
_LagIdx_Object = MibTableColumn
lagIdx = _LagIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 54, 1, 1, 2),
    _LagIdx_Type()
)
lagIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    lagIdx.setStatus("current")
_LagPortMembers_Type = PortList
_LagPortMembers_Object = MibTableColumn
lagPortMembers = _LagPortMembers_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 54, 1, 1, 3),
    _LagPortMembers_Type()
)
lagPortMembers.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    lagPortMembers.setStatus("current")


class _LagDistributionMethod_Type(Integer32):
    """Custom type lagDistributionMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("destinationIp", 9),
          ("destinationMac", 5),
          ("oneToOne", 3),
          ("portBased", 2),
          ("roundRobin", 11),
          ("sourceAndDestinationMac", 7),
          ("sourceAndDestinationMacAndIp", 10),
          ("sourceIp", 8),
          ("sourceMac", 4),
          ("sourceXorDestinationMac", 6))
    )


_LagDistributionMethod_Type.__name__ = "Integer32"
_LagDistributionMethod_Object = MibTableColumn
lagDistributionMethod = _LagDistributionMethod_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 54, 1, 1, 4),
    _LagDistributionMethod_Type()
)
lagDistributionMethod.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    lagDistributionMethod.setStatus("current")


class _LagRecoveryMode_Type(Integer32):
    """Custom type lagRecoveryMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("nonRevertive", 2),
          ("revertive", 3))
    )


_LagRecoveryMode_Type.__name__ = "Integer32"
_LagRecoveryMode_Object = MibTableColumn
lagRecoveryMode = _LagRecoveryMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 54, 1, 1, 5),
    _LagRecoveryMode_Type()
)
lagRecoveryMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    lagRecoveryMode.setStatus("current")


class _LagWaitToRestore_Type(Unsigned32):
    """Custom type lagWaitToRestore based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 720),
    )


_LagWaitToRestore_Type.__name__ = "Unsigned32"
_LagWaitToRestore_Object = MibTableColumn
lagWaitToRestore = _LagWaitToRestore_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 54, 1, 1, 6),
    _LagWaitToRestore_Type()
)
lagWaitToRestore.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    lagWaitToRestore.setStatus("current")
_LagRowStatus_Type = RowStatus
_LagRowStatus_Object = MibTableColumn
lagRowStatus = _LagRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 54, 1, 1, 7),
    _LagRowStatus_Type()
)
lagRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    lagRowStatus.setStatus("current")


class _LagShutDownDurationUponFlip_Type(Unsigned32):
    """Custom type lagShutDownDurationUponFlip based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30),
    )


_LagShutDownDurationUponFlip_Type.__name__ = "Unsigned32"
_LagShutDownDurationUponFlip_Object = MibTableColumn
lagShutDownDurationUponFlip = _LagShutDownDurationUponFlip_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 54, 1, 1, 8),
    _LagShutDownDurationUponFlip_Type()
)
lagShutDownDurationUponFlip.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    lagShutDownDurationUponFlip.setStatus("current")


class _LagRdnMethod_Type(Integer32):
    """Custom type lagRdnMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("loadSharing", 1),
          ("redundancy", 2))
    )


_LagRdnMethod_Type.__name__ = "Integer32"
_LagRdnMethod_Object = MibTableColumn
lagRdnMethod = _LagRdnMethod_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 54, 1, 1, 9),
    _LagRdnMethod_Type()
)
lagRdnMethod.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    lagRdnMethod.setStatus("current")


class _LagLacpEnable_Type(Integer32):
    """Custom type lagLacpEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_LagLacpEnable_Type.__name__ = "Integer32"
_LagLacpEnable_Object = MibTableColumn
lagLacpEnable = _LagLacpEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 54, 1, 1, 10),
    _LagLacpEnable_Type()
)
lagLacpEnable.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    lagLacpEnable.setStatus("current")
_LagStatTable_Object = MibTable
lagStatTable = _LagStatTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 54, 2)
)
if mibBuilder.loadTexts:
    lagStatTable.setStatus("current")
_LagStatEntry_Object = MibTableRow
lagStatEntry = _LagStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 54, 2, 1)
)
lagStatEntry.setIndexNames(
    (0, "RAD-MIB", "lagIdx"),
)
if mibBuilder.loadTexts:
    lagStatEntry.setStatus("current")
_LagStatForcePort_Type = Unsigned32
_LagStatForcePort_Object = MibTableColumn
lagStatForcePort = _LagStatForcePort_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 54, 2, 1, 1),
    _LagStatForcePort_Type()
)
lagStatForcePort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lagStatForcePort.setStatus("current")
_LagStatActivePort_Type = Unsigned32
_LagStatActivePort_Object = MibTableColumn
lagStatActivePort = _LagStatActivePort_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 54, 2, 1, 2),
    _LagStatActivePort_Type()
)
lagStatActivePort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lagStatActivePort.setStatus("current")
_Gfp_ObjectIdentity = ObjectIdentity
gfp = _Gfp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 55)
)
_GfpCnfgTable_Object = MibTable
gfpCnfgTable = _GfpCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 55, 1)
)
if mibBuilder.loadTexts:
    gfpCnfgTable.setStatus("current")
_GfpCnfgEntry_Object = MibTableRow
gfpCnfgEntry = _GfpCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 55, 1, 1)
)
gfpCnfgEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RAD-MIB", "gfpCnfgIdx"),
)
if mibBuilder.loadTexts:
    gfpCnfgEntry.setStatus("current")
_GfpCnfgIdx_Type = Unsigned32
_GfpCnfgIdx_Object = MibTableColumn
gfpCnfgIdx = _GfpCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 55, 1, 1, 1),
    _GfpCnfgIdx_Type()
)
gfpCnfgIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    gfpCnfgIdx.setStatus("current")


class _GfpPayloadFcs_Type(Integer32):
    """Custom type gfpPayloadFcs based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_GfpPayloadFcs_Type.__name__ = "Integer32"
_GfpPayloadFcs_Object = MibTableColumn
gfpPayloadFcs = _GfpPayloadFcs_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 55, 1, 1, 2),
    _GfpPayloadFcs_Type()
)
gfpPayloadFcs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    gfpPayloadFcs.setStatus("current")


class _GfpRxTxScramble_Type(Integer32):
    """Custom type gfpRxTxScramble based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("noScramble", 1),
          ("rxOnlyScramble", 3),
          ("rxTxScramble", 2),
          ("txOnlyScramble", 4))
    )


_GfpRxTxScramble_Type.__name__ = "Integer32"
_GfpRxTxScramble_Object = MibTableColumn
gfpRxTxScramble = _GfpRxTxScramble_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 55, 1, 1, 3),
    _GfpRxTxScramble_Type()
)
gfpRxTxScramble.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    gfpRxTxScramble.setStatus("current")


class _GfpVcatHeader_Type(Integer32):
    """Custom type gfpVcatHeader based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_GfpVcatHeader_Type.__name__ = "Integer32"
_GfpVcatHeader_Object = MibTableColumn
gfpVcatHeader = _GfpVcatHeader_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 55, 1, 1, 4),
    _GfpVcatHeader_Type()
)
gfpVcatHeader.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    gfpVcatHeader.setStatus("current")
_AgnGroupTable_Object = MibTable
agnGroupTable = _AgnGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 56)
)
if mibBuilder.loadTexts:
    agnGroupTable.setStatus("current")
_AgnGroupEntry_Object = MibTableRow
agnGroupEntry = _AgnGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 56, 1)
)
agnGroupEntry.setIndexNames(
    (0, "RAD-MIB", "agnGroupCnfgIdx"),
    (0, "RAD-MIB", "agnGroupIdx"),
    (0, "RAD-MIB", "agnGroupComponentIdx"),
)
if mibBuilder.loadTexts:
    agnGroupEntry.setStatus("current")


class _AgnGroupCnfgIdx_Type(Unsigned32):
    """Custom type agnGroupCnfgIdx based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_AgnGroupCnfgIdx_Type.__name__ = "Unsigned32"
_AgnGroupCnfgIdx_Object = MibTableColumn
agnGroupCnfgIdx = _AgnGroupCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 56, 1, 1),
    _AgnGroupCnfgIdx_Type()
)
agnGroupCnfgIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    agnGroupCnfgIdx.setStatus("current")
_AgnGroupIdx_Type = Unsigned32
_AgnGroupIdx_Object = MibTableColumn
agnGroupIdx = _AgnGroupIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 56, 1, 2),
    _AgnGroupIdx_Type()
)
agnGroupIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    agnGroupIdx.setStatus("current")
_AgnGroupComponentIdx_Type = Unsigned32
_AgnGroupComponentIdx_Object = MibTableColumn
agnGroupComponentIdx = _AgnGroupComponentIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 56, 1, 3),
    _AgnGroupComponentIdx_Type()
)
agnGroupComponentIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    agnGroupComponentIdx.setStatus("current")
_AgnGroupRowStatus_Type = RowStatus
_AgnGroupRowStatus_Object = MibTableColumn
agnGroupRowStatus = _AgnGroupRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 56, 1, 4),
    _AgnGroupRowStatus_Type()
)
agnGroupRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    agnGroupRowStatus.setStatus("current")
_AgnStatNoOfUploadedIntervals_Type = Integer32
_AgnStatNoOfUploadedIntervals_Object = MibScalar
agnStatNoOfUploadedIntervals = _AgnStatNoOfUploadedIntervals_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 57),
    _AgnStatNoOfUploadedIntervals_Type()
)
agnStatNoOfUploadedIntervals.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnStatNoOfUploadedIntervals.setStatus("current")
_AgnSyslog_ObjectIdentity = ObjectIdentity
agnSyslog = _AgnSyslog_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 58)
)
_AgnSyslogDeviceUdpPort_Type = Unsigned32
_AgnSyslogDeviceUdpPort_Object = MibScalar
agnSyslogDeviceUdpPort = _AgnSyslogDeviceUdpPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 58, 1),
    _AgnSyslogDeviceUdpPort_Type()
)
agnSyslogDeviceUdpPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnSyslogDeviceUdpPort.setStatus("current")


class _AgnSyslogFacility_Type(Integer32):
    """Custom type agnSyslogFacility based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(17,
              18,
              19,
              20,
              21,
              22,
              23)
        )
    )
    namedValues = NamedValues(
        *(("local1", 17),
          ("local2", 18),
          ("local3", 19),
          ("local4", 20),
          ("local5", 21),
          ("local6", 22),
          ("local7", 23))
    )


_AgnSyslogFacility_Type.__name__ = "Integer32"
_AgnSyslogFacility_Object = MibScalar
agnSyslogFacility = _AgnSyslogFacility_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 58, 2),
    _AgnSyslogFacility_Type()
)
agnSyslogFacility.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnSyslogFacility.setStatus("current")


class _AgnSyslogSeverityLevel_Type(Integer32):
    """Custom type agnSyslogSeverityLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("critical", 1),
          ("debug", 7),
          ("event", 5),
          ("info", 6),
          ("major", 2),
          ("minor", 3),
          ("warning", 4))
    )


_AgnSyslogSeverityLevel_Type.__name__ = "Integer32"
_AgnSyslogSeverityLevel_Object = MibScalar
agnSyslogSeverityLevel = _AgnSyslogSeverityLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 58, 3),
    _AgnSyslogSeverityLevel_Type()
)
agnSyslogSeverityLevel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnSyslogSeverityLevel.setStatus("current")


class _AgnNetworkInterfaceType_Type(Integer32):
    """Custom type agnNetworkInterfaceType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("t1", 2),
          ("t3", 3))
    )


_AgnNetworkInterfaceType_Type.__name__ = "Integer32"
_AgnNetworkInterfaceType_Object = MibScalar
agnNetworkInterfaceType = _AgnNetworkInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 59),
    _AgnNetworkInterfaceType_Type()
)
agnNetworkInterfaceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnNetworkInterfaceType.setStatus("current")
_AgnTrapDelay_Type = Unsigned32
_AgnTrapDelay_Object = MibScalar
agnTrapDelay = _AgnTrapDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 60),
    _AgnTrapDelay_Type()
)
agnTrapDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    agnTrapDelay.setStatus("current")
_AgnStringToIndexTable_Object = MibTable
agnStringToIndexTable = _AgnStringToIndexTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 62)
)
if mibBuilder.loadTexts:
    agnStringToIndexTable.setStatus("current")
_AgnStringToIndexEntry_Object = MibTableRow
agnStringToIndexEntry = _AgnStringToIndexEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 62, 1)
)
agnStringToIndexEntry.setIndexNames(
    (0, "RAD-MIB", "agnStringToIndexTableId"),
    (1, "RAD-MIB", "agnStringToIndexUserName"),
)
if mibBuilder.loadTexts:
    agnStringToIndexEntry.setStatus("current")
_AgnStringToIndexTableId_Type = ObjectIdentifier
_AgnStringToIndexTableId_Object = MibTableColumn
agnStringToIndexTableId = _AgnStringToIndexTableId_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 62, 1, 1),
    _AgnStringToIndexTableId_Type()
)
agnStringToIndexTableId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    agnStringToIndexTableId.setStatus("current")


class _AgnStringToIndexUserName_Type(SnmpAdminString):
    """Custom type agnStringToIndexUserName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_AgnStringToIndexUserName_Type.__name__ = "SnmpAdminString"
_AgnStringToIndexUserName_Object = MibTableColumn
agnStringToIndexUserName = _AgnStringToIndexUserName_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 62, 1, 2),
    _AgnStringToIndexUserName_Type()
)
agnStringToIndexUserName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    agnStringToIndexUserName.setStatus("current")
_AgnStringToIndexTableIndex_Type = Unsigned32
_AgnStringToIndexTableIndex_Object = MibTableColumn
agnStringToIndexTableIndex = _AgnStringToIndexTableIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 62, 1, 3),
    _AgnStringToIndexTableIndex_Type()
)
agnStringToIndexTableIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnStringToIndexTableIndex.setStatus("current")
_AgnRowPointerTable_Object = MibTable
agnRowPointerTable = _AgnRowPointerTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 63)
)
if mibBuilder.loadTexts:
    agnRowPointerTable.setStatus("current")
_AgnRowPointerEntry_Object = MibTableRow
agnRowPointerEntry = _AgnRowPointerEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 63, 1)
)
agnRowPointerEntry.setIndexNames(
    (0, "RAD-MIB", "agnRowPointerIndex"),
)
if mibBuilder.loadTexts:
    agnRowPointerEntry.setStatus("current")
_AgnRowPointerIndex_Type = ObjectIdentifier
_AgnRowPointerIndex_Object = MibTableColumn
agnRowPointerIndex = _AgnRowPointerIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 63, 1, 1),
    _AgnRowPointerIndex_Type()
)
agnRowPointerIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    agnRowPointerIndex.setStatus("current")
_AgnRowPointerNoOfUsages_Type = Unsigned32
_AgnRowPointerNoOfUsages_Object = MibTableColumn
agnRowPointerNoOfUsages = _AgnRowPointerNoOfUsages_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 2, 63, 1, 2),
    _AgnRowPointerNoOfUsages_Type()
)
agnRowPointerNoOfUsages.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    agnRowPointerNoOfUsages.setStatus("current")
_Services_ObjectIdentity = ObjectIdentity
services = _Services_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 3)
)
_Wfq_ObjectIdentity = ObjectIdentity
wfq = _Wfq_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 1)
)
_WfqTable_Object = MibTable
wfqTable = _WfqTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 1, 1)
)
if mibBuilder.loadTexts:
    wfqTable.setStatus("current")
_WfqEntry_Object = MibTableRow
wfqEntry = _WfqEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 1, 1, 1)
)
wfqEntry.setIndexNames(
    (0, "RAD-MIB", "wfqCnfgIdx"),
    (0, "RAD-MIB", "wfqPrtIdx"),
    (0, "RAD-MIB", "wfqTblIdx"),
    (0, "RAD-MIB", "wfqQueueIdx"),
)
if mibBuilder.loadTexts:
    wfqEntry.setStatus("current")


class _WfqCnfgIdx_Type(Integer32):
    """Custom type wfqCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_WfqCnfgIdx_Type.__name__ = "Integer32"
_WfqCnfgIdx_Object = MibTableColumn
wfqCnfgIdx = _WfqCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 1, 1, 1, 1),
    _WfqCnfgIdx_Type()
)
wfqCnfgIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    wfqCnfgIdx.setStatus("current")
_WfqPrtIdx_Type = Integer32
_WfqPrtIdx_Object = MibTableColumn
wfqPrtIdx = _WfqPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 1, 1, 1, 2),
    _WfqPrtIdx_Type()
)
wfqPrtIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    wfqPrtIdx.setStatus("current")
_WfqTblIdx_Type = Integer32
_WfqTblIdx_Object = MibTableColumn
wfqTblIdx = _WfqTblIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 1, 1, 1, 3),
    _WfqTblIdx_Type()
)
wfqTblIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    wfqTblIdx.setStatus("current")
_WfqQueueIdx_Type = Integer32
_WfqQueueIdx_Object = MibTableColumn
wfqQueueIdx = _WfqQueueIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 1, 1, 1, 4),
    _WfqQueueIdx_Type()
)
wfqQueueIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    wfqQueueIdx.setStatus("current")
_WfqRowStatus_Type = RowStatus
_WfqRowStatus_Object = MibTableColumn
wfqRowStatus = _WfqRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 1, 1, 1, 5),
    _WfqRowStatus_Type()
)
wfqRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wfqRowStatus.setStatus("current")


class _WfqWeightValue_Type(Integer32):
    """Custom type wfqWeightValue based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_WfqWeightValue_Type.__name__ = "Integer32"
_WfqWeightValue_Object = MibTableColumn
wfqWeightValue = _WfqWeightValue_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 1, 1, 1, 6),
    _WfqWeightValue_Type()
)
wfqWeightValue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wfqWeightValue.setStatus("current")
if mibBuilder.loadTexts:
    wfqWeightValue.setUnits("%")


class _WfqSchedulingMode_Type(Integer32):
    """Custom type wfqSchedulingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_WfqSchedulingMode_Type.__name__ = "Integer32"
_WfqSchedulingMode_Object = MibTableColumn
wfqSchedulingMode = _WfqSchedulingMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 1, 1, 1, 7),
    _WfqSchedulingMode_Type()
)
wfqSchedulingMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wfqSchedulingMode.setStatus("current")
_WfqMinRateAbsolute_Type = Unsigned32
_WfqMinRateAbsolute_Object = MibTableColumn
wfqMinRateAbsolute = _WfqMinRateAbsolute_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 1, 1, 1, 8),
    _WfqMinRateAbsolute_Type()
)
wfqMinRateAbsolute.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wfqMinRateAbsolute.setStatus("current")
if mibBuilder.loadTexts:
    wfqMinRateAbsolute.setUnits("Kbps")
_WfqMaxPacketSize_Type = Unsigned32
_WfqMaxPacketSize_Object = MibTableColumn
wfqMaxPacketSize = _WfqMaxPacketSize_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 1, 1, 1, 9),
    _WfqMaxPacketSize_Type()
)
wfqMaxPacketSize.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wfqMaxPacketSize.setStatus("current")
_DscpMapping_ObjectIdentity = ObjectIdentity
dscpMapping = _DscpMapping_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 2)
)
_DscpMappingTable_Object = MibTable
dscpMappingTable = _DscpMappingTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 2, 1)
)
if mibBuilder.loadTexts:
    dscpMappingTable.setStatus("current")
_DscpMappingEntry_Object = MibTableRow
dscpMappingEntry = _DscpMappingEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 2, 1, 1)
)
dscpMappingEntry.setIndexNames(
    (0, "RAD-MIB", "dscpMappingCnfgIdx"),
    (0, "RAD-MIB", "dscpMappingDscpIdx"),
)
if mibBuilder.loadTexts:
    dscpMappingEntry.setStatus("current")


class _DscpMappingCnfgIdx_Type(Integer32):
    """Custom type dscpMappingCnfgIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2147483647),
    )


_DscpMappingCnfgIdx_Type.__name__ = "Integer32"
_DscpMappingCnfgIdx_Object = MibTableColumn
dscpMappingCnfgIdx = _DscpMappingCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 2, 1, 1, 1),
    _DscpMappingCnfgIdx_Type()
)
dscpMappingCnfgIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dscpMappingCnfgIdx.setStatus("current")
_DscpMappingDscpIdx_Type = Dscp
_DscpMappingDscpIdx_Object = MibTableColumn
dscpMappingDscpIdx = _DscpMappingDscpIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 2, 1, 1, 2),
    _DscpMappingDscpIdx_Type()
)
dscpMappingDscpIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dscpMappingDscpIdx.setStatus("current")
_DscpMappingRegenPriority_Type = Integer32
_DscpMappingRegenPriority_Object = MibTableColumn
dscpMappingRegenPriority = _DscpMappingRegenPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 2, 1, 1, 3),
    _DscpMappingRegenPriority_Type()
)
dscpMappingRegenPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dscpMappingRegenPriority.setStatus("current")
_IfTeQos_ObjectIdentity = ObjectIdentity
ifTeQos = _IfTeQos_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 3)
)
_IfTeQosTable_Object = MibTable
ifTeQosTable = _IfTeQosTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 3, 1)
)
if mibBuilder.loadTexts:
    ifTeQosTable.setStatus("current")
_IfTeQosEntry_Object = MibTableRow
ifTeQosEntry = _IfTeQosEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 3, 1, 1)
)
ifTeQosEntry.setIndexNames(
    (0, "RAD-MIB", "ifTeQosIdx1"),
    (0, "RAD-MIB", "ifTeQosIdx2"),
    (0, "RAD-MIB", "ifTeQosIdx3"),
)
if mibBuilder.loadTexts:
    ifTeQosEntry.setStatus("current")
_IfTeQosIdx1_Type = Integer32
_IfTeQosIdx1_Object = MibTableColumn
ifTeQosIdx1 = _IfTeQosIdx1_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 3, 1, 1, 1),
    _IfTeQosIdx1_Type()
)
ifTeQosIdx1.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ifTeQosIdx1.setStatus("current")
_IfTeQosIdx2_Type = Integer32
_IfTeQosIdx2_Object = MibTableColumn
ifTeQosIdx2 = _IfTeQosIdx2_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 3, 1, 1, 2),
    _IfTeQosIdx2_Type()
)
ifTeQosIdx2.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ifTeQosIdx2.setStatus("current")
_IfTeQosIdx3_Type = Integer32
_IfTeQosIdx3_Object = MibTableColumn
ifTeQosIdx3 = _IfTeQosIdx3_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 3, 1, 1, 3),
    _IfTeQosIdx3_Type()
)
ifTeQosIdx3.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ifTeQosIdx3.setStatus("current")
_IfTeQosParam_Type = OctetString
_IfTeQosParam_Object = MibTableColumn
ifTeQosParam = _IfTeQosParam_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 3, 1, 1, 4),
    _IfTeQosParam_Type()
)
ifTeQosParam.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ifTeQosParam.setStatus("current")
_IfTeQosParam2_Type = OctetString
_IfTeQosParam2_Object = MibTableColumn
ifTeQosParam2 = _IfTeQosParam2_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 3, 1, 1, 5),
    _IfTeQosParam2_Type()
)
ifTeQosParam2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ifTeQosParam2.setStatus("current")


class _IfTeQosStatus_Type(Integer32):
    """Custom type ifTeQosStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              4,
              6)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("createAndGo", 4),
          ("destroy", 6))
    )


_IfTeQosStatus_Type.__name__ = "Integer32"
_IfTeQosStatus_Object = MibTableColumn
ifTeQosStatus = _IfTeQosStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 3, 1, 1, 6),
    _IfTeQosStatus_Type()
)
ifTeQosStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ifTeQosStatus.setStatus("current")
_PortQos_ObjectIdentity = ObjectIdentity
portQos = _PortQos_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 4)
)
_PrtPriorityTable_Object = MibTable
prtPriorityTable = _PrtPriorityTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 4, 1)
)
if mibBuilder.loadTexts:
    prtPriorityTable.setStatus("current")
_PrtPriorityEntry_Object = MibTableRow
prtPriorityEntry = _PrtPriorityEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 4, 1, 1)
)
prtPriorityEntry.setIndexNames(
    (0, "RAD-MIB", "prtPriorityIdx1"),
    (0, "RAD-MIB", "prtPriorityPrtIdx"),
    (0, "RAD-MIB", "prtPriorityIdx"),
)
if mibBuilder.loadTexts:
    prtPriorityEntry.setStatus("current")


class _PrtPriorityIdx1_Type(Integer32):
    """Custom type prtPriorityIdx1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PrtPriorityIdx1_Type.__name__ = "Integer32"
_PrtPriorityIdx1_Object = MibTableColumn
prtPriorityIdx1 = _PrtPriorityIdx1_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 4, 1, 1, 1),
    _PrtPriorityIdx1_Type()
)
prtPriorityIdx1.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    prtPriorityIdx1.setStatus("current")


class _PrtPriorityPrtIdx_Type(Integer32):
    """Custom type prtPriorityPrtIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_PrtPriorityPrtIdx_Type.__name__ = "Integer32"
_PrtPriorityPrtIdx_Object = MibTableColumn
prtPriorityPrtIdx = _PrtPriorityPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 4, 1, 1, 2),
    _PrtPriorityPrtIdx_Type()
)
prtPriorityPrtIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    prtPriorityPrtIdx.setStatus("current")


class _PrtPriorityIdx_Type(Integer32):
    """Custom type prtPriorityIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_PrtPriorityIdx_Type.__name__ = "Integer32"
_PrtPriorityIdx_Object = MibTableColumn
prtPriorityIdx = _PrtPriorityIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 4, 1, 1, 3),
    _PrtPriorityIdx_Type()
)
prtPriorityIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    prtPriorityIdx.setStatus("current")
_PrtPriorityIngressRateLimit_Type = Integer32
_PrtPriorityIngressRateLimit_Object = MibTableColumn
prtPriorityIngressRateLimit = _PrtPriorityIngressRateLimit_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 4, 1, 1, 4),
    _PrtPriorityIngressRateLimit_Type()
)
prtPriorityIngressRateLimit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtPriorityIngressRateLimit.setStatus("current")
_PrtQosTable_Object = MibTable
prtQosTable = _PrtQosTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 4, 2)
)
if mibBuilder.loadTexts:
    prtQosTable.setStatus("current")
_PrtQosEntry_Object = MibTableRow
prtQosEntry = _PrtQosEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 4, 2, 1)
)
prtQosEntry.setIndexNames(
    (0, "RAD-MIB", "prtQosIdx"),
    (0, "RAD-MIB", "prtQosPrtIdx"),
    (0, "RAD-MIB", "prtQosDirection"),
)
if mibBuilder.loadTexts:
    prtQosEntry.setStatus("current")
_PrtQosIdx_Type = Unsigned32
_PrtQosIdx_Object = MibTableColumn
prtQosIdx = _PrtQosIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 4, 2, 1, 1),
    _PrtQosIdx_Type()
)
prtQosIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    prtQosIdx.setStatus("current")
_PrtQosPrtIdx_Type = Unsigned32
_PrtQosPrtIdx_Object = MibTableColumn
prtQosPrtIdx = _PrtQosPrtIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 4, 2, 1, 2),
    _PrtQosPrtIdx_Type()
)
prtQosPrtIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    prtQosPrtIdx.setStatus("current")


class _PrtQosDirection_Type(Integer32):
    """Custom type prtQosDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("all", 1),
          ("egress", 3),
          ("ingress", 2))
    )


_PrtQosDirection_Type.__name__ = "Integer32"
_PrtQosDirection_Object = MibTableColumn
prtQosDirection = _PrtQosDirection_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 4, 2, 1, 3),
    _PrtQosDirection_Type()
)
prtQosDirection.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    prtQosDirection.setStatus("current")


class _PrtQosRateLimitPacketType_Type(Integer32):
    """Custom type prtQosRateLimitPacketType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("all", 1),
          ("bcast", 4),
          ("bcastAndMcast", 3),
          ("bcastAndMcastAndFloodedUcast", 2))
    )


_PrtQosRateLimitPacketType_Type.__name__ = "Integer32"
_PrtQosRateLimitPacketType_Object = MibTableColumn
prtQosRateLimitPacketType = _PrtQosRateLimitPacketType_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 4, 2, 1, 4),
    _PrtQosRateLimitPacketType_Type()
)
prtQosRateLimitPacketType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtQosRateLimitPacketType.setStatus("current")
_PrtQosRateLimitCIR_Type = Unsigned32
_PrtQosRateLimitCIR_Object = MibTableColumn
prtQosRateLimitCIR = _PrtQosRateLimitCIR_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 4, 2, 1, 5),
    _PrtQosRateLimitCIR_Type()
)
prtQosRateLimitCIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtQosRateLimitCIR.setStatus("current")
_PrtQosRateLimitCBS_Type = Unsigned32
_PrtQosRateLimitCBS_Object = MibTableColumn
prtQosRateLimitCBS = _PrtQosRateLimitCBS_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 4, 2, 1, 6),
    _PrtQosRateLimitCBS_Type()
)
prtQosRateLimitCBS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtQosRateLimitCBS.setStatus("current")
_PrtQosRateLimitEIR_Type = Unsigned32
_PrtQosRateLimitEIR_Object = MibTableColumn
prtQosRateLimitEIR = _PrtQosRateLimitEIR_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 4, 2, 1, 7),
    _PrtQosRateLimitEIR_Type()
)
prtQosRateLimitEIR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtQosRateLimitEIR.setStatus("current")
_PrtQosRateLimitEBS_Type = Unsigned32
_PrtQosRateLimitEBS_Object = MibTableColumn
prtQosRateLimitEBS = _PrtQosRateLimitEBS_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 4, 2, 1, 8),
    _PrtQosRateLimitEBS_Type()
)
prtQosRateLimitEBS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    prtQosRateLimitEBS.setStatus("current")
_PrtTrafficClass_ObjectIdentity = ObjectIdentity
prtTrafficClass = _PrtTrafficClass_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 5)
)
_PortTrafficClassTable_Object = MibTable
portTrafficClassTable = _PortTrafficClassTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 5, 1)
)
if mibBuilder.loadTexts:
    portTrafficClassTable.setStatus("current")
_PortTrafficClassEntry_Object = MibTableRow
portTrafficClassEntry = _PortTrafficClassEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 5, 1, 1)
)
portTrafficClassEntry.setIndexNames(
    (0, "RAD-MIB", "portTrafficClassIdx1"),
    (0, "RAD-MIB", "portTrafficClassPortIdx"),
)
if mibBuilder.loadTexts:
    portTrafficClassEntry.setStatus("current")


class _PortTrafficClassIdx1_Type(Integer32):
    """Custom type portTrafficClassIdx1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_PortTrafficClassIdx1_Type.__name__ = "Integer32"
_PortTrafficClassIdx1_Object = MibTableColumn
portTrafficClassIdx1 = _PortTrafficClassIdx1_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 5, 1, 1, 1),
    _PortTrafficClassIdx1_Type()
)
portTrafficClassIdx1.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    portTrafficClassIdx1.setStatus("current")


class _PortTrafficClassPortIdx_Type(Integer32):
    """Custom type portTrafficClassPortIdx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_PortTrafficClassPortIdx_Type.__name__ = "Integer32"
_PortTrafficClassPortIdx_Object = MibTableColumn
portTrafficClassPortIdx = _PortTrafficClassPortIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 5, 1, 1, 2),
    _PortTrafficClassPortIdx_Type()
)
portTrafficClassPortIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    portTrafficClassPortIdx.setStatus("current")


class _PortTrafficClass_Type(Integer32):
    """Custom type portTrafficClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_PortTrafficClass_Type.__name__ = "Integer32"
_PortTrafficClass_Object = MibTableColumn
portTrafficClass = _PortTrafficClass_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 5, 1, 1, 3),
    _PortTrafficClass_Type()
)
portTrafficClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    portTrafficClass.setStatus("current")
_ServiceTable_Object = MibTable
serviceTable = _ServiceTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 6)
)
if mibBuilder.loadTexts:
    serviceTable.setStatus("current")
_ServiceEntry_Object = MibTableRow
serviceEntry = _ServiceEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 6, 1)
)
serviceEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RAD-MIB", "flowIndex"),
    (0, "RAD-MIB", "serviceIndex"),
)
if mibBuilder.loadTexts:
    serviceEntry.setStatus("current")
_FlowIndex_Type = Unsigned32
_FlowIndex_Object = MibTableColumn
flowIndex = _FlowIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 6, 1, 1),
    _FlowIndex_Type()
)
flowIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    flowIndex.setStatus("current")


class _ServiceIndex_Type(Unsigned32):
    """Custom type serviceIndex based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_ServiceIndex_Type.__name__ = "Unsigned32"
_ServiceIndex_Object = MibTableColumn
serviceIndex = _ServiceIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 6, 1, 2),
    _ServiceIndex_Type()
)
serviceIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    serviceIndex.setStatus("current")
_ServiceRowStatus_Type = RowStatus
_ServiceRowStatus_Object = MibTableColumn
serviceRowStatus = _ServiceRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 6, 1, 3),
    _ServiceRowStatus_Type()
)
serviceRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    serviceRowStatus.setStatus("current")
_ServiceName_Type = SnmpAdminString
_ServiceName_Object = MibTableColumn
serviceName = _ServiceName_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 6, 1, 4),
    _ServiceName_Type()
)
serviceName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    serviceName.setStatus("current")
_ServiceBwProfileId_Type = Unsigned32
_ServiceBwProfileId_Object = MibTableColumn
serviceBwProfileId = _ServiceBwProfileId_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 6, 1, 5),
    _ServiceBwProfileId_Type()
)
serviceBwProfileId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    serviceBwProfileId.setStatus("current")
_EvcCosTable_Object = MibTable
evcCosTable = _EvcCosTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 7)
)
if mibBuilder.loadTexts:
    evcCosTable.setStatus("current")
_EvcCosEntry_Object = MibTableRow
evcCosEntry = _EvcCosEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 7, 1)
)
evcCosEntry.setIndexNames(
    (0, "RAD-MIB", "evcCosCnfgIdx"),
    (0, "RAD-MIB", "evcCosEvcIdx"),
)
if mibBuilder.loadTexts:
    evcCosEntry.setStatus("current")


class _EvcCosCnfgIdx_Type(Unsigned32):
    """Custom type evcCosCnfgIdx based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_EvcCosCnfgIdx_Type.__name__ = "Unsigned32"
_EvcCosCnfgIdx_Object = MibTableColumn
evcCosCnfgIdx = _EvcCosCnfgIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 7, 1, 1),
    _EvcCosCnfgIdx_Type()
)
evcCosCnfgIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    evcCosCnfgIdx.setStatus("current")


class _EvcCosEvcIdx_Type(Unsigned32):
    """Custom type evcCosEvcIdx based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4095),
    )


_EvcCosEvcIdx_Type.__name__ = "Unsigned32"
_EvcCosEvcIdx_Object = MibTableColumn
evcCosEvcIdx = _EvcCosEvcIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 7, 1, 2),
    _EvcCosEvcIdx_Type()
)
evcCosEvcIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    evcCosEvcIdx.setStatus("current")
_EvcCosRowStatus_Type = RowStatus
_EvcCosRowStatus_Object = MibTableColumn
evcCosRowStatus = _EvcCosRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 7, 1, 3),
    _EvcCosRowStatus_Type()
)
evcCosRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    evcCosRowStatus.setStatus("current")
_EvcCosEvcName_Type = SnmpAdminString
_EvcCosEvcName_Object = MibTableColumn
evcCosEvcName = _EvcCosEvcName_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 7, 1, 5),
    _EvcCosEvcName_Type()
)
evcCosEvcName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    evcCosEvcName.setStatus("current")
_EvcCosSpVlanId_Type = Unsigned32
_EvcCosSpVlanId_Object = MibTableColumn
evcCosSpVlanId = _EvcCosSpVlanId_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 7, 1, 6),
    _EvcCosSpVlanId_Type()
)
evcCosSpVlanId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    evcCosSpVlanId.setStatus("current")
_ServiceStatTable_Object = MibTable
serviceStatTable = _ServiceStatTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8)
)
if mibBuilder.loadTexts:
    serviceStatTable.setStatus("current")
_ServiceStatEntry_Object = MibTableRow
serviceStatEntry = _ServiceStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1)
)
serviceStatEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RAD-MIB", "flowIndex"),
    (0, "RAD-MIB", "serviceIndex"),
    (0, "RAD-MIB", "serviceStatDirection"),
)
if mibBuilder.loadTexts:
    serviceStatEntry.setStatus("current")


class _ServiceStatDirection_Type(Integer32):
    """Custom type serviceStatDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("downstream", 2),
          ("upstream", 1))
    )


_ServiceStatDirection_Type.__name__ = "Integer32"
_ServiceStatDirection_Object = MibTableColumn
serviceStatDirection = _ServiceStatDirection_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 1),
    _ServiceStatDirection_Type()
)
serviceStatDirection.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    serviceStatDirection.setStatus("current")
_SrvForwardGreenPackets_Type = Gauge32
_SrvForwardGreenPackets_Object = MibTableColumn
srvForwardGreenPackets = _SrvForwardGreenPackets_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 2),
    _SrvForwardGreenPackets_Type()
)
srvForwardGreenPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvForwardGreenPackets.setStatus("current")
_SrvForwardGreenPacktesOverflow_Type = Gauge32
_SrvForwardGreenPacktesOverflow_Object = MibTableColumn
srvForwardGreenPacktesOverflow = _SrvForwardGreenPacktesOverflow_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 3),
    _SrvForwardGreenPacktesOverflow_Type()
)
srvForwardGreenPacktesOverflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvForwardGreenPacktesOverflow.setStatus("current")
_SrvForwardYellowPackets_Type = Gauge32
_SrvForwardYellowPackets_Object = MibTableColumn
srvForwardYellowPackets = _SrvForwardYellowPackets_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 4),
    _SrvForwardYellowPackets_Type()
)
srvForwardYellowPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvForwardYellowPackets.setStatus("current")
_SrvForwardYellowPacketsOverflow_Type = Gauge32
_SrvForwardYellowPacketsOverflow_Object = MibTableColumn
srvForwardYellowPacketsOverflow = _SrvForwardYellowPacketsOverflow_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 5),
    _SrvForwardYellowPacketsOverflow_Type()
)
srvForwardYellowPacketsOverflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvForwardYellowPacketsOverflow.setStatus("current")
_SrvDiscardGreenPacket_Type = Gauge32
_SrvDiscardGreenPacket_Object = MibTableColumn
srvDiscardGreenPacket = _SrvDiscardGreenPacket_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 6),
    _SrvDiscardGreenPacket_Type()
)
srvDiscardGreenPacket.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvDiscardGreenPacket.setStatus("current")
_SrvDiscardGreenPacketOverflow_Type = Gauge32
_SrvDiscardGreenPacketOverflow_Object = MibTableColumn
srvDiscardGreenPacketOverflow = _SrvDiscardGreenPacketOverflow_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 7),
    _SrvDiscardGreenPacketOverflow_Type()
)
srvDiscardGreenPacketOverflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvDiscardGreenPacketOverflow.setStatus("current")
_SrvDiscardYellowRedPackets_Type = Gauge32
_SrvDiscardYellowRedPackets_Object = MibTableColumn
srvDiscardYellowRedPackets = _SrvDiscardYellowRedPackets_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 8),
    _SrvDiscardYellowRedPackets_Type()
)
srvDiscardYellowRedPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvDiscardYellowRedPackets.setStatus("current")
_SrvDiscardYellowRedPacketsOverflow_Type = Gauge32
_SrvDiscardYellowRedPacketsOverflow_Object = MibTableColumn
srvDiscardYellowRedPacketsOverflow = _SrvDiscardYellowRedPacketsOverflow_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 9),
    _SrvDiscardYellowRedPacketsOverflow_Type()
)
srvDiscardYellowRedPacketsOverflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvDiscardYellowRedPacketsOverflow.setStatus("current")
_SrvForwardGreenBytes_Type = Gauge32
_SrvForwardGreenBytes_Object = MibTableColumn
srvForwardGreenBytes = _SrvForwardGreenBytes_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 10),
    _SrvForwardGreenBytes_Type()
)
srvForwardGreenBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvForwardGreenBytes.setStatus("current")
_SrvForwardGreenBytesOverflow_Type = Gauge32
_SrvForwardGreenBytesOverflow_Object = MibTableColumn
srvForwardGreenBytesOverflow = _SrvForwardGreenBytesOverflow_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 11),
    _SrvForwardGreenBytesOverflow_Type()
)
srvForwardGreenBytesOverflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvForwardGreenBytesOverflow.setStatus("current")
_SrvForwardYellowBytes_Type = Gauge32
_SrvForwardYellowBytes_Object = MibTableColumn
srvForwardYellowBytes = _SrvForwardYellowBytes_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 12),
    _SrvForwardYellowBytes_Type()
)
srvForwardYellowBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvForwardYellowBytes.setStatus("current")
_SrvForwardYellowBytesOverflow_Type = Gauge32
_SrvForwardYellowBytesOverflow_Object = MibTableColumn
srvForwardYellowBytesOverflow = _SrvForwardYellowBytesOverflow_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 13),
    _SrvForwardYellowBytesOverflow_Type()
)
srvForwardYellowBytesOverflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvForwardYellowBytesOverflow.setStatus("current")
_SrvDiscardGreenBytes_Type = Gauge32
_SrvDiscardGreenBytes_Object = MibTableColumn
srvDiscardGreenBytes = _SrvDiscardGreenBytes_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 14),
    _SrvDiscardGreenBytes_Type()
)
srvDiscardGreenBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvDiscardGreenBytes.setStatus("current")
_SrvDiscardGreenBytesOverflow_Type = Gauge32
_SrvDiscardGreenBytesOverflow_Object = MibTableColumn
srvDiscardGreenBytesOverflow = _SrvDiscardGreenBytesOverflow_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 15),
    _SrvDiscardGreenBytesOverflow_Type()
)
srvDiscardGreenBytesOverflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvDiscardGreenBytesOverflow.setStatus("current")
_SrvDiscardYellowRedBytes_Type = Gauge32
_SrvDiscardYellowRedBytes_Object = MibTableColumn
srvDiscardYellowRedBytes = _SrvDiscardYellowRedBytes_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 16),
    _SrvDiscardYellowRedBytes_Type()
)
srvDiscardYellowRedBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvDiscardYellowRedBytes.setStatus("current")
_SrvDiscardYellowRedBytesOverflow_Type = Gauge32
_SrvDiscardYellowRedBytesOverflow_Object = MibTableColumn
srvDiscardYellowRedBytesOverflow = _SrvDiscardYellowRedBytesOverflow_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 17),
    _SrvDiscardYellowRedBytesOverflow_Type()
)
srvDiscardYellowRedBytesOverflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvDiscardYellowRedBytesOverflow.setStatus("current")


class _SrvResetStatsCmd_Type(Integer32):
    """Custom type srvResetStatsCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_SrvResetStatsCmd_Type.__name__ = "Integer32"
_SrvResetStatsCmd_Object = MibTableColumn
srvResetStatsCmd = _SrvResetStatsCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 18),
    _SrvResetStatsCmd_Type()
)
srvResetStatsCmd.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    srvResetStatsCmd.setStatus("current")
_SrvDiscardYellowPackets_Type = Gauge32
_SrvDiscardYellowPackets_Object = MibTableColumn
srvDiscardYellowPackets = _SrvDiscardYellowPackets_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 19),
    _SrvDiscardYellowPackets_Type()
)
srvDiscardYellowPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvDiscardYellowPackets.setStatus("current")
_SrvDiscardYellowPacketsOverflow_Type = Gauge32
_SrvDiscardYellowPacketsOverflow_Object = MibTableColumn
srvDiscardYellowPacketsOverflow = _SrvDiscardYellowPacketsOverflow_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 20),
    _SrvDiscardYellowPacketsOverflow_Type()
)
srvDiscardYellowPacketsOverflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvDiscardYellowPacketsOverflow.setStatus("current")
_SrvDiscardYellowBytes_Type = Gauge32
_SrvDiscardYellowBytes_Object = MibTableColumn
srvDiscardYellowBytes = _SrvDiscardYellowBytes_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 21),
    _SrvDiscardYellowBytes_Type()
)
srvDiscardYellowBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvDiscardYellowBytes.setStatus("current")
_SrvDiscardYellowBytesOverflow_Type = Gauge32
_SrvDiscardYellowBytesOverflow_Object = MibTableColumn
srvDiscardYellowBytesOverflow = _SrvDiscardYellowBytesOverflow_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 22),
    _SrvDiscardYellowBytesOverflow_Type()
)
srvDiscardYellowBytesOverflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvDiscardYellowBytesOverflow.setStatus("current")
_SrvDiscardRedPackets_Type = Gauge32
_SrvDiscardRedPackets_Object = MibTableColumn
srvDiscardRedPackets = _SrvDiscardRedPackets_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 23),
    _SrvDiscardRedPackets_Type()
)
srvDiscardRedPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvDiscardRedPackets.setStatus("current")
_SrvDiscardRedPacketsOverflow_Type = Gauge32
_SrvDiscardRedPacketsOverflow_Object = MibTableColumn
srvDiscardRedPacketsOverflow = _SrvDiscardRedPacketsOverflow_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 24),
    _SrvDiscardRedPacketsOverflow_Type()
)
srvDiscardRedPacketsOverflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvDiscardRedPacketsOverflow.setStatus("current")
_SrvDiscardRedBytes_Type = Gauge32
_SrvDiscardRedBytes_Object = MibTableColumn
srvDiscardRedBytes = _SrvDiscardRedBytes_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 25),
    _SrvDiscardRedBytes_Type()
)
srvDiscardRedBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvDiscardRedBytes.setStatus("current")
_SrvDiscardRedBytesOverflow_Type = Gauge32
_SrvDiscardRedBytesOverflow_Object = MibTableColumn
srvDiscardRedBytesOverflow = _SrvDiscardRedBytesOverflow_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 8, 1, 26),
    _SrvDiscardRedBytesOverflow_Type()
)
srvDiscardRedBytesOverflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    srvDiscardRedBytesOverflow.setStatus("current")
_MappingProfileObjects_ObjectIdentity = ObjectIdentity
mappingProfileObjects = _MappingProfileObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9)
)
_FlowMappingProfileTable_Object = MibTable
flowMappingProfileTable = _FlowMappingProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 1)
)
if mibBuilder.loadTexts:
    flowMappingProfileTable.setStatus("current")
_FlowMappingProfileEntry_Object = MibTableRow
flowMappingProfileEntry = _FlowMappingProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 1, 1)
)
flowMappingProfileEntry.setIndexNames(
    (0, "RAD-MIB", "flowMappingProfileIndex"),
    (0, "RAD-MIB", "flowMappingProfilePriority"),
)
if mibBuilder.loadTexts:
    flowMappingProfileEntry.setStatus("current")
_FlowMappingProfileIndex_Type = Unsigned32
_FlowMappingProfileIndex_Object = MibTableColumn
flowMappingProfileIndex = _FlowMappingProfileIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 1, 1, 1),
    _FlowMappingProfileIndex_Type()
)
flowMappingProfileIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    flowMappingProfileIndex.setStatus("current")
_FlowMappingProfilePriority_Type = Integer32
_FlowMappingProfilePriority_Object = MibTableColumn
flowMappingProfilePriority = _FlowMappingProfilePriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 1, 1, 2),
    _FlowMappingProfilePriority_Type()
)
flowMappingProfilePriority.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    flowMappingProfilePriority.setStatus("current")
_FlowMappingProfileRowStatus_Type = RowStatus
_FlowMappingProfileRowStatus_Object = MibTableColumn
flowMappingProfileRowStatus = _FlowMappingProfileRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 1, 1, 3),
    _FlowMappingProfileRowStatus_Type()
)
flowMappingProfileRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    flowMappingProfileRowStatus.setStatus("current")
_FlowMappingProfileNumOfMaps_Type = Unsigned32
_FlowMappingProfileNumOfMaps_Object = MibTableColumn
flowMappingProfileNumOfMaps = _FlowMappingProfileNumOfMaps_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 1, 1, 4),
    _FlowMappingProfileNumOfMaps_Type()
)
flowMappingProfileNumOfMaps.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    flowMappingProfileNumOfMaps.setStatus("current")
_FlowMappingProfileMapIndex_Type = Unsigned32
_FlowMappingProfileMapIndex_Object = MibTableColumn
flowMappingProfileMapIndex = _FlowMappingProfileMapIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 1, 1, 5),
    _FlowMappingProfileMapIndex_Type()
)
flowMappingProfileMapIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    flowMappingProfileMapIndex.setStatus("current")
_FlowMappingProfileName_Type = SnmpAdminString
_FlowMappingProfileName_Object = MibTableColumn
flowMappingProfileName = _FlowMappingProfileName_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 1, 1, 6),
    _FlowMappingProfileName_Type()
)
flowMappingProfileName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    flowMappingProfileName.setStatus("current")
_QosFlowMappingTable_Object = MibTable
qosFlowMappingTable = _QosFlowMappingTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2)
)
if mibBuilder.loadTexts:
    qosFlowMappingTable.setStatus("current")
_QosFlowMappingEntry_Object = MibTableRow
qosFlowMappingEntry = _QosFlowMappingEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1)
)
qosFlowMappingEntry.setIndexNames(
    (0, "RAD-MIB", "qosFlowMappingIdx1"),
    (0, "RAD-MIB", "qosFlowMappingIdx2"),
    (0, "RAD-MIB", "qosFlowMappingIdx3"),
)
if mibBuilder.loadTexts:
    qosFlowMappingEntry.setStatus("current")
_QosFlowMappingIdx1_Type = Unsigned32
_QosFlowMappingIdx1_Object = MibTableColumn
qosFlowMappingIdx1 = _QosFlowMappingIdx1_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 1),
    _QosFlowMappingIdx1_Type()
)
qosFlowMappingIdx1.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    qosFlowMappingIdx1.setStatus("current")
_QosFlowMappingIdx2_Type = Unsigned32
_QosFlowMappingIdx2_Object = MibTableColumn
qosFlowMappingIdx2 = _QosFlowMappingIdx2_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 2),
    _QosFlowMappingIdx2_Type()
)
qosFlowMappingIdx2.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    qosFlowMappingIdx2.setStatus("current")
_QosFlowMappingIdx3_Type = Unsigned32
_QosFlowMappingIdx3_Object = MibTableColumn
qosFlowMappingIdx3 = _QosFlowMappingIdx3_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 3),
    _QosFlowMappingIdx3_Type()
)
qosFlowMappingIdx3.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    qosFlowMappingIdx3.setStatus("current")
_QosFlowMappingRowStatus_Type = RowStatus
_QosFlowMappingRowStatus_Object = MibTableColumn
qosFlowMappingRowStatus = _QosFlowMappingRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 4),
    _QosFlowMappingRowStatus_Type()
)
qosFlowMappingRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingRowStatus.setStatus("current")


class _QosFlowMappingCriteria_Type(Bits):
    """Custom type qosFlowMappingCriteria based on Bits"""
    namedValues = NamedValues(
        *(("dscp", 2),
          ("ieee802dot1p", 0),
          ("innerIeee802dot1p", 13),
          ("innerVlanId", 14),
          ("ipDestAddr", 7),
          ("ipPrecedence", 12),
          ("ipSrcAddr", 6),
          ("macDestAddr", 5),
          ("macSrcAddr", 4),
          ("tcpDestPort", 9),
          ("tcpSrcPort", 8),
          ("tos", 1),
          ("udpDestPort", 11),
          ("udpSrcPort", 10),
          ("untagged", 15),
          ("vlanId", 3))
    )

_QosFlowMappingCriteria_Type.__name__ = "Bits"
_QosFlowMappingCriteria_Object = MibTableColumn
qosFlowMappingCriteria = _QosFlowMappingCriteria_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 5),
    _QosFlowMappingCriteria_Type()
)
qosFlowMappingCriteria.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingCriteria.setStatus("current")
_QosFlowMappingIeee802dot1p_Type = Unsigned32
_QosFlowMappingIeee802dot1p_Object = MibTableColumn
qosFlowMappingIeee802dot1p = _QosFlowMappingIeee802dot1p_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 6),
    _QosFlowMappingIeee802dot1p_Type()
)
qosFlowMappingIeee802dot1p.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingIeee802dot1p.setStatus("current")
_QosFlowMappingTos_Type = Unsigned32
_QosFlowMappingTos_Object = MibTableColumn
qosFlowMappingTos = _QosFlowMappingTos_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 7),
    _QosFlowMappingTos_Type()
)
qosFlowMappingTos.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingTos.setStatus("current")
_QosFlowMappingFromDscp_Type = Unsigned32
_QosFlowMappingFromDscp_Object = MibTableColumn
qosFlowMappingFromDscp = _QosFlowMappingFromDscp_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 8),
    _QosFlowMappingFromDscp_Type()
)
qosFlowMappingFromDscp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingFromDscp.setStatus("current")
_QosFlowMappingToDscp_Type = Unsigned32
_QosFlowMappingToDscp_Object = MibTableColumn
qosFlowMappingToDscp = _QosFlowMappingToDscp_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 9),
    _QosFlowMappingToDscp_Type()
)
qosFlowMappingToDscp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingToDscp.setStatus("current")
_QosFlowMappingFromVlanId_Type = Unsigned32
_QosFlowMappingFromVlanId_Object = MibTableColumn
qosFlowMappingFromVlanId = _QosFlowMappingFromVlanId_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 10),
    _QosFlowMappingFromVlanId_Type()
)
qosFlowMappingFromVlanId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingFromVlanId.setStatus("current")
_QosFlowMappingToVlanId_Type = Unsigned32
_QosFlowMappingToVlanId_Object = MibTableColumn
qosFlowMappingToVlanId = _QosFlowMappingToVlanId_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 11),
    _QosFlowMappingToVlanId_Type()
)
qosFlowMappingToVlanId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingToVlanId.setStatus("current")
_QosFlowMappingFromSrcMacAddr_Type = MacAddress
_QosFlowMappingFromSrcMacAddr_Object = MibTableColumn
qosFlowMappingFromSrcMacAddr = _QosFlowMappingFromSrcMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 12),
    _QosFlowMappingFromSrcMacAddr_Type()
)
qosFlowMappingFromSrcMacAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingFromSrcMacAddr.setStatus("current")
_QosFlowMappingToSrcMacAddr_Type = MacAddress
_QosFlowMappingToSrcMacAddr_Object = MibTableColumn
qosFlowMappingToSrcMacAddr = _QosFlowMappingToSrcMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 13),
    _QosFlowMappingToSrcMacAddr_Type()
)
qosFlowMappingToSrcMacAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingToSrcMacAddr.setStatus("current")
_QosFlowMappingFromDestMacAddr_Type = MacAddress
_QosFlowMappingFromDestMacAddr_Object = MibTableColumn
qosFlowMappingFromDestMacAddr = _QosFlowMappingFromDestMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 14),
    _QosFlowMappingFromDestMacAddr_Type()
)
qosFlowMappingFromDestMacAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingFromDestMacAddr.setStatus("current")
_QosFlowMappingToDestMacAddr_Type = MacAddress
_QosFlowMappingToDestMacAddr_Object = MibTableColumn
qosFlowMappingToDestMacAddr = _QosFlowMappingToDestMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 15),
    _QosFlowMappingToDestMacAddr_Type()
)
qosFlowMappingToDestMacAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingToDestMacAddr.setStatus("current")
_QosFlowMappingFromSrcIpAddr_Type = IpAddress
_QosFlowMappingFromSrcIpAddr_Object = MibTableColumn
qosFlowMappingFromSrcIpAddr = _QosFlowMappingFromSrcIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 16),
    _QosFlowMappingFromSrcIpAddr_Type()
)
qosFlowMappingFromSrcIpAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingFromSrcIpAddr.setStatus("current")
_QosFlowMappingToSrcIpAddr_Type = IpAddress
_QosFlowMappingToSrcIpAddr_Object = MibTableColumn
qosFlowMappingToSrcIpAddr = _QosFlowMappingToSrcIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 17),
    _QosFlowMappingToSrcIpAddr_Type()
)
qosFlowMappingToSrcIpAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingToSrcIpAddr.setStatus("current")
_QosFlowMappingFromDestIpAddr_Type = IpAddress
_QosFlowMappingFromDestIpAddr_Object = MibTableColumn
qosFlowMappingFromDestIpAddr = _QosFlowMappingFromDestIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 18),
    _QosFlowMappingFromDestIpAddr_Type()
)
qosFlowMappingFromDestIpAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingFromDestIpAddr.setStatus("current")
_QosFlowMappingToDestIpAddr_Type = IpAddress
_QosFlowMappingToDestIpAddr_Object = MibTableColumn
qosFlowMappingToDestIpAddr = _QosFlowMappingToDestIpAddr_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 19),
    _QosFlowMappingToDestIpAddr_Type()
)
qosFlowMappingToDestIpAddr.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingToDestIpAddr.setStatus("current")
_QosFlowMappingFromTcpSrcPort_Type = Unsigned32
_QosFlowMappingFromTcpSrcPort_Object = MibTableColumn
qosFlowMappingFromTcpSrcPort = _QosFlowMappingFromTcpSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 20),
    _QosFlowMappingFromTcpSrcPort_Type()
)
qosFlowMappingFromTcpSrcPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingFromTcpSrcPort.setStatus("current")
_QosFlowMappingToTcpSrcPort_Type = Unsigned32
_QosFlowMappingToTcpSrcPort_Object = MibTableColumn
qosFlowMappingToTcpSrcPort = _QosFlowMappingToTcpSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 21),
    _QosFlowMappingToTcpSrcPort_Type()
)
qosFlowMappingToTcpSrcPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingToTcpSrcPort.setStatus("current")
_QosFlowMappingFromTcpDestPort_Type = Unsigned32
_QosFlowMappingFromTcpDestPort_Object = MibTableColumn
qosFlowMappingFromTcpDestPort = _QosFlowMappingFromTcpDestPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 22),
    _QosFlowMappingFromTcpDestPort_Type()
)
qosFlowMappingFromTcpDestPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingFromTcpDestPort.setStatus("current")
_QosFlowMappingToTcpDestPort_Type = Unsigned32
_QosFlowMappingToTcpDestPort_Object = MibTableColumn
qosFlowMappingToTcpDestPort = _QosFlowMappingToTcpDestPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 23),
    _QosFlowMappingToTcpDestPort_Type()
)
qosFlowMappingToTcpDestPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingToTcpDestPort.setStatus("current")
_QosFlowMappingFromUdpSrcPort_Type = Unsigned32
_QosFlowMappingFromUdpSrcPort_Object = MibTableColumn
qosFlowMappingFromUdpSrcPort = _QosFlowMappingFromUdpSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 24),
    _QosFlowMappingFromUdpSrcPort_Type()
)
qosFlowMappingFromUdpSrcPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingFromUdpSrcPort.setStatus("current")
_QosFlowMappingToUdpSrcPort_Type = Unsigned32
_QosFlowMappingToUdpSrcPort_Object = MibTableColumn
qosFlowMappingToUdpSrcPort = _QosFlowMappingToUdpSrcPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 25),
    _QosFlowMappingToUdpSrcPort_Type()
)
qosFlowMappingToUdpSrcPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingToUdpSrcPort.setStatus("current")
_QosFlowMappingFromUdpDestPort_Type = Unsigned32
_QosFlowMappingFromUdpDestPort_Object = MibTableColumn
qosFlowMappingFromUdpDestPort = _QosFlowMappingFromUdpDestPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 26),
    _QosFlowMappingFromUdpDestPort_Type()
)
qosFlowMappingFromUdpDestPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingFromUdpDestPort.setStatus("current")
_QosFlowMappingToUdpDestPort_Type = Unsigned32
_QosFlowMappingToUdpDestPort_Object = MibTableColumn
qosFlowMappingToUdpDestPort = _QosFlowMappingToUdpDestPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 27),
    _QosFlowMappingToUdpDestPort_Type()
)
qosFlowMappingToUdpDestPort.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingToUdpDestPort.setStatus("current")
_QosFlowMappingFromIpPrecedence_Type = Unsigned32
_QosFlowMappingFromIpPrecedence_Object = MibTableColumn
qosFlowMappingFromIpPrecedence = _QosFlowMappingFromIpPrecedence_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 28),
    _QosFlowMappingFromIpPrecedence_Type()
)
qosFlowMappingFromIpPrecedence.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingFromIpPrecedence.setStatus("current")
_QosFlowMappingToIpPrecedence_Type = Unsigned32
_QosFlowMappingToIpPrecedence_Object = MibTableColumn
qosFlowMappingToIpPrecedence = _QosFlowMappingToIpPrecedence_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 29),
    _QosFlowMappingToIpPrecedence_Type()
)
qosFlowMappingToIpPrecedence.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingToIpPrecedence.setStatus("current")
_QosFlowMappingInnerIeee802dot1p_Type = Unsigned32
_QosFlowMappingInnerIeee802dot1p_Object = MibTableColumn
qosFlowMappingInnerIeee802dot1p = _QosFlowMappingInnerIeee802dot1p_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 30),
    _QosFlowMappingInnerIeee802dot1p_Type()
)
qosFlowMappingInnerIeee802dot1p.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingInnerIeee802dot1p.setStatus("current")
_QosFlowMappingFromInnerVlanId_Type = Unsigned32
_QosFlowMappingFromInnerVlanId_Object = MibTableColumn
qosFlowMappingFromInnerVlanId = _QosFlowMappingFromInnerVlanId_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 31),
    _QosFlowMappingFromInnerVlanId_Type()
)
qosFlowMappingFromInnerVlanId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingFromInnerVlanId.setStatus("current")
_QosFlowMappingToInnerVlanId_Type = Unsigned32
_QosFlowMappingToInnerVlanId_Object = MibTableColumn
qosFlowMappingToInnerVlanId = _QosFlowMappingToInnerVlanId_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 9, 2, 1, 32),
    _QosFlowMappingToInnerVlanId_Type()
)
qosFlowMappingToInnerVlanId.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qosFlowMappingToInnerVlanId.setStatus("current")
_CosProfileTable_Object = MibTable
cosProfileTable = _CosProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 10)
)
if mibBuilder.loadTexts:
    cosProfileTable.setStatus("current")
_CosProfileEntry_Object = MibTableRow
cosProfileEntry = _CosProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 10, 1)
)
cosProfileEntry.setIndexNames(
    (0, "RAD-MIB", "cosProfileIndex"),
)
if mibBuilder.loadTexts:
    cosProfileEntry.setStatus("current")
_CosProfileIndex_Type = Unsigned32
_CosProfileIndex_Object = MibTableColumn
cosProfileIndex = _CosProfileIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 10, 1, 1),
    _CosProfileIndex_Type()
)
cosProfileIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cosProfileIndex.setStatus("current")
_CosProfileRowStatus_Type = RowStatus
_CosProfileRowStatus_Object = MibTableColumn
cosProfileRowStatus = _CosProfileRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 10, 1, 2),
    _CosProfileRowStatus_Type()
)
cosProfileRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    cosProfileRowStatus.setStatus("current")


class _CosProfileCosMethod_Type(Integer32):
    """Custom type cosProfileCosMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("dscp", 4),
          ("ieee802dot1p", 2),
          ("ipPrecedence", 5),
          ("tos", 3))
    )


_CosProfileCosMethod_Type.__name__ = "Integer32"
_CosProfileCosMethod_Object = MibTableColumn
cosProfileCosMethod = _CosProfileCosMethod_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 10, 1, 3),
    _CosProfileCosMethod_Type()
)
cosProfileCosMethod.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    cosProfileCosMethod.setStatus("current")
_CosProfileName_Type = SnmpAdminString
_CosProfileName_Object = MibTableColumn
cosProfileName = _CosProfileName_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 10, 1, 4),
    _CosProfileName_Type()
)
cosProfileName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    cosProfileName.setStatus("current")


class _CosProfileCosMapping_Type(OctetString):
    """Custom type cosProfileCosMapping based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_CosProfileCosMapping_Type.__name__ = "OctetString"
_CosProfileCosMapping_Object = MibTableColumn
cosProfileCosMapping = _CosProfileCosMapping_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 10, 1, 5),
    _CosProfileCosMapping_Type()
)
cosProfileCosMapping.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    cosProfileCosMapping.setStatus("current")
_QueueProfileObjects_ObjectIdentity = ObjectIdentity
queueProfileObjects = _QueueProfileObjects_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11)
)
_QProfileTable_Object = MibTable
qProfileTable = _QProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 1)
)
if mibBuilder.loadTexts:
    qProfileTable.setStatus("current")
_QProfileEntry_Object = MibTableRow
qProfileEntry = _QProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 1, 1)
)
qProfileEntry.setIndexNames(
    (0, "RAD-MIB", "qProfileIndex"),
)
if mibBuilder.loadTexts:
    qProfileEntry.setStatus("current")
_QProfileIndex_Type = Unsigned32
_QProfileIndex_Object = MibTableColumn
qProfileIndex = _QProfileIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 1, 1, 1),
    _QProfileIndex_Type()
)
qProfileIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    qProfileIndex.setStatus("current")
_QProfileRowStatus_Type = RowStatus
_QProfileRowStatus_Object = MibTableColumn
qProfileRowStatus = _QProfileRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 1, 1, 2),
    _QProfileRowStatus_Type()
)
qProfileRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qProfileRowStatus.setStatus("current")
_QProfileName_Type = SnmpAdminString
_QProfileName_Object = MibTableColumn
qProfileName = _QProfileName_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 1, 1, 3),
    _QProfileName_Type()
)
qProfileName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qProfileName.setStatus("current")
_QProfileNumberOfInternalQ_Type = Unsigned32
_QProfileNumberOfInternalQ_Object = MibTableColumn
qProfileNumberOfInternalQ = _QProfileNumberOfInternalQ_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 1, 1, 4),
    _QProfileNumberOfInternalQ_Type()
)
qProfileNumberOfInternalQ.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qProfileNumberOfInternalQ.setStatus("current")
_QProfileInternalQProfile_Type = OctetString
_QProfileInternalQProfile_Object = MibTableColumn
qProfileInternalQProfile = _QProfileInternalQProfile_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 1, 1, 5),
    _QProfileInternalQProfile_Type()
)
qProfileInternalQProfile.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qProfileInternalQProfile.setStatus("current")
_QInternalProfileTable_Object = MibTable
qInternalProfileTable = _QInternalProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 2)
)
if mibBuilder.loadTexts:
    qInternalProfileTable.setStatus("current")
_QInternalProfileEntry_Object = MibTableRow
qInternalProfileEntry = _QInternalProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 2, 1)
)
qInternalProfileEntry.setIndexNames(
    (0, "RAD-MIB", "qInternalProfileIndex"),
)
if mibBuilder.loadTexts:
    qInternalProfileEntry.setStatus("current")
_QInternalProfileIndex_Type = Unsigned32
_QInternalProfileIndex_Object = MibTableColumn
qInternalProfileIndex = _QInternalProfileIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 2, 1, 1),
    _QInternalProfileIndex_Type()
)
qInternalProfileIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    qInternalProfileIndex.setStatus("current")
_QInternalProfileRowStatus_Type = RowStatus
_QInternalProfileRowStatus_Object = MibTableColumn
qInternalProfileRowStatus = _QInternalProfileRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 2, 1, 2),
    _QInternalProfileRowStatus_Type()
)
qInternalProfileRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qInternalProfileRowStatus.setStatus("current")


class _QInternalProfileScheduling_Type(Integer32):
    """Custom type qInternalProfileScheduling based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bestEffort", 3),
          ("strict", 2),
          ("wfq", 1))
    )


_QInternalProfileScheduling_Type.__name__ = "Integer32"
_QInternalProfileScheduling_Object = MibTableColumn
qInternalProfileScheduling = _QInternalProfileScheduling_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 2, 1, 3),
    _QInternalProfileScheduling_Type()
)
qInternalProfileScheduling.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qInternalProfileScheduling.setStatus("current")
_QInternalProfileWFQWeight_Type = Unsigned32
_QInternalProfileWFQWeight_Object = MibTableColumn
qInternalProfileWFQWeight = _QInternalProfileWFQWeight_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 2, 1, 4),
    _QInternalProfileWFQWeight_Type()
)
qInternalProfileWFQWeight.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qInternalProfileWFQWeight.setStatus("current")
_QInternalProfileQueueLength_Type = Unsigned32
_QInternalProfileQueueLength_Object = MibTableColumn
qInternalProfileQueueLength = _QInternalProfileQueueLength_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 2, 1, 5),
    _QInternalProfileQueueLength_Type()
)
qInternalProfileQueueLength.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qInternalProfileQueueLength.setStatus("current")
_QInternalProfileWredStartDropThresh_Type = Unsigned32
_QInternalProfileWredStartDropThresh_Object = MibTableColumn
qInternalProfileWredStartDropThresh = _QInternalProfileWredStartDropThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 2, 1, 6),
    _QInternalProfileWredStartDropThresh_Type()
)
qInternalProfileWredStartDropThresh.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qInternalProfileWredStartDropThresh.setStatus("current")
_QInternalProfileWredDropAllThresh_Type = Unsigned32
_QInternalProfileWredDropAllThresh_Object = MibTableColumn
qInternalProfileWredDropAllThresh = _QInternalProfileWredDropAllThresh_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 2, 1, 7),
    _QInternalProfileWredDropAllThresh_Type()
)
qInternalProfileWredDropAllThresh.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qInternalProfileWredDropAllThresh.setStatus("current")
_QInternalProfileWredDropProbability_Type = Unsigned32
_QInternalProfileWredDropProbability_Object = MibTableColumn
qInternalProfileWredDropProbability = _QInternalProfileWredDropProbability_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 2, 1, 8),
    _QInternalProfileWredDropProbability_Type()
)
qInternalProfileWredDropProbability.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qInternalProfileWredDropProbability.setStatus("current")
_QInternalProfileRateLimit_Type = Unsigned32
_QInternalProfileRateLimit_Object = MibTableColumn
qInternalProfileRateLimit = _QInternalProfileRateLimit_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 2, 1, 9),
    _QInternalProfileRateLimit_Type()
)
qInternalProfileRateLimit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qInternalProfileRateLimit.setStatus("current")
_QInternalProfileShaperProfile_Type = Unsigned32
_QInternalProfileShaperProfile_Object = MibTableColumn
qInternalProfileShaperProfile = _QInternalProfileShaperProfile_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 2, 1, 10),
    _QInternalProfileShaperProfile_Type()
)
qInternalProfileShaperProfile.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    qInternalProfileShaperProfile.setStatus("current")
_QueueGroupTable_Object = MibTable
queueGroupTable = _QueueGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 3)
)
if mibBuilder.loadTexts:
    queueGroupTable.setStatus("current")
_QueueGroupEntry_Object = MibTableRow
queueGroupEntry = _QueueGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 3, 1)
)
queueGroupEntry.setIndexNames(
    (1, "RAD-MIB", "queueGroupName"),
    (0, "RAD-MIB", "queueGroupQBlockLevel"),
    (0, "RAD-MIB", "queueGroupQBlockIdx"),
)
if mibBuilder.loadTexts:
    queueGroupEntry.setStatus("current")


class _QueueGroupName_Type(SnmpAdminString):
    """Custom type queueGroupName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_QueueGroupName_Type.__name__ = "SnmpAdminString"
_QueueGroupName_Object = MibTableColumn
queueGroupName = _QueueGroupName_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 3, 1, 1),
    _QueueGroupName_Type()
)
queueGroupName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    queueGroupName.setStatus("current")
_QueueGroupQBlockLevel_Type = Unsigned32
_QueueGroupQBlockLevel_Object = MibTableColumn
queueGroupQBlockLevel = _QueueGroupQBlockLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 3, 1, 2),
    _QueueGroupQBlockLevel_Type()
)
queueGroupQBlockLevel.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    queueGroupQBlockLevel.setStatus("current")
_QueueGroupQBlockIdx_Type = Unsigned32
_QueueGroupQBlockIdx_Object = MibTableColumn
queueGroupQBlockIdx = _QueueGroupQBlockIdx_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 3, 1, 3),
    _QueueGroupQBlockIdx_Type()
)
queueGroupQBlockIdx.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    queueGroupQBlockIdx.setStatus("current")
_QueueGroupRowStatus_Type = RowStatus
_QueueGroupRowStatus_Object = MibTableColumn
queueGroupRowStatus = _QueueGroupRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 3, 1, 4),
    _QueueGroupRowStatus_Type()
)
queueGroupRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    queueGroupRowStatus.setStatus("current")
_QueueGroupQBlockProfile_Type = Unsigned32
_QueueGroupQBlockProfile_Object = MibTableColumn
queueGroupQBlockProfile = _QueueGroupQBlockProfile_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 3, 1, 5),
    _QueueGroupQBlockProfile_Type()
)
queueGroupQBlockProfile.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    queueGroupQBlockProfile.setStatus("current")
_QueueGroupQBlockShaperProfile_Type = Unsigned32
_QueueGroupQBlockShaperProfile_Object = MibTableColumn
queueGroupQBlockShaperProfile = _QueueGroupQBlockShaperProfile_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 3, 1, 6),
    _QueueGroupQBlockShaperProfile_Type()
)
queueGroupQBlockShaperProfile.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    queueGroupQBlockShaperProfile.setStatus("current")


class _QueueGroupPointToQBlock_Type(SnmpAdminString):
    """Custom type queueGroupPointToQBlock based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_QueueGroupPointToQBlock_Type.__name__ = "SnmpAdminString"
_QueueGroupPointToQBlock_Object = MibTableColumn
queueGroupPointToQBlock = _QueueGroupPointToQBlock_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 3, 1, 7),
    _QueueGroupPointToQBlock_Type()
)
queueGroupPointToQBlock.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    queueGroupPointToQBlock.setStatus("current")
_QueueGroupPointToInternalQueue_Type = Unsigned32
_QueueGroupPointToInternalQueue_Object = MibTableColumn
queueGroupPointToInternalQueue = _QueueGroupPointToInternalQueue_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 3, 1, 8),
    _QueueGroupPointToInternalQueue_Type()
)
queueGroupPointToInternalQueue.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    queueGroupPointToInternalQueue.setStatus("current")


class _QueueGroupQBlockName_Type(SnmpAdminString):
    """Custom type queueGroupQBlockName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 32),
    )


_QueueGroupQBlockName_Type.__name__ = "SnmpAdminString"
_QueueGroupQBlockName_Object = MibTableColumn
queueGroupQBlockName = _QueueGroupQBlockName_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 11, 3, 1, 9),
    _QueueGroupQBlockName_Type()
)
queueGroupQBlockName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    queueGroupQBlockName.setStatus("current")
_MarkingProfileTable_Object = MibTable
markingProfileTable = _MarkingProfileTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 12)
)
if mibBuilder.loadTexts:
    markingProfileTable.setStatus("current")
_MarkingProfileEntry_Object = MibTableRow
markingProfileEntry = _MarkingProfileEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 12, 1)
)
markingProfileEntry.setIndexNames(
    (0, "RAD-MIB", "markingProfileIndex"),
)
if mibBuilder.loadTexts:
    markingProfileEntry.setStatus("current")
_MarkingProfileIndex_Type = Unsigned32
_MarkingProfileIndex_Object = MibTableColumn
markingProfileIndex = _MarkingProfileIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 12, 1, 1),
    _MarkingProfileIndex_Type()
)
markingProfileIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    markingProfileIndex.setStatus("current")
_MarkingProfileRowStatus_Type = RowStatus
_MarkingProfileRowStatus_Object = MibTableColumn
markingProfileRowStatus = _MarkingProfileRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 12, 1, 2),
    _MarkingProfileRowStatus_Type()
)
markingProfileRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    markingProfileRowStatus.setStatus("current")
_MarkingProfileName_Type = SnmpAdminString
_MarkingProfileName_Object = MibTableColumn
markingProfileName = _MarkingProfileName_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 12, 1, 3),
    _MarkingProfileName_Type()
)
markingProfileName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    markingProfileName.setStatus("current")


class _MarkingSpVlanPBit_Type(OctetString):
    """Custom type markingSpVlanPBit based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 63),
    )


_MarkingSpVlanPBit_Type.__name__ = "OctetString"
_MarkingSpVlanPBit_Object = MibTableColumn
markingSpVlanPBit = _MarkingSpVlanPBit_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 12, 1, 4),
    _MarkingSpVlanPBit_Type()
)
markingSpVlanPBit.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    markingSpVlanPBit.setStatus("current")


class _MarkingProfileMethod_Type(Integer32):
    """Custom type markingProfileMethod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("dscp", 4),
          ("ieee802dot1p", 2),
          ("ipPrecedence", 5),
          ("tos", 3))
    )


_MarkingProfileMethod_Type.__name__ = "Integer32"
_MarkingProfileMethod_Object = MibTableColumn
markingProfileMethod = _MarkingProfileMethod_Object(
    (1, 3, 6, 1, 4, 1, 164, 6, 3, 12, 1, 5),
    _MarkingProfileMethod_Type()
)
markingProfileMethod.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    markingProfileMethod.setStatus("current")
_RadTransport_ObjectIdentity = ObjectIdentity
radTransport = _RadTransport_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 4)
)
_RadTransportDomains_ObjectIdentity = ObjectIdentity
radTransportDomains = _RadTransportDomains_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 4, 1)
)
_RadTransportDomainSnmpEfmOam_ObjectIdentity = ObjectIdentity
radTransportDomainSnmpEfmOam = _RadTransportDomainSnmpEfmOam_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 6, 4, 1, 1)
)
if mibBuilder.loadTexts:
    radTransportDomainSnmpEfmOam.setStatus("current")
_RadStkHub_ObjectIdentity = ObjectIdentity
radStkHub = _RadStkHub_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 7)
)
_RadRouter_ObjectIdentity = ObjectIdentity
radRouter = _RadRouter_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 11)
)
_RtrBridge_ObjectIdentity = ObjectIdentity
rtrBridge = _RtrBridge_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 11, 7)
)
_Webranger_ObjectIdentity = ObjectIdentity
webranger = _Webranger_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2)
)
_WrSysConfig_ObjectIdentity = ObjectIdentity
wrSysConfig = _WrSysConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 1)
)


class _WrBraodcastCtrlCmd_Type(Integer32):
    """Custom type wrBraodcastCtrlCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("block", 1),
          ("blockLinkPropagation", 3),
          ("forward", 2))
    )


_WrBraodcastCtrlCmd_Type.__name__ = "Integer32"
_WrBraodcastCtrlCmd_Object = MibScalar
wrBraodcastCtrlCmd = _WrBraodcastCtrlCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 1, 1),
    _WrBraodcastCtrlCmd_Type()
)
wrBraodcastCtrlCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    wrBraodcastCtrlCmd.setStatus("current")


class _WrFrSelfLearningMode_Type(Integer32):
    """Custom type wrFrSelfLearningMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_WrFrSelfLearningMode_Type.__name__ = "Integer32"
_WrFrSelfLearningMode_Object = MibScalar
wrFrSelfLearningMode = _WrFrSelfLearningMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 1, 2),
    _WrFrSelfLearningMode_Type()
)
wrFrSelfLearningMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    wrFrSelfLearningMode.setStatus("current")


class _WrGratuitousArp_Type(Integer32):
    """Custom type wrGratuitousArp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_WrGratuitousArp_Type.__name__ = "Integer32"
_WrGratuitousArp_Object = MibScalar
wrGratuitousArp = _WrGratuitousArp_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 1, 3),
    _WrGratuitousArp_Type()
)
wrGratuitousArp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    wrGratuitousArp.setStatus("current")
_WrIpRouterInfo_ObjectIdentity = ObjectIdentity
wrIpRouterInfo = _WrIpRouterInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2)
)
_WrConfigIpDhcp_ObjectIdentity = ObjectIdentity
wrConfigIpDhcp = _WrConfigIpDhcp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1)
)


class _WrDhcpAction_Type(Integer32):
    """Custom type wrDhcpAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_WrDhcpAction_Type.__name__ = "Integer32"
_WrDhcpAction_Object = MibScalar
wrDhcpAction = _WrDhcpAction_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 1),
    _WrDhcpAction_Type()
)
wrDhcpAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    wrDhcpAction.setStatus("current")
_WrDhcpTable_Object = MibTable
wrDhcpTable = _WrDhcpTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 2)
)
if mibBuilder.loadTexts:
    wrDhcpTable.setStatus("current")
_WrDhcpEntry_Object = MibTableRow
wrDhcpEntry = _WrDhcpEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 2, 1)
)
wrDhcpEntry.setIndexNames(
    (0, "RAD-MIB", "wrDhcpLowIpAddress"),
)
if mibBuilder.loadTexts:
    wrDhcpEntry.setStatus("current")
_WrDhcpLowIpAddress_Type = IpAddress
_WrDhcpLowIpAddress_Object = MibTableColumn
wrDhcpLowIpAddress = _WrDhcpLowIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 2, 1, 1),
    _WrDhcpLowIpAddress_Type()
)
wrDhcpLowIpAddress.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wrDhcpLowIpAddress.setStatus("current")
_WrDhcpHighIpAddress_Type = IpAddress
_WrDhcpHighIpAddress_Object = MibTableColumn
wrDhcpHighIpAddress = _WrDhcpHighIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 2, 1, 2),
    _WrDhcpHighIpAddress_Type()
)
wrDhcpHighIpAddress.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wrDhcpHighIpAddress.setStatus("current")
_WrDhcpIpMaskAddress_Type = IpAddress
_WrDhcpIpMaskAddress_Object = MibTableColumn
wrDhcpIpMaskAddress = _WrDhcpIpMaskAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 2, 1, 3),
    _WrDhcpIpMaskAddress_Type()
)
wrDhcpIpMaskAddress.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wrDhcpIpMaskAddress.setStatus("current")
_WrDhcpDefaultGateway_Type = IpAddress
_WrDhcpDefaultGateway_Object = MibTableColumn
wrDhcpDefaultGateway = _WrDhcpDefaultGateway_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 2, 1, 4),
    _WrDhcpDefaultGateway_Type()
)
wrDhcpDefaultGateway.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wrDhcpDefaultGateway.setStatus("current")
_WrDhcpPrimaryDNS_Type = IpAddress
_WrDhcpPrimaryDNS_Object = MibTableColumn
wrDhcpPrimaryDNS = _WrDhcpPrimaryDNS_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 2, 1, 5),
    _WrDhcpPrimaryDNS_Type()
)
wrDhcpPrimaryDNS.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wrDhcpPrimaryDNS.setStatus("current")
_WrDhcpSecondaryDNS_Type = IpAddress
_WrDhcpSecondaryDNS_Object = MibTableColumn
wrDhcpSecondaryDNS = _WrDhcpSecondaryDNS_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 2, 1, 6),
    _WrDhcpSecondaryDNS_Type()
)
wrDhcpSecondaryDNS.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wrDhcpSecondaryDNS.setStatus("current")


class _WrDhcpInterface_Type(Integer32):
    """Custom type wrDhcpInterface based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("all", 1),
          ("anyLan", 4),
          ("lan1", 2),
          ("lan2", 3),
          ("wan", 5))
    )


_WrDhcpInterface_Type.__name__ = "Integer32"
_WrDhcpInterface_Object = MibTableColumn
wrDhcpInterface = _WrDhcpInterface_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 2, 1, 7),
    _WrDhcpInterface_Type()
)
wrDhcpInterface.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wrDhcpInterface.setStatus("current")
_WrDhcpRowStatus_Type = RowStatus
_WrDhcpRowStatus_Object = MibTableColumn
wrDhcpRowStatus = _WrDhcpRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 2, 1, 8),
    _WrDhcpRowStatus_Type()
)
wrDhcpRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wrDhcpRowStatus.setStatus("current")
_WrDhcpIpAddressLeaseTime_Type = Integer32
_WrDhcpIpAddressLeaseTime_Object = MibTableColumn
wrDhcpIpAddressLeaseTime = _WrDhcpIpAddressLeaseTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 2, 1, 9),
    _WrDhcpIpAddressLeaseTime_Type()
)
wrDhcpIpAddressLeaseTime.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wrDhcpIpAddressLeaseTime.setStatus("current")


class _WrDhcpPoolName_Type(SnmpAdminString):
    """Custom type wrDhcpPoolName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 10),
    )


_WrDhcpPoolName_Type.__name__ = "SnmpAdminString"
_WrDhcpPoolName_Object = MibTableColumn
wrDhcpPoolName = _WrDhcpPoolName_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 2, 1, 10),
    _WrDhcpPoolName_Type()
)
wrDhcpPoolName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wrDhcpPoolName.setStatus("current")
_WrDhcpTftpServerIp_Type = IpAddress
_WrDhcpTftpServerIp_Object = MibTableColumn
wrDhcpTftpServerIp = _WrDhcpTftpServerIp_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 2, 1, 11),
    _WrDhcpTftpServerIp_Type()
)
wrDhcpTftpServerIp.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wrDhcpTftpServerIp.setStatus("current")


class _WrDhcpConfigFileName_Type(SnmpAdminString):
    """Custom type wrDhcpConfigFileName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 50),
    )


_WrDhcpConfigFileName_Type.__name__ = "SnmpAdminString"
_WrDhcpConfigFileName_Object = MibTableColumn
wrDhcpConfigFileName = _WrDhcpConfigFileName_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 2, 1, 12),
    _WrDhcpConfigFileName_Type()
)
wrDhcpConfigFileName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wrDhcpConfigFileName.setStatus("current")
_DhcpPoolAllocTable_Object = MibTable
dhcpPoolAllocTable = _DhcpPoolAllocTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 3)
)
if mibBuilder.loadTexts:
    dhcpPoolAllocTable.setStatus("current")
_DhcpPoolAllocEntry_Object = MibTableRow
dhcpPoolAllocEntry = _DhcpPoolAllocEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 3, 1)
)
dhcpPoolAllocEntry.setIndexNames(
    (0, "RAD-MIB", "dhcpPoolAllocLowIpAddress"),
    (0, "RAD-MIB", "dhcpPoolAllocLeasingIpAddress"),
)
if mibBuilder.loadTexts:
    dhcpPoolAllocEntry.setStatus("current")
_DhcpPoolAllocLowIpAddress_Type = IpAddress
_DhcpPoolAllocLowIpAddress_Object = MibTableColumn
dhcpPoolAllocLowIpAddress = _DhcpPoolAllocLowIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 3, 1, 1),
    _DhcpPoolAllocLowIpAddress_Type()
)
dhcpPoolAllocLowIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpPoolAllocLowIpAddress.setStatus("current")
_DhcpPoolAllocLeasingIpAddress_Type = IpAddress
_DhcpPoolAllocLeasingIpAddress_Object = MibTableColumn
dhcpPoolAllocLeasingIpAddress = _DhcpPoolAllocLeasingIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 3, 1, 2),
    _DhcpPoolAllocLeasingIpAddress_Type()
)
dhcpPoolAllocLeasingIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpPoolAllocLeasingIpAddress.setStatus("current")
_DhcpPoolAllocMacAddress_Type = MacAddress
_DhcpPoolAllocMacAddress_Object = MibTableColumn
dhcpPoolAllocMacAddress = _DhcpPoolAllocMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 3, 1, 3),
    _DhcpPoolAllocMacAddress_Type()
)
dhcpPoolAllocMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpPoolAllocMacAddress.setStatus("current")
_DhcpPoolAllocTimeLeft_Type = Integer32
_DhcpPoolAllocTimeLeft_Object = MibTableColumn
dhcpPoolAllocTimeLeft = _DhcpPoolAllocTimeLeft_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 3, 1, 4),
    _DhcpPoolAllocTimeLeft_Type()
)
dhcpPoolAllocTimeLeft.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpPoolAllocTimeLeft.setStatus("current")


class _DhcpPoolAllocFlags_Type(Integer32):
    """Custom type dhcpPoolAllocFlags based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("forbidden", 5),
          ("free", 2),
          ("inUse", 3),
          ("notApplicable", 1),
          ("offered", 4))
    )


_DhcpPoolAllocFlags_Type.__name__ = "Integer32"
_DhcpPoolAllocFlags_Object = MibTableColumn
dhcpPoolAllocFlags = _DhcpPoolAllocFlags_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 3, 1, 5),
    _DhcpPoolAllocFlags_Type()
)
dhcpPoolAllocFlags.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpPoolAllocFlags.setStatus("current")


class _DhcpPoolAllocFreeCmd_Type(Integer32):
    """Custom type dhcpPoolAllocFreeCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_DhcpPoolAllocFreeCmd_Type.__name__ = "Integer32"
_DhcpPoolAllocFreeCmd_Object = MibTableColumn
dhcpPoolAllocFreeCmd = _DhcpPoolAllocFreeCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 3, 1, 6),
    _DhcpPoolAllocFreeCmd_Type()
)
dhcpPoolAllocFreeCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpPoolAllocFreeCmd.setStatus("current")
_DhcpRelayTable_Object = MibTable
dhcpRelayTable = _DhcpRelayTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 4)
)
if mibBuilder.loadTexts:
    dhcpRelayTable.setStatus("current")
_DhcpRelayEntry_Object = MibTableRow
dhcpRelayEntry = _DhcpRelayEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 4, 1)
)
dhcpRelayEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    dhcpRelayEntry.setStatus("current")


class _DhcpRelayAction_Type(Integer32):
    """Custom type dhcpRelayAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_DhcpRelayAction_Type.__name__ = "Integer32"
_DhcpRelayAction_Object = MibTableColumn
dhcpRelayAction = _DhcpRelayAction_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 4, 1, 1),
    _DhcpRelayAction_Type()
)
dhcpRelayAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpRelayAction.setStatus("current")
_DhcpRelayServerIpAddress_Type = IpAddress
_DhcpRelayServerIpAddress_Object = MibTableColumn
dhcpRelayServerIpAddress = _DhcpRelayServerIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 4, 1, 2),
    _DhcpRelayServerIpAddress_Type()
)
dhcpRelayServerIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpRelayServerIpAddress.setStatus("current")


class _DhcpRelayMaxHop_Type(Integer32):
    """Custom type dhcpRelayMaxHop based on Integer32"""
    defaultValue = 16


_DhcpRelayMaxHop_Object = MibTableColumn
dhcpRelayMaxHop = _DhcpRelayMaxHop_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 4, 1, 3),
    _DhcpRelayMaxHop_Type()
)
dhcpRelayMaxHop.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpRelayMaxHop.setStatus("current")


class _WrDhcpPort_Type(Integer32):
    """Custom type wrDhcpPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("all", 2),
          ("lan1", 4),
          ("lan2", 5),
          ("notApplicable", 1),
          ("outOfBand", 3))
    )


_WrDhcpPort_Type.__name__ = "Integer32"
_WrDhcpPort_Object = MibScalar
wrDhcpPort = _WrDhcpPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 5),
    _WrDhcpPort_Type()
)
wrDhcpPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    wrDhcpPort.setStatus("current")
_DhcpClientTable_Object = MibTable
dhcpClientTable = _DhcpClientTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 6)
)
if mibBuilder.loadTexts:
    dhcpClientTable.setStatus("current")
_DhcpClientEntry_Object = MibTableRow
dhcpClientEntry = _DhcpClientEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 6, 1)
)
dhcpClientEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    dhcpClientEntry.setStatus("current")


class _DhcpClientAction_Type(Integer32):
    """Custom type dhcpClientAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_DhcpClientAction_Type.__name__ = "Integer32"
_DhcpClientAction_Object = MibTableColumn
dhcpClientAction = _DhcpClientAction_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 6, 1, 1),
    _DhcpClientAction_Type()
)
dhcpClientAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpClientAction.setStatus("current")
_DhcpClientServerIpAddress_Type = IpAddress
_DhcpClientServerIpAddress_Object = MibTableColumn
dhcpClientServerIpAddress = _DhcpClientServerIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 6, 1, 2),
    _DhcpClientServerIpAddress_Type()
)
dhcpClientServerIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpClientServerIpAddress.setStatus("current")
_DhcpClientLeaseExpirationTime_Type = Integer32
_DhcpClientLeaseExpirationTime_Object = MibTableColumn
dhcpClientLeaseExpirationTime = _DhcpClientLeaseExpirationTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 6, 1, 3),
    _DhcpClientLeaseExpirationTime_Type()
)
dhcpClientLeaseExpirationTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpClientLeaseExpirationTime.setStatus("current")
_DhcpClientStatus_Type = DisplayString
_DhcpClientStatus_Object = MibTableColumn
dhcpClientStatus = _DhcpClientStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 6, 1, 4),
    _DhcpClientStatus_Type()
)
dhcpClientStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dhcpClientStatus.setStatus("current")
_DhcpIfClientTable_Object = MibTable
dhcpIfClientTable = _DhcpIfClientTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 7)
)
if mibBuilder.loadTexts:
    dhcpIfClientTable.setStatus("current")
_DhcpIfClientEntry_Object = MibTableRow
dhcpIfClientEntry = _DhcpIfClientEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 7, 1)
)
dhcpIfClientEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RAD-MIB", "dhcpIfClientIpAddress"),
)
if mibBuilder.loadTexts:
    dhcpIfClientEntry.setStatus("current")
_DhcpIfClientIpAddress_Type = IpAddress
_DhcpIfClientIpAddress_Object = MibTableColumn
dhcpIfClientIpAddress = _DhcpIfClientIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 7, 1, 2),
    _DhcpIfClientIpAddress_Type()
)
dhcpIfClientIpAddress.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpIfClientIpAddress.setStatus("current")
_DhcpIfClientRowStatus_Type = RowStatus
_DhcpIfClientRowStatus_Object = MibTableColumn
dhcpIfClientRowStatus = _DhcpIfClientRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 7, 1, 3),
    _DhcpIfClientRowStatus_Type()
)
dhcpIfClientRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    dhcpIfClientRowStatus.setStatus("current")


class _DhcpServerAction_Type(Integer32):
    """Custom type dhcpServerAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("deleteAllClients", 3),
          ("noOp", 2))
    )


_DhcpServerAction_Type.__name__ = "Integer32"
_DhcpServerAction_Object = MibScalar
dhcpServerAction = _DhcpServerAction_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 1, 8),
    _DhcpServerAction_Type()
)
dhcpServerAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dhcpServerAction.setStatus("current")
_WrConfigIpDNS_ObjectIdentity = ObjectIdentity
wrConfigIpDNS = _WrConfigIpDNS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 2)
)


class _WrDNSRelayAction_Type(Integer32):
    """Custom type wrDNSRelayAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_WrDNSRelayAction_Type.__name__ = "Integer32"
_WrDNSRelayAction_Object = MibScalar
wrDNSRelayAction = _WrDNSRelayAction_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 2, 2, 1),
    _WrDNSRelayAction_Type()
)
wrDNSRelayAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    wrDNSRelayAction.setStatus("current")
_WrConfigIpxRouterInfo_ObjectIdentity = ObjectIdentity
wrConfigIpxRouterInfo = _WrConfigIpxRouterInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 3)
)


class _WrAutoLearnLanIpxNets_Type(Integer32):
    """Custom type wrAutoLearnLanIpxNets based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_WrAutoLearnLanIpxNets_Type.__name__ = "Integer32"
_WrAutoLearnLanIpxNets_Object = MibScalar
wrAutoLearnLanIpxNets = _WrAutoLearnLanIpxNets_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 3, 1),
    _WrAutoLearnLanIpxNets_Type()
)
wrAutoLearnLanIpxNets.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    wrAutoLearnLanIpxNets.setStatus("current")
_WrLanIpxNetTable_Object = MibTable
wrLanIpxNetTable = _WrLanIpxNetTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 3, 2)
)
if mibBuilder.loadTexts:
    wrLanIpxNetTable.setStatus("current")
_WrLanIpxNetEntry_Object = MibTableRow
wrLanIpxNetEntry = _WrLanIpxNetEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 3, 2, 1)
)
wrLanIpxNetEntry.setIndexNames(
    (0, "RAD-MIB", "wrLanifIndex"),
    (0, "RAD-MIB", "wrLanIpxFrameType"),
)
if mibBuilder.loadTexts:
    wrLanIpxNetEntry.setStatus("current")
_WrLanifIndex_Type = Integer32
_WrLanifIndex_Object = MibTableColumn
wrLanifIndex = _WrLanifIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 3, 2, 1, 1),
    _WrLanifIndex_Type()
)
wrLanifIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    wrLanifIndex.setStatus("current")


class _WrLanIpxFrameType_Type(Integer32):
    """Custom type wrLanIpxFrameType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ethernet", 2),
          ("snap", 4),
          ("t8022", 3),
          ("t8023", 1))
    )


_WrLanIpxFrameType_Type.__name__ = "Integer32"
_WrLanIpxFrameType_Object = MibTableColumn
wrLanIpxFrameType = _WrLanIpxFrameType_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 3, 2, 1, 2),
    _WrLanIpxFrameType_Type()
)
wrLanIpxFrameType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    wrLanIpxFrameType.setStatus("current")
_WrIpxNetAddress_Type = IpAddress
_WrIpxNetAddress_Object = MibTableColumn
wrIpxNetAddress = _WrIpxNetAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 3, 2, 1, 3),
    _WrIpxNetAddress_Type()
)
wrIpxNetAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    wrIpxNetAddress.setStatus("current")
_WrDialInIpxNet_Type = IpAddress
_WrDialInIpxNet_Object = MibScalar
wrDialInIpxNet = _WrDialInIpxNet_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 3, 3),
    _WrDialInIpxNet_Type()
)
wrDialInIpxNet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    wrDialInIpxNet.setStatus("current")
_RipSapIfConfTable_Object = MibTable
ripSapIfConfTable = _RipSapIfConfTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 3, 4)
)
if mibBuilder.loadTexts:
    ripSapIfConfTable.setStatus("current")
_RipSapIfConfEntry_Object = MibTableRow
ripSapIfConfEntry = _RipSapIfConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 3, 4, 1)
)
ripSapIfConfEntry.setIndexNames(
    (0, "RAD-MIB", "ripSapIfConfIfIndex"),
)
if mibBuilder.loadTexts:
    ripSapIfConfEntry.setStatus("current")
_RipSapIfConfIfIndex_Type = Integer32
_RipSapIfConfIfIndex_Object = MibTableColumn
ripSapIfConfIfIndex = _RipSapIfConfIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 3, 4, 1, 1),
    _RipSapIfConfIfIndex_Type()
)
ripSapIfConfIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ripSapIfConfIfIndex.setStatus("current")


class _RipSapIfConfMode_Type(Integer32):
    """Custom type ripSapIfConfMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_RipSapIfConfMode_Type.__name__ = "Integer32"
_RipSapIfConfMode_Object = MibTableColumn
ripSapIfConfMode = _RipSapIfConfMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 3, 4, 1, 2),
    _RipSapIfConfMode_Type()
)
ripSapIfConfMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ripSapIfConfMode.setStatus("current")
_RipSapIfConfStatus_Type = RowStatus
_RipSapIfConfStatus_Object = MibTableColumn
ripSapIfConfStatus = _RipSapIfConfStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 3, 4, 1, 3),
    _RipSapIfConfStatus_Type()
)
ripSapIfConfStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    ripSapIfConfStatus.setStatus("current")
_WrInterface_ObjectIdentity = ObjectIdentity
wrInterface = _WrInterface_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4)
)
_WrIpAddressTable_Object = MibTable
wrIpAddressTable = _WrIpAddressTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 1)
)
if mibBuilder.loadTexts:
    wrIpAddressTable.setStatus("current")
_WrIpAddressEntry_Object = MibTableRow
wrIpAddressEntry = _WrIpAddressEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 1, 1)
)
wrIpAddressEntry.setIndexNames(
    (0, "RAD-MIB", "wrIpIfIndex"),
)
if mibBuilder.loadTexts:
    wrIpAddressEntry.setStatus("current")
_WrIpIfIndex_Type = Integer32
_WrIpIfIndex_Object = MibTableColumn
wrIpIfIndex = _WrIpIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 1, 1, 1),
    _WrIpIfIndex_Type()
)
wrIpIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    wrIpIfIndex.setStatus("current")
_WrIpAddress_Type = IpAddress
_WrIpAddress_Object = MibTableColumn
wrIpAddress = _WrIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 1, 1, 2),
    _WrIpAddress_Type()
)
wrIpAddress.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wrIpAddress.setStatus("current")
_WrIpMask_Type = IpAddress
_WrIpMask_Object = MibTableColumn
wrIpMask = _WrIpMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 1, 1, 3),
    _WrIpMask_Type()
)
wrIpMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wrIpMask.setStatus("current")
_WrIpRowStatus_Type = RowStatus
_WrIpRowStatus_Object = MibTableColumn
wrIpRowStatus = _WrIpRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 1, 1, 4),
    _WrIpRowStatus_Type()
)
wrIpRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wrIpRowStatus.setStatus("current")
_WrSpoofingTable_Object = MibTable
wrSpoofingTable = _WrSpoofingTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 2)
)
if mibBuilder.loadTexts:
    wrSpoofingTable.setStatus("current")
_WrSpoofingEntry_Object = MibTableRow
wrSpoofingEntry = _WrSpoofingEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 2, 1)
)
wrSpoofingEntry.setIndexNames(
    (0, "RAD-MIB", "wrSpoofingIfIndex"),
)
if mibBuilder.loadTexts:
    wrSpoofingEntry.setStatus("current")
_WrSpoofingIfIndex_Type = Integer32
_WrSpoofingIfIndex_Object = MibTableColumn
wrSpoofingIfIndex = _WrSpoofingIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 2, 1, 1),
    _WrSpoofingIfIndex_Type()
)
wrSpoofingIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    wrSpoofingIfIndex.setStatus("current")
_WrSpoofingAction_Type = Integer32
_WrSpoofingAction_Object = MibTableColumn
wrSpoofingAction = _WrSpoofingAction_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 2, 1, 2),
    _WrSpoofingAction_Type()
)
wrSpoofingAction.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wrSpoofingAction.setStatus("current")
_WrSpoofingAgingStation_Type = Integer32
_WrSpoofingAgingStation_Object = MibTableColumn
wrSpoofingAgingStation = _WrSpoofingAgingStation_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 2, 1, 3),
    _WrSpoofingAgingStation_Type()
)
wrSpoofingAgingStation.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wrSpoofingAgingStation.setStatus("current")
_WrSpoofingRowStatus_Type = RowStatus
_WrSpoofingRowStatus_Object = MibTableColumn
wrSpoofingRowStatus = _WrSpoofingRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 2, 1, 4),
    _WrSpoofingRowStatus_Type()
)
wrSpoofingRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    wrSpoofingRowStatus.setStatus("current")
_WrLanIfTable_Object = MibTable
wrLanIfTable = _WrLanIfTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 3)
)
if mibBuilder.loadTexts:
    wrLanIfTable.setStatus("current")
_WrLanIfEntry_Object = MibTableRow
wrLanIfEntry = _WrLanIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 3, 1)
)
wrLanIfEntry.setIndexNames(
    (0, "RAD-MIB", "wrLanIfIndex"),
)
if mibBuilder.loadTexts:
    wrLanIfEntry.setStatus("current")
_WrLanIfIndex_Type = Integer32
_WrLanIfIndex_Object = MibTableColumn
wrLanIfIndex = _WrLanIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 3, 1, 1),
    _WrLanIfIndex_Type()
)
wrLanIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    wrLanIfIndex.setStatus("current")


class _WrLanBridgeRouterMode_Type(Integer32):
    """Custom type wrLanBridgeRouterMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("bRouter", 6),
          ("bridge", 2),
          ("bridgeAndStp", 10),
          ("ipAndIpxBrouter", 9),
          ("ipAndIpxRouter", 5),
          ("ipBrouter", 7),
          ("ipRouter", 3),
          ("ipxBrouter", 8),
          ("ipxRouter", 4),
          ("unknown", 1))
    )


_WrLanBridgeRouterMode_Type.__name__ = "Integer32"
_WrLanBridgeRouterMode_Object = MibTableColumn
wrLanBridgeRouterMode = _WrLanBridgeRouterMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 3, 1, 2),
    _WrLanBridgeRouterMode_Type()
)
wrLanBridgeRouterMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    wrLanBridgeRouterMode.setStatus("current")


class _WrLanIfState_Type(Integer32):
    """Custom type wrLanIfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("redundancy", 4))
    )


_WrLanIfState_Type.__name__ = "Integer32"
_WrLanIfState_Object = MibTableColumn
wrLanIfState = _WrLanIfState_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 3, 1, 3),
    _WrLanIfState_Type()
)
wrLanIfState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    wrLanIfState.setStatus("current")
_WrLanIfRdnTimeout_Type = Integer32
_WrLanIfRdnTimeout_Object = MibTableColumn
wrLanIfRdnTimeout = _WrLanIfRdnTimeout_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 3, 1, 4),
    _WrLanIfRdnTimeout_Type()
)
wrLanIfRdnTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    wrLanIfRdnTimeout.setStatus("current")
_WrSyncCnfgTable_Object = MibTable
wrSyncCnfgTable = _WrSyncCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 4)
)
if mibBuilder.loadTexts:
    wrSyncCnfgTable.setStatus("current")
_WrSyncCnfgEntry_Object = MibTableRow
wrSyncCnfgEntry = _WrSyncCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 4, 1)
)
wrSyncCnfgEntry.setIndexNames(
    (0, "RAD-MIB", "wrSyncIfIndex"),
)
if mibBuilder.loadTexts:
    wrSyncCnfgEntry.setStatus("current")
_WrSyncIfIndex_Type = Integer32
_WrSyncIfIndex_Object = MibTableColumn
wrSyncIfIndex = _WrSyncIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 4, 1, 1),
    _WrSyncIfIndex_Type()
)
wrSyncIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    wrSyncIfIndex.setStatus("current")


class _WrSyncClkMode_Type(Integer32):
    """Custom type wrSyncClkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("manual", 2),
          ("notApplicable", 1),
          ("program", 3))
    )


_WrSyncClkMode_Type.__name__ = "Integer32"
_WrSyncClkMode_Object = MibTableColumn
wrSyncClkMode = _WrSyncClkMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 4, 1, 2),
    _WrSyncClkMode_Type()
)
wrSyncClkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    wrSyncClkMode.setStatus("current")


class _WrSyncClkRate_Type(Integer32):
    """Custom type wrSyncClkRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("notApplicable", 1),
          ("r128", 7),
          ("r16", 2),
          ("r256", 8),
          ("r32", 3),
          ("r48", 4),
          ("r64", 5),
          ("r768", 9),
          ("r96", 6))
    )


_WrSyncClkRate_Type.__name__ = "Integer32"
_WrSyncClkRate_Object = MibTableColumn
wrSyncClkRate = _WrSyncClkRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 4, 1, 3),
    _WrSyncClkRate_Type()
)
wrSyncClkRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    wrSyncClkRate.setStatus("current")
_WrFrCnfgTable_Object = MibTable
wrFrCnfgTable = _WrFrCnfgTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 5)
)
if mibBuilder.loadTexts:
    wrFrCnfgTable.setStatus("current")
_WrFrCnfgEntry_Object = MibTableRow
wrFrCnfgEntry = _WrFrCnfgEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 5, 1)
)
wrFrCnfgEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    wrFrCnfgEntry.setStatus("current")


class _WrFrDlciLearningMode_Type(Integer32):
    """Custom type wrFrDlciLearningMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_WrFrDlciLearningMode_Type.__name__ = "Integer32"
_WrFrDlciLearningMode_Object = MibTableColumn
wrFrDlciLearningMode = _WrFrDlciLearningMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 5, 1, 1),
    _WrFrDlciLearningMode_Type()
)
wrFrDlciLearningMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    wrFrDlciLearningMode.setStatus("current")


class _WrFrCllmMessages_Type(Integer32):
    """Custom type wrFrCllmMessages based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_WrFrCllmMessages_Type.__name__ = "Integer32"
_WrFrCllmMessages_Object = MibTableColumn
wrFrCllmMessages = _WrFrCllmMessages_Object(
    (1, 3, 6, 1, 4, 1, 164, 11, 7, 2, 4, 5, 1, 2),
    _WrFrCllmMessages_Type()
)
wrFrCllmMessages.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    wrFrCllmMessages.setStatus("current")
_RadAtm_ObjectIdentity = ObjectIdentity
radAtm = _RadAtm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12)
)
_AtmGen_ObjectIdentity = ObjectIdentity
atmGen = _AtmGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 2)
)
_AtmPerfHistory_ObjectIdentity = ObjectIdentity
atmPerfHistory = _AtmPerfHistory_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1)
)
_AtmIfPerformance_ObjectIdentity = ObjectIdentity
atmIfPerformance = _AtmIfPerformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1)
)
_AtmIfDataTable_Object = MibTable
atmIfDataTable = _AtmIfDataTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1, 1)
)
if mibBuilder.loadTexts:
    atmIfDataTable.setStatus("current")
_AtmIfDataEntry_Object = MibTableRow
atmIfDataEntry = _AtmIfDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1, 1, 1)
)
atmIfDataEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    atmIfDataEntry.setStatus("current")


class _AtmIfTimeElapsed_Type(Integer32):
    """Custom type atmIfTimeElapsed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 899),
    )


_AtmIfTimeElapsed_Type.__name__ = "Integer32"
_AtmIfTimeElapsed_Object = MibTableColumn
atmIfTimeElapsed = _AtmIfTimeElapsed_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1, 1, 1, 1),
    _AtmIfTimeElapsed_Type()
)
atmIfTimeElapsed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmIfTimeElapsed.setStatus("current")


class _AtmIfValidIntervals_Type(Integer32):
    """Custom type atmIfValidIntervals based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 96),
    )


_AtmIfValidIntervals_Type.__name__ = "Integer32"
_AtmIfValidIntervals_Object = MibTableColumn
atmIfValidIntervals = _AtmIfValidIntervals_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1, 1, 1, 2),
    _AtmIfValidIntervals_Type()
)
atmIfValidIntervals.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmIfValidIntervals.setStatus("current")
_AtmIfTxCells_Type = Counter32
_AtmIfTxCells_Object = MibTableColumn
atmIfTxCells = _AtmIfTxCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1, 1, 1, 3),
    _AtmIfTxCells_Type()
)
atmIfTxCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmIfTxCells.setStatus("current")
_AtmIfRxCells_Type = Counter32
_AtmIfRxCells_Object = MibTableColumn
atmIfRxCells = _AtmIfRxCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1, 1, 1, 4),
    _AtmIfRxCells_Type()
)
atmIfRxCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmIfRxCells.setStatus("current")
_AtmIfUncorrectedHecs_Type = Counter32
_AtmIfUncorrectedHecs_Object = MibTableColumn
atmIfUncorrectedHecs = _AtmIfUncorrectedHecs_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1, 1, 1, 5),
    _AtmIfUncorrectedHecs_Type()
)
atmIfUncorrectedHecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmIfUncorrectedHecs.setStatus("current")
_AtmIfCurrentTable_Object = MibTable
atmIfCurrentTable = _AtmIfCurrentTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1, 2)
)
if mibBuilder.loadTexts:
    atmIfCurrentTable.setStatus("current")
_AtmIfCurrentEntry_Object = MibTableRow
atmIfCurrentEntry = _AtmIfCurrentEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1, 2, 1)
)
atmIfCurrentEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    atmIfCurrentEntry.setStatus("current")
_AtmIfCurrentTxCells_Type = Gauge32
_AtmIfCurrentTxCells_Object = MibTableColumn
atmIfCurrentTxCells = _AtmIfCurrentTxCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1, 2, 1, 1),
    _AtmIfCurrentTxCells_Type()
)
atmIfCurrentTxCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmIfCurrentTxCells.setStatus("current")
_AtmIfCurrentRxCells_Type = Gauge32
_AtmIfCurrentRxCells_Object = MibTableColumn
atmIfCurrentRxCells = _AtmIfCurrentRxCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1, 2, 1, 2),
    _AtmIfCurrentRxCells_Type()
)
atmIfCurrentRxCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmIfCurrentRxCells.setStatus("current")
_AtmIfCurrentCorrectedHecs_Type = Gauge32
_AtmIfCurrentCorrectedHecs_Object = MibTableColumn
atmIfCurrentCorrectedHecs = _AtmIfCurrentCorrectedHecs_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1, 2, 1, 3),
    _AtmIfCurrentCorrectedHecs_Type()
)
atmIfCurrentCorrectedHecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmIfCurrentCorrectedHecs.setStatus("current")
_AtmIfCurrentUncorrectedHecs_Type = Gauge32
_AtmIfCurrentUncorrectedHecs_Object = MibTableColumn
atmIfCurrentUncorrectedHecs = _AtmIfCurrentUncorrectedHecs_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1, 2, 1, 4),
    _AtmIfCurrentUncorrectedHecs_Type()
)
atmIfCurrentUncorrectedHecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmIfCurrentUncorrectedHecs.setStatus("current")
_AtmIfCurrentHecErrorSeconds_Type = Gauge32
_AtmIfCurrentHecErrorSeconds_Object = MibTableColumn
atmIfCurrentHecErrorSeconds = _AtmIfCurrentHecErrorSeconds_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1, 2, 1, 5),
    _AtmIfCurrentHecErrorSeconds_Type()
)
atmIfCurrentHecErrorSeconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmIfCurrentHecErrorSeconds.setStatus("current")
_AtmIfIntervalTable_Object = MibTable
atmIfIntervalTable = _AtmIfIntervalTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1, 3)
)
if mibBuilder.loadTexts:
    atmIfIntervalTable.setStatus("current")
_AtmIfIntervalEntry_Object = MibTableRow
atmIfIntervalEntry = _AtmIfIntervalEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1, 3, 1)
)
atmIfIntervalEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RAD-MIB", "atmIfIntervalNumber"),
)
if mibBuilder.loadTexts:
    atmIfIntervalEntry.setStatus("current")


class _AtmIfIntervalNumber_Type(Integer32):
    """Custom type atmIfIntervalNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_AtmIfIntervalNumber_Type.__name__ = "Integer32"
_AtmIfIntervalNumber_Object = MibTableColumn
atmIfIntervalNumber = _AtmIfIntervalNumber_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1, 3, 1, 1),
    _AtmIfIntervalNumber_Type()
)
atmIfIntervalNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmIfIntervalNumber.setStatus("current")
_AtmIfIntervalTxCells_Type = Gauge32
_AtmIfIntervalTxCells_Object = MibTableColumn
atmIfIntervalTxCells = _AtmIfIntervalTxCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1, 3, 1, 2),
    _AtmIfIntervalTxCells_Type()
)
atmIfIntervalTxCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmIfIntervalTxCells.setStatus("current")
_AtmIfIntervalRxCells_Type = Gauge32
_AtmIfIntervalRxCells_Object = MibTableColumn
atmIfIntervalRxCells = _AtmIfIntervalRxCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1, 3, 1, 3),
    _AtmIfIntervalRxCells_Type()
)
atmIfIntervalRxCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmIfIntervalRxCells.setStatus("current")
_AtmIfIntervalCorrectedHecs_Type = Gauge32
_AtmIfIntervalCorrectedHecs_Object = MibTableColumn
atmIfIntervalCorrectedHecs = _AtmIfIntervalCorrectedHecs_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1, 3, 1, 4),
    _AtmIfIntervalCorrectedHecs_Type()
)
atmIfIntervalCorrectedHecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmIfIntervalCorrectedHecs.setStatus("current")
_AtmIfIntervalUncorrectedHecs_Type = Gauge32
_AtmIfIntervalUncorrectedHecs_Object = MibTableColumn
atmIfIntervalUncorrectedHecs = _AtmIfIntervalUncorrectedHecs_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1, 3, 1, 5),
    _AtmIfIntervalUncorrectedHecs_Type()
)
atmIfIntervalUncorrectedHecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmIfIntervalUncorrectedHecs.setStatus("current")
_AtmIfIntervalHecErrorSeconds_Type = Gauge32
_AtmIfIntervalHecErrorSeconds_Object = MibTableColumn
atmIfIntervalHecErrorSeconds = _AtmIfIntervalHecErrorSeconds_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 1, 3, 1, 6),
    _AtmIfIntervalHecErrorSeconds_Type()
)
atmIfIntervalHecErrorSeconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmIfIntervalHecErrorSeconds.setStatus("current")
_AtmPvcPerformance_ObjectIdentity = ObjectIdentity
atmPvcPerformance = _AtmPvcPerformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2)
)
_AtmVpPerformance_ObjectIdentity = ObjectIdentity
atmVpPerformance = _AtmVpPerformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1)
)
_AtmVpCurrentTable_Object = MibTable
atmVpCurrentTable = _AtmVpCurrentTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1)
)
if mibBuilder.loadTexts:
    atmVpCurrentTable.setStatus("current")
_AtmVpCurrentEntry_Object = MibTableRow
atmVpCurrentEntry = _AtmVpCurrentEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1)
)
atmVpCurrentEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RAD-MIB", "atmVpCurrentVpi"),
)
if mibBuilder.loadTexts:
    atmVpCurrentEntry.setStatus("current")
_AtmVpCurrentVpi_Type = Integer32
_AtmVpCurrentVpi_Object = MibTableColumn
atmVpCurrentVpi = _AtmVpCurrentVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 1),
    _AtmVpCurrentVpi_Type()
)
atmVpCurrentVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentVpi.setStatus("current")
_AtmVpCurrentRxCellsClp01_Type = Gauge32
_AtmVpCurrentRxCellsClp01_Object = MibTableColumn
atmVpCurrentRxCellsClp01 = _AtmVpCurrentRxCellsClp01_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 2),
    _AtmVpCurrentRxCellsClp01_Type()
)
atmVpCurrentRxCellsClp01.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentRxCellsClp01.setStatus("current")
_AtmVpCurrentRxCellsClp0_Type = Gauge32
_AtmVpCurrentRxCellsClp0_Object = MibTableColumn
atmVpCurrentRxCellsClp0 = _AtmVpCurrentRxCellsClp0_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 3),
    _AtmVpCurrentRxCellsClp0_Type()
)
atmVpCurrentRxCellsClp0.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentRxCellsClp0.setStatus("current")
_AtmVpCurrentGcra0Violations_Type = Gauge32
_AtmVpCurrentGcra0Violations_Object = MibTableColumn
atmVpCurrentGcra0Violations = _AtmVpCurrentGcra0Violations_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 4),
    _AtmVpCurrentGcra0Violations_Type()
)
atmVpCurrentGcra0Violations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentGcra0Violations.setStatus("current")
_AtmVpCurrentGcra1Violations_Type = Gauge32
_AtmVpCurrentGcra1Violations_Object = MibTableColumn
atmVpCurrentGcra1Violations = _AtmVpCurrentGcra1Violations_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 5),
    _AtmVpCurrentGcra1Violations_Type()
)
atmVpCurrentGcra1Violations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentGcra1Violations.setStatus("current")
_AtmVpCurrentRxAIS_Type = Gauge32
_AtmVpCurrentRxAIS_Object = MibTableColumn
atmVpCurrentRxAIS = _AtmVpCurrentRxAIS_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 6),
    _AtmVpCurrentRxAIS_Type()
)
atmVpCurrentRxAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentRxAIS.setStatus("current")
_AtmVpCurrentTxAIS_Type = Gauge32
_AtmVpCurrentTxAIS_Object = MibTableColumn
atmVpCurrentTxAIS = _AtmVpCurrentTxAIS_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 7),
    _AtmVpCurrentTxAIS_Type()
)
atmVpCurrentTxAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentTxAIS.setStatus("current")
_AtmVpCurrentRxRDI_Type = Gauge32
_AtmVpCurrentRxRDI_Object = MibTableColumn
atmVpCurrentRxRDI = _AtmVpCurrentRxRDI_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 8),
    _AtmVpCurrentRxRDI_Type()
)
atmVpCurrentRxRDI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentRxRDI.setStatus("current")
_AtmVpCurrentTxRDI_Type = Gauge32
_AtmVpCurrentTxRDI_Object = MibTableColumn
atmVpCurrentTxRDI = _AtmVpCurrentTxRDI_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 9),
    _AtmVpCurrentTxRDI_Type()
)
atmVpCurrentTxRDI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentTxRDI.setStatus("current")
_AtmVpCurrentContinuityLoss_Type = Gauge32
_AtmVpCurrentContinuityLoss_Object = MibTableColumn
atmVpCurrentContinuityLoss = _AtmVpCurrentContinuityLoss_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 10),
    _AtmVpCurrentContinuityLoss_Type()
)
atmVpCurrentContinuityLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentContinuityLoss.setStatus("current")
_AtmVpCurrentUAS_Type = Gauge32
_AtmVpCurrentUAS_Object = MibTableColumn
atmVpCurrentUAS = _AtmVpCurrentUAS_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 11),
    _AtmVpCurrentUAS_Type()
)
atmVpCurrentUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentUAS.setStatus("current")
_AtmVpCurrentSES_Type = Gauge32
_AtmVpCurrentSES_Object = MibTableColumn
atmVpCurrentSES = _AtmVpCurrentSES_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 12),
    _AtmVpCurrentSES_Type()
)
atmVpCurrentSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentSES.setStatus("current")
_AtmVpCurrentCDC_Type = Gauge32
_AtmVpCurrentCDC_Object = MibTableColumn
atmVpCurrentCDC = _AtmVpCurrentCDC_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 13),
    _AtmVpCurrentCDC_Type()
)
atmVpCurrentCDC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentCDC.setStatus("current")
_AtmVpCurrentTotalDiscards_Type = Gauge32
_AtmVpCurrentTotalDiscards_Object = MibTableColumn
atmVpCurrentTotalDiscards = _AtmVpCurrentTotalDiscards_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 14),
    _AtmVpCurrentTotalDiscards_Type()
)
atmVpCurrentTotalDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentTotalDiscards.setStatus("current")
_AtmVpCurrentClp0Discards_Type = Gauge32
_AtmVpCurrentClp0Discards_Object = MibTableColumn
atmVpCurrentClp0Discards = _AtmVpCurrentClp0Discards_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 15),
    _AtmVpCurrentClp0Discards_Type()
)
atmVpCurrentClp0Discards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentClp0Discards.setStatus("current")
_AtmVpCurrentTotalCellOuts_Type = Gauge32
_AtmVpCurrentTotalCellOuts_Object = MibTableColumn
atmVpCurrentTotalCellOuts = _AtmVpCurrentTotalCellOuts_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 16),
    _AtmVpCurrentTotalCellOuts_Type()
)
atmVpCurrentTotalCellOuts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentTotalCellOuts.setStatus("current")
_AtmVpCurrentClp0CellOuts_Type = Gauge32
_AtmVpCurrentClp0CellOuts_Object = MibTableColumn
atmVpCurrentClp0CellOuts = _AtmVpCurrentClp0CellOuts_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 17),
    _AtmVpCurrentClp0CellOuts_Type()
)
atmVpCurrentClp0CellOuts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentClp0CellOuts.setStatus("current")
_AtmVpCurrentTaggedOuts_Type = Gauge32
_AtmVpCurrentTaggedOuts_Object = MibTableColumn
atmVpCurrentTaggedOuts = _AtmVpCurrentTaggedOuts_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 18),
    _AtmVpCurrentTaggedOuts_Type()
)
atmVpCurrentTaggedOuts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentTaggedOuts.setStatus("current")
_AtmVpCurrentPCR_Type = Gauge32
_AtmVpCurrentPCR_Object = MibTableColumn
atmVpCurrentPCR = _AtmVpCurrentPCR_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 19),
    _AtmVpCurrentPCR_Type()
)
atmVpCurrentPCR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentPCR.setStatus("current")
_AtmVpCurrentSCR_Type = Gauge32
_AtmVpCurrentSCR_Object = MibTableColumn
atmVpCurrentSCR = _AtmVpCurrentSCR_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 20),
    _AtmVpCurrentSCR_Type()
)
atmVpCurrentSCR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentSCR.setStatus("current")
_AtmVpCurrentMCR_Type = Gauge32
_AtmVpCurrentMCR_Object = MibTableColumn
atmVpCurrentMCR = _AtmVpCurrentMCR_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 21),
    _AtmVpCurrentMCR_Type()
)
atmVpCurrentMCR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentMCR.setStatus("current")
_AtmVpCurrentShaperTotalDiscards_Type = Gauge32
_AtmVpCurrentShaperTotalDiscards_Object = MibTableColumn
atmVpCurrentShaperTotalDiscards = _AtmVpCurrentShaperTotalDiscards_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 22),
    _AtmVpCurrentShaperTotalDiscards_Type()
)
atmVpCurrentShaperTotalDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentShaperTotalDiscards.setStatus("current")
_AtmVpCurrentShaperClp0Discards_Type = Gauge32
_AtmVpCurrentShaperClp0Discards_Object = MibTableColumn
atmVpCurrentShaperClp0Discards = _AtmVpCurrentShaperClp0Discards_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 23),
    _AtmVpCurrentShaperClp0Discards_Type()
)
atmVpCurrentShaperClp0Discards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentShaperClp0Discards.setStatus("current")
_AtmVpCurrentShaperClp1Discards_Type = Gauge32
_AtmVpCurrentShaperClp1Discards_Object = MibTableColumn
atmVpCurrentShaperClp1Discards = _AtmVpCurrentShaperClp1Discards_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 1, 1, 24),
    _AtmVpCurrentShaperClp1Discards_Type()
)
atmVpCurrentShaperClp1Discards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpCurrentShaperClp1Discards.setStatus("current")
_AtmVpPMCurrentTable_Object = MibTable
atmVpPMCurrentTable = _AtmVpPMCurrentTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 2)
)
if mibBuilder.loadTexts:
    atmVpPMCurrentTable.setStatus("current")
_AtmVpPMCurrentEntry_Object = MibTableRow
atmVpPMCurrentEntry = _AtmVpPMCurrentEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 2, 1)
)
atmVpPMCurrentEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RAD-MIB", "atmVpPMCurrentVpi"),
    (0, "RAD-MIB", "atmVpPMCurrentDir"),
)
if mibBuilder.loadTexts:
    atmVpPMCurrentEntry.setStatus("current")
_AtmVpPMCurrentVpi_Type = Integer32
_AtmVpPMCurrentVpi_Object = MibTableColumn
atmVpPMCurrentVpi = _AtmVpPMCurrentVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 2, 1, 1),
    _AtmVpPMCurrentVpi_Type()
)
atmVpPMCurrentVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMCurrentVpi.setStatus("current")


class _AtmVpPMCurrentDir_Type(Integer32):
    """Custom type atmVpPMCurrentDir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("backward", 3),
          ("forward", 2))
    )


_AtmVpPMCurrentDir_Type.__name__ = "Integer32"
_AtmVpPMCurrentDir_Object = MibTableColumn
atmVpPMCurrentDir = _AtmVpPMCurrentDir_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 2, 1, 2),
    _AtmVpPMCurrentDir_Type()
)
atmVpPMCurrentDir.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMCurrentDir.setStatus("current")
_AtmVpPMCurrentTxClp01_Type = Gauge32
_AtmVpPMCurrentTxClp01_Object = MibTableColumn
atmVpPMCurrentTxClp01 = _AtmVpPMCurrentTxClp01_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 2, 1, 3),
    _AtmVpPMCurrentTxClp01_Type()
)
atmVpPMCurrentTxClp01.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMCurrentTxClp01.setStatus("current")
_AtmVpPMCurrentTxClp0_Type = Gauge32
_AtmVpPMCurrentTxClp0_Object = MibTableColumn
atmVpPMCurrentTxClp0 = _AtmVpPMCurrentTxClp0_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 2, 1, 4),
    _AtmVpPMCurrentTxClp0_Type()
)
atmVpPMCurrentTxClp0.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMCurrentTxClp0.setStatus("current")
_AtmVpPMCurrentRxClp01_Type = Gauge32
_AtmVpPMCurrentRxClp01_Object = MibTableColumn
atmVpPMCurrentRxClp01 = _AtmVpPMCurrentRxClp01_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 2, 1, 5),
    _AtmVpPMCurrentRxClp01_Type()
)
atmVpPMCurrentRxClp01.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMCurrentRxClp01.setStatus("current")
_AtmVpPMCurrentRxClp0_Type = Gauge32
_AtmVpPMCurrentRxClp0_Object = MibTableColumn
atmVpPMCurrentRxClp0 = _AtmVpPMCurrentRxClp0_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 2, 1, 6),
    _AtmVpPMCurrentRxClp0_Type()
)
atmVpPMCurrentRxClp0.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMCurrentRxClp0.setStatus("current")
_AtmVpPMCurrentErroredCells_Type = Gauge32
_AtmVpPMCurrentErroredCells_Object = MibTableColumn
atmVpPMCurrentErroredCells = _AtmVpPMCurrentErroredCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 2, 1, 7),
    _AtmVpPMCurrentErroredCells_Type()
)
atmVpPMCurrentErroredCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMCurrentErroredCells.setStatus("current")
_AtmVpPMCurrentLostCells_Type = Gauge32
_AtmVpPMCurrentLostCells_Object = MibTableColumn
atmVpPMCurrentLostCells = _AtmVpPMCurrentLostCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 2, 1, 8),
    _AtmVpPMCurrentLostCells_Type()
)
atmVpPMCurrentLostCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMCurrentLostCells.setStatus("current")
_AtmVpPMCurrentMisinsertedCells_Type = Gauge32
_AtmVpPMCurrentMisinsertedCells_Object = MibTableColumn
atmVpPMCurrentMisinsertedCells = _AtmVpPMCurrentMisinsertedCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 2, 1, 9),
    _AtmVpPMCurrentMisinsertedCells_Type()
)
atmVpPMCurrentMisinsertedCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMCurrentMisinsertedCells.setStatus("current")
_AtmVpPMCurrentECB_Type = Gauge32
_AtmVpPMCurrentECB_Object = MibTableColumn
atmVpPMCurrentECB = _AtmVpPMCurrentECB_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 2, 1, 10),
    _AtmVpPMCurrentECB_Type()
)
atmVpPMCurrentECB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMCurrentECB.setStatus("current")
_AtmVpPMCurrentSECB_Type = Gauge32
_AtmVpPMCurrentSECB_Object = MibTableColumn
atmVpPMCurrentSECB = _AtmVpPMCurrentSECB_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 2, 1, 11),
    _AtmVpPMCurrentSECB_Type()
)
atmVpPMCurrentSECB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMCurrentSECB.setStatus("current")
_AtmVpPMCurrentES_Type = Gauge32
_AtmVpPMCurrentES_Object = MibTableColumn
atmVpPMCurrentES = _AtmVpPMCurrentES_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 2, 1, 12),
    _AtmVpPMCurrentES_Type()
)
atmVpPMCurrentES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMCurrentES.setStatus("current")
_AtmVpPMCurrentSES_Type = Gauge32
_AtmVpPMCurrentSES_Object = MibTableColumn
atmVpPMCurrentSES = _AtmVpPMCurrentSES_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 2, 1, 13),
    _AtmVpPMCurrentSES_Type()
)
atmVpPMCurrentSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMCurrentSES.setStatus("current")
_AtmVpPMCurrentUAS_Type = Gauge32
_AtmVpPMCurrentUAS_Object = MibTableColumn
atmVpPMCurrentUAS = _AtmVpPMCurrentUAS_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 2, 1, 14),
    _AtmVpPMCurrentUAS_Type()
)
atmVpPMCurrentUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMCurrentUAS.setStatus("current")


class _AtmVpPMCurrentIntervalQuality_Type(Integer32):
    """Custom type atmVpPMCurrentIntervalQuality based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("normal", 2),
          ("unacceptable", 3))
    )


_AtmVpPMCurrentIntervalQuality_Type.__name__ = "Integer32"
_AtmVpPMCurrentIntervalQuality_Object = MibTableColumn
atmVpPMCurrentIntervalQuality = _AtmVpPMCurrentIntervalQuality_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 2, 1, 15),
    _AtmVpPMCurrentIntervalQuality_Type()
)
atmVpPMCurrentIntervalQuality.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMCurrentIntervalQuality.setStatus("current")


class _AtmVpPMCurrentLastDayQuality_Type(Integer32):
    """Custom type atmVpPMCurrentLastDayQuality based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("degraded", 4),
          ("normal", 2))
    )


_AtmVpPMCurrentLastDayQuality_Type.__name__ = "Integer32"
_AtmVpPMCurrentLastDayQuality_Object = MibTableColumn
atmVpPMCurrentLastDayQuality = _AtmVpPMCurrentLastDayQuality_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 2, 1, 16),
    _AtmVpPMCurrentLastDayQuality_Type()
)
atmVpPMCurrentLastDayQuality.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMCurrentLastDayQuality.setStatus("current")
_AtmVpIntervalTable_Object = MibTable
atmVpIntervalTable = _AtmVpIntervalTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3)
)
if mibBuilder.loadTexts:
    atmVpIntervalTable.setStatus("current")
_AtmVpIntervalEntry_Object = MibTableRow
atmVpIntervalEntry = _AtmVpIntervalEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1)
)
atmVpIntervalEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RAD-MIB", "atmVpIntervalVpi"),
    (0, "RAD-MIB", "atmVpIntervalNumber"),
)
if mibBuilder.loadTexts:
    atmVpIntervalEntry.setStatus("current")
_AtmVpIntervalVpi_Type = Integer32
_AtmVpIntervalVpi_Object = MibTableColumn
atmVpIntervalVpi = _AtmVpIntervalVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 1),
    _AtmVpIntervalVpi_Type()
)
atmVpIntervalVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalVpi.setStatus("current")


class _AtmVpIntervalNumber_Type(Integer32):
    """Custom type atmVpIntervalNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_AtmVpIntervalNumber_Type.__name__ = "Integer32"
_AtmVpIntervalNumber_Object = MibTableColumn
atmVpIntervalNumber = _AtmVpIntervalNumber_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 2),
    _AtmVpIntervalNumber_Type()
)
atmVpIntervalNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalNumber.setStatus("current")
_AtmVpIntervalRxCellsClp01_Type = Gauge32
_AtmVpIntervalRxCellsClp01_Object = MibTableColumn
atmVpIntervalRxCellsClp01 = _AtmVpIntervalRxCellsClp01_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 3),
    _AtmVpIntervalRxCellsClp01_Type()
)
atmVpIntervalRxCellsClp01.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalRxCellsClp01.setStatus("current")
_AtmVpIntervalRxCellsClp0_Type = Gauge32
_AtmVpIntervalRxCellsClp0_Object = MibTableColumn
atmVpIntervalRxCellsClp0 = _AtmVpIntervalRxCellsClp0_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 4),
    _AtmVpIntervalRxCellsClp0_Type()
)
atmVpIntervalRxCellsClp0.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalRxCellsClp0.setStatus("current")
_AtmVpIntervalGcra0Violations_Type = Gauge32
_AtmVpIntervalGcra0Violations_Object = MibTableColumn
atmVpIntervalGcra0Violations = _AtmVpIntervalGcra0Violations_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 5),
    _AtmVpIntervalGcra0Violations_Type()
)
atmVpIntervalGcra0Violations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalGcra0Violations.setStatus("current")
_AtmVpIntervalGcra1Violations_Type = Gauge32
_AtmVpIntervalGcra1Violations_Object = MibTableColumn
atmVpIntervalGcra1Violations = _AtmVpIntervalGcra1Violations_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 6),
    _AtmVpIntervalGcra1Violations_Type()
)
atmVpIntervalGcra1Violations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalGcra1Violations.setStatus("current")
_AtmVpIntervalRxAIS_Type = Gauge32
_AtmVpIntervalRxAIS_Object = MibTableColumn
atmVpIntervalRxAIS = _AtmVpIntervalRxAIS_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 7),
    _AtmVpIntervalRxAIS_Type()
)
atmVpIntervalRxAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalRxAIS.setStatus("current")
_AtmVpIntervalTxAIS_Type = Gauge32
_AtmVpIntervalTxAIS_Object = MibTableColumn
atmVpIntervalTxAIS = _AtmVpIntervalTxAIS_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 8),
    _AtmVpIntervalTxAIS_Type()
)
atmVpIntervalTxAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalTxAIS.setStatus("current")
_AtmVpIntervalRxRDI_Type = Gauge32
_AtmVpIntervalRxRDI_Object = MibTableColumn
atmVpIntervalRxRDI = _AtmVpIntervalRxRDI_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 9),
    _AtmVpIntervalRxRDI_Type()
)
atmVpIntervalRxRDI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalRxRDI.setStatus("current")
_AtmVpIntervalTxRDI_Type = Gauge32
_AtmVpIntervalTxRDI_Object = MibTableColumn
atmVpIntervalTxRDI = _AtmVpIntervalTxRDI_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 10),
    _AtmVpIntervalTxRDI_Type()
)
atmVpIntervalTxRDI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalTxRDI.setStatus("current")
_AtmVpIntervalContinuityLoss_Type = Gauge32
_AtmVpIntervalContinuityLoss_Object = MibTableColumn
atmVpIntervalContinuityLoss = _AtmVpIntervalContinuityLoss_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 11),
    _AtmVpIntervalContinuityLoss_Type()
)
atmVpIntervalContinuityLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalContinuityLoss.setStatus("current")
_AtmVpIntervalUAS_Type = Gauge32
_AtmVpIntervalUAS_Object = MibTableColumn
atmVpIntervalUAS = _AtmVpIntervalUAS_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 12),
    _AtmVpIntervalUAS_Type()
)
atmVpIntervalUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalUAS.setStatus("current")
_AtmVpIntervalSES_Type = Gauge32
_AtmVpIntervalSES_Object = MibTableColumn
atmVpIntervalSES = _AtmVpIntervalSES_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 13),
    _AtmVpIntervalSES_Type()
)
atmVpIntervalSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalSES.setStatus("current")
_AtmVpIntervalCDC_Type = Gauge32
_AtmVpIntervalCDC_Object = MibTableColumn
atmVpIntervalCDC = _AtmVpIntervalCDC_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 14),
    _AtmVpIntervalCDC_Type()
)
atmVpIntervalCDC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalCDC.setStatus("current")
_AtmVpIntervalTotalDiscards_Type = Gauge32
_AtmVpIntervalTotalDiscards_Object = MibTableColumn
atmVpIntervalTotalDiscards = _AtmVpIntervalTotalDiscards_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 15),
    _AtmVpIntervalTotalDiscards_Type()
)
atmVpIntervalTotalDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalTotalDiscards.setStatus("current")
_AtmVpIntervalClp0Discards_Type = Gauge32
_AtmVpIntervalClp0Discards_Object = MibTableColumn
atmVpIntervalClp0Discards = _AtmVpIntervalClp0Discards_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 16),
    _AtmVpIntervalClp0Discards_Type()
)
atmVpIntervalClp0Discards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalClp0Discards.setStatus("current")
_AtmVpIntervalTotalCellOuts_Type = Gauge32
_AtmVpIntervalTotalCellOuts_Object = MibTableColumn
atmVpIntervalTotalCellOuts = _AtmVpIntervalTotalCellOuts_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 17),
    _AtmVpIntervalTotalCellOuts_Type()
)
atmVpIntervalTotalCellOuts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalTotalCellOuts.setStatus("current")
_AtmVpIntervalClp0CellOuts_Type = Gauge32
_AtmVpIntervalClp0CellOuts_Object = MibTableColumn
atmVpIntervalClp0CellOuts = _AtmVpIntervalClp0CellOuts_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 18),
    _AtmVpIntervalClp0CellOuts_Type()
)
atmVpIntervalClp0CellOuts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalClp0CellOuts.setStatus("current")
_AtmVpIntervalTaggedOuts_Type = Gauge32
_AtmVpIntervalTaggedOuts_Object = MibTableColumn
atmVpIntervalTaggedOuts = _AtmVpIntervalTaggedOuts_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 19),
    _AtmVpIntervalTaggedOuts_Type()
)
atmVpIntervalTaggedOuts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalTaggedOuts.setStatus("current")
_AtmVpIntervalPCR_Type = Gauge32
_AtmVpIntervalPCR_Object = MibTableColumn
atmVpIntervalPCR = _AtmVpIntervalPCR_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 20),
    _AtmVpIntervalPCR_Type()
)
atmVpIntervalPCR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalPCR.setStatus("current")
_AtmVpIntervalSCR_Type = Gauge32
_AtmVpIntervalSCR_Object = MibTableColumn
atmVpIntervalSCR = _AtmVpIntervalSCR_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 21),
    _AtmVpIntervalSCR_Type()
)
atmVpIntervalSCR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalSCR.setStatus("current")
_AtmVpIntervalMCR_Type = Gauge32
_AtmVpIntervalMCR_Object = MibTableColumn
atmVpIntervalMCR = _AtmVpIntervalMCR_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 22),
    _AtmVpIntervalMCR_Type()
)
atmVpIntervalMCR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalMCR.setStatus("current")
_AtmVpIntervalShaperTotalDiscards_Type = Gauge32
_AtmVpIntervalShaperTotalDiscards_Object = MibTableColumn
atmVpIntervalShaperTotalDiscards = _AtmVpIntervalShaperTotalDiscards_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 23),
    _AtmVpIntervalShaperTotalDiscards_Type()
)
atmVpIntervalShaperTotalDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalShaperTotalDiscards.setStatus("current")
_AtmVpIntervalShaperClp0Discards_Type = Gauge32
_AtmVpIntervalShaperClp0Discards_Object = MibTableColumn
atmVpIntervalShaperClp0Discards = _AtmVpIntervalShaperClp0Discards_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 24),
    _AtmVpIntervalShaperClp0Discards_Type()
)
atmVpIntervalShaperClp0Discards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalShaperClp0Discards.setStatus("current")
_AtmVpIntervalShaperClp1Discards_Type = Gauge32
_AtmVpIntervalShaperClp1Discards_Object = MibTableColumn
atmVpIntervalShaperClp1Discards = _AtmVpIntervalShaperClp1Discards_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 3, 1, 25),
    _AtmVpIntervalShaperClp1Discards_Type()
)
atmVpIntervalShaperClp1Discards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpIntervalShaperClp1Discards.setStatus("current")
_AtmVpPMIntervalTable_Object = MibTable
atmVpPMIntervalTable = _AtmVpPMIntervalTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 4)
)
if mibBuilder.loadTexts:
    atmVpPMIntervalTable.setStatus("current")
_AtmVpPMIntervalEntry_Object = MibTableRow
atmVpPMIntervalEntry = _AtmVpPMIntervalEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 4, 1)
)
atmVpPMIntervalEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RAD-MIB", "atmVpPMIntervalVpi"),
    (0, "RAD-MIB", "atmVpPMIntervalDir"),
    (0, "RAD-MIB", "atmVpPMIntervalNumber"),
)
if mibBuilder.loadTexts:
    atmVpPMIntervalEntry.setStatus("current")
_AtmVpPMIntervalVpi_Type = Integer32
_AtmVpPMIntervalVpi_Object = MibTableColumn
atmVpPMIntervalVpi = _AtmVpPMIntervalVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 4, 1, 1),
    _AtmVpPMIntervalVpi_Type()
)
atmVpPMIntervalVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMIntervalVpi.setStatus("current")


class _AtmVpPMIntervalDir_Type(Integer32):
    """Custom type atmVpPMIntervalDir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("backward", 3),
          ("forward", 2))
    )


_AtmVpPMIntervalDir_Type.__name__ = "Integer32"
_AtmVpPMIntervalDir_Object = MibTableColumn
atmVpPMIntervalDir = _AtmVpPMIntervalDir_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 4, 1, 2),
    _AtmVpPMIntervalDir_Type()
)
atmVpPMIntervalDir.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMIntervalDir.setStatus("current")


class _AtmVpPMIntervalNumber_Type(Integer32):
    """Custom type atmVpPMIntervalNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_AtmVpPMIntervalNumber_Type.__name__ = "Integer32"
_AtmVpPMIntervalNumber_Object = MibTableColumn
atmVpPMIntervalNumber = _AtmVpPMIntervalNumber_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 4, 1, 3),
    _AtmVpPMIntervalNumber_Type()
)
atmVpPMIntervalNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMIntervalNumber.setStatus("current")
_AtmVpPMIntervalTxClp01_Type = Gauge32
_AtmVpPMIntervalTxClp01_Object = MibTableColumn
atmVpPMIntervalTxClp01 = _AtmVpPMIntervalTxClp01_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 4, 1, 4),
    _AtmVpPMIntervalTxClp01_Type()
)
atmVpPMIntervalTxClp01.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMIntervalTxClp01.setStatus("current")
_AtmVpPMIntervalTxClp0_Type = Gauge32
_AtmVpPMIntervalTxClp0_Object = MibTableColumn
atmVpPMIntervalTxClp0 = _AtmVpPMIntervalTxClp0_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 4, 1, 5),
    _AtmVpPMIntervalTxClp0_Type()
)
atmVpPMIntervalTxClp0.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMIntervalTxClp0.setStatus("current")
_AtmVpPMIntervalRxClp01_Type = Gauge32
_AtmVpPMIntervalRxClp01_Object = MibTableColumn
atmVpPMIntervalRxClp01 = _AtmVpPMIntervalRxClp01_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 4, 1, 6),
    _AtmVpPMIntervalRxClp01_Type()
)
atmVpPMIntervalRxClp01.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMIntervalRxClp01.setStatus("current")
_AtmVpPMIntervalRxClp0_Type = Gauge32
_AtmVpPMIntervalRxClp0_Object = MibTableColumn
atmVpPMIntervalRxClp0 = _AtmVpPMIntervalRxClp0_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 4, 1, 7),
    _AtmVpPMIntervalRxClp0_Type()
)
atmVpPMIntervalRxClp0.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMIntervalRxClp0.setStatus("current")
_AtmVpPMIntervalErroredCells_Type = Gauge32
_AtmVpPMIntervalErroredCells_Object = MibTableColumn
atmVpPMIntervalErroredCells = _AtmVpPMIntervalErroredCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 4, 1, 8),
    _AtmVpPMIntervalErroredCells_Type()
)
atmVpPMIntervalErroredCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMIntervalErroredCells.setStatus("current")
_AtmVpPMIntervalLostCells_Type = Gauge32
_AtmVpPMIntervalLostCells_Object = MibTableColumn
atmVpPMIntervalLostCells = _AtmVpPMIntervalLostCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 4, 1, 9),
    _AtmVpPMIntervalLostCells_Type()
)
atmVpPMIntervalLostCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMIntervalLostCells.setStatus("current")
_AtmVpPMIntervalMisinsertedCells_Type = Gauge32
_AtmVpPMIntervalMisinsertedCells_Object = MibTableColumn
atmVpPMIntervalMisinsertedCells = _AtmVpPMIntervalMisinsertedCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 4, 1, 10),
    _AtmVpPMIntervalMisinsertedCells_Type()
)
atmVpPMIntervalMisinsertedCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMIntervalMisinsertedCells.setStatus("current")
_AtmVpPMIntervalECB_Type = Gauge32
_AtmVpPMIntervalECB_Object = MibTableColumn
atmVpPMIntervalECB = _AtmVpPMIntervalECB_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 4, 1, 11),
    _AtmVpPMIntervalECB_Type()
)
atmVpPMIntervalECB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMIntervalECB.setStatus("current")
_AtmVpPMIntervalSECB_Type = Gauge32
_AtmVpPMIntervalSECB_Object = MibTableColumn
atmVpPMIntervalSECB = _AtmVpPMIntervalSECB_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 4, 1, 12),
    _AtmVpPMIntervalSECB_Type()
)
atmVpPMIntervalSECB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMIntervalSECB.setStatus("current")
_AtmVpPMIntervalES_Type = Gauge32
_AtmVpPMIntervalES_Object = MibTableColumn
atmVpPMIntervalES = _AtmVpPMIntervalES_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 4, 1, 13),
    _AtmVpPMIntervalES_Type()
)
atmVpPMIntervalES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMIntervalES.setStatus("current")
_AtmVpPMIntervalSES_Type = Gauge32
_AtmVpPMIntervalSES_Object = MibTableColumn
atmVpPMIntervalSES = _AtmVpPMIntervalSES_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 4, 1, 14),
    _AtmVpPMIntervalSES_Type()
)
atmVpPMIntervalSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMIntervalSES.setStatus("current")
_AtmVpPMIntervalUAS_Type = Gauge32
_AtmVpPMIntervalUAS_Object = MibTableColumn
atmVpPMIntervalUAS = _AtmVpPMIntervalUAS_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 4, 1, 15),
    _AtmVpPMIntervalUAS_Type()
)
atmVpPMIntervalUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMIntervalUAS.setStatus("current")


class _AtmVpPMIntervalQuality_Type(Integer32):
    """Custom type atmVpPMIntervalQuality based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("normal", 2),
          ("unacceptable", 3))
    )


_AtmVpPMIntervalQuality_Type.__name__ = "Integer32"
_AtmVpPMIntervalQuality_Object = MibTableColumn
atmVpPMIntervalQuality = _AtmVpPMIntervalQuality_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 4, 1, 16),
    _AtmVpPMIntervalQuality_Type()
)
atmVpPMIntervalQuality.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMIntervalQuality.setStatus("current")


class _AtmVpPMIntervalLastDayQuality_Type(Integer32):
    """Custom type atmVpPMIntervalLastDayQuality based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("degraded", 4),
          ("normal", 2))
    )


_AtmVpPMIntervalLastDayQuality_Type.__name__ = "Integer32"
_AtmVpPMIntervalLastDayQuality_Object = MibTableColumn
atmVpPMIntervalLastDayQuality = _AtmVpPMIntervalLastDayQuality_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 4, 1, 17),
    _AtmVpPMIntervalLastDayQuality_Type()
)
atmVpPMIntervalLastDayQuality.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMIntervalLastDayQuality.setStatus("current")
_AtmVpQoSTable_Object = MibTable
atmVpQoSTable = _AtmVpQoSTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 5)
)
if mibBuilder.loadTexts:
    atmVpQoSTable.setStatus("current")
_AtmVpQoSEntry_Object = MibTableRow
atmVpQoSEntry = _AtmVpQoSEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 5, 1)
)
atmVpQoSEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ATM-MIB", "atmVplVpi"),
    (0, "RAD-MIB", "atmVpQoSPeriodRef"),
)
if mibBuilder.loadTexts:
    atmVpQoSEntry.setStatus("current")


class _AtmVpQoSPeriodRef_Type(Integer32):
    """Custom type atmVpQoSPeriodRef based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("currentPeriod", 1),
          ("lastPeriod", 2))
    )


_AtmVpQoSPeriodRef_Type.__name__ = "Integer32"
_AtmVpQoSPeriodRef_Object = MibTableColumn
atmVpQoSPeriodRef = _AtmVpQoSPeriodRef_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 5, 1, 1),
    _AtmVpQoSPeriodRef_Type()
)
atmVpQoSPeriodRef.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpQoSPeriodRef.setStatus("current")
_AtmVpQoSElapsedTime_Type = Integer32
_AtmVpQoSElapsedTime_Object = MibTableColumn
atmVpQoSElapsedTime = _AtmVpQoSElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 5, 1, 2),
    _AtmVpQoSElapsedTime_Type()
)
atmVpQoSElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpQoSElapsedTime.setStatus("current")
_AtmVpQoSUAS_Type = Gauge32
_AtmVpQoSUAS_Object = MibTableColumn
atmVpQoSUAS = _AtmVpQoSUAS_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 5, 1, 3),
    _AtmVpQoSUAS_Type()
)
atmVpQoSUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpQoSUAS.setStatus("current")
_AtmVpPMQoSTable_Object = MibTable
atmVpPMQoSTable = _AtmVpPMQoSTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 6)
)
if mibBuilder.loadTexts:
    atmVpPMQoSTable.setStatus("current")
_AtmVpPMQoSEntry_Object = MibTableRow
atmVpPMQoSEntry = _AtmVpPMQoSEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 6, 1)
)
atmVpPMQoSEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ATM-MIB", "atmVplVpi"),
    (0, "RAD-MIB", "atmVpPMQoSDirection"),
    (0, "RAD-MIB", "atmVpPMQoSPeriodRef"),
)
if mibBuilder.loadTexts:
    atmVpPMQoSEntry.setStatus("current")


class _AtmVpPMQoSDirection_Type(Integer32):
    """Custom type atmVpPMQoSDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("backward", 3),
          ("forward", 2))
    )


_AtmVpPMQoSDirection_Type.__name__ = "Integer32"
_AtmVpPMQoSDirection_Object = MibTableColumn
atmVpPMQoSDirection = _AtmVpPMQoSDirection_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 6, 1, 1),
    _AtmVpPMQoSDirection_Type()
)
atmVpPMQoSDirection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMQoSDirection.setStatus("current")


class _AtmVpPMQoSPeriodRef_Type(Integer32):
    """Custom type atmVpPMQoSPeriodRef based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("currentPeriod", 1),
          ("lastPeriod", 2))
    )


_AtmVpPMQoSPeriodRef_Type.__name__ = "Integer32"
_AtmVpPMQoSPeriodRef_Object = MibTableColumn
atmVpPMQoSPeriodRef = _AtmVpPMQoSPeriodRef_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 6, 1, 2),
    _AtmVpPMQoSPeriodRef_Type()
)
atmVpPMQoSPeriodRef.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMQoSPeriodRef.setStatus("current")
_AtmVpPMQoSCLR_Type = Gauge32
_AtmVpPMQoSCLR_Object = MibTableColumn
atmVpPMQoSCLR = _AtmVpPMQoSCLR_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 6, 1, 3),
    _AtmVpPMQoSCLR_Type()
)
atmVpPMQoSCLR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMQoSCLR.setStatus("current")
_AtmVpPMQoSCER_Type = Gauge32
_AtmVpPMQoSCER_Object = MibTableColumn
atmVpPMQoSCER = _AtmVpPMQoSCER_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 6, 1, 4),
    _AtmVpPMQoSCER_Type()
)
atmVpPMQoSCER.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMQoSCER.setStatus("current")
_AtmVpPMQoSCMR_Type = Gauge32
_AtmVpPMQoSCMR_Object = MibTableColumn
atmVpPMQoSCMR = _AtmVpPMQoSCMR_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 6, 1, 5),
    _AtmVpPMQoSCMR_Type()
)
atmVpPMQoSCMR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPMQoSCMR.setStatus("current")
_AtmVpShaperStatTable_Object = MibTable
atmVpShaperStatTable = _AtmVpShaperStatTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 7)
)
if mibBuilder.loadTexts:
    atmVpShaperStatTable.setStatus("current")
_AtmVpShaperStatEntry_Object = MibTableRow
atmVpShaperStatEntry = _AtmVpShaperStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 7, 1)
)
atmVpShaperStatEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ATM-MIB", "atmVplVpi"),
)
if mibBuilder.loadTexts:
    atmVpShaperStatEntry.setStatus("current")
_AtmVpShaperDiscarded_Type = Counter32
_AtmVpShaperDiscarded_Object = MibTableColumn
atmVpShaperDiscarded = _AtmVpShaperDiscarded_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 7, 1, 1),
    _AtmVpShaperDiscarded_Type()
)
atmVpShaperDiscarded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpShaperDiscarded.setStatus("current")
_AtmVpShaperOccupation_Type = Integer32
_AtmVpShaperOccupation_Object = MibTableColumn
atmVpShaperOccupation = _AtmVpShaperOccupation_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 7, 1, 2),
    _AtmVpShaperOccupation_Type()
)
atmVpShaperOccupation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpShaperOccupation.setStatus("current")
_AtmVpShaperMaxOccupation_Type = Integer32
_AtmVpShaperMaxOccupation_Object = MibTableColumn
atmVpShaperMaxOccupation = _AtmVpShaperMaxOccupation_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 7, 1, 3),
    _AtmVpShaperMaxOccupation_Type()
)
atmVpShaperMaxOccupation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpShaperMaxOccupation.setStatus("current")


class _AtmVpShaperLevel_Type(Integer32):
    """Custom type atmVpShaperLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("above", 4),
          ("below", 3),
          ("empty", 1),
          ("full", 2))
    )


_AtmVpShaperLevel_Type.__name__ = "Integer32"
_AtmVpShaperLevel_Object = MibTableColumn
atmVpShaperLevel = _AtmVpShaperLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 7, 1, 4),
    _AtmVpShaperLevel_Type()
)
atmVpShaperLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpShaperLevel.setStatus("current")
_AtmVpShaperEpdDropped_Type = Counter32
_AtmVpShaperEpdDropped_Object = MibTableColumn
atmVpShaperEpdDropped = _AtmVpShaperEpdDropped_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 7, 1, 5),
    _AtmVpShaperEpdDropped_Type()
)
atmVpShaperEpdDropped.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpShaperEpdDropped.setStatus("current")
_AtmVpShaperTotalEpdDropped_Type = Counter32
_AtmVpShaperTotalEpdDropped_Object = MibTableColumn
atmVpShaperTotalEpdDropped = _AtmVpShaperTotalEpdDropped_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 1, 7, 1, 6),
    _AtmVpShaperTotalEpdDropped_Type()
)
atmVpShaperTotalEpdDropped.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpShaperTotalEpdDropped.setStatus("current")
_AtmVcPerformance_ObjectIdentity = ObjectIdentity
atmVcPerformance = _AtmVcPerformance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2)
)
_AtmVcCurrentTable_Object = MibTable
atmVcCurrentTable = _AtmVcCurrentTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1)
)
if mibBuilder.loadTexts:
    atmVcCurrentTable.setStatus("current")
_AtmVcCurrentEntry_Object = MibTableRow
atmVcCurrentEntry = _AtmVcCurrentEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1)
)
atmVcCurrentEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RAD-MIB", "atmVcCurrentVpi"),
    (0, "RAD-MIB", "atmVcCurrentVci"),
)
if mibBuilder.loadTexts:
    atmVcCurrentEntry.setStatus("current")
_AtmVcCurrentVpi_Type = Integer32
_AtmVcCurrentVpi_Object = MibTableColumn
atmVcCurrentVpi = _AtmVcCurrentVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 1),
    _AtmVcCurrentVpi_Type()
)
atmVcCurrentVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentVpi.setStatus("current")
_AtmVcCurrentVci_Type = Integer32
_AtmVcCurrentVci_Object = MibTableColumn
atmVcCurrentVci = _AtmVcCurrentVci_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 2),
    _AtmVcCurrentVci_Type()
)
atmVcCurrentVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentVci.setStatus("current")
_AtmVcCurrentRxCellsClp01_Type = Gauge32
_AtmVcCurrentRxCellsClp01_Object = MibTableColumn
atmVcCurrentRxCellsClp01 = _AtmVcCurrentRxCellsClp01_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 3),
    _AtmVcCurrentRxCellsClp01_Type()
)
atmVcCurrentRxCellsClp01.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentRxCellsClp01.setStatus("current")
_AtmVcCurrentRxCellsClp0_Type = Gauge32
_AtmVcCurrentRxCellsClp0_Object = MibTableColumn
atmVcCurrentRxCellsClp0 = _AtmVcCurrentRxCellsClp0_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 4),
    _AtmVcCurrentRxCellsClp0_Type()
)
atmVcCurrentRxCellsClp0.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentRxCellsClp0.setStatus("current")
_AtmVcCurrentGcra0Violations_Type = Gauge32
_AtmVcCurrentGcra0Violations_Object = MibTableColumn
atmVcCurrentGcra0Violations = _AtmVcCurrentGcra0Violations_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 5),
    _AtmVcCurrentGcra0Violations_Type()
)
atmVcCurrentGcra0Violations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentGcra0Violations.setStatus("current")
_AtmVcCurrentGcra1Violations_Type = Gauge32
_AtmVcCurrentGcra1Violations_Object = MibTableColumn
atmVcCurrentGcra1Violations = _AtmVcCurrentGcra1Violations_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 6),
    _AtmVcCurrentGcra1Violations_Type()
)
atmVcCurrentGcra1Violations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentGcra1Violations.setStatus("current")
_AtmVcCurrentRxAIS_Type = Gauge32
_AtmVcCurrentRxAIS_Object = MibTableColumn
atmVcCurrentRxAIS = _AtmVcCurrentRxAIS_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 7),
    _AtmVcCurrentRxAIS_Type()
)
atmVcCurrentRxAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentRxAIS.setStatus("current")
_AtmVcCurrentTxAIS_Type = Gauge32
_AtmVcCurrentTxAIS_Object = MibTableColumn
atmVcCurrentTxAIS = _AtmVcCurrentTxAIS_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 8),
    _AtmVcCurrentTxAIS_Type()
)
atmVcCurrentTxAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentTxAIS.setStatus("current")
_AtmVcCurrentRxRDI_Type = Gauge32
_AtmVcCurrentRxRDI_Object = MibTableColumn
atmVcCurrentRxRDI = _AtmVcCurrentRxRDI_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 9),
    _AtmVcCurrentRxRDI_Type()
)
atmVcCurrentRxRDI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentRxRDI.setStatus("current")
_AtmVcCurrentTxRDI_Type = Gauge32
_AtmVcCurrentTxRDI_Object = MibTableColumn
atmVcCurrentTxRDI = _AtmVcCurrentTxRDI_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 10),
    _AtmVcCurrentTxRDI_Type()
)
atmVcCurrentTxRDI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentTxRDI.setStatus("current")
_AtmVcCurrentContinuityLoss_Type = Gauge32
_AtmVcCurrentContinuityLoss_Object = MibTableColumn
atmVcCurrentContinuityLoss = _AtmVcCurrentContinuityLoss_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 11),
    _AtmVcCurrentContinuityLoss_Type()
)
atmVcCurrentContinuityLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentContinuityLoss.setStatus("current")
_AtmVcCurrentUAS_Type = Gauge32
_AtmVcCurrentUAS_Object = MibTableColumn
atmVcCurrentUAS = _AtmVcCurrentUAS_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 12),
    _AtmVcCurrentUAS_Type()
)
atmVcCurrentUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentUAS.setStatus("current")
_AtmVcCurrentSES_Type = Gauge32
_AtmVcCurrentSES_Object = MibTableColumn
atmVcCurrentSES = _AtmVcCurrentSES_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 13),
    _AtmVcCurrentSES_Type()
)
atmVcCurrentSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentSES.setStatus("current")
_AtmVcCurrentCDC_Type = Gauge32
_AtmVcCurrentCDC_Object = MibTableColumn
atmVcCurrentCDC = _AtmVcCurrentCDC_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 14),
    _AtmVcCurrentCDC_Type()
)
atmVcCurrentCDC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentCDC.setStatus("current")
_AtmVcCurrentTotalDiscards_Type = Gauge32
_AtmVcCurrentTotalDiscards_Object = MibTableColumn
atmVcCurrentTotalDiscards = _AtmVcCurrentTotalDiscards_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 15),
    _AtmVcCurrentTotalDiscards_Type()
)
atmVcCurrentTotalDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentTotalDiscards.setStatus("current")
_AtmVcCurrentClp0Discards_Type = Gauge32
_AtmVcCurrentClp0Discards_Object = MibTableColumn
atmVcCurrentClp0Discards = _AtmVcCurrentClp0Discards_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 16),
    _AtmVcCurrentClp0Discards_Type()
)
atmVcCurrentClp0Discards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentClp0Discards.setStatus("current")
_AtmVcCurrentTotalCellOuts_Type = Gauge32
_AtmVcCurrentTotalCellOuts_Object = MibTableColumn
atmVcCurrentTotalCellOuts = _AtmVcCurrentTotalCellOuts_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 17),
    _AtmVcCurrentTotalCellOuts_Type()
)
atmVcCurrentTotalCellOuts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentTotalCellOuts.setStatus("current")
_AtmVcCurrentClp0CellOuts_Type = Gauge32
_AtmVcCurrentClp0CellOuts_Object = MibTableColumn
atmVcCurrentClp0CellOuts = _AtmVcCurrentClp0CellOuts_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 18),
    _AtmVcCurrentClp0CellOuts_Type()
)
atmVcCurrentClp0CellOuts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentClp0CellOuts.setStatus("current")
_AtmVcCurrentTaggedOuts_Type = Gauge32
_AtmVcCurrentTaggedOuts_Object = MibTableColumn
atmVcCurrentTaggedOuts = _AtmVcCurrentTaggedOuts_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 19),
    _AtmVcCurrentTaggedOuts_Type()
)
atmVcCurrentTaggedOuts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentTaggedOuts.setStatus("current")
_AtmVcCurrentPCR_Type = Gauge32
_AtmVcCurrentPCR_Object = MibTableColumn
atmVcCurrentPCR = _AtmVcCurrentPCR_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 20),
    _AtmVcCurrentPCR_Type()
)
atmVcCurrentPCR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentPCR.setStatus("current")
_AtmVcCurrentSCR_Type = Gauge32
_AtmVcCurrentSCR_Object = MibTableColumn
atmVcCurrentSCR = _AtmVcCurrentSCR_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 21),
    _AtmVcCurrentSCR_Type()
)
atmVcCurrentSCR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentSCR.setStatus("current")
_AtmVcCurrentMCR_Type = Gauge32
_AtmVcCurrentMCR_Object = MibTableColumn
atmVcCurrentMCR = _AtmVcCurrentMCR_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 22),
    _AtmVcCurrentMCR_Type()
)
atmVcCurrentMCR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentMCR.setStatus("current")
_AtmVcCurrentShaperTotalDiscards_Type = Gauge32
_AtmVcCurrentShaperTotalDiscards_Object = MibTableColumn
atmVcCurrentShaperTotalDiscards = _AtmVcCurrentShaperTotalDiscards_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 23),
    _AtmVcCurrentShaperTotalDiscards_Type()
)
atmVcCurrentShaperTotalDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentShaperTotalDiscards.setStatus("current")
_AtmVcCurrentShaperClp0Discards_Type = Gauge32
_AtmVcCurrentShaperClp0Discards_Object = MibTableColumn
atmVcCurrentShaperClp0Discards = _AtmVcCurrentShaperClp0Discards_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 24),
    _AtmVcCurrentShaperClp0Discards_Type()
)
atmVcCurrentShaperClp0Discards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentShaperClp0Discards.setStatus("current")
_AtmVcCurrentShaperClp1Discards_Type = Gauge32
_AtmVcCurrentShaperClp1Discards_Object = MibTableColumn
atmVcCurrentShaperClp1Discards = _AtmVcCurrentShaperClp1Discards_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 1, 1, 25),
    _AtmVcCurrentShaperClp1Discards_Type()
)
atmVcCurrentShaperClp1Discards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcCurrentShaperClp1Discards.setStatus("current")
_AtmVcPMCurrentTable_Object = MibTable
atmVcPMCurrentTable = _AtmVcPMCurrentTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 2)
)
if mibBuilder.loadTexts:
    atmVcPMCurrentTable.setStatus("current")
_AtmVcPMCurrentEntry_Object = MibTableRow
atmVcPMCurrentEntry = _AtmVcPMCurrentEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 2, 1)
)
atmVcPMCurrentEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RAD-MIB", "atmVcPMCurrentVpi"),
    (0, "RAD-MIB", "atmVcPMCurrentVci"),
    (0, "RAD-MIB", "atmVcPMCurrentDir"),
)
if mibBuilder.loadTexts:
    atmVcPMCurrentEntry.setStatus("current")
_AtmVcPMCurrentVpi_Type = Integer32
_AtmVcPMCurrentVpi_Object = MibTableColumn
atmVcPMCurrentVpi = _AtmVcPMCurrentVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 2, 1, 1),
    _AtmVcPMCurrentVpi_Type()
)
atmVcPMCurrentVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMCurrentVpi.setStatus("current")
_AtmVcPMCurrentVci_Type = Integer32
_AtmVcPMCurrentVci_Object = MibTableColumn
atmVcPMCurrentVci = _AtmVcPMCurrentVci_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 2, 1, 2),
    _AtmVcPMCurrentVci_Type()
)
atmVcPMCurrentVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMCurrentVci.setStatus("current")
_AtmVcPMCurrentDir_Type = Integer32
_AtmVcPMCurrentDir_Object = MibTableColumn
atmVcPMCurrentDir = _AtmVcPMCurrentDir_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 2, 1, 3),
    _AtmVcPMCurrentDir_Type()
)
atmVcPMCurrentDir.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMCurrentDir.setStatus("current")
_AtmVcPMCurrentTxClp01_Type = Gauge32
_AtmVcPMCurrentTxClp01_Object = MibTableColumn
atmVcPMCurrentTxClp01 = _AtmVcPMCurrentTxClp01_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 2, 1, 4),
    _AtmVcPMCurrentTxClp01_Type()
)
atmVcPMCurrentTxClp01.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMCurrentTxClp01.setStatus("current")
_AtmVcPMCurrentTxClp0_Type = Gauge32
_AtmVcPMCurrentTxClp0_Object = MibTableColumn
atmVcPMCurrentTxClp0 = _AtmVcPMCurrentTxClp0_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 2, 1, 5),
    _AtmVcPMCurrentTxClp0_Type()
)
atmVcPMCurrentTxClp0.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMCurrentTxClp0.setStatus("current")
_AtmVcPMCurrentRxClp01_Type = Gauge32
_AtmVcPMCurrentRxClp01_Object = MibTableColumn
atmVcPMCurrentRxClp01 = _AtmVcPMCurrentRxClp01_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 2, 1, 6),
    _AtmVcPMCurrentRxClp01_Type()
)
atmVcPMCurrentRxClp01.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMCurrentRxClp01.setStatus("current")
_AtmVcPMCurrentRxClp0_Type = Gauge32
_AtmVcPMCurrentRxClp0_Object = MibTableColumn
atmVcPMCurrentRxClp0 = _AtmVcPMCurrentRxClp0_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 2, 1, 7),
    _AtmVcPMCurrentRxClp0_Type()
)
atmVcPMCurrentRxClp0.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMCurrentRxClp0.setStatus("current")
_AtmVcPMCurrentErroredCells_Type = Gauge32
_AtmVcPMCurrentErroredCells_Object = MibTableColumn
atmVcPMCurrentErroredCells = _AtmVcPMCurrentErroredCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 2, 1, 8),
    _AtmVcPMCurrentErroredCells_Type()
)
atmVcPMCurrentErroredCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMCurrentErroredCells.setStatus("current")
_AtmVcPMCurrentLostCells_Type = Gauge32
_AtmVcPMCurrentLostCells_Object = MibTableColumn
atmVcPMCurrentLostCells = _AtmVcPMCurrentLostCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 2, 1, 9),
    _AtmVcPMCurrentLostCells_Type()
)
atmVcPMCurrentLostCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMCurrentLostCells.setStatus("current")
_AtmVcPMCurrentMisinsertedCells_Type = Gauge32
_AtmVcPMCurrentMisinsertedCells_Object = MibTableColumn
atmVcPMCurrentMisinsertedCells = _AtmVcPMCurrentMisinsertedCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 2, 1, 10),
    _AtmVcPMCurrentMisinsertedCells_Type()
)
atmVcPMCurrentMisinsertedCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMCurrentMisinsertedCells.setStatus("current")
_AtmVcPMCurrentECB_Type = Gauge32
_AtmVcPMCurrentECB_Object = MibTableColumn
atmVcPMCurrentECB = _AtmVcPMCurrentECB_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 2, 1, 11),
    _AtmVcPMCurrentECB_Type()
)
atmVcPMCurrentECB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMCurrentECB.setStatus("current")
_AtmVcPMCurrentSECB_Type = Gauge32
_AtmVcPMCurrentSECB_Object = MibTableColumn
atmVcPMCurrentSECB = _AtmVcPMCurrentSECB_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 2, 1, 12),
    _AtmVcPMCurrentSECB_Type()
)
atmVcPMCurrentSECB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMCurrentSECB.setStatus("current")
_AtmVcPMCurrentES_Type = Gauge32
_AtmVcPMCurrentES_Object = MibTableColumn
atmVcPMCurrentES = _AtmVcPMCurrentES_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 2, 1, 13),
    _AtmVcPMCurrentES_Type()
)
atmVcPMCurrentES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMCurrentES.setStatus("current")
_AtmVcPMCurrentSES_Type = Gauge32
_AtmVcPMCurrentSES_Object = MibTableColumn
atmVcPMCurrentSES = _AtmVcPMCurrentSES_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 2, 1, 14),
    _AtmVcPMCurrentSES_Type()
)
atmVcPMCurrentSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMCurrentSES.setStatus("current")
_AtmVcPMCurrentUAS_Type = Gauge32
_AtmVcPMCurrentUAS_Object = MibTableColumn
atmVcPMCurrentUAS = _AtmVcPMCurrentUAS_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 2, 1, 15),
    _AtmVcPMCurrentUAS_Type()
)
atmVcPMCurrentUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMCurrentUAS.setStatus("current")


class _AtmVcPMCurrentIntervalQuality_Type(Integer32):
    """Custom type atmVcPMCurrentIntervalQuality based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("normal", 2),
          ("unacceptable", 3))
    )


_AtmVcPMCurrentIntervalQuality_Type.__name__ = "Integer32"
_AtmVcPMCurrentIntervalQuality_Object = MibTableColumn
atmVcPMCurrentIntervalQuality = _AtmVcPMCurrentIntervalQuality_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 2, 1, 16),
    _AtmVcPMCurrentIntervalQuality_Type()
)
atmVcPMCurrentIntervalQuality.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMCurrentIntervalQuality.setStatus("current")


class _AtmVcPMCurrentLastDayQuality_Type(Integer32):
    """Custom type atmVcPMCurrentLastDayQuality based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("degraded", 4),
          ("normal", 2))
    )


_AtmVcPMCurrentLastDayQuality_Type.__name__ = "Integer32"
_AtmVcPMCurrentLastDayQuality_Object = MibTableColumn
atmVcPMCurrentLastDayQuality = _AtmVcPMCurrentLastDayQuality_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 2, 1, 17),
    _AtmVcPMCurrentLastDayQuality_Type()
)
atmVcPMCurrentLastDayQuality.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMCurrentLastDayQuality.setStatus("current")
_AtmVcIntervalTable_Object = MibTable
atmVcIntervalTable = _AtmVcIntervalTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3)
)
if mibBuilder.loadTexts:
    atmVcIntervalTable.setStatus("current")
_AtmVcIntervalEntry_Object = MibTableRow
atmVcIntervalEntry = _AtmVcIntervalEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1)
)
atmVcIntervalEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RAD-MIB", "atmVcIntervalVpi"),
    (0, "RAD-MIB", "atmVcIntervalVci"),
    (0, "RAD-MIB", "atmVcIntervalNumber"),
)
if mibBuilder.loadTexts:
    atmVcIntervalEntry.setStatus("current")
_AtmVcIntervalVpi_Type = Integer32
_AtmVcIntervalVpi_Object = MibTableColumn
atmVcIntervalVpi = _AtmVcIntervalVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 1),
    _AtmVcIntervalVpi_Type()
)
atmVcIntervalVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalVpi.setStatus("current")
_AtmVcIntervalVci_Type = Integer32
_AtmVcIntervalVci_Object = MibTableColumn
atmVcIntervalVci = _AtmVcIntervalVci_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 2),
    _AtmVcIntervalVci_Type()
)
atmVcIntervalVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalVci.setStatus("current")


class _AtmVcIntervalNumber_Type(Integer32):
    """Custom type atmVcIntervalNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_AtmVcIntervalNumber_Type.__name__ = "Integer32"
_AtmVcIntervalNumber_Object = MibTableColumn
atmVcIntervalNumber = _AtmVcIntervalNumber_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 3),
    _AtmVcIntervalNumber_Type()
)
atmVcIntervalNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalNumber.setStatus("current")
_AtmVcIntervalRxCellsClp01_Type = Gauge32
_AtmVcIntervalRxCellsClp01_Object = MibTableColumn
atmVcIntervalRxCellsClp01 = _AtmVcIntervalRxCellsClp01_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 4),
    _AtmVcIntervalRxCellsClp01_Type()
)
atmVcIntervalRxCellsClp01.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalRxCellsClp01.setStatus("current")
_AtmVcIntervalRxCellsClp0_Type = Gauge32
_AtmVcIntervalRxCellsClp0_Object = MibTableColumn
atmVcIntervalRxCellsClp0 = _AtmVcIntervalRxCellsClp0_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 5),
    _AtmVcIntervalRxCellsClp0_Type()
)
atmVcIntervalRxCellsClp0.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalRxCellsClp0.setStatus("current")
_AtmVcIntervalGcra0Violations_Type = Gauge32
_AtmVcIntervalGcra0Violations_Object = MibTableColumn
atmVcIntervalGcra0Violations = _AtmVcIntervalGcra0Violations_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 6),
    _AtmVcIntervalGcra0Violations_Type()
)
atmVcIntervalGcra0Violations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalGcra0Violations.setStatus("current")
_AtmVcIntervalGcra1Violations_Type = Gauge32
_AtmVcIntervalGcra1Violations_Object = MibTableColumn
atmVcIntervalGcra1Violations = _AtmVcIntervalGcra1Violations_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 7),
    _AtmVcIntervalGcra1Violations_Type()
)
atmVcIntervalGcra1Violations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalGcra1Violations.setStatus("current")
_AtmVcIntervalRxAIS_Type = Gauge32
_AtmVcIntervalRxAIS_Object = MibTableColumn
atmVcIntervalRxAIS = _AtmVcIntervalRxAIS_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 8),
    _AtmVcIntervalRxAIS_Type()
)
atmVcIntervalRxAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalRxAIS.setStatus("current")
_AtmVcIntervalTxAIS_Type = Gauge32
_AtmVcIntervalTxAIS_Object = MibTableColumn
atmVcIntervalTxAIS = _AtmVcIntervalTxAIS_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 9),
    _AtmVcIntervalTxAIS_Type()
)
atmVcIntervalTxAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalTxAIS.setStatus("current")
_AtmVcIntervalRxRDI_Type = Gauge32
_AtmVcIntervalRxRDI_Object = MibTableColumn
atmVcIntervalRxRDI = _AtmVcIntervalRxRDI_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 10),
    _AtmVcIntervalRxRDI_Type()
)
atmVcIntervalRxRDI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalRxRDI.setStatus("current")
_AtmVcIntervalTxRDI_Type = Gauge32
_AtmVcIntervalTxRDI_Object = MibTableColumn
atmVcIntervalTxRDI = _AtmVcIntervalTxRDI_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 11),
    _AtmVcIntervalTxRDI_Type()
)
atmVcIntervalTxRDI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalTxRDI.setStatus("current")
_AtmVcIntervalContinuityLoss_Type = Gauge32
_AtmVcIntervalContinuityLoss_Object = MibTableColumn
atmVcIntervalContinuityLoss = _AtmVcIntervalContinuityLoss_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 12),
    _AtmVcIntervalContinuityLoss_Type()
)
atmVcIntervalContinuityLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalContinuityLoss.setStatus("current")
_AtmVcIntervalUAS_Type = Gauge32
_AtmVcIntervalUAS_Object = MibTableColumn
atmVcIntervalUAS = _AtmVcIntervalUAS_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 13),
    _AtmVcIntervalUAS_Type()
)
atmVcIntervalUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalUAS.setStatus("current")
_AtmVcIntervalSES_Type = Gauge32
_AtmVcIntervalSES_Object = MibTableColumn
atmVcIntervalSES = _AtmVcIntervalSES_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 14),
    _AtmVcIntervalSES_Type()
)
atmVcIntervalSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalSES.setStatus("current")
_AtmVcIntervalCDC_Type = Gauge32
_AtmVcIntervalCDC_Object = MibTableColumn
atmVcIntervalCDC = _AtmVcIntervalCDC_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 15),
    _AtmVcIntervalCDC_Type()
)
atmVcIntervalCDC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalCDC.setStatus("current")
_AtmVcIntervalTotalDiscards_Type = Gauge32
_AtmVcIntervalTotalDiscards_Object = MibTableColumn
atmVcIntervalTotalDiscards = _AtmVcIntervalTotalDiscards_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 16),
    _AtmVcIntervalTotalDiscards_Type()
)
atmVcIntervalTotalDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalTotalDiscards.setStatus("current")
_AtmVcIntervalClp0Discards_Type = Gauge32
_AtmVcIntervalClp0Discards_Object = MibTableColumn
atmVcIntervalClp0Discards = _AtmVcIntervalClp0Discards_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 17),
    _AtmVcIntervalClp0Discards_Type()
)
atmVcIntervalClp0Discards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalClp0Discards.setStatus("current")
_AtmVcIntervalTotalCellOuts_Type = Gauge32
_AtmVcIntervalTotalCellOuts_Object = MibTableColumn
atmVcIntervalTotalCellOuts = _AtmVcIntervalTotalCellOuts_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 18),
    _AtmVcIntervalTotalCellOuts_Type()
)
atmVcIntervalTotalCellOuts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalTotalCellOuts.setStatus("current")
_AtmVcIntervalClp0CellOuts_Type = Gauge32
_AtmVcIntervalClp0CellOuts_Object = MibTableColumn
atmVcIntervalClp0CellOuts = _AtmVcIntervalClp0CellOuts_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 19),
    _AtmVcIntervalClp0CellOuts_Type()
)
atmVcIntervalClp0CellOuts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalClp0CellOuts.setStatus("current")
_AtmVcIntervalTaggedOuts_Type = Gauge32
_AtmVcIntervalTaggedOuts_Object = MibTableColumn
atmVcIntervalTaggedOuts = _AtmVcIntervalTaggedOuts_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 20),
    _AtmVcIntervalTaggedOuts_Type()
)
atmVcIntervalTaggedOuts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalTaggedOuts.setStatus("current")
_AtmVcIntervalPCR_Type = Gauge32
_AtmVcIntervalPCR_Object = MibTableColumn
atmVcIntervalPCR = _AtmVcIntervalPCR_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 21),
    _AtmVcIntervalPCR_Type()
)
atmVcIntervalPCR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalPCR.setStatus("current")
_AtmVcIntervalSCR_Type = Gauge32
_AtmVcIntervalSCR_Object = MibTableColumn
atmVcIntervalSCR = _AtmVcIntervalSCR_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 22),
    _AtmVcIntervalSCR_Type()
)
atmVcIntervalSCR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalSCR.setStatus("current")
_AtmVcIntervalMCR_Type = Gauge32
_AtmVcIntervalMCR_Object = MibTableColumn
atmVcIntervalMCR = _AtmVcIntervalMCR_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 23),
    _AtmVcIntervalMCR_Type()
)
atmVcIntervalMCR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalMCR.setStatus("current")
_AtmVcIntervalShaperTotalDiscards_Type = Gauge32
_AtmVcIntervalShaperTotalDiscards_Object = MibTableColumn
atmVcIntervalShaperTotalDiscards = _AtmVcIntervalShaperTotalDiscards_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 24),
    _AtmVcIntervalShaperTotalDiscards_Type()
)
atmVcIntervalShaperTotalDiscards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalShaperTotalDiscards.setStatus("current")
_AtmVcIntervalShaperClp0Discards_Type = Gauge32
_AtmVcIntervalShaperClp0Discards_Object = MibTableColumn
atmVcIntervalShaperClp0Discards = _AtmVcIntervalShaperClp0Discards_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 25),
    _AtmVcIntervalShaperClp0Discards_Type()
)
atmVcIntervalShaperClp0Discards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalShaperClp0Discards.setStatus("current")
_AtmVcIntervalShaperClp1Discards_Type = Gauge32
_AtmVcIntervalShaperClp1Discards_Object = MibTableColumn
atmVcIntervalShaperClp1Discards = _AtmVcIntervalShaperClp1Discards_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 3, 1, 26),
    _AtmVcIntervalShaperClp1Discards_Type()
)
atmVcIntervalShaperClp1Discards.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcIntervalShaperClp1Discards.setStatus("current")
_AtmVcPMIntervalTable_Object = MibTable
atmVcPMIntervalTable = _AtmVcPMIntervalTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 4)
)
if mibBuilder.loadTexts:
    atmVcPMIntervalTable.setStatus("current")
_AtmVcPMIntervalEntry_Object = MibTableRow
atmVcPMIntervalEntry = _AtmVcPMIntervalEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 4, 1)
)
atmVcPMIntervalEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RAD-MIB", "atmVcPMIntervalVpi"),
    (0, "RAD-MIB", "atmVcPMIntervalVci"),
    (0, "RAD-MIB", "atmVcPMIntervalDir"),
    (0, "RAD-MIB", "atmVcPMIntervalNumber"),
)
if mibBuilder.loadTexts:
    atmVcPMIntervalEntry.setStatus("current")
_AtmVcPMIntervalVpi_Type = Integer32
_AtmVcPMIntervalVpi_Object = MibTableColumn
atmVcPMIntervalVpi = _AtmVcPMIntervalVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 4, 1, 1),
    _AtmVcPMIntervalVpi_Type()
)
atmVcPMIntervalVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMIntervalVpi.setStatus("current")
_AtmVcPMIntervalVci_Type = Integer32
_AtmVcPMIntervalVci_Object = MibTableColumn
atmVcPMIntervalVci = _AtmVcPMIntervalVci_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 4, 1, 2),
    _AtmVcPMIntervalVci_Type()
)
atmVcPMIntervalVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMIntervalVci.setStatus("current")


class _AtmVcPMIntervalDir_Type(Integer32):
    """Custom type atmVcPMIntervalDir based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("backward", 3),
          ("forward", 2))
    )


_AtmVcPMIntervalDir_Type.__name__ = "Integer32"
_AtmVcPMIntervalDir_Object = MibTableColumn
atmVcPMIntervalDir = _AtmVcPMIntervalDir_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 4, 1, 3),
    _AtmVcPMIntervalDir_Type()
)
atmVcPMIntervalDir.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMIntervalDir.setStatus("current")


class _AtmVcPMIntervalNumber_Type(Integer32):
    """Custom type atmVcPMIntervalNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_AtmVcPMIntervalNumber_Type.__name__ = "Integer32"
_AtmVcPMIntervalNumber_Object = MibTableColumn
atmVcPMIntervalNumber = _AtmVcPMIntervalNumber_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 4, 1, 4),
    _AtmVcPMIntervalNumber_Type()
)
atmVcPMIntervalNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMIntervalNumber.setStatus("current")
_AtmVcPMIntervalTxClp01_Type = Gauge32
_AtmVcPMIntervalTxClp01_Object = MibTableColumn
atmVcPMIntervalTxClp01 = _AtmVcPMIntervalTxClp01_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 4, 1, 5),
    _AtmVcPMIntervalTxClp01_Type()
)
atmVcPMIntervalTxClp01.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMIntervalTxClp01.setStatus("current")
_AtmVcPMIntervalTxClp0_Type = Gauge32
_AtmVcPMIntervalTxClp0_Object = MibTableColumn
atmVcPMIntervalTxClp0 = _AtmVcPMIntervalTxClp0_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 4, 1, 6),
    _AtmVcPMIntervalTxClp0_Type()
)
atmVcPMIntervalTxClp0.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMIntervalTxClp0.setStatus("current")
_AtmVcPMIntervalRxClp01_Type = Gauge32
_AtmVcPMIntervalRxClp01_Object = MibTableColumn
atmVcPMIntervalRxClp01 = _AtmVcPMIntervalRxClp01_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 4, 1, 7),
    _AtmVcPMIntervalRxClp01_Type()
)
atmVcPMIntervalRxClp01.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMIntervalRxClp01.setStatus("current")
_AtmVcPMIntervalRxClp0_Type = Gauge32
_AtmVcPMIntervalRxClp0_Object = MibTableColumn
atmVcPMIntervalRxClp0 = _AtmVcPMIntervalRxClp0_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 4, 1, 8),
    _AtmVcPMIntervalRxClp0_Type()
)
atmVcPMIntervalRxClp0.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMIntervalRxClp0.setStatus("current")
_AtmVcPMIntervalErroredCells_Type = Gauge32
_AtmVcPMIntervalErroredCells_Object = MibTableColumn
atmVcPMIntervalErroredCells = _AtmVcPMIntervalErroredCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 4, 1, 9),
    _AtmVcPMIntervalErroredCells_Type()
)
atmVcPMIntervalErroredCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMIntervalErroredCells.setStatus("current")
_AtmVcPMIntervalLostCells_Type = Gauge32
_AtmVcPMIntervalLostCells_Object = MibTableColumn
atmVcPMIntervalLostCells = _AtmVcPMIntervalLostCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 4, 1, 10),
    _AtmVcPMIntervalLostCells_Type()
)
atmVcPMIntervalLostCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMIntervalLostCells.setStatus("current")
_AtmVcPMIntervalMisinsertedCells_Type = Gauge32
_AtmVcPMIntervalMisinsertedCells_Object = MibTableColumn
atmVcPMIntervalMisinsertedCells = _AtmVcPMIntervalMisinsertedCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 4, 1, 11),
    _AtmVcPMIntervalMisinsertedCells_Type()
)
atmVcPMIntervalMisinsertedCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMIntervalMisinsertedCells.setStatus("current")
_AtmVcPMIntervalECB_Type = Gauge32
_AtmVcPMIntervalECB_Object = MibTableColumn
atmVcPMIntervalECB = _AtmVcPMIntervalECB_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 4, 1, 12),
    _AtmVcPMIntervalECB_Type()
)
atmVcPMIntervalECB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMIntervalECB.setStatus("current")
_AtmVcPMIntervalSECB_Type = Gauge32
_AtmVcPMIntervalSECB_Object = MibTableColumn
atmVcPMIntervalSECB = _AtmVcPMIntervalSECB_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 4, 1, 13),
    _AtmVcPMIntervalSECB_Type()
)
atmVcPMIntervalSECB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMIntervalSECB.setStatus("current")
_AtmVcPMIntervalES_Type = Gauge32
_AtmVcPMIntervalES_Object = MibTableColumn
atmVcPMIntervalES = _AtmVcPMIntervalES_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 4, 1, 14),
    _AtmVcPMIntervalES_Type()
)
atmVcPMIntervalES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMIntervalES.setStatus("current")
_AtmVcPMIntervalSES_Type = Gauge32
_AtmVcPMIntervalSES_Object = MibTableColumn
atmVcPMIntervalSES = _AtmVcPMIntervalSES_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 4, 1, 15),
    _AtmVcPMIntervalSES_Type()
)
atmVcPMIntervalSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMIntervalSES.setStatus("current")
_AtmVcPMIntervalUAS_Type = Gauge32
_AtmVcPMIntervalUAS_Object = MibTableColumn
atmVcPMIntervalUAS = _AtmVcPMIntervalUAS_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 4, 1, 16),
    _AtmVcPMIntervalUAS_Type()
)
atmVcPMIntervalUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMIntervalUAS.setStatus("current")


class _AtmVcPMIntervalQuality_Type(Integer32):
    """Custom type atmVcPMIntervalQuality based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("normal", 2),
          ("unacceptable", 3))
    )


_AtmVcPMIntervalQuality_Type.__name__ = "Integer32"
_AtmVcPMIntervalQuality_Object = MibTableColumn
atmVcPMIntervalQuality = _AtmVcPMIntervalQuality_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 4, 1, 17),
    _AtmVcPMIntervalQuality_Type()
)
atmVcPMIntervalQuality.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMIntervalQuality.setStatus("current")


class _AtmVcPMIntervalLastDayQuality_Type(Integer32):
    """Custom type atmVcPMIntervalLastDayQuality based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("degraded", 4),
          ("normal", 2))
    )


_AtmVcPMIntervalLastDayQuality_Type.__name__ = "Integer32"
_AtmVcPMIntervalLastDayQuality_Object = MibTableColumn
atmVcPMIntervalLastDayQuality = _AtmVcPMIntervalLastDayQuality_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 4, 1, 18),
    _AtmVcPMIntervalLastDayQuality_Type()
)
atmVcPMIntervalLastDayQuality.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMIntervalLastDayQuality.setStatus("current")
_AtmVcQoSTable_Object = MibTable
atmVcQoSTable = _AtmVcQoSTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 6)
)
if mibBuilder.loadTexts:
    atmVcQoSTable.setStatus("current")
_AtmVcQoSEntry_Object = MibTableRow
atmVcQoSEntry = _AtmVcQoSEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 6, 1)
)
atmVcQoSEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ATM-MIB", "atmVclVpi"),
    (0, "ATM-MIB", "atmVclVci"),
    (0, "RAD-MIB", "atmVcQoSPeriodRef"),
)
if mibBuilder.loadTexts:
    atmVcQoSEntry.setStatus("current")


class _AtmVcQoSPeriodRef_Type(Integer32):
    """Custom type atmVcQoSPeriodRef based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("currentPeriod", 1),
          ("lastPeriod", 2))
    )


_AtmVcQoSPeriodRef_Type.__name__ = "Integer32"
_AtmVcQoSPeriodRef_Object = MibTableColumn
atmVcQoSPeriodRef = _AtmVcQoSPeriodRef_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 6, 1, 1),
    _AtmVcQoSPeriodRef_Type()
)
atmVcQoSPeriodRef.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcQoSPeriodRef.setStatus("current")
_AtmVcQoSElapsedTime_Type = Integer32
_AtmVcQoSElapsedTime_Object = MibTableColumn
atmVcQoSElapsedTime = _AtmVcQoSElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 6, 1, 2),
    _AtmVcQoSElapsedTime_Type()
)
atmVcQoSElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcQoSElapsedTime.setStatus("current")
_AtmVcQoSUAS_Type = Gauge32
_AtmVcQoSUAS_Object = MibTableColumn
atmVcQoSUAS = _AtmVcQoSUAS_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 6, 1, 3),
    _AtmVcQoSUAS_Type()
)
atmVcQoSUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcQoSUAS.setStatus("current")
_AtmVcPMQoSTable_Object = MibTable
atmVcPMQoSTable = _AtmVcPMQoSTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 7)
)
if mibBuilder.loadTexts:
    atmVcPMQoSTable.setStatus("current")
_AtmVcPMQoSEntry_Object = MibTableRow
atmVcPMQoSEntry = _AtmVcPMQoSEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 7, 1)
)
atmVcPMQoSEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ATM-MIB", "atmVclVpi"),
    (0, "ATM-MIB", "atmVclVci"),
    (0, "RAD-MIB", "atmVcPMQoSDirection"),
    (0, "RAD-MIB", "atmVcPMQoSPeriodRef"),
)
if mibBuilder.loadTexts:
    atmVcPMQoSEntry.setStatus("current")


class _AtmVcPMQoSDirection_Type(Integer32):
    """Custom type atmVcPMQoSDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("backward", 3),
          ("forward", 2))
    )


_AtmVcPMQoSDirection_Type.__name__ = "Integer32"
_AtmVcPMQoSDirection_Object = MibTableColumn
atmVcPMQoSDirection = _AtmVcPMQoSDirection_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 7, 1, 1),
    _AtmVcPMQoSDirection_Type()
)
atmVcPMQoSDirection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMQoSDirection.setStatus("current")


class _AtmVcPMQoSPeriodRef_Type(Integer32):
    """Custom type atmVcPMQoSPeriodRef based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("currentPeriod", 1),
          ("lastPeriod", 2))
    )


_AtmVcPMQoSPeriodRef_Type.__name__ = "Integer32"
_AtmVcPMQoSPeriodRef_Object = MibTableColumn
atmVcPMQoSPeriodRef = _AtmVcPMQoSPeriodRef_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 7, 1, 2),
    _AtmVcPMQoSPeriodRef_Type()
)
atmVcPMQoSPeriodRef.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMQoSPeriodRef.setStatus("current")
_AtmVcPMQoSCLR_Type = Gauge32
_AtmVcPMQoSCLR_Object = MibTableColumn
atmVcPMQoSCLR = _AtmVcPMQoSCLR_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 7, 1, 3),
    _AtmVcPMQoSCLR_Type()
)
atmVcPMQoSCLR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMQoSCLR.setStatus("current")
_AtmVcPMQoSCER_Type = Gauge32
_AtmVcPMQoSCER_Object = MibTableColumn
atmVcPMQoSCER = _AtmVcPMQoSCER_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 7, 1, 4),
    _AtmVcPMQoSCER_Type()
)
atmVcPMQoSCER.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMQoSCER.setStatus("current")
_AtmVcPMQoSCMR_Type = Gauge32
_AtmVcPMQoSCMR_Object = MibTableColumn
atmVcPMQoSCMR = _AtmVcPMQoSCMR_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 7, 1, 5),
    _AtmVcPMQoSCMR_Type()
)
atmVcPMQoSCMR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPMQoSCMR.setStatus("current")
_AtmVcShaperStatTable_Object = MibTable
atmVcShaperStatTable = _AtmVcShaperStatTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 8)
)
if mibBuilder.loadTexts:
    atmVcShaperStatTable.setStatus("current")
_AtmVcShaperStatEntry_Object = MibTableRow
atmVcShaperStatEntry = _AtmVcShaperStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 8, 1)
)
atmVcShaperStatEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ATM-MIB", "atmVclVpi"),
    (0, "ATM-MIB", "atmVclVci"),
)
if mibBuilder.loadTexts:
    atmVcShaperStatEntry.setStatus("current")
_AtmVcShaperDiscarded_Type = Counter32
_AtmVcShaperDiscarded_Object = MibTableColumn
atmVcShaperDiscarded = _AtmVcShaperDiscarded_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 8, 1, 1),
    _AtmVcShaperDiscarded_Type()
)
atmVcShaperDiscarded.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcShaperDiscarded.setStatus("current")
_AtmVcShaperOccupation_Type = Integer32
_AtmVcShaperOccupation_Object = MibTableColumn
atmVcShaperOccupation = _AtmVcShaperOccupation_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 8, 1, 2),
    _AtmVcShaperOccupation_Type()
)
atmVcShaperOccupation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcShaperOccupation.setStatus("current")
_AtmVcShaperMaxOccupation_Type = Integer32
_AtmVcShaperMaxOccupation_Object = MibTableColumn
atmVcShaperMaxOccupation = _AtmVcShaperMaxOccupation_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 8, 1, 3),
    _AtmVcShaperMaxOccupation_Type()
)
atmVcShaperMaxOccupation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcShaperMaxOccupation.setStatus("current")


class _AtmVcShaperLevel_Type(Integer32):
    """Custom type atmVcShaperLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("above", 4),
          ("below", 3),
          ("empty", 1),
          ("full", 2))
    )


_AtmVcShaperLevel_Type.__name__ = "Integer32"
_AtmVcShaperLevel_Object = MibTableColumn
atmVcShaperLevel = _AtmVcShaperLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 8, 1, 4),
    _AtmVcShaperLevel_Type()
)
atmVcShaperLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcShaperLevel.setStatus("current")
_AtmVcShaperEpdDropped_Type = Counter32
_AtmVcShaperEpdDropped_Object = MibTableColumn
atmVcShaperEpdDropped = _AtmVcShaperEpdDropped_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 8, 1, 5),
    _AtmVcShaperEpdDropped_Type()
)
atmVcShaperEpdDropped.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcShaperEpdDropped.setStatus("current")
_AtmVcShaperTotalEpdDropped_Type = Counter32
_AtmVcShaperTotalEpdDropped_Object = MibTableColumn
atmVcShaperTotalEpdDropped = _AtmVcShaperTotalEpdDropped_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 2, 2, 8, 1, 6),
    _AtmVcShaperTotalEpdDropped_Type()
)
atmVcShaperTotalEpdDropped.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcShaperTotalEpdDropped.setStatus("current")
_AtmIntervalDateTable_Object = MibTable
atmIntervalDateTable = _AtmIntervalDateTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 3)
)
if mibBuilder.loadTexts:
    atmIntervalDateTable.setStatus("current")
_AtmIntervalDateEntry_Object = MibTableRow
atmIntervalDateEntry = _AtmIntervalDateEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 3, 1)
)
atmIntervalDateEntry.setIndexNames(
    (0, "RAD-MIB", "atmIntervalDateInterval"),
)
if mibBuilder.loadTexts:
    atmIntervalDateEntry.setStatus("current")


class _AtmIntervalDateInterval_Type(Integer32):
    """Custom type atmIntervalDateInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_AtmIntervalDateInterval_Type.__name__ = "Integer32"
_AtmIntervalDateInterval_Object = MibTableColumn
atmIntervalDateInterval = _AtmIntervalDateInterval_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 3, 1, 1),
    _AtmIntervalDateInterval_Type()
)
atmIntervalDateInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmIntervalDateInterval.setStatus("current")
_AtmIntervalDateDate_Type = DisplayString
_AtmIntervalDateDate_Object = MibTableColumn
atmIntervalDateDate = _AtmIntervalDateDate_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 3, 1, 2),
    _AtmIntervalDateDate_Type()
)
atmIntervalDateDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmIntervalDateDate.setStatus("current")
_AtmIntervalDateTime_Type = DisplayString
_AtmIntervalDateTime_Object = MibTableColumn
atmIntervalDateTime = _AtmIntervalDateTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 1, 3, 1, 3),
    _AtmIntervalDateTime_Type()
)
atmIntervalDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmIntervalDateTime.setStatus("current")
_AtmGenSystem_ObjectIdentity = ObjectIdentity
atmGenSystem = _AtmGenSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 2)
)
_AtmGenSysGen_ObjectIdentity = ObjectIdentity
atmGenSysGen = _AtmGenSysGen_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 2, 1)
)
_AtmGenSysSelfTestTable_Object = MibTable
atmGenSysSelfTestTable = _AtmGenSysSelfTestTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 2, 1, 1)
)
if mibBuilder.loadTexts:
    atmGenSysSelfTestTable.setStatus("current")
_AtmGenSysSelfTestEntry_Object = MibTableRow
atmGenSysSelfTestEntry = _AtmGenSysSelfTestEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 2, 1, 1, 1)
)
atmGenSysSelfTestEntry.setIndexNames(
    (0, "RAD-MIB", "atmGenSysSelfTestIndex"),
)
if mibBuilder.loadTexts:
    atmGenSysSelfTestEntry.setStatus("current")
_AtmGenSysSelfTestIndex_Type = Integer32
_AtmGenSysSelfTestIndex_Object = MibTableColumn
atmGenSysSelfTestIndex = _AtmGenSysSelfTestIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 2, 1, 1, 1, 1),
    _AtmGenSysSelfTestIndex_Type()
)
atmGenSysSelfTestIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmGenSysSelfTestIndex.setStatus("current")
_AtmGenSysSelfTestResult_Type = DisplayString
_AtmGenSysSelfTestResult_Object = MibTableColumn
atmGenSysSelfTestResult = _AtmGenSysSelfTestResult_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 2, 1, 1, 1, 2),
    _AtmGenSysSelfTestResult_Type()
)
atmGenSysSelfTestResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmGenSysSelfTestResult.setStatus("current")
_AtmGenSysSelfTestModule_Type = DisplayString
_AtmGenSysSelfTestModule_Object = MibTableColumn
atmGenSysSelfTestModule = _AtmGenSysSelfTestModule_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 2, 1, 1, 1, 3),
    _AtmGenSysSelfTestModule_Type()
)
atmGenSysSelfTestModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmGenSysSelfTestModule.setStatus("current")


class _AtmGenSysLogClearAll_Type(Integer32):
    """Custom type atmGenSysLogClearAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clear", 3),
          ("off", 2))
    )


_AtmGenSysLogClearAll_Type.__name__ = "Integer32"
_AtmGenSysLogClearAll_Object = MibScalar
atmGenSysLogClearAll = _AtmGenSysLogClearAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 2, 1, 2),
    _AtmGenSysLogClearAll_Type()
)
atmGenSysLogClearAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmGenSysLogClearAll.setStatus("current")
_AtmGenSysLogTable_Object = MibTable
atmGenSysLogTable = _AtmGenSysLogTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 2, 1, 3)
)
if mibBuilder.loadTexts:
    atmGenSysLogTable.setStatus("current")
_AtmGenSysLogEntry_Object = MibTableRow
atmGenSysLogEntry = _AtmGenSysLogEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 2, 1, 3, 1)
)
atmGenSysLogEntry.setIndexNames(
    (0, "RAD-MIB", "atmGenSysLogIndex"),
)
if mibBuilder.loadTexts:
    atmGenSysLogEntry.setStatus("current")


class _AtmGenSysLogIndex_Type(Integer32):
    """Custom type atmGenSysLogIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2048),
    )


_AtmGenSysLogIndex_Type.__name__ = "Integer32"
_AtmGenSysLogIndex_Object = MibTableColumn
atmGenSysLogIndex = _AtmGenSysLogIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 2, 1, 3, 1, 1),
    _AtmGenSysLogIndex_Type()
)
atmGenSysLogIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmGenSysLogIndex.setStatus("current")


class _AtmGenSysLogMessage_Type(DisplayString):
    """Custom type atmGenSysLogMessage based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(80, 80),
    )


_AtmGenSysLogMessage_Type.__name__ = "DisplayString"
_AtmGenSysLogMessage_Object = MibTableColumn
atmGenSysLogMessage = _AtmGenSysLogMessage_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 2, 1, 3, 1, 2),
    _AtmGenSysLogMessage_Type()
)
atmGenSysLogMessage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmGenSysLogMessage.setStatus("current")


class _AtmGenSysSetDefaultConfg_Type(Integer32):
    """Custom type atmGenSysSetDefaultConfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AtmGenSysSetDefaultConfg_Type.__name__ = "Integer32"
_AtmGenSysSetDefaultConfg_Object = MibScalar
atmGenSysSetDefaultConfg = _AtmGenSysSetDefaultConfg_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 2, 1, 4),
    _AtmGenSysSetDefaultConfg_Type()
)
atmGenSysSetDefaultConfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmGenSysSetDefaultConfg.setStatus("current")
_AtmGenSysCxRefTable_Object = MibTable
atmGenSysCxRefTable = _AtmGenSysCxRefTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 2, 1, 5)
)
if mibBuilder.loadTexts:
    atmGenSysCxRefTable.setStatus("current")
_AtmGenSysCxRefEntry_Object = MibTableRow
atmGenSysCxRefEntry = _AtmGenSysCxRefEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 2, 1, 5, 1)
)
atmGenSysCxRefEntry.setIndexNames(
    (0, "RAD-MIB", "atmGenSysCxRefIndex"),
)
if mibBuilder.loadTexts:
    atmGenSysCxRefEntry.setStatus("current")
_AtmGenSysCxRefIndex_Type = Integer32
_AtmGenSysCxRefIndex_Object = MibTableColumn
atmGenSysCxRefIndex = _AtmGenSysCxRefIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 2, 1, 5, 1, 1),
    _AtmGenSysCxRefIndex_Type()
)
atmGenSysCxRefIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmGenSysCxRefIndex.setStatus("current")
_AtmGenSysCxRefCounter_Type = Gauge32
_AtmGenSysCxRefCounter_Object = MibTableColumn
atmGenSysCxRefCounter = _AtmGenSysCxRefCounter_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 2, 2, 1, 5, 1, 2),
    _AtmGenSysCxRefCounter_Type()
)
atmGenSysCxRefCounter.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmGenSysCxRefCounter.setStatus("current")
_AtmNte_ObjectIdentity = ObjectIdentity
atmNte = _AtmNte_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 3)
)
_AtmNteEvents_ObjectIdentity = ObjectIdentity
atmNteEvents = _AtmNteEvents_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 0)
)
if mibBuilder.loadTexts:
    atmNteEvents.setStatus("current")
_AtmNteSys_ObjectIdentity = ObjectIdentity
atmNteSys = _AtmNteSys_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1)
)
_AtmNteSysConfig_ObjectIdentity = ObjectIdentity
atmNteSysConfig = _AtmNteSysConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1)
)
_AtmNteManagerTable_Object = MibTable
atmNteManagerTable = _AtmNteManagerTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 1)
)
if mibBuilder.loadTexts:
    atmNteManagerTable.setStatus("current")
_AtmNteManagerEntry_Object = MibTableRow
atmNteManagerEntry = _AtmNteManagerEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 1, 1)
)
atmNteManagerEntry.setIndexNames(
    (0, "RAD-MIB", "atmNteManagerIP"),
    (0, "RAD-MIB", "atmNteManagerPvc"),
)
if mibBuilder.loadTexts:
    atmNteManagerEntry.setStatus("current")
_AtmNteManagerIP_Type = IpAddress
_AtmNteManagerIP_Object = MibTableColumn
atmNteManagerIP = _AtmNteManagerIP_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 1, 1, 1),
    _AtmNteManagerIP_Type()
)
atmNteManagerIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteManagerIP.setStatus("current")
_AtmNteManagerPvc_Type = Integer32
_AtmNteManagerPvc_Object = MibTableColumn
atmNteManagerPvc = _AtmNteManagerPvc_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 1, 1, 2),
    _AtmNteManagerPvc_Type()
)
atmNteManagerPvc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteManagerPvc.setStatus("current")
_AtmNteManagerIfIndex_Type = Integer32
_AtmNteManagerIfIndex_Object = MibTableColumn
atmNteManagerIfIndex = _AtmNteManagerIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 1, 1, 3),
    _AtmNteManagerIfIndex_Type()
)
atmNteManagerIfIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteManagerIfIndex.setStatus("current")
_AtmNteManagerVpi_Type = Integer32
_AtmNteManagerVpi_Object = MibTableColumn
atmNteManagerVpi = _AtmNteManagerVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 1, 1, 4),
    _AtmNteManagerVpi_Type()
)
atmNteManagerVpi.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteManagerVpi.setStatus("current")
_AtmNteManagerVci_Type = Integer32
_AtmNteManagerVci_Object = MibTableColumn
atmNteManagerVci = _AtmNteManagerVci_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 1, 1, 5),
    _AtmNteManagerVci_Type()
)
atmNteManagerVci.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteManagerVci.setStatus("current")
_AtmNteManagerTrapMask_Type = Integer32
_AtmNteManagerTrapMask_Object = MibTableColumn
atmNteManagerTrapMask = _AtmNteManagerTrapMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 1, 1, 6),
    _AtmNteManagerTrapMask_Type()
)
atmNteManagerTrapMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteManagerTrapMask.setStatus("current")
_AtmNteManagerRowStatus_Type = RowStatus
_AtmNteManagerRowStatus_Object = MibTableColumn
atmNteManagerRowStatus = _AtmNteManagerRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 1, 1, 7),
    _AtmNteManagerRowStatus_Type()
)
atmNteManagerRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteManagerRowStatus.setStatus("current")
_AtmNteManagerNextHop_Type = IpAddress
_AtmNteManagerNextHop_Object = MibTableColumn
atmNteManagerNextHop = _AtmNteManagerNextHop_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 1, 1, 8),
    _AtmNteManagerNextHop_Type()
)
atmNteManagerNextHop.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteManagerNextHop.setStatus("current")


class _AtmNteManagerVlanSupport_Type(Integer32):
    """Custom type atmNteManagerVlanSupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_AtmNteManagerVlanSupport_Type.__name__ = "Integer32"
_AtmNteManagerVlanSupport_Object = MibTableColumn
atmNteManagerVlanSupport = _AtmNteManagerVlanSupport_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 1, 1, 9),
    _AtmNteManagerVlanSupport_Type()
)
atmNteManagerVlanSupport.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteManagerVlanSupport.setStatus("current")
_AtmNteManagerVlanIdentifier_Type = Integer32
_AtmNteManagerVlanIdentifier_Object = MibTableColumn
atmNteManagerVlanIdentifier = _AtmNteManagerVlanIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 1, 1, 10),
    _AtmNteManagerVlanIdentifier_Type()
)
atmNteManagerVlanIdentifier.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteManagerVlanIdentifier.setStatus("current")
_AtmNteManagerVlanFramePriority_Type = Integer32
_AtmNteManagerVlanFramePriority_Object = MibTableColumn
atmNteManagerVlanFramePriority = _AtmNteManagerVlanFramePriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 1, 1, 11),
    _AtmNteManagerVlanFramePriority_Type()
)
atmNteManagerVlanFramePriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteManagerVlanFramePriority.setStatus("current")
_AtmNteManagerAlarmTrapMask_Type = OctetString
_AtmNteManagerAlarmTrapMask_Object = MibTableColumn
atmNteManagerAlarmTrapMask = _AtmNteManagerAlarmTrapMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 1, 1, 12),
    _AtmNteManagerAlarmTrapMask_Type()
)
atmNteManagerAlarmTrapMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteManagerAlarmTrapMask.setStatus("current")
_AtmNteManagerConfigPorts_Type = Integer32
_AtmNteManagerConfigPorts_Object = MibTableColumn
atmNteManagerConfigPorts = _AtmNteManagerConfigPorts_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 1, 1, 13),
    _AtmNteManagerConfigPorts_Type()
)
atmNteManagerConfigPorts.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteManagerConfigPorts.setStatus("current")
_AtmNteUPLTCR_Type = Integer32
_AtmNteUPLTCR_Object = MibScalar
atmNteUPLTCR = _AtmNteUPLTCR_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 2),
    _AtmNteUPLTCR_Type()
)
atmNteUPLTCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteUPLTCR.setStatus("current")
_AtmNteDPLTCR_Type = Integer32
_AtmNteDPLTCR_Object = MibScalar
atmNteDPLTCR = _AtmNteDPLTCR_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 3),
    _AtmNteDPLTCR_Type()
)
atmNteDPLTCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteDPLTCR.setStatus("current")


class _AtmNteSysLogClearAll_Type(Integer32):
    """Custom type atmNteSysLogClearAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clear", 3),
          ("off", 2))
    )


_AtmNteSysLogClearAll_Type.__name__ = "Integer32"
_AtmNteSysLogClearAll_Object = MibScalar
atmNteSysLogClearAll = _AtmNteSysLogClearAll_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 4),
    _AtmNteSysLogClearAll_Type()
)
atmNteSysLogClearAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteSysLogClearAll.setStatus("current")
_AtmNteUSESLTCR_Type = Integer32
_AtmNteUSESLTCR_Object = MibScalar
atmNteUSESLTCR = _AtmNteUSESLTCR_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 5),
    _AtmNteUSESLTCR_Type()
)
atmNteUSESLTCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteUSESLTCR.setStatus("current")
_AtmNteDSESLTCR_Type = Integer32
_AtmNteDSESLTCR_Object = MibScalar
atmNteDSESLTCR = _AtmNteDSESLTCR_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 6),
    _AtmNteDSESLTCR_Type()
)
atmNteDSESLTCR.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteDSESLTCR.setStatus("current")
_AtmNteProtection_ObjectIdentity = ObjectIdentity
atmNteProtection = _AtmNteProtection_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 8)
)


class _AtmNteProtectionMode_Type(Integer32):
    """Custom type atmNteProtectionMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("mspOn", 2),
          ("mspOneToN", 5),
          ("mspUniOn", 4),
          ("off", 1),
          ("pathOn", 3))
    )


_AtmNteProtectionMode_Type.__name__ = "Integer32"
_AtmNteProtectionMode_Object = MibScalar
atmNteProtectionMode = _AtmNteProtectionMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 8, 1),
    _AtmNteProtectionMode_Type()
)
atmNteProtectionMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteProtectionMode.setStatus("current")


class _AtmNteProtectionWorkingLink_Type(Integer32):
    """Custom type atmNteProtectionWorkingLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("trunk1", 2),
          ("trunk2", 3))
    )


_AtmNteProtectionWorkingLink_Type.__name__ = "Integer32"
_AtmNteProtectionWorkingLink_Object = MibScalar
atmNteProtectionWorkingLink = _AtmNteProtectionWorkingLink_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 8, 2),
    _AtmNteProtectionWorkingLink_Type()
)
atmNteProtectionWorkingLink.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteProtectionWorkingLink.setStatus("current")


class _AtmNteProtectionSwitchLink_Type(Integer32):
    """Custom type atmNteProtectionSwitchLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("forceSwitch", 2),
          ("off", 1))
    )


_AtmNteProtectionSwitchLink_Type.__name__ = "Integer32"
_AtmNteProtectionSwitchLink_Object = MibScalar
atmNteProtectionSwitchLink = _AtmNteProtectionSwitchLink_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 8, 3),
    _AtmNteProtectionSwitchLink_Type()
)
atmNteProtectionSwitchLink.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteProtectionSwitchLink.setStatus("current")
_AtmNteConfOam_ObjectIdentity = ObjectIdentity
atmNteConfOam = _AtmNteConfOam_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 9)
)


class _AtmNteConfOamSupport_Type(Integer32):
    """Custom type atmNteConfOamSupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("endToEndTermination", 3),
          ("intermediate", 1),
          ("segmentTermination", 2),
          ("vpEndToEndVcSegment", 4))
    )


_AtmNteConfOamSupport_Type.__name__ = "Integer32"
_AtmNteConfOamSupport_Object = MibScalar
atmNteConfOamSupport = _AtmNteConfOamSupport_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 9, 1),
    _AtmNteConfOamSupport_Type()
)
atmNteConfOamSupport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteConfOamSupport.setStatus("current")
_AtmNteConfOamTransmission_ObjectIdentity = ObjectIdentity
atmNteConfOamTransmission = _AtmNteConfOamTransmission_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 9, 2)
)


class _AtmNteConfOamAIS_Type(Integer32):
    """Custom type atmNteConfOamAIS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("both", 4),
          ("network", 3),
          ("none", 1),
          ("user", 2))
    )


_AtmNteConfOamAIS_Type.__name__ = "Integer32"
_AtmNteConfOamAIS_Object = MibScalar
atmNteConfOamAIS = _AtmNteConfOamAIS_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 9, 2, 1),
    _AtmNteConfOamAIS_Type()
)
atmNteConfOamAIS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteConfOamAIS.setStatus("current")


class _AtmNteConfOamRDI_Type(Integer32):
    """Custom type atmNteConfOamRDI based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("both", 4),
          ("network", 3),
          ("none", 1),
          ("user", 2))
    )


_AtmNteConfOamRDI_Type.__name__ = "Integer32"
_AtmNteConfOamRDI_Object = MibScalar
atmNteConfOamRDI = _AtmNteConfOamRDI_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 9, 2, 2),
    _AtmNteConfOamRDI_Type()
)
atmNteConfOamRDI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteConfOamRDI.setStatus("current")
_AtmNteConfOamAddressing_ObjectIdentity = ObjectIdentity
atmNteConfOamAddressing = _AtmNteConfOamAddressing_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 9, 3)
)


class _AtmNteConfLoopbackAddMode_Type(Integer32):
    """Custom type atmNteConfLoopbackAddMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_AtmNteConfLoopbackAddMode_Type.__name__ = "Integer32"
_AtmNteConfLoopbackAddMode_Object = MibScalar
atmNteConfLoopbackAddMode = _AtmNteConfLoopbackAddMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 9, 3, 1),
    _AtmNteConfLoopbackAddMode_Type()
)
atmNteConfLoopbackAddMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteConfLoopbackAddMode.setStatus("current")


class _AtmNteConfLoopbackSourceAdd_Type(OctetString):
    """Custom type atmNteConfLoopbackSourceAdd based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 20),
    )


_AtmNteConfLoopbackSourceAdd_Type.__name__ = "OctetString"
_AtmNteConfLoopbackSourceAdd_Object = MibScalar
atmNteConfLoopbackSourceAdd = _AtmNteConfLoopbackSourceAdd_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 9, 3, 2),
    _AtmNteConfLoopbackSourceAdd_Type()
)
atmNteConfLoopbackSourceAdd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteConfLoopbackSourceAdd.setStatus("current")
_AtmNteConfOamIfTable_Object = MibTable
atmNteConfOamIfTable = _AtmNteConfOamIfTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 9, 4)
)
if mibBuilder.loadTexts:
    atmNteConfOamIfTable.setStatus("current")
_AtmNteConfOamIfEntry_Object = MibTableRow
atmNteConfOamIfEntry = _AtmNteConfOamIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 9, 4, 1)
)
atmNteConfOamIfEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    atmNteConfOamIfEntry.setStatus("current")


class _AtmNteConfOamIfAisRdi_Type(Integer32):
    """Custom type atmNteConfOamIfAisRdi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_AtmNteConfOamIfAisRdi_Type.__name__ = "Integer32"
_AtmNteConfOamIfAisRdi_Object = MibTableColumn
atmNteConfOamIfAisRdi = _AtmNteConfOamIfAisRdi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 9, 4, 1, 1),
    _AtmNteConfOamIfAisRdi_Type()
)
atmNteConfOamIfAisRdi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteConfOamIfAisRdi.setStatus("current")
_AtmNteConfCAC_ObjectIdentity = ObjectIdentity
atmNteConfCAC = _AtmNteConfCAC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 10)
)


class _AtmNteConfCACMode_Type(Integer32):
    """Custom type atmNteConfCACMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_AtmNteConfCACMode_Type.__name__ = "Integer32"
_AtmNteConfCACMode_Object = MibScalar
atmNteConfCACMode = _AtmNteConfCACMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 10, 1),
    _AtmNteConfCACMode_Type()
)
atmNteConfCACMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteConfCACMode.setStatus("current")
_AtmNteHostIfTable_Object = MibTable
atmNteHostIfTable = _AtmNteHostIfTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 11)
)
if mibBuilder.loadTexts:
    atmNteHostIfTable.setStatus("current")
_AtmNteHostIfEntry_Object = MibTableRow
atmNteHostIfEntry = _AtmNteHostIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 11, 1)
)
atmNteHostIfEntry.setIndexNames(
    (0, "RAD-MIB", "atmNteHostPvcIndex"),
)
if mibBuilder.loadTexts:
    atmNteHostIfEntry.setStatus("current")
_AtmNteHostPvcIndex_Type = Integer32
_AtmNteHostPvcIndex_Object = MibTableColumn
atmNteHostPvcIndex = _AtmNteHostPvcIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 11, 1, 1),
    _AtmNteHostPvcIndex_Type()
)
atmNteHostPvcIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteHostPvcIndex.setStatus("current")
_AtmNteHostIP_Type = IpAddress
_AtmNteHostIP_Object = MibTableColumn
atmNteHostIP = _AtmNteHostIP_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 11, 1, 2),
    _AtmNteHostIP_Type()
)
atmNteHostIP.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteHostIP.setStatus("current")
_AtmNteHostMask_Type = IpAddress
_AtmNteHostMask_Object = MibTableColumn
atmNteHostMask = _AtmNteHostMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 11, 1, 3),
    _AtmNteHostMask_Type()
)
atmNteHostMask.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteHostMask.setStatus("current")
_AtmNteHostAtmIfIndex_Type = Integer32
_AtmNteHostAtmIfIndex_Object = MibTableColumn
atmNteHostAtmIfIndex = _AtmNteHostAtmIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 11, 1, 4),
    _AtmNteHostAtmIfIndex_Type()
)
atmNteHostAtmIfIndex.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteHostAtmIfIndex.setStatus("current")
_AtmNteHostVpi_Type = Integer32
_AtmNteHostVpi_Object = MibTableColumn
atmNteHostVpi = _AtmNteHostVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 11, 1, 5),
    _AtmNteHostVpi_Type()
)
atmNteHostVpi.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteHostVpi.setStatus("current")
_AtmNteHostVci_Type = Integer32
_AtmNteHostVci_Object = MibTableColumn
atmNteHostVci = _AtmNteHostVci_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 11, 1, 6),
    _AtmNteHostVci_Type()
)
atmNteHostVci.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteHostVci.setStatus("current")
_AtmNteHostRowStatus_Type = RowStatus
_AtmNteHostRowStatus_Object = MibTableColumn
atmNteHostRowStatus = _AtmNteHostRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 11, 1, 7),
    _AtmNteHostRowStatus_Type()
)
atmNteHostRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteHostRowStatus.setStatus("current")
_AtmNteHostRdnVpi_Type = Integer32
_AtmNteHostRdnVpi_Object = MibTableColumn
atmNteHostRdnVpi = _AtmNteHostRdnVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 11, 1, 8),
    _AtmNteHostRdnVpi_Type()
)
atmNteHostRdnVpi.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteHostRdnVpi.setStatus("current")
_AtmNteHostRdnVci_Type = Integer32
_AtmNteHostRdnVci_Object = MibTableColumn
atmNteHostRdnVci = _AtmNteHostRdnVci_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 11, 1, 9),
    _AtmNteHostRdnVci_Type()
)
atmNteHostRdnVci.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteHostRdnVci.setStatus("current")
_AtmNteHostDefaultNextHop_Type = IpAddress
_AtmNteHostDefaultNextHop_Object = MibTableColumn
atmNteHostDefaultNextHop = _AtmNteHostDefaultNextHop_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 11, 1, 10),
    _AtmNteHostDefaultNextHop_Type()
)
atmNteHostDefaultNextHop.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteHostDefaultNextHop.setStatus("current")


class _AtmNteHostVlanTagging_Type(Integer32):
    """Custom type atmNteHostVlanTagging based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 3))
    )


_AtmNteHostVlanTagging_Type.__name__ = "Integer32"
_AtmNteHostVlanTagging_Object = MibTableColumn
atmNteHostVlanTagging = _AtmNteHostVlanTagging_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 11, 1, 11),
    _AtmNteHostVlanTagging_Type()
)
atmNteHostVlanTagging.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteHostVlanTagging.setStatus("current")
_AtmNteHostDefaultVlanID_Type = Integer32
_AtmNteHostDefaultVlanID_Object = MibTableColumn
atmNteHostDefaultVlanID = _AtmNteHostDefaultVlanID_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 11, 1, 12),
    _AtmNteHostDefaultVlanID_Type()
)
atmNteHostDefaultVlanID.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteHostDefaultVlanID.setStatus("current")
_AtmNteHostDefaultVlanPriority_Type = Integer32
_AtmNteHostDefaultVlanPriority_Object = MibTableColumn
atmNteHostDefaultVlanPriority = _AtmNteHostDefaultVlanPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 11, 1, 13),
    _AtmNteHostDefaultVlanPriority_Type()
)
atmNteHostDefaultVlanPriority.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmNteHostDefaultVlanPriority.setStatus("current")


class _AtmNteShaperMode_Type(Integer32):
    """Custom type atmNteShaperMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("aggregate", 3),
          ("group", 2),
          ("normal", 1),
          ("vpInbandMng", 4))
    )


_AtmNteShaperMode_Type.__name__ = "Integer32"
_AtmNteShaperMode_Object = MibScalar
atmNteShaperMode = _AtmNteShaperMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 12),
    _AtmNteShaperMode_Type()
)
atmNteShaperMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteShaperMode.setStatus("current")
_AtmNteOutputRate_Type = Integer32
_AtmNteOutputRate_Object = MibScalar
atmNteOutputRate = _AtmNteOutputRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 13),
    _AtmNteOutputRate_Type()
)
atmNteOutputRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteOutputRate.setStatus("current")


class _AtmNteTosMode_Type(Integer32):
    """Custom type atmNteTosMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3),
          ("notApplicable", 1))
    )


_AtmNteTosMode_Type.__name__ = "Integer32"
_AtmNteTosMode_Object = MibScalar
atmNteTosMode = _AtmNteTosMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 14),
    _AtmNteTosMode_Type()
)
atmNteTosMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteTosMode.setStatus("current")


class _AtmNteTosMask_Type(OctetString):
    """Custom type atmNteTosMask based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_AtmNteTosMask_Type.__name__ = "OctetString"
_AtmNteTosMask_Object = MibScalar
atmNteTosMask = _AtmNteTosMask_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 15),
    _AtmNteTosMask_Type()
)
atmNteTosMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteTosMask.setStatus("current")


class _AtmNteTosHighPriority_Type(OctetString):
    """Custom type atmNteTosHighPriority based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_AtmNteTosHighPriority_Type.__name__ = "OctetString"
_AtmNteTosHighPriority_Object = MibScalar
atmNteTosHighPriority = _AtmNteTosHighPriority_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 16),
    _AtmNteTosHighPriority_Type()
)
atmNteTosHighPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteTosHighPriority.setStatus("current")


class _AtmNtePlugAndPlayActivity_Type(Integer32):
    """Custom type atmNtePlugAndPlayActivity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("offline", 2),
          ("online", 3))
    )


_AtmNtePlugAndPlayActivity_Type.__name__ = "Integer32"
_AtmNtePlugAndPlayActivity_Object = MibScalar
atmNtePlugAndPlayActivity = _AtmNtePlugAndPlayActivity_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 17),
    _AtmNtePlugAndPlayActivity_Type()
)
atmNtePlugAndPlayActivity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNtePlugAndPlayActivity.setStatus("current")


class _AtmNteSlotUsage_Type(Integer32):
    """Custom type atmNteSlotUsage based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("network", 3),
          ("notApplicable", 1),
          ("user", 2))
    )


_AtmNteSlotUsage_Type.__name__ = "Integer32"
_AtmNteSlotUsage_Object = MibScalar
atmNteSlotUsage = _AtmNteSlotUsage_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 18),
    _AtmNteSlotUsage_Type()
)
atmNteSlotUsage.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteSlotUsage.setStatus("current")


class _AtmNteConnectionsMaxNumber_Type(Integer32):
    """Custom type atmNteConnectionsMaxNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("max1024", 2),
          ("max2048", 3),
          ("notApplicable", 1))
    )


_AtmNteConnectionsMaxNumber_Type.__name__ = "Integer32"
_AtmNteConnectionsMaxNumber_Object = MibScalar
atmNteConnectionsMaxNumber = _AtmNteConnectionsMaxNumber_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 19),
    _AtmNteConnectionsMaxNumber_Type()
)
atmNteConnectionsMaxNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteConnectionsMaxNumber.setStatus("current")
_AtmNteDefaultVpi_Type = Integer32
_AtmNteDefaultVpi_Object = MibScalar
atmNteDefaultVpi = _AtmNteDefaultVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 20),
    _AtmNteDefaultVpi_Type()
)
atmNteDefaultVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteDefaultVpi.setStatus("current")
_AtmNteDefaultVci_Type = Integer32
_AtmNteDefaultVci_Object = MibScalar
atmNteDefaultVci = _AtmNteDefaultVci_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 21),
    _AtmNteDefaultVci_Type()
)
atmNteDefaultVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteDefaultVci.setStatus("current")


class _AtmNteReservedVpi_Type(Integer32):
    """Custom type atmNteReservedVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_AtmNteReservedVpi_Type.__name__ = "Integer32"
_AtmNteReservedVpi_Object = MibScalar
atmNteReservedVpi = _AtmNteReservedVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 22),
    _AtmNteReservedVpi_Type()
)
atmNteReservedVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteReservedVpi.setStatus("current")


class _AtmNteRdnManagement_Type(Integer32):
    """Custom type atmNteRdnManagement based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3))
    )


_AtmNteRdnManagement_Type.__name__ = "Integer32"
_AtmNteRdnManagement_Object = MibScalar
atmNteRdnManagement = _AtmNteRdnManagement_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 23),
    _AtmNteRdnManagement_Type()
)
atmNteRdnManagement.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteRdnManagement.setStatus("current")
_AtmNtePlugAndPlayIfIndex_Type = InterfaceIndex
_AtmNtePlugAndPlayIfIndex_Object = MibScalar
atmNtePlugAndPlayIfIndex = _AtmNtePlugAndPlayIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 24),
    _AtmNtePlugAndPlayIfIndex_Type()
)
atmNtePlugAndPlayIfIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNtePlugAndPlayIfIndex.setStatus("current")
_AtmNteLoopbackTimeout_Type = Integer32
_AtmNteLoopbackTimeout_Object = MibScalar
atmNteLoopbackTimeout = _AtmNteLoopbackTimeout_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 25),
    _AtmNteLoopbackTimeout_Type()
)
atmNteLoopbackTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteLoopbackTimeout.setStatus("current")
_AtmNteOamTable_Object = MibTable
atmNteOamTable = _AtmNteOamTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 26)
)
if mibBuilder.loadTexts:
    atmNteOamTable.setStatus("current")
_AtmNteOamEntry_Object = MibTableRow
atmNteOamEntry = _AtmNteOamEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 26, 1)
)
atmNteOamEntry.setIndexNames(
    (0, "RAD-MIB", "atmNteOamMode"),
    (0, "RAD-MIB", "atmNteOamCellType"),
    (0, "RAD-MIB", "atmNteOamLevel"),
)
if mibBuilder.loadTexts:
    atmNteOamEntry.setStatus("current")


class _AtmNteOamMode_Type(Integer32):
    """Custom type atmNteOamMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("endToEnd", 1)
    )


_AtmNteOamMode_Type.__name__ = "Integer32"
_AtmNteOamMode_Object = MibTableColumn
atmNteOamMode = _AtmNteOamMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 26, 1, 1),
    _AtmNteOamMode_Type()
)
atmNteOamMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteOamMode.setStatus("current")


class _AtmNteOamCellType_Type(Integer32):
    """Custom type atmNteOamCellType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("aisAndRdi", 1),
          ("loopback", 2))
    )


_AtmNteOamCellType_Type.__name__ = "Integer32"
_AtmNteOamCellType_Object = MibTableColumn
atmNteOamCellType = _AtmNteOamCellType_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 26, 1, 2),
    _AtmNteOamCellType_Type()
)
atmNteOamCellType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteOamCellType.setStatus("current")


class _AtmNteOamLevel_Type(Integer32):
    """Custom type atmNteOamLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            3
        )
    )
    namedValues = NamedValues(
        ("f5", 3)
    )


_AtmNteOamLevel_Type.__name__ = "Integer32"
_AtmNteOamLevel_Object = MibTableColumn
atmNteOamLevel = _AtmNteOamLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 26, 1, 3),
    _AtmNteOamLevel_Type()
)
atmNteOamLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteOamLevel.setStatus("current")


class _AtmNteOamEnable_Type(Integer32):
    """Custom type atmNteOamEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_AtmNteOamEnable_Type.__name__ = "Integer32"
_AtmNteOamEnable_Object = MibTableColumn
atmNteOamEnable = _AtmNteOamEnable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 26, 1, 4),
    _AtmNteOamEnable_Type()
)
atmNteOamEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteOamEnable.setStatus("current")
_AtmNteDefaultLoopbackThreshold_Type = Integer32
_AtmNteDefaultLoopbackThreshold_Object = MibScalar
atmNteDefaultLoopbackThreshold = _AtmNteDefaultLoopbackThreshold_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 27),
    _AtmNteDefaultLoopbackThreshold_Type()
)
atmNteDefaultLoopbackThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteDefaultLoopbackThreshold.setStatus("current")
_AtmNteMaxBurstSize_Type = Integer32
_AtmNteMaxBurstSize_Object = MibScalar
atmNteMaxBurstSize = _AtmNteMaxBurstSize_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 28),
    _AtmNteMaxBurstSize_Type()
)
atmNteMaxBurstSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteMaxBurstSize.setStatus("current")
_AtmNteGranularityFactor_Type = Integer32
_AtmNteGranularityFactor_Object = MibScalar
atmNteGranularityFactor = _AtmNteGranularityFactor_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 29),
    _AtmNteGranularityFactor_Type()
)
atmNteGranularityFactor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteGranularityFactor.setStatus("current")
_AtmNteTotalInputRate_Type = Integer32
_AtmNteTotalInputRate_Object = MibScalar
atmNteTotalInputRate = _AtmNteTotalInputRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 30),
    _AtmNteTotalInputRate_Type()
)
atmNteTotalInputRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteTotalInputRate.setStatus("current")
_AtmNteTotalOutputRate_Type = Integer32
_AtmNteTotalOutputRate_Object = MibScalar
atmNteTotalOutputRate = _AtmNteTotalOutputRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 31),
    _AtmNteTotalOutputRate_Type()
)
atmNteTotalOutputRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteTotalOutputRate.setStatus("current")
_AtmAlarmForwardingTable_Object = MibTable
atmAlarmForwardingTable = _AtmAlarmForwardingTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 32)
)
if mibBuilder.loadTexts:
    atmAlarmForwardingTable.setStatus("current")
_AtmAlarmForwardingEntry_Object = MibTableRow
atmAlarmForwardingEntry = _AtmAlarmForwardingEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 32, 1)
)
atmAlarmForwardingEntry.setIndexNames(
    (0, "RAD-MIB", "atmAlarmForwardingFailPort"),
    (0, "RAD-MIB", "atmAlarmForwardingToPort"),
)
if mibBuilder.loadTexts:
    atmAlarmForwardingEntry.setStatus("current")
_AtmAlarmForwardingFailPort_Type = Integer32
_AtmAlarmForwardingFailPort_Object = MibTableColumn
atmAlarmForwardingFailPort = _AtmAlarmForwardingFailPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 32, 1, 1),
    _AtmAlarmForwardingFailPort_Type()
)
atmAlarmForwardingFailPort.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    atmAlarmForwardingFailPort.setStatus("current")
_AtmAlarmForwardingToPort_Type = Integer32
_AtmAlarmForwardingToPort_Object = MibTableColumn
atmAlarmForwardingToPort = _AtmAlarmForwardingToPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 32, 1, 2),
    _AtmAlarmForwardingToPort_Type()
)
atmAlarmForwardingToPort.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    atmAlarmForwardingToPort.setStatus("current")
_AtmAlarmForwardingRowStatus_Type = RowStatus
_AtmAlarmForwardingRowStatus_Object = MibTableColumn
atmAlarmForwardingRowStatus = _AtmAlarmForwardingRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 32, 1, 3),
    _AtmAlarmForwardingRowStatus_Type()
)
atmAlarmForwardingRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmAlarmForwardingRowStatus.setStatus("current")


class _AtmAlarmForwardingFailureLevel_Type(Bits):
    """Custom type atmAlarmForwardingFailureLevel based on Bits"""
    namedValues = NamedValues(
        *(("atm", 1),
          ("physical", 0))
    )

_AtmAlarmForwardingFailureLevel_Type.__name__ = "Bits"
_AtmAlarmForwardingFailureLevel_Object = MibTableColumn
atmAlarmForwardingFailureLevel = _AtmAlarmForwardingFailureLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 32, 1, 4),
    _AtmAlarmForwardingFailureLevel_Type()
)
atmAlarmForwardingFailureLevel.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmAlarmForwardingFailureLevel.setStatus("current")


class _AtmAlarmForwardingRecoveryMode_Type(Integer32):
    """Custom type atmAlarmForwardingRecoveryMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("automatic", 2),
          ("manual", 1))
    )


_AtmAlarmForwardingRecoveryMode_Type.__name__ = "Integer32"
_AtmAlarmForwardingRecoveryMode_Object = MibTableColumn
atmAlarmForwardingRecoveryMode = _AtmAlarmForwardingRecoveryMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 32, 1, 5),
    _AtmAlarmForwardingRecoveryMode_Type()
)
atmAlarmForwardingRecoveryMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmAlarmForwardingRecoveryMode.setStatus("current")


class _AtmAlarmForwardingRecoveryCommand_Type(Integer32):
    """Custom type atmAlarmForwardingRecoveryCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AtmAlarmForwardingRecoveryCommand_Type.__name__ = "Integer32"
_AtmAlarmForwardingRecoveryCommand_Object = MibTableColumn
atmAlarmForwardingRecoveryCommand = _AtmAlarmForwardingRecoveryCommand_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 32, 1, 6),
    _AtmAlarmForwardingRecoveryCommand_Type()
)
atmAlarmForwardingRecoveryCommand.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmAlarmForwardingRecoveryCommand.setStatus("current")
_AtmAlarmForwardingTimeFilterWindow_Type = Unsigned32
_AtmAlarmForwardingTimeFilterWindow_Object = MibTableColumn
atmAlarmForwardingTimeFilterWindow = _AtmAlarmForwardingTimeFilterWindow_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 32, 1, 7),
    _AtmAlarmForwardingTimeFilterWindow_Type()
)
atmAlarmForwardingTimeFilterWindow.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmAlarmForwardingTimeFilterWindow.setStatus("current")
_AtmSysConfigCellTest_ObjectIdentity = ObjectIdentity
atmSysConfigCellTest = _AtmSysConfigCellTest_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 33)
)
_AtmSysConfigCellTestPort_Type = InterfaceIndex
_AtmSysConfigCellTestPort_Object = MibScalar
atmSysConfigCellTestPort = _AtmSysConfigCellTestPort_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 33, 1),
    _AtmSysConfigCellTestPort_Type()
)
atmSysConfigCellTestPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmSysConfigCellTestPort.setStatus("current")
_AtmSysConfigCellTestVpi_Type = Integer32
_AtmSysConfigCellTestVpi_Object = MibScalar
atmSysConfigCellTestVpi = _AtmSysConfigCellTestVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 33, 2),
    _AtmSysConfigCellTestVpi_Type()
)
atmSysConfigCellTestVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmSysConfigCellTestVpi.setStatus("current")
_AtmSysConfigCellTestVci_Type = Integer32
_AtmSysConfigCellTestVci_Object = MibScalar
atmSysConfigCellTestVci = _AtmSysConfigCellTestVci_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 33, 3),
    _AtmSysConfigCellTestVci_Type()
)
atmSysConfigCellTestVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmSysConfigCellTestVci.setStatus("current")


class _AtmSysConfigCellTestPti_Type(Integer32):
    """Custom type atmSysConfigCellTestPti based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("oamEndToEnd", 3),
          ("oamSegment", 2),
          ("user", 1))
    )


_AtmSysConfigCellTestPti_Type.__name__ = "Integer32"
_AtmSysConfigCellTestPti_Object = MibScalar
atmSysConfigCellTestPti = _AtmSysConfigCellTestPti_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 33, 4),
    _AtmSysConfigCellTestPti_Type()
)
atmSysConfigCellTestPti.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmSysConfigCellTestPti.setStatus("current")


class _AtmSysConfigCellTestClp_Type(Integer32):
    """Custom type atmSysConfigCellTestClp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clp0", 1),
          ("clp1", 2))
    )


_AtmSysConfigCellTestClp_Type.__name__ = "Integer32"
_AtmSysConfigCellTestClp_Object = MibScalar
atmSysConfigCellTestClp = _AtmSysConfigCellTestClp_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 33, 5),
    _AtmSysConfigCellTestClp_Type()
)
atmSysConfigCellTestClp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmSysConfigCellTestClp.setStatus("current")


class _AtmSysConfigCellTestOamType_Type(Integer32):
    """Custom type atmSysConfigCellTestOamType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ais", 1),
          ("cc", 3),
          ("lb", 4),
          ("rdi", 2))
    )


_AtmSysConfigCellTestOamType_Type.__name__ = "Integer32"
_AtmSysConfigCellTestOamType_Object = MibScalar
atmSysConfigCellTestOamType = _AtmSysConfigCellTestOamType_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 33, 6),
    _AtmSysConfigCellTestOamType_Type()
)
atmSysConfigCellTestOamType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmSysConfigCellTestOamType.setStatus("current")


class _AtmSysConfigCellTestPayload_Type(OctetString):
    """Custom type atmSysConfigCellTestPayload based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_AtmSysConfigCellTestPayload_Type.__name__ = "OctetString"
_AtmSysConfigCellTestPayload_Object = MibScalar
atmSysConfigCellTestPayload = _AtmSysConfigCellTestPayload_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 33, 7),
    _AtmSysConfigCellTestPayload_Type()
)
atmSysConfigCellTestPayload.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmSysConfigCellTestPayload.setStatus("current")


class _AtmSysConfigCellTestQuantity_Type(Integer32):
    """Custom type atmSysConfigCellTestQuantity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10000),
    )


_AtmSysConfigCellTestQuantity_Type.__name__ = "Integer32"
_AtmSysConfigCellTestQuantity_Object = MibScalar
atmSysConfigCellTestQuantity = _AtmSysConfigCellTestQuantity_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 33, 8),
    _AtmSysConfigCellTestQuantity_Type()
)
atmSysConfigCellTestQuantity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmSysConfigCellTestQuantity.setStatus("current")


class _AtmSysConfigCellTestSendCmd_Type(Integer32):
    """Custom type atmSysConfigCellTestSendCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("send", 3))
    )


_AtmSysConfigCellTestSendCmd_Type.__name__ = "Integer32"
_AtmSysConfigCellTestSendCmd_Object = MibScalar
atmSysConfigCellTestSendCmd = _AtmSysConfigCellTestSendCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 33, 9),
    _AtmSysConfigCellTestSendCmd_Type()
)
atmSysConfigCellTestSendCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmSysConfigCellTestSendCmd.setStatus("current")
_AtmVpCrossConnectExtenTable_Object = MibTable
atmVpCrossConnectExtenTable = _AtmVpCrossConnectExtenTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 34)
)
if mibBuilder.loadTexts:
    atmVpCrossConnectExtenTable.setStatus("current")
_AtmVpCrossConnectExtenEntry_Object = MibTableRow
atmVpCrossConnectExtenEntry = _AtmVpCrossConnectExtenEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 34, 1)
)
if mibBuilder.loadTexts:
    atmVpCrossConnectExtenEntry.setStatus("current")


class _AtmVpCrossConnectName_Type(SnmpAdminString):
    """Custom type atmVpCrossConnectName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_AtmVpCrossConnectName_Type.__name__ = "SnmpAdminString"
_AtmVpCrossConnectName_Object = MibTableColumn
atmVpCrossConnectName = _AtmVpCrossConnectName_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 34, 1, 1),
    _AtmVpCrossConnectName_Type()
)
atmVpCrossConnectName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmVpCrossConnectName.setStatus("current")
_AtmVcCrossConnectExtenTable_Object = MibTable
atmVcCrossConnectExtenTable = _AtmVcCrossConnectExtenTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 35)
)
if mibBuilder.loadTexts:
    atmVcCrossConnectExtenTable.setStatus("current")
_AtmVcCrossConnectExtenEntry_Object = MibTableRow
atmVcCrossConnectExtenEntry = _AtmVcCrossConnectExtenEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 35, 1)
)
if mibBuilder.loadTexts:
    atmVcCrossConnectExtenEntry.setStatus("current")


class _AtmVcCrossConnectName_Type(SnmpAdminString):
    """Custom type atmVcCrossConnectName based on SnmpAdminString"""
    subtypeSpec = SnmpAdminString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 64),
    )


_AtmVcCrossConnectName_Type.__name__ = "SnmpAdminString"
_AtmVcCrossConnectName_Object = MibTableColumn
atmVcCrossConnectName = _AtmVcCrossConnectName_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 35, 1, 1),
    _AtmVcCrossConnectName_Type()
)
atmVcCrossConnectName.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmVcCrossConnectName.setStatus("current")


class _AtmNteQosMode_Type(Integer32):
    """Custom type atmNteQosMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("multipleVc", 2),
          ("singleVc", 3))
    )


_AtmNteQosMode_Type.__name__ = "Integer32"
_AtmNteQosMode_Object = MibScalar
atmNteQosMode = _AtmNteQosMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 37),
    _AtmNteQosMode_Type()
)
atmNteQosMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteQosMode.setStatus("current")
_AtmTrafficDescrParamXTable_Object = MibTable
atmTrafficDescrParamXTable = _AtmTrafficDescrParamXTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 38)
)
if mibBuilder.loadTexts:
    atmTrafficDescrParamXTable.setStatus("current")
_AtmTrafficDescrParamXEntry_Object = MibTableRow
atmTrafficDescrParamXEntry = _AtmTrafficDescrParamXEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 38, 1)
)
if mibBuilder.loadTexts:
    atmTrafficDescrParamXEntry.setStatus("current")


class _AtmTrafficDescrParamMode_Type(Integer32):
    """Custom type atmTrafficDescrParamMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("policing", 3),
          ("scheduling", 1),
          ("schedulingAndShaping", 2))
    )


_AtmTrafficDescrParamMode_Type.__name__ = "Integer32"
_AtmTrafficDescrParamMode_Object = MibTableColumn
atmTrafficDescrParamMode = _AtmTrafficDescrParamMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 1, 38, 1, 1),
    _AtmTrafficDescrParamMode_Type()
)
atmTrafficDescrParamMode.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmTrafficDescrParamMode.setStatus("current")
_AtmNteSysInfo_ObjectIdentity = ObjectIdentity
atmNteSysInfo = _AtmNteSysInfo_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2)
)
_AtmNteIdTable_Object = MibTable
atmNteIdTable = _AtmNteIdTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 1)
)
if mibBuilder.loadTexts:
    atmNteIdTable.setStatus("current")
_AtmNteIdEntry_Object = MibTableRow
atmNteIdEntry = _AtmNteIdEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 1, 1)
)
atmNteIdEntry.setIndexNames(
    (0, "RAD-MIB", "atmNteIdIndex"),
)
if mibBuilder.loadTexts:
    atmNteIdEntry.setStatus("current")
_AtmNteIdIndex_Type = Integer32
_AtmNteIdIndex_Object = MibTableColumn
atmNteIdIndex = _AtmNteIdIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 1, 1, 1),
    _AtmNteIdIndex_Type()
)
atmNteIdIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteIdIndex.setStatus("current")
_AtmNteUnitId_Type = Integer32
_AtmNteUnitId_Object = MibTableColumn
atmNteUnitId = _AtmNteUnitId_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 1, 1, 2),
    _AtmNteUnitId_Type()
)
atmNteUnitId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteUnitId.setStatus("current")
_AtmNteUnitVersion_Type = DisplayString
_AtmNteUnitVersion_Object = MibTableColumn
atmNteUnitVersion = _AtmNteUnitVersion_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 1, 1, 3),
    _AtmNteUnitVersion_Type()
)
atmNteUnitVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteUnitVersion.setStatus("current")


class _AtmNteCardType_Type(Integer32):
    """Custom type atmNteCardType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              58,
              59,
              60,
              61,
              62,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85,
              86,
              87,
              88,
              89,
              90,
              91,
              92,
              93,
              94,
              95,
              96,
              97,
              98,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              123,
              124,
              125,
              126,
              127,
              128,
              129,
              130,
              131,
              132,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              147,
              148,
              149,
              150,
              151,
              152,
              153,
              154,
              155,
              156,
              157,
              158,
              159,
              249,
              250,
              251,
              252,
              253,
              254,
              255)
        )
    )
    namedValues = NamedValues(
        *(("channelizedSts1", 152),
          ("channelizedT3", 121),
          ("control", 252),
          ("cxBncR155", 6),
          ("e1", 9),
          ("e14Ces", 28),
          ("e14CesBalNg", 141),
          ("e14CesRj45", 29),
          ("e14CesRj45Unbal", 106),
          ("e14CesUnbalNg", 140),
          ("e14ImaBnc", 45),
          ("e14ImaBncCfgMode", 94),
          ("e14ImaRj45", 44),
          ("e14ImaRj45CfgMode", 93),
          ("e14ImaUniBalNg", 147),
          ("e14ImaUniUnbalNg", 146),
          ("e18Ces", 59),
          ("e18CesBalNg", 138),
          ("e18CesRj45", 60),
          ("e18CesUnbalNg", 137),
          ("e18ImaBnc", 87),
          ("e18ImaRj45", 88),
          ("e18ImaUniBalNg", 144),
          ("e18ImaUniUnbalNg", 143),
          ("e1Bnc", 36),
          ("e1CesBal", 150),
          ("e1CesBnc", 26),
          ("e1CesRj45", 25),
          ("e1CesUnbal", 149),
          ("e1FrHdlc", 118),
          ("e1FrHdlcUnbal", 119),
          ("e1Ltu", 10),
          ("e1Rj45", 35),
          ("e3", 7),
          ("empty", 255),
          ("eth", 21),
          ("ethE14CesBnc", 37),
          ("ethE14CesRj45", 38),
          ("ethE1CesBnc", 22),
          ("ethE1CesRj45", 23),
          ("ethE3CesBnc", 47),
          ("ethT14CesRj45", 39),
          ("ethT1CesRj45", 24),
          ("ethT3CesBnc", 48),
          ("fEthMmD", 105),
          ("fEthSmD", 104),
          ("fEthUtpD", 103),
          ("fan", 253),
          ("fastEthUtp", 158),
          ("fc13lE3", 14),
          ("fc13lR155", 11),
          ("fc13lR155D", 82),
          ("fc13lR155R", 98),
          ("fc13lR155n", 111),
          ("fc13lT3", 17),
          ("fc13lhE3", 15),
          ("fc13lhR155", 12),
          ("fc13lhR155D", 85),
          ("fc13lhR155R", 101),
          ("fc13lhR155n", 112),
          ("fc13lhT3", 18),
          ("fc15lhE3", 16),
          ("fc15lhR155", 13),
          ("fc15lhR155D", 122),
          ("fc15lhR155R", 127),
          ("fc15lhR155n", 113),
          ("fc15lhT3", 19),
          ("fourStm1oc3SingleGbe", 159),
          ("fr1Port", 78),
          ("fr4Port", 76),
          ("gigabitEthSfp", 157),
          ("gigabitEthUtp", 156),
          ("hdlc1Port", 79),
          ("hdlc1portHssi", 40),
          ("hdlc4port", 31),
          ("hdlcE14CesBnc", 32),
          ("hdlcE14CesRj45", 33),
          ("hdlcHssiE14CesBnc", 41),
          ("hdlcHssiE14CesRj45", 42),
          ("hdlcHssiT14CesRj45", 43),
          ("hdlcT14CesRj45", 34),
          ("lanLc13l", 116),
          ("lanLc13lE", 91),
          ("lanLc13m", 117),
          ("lanLc13mE", 92),
          ("lanUtp", 115),
          ("lanUtpE", 90),
          ("main", 251),
          ("main8Atm155TwoEth", 249),
          ("mainChannelized155", 250),
          ("notApplicable", 1),
          ("sc13lR155", 52),
          ("sc13lR155D", 81),
          ("sc13lR155R", 97),
          ("sc13lR155n", 108),
          ("sc13lR622", 73),
          ("sc13lhR155", 54),
          ("sc13lhR155D", 84),
          ("sc13lhR155R", 100),
          ("sc13lhR155n", 109),
          ("sc13lhR622", 74),
          ("sc13lhjR155", 57),
          ("sc13ljR155", 56),
          ("sc13mR155", 2),
          ("sc13mR155D", 80),
          ("sc13mR155R", 96),
          ("sc13mR155n", 107),
          ("sc13mR622", 62),
          ("sc13sR155", 51),
          ("sc15lhR155", 55),
          ("sc15lhR155D", 123),
          ("sc15lhR155R", 128),
          ("sc15lhR155n", 110),
          ("sc15lhR622", 75),
          ("sc15lhjR155", 58),
          ("smSf1R155", 49),
          ("smSf1R155D", 124),
          ("smSf1R155R", 129),
          ("smSf1R155n", 133),
          ("smSf2R155", 50),
          ("smSf2R155D", 125),
          ("smSf2R155R", 130),
          ("smSf2R155n", 134),
          ("smSf3R155D", 126),
          ("smSf3R155R", 131),
          ("smSf3R155n", 135),
          ("st13lR155", 4),
          ("st13lR155D", 83),
          ("st13lR155R", 99),
          ("st13lR155n", 114),
          ("st13lhR155", 154),
          ("st13lhR155D", 86),
          ("st13lhR155R", 102),
          ("st13lhR155n", 132),
          ("st13mR155", 153),
          ("st13sR155", 3),
          ("st15lhR155", 155),
          ("switchedLan", 151),
          ("t1", 20),
          ("t14CesNg", 139),
          ("t14CesRj45", 30),
          ("t14ImaRj45", 46),
          ("t14ImaRj45CfgMode", 95),
          ("t14ImaUniNg", 145),
          ("t18CesNg", 136),
          ("t18CesRj45", 61),
          ("t18ImaRj45", 89),
          ("t18ImaUniNg", 142),
          ("t1Ces", 148),
          ("t1CesRj45", 27),
          ("t1FrHdlc", 120),
          ("t3", 8),
          ("t3j", 77),
          ("unknown", 254),
          ("utp25", 53),
          ("utpR155", 5))
    )


_AtmNteCardType_Type.__name__ = "Integer32"
_AtmNteCardType_Object = MibTableColumn
atmNteCardType = _AtmNteCardType_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 1, 1, 4),
    _AtmNteCardType_Type()
)
atmNteCardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteCardType.setStatus("current")


class _AtmNteCardStatus_Type(Integer32):
    """Custom type atmNteCardStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("active", 3),
          ("empty", 5),
          ("inProgress", 4),
          ("notActive", 2),
          ("notApplicable", 1))
    )


_AtmNteCardStatus_Type.__name__ = "Integer32"
_AtmNteCardStatus_Object = MibTableColumn
atmNteCardStatus = _AtmNteCardStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 1, 1, 5),
    _AtmNteCardStatus_Type()
)
atmNteCardStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteCardStatus.setStatus("current")


class _AtmNteCardCmd_Type(Integer32):
    """Custom type atmNteCardCmd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("activate", 4),
          ("deactivate", 3),
          ("deleteConfig", 2),
          ("notApplicable", 1))
    )


_AtmNteCardCmd_Type.__name__ = "Integer32"
_AtmNteCardCmd_Object = MibTableColumn
atmNteCardCmd = _AtmNteCardCmd_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 1, 1, 6),
    _AtmNteCardCmd_Type()
)
atmNteCardCmd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteCardCmd.setStatus("current")


class _AtmNteProgCardType_Type(Integer32):
    """Custom type atmNteProgCardType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(159,
              249,
              250,
              251,
              252,
              253,
              255,
              1001,
              1002,
              1003)
        )
    )
    namedValues = NamedValues(
        *(("atm155", 1001),
          ("channelized155", 1003),
          ("control", 252),
          ("empty", 255),
          ("eth", 1002),
          ("fan", 253),
          ("fourStm1oc3SingleGbe", 159),
          ("main", 251),
          ("main8Atm155TwoEth", 249),
          ("mainChannelized155", 250))
    )


_AtmNteProgCardType_Type.__name__ = "Integer32"
_AtmNteProgCardType_Object = MibTableColumn
atmNteProgCardType = _AtmNteProgCardType_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 1, 1, 7),
    _AtmNteProgCardType_Type()
)
atmNteProgCardType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteProgCardType.setStatus("current")
_AtmSysPSunits_Type = Integer32
_AtmSysPSunits_Object = MibScalar
atmSysPSunits = _AtmSysPSunits_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 2),
    _AtmSysPSunits_Type()
)
atmSysPSunits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmSysPSunits.setStatus("current")


class _AtmSysPSunitsInUse_Type(Integer32):
    """Custom type atmSysPSunitsInUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ps1", 2),
          ("ps2", 3))
    )


_AtmSysPSunitsInUse_Type.__name__ = "Integer32"
_AtmSysPSunitsInUse_Object = MibScalar
atmSysPSunitsInUse = _AtmSysPSunitsInUse_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 3),
    _AtmSysPSunitsInUse_Type()
)
atmSysPSunitsInUse.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmSysPSunitsInUse.setStatus("current")
_AtmSysFanUnits_Type = Integer32
_AtmSysFanUnits_Object = MibScalar
atmSysFanUnits = _AtmSysFanUnits_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 4),
    _AtmSysFanUnits_Type()
)
atmSysFanUnits.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmSysFanUnits.setStatus("current")
_AtmSysNetPrts_Type = Integer32
_AtmSysNetPrts_Object = MibScalar
atmSysNetPrts = _AtmSysNetPrts_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 5),
    _AtmSysNetPrts_Type()
)
atmSysNetPrts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmSysNetPrts.setStatus("current")


class _AtmSysNetPrtInUse_Type(Integer32):
    """Custom type atmSysNetPrtInUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("trunk1", 2),
          ("trunk2", 3))
    )


_AtmSysNetPrtInUse_Type.__name__ = "Integer32"
_AtmSysNetPrtInUse_Object = MibScalar
atmSysNetPrtInUse = _AtmSysNetPrtInUse_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 6),
    _AtmSysNetPrtInUse_Type()
)
atmSysNetPrtInUse.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmSysNetPrtInUse.setStatus("current")


class _AtmNteBridgingMode_Type(Integer32):
    """Custom type atmNteBridgingMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("accessAndSwitching", 2),
          ("accessOnly", 1))
    )


_AtmNteBridgingMode_Type.__name__ = "Integer32"
_AtmNteBridgingMode_Object = MibScalar
atmNteBridgingMode = _AtmNteBridgingMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 7),
    _AtmNteBridgingMode_Type()
)
atmNteBridgingMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteBridgingMode.setStatus("current")
_AtmSysStats_ObjectIdentity = ObjectIdentity
atmSysStats = _AtmSysStats_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 8)
)
_AtmSysCurrentCdc_Type = Gauge32
_AtmSysCurrentCdc_Object = MibScalar
atmSysCurrentCdc = _AtmSysCurrentCdc_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 8, 1),
    _AtmSysCurrentCdc_Type()
)
atmSysCurrentCdc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmSysCurrentCdc.setStatus("current")
_AtmSysIntervalTable_Object = MibTable
atmSysIntervalTable = _AtmSysIntervalTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 8, 2)
)
if mibBuilder.loadTexts:
    atmSysIntervalTable.setStatus("current")
_AtmSysIntervalEntry_Object = MibTableRow
atmSysIntervalEntry = _AtmSysIntervalEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 8, 2, 1)
)
atmSysIntervalEntry.setIndexNames(
    (0, "RAD-MIB", "atmSysIntervalNumber"),
)
if mibBuilder.loadTexts:
    atmSysIntervalEntry.setStatus("current")


class _AtmSysIntervalNumber_Type(Integer32):
    """Custom type atmSysIntervalNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_AtmSysIntervalNumber_Type.__name__ = "Integer32"
_AtmSysIntervalNumber_Object = MibTableColumn
atmSysIntervalNumber = _AtmSysIntervalNumber_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 8, 2, 1, 1),
    _AtmSysIntervalNumber_Type()
)
atmSysIntervalNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmSysIntervalNumber.setStatus("current")
_AtmSysIntervalCdc_Type = Gauge32
_AtmSysIntervalCdc_Object = MibTableColumn
atmSysIntervalCdc = _AtmSysIntervalCdc_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 8, 2, 1, 2),
    _AtmSysIntervalCdc_Type()
)
atmSysIntervalCdc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmSysIntervalCdc.setStatus("current")


class _AtmNteEventType_Type(Integer32):
    """Custom type atmNteEventType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24)
        )
    )
    namedValues = NamedValues(
        *(("fan1Fail", 18),
          ("fan1Ok", 17),
          ("fan2Fail", 20),
          ("fan2Ok", 19),
          ("heatAlarmOff", 7),
          ("heatAlarmOn", 8),
          ("inputAlarm1Off", 9),
          ("inputAlarm1On", 10),
          ("inputAlarm2Off", 11),
          ("inputAlarm2On", 12),
          ("inputAlarm3Off", 13),
          ("inputAlarm3On", 14),
          ("inputAlarm4Off", 15),
          ("inputAlarm4On", 16),
          ("invalidLogin", 21),
          ("powerFailure", 23),
          ("ps1Active", 4),
          ("ps1NotActive", 3),
          ("ps2Active", 6),
          ("ps2NotActive", 5),
          ("validLogin", 22),
          ("writeToFlashFailure", 24))
    )


_AtmNteEventType_Type.__name__ = "Integer32"
_AtmNteEventType_Object = MibScalar
atmNteEventType = _AtmNteEventType_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 9),
    _AtmNteEventType_Type()
)
atmNteEventType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteEventType.setStatus("current")


class _AtmNteIntervalMaxNumber_Type(Integer32):
    """Custom type atmNteIntervalMaxNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_AtmNteIntervalMaxNumber_Type.__name__ = "Integer32"
_AtmNteIntervalMaxNumber_Object = MibScalar
atmNteIntervalMaxNumber = _AtmNteIntervalMaxNumber_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 10),
    _AtmNteIntervalMaxNumber_Type()
)
atmNteIntervalMaxNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteIntervalMaxNumber.setStatus("current")


class _AtmNteAlarmType_Type(Integer32):
    """Custom type atmNteAlarmType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("ais", 2),
          ("continuityLoss", 4),
          ("loopback", 5),
          ("notApplicable", 1),
          ("rdi", 3))
    )


_AtmNteAlarmType_Type.__name__ = "Integer32"
_AtmNteAlarmType_Object = MibScalar
atmNteAlarmType = _AtmNteAlarmType_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 11),
    _AtmNteAlarmType_Type()
)
atmNteAlarmType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteAlarmType.setStatus("current")


class _AtmNteLevel_Type(Integer32):
    """Custom type atmNteLevel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("vc", 3),
          ("vp", 2))
    )


_AtmNteLevel_Type.__name__ = "Integer32"
_AtmNteLevel_Object = MibScalar
atmNteLevel = _AtmNteLevel_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 12),
    _AtmNteLevel_Type()
)
atmNteLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteLevel.setStatus("current")
_AtmNteConnectionsNumber_Type = Integer32
_AtmNteConnectionsNumber_Object = MibScalar
atmNteConnectionsNumber = _AtmNteConnectionsNumber_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 13),
    _AtmNteConnectionsNumber_Type()
)
atmNteConnectionsNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteConnectionsNumber.setStatus("current")
_AtmNteTotalLb_Type = Integer32
_AtmNteTotalLb_Object = MibScalar
atmNteTotalLb = _AtmNteTotalLb_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 14),
    _AtmNteTotalLb_Type()
)
atmNteTotalLb.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteTotalLb.setStatus("current")
_AtmNteTotalCc_Type = Integer32
_AtmNteTotalCc_Object = MibScalar
atmNteTotalCc = _AtmNteTotalCc_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 15),
    _AtmNteTotalCc_Type()
)
atmNteTotalCc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteTotalCc.setStatus("current")
_AtmNteTotalPm_Type = Integer32
_AtmNteTotalPm_Object = MibScalar
atmNteTotalPm = _AtmNteTotalPm_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 1, 2, 16),
    _AtmNteTotalPm_Type()
)
atmNteTotalPm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteTotalPm.setStatus("current")
_AtmNtePrt_ObjectIdentity = ObjectIdentity
atmNtePrt = _AtmNtePrt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2)
)
_AtmNtePrtConfig_ObjectIdentity = ObjectIdentity
atmNtePrtConfig = _AtmNtePrtConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1)
)
_AtmNteConfIfTable_Object = MibTable
atmNteConfIfTable = _AtmNteConfIfTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 1)
)
if mibBuilder.loadTexts:
    atmNteConfIfTable.setStatus("current")
_AtmNteConfIfEntry_Object = MibTableRow
atmNteConfIfEntry = _AtmNteConfIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 1, 1)
)
atmNteConfIfEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    atmNteConfIfEntry.setStatus("current")


class _AtmConfIfTransmitClk_Type(Integer32):
    """Custom type atmConfIfTransmitClk based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("adaptive", 5),
          ("external", 3),
          ("internal", 2),
          ("loopback", 4))
    )


_AtmConfIfTransmitClk_Type.__name__ = "Integer32"
_AtmConfIfTransmitClk_Object = MibTableColumn
atmConfIfTransmitClk = _AtmConfIfTransmitClk_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 1, 1, 1),
    _AtmConfIfTransmitClk_Type()
)
atmConfIfTransmitClk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfIfTransmitClk.setStatus("current")


class _AtmConfIfLoopback_Type(Integer32):
    """Custom type atmConfIfLoopback based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disable", 4),
          ("external", 3),
          ("internal", 2))
    )


_AtmConfIfLoopback_Type.__name__ = "Integer32"
_AtmConfIfLoopback_Object = MibTableColumn
atmConfIfLoopback = _AtmConfIfLoopback_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 1, 1, 2),
    _AtmConfIfLoopback_Type()
)
atmConfIfLoopback.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfIfLoopback.setStatus("current")


class _AtmConfIfFrameType_Type(Integer32):
    """Custom type atmConfIfFrameType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("direct", 4),
          ("directNoScrmbling", 10),
          ("e3", 7),
          ("ethCrcNotTrans", 9),
          ("ethCrcTrans", 8),
          ("other", 1),
          ("plcpExternal", 6),
          ("plcpExternalNoScrmbling", 12),
          ("plcpInternal", 5),
          ("plcpInternalNoScrmbling", 11),
          ("sdh", 3),
          ("sonet", 2))
    )


_AtmConfIfFrameType_Type.__name__ = "Integer32"
_AtmConfIfFrameType_Object = MibTableColumn
atmConfIfFrameType = _AtmConfIfFrameType_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 1, 1, 3),
    _AtmConfIfFrameType_Type()
)
atmConfIfFrameType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfIfFrameType.setStatus("current")


class _AtmConfIfCardType_Type(Integer32):
    """Custom type atmConfIfCardType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19)
        )
    )
    namedValues = NamedValues(
        *(("cx-bnc-155", 6),
          ("e1", 9),
          ("e1-ltu", 10),
          ("e3", 7),
          ("fc13l-155", 11),
          ("fc13l-e3", 14),
          ("fc13l-t3", 17),
          ("fc13lh-155", 12),
          ("fc13lh-e3", 15),
          ("fc13lh-t3", 18),
          ("fc15lh-155", 13),
          ("fc15lh-e3", 16),
          ("fc15lh-t3", 19),
          ("notApplicable", 1),
          ("sc13m-155", 2),
          ("st13l-155", 4),
          ("st13s-155", 3),
          ("t3", 8),
          ("utp-155", 5))
    )


_AtmConfIfCardType_Type.__name__ = "Integer32"
_AtmConfIfCardType_Object = MibTableColumn
atmConfIfCardType = _AtmConfIfCardType_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 1, 1, 4),
    _AtmConfIfCardType_Type()
)
atmConfIfCardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmConfIfCardType.setStatus("deprecated")


class _AtmConfAtmIfVpiVciLimit_Type(Integer32):
    """Custom type atmConfAtmIfVpiVciLimit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bits15", 2),
          ("bits17", 3))
    )


_AtmConfAtmIfVpiVciLimit_Type.__name__ = "Integer32"
_AtmConfAtmIfVpiVciLimit_Object = MibTableColumn
atmConfAtmIfVpiVciLimit = _AtmConfAtmIfVpiVciLimit_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 1, 1, 5),
    _AtmConfAtmIfVpiVciLimit_Type()
)
atmConfAtmIfVpiVciLimit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmConfAtmIfVpiVciLimit.setStatus("current")


class _AtmConfIfHwFeatures_Type(Integer32):
    """Custom type atmConfIfHwFeatures based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_AtmConfIfHwFeatures_Type.__name__ = "Integer32"
_AtmConfIfHwFeatures_Object = MibTableColumn
atmConfIfHwFeatures = _AtmConfIfHwFeatures_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 1, 1, 6),
    _AtmConfIfHwFeatures_Type()
)
atmConfIfHwFeatures.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfIfHwFeatures.setStatus("current")
_AtmConfIfOutputRate_Type = Integer32
_AtmConfIfOutputRate_Object = MibTableColumn
atmConfIfOutputRate = _AtmConfIfOutputRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 1, 1, 7),
    _AtmConfIfOutputRate_Type()
)
atmConfIfOutputRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfIfOutputRate.setStatus("current")
_AtmConfIfInputRate_Type = Integer32
_AtmConfIfInputRate_Object = MibTableColumn
atmConfIfInputRate = _AtmConfIfInputRate_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 1, 1, 8),
    _AtmConfIfInputRate_Type()
)
atmConfIfInputRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfIfInputRate.setStatus("current")


class _AtmConfAlarmForwarding_Type(Integer32):
    """Custom type atmConfAlarmForwarding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 3))
    )


_AtmConfAlarmForwarding_Type.__name__ = "Integer32"
_AtmConfAlarmForwarding_Object = MibTableColumn
atmConfAlarmForwarding = _AtmConfAlarmForwarding_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 1, 1, 9),
    _AtmConfAlarmForwarding_Type()
)
atmConfAlarmForwarding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfAlarmForwarding.setStatus("current")
_AtmConfIfAllocatedBw_Type = Integer32
_AtmConfIfAllocatedBw_Object = MibTableColumn
atmConfIfAllocatedBw = _AtmConfIfAllocatedBw_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 1, 1, 10),
    _AtmConfIfAllocatedBw_Type()
)
atmConfIfAllocatedBw.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmConfIfAllocatedBw.setStatus("current")
_AtmConfIfLowerVpi_Type = Integer32
_AtmConfIfLowerVpi_Object = MibTableColumn
atmConfIfLowerVpi = _AtmConfIfLowerVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 1, 1, 11),
    _AtmConfIfLowerVpi_Type()
)
atmConfIfLowerVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfIfLowerVpi.setStatus("current")


class _AtmConfIfOamMode_Type(Integer32):
    """Custom type atmConfIfOamMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("endToEndTermination", 3),
          ("segmentTermination", 2))
    )


_AtmConfIfOamMode_Type.__name__ = "Integer32"
_AtmConfIfOamMode_Object = MibTableColumn
atmConfIfOamMode = _AtmConfIfOamMode_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 1, 1, 12),
    _AtmConfIfOamMode_Type()
)
atmConfIfOamMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfIfOamMode.setStatus("current")


class _AtmConfIfOamFailureInd_Type(Integer32):
    """Custom type atmConfIfOamFailureInd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("ais", 3),
          ("aisAndRdi", 5),
          ("disabled", 2),
          ("rdi", 4))
    )


_AtmConfIfOamFailureInd_Type.__name__ = "Integer32"
_AtmConfIfOamFailureInd_Object = MibTableColumn
atmConfIfOamFailureInd = _AtmConfIfOamFailureInd_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 1, 1, 13),
    _AtmConfIfOamFailureInd_Type()
)
atmConfIfOamFailureInd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfIfOamFailureInd.setStatus("current")
_AtmNteAlarmIfTable_Object = MibTable
atmNteAlarmIfTable = _AtmNteAlarmIfTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 2)
)
if mibBuilder.loadTexts:
    atmNteAlarmIfTable.setStatus("current")
_AtmNteAlarmIfEntry_Object = MibTableRow
atmNteAlarmIfEntry = _AtmNteAlarmIfEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 2, 1)
)
atmNteAlarmIfEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
)
if mibBuilder.loadTexts:
    atmNteAlarmIfEntry.setStatus("current")
_AtmInterfaceActiveAlarms_Type = Integer32
_AtmInterfaceActiveAlarms_Object = MibTableColumn
atmInterfaceActiveAlarms = _AtmInterfaceActiveAlarms_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 2, 1, 1),
    _AtmInterfaceActiveAlarms_Type()
)
atmInterfaceActiveAlarms.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmInterfaceActiveAlarms.setStatus("current")
_AtmThresholdSectionBIP_Type = Integer32
_AtmThresholdSectionBIP_Object = MibTableColumn
atmThresholdSectionBIP = _AtmThresholdSectionBIP_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 2, 1, 2),
    _AtmThresholdSectionBIP_Type()
)
atmThresholdSectionBIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmThresholdSectionBIP.setStatus("current")
_AtmThresholdLineBIP_Type = Integer32
_AtmThresholdLineBIP_Object = MibTableColumn
atmThresholdLineBIP = _AtmThresholdLineBIP_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 2, 1, 3),
    _AtmThresholdLineBIP_Type()
)
atmThresholdLineBIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmThresholdLineBIP.setStatus("current")
_AtmThresholdLineFEBE_Type = Integer32
_AtmThresholdLineFEBE_Object = MibTableColumn
atmThresholdLineFEBE = _AtmThresholdLineFEBE_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 2, 1, 4),
    _AtmThresholdLineFEBE_Type()
)
atmThresholdLineFEBE.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmThresholdLineFEBE.setStatus("current")
_AtmThresholdPathBIP_Type = Integer32
_AtmThresholdPathBIP_Object = MibTableColumn
atmThresholdPathBIP = _AtmThresholdPathBIP_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 2, 1, 5),
    _AtmThresholdPathBIP_Type()
)
atmThresholdPathBIP.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmThresholdPathBIP.setStatus("current")
_AtmThresholdPathFEBE_Type = Integer32
_AtmThresholdPathFEBE_Object = MibTableColumn
atmThresholdPathFEBE = _AtmThresholdPathFEBE_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 2, 1, 6),
    _AtmThresholdPathFEBE_Type()
)
atmThresholdPathFEBE.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmThresholdPathFEBE.setStatus("current")
_AtmThresholdErroredCells_Type = Integer32
_AtmThresholdErroredCells_Object = MibTableColumn
atmThresholdErroredCells = _AtmThresholdErroredCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 2, 1, 7),
    _AtmThresholdErroredCells_Type()
)
atmThresholdErroredCells.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmThresholdErroredCells.setStatus("current")
_AtmThresholdLostCells_Type = Integer32
_AtmThresholdLostCells_Object = MibTableColumn
atmThresholdLostCells = _AtmThresholdLostCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 2, 1, 8),
    _AtmThresholdLostCells_Type()
)
atmThresholdLostCells.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmThresholdLostCells.setStatus("current")
_AtmThresholdMisinsertedCells_Type = Integer32
_AtmThresholdMisinsertedCells_Object = MibTableColumn
atmThresholdMisinsertedCells = _AtmThresholdMisinsertedCells_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 2, 1, 9),
    _AtmThresholdMisinsertedCells_Type()
)
atmThresholdMisinsertedCells.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmThresholdMisinsertedCells.setStatus("current")


class _AtmInterfaceAlarmStatus_Type(Integer32):
    """Custom type atmInterfaceAlarmStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AtmInterfaceAlarmStatus_Type.__name__ = "Integer32"
_AtmInterfaceAlarmStatus_Object = MibTableColumn
atmInterfaceAlarmStatus = _AtmInterfaceAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 2, 1, 10),
    _AtmInterfaceAlarmStatus_Type()
)
atmInterfaceAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmInterfaceAlarmStatus.setStatus("current")
_AtmInterfaceMaskAlarms_Type = Integer32
_AtmInterfaceMaskAlarms_Object = MibTableColumn
atmInterfaceMaskAlarms = _AtmInterfaceMaskAlarms_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 2, 1, 11),
    _AtmInterfaceMaskAlarms_Type()
)
atmInterfaceMaskAlarms.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmInterfaceMaskAlarms.setStatus("current")
_AtmNteConfVpTable_Object = MibTable
atmNteConfVpTable = _AtmNteConfVpTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 3)
)
if mibBuilder.loadTexts:
    atmNteConfVpTable.setStatus("current")
_AtmNteConfVpEntry_Object = MibTableRow
atmNteConfVpEntry = _AtmNteConfVpEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 3, 1)
)
atmNteConfVpEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "ATM-MIB", "atmVplVpi"),
)
if mibBuilder.loadTexts:
    atmNteConfVpEntry.setStatus("current")


class _AtmConfVpPolicing_Type(Integer32):
    """Custom type atmConfVpPolicing based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("monitor", 3),
          ("none", 1),
          ("police", 2),
          ("policingAndShaping", 5),
          ("shaping", 4))
    )


_AtmConfVpPolicing_Type.__name__ = "Integer32"
_AtmConfVpPolicing_Object = MibTableColumn
atmConfVpPolicing = _AtmConfVpPolicing_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 3, 1, 1),
    _AtmConfVpPolicing_Type()
)
atmConfVpPolicing.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfVpPolicing.setStatus("current")


class _AtmConfVpCCAdminStatus_Type(Integer32):
    """Custom type atmConfVpCCAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("down", 3),
          ("listenToActivationCells", 6),
          ("originateActivationCells", 7),
          ("sink", 5),
          ("source", 4),
          ("up", 2))
    )


_AtmConfVpCCAdminStatus_Type.__name__ = "Integer32"
_AtmConfVpCCAdminStatus_Object = MibTableColumn
atmConfVpCCAdminStatus = _AtmConfVpCCAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 3, 1, 2),
    _AtmConfVpCCAdminStatus_Type()
)
atmConfVpCCAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfVpCCAdminStatus.setStatus("current")


class _AtmConfVpLoopbackAdminStatus_Type(Integer32):
    """Custom type atmConfVpLoopbackAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("down", 3),
          ("endToEnd", 6),
          ("endToEndLlid", 8),
          ("llid", 4),
          ("segment", 5),
          ("segmentLlid", 7),
          ("up", 2))
    )


_AtmConfVpLoopbackAdminStatus_Type.__name__ = "Integer32"
_AtmConfVpLoopbackAdminStatus_Object = MibTableColumn
atmConfVpLoopbackAdminStatus = _AtmConfVpLoopbackAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 3, 1, 3),
    _AtmConfVpLoopbackAdminStatus_Type()
)
atmConfVpLoopbackAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfVpLoopbackAdminStatus.setStatus("current")


class _AtmConfVpLoopbackSinkAddress_Type(OctetString):
    """Custom type atmConfVpLoopbackSinkAddress based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_AtmConfVpLoopbackSinkAddress_Type.__name__ = "OctetString"
_AtmConfVpLoopbackSinkAddress_Object = MibTableColumn
atmConfVpLoopbackSinkAddress = _AtmConfVpLoopbackSinkAddress_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 3, 1, 4),
    _AtmConfVpLoopbackSinkAddress_Type()
)
atmConfVpLoopbackSinkAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfVpLoopbackSinkAddress.setStatus("current")
_AtmConfVpCongestionControl_Type = OctetString
_AtmConfVpCongestionControl_Object = MibTableColumn
atmConfVpCongestionControl = _AtmConfVpCongestionControl_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 3, 1, 5),
    _AtmConfVpCongestionControl_Type()
)
atmConfVpCongestionControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfVpCongestionControl.setStatus("current")


class _AtmConfVpCCDirection_Type(Integer32):
    """Custom type atmConfVpCCDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("both", 2),
          ("sink", 5),
          ("source", 4))
    )


_AtmConfVpCCDirection_Type.__name__ = "Integer32"
_AtmConfVpCCDirection_Object = MibTableColumn
atmConfVpCCDirection = _AtmConfVpCCDirection_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 3, 1, 6),
    _AtmConfVpCCDirection_Type()
)
atmConfVpCCDirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfVpCCDirection.setStatus("current")
_AtmConfVpCreationTime_Type = DateAndTime
_AtmConfVpCreationTime_Object = MibTableColumn
atmConfVpCreationTime = _AtmConfVpCreationTime_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 3, 1, 7),
    _AtmConfVpCreationTime_Type()
)
atmConfVpCreationTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmConfVpCreationTime.setStatus("current")


class _AtmConfVpOamSupport_Type(Integer32):
    """Custom type atmConfVpOamSupport based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("endToEndTermination", 3),
          ("intermediate", 1),
          ("segmentTermination", 2))
    )


_AtmConfVpOamSupport_Type.__name__ = "Integer32"
_AtmConfVpOamSupport_Object = MibTableColumn
atmConfVpOamSupport = _AtmConfVpOamSupport_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 3, 1, 8),
    _AtmConfVpOamSupport_Type()
)
atmConfVpOamSupport.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfVpOamSupport.setStatus("current")


class _AtmConfVpCCOperStatus_Type(Integer32):
    """Custom type atmConfVpCCOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              4,
              5,
              8,
              9,
              10,
              11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("both", 8),
          ("conflict", 11),
          ("denied", 10),
          ("initial", 1),
          ("manual", 12),
          ("sink", 5),
          ("source", 4),
          ("timeout", 9))
    )


_AtmConfVpCCOperStatus_Type.__name__ = "Integer32"
_AtmConfVpCCOperStatus_Object = MibTableColumn
atmConfVpCCOperStatus = _AtmConfVpCCOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 3, 1, 9),
    _AtmConfVpCCOperStatus_Type()
)
atmConfVpCCOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmConfVpCCOperStatus.setStatus("current")


class _AtmConfVpLoopbackTraffic_Type(Integer32):
    """Custom type atmConfVpLoopbackTraffic based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 3))
    )


_AtmConfVpLoopbackTraffic_Type.__name__ = "Integer32"
_AtmConfVpLoopbackTraffic_Object = MibTableColumn
atmConfVpLoopbackTraffic = _AtmConfVpLoopbackTraffic_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 3, 1, 10),
    _AtmConfVpLoopbackTraffic_Type()
)
atmConfVpLoopbackTraffic.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfVpLoopbackTraffic.setStatus("current")


class _AtmConfVpLoopbackFailureInd_Type(Integer32):
    """Custom type atmConfVpLoopbackFailureInd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("endToEndAis", 6),
          ("endToEndAisAndRdi", 8),
          ("endToEndRdi", 7),
          ("segmentAis", 3),
          ("segmentAisAndRdi", 5),
          ("segmentRdi", 4))
    )


_AtmConfVpLoopbackFailureInd_Type.__name__ = "Integer32"
_AtmConfVpLoopbackFailureInd_Object = MibTableColumn
atmConfVpLoopbackFailureInd = _AtmConfVpLoopbackFailureInd_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 3, 1, 11),
    _AtmConfVpLoopbackFailureInd_Type()
)
atmConfVpLoopbackFailureInd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfVpLoopbackFailureInd.setStatus("current")
_AtmConfVpLoopbackFailureThreshold_Type = Integer32
_AtmConfVpLoopbackFailureThreshold_Object = MibTableColumn
atmConfVpLoopbackFailureThreshold = _AtmConfVpLoopbackFailureThreshold_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 3, 1, 12),
    _AtmConfVpLoopbackFailureThreshold_Type()
)
atmConfVpLoopbackFailureThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfVpLoopbackFailureThreshold.setStatus("current")


class _AtmConfVpOamDirection_Type(Integer32):
    """Custom type atmConfVpOamDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("downStream", 2),
          ("notApplicable", 1),
          ("upStream", 3))
    )


_AtmConfVpOamDirection_Type.__name__ = "Integer32"
_AtmConfVpOamDirection_Object = MibTableColumn
atmConfVpOamDirection = _AtmConfVpOamDirection_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 3, 1, 13),
    _AtmConfVpOamDirection_Type()
)
atmConfVpOamDirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfVpOamDirection.setStatus("current")
_AtmConfVpOamDescrIndex_Type = Integer32
_AtmConfVpOamDescrIndex_Object = MibTableColumn
atmConfVpOamDescrIndex = _AtmConfVpOamDescrIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 3, 1, 14),
    _AtmConfVpOamDescrIndex_Type()
)
atmConfVpOamDescrIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfVpOamDescrIndex.setStatus("current")


class _AtmConfVpConnected_Type(Integer32):
    """Custom type atmConfVpConnected based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("atm", 5),
          ("bridgePort", 3),
          ("ds0Bundle", 4),
          ("mng", 2),
          ("notConnected", 1),
          ("pw", 6))
    )


_AtmConfVpConnected_Type.__name__ = "Integer32"
_AtmConfVpConnected_Object = MibTableColumn
atmConfVpConnected = _AtmConfVpConnected_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 3, 1, 15),
    _AtmConfVpConnected_Type()
)
atmConfVpConnected.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmConfVpConnected.setStatus("current")
_AtmNteAlarmVpTable_Object = MibTable
atmNteAlarmVpTable = _AtmNteAlarmVpTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 5)
)
if mibBuilder.loadTexts:
    atmNteAlarmVpTable.setStatus("current")
_AtmNteAlarmVpEntry_Object = MibTableRow
atmNteAlarmVpEntry = _AtmNteAlarmVpEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 5, 1)
)
atmNteAlarmVpEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RAD-MIB", "atmNteVpAlarmVpi"),
)
if mibBuilder.loadTexts:
    atmNteAlarmVpEntry.setStatus("current")
_AtmNteVpAlarmVpi_Type = Integer32
_AtmNteVpAlarmVpi_Object = MibTableColumn
atmNteVpAlarmVpi = _AtmNteVpAlarmVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 5, 1, 1),
    _AtmNteVpAlarmVpi_Type()
)
atmNteVpAlarmVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteVpAlarmVpi.setStatus("current")
_AtmNteVpActiveAlarms_Type = Integer32
_AtmNteVpActiveAlarms_Object = MibTableColumn
atmNteVpActiveAlarms = _AtmNteVpActiveAlarms_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 5, 1, 2),
    _AtmNteVpActiveAlarms_Type()
)
atmNteVpActiveAlarms.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteVpActiveAlarms.setStatus("current")
_AtmNteAlarmVcTable_Object = MibTable
atmNteAlarmVcTable = _AtmNteAlarmVcTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 6)
)
if mibBuilder.loadTexts:
    atmNteAlarmVcTable.setStatus("current")
_AtmNteAlarmVcEntry_Object = MibTableRow
atmNteAlarmVcEntry = _AtmNteAlarmVcEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 6, 1)
)
atmNteAlarmVcEntry.setIndexNames(
    (0, "IF-MIB", "ifIndex"),
    (0, "RAD-MIB", "atmNteVcAlarmVpi"),
    (0, "RAD-MIB", "atmNteVcAlarmVci"),
)
if mibBuilder.loadTexts:
    atmNteAlarmVcEntry.setStatus("current")
_AtmNteVcAlarmVpi_Type = Integer32
_AtmNteVcAlarmVpi_Object = MibTableColumn
atmNteVcAlarmVpi = _AtmNteVcAlarmVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 6, 1, 1),
    _AtmNteVcAlarmVpi_Type()
)
atmNteVcAlarmVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteVcAlarmVpi.setStatus("current")
_AtmNteVcAlarmVci_Type = Integer32
_AtmNteVcAlarmVci_Object = MibTableColumn
atmNteVcAlarmVci = _AtmNteVcAlarmVci_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 6, 1, 2),
    _AtmNteVcAlarmVci_Type()
)
atmNteVcAlarmVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteVcAlarmVci.setStatus("current")
_AtmNteVcActiveAlarms_Type = Integer32
_AtmNteVcActiveAlarms_Object = MibTableColumn
atmNteVcActiveAlarms = _AtmNteVcActiveAlarms_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 1, 6, 1, 3),
    _AtmNteVcActiveAlarms_Type()
)
atmNteVcActiveAlarms.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmNteVcActiveAlarms.setStatus("current")
_AtmNteLoopback_ObjectIdentity = ObjectIdentity
atmNteLoopback = _AtmNteLoopback_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2)
)
_AtmLoopbackVpTable_Object = MibTable
atmLoopbackVpTable = _AtmLoopbackVpTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 1)
)
if mibBuilder.loadTexts:
    atmLoopbackVpTable.setStatus("current")
_AtmLoopbackVpEntry_Object = MibTableRow
atmLoopbackVpEntry = _AtmLoopbackVpEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 1, 1)
)
atmLoopbackVpEntry.setIndexNames(
    (0, "RAD-MIB", "atmLoopbackVpIfIndex"),
    (0, "RAD-MIB", "atmLoopbackVpVpi"),
)
if mibBuilder.loadTexts:
    atmLoopbackVpEntry.setStatus("current")
_AtmLoopbackVpIfIndex_Type = Integer32
_AtmLoopbackVpIfIndex_Object = MibTableColumn
atmLoopbackVpIfIndex = _AtmLoopbackVpIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 1, 1, 1),
    _AtmLoopbackVpIfIndex_Type()
)
atmLoopbackVpIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVpIfIndex.setStatus("current")
_AtmLoopbackVpVpi_Type = Integer32
_AtmLoopbackVpVpi_Object = MibTableColumn
atmLoopbackVpVpi = _AtmLoopbackVpVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 1, 1, 2),
    _AtmLoopbackVpVpi_Type()
)
atmLoopbackVpVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVpVpi.setStatus("current")


class _AtmLoopbackVpOperStatus_Type(Integer32):
    """Custom type atmLoopbackVpOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("endSuccessfully", 4),
          ("failed", 3),
          ("inProgress", 2),
          ("noActive", 1))
    )


_AtmLoopbackVpOperStatus_Type.__name__ = "Integer32"
_AtmLoopbackVpOperStatus_Object = MibTableColumn
atmLoopbackVpOperStatus = _AtmLoopbackVpOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 1, 1, 3),
    _AtmLoopbackVpOperStatus_Type()
)
atmLoopbackVpOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVpOperStatus.setStatus("current")
_AtmLoopbackVpCDV_Type = Integer32
_AtmLoopbackVpCDV_Object = MibTableColumn
atmLoopbackVpCDV = _AtmLoopbackVpCDV_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 1, 1, 4),
    _AtmLoopbackVpCDV_Type()
)
atmLoopbackVpCDV.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVpCDV.setStatus("current")
_AtmLoopbackVpAverageDelay_Type = Integer32
_AtmLoopbackVpAverageDelay_Object = MibTableColumn
atmLoopbackVpAverageDelay = _AtmLoopbackVpAverageDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 1, 1, 5),
    _AtmLoopbackVpAverageDelay_Type()
)
atmLoopbackVpAverageDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVpAverageDelay.setStatus("current")
_AtmLoopbackVpMaxDelay_Type = Integer32
_AtmLoopbackVpMaxDelay_Object = MibTableColumn
atmLoopbackVpMaxDelay = _AtmLoopbackVpMaxDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 1, 1, 6),
    _AtmLoopbackVpMaxDelay_Type()
)
atmLoopbackVpMaxDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVpMaxDelay.setStatus("current")
_AtmLoopbackVpMinDelay_Type = Integer32
_AtmLoopbackVpMinDelay_Object = MibTableColumn
atmLoopbackVpMinDelay = _AtmLoopbackVpMinDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 1, 1, 7),
    _AtmLoopbackVpMinDelay_Type()
)
atmLoopbackVpMinDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVpMinDelay.setStatus("current")
_AtmLoopbackVpErrSessions_Type = Integer32
_AtmLoopbackVpErrSessions_Object = MibTableColumn
atmLoopbackVpErrSessions = _AtmLoopbackVpErrSessions_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 1, 1, 8),
    _AtmLoopbackVpErrSessions_Type()
)
atmLoopbackVpErrSessions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVpErrSessions.setStatus("current")
_AtmLoopbackVcTable_Object = MibTable
atmLoopbackVcTable = _AtmLoopbackVcTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 2)
)
if mibBuilder.loadTexts:
    atmLoopbackVcTable.setStatus("current")
_AtmLoopbackVcEntry_Object = MibTableRow
atmLoopbackVcEntry = _AtmLoopbackVcEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 2, 1)
)
atmLoopbackVcEntry.setIndexNames(
    (0, "RAD-MIB", "atmLoopbackVcIfIndex"),
    (0, "RAD-MIB", "atmLoopbackVcVpi"),
    (0, "RAD-MIB", "atmLoopbackVcVci"),
)
if mibBuilder.loadTexts:
    atmLoopbackVcEntry.setStatus("current")
_AtmLoopbackVcIfIndex_Type = Integer32
_AtmLoopbackVcIfIndex_Object = MibTableColumn
atmLoopbackVcIfIndex = _AtmLoopbackVcIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 2, 1, 1),
    _AtmLoopbackVcIfIndex_Type()
)
atmLoopbackVcIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVcIfIndex.setStatus("current")
_AtmLoopbackVcVpi_Type = Integer32
_AtmLoopbackVcVpi_Object = MibTableColumn
atmLoopbackVcVpi = _AtmLoopbackVcVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 2, 1, 2),
    _AtmLoopbackVcVpi_Type()
)
atmLoopbackVcVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVcVpi.setStatus("current")
_AtmLoopbackVcVci_Type = Integer32
_AtmLoopbackVcVci_Object = MibTableColumn
atmLoopbackVcVci = _AtmLoopbackVcVci_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 2, 1, 3),
    _AtmLoopbackVcVci_Type()
)
atmLoopbackVcVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVcVci.setStatus("current")


class _AtmLoopbackVcOperStatus_Type(Integer32):
    """Custom type atmLoopbackVcOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("endSuccessfully", 4),
          ("failed", 3),
          ("inProgress", 2),
          ("noActive", 1))
    )


_AtmLoopbackVcOperStatus_Type.__name__ = "Integer32"
_AtmLoopbackVcOperStatus_Object = MibTableColumn
atmLoopbackVcOperStatus = _AtmLoopbackVcOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 2, 1, 4),
    _AtmLoopbackVcOperStatus_Type()
)
atmLoopbackVcOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVcOperStatus.setStatus("current")
_AtmLoopbackVcCDV_Type = Integer32
_AtmLoopbackVcCDV_Object = MibTableColumn
atmLoopbackVcCDV = _AtmLoopbackVcCDV_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 2, 1, 5),
    _AtmLoopbackVcCDV_Type()
)
atmLoopbackVcCDV.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVcCDV.setStatus("current")
_AtmLoopbackVcAverageDelay_Type = Integer32
_AtmLoopbackVcAverageDelay_Object = MibTableColumn
atmLoopbackVcAverageDelay = _AtmLoopbackVcAverageDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 2, 1, 6),
    _AtmLoopbackVcAverageDelay_Type()
)
atmLoopbackVcAverageDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVcAverageDelay.setStatus("current")
_AtmLoopbackVcMaxDelay_Type = Integer32
_AtmLoopbackVcMaxDelay_Object = MibTableColumn
atmLoopbackVcMaxDelay = _AtmLoopbackVcMaxDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 2, 1, 7),
    _AtmLoopbackVcMaxDelay_Type()
)
atmLoopbackVcMaxDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVcMaxDelay.setStatus("current")
_AtmLoopbackVcMinDelay_Type = Integer32
_AtmLoopbackVcMinDelay_Object = MibTableColumn
atmLoopbackVcMinDelay = _AtmLoopbackVcMinDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 2, 1, 8),
    _AtmLoopbackVcMinDelay_Type()
)
atmLoopbackVcMinDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVcMinDelay.setStatus("current")
_AtmLoopbackVcErrSessions_Type = Integer32
_AtmLoopbackVcErrSessions_Object = MibTableColumn
atmLoopbackVcErrSessions = _AtmLoopbackVcErrSessions_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 2, 1, 9),
    _AtmLoopbackVcErrSessions_Type()
)
atmLoopbackVcErrSessions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVcErrSessions.setStatus("current")
_AtmLoopbackVpIvlTable_Object = MibTable
atmLoopbackVpIvlTable = _AtmLoopbackVpIvlTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 3)
)
if mibBuilder.loadTexts:
    atmLoopbackVpIvlTable.setStatus("current")
_AtmLoopbackVpIvlEntry_Object = MibTableRow
atmLoopbackVpIvlEntry = _AtmLoopbackVpIvlEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 3, 1)
)
atmLoopbackVpIvlEntry.setIndexNames(
    (0, "RAD-MIB", "atmLoopbackVpIvlIfIndex"),
    (0, "RAD-MIB", "atmLoopbackVpIvlVpi"),
    (0, "RAD-MIB", "atmLoopbackVpIvlIvl"),
)
if mibBuilder.loadTexts:
    atmLoopbackVpIvlEntry.setStatus("current")
_AtmLoopbackVpIvlIfIndex_Type = Integer32
_AtmLoopbackVpIvlIfIndex_Object = MibTableColumn
atmLoopbackVpIvlIfIndex = _AtmLoopbackVpIvlIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 3, 1, 1),
    _AtmLoopbackVpIvlIfIndex_Type()
)
atmLoopbackVpIvlIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVpIvlIfIndex.setStatus("current")
_AtmLoopbackVpIvlVpi_Type = Integer32
_AtmLoopbackVpIvlVpi_Object = MibTableColumn
atmLoopbackVpIvlVpi = _AtmLoopbackVpIvlVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 3, 1, 2),
    _AtmLoopbackVpIvlVpi_Type()
)
atmLoopbackVpIvlVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVpIvlVpi.setStatus("current")


class _AtmLoopbackVpIvlIvl_Type(Integer32):
    """Custom type atmLoopbackVpIvlIvl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_AtmLoopbackVpIvlIvl_Type.__name__ = "Integer32"
_AtmLoopbackVpIvlIvl_Object = MibTableColumn
atmLoopbackVpIvlIvl = _AtmLoopbackVpIvlIvl_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 3, 1, 3),
    _AtmLoopbackVpIvlIvl_Type()
)
atmLoopbackVpIvlIvl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVpIvlIvl.setStatus("current")


class _AtmLoopbackVpIvlOperStatus_Type(Integer32):
    """Custom type atmLoopbackVpIvlOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("endSuccessfully", 4),
          ("failed", 3),
          ("inProgress", 2),
          ("noActive", 1))
    )


_AtmLoopbackVpIvlOperStatus_Type.__name__ = "Integer32"
_AtmLoopbackVpIvlOperStatus_Object = MibTableColumn
atmLoopbackVpIvlOperStatus = _AtmLoopbackVpIvlOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 3, 1, 4),
    _AtmLoopbackVpIvlOperStatus_Type()
)
atmLoopbackVpIvlOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVpIvlOperStatus.setStatus("current")
_AtmLoopbackVpIvlCDV_Type = Integer32
_AtmLoopbackVpIvlCDV_Object = MibTableColumn
atmLoopbackVpIvlCDV = _AtmLoopbackVpIvlCDV_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 3, 1, 5),
    _AtmLoopbackVpIvlCDV_Type()
)
atmLoopbackVpIvlCDV.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVpIvlCDV.setStatus("current")
_AtmLoopbackVpIvlAverageDelay_Type = Integer32
_AtmLoopbackVpIvlAverageDelay_Object = MibTableColumn
atmLoopbackVpIvlAverageDelay = _AtmLoopbackVpIvlAverageDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 3, 1, 6),
    _AtmLoopbackVpIvlAverageDelay_Type()
)
atmLoopbackVpIvlAverageDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVpIvlAverageDelay.setStatus("current")
_AtmLoopbackVpIvlMaxDelay_Type = Integer32
_AtmLoopbackVpIvlMaxDelay_Object = MibTableColumn
atmLoopbackVpIvlMaxDelay = _AtmLoopbackVpIvlMaxDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 3, 1, 7),
    _AtmLoopbackVpIvlMaxDelay_Type()
)
atmLoopbackVpIvlMaxDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVpIvlMaxDelay.setStatus("current")
_AtmLoopbackVpIvlMinDelay_Type = Integer32
_AtmLoopbackVpIvlMinDelay_Object = MibTableColumn
atmLoopbackVpIvlMinDelay = _AtmLoopbackVpIvlMinDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 3, 1, 8),
    _AtmLoopbackVpIvlMinDelay_Type()
)
atmLoopbackVpIvlMinDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVpIvlMinDelay.setStatus("current")
_AtmLoopbackVpIvlErrSessions_Type = Integer32
_AtmLoopbackVpIvlErrSessions_Object = MibTableColumn
atmLoopbackVpIvlErrSessions = _AtmLoopbackVpIvlErrSessions_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 3, 1, 9),
    _AtmLoopbackVpIvlErrSessions_Type()
)
atmLoopbackVpIvlErrSessions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVpIvlErrSessions.setStatus("current")
_AtmLoopbackVcIvlTable_Object = MibTable
atmLoopbackVcIvlTable = _AtmLoopbackVcIvlTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 4)
)
if mibBuilder.loadTexts:
    atmLoopbackVcIvlTable.setStatus("current")
_AtmLoopbackVcIvlEntry_Object = MibTableRow
atmLoopbackVcIvlEntry = _AtmLoopbackVcIvlEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 4, 1)
)
atmLoopbackVcIvlEntry.setIndexNames(
    (0, "RAD-MIB", "atmLoopbackVcIvlIfIndex"),
    (0, "RAD-MIB", "atmLoopbackVcIvlVpi"),
    (0, "RAD-MIB", "atmLoopbackVcIvlVci"),
    (0, "RAD-MIB", "atmLoopbackVcIvlIvl"),
)
if mibBuilder.loadTexts:
    atmLoopbackVcIvlEntry.setStatus("current")
_AtmLoopbackVcIvlIfIndex_Type = Integer32
_AtmLoopbackVcIvlIfIndex_Object = MibTableColumn
atmLoopbackVcIvlIfIndex = _AtmLoopbackVcIvlIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 4, 1, 1),
    _AtmLoopbackVcIvlIfIndex_Type()
)
atmLoopbackVcIvlIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVcIvlIfIndex.setStatus("current")
_AtmLoopbackVcIvlVpi_Type = Integer32
_AtmLoopbackVcIvlVpi_Object = MibTableColumn
atmLoopbackVcIvlVpi = _AtmLoopbackVcIvlVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 4, 1, 2),
    _AtmLoopbackVcIvlVpi_Type()
)
atmLoopbackVcIvlVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVcIvlVpi.setStatus("current")
_AtmLoopbackVcIvlVci_Type = Integer32
_AtmLoopbackVcIvlVci_Object = MibTableColumn
atmLoopbackVcIvlVci = _AtmLoopbackVcIvlVci_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 4, 1, 3),
    _AtmLoopbackVcIvlVci_Type()
)
atmLoopbackVcIvlVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVcIvlVci.setStatus("current")


class _AtmLoopbackVcIvlIvl_Type(Integer32):
    """Custom type atmLoopbackVcIvlIvl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_AtmLoopbackVcIvlIvl_Type.__name__ = "Integer32"
_AtmLoopbackVcIvlIvl_Object = MibTableColumn
atmLoopbackVcIvlIvl = _AtmLoopbackVcIvlIvl_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 4, 1, 4),
    _AtmLoopbackVcIvlIvl_Type()
)
atmLoopbackVcIvlIvl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVcIvlIvl.setStatus("current")


class _AtmLoopbackVcIvlOperStatus_Type(Integer32):
    """Custom type atmLoopbackVcIvlOperStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("endSuccessfully", 4),
          ("failed", 3),
          ("inProgress", 2),
          ("noActive", 1))
    )


_AtmLoopbackVcIvlOperStatus_Type.__name__ = "Integer32"
_AtmLoopbackVcIvlOperStatus_Object = MibTableColumn
atmLoopbackVcIvlOperStatus = _AtmLoopbackVcIvlOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 4, 1, 5),
    _AtmLoopbackVcIvlOperStatus_Type()
)
atmLoopbackVcIvlOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVcIvlOperStatus.setStatus("current")
_AtmLoopbackVcIvlCDV_Type = Integer32
_AtmLoopbackVcIvlCDV_Object = MibTableColumn
atmLoopbackVcIvlCDV = _AtmLoopbackVcIvlCDV_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 4, 1, 6),
    _AtmLoopbackVcIvlCDV_Type()
)
atmLoopbackVcIvlCDV.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVcIvlCDV.setStatus("current")
_AtmLoopbackVcIvlAverageDelay_Type = Integer32
_AtmLoopbackVcIvlAverageDelay_Object = MibTableColumn
atmLoopbackVcIvlAverageDelay = _AtmLoopbackVcIvlAverageDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 4, 1, 7),
    _AtmLoopbackVcIvlAverageDelay_Type()
)
atmLoopbackVcIvlAverageDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVcIvlAverageDelay.setStatus("current")
_AtmLoopbackVcIvlMaxDelay_Type = Integer32
_AtmLoopbackVcIvlMaxDelay_Object = MibTableColumn
atmLoopbackVcIvlMaxDelay = _AtmLoopbackVcIvlMaxDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 4, 1, 8),
    _AtmLoopbackVcIvlMaxDelay_Type()
)
atmLoopbackVcIvlMaxDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVcIvlMaxDelay.setStatus("current")
_AtmLoopbackVcIvlMinDelay_Type = Integer32
_AtmLoopbackVcIvlMinDelay_Object = MibTableColumn
atmLoopbackVcIvlMinDelay = _AtmLoopbackVcIvlMinDelay_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 4, 1, 9),
    _AtmLoopbackVcIvlMinDelay_Type()
)
atmLoopbackVcIvlMinDelay.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVcIvlMinDelay.setStatus("current")
_AtmLoopbackVcIvlErrSessions_Type = Integer32
_AtmLoopbackVcIvlErrSessions_Object = MibTableColumn
atmLoopbackVcIvlErrSessions = _AtmLoopbackVcIvlErrSessions_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 2, 4, 1, 10),
    _AtmLoopbackVcIvlErrSessions_Type()
)
atmLoopbackVcIvlErrSessions.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmLoopbackVcIvlErrSessions.setStatus("current")
_AtmNtePM_ObjectIdentity = ObjectIdentity
atmNtePM = _AtmNtePM_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 3)
)
_AtmVpPmTable_Object = MibTable
atmVpPmTable = _AtmVpPmTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 3, 1)
)
if mibBuilder.loadTexts:
    atmVpPmTable.setStatus("current")
_AtmVpPmEntry_Object = MibTableRow
atmVpPmEntry = _AtmVpPmEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 3, 1, 1)
)
atmVpPmEntry.setIndexNames(
    (0, "RAD-MIB", "atmVpPmIfIndex"),
    (0, "RAD-MIB", "atmVpPmVpi"),
)
if mibBuilder.loadTexts:
    atmVpPmEntry.setStatus("current")
_AtmVpPmIfIndex_Type = Integer32
_AtmVpPmIfIndex_Object = MibTableColumn
atmVpPmIfIndex = _AtmVpPmIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 3, 1, 1, 1),
    _AtmVpPmIfIndex_Type()
)
atmVpPmIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPmIfIndex.setStatus("current")
_AtmVpPmVpi_Type = Integer32
_AtmVpPmVpi_Object = MibTableColumn
atmVpPmVpi = _AtmVpPmVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 3, 1, 1, 2),
    _AtmVpPmVpi_Type()
)
atmVpPmVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVpPmVpi.setStatus("current")


class _AtmVpPmAdminStatus_Type(Integer32):
    """Custom type atmVpPmAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("down", 3),
          ("listenToActivationCells", 4),
          ("originateActivationCells", 5),
          ("up", 2))
    )


_AtmVpPmAdminStatus_Type.__name__ = "Integer32"
_AtmVpPmAdminStatus_Object = MibTableColumn
atmVpPmAdminStatus = _AtmVpPmAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 3, 1, 1, 3),
    _AtmVpPmAdminStatus_Type()
)
atmVpPmAdminStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmVpPmAdminStatus.setStatus("current")


class _AtmVpPmDirection_Type(Integer32):
    """Custom type atmVpPmDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bidirectional", 4),
          ("destination", 3),
          ("source", 2))
    )


_AtmVpPmDirection_Type.__name__ = "Integer32"
_AtmVpPmDirection_Object = MibTableColumn
atmVpPmDirection = _AtmVpPmDirection_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 3, 1, 1, 4),
    _AtmVpPmDirection_Type()
)
atmVpPmDirection.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmVpPmDirection.setStatus("current")
_AtmVpPmBlockSize_Type = Integer32
_AtmVpPmBlockSize_Object = MibTableColumn
atmVpPmBlockSize = _AtmVpPmBlockSize_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 3, 1, 1, 5),
    _AtmVpPmBlockSize_Type()
)
atmVpPmBlockSize.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmVpPmBlockSize.setStatus("current")
_AtmVpPmRowStatus_Type = RowStatus
_AtmVpPmRowStatus_Object = MibTableColumn
atmVpPmRowStatus = _AtmVpPmRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 3, 1, 1, 6),
    _AtmVpPmRowStatus_Type()
)
atmVpPmRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmVpPmRowStatus.setStatus("current")


class _AtmVpPmSink_Type(Integer32):
    """Custom type atmVpPmSink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fwd", 2),
          ("fwdAndBwdReport", 3),
          ("off", 1))
    )


_AtmVpPmSink_Type.__name__ = "Integer32"
_AtmVpPmSink_Object = MibTableColumn
atmVpPmSink = _AtmVpPmSink_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 3, 1, 1, 7),
    _AtmVpPmSink_Type()
)
atmVpPmSink.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmVpPmSink.setStatus("current")


class _AtmVpPmSource_Type(Integer32):
    """Custom type atmVpPmSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fwd", 2),
          ("fwdAndBwdReport", 3),
          ("off", 1))
    )


_AtmVpPmSource_Type.__name__ = "Integer32"
_AtmVpPmSource_Object = MibTableColumn
atmVpPmSource = _AtmVpPmSource_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 3, 1, 1, 8),
    _AtmVpPmSource_Type()
)
atmVpPmSource.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmVpPmSource.setStatus("current")
_AtmVcPmTable_Object = MibTable
atmVcPmTable = _AtmVcPmTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 3, 2)
)
if mibBuilder.loadTexts:
    atmVcPmTable.setStatus("current")
_AtmVcPmEntry_Object = MibTableRow
atmVcPmEntry = _AtmVcPmEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 3, 2, 1)
)
atmVcPmEntry.setIndexNames(
    (0, "RAD-MIB", "atmVcPmIfIndex"),
    (0, "RAD-MIB", "atmVcPmVpi"),
    (0, "RAD-MIB", "atmVcPmVci"),
)
if mibBuilder.loadTexts:
    atmVcPmEntry.setStatus("current")
_AtmVcPmIfIndex_Type = Integer32
_AtmVcPmIfIndex_Object = MibTableColumn
atmVcPmIfIndex = _AtmVcPmIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 3, 2, 1, 1),
    _AtmVcPmIfIndex_Type()
)
atmVcPmIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPmIfIndex.setStatus("current")
_AtmVcPmVpi_Type = Integer32
_AtmVcPmVpi_Object = MibTableColumn
atmVcPmVpi = _AtmVcPmVpi_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 3, 2, 1, 2),
    _AtmVcPmVpi_Type()
)
atmVcPmVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPmVpi.setStatus("current")
_AtmVcPmVci_Type = Integer32
_AtmVcPmVci_Object = MibTableColumn
atmVcPmVci = _AtmVcPmVci_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 3, 2, 1, 3),
    _AtmVcPmVci_Type()
)
atmVcPmVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    atmVcPmVci.setStatus("current")


class _AtmVcPmAdminStatus_Type(Integer32):
    """Custom type atmVcPmAdminStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("down", 3),
          ("listenToActivationCells", 4),
          ("originateActivationCells", 5),
          ("up", 2))
    )


_AtmVcPmAdminStatus_Type.__name__ = "Integer32"
_AtmVcPmAdminStatus_Object = MibTableColumn
atmVcPmAdminStatus = _AtmVcPmAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 3, 2, 1, 4),
    _AtmVcPmAdminStatus_Type()
)
atmVcPmAdminStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmVcPmAdminStatus.setStatus("current")


class _AtmVcPmDirection_Type(Integer32):
    """Custom type atmVcPmDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bidirectional", 4),
          ("destination", 3),
          ("source", 2))
    )


_AtmVcPmDirection_Type.__name__ = "Integer32"
_AtmVcPmDirection_Object = MibTableColumn
atmVcPmDirection = _AtmVcPmDirection_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 3, 2, 1, 5),
    _AtmVcPmDirection_Type()
)
atmVcPmDirection.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmVcPmDirection.setStatus("current")
_AtmVcPmBlockSize_Type = Integer32
_AtmVcPmBlockSize_Object = MibTableColumn
atmVcPmBlockSize = _AtmVcPmBlockSize_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 3, 2, 1, 6),
    _AtmVcPmBlockSize_Type()
)
atmVcPmBlockSize.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmVcPmBlockSize.setStatus("current")
_AtmVcPmRowStatus_Type = RowStatus
_AtmVcPmRowStatus_Object = MibTableColumn
atmVcPmRowStatus = _AtmVcPmRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 3, 2, 1, 7),
    _AtmVcPmRowStatus_Type()
)
atmVcPmRowStatus.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmVcPmRowStatus.setStatus("current")


class _AtmVcPmSink_Type(Integer32):
    """Custom type atmVcPmSink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fwd", 2),
          ("fwdAndBwdReport", 3),
          ("off", 1))
    )


_AtmVcPmSink_Type.__name__ = "Integer32"
_AtmVcPmSink_Object = MibTableColumn
atmVcPmSink = _AtmVcPmSink_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 3, 2, 1, 8),
    _AtmVcPmSink_Type()
)
atmVcPmSink.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmVcPmSink.setStatus("current")


class _AtmVcPmSource_Type(Integer32):
    """Custom type atmVcPmSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fwd", 2),
          ("fwdAndBwdReport", 3),
          ("off", 1))
    )


_AtmVcPmSource_Type.__name__ = "Integer32"
_AtmVcPmSource_Object = MibTableColumn
atmVcPmSource = _AtmVcPmSource_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 2, 3, 2, 1, 9),
    _AtmVcPmSource_Type()
)
atmVcPmSource.setMaxAccess("read-create")
if mibBuilder.loadTexts:
    atmVcPmSource.setStatus("current")
_AtmNteMdl_ObjectIdentity = ObjectIdentity
atmNteMdl = _AtmNteMdl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 3)
)
_AtmNteMdlConfig_ObjectIdentity = ObjectIdentity
atmNteMdlConfig = _AtmNteMdlConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 3, 1)
)
_AtmNteMdlConfigTable_Object = MibTable
atmNteMdlConfigTable = _AtmNteMdlConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 3, 1, 1)
)
if mibBuilder.loadTexts:
    atmNteMdlConfigTable.setStatus("current")
_AtmNteMdlConfigEntry_Object = MibTableRow
atmNteMdlConfigEntry = _AtmNteMdlConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 3, 1, 1, 1)
)
atmNteMdlConfigEntry.setIndexNames(
    (0, "RAD-MIB", "atmNteMdlSlotIndex"),
)
if mibBuilder.loadTexts:
    atmNteMdlConfigEntry.setStatus("current")


class _AtmNteMdlSlotIndex_Type(Integer32):
    """Custom type atmNteMdlSlotIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_AtmNteMdlSlotIndex_Type.__name__ = "Integer32"
_AtmNteMdlSlotIndex_Object = MibTableColumn
atmNteMdlSlotIndex = _AtmNteMdlSlotIndex_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 3, 1, 1, 1, 1),
    _AtmNteMdlSlotIndex_Type()
)
atmNteMdlSlotIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    atmNteMdlSlotIndex.setStatus("current")


class _AtmNteMdlPrtCpuSharing_Type(Integer32):
    """Custom type atmNteMdlPrtCpuSharing based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("equal", 2),
          ("port1", 3))
    )


_AtmNteMdlPrtCpuSharing_Type.__name__ = "Integer32"
_AtmNteMdlPrtCpuSharing_Object = MibTableColumn
atmNteMdlPrtCpuSharing = _AtmNteMdlPrtCpuSharing_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 3, 1, 1, 1, 2),
    _AtmNteMdlPrtCpuSharing_Type()
)
atmNteMdlPrtCpuSharing.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteMdlPrtCpuSharing.setStatus("current")


class _AtmNteMdlInputPriorityMechanism_Type(Integer32):
    """Custom type atmNteMdlInputPriorityMechanism based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 3))
    )


_AtmNteMdlInputPriorityMechanism_Type.__name__ = "Integer32"
_AtmNteMdlInputPriorityMechanism_Object = MibTableColumn
atmNteMdlInputPriorityMechanism = _AtmNteMdlInputPriorityMechanism_Object(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 3, 1, 1, 1, 3),
    _AtmNteMdlInputPriorityMechanism_Type()
)
atmNteMdlInputPriorityMechanism.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    atmNteMdlInputPriorityMechanism.setStatus("current")
dot3OamEntry.registerAugmentions(
    ("RAD-MIB",
     "dot3OamXEntry")
)
dot3OamXEntry.setIndexNames(*dot3OamEntry.getIndexNames())
dsx3ConfigEntry.registerAugmentions(
    ("RAD-MIB",
     "dsx3XConfigEntry")
)
dsx3XConfigEntry.setIndexNames(*dsx3ConfigEntry.getIndexNames())
dot1qVlanStaticEntry.registerAugmentions(
    ("RAD-MIB",
     "radBridgeDot1qVlanStaticEntry")
)
radBridgeDot1qVlanStaticEntry.setIndexNames(*dot1qVlanStaticEntry.getIndexNames())
dot1dBasePortEntry.registerAugmentions(
    ("RAD-MIB",
     "radDot1qPortVlanEntry")
)
radDot1qPortVlanEntry.setIndexNames(*dot1dBasePortEntry.getIndexNames())
schedEntry.registerAugmentions(
    ("RAD-MIB",
     "schedXEntry")
)
schedXEntry.setIndexNames(*schedEntry.getIndexNames())
atmVpCrossConnectEntry.registerAugmentions(
    ("RAD-MIB",
     "atmVpCrossConnectExtenEntry")
)
atmVpCrossConnectExtenEntry.setIndexNames(*atmVpCrossConnectEntry.getIndexNames())
atmVcCrossConnectEntry.registerAugmentions(
    ("RAD-MIB",
     "atmVcCrossConnectExtenEntry")
)
atmVcCrossConnectExtenEntry.setIndexNames(*atmVcCrossConnectEntry.getIndexNames())
atmTrafficDescrParamEntry.registerAugmentions(
    ("RAD-MIB",
     "atmTrafficDescrParamXEntry")
)
atmTrafficDescrParamXEntry.setIndexNames(*atmTrafficDescrParamEntry.getIndexNames())

# Managed Objects groups


# Notification objects

ethOamCfmDefectCondition = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 3, 0, 1)
)
if mibBuilder.loadTexts:
    ethOamCfmDefectCondition.setStatus(
        "current"
    )

ethIfRingStatusChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 4, 0, 1)
)
ethIfRingStatusChange.setObjects(
    ("RAD-MIB", "ethIfRingOperStatus")
)
if mibBuilder.loadTexts:
    ethIfRingStatusChange.setStatus(
        "current"
    )

dot3OamOperStatusChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 6, 0, 1)
)
dot3OamOperStatusChange.setObjects(
    ("DOT3-OAM-MIB", "dot3OamOperStatus")
)
if mibBuilder.loadTexts:
    dot3OamOperStatusChange.setStatus(
        "current"
    )

dot3OamPeerEvent = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 6, 0, 2)
)
dot3OamPeerEvent.setObjects(
    ("RAD-MIB", "dot3OamXPeerState")
)
if mibBuilder.loadTexts:
    dot3OamPeerEvent.setStatus(
        "current"
    )

ethIfMacAccessViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 7, 0, 1)
)
ethIfMacAccessViolation.setObjects(
      *(("IF-MIB", "ifDescr"),
        ("RAD-MIB", "ethIfSrcMacCtrlLastViolatingAddr"))
)
if mibBuilder.loadTexts:
    ethIfMacAccessViolation.setStatus(
        "current"
    )

ds1LocalMultiframeAlarmTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 1)
)
ds1LocalMultiframeAlarmTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    ds1LocalMultiframeAlarmTrap.setStatus(
        "current"
    )

ds1RemoteMultiframeAlarmTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 2)
)
ds1RemoteMultiframeAlarmTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    ds1RemoteMultiframeAlarmTrap.setStatus(
        "current"
    )

ds1LinkFrameSlipTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 3)
)
ds1LinkFrameSlipTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    ds1LinkFrameSlipTrap.setStatus(
        "current"
    )

ds1BpvErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 4)
)
ds1BpvErrorTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    ds1BpvErrorTrap.setStatus(
        "current"
    )

ds1ExcessiveBpvTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 5)
)
ds1ExcessiveBpvTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    ds1ExcessiveBpvTrap.setStatus(
        "current"
    )

ds1Crc4ErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 6)
)
ds1Crc4ErrorTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    ds1Crc4ErrorTrap.setStatus(
        "current"
    )

ds1ExcessiveErrorRatioTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 7)
)
ds1ExcessiveErrorRatioTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    ds1ExcessiveErrorRatioTrap.setStatus(
        "current"
    )

ds1RemoteSyncLossTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 8)
)
ds1RemoteSyncLossTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    ds1RemoteSyncLossTrap.setStatus(
        "current"
    )

ds1LocalSyncLossTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 9)
)
ds1LocalSyncLossTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    ds1LocalSyncLossTrap.setStatus(
        "current"
    )

ds1AisSyncLossTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 10)
)
ds1AisSyncLossTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    ds1AisSyncLossTrap.setStatus(
        "current"
    )

ds1AisTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 11)
)
ds1AisTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    ds1AisTrap.setStatus(
        "current"
    )

ds1NetworkRemoteLoopTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 12)
)
ds1NetworkRemoteLoopTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    ds1NetworkRemoteLoopTrap.setStatus(
        "current"
    )

ds1RemoteLoopTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 13)
)
ds1RemoteLoopTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    ds1RemoteLoopTrap.setStatus(
        "current"
    )

ds1LocalLoopTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 14)
)
ds1LocalLoopTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    ds1LocalLoopTrap.setStatus(
        "current"
    )

ds1ExcessiveFrameSlipTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 15)
)
ds1ExcessiveFrameSlipTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    ds1ExcessiveFrameSlipTrap.setStatus(
        "current"
    )

ds1ExcessiveCrc4ErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 16)
)
ds1ExcessiveCrc4ErrorTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    ds1ExcessiveCrc4ErrorTrap.setStatus(
        "current"
    )

ds1ExcessiveLocalMfAlarmTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 17)
)
ds1ExcessiveLocalMfAlarmTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    ds1ExcessiveLocalMfAlarmTrap.setStatus(
        "current"
    )

ds1ExcessiveRemoteMfAlarmTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 18)
)
ds1ExcessiveRemoteMfAlarmTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    ds1ExcessiveRemoteMfAlarmTrap.setStatus(
        "current"
    )

ds1ExcessiveRemoteSyncLossTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 19)
)
ds1ExcessiveRemoteSyncLossTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    ds1ExcessiveRemoteSyncLossTrap.setStatus(
        "current"
    )

ds1ExcessiveLocalSyncLossTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 20)
)
ds1ExcessiveLocalSyncLossTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    ds1ExcessiveLocalSyncLossTrap.setStatus(
        "current"
    )

ds1SignalLossTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 21)
)
ds1SignalLossTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    ds1SignalLossTrap.setStatus(
        "current"
    )

alarmsTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 0, 1)
)
alarmsTrap.setObjects(
    ("RAD-MIB", "alrBufDescription")
)
if mibBuilder.loadTexts:
    alarmsTrap.setStatus(
        "current"
    )

sanityTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 0, 2)
)
sanityTrap.setObjects(
      *(("RAD-MIB", "agnSSanityCheckStatus"),
        ("RAD-MIB", "agnCSaveCnfgIdxCmd"))
)
if mibBuilder.loadTexts:
    sanityTrap.setStatus(
        "current"
    )

cnfgFlipTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 0, 3)
)
cnfgFlipTrap.setObjects(
    ("RAD-MIB", "agnSActiveCnfg")
)
if mibBuilder.loadTexts:
    cnfgFlipTrap.setStatus(
        "current"
    )

flipDbChangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 0, 4)
)
if mibBuilder.loadTexts:
    flipDbChangeTrap.setStatus(
        "current"
    )

statusChangedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 2, 0, 5)
)
statusChangedTrap.setObjects(
    ("RAD-MIB", "agnLed")
)
if mibBuilder.loadTexts:
    statusChangedTrap.setStatus(
        "current"
    )

sanityCheckTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 0, 1)
)
sanityCheckTrap.setObjects(
      *(("RAD-MIB", "sysSSanityCheckStatus"),
        ("RAD-MIB", "sysDbaseDownloadCnfgIdxCmd"))
)
if mibBuilder.loadTexts:
    sanityCheckTrap.setStatus(
        "current"
    )

dacsMuxAlarmsTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 0, 2)
)
if mibBuilder.loadTexts:
    dacsMuxAlarmsTrap.setStatus(
        "current"
    )

mdlConnectTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 0, 3)
)
mdlConnectTrap.setObjects(
      *(("RAD-MIB", "mdlSCardType"),
        ("RAD-MIB", "mdlSActivity"))
)
if mibBuilder.loadTexts:
    mdlConnectTrap.setStatus(
        "current"
    )

sysAlrStatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 0, 4)
)
sysAlrStatusTrap.setObjects(
      *(("RAD-MIB", "sysSAlrStatusAll"),
        ("RAD-MIB", "sysSAlrStatus"))
)
if mibBuilder.loadTexts:
    sysAlrStatusTrap.setStatus(
        "current"
    )

sysStatusChangedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 0, 5)
)
sysStatusChangedTrap.setObjects(
    ("RAD-MIB", "agnLed")
)
if mibBuilder.loadTexts:
    sysStatusChangedTrap.setStatus(
        "current"
    )

cnfgUpdateTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 0, 6)
)
if mibBuilder.loadTexts:
    cnfgUpdateTrap.setStatus(
        "current"
    )

sysRedundancyStatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 0, 7)
)
sysRedundancyStatusTrap.setObjects(
    ("RAD-MIB", "sysDclRedundancyStatus")
)
if mibBuilder.loadTexts:
    sysRedundancyStatusTrap.setStatus(
        "current"
    )

sysRedundancyActiveCardTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 0, 8)
)
sysRedundancyActiveCardTrap.setObjects(
    ("RAD-MIB", "sysDclOnline")
)
if mibBuilder.loadTexts:
    sysRedundancyActiveCardTrap.setStatus(
        "current"
    )

sysRedundancyActivePortTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 3, 3, 0, 9)
)
sysRedundancyActivePortTrap.setObjects(
    ("RAD-MIB", "sysCRdnOnline")
)
if mibBuilder.loadTexts:
    sysRedundancyActivePortTrap.setStatus(
        "current"
    )

tftpStatusChangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 1)
)
tftpStatusChangeTrap.setObjects(
    ("RAD-MIB", "tftpStatus")
)
if mibBuilder.loadTexts:
    tftpStatusChangeTrap.setStatus(
        "current"
    )

agnStatusChangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 2)
)
agnStatusChangeTrap.setObjects(
    ("RAD-MIB", "agnIndication")
)
if mibBuilder.loadTexts:
    agnStatusChangeTrap.setStatus(
        "current"
    )

prtStatusChangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 3)
)
if mibBuilder.loadTexts:
    prtStatusChangeTrap.setStatus(
        "current"
    )

swdlStatusResult = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 4)
)
swdlStatusResult.setObjects(
    ("RAD-MIB", "swdlStatusFileName")
)
if mibBuilder.loadTexts:
    swdlStatusResult.setStatus(
        "current"
    )

intSwdlSlotFileMismatch = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 5)
)
intSwdlSlotFileMismatch.setObjects(
    ("RAD-MIB", "intSwdlFileName")
)
if mibBuilder.loadTexts:
    intSwdlSlotFileMismatch.setStatus(
        "current"
    )

agnCounterChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 6)
)
if mibBuilder.loadTexts:
    agnCounterChange.setStatus(
        "current"
    )

prtClkSrcChangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 7)
)
if mibBuilder.loadTexts:
    prtClkSrcChangeTrap.setStatus(
        "current"
    )

moduleFailTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 8)
)
if mibBuilder.loadTexts:
    moduleFailTrap.setStatus(
        "current"
    )

moduleInitFailTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 9)
)
if mibBuilder.loadTexts:
    moduleInitFailTrap.setStatus(
        "current"
    )

clkSrcChangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 10)
)
if mibBuilder.loadTexts:
    clkSrcChangeTrap.setStatus(
        "current"
    )

agnUploadDataTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 11)
)
if mibBuilder.loadTexts:
    agnUploadDataTrap.setStatus(
        "current"
    )

enrollmentTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 12)
)
if mibBuilder.loadTexts:
    enrollmentTrap.setStatus(
        "current"
    )

agnPowerFailureTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 13)
)
if mibBuilder.loadTexts:
    agnPowerFailureTrap.setStatus(
        "current"
    )

agnFanFailureTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 14)
)
if mibBuilder.loadTexts:
    agnFanFailureTrap.setStatus(
        "current"
    )

agnSystemParameterChangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 15)
)
agnSystemParameterChangeTrap.setObjects(
    ("RAD-MIB", "systemParameter")
)
if mibBuilder.loadTexts:
    agnSystemParameterChangeTrap.setStatus(
        "current"
    )

agnConfigDBChecksumError = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 16)
)
agnConfigDBChecksumError.setObjects(
    ("RAD-MIB", "alarmSeverity")
)
if mibBuilder.loadTexts:
    agnConfigDBChecksumError.setStatus(
        "current"
    )

agnAlarmBufferOverflow = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 17)
)
agnAlarmBufferOverflow.setObjects(
    ("RAD-MIB", "alarmSeverity")
)
if mibBuilder.loadTexts:
    agnAlarmBufferOverflow.setStatus(
        "current"
    )

agnAlarmBufferClear = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 18)
)
agnAlarmBufferClear.setObjects(
    ("RAD-MIB", "alarmSeverity")
)
if mibBuilder.loadTexts:
    agnAlarmBufferClear.setStatus(
        "current"
    )

agnParametersValueChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 19)
)
agnParametersValueChanged.setObjects(
    ("RAD-MIB", "alarmSeverity")
)
if mibBuilder.loadTexts:
    agnParametersValueChanged.setStatus(
        "current"
    )

agnDriverSwMismatch = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 20)
)
agnDriverSwMismatch.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    agnDriverSwMismatch.setStatus(
        "current"
    )

agnActualLowRate = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 21)
)
agnActualLowRate.setObjects(
    ("RAD-MIB", "alarmSeverity")
)
if mibBuilder.loadTexts:
    agnActualLowRate.setStatus(
        "current"
    )

xModemFileTransferStatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 22)
)
xModemFileTransferStatusTrap.setObjects(
    ("RAD-MIB", "trapVal")
)
if mibBuilder.loadTexts:
    xModemFileTransferStatusTrap.setStatus(
        "current"
    )

agnStationClkFailureTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 23)
)
if mibBuilder.loadTexts:
    agnStationClkFailureTrap.setStatus(
        "current"
    )

successfulLogin = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 24)
)
if mibBuilder.loadTexts:
    successfulLogin.setStatus(
        "current"
    )

failedLogin = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 25)
)
if mibBuilder.loadTexts:
    failedLogin.setStatus(
        "current"
    )

modlChangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 26)
)
if mibBuilder.loadTexts:
    modlChangeTrap.setStatus(
        "current"
    )

licenseUpdateTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 27)
)
if mibBuilder.loadTexts:
    licenseUpdateTrap.setStatus(
        "current"
    )

agnClkSrcStateChangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 28)
)
agnClkSrcStateChangeTrap.setObjects(
    ("RAD-MIB", "agnClkSrcPortState")
)
if mibBuilder.loadTexts:
    agnClkSrcStateChangeTrap.setStatus(
        "current"
    )

agnSelfTestResultChangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 29)
)
if mibBuilder.loadTexts:
    agnSelfTestResultChangeTrap.setStatus(
        "current"
    )

agnClkSrcFrequencyAlarmTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 0, 31)
)
if mibBuilder.loadTexts:
    agnClkSrcFrequencyAlarmTrap.setStatus(
        "current"
    )

alarmStatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 0, 5)
)
alarmStatusTrap.setObjects(
    ("RAD-MIB", "atmInterfaceAlarmStatus")
)
if mibBuilder.loadTexts:
    alarmStatusTrap.setStatus(
        "current"
    )

systemTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 0, 6)
)
systemTrap.setObjects(
      *(("RAD-MIB", "atmNteEventType"),
        ("RAD-MIB", "agnLed"),
        ("RAD-MIB", "alarmSeverity"))
)
if mibBuilder.loadTexts:
    systemTrap.setStatus(
        "current"
    )

alarmLOS = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 0, 7)
)
alarmLOS.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    alarmLOS.setStatus(
        "current"
    )

alarmLOF = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 0, 8)
)
alarmLOF.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    alarmLOF.setStatus(
        "current"
    )

channelOperStatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 0, 9)
)
channelOperStatusTrap.setObjects(
    ("RAD-MIB", "ip2IfOperStatus")
)
if mibBuilder.loadTexts:
    channelOperStatusTrap.setStatus(
        "current"
    )

alarmAIS = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 0, 10)
)
alarmAIS.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    alarmAIS.setStatus(
        "current"
    )

alarmRDI = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 0, 11)
)
alarmRDI.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    alarmRDI.setStatus(
        "current"
    )

alarmFEBE = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 0, 12)
)
alarmFEBE.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    alarmFEBE.setStatus(
        "current"
    )

localConnStatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 0, 13)
)
localConnStatusTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    localConnStatusTrap.setStatus(
        "current"
    )

remoteConnStatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 0, 14)
)
remoteConnStatusTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    remoteConnStatusTrap.setStatus(
        "current"
    )

bundleConnectionStatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 0, 15)
)
bundleConnectionStatusTrap.setObjects(
      *(("IF-MIB", "ifAlias"),
        ("RAD-MIB", "ip2IfOperStatus"))
)
if mibBuilder.loadTexts:
    bundleConnectionStatusTrap.setStatus(
        "current"
    )

atmAceSystemTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 6)
)
atmAceSystemTrap.setObjects(
      *(("RAD-MIB", "atmNteEventType"),
        ("RAD-MIB", "agnLed"),
        ("RAD-MIB", "alarmSeverity"))
)
if mibBuilder.loadTexts:
    atmAceSystemTrap.setStatus(
        "current"
    )

atmAceAlarmForwardingTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 7)
)
atmAceAlarmForwardingTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"))
)
if mibBuilder.loadTexts:
    atmAceAlarmForwardingTrap.setStatus(
        "current"
    )

atmAceDateAndTimeRequest = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 8)
)
if mibBuilder.loadTexts:
    atmAceDateAndTimeRequest.setStatus(
        "current"
    )

atmAceAlarmLOS = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 16)
)
atmAceAlarmLOS.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmLOS.setStatus(
        "current"
    )

atmAceAlarmLOF = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 17)
)
atmAceAlarmLOF.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmLOF.setStatus(
        "current"
    )

atmAceAlarmLCD = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 18)
)
atmAceAlarmLCD.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmLCD.setStatus(
        "current"
    )

atmAceAlarmSLM = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 19)
)
atmAceAlarmSLM.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmSLM.setStatus(
        "current"
    )

atmAceAlarmLOP = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 20)
)
atmAceAlarmLOP.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmLOP.setStatus(
        "current"
    )

atmAceAlarmLineAIS = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 21)
)
atmAceAlarmLineAIS.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmLineAIS.setStatus(
        "current"
    )

atmAceAlarmPathAIS = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 22)
)
atmAceAlarmPathAIS.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmPathAIS.setStatus(
        "current"
    )

atmAceAlarmLineRDI = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 23)
)
atmAceAlarmLineRDI.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmLineRDI.setStatus(
        "current"
    )

atmAceAlarmPathRDI = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 24)
)
atmAceAlarmPathRDI.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmPathRDI.setStatus(
        "current"
    )

atmAceAlarmSectionBIP = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 25)
)
atmAceAlarmSectionBIP.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmSectionBIP.setStatus(
        "current"
    )

atmAceAlarmLineBIP = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 26)
)
atmAceAlarmLineBIP.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmLineBIP.setStatus(
        "current"
    )

atmAceAlarmPathBIP = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 27)
)
atmAceAlarmPathBIP.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmPathBIP.setStatus(
        "current"
    )

atmAceAlarmLineFEBE = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 28)
)
atmAceAlarmLineFEBE.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmLineFEBE.setStatus(
        "current"
    )

atmAceAlarmPathFEBE = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 29)
)
atmAceAlarmPathFEBE.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmPathFEBE.setStatus(
        "current"
    )

atmAceAlarmPlcpLOF = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 30)
)
atmAceAlarmPlcpLOF.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmPlcpLOF.setStatus(
        "current"
    )

atmAceAlarmPlcpYELLOW = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 31)
)
atmAceAlarmPlcpYELLOW.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmPlcpYELLOW.setStatus(
        "current"
    )

atmAceAlarmPlcpBIP = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 32)
)
atmAceAlarmPlcpBIP.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmPlcpBIP.setStatus(
        "current"
    )

atmAceAlarmPlcpFEBE = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 33)
)
atmAceAlarmPlcpFEBE.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmPlcpFEBE.setStatus(
        "current"
    )

atmAceAlarmPlcpP1P2 = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 34)
)
atmAceAlarmPlcpP1P2.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmPlcpP1P2.setStatus(
        "current"
    )

atmAceAlarmUAS = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 35)
)
atmAceAlarmUAS.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmUAS.setStatus(
        "current"
    )

atmAceAlarmCluster = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 36)
)
atmAceAlarmCluster.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("RAD-MIB", "atmNteAlarmType"),
        ("RAD-MIB", "atmNteLevel"))
)
if mibBuilder.loadTexts:
    atmAceAlarmCluster.setStatus(
        "current"
    )

atmAceHwFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 37)
)
atmAceHwFailure.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceHwFailure.setStatus(
        "current"
    )

atmAceUnavailableBwTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 38)
)
atmAceUnavailableBwTrap.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("IF-MIB", "ifAlias"),
        ("RAD-MIB", "atmConfIfInputRate"),
        ("RAD-MIB", "atmConfIfOutputRate"))
)
if mibBuilder.loadTexts:
    atmAceUnavailableBwTrap.setStatus(
        "current"
    )

atmAceAlarmVpContinuityLoss = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 40)
)
atmAceAlarmVpContinuityLoss.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmVpContinuityLoss.setStatus(
        "current"
    )

atmAceAlarmVpAISReception = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 41)
)
atmAceAlarmVpAISReception.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmVpAISReception.setStatus(
        "current"
    )

atmAceAlarmVpRDIReception = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 42)
)
atmAceAlarmVpRDIReception.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmVpRDIReception.setStatus(
        "current"
    )

atmAceAlarmVpErroredCells = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 43)
)
atmAceAlarmVpErroredCells.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmVpErroredCells.setStatus(
        "current"
    )

atmAceAlarmVpLostCells = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 44)
)
atmAceAlarmVpLostCells.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmVpLostCells.setStatus(
        "current"
    )

atmAceAlarmVpMisinsertedCells = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 45)
)
atmAceAlarmVpMisinsertedCells.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmVpMisinsertedCells.setStatus(
        "current"
    )

atmAceAlarmVpUAS = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 46)
)
atmAceAlarmVpUAS.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmVpUAS.setStatus(
        "current"
    )

atmAceAlarmVpLoopback = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 47)
)
atmAceAlarmVpLoopback.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmVpLoopback.setStatus(
        "current"
    )

atmAceAlarmVpGCRAViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 48)
)
atmAceAlarmVpGCRAViolation.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmVpGCRAViolation.setStatus(
        "current"
    )

atmAceAlarmVcContinuityLoss = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 56)
)
atmAceAlarmVcContinuityLoss.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmVcContinuityLoss.setStatus(
        "current"
    )

atmAceAlarmVcAISReception = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 57)
)
atmAceAlarmVcAISReception.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmVcAISReception.setStatus(
        "current"
    )

atmAceAlarmVcRDIReception = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 58)
)
atmAceAlarmVcRDIReception.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmVcRDIReception.setStatus(
        "current"
    )

atmAceAlarmVcErroredCells = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 59)
)
atmAceAlarmVcErroredCells.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmVcErroredCells.setStatus(
        "current"
    )

atmAceAlarmVcLostCells = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 60)
)
atmAceAlarmVcLostCells.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmVcLostCells.setStatus(
        "current"
    )

atmAceAlarmVcMisinsertedCells = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 61)
)
atmAceAlarmVcMisinsertedCells.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmVcMisinsertedCells.setStatus(
        "current"
    )

atmAceAlarmVcUnexpectedCell = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 62)
)
atmAceAlarmVcUnexpectedCell.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmVcUnexpectedCell.setStatus(
        "current"
    )

atmAceAlarmVcUAS = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 63)
)
atmAceAlarmVcUAS.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmVcUAS.setStatus(
        "current"
    )

atmAceAlarmVcLoopback = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 64)
)
atmAceAlarmVcLoopback.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmVcLoopback.setStatus(
        "current"
    )

atmAceAlarmVcGCRAViolation = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 0, 65)
)
atmAceAlarmVcGCRAViolation.setObjects(
      *(("RAD-MIB", "alarmSeverity"),
        ("RAD-MIB", "alarmState"),
        ("IF-MIB", "ifAlias"))
)
if mibBuilder.loadTexts:
    atmAceAlarmVcGCRAViolation.setStatus(
        "current"
    )

atmAceStatusChange = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 0, 1)
)
atmAceStatusChange.setObjects(
      *(("RAD-MIB", "agnLed"),
        ("RAD-MIB", "agnIndication"))
)
if mibBuilder.loadTexts:
    atmAceStatusChange.setStatus(
        "current"
    )

atmAceAlarmTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 0, 2)
)
atmAceAlarmTrap.setObjects(
    ("RAD-MIB", "atmInterfaceAlarmStatus")
)
if mibBuilder.loadTexts:
    atmAceAlarmTrap.setStatus(
        "current"
    )

atmAceModuleChangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 0, 3)
)
atmAceModuleChangeTrap.setObjects(
    ("IF-MIB", "ifIndex")
)
if mibBuilder.loadTexts:
    atmAceModuleChangeTrap.setStatus(
        "current"
    )

atmAceRedundancyTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 0, 4)
)
atmAceRedundancyTrap.setObjects(
    ("IF-MIB", "ifIndex")
)
if mibBuilder.loadTexts:
    atmAceRedundancyTrap.setStatus(
        "current"
    )

atmAceModuleMismatchTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 164, 12, 3, 0, 5)
)
if mibBuilder.loadTexts:
    atmAceModuleMismatchTrap.setStatus(
        "current"
    )


# Notifications groups


# Agent capabilities


# Module compliance


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "RAD-MIB",
    **{"SysIfEntityType": SysIfEntityType,
       "RadTransportAddressType": RadTransportAddressType,
       "RadTransportAddressEfmOam": RadTransportAddressEfmOam,
       "GenAddress": GenAddress,
       "Dscp": Dscp,
       "rad": rad,
       "radTokenRing": radTokenRing,
       "radFddi": radFddi,
       "radWan": radWan,
       "wanGen": wanGen,
       "chasWanGen": chasWanGen,
       "chasVersion": chasVersion,
       "chasTotalNoOfSlt": chasTotalNoOfSlt,
       "chasTotalNoOfIoSlt": chasTotalNoOfIoSlt,
       "chasTotalNoOfPsSlt": chasTotalNoOfPsSlt,
       "chasTotalNoOfClSlt": chasTotalNoOfClSlt,
       "agnWanGen": agnWanGen,
       "statAgnGen": statAgnGen,
       "agnSDateFormat": agnSDateFormat,
       "agnSDateCmd": agnSDateCmd,
       "agnSTimeCmd": agnSTimeCmd,
       "agnSActiveCnfg": agnSActiveCnfg,
       "agnSEditCnfg": agnSEditCnfg,
       "agnSLastCnfgFlipTime": agnSLastCnfgFlipTime,
       "agnSLastCnfgFlipCause": agnSLastCnfgFlipCause,
       "agnSEditBy": agnSEditBy,
       "agnSClkSrc": agnSClkSrc,
       "agnSAlrStatus": agnSAlrStatus,
       "agnSAlrStatusAll": agnSAlrStatusAll,
       "agnSMaskedAlrStat": agnSMaskedAlrStat,
       "agnSMaskedAlrStatAll": agnSMaskedAlrStatAll,
       "agnSTstStatAll": agnSTstStatAll,
       "agnSAlrTable": agnSAlrTable,
       "agnSAlrEntry": agnSAlrEntry,
       "agnSAlrIdx": agnSAlrIdx,
       "agnSAlrCodeDescription": agnSAlrCodeDescription,
       "agnSAlrCode": agnSAlrCode,
       "agnSAlrSeverity": agnSAlrSeverity,
       "agnSAlrState": agnSAlrState,
       "agnSAlrCounter": agnSAlrCounter,
       "agnSAlrMask": agnSAlrMask,
       "agnSAlrInvert": agnSAlrInvert,
       "agnSClearAlrCmd": agnSClearAlrCmd,
       "agnSClearAllAlrCmd": agnSClearAllAlrCmd,
       "agnSSanityCheckStatus": agnSSanityCheckStatus,
       "agnSNoOfSanityCheckErr": agnSNoOfSanityCheckErr,
       "agnSErrListTable": agnSErrListTable,
       "agnSErrListEntry": agnSErrListEntry,
       "agnSErrIdx": agnSErrIdx,
       "agnSErrDescription": agnSErrDescription,
       "agnSMaxNoOfCnfg": agnSMaxNoOfCnfg,
       "agnSCnfgTable": agnSCnfgTable,
       "agnSCnfgEntry": agnSCnfgEntry,
       "agnSEntryIdx": agnSEntryIdx,
       "agnSEntryIsValid": agnSEntryIsValid,
       "cnfgAgnGen": cnfgAgnGen,
       "agnCSanityCheckCmd": agnCSanityCheckCmd,
       "agnCSaveCnfgIdxCmd": agnCSaveCnfgIdxCmd,
       "agnCLoadCnfgIdxCmd": agnCLoadCnfgIdxCmd,
       "agnCClkSrcTable": agnCClkSrcTable,
       "agnCClkSrcEntry": agnCClkSrcEntry,
       "agnCClkCnfgIdx": agnCClkCnfgIdx,
       "agnCClkSrcIdx": agnCClkSrcIdx,
       "agnCClkSrcMode": agnCClkSrcMode,
       "agnCClkSrcSlt": agnCClkSrcSlt,
       "agnCClkSrcPrt": agnCClkSrcPrt,
       "agnCDeleteCnfgIdxCmd": agnCDeleteCnfgIdxCmd,
       "agnCDefaultCnfgIdxCmd": agnCDefaultCnfgIdxCmd,
       "agnCnfgDataTable": agnCnfgDataTable,
       "agnCnfgDataEntry": agnCnfgDataEntry,
       "agnCnfgIdx": agnCnfgIdx,
       "agnCnfgDesc": agnCnfgDesc,
       "agnCnfgUpdDate": agnCnfgUpdDate,
       "agnCnfgUpdTime": agnCnfgUpdTime,
       "agnCnfgUpdMnger": agnCnfgUpdMnger,
       "agnCnfgAlarm": agnCnfgAlarm,
       "agnCnfgAlrFilterWindow": agnCnfgAlrFilterWindow,
       "agnCnfgAlrTable": agnCnfgAlrTable,
       "agnCnfgAlrEntry": agnCnfgAlrEntry,
       "agnCnfgAlrCode": agnCnfgAlrCode,
       "agnCnfgAlrSlot": agnCnfgAlrSlot,
       "agnCnfgAlrPort": agnCnfgAlrPort,
       "agnCnfgAlrMask": agnCnfgAlrMask,
       "agnCnfgAlrInvert": agnCnfgAlrInvert,
       "agnCnfgAlrFilter": agnCnfgAlrFilter,
       "agnCnfgAlrFilterSet": agnCnfgAlrFilterSet,
       "agnCnfgAlrFilterReset": agnCnfgAlrFilterReset,
       "agnCnfgAlrSeverity": agnCnfgAlrSeverity,
       "agnCnfgAlrReportTable": agnCnfgAlrReportTable,
       "agnCnfgAlrReportEntry": agnCnfgAlrReportEntry,
       "agnCnfgAlrReportType": agnCnfgAlrReportType,
       "agnCnfgAlrStartReportOn": agnCnfgAlrStartReportOn,
       "agnCnfgAlrStartReportOff": agnCnfgAlrStartReportOff,
       "agnCOffsetCmd": agnCOffsetCmd,
       "agnCT1E1RingTable": agnCT1E1RingTable,
       "agnCT1E1RingEntry": agnCT1E1RingEntry,
       "agnCT1E1RingCnfgIdx": agnCT1E1RingCnfgIdx,
       "agnCT1E1RingPrimeSlot": agnCT1E1RingPrimeSlot,
       "agnCT1E1RingPrimePort": agnCT1E1RingPrimePort,
       "agnCT1E1RingSecSlot": agnCT1E1RingSecSlot,
       "agnCT1E1RingSecPort": agnCT1E1RingSecPort,
       "agnCT1E1RingRecTime": agnCT1E1RingRecTime,
       "agnCT1E1RingRowStatus": agnCT1E1RingRowStatus,
       "agnCT1E1RingWTR": agnCT1E1RingWTR,
       "agnCT1E1RingDualFailDetection": agnCT1E1RingDualFailDetection,
       "agnCMainExitPort": agnCMainExitPort,
       "agnCBuMlTable": agnCBuMlTable,
       "agnCBuMlEntry": agnCBuMlEntry,
       "agnCBuMlCnfgIdx": agnCBuMlCnfgIdx,
       "agnCBuMlRole": agnCBuMlRole,
       "agnCBuMlType": agnCBuMlType,
       "agnCBuMlDefaultGateway": agnCBuMlDefaultGateway,
       "agnCBuMlSubnetMask": agnCBuMlSubnetMask,
       "agnCBuMlOamFrequency": agnCBuMlOamFrequency,
       "agnCBuMlOamTimeoutCycles": agnCBuMlOamTimeoutCycles,
       "agnCBuMlWaitToRestore": agnCBuMlWaitToRestore,
       "agnCQ50Table": agnCQ50Table,
       "agnCQ50Entry": agnCQ50Entry,
       "agnCQ50CnfgIdx": agnCQ50CnfgIdx,
       "agnCQ50StopCallsThresh": agnCQ50StopCallsThresh,
       "agnCQ50DiscardPktThresh": agnCQ50DiscardPktThresh,
       "agnCQ50BlockNewModemVbdCallsThresh": agnCQ50BlockNewModemVbdCallsThresh,
       "agnCQ50BlockNewModemRelayCallsThresh": agnCQ50BlockNewModemRelayCallsThresh,
       "cmprAgnGen": cmprAgnGen,
       "agnCmprTable": agnCmprTable,
       "agnCmprEntry": agnCmprEntry,
       "agnCmprTypIdx": agnCmprTypIdx,
       "agnCmprCnfgIdx": agnCmprCnfgIdx,
       "agnCmprVersion": agnCmprVersion,
       "agnCmprObj": agnCmprObj,
       "agnDlciCmprTable": agnDlciCmprTable,
       "agnDlciCmprEntry": agnDlciCmprEntry,
       "agnDlciCmprCnfgIdx": agnDlciCmprCnfgIdx,
       "agnDlciCmprVersion": agnDlciCmprVersion,
       "agnDlciCmprDlciIdx": agnDlciCmprDlciIdx,
       "agnDlciCmprObj": agnDlciCmprObj,
       "agnAlarmsCmprTable": agnAlarmsCmprTable,
       "agnAlarmsCmprEntry": agnAlarmsCmprEntry,
       "agnAlarmsCmprVersion": agnAlarmsCmprVersion,
       "agnAlarmsCmprAlarmIdx": agnAlarmsCmprAlarmIdx,
       "agnAlarmsCmprObj": agnAlarmsCmprObj,
       "agnAlrBufCmprTable": agnAlrBufCmprTable,
       "agnAlrBufCmprEntry": agnAlrBufCmprEntry,
       "agnAlrBufCmprVersion": agnAlrBufCmprVersion,
       "agnAlrBufCmprAlarmIdx": agnAlrBufCmprAlarmIdx,
       "agnAlrBufCmprObj": agnAlrBufCmprObj,
       "agnSCmprErrListTable": agnSCmprErrListTable,
       "agnSCmprErrListEntry": agnSCmprErrListEntry,
       "agnSCmprErrVersion": agnSCmprErrVersion,
       "agnSCmprErrIdx": agnSCmprErrIdx,
       "agnSCmprErrObj": agnSCmprErrObj,
       "agnTsCmprTable": agnTsCmprTable,
       "agnTsCmprEntry": agnTsCmprEntry,
       "agnTsCmprVerIdx": agnTsCmprVerIdx,
       "agnTsCmprCnfgIdx": agnTsCmprCnfgIdx,
       "agnTsCmprSlotIdx": agnTsCmprSlotIdx,
       "agnTsCmprPortIdx": agnTsCmprPortIdx,
       "agnTsCmprPduIdx": agnTsCmprPduIdx,
       "agnTsCmprData": agnTsCmprData,
       "agnXCmprTable": agnXCmprTable,
       "agnXCmprEntry": agnXCmprEntry,
       "agnXCmprTypIdx": agnXCmprTypIdx,
       "agnXCmprVersion": agnXCmprVersion,
       "agnXCmprIdx3": agnXCmprIdx3,
       "agnXCmprIdx4": agnXCmprIdx4,
       "agnXCmprIdx5": agnXCmprIdx5,
       "agnXCmprIdx6": agnXCmprIdx6,
       "agnXCmprIdx7": agnXCmprIdx7,
       "agnXCmprObj": agnXCmprObj,
       "alrBuffGen": alrBuffGen,
       "alrBufTable": alrBufTable,
       "alrBufEntry": alrBufEntry,
       "alrBufIdx": alrBufIdx,
       "alrBufDescription": alrBufDescription,
       "alrBufCode": alrBufCode,
       "alrBufSlot": alrBufSlot,
       "alrBufPort": alrBufPort,
       "alrBufSeverity": alrBufSeverity,
       "alrBufState": alrBufState,
       "alrBufferClearCmd": alrBufferClearCmd,
       "alrBufIdxUponLastAck": alrBufIdxUponLastAck,
       "agnFlipDb": agnFlipDb,
       "agnCAgendaTable": agnCAgendaTable,
       "agnCAgendaEntry": agnCAgendaEntry,
       "agnCAgendaCnfgIdx": agnCAgendaCnfgIdx,
       "agnCAgendaDayIdx": agnCAgendaDayIdx,
       "agnCAgendaDayCategory": agnCAgendaDayCategory,
       "agnCFlipNetEventsTable": agnCFlipNetEventsTable,
       "agnCFlipNetEventsEntry": agnCFlipNetEventsEntry,
       "agnCFlipNetEventsCnfgIdx": agnCFlipNetEventsCnfgIdx,
       "agnCFlipNetEventIdx": agnCFlipNetEventIdx,
       "agnCFlipNetEventActive": agnCFlipNetEventActive,
       "agnCFlipNetEventType": agnCFlipNetEventType,
       "agnCFlipNetEventNo": agnCFlipNetEventNo,
       "agnCFlipNetEventSlot": agnCFlipNetEventSlot,
       "agnCFlipNetEventPort": agnCFlipNetEventPort,
       "agnCFlipNetEventISD": agnCFlipNetEventISD,
       "agnCFlipNetEventOSD": agnCFlipNetEventOSD,
       "agnCFlipNetEventDayType": agnCFlipNetEventDayType,
       "agnCFlipNetEventStartTime": agnCFlipNetEventStartTime,
       "agnCFlipNetEventEndTime": agnCFlipNetEventEndTime,
       "agnCFlipTable": agnCFlipTable,
       "agnCFlipEntry": agnCFlipEntry,
       "agnCFlipCnfgIdx": agnCFlipCnfgIdx,
       "agnCFlipIdx": agnCFlipIdx,
       "agnCFlipActive": agnCFlipActive,
       "agnCFlipLogicalExp": agnCFlipLogicalExp,
       "agnCFlipDbNo": agnCFlipDbNo,
       "agnCFlipDiscardDe": agnCFlipDiscardDe,
       "agnFlipDbControls": agnFlipDbControls,
       "agnCFlipDbSanityCheckCmd": agnCFlipDbSanityCheckCmd,
       "agnCSaveFlipDbCmd": agnCSaveFlipDbCmd,
       "agnCSaveNetCnfgIdxCmd": agnCSaveNetCnfgIdxCmd,
       "agnCSaveNetFlipDbCmd": agnCSaveNetFlipDbCmd,
       "agnCNetGoCmd": agnCNetGoCmd,
       "agnCNetDelay": agnCNetDelay,
       "agnCNetEventsBcast": agnCNetEventsBcast,
       "agnCNetEventsBcastInterval": agnCNetEventsBcastInterval,
       "agnSa": agnSa,
       "agnSaSwchStatus": agnSaSwchStatus,
       "agnListDecoding": agnListDecoding,
       "agnListDecodingTable": agnListDecodingTable,
       "agnListDecodingEntry": agnListDecodingEntry,
       "agnListDecodingType": agnListDecodingType,
       "agnListDecodingCode": agnListDecodingCode,
       "agnListDecodingDescription": agnListDecodingDescription,
       "agnListDecodingDefState": agnListDecodingDefState,
       "agnListDecodingSeverity": agnListDecodingSeverity,
       "agnListDecodingAcmRelaySlt": agnListDecodingAcmRelaySlt,
       "agnListDecodingAcmRelayPrt": agnListDecodingAcmRelayPrt,
       "agnSystemDlci": agnSystemDlci,
       "agnDlciTable": agnDlciTable,
       "agnDlciEntry": agnDlciEntry,
       "agnDlciCnfgIdx": agnDlciCnfgIdx,
       "agnDlciLSltIdx": agnDlciLSltIdx,
       "agnDlciLPrtIdx": agnDlciLPrtIdx,
       "agnDlciLIdx": agnDlciLIdx,
       "agnDlciHSltIdx": agnDlciHSltIdx,
       "agnDlciHPrtIdx": agnDlciHPrtIdx,
       "agnDlciHIdx": agnDlciHIdx,
       "agnDlciTxBc": agnDlciTxBc,
       "agnDlciTxBe": agnDlciTxBe,
       "agnDlciRxBc": agnDlciRxBc,
       "agnDlciRxBe": agnDlciRxBe,
       "agnDlciPriority": agnDlciPriority,
       "agnDlciStatus": agnDlciStatus,
       "agnDlciSpoofing": agnDlciSpoofing,
       "agnDlciFunnelEnable": agnDlciFunnelEnable,
       "agnDlciRoutingProtocol": agnDlciRoutingProtocol,
       "agnDlciRowStatus": agnDlciRowStatus,
       "agnVoiceSwitching": agnVoiceSwitching,
       "agnVoiceSwConfTable": agnVoiceSwConfTable,
       "agnVoiceSwConfEntry": agnVoiceSwConfEntry,
       "agnVoiceSwConfIdx": agnVoiceSwConfIdx,
       "agnVoiceSwConfZoneId": agnVoiceSwConfZoneId,
       "agnVoiceSwConfNodeId": agnVoiceSwConfNodeId,
       "agnVoiceSwConfNoOfHops": agnVoiceSwConfNoOfHops,
       "agnVoiceSwConfSidt": agnVoiceSwConfSidt,
       "agnVoiceSwConfLidt": agnVoiceSwConfLidt,
       "agnVoiceSwConfDialPlan": agnVoiceSwConfDialPlan,
       "agnVoiceSwConfRtTable": agnVoiceSwConfRtTable,
       "agnVoiceSwConfRtEntry": agnVoiceSwConfRtEntry,
       "agnVoiceSwConfRtDbId": agnVoiceSwConfRtDbId,
       "agnVoiceSwConfRtIdx": agnVoiceSwConfRtIdx,
       "agnVoiceSwConfRtDigits": agnVoiceSwConfRtDigits,
       "agnVoiceSwConfRtAction": agnVoiceSwConfRtAction,
       "agnVoiceSwConfRtData": agnVoiceSwConfRtData,
       "agnVoiceSwConfRtSlot": agnVoiceSwConfRtSlot,
       "agnVoiceSwConfRtPort": agnVoiceSwConfRtPort,
       "agnVoiceSwConfRtDlci": agnVoiceSwConfRtDlci,
       "agnVoiceSwConfRtRowStatus": agnVoiceSwConfRtRowStatus,
       "agnVoiceSwConfRtMaxCalls": agnVoiceSwConfRtMaxCalls,
       "agnVoiceSwConfRtPriority": agnVoiceSwConfRtPriority,
       "agnVoiceSwConfHGTable": agnVoiceSwConfHGTable,
       "agnVoiceSwConfHGEntry": agnVoiceSwConfHGEntry,
       "agnVoiceSwConfHGdbIdx": agnVoiceSwConfHGdbIdx,
       "agnVoiceSwConfHGIdx": agnVoiceSwConfHGIdx,
       "agnVoiceSwConfHGConnect": agnVoiceSwConfHGConnect,
       "agnVoiceSwConfHGExt": agnVoiceSwConfHGExt,
       "agnVoiceSwConfHGExtString": agnVoiceSwConfHGExtString,
       "agnVoiceSwConfHGUserParams": agnVoiceSwConfHGUserParams,
       "agnVoiceSwConfHGStatus": agnVoiceSwConfHGStatus,
       "agnSigProfile": agnSigProfile,
       "agnSigProfileTable": agnSigProfileTable,
       "agnSigProfileEntry": agnSigProfileEntry,
       "agnSigProfileCnfgIdx": agnSigProfileCnfgIdx,
       "agnSigProfileIdx": agnSigProfileIdx,
       "agnSigProfileRxTx": agnSigProfileRxTx,
       "agnSigProfileABCD": agnSigProfileABCD,
       "agnSigProfTable": agnSigProfTable,
       "agnSigProfEntry": agnSigProfEntry,
       "agnSigProfCnfgIdx": agnSigProfCnfgIdx,
       "agnSigProfIdx": agnSigProfIdx,
       "agnSigProfName": agnSigProfName,
       "agnSigProfType": agnSigProfType,
       "agnSystemTs": agnSystemTs,
       "systemVoice": systemVoice,
       "systemVoiceTable": systemVoiceTable,
       "systemVoiceEntry": systemVoiceEntry,
       "systemVoiceConfIdx": systemVoiceConfIdx,
       "systemVoiceNationalTone": systemVoiceNationalTone,
       "systemVoicePacketRate": systemVoicePacketRate,
       "systemVoiceFaxSupport": systemVoiceFaxSupport,
       "systemVoiceFaxRate": systemVoiceFaxRate,
       "systemVoiceModemSupport": systemVoiceModemSupport,
       "systemVoiceCoderAndRate": systemVoiceCoderAndRate,
       "systemVoiceEchoCanceler": systemVoiceEchoCanceler,
       "systemVoiceTxGain": systemVoiceTxGain,
       "systemVoiceDtmfRelayMethod": systemVoiceDtmfRelayMethod,
       "systemVoiceDtmfRelayRxPayloadType": systemVoiceDtmfRelayRxPayloadType,
       "systemVoiceDtmfRelayPayloadTypeNeg": systemVoiceDtmfRelayPayloadTypeNeg,
       "systemVoiceDtmfRelayTxPayloadType": systemVoiceDtmfRelayTxPayloadType,
       "systemVoiceCoderTable": systemVoiceCoderTable,
       "systemVoiceCoderEntry": systemVoiceCoderEntry,
       "systemVoiceCoderConfIdx": systemVoiceCoderConfIdx,
       "systemVoiceCoderPriority": systemVoiceCoderPriority,
       "systemVoiceCoderCoderAndRate": systemVoiceCoderCoderAndRate,
       "mdlWanGen": mdlWanGen,
       "statMdlGen": statMdlGen,
       "mdlSInstTable": mdlSInstTable,
       "mdlSInstEntry": mdlSInstEntry,
       "mdlSInstSltIdx": mdlSInstSltIdx,
       "mdlSInstCardType": mdlSInstCardType,
       "mdlSHwVersion": mdlSHwVersion,
       "mdlSSwVersion": mdlSSwVersion,
       "mdlSAlrStatus": mdlSAlrStatus,
       "mdlSAlrStatusAll": mdlSAlrStatusAll,
       "mdlSMaskedAlrStat": mdlSMaskedAlrStat,
       "mdlSMaskedAlrStatAll": mdlSMaskedAlrStatAll,
       "mdlSTstStatusAll": mdlSTstStatusAll,
       "mdlSClearAlrCmd": mdlSClearAlrCmd,
       "mdlSClearAllAlrCmd": mdlSClearAllAlrCmd,
       "mdlSTemperature": mdlSTemperature,
       "mdlSAlrTable": mdlSAlrTable,
       "mdlSAlrEntry": mdlSAlrEntry,
       "mdlSAlrIdx": mdlSAlrIdx,
       "mdlSAlrSltIdx": mdlSAlrSltIdx,
       "mdlSAlrCodeDescription": mdlSAlrCodeDescription,
       "mdlSAlrCode": mdlSAlrCode,
       "mdlSAlrSeverity": mdlSAlrSeverity,
       "mdlSAlrState": mdlSAlrState,
       "mdlSAlrCounter": mdlSAlrCounter,
       "mdlSAlrMask": mdlSAlrMask,
       "mdlSAlrInvert": mdlSAlrInvert,
       "cnfgMdlGen": cnfgMdlGen,
       "mdlCPrgTable": mdlCPrgTable,
       "mdlCPrgEntry": mdlCPrgEntry,
       "mdlCCnfgIdx": mdlCCnfgIdx,
       "mdlCSltIdx": mdlCSltIdx,
       "mdlCPrgCardType": mdlCPrgCardType,
       "mdlCNoOfExternPrt": mdlCNoOfExternPrt,
       "mdlCNoOfInternPrt": mdlCNoOfInternPrt,
       "mdlCWorkMode": mdlCWorkMode,
       "mdlCDhcpClientEnable": mdlCDhcpClientEnable,
       "mdlCRdnExists": mdlCRdnExists,
       "mdlCInterfaces": mdlCInterfaces,
       "cmprMdlGen": cmprMdlGen,
       "mdlCmprTable": mdlCmprTable,
       "mdlCmprEntry": mdlCmprEntry,
       "mdlCmprTypIdx": mdlCmprTypIdx,
       "mdlCmprCnfgIdx": mdlCmprCnfgIdx,
       "mdlCmprVersion": mdlCmprVersion,
       "mdlCmprSltIdx": mdlCmprSltIdx,
       "mdlCmprObj": mdlCmprObj,
       "mdlAlarmsCmprTable": mdlAlarmsCmprTable,
       "mdlAlarmsCmprEntry": mdlAlarmsCmprEntry,
       "mdlAlarmsCmprVersion": mdlAlarmsCmprVersion,
       "mdlAlarmsCmprAlarmSlot": mdlAlarmsCmprAlarmSlot,
       "mdlAlarmsCmprAlarmIdx": mdlAlarmsCmprAlarmIdx,
       "mdlAlarmsCmprObj": mdlAlarmsCmprObj,
       "prtWanGen": prtWanGen,
       "statPrtGen": statPrtGen,
       "prtSInstTable": prtSInstTable,
       "prtSInstEntry": prtSInstEntry,
       "prtSInstSltIdx": prtSInstSltIdx,
       "prtSInstPrtIdx": prtSInstPrtIdx,
       "prtSInstPrtType": prtSInstPrtType,
       "prtSInstIfIndex": prtSInstIfIndex,
       "prtSActiveStatus": prtSActiveStatus,
       "prtSAlrStatus": prtSAlrStatus,
       "prtSMaskedAlrStat": prtSMaskedAlrStat,
       "prtSClearAlrCmd": prtSClearAlrCmd,
       "prtSTestMask": prtSTestMask,
       "prtSTstCmd": prtSTstCmd,
       "prtSTstDuration": prtSTstDuration,
       "prtSBertClrCmd": prtSBertClrCmd,
       "prtSBertTstRslt": prtSBertTstRslt,
       "prtSInterfaceType": prtSInterfaceType,
       "prtSParamStatus": prtSParamStatus,
       "prtSTestMaskXp": prtSTestMaskXp,
       "prtSRdnStatus": prtSRdnStatus,
       "prtSAlrTable": prtSAlrTable,
       "prtSAlrEntry": prtSAlrEntry,
       "prtSAlrIdx": prtSAlrIdx,
       "prtSAlrSltIdx": prtSAlrSltIdx,
       "prtSAlrPrtIdx": prtSAlrPrtIdx,
       "prtSAlrCodeDescription": prtSAlrCodeDescription,
       "prtSAlrCode": prtSAlrCode,
       "prtSAlrSeverity": prtSAlrSeverity,
       "prtSAlrState": prtSAlrState,
       "prtSAlrCounter": prtSAlrCounter,
       "prtSAlrMask": prtSAlrMask,
       "prtSAlrInvert": prtSAlrInvert,
       "prtSAlrCardType": prtSAlrCardType,
       "statisPrtGen": statisPrtGen,
       "prtFrStatis": prtFrStatis,
       "prtFrStatisTable": prtFrStatisTable,
       "prtFrStatisEntry": prtFrStatisEntry,
       "prtFrStatisSltIdx": prtFrStatisSltIdx,
       "prtFrStatisPrtIdx": prtFrStatisPrtIdx,
       "prtFrStatisInvIdx": prtFrStatisInvIdx,
       "prtFrTimeElapsed": prtFrTimeElapsed,
       "prtFrRxTotalFrames": prtFrRxTotalFrames,
       "prtFrTxTotalFrames": prtFrTxTotalFrames,
       "prtFrRxTotalBytes": prtFrRxTotalBytes,
       "prtFrTxTotalBytes": prtFrTxTotalBytes,
       "prtFrRxMngFrames": prtFrRxMngFrames,
       "prtFrTxMngFrames": prtFrTxMngFrames,
       "prtFrRxDeFrames": prtFrRxDeFrames,
       "prtFrTxDeFrames": prtFrTxDeFrames,
       "prtFrRxDcrdCongDeFr": prtFrRxDcrdCongDeFr,
       "prtFrTxDcrdCongDeFr": prtFrTxDcrdCongDeFr,
       "prtFrRxDcrdCongAllFr": prtFrRxDcrdCongAllFr,
       "prtFrTxDcrdCongAllFr": prtFrTxDcrdCongAllFr,
       "prtFrRxFecn": prtFrRxFecn,
       "prtFrTxFecn": prtFrTxFecn,
       "prtFrRxBecn": prtFrRxBecn,
       "prtFrTxBecn": prtFrTxBecn,
       "prtFrRxBeViol": prtFrRxBeViol,
       "prtFrTxBeViol": prtFrTxBeViol,
       "prtFrRxBcViol": prtFrRxBcViol,
       "prtFrTxBcViol": prtFrTxBcViol,
       "prtCrStatis": prtCrStatis,
       "prtCrStatisTable": prtCrStatisTable,
       "prtCrStatisEntry": prtCrStatisEntry,
       "prtCrStatisSltIdx": prtCrStatisSltIdx,
       "prtCrStatisPrtIdx": prtCrStatisPrtIdx,
       "prtCrStatisInvIdx": prtCrStatisInvIdx,
       "prtCrTimeElapsed": prtCrTimeElapsed,
       "prtCrRxTotalCells": prtCrRxTotalCells,
       "prtCrTxTotalCells": prtCrTxTotalCells,
       "prtCrRxDataCells": prtCrRxDataCells,
       "prtCrTxDataCells": prtCrTxDataCells,
       "prtDlciStatis": prtDlciStatis,
       "prtDlciStatisTable": prtDlciStatisTable,
       "prtDlciStatisEntry": prtDlciStatisEntry,
       "prtDlciSltIdx": prtDlciSltIdx,
       "prtDlciPrtIdx": prtDlciPrtIdx,
       "prtDlciIdx": prtDlciIdx,
       "prtDlciRxDeFrames": prtDlciRxDeFrames,
       "prtDlciTxDeFrames": prtDlciTxDeFrames,
       "prtDlciRxDcrdCongDeFr": prtDlciRxDcrdCongDeFr,
       "prtDlciTxDcrdCongDeFr": prtDlciTxDcrdCongDeFr,
       "prtDlciRxDcrdCongAllFr": prtDlciRxDcrdCongAllFr,
       "prtDlciTxDcrdCongAllFr": prtDlciTxDcrdCongAllFr,
       "prtDlciTxFecn": prtDlciTxFecn,
       "prtDlciTxBecn": prtDlciTxBecn,
       "prtDlciRxBeViol": prtDlciRxBeViol,
       "prtDlciTxBeViol": prtDlciTxBeViol,
       "prtDlciRxBcViol": prtDlciRxBcViol,
       "prtDlciTxBcViol": prtDlciTxBcViol,
       "prtT1Statis": prtT1Statis,
       "prtT1FdlMsgTable": prtT1FdlMsgTable,
       "prtT1FdlMsgEntry": prtT1FdlMsgEntry,
       "prtT1FdlMsgSltIdx": prtT1FdlMsgSltIdx,
       "prtT1FdlMsgPrtIdx": prtT1FdlMsgPrtIdx,
       "prtT1FdlMsgFdlTxRx": prtT1FdlMsgFdlTxRx,
       "prtT1FdlMsg": prtT1FdlMsg,
       "cnfgPrtGen": cnfgPrtGen,
       "prtExTsSplitTable": prtExTsSplitTable,
       "prtExTsSplitEntry": prtExTsSplitEntry,
       "prtExTsCnfgIdx": prtExTsCnfgIdx,
       "prtExTsSltIdx": prtExTsSltIdx,
       "prtExTsPrtIdx": prtExTsPrtIdx,
       "prtExTsIdx": prtExTsIdx,
       "prtExTsBit": prtExTsBit,
       "prtExTsIConSlot": prtExTsIConSlot,
       "prtExTsIConPrt": prtExTsIConPrt,
       "prtExTsBitTest": prtExTsBitTest,
       "prtExTsTxSignaling": prtExTsTxSignaling,
       "prtExTsRxSignaling": prtExTsRxSignaling,
       "prtExTsTxIoSignaling": prtExTsTxIoSignaling,
       "prtExTsRxIoSignaling": prtExTsRxIoSignaling,
       "prtCnfgAgenda": prtCnfgAgenda,
       "prtAgendaBehaviourTable": prtAgendaBehaviourTable,
       "prtAgendaBehaviourEntry": prtAgendaBehaviourEntry,
       "prtAgendaBehaviourCnfgIdx": prtAgendaBehaviourCnfgIdx,
       "prtAgendaBehaviourSltIdx": prtAgendaBehaviourSltIdx,
       "prtAgendaBehaviourPrtIdx": prtAgendaBehaviourPrtIdx,
       "prtAgendaBehaviourOnOff": prtAgendaBehaviourOnOff,
       "prtCnfgAgendaTable": prtCnfgAgendaTable,
       "prtCnfgAgendaEntry": prtCnfgAgendaEntry,
       "prtCnfgAgendaCnfgIdx": prtCnfgAgendaCnfgIdx,
       "prtCnfgAgendaSltIdx": prtCnfgAgendaSltIdx,
       "prtCnfgAgendaPrtIdx": prtCnfgAgendaPrtIdx,
       "prtCnfgAgendaDayIdx": prtCnfgAgendaDayIdx,
       "prtCnfgAgendaSesId": prtCnfgAgendaSesId,
       "prtCnfgAgendaFrom": prtCnfgAgendaFrom,
       "prtCnfgAgendaTo": prtCnfgAgendaTo,
       "prtGenCnfgTable": prtGenCnfgTable,
       "prtGenCnfgEntry": prtGenCnfgEntry,
       "prtGenCnfgIdx": prtGenCnfgIdx,
       "prtGenCnfgSltIdx": prtGenCnfgSltIdx,
       "prtGenCnfgPrtIdx": prtGenCnfgPrtIdx,
       "prtGenCnfgLinkToSlot": prtGenCnfgLinkToSlot,
       "prtGenCnfgLinkToPort": prtGenCnfgLinkToPort,
       "prtGenCnfgPortId": prtGenCnfgPortId,
       "prtGenCnfgBusConnection": prtGenCnfgBusConnection,
       "prtGenCnfgInbandMng": prtGenCnfgInbandMng,
       "prtGenCnfgInbandMngRoutProt": prtGenCnfgInbandMngRoutProt,
       "prtGenCnfgProtectionMode": prtGenCnfgProtectionMode,
       "prtGenCnfgConnect": prtGenCnfgConnect,
       "prtGenCnfgSignalingType": prtGenCnfgSignalingType,
       "cmprPrtGen": cmprPrtGen,
       "prtCmprTable": prtCmprTable,
       "prtCmprEntry": prtCmprEntry,
       "prtCmprTypIdx": prtCmprTypIdx,
       "prtCmprCnfgIdx": prtCmprCnfgIdx,
       "prtCmprVersion": prtCmprVersion,
       "prtCmprSltIdx": prtCmprSltIdx,
       "prtCmprPrtIdx": prtCmprPrtIdx,
       "prtCmprObj": prtCmprObj,
       "prtCmprStatisticObj": prtCmprStatisticObj,
       "prtDlciCmprTable": prtDlciCmprTable,
       "prtDlciCmprEntry": prtDlciCmprEntry,
       "prtDlciCmprCnfgIdx": prtDlciCmprCnfgIdx,
       "prtDlciCmprVersion": prtDlciCmprVersion,
       "prtDlciCmprSltIdx": prtDlciCmprSltIdx,
       "prtDlciCmprPrtIdx": prtDlciCmprPrtIdx,
       "prtDlciCmprDlciIdx": prtDlciCmprDlciIdx,
       "prtDlciCmprObj": prtDlciCmprObj,
       "prtAlarmsCmprTable": prtAlarmsCmprTable,
       "prtAlarmsCmprEntry": prtAlarmsCmprEntry,
       "prtAlarmsCmprVersion": prtAlarmsCmprVersion,
       "prtAlarmsCmprAlarmSlot": prtAlarmsCmprAlarmSlot,
       "prtAlarmsCmprAlarmPort": prtAlarmsCmprAlarmPort,
       "prtAlarmsCmprAlarmIdx": prtAlarmsCmprAlarmIdx,
       "prtAlarmsCmprObj": prtAlarmsCmprObj,
       "mapWanGen": mapWanGen,
       "agnLinkMapTable": agnLinkMapTable,
       "agnLinkMapEntry": agnLinkMapEntry,
       "mapLinkId": mapLinkId,
       "mapLinkSltIdx": mapLinkSltIdx,
       "mapLinkPrtIdx": mapLinkPrtIdx,
       "mapLinkStatus": mapLinkStatus,
       "diverseIfWanGen": diverseIfWanGen,
       "ethIf": ethIf,
       "ethIfTable": ethIfTable,
       "ethIfEntry": ethIfEntry,
       "ethIfIdx": ethIfIdx,
       "ethMode": ethMode,
       "ethBridgingMode": ethBridgingMode,
       "ethEncapsulationCRCMode": ethEncapsulationCRCMode,
       "ethBackPressure": ethBackPressure,
       "ethLimit4": ethLimit4,
       "ethSkipInitReset": ethSkipInitReset,
       "ethMulticastBlock": ethMulticastBlock,
       "ethBroadcastBlock": ethBroadcastBlock,
       "ethSpeed": ethSpeed,
       "ethRip2": ethRip2,
       "ethPortPriority": ethPortPriority,
       "ethPortMngEnable": ethPortMngEnable,
       "ethFlowCtrlMacAddress": ethFlowCtrlMacAddress,
       "ethRateLimit": ethRateLimit,
       "ethJumboFrameEnable": ethJumboFrameEnable,
       "ethAutoMdiXEnable": ethAutoMdiXEnable,
       "ethPortDataEnable": ethPortDataEnable,
       "ethIfUse": ethIfUse,
       "ethLineOam": ethLineOam,
       "ethRoutingProtocol": ethRoutingProtocol,
       "ethMdiXManualSwitch": ethMdiXManualSwitch,
       "ethDot1xEnable": ethDot1xEnable,
       "ethPartnerRateMode": ethPartnerRateMode,
       "ethDot1xPortRole": ethDot1xPortRole,
       "ethIfPerformance": ethIfPerformance,
       "ethIfCurrentTable": ethIfCurrentTable,
       "ethIfCurrentEntry": ethIfCurrentEntry,
       "ethIfCurrentIndex": ethIfCurrentIndex,
       "ethIfCurrentStatus": ethIfCurrentStatus,
       "ethIfCurrentInFrames": ethIfCurrentInFrames,
       "ethIfCurrentInOctets": ethIfCurrentInOctets,
       "ethIfCurrentAlignmentErrors": ethIfCurrentAlignmentErrors,
       "ethIfCurrentFCSErrors": ethIfCurrentFCSErrors,
       "ethIfCurrentLengthError": ethIfCurrentLengthError,
       "ethIfCurrentOutFrames": ethIfCurrentOutFrames,
       "ethIfCurrentOutOctets": ethIfCurrentOutOctets,
       "ethIfCurrentSingleCollisionFrames": ethIfCurrentSingleCollisionFrames,
       "ethIfCurrentMultipleCollisionFrames": ethIfCurrentMultipleCollisionFrames,
       "ethIfCurrentDeferredTransmissions": ethIfCurrentDeferredTransmissions,
       "ethIfCurrentLateCollisions": ethIfCurrentLateCollisions,
       "ethIfCurrentCarrierSenseErrors": ethIfCurrentCarrierSenseErrors,
       "ethIfCurrentInputCongestionDropped": ethIfCurrentInputCongestionDropped,
       "ethIfCurrentOutputCongestionDropped": ethIfCurrentOutputCongestionDropped,
       "ethIfCurrentOverflowInFrames": ethIfCurrentOverflowInFrames,
       "ethIfCurrentOverflowInOctets": ethIfCurrentOverflowInOctets,
       "ethIfCurrentOverflowFCSErrors": ethIfCurrentOverflowFCSErrors,
       "ethIfCurrentOverflowOutFrames": ethIfCurrentOverflowOutFrames,
       "ethIfCurrentOverflowOutOctets": ethIfCurrentOverflowOutOctets,
       "ethIfCurrentOverflowMultipleCollisionFrames": ethIfCurrentOverflowMultipleCollisionFrames,
       "ethIfCurrentInUnicastFrames": ethIfCurrentInUnicastFrames,
       "ethIfCurrentOutUnicastFrames": ethIfCurrentOutUnicastFrames,
       "ethIfCurrentInMulticastFrames": ethIfCurrentInMulticastFrames,
       "ethIfCurrentOutMulticastFrames": ethIfCurrentOutMulticastFrames,
       "ethIfCurrentInBroadcastFrames": ethIfCurrentInBroadcastFrames,
       "ethIfCurrentOutBroadcastFrames": ethIfCurrentOutBroadcastFrames,
       "ethIfCurrentInDiscardFrames": ethIfCurrentInDiscardFrames,
       "ethIfCurrentOutDiscardFrames": ethIfCurrentOutDiscardFrames,
       "ethIfCurrentInPauseFrames": ethIfCurrentInPauseFrames,
       "ethIfCurrentOutPauseFrames": ethIfCurrentOutPauseFrames,
       "ethIfCurrentOverflowInUnicastFrames": ethIfCurrentOverflowInUnicastFrames,
       "ethIfCurrentOverflowOutUnicastFrames": ethIfCurrentOverflowOutUnicastFrames,
       "ethIfCurrentOverflowInMulticastFrames": ethIfCurrentOverflowInMulticastFrames,
       "ethIfCurrentOverflowOutMulticastFrames": ethIfCurrentOverflowOutMulticastFrames,
       "ethIfCurrentOverflowInBroadcastFrames": ethIfCurrentOverflowInBroadcastFrames,
       "ethIfCurrentOverflowOutBroadcastFrames": ethIfCurrentOverflowOutBroadcastFrames,
       "ethIfCurrentOverflowInDiscardFrames": ethIfCurrentOverflowInDiscardFrames,
       "ethIfCurrentOverflowOutDiscardFrames": ethIfCurrentOverflowOutDiscardFrames,
       "ethIfCurrentOverflowInPauseFrames": ethIfCurrentOverflowInPauseFrames,
       "ethIfCurrentOverflowOutPauseFrames": ethIfCurrentOverflowOutPauseFrames,
       "ethIfIntervalTable": ethIfIntervalTable,
       "ethIfIntervalEntry": ethIfIntervalEntry,
       "ethIfIntervalIndex": ethIfIntervalIndex,
       "ethIfIntervalNumber": ethIfIntervalNumber,
       "ethIfIntervalStatus": ethIfIntervalStatus,
       "ethIfIntervalInFrames": ethIfIntervalInFrames,
       "ethIfIntervalInOctets": ethIfIntervalInOctets,
       "ethIfIntervalAlignmentErrors": ethIfIntervalAlignmentErrors,
       "ethIfIntervalFCSErrors": ethIfIntervalFCSErrors,
       "ethIfIntervalLengthError": ethIfIntervalLengthError,
       "ethIfIntervalOutFrames": ethIfIntervalOutFrames,
       "ethIfIntervalOutOctets": ethIfIntervalOutOctets,
       "ethIfIntervalSingleCollisionFrames": ethIfIntervalSingleCollisionFrames,
       "ethIfIntervalMultipleCollisionFrames": ethIfIntervalMultipleCollisionFrames,
       "ethIfIntervalDeferredTransmissions": ethIfIntervalDeferredTransmissions,
       "ethIfIntervalLateCollisions": ethIfIntervalLateCollisions,
       "ethIfIntervalCarrierSenseErrors": ethIfIntervalCarrierSenseErrors,
       "ethIfIntervalInputCongestionDropped": ethIfIntervalInputCongestionDropped,
       "ethIfIntervalOutputCongestionDropped": ethIfIntervalOutputCongestionDropped,
       "ethIfIntervalOverflowInFrames": ethIfIntervalOverflowInFrames,
       "ethIfIntervalOverflowInOctets": ethIfIntervalOverflowInOctets,
       "ethIfIntervalOverflowFCSErrors": ethIfIntervalOverflowFCSErrors,
       "ethIfIntervalOverflowOutFrames": ethIfIntervalOverflowOutFrames,
       "ethIfIntervalOverflowOutOctets": ethIfIntervalOverflowOutOctets,
       "ethIfIntervalOverflowMultipleCollisionFrames": ethIfIntervalOverflowMultipleCollisionFrames,
       "ethIfIntervalInUnicastFrames": ethIfIntervalInUnicastFrames,
       "ethIfIntervalOutUnicastFrames": ethIfIntervalOutUnicastFrames,
       "ethIfIntervalInMulticastFrames": ethIfIntervalInMulticastFrames,
       "ethIfIntervalOutMulticastFrames": ethIfIntervalOutMulticastFrames,
       "ethIfIntervalInBroadcastFrames": ethIfIntervalInBroadcastFrames,
       "ethIfIntervalOutBroadcastFrames": ethIfIntervalOutBroadcastFrames,
       "ethIfIntervalInDiscardFrames": ethIfIntervalInDiscardFrames,
       "ethIfIntervalOutDiscardFrames": ethIfIntervalOutDiscardFrames,
       "ethIfIntervalInPauseFrames": ethIfIntervalInPauseFrames,
       "ethIfIntervalOutPauseFrames": ethIfIntervalOutPauseFrames,
       "ethIfIntervalOverflowInUnicastFrames": ethIfIntervalOverflowInUnicastFrames,
       "ethIfIntervalOverflowOutUnicastFrames": ethIfIntervalOverflowOutUnicastFrames,
       "ethIfIntervalOverflowInMulticastFrames": ethIfIntervalOverflowInMulticastFrames,
       "ethIfIntervalOverflowOutMulticastFrames": ethIfIntervalOverflowOutMulticastFrames,
       "ethIfIntervalOverflowInBroadcastFrames": ethIfIntervalOverflowInBroadcastFrames,
       "ethIfIntervalOverflowOutBroadcastFrames": ethIfIntervalOverflowOutBroadcastFrames,
       "ethIfIntervalOverflowInDiscardFrames": ethIfIntervalOverflowInDiscardFrames,
       "ethIfIntervalOverflowOutDiscardFrames": ethIfIntervalOverflowOutDiscardFrames,
       "ethIfIntervalOverflowInPauseFrames": ethIfIntervalOverflowInPauseFrames,
       "ethIfIntervalOverflowOutPauseFrames": ethIfIntervalOverflowOutPauseFrames,
       "ethPerformanceMode": ethPerformanceMode,
       "ethIfPerfTable": ethIfPerfTable,
       "ethIfPerfEntry": ethIfPerfEntry,
       "ethIfPerfInOkFrames": ethIfPerfInOkFrames,
       "ethIfPerfOutOkFrames": ethIfPerfOutOkFrames,
       "ethIfPerfTotalCollisions": ethIfPerfTotalCollisions,
       "ethIfPerfInOkOctets": ethIfPerfInOkOctets,
       "ethIfOamCfm": ethIfOamCfm,
       "ethIfOamCfmEvents": ethIfOamCfmEvents,
       "ethOamCfmDefectCondition": ethOamCfmDefectCondition,
       "radMepTable": radMepTable,
       "radMepEntry": radMepEntry,
       "radOamIdx1": radOamIdx1,
       "radOamEvcIdx": radOamEvcIdx,
       "radMepIdx": radMepIdx,
       "radMepRowStatus": radMepRowStatus,
       "radMepLocalMepId": radMepLocalMepId,
       "radMepRemoteMepId": radMepRemoteMepId,
       "radMepOamMode": radMepOamMode,
       "radMepContinuityVerMode": radMepContinuityVerMode,
       "radMepMeLevel": radMepMeLevel,
       "radMepOamDestAddrType": radMepOamDestAddrType,
       "radMepOamDestMacAddr": radMepOamDestMacAddr,
       "radMepDefaultPriority": radMepDefaultPriority,
       "radMepCcStatus": radMepCcStatus,
       "radMepOamProtocol": radMepOamProtocol,
       "radMepMdId": radMepMdId,
       "radMepMaFormat": radMepMaFormat,
       "radMepMaName": radMepMaName,
       "radMepSpVlanId": radMepSpVlanId,
       "radMepCcInterval": radMepCcInterval,
       "radMepTransmitLbmDestMacAddress": radMepTransmitLbmDestMacAddress,
       "radMepTransmitLbmDestMepId": radMepTransmitLbmDestMepId,
       "radMepTransmitLbmDestIsMepId": radMepTransmitLbmDestIsMepId,
       "radMepTransmitLbmMassages": radMepTransmitLbmMassages,
       "radMepTransmitLbmVlanPriority": radMepTransmitLbmVlanPriority,
       "radMepTransmitLbmVlanDropEnable": radMepTransmitLbmVlanDropEnable,
       "radMepLbrIn": radMepLbrIn,
       "radMepLbrInOutOfOrder": radMepLbrInOutOfOrder,
       "radMepLbmOut": radMepLbmOut,
       "radMepTransmitLtmTargetMacAddress": radMepTransmitLtmTargetMacAddress,
       "radMepTransmitLtmTargetMepId": radMepTransmitLtmTargetMepId,
       "radMepTransmitLtmTargetIsMepId": radMepTransmitLtmTargetIsMepId,
       "radMepTransmitLtmTtl": radMepTransmitLtmTtl,
       "radMepTransmitLtmActivationCmd": radMepTransmitLtmActivationCmd,
       "ethOamService": ethOamService,
       "ethOamServiceTable": ethOamServiceTable,
       "ethOamServiceEntry": ethOamServiceEntry,
       "ethOamServiceIdx": ethOamServiceIdx,
       "ethOamServiceRowStatus": ethOamServiceRowStatus,
       "ethOamServicePriority": ethOamServicePriority,
       "ethOamServicePmEnable": ethOamServicePmEnable,
       "ethOamServiceFrameLossRatioThresh": ethOamServiceFrameLossRatioThresh,
       "ethOamServiceDelayThresh": ethOamServiceDelayThresh,
       "ethOamServiceDelayVarThresh": ethOamServiceDelayVarThresh,
       "ethOamServiceUnavailRatioThresh": ethOamServiceUnavailRatioThresh,
       "ethOamServiceTxFrames": ethOamServiceTxFrames,
       "ethOamServiceOverflowTxFrames": ethOamServiceOverflowTxFrames,
       "ethOamServiceFrameLoss": ethOamServiceFrameLoss,
       "ethOamServiceOverflowFrameLoss": ethOamServiceOverflowFrameLoss,
       "ethOamServiceFrameLossRatio": ethOamServiceFrameLossRatio,
       "ethOamServiceElapsedTime": ethOamServiceElapsedTime,
       "ethOamServiceUnavailSec": ethOamServiceUnavailSec,
       "ethOamServiceUnavailRatio": ethOamServiceUnavailRatio,
       "ethOamServiceFramesAboveDelay": ethOamServiceFramesAboveDelay,
       "ethOamServiceOverflowFramesAboveDelay": ethOamServiceOverflowFramesAboveDelay,
       "ethOamServiceFramesAboveDelayVar": ethOamServiceFramesAboveDelayVar,
       "ethOamServiceOverflowFramesAboveDelayVar": ethOamServiceOverflowFramesAboveDelayVar,
       "ethOamSvcCurrentStatTable": ethOamSvcCurrentStatTable,
       "ethOamSvcCurrentStatEntry": ethOamSvcCurrentStatEntry,
       "ethOamSvcCurrFramesAboveDelayThresh": ethOamSvcCurrFramesAboveDelayThresh,
       "ethOamSvcCurrFramesBelowDelayThresh": ethOamSvcCurrFramesBelowDelayThresh,
       "ethOamSvcCurrFramesAboveDVarThresh": ethOamSvcCurrFramesAboveDVarThresh,
       "ethOamSvcCurrFramesBelowDVarThresh": ethOamSvcCurrFramesBelowDVarThresh,
       "ethOamSvcCurrFramesTxCounter": ethOamSvcCurrFramesTxCounter,
       "ethOamSvcCurrFramesLossCounter": ethOamSvcCurrFramesLossCounter,
       "ethOamSvcCurrMinRoundTripDelay": ethOamSvcCurrMinRoundTripDelay,
       "ethOamSvcCurrMaxRoundTripDelay": ethOamSvcCurrMaxRoundTripDelay,
       "ethOamSvcCurrAvgRoundTripDelay": ethOamSvcCurrAvgRoundTripDelay,
       "ethOamSvcCurrMaxRoundTripDVar": ethOamSvcCurrMaxRoundTripDVar,
       "ethOamSvcCurrAvgRoundTripDVar": ethOamSvcCurrAvgRoundTripDVar,
       "ethOamSvcCurrElapsedTime": ethOamSvcCurrElapsedTime,
       "ethOamSvcCurrUnavailSec": ethOamSvcCurrUnavailSec,
       "ethOamSvcIntervalTable": ethOamSvcIntervalTable,
       "ethOamSvcIntervalEntry": ethOamSvcIntervalEntry,
       "ethOamSvcIntervalNum": ethOamSvcIntervalNum,
       "ethOamSvcIntervalFramesAboveDelayThresh": ethOamSvcIntervalFramesAboveDelayThresh,
       "ethOamSvcIntervalFramesBelowDelayThresh": ethOamSvcIntervalFramesBelowDelayThresh,
       "ethOamSvcIntervalFramesAboveDVarThresh": ethOamSvcIntervalFramesAboveDVarThresh,
       "ethOamSvcIntervalFramesBelowDVarThresh": ethOamSvcIntervalFramesBelowDVarThresh,
       "ethOamSvcIntervalFramesTxCounter": ethOamSvcIntervalFramesTxCounter,
       "ethOamSvcIntervalFramesLossCounter": ethOamSvcIntervalFramesLossCounter,
       "ethOamSvcIntervalMinRoundTripDelay": ethOamSvcIntervalMinRoundTripDelay,
       "ethOamSvcIntervalMaxRoundTripDelay": ethOamSvcIntervalMaxRoundTripDelay,
       "ethOamSvcIntervalAvgRoundTripDelay": ethOamSvcIntervalAvgRoundTripDelay,
       "ethOamSvcIntervalMaxRoundTripDVar": ethOamSvcIntervalMaxRoundTripDVar,
       "ethOamSvcIntervalAvgRoundTripDVar": ethOamSvcIntervalAvgRoundTripDVar,
       "ethOamSvcIntervalUnavailSec": ethOamSvcIntervalUnavailSec,
       "ethOamSvcTotalTable": ethOamSvcTotalTable,
       "ethOamSvcTotalEntry": ethOamSvcTotalEntry,
       "ethOamSvcTotalFramesAboveDelayThresh": ethOamSvcTotalFramesAboveDelayThresh,
       "ethOamSvcTotalFramesBelowDelayThresh": ethOamSvcTotalFramesBelowDelayThresh,
       "ethOamSvcTotalFramesAboveDVarThresh": ethOamSvcTotalFramesAboveDVarThresh,
       "ethOamSvcTotalFramesBelowDVarThresh": ethOamSvcTotalFramesBelowDVarThresh,
       "ethOamSvcTotalFramesTxCounter": ethOamSvcTotalFramesTxCounter,
       "ethOamSvcTotalFramesLossCounter": ethOamSvcTotalFramesLossCounter,
       "ethOamSvcTotalMinRoundTripDelay": ethOamSvcTotalMinRoundTripDelay,
       "ethOamSvcTotalMaxRoundTripDelay": ethOamSvcTotalMaxRoundTripDelay,
       "ethOamSvcTotalAvgRoundTripDelay": ethOamSvcTotalAvgRoundTripDelay,
       "ethOamSvcTotalMaxRoundTripDVar": ethOamSvcTotalMaxRoundTripDVar,
       "ethOamSvcTotalAvgRoundTripDVar": ethOamSvcTotalAvgRoundTripDVar,
       "ethOamSvcTotalUnavailSec": ethOamSvcTotalUnavailSec,
       "radMdTable": radMdTable,
       "radMdEntry": radMdEntry,
       "radMdIndex": radMdIndex,
       "radMdFormat": radMdFormat,
       "radMdName": radMdName,
       "radMdRowStatus": radMdRowStatus,
       "radMepLtrTable": radMepLtrTable,
       "radMepLtrEntry": radMepLtrEntry,
       "radMepLtrReceiveOrder": radMepLtrReceiveOrder,
       "radMepLtrTtl": radMepLtrTtl,
       "radMepLtrMacAddr": radMepLtrMacAddr,
       "radMepLtrRelay": radMepLtrRelay,
       "radMepLtrIngress": radMepLtrIngress,
       "radMepLtrIngressPortIdSubtype": radMepLtrIngressPortIdSubtype,
       "radMepLtrIngressPortId": radMepLtrIngressPortId,
       "radMepLtrEgress": radMepLtrEgress,
       "radMepLtrEgressPortIdSubtype": radMepLtrEgressPortIdSubtype,
       "radMepLtrEgressPortId": radMepLtrEgressPortId,
       "radMepCcStatusTable": radMepCcStatusTable,
       "radMepCcStatusEntry": radMepCcStatusEntry,
       "radMepRemoteMepIdx": radMepRemoteMepIdx,
       "radMepCcStatusRemMepId": radMepCcStatusRemMepId,
       "radMepCcStat": radMepCcStat,
       "radMepCcStatusMacAddr": radMepCcStatusMacAddr,
       "ethOamStdEtherType": ethOamStdEtherType,
       "ethOamStdMacAddress": ethOamStdMacAddress,
       "dot1agXCfmMdTable": dot1agXCfmMdTable,
       "dot1agXCfmMdEntry": dot1agXCfmMdEntry,
       "dot1agXCfmMdProtocol": dot1agXCfmMdProtocol,
       "dot1agXCfmMepTable": dot1agXCfmMepTable,
       "dot1agXCfmMepEntry": dot1agXCfmMepEntry,
       "dot1agXCfmMepContinuityVerMode": dot1agXCfmMepContinuityVerMode,
       "dot1agXCfmMepDestAddrType": dot1agXCfmMepDestAddrType,
       "dot1agXCfmMepDestMacAddr": dot1agXCfmMepDestMacAddr,
       "dot1agXCfmMepDbTable": dot1agXCfmMepDbTable,
       "dot1agXCfmMepDbEntry": dot1agXCfmMepDbEntry,
       "dot1agXCfmMepCcStat": dot1agXCfmMepCcStat,
       "ethIfRing": ethIfRing,
       "ethIfRingEvents": ethIfRingEvents,
       "ethIfRingStatusChange": ethIfRingStatusChange,
       "ethIfRingTable": ethIfRingTable,
       "ethIfRingEntry": ethIfRingEntry,
       "ethIfRingIdx": ethIfRingIdx,
       "ethIfRingAdminStatus": ethIfRingAdminStatus,
       "ethIfRingPorts": ethIfRingPorts,
       "ethIfRingOperStatus": ethIfRingOperStatus,
       "ethIfRingKeepAliveInterval": ethIfRingKeepAliveInterval,
       "ethIfRingKeepAliveThresh": ethIfRingKeepAliveThresh,
       "ethIfRingKeepAliveVlanId": ethIfRingKeepAliveVlanId,
       "ethIfRingMultiCastVlanId": ethIfRingMultiCastVlanId,
       "ethIfRingRowStatus": ethIfRingRowStatus,
       "ethIfStorming": ethIfStorming,
       "ethIfStormTable": ethIfStormTable,
       "ethIfStormEntry": ethIfStormEntry,
       "ethIfStormCnfgIdx": ethIfStormCnfgIdx,
       "ethIfStormIfIdx": ethIfStormIfIdx,
       "ethIfStormDirection": ethIfStormDirection,
       "ethIfStormPacketType": ethIfStormPacketType,
       "ethIfStormCtrlEnable": ethIfStormCtrlEnable,
       "ethIfStormMaxRate": ethIfStormMaxRate,
       "ethIfOamEfm": ethIfOamEfm,
       "dot3OamEvents": dot3OamEvents,
       "dot3OamOperStatusChange": dot3OamOperStatusChange,
       "dot3OamPeerEvent": dot3OamPeerEvent,
       "dot3OamDescrTable": dot3OamDescrTable,
       "dot3OamDescrEntry": dot3OamDescrEntry,
       "dot3OamDescrId": dot3OamDescrId,
       "dot3OamDescrRowStatus": dot3OamDescrRowStatus,
       "dot3OamDescrMode": dot3OamDescrMode,
       "dot3OamDescrLbRxOperation": dot3OamDescrLbRxOperation,
       "dot3OamDescrRateLimit": dot3OamDescrRateLimit,
       "dot3OamXTable": dot3OamXTable,
       "dot3OamXEntry": dot3OamXEntry,
       "dot3OamXDescrId": dot3OamXDescrId,
       "dot3OamXPeerState": dot3OamXPeerState,
       "ethIfMacLayer": ethIfMacLayer,
       "ethIfMacLayerEvents": ethIfMacLayerEvents,
       "ethIfMacAccessViolation": ethIfMacAccessViolation,
       "ethIfSrcMacCtrlTable": ethIfSrcMacCtrlTable,
       "ethIfSrcMacCtrlEntry": ethIfSrcMacCtrlEntry,
       "ethIfSrcMacCtrlIndex": ethIfSrcMacCtrlIndex,
       "ethIfSrcMacCtrlIdx2": ethIfSrcMacCtrlIdx2,
       "ethIfSrcMacCtrl": ethIfSrcMacCtrl,
       "ethIfSrcMacCtrlMaxPermitAddr": ethIfSrcMacCtrlMaxPermitAddr,
       "ethIfSrcMacCtrlCurNumPermitAddr": ethIfSrcMacCtrlCurNumPermitAddr,
       "ethIfSrcMacCtrlFlushAddrCmd": ethIfSrcMacCtrlFlushAddrCmd,
       "ethIfSrcMacCtrlAging": ethIfSrcMacCtrlAging,
       "ethIfSrcMacCtrlLocking": ethIfSrcMacCtrlLocking,
       "ethIfSrcMacCtrlViolationAction": ethIfSrcMacCtrlViolationAction,
       "ethIfSrcMacCtrlLastViolatingAddr": ethIfSrcMacCtrlLastViolatingAddr,
       "ethIfSrcMacCtrlPortStatus": ethIfSrcMacCtrlPortStatus,
       "ethIfSrcMacCtrlAddrTable": ethIfSrcMacCtrlAddrTable,
       "ethIfSrcMacCtrlAddrEntry": ethIfSrcMacCtrlAddrEntry,
       "ethIfSrcMacCtrlAddrIndex": ethIfSrcMacCtrlAddrIndex,
       "ethIfSrcMacCtrlAddr": ethIfSrcMacCtrlAddr,
       "ethIfSrcMacCtrlAddrIdx3": ethIfSrcMacCtrlAddrIdx3,
       "ethIfSrcMacCtrlAddrRowStatus": ethIfSrcMacCtrlAddrRowStatus,
       "ethIfSrcMacCtrlAddrStatus": ethIfSrcMacCtrlAddrStatus,
       "ds3Interface": ds3Interface,
       "prtDs3PerfHistory": prtDs3PerfHistory,
       "prtSDs3IfTable": prtSDs3IfTable,
       "prtDs3IfEntry": prtDs3IfEntry,
       "prtDs3IfTimeElapsed": prtDs3IfTimeElapsed,
       "prtDs3IfValidIntervals": prtDs3IfValidIntervals,
       "prtDs3CurrentTable": prtDs3CurrentTable,
       "prtDs3CurrentEntry": prtDs3CurrentEntry,
       "prtDs3CurrentLOS": prtDs3CurrentLOS,
       "prtDs3CurrentOOF": prtDs3CurrentOOF,
       "prtDs3CurrentLOC": prtDs3CurrentLOC,
       "prtDs3CurrentAIS": prtDs3CurrentAIS,
       "prtDs3CurrentRDI": prtDs3CurrentRDI,
       "prtDs3CurrentUAS": prtDs3CurrentUAS,
       "prtDs3CurrentBIP": prtDs3CurrentBIP,
       "prtDs3CurrentFEBE": prtDs3CurrentFEBE,
       "prtDs3CurrentSLM": prtDs3CurrentSLM,
       "prtDs3CurrentSES": prtDs3CurrentSES,
       "prtDs3CurrentES": prtDs3CurrentES,
       "prtDs3CurrentBitParity": prtDs3CurrentBitParity,
       "prtDs3CurrentPlcpLOF": prtDs3CurrentPlcpLOF,
       "prtDs3CurrentPlcpRAI": prtDs3CurrentPlcpRAI,
       "prtDs3CurrentPlcpBIP": prtDs3CurrentPlcpBIP,
       "prtDs3CurrentPlcpFEBE": prtDs3CurrentPlcpFEBE,
       "prtDs3CurrentBPV": prtDs3CurrentBPV,
       "prtDs3CurrentLCE": prtDs3CurrentLCE,
       "prtDs3CurrentStatus": prtDs3CurrentStatus,
       "prtDs3IntervalTable": prtDs3IntervalTable,
       "prtDs3IntervalEntry": prtDs3IntervalEntry,
       "prtDs3IntervalNumber": prtDs3IntervalNumber,
       "prtDs3IntervalLOS": prtDs3IntervalLOS,
       "prtDs3IntervalOOF": prtDs3IntervalOOF,
       "prtDs3IntervalLOC": prtDs3IntervalLOC,
       "prtDs3IntervalAIS": prtDs3IntervalAIS,
       "prtDs3IntervalRDI": prtDs3IntervalRDI,
       "prtDs3IntervalUAS": prtDs3IntervalUAS,
       "prtDs3IntervalBIP": prtDs3IntervalBIP,
       "prtDs3IntervalFEBE": prtDs3IntervalFEBE,
       "prtDs3IntervalSLM": prtDs3IntervalSLM,
       "prtDs3IntervalSES": prtDs3IntervalSES,
       "prtDs3IntervalES": prtDs3IntervalES,
       "prtDs3IntervalBitParity": prtDs3IntervalBitParity,
       "prtDs3IntervalPlcpLOF": prtDs3IntervalPlcpLOF,
       "prtDs3IntervalPlcpRAI": prtDs3IntervalPlcpRAI,
       "prtDs3IntervalPlcpBIP": prtDs3IntervalPlcpBIP,
       "prtDs3IntervalPlcpFEBE": prtDs3IntervalPlcpFEBE,
       "prtDs3IntervalBPV": prtDs3IntervalBPV,
       "prtDs3IntervalLCE": prtDs3IntervalLCE,
       "prtDs3IntervalStatus": prtDs3IntervalStatus,
       "prtDs3TotalTable": prtDs3TotalTable,
       "prtDs3TotalEntry": prtDs3TotalEntry,
       "prtDs3TotalUAS": prtDs3TotalUAS,
       "prtDs3TotalBPV": prtDs3TotalBPV,
       "prtDs3TotalLCE": prtDs3TotalLCE,
       "prtDs3TotalSES": prtDs3TotalSES,
       "dsx3XConfigTable": dsx3XConfigTable,
       "dsx3XConfigEntry": dsx3XConfigEntry,
       "dsx3AisEnable": dsx3AisEnable,
       "dsx3TxClockSource": dsx3TxClockSource,
       "dsx3MappingTable": dsx3MappingTable,
       "dsx3MappingEntry": dsx3MappingEntry,
       "dsx3MappingDs3Index": dsx3MappingDs3Index,
       "dsx3MappingNumber": dsx3MappingNumber,
       "dsx3MappingIfIndex": dsx3MappingIfIndex,
       "ds1Interface": ds1Interface,
       "prtDS1Events": prtDS1Events,
       "ds1LocalMultiframeAlarmTrap": ds1LocalMultiframeAlarmTrap,
       "ds1RemoteMultiframeAlarmTrap": ds1RemoteMultiframeAlarmTrap,
       "ds1LinkFrameSlipTrap": ds1LinkFrameSlipTrap,
       "ds1BpvErrorTrap": ds1BpvErrorTrap,
       "ds1ExcessiveBpvTrap": ds1ExcessiveBpvTrap,
       "ds1Crc4ErrorTrap": ds1Crc4ErrorTrap,
       "ds1ExcessiveErrorRatioTrap": ds1ExcessiveErrorRatioTrap,
       "ds1RemoteSyncLossTrap": ds1RemoteSyncLossTrap,
       "ds1LocalSyncLossTrap": ds1LocalSyncLossTrap,
       "ds1AisSyncLossTrap": ds1AisSyncLossTrap,
       "ds1AisTrap": ds1AisTrap,
       "ds1NetworkRemoteLoopTrap": ds1NetworkRemoteLoopTrap,
       "ds1RemoteLoopTrap": ds1RemoteLoopTrap,
       "ds1LocalLoopTrap": ds1LocalLoopTrap,
       "ds1ExcessiveFrameSlipTrap": ds1ExcessiveFrameSlipTrap,
       "ds1ExcessiveCrc4ErrorTrap": ds1ExcessiveCrc4ErrorTrap,
       "ds1ExcessiveLocalMfAlarmTrap": ds1ExcessiveLocalMfAlarmTrap,
       "ds1ExcessiveRemoteMfAlarmTrap": ds1ExcessiveRemoteMfAlarmTrap,
       "ds1ExcessiveRemoteSyncLossTrap": ds1ExcessiveRemoteSyncLossTrap,
       "ds1ExcessiveLocalSyncLossTrap": ds1ExcessiveLocalSyncLossTrap,
       "ds1SignalLossTrap": ds1SignalLossTrap,
       "prtDs1PerfHistory": prtDs1PerfHistory,
       "dsx1XCurrentTable": dsx1XCurrentTable,
       "dsx1XCurrentEntry": dsx1XCurrentEntry,
       "dsx1CurrentLOS": dsx1CurrentLOS,
       "dsx1CurrentLOF": dsx1CurrentLOF,
       "dsx1CurrentLOC": dsx1CurrentLOC,
       "dsx1CurrentAIS": dsx1CurrentAIS,
       "dsx1CurrentRAI": dsx1CurrentRAI,
       "dsx1CurrentLOMF": dsx1CurrentLOMF,
       "dsx1CurrentFEBE": dsx1CurrentFEBE,
       "dsx1CurrentStatus": dsx1CurrentStatus,
       "dsx1CurrentBPV": dsx1CurrentBPV,
       "dsx1CurrentLOCRCMF": dsx1CurrentLOCRCMF,
       "dsx1CurrentLOFC": dsx1CurrentLOFC,
       "dsx1CurrentCRCErrors": dsx1CurrentCRCErrors,
       "dsx1XIntervalTable": dsx1XIntervalTable,
       "dsx1XIntervalEntry": dsx1XIntervalEntry,
       "dsx1IntervalLOS": dsx1IntervalLOS,
       "dsx1IntervalLOF": dsx1IntervalLOF,
       "dsx1IntervalLOC": dsx1IntervalLOC,
       "dsx1IntervalAIS": dsx1IntervalAIS,
       "dsx1IntervalRAI": dsx1IntervalRAI,
       "dsx1IntervalLOMF": dsx1IntervalLOMF,
       "dsx1IntervalFEBE": dsx1IntervalFEBE,
       "dsx1IntervalStatus": dsx1IntervalStatus,
       "dsx1IntervalBPV": dsx1IntervalBPV,
       "dsx1IntervalLOCRCMF": dsx1IntervalLOCRCMF,
       "dsx1IntervalLOFC": dsx1IntervalLOFC,
       "dsx1XTotalTable": dsx1XTotalTable,
       "dsx1XTotalEntry": dsx1XTotalEntry,
       "dsx1TotalLOS": dsx1TotalLOS,
       "dsx1TotalBPV": dsx1TotalBPV,
       "dsx1TotalLOFC": dsx1TotalLOFC,
       "dsx1DataStreamStatTable": dsx1DataStreamStatTable,
       "dsx1DataStreamStatEntry": dsx1DataStreamStatEntry,
       "dsx1DataStreamStatIfIndex": dsx1DataStreamStatIfIndex,
       "dsx1DataStreamStatIndex": dsx1DataStreamStatIndex,
       "dsx1DataStreamStatValid": dsx1DataStreamStatValid,
       "dsx1DataStreamStatInFrames": dsx1DataStreamStatInFrames,
       "dsx1DataStreamStatInBytes": dsx1DataStreamStatInBytes,
       "dsx1DataStreamStatInDiscards": dsx1DataStreamStatInDiscards,
       "dsx1DataStreamStatInErrors": dsx1DataStreamStatInErrors,
       "dsx1DataStreamStatOutFrames": dsx1DataStreamStatOutFrames,
       "dsx1DataStreamStatOutBytes": dsx1DataStreamStatOutBytes,
       "dsx1DataStreamStatOutDiscards": dsx1DataStreamStatOutDiscards,
       "dsx1DataStreamStatOutErrors": dsx1DataStreamStatOutErrors,
       "dsx1XConfigTable": dsx1XConfigTable,
       "dsx1XConfigEntry": dsx1XConfigEntry,
       "dsx1IdleCode": dsx1IdleCode,
       "dsx1LineMode": dsx1LineMode,
       "dsx1dBTxGain": dsx1dBTxGain,
       "dsx1RxSensitivity": dsx1RxSensitivity,
       "dsx1RestoreTime": dsx1RestoreTime,
       "dsx1TcFirstSignal": dsx1TcFirstSignal,
       "dsx1TcSignal": dsx1TcSignal,
       "dsx1TcPattern": dsx1TcPattern,
       "dsx1Scramble": dsx1Scramble,
       "dsx1LineAdaptiveTimingMode": dsx1LineAdaptiveTimingMode,
       "dsx1TxClockSource": dsx1TxClockSource,
       "dsx1AisEnable": dsx1AisEnable,
       "dsx1TsEchoCancel": dsx1TsEchoCancel,
       "dsx1EchoCancelerModule": dsx1EchoCancelerModule,
       "dsx1PortFunction": dsx1PortFunction,
       "dsx1PortMultiplier": dsx1PortMultiplier,
       "dsx1LeasedLine": dsx1LeasedLine,
       "dsx1CsuLoop": dsx1CsuLoop,
       "dsx1ClockSource": dsx1ClockSource,
       "dsx1OosSignal": dsx1OosSignal,
       "dsx1BundleNextIndex": dsx1BundleNextIndex,
       "dsx1CRC6CalcMode": dsx1CRC6CalcMode,
       "dsx1SendUponFail": dsx1SendUponFail,
       "ip2If": ip2If,
       "ip2IfTable": ip2IfTable,
       "ip2IfEntry": ip2IfEntry,
       "ip2IfChannelIndex": ip2IfChannelIndex,
       "ip2IfRowStatus": ip2IfRowStatus,
       "ip2IfOperStatus": ip2IfOperStatus,
       "ip2IfAdminStatus": ip2IfAdminStatus,
       "ip2IfDestAddr": ip2IfDestAddr,
       "ip2IfNextHop": ip2IfNextHop,
       "ip2IfDestPort": ip2IfDestPort,
       "ip2IfMacAddr": ip2IfMacAddr,
       "ip2IfJitterBuffer": ip2IfJitterBuffer,
       "ip2IfTos": ip2IfTos,
       "ip2IfTDMBytesInFrame": ip2IfTDMBytesInFrame,
       "ip2IfVlanSupport": ip2IfVlanSupport,
       "ip2IfVlanIdentifier": ip2IfVlanIdentifier,
       "ip2IfVlanFramePriority": ip2IfVlanFramePriority,
       "ip2IfExitPort": ip2IfExitPort,
       "ip2IfVoiceOos": ip2IfVoiceOos,
       "ip2IfDataOos": ip2IfDataOos,
       "ip2IfBundleUsage": ip2IfBundleUsage,
       "ip2IfOAM": ip2IfOAM,
       "ip2IfTDMoIpMode": ip2IfTDMoIpMode,
       "ip2IfTimeElapsed": ip2IfTimeElapsed,
       "ip2IfValidIntervals": ip2IfValidIntervals,
       "ip2IfFarEndType": ip2IfFarEndType,
       "ip2IfRdnState": ip2IfRdnState,
       "ip2IfSourceAddr": ip2IfSourceAddr,
       "ip2IfBandWidth": ip2IfBandWidth,
       "ip2IfMeasuredSilence": ip2IfMeasuredSilence,
       "ip2IfPayloadType": ip2IfPayloadType,
       "ip2IfProtocolVersion": ip2IfProtocolVersion,
       "ip2IfTdmBackUpNextHop": ip2IfTdmBackUpNextHop,
       "ip2IfOosTxEnable": ip2IfOosTxEnable,
       "ip2IfConnCheckPktFrequency": ip2IfConnCheckPktFrequency,
       "ip2IfConnPktTimeOutCycles": ip2IfConnPktTimeOutCycles,
       "ip2IfMfRelay": ip2IfMfRelay,
       "ip2IfTxGain": ip2IfTxGain,
       "ip2IfSuperTandem": ip2IfSuperTandem,
       "ip2IfSrcPort": ip2IfSrcPort,
       "ip2IfModemCalls": ip2IfModemCalls,
       "ip2IfMinPulseWidth": ip2IfMinPulseWidth,
       "ip2IfMinPowerLevel": ip2IfMinPowerLevel,
       "ip2IfEchoCanceler": ip2IfEchoCanceler,
       "ip2IfCodingLaw": ip2IfCodingLaw,
       "ip2IfCustomToneDetect": ip2IfCustomToneDetect,
       "ip2IfCallerIdDelay": ip2IfCallerIdDelay,
       "ip2IfConnectivityMode": ip2IfConnectivityMode,
       "ip2IfClockSourceEnable": ip2IfClockSourceEnable,
       "ip2IfNetworkType": ip2IfNetworkType,
       "ip2IfMplsRxLabelEnable": ip2IfMplsRxLabelEnable,
       "ip2IfMplsRxLabel": ip2IfMplsRxLabel,
       "ip2IfMplsTxLabelEnable": ip2IfMplsTxLabelEnable,
       "ip2IfMplsTxLabel": ip2IfMplsTxLabel,
       "ip2IfMplsTxExpBits": ip2IfMplsTxExpBits,
       "ip2IfMfcSpoofing": ip2IfMfcSpoofing,
       "ip2IfToneAckInterval": ip2IfToneAckInterval,
       "ip2IfNextHopType": ip2IfNextHopType,
       "ip2IfNoiseLevelForVAD": ip2IfNoiseLevelForVAD,
       "ip2IfClockPreferences": ip2IfClockPreferences,
       "ip2IfConnectionMode": ip2IfConnectionMode,
       "ip2IfRingBack": ip2IfRingBack,
       "ip2IfReversePolarity": ip2IfReversePolarity,
       "ip2IfPulseMeter": ip2IfPulseMeter,
       "ip2IfPulseMeterFreq": ip2IfPulseMeterFreq,
       "ip2IfPulseMeterPeriod": ip2IfPulseMeterPeriod,
       "ip2IfOnHookDetect": ip2IfOnHookDetect,
       "ip2IfComfortNoiseGen": ip2IfComfortNoiseGen,
       "ip2IfExitChannel": ip2IfExitChannel,
       "ip2IfMaxVBDModemCalls": ip2IfMaxVBDModemCalls,
       "ip2IfMaxRelayModemCalls": ip2IfMaxRelayModemCalls,
       "ip2IfCustomToneFrequency": ip2IfCustomToneFrequency,
       "ip2IfVadMethod": ip2IfVadMethod,
       "ip2IfRxGain": ip2IfRxGain,
       "ip2IfCallerIDType": ip2IfCallerIDType,
       "ip2IfPeerAddrType": ip2IfPeerAddrType,
       "ip2IfVbdRate": ip2IfVbdRate,
       "ip2IfDtmfDetection": ip2IfDtmfDetection,
       "ip2IfNlpCutoffLevel": ip2IfNlpCutoffLevel,
       "ip2IfDtdErlRatioCutoffQ3": ip2IfDtdErlRatioCutoffQ3,
       "ip2IfCASRedundancy": ip2IfCASRedundancy,
       "ip2IfBundleSensitivity": ip2IfBundleSensitivity,
       "ip2IfOAMBundleIdent": ip2IfOAMBundleIdent,
       "ip2IfMaxTxQueue": ip2IfMaxTxQueue,
       "ip2IfMaxGprsTxQueue": ip2IfMaxGprsTxQueue,
       "ip2IfV23HD": ip2IfV23HD,
       "ip2IfModemProtocolMode": ip2IfModemProtocolMode,
       "ip2IfCdisCngDetectionTime": ip2IfCdisCngDetectionTime,
       "ip2IfSuperTandemBitMask": ip2IfSuperTandemBitMask,
       "ip2IfVbdSwitchbackTime": ip2IfVbdSwitchbackTime,
       "ip2IfCallerIdTxGain": ip2IfCallerIdTxGain,
       "ip2IfCallerIdRxGain": ip2IfCallerIdRxGain,
       "ip2IfUdpMuxMethod": ip2IfUdpMuxMethod,
       "ip2IfCallerIdDetection": ip2IfCallerIdDetection,
       "ip2IfWap": ip2IfWap,
       "ip2IfTDMFrameBytes": ip2IfTDMFrameBytes,
       "ip2IfTosValue": ip2IfTosValue,
       "ip2IfVlanTagging": ip2IfVlanTagging,
       "ip2IfVlanID": ip2IfVlanID,
       "ip2IfVlanPriority": ip2IfVlanPriority,
       "ip2IfStatTable": ip2IfStatTable,
       "ip2IfStatEntry": ip2IfStatEntry,
       "ip2IfStatChIndex": ip2IfStatChIndex,
       "ip2IfStatSeqErrors": ip2IfStatSeqErrors,
       "ip2IfStatBufUnderflows": ip2IfStatBufUnderflows,
       "ip2IfStatBufOverflows": ip2IfStatBufOverflows,
       "ip2IfStatTxOnTimeInterval": ip2IfStatTxOnTimeInterval,
       "ip2IfStatTxOnMaxSize": ip2IfStatTxOnMaxSize,
       "ip2IfStatRxSignaling": ip2IfStatRxSignaling,
       "ip2IfStatRxVoice": ip2IfStatRxVoice,
       "ip2IfStatRxHdlc": ip2IfStatRxHdlc,
       "ip2IfStatTxSignaling": ip2IfStatTxSignaling,
       "ip2IfStatTxVoice": ip2IfStatTxVoice,
       "ip2IfStatTxHdlc": ip2IfStatTxHdlc,
       "ip2IfStatRdnFlip": ip2IfStatRdnFlip,
       "ip2IfFarEndTdmStatus": ip2IfFarEndTdmStatus,
       "ip2IfStatPsnTxFrames": ip2IfStatPsnTxFrames,
       "ip2IfStatPsnRxFrames": ip2IfStatPsnRxFrames,
       "ip2IfStatMinJittBufLevel": ip2IfStatMinJittBufLevel,
       "ip2IfStatMaxJittBufLevel": ip2IfStatMaxJittBufLevel,
       "ip2IfStatRecommendedJittBufSize": ip2IfStatRecommendedJittBufSize,
       "ip2IfStatPsnSeqErrors": ip2IfStatPsnSeqErrors,
       "ip2IfStatPsnReorderFrames": ip2IfStatPsnReorderFrames,
       "ip2IfStatMinRoundTripDelay": ip2IfStatMinRoundTripDelay,
       "ip2IfStatMaxRoundTripDelay": ip2IfStatMaxRoundTripDelay,
       "ip2IfStatAvrRoundTripDelay": ip2IfStatAvrRoundTripDelay,
       "ip2IfStatFrameTrackDupDrop": ip2IfStatFrameTrackDupDrop,
       "ip2IfStatFrameTrackMissing": ip2IfStatFrameTrackMissing,
       "ip2IfStatFrameTrackLongSerMiss": ip2IfStatFrameTrackLongSerMiss,
       "ip2IfStatTxMeasuredSilence": ip2IfStatTxMeasuredSilence,
       "ip2IfStatRxMeasuredSilence": ip2IfStatRxMeasuredSilence,
       "ip2IfStatHdlcCrcErr": ip2IfStatHdlcCrcErr,
       "ip2IfStatHdlcAlignErr": ip2IfStatHdlcAlignErr,
       "ip2IfStatHdlcOversize": ip2IfStatHdlcOversize,
       "ip2IfStatHdlcUndersize": ip2IfStatHdlcUndersize,
       "ip2IfStatHdlcAbort": ip2IfStatHdlcAbort,
       "ip2IfStatRxCorrectFrames": ip2IfStatRxCorrectFrames,
       "ip2IfStatHdlcErroredFrames": ip2IfStatHdlcErroredFrames,
       "ip2IfRateLimit": ip2IfRateLimit,
       "ip2IfPortTable": ip2IfPortTable,
       "ip2IfPortEntry": ip2IfPortEntry,
       "ip2IfPortIndex": ip2IfPortIndex,
       "ip2IfPortUsage": ip2IfPortUsage,
       "ip2IfPortMask": ip2IfPortMask,
       "ip2IfPortTotalThroughput": ip2IfPortTotalThroughput,
       "ip2IfCurrentStatTable": ip2IfCurrentStatTable,
       "ip2IfCurrentStatEntry": ip2IfCurrentStatEntry,
       "ip2IfCurrentStatSeqErrors": ip2IfCurrentStatSeqErrors,
       "ip2IfCurrentStatBufUnderflows": ip2IfCurrentStatBufUnderflows,
       "ip2IfCurrentStatBufOverflows": ip2IfCurrentStatBufOverflows,
       "ip2IfCurrentStatMaxDelayVar": ip2IfCurrentStatMaxDelayVar,
       "ip2IfCurrentStatMinJittBufLevel": ip2IfCurrentStatMinJittBufLevel,
       "ip2IfCurrentStatMaxJittBufLevel": ip2IfCurrentStatMaxJittBufLevel,
       "ip2IfCurrentStatTxErrFrameSec": ip2IfCurrentStatTxErrFrameSec,
       "ip2IfIntervalStatTable": ip2IfIntervalStatTable,
       "ip2IfIntervalStatEntry": ip2IfIntervalStatEntry,
       "ip2IfIntervalStatIndex": ip2IfIntervalStatIndex,
       "ip2IfIntervalStatSeqErrors": ip2IfIntervalStatSeqErrors,
       "ip2IfIntervalStatBufUnderflows": ip2IfIntervalStatBufUnderflows,
       "ip2IfIntervalStatBufOverflows": ip2IfIntervalStatBufOverflows,
       "ip2IfIntervalStatMaxDelayVar": ip2IfIntervalStatMaxDelayVar,
       "ip2IfIntervalStatMinJittBufLevel": ip2IfIntervalStatMinJittBufLevel,
       "ip2IfIntervalStatMaxJittBufLevel": ip2IfIntervalStatMaxJittBufLevel,
       "ip2IfIntervalStatTxErrFrameSec": ip2IfIntervalStatTxErrFrameSec,
       "ip2IfLogEvents": ip2IfLogEvents,
       "ip2IfEthSwitchMode": ip2IfEthSwitchMode,
       "broadbandIf": broadbandIf,
       "bdbandConfig": bdbandConfig,
       "prtBdbandIndTable": prtBdbandIndTable,
       "prtBdbandIndEntry": prtBdbandIndEntry,
       "prtBdbandCnfgIdx": prtBdbandCnfgIdx,
       "prtBdbandIdx": prtBdbandIdx,
       "prtBdbandIndSig": prtBdbandIndSig,
       "prtBdbandIndEvent": prtBdbandIndEvent,
       "prtBdbandIndSigEnable": prtBdbandIndSigEnable,
       "prtBdbandRowStatus": prtBdbandRowStatus,
       "prtPhyConfigTable": prtPhyConfigTable,
       "prtPhyConfigEntry": prtPhyConfigEntry,
       "prtPhyTimeElapsed": prtPhyTimeElapsed,
       "prtPhyValidIntervals": prtPhyValidIntervals,
       "prtPhyPerfHistory": prtPhyPerfHistory,
       "prtPhyCurrentTable": prtPhyCurrentTable,
       "prtPhyCurrentEntry": prtPhyCurrentEntry,
       "prtPhyCurrentLOS": prtPhyCurrentLOS,
       "prtPhyCurrentLSV": prtPhyCurrentLSV,
       "prtPhyCurrentUAS": prtPhyCurrentUAS,
       "prtPhyCurrentSES": prtPhyCurrentSES,
       "prtPhyCurrentES": prtPhyCurrentES,
       "prtPhyCurrentStatus": prtPhyCurrentStatus,
       "prtPhyCurrentLOF": prtPhyCurrentLOF,
       "prtPhyIntervalTable": prtPhyIntervalTable,
       "prtPhyIntervalEntry": prtPhyIntervalEntry,
       "prtPhyIntervalNumber": prtPhyIntervalNumber,
       "prtPhyIntervalLOS": prtPhyIntervalLOS,
       "prtPhyIntervalLSV": prtPhyIntervalLSV,
       "prtPhyIntervalUAS": prtPhyIntervalUAS,
       "prtPhyIntervalSES": prtPhyIntervalSES,
       "prtPhyIntervalES": prtPhyIntervalES,
       "prtPhyIntervalStatus": prtPhyIntervalStatus,
       "prtPhyIntervalLOF": prtPhyIntervalLOF,
       "muxHub": muxHub,
       "muxHubEvents": muxHubEvents,
       "alarmsTrap": alarmsTrap,
       "sanityTrap": sanityTrap,
       "cnfgFlipTrap": cnfgFlipTrap,
       "flipDbChangeTrap": flipDbChangeTrap,
       "statusChangedTrap": statusChangedTrap,
       "agnMux": agnMux,
       "mdlMux": mdlMux,
       "cnfgMdlMux": cnfgMdlMux,
       "mdlPbxFramerCnfg": mdlPbxFramerCnfg,
       "mdlPbxFramerCnfgTable": mdlPbxFramerCnfgTable,
       "mdlPbxFramerCnfgEntry": mdlPbxFramerCnfgEntry,
       "mdlPbxFraCnfgIdx": mdlPbxFraCnfgIdx,
       "mdlPbxFraSltIdx": mdlPbxFraSltIdx,
       "mdlPbxFraEnhEcho": mdlPbxFraEnhEcho,
       "mdlPbxFraTSGroupAss": mdlPbxFraTSGroupAss,
       "mdlPbxFraSignalMode": mdlPbxFraSignalMode,
       "mdlPbxFraSignalVector": mdlPbxFraSignalVector,
       "mdlPbxFraSignalMask": mdlPbxFraSignalMask,
       "mdlPbxFraFramerSlot": mdlPbxFraFramerSlot,
       "mdlPbxFraSignaling": mdlPbxFraSignaling,
       "mdlPbxFraTransSigTs": mdlPbxFraTransSigTs,
       "mdlProtIpTable": mdlProtIpTable,
       "mdlProtIpEntry": mdlProtIpEntry,
       "mdlProtIpCnfgIdx": mdlProtIpCnfgIdx,
       "mdlProtIpSlotIdx": mdlProtIpSlotIdx,
       "mdlProtIpAddress": mdlProtIpAddress,
       "mdlProtIpRowStatus": mdlProtIpRowStatus,
       "statMdlMux": statMdlMux,
       "mdlStatTable": mdlStatTable,
       "mdlStatEntry": mdlStatEntry,
       "mdlStatSltIdx": mdlStatSltIdx,
       "mdlStatHostIP": mdlStatHostIP,
       "mdlStatHostMask": mdlStatHostMask,
       "mdlStatDefaultGateway": mdlStatDefaultGateway,
       "prtMux": prtMux,
       "statPrtMux": statPrtMux,
       "prtSExHsfStatTable": prtSExHsfStatTable,
       "prtSExHsfStatEntry": prtSExHsfStatEntry,
       "prtSExHsfSltIdx": prtSExHsfSltIdx,
       "prtSExHsfPrtIdx": prtSExHsfPrtIdx,
       "prtSExHsfInterfaceTyp": prtSExHsfInterfaceTyp,
       "prtSExHsfRts": prtSExHsfRts,
       "prtIsdnStatusTable": prtIsdnStatusTable,
       "prtIsdnStatusEntry": prtIsdnStatusEntry,
       "prtIsdnStatusDspMode": prtIsdnStatusDspMode,
       "prtIsdnStatusCallState": prtIsdnStatusCallState,
       "prtIsdnStatusCallingNumber": prtIsdnStatusCallingNumber,
       "prtIsdnStatusCalledNumber": prtIsdnStatusCalledNumber,
       "prtIsdnStatusCalledIP": prtIsdnStatusCalledIP,
       "prtIsdnStatusCallDirection": prtIsdnStatusCallDirection,
       "cnfgPrtMux": cnfgPrtMux,
       "prtClCnfg": prtClCnfg,
       "prtExClCnfgTable": prtExClCnfgTable,
       "prtExClCnfgEntry": prtExClCnfgEntry,
       "prtExClCnfgIdx": prtExClCnfgIdx,
       "prtExClSltIdx": prtExClSltIdx,
       "prtExClPrtIdx": prtExClPrtIdx,
       "prtExClUsage": prtExClUsage,
       "prtExClRate": prtExClRate,
       "prtExClDataBits": prtExClDataBits,
       "prtExClParity": prtExClParity,
       "prtExClStopBits": prtExClStopBits,
       "prtExClRoutingProtocol": prtExClRoutingProtocol,
       "prtExClEnabled": prtExClEnabled,
       "prtPh1MlCnfg": prtPh1MlCnfg,
       "prtExPh1MlCnfgTable": prtExPh1MlCnfgTable,
       "prtExPh1MlCnfgEntry": prtExPh1MlCnfgEntry,
       "prtExPh1MlCnfgIdx": prtExPh1MlCnfgIdx,
       "prtExPh1MlSltIdx": prtExPh1MlSltIdx,
       "prtExPh1MlPrtIdx": prtExPh1MlPrtIdx,
       "prtExPh1MlConnect": prtExPh1MlConnect,
       "prtExPh1MlLineType": prtExPh1MlLineType,
       "prtExPh1MlLineCode": prtExPh1MlLineCode,
       "prtExPh1MlLineLen": prtExPh1MlLineLen,
       "prtExPh1MlRestoreTime": prtExPh1MlRestoreTime,
       "prtExPh1MlTxGain": prtExPh1MlTxGain,
       "prtExPh1MlRxSensitivity": prtExPh1MlRxSensitivity,
       "prtExPh1MlIdleCode": prtExPh1MlIdleCode,
       "prtExPh1MlTdmTrunk": prtExPh1MlTdmTrunk,
       "prtExPh1MlClkMode": prtExPh1MlClkMode,
       "prtExPh1MlMfClkSrcSlt": prtExPh1MlMfClkSrcSlt,
       "prtExPh1MlMfClkSrcPrt": prtExPh1MlMfClkSrcPrt,
       "prtExPh1MlFdlType": prtExPh1MlFdlType,
       "prtExPh1MlInbandMng": prtExPh1MlInbandMng,
       "prtExPh1MlInbandMngRate": prtExPh1MlInbandMngRate,
       "prtExPh1MlRedundType": prtExPh1MlRedundType,
       "prtExPh1MlRedundSlot": prtExPh1MlRedundSlot,
       "prtExPh1MlRedundPort": prtExPh1MlRedundPort,
       "prtExPh1MlRedundRecTime": prtExPh1MlRedundRecTime,
       "prtExPh1MlInbandMngRoutProt": prtExPh1MlInbandMngRoutProt,
       "prtExPh1MlIfType": prtExPh1MlIfType,
       "prtExPh1MlMultiplier": prtExPh1MlMultiplier,
       "prtExPh1MlSupportedTS": prtExPh1MlSupportedTS,
       "prtExPh1MlImpedance": prtExPh1MlImpedance,
       "prtExPh1MlQ50BwControl": prtExPh1MlQ50BwControl,
       "prtExPh1MlQ50SignalPair": prtExPh1MlQ50SignalPair,
       "prtExPh1MlInternalSwitch": prtExPh1MlInternalSwitch,
       "prtExPh1MlSigService": prtExPh1MlSigService,
       "prtExPh1MlFragmentSize": prtExPh1MlFragmentSize,
       "prtExPh1MlTsTable": prtExPh1MlTsTable,
       "prtExPh1MlTsEntry": prtExPh1MlTsEntry,
       "prtExPh1MlTsCnfgIdx": prtExPh1MlTsCnfgIdx,
       "prtExPh1MlTsSltIdx": prtExPh1MlTsSltIdx,
       "prtExPh1MlTsPrtIdx": prtExPh1MlTsPrtIdx,
       "prtExPh1MlTsIdx": prtExPh1MlTsIdx,
       "prtExPh1MlTsIConSlot": prtExPh1MlTsIConSlot,
       "prtExPh1MlTsIConPrt": prtExPh1MlTsIConPrt,
       "prtExPh1MlTsIConTs": prtExPh1MlTsIConTs,
       "prtExPh1MlTsExt": prtExPh1MlTsExt,
       "prtExPh1MlTsTest": prtExPh1MlTsTest,
       "prtExPh1MlTsType": prtExPh1MlTsType,
       "prtExPh1MlTsBundle": prtExPh1MlTsBundle,
       "prtExPh1MlTsTestDuration": prtExPh1MlTsTestDuration,
       "prtExPh1MlTsSubChType": prtExPh1MlTsSubChType,
       "prtExPh1MlTsSubChMask": prtExPh1MlTsSubChMask,
       "prtExPh1MlTsChRate": prtExPh1MlTsChRate,
       "prtExPh1MlTsByteReversal": prtExPh1MlTsByteReversal,
       "prtExPh1MlTsSigProfile": prtExPh1MlTsSigProfile,
       "prtInPh1MlCnfgTable": prtInPh1MlCnfgTable,
       "prtInPh1MlCnfgEntry": prtInPh1MlCnfgEntry,
       "prtInPh1MlCnfgIdx": prtInPh1MlCnfgIdx,
       "prtInPh1MlSltType": prtInPh1MlSltType,
       "prtInPh1MlPrtIdx": prtInPh1MlPrtIdx,
       "prtInPh1MlConnect": prtInPh1MlConnect,
       "prtInPh1MlRate": prtInPh1MlRate,
       "prtInPh1MlProtocol": prtInPh1MlProtocol,
       "prtInPh1MlConnectionTyp": prtInPh1MlConnectionTyp,
       "prtInPh1MlCongResponse": prtInPh1MlCongResponse,
       "prtInPh1MlCongLevel": prtInPh1MlCongLevel,
       "prtInPh1MlTc": prtInPh1MlTc,
       "prtInPh1MlFlowControl": prtInPh1MlFlowControl,
       "prtInPh1MlSegment": prtInPh1MlSegment,
       "prtInPh1MlFrMngProt": prtInPh1MlFrMngProt,
       "prtInPh1MlEnqPeriod": prtInPh1MlEnqPeriod,
       "prtInPh1MlFullRptPeriod": prtInPh1MlFullRptPeriod,
       "prtInPh1MlFrWindowSize": prtInPh1MlFrWindowSize,
       "prtInPh1MlErrorsThreshold": prtInPh1MlErrorsThreshold,
       "prtInPh1MlMaxIdleTime": prtInPh1MlMaxIdleTime,
       "prtInPh1MlBearerCh": prtInPh1MlBearerCh,
       "prtInPh1MlAssociatedExCh": prtInPh1MlAssociatedExCh,
       "prtInPh1MlClockEncoding": prtInPh1MlClockEncoding,
       "prtInPh1MlMinSeparators": prtInPh1MlMinSeparators,
       "prtInPh1MlCcittCrc": prtInPh1MlCcittCrc,
       "prtInPh1MlFrameSeparator": prtInPh1MlFrameSeparator,
       "prtInPh1MlDlciTable": prtInPh1MlDlciTable,
       "prtInPh1MlDlciEntry": prtInPh1MlDlciEntry,
       "prtInPh1MlDlciCnfgIdx": prtInPh1MlDlciCnfgIdx,
       "prtInPh1MlDlciSltIdx": prtInPh1MlDlciSltIdx,
       "prtInPh1MlDlciPrtIdx": prtInPh1MlDlciPrtIdx,
       "prtInPh1MlDlciIdx": prtInPh1MlDlciIdx,
       "prtInPh1MlDlciValid": prtInPh1MlDlciValid,
       "prtInPh1MlDlciIConSlt": prtInPh1MlDlciIConSlt,
       "prtInPh1MlDlciIConPrt": prtInPh1MlDlciIConPrt,
       "prtInPh1MlDlciIConDlci": prtInPh1MlDlciIConDlci,
       "prtInPh1MlDlciTxBc": prtInPh1MlDlciTxBc,
       "prtInPh1MlDlciTxBe": prtInPh1MlDlciTxBe,
       "prtInPh1MlDlciRxBc": prtInPh1MlDlciRxBc,
       "prtInPh1MlDlciRxBe": prtInPh1MlDlciRxBe,
       "prtInPh1MlDlciPriority": prtInPh1MlDlciPriority,
       "prtInPh1MlDlciStatus": prtInPh1MlDlciStatus,
       "prtPhMlCnfgTable": prtPhMlCnfgTable,
       "prtPhMlCnfgEntry": prtPhMlCnfgEntry,
       "prtPhMlCnfgIdx": prtPhMlCnfgIdx,
       "prtPhMlSltIdx": prtPhMlSltIdx,
       "prtPhMlPrtIdx": prtPhMlPrtIdx,
       "prtPhMlConnect": prtPhMlConnect,
       "prtPhMlRate": prtPhMlRate,
       "prtPhMlCAS": prtPhMlCAS,
       "prtPhMlClockMode": prtPhMlClockMode,
       "prtPhMlSatBuffer": prtPhMlSatBuffer,
       "prtPhMlDialProcess": prtPhMlDialProcess,
       "prtPhMlSyncRestore": prtPhMlSyncRestore,
       "prtPhMlBus": prtPhMlBus,
       "prtPhMlMfSyncSlot": prtPhMlMfSyncSlot,
       "prtPhMlClockSource": prtPhMlClockSource,
       "prtPhMlErrCorrection": prtPhMlErrCorrection,
       "prtPhMlCorrectionMode": prtPhMlCorrectionMode,
       "prtPhMlControlSignals": prtPhMlControlSignals,
       "prtPhMlInterfaceType": prtPhMlInterfaceType,
       "prtPhMlClockPolarity": prtPhMlClockPolarity,
       "prtPhPlCnfg": prtPhPlCnfg,
       "prtExPhPlCnfgTable": prtExPhPlCnfgTable,
       "prtExPhPlCnfgEntry": prtExPhPlCnfgEntry,
       "prtExPhPlCnfgIdx": prtExPhPlCnfgIdx,
       "prtExPhPlSltIdx": prtExPhPlSltIdx,
       "prtExPhPlPrtIdx": prtExPhPlPrtIdx,
       "prtExPhPlConnect": prtExPhPlConnect,
       "prtExPhPlHRate": prtExPhPlHRate,
       "prtExPhPlLRate": prtExPhPlLRate,
       "prtExPhPlProtocol": prtExPhPlProtocol,
       "prtExPhPlConnectionTyp": prtExPhPlConnectionTyp,
       "prtExPhPlClkMode": prtExPhPlClkMode,
       "prtExPhPlDceClkSrc": prtExPhPlDceClkSrc,
       "prtExPhPlCongResponse": prtExPhPlCongResponse,
       "prtExPhPlCongLevel": prtExPhPlCongLevel,
       "prtExPhPlTc": prtExPhPlTc,
       "prtExPhPlFlowControl": prtExPhPlFlowControl,
       "prtExPhPlDcdRts": prtExPhPlDcdRts,
       "prtExPhPlDcdRtsControlPath": prtExPhPlDcdRtsControlPath,
       "prtExPhPlDataBits": prtExPhPlDataBits,
       "prtExPhPlParity": prtExPhPlParity,
       "prtExPhPlStopBits": prtExPhPlStopBits,
       "prtExPhPlLXon": prtExPhPlLXon,
       "prtExPhPlLXoff": prtExPhPlLXoff,
       "prtExPhPlFrMngProt": prtExPhPlFrMngProt,
       "prtExPhPlEnqPeriod": prtExPhPlEnqPeriod,
       "prtExPhPlFullRptPeriod": prtExPhPlFullRptPeriod,
       "prtExPhPlFrWindowSize": prtExPhPlFrWindowSize,
       "prtExPhPlErrorsThreshold": prtExPhPlErrorsThreshold,
       "prtExPhPlPvcCreateMsg": prtExPhPlPvcCreateMsg,
       "prtExPhPlCllmMsg": prtExPhPlCllmMsg,
       "prtExPhPlProtDelayLevel": prtExPhPlProtDelayLevel,
       "prtExPhPlClockEncoding": prtExPhPlClockEncoding,
       "prtExPhPlMinSeparators": prtExPhPlMinSeparators,
       "prtExPhPlCcittCrc": prtExPhPlCcittCrc,
       "prtExPhPlFrameSeparator": prtExPhPlFrameSeparator,
       "prtExPhPlIdleCode": prtExPhPlIdleCode,
       "prtExPhPlJitter": prtExPhPlJitter,
       "prtExPhPlDlciTable": prtExPhPlDlciTable,
       "prtExPhPlDlciEntry": prtExPhPlDlciEntry,
       "prtExPhPlDlciCnfgIdx": prtExPhPlDlciCnfgIdx,
       "prtExPhPlDlciSltIdx": prtExPhPlDlciSltIdx,
       "prtExPhPlDlciPrtIdx": prtExPhPlDlciPrtIdx,
       "prtExPhPlDlciIdx": prtExPhPlDlciIdx,
       "prtExPhPlDlciValid": prtExPhPlDlciValid,
       "prtExPhPlDlciIConSlt": prtExPhPlDlciIConSlt,
       "prtExPhPlDlciIConPrt": prtExPhPlDlciIConPrt,
       "prtExPhPlDlciIConDlci": prtExPhPlDlciIConDlci,
       "prtExPhPlDlciTxBc": prtExPhPlDlciTxBc,
       "prtExPhPlDlciTxBe": prtExPhPlDlciTxBe,
       "prtExPhPlDlciRxBc": prtExPhPlDlciRxBc,
       "prtExPhPlDlciRxBe": prtExPhPlDlciRxBe,
       "prtExPhPlDlciPriority": prtExPhPlDlciPriority,
       "prtExPhPlDlciStatus": prtExPhPlDlciStatus,
       "prtExPhPlModemTable": prtExPhPlModemTable,
       "prtExPhPlModemEntry": prtExPhPlModemEntry,
       "prtExPhPlModemCnfgIdx": prtExPhPlModemCnfgIdx,
       "prtExPhPlModemSltIdx": prtExPhPlModemSltIdx,
       "prtExPhPlModemPrtIdx": prtExPhPlModemPrtIdx,
       "prtExPhPlModemStatus": prtExPhPlModemStatus,
       "prtExPhPlModemActivate": prtExPhPlModemActivate,
       "prtExPhPlModemMaxIdleTime": prtExPhPlModemMaxIdleTime,
       "prtExPhPlModemTimeBtwnCalls": prtExPhPlModemTimeBtwnCalls,
       "prtExPhPlModemCallDelay": prtExPhPlModemCallDelay,
       "prtLs2Cnfg": prtLs2Cnfg,
       "prtExLs2CnfgTable": prtExLs2CnfgTable,
       "prtExLs2CnfgEntry": prtExLs2CnfgEntry,
       "prtExLs2CnfgIdx": prtExLs2CnfgIdx,
       "prtExLs2SltIdx": prtExLs2SltIdx,
       "prtExLs2PrtIdx": prtExLs2PrtIdx,
       "prtExLs2Connect": prtExLs2Connect,
       "prtExLs2Rate": prtExLs2Rate,
       "prtExLs2ClkMode": prtExLs2ClkMode,
       "prtExLs2Cts": prtExLs2Cts,
       "prtExLs2Dcd": prtExLs2Dcd,
       "prtExLs2EnvIdx": prtExLs2EnvIdx,
       "prtInLs2CnfgTable": prtInLs2CnfgTable,
       "prtInLs2CnfgEntry": prtInLs2CnfgEntry,
       "prtInLs2CnfgIdx": prtInLs2CnfgIdx,
       "prtInLs2SltIdx": prtInLs2SltIdx,
       "prtInLs2PrtIdx": prtInLs2PrtIdx,
       "prtInLs2Connect": prtInLs2Connect,
       "prtInLs2Group": prtInLs2Group,
       "prtInLs2Member": prtInLs2Member,
       "prtInLs2LinkTo": prtInLs2LinkTo,
       "prtInLs2EnvAssign": prtInLs2EnvAssign,
       "prtVc2CnfgTable": prtVc2CnfgTable,
       "prtVc2CnfgEntry": prtVc2CnfgEntry,
       "prtVc2CnfgIdx": prtVc2CnfgIdx,
       "prtVc2SltIdx": prtVc2SltIdx,
       "prtVc2PrtIdx": prtVc2PrtIdx,
       "prtExVc2Connect": prtExVc2Connect,
       "prtExVc2TransGain": prtExVc2TransGain,
       "prtExVc2ReceiveGain": prtExVc2ReceiveGain,
       "prtExVc2Wire": prtExVc2Wire,
       "prtExVc2CodingLaw": prtExVc2CodingLaw,
       "prtExVc2Sig": prtExVc2Sig,
       "prtExVc2Oos": prtExVc2Oos,
       "prtExVc2LinkTo": prtExVc2LinkTo,
       "prtExVc2OperMode": prtExVc2OperMode,
       "prtExVc2SigProfile": prtExVc2SigProfile,
       "prtExVc2CallEnable": prtExVc2CallEnable,
       "prtExVc2R2Delay": prtExVc2R2Delay,
       "prtExVc2CasStd": prtExVc2CasStd,
       "prtExVc2EchoCanceler": prtExVc2EchoCanceler,
       "prtExVc2IfType": prtExVc2IfType,
       "prtExVc2Encoding": prtExVc2Encoding,
       "prtExVc2TxBitCode": prtExVc2TxBitCode,
       "prtExVc2RxBitOutput": prtExVc2RxBitOutput,
       "prtExVc2MeterRate": prtExVc2MeterRate,
       "prtExVc2IfSignaling": prtExVc2IfSignaling,
       "prtExVc2SeizeAck": prtExVc2SeizeAck,
       "prtExVc2EandMType": prtExVc2EandMType,
       "prtExVc2RemType": prtExVc2RemType,
       "prtExVc2ConvTime": prtExVc2ConvTime,
       "prtExVc2SigFeedback": prtExVc2SigFeedback,
       "prtExVc2EchoCancelerModule": prtExVc2EchoCancelerModule,
       "prtExVc2ReversePolarity": prtExVc2ReversePolarity,
       "prtExVc2RingerFrequency": prtExVc2RingerFrequency,
       "prtExVc2SigService": prtExVc2SigService,
       "prtExVc2CallerIdEnable": prtExVc2CallerIdEnable,
       "prtExVc2CompressMethod": prtExVc2CompressMethod,
       "prtExVc2ObMode": prtExVc2ObMode,
       "prtExVc2VAD": prtExVc2VAD,
       "prtExVc2NoiseLevelForVAD": prtExVc2NoiseLevelForVAD,
       "prtExVc2WesternSigMode": prtExVc2WesternSigMode,
       "prtExVc2BusProtectionPoint": prtExVc2BusProtectionPoint,
       "prtExVc2ImpedanceStandard": prtExVc2ImpedanceStandard,
       "prtHsfCnfgTable": prtHsfCnfgTable,
       "prtHsfCnfgEntry": prtHsfCnfgEntry,
       "prtHsfCnfgIdx": prtHsfCnfgIdx,
       "prtHsfSltIdx": prtHsfSltIdx,
       "prtHsfPrtIdx": prtHsfPrtIdx,
       "prtExHsfConnect": prtExHsfConnect,
       "prtExHsfRate": prtExHsfRate,
       "prtExHsfClkMode": prtExHsfClkMode,
       "prtExHsfCts": prtExHsfCts,
       "prtExHsfFifoSize": prtExHsfFifoSize,
       "prtExHsfLinkTo": prtExHsfLinkTo,
       "prtExHsfOperMode": prtExHsfOperMode,
       "prtExHsfInbandLoopback": prtExHsfInbandLoopback,
       "prtExHsfClkPolarity": prtExHsfClkPolarity,
       "prtExHsfControlSignal": prtExHsfControlSignal,
       "prtExHsfBcastRingSrcPort": prtExHsfBcastRingSrcPort,
       "prtHs4Cnfg": prtHs4Cnfg,
       "prtExHs4CnfgTable": prtExHs4CnfgTable,
       "prtExHs4CnfgEntry": prtExHs4CnfgEntry,
       "prtExHs4CnfgIdx": prtExHs4CnfgIdx,
       "prtExHs4SltIdx": prtExHs4SltIdx,
       "prtExHs4PrtIdx": prtExHs4PrtIdx,
       "prtExHs4Connect": prtExHs4Connect,
       "prtExHs4LineType": prtExHs4LineType,
       "prtExHs4LineCode": prtExHs4LineCode,
       "prtExHs4LineLen": prtExHs4LineLen,
       "prtExHs4RestoreT": prtExHs4RestoreT,
       "prtExHs4OosSig": prtExHs4OosSig,
       "prtExHs4OosCode": prtExHs4OosCode,
       "prtExHs4IdleCode": prtExHs4IdleCode,
       "prtExHs4MfClkSrcSlt": prtExHs4MfClkSrcSlt,
       "prtExHs4MfClkSrcPrt": prtExHs4MfClkSrcPrt,
       "prtExHs4TsCnfgTable": prtExHs4TsCnfgTable,
       "prtExHs4TsEntry": prtExHs4TsEntry,
       "prtExHs4TsCnfgIdx": prtExHs4TsCnfgIdx,
       "prtExHs4TsSltIdx": prtExHs4TsSltIdx,
       "prtExHs4TsPrtIdx": prtExHs4TsPrtIdx,
       "prtExHs4TsIdx": prtExHs4TsIdx,
       "prtExHs4TsIConSlot": prtExHs4TsIConSlot,
       "prtExHs4TsIConPrt": prtExHs4TsIConPrt,
       "prtExHs4TsIConTs": prtExHs4TsIConTs,
       "prtHsiCnfg": prtHsiCnfg,
       "prtExHsiCnfgTable": prtExHsiCnfgTable,
       "prtExHsiCnfgEntry": prtExHsiCnfgEntry,
       "prtExHsiCnfgIdx": prtExHsiCnfgIdx,
       "prtExHsiSltIdx": prtExHsiSltIdx,
       "prtExHsiPrtIdx": prtExHsiPrtIdx,
       "prtExHsiConnect": prtExHsiConnect,
       "prtExHsiRate": prtExHsiRate,
       "prtExHsiLinkTo": prtExHsiLinkTo,
       "prtExHsiInterface": prtExHsiInterface,
       "prtExHsiActType": prtExHsiActType,
       "prtInHsiCnfgTable": prtInHsiCnfgTable,
       "prtInHsiCnfgEntry": prtInHsiCnfgEntry,
       "prtInHsiCnfgIdx": prtInHsiCnfgIdx,
       "prtInHsiSltIdx": prtInHsiSltIdx,
       "prtInHsiPrtIdx": prtInHsiPrtIdx,
       "prtInHsiConnect": prtInHsiConnect,
       "prtInHsiRate": prtInHsiRate,
       "prtInHsiConcentratedTo": prtInHsiConcentratedTo,
       "prtPVc4Cnfg": prtPVc4Cnfg,
       "prtExPVc4CnfgTable": prtExPVc4CnfgTable,
       "prtExPVc4CnfgEntry": prtExPVc4CnfgEntry,
       "prtExPVc4CnfgIdx": prtExPVc4CnfgIdx,
       "prtExPVc4SltIdx": prtExPVc4SltIdx,
       "prtExPVc4PrtIdx": prtExPVc4PrtIdx,
       "prtExPVc4PrtType": prtExPVc4PrtType,
       "prtExPVc4Connect": prtExPVc4Connect,
       "prtExPVc4IfType": prtExPVc4IfType,
       "prtExPVc4TxGain": prtExPVc4TxGain,
       "prtExPVc4RxGain": prtExPVc4RxGain,
       "prtExPVc4MaxRate": prtExPVc4MaxRate,
       "prtExPVc4Tc": prtExPVc4Tc,
       "prtExPVc4Oos": prtExPVc4Oos,
       "prtExPVc4EchoCanceler": prtExPVc4EchoCanceler,
       "prtExPVc4VarDelay": prtExPVc4VarDelay,
       "prtExPVc4CongLevel": prtExPVc4CongLevel,
       "prtExPVc4Wire": prtExPVc4Wire,
       "prtExPVc4ExtensionType": prtExPVc4ExtensionType,
       "prtExPVc4ExtensionNumber": prtExPVc4ExtensionNumber,
       "prtExPVc4OutPulsing": prtExPVc4OutPulsing,
       "prtExPVc4HuntGroupMb": prtExPVc4HuntGroupMb,
       "prtExPVc4HuntGroupIdx": prtExPVc4HuntGroupIdx,
       "prtExPVc4AutoFaxMode": prtExPVc4AutoFaxMode,
       "prtExPVc4FaxRate": prtExPVc4FaxRate,
       "prtExPVc4SeizeAck": prtExPVc4SeizeAck,
       "prtExPVc4SignalingProtocol": prtExPVc4SignalingProtocol,
       "prtExPVc4DelayStart": prtExPVc4DelayStart,
       "prtExPVc4WinkMinDuration": prtExPVc4WinkMinDuration,
       "prtExPVc4WinkMaxDuration": prtExPVc4WinkMaxDuration,
       "prtExPVc4GenerateTone": prtExPVc4GenerateTone,
       "prtExPVc4CodingLaw": prtExPVc4CodingLaw,
       "prtExPVc4GenerateRingBack": prtExPVc4GenerateRingBack,
       "prtExPVc4ChannelId": prtExPVc4ChannelId,
       "prtExPVc4PortConnection": prtExPVc4PortConnection,
       "prtExPVc4CoderAndRate": prtExPVc4CoderAndRate,
       "prtExPVc4DestinationNum": prtExPVc4DestinationNum,
       "prtExPVc4DtmfRelay": prtExPVc4DtmfRelay,
       "prtExPVc4DiscOnSilence": prtExPVc4DiscOnSilence,
       "prtExPVc4DynamicJitter": prtExPVc4DynamicJitter,
       "prtExPVc4EandMType": prtExPVc4EandMType,
       "prtExPVc4Rate": prtExPVc4Rate,
       "prtExPVc4FrameSize": prtExPVc4FrameSize,
       "prtExPVc4MultiplexInterval": prtExPVc4MultiplexInterval,
       "prtExPVc4TransportProtocol": prtExPVc4TransportProtocol,
       "prtExPVc4MultiFreqRelay": prtExPVc4MultiFreqRelay,
       "prtExPVc4MinPulseWidth": prtExPVc4MinPulseWidth,
       "prtExPVc4MinPowerLevel": prtExPVc4MinPowerLevel,
       "prtExPVc4SuperTandem": prtExPVc4SuperTandem,
       "prtExPVc4DestIp": prtExPVc4DestIp,
       "prtExPVc4DestBundle": prtExPVc4DestBundle,
       "prtExPVc4SrcIpAddress": prtExPVc4SrcIpAddress,
       "prtExPVc4SrcIpMask": prtExPVc4SrcIpMask,
       "prtExPVc4DefaultGateway": prtExPVc4DefaultGateway,
       "prtExPVc4SigPacketInterval": prtExPVc4SigPacketInterval,
       "prtExPVc4DlciTable": prtExPVc4DlciTable,
       "prtExPVc4DlciEntry": prtExPVc4DlciEntry,
       "prtExPVc4DlciCnfgIdx": prtExPVc4DlciCnfgIdx,
       "prtExPVc4DlciSltIdx": prtExPVc4DlciSltIdx,
       "prtExPVc4DlciPrtIdx": prtExPVc4DlciPrtIdx,
       "prtExPVc4DlciValid": prtExPVc4DlciValid,
       "prtExPVc4DlciIConSlt": prtExPVc4DlciIConSlt,
       "prtExPVc4DlciIConPrt": prtExPVc4DlciIConPrt,
       "prtExPVc4DlciIConDlci": prtExPVc4DlciIConDlci,
       "prtExPVc4DlciTxBc": prtExPVc4DlciTxBc,
       "prtExPVc4DlciTxBe": prtExPVc4DlciTxBe,
       "prtExPVc4DlciRxBc": prtExPVc4DlciRxBc,
       "prtExPVc4DlciRxBe": prtExPVc4DlciRxBe,
       "prtExPVc4DlciPriority": prtExPVc4DlciPriority,
       "prtExPVc4DlciStatus": prtExPVc4DlciStatus,
       "prtHsrCnfg": prtHsrCnfg,
       "prtExHsrCnfgTable": prtExHsrCnfgTable,
       "prtExHsrCnfgEntry": prtExHsrCnfgEntry,
       "prtExHsrCnfgIdx": prtExHsrCnfgIdx,
       "prtExHsrSltIdx": prtExHsrSltIdx,
       "prtExHsrPrtIdx": prtExHsrPrtIdx,
       "prtExHsrConnect": prtExHsrConnect,
       "prtExHsrProtocol": prtExHsrProtocol,
       "prtExHsrRate": prtExHsrRate,
       "prtExHsrDataBits": prtExHsrDataBits,
       "prtExHsrParity": prtExHsrParity,
       "prtExHsrStopBits": prtExHsrStopBits,
       "prtExHsrCts": prtExHsrCts,
       "prtExHsrClkMode": prtExHsrClkMode,
       "prtExHsrLinkTo": prtExHsrLinkTo,
       "prtExHsrDcdDsr": prtExHsrDcdDsr,
       "prtExHsrOperMode": prtExHsrOperMode,
       "prtExHsrRtsDtr": prtExHsrRtsDtr,
       "prtExHsrLlbEnable": prtExHsrLlbEnable,
       "prtExHsrRlbEnable": prtExHsrRlbEnable,
       "prtExHsrRateAdapt": prtExHsrRateAdapt,
       "prtExHsrRemoteModem": prtExHsrRemoteModem,
       "prtExHsrEncapsMode": prtExHsrEncapsMode,
       "prtMbeCnfg": prtMbeCnfg,
       "prtExMbeCnfgTable": prtExMbeCnfgTable,
       "prtExMbeCnfgEntry": prtExMbeCnfgEntry,
       "prtExMbeCnfgIdx": prtExMbeCnfgIdx,
       "prtExMbeSltIdx": prtExMbeSltIdx,
       "prtExMbePrtIdx": prtExMbePrtIdx,
       "prtExMbeLan": prtExMbeLan,
       "prtInMbeCnfgTable": prtInMbeCnfgTable,
       "prtInMbeCnfgEntry": prtInMbeCnfgEntry,
       "prtInMbeCnfgIdx": prtInMbeCnfgIdx,
       "prtInMbeSltIdx": prtInMbeSltIdx,
       "prtInMbePrtIdx": prtInMbePrtIdx,
       "prtInMbeConnect": prtInMbeConnect,
       "prtInMbeRate": prtInMbeRate,
       "prtInMbeLinkTo": prtInMbeLinkTo,
       "prtTreCnfg": prtTreCnfg,
       "prtExTreCnfgTable": prtExTreCnfgTable,
       "prtExTreCnfgEntry": prtExTreCnfgEntry,
       "prtExTreCnfgIdx": prtExTreCnfgIdx,
       "prtExTreSltIdx": prtExTreSltIdx,
       "prtExTrePrtIdx": prtExTrePrtIdx,
       "prtExTreLan": prtExTreLan,
       "prtExTreLanRate": prtExTreLanRate,
       "prtInTreCnfgTable": prtInTreCnfgTable,
       "prtInTreCnfgEntry": prtInTreCnfgEntry,
       "prtInTreCnfgIdx": prtInTreCnfgIdx,
       "prtInTreSltIdx": prtInTreSltIdx,
       "prtInTrePrtIdx": prtInTrePrtIdx,
       "prtInTreConnect": prtInTreConnect,
       "prtInTreRate": prtInTreRate,
       "prtInTreLinkTo": prtInTreLinkTo,
       "prtLs6Cnfg": prtLs6Cnfg,
       "prtExLs6CnfgTable": prtExLs6CnfgTable,
       "prtExLs6CnfgEntry": prtExLs6CnfgEntry,
       "prtExLs6CnfgIdx": prtExLs6CnfgIdx,
       "prtExLs6SltIdx": prtExLs6SltIdx,
       "prtExLs6PrtIdx": prtExLs6PrtIdx,
       "prtExLs6Connect": prtExLs6Connect,
       "prtExLs6Protocol": prtExLs6Protocol,
       "prtExLs6Rate": prtExLs6Rate,
       "prtExLs6ClkMode": prtExLs6ClkMode,
       "prtExLs6CtrlSignal": prtExLs6CtrlSignal,
       "prtExLs6DataBits": prtExLs6DataBits,
       "prtExLs6Cts": prtExLs6Cts,
       "prtExLs6LinkToInternal": prtExLs6LinkToInternal,
       "prtExLs6VCnfgTable": prtExLs6VCnfgTable,
       "prtExLs6VCnfgEntry": prtExLs6VCnfgEntry,
       "prtExLs6VCnfgIdx": prtExLs6VCnfgIdx,
       "prtExLs6VSltIdx": prtExLs6VSltIdx,
       "prtExLs6VPrtIdx": prtExLs6VPrtIdx,
       "prtExLs6VConnect": prtExLs6VConnect,
       "prtExLs6VRate": prtExLs6VRate,
       "prtExLs6VEchoCanceler": prtExLs6VEchoCanceler,
       "prtExLs6VIfType": prtExLs6VIfType,
       "prtExLs6VTxGain": prtExLs6VTxGain,
       "prtExLs6VRxGain": prtExLs6VRxGain,
       "prtExLs6VOos": prtExLs6VOos,
       "prtInLs6CnfgTable": prtInLs6CnfgTable,
       "prtInLs6CnfgEntry": prtInLs6CnfgEntry,
       "prtInLs6CnfgIdx": prtInLs6CnfgIdx,
       "prtInLs6SltIdx": prtInLs6SltIdx,
       "prtInLs6PrtIdx": prtInLs6PrtIdx,
       "prtInLs6Connect": prtInLs6Connect,
       "prtInLs6TandemMode": prtInLs6TandemMode,
       "prtInLs6Rate": prtInLs6Rate,
       "prtInLs6RemoteType": prtInLs6RemoteType,
       "prtInLs6LinkTo": prtInLs6LinkTo,
       "prtVc3Cnfg": prtVc3Cnfg,
       "prtExVc3CnfgTable": prtExVc3CnfgTable,
       "prtExVc3CnfgEntry": prtExVc3CnfgEntry,
       "prtExVc3CnfgIdx": prtExVc3CnfgIdx,
       "prtExVc3SltIdx": prtExVc3SltIdx,
       "prtExVc3PrtIdx": prtExVc3PrtIdx,
       "prtExVc3Connect": prtExVc3Connect,
       "prtExVc3TransGain": prtExVc3TransGain,
       "prtExVc3ReceiveGain": prtExVc3ReceiveGain,
       "prtExVc3Wire": prtExVc3Wire,
       "prtExVc3Rate": prtExVc3Rate,
       "prtExVc3EchoCanceler": prtExVc3EchoCanceler,
       "prtInVc3CnfgTable": prtInVc3CnfgTable,
       "prtInVc3CnfgEntry": prtInVc3CnfgEntry,
       "prtInVc3CnfgIdx": prtInVc3CnfgIdx,
       "prtInVc3SltIdx": prtInVc3SltIdx,
       "prtInVc3PrtIdx": prtInVc3PrtIdx,
       "prtInVc3Connect": prtInVc3Connect,
       "prtInVc3Rate": prtInVc3Rate,
       "prtInVc3Oos": prtInVc3Oos,
       "prtInVc3LinkTo": prtInVc3LinkTo,
       "prtVcPbxCnfg": prtVcPbxCnfg,
       "prtExVcPbxCnfgTable": prtExVcPbxCnfgTable,
       "prtExVcPbxCnfgEntry": prtExVcPbxCnfgEntry,
       "prtExVcPbxCnfgIdx": prtExVcPbxCnfgIdx,
       "prtExVcPbxSltIdx": prtExVcPbxSltIdx,
       "prtExVcPbxPrtIdx": prtExVcPbxPrtIdx,
       "prtExVcPbxConnect": prtExVcPbxConnect,
       "prtExVcPbxGroup": prtExVcPbxGroup,
       "prtExVcPbxTransparent": prtExVcPbxTransparent,
       "prtExVcPbxTransSignalTs": prtExVcPbxTransSignalTs,
       "prtExVcPbxFrame": prtExVcPbxFrame,
       "prtExVcPbxRestoreTime": prtExVcPbxRestoreTime,
       "prtExVcPbxLineCode": prtExVcPbxLineCode,
       "prtExVcPbxLineLength": prtExVcPbxLineLength,
       "prtExVcPbxLinkTo": prtExVcPbxLinkTo,
       "prtExVcPbxSignalOper": prtExVcPbxSignalOper,
       "prtExVcPbxIdleCode": prtExVcPbxIdleCode,
       "prtIn1p6VcPbxCnfgTable": prtIn1p6VcPbxCnfgTable,
       "prtIn1p6VcPbxCnfgEntry": prtIn1p6VcPbxCnfgEntry,
       "prtIn1p6VcPbxCnfgIdx": prtIn1p6VcPbxCnfgIdx,
       "prtIn1p6VcPbxSltIdx": prtIn1p6VcPbxSltIdx,
       "prtIn1p6VcPbxPrtIdx": prtIn1p6VcPbxPrtIdx,
       "prtIn1p6VcPbxConnect": prtIn1p6VcPbxConnect,
       "prtIn1p6VcPbxRate": prtIn1p6VcPbxRate,
       "prtIn1p6VcPbxEchoCanceler": prtIn1p6VcPbxEchoCanceler,
       "prtIn1p6VcPbxPabxTs": prtIn1p6VcPbxPabxTs,
       "prtIn7p8VcPbxCnfgTable": prtIn7p8VcPbxCnfgTable,
       "prtIn7p8VcPbxCnfgEntry": prtIn7p8VcPbxCnfgEntry,
       "prtIn7p8VcPbxCnfgIdx": prtIn7p8VcPbxCnfgIdx,
       "prtIn7p8VcPbxSltIdx": prtIn7p8VcPbxSltIdx,
       "prtIn7p8VcPbxPrtIdx": prtIn7p8VcPbxPrtIdx,
       "prtIn7p8VcPbxConnect": prtIn7p8VcPbxConnect,
       "prtIn7p8VcPbxMode": prtIn7p8VcPbxMode,
       "prtIn7p8VcPbxRate": prtIn7p8VcPbxRate,
       "prtIn7p8VcPbxSignalMode": prtIn7p8VcPbxSignalMode,
       "prtIn7p8VcPbxOos": prtIn7p8VcPbxOos,
       "prtIn7p8VcPbxLinkTo": prtIn7p8VcPbxLinkTo,
       "prtExVcPbxTsTable": prtExVcPbxTsTable,
       "prtExVcPbxTsEntry": prtExVcPbxTsEntry,
       "prtExVcPbxTsCnfgIdx": prtExVcPbxTsCnfgIdx,
       "prtExVcPbxTsSltIdx": prtExVcPbxTsSltIdx,
       "prtExVcPbxTsPrtIdx": prtExVcPbxTsPrtIdx,
       "prtExVcPbxTsIdx": prtExVcPbxTsIdx,
       "prtExVcPbxTsMode": prtExVcPbxTsMode,
       "prtExVcPbxTsIConSlot": prtExVcPbxTsIConSlot,
       "prtExVcPbxTsIConPrt": prtExVcPbxTsIConPrt,
       "prtExVcPbxTsIConTs": prtExVcPbxTsIConTs,
       "prtExVcPbxTsRemPrt": prtExVcPbxTsRemPrt,
       "prtExVcPbxTsRemTs": prtExVcPbxTsRemTs,
       "prtExVcPbxTsRemConnID": prtExVcPbxTsRemConnID,
       "prtExVcPbxTsSourceSlot": prtExVcPbxTsSourceSlot,
       "prtExVcPbxTsSourcePrt": prtExVcPbxTsSourcePrt,
       "prtIsdnCnfg": prtIsdnCnfg,
       "prtIsdnCnfgTable": prtIsdnCnfgTable,
       "prtIsdnCnfgEntry": prtIsdnCnfgEntry,
       "prtIsdnCnfgIdx": prtIsdnCnfgIdx,
       "prtIsdnSltIdx": prtIsdnSltIdx,
       "prtIsdnPrtIdx": prtIsdnPrtIdx,
       "prtIsdnConnect": prtIsdnConnect,
       "prtIsdnSignalingProtocol": prtIsdnSignalingProtocol,
       "prtIsdnBasicRateLineTopology": prtIsdnBasicRateLineTopology,
       "prtIsdnMode": prtIsdnMode,
       "prtIsdnFilter": prtIsdnFilter,
       "prtIsdnSimultaneousCall": prtIsdnSimultaneousCall,
       "prtIsdnNumOfAbstractTerm": prtIsdnNumOfAbstractTerm,
       "prtIsdnSwitchMode": prtIsdnSwitchMode,
       "prtIsdnAbSide": prtIsdnAbSide,
       "prtIsdnQsigRole": prtIsdnQsigRole,
       "prtIsdnInterface": prtIsdnInterface,
       "prtIsdnCallMode": prtIsdnCallMode,
       "prtIsdnCallBackTimeout": prtIsdnCallBackTimeout,
       "prtIsdnEndpointTable": prtIsdnEndpointTable,
       "prtIsdnEndpointEntry": prtIsdnEndpointEntry,
       "prtIsdnEndpointCnfgIdx": prtIsdnEndpointCnfgIdx,
       "prtIsdnEndpointSltIdx": prtIsdnEndpointSltIdx,
       "prtIsdnEndpointPrtIdx": prtIsdnEndpointPrtIdx,
       "prtIsdnEndpointIdx": prtIsdnEndpointIdx,
       "prtIsdnEndpointTeiType": prtIsdnEndpointTeiType,
       "prtIsdnEndpointTeiValue": prtIsdnEndpointTeiValue,
       "prtIsdnEndpointSpid": prtIsdnEndpointSpid,
       "prtIsdnEndpointBearerCh": prtIsdnEndpointBearerCh,
       "prtIsdnEndpointRowStatus": prtIsdnEndpointRowStatus,
       "prtIsdnDirectoryTable": prtIsdnDirectoryTable,
       "prtIsdnDirectoryEntry": prtIsdnDirectoryEntry,
       "prtIsdnDirectoryCnfgIdx": prtIsdnDirectoryCnfgIdx,
       "prtIsdnDirectorySltIdx": prtIsdnDirectorySltIdx,
       "prtIsdnDirectoryPrtIdx": prtIsdnDirectoryPrtIdx,
       "prtIsdnDirectoryLocalAddr": prtIsdnDirectoryLocalAddr,
       "prtIsdnDirectoryLocalSubAddr": prtIsdnDirectoryLocalSubAddr,
       "prtIsdnDirectoryRemoteAddr": prtIsdnDirectoryRemoteAddr,
       "prtIsdnDirectoryRemoteSubAddr": prtIsdnDirectoryRemoteSubAddr,
       "prtIsdnDirectoryPrtNu": prtIsdnDirectoryPrtNu,
       "prtIsdnDirectoryTeiId": prtIsdnDirectoryTeiId,
       "prtIsdnDirectoryRowStatus": prtIsdnDirectoryRowStatus,
       "prtIsdnDirectoryLocalAddr2": prtIsdnDirectoryLocalAddr2,
       "prtIsdnDirectoryLocalSubAddr2": prtIsdnDirectoryLocalSubAddr2,
       "prtIsdnDirectoryRemoteAddr2": prtIsdnDirectoryRemoteAddr2,
       "prtIsdnDirectoryRemoteSubAddr2": prtIsdnDirectoryRemoteSubAddr2,
       "prtLogicalCnfg": prtLogicalCnfg,
       "prtLogicalCnfgTable": prtLogicalCnfgTable,
       "prtLogicalCnfgEntry": prtLogicalCnfgEntry,
       "prtLogicalCnfgIdx": prtLogicalCnfgIdx,
       "prtLogicalSltIdx": prtLogicalSltIdx,
       "prtLogicalPrtIdx": prtLogicalPrtIdx,
       "prtLogicalConnect": prtLogicalConnect,
       "prtLogicalFunction": prtLogicalFunction,
       "prtLogicalRowStatus": prtLogicalRowStatus,
       "linkSelectorCnfgTable": linkSelectorCnfgTable,
       "linkSelectorCnfgEntry": linkSelectorCnfgEntry,
       "linkSelectorCnfgIdx": linkSelectorCnfgIdx,
       "linkSelectorSltIdx": linkSelectorSltIdx,
       "linkSelectorPrtIdx": linkSelectorPrtIdx,
       "linkSelectorMaxIdleTime": linkSelectorMaxIdleTime,
       "linkSelectorMode": linkSelectorMode,
       "linkSelectorRevert": linkSelectorRevert,
       "linkSelectorMinBUSession": linkSelectorMinBUSession,
       "linkSelectorPLinkTable": linkSelectorPLinkTable,
       "linkSelectorPLinkEntry": linkSelectorPLinkEntry,
       "pLinkCnfgIdx": pLinkCnfgIdx,
       "pLinkSltIdx": pLinkSltIdx,
       "pLinkPrtIdx": pLinkPrtIdx,
       "pLinkIdx": pLinkIdx,
       "pLinkSlotNu": pLinkSlotNu,
       "pLinkPortNu": pLinkPortNu,
       "pLinkPrioNu": pLinkPrioNu,
       "pLinkVRate": pLinkVRate,
       "prtFrPlusCnfg": prtFrPlusCnfg,
       "prtFrPlusCnfgTable": prtFrPlusCnfgTable,
       "prtFrPlusCnfgEntry": prtFrPlusCnfgEntry,
       "prtFrPlusCnfgIdx": prtFrPlusCnfgIdx,
       "prtFrPlusSltIdx": prtFrPlusSltIdx,
       "prtFrPlusPrtIdx": prtFrPlusPrtIdx,
       "prtFrPlusNotSegmentedPriorities": prtFrPlusNotSegmentedPriorities,
       "prtMl4Cnfg": prtMl4Cnfg,
       "prtMl4CnfgTable": prtMl4CnfgTable,
       "prtMl4CnfgEntry": prtMl4CnfgEntry,
       "prtMl4CnfgIdx": prtMl4CnfgIdx,
       "prtMl4SltIdx": prtMl4SltIdx,
       "prtMl4PrtIdx": prtMl4PrtIdx,
       "prtMl4SigProfile": prtMl4SigProfile,
       "prtMl4CGA": prtMl4CGA,
       "prtMl4Oos": prtMl4Oos,
       "prtMl4VoiceOos": prtMl4VoiceOos,
       "prtMl4DataOos": prtMl4DataOos,
       "prtMl4Service": prtMl4Service,
       "prtMl4IpAddress": prtMl4IpAddress,
       "prtMl4IpMask": prtMl4IpMask,
       "prtMl4SignalingMode": prtMl4SignalingMode,
       "prtMl4EchoCanceler": prtMl4EchoCanceler,
       "prtMl4OosErrorSource": prtMl4OosErrorSource,
       "prtMl4OosEntryThreshold": prtMl4OosEntryThreshold,
       "prtMl4OosExitThreshold": prtMl4OosExitThreshold,
       "prtMl4LogicalLinkId": prtMl4LogicalLinkId,
       "prtMl4DedicatedTs": prtMl4DedicatedTs,
       "prtMl4RemCrc": prtMl4RemCrc,
       "prtMl4CrossConnectLevel": prtMl4CrossConnectLevel,
       "prtMl4PppEchoFailDetection": prtMl4PppEchoFailDetection,
       "prtAcmCnfg": prtAcmCnfg,
       "prtAcmCnfgTable": prtAcmCnfgTable,
       "prtAcmCnfgEntry": prtAcmCnfgEntry,
       "prtAcmCnfgIdx": prtAcmCnfgIdx,
       "prtAcmSltIdx": prtAcmSltIdx,
       "prtAcmPrtIdx": prtAcmPrtIdx,
       "prtAcmConnect": prtAcmConnect,
       "prtAcmActiveState": prtAcmActiveState,
       "prtAcmAlrString": prtAcmAlrString,
       "prtE2Cnfg": prtE2Cnfg,
       "prtE2CnfgTable": prtE2CnfgTable,
       "prtE2CnfgEntry": prtE2CnfgEntry,
       "prtE2CnfgIdx": prtE2CnfgIdx,
       "prtE2SltIdx": prtE2SltIdx,
       "prtE2PrtIdx": prtE2PrtIdx,
       "prtE2Connect": prtE2Connect,
       "prtE2MngOnNationalBit": prtE2MngOnNationalBit,
       "prtLanWanCnfg": prtLanWanCnfg,
       "prtLanWanCnfgTable": prtLanWanCnfgTable,
       "prtLanWanCnfgEntry": prtLanWanCnfgEntry,
       "prtLanWanCnfgIdx": prtLanWanCnfgIdx,
       "prtLanWanSltIdx": prtLanWanSltIdx,
       "prtLanWanPrtIdx": prtLanWanPrtIdx,
       "prtLanWanMode": prtLanWanMode,
       "prtLanWanDestIf": prtLanWanDestIf,
       "prtLanWanEgressVlanMode": prtLanWanEgressVlanMode,
       "prtLanWanL2Protocol": prtLanWanL2Protocol,
       "prtLanWanStpPriority": prtLanWanStpPriority,
       "prtLanWanStpCost": prtLanWanStpCost,
       "prtLanWanToLanVlanMode": prtLanWanToLanVlanMode,
       "prtLanWanVlanId": prtLanWanVlanId,
       "prtLanWanVlanPriority": prtLanWanVlanPriority,
       "prtLanWanMtu": prtLanWanMtu,
       "prtLanWanVlanType": prtLanWanVlanType,
       "dacsMux": dacsMux,
       "dacsMuxEvents": dacsMuxEvents,
       "sanityCheckTrap": sanityCheckTrap,
       "dacsMuxAlarmsTrap": dacsMuxAlarmsTrap,
       "mdlConnectTrap": mdlConnectTrap,
       "sysAlrStatusTrap": sysAlrStatusTrap,
       "sysStatusChangedTrap": sysStatusChangedTrap,
       "cnfgUpdateTrap": cnfgUpdateTrap,
       "sysRedundancyStatusTrap": sysRedundancyStatusTrap,
       "sysRedundancyActiveCardTrap": sysRedundancyActiveCardTrap,
       "sysRedundancyActivePortTrap": sysRedundancyActivePortTrap,
       "systemDacsMux": systemDacsMux,
       "sysSa": sysSa,
       "sysSaSwchStatus": sysSaSwchStatus,
       "sysSaSwRevision": sysSaSwRevision,
       "sysSaHwVersion": sysSaHwVersion,
       "sysSaPorts": sysSaPorts,
       "sysSaReadSwch": sysSaReadSwch,
       "sysSaBuActivePort": sysSaBuActivePort,
       "sysHub": sysHub,
       "sysChas": sysChas,
       "chassTotalNoOfSlt": chassTotalNoOfSlt,
       "chassTotalNoOfIoSlt": chassTotalNoOfIoSlt,
       "chassTotalNoOfPsSlt": chassTotalNoOfPsSlt,
       "chassTotalNoOfClSlt": chassTotalNoOfClSlt,
       "chassTotalNoOfMlSlt": chassTotalNoOfMlSlt,
       "sysDcl": sysDcl,
       "sysDclTable": sysDclTable,
       "sysDclEntry": sysDclEntry,
       "sysDclCnfgIdx": sysDclCnfgIdx,
       "sysDclRedundancy": sysDclRedundancy,
       "sysDclActiveCl": sysDclActiveCl,
       "sysDclFlipDelay": sysDclFlipDelay,
       "sysDclFlipUponStnClk": sysDclFlipUponStnClk,
       "sysDclChFailThreshold": sysDclChFailThreshold,
       "sysDclChPriority": sysDclChPriority,
       "sysDclConfigDownloadSrc": sysDclConfigDownloadSrc,
       "sysDclSwDownloadSrc": sysDclSwDownloadSrc,
       "sysDclRedundancyStatus": sysDclRedundancyStatus,
       "sysDclOnline": sysDclOnline,
       "sysDclCopyDbTable": sysDclCopyDbTable,
       "sysDclCopyDbEntry": sysDclCopyDbEntry,
       "sysDclCopyDbIdx": sysDclCopyDbIdx,
       "sysDclCopyDbCmd": sysDclCopyDbCmd,
       "sysDclFlipCmd": sysDclFlipCmd,
       "sysStatus": sysStatus,
       "sysSDateFormat": sysSDateFormat,
       "sysSDateCmd": sysSDateCmd,
       "sysSTimeCmd": sysSTimeCmd,
       "sysSActiveCnfg": sysSActiveCnfg,
       "sysSEditCnfg": sysSEditCnfg,
       "sysSEditBy": sysSEditBy,
       "sysSClkSrc": sysSClkSrc,
       "sysSAlrStatus": sysSAlrStatus,
       "sysSAlrStatusAll": sysSAlrStatusAll,
       "sysSTestStatus": sysSTestStatus,
       "sysSSanityCheckStatus": sysSSanityCheckStatus,
       "sysSNoOfSanityCheckErr": sysSNoOfSanityCheckErr,
       "sysSErrListTable": sysSErrListTable,
       "sysSErrListEntry": sysSErrListEntry,
       "sysSErrType": sysSErrType,
       "sysSErrIdx": sysSErrIdx,
       "sysSErrDescription": sysSErrDescription,
       "sysSMaxNoOfCnfg": sysSMaxNoOfCnfg,
       "sysSSelfTestResult": sysSSelfTestResult,
       "sysSRelayState": sysSRelayState,
       "sysSInvertedAlr": sysSInvertedAlr,
       "sysSRdnFlipTable": sysSRdnFlipTable,
       "sysSRdnFlipEntry": sysSRdnFlipEntry,
       "sysSRdnFlipIdx": sysSRdnFlipIdx,
       "sysSRdnFlipSlot": sysSRdnFlipSlot,
       "sysSRdnFlipPort": sysSRdnFlipPort,
       "sysSRdnFlipCause": sysSRdnFlipCause,
       "sysSRdnFlipDate": sysSRdnFlipDate,
       "sysSRdnFlipTime": sysSRdnFlipTime,
       "sysSRdnFlipTableClearCmd": sysSRdnFlipTableClearCmd,
       "sysSRdnFlipCmd": sysSRdnFlipCmd,
       "sysSBusTable": sysSBusTable,
       "sysSBusEntry": sysSBusEntry,
       "sysSBusPortIdx": sysSBusPortIdx,
       "sysSBusStatus": sysSBusStatus,
       "sysSBusCapturePort": sysSBusCapturePort,
       "sysSBusUtilization": sysSBusUtilization,
       "sysSRdnCmdTable": sysSRdnCmdTable,
       "sysSRdnCmdEntry": sysSRdnCmdEntry,
       "sysSRdnEnforcedChannel": sysSRdnEnforcedChannel,
       "sysSRdnLockFlip": sysSRdnLockFlip,
       "sysSRdnManualFlip": sysSRdnManualFlip,
       "sysSAlrAttrIndication": sysSAlrAttrIndication,
       "sysCurrentAlr": sysCurrentAlr,
       "sysSAlrTable": sysSAlrTable,
       "sysSAlrEntry": sysSAlrEntry,
       "sysSAlrIdx": sysSAlrIdx,
       "sysSAlrCode": sysSAlrCode,
       "sysSAlrState": sysSAlrState,
       "sysSAlarmMask": sysSAlarmMask,
       "sysSAlarmInvert": sysSAlarmInvert,
       "sysSAlarmOnOff": sysSAlarmOnOff,
       "sysSAlarmCounter": sysSAlarmCounter,
       "sysSAlrClearCmd": sysSAlrClearCmd,
       "sysSAlrClearAllCmd": sysSAlrClearAllCmd,
       "sysSAlrMaskAll": sysSAlrMaskAll,
       "sysSAlrMask": sysSAlrMask,
       "sysSAlrDataUpdateCmd": sysSAlrDataUpdateCmd,
       "sysBufferAlr": sysBufferAlr,
       "sysBufferAlrTable": sysBufferAlrTable,
       "sysBufferAlrEntry": sysBufferAlrEntry,
       "sysBufferAlrIdx": sysBufferAlrIdx,
       "sysBufferAlrCode": sysBufferAlrCode,
       "sysBufferAlrState": sysBufferAlrState,
       "sysBufferAlrSlot": sysBufferAlrSlot,
       "sysBufferAlrPort": sysBufferAlrPort,
       "sysBufferAlrDate": sysBufferAlrDate,
       "sysBufferAlrTime": sysBufferAlrTime,
       "sysBufferAlrUpTime": sysBufferAlrUpTime,
       "sysBufferAlrInfo": sysBufferAlrInfo,
       "sysBufferAlrClearCmd": sysBufferAlrClearCmd,
       "sysConfig": sysConfig,
       "sysCClkSrcTable": sysCClkSrcTable,
       "sysCClkSrcEntry": sysCClkSrcEntry,
       "sysCClkCnfgIdx": sysCClkCnfgIdx,
       "sysCClkSrcIdx": sysCClkSrcIdx,
       "sysCClkSrcMode": sysCClkSrcMode,
       "sysCClkSrcPrt": sysCClkSrcPrt,
       "sysCClkStationFreq": sysCClkStationFreq,
       "sysCClkRevertiveTimeout": sysCClkRevertiveTimeout,
       "sysCClkStationIf": sysCClkStationIf,
       "sysCClkStationCableMode": sysCClkStationCableMode,
       "sysCClkStationOutState": sysCClkStationOutState,
       "sysCClkSsmBased": sysCClkSsmBased,
       "sysCClkSSubsystemSlot": sysCClkSSubsystemSlot,
       "sysCClkRecoveredID": sysCClkRecoveredID,
       "sysCnfgTable": sysCnfgTable,
       "sysCnfgEntry": sysCnfgEntry,
       "sysCnfgIdx": sysCnfgIdx,
       "sysCMatrixMode": sysCMatrixMode,
       "sysCIsdnFormat": sysCIsdnFormat,
       "sysCRoutingOnEth": sysCRoutingOnEth,
       "sysCAutoConfigEnable": sysCAutoConfigEnable,
       "sysCIntTsAllocMode": sysCIntTsAllocMode,
       "sysCBuPrimaryPort": sysCBuPrimaryPort,
       "sysCEnableLanOverTdm": sysCEnableLanOverTdm,
       "sysCSs7FisuSuppression": sysCSs7FisuSuppression,
       "sysCBuRecMode": sysCBuRecMode,
       "sysCRdnTable": sysCRdnTable,
       "sysCRdnEntry": sysCRdnEntry,
       "sysCRdnCnfgIdx": sysCRdnCnfgIdx,
       "sysCRdnPrimeSlot": sysCRdnPrimeSlot,
       "sysCRdnPrimePort": sysCRdnPrimePort,
       "sysCRdnSecSlot": sysCRdnSecSlot,
       "sysCRdnSecPort": sysCRdnSecPort,
       "sysCRdnMode": sysCRdnMode,
       "sysCRdnRecMode": sysCRdnRecMode,
       "sysCRdnRecTime": sysCRdnRecTime,
       "sysCRdnHwSwFlip": sysCRdnHwSwFlip,
       "sysCRdnRowStatus": sysCRdnRowStatus,
       "sysCRdnOnline": sysCRdnOnline,
       "sysCRdnSwitchingMode": sysCRdnSwitchingMode,
       "sysCRdnFlipUponEvent": sysCRdnFlipUponEvent,
       "sysCRdnLosOrLofTime": sysCRdnLosOrLofTime,
       "sysCRdnEventsTimeWindow": sysCRdnEventsTimeWindow,
       "sysCRdnSequenceNumberThreshold": sysCRdnSequenceNumberThreshold,
       "sysCRdnBufferErrorsThreshold": sysCRdnBufferErrorsThreshold,
       "sysCRdnBuffUnderrunTime": sysCRdnBuffUnderrunTime,
       "sysCRdnPrimePriority": sysCRdnPrimePriority,
       "sysCRdnSecPriority": sysCRdnSecPriority,
       "sysCRdnWTR": sysCRdnWTR,
       "sysCRdnName": sysCRdnName,
       "sysCRdnTxDownDurationUponFlip": sysCRdnTxDownDurationUponFlip,
       "sysDbase": sysDbase,
       "sysDbaseSanityCheckCmd": sysDbaseSanityCheckCmd,
       "sysDbaseDownloadCnfgIdxCmd": sysDbaseDownloadCnfgIdxCmd,
       "sysDbaseUploadCnfgIdxCmd": sysDbaseUploadCnfgIdxCmd,
       "sysDbaseFlipTable": sysDbaseFlipTable,
       "sysDbaseFlipEntry": sysDbaseFlipEntry,
       "sysDbaseFlipIdx": sysDbaseFlipIdx,
       "sysDbaseFlipTime": sysDbaseFlipTime,
       "sysDbaseFlipActivation": sysDbaseFlipActivation,
       "mdlDacsMux": mdlDacsMux,
       "mdlGen": mdlGen,
       "mdlSTable": mdlSTable,
       "mdlSEntry": mdlSEntry,
       "mdlSSltIdx": mdlSSltIdx,
       "mdlSCardType": mdlSCardType,
       "mdlSHwVer": mdlSHwVer,
       "mdlSSwVer": mdlSSwVer,
       "mdlSAlarmStatus": mdlSAlarmStatus,
       "mdlSAlarmStatusAll": mdlSAlarmStatusAll,
       "mdlSTestStatus": mdlSTestStatus,
       "mdlSHwStatus": mdlSHwStatus,
       "mdlSActivity": mdlSActivity,
       "mdlSAlrClearCmd": mdlSAlrClearCmd,
       "mdlSAlrClearAllCmd": mdlSAlrClearAllCmd,
       "mdlSAlrMaskAll": mdlSAlrMaskAll,
       "mdlSCmd": mdlSCmd,
       "mdlSReset": mdlSReset,
       "mdlSRebuildFrame": mdlSRebuildFrame,
       "mdlSBackupSwVer": mdlSBackupSwVer,
       "mdlSSecondaryBackupSwVer": mdlSSecondaryBackupSwVer,
       "mdlSPiggybackVer": mdlSPiggybackVer,
       "mdlCTable": mdlCTable,
       "mdlCEntry": mdlCEntry,
       "mdlCConfigIdx": mdlCConfigIdx,
       "mdlCSlotIdx": mdlCSlotIdx,
       "mdlCProgCardType": mdlCProgCardType,
       "mdlCNoOfExtPrt": mdlCNoOfExtPrt,
       "mdlCNoOfIntPrt": mdlCNoOfIntPrt,
       "mdlCParam": mdlCParam,
       "mdlAlr": mdlAlr,
       "mdlAlrTable": mdlAlrTable,
       "mdlAlrEntry": mdlAlrEntry,
       "mdlAlrIdx": mdlAlrIdx,
       "mdlAlrSltIdx": mdlAlrSltIdx,
       "mdlAlrCode": mdlAlrCode,
       "mdlAlrState": mdlAlrState,
       "mdlAlarmMask": mdlAlarmMask,
       "mdlAlarmInvert": mdlAlarmInvert,
       "mdlAlarmOnOff": mdlAlarmOnOff,
       "mdlAlarmCounter": mdlAlarmCounter,
       "mdlAlrMaskTable": mdlAlrMaskTable,
       "mdlAlrMaskEntry": mdlAlrMaskEntry,
       "mdlAlrMaskSltIdx": mdlAlrMaskSltIdx,
       "mdlAlrMask": mdlAlrMask,
       "mdlCl": mdlCl,
       "mdlClTable": mdlClTable,
       "mdlClEntry": mdlClEntry,
       "mdlClIdx": mdlClIdx,
       "mdlClSwchStatus": mdlClSwchStatus,
       "mdlClLastFlipDate": mdlClLastFlipDate,
       "mdlClLastFlipTime": mdlClLastFlipTime,
       "mdlClLastFlipCause": mdlClLastFlipCause,
       "mdlPs": mdlPs,
       "mdlPsTable": mdlPsTable,
       "mdlPsEntry": mdlPsEntry,
       "mdlPsIdx": mdlPsIdx,
       "mdlPsStatus": mdlPsStatus,
       "mdlPsTestResult": mdlPsTestResult,
       "prtDacsMux": prtDacsMux,
       "prtGen": prtGen,
       "prtGenParamTable": prtGenParamTable,
       "prtGenEntry": prtGenEntry,
       "prtGenPrtIdx": prtGenPrtIdx,
       "prtGenSlt": prtGenSlt,
       "prtGenExtInt": prtGenExtInt,
       "prtGenIfIndex": prtGenIfIndex,
       "prtGenActiveStatus": prtGenActiveStatus,
       "prtGenAlrStatus": prtGenAlrStatus,
       "prtGenTestStatus": prtGenTestStatus,
       "prtGenTestMask": prtGenTestMask,
       "prtGenTestCmd": prtGenTestCmd,
       "prtGenTestRunning": prtGenTestRunning,
       "prtGenType": prtGenType,
       "prtGenInterfaceType": prtGenInterfaceType,
       "prtGenAlrClearCmd": prtGenAlrClearCmd,
       "prtGenAlrMaskAll": prtGenAlrMaskAll,
       "prtGenParamStatus": prtGenParamStatus,
       "prtGenRdnStatus": prtGenRdnStatus,
       "prtGenTestMaskXP": prtGenTestMaskXP,
       "prtGenTestCmdXP": prtGenTestCmdXP,
       "prtGenTestRunningXP": prtGenTestRunningXP,
       "prtGenTestDurationTable": prtGenTestDurationTable,
       "prtGenTestDurationEntry": prtGenTestDurationEntry,
       "prtGenTestPrtIdx": prtGenTestPrtIdx,
       "prtGenTestIdx": prtGenTestIdx,
       "prtGenTestDuration": prtGenTestDuration,
       "prtGenTsTable": prtGenTsTable,
       "prtGenTsEntry": prtGenTsEntry,
       "prtGenTsCnfgIdx": prtGenTsCnfgIdx,
       "prtGenTsPrtIdx": prtGenTsPrtIdx,
       "prtGenTsIdx": prtGenTsIdx,
       "prtGenTsType": prtGenTsType,
       "prtGenTsIConPrt": prtGenTsIConPrt,
       "prtGenTsIConTs": prtGenTsIConTs,
       "prtAlr": prtAlr,
       "prtSAlarmTable": prtSAlarmTable,
       "prtSAlarmEntry": prtSAlarmEntry,
       "prtSAlarmIdx": prtSAlarmIdx,
       "prtSAlarmPrtIdx": prtSAlarmPrtIdx,
       "prtSAlarmCode": prtSAlarmCode,
       "prtSAlarmState": prtSAlarmState,
       "prtSAlarmMask": prtSAlarmMask,
       "prtSAlarmInvert": prtSAlarmInvert,
       "prtSAlarmOnOff": prtSAlarmOnOff,
       "prtSAlarmCounter": prtSAlarmCounter,
       "prtAlrMaskTable": prtAlrMaskTable,
       "prtAlrMaskEntry": prtAlrMaskEntry,
       "prtAlrMaskPrtIdx": prtAlrMaskPrtIdx,
       "prtAlrMask": prtAlrMask,
       "prtBertTable": prtBertTable,
       "prtBertEntry": prtBertEntry,
       "prtBertPrtIdx": prtBertPrtIdx,
       "prtBertPattern": prtBertPattern,
       "prtBertInjectRate": prtBertInjectRate,
       "prtBertInjectErrRateCmd": prtBertInjectErrRateCmd,
       "prtBertInjectSingleErrCmd": prtBertInjectSingleErrCmd,
       "prtBertRunTime": prtBertRunTime,
       "prtBertESs": prtBertESs,
       "prtBertSyncLoss": prtBertSyncLoss,
       "prtBertErrorBits": prtBertErrorBits,
       "prtBertClearCounters": prtBertClearCounters,
       "prtBertSyncStatus": prtBertSyncStatus,
       "prtBertTs": prtBertTs,
       "prtBertResult": prtBertResult,
       "prtBertTxBits": prtBertTxBits,
       "prtBertRxBits": prtBertRxBits,
       "prtBertTxErrorBits": prtBertTxErrorBits,
       "prtMonTable": prtMonTable,
       "prtMonEntry": prtMonEntry,
       "prtMonCnfgIdx": prtMonCnfgIdx,
       "prtMonitoringIdx": prtMonitoringIdx,
       "prtMonitoringEnable": prtMonitoringEnable,
       "prtMonitoringTSs": prtMonitoringTSs,
       "prtMonitoredPort": prtMonitoredPort,
       "prtMonitoredTSs": prtMonitoredTSs,
       "prtCfgParam": prtCfgParam,
       "prtCfgParamTable": prtCfgParamTable,
       "prtCfgParamEntry": prtCfgParamEntry,
       "prtCfgParamCnfgIdx": prtCfgParamCnfgIdx,
       "prtCfgParamIdx": prtCfgParamIdx,
       "prtCfgParamSlt": prtCfgParamSlt,
       "prtCfgParamOperatedMl": prtCfgParamOperatedMl,
       "prtCfgParamMlAtoMlBPrio": prtCfgParamMlAtoMlBPrio,
       "prtCfgParamMlBtoMlAPrio": prtCfgParamMlBtoMlAPrio,
       "prtCfgParamInbandLoopDetection": prtCfgParamInbandLoopDetection,
       "prtCfgParamInbandLoopPatternCfg": prtCfgParamInbandLoopPatternCfg,
       "prtCfgParamInbandLoopActPattern": prtCfgParamInbandLoopActPattern,
       "prtCfgParamInbandLoopDeactPattern": prtCfgParamInbandLoopDeactPattern,
       "prtT1E1": prtT1E1,
       "prtT1E1StatTable": prtT1E1StatTable,
       "prtT1E1StatEntry": prtT1E1StatEntry,
       "prtT1E1SPrtIdx": prtT1E1SPrtIdx,
       "prtT1E1SSlt": prtT1E1SSlt,
       "prtT1E1OosCount": prtT1E1OosCount,
       "prtT1E1BpvLastMin": prtT1E1BpvLastMin,
       "prtT1E1BpvMax": prtT1E1BpvMax,
       "prtT1E1CnfgTable": prtT1E1CnfgTable,
       "prtT1E1CnfgEntry": prtT1E1CnfgEntry,
       "prtT1E1CnfgIdx": prtT1E1CnfgIdx,
       "prtT1E1PrtIdx": prtT1E1PrtIdx,
       "prtT1E1Slt": prtT1E1Slt,
       "prtT1E1LineType": prtT1E1LineType,
       "prtT1E1LineCode": prtT1E1LineCode,
       "prtT1E1SignalMode": prtT1E1SignalMode,
       "prtT1E1Fdl": prtT1E1Fdl,
       "prtT1E1FdlMode": prtT1E1FdlMode,
       "prtT1E1Sync": prtT1E1Sync,
       "prtT1E1CGA": prtT1E1CGA,
       "prtT1E1IdleCode": prtT1E1IdleCode,
       "prtT1E1OosSignal": prtT1E1OosSignal,
       "prtT1E1VoiceOos": prtT1E1VoiceOos,
       "prtT1E1DataOos": prtT1E1DataOos,
       "prtT1E1LineLengthMask": prtT1E1LineLengthMask,
       "prtT1E1TxGainMask": prtT1E1TxGainMask,
       "prtT1E1InbandMng": prtT1E1InbandMng,
       "prtT1E1InbandMngRate": prtT1E1InbandMngRate,
       "prtT1E1DedicatedTs": prtT1E1DedicatedTs,
       "prtT1E1InbandMngRoutProt": prtT1E1InbandMngRoutProt,
       "prtT1E1LinkMode": prtT1E1LinkMode,
       "prtT1E1Multiplier": prtT1E1Multiplier,
       "prtT1E1RxGain": prtT1E1RxGain,
       "prtT1E1RAI": prtT1E1RAI,
       "prtT1E1LineMode": prtT1E1LineMode,
       "prtT1E1TS0SaBits": prtT1E1TS0SaBits,
       "prtT1E1ConnectedTS": prtT1E1ConnectedTS,
       "prtT1E1Ts0SaBit": prtT1E1Ts0SaBit,
       "prtT1E1SameFeCnfg": prtT1E1SameFeCnfg,
       "prtT1E1RemCrc4": prtT1E1RemCrc4,
       "prtT1E1MaxTSs": prtT1E1MaxTSs,
       "prtT1E1EocTsConfig": prtT1E1EocTsConfig,
       "prtT1E1Role": prtT1E1Role,
       "prtT1E1PppEchoFailDetection": prtT1E1PppEchoFailDetection,
       "prtT1E1FdlMsgTable": prtT1E1FdlMsgTable,
       "prtT1E1FdlMsgEntry": prtT1E1FdlMsgEntry,
       "prtT1E1FdlMsgPrtIdx": prtT1E1FdlMsgPrtIdx,
       "prtT1E1FdlMsgFdlType": prtT1E1FdlMsgFdlType,
       "prtT1E1FdlMsgSlt": prtT1E1FdlMsgSlt,
       "prtT1E1FdlMsg": prtT1E1FdlMsg,
       "prtHS": prtHS,
       "prtHSParamTable": prtHSParamTable,
       "prtHSParamEntry": prtHSParamEntry,
       "prtHSCnfgIdx": prtHSCnfgIdx,
       "prtHSPrtIdx": prtHSPrtIdx,
       "prtHSSlt": prtHSSlt,
       "prtHSRate": prtHSRate,
       "prtHSFifoSize": prtHSFifoSize,
       "prtHSClkMode": prtHSClkMode,
       "prtHSCTS": prtHSCTS,
       "prtHSRtsState": prtHSRtsState,
       "prtHSInbandLoopback": prtHSInbandLoopback,
       "prtHSInbandLoopPatternCfg": prtHSInbandLoopPatternCfg,
       "prtHSInbandLoopActPattern": prtHSInbandLoopActPattern,
       "prtHSInbandLoopDeactPattern": prtHSInbandLoopDeactPattern,
       "prtHSDCD": prtHSDCD,
       "prtHSClkPolarity": prtHSClkPolarity,
       "prtHSInterfaceType": prtHSInterfaceType,
       "prtHSUnframed": prtHSUnframed,
       "prtHSBertTable": prtHSBertTable,
       "prtHSBertEntry": prtHSBertEntry,
       "prtHSBertPrtIdx": prtHSBertPrtIdx,
       "prtHSBertSlt": prtHSBertSlt,
       "prtHSBertCountClr": prtHSBertCountClr,
       "prtHSBertTestResult": prtHSBertTestResult,
       "prtSP": prtSP,
       "prtSpCnfgTable": prtSpCnfgTable,
       "prtSpCnfgEntry": prtSpCnfgEntry,
       "prtSpCnfgIdx": prtSpCnfgIdx,
       "prtSpPrtIdx": prtSpPrtIdx,
       "prtSpUsage": prtSpUsage,
       "prtSpRate": prtSpRate,
       "prtSpDataBits": prtSpDataBits,
       "prtSpParity": prtSpParity,
       "prtSpCallOutMode": prtSpCallOutMode,
       "prtSpInterface": prtSpInterface,
       "prtSpCTS": prtSpCTS,
       "prtSpDcdDelay": prtSpDcdDelay,
       "prtSpDsr": prtSpDsr,
       "prtSpNoOfRetries": prtSpNoOfRetries,
       "prtSpWaitForConnect": prtSpWaitForConnect,
       "prtSpDialMode": prtSpDialMode,
       "prtSpAltNumMode": prtSpAltNumMode,
       "prtSpPrimaryNum": prtSpPrimaryNum,
       "prtSpAltNum": prtSpAltNum,
       "prtSpRoutProtocol": prtSpRoutProtocol,
       "prtSpCmd": prtSpCmd,
       "prtSpActCallOut": prtSpActCallOut,
       "prtSpAlrRelayMode": prtSpAlrRelayMode,
       "prtSpStopBits": prtSpStopBits,
       "prtDim": prtDim,
       "prtDimCnfgTable": prtDimCnfgTable,
       "prtDimCnfgEntry": prtDimCnfgEntry,
       "prtDimCnfgIdx": prtDimCnfgIdx,
       "prtDimIdx": prtDimIdx,
       "prtDimTxMode": prtDimTxMode,
       "prtDimPolarity": prtDimPolarity,
       "prtDimClkMode": prtDimClkMode,
       "prtDimMaxDelay": prtDimMaxDelay,
       "prtDimMng": prtDimMng,
       "prtDimMngRoutProt": prtDimMngRoutProt,
       "prtDimDestTable": prtDimDestTable,
       "prtDimDestEntry": prtDimDestEntry,
       "prtDestCnfgIdx": prtDestCnfgIdx,
       "prtDestDimIdx": prtDestDimIdx,
       "prtDestIdx": prtDestIdx,
       "prtDest": prtDest,
       "prtDestConnect": prtDestConnect,
       "prtI": prtI,
       "prtICnfgTable": prtICnfgTable,
       "prtICnfgEntry": prtICnfgEntry,
       "prtICnfgIdx": prtICnfgIdx,
       "prtIIdx": prtIIdx,
       "prtIRate": prtIRate,
       "prtIConnect": prtIConnect,
       "prtHdsl": prtHdsl,
       "prtHdslTable": prtHdslTable,
       "prtHdslEntry": prtHdslEntry,
       "prtHdslIdx": prtHdslIdx,
       "prtHdslMode": prtHdslMode,
       "prtHdslRptrType": prtHdslRptrType,
       "prtHdslMaxRate": prtHdslMaxRate,
       "prtHdslLinkType": prtHdslLinkType,
       "prtHdslCompSwVer": prtHdslCompSwVer,
       "prtHdslCompHwVer": prtHdslCompHwVer,
       "prtT3E3": prtT3E3,
       "prtT3E3CnfgTable": prtT3E3CnfgTable,
       "prtT3E3CnfgEntry": prtT3E3CnfgEntry,
       "prtT3E3CnfgIdx": prtT3E3CnfgIdx,
       "prtT3E3PrtIdx": prtT3E3PrtIdx,
       "prtT3E3Slt": prtT3E3Slt,
       "prtT3E3LineLength": prtT3E3LineLength,
       "prtT3E3InbandMng": prtT3E3InbandMng,
       "prtT3E3AisFrame": prtT3E3AisFrame,
       "prtT3E3TxClockSource": prtT3E3TxClockSource,
       "prtT3E3RoutProt": prtT3E3RoutProt,
       "prtT3E3AisTransmit": prtT3E3AisTransmit,
       "genDacsMux": genDacsMux,
       "cmprTable": cmprTable,
       "cmprEntry": cmprEntry,
       "cmprTypeIdx": cmprTypeIdx,
       "cmprCnfgIdx": cmprCnfgIdx,
       "cmprVersion": cmprVersion,
       "cmprSltIdx": cmprSltIdx,
       "cmprPrtIdx": cmprPrtIdx,
       "cmprObj": cmprObj,
       "mapLinkTable": mapLinkTable,
       "mapLinkEntry": mapLinkEntry,
       "mapLinkIdx": mapLinkIdx,
       "mapLinkSlotIdx": mapLinkSlotIdx,
       "mapLinkPortIdx": mapLinkPortIdx,
       "mapLinkState": mapLinkState,
       "alrGenTable": alrGenTable,
       "alrGenEntry": alrGenEntry,
       "alrGenCode": alrGenCode,
       "alrGenDescription": alrGenDescription,
       "alrGenLevel": alrGenLevel,
       "alrGenSlotType": alrGenSlotType,
       "alrGenSeverity": alrGenSeverity,
       "alrGenDebounce": alrGenDebounce,
       "alrGenDefSeverity": alrGenDefSeverity,
       "radBridges": radBridges,
       "genBridge": genBridge,
       "radBridgeAction": radBridgeAction,
       "radBridgeInactiveArpTimeOut": radBridgeInactiveArpTimeOut,
       "radBridgeMaskTable": radBridgeMaskTable,
       "radBridgeMaskEntry": radBridgeMaskEntry,
       "radBridgeMaskType": radBridgeMaskType,
       "radBridgeMaskIfIndex": radBridgeMaskIfIndex,
       "radBridgeMaskNum": radBridgeMaskNum,
       "radBridgeMaskDest": radBridgeMaskDest,
       "radBridgeMaskPat1": radBridgeMaskPat1,
       "radBridgeMaskActiveBit1": radBridgeMaskActiveBit1,
       "radBridgeMaskFrom1": radBridgeMaskFrom1,
       "radBridgeMaskOffset1": radBridgeMaskOffset1,
       "radBridgeMaskCond1": radBridgeMaskCond1,
       "radBridgeMaskPat2": radBridgeMaskPat2,
       "radBridgeMaskActiveBit2": radBridgeMaskActiveBit2,
       "radBridgeMaskFrom2": radBridgeMaskFrom2,
       "radBridgeMaskOffset2": radBridgeMaskOffset2,
       "radBridgeMaskCond2": radBridgeMaskCond2,
       "radBridgeMaskPat3": radBridgeMaskPat3,
       "radBridgeMaskActiveBit3": radBridgeMaskActiveBit3,
       "radBridgeMaskFrom3": radBridgeMaskFrom3,
       "radBridgeMaskOffset3": radBridgeMaskOffset3,
       "radBridgeMaskCond3": radBridgeMaskCond3,
       "radBridgeMaskOper": radBridgeMaskOper,
       "radBridgeCOD": radBridgeCOD,
       "radBridgeCODParamTable": radBridgeCODParamTable,
       "radBridgeCODEntry": radBridgeCODEntry,
       "radBridgeCODIfIndex": radBridgeCODIfIndex,
       "radBridgeCODManualConnect": radBridgeCODManualConnect,
       "radBridgeCODMode": radBridgeCODMode,
       "radBridgeCODConnectDelay": radBridgeCODConnectDelay,
       "radBridgeCODisConnectDelay": radBridgeCODisConnectDelay,
       "radBridgeCODImplicitSwitch": radBridgeCODImplicitSwitch,
       "radBridgeCODNumAccess": radBridgeCODNumAccess,
       "radBridgeCODTotalConnecTime": radBridgeCODTotalConnecTime,
       "radBridgeCODTimeTriggerTable": radBridgeCODTimeTriggerTable,
       "radBridgeCODTimeTriggerEntry": radBridgeCODTimeTriggerEntry,
       "radBridgeCODTimeIfIndex": radBridgeCODTimeIfIndex,
       "radBridgeCODDay": radBridgeCODDay,
       "radBridgeCODTimeTriggerNum": radBridgeCODTimeTriggerNum,
       "radBridgeCODTimeTriggerFrom": radBridgeCODTimeTriggerFrom,
       "radBridgeCODTimeTriggerTo": radBridgeCODTimeTriggerTo,
       "radBridgeCODTimeTriggerStatus": radBridgeCODTimeTriggerStatus,
       "radBridgeCODTraffic": radBridgeCODTraffic,
       "radBridgeCODTrafficTable": radBridgeCODTrafficTable,
       "radBridgeCODTrafficEntry": radBridgeCODTrafficEntry,
       "radBridgeCODProtocolType": radBridgeCODProtocolType,
       "radBridgeCODTrafficTriggerStatus": radBridgeCODTrafficTriggerStatus,
       "radBridgeCODRemoteIPAddr": radBridgeCODRemoteIPAddr,
       "radBridgeCODIPMask": radBridgeCODIPMask,
       "radBridgeCODTrafficTriggerProtType": radBridgeCODTrafficTriggerProtType,
       "radBridgeCODCondTable": radBridgeCODCondTable,
       "radBridgeCODCondEntry": radBridgeCODCondEntry,
       "radBridgeCODCondIfIndex": radBridgeCODCondIfIndex,
       "radBridgeCODOriginateConnectCondition": radBridgeCODOriginateConnectCondition,
       "radBridgeCODOriginateDisConnectCondition": radBridgeCODOriginateDisConnectCondition,
       "radBridgeCODOriginateDisConnectDelay": radBridgeCODOriginateDisConnectDelay,
       "radBridgeCODAnswerConnectCondition": radBridgeCODAnswerConnectCondition,
       "radBridgeCODSpecificOnTrafficOIDCondition": radBridgeCODSpecificOnTrafficOIDCondition,
       "radBridgeCODDisConnectMinimunFramesNumber": radBridgeCODDisConnectMinimunFramesNumber,
       "radBridgeIPX": radBridgeIPX,
       "radBridgeIPXdriver": radBridgeIPXdriver,
       "radBridgeIPXForwarding": radBridgeIPXForwarding,
       "radBridgeIPXRip": radBridgeIPXRip,
       "radBridgeIPXRipOutPackets": radBridgeIPXRipOutPackets,
       "radBridgeIPXRipInPackets": radBridgeIPXRipInPackets,
       "radBridgeIPXRipInDiscards": radBridgeIPXRipInDiscards,
       "radBridgeIPXRipTblNoOfEntries": radBridgeIPXRipTblNoOfEntries,
       "radBridgeIPXRipTblBcastTrigUpdateInterval": radBridgeIPXRipTblBcastTrigUpdateInterval,
       "radBridgeIPXRipTable": radBridgeIPXRipTable,
       "radBridgeIPXRipTableEntry": radBridgeIPXRipTableEntry,
       "radBridgeIPXRipDestNetwork": radBridgeIPXRipDestNetwork,
       "radBridgeIPXRipPolicy": radBridgeIPXRipPolicy,
       "radBridgeIPXRipForwardingRouter": radBridgeIPXRipForwardingRouter,
       "radBridgeIPXRipNIC": radBridgeIPXRipNIC,
       "radBridgeIPXRipTickMetric": radBridgeIPXRipTickMetric,
       "radBridgeIPXRipHopMetric": radBridgeIPXRipHopMetric,
       "radBridgeIPXRipAgingTime": radBridgeIPXRipAgingTime,
       "radBridgeIPXRipValueStatus": radBridgeIPXRipValueStatus,
       "radBridgeIPXRipForwardType": radBridgeIPXRipForwardType,
       "radBridgeIPXRipInfTable": radBridgeIPXRipInfTable,
       "radBridgeIPXRipInfEntry": radBridgeIPXRipInfEntry,
       "radBridgeIPXRipInfIfIndex": radBridgeIPXRipInfIfIndex,
       "radBridgeIPXRipInfBcastUpdate": radBridgeIPXRipInfBcastUpdate,
       "radBridgeIPXRipInfAgeMultiplier": radBridgeIPXRipInfAgeMultiplier,
       "radBridgeIPXSap": radBridgeIPXSap,
       "radBridgeIPXSapOutPackets": radBridgeIPXSapOutPackets,
       "radBridgeIPXSapInPackets": radBridgeIPXSapInPackets,
       "radBridgeIPXSapInDiscards": radBridgeIPXSapInDiscards,
       "radBridgeIPXSapTblNoOfEntries": radBridgeIPXSapTblNoOfEntries,
       "radBridgeIPXSapTblBcastTrigUpdateInterval": radBridgeIPXSapTblBcastTrigUpdateInterval,
       "radBridgeIPXSapTable": radBridgeIPXSapTable,
       "radBridgeIPXSapTableEntry": radBridgeIPXSapTableEntry,
       "radBridgeIPXSapServerType": radBridgeIPXSapServerType,
       "radBridgeIPXSapName": radBridgeIPXSapName,
       "radBridgeIPXSapNetwork": radBridgeIPXSapNetwork,
       "radBridgeIPXSapNode": radBridgeIPXSapNode,
       "radBridgeIPXSapSocket": radBridgeIPXSapSocket,
       "radBridgeIPXSapHopsToServer": radBridgeIPXSapHopsToServer,
       "radBridgeIPXSapNIC": radBridgeIPXSapNIC,
       "radBridgeIPXSapAgingTime": radBridgeIPXSapAgingTime,
       "radBridgeIPXSapStatus": radBridgeIPXSapStatus,
       "radBridgeIPXSapInfTable": radBridgeIPXSapInfTable,
       "radBridgeIPXSapInfEntry": radBridgeIPXSapInfEntry,
       "radBridgeIPXSapInfIfIndex": radBridgeIPXSapInfIfIndex,
       "radBridgeIPXSapInfBcastUpdate": radBridgeIPXSapInfBcastUpdate,
       "radBridgeIPXSapInfAgeMultiplier": radBridgeIPXSapInfAgeMultiplier,
       "newMasking": newMasking,
       "maskingMaxEntries": maskingMaxEntries,
       "maskingCurrentEntries": maskingCurrentEntries,
       "maskingTable": maskingTable,
       "maskingEntry": maskingEntry,
       "maskingType": maskingType,
       "maskingIfIndex": maskingIfIndex,
       "maskingIndex": maskingIndex,
       "maskingProtocolType": maskingProtocolType,
       "maskingSmartMaskOID": maskingSmartMaskOID,
       "maskingFrameType": maskingFrameType,
       "maskingFrameTypeCondition": maskingFrameTypeCondition,
       "maskingSourceAddress": maskingSourceAddress,
       "maskingSourceActiveBits": maskingSourceActiveBits,
       "maskingSourceMacOrNet": maskingSourceMacOrNet,
       "maskingSourceCondition": maskingSourceCondition,
       "maskingDestAddress": maskingDestAddress,
       "maskingDestActiveBits": maskingDestActiveBits,
       "maskingDestMacOrNet": maskingDestMacOrNet,
       "maskingDestCondition": maskingDestCondition,
       "maskingLowLevelProt": maskingLowLevelProt,
       "maskingLowLevelProtCondition": maskingLowLevelProtCondition,
       "maskingHighLevelProt": maskingHighLevelProt,
       "maskingHighLevelProtCondition": maskingHighLevelProtCondition,
       "maskingPortNum": maskingPortNum,
       "maskingPortNumCondition": maskingPortNumCondition,
       "maskingOperation": maskingOperation,
       "maskingSrcPortNum": maskingSrcPortNum,
       "maskingSrcPortNumCondition": maskingSrcPortNumCondition,
       "radBridgePerformance": radBridgePerformance,
       "radBridgeCurrentTable": radBridgeCurrentTable,
       "radBridgeCurrentEntry": radBridgeCurrentEntry,
       "radBridgeCurrentIndex": radBridgeCurrentIndex,
       "radBridgeCurrentIngressFilteringDiscardedFrames": radBridgeCurrentIngressFilteringDiscardedFrames,
       "radBridgeCurrentFrameTypeDiscardedFrames": radBridgeCurrentFrameTypeDiscardedFrames,
       "radBridgeCurrentRxCorrectFrames": radBridgeCurrentRxCorrectFrames,
       "radBridgeCurrentRxCorrectBytes": radBridgeCurrentRxCorrectBytes,
       "radBridgeCurrentRxCorrectBytesHCOverflow": radBridgeCurrentRxCorrectBytesHCOverflow,
       "radBridgeCurrentRxBcastFrames": radBridgeCurrentRxBcastFrames,
       "radBridgeCurrentRxMcastFrames": radBridgeCurrentRxMcastFrames,
       "radBridgeCurrentTxCorrectFrames": radBridgeCurrentTxCorrectFrames,
       "radBridgeCurrentTxCorrectBytes": radBridgeCurrentTxCorrectBytes,
       "radBridgeCurrentTxCorrectBytesHCOverflow": radBridgeCurrentTxCorrectBytesHCOverflow,
       "radBridgeCurrentTxBcastFrames": radBridgeCurrentTxBcastFrames,
       "radBridgeCurrentTxMcastFrames": radBridgeCurrentTxMcastFrames,
       "radBridgeCurrentTxDropFrames": radBridgeCurrentTxDropFrames,
       "radBridgeIntervalTable": radBridgeIntervalTable,
       "radBridgeIntervalEntry": radBridgeIntervalEntry,
       "radBridgeIntervalIndex": radBridgeIntervalIndex,
       "radBridgeIntervalNumber": radBridgeIntervalNumber,
       "radBridgeIntervalIngressFilteringDiscardedFrames": radBridgeIntervalIngressFilteringDiscardedFrames,
       "radBridgeIntervalFrameTypeDiscardedFrames": radBridgeIntervalFrameTypeDiscardedFrames,
       "radBridgeIntervalRxCorrectFrames": radBridgeIntervalRxCorrectFrames,
       "radBridgeIntervalRxCorrectBytes": radBridgeIntervalRxCorrectBytes,
       "radBridgeIntervalRxCorrectBytesHCOverflow": radBridgeIntervalRxCorrectBytesHCOverflow,
       "radBridgeIntervalRxBcastFrames": radBridgeIntervalRxBcastFrames,
       "radBridgeIntervalRxMcastFrames": radBridgeIntervalRxMcastFrames,
       "radBridgeIntervalTxCorrectFrames": radBridgeIntervalTxCorrectFrames,
       "radBridgeIntervalTxCorrectBytes": radBridgeIntervalTxCorrectBytes,
       "radBridgeIntervalTxCorrectBytesHCOverflow": radBridgeIntervalTxCorrectBytesHCOverflow,
       "radBridgeIntervalTxBcastFrames": radBridgeIntervalTxBcastFrames,
       "radBridgeIntervalTxMcastFrames": radBridgeIntervalTxMcastFrames,
       "radBridgeIntervalTxDropFrames": radBridgeIntervalTxDropFrames,
       "radBridgePortBaseVlan": radBridgePortBaseVlan,
       "radBridgePortBaseVlanTable": radBridgePortBaseVlanTable,
       "radBridgePortBaseVlanEntry": radBridgePortBaseVlanEntry,
       "radBridgePortBaseVlanCnfgIdx": radBridgePortBaseVlanCnfgIdx,
       "radBridgePortBaseVlanIdx": radBridgePortBaseVlanIdx,
       "radBridgePortBaseVlanName": radBridgePortBaseVlanName,
       "radBridgePortBaseVlanEgressPorts": radBridgePortBaseVlanEgressPorts,
       "radBridgePortBaseVlanVirtualGroups": radBridgePortBaseVlanVirtualGroups,
       "radBridgePortBaseVlanRowStatus": radBridgePortBaseVlanRowStatus,
       "radBridgePortBaseVlanMng": radBridgePortBaseVlanMng,
       "radBridgePortVlanMemberTable": radBridgePortVlanMemberTable,
       "radBridgePortVlanMemberEntry": radBridgePortVlanMemberEntry,
       "radBridgePortVlanMemberBridgeIdx": radBridgePortVlanMemberBridgeIdx,
       "radBridgePortVlanMemberPortIdx": radBridgePortVlanMemberPortIdx,
       "radBridgePortVlanMemberVlanId": radBridgePortVlanMemberVlanId,
       "radBridgePortVlanMemberRowStatus": radBridgePortVlanMemberRowStatus,
       "radBridgeGenCnfg": radBridgeGenCnfg,
       "radBridgeGenFlowTable": radBridgeGenFlowTable,
       "radBridgeGenFlowEntry": radBridgeGenFlowEntry,
       "radBridgeGenFlowCnfgIdx": radBridgeGenFlowCnfgIdx,
       "radBridgeGenFlowIdx": radBridgeGenFlowIdx,
       "radBridgeGenFlowRowStatus": radBridgeGenFlowRowStatus,
       "radBridgeGenFlowFloodOrBcastMaxRate": radBridgeGenFlowFloodOrBcastMaxRate,
       "radBridgeGenFlowQosMode": radBridgeGenFlowQosMode,
       "radBridgeGenFlowSchedulingMode": radBridgeGenFlowSchedulingMode,
       "radBridgeGenFlowBasicClassification": radBridgeGenFlowBasicClassification,
       "radBridgeGenFlowMulticastTrafficClass": radBridgeGenFlowMulticastTrafficClass,
       "radBridgeGenFlowBroadcastTrafficClass": radBridgeGenFlowBroadcastTrafficClass,
       "radBridgeGenFlowUnkownUnicastTrafficClass": radBridgeGenFlowUnkownUnicastTrafficClass,
       "radBridgeDot1qVlanStaticTable": radBridgeDot1qVlanStaticTable,
       "radBridgeDot1qVlanStaticEntry": radBridgeDot1qVlanStaticEntry,
       "radBridgeDot1qVlanTaggedPorts": radBridgeDot1qVlanTaggedPorts,
       "radBridgeDot1qVlanUnmodifiedPorts": radBridgeDot1qVlanUnmodifiedPorts,
       "radBridgeDot1qVlanSplitHorizon": radBridgeDot1qVlanSplitHorizon,
       "radDot1qPortVlanTable": radDot1qPortVlanTable,
       "radDot1qPortVlanEntry": radDot1qPortVlanEntry,
       "radDot1qPortStacking": radDot1qPortStacking,
       "radDot1qPortCopyOriginVlanPriority": radDot1qPortCopyOriginVlanPriority,
       "radDot1qPortDefaultVlanPriority": radDot1qPortDefaultVlanPriority,
       "radDot1qPortTagStripping": radDot1qPortTagStripping,
       "radDot1qPortEgressTagHandling": radDot1qPortEgressTagHandling,
       "radDot1qPortIngressTagHandling": radDot1qPortIngressTagHandling,
       "radDot1qPortReplaceVlanPriority": radDot1qPortReplaceVlanPriority,
       "radDot1qPortVlanEthType": radDot1qPortVlanEthType,
       "radDot1qPortVlanCnodeLevel1Agent": radDot1qPortVlanCnodeLevel1Agent,
       "radBridgeGenCfgTable": radBridgeGenCfgTable,
       "radBridgeGenCfgEntry": radBridgeGenCfgEntry,
       "radBridgeGenCfgIdx": radBridgeGenCfgIdx,
       "radBridgeGenCfgIdx2": radBridgeGenCfgIdx2,
       "radBridgeGenCfgBridgeAction": radBridgeGenCfgBridgeAction,
       "radBridgeAgingTimeSec": radBridgeAgingTimeSec,
       "radBridgeMngVlanId": radBridgeMngVlanId,
       "radBridgeLoopDetectVlanId": radBridgeLoopDetectVlanId,
       "radBridgeSplitHorizon": radBridgeSplitHorizon,
       "radBridgeEthType": radBridgeEthType,
       "radBridgeAgingTime": radBridgeAgingTime,
       "radBridgeMngFlow": radBridgeMngFlow,
       "radBridgeStatus": radBridgeStatus,
       "radBridgeInvBasePortTable": radBridgeInvBasePortTable,
       "radBridgeInvBasePortEntry": radBridgeInvBasePortEntry,
       "radBridgeInvBasePortIfIndex": radBridgeInvBasePortIfIndex,
       "radBridgeInvBasePort": radBridgeInvBasePort,
       "radBridgeStp": radBridgeStp,
       "radBridgeStpCnfgTable": radBridgeStpCnfgTable,
       "radBridgeStpCnfgEntry": radBridgeStpCnfgEntry,
       "radBridgeStpCnfgIdx1": radBridgeStpCnfgIdx1,
       "radBridgeStpCnfgIdx2": radBridgeStpCnfgIdx2,
       "radBridgeStpCnfgForwardDelay": radBridgeStpCnfgForwardDelay,
       "radBridgeStpCnfgMaxAge": radBridgeStpCnfgMaxAge,
       "radBridgeStpCnfgHelloTime": radBridgeStpCnfgHelloTime,
       "radBridgeStpCnfgPriority": radBridgeStpCnfgPriority,
       "radBridgeStpCnfgStpVersion": radBridgeStpCnfgStpVersion,
       "radBridgeStpStatTable": radBridgeStpStatTable,
       "radBridgeStpStatEntry": radBridgeStpStatEntry,
       "radBridgeStpStatIdx": radBridgeStpStatIdx,
       "radBridgeStpStatForwardDelay": radBridgeStpStatForwardDelay,
       "radBridgeStpStatMaxAge": radBridgeStpStatMaxAge,
       "radBridgeStpStatHelloTime": radBridgeStpStatHelloTime,
       "radBridgeStpStatDesignatedRoot": radBridgeStpStatDesignatedRoot,
       "radBridgeStpStatRootCost": radBridgeStpStatRootCost,
       "radBridgeForwardingMode": radBridgeForwardingMode,
       "radBridgePort": radBridgePort,
       "radBridgePortCnfgTable": radBridgePortCnfgTable,
       "radBridgePortCnfgEntry": radBridgePortCnfgEntry,
       "radBridgePortCnfgIdx": radBridgePortCnfgIdx,
       "radBridgePortCnfgPrtIdx": radBridgePortCnfgPrtIdx,
       "radBridgePortCnfgMaxMacAddr": radBridgePortCnfgMaxMacAddr,
       "radBridgePortCnfgMngFlow": radBridgePortCnfgMngFlow,
       "radBridgePortCnfgMcastMode": radBridgePortCnfgMcastMode,
       "radBridgePortCnfgDefaultVpi": radBridgePortCnfgDefaultVpi,
       "radBridgePortCnfgDefaultVci": radBridgePortCnfgDefaultVci,
       "radBridgePortCnfgStatVlanId": radBridgePortCnfgStatVlanId,
       "radBridgePortCnfgIngressMtu": radBridgePortCnfgIngressMtu,
       "radBridgePortCnfgEgressMtu": radBridgePortCnfgEgressMtu,
       "radBridgePortCnfgDot1x": radBridgePortCnfgDot1x,
       "radConverters": radConverters,
       "radGen": radGen,
       "systems": systems,
       "systemsEvents": systemsEvents,
       "tftpStatusChangeTrap": tftpStatusChangeTrap,
       "agnStatusChangeTrap": agnStatusChangeTrap,
       "prtStatusChangeTrap": prtStatusChangeTrap,
       "swdlStatusResult": swdlStatusResult,
       "intSwdlSlotFileMismatch": intSwdlSlotFileMismatch,
       "agnCounterChange": agnCounterChange,
       "prtClkSrcChangeTrap": prtClkSrcChangeTrap,
       "moduleFailTrap": moduleFailTrap,
       "moduleInitFailTrap": moduleInitFailTrap,
       "clkSrcChangeTrap": clkSrcChangeTrap,
       "agnUploadDataTrap": agnUploadDataTrap,
       "enrollmentTrap": enrollmentTrap,
       "agnPowerFailureTrap": agnPowerFailureTrap,
       "agnFanFailureTrap": agnFanFailureTrap,
       "agnSystemParameterChangeTrap": agnSystemParameterChangeTrap,
       "agnConfigDBChecksumError": agnConfigDBChecksumError,
       "agnAlarmBufferOverflow": agnAlarmBufferOverflow,
       "agnAlarmBufferClear": agnAlarmBufferClear,
       "agnParametersValueChanged": agnParametersValueChanged,
       "agnDriverSwMismatch": agnDriverSwMismatch,
       "agnActualLowRate": agnActualLowRate,
       "xModemFileTransferStatusTrap": xModemFileTransferStatusTrap,
       "agnStationClkFailureTrap": agnStationClkFailureTrap,
       "successfulLogin": successfulLogin,
       "failedLogin": failedLogin,
       "modlChangeTrap": modlChangeTrap,
       "licenseUpdateTrap": licenseUpdateTrap,
       "agnClkSrcStateChangeTrap": agnClkSrcStateChangeTrap,
       "agnSelfTestResultChangeTrap": agnSelfTestResultChangeTrap,
       "agnClkSrcFrequencyAlarmTrap": agnClkSrcFrequencyAlarmTrap,
       "radSysTR": radSysTR,
       "radRADring": radRADring,
       "radTMA": radTMA,
       "radRingMonitor": radRingMonitor,
       "radSysFddi": radSysFddi,
       "radFDX100": radFDX100,
       "radSysWan": radSysWan,
       "radSysWanEvents": radSysWanEvents,
       "alarmStatusTrap": alarmStatusTrap,
       "systemTrap": systemTrap,
       "alarmLOS": alarmLOS,
       "alarmLOF": alarmLOF,
       "channelOperStatusTrap": channelOperStatusTrap,
       "alarmAIS": alarmAIS,
       "alarmRDI": alarmRDI,
       "alarmFEBE": alarmFEBE,
       "localConnStatusTrap": localConnStatusTrap,
       "remoteConnStatusTrap": remoteConnStatusTrap,
       "bundleConnectionStatusTrap": bundleConnectionStatusTrap,
       "radMP2100": radMP2100,
       "radMP2104": radMP2104,
       "radMP2100B": radMP2100B,
       "radMP2100F": radMP2100F,
       "radMP2100H": radMP2100H,
       "radMP2104H": radMP2104H,
       "radMP2200B": radMP2200B,
       "radMP2200F": radMP2200F,
       "radMX3000": radMX3000,
       "radMX3004": radMX3004,
       "radMX30": radMX30,
       "radMX300": radMX300,
       "radVOIP": radVOIP,
       "radKM2100": radKM2100,
       "radKM2104": radKM2104,
       "radDXC30": radDXC30,
       "radDXC10A": radDXC10A,
       "radDXC8R": radDXC8R,
       "radDXC30E": radDXC30E,
       "radDXC3000": radDXC3000,
       "radDXC8RNew": radDXC8RNew,
       "radFcdT1LC": radFcdT1LC,
       "radFcdE1LC": radFcdE1LC,
       "radFcdT1L": radFcdT1L,
       "radFcdE1L": radFcdE1L,
       "radFcdT1": radFcdT1,
       "radFcdE1": radFcdE1,
       "radFcdE1I": radFcdE1I,
       "radFcdT1M": radFcdT1M,
       "radFcdE1M": radFcdE1M,
       "radFcdIP": radFcdIP,
       "radFcdT1A": radFcdT1A,
       "radFcdE1A": radFcdE1A,
       "radFcdW": radFcdW,
       "radFcdSTM": radFcdSTM,
       "radHtuE1Sa": radHtuE1Sa,
       "radHtuE1": radHtuE1,
       "radHtu2Sa": radHtu2Sa,
       "radHtu2": radHtu2,
       "radAsmi450R768Sa": radAsmi450R768Sa,
       "radAsmi450R768": radAsmi450R768,
       "radAsmi450R1152Sa": radAsmi450R1152Sa,
       "radAsmi450R1152": radAsmi450R1152,
       "radLrs12F": radLrs12F,
       "radLrs12B": radLrs12B,
       "radLrs52": radLrs52,
       "radHcdE1Sa": radHcdE1Sa,
       "radHcdE1": radHcdE1,
       "radHtuT1Sa": radHtuT1Sa,
       "radHtuT1": radHtuT1,
       "radOptimux4E1": radOptimux4E1,
       "radOptimux4T1": radOptimux4T1,
       "radOptimuxXLE1": radOptimuxXLE1,
       "radOptimuxXLT1": radOptimuxXLT1,
       "radOptimuxXL16E1": radOptimuxXL16E1,
       "radImx64": radImx64,
       "radImx6L": radImx6L,
       "radImx2": radImx2,
       "radImx4T1": radImx4T1,
       "radImx4E1": radImx4E1,
       "radImx2T1E1": radImx2T1E1,
       "radImxi4": radImxi4,
       "radOptimux155": radOptimux155,
       "radOptimux4T1L": radOptimux4T1L,
       "radOptimux4E1L": radOptimux4E1L,
       "radHtuE1SaV2": radHtuE1SaV2,
       "radHtuE1V2": radHtuE1V2,
       "radFomiE3": radFomiE3,
       "radFomiT3": radFomiT3,
       "radOpt4E1C": radOpt4E1C,
       "radOpt4T1C": radOpt4T1C,
       "radPrbiE3": radPrbiE3,
       "radPrbiT3": radPrbiT3,
       "radHcd4Sa": radHcd4Sa,
       "radOptimuxT3": radOptimuxT3,
       "radFRmon": radFRmon,
       "radIpMux4": radIpMux4,
       "radIpMux1": radIpMux1,
       "radIpMux16": radIpMux16,
       "radIpMux1E": radIpMux1E,
       "radVmux2100": radVmux2100,
       "radMP104": radMP104,
       "radMP204": radMP204,
       "radVmux110": radVmux110,
       "radFcd155": radFcd155,
       "radIpMux8": radIpMux8,
       "radOptimux155DS3": radOptimux155DS3,
       "radOptimuxT3L": radOptimuxT3L,
       "radGmux2000": radGmux2000,
       "radOp16E1L": radOp16E1L,
       "radOp16E1LS": radOp16E1LS,
       "radPRBm20": radPRBm20,
       "radPRBm22": radPRBm22,
       "radAsmi52A": radAsmi52A,
       "radOpXLE1": radOpXLE1,
       "radOpXLT1": radOpXLT1,
       "radOpXL16E1": radOpXL16E1,
       "radOp4E1": radOp4E1,
       "radOp4T1": radOp4T1,
       "radDxc4": radDxc4,
       "radIpMux11": radIpMux11,
       "radIpMux14": radIpMux14,
       "radOp1550": radOp1550,
       "radFdsl101": radFdsl101,
       "radFdsl201": radFdsl201,
       "radVmux120": radVmux120,
       "radVmux2200": radVmux2200,
       "radVmux400": radVmux400,
       "radIpMux116": radIpMux116,
       "radOp4E1LNew": radOp4E1LNew,
       "radOp4T1LNew": radOp4T1LNew,
       "radFcd155E": radFcd155E,
       "radFcd155ES": radFcd155ES,
       "radMP4100": radMP4100,
       "radAsmi52L": radAsmi52L,
       "radVmux210": radVmux210,
       "radOp34E1": radOp34E1,
       "radVmux312": radVmux312,
       "radVmux404": radVmux404,
       "radVmux420": radVmux420,
       "radIpMux12": radIpMux12,
       "radOptimux4E1V3dot5": radOptimux4E1V3dot5,
       "radOptimux4E1Mar06": radOptimux4E1Mar06,
       "radFcd155EwAPS": radFcd155EwAPS,
       "radOptimux4T1Mar06": radOptimux4T1Mar06,
       "radFcd155EwAPS2pdh": radFcd155EwAPS2pdh,
       "radVmux320": radVmux320,
       "radMP2100VoIP": radMP2100VoIP,
       "radMP2104VoIP": radMP2104VoIP,
       "radIpMux24": radIpMux24,
       "radOp4E1NG1": radOp4E1NG1,
       "radOp4T1NG1": radOp4T1NG1,
       "radOp25": radOp25,
       "radAsmi54": radAsmi54,
       "radVmux314": radVmux314,
       "radFcd622": radFcd622,
       "radLrs22": radLrs22,
       "radUNT20E1": radUNT20E1,
       "radIpMux2L": radIpMux2L,
       "radUNT20Fcd": radUNT20Fcd,
       "radIpMux216": radIpMux216,
       "radLrs102": radLrs102,
       "radGmux2004": radGmux2004,
       "radLrs102unbal": radLrs102unbal,
       "radLrs16": radLrs16,
       "radVmux405": radVmux405,
       "radVmux425": radVmux425,
       "radMiniCVS": radMiniCVS,
       "radSysBRG": radSysBRG,
       "radTRE1": radTRE1,
       "radTRE1D": radTRE1D,
       "radTRE8": radTRE8,
       "radTRE8D": radTRE8D,
       "radMBE1": radMBE1,
       "radMBE1D": radMBE1D,
       "radMBE8": radMBE8,
       "radMBE8D": radMBE8D,
       "radMLBT": radMLBT,
       "radFEB4DAS": radFEB4DAS,
       "radTrimBrg10": radTrimBrg10,
       "radTrimBrg16": radTrimBrg16,
       "radRRTRE8": radRRTRE8,
       "radRRTRE8D": radRRTRE8D,
       "radRRMLBT": radRRMLBT,
       "radRRMLBTF": radRRMLBTF,
       "radRRTRE1D": radRRTRE1D,
       "radTRERAS": radTRERAS,
       "radTRERASa": radTRERASa,
       "radMBERAS": radMBERAS,
       "radMBERASa": radMBERASa,
       "radFEB4FDX": radFEB4FDX,
       "radFEB4SAS": radFEB4SAS,
       "radRRFTBDAS": radRRFTBDAS,
       "radRRFTBSAS": radRRFTBSAS,
       "radFTBDAS": radFTBDAS,
       "radFTBSAS": radFTBSAS,
       "radFastWay100": radFastWay100,
       "radSysCnvrtr": radSysCnvrtr,
       "radSTC1": radSTC1,
       "radSTC2": radSTC2,
       "radSTC1UDP": radSTC1UDP,
       "radSTC2UDP": radSTC2UDP,
       "radFTC1": radFTC1,
       "radFTC2": radFTC2,
       "radFTC1UDP": radFTC1UDP,
       "radFTC2UDP": radFTC2UDP,
       "radSEC1": radSEC1,
       "radSEC2": radSEC2,
       "radSEC1UDP": radSEC1UDP,
       "radSEC2UDP": radSEC2UDP,
       "radFEC1": radFEC1,
       "radFEC2": radFEC2,
       "radFEC1UDP": radFEC1UDP,
       "radFEC2UDP": radFEC2UDP,
       "radRIC155": radRIC155,
       "radRICE1": radRICE1,
       "radETX102": radETX102,
       "radRIC155GE": radRIC155GE,
       "radRiciT3": radRiciT3,
       "radRiciE3": radRiciE3,
       "radRiciT1": radRiciT1,
       "radETX202": radETX202,
       "radETX105": radETX105,
       "radETX205": radETX205,
       "radRiciSE": radRiciSE,
       "radRIC622GE": radRIC622GE,
       "radSPH": radSPH,
       "radMiricE1T1": radMiricE1T1,
       "radMiricE3T3": radMiricE3T3,
       "radEthAccess": radEthAccess,
       "radETX510": radETX510,
       "radEGate100": radEGate100,
       "radEGate20": radEGate20,
       "radRici8E1": radRici8E1,
       "radRici8T1": radRici8T1,
       "radRici4E1": radRici4E1,
       "radRici4T1": radRici4T1,
       "radIMXI4": radIMXI4,
       "radETX550": radETX550,
       "radRici16": radRici16,
       "radETX102A": radETX102A,
       "radETX202A": radETX202A,
       "radETX201A": radETX201A,
       "radETX201": radETX201,
       "radUNT20Ric": radUNT20Ric,
       "radRici4E1L": radRici4E1L,
       "radRici8E1L": radRici8E1L,
       "radRici155GE": radRici155GE,
       "radRici622GE": radRici622GE,
       "radETX208": radETX208,
       "radETX202AW": radETX202AW,
       "radETX102H": radETX102H,
       "radETX202H": radETX202H,
       "radSysStkHub": radSysStkHub,
       "radRBHE": radRBHE,
       "radRBHEEvents": radRBHEEvents,
       "radRBHT": radRBHT,
       "radRBHTEvents": radRBHTEvents,
       "radETS4fddiDAS": radETS4fddiDAS,
       "radETS4fddiSAS": radETS4fddiSAS,
       "radSAHEMX": radSAHEMX,
       "radSAHTM": radSAHTM,
       "radETS4": radETS4,
       "radSAHEMU": radSAHEMU,
       "unknown": unknown,
       "radSAH16Eint": radSAH16Eint,
       "radSAH16Tint": radSAH16Tint,
       "radSAH16Eext": radSAH16Eext,
       "radSAH16Text": radSAH16Text,
       "radSysPS": radSysPS,
       "radSysPSEvents": radSysPSEvents,
       "radSPS2": radSPS2,
       "radSPS3": radSPS3,
       "radSPS6": radSPS6,
       "radSPS9": radSPS9,
       "radSPS12": radSPS12,
       "radAPD2": radAPD2,
       "radAPD8": radAPD8,
       "radAPS8": radAPS8,
       "radAPS16": radAPS16,
       "radAPS24": radAPS24,
       "radSPS3S": radSPS3S,
       "radFPS8": radFPS8,
       "radFPS12": radFPS12,
       "radSPS3ScSL": radSPS3ScSL,
       "radSPS3Sc2S": radSPS3Sc2S,
       "radFPS8c": radFPS8c,
       "radFPS4": radFPS4,
       "radSPS4": radSPS4,
       "radSysEth": radSysEth,
       "radEP8T": radEP8T,
       "radEP4TAUI": radEP4TAUI,
       "radEP4T2FL": radEP4T2FL,
       "radEP4TFL": radEP4TFL,
       "radEP4FL": radEP4FL,
       "radEPR8T": radEPR8T,
       "radEPR4TAUI": radEPR4TAUI,
       "radEPR4T2FL": radEPR4T2FL,
       "radEPR4TFL": radEPR4TFL,
       "radEPR4FL": radEPR4FL,
       "radSysRtr": radSysRtr,
       "radSysRtrEvents": radSysRtrEvents,
       "radRTED": radRTED,
       "radRTEM": radRTEM,
       "radRTEC": radRTEC,
       "radWebRanger": radWebRanger,
       "radTinyRouter": radTinyRouter,
       "radLA240": radLA240,
       "radSuperLan": radSuperLan,
       "radLA240I": radLA240I,
       "radFcdIsdn": radFcdIsdn,
       "radEFcdIp": radEFcdIp,
       "radFcdIpD": radFcdIpD,
       "radFcdIpM": radFcdIpM,
       "radFcdIpL": radFcdIpL,
       "radSysAtm": radSysAtm,
       "radSysAtmEvents": radSysAtmEvents,
       "atmAceSystemTrap": atmAceSystemTrap,
       "atmAceAlarmForwardingTrap": atmAceAlarmForwardingTrap,
       "atmAceDateAndTimeRequest": atmAceDateAndTimeRequest,
       "atmAceAlarmLOS": atmAceAlarmLOS,
       "atmAceAlarmLOF": atmAceAlarmLOF,
       "atmAceAlarmLCD": atmAceAlarmLCD,
       "atmAceAlarmSLM": atmAceAlarmSLM,
       "atmAceAlarmLOP": atmAceAlarmLOP,
       "atmAceAlarmLineAIS": atmAceAlarmLineAIS,
       "atmAceAlarmPathAIS": atmAceAlarmPathAIS,
       "atmAceAlarmLineRDI": atmAceAlarmLineRDI,
       "atmAceAlarmPathRDI": atmAceAlarmPathRDI,
       "atmAceAlarmSectionBIP": atmAceAlarmSectionBIP,
       "atmAceAlarmLineBIP": atmAceAlarmLineBIP,
       "atmAceAlarmPathBIP": atmAceAlarmPathBIP,
       "atmAceAlarmLineFEBE": atmAceAlarmLineFEBE,
       "atmAceAlarmPathFEBE": atmAceAlarmPathFEBE,
       "atmAceAlarmPlcpLOF": atmAceAlarmPlcpLOF,
       "atmAceAlarmPlcpYELLOW": atmAceAlarmPlcpYELLOW,
       "atmAceAlarmPlcpBIP": atmAceAlarmPlcpBIP,
       "atmAceAlarmPlcpFEBE": atmAceAlarmPlcpFEBE,
       "atmAceAlarmPlcpP1P2": atmAceAlarmPlcpP1P2,
       "atmAceAlarmUAS": atmAceAlarmUAS,
       "atmAceAlarmCluster": atmAceAlarmCluster,
       "atmAceHwFailure": atmAceHwFailure,
       "atmAceUnavailableBwTrap": atmAceUnavailableBwTrap,
       "atmAceAlarmVpContinuityLoss": atmAceAlarmVpContinuityLoss,
       "atmAceAlarmVpAISReception": atmAceAlarmVpAISReception,
       "atmAceAlarmVpRDIReception": atmAceAlarmVpRDIReception,
       "atmAceAlarmVpErroredCells": atmAceAlarmVpErroredCells,
       "atmAceAlarmVpLostCells": atmAceAlarmVpLostCells,
       "atmAceAlarmVpMisinsertedCells": atmAceAlarmVpMisinsertedCells,
       "atmAceAlarmVpUAS": atmAceAlarmVpUAS,
       "atmAceAlarmVpLoopback": atmAceAlarmVpLoopback,
       "atmAceAlarmVpGCRAViolation": atmAceAlarmVpGCRAViolation,
       "atmAceAlarmVcContinuityLoss": atmAceAlarmVcContinuityLoss,
       "atmAceAlarmVcAISReception": atmAceAlarmVcAISReception,
       "atmAceAlarmVcRDIReception": atmAceAlarmVcRDIReception,
       "atmAceAlarmVcErroredCells": atmAceAlarmVcErroredCells,
       "atmAceAlarmVcLostCells": atmAceAlarmVcLostCells,
       "atmAceAlarmVcMisinsertedCells": atmAceAlarmVcMisinsertedCells,
       "atmAceAlarmVcUnexpectedCell": atmAceAlarmVcUnexpectedCell,
       "atmAceAlarmVcUAS": atmAceAlarmVcUAS,
       "atmAceAlarmVcLoopback": atmAceAlarmVcLoopback,
       "atmAceAlarmVcGCRAViolation": atmAceAlarmVcGCRAViolation,
       "radStarSwitch": radStarSwitch,
       "radStarSwitchATM25": radStarSwitchATM25,
       "radStarSwitchATM25L": radStarSwitchATM25L,
       "radStarSwitchATM155": radStarSwitchATM155,
       "radAtmCsuDsu": radAtmCsuDsu,
       "radAmcdE1": radAmcdE1,
       "radAmcdT1": radAmcdT1,
       "radAce20E": radAce20E,
       "radAce20T": radAce20T,
       "radAce2005": radAce2005,
       "radAce2002": radAce2002,
       "radAce2002E": radAce2002E,
       "radAce2E": radAce2E,
       "radAce2T": radAce2T,
       "radMlAtmE1": radMlAtmE1,
       "radMlAtmT1": radMlAtmT1,
       "radAmc102": radAmc102,
       "radAmc102c": radAmc102c,
       "radAce202": radAce202,
       "radAce": radAce,
       "radAce101": radAce101,
       "radAce102": radAce102,
       "radAce50": radAce50,
       "radAce52": radAce52,
       "radAce52L": radAce52L,
       "radAce201": radAce201,
       "radAce3200": radAce3200,
       "radAce3100": radAce3100,
       "radAce3400": radAce3400,
       "radAce3402": radAce3402,
       "radAce3100PSN": radAce3100PSN,
       "radAce3200PSN": radAce3200PSN,
       "radAce3400PSN": radAce3400PSN,
       "radAce3402PSN": radAce3402PSN,
       "radAce3600": radAce3600,
       "radAce3205": radAce3205,
       "radAce3105": radAce3105,
       "radSysLA": radSysLA,
       "radLA140": radLA140,
       "radLA110": radLA110,
       "radLA104": radLA104,
       "radLA130": radLA130,
       "radLA210": radLA210,
       "radSysTerminal": radSysTerminal,
       "agnt": agnt,
       "agnHwVersion": agnHwVersion,
       "agnTrapMask": agnTrapMask,
       "agnTrapValue": agnTrapValue,
       "agnChangeCnt": agnChangeCnt,
       "agnSpecific": agnSpecific,
       "agnConfigMsg": agnConfigMsg,
       "mngTrapIpTable": mngTrapIpTable,
       "mngEntry": mngEntry,
       "mngID": mngID,
       "mngIP": mngIP,
       "mngIPMask": mngIPMask,
       "mngTrapMask": mngTrapMask,
       "mngAlarmTrapMask": mngAlarmTrapMask,
       "mngSnmpTrapUdpPort": mngSnmpTrapUdpPort,
       "agnIndication": agnIndication,
       "agnMonitorModeCmd": agnMonitorModeCmd,
       "agnLed": agnLed,
       "trapTable": trapTable,
       "trapEntry": trapEntry,
       "trapID": trapID,
       "trapVal": trapVal,
       "trapTimeSinceOccurrence": trapTimeSinceOccurrence,
       "trapNumeric": trapNumeric,
       "fileTransfer": fileTransfer,
       "fileServerIP": fileServerIP,
       "fileName": fileName,
       "fileTransCmd": fileTransCmd,
       "tftpRetryTimeOut": tftpRetryTimeOut,
       "tftpTotalTimeOut": tftpTotalTimeOut,
       "tftpStatus": tftpStatus,
       "tftpError": tftpError,
       "fileTransferToSubSystems": fileTransferToSubSystems,
       "fileNameWithinProduct": fileNameWithinProduct,
       "intSwdlTable": intSwdlTable,
       "intSwdlEntry": intSwdlEntry,
       "intSwdlObjIdx": intSwdlObjIdx,
       "intSwdlFileIdx": intSwdlFileIdx,
       "intSwdlFileName": intSwdlFileName,
       "intSwdlFileSwVer": intSwdlFileSwVer,
       "intSwdlSwDate": intSwdlSwDate,
       "intSwdlSize": intSwdlSize,
       "intSwdlCmd": intSwdlCmd,
       "intSwdlToSubSystem": intSwdlToSubSystem,
       "intSwdlCardType": intSwdlCardType,
       "intSwdlFlashIdx": intSwdlFlashIdx,
       "swdlStatusTable": swdlStatusTable,
       "swdlStatusEntry": swdlStatusEntry,
       "swdlStatusTypeIdx": swdlStatusTypeIdx,
       "swdlStatusIdx": swdlStatusIdx,
       "swdlStatusFileName": swdlStatusFileName,
       "swdlStatusSlot": swdlStatusSlot,
       "swdlStatusSubSystem": swdlStatusSubSystem,
       "swdlStatusStatus": swdlStatusStatus,
       "swdlStatusTime": swdlStatusTime,
       "clearDwldStatusLog": clearDwldStatusLog,
       "autoFileTransfer": autoFileTransfer,
       "autoFileTransferTable": autoFileTransferTable,
       "autoFileTransferEntry": autoFileTransferEntry,
       "autoFileTransferType": autoFileTransferType,
       "autoFileTransferServerIp": autoFileTransferServerIp,
       "autoFileTransferFileName": autoFileTransferFileName,
       "autoFileTransferScheduling": autoFileTransferScheduling,
       "autoFileTransferTimeRecurrence": autoFileTransferTimeRecurrence,
       "autoFileTransferOccurrenceRecurrence": autoFileTransferOccurrenceRecurrence,
       "fileTransferServerPort": fileTransferServerPort,
       "fileTransferProtocol": fileTransferProtocol,
       "systemReset": systemReset,
       "systemTiming": systemTiming,
       "systemDate": systemDate,
       "systemTime": systemTime,
       "systemTimeElapsed": systemTimeElapsed,
       "systemNtp": systemNtp,
       "systemNtpMode": systemNtpMode,
       "systemNtpGmt": systemNtpGmt,
       "systemNtpServerAddressType": systemNtpServerAddressType,
       "systemNtpServerAddress": systemNtpServerAddress,
       "systemNtpUpdateInterval": systemNtpUpdateInterval,
       "systemNtpCmd": systemNtpCmd,
       "schedXTable": schedXTable,
       "schedXEntry": schedXEntry,
       "schedYear": schedYear,
       "schedWeekInMonth": schedWeekInMonth,
       "schedParam": schedParam,
       "systemPort": systemPort,
       "physicalConnectorTable": physicalConnectorTable,
       "physicalConnectorEntry": physicalConnectorEntry,
       "portIdx": portIdx,
       "physicalConnector": physicalConnector,
       "portOptWaveLength": portOptWaveLength,
       "portOptMode": portOptMode,
       "portBalance": portBalance,
       "portDdmSupport": portDdmSupport,
       "portMfgName": portMfgName,
       "portTypicalMaxRange": portTypicalMaxRange,
       "physicalConnectorString": physicalConnectorString,
       "portVendorPartNo": portVendorPartNo,
       "prtSupervisory": prtSupervisory,
       "prtSpTable": prtSpTable,
       "prtSpEntry": prtSpEntry,
       "prtSupervisoryIndex": prtSupervisoryIndex,
       "prtSupervisoryRate": prtSupervisoryRate,
       "prtSupervisoryDataBits": prtSupervisoryDataBits,
       "prtSupervisoryParity": prtSupervisoryParity,
       "prtSupervisoryStopBits": prtSupervisoryStopBits,
       "prtSupervisoryUsage": prtSupervisoryUsage,
       "prtSupervisoryInterface": prtSupervisoryInterface,
       "prtSupervisoryCTS": prtSupervisoryCTS,
       "prtSupervisoryDcdDelay": prtSupervisoryDcdDelay,
       "prtSupervisoryDSR": prtSupervisoryDSR,
       "prtSupervisoryRoutProtocol": prtSupervisoryRoutProtocol,
       "prtPerformance": prtPerformance,
       "prtPerfTable": prtPerfTable,
       "prtPerfEntry": prtPerfEntry,
       "prtPerfIdx": prtPerfIdx,
       "prtPerfPeriodRef": prtPerfPeriodRef,
       "prtPerfElapsedTime": prtPerfElapsedTime,
       "prtPerfUAS": prtPerfUAS,
       "prtPerfES": prtPerfES,
       "prtPerfSES": prtPerfSES,
       "prtPerfBBE": prtPerfBBE,
       "prtPerfBlocksPerSec": prtPerfBlocksPerSec,
       "prtPerfTimeTag": prtPerfTimeTag,
       "prtPerfSaveAndResetCmd": prtPerfSaveAndResetCmd,
       "prtTest": prtTest,
       "prtTestTable": prtTestTable,
       "prtTestEntry": prtTestEntry,
       "prtTestIdx": prtTestIdx,
       "prtTestCmdAndStatus": prtTestCmdAndStatus,
       "prtBertCounter": prtBertCounter,
       "prtTestInitiator": prtTestInitiator,
       "prtTestTimeout": prtTestTimeout,
       "prtTestVctRxResult": prtTestVctRxResult,
       "prtTestVctTxResult": prtTestVctTxResult,
       "prtTestVctRxDistance": prtTestVctRxDistance,
       "prtTestVctTxDistance": prtTestVctTxDistance,
       "prtTestVctCmd": prtTestVctCmd,
       "prtTestVctRxCrossPair": prtTestVctRxCrossPair,
       "prtTestVctTxCrossPair": prtTestVctTxCrossPair,
       "prtTestActivationDelay": prtTestActivationDelay,
       "prtTestMacSwapLoopDataMode": prtTestMacSwapLoopDataMode,
       "prtTestMacSwapLoopVlanId": prtTestMacSwapLoopVlanId,
       "prtTestMacSwapLoopDirection": prtTestMacSwapLoopDirection,
       "prtTestMacSwapLoopDestAddr": prtTestMacSwapLoopDestAddr,
       "prtTestMacSwapLoopSrcAddr": prtTestMacSwapLoopSrcAddr,
       "prtTestOamMinRoundTripDelay": prtTestOamMinRoundTripDelay,
       "prtTestOamMaxRoundTripDelay": prtTestOamMaxRoundTripDelay,
       "prtTestOamAvgRoundTripDelay": prtTestOamAvgRoundTripDelay,
       "prtTestOamTxInterval": prtTestOamTxInterval,
       "prtTestDestinationIpAddress": prtTestDestinationIpAddress,
       "prtTestTTL": prtTestTTL,
       "prtTestBwProfile": prtTestBwProfile,
       "prtParam": prtParam,
       "prtParamTable": prtParamTable,
       "prtParamEntry": prtParamEntry,
       "prtParamIdx": prtParamIdx,
       "prtControlCnfg": prtControlCnfg,
       "prtParamClkSrc": prtParamClkSrc,
       "prtParamPhantom": prtParamPhantom,
       "prtParamResetStatsCmd": prtParamResetStatsCmd,
       "prtParamLastResetStatsTime": prtParamLastResetStatsTime,
       "prtParamInterfaceType": prtParamInterfaceType,
       "prtParamClearAlarm": prtParamClearAlarm,
       "prtParamLeds": prtParamLeds,
       "prtParamLineLength": prtParamLineLength,
       "prtParamUsage": prtParamUsage,
       "prtParamMappingMode": prtParamMappingMode,
       "prtParamAlarmIndication": prtParamAlarmIndication,
       "prtParamClkQualityLevel": prtParamClkQualityLevel,
       "prtParamClkWaveShape": prtParamClkWaveShape,
       "prtParamStatus": prtParamStatus,
       "prtParamSignalLevel": prtParamSignalLevel,
       "prtParamClkUserQualityLevel": prtParamClkUserQualityLevel,
       "prtParamDataRate": prtParamDataRate,
       "prtParamLoopDetect": prtParamLoopDetect,
       "prtParamActUponLoopDetect": prtParamActUponLoopDetect,
       "prtParamPSNLayer": prtParamPSNLayer,
       "prtParamRxSsm": prtParamRxSsm,
       "prtParamClkSsmRxSource": prtParamClkSsmRxSource,
       "prtParamFarEndDevice": prtParamFarEndDevice,
       "prtParamTxClk": prtParamTxClk,
       "prtIP": prtIP,
       "prtIpParamTable": prtIpParamTable,
       "prtIpParamEntry": prtIpParamEntry,
       "prtIpParamConfigIdx": prtIpParamConfigIdx,
       "prtIpParamSlotIdx": prtIpParamSlotIdx,
       "prtIpParamIdx": prtIpParamIdx,
       "prtIpParamHostIP": prtIpParamHostIP,
       "prtIpParamHostMask": prtIpParamHostMask,
       "prtIpParamDefaultGateway": prtIpParamDefaultGateway,
       "prtIpParamMediaMode": prtIpParamMediaMode,
       "prtIpParamMediaRate": prtIpParamMediaRate,
       "prtIpParamMngVlanSupport": prtIpParamMngVlanSupport,
       "prtIpParamMngVlanId": prtIpParamMngVlanId,
       "prtIpParamMngVlanPriority": prtIpParamMngVlanPriority,
       "prtIpParamRingMode": prtIpParamRingMode,
       "prtIpParamProtIpEnable": prtIpParamProtIpEnable,
       "prtIpParamTrafficPriority": prtIpParamTrafficPriority,
       "prtIpParamRemoteIP": prtIpParamRemoteIP,
       "prtIpParamMaxTxBandwidth": prtIpParamMaxTxBandwidth,
       "prtIpParamTos": prtIpParamTos,
       "prtIpParamConnect": prtIpParamConnect,
       "prtIpParamAgingTime": prtIpParamAgingTime,
       "prtIpParamEncapsulationProt": prtIpParamEncapsulationProt,
       "prtIpParamEncapProtPort": prtIpParamEncapProtPort,
       "prtIpParamVlanSupport": prtIpParamVlanSupport,
       "prtIpParamVlanId": prtIpParamVlanId,
       "prtIpParamVlanPriority": prtIpParamVlanPriority,
       "prtIpParamDoubleTagVlanId": prtIpParamDoubleTagVlanId,
       "prtIpParamDoubleTagVlanPriority": prtIpParamDoubleTagVlanPriority,
       "prtIpParamVlanTagging": prtIpParamVlanTagging,
       "prtIpParamRateLimit": prtIpParamRateLimit,
       "prtIpParamDefInterface": prtIpParamDefInterface,
       "prtIpParamMng": prtIpParamMng,
       "prtIpParamFloodedRateLimit": prtIpParamFloodedRateLimit,
       "prtIpParamBurstSize": prtIpParamBurstSize,
       "prtIpParamLimitPacketType": prtIpParamLimitPacketType,
       "prtIpParamKeepAliveInterval": prtIpParamKeepAliveInterval,
       "prtIpParamKeepAliveThresh": prtIpParamKeepAliveThresh,
       "prtIpParamP2pKeepAliveVlanId": prtIpParamP2pKeepAliveVlanId,
       "prtIpParamP2pKeepAliveVlanPrio": prtIpParamP2pKeepAliveVlanPrio,
       "prtIpParamRingAdjacentMacAddr": prtIpParamRingAdjacentMacAddr,
       "prtClkSrc": prtClkSrc,
       "prtClkSrcTable": prtClkSrcTable,
       "prtClkSrcEntry": prtClkSrcEntry,
       "prtClkSrcCnfgIdx": prtClkSrcCnfgIdx,
       "prtClkSrcPrtIdx": prtClkSrcPrtIdx,
       "prtClkSrcIdx": prtClkSrcIdx,
       "prtClkSrcMode": prtClkSrcMode,
       "prtClkSrcPrt": prtClkSrcPrt,
       "opticalPort": opticalPort,
       "optPrtMonitorTable": optPrtMonitorTable,
       "optPrtMonitorEntry": optPrtMonitorEntry,
       "optPrtMonitorPrtIdx": optPrtMonitorPrtIdx,
       "optPrtMonitorSample": optPrtMonitorSample,
       "optPrtMonitorTxPower": optPrtMonitorTxPower,
       "optPrtMonitorLaserBias": optPrtMonitorLaserBias,
       "optPrtMonitorLaserTemp": optPrtMonitorLaserTemp,
       "optPrtMonitorRxPower": optPrtMonitorRxPower,
       "optPrtMonitorSupplyVoltage": optPrtMonitorSupplyVoltage,
       "optPrtCnfgTable": optPrtCnfgTable,
       "optPrtCnfgEntry": optPrtCnfgEntry,
       "optPrtCnfgIdx": optPrtCnfgIdx,
       "optPrtCnfgPrtIdx": optPrtCnfgPrtIdx,
       "optPrtCnfgALS": optPrtCnfgALS,
       "systemResetAllStatsCmd": systemResetAllStatsCmd,
       "systemClearTablesCmd": systemClearTablesCmd,
       "systemParameter": systemParameter,
       "agnGlobalAlarmMask": agnGlobalAlarmMask,
       "alarmSeverity": alarmSeverity,
       "alarmState": alarmState,
       "agnTestStatus": agnTestStatus,
       "systemSaveAndResetAllStatsCmd": systemSaveAndResetAllStatsCmd,
       "systemDefaultGateway": systemDefaultGateway,
       "systemPsTable": systemPsTable,
       "systemPsEntry": systemPsEntry,
       "systemPsIndex1": systemPsIndex1,
       "systemPsIndex2": systemPsIndex2,
       "systemPsType": systemPsType,
       "systemPsStatus": systemPsStatus,
       "systemPsHotSwap": systemPsHotSwap,
       "agnFans": agnFans,
       "agnSendTrapParameter": agnSendTrapParameter,
       "agnSensorsStatus": agnSensorsStatus,
       "agnStationClockCard": agnStationClockCard,
       "xcIndexNext": xcIndexNext,
       "xcTable": xcTable,
       "xcEntry": xcEntry,
       "xcIndex": xcIndex,
       "xcIfIndex1": xcIfIndex1,
       "xcVpi": xcVpi,
       "xcVci": xcVci,
       "xcIfIndex2": xcIfIndex2,
       "xcRowStatus": xcRowStatus,
       "xcDescr": xcDescr,
       "xcAdminStatus": xcAdminStatus,
       "xcOperStatus": xcOperStatus,
       "xcAttachedIfType": xcAttachedIfType,
       "xcInputPriority": xcInputPriority,
       "xcBitMapping": xcBitMapping,
       "systemModule": systemModule,
       "modlParam": modlParam,
       "modlParamTable": modlParamTable,
       "modlParamEntry": modlParamEntry,
       "modlParamIndex": modlParamIndex,
       "modlParamReset": modlParamReset,
       "modlParamSwdlStatus": modlParamSwdlStatus,
       "modlParamLeds": modlParamLeds,
       "modlParamType": modlParamType,
       "modlParamSwVer": modlParamSwVer,
       "agnNearFarConnection": agnNearFarConnection,
       "agnAccess": agnAccess,
       "agnTelnetAccess": agnTelnetAccess,
       "agnWebAccess": agnWebAccess,
       "agnRadiusAccess": agnRadiusAccess,
       "agnSshAccess": agnSshAccess,
       "systemInterface": systemInterface,
       "ifCreateTable": ifCreateTable,
       "ifCreateEntry": ifCreateEntry,
       "ifCreateEntityType": ifCreateEntityType,
       "ifCreateEntityIdx": ifCreateEntityIdx,
       "ifCreateNumber": ifCreateNumber,
       "ifCreateRowStatus": ifCreateRowStatus,
       "ifCreateType": ifCreateType,
       "ifCreateIndex": ifCreateIndex,
       "ifCreateConnectedTo": ifCreateConnectedTo,
       "ifCreateParams": ifCreateParams,
       "ifCreateConnectionPointer": ifCreateConnectionPointer,
       "interfacePerformance": interfacePerformance,
       "ifPerfTable": ifPerfTable,
       "ifPerfEntry": ifPerfEntry,
       "ifPerfCounterType": ifPerfCounterType,
       "ifPerfLowCounterPart": ifPerfLowCounterPart,
       "ifPerfHighCounterPart": ifPerfHighCounterPart,
       "ifPerfHCCounter": ifPerfHCCounter,
       "systemOam": systemOam,
       "systemOamTable": systemOamTable,
       "systemOamEntry": systemOamEntry,
       "systemOamCnfgIdx": systemOamCnfgIdx,
       "systemOamFrequency": systemOamFrequency,
       "systemOamTimeoutCycles": systemOamTimeoutCycles,
       "systemOamLinkCheck": systemOamLinkCheck,
       "systemOamDescrTable": systemOamDescrTable,
       "systemOamDescrEntry": systemOamDescrEntry,
       "systemOamDescrIdx": systemOamDescrIdx,
       "systemOamDescrRowStatus": systemOamDescrRowStatus,
       "systemOamDescrMode": systemOamDescrMode,
       "systemOamDescrCCDirection": systemOamDescrCCDirection,
       "systemOamDescrLoopbackOperation": systemOamDescrLoopbackOperation,
       "systemOamDescrLoopbackDestAddr": systemOamDescrLoopbackDestAddr,
       "systemOamDescrXcCounter": systemOamDescrXcCounter,
       "agnDeviceView": agnDeviceView,
       "bitMappingTable": bitMappingTable,
       "bitMappingEntry": bitMappingEntry,
       "bitMappingLocation": bitMappingLocation,
       "bitMappingIndex": bitMappingIndex,
       "bitMappingView": bitMappingView,
       "hostTable": hostTable,
       "hostEntry": hostEntry,
       "hostIndex": hostIndex,
       "hostIP": hostIP,
       "hostIPMask": hostIPMask,
       "hostDefaultNextHop": hostDefaultNextHop,
       "hostMode": hostMode,
       "hostParam1": hostParam1,
       "hostParam2": hostParam2,
       "hostParam3": hostParam3,
       "hostRowStatus": hostRowStatus,
       "hostVlanTagging": hostVlanTagging,
       "hostVlanId": hostVlanId,
       "hostVlanPriority": hostVlanPriority,
       "invNameXCTable": invNameXCTable,
       "invNameXCEntry": invNameXCEntry,
       "invNameXC": invNameXC,
       "invNameXCType": invNameXCType,
       "invNameXCIndex": invNameXCIndex,
       "agnDeviceCapabilities": agnDeviceCapabilities,
       "rowInfoTable": rowInfoTable,
       "rowInfoEntry": rowInfoEntry,
       "rowInfoTableId": rowInfoTableId,
       "rowInfoCounter": rowInfoCounter,
       "rowInfoIndexNext": rowInfoIndexNext,
       "rowInfoMaxNoOfRows": rowInfoMaxNoOfRows,
       "agnStoreCmd": agnStoreCmd,
       "agnFunctionTable": agnFunctionTable,
       "agnFunctionEntry": agnFunctionEntry,
       "agnFunction": agnFunction,
       "agnFunctionActivation": agnFunctionActivation,
       "agnManagerConfigPorts": agnManagerConfigPorts,
       "agnEgressRateRange": agnEgressRateRange,
       "agnNoOfCurrentConns": agnNoOfCurrentConns,
       "agnIngressRateRange": agnIngressRateRange,
       "alarmForwardingTable": alarmForwardingTable,
       "alarmForwardingEntry": alarmForwardingEntry,
       "alarmForwardingFailPort": alarmForwardingFailPort,
       "alarmForwardingToPort": alarmForwardingToPort,
       "alarmForwardingRowStatus": alarmForwardingRowStatus,
       "alarmForwardingRecoveryTime": alarmForwardingRecoveryTime,
       "alarmForwardingGroupConditions": alarmForwardingGroupConditions,
       "alarmForwardingCause": alarmForwardingCause,
       "alarmForwardingRecoveryMode": alarmForwardingRecoveryMode,
       "alarmForwardingRecoveryCommand": alarmForwardingRecoveryCommand,
       "alarmForwardingDelay": alarmForwardingDelay,
       "alarmForwardingDirection": alarmForwardingDirection,
       "alarmForwardingAction": alarmForwardingAction,
       "agnSwVersionSwapCmd": agnSwVersionSwapCmd,
       "agnClockSource": agnClockSource,
       "agnClkSrcPortTable": agnClkSrcPortTable,
       "agnClkSrcPortEntry": agnClkSrcPortEntry,
       "agnClkSrcPortCnfgIdx": agnClkSrcPortCnfgIdx,
       "agnClkSrcPortSrcIdx": agnClkSrcPortSrcIdx,
       "agnClkSrcPortIdx": agnClkSrcPortIdx,
       "agnClkSrcPort": agnClkSrcPort,
       "agnClkSrcPortRowStatus": agnClkSrcPortRowStatus,
       "agnClkSrcPortAdminStatus": agnClkSrcPortAdminStatus,
       "agnClkSrcPortType": agnClkSrcPortType,
       "agnClkSrcPortQuality": agnClkSrcPortQuality,
       "agnClkSrcPortNetType": agnClkSrcPortNetType,
       "agnClkSrcPortState": agnClkSrcPortState,
       "agnCurrClkTable": agnCurrClkTable,
       "agnCurrClkEntry": agnCurrClkEntry,
       "agnCurrClkObjIdx": agnCurrClkObjIdx,
       "agnCurrClkMode": agnCurrClkMode,
       "agnCurrClkSrc": agnCurrClkSrc,
       "agnCurrClkPort": agnCurrClkPort,
       "agnCurrClkHoldover": agnCurrClkHoldover,
       "agnCurrClkSsmBased": agnCurrClkSsmBased,
       "agnCurrClkState": agnCurrClkState,
       "agnCurrClkQualification": agnCurrClkQualification,
       "agnClockMonitoring": agnClockMonitoring,
       "agnClkCurrentTable": agnClkCurrentTable,
       "agnClkCurrentEntry": agnClkCurrentEntry,
       "agnClkCurrentIndex": agnClkCurrentIndex,
       "agnClkCurrentRxPackets": agnClkCurrentRxPackets,
       "agnClkCurrentLostPackets": agnClkCurrentLostPackets,
       "agnClkCurrentOutOfOrderPackets": agnClkCurrentOutOfOrderPackets,
       "agnClkCurrentBufferUnderflow": agnClkCurrentBufferUnderflow,
       "agnClkIntervalTable": agnClkIntervalTable,
       "agnClkIntervalEntry": agnClkIntervalEntry,
       "agnClkIntervalIndex": agnClkIntervalIndex,
       "agnClkIntervalNumber": agnClkIntervalNumber,
       "agnClkIntervalRxPackets": agnClkIntervalRxPackets,
       "agnClkIntervalLostPackets": agnClkIntervalLostPackets,
       "agnClkIntervalOutOfOrderPackets": agnClkIntervalOutOfOrderPackets,
       "agnClkIntervalBufferUnderflow": agnClkIntervalBufferUnderflow,
       "agnMaxNoOfConns": agnMaxNoOfConns,
       "lag": lag,
       "lagTable": lagTable,
       "lagEntry": lagEntry,
       "lagCnfgIdx": lagCnfgIdx,
       "lagIdx": lagIdx,
       "lagPortMembers": lagPortMembers,
       "lagDistributionMethod": lagDistributionMethod,
       "lagRecoveryMode": lagRecoveryMode,
       "lagWaitToRestore": lagWaitToRestore,
       "lagRowStatus": lagRowStatus,
       "lagShutDownDurationUponFlip": lagShutDownDurationUponFlip,
       "lagRdnMethod": lagRdnMethod,
       "lagLacpEnable": lagLacpEnable,
       "lagStatTable": lagStatTable,
       "lagStatEntry": lagStatEntry,
       "lagStatForcePort": lagStatForcePort,
       "lagStatActivePort": lagStatActivePort,
       "gfp": gfp,
       "gfpCnfgTable": gfpCnfgTable,
       "gfpCnfgEntry": gfpCnfgEntry,
       "gfpCnfgIdx": gfpCnfgIdx,
       "gfpPayloadFcs": gfpPayloadFcs,
       "gfpRxTxScramble": gfpRxTxScramble,
       "gfpVcatHeader": gfpVcatHeader,
       "agnGroupTable": agnGroupTable,
       "agnGroupEntry": agnGroupEntry,
       "agnGroupCnfgIdx": agnGroupCnfgIdx,
       "agnGroupIdx": agnGroupIdx,
       "agnGroupComponentIdx": agnGroupComponentIdx,
       "agnGroupRowStatus": agnGroupRowStatus,
       "agnStatNoOfUploadedIntervals": agnStatNoOfUploadedIntervals,
       "agnSyslog": agnSyslog,
       "agnSyslogDeviceUdpPort": agnSyslogDeviceUdpPort,
       "agnSyslogFacility": agnSyslogFacility,
       "agnSyslogSeverityLevel": agnSyslogSeverityLevel,
       "agnNetworkInterfaceType": agnNetworkInterfaceType,
       "agnTrapDelay": agnTrapDelay,
       "agnStringToIndexTable": agnStringToIndexTable,
       "agnStringToIndexEntry": agnStringToIndexEntry,
       "agnStringToIndexTableId": agnStringToIndexTableId,
       "agnStringToIndexUserName": agnStringToIndexUserName,
       "agnStringToIndexTableIndex": agnStringToIndexTableIndex,
       "agnRowPointerTable": agnRowPointerTable,
       "agnRowPointerEntry": agnRowPointerEntry,
       "agnRowPointerIndex": agnRowPointerIndex,
       "agnRowPointerNoOfUsages": agnRowPointerNoOfUsages,
       "services": services,
       "wfq": wfq,
       "wfqTable": wfqTable,
       "wfqEntry": wfqEntry,
       "wfqCnfgIdx": wfqCnfgIdx,
       "wfqPrtIdx": wfqPrtIdx,
       "wfqTblIdx": wfqTblIdx,
       "wfqQueueIdx": wfqQueueIdx,
       "wfqRowStatus": wfqRowStatus,
       "wfqWeightValue": wfqWeightValue,
       "wfqSchedulingMode": wfqSchedulingMode,
       "wfqMinRateAbsolute": wfqMinRateAbsolute,
       "wfqMaxPacketSize": wfqMaxPacketSize,
       "dscpMapping": dscpMapping,
       "dscpMappingTable": dscpMappingTable,
       "dscpMappingEntry": dscpMappingEntry,
       "dscpMappingCnfgIdx": dscpMappingCnfgIdx,
       "dscpMappingDscpIdx": dscpMappingDscpIdx,
       "dscpMappingRegenPriority": dscpMappingRegenPriority,
       "ifTeQos": ifTeQos,
       "ifTeQosTable": ifTeQosTable,
       "ifTeQosEntry": ifTeQosEntry,
       "ifTeQosIdx1": ifTeQosIdx1,
       "ifTeQosIdx2": ifTeQosIdx2,
       "ifTeQosIdx3": ifTeQosIdx3,
       "ifTeQosParam": ifTeQosParam,
       "ifTeQosParam2": ifTeQosParam2,
       "ifTeQosStatus": ifTeQosStatus,
       "portQos": portQos,
       "prtPriorityTable": prtPriorityTable,
       "prtPriorityEntry": prtPriorityEntry,
       "prtPriorityIdx1": prtPriorityIdx1,
       "prtPriorityPrtIdx": prtPriorityPrtIdx,
       "prtPriorityIdx": prtPriorityIdx,
       "prtPriorityIngressRateLimit": prtPriorityIngressRateLimit,
       "prtQosTable": prtQosTable,
       "prtQosEntry": prtQosEntry,
       "prtQosIdx": prtQosIdx,
       "prtQosPrtIdx": prtQosPrtIdx,
       "prtQosDirection": prtQosDirection,
       "prtQosRateLimitPacketType": prtQosRateLimitPacketType,
       "prtQosRateLimitCIR": prtQosRateLimitCIR,
       "prtQosRateLimitCBS": prtQosRateLimitCBS,
       "prtQosRateLimitEIR": prtQosRateLimitEIR,
       "prtQosRateLimitEBS": prtQosRateLimitEBS,
       "prtTrafficClass": prtTrafficClass,
       "portTrafficClassTable": portTrafficClassTable,
       "portTrafficClassEntry": portTrafficClassEntry,
       "portTrafficClassIdx1": portTrafficClassIdx1,
       "portTrafficClassPortIdx": portTrafficClassPortIdx,
       "portTrafficClass": portTrafficClass,
       "serviceTable": serviceTable,
       "serviceEntry": serviceEntry,
       "flowIndex": flowIndex,
       "serviceIndex": serviceIndex,
       "serviceRowStatus": serviceRowStatus,
       "serviceName": serviceName,
       "serviceBwProfileId": serviceBwProfileId,
       "evcCosTable": evcCosTable,
       "evcCosEntry": evcCosEntry,
       "evcCosCnfgIdx": evcCosCnfgIdx,
       "evcCosEvcIdx": evcCosEvcIdx,
       "evcCosRowStatus": evcCosRowStatus,
       "evcCosEvcName": evcCosEvcName,
       "evcCosSpVlanId": evcCosSpVlanId,
       "serviceStatTable": serviceStatTable,
       "serviceStatEntry": serviceStatEntry,
       "serviceStatDirection": serviceStatDirection,
       "srvForwardGreenPackets": srvForwardGreenPackets,
       "srvForwardGreenPacktesOverflow": srvForwardGreenPacktesOverflow,
       "srvForwardYellowPackets": srvForwardYellowPackets,
       "srvForwardYellowPacketsOverflow": srvForwardYellowPacketsOverflow,
       "srvDiscardGreenPacket": srvDiscardGreenPacket,
       "srvDiscardGreenPacketOverflow": srvDiscardGreenPacketOverflow,
       "srvDiscardYellowRedPackets": srvDiscardYellowRedPackets,
       "srvDiscardYellowRedPacketsOverflow": srvDiscardYellowRedPacketsOverflow,
       "srvForwardGreenBytes": srvForwardGreenBytes,
       "srvForwardGreenBytesOverflow": srvForwardGreenBytesOverflow,
       "srvForwardYellowBytes": srvForwardYellowBytes,
       "srvForwardYellowBytesOverflow": srvForwardYellowBytesOverflow,
       "srvDiscardGreenBytes": srvDiscardGreenBytes,
       "srvDiscardGreenBytesOverflow": srvDiscardGreenBytesOverflow,
       "srvDiscardYellowRedBytes": srvDiscardYellowRedBytes,
       "srvDiscardYellowRedBytesOverflow": srvDiscardYellowRedBytesOverflow,
       "srvResetStatsCmd": srvResetStatsCmd,
       "srvDiscardYellowPackets": srvDiscardYellowPackets,
       "srvDiscardYellowPacketsOverflow": srvDiscardYellowPacketsOverflow,
       "srvDiscardYellowBytes": srvDiscardYellowBytes,
       "srvDiscardYellowBytesOverflow": srvDiscardYellowBytesOverflow,
       "srvDiscardRedPackets": srvDiscardRedPackets,
       "srvDiscardRedPacketsOverflow": srvDiscardRedPacketsOverflow,
       "srvDiscardRedBytes": srvDiscardRedBytes,
       "srvDiscardRedBytesOverflow": srvDiscardRedBytesOverflow,
       "mappingProfileObjects": mappingProfileObjects,
       "flowMappingProfileTable": flowMappingProfileTable,
       "flowMappingProfileEntry": flowMappingProfileEntry,
       "flowMappingProfileIndex": flowMappingProfileIndex,
       "flowMappingProfilePriority": flowMappingProfilePriority,
       "flowMappingProfileRowStatus": flowMappingProfileRowStatus,
       "flowMappingProfileNumOfMaps": flowMappingProfileNumOfMaps,
       "flowMappingProfileMapIndex": flowMappingProfileMapIndex,
       "flowMappingProfileName": flowMappingProfileName,
       "qosFlowMappingTable": qosFlowMappingTable,
       "qosFlowMappingEntry": qosFlowMappingEntry,
       "qosFlowMappingIdx1": qosFlowMappingIdx1,
       "qosFlowMappingIdx2": qosFlowMappingIdx2,
       "qosFlowMappingIdx3": qosFlowMappingIdx3,
       "qosFlowMappingRowStatus": qosFlowMappingRowStatus,
       "qosFlowMappingCriteria": qosFlowMappingCriteria,
       "qosFlowMappingIeee802dot1p": qosFlowMappingIeee802dot1p,
       "qosFlowMappingTos": qosFlowMappingTos,
       "qosFlowMappingFromDscp": qosFlowMappingFromDscp,
       "qosFlowMappingToDscp": qosFlowMappingToDscp,
       "qosFlowMappingFromVlanId": qosFlowMappingFromVlanId,
       "qosFlowMappingToVlanId": qosFlowMappingToVlanId,
       "qosFlowMappingFromSrcMacAddr": qosFlowMappingFromSrcMacAddr,
       "qosFlowMappingToSrcMacAddr": qosFlowMappingToSrcMacAddr,
       "qosFlowMappingFromDestMacAddr": qosFlowMappingFromDestMacAddr,
       "qosFlowMappingToDestMacAddr": qosFlowMappingToDestMacAddr,
       "qosFlowMappingFromSrcIpAddr": qosFlowMappingFromSrcIpAddr,
       "qosFlowMappingToSrcIpAddr": qosFlowMappingToSrcIpAddr,
       "qosFlowMappingFromDestIpAddr": qosFlowMappingFromDestIpAddr,
       "qosFlowMappingToDestIpAddr": qosFlowMappingToDestIpAddr,
       "qosFlowMappingFromTcpSrcPort": qosFlowMappingFromTcpSrcPort,
       "qosFlowMappingToTcpSrcPort": qosFlowMappingToTcpSrcPort,
       "qosFlowMappingFromTcpDestPort": qosFlowMappingFromTcpDestPort,
       "qosFlowMappingToTcpDestPort": qosFlowMappingToTcpDestPort,
       "qosFlowMappingFromUdpSrcPort": qosFlowMappingFromUdpSrcPort,
       "qosFlowMappingToUdpSrcPort": qosFlowMappingToUdpSrcPort,
       "qosFlowMappingFromUdpDestPort": qosFlowMappingFromUdpDestPort,
       "qosFlowMappingToUdpDestPort": qosFlowMappingToUdpDestPort,
       "qosFlowMappingFromIpPrecedence": qosFlowMappingFromIpPrecedence,
       "qosFlowMappingToIpPrecedence": qosFlowMappingToIpPrecedence,
       "qosFlowMappingInnerIeee802dot1p": qosFlowMappingInnerIeee802dot1p,
       "qosFlowMappingFromInnerVlanId": qosFlowMappingFromInnerVlanId,
       "qosFlowMappingToInnerVlanId": qosFlowMappingToInnerVlanId,
       "cosProfileTable": cosProfileTable,
       "cosProfileEntry": cosProfileEntry,
       "cosProfileIndex": cosProfileIndex,
       "cosProfileRowStatus": cosProfileRowStatus,
       "cosProfileCosMethod": cosProfileCosMethod,
       "cosProfileName": cosProfileName,
       "cosProfileCosMapping": cosProfileCosMapping,
       "queueProfileObjects": queueProfileObjects,
       "qProfileTable": qProfileTable,
       "qProfileEntry": qProfileEntry,
       "qProfileIndex": qProfileIndex,
       "qProfileRowStatus": qProfileRowStatus,
       "qProfileName": qProfileName,
       "qProfileNumberOfInternalQ": qProfileNumberOfInternalQ,
       "qProfileInternalQProfile": qProfileInternalQProfile,
       "qInternalProfileTable": qInternalProfileTable,
       "qInternalProfileEntry": qInternalProfileEntry,
       "qInternalProfileIndex": qInternalProfileIndex,
       "qInternalProfileRowStatus": qInternalProfileRowStatus,
       "qInternalProfileScheduling": qInternalProfileScheduling,
       "qInternalProfileWFQWeight": qInternalProfileWFQWeight,
       "qInternalProfileQueueLength": qInternalProfileQueueLength,
       "qInternalProfileWredStartDropThresh": qInternalProfileWredStartDropThresh,
       "qInternalProfileWredDropAllThresh": qInternalProfileWredDropAllThresh,
       "qInternalProfileWredDropProbability": qInternalProfileWredDropProbability,
       "qInternalProfileRateLimit": qInternalProfileRateLimit,
       "qInternalProfileShaperProfile": qInternalProfileShaperProfile,
       "queueGroupTable": queueGroupTable,
       "queueGroupEntry": queueGroupEntry,
       "queueGroupName": queueGroupName,
       "queueGroupQBlockLevel": queueGroupQBlockLevel,
       "queueGroupQBlockIdx": queueGroupQBlockIdx,
       "queueGroupRowStatus": queueGroupRowStatus,
       "queueGroupQBlockProfile": queueGroupQBlockProfile,
       "queueGroupQBlockShaperProfile": queueGroupQBlockShaperProfile,
       "queueGroupPointToQBlock": queueGroupPointToQBlock,
       "queueGroupPointToInternalQueue": queueGroupPointToInternalQueue,
       "queueGroupQBlockName": queueGroupQBlockName,
       "markingProfileTable": markingProfileTable,
       "markingProfileEntry": markingProfileEntry,
       "markingProfileIndex": markingProfileIndex,
       "markingProfileRowStatus": markingProfileRowStatus,
       "markingProfileName": markingProfileName,
       "markingSpVlanPBit": markingSpVlanPBit,
       "markingProfileMethod": markingProfileMethod,
       "radTransport": radTransport,
       "radTransportDomains": radTransportDomains,
       "radTransportDomainSnmpEfmOam": radTransportDomainSnmpEfmOam,
       "radStkHub": radStkHub,
       "radRouter": radRouter,
       "rtrBridge": rtrBridge,
       "webranger": webranger,
       "wrSysConfig": wrSysConfig,
       "wrBraodcastCtrlCmd": wrBraodcastCtrlCmd,
       "wrFrSelfLearningMode": wrFrSelfLearningMode,
       "wrGratuitousArp": wrGratuitousArp,
       "wrIpRouterInfo": wrIpRouterInfo,
       "wrConfigIpDhcp": wrConfigIpDhcp,
       "wrDhcpAction": wrDhcpAction,
       "wrDhcpTable": wrDhcpTable,
       "wrDhcpEntry": wrDhcpEntry,
       "wrDhcpLowIpAddress": wrDhcpLowIpAddress,
       "wrDhcpHighIpAddress": wrDhcpHighIpAddress,
       "wrDhcpIpMaskAddress": wrDhcpIpMaskAddress,
       "wrDhcpDefaultGateway": wrDhcpDefaultGateway,
       "wrDhcpPrimaryDNS": wrDhcpPrimaryDNS,
       "wrDhcpSecondaryDNS": wrDhcpSecondaryDNS,
       "wrDhcpInterface": wrDhcpInterface,
       "wrDhcpRowStatus": wrDhcpRowStatus,
       "wrDhcpIpAddressLeaseTime": wrDhcpIpAddressLeaseTime,
       "wrDhcpPoolName": wrDhcpPoolName,
       "wrDhcpTftpServerIp": wrDhcpTftpServerIp,
       "wrDhcpConfigFileName": wrDhcpConfigFileName,
       "dhcpPoolAllocTable": dhcpPoolAllocTable,
       "dhcpPoolAllocEntry": dhcpPoolAllocEntry,
       "dhcpPoolAllocLowIpAddress": dhcpPoolAllocLowIpAddress,
       "dhcpPoolAllocLeasingIpAddress": dhcpPoolAllocLeasingIpAddress,
       "dhcpPoolAllocMacAddress": dhcpPoolAllocMacAddress,
       "dhcpPoolAllocTimeLeft": dhcpPoolAllocTimeLeft,
       "dhcpPoolAllocFlags": dhcpPoolAllocFlags,
       "dhcpPoolAllocFreeCmd": dhcpPoolAllocFreeCmd,
       "dhcpRelayTable": dhcpRelayTable,
       "dhcpRelayEntry": dhcpRelayEntry,
       "dhcpRelayAction": dhcpRelayAction,
       "dhcpRelayServerIpAddress": dhcpRelayServerIpAddress,
       "dhcpRelayMaxHop": dhcpRelayMaxHop,
       "wrDhcpPort": wrDhcpPort,
       "dhcpClientTable": dhcpClientTable,
       "dhcpClientEntry": dhcpClientEntry,
       "dhcpClientAction": dhcpClientAction,
       "dhcpClientServerIpAddress": dhcpClientServerIpAddress,
       "dhcpClientLeaseExpirationTime": dhcpClientLeaseExpirationTime,
       "dhcpClientStatus": dhcpClientStatus,
       "dhcpIfClientTable": dhcpIfClientTable,
       "dhcpIfClientEntry": dhcpIfClientEntry,
       "dhcpIfClientIpAddress": dhcpIfClientIpAddress,
       "dhcpIfClientRowStatus": dhcpIfClientRowStatus,
       "dhcpServerAction": dhcpServerAction,
       "wrConfigIpDNS": wrConfigIpDNS,
       "wrDNSRelayAction": wrDNSRelayAction,
       "wrConfigIpxRouterInfo": wrConfigIpxRouterInfo,
       "wrAutoLearnLanIpxNets": wrAutoLearnLanIpxNets,
       "wrLanIpxNetTable": wrLanIpxNetTable,
       "wrLanIpxNetEntry": wrLanIpxNetEntry,
       "wrLanifIndex": wrLanifIndex,
       "wrLanIpxFrameType": wrLanIpxFrameType,
       "wrIpxNetAddress": wrIpxNetAddress,
       "wrDialInIpxNet": wrDialInIpxNet,
       "ripSapIfConfTable": ripSapIfConfTable,
       "ripSapIfConfEntry": ripSapIfConfEntry,
       "ripSapIfConfIfIndex": ripSapIfConfIfIndex,
       "ripSapIfConfMode": ripSapIfConfMode,
       "ripSapIfConfStatus": ripSapIfConfStatus,
       "wrInterface": wrInterface,
       "wrIpAddressTable": wrIpAddressTable,
       "wrIpAddressEntry": wrIpAddressEntry,
       "wrIpIfIndex": wrIpIfIndex,
       "wrIpAddress": wrIpAddress,
       "wrIpMask": wrIpMask,
       "wrIpRowStatus": wrIpRowStatus,
       "wrSpoofingTable": wrSpoofingTable,
       "wrSpoofingEntry": wrSpoofingEntry,
       "wrSpoofingIfIndex": wrSpoofingIfIndex,
       "wrSpoofingAction": wrSpoofingAction,
       "wrSpoofingAgingStation": wrSpoofingAgingStation,
       "wrSpoofingRowStatus": wrSpoofingRowStatus,
       "wrLanIfTable": wrLanIfTable,
       "wrLanIfEntry": wrLanIfEntry,
       "wrLanIfIndex": wrLanIfIndex,
       "wrLanBridgeRouterMode": wrLanBridgeRouterMode,
       "wrLanIfState": wrLanIfState,
       "wrLanIfRdnTimeout": wrLanIfRdnTimeout,
       "wrSyncCnfgTable": wrSyncCnfgTable,
       "wrSyncCnfgEntry": wrSyncCnfgEntry,
       "wrSyncIfIndex": wrSyncIfIndex,
       "wrSyncClkMode": wrSyncClkMode,
       "wrSyncClkRate": wrSyncClkRate,
       "wrFrCnfgTable": wrFrCnfgTable,
       "wrFrCnfgEntry": wrFrCnfgEntry,
       "wrFrDlciLearningMode": wrFrDlciLearningMode,
       "wrFrCllmMessages": wrFrCllmMessages,
       "radAtm": radAtm,
       "atmGen": atmGen,
       "atmPerfHistory": atmPerfHistory,
       "atmIfPerformance": atmIfPerformance,
       "atmIfDataTable": atmIfDataTable,
       "atmIfDataEntry": atmIfDataEntry,
       "atmIfTimeElapsed": atmIfTimeElapsed,
       "atmIfValidIntervals": atmIfValidIntervals,
       "atmIfTxCells": atmIfTxCells,
       "atmIfRxCells": atmIfRxCells,
       "atmIfUncorrectedHecs": atmIfUncorrectedHecs,
       "atmIfCurrentTable": atmIfCurrentTable,
       "atmIfCurrentEntry": atmIfCurrentEntry,
       "atmIfCurrentTxCells": atmIfCurrentTxCells,
       "atmIfCurrentRxCells": atmIfCurrentRxCells,
       "atmIfCurrentCorrectedHecs": atmIfCurrentCorrectedHecs,
       "atmIfCurrentUncorrectedHecs": atmIfCurrentUncorrectedHecs,
       "atmIfCurrentHecErrorSeconds": atmIfCurrentHecErrorSeconds,
       "atmIfIntervalTable": atmIfIntervalTable,
       "atmIfIntervalEntry": atmIfIntervalEntry,
       "atmIfIntervalNumber": atmIfIntervalNumber,
       "atmIfIntervalTxCells": atmIfIntervalTxCells,
       "atmIfIntervalRxCells": atmIfIntervalRxCells,
       "atmIfIntervalCorrectedHecs": atmIfIntervalCorrectedHecs,
       "atmIfIntervalUncorrectedHecs": atmIfIntervalUncorrectedHecs,
       "atmIfIntervalHecErrorSeconds": atmIfIntervalHecErrorSeconds,
       "atmPvcPerformance": atmPvcPerformance,
       "atmVpPerformance": atmVpPerformance,
       "atmVpCurrentTable": atmVpCurrentTable,
       "atmVpCurrentEntry": atmVpCurrentEntry,
       "atmVpCurrentVpi": atmVpCurrentVpi,
       "atmVpCurrentRxCellsClp01": atmVpCurrentRxCellsClp01,
       "atmVpCurrentRxCellsClp0": atmVpCurrentRxCellsClp0,
       "atmVpCurrentGcra0Violations": atmVpCurrentGcra0Violations,
       "atmVpCurrentGcra1Violations": atmVpCurrentGcra1Violations,
       "atmVpCurrentRxAIS": atmVpCurrentRxAIS,
       "atmVpCurrentTxAIS": atmVpCurrentTxAIS,
       "atmVpCurrentRxRDI": atmVpCurrentRxRDI,
       "atmVpCurrentTxRDI": atmVpCurrentTxRDI,
       "atmVpCurrentContinuityLoss": atmVpCurrentContinuityLoss,
       "atmVpCurrentUAS": atmVpCurrentUAS,
       "atmVpCurrentSES": atmVpCurrentSES,
       "atmVpCurrentCDC": atmVpCurrentCDC,
       "atmVpCurrentTotalDiscards": atmVpCurrentTotalDiscards,
       "atmVpCurrentClp0Discards": atmVpCurrentClp0Discards,
       "atmVpCurrentTotalCellOuts": atmVpCurrentTotalCellOuts,
       "atmVpCurrentClp0CellOuts": atmVpCurrentClp0CellOuts,
       "atmVpCurrentTaggedOuts": atmVpCurrentTaggedOuts,
       "atmVpCurrentPCR": atmVpCurrentPCR,
       "atmVpCurrentSCR": atmVpCurrentSCR,
       "atmVpCurrentMCR": atmVpCurrentMCR,
       "atmVpCurrentShaperTotalDiscards": atmVpCurrentShaperTotalDiscards,
       "atmVpCurrentShaperClp0Discards": atmVpCurrentShaperClp0Discards,
       "atmVpCurrentShaperClp1Discards": atmVpCurrentShaperClp1Discards,
       "atmVpPMCurrentTable": atmVpPMCurrentTable,
       "atmVpPMCurrentEntry": atmVpPMCurrentEntry,
       "atmVpPMCurrentVpi": atmVpPMCurrentVpi,
       "atmVpPMCurrentDir": atmVpPMCurrentDir,
       "atmVpPMCurrentTxClp01": atmVpPMCurrentTxClp01,
       "atmVpPMCurrentTxClp0": atmVpPMCurrentTxClp0,
       "atmVpPMCurrentRxClp01": atmVpPMCurrentRxClp01,
       "atmVpPMCurrentRxClp0": atmVpPMCurrentRxClp0,
       "atmVpPMCurrentErroredCells": atmVpPMCurrentErroredCells,
       "atmVpPMCurrentLostCells": atmVpPMCurrentLostCells,
       "atmVpPMCurrentMisinsertedCells": atmVpPMCurrentMisinsertedCells,
       "atmVpPMCurrentECB": atmVpPMCurrentECB,
       "atmVpPMCurrentSECB": atmVpPMCurrentSECB,
       "atmVpPMCurrentES": atmVpPMCurrentES,
       "atmVpPMCurrentSES": atmVpPMCurrentSES,
       "atmVpPMCurrentUAS": atmVpPMCurrentUAS,
       "atmVpPMCurrentIntervalQuality": atmVpPMCurrentIntervalQuality,
       "atmVpPMCurrentLastDayQuality": atmVpPMCurrentLastDayQuality,
       "atmVpIntervalTable": atmVpIntervalTable,
       "atmVpIntervalEntry": atmVpIntervalEntry,
       "atmVpIntervalVpi": atmVpIntervalVpi,
       "atmVpIntervalNumber": atmVpIntervalNumber,
       "atmVpIntervalRxCellsClp01": atmVpIntervalRxCellsClp01,
       "atmVpIntervalRxCellsClp0": atmVpIntervalRxCellsClp0,
       "atmVpIntervalGcra0Violations": atmVpIntervalGcra0Violations,
       "atmVpIntervalGcra1Violations": atmVpIntervalGcra1Violations,
       "atmVpIntervalRxAIS": atmVpIntervalRxAIS,
       "atmVpIntervalTxAIS": atmVpIntervalTxAIS,
       "atmVpIntervalRxRDI": atmVpIntervalRxRDI,
       "atmVpIntervalTxRDI": atmVpIntervalTxRDI,
       "atmVpIntervalContinuityLoss": atmVpIntervalContinuityLoss,
       "atmVpIntervalUAS": atmVpIntervalUAS,
       "atmVpIntervalSES": atmVpIntervalSES,
       "atmVpIntervalCDC": atmVpIntervalCDC,
       "atmVpIntervalTotalDiscards": atmVpIntervalTotalDiscards,
       "atmVpIntervalClp0Discards": atmVpIntervalClp0Discards,
       "atmVpIntervalTotalCellOuts": atmVpIntervalTotalCellOuts,
       "atmVpIntervalClp0CellOuts": atmVpIntervalClp0CellOuts,
       "atmVpIntervalTaggedOuts": atmVpIntervalTaggedOuts,
       "atmVpIntervalPCR": atmVpIntervalPCR,
       "atmVpIntervalSCR": atmVpIntervalSCR,
       "atmVpIntervalMCR": atmVpIntervalMCR,
       "atmVpIntervalShaperTotalDiscards": atmVpIntervalShaperTotalDiscards,
       "atmVpIntervalShaperClp0Discards": atmVpIntervalShaperClp0Discards,
       "atmVpIntervalShaperClp1Discards": atmVpIntervalShaperClp1Discards,
       "atmVpPMIntervalTable": atmVpPMIntervalTable,
       "atmVpPMIntervalEntry": atmVpPMIntervalEntry,
       "atmVpPMIntervalVpi": atmVpPMIntervalVpi,
       "atmVpPMIntervalDir": atmVpPMIntervalDir,
       "atmVpPMIntervalNumber": atmVpPMIntervalNumber,
       "atmVpPMIntervalTxClp01": atmVpPMIntervalTxClp01,
       "atmVpPMIntervalTxClp0": atmVpPMIntervalTxClp0,
       "atmVpPMIntervalRxClp01": atmVpPMIntervalRxClp01,
       "atmVpPMIntervalRxClp0": atmVpPMIntervalRxClp0,
       "atmVpPMIntervalErroredCells": atmVpPMIntervalErroredCells,
       "atmVpPMIntervalLostCells": atmVpPMIntervalLostCells,
       "atmVpPMIntervalMisinsertedCells": atmVpPMIntervalMisinsertedCells,
       "atmVpPMIntervalECB": atmVpPMIntervalECB,
       "atmVpPMIntervalSECB": atmVpPMIntervalSECB,
       "atmVpPMIntervalES": atmVpPMIntervalES,
       "atmVpPMIntervalSES": atmVpPMIntervalSES,
       "atmVpPMIntervalUAS": atmVpPMIntervalUAS,
       "atmVpPMIntervalQuality": atmVpPMIntervalQuality,
       "atmVpPMIntervalLastDayQuality": atmVpPMIntervalLastDayQuality,
       "atmVpQoSTable": atmVpQoSTable,
       "atmVpQoSEntry": atmVpQoSEntry,
       "atmVpQoSPeriodRef": atmVpQoSPeriodRef,
       "atmVpQoSElapsedTime": atmVpQoSElapsedTime,
       "atmVpQoSUAS": atmVpQoSUAS,
       "atmVpPMQoSTable": atmVpPMQoSTable,
       "atmVpPMQoSEntry": atmVpPMQoSEntry,
       "atmVpPMQoSDirection": atmVpPMQoSDirection,
       "atmVpPMQoSPeriodRef": atmVpPMQoSPeriodRef,
       "atmVpPMQoSCLR": atmVpPMQoSCLR,
       "atmVpPMQoSCER": atmVpPMQoSCER,
       "atmVpPMQoSCMR": atmVpPMQoSCMR,
       "atmVpShaperStatTable": atmVpShaperStatTable,
       "atmVpShaperStatEntry": atmVpShaperStatEntry,
       "atmVpShaperDiscarded": atmVpShaperDiscarded,
       "atmVpShaperOccupation": atmVpShaperOccupation,
       "atmVpShaperMaxOccupation": atmVpShaperMaxOccupation,
       "atmVpShaperLevel": atmVpShaperLevel,
       "atmVpShaperEpdDropped": atmVpShaperEpdDropped,
       "atmVpShaperTotalEpdDropped": atmVpShaperTotalEpdDropped,
       "atmVcPerformance": atmVcPerformance,
       "atmVcCurrentTable": atmVcCurrentTable,
       "atmVcCurrentEntry": atmVcCurrentEntry,
       "atmVcCurrentVpi": atmVcCurrentVpi,
       "atmVcCurrentVci": atmVcCurrentVci,
       "atmVcCurrentRxCellsClp01": atmVcCurrentRxCellsClp01,
       "atmVcCurrentRxCellsClp0": atmVcCurrentRxCellsClp0,
       "atmVcCurrentGcra0Violations": atmVcCurrentGcra0Violations,
       "atmVcCurrentGcra1Violations": atmVcCurrentGcra1Violations,
       "atmVcCurrentRxAIS": atmVcCurrentRxAIS,
       "atmVcCurrentTxAIS": atmVcCurrentTxAIS,
       "atmVcCurrentRxRDI": atmVcCurrentRxRDI,
       "atmVcCurrentTxRDI": atmVcCurrentTxRDI,
       "atmVcCurrentContinuityLoss": atmVcCurrentContinuityLoss,
       "atmVcCurrentUAS": atmVcCurrentUAS,
       "atmVcCurrentSES": atmVcCurrentSES,
       "atmVcCurrentCDC": atmVcCurrentCDC,
       "atmVcCurrentTotalDiscards": atmVcCurrentTotalDiscards,
       "atmVcCurrentClp0Discards": atmVcCurrentClp0Discards,
       "atmVcCurrentTotalCellOuts": atmVcCurrentTotalCellOuts,
       "atmVcCurrentClp0CellOuts": atmVcCurrentClp0CellOuts,
       "atmVcCurrentTaggedOuts": atmVcCurrentTaggedOuts,
       "atmVcCurrentPCR": atmVcCurrentPCR,
       "atmVcCurrentSCR": atmVcCurrentSCR,
       "atmVcCurrentMCR": atmVcCurrentMCR,
       "atmVcCurrentShaperTotalDiscards": atmVcCurrentShaperTotalDiscards,
       "atmVcCurrentShaperClp0Discards": atmVcCurrentShaperClp0Discards,
       "atmVcCurrentShaperClp1Discards": atmVcCurrentShaperClp1Discards,
       "atmVcPMCurrentTable": atmVcPMCurrentTable,
       "atmVcPMCurrentEntry": atmVcPMCurrentEntry,
       "atmVcPMCurrentVpi": atmVcPMCurrentVpi,
       "atmVcPMCurrentVci": atmVcPMCurrentVci,
       "atmVcPMCurrentDir": atmVcPMCurrentDir,
       "atmVcPMCurrentTxClp01": atmVcPMCurrentTxClp01,
       "atmVcPMCurrentTxClp0": atmVcPMCurrentTxClp0,
       "atmVcPMCurrentRxClp01": atmVcPMCurrentRxClp01,
       "atmVcPMCurrentRxClp0": atmVcPMCurrentRxClp0,
       "atmVcPMCurrentErroredCells": atmVcPMCurrentErroredCells,
       "atmVcPMCurrentLostCells": atmVcPMCurrentLostCells,
       "atmVcPMCurrentMisinsertedCells": atmVcPMCurrentMisinsertedCells,
       "atmVcPMCurrentECB": atmVcPMCurrentECB,
       "atmVcPMCurrentSECB": atmVcPMCurrentSECB,
       "atmVcPMCurrentES": atmVcPMCurrentES,
       "atmVcPMCurrentSES": atmVcPMCurrentSES,
       "atmVcPMCurrentUAS": atmVcPMCurrentUAS,
       "atmVcPMCurrentIntervalQuality": atmVcPMCurrentIntervalQuality,
       "atmVcPMCurrentLastDayQuality": atmVcPMCurrentLastDayQuality,
       "atmVcIntervalTable": atmVcIntervalTable,
       "atmVcIntervalEntry": atmVcIntervalEntry,
       "atmVcIntervalVpi": atmVcIntervalVpi,
       "atmVcIntervalVci": atmVcIntervalVci,
       "atmVcIntervalNumber": atmVcIntervalNumber,
       "atmVcIntervalRxCellsClp01": atmVcIntervalRxCellsClp01,
       "atmVcIntervalRxCellsClp0": atmVcIntervalRxCellsClp0,
       "atmVcIntervalGcra0Violations": atmVcIntervalGcra0Violations,
       "atmVcIntervalGcra1Violations": atmVcIntervalGcra1Violations,
       "atmVcIntervalRxAIS": atmVcIntervalRxAIS,
       "atmVcIntervalTxAIS": atmVcIntervalTxAIS,
       "atmVcIntervalRxRDI": atmVcIntervalRxRDI,
       "atmVcIntervalTxRDI": atmVcIntervalTxRDI,
       "atmVcIntervalContinuityLoss": atmVcIntervalContinuityLoss,
       "atmVcIntervalUAS": atmVcIntervalUAS,
       "atmVcIntervalSES": atmVcIntervalSES,
       "atmVcIntervalCDC": atmVcIntervalCDC,
       "atmVcIntervalTotalDiscards": atmVcIntervalTotalDiscards,
       "atmVcIntervalClp0Discards": atmVcIntervalClp0Discards,
       "atmVcIntervalTotalCellOuts": atmVcIntervalTotalCellOuts,
       "atmVcIntervalClp0CellOuts": atmVcIntervalClp0CellOuts,
       "atmVcIntervalTaggedOuts": atmVcIntervalTaggedOuts,
       "atmVcIntervalPCR": atmVcIntervalPCR,
       "atmVcIntervalSCR": atmVcIntervalSCR,
       "atmVcIntervalMCR": atmVcIntervalMCR,
       "atmVcIntervalShaperTotalDiscards": atmVcIntervalShaperTotalDiscards,
       "atmVcIntervalShaperClp0Discards": atmVcIntervalShaperClp0Discards,
       "atmVcIntervalShaperClp1Discards": atmVcIntervalShaperClp1Discards,
       "atmVcPMIntervalTable": atmVcPMIntervalTable,
       "atmVcPMIntervalEntry": atmVcPMIntervalEntry,
       "atmVcPMIntervalVpi": atmVcPMIntervalVpi,
       "atmVcPMIntervalVci": atmVcPMIntervalVci,
       "atmVcPMIntervalDir": atmVcPMIntervalDir,
       "atmVcPMIntervalNumber": atmVcPMIntervalNumber,
       "atmVcPMIntervalTxClp01": atmVcPMIntervalTxClp01,
       "atmVcPMIntervalTxClp0": atmVcPMIntervalTxClp0,
       "atmVcPMIntervalRxClp01": atmVcPMIntervalRxClp01,
       "atmVcPMIntervalRxClp0": atmVcPMIntervalRxClp0,
       "atmVcPMIntervalErroredCells": atmVcPMIntervalErroredCells,
       "atmVcPMIntervalLostCells": atmVcPMIntervalLostCells,
       "atmVcPMIntervalMisinsertedCells": atmVcPMIntervalMisinsertedCells,
       "atmVcPMIntervalECB": atmVcPMIntervalECB,
       "atmVcPMIntervalSECB": atmVcPMIntervalSECB,
       "atmVcPMIntervalES": atmVcPMIntervalES,
       "atmVcPMIntervalSES": atmVcPMIntervalSES,
       "atmVcPMIntervalUAS": atmVcPMIntervalUAS,
       "atmVcPMIntervalQuality": atmVcPMIntervalQuality,
       "atmVcPMIntervalLastDayQuality": atmVcPMIntervalLastDayQuality,
       "atmVcQoSTable": atmVcQoSTable,
       "atmVcQoSEntry": atmVcQoSEntry,
       "atmVcQoSPeriodRef": atmVcQoSPeriodRef,
       "atmVcQoSElapsedTime": atmVcQoSElapsedTime,
       "atmVcQoSUAS": atmVcQoSUAS,
       "atmVcPMQoSTable": atmVcPMQoSTable,
       "atmVcPMQoSEntry": atmVcPMQoSEntry,
       "atmVcPMQoSDirection": atmVcPMQoSDirection,
       "atmVcPMQoSPeriodRef": atmVcPMQoSPeriodRef,
       "atmVcPMQoSCLR": atmVcPMQoSCLR,
       "atmVcPMQoSCER": atmVcPMQoSCER,
       "atmVcPMQoSCMR": atmVcPMQoSCMR,
       "atmVcShaperStatTable": atmVcShaperStatTable,
       "atmVcShaperStatEntry": atmVcShaperStatEntry,
       "atmVcShaperDiscarded": atmVcShaperDiscarded,
       "atmVcShaperOccupation": atmVcShaperOccupation,
       "atmVcShaperMaxOccupation": atmVcShaperMaxOccupation,
       "atmVcShaperLevel": atmVcShaperLevel,
       "atmVcShaperEpdDropped": atmVcShaperEpdDropped,
       "atmVcShaperTotalEpdDropped": atmVcShaperTotalEpdDropped,
       "atmIntervalDateTable": atmIntervalDateTable,
       "atmIntervalDateEntry": atmIntervalDateEntry,
       "atmIntervalDateInterval": atmIntervalDateInterval,
       "atmIntervalDateDate": atmIntervalDateDate,
       "atmIntervalDateTime": atmIntervalDateTime,
       "atmGenSystem": atmGenSystem,
       "atmGenSysGen": atmGenSysGen,
       "atmGenSysSelfTestTable": atmGenSysSelfTestTable,
       "atmGenSysSelfTestEntry": atmGenSysSelfTestEntry,
       "atmGenSysSelfTestIndex": atmGenSysSelfTestIndex,
       "atmGenSysSelfTestResult": atmGenSysSelfTestResult,
       "atmGenSysSelfTestModule": atmGenSysSelfTestModule,
       "atmGenSysLogClearAll": atmGenSysLogClearAll,
       "atmGenSysLogTable": atmGenSysLogTable,
       "atmGenSysLogEntry": atmGenSysLogEntry,
       "atmGenSysLogIndex": atmGenSysLogIndex,
       "atmGenSysLogMessage": atmGenSysLogMessage,
       "atmGenSysSetDefaultConfg": atmGenSysSetDefaultConfg,
       "atmGenSysCxRefTable": atmGenSysCxRefTable,
       "atmGenSysCxRefEntry": atmGenSysCxRefEntry,
       "atmGenSysCxRefIndex": atmGenSysCxRefIndex,
       "atmGenSysCxRefCounter": atmGenSysCxRefCounter,
       "atmNte": atmNte,
       "atmNteEvents": atmNteEvents,
       "atmAceStatusChange": atmAceStatusChange,
       "atmAceAlarmTrap": atmAceAlarmTrap,
       "atmAceModuleChangeTrap": atmAceModuleChangeTrap,
       "atmAceRedundancyTrap": atmAceRedundancyTrap,
       "atmAceModuleMismatchTrap": atmAceModuleMismatchTrap,
       "atmNteSys": atmNteSys,
       "atmNteSysConfig": atmNteSysConfig,
       "atmNteManagerTable": atmNteManagerTable,
       "atmNteManagerEntry": atmNteManagerEntry,
       "atmNteManagerIP": atmNteManagerIP,
       "atmNteManagerPvc": atmNteManagerPvc,
       "atmNteManagerIfIndex": atmNteManagerIfIndex,
       "atmNteManagerVpi": atmNteManagerVpi,
       "atmNteManagerVci": atmNteManagerVci,
       "atmNteManagerTrapMask": atmNteManagerTrapMask,
       "atmNteManagerRowStatus": atmNteManagerRowStatus,
       "atmNteManagerNextHop": atmNteManagerNextHop,
       "atmNteManagerVlanSupport": atmNteManagerVlanSupport,
       "atmNteManagerVlanIdentifier": atmNteManagerVlanIdentifier,
       "atmNteManagerVlanFramePriority": atmNteManagerVlanFramePriority,
       "atmNteManagerAlarmTrapMask": atmNteManagerAlarmTrapMask,
       "atmNteManagerConfigPorts": atmNteManagerConfigPorts,
       "atmNteUPLTCR": atmNteUPLTCR,
       "atmNteDPLTCR": atmNteDPLTCR,
       "atmNteSysLogClearAll": atmNteSysLogClearAll,
       "atmNteUSESLTCR": atmNteUSESLTCR,
       "atmNteDSESLTCR": atmNteDSESLTCR,
       "atmNteProtection": atmNteProtection,
       "atmNteProtectionMode": atmNteProtectionMode,
       "atmNteProtectionWorkingLink": atmNteProtectionWorkingLink,
       "atmNteProtectionSwitchLink": atmNteProtectionSwitchLink,
       "atmNteConfOam": atmNteConfOam,
       "atmNteConfOamSupport": atmNteConfOamSupport,
       "atmNteConfOamTransmission": atmNteConfOamTransmission,
       "atmNteConfOamAIS": atmNteConfOamAIS,
       "atmNteConfOamRDI": atmNteConfOamRDI,
       "atmNteConfOamAddressing": atmNteConfOamAddressing,
       "atmNteConfLoopbackAddMode": atmNteConfLoopbackAddMode,
       "atmNteConfLoopbackSourceAdd": atmNteConfLoopbackSourceAdd,
       "atmNteConfOamIfTable": atmNteConfOamIfTable,
       "atmNteConfOamIfEntry": atmNteConfOamIfEntry,
       "atmNteConfOamIfAisRdi": atmNteConfOamIfAisRdi,
       "atmNteConfCAC": atmNteConfCAC,
       "atmNteConfCACMode": atmNteConfCACMode,
       "atmNteHostIfTable": atmNteHostIfTable,
       "atmNteHostIfEntry": atmNteHostIfEntry,
       "atmNteHostPvcIndex": atmNteHostPvcIndex,
       "atmNteHostIP": atmNteHostIP,
       "atmNteHostMask": atmNteHostMask,
       "atmNteHostAtmIfIndex": atmNteHostAtmIfIndex,
       "atmNteHostVpi": atmNteHostVpi,
       "atmNteHostVci": atmNteHostVci,
       "atmNteHostRowStatus": atmNteHostRowStatus,
       "atmNteHostRdnVpi": atmNteHostRdnVpi,
       "atmNteHostRdnVci": atmNteHostRdnVci,
       "atmNteHostDefaultNextHop": atmNteHostDefaultNextHop,
       "atmNteHostVlanTagging": atmNteHostVlanTagging,
       "atmNteHostDefaultVlanID": atmNteHostDefaultVlanID,
       "atmNteHostDefaultVlanPriority": atmNteHostDefaultVlanPriority,
       "atmNteShaperMode": atmNteShaperMode,
       "atmNteOutputRate": atmNteOutputRate,
       "atmNteTosMode": atmNteTosMode,
       "atmNteTosMask": atmNteTosMask,
       "atmNteTosHighPriority": atmNteTosHighPriority,
       "atmNtePlugAndPlayActivity": atmNtePlugAndPlayActivity,
       "atmNteSlotUsage": atmNteSlotUsage,
       "atmNteConnectionsMaxNumber": atmNteConnectionsMaxNumber,
       "atmNteDefaultVpi": atmNteDefaultVpi,
       "atmNteDefaultVci": atmNteDefaultVci,
       "atmNteReservedVpi": atmNteReservedVpi,
       "atmNteRdnManagement": atmNteRdnManagement,
       "atmNtePlugAndPlayIfIndex": atmNtePlugAndPlayIfIndex,
       "atmNteLoopbackTimeout": atmNteLoopbackTimeout,
       "atmNteOamTable": atmNteOamTable,
       "atmNteOamEntry": atmNteOamEntry,
       "atmNteOamMode": atmNteOamMode,
       "atmNteOamCellType": atmNteOamCellType,
       "atmNteOamLevel": atmNteOamLevel,
       "atmNteOamEnable": atmNteOamEnable,
       "atmNteDefaultLoopbackThreshold": atmNteDefaultLoopbackThreshold,
       "atmNteMaxBurstSize": atmNteMaxBurstSize,
       "atmNteGranularityFactor": atmNteGranularityFactor,
       "atmNteTotalInputRate": atmNteTotalInputRate,
       "atmNteTotalOutputRate": atmNteTotalOutputRate,
       "atmAlarmForwardingTable": atmAlarmForwardingTable,
       "atmAlarmForwardingEntry": atmAlarmForwardingEntry,
       "atmAlarmForwardingFailPort": atmAlarmForwardingFailPort,
       "atmAlarmForwardingToPort": atmAlarmForwardingToPort,
       "atmAlarmForwardingRowStatus": atmAlarmForwardingRowStatus,
       "atmAlarmForwardingFailureLevel": atmAlarmForwardingFailureLevel,
       "atmAlarmForwardingRecoveryMode": atmAlarmForwardingRecoveryMode,
       "atmAlarmForwardingRecoveryCommand": atmAlarmForwardingRecoveryCommand,
       "atmAlarmForwardingTimeFilterWindow": atmAlarmForwardingTimeFilterWindow,
       "atmSysConfigCellTest": atmSysConfigCellTest,
       "atmSysConfigCellTestPort": atmSysConfigCellTestPort,
       "atmSysConfigCellTestVpi": atmSysConfigCellTestVpi,
       "atmSysConfigCellTestVci": atmSysConfigCellTestVci,
       "atmSysConfigCellTestPti": atmSysConfigCellTestPti,
       "atmSysConfigCellTestClp": atmSysConfigCellTestClp,
       "atmSysConfigCellTestOamType": atmSysConfigCellTestOamType,
       "atmSysConfigCellTestPayload": atmSysConfigCellTestPayload,
       "atmSysConfigCellTestQuantity": atmSysConfigCellTestQuantity,
       "atmSysConfigCellTestSendCmd": atmSysConfigCellTestSendCmd,
       "atmVpCrossConnectExtenTable": atmVpCrossConnectExtenTable,
       "atmVpCrossConnectExtenEntry": atmVpCrossConnectExtenEntry,
       "atmVpCrossConnectName": atmVpCrossConnectName,
       "atmVcCrossConnectExtenTable": atmVcCrossConnectExtenTable,
       "atmVcCrossConnectExtenEntry": atmVcCrossConnectExtenEntry,
       "atmVcCrossConnectName": atmVcCrossConnectName,
       "atmNteQosMode": atmNteQosMode,
       "atmTrafficDescrParamXTable": atmTrafficDescrParamXTable,
       "atmTrafficDescrParamXEntry": atmTrafficDescrParamXEntry,
       "atmTrafficDescrParamMode": atmTrafficDescrParamMode,
       "atmNteSysInfo": atmNteSysInfo,
       "atmNteIdTable": atmNteIdTable,
       "atmNteIdEntry": atmNteIdEntry,
       "atmNteIdIndex": atmNteIdIndex,
       "atmNteUnitId": atmNteUnitId,
       "atmNteUnitVersion": atmNteUnitVersion,
       "atmNteCardType": atmNteCardType,
       "atmNteCardStatus": atmNteCardStatus,
       "atmNteCardCmd": atmNteCardCmd,
       "atmNteProgCardType": atmNteProgCardType,
       "atmSysPSunits": atmSysPSunits,
       "atmSysPSunitsInUse": atmSysPSunitsInUse,
       "atmSysFanUnits": atmSysFanUnits,
       "atmSysNetPrts": atmSysNetPrts,
       "atmSysNetPrtInUse": atmSysNetPrtInUse,
       "atmNteBridgingMode": atmNteBridgingMode,
       "atmSysStats": atmSysStats,
       "atmSysCurrentCdc": atmSysCurrentCdc,
       "atmSysIntervalTable": atmSysIntervalTable,
       "atmSysIntervalEntry": atmSysIntervalEntry,
       "atmSysIntervalNumber": atmSysIntervalNumber,
       "atmSysIntervalCdc": atmSysIntervalCdc,
       "atmNteEventType": atmNteEventType,
       "atmNteIntervalMaxNumber": atmNteIntervalMaxNumber,
       "atmNteAlarmType": atmNteAlarmType,
       "atmNteLevel": atmNteLevel,
       "atmNteConnectionsNumber": atmNteConnectionsNumber,
       "atmNteTotalLb": atmNteTotalLb,
       "atmNteTotalCc": atmNteTotalCc,
       "atmNteTotalPm": atmNteTotalPm,
       "atmNtePrt": atmNtePrt,
       "atmNtePrtConfig": atmNtePrtConfig,
       "atmNteConfIfTable": atmNteConfIfTable,
       "atmNteConfIfEntry": atmNteConfIfEntry,
       "atmConfIfTransmitClk": atmConfIfTransmitClk,
       "atmConfIfLoopback": atmConfIfLoopback,
       "atmConfIfFrameType": atmConfIfFrameType,
       "atmConfIfCardType": atmConfIfCardType,
       "atmConfAtmIfVpiVciLimit": atmConfAtmIfVpiVciLimit,
       "atmConfIfHwFeatures": atmConfIfHwFeatures,
       "atmConfIfOutputRate": atmConfIfOutputRate,
       "atmConfIfInputRate": atmConfIfInputRate,
       "atmConfAlarmForwarding": atmConfAlarmForwarding,
       "atmConfIfAllocatedBw": atmConfIfAllocatedBw,
       "atmConfIfLowerVpi": atmConfIfLowerVpi,
       "atmConfIfOamMode": atmConfIfOamMode,
       "atmConfIfOamFailureInd": atmConfIfOamFailureInd,
       "atmNteAlarmIfTable": atmNteAlarmIfTable,
       "atmNteAlarmIfEntry": atmNteAlarmIfEntry,
       "atmInterfaceActiveAlarms": atmInterfaceActiveAlarms,
       "atmThresholdSectionBIP": atmThresholdSectionBIP,
       "atmThresholdLineBIP": atmThresholdLineBIP,
       "atmThresholdLineFEBE": atmThresholdLineFEBE,
       "atmThresholdPathBIP": atmThresholdPathBIP,
       "atmThresholdPathFEBE": atmThresholdPathFEBE,
       "atmThresholdErroredCells": atmThresholdErroredCells,
       "atmThresholdLostCells": atmThresholdLostCells,
       "atmThresholdMisinsertedCells": atmThresholdMisinsertedCells,
       "atmInterfaceAlarmStatus": atmInterfaceAlarmStatus,
       "atmInterfaceMaskAlarms": atmInterfaceMaskAlarms,
       "atmNteConfVpTable": atmNteConfVpTable,
       "atmNteConfVpEntry": atmNteConfVpEntry,
       "atmConfVpPolicing": atmConfVpPolicing,
       "atmConfVpCCAdminStatus": atmConfVpCCAdminStatus,
       "atmConfVpLoopbackAdminStatus": atmConfVpLoopbackAdminStatus,
       "atmConfVpLoopbackSinkAddress": atmConfVpLoopbackSinkAddress,
       "atmConfVpCongestionControl": atmConfVpCongestionControl,
       "atmConfVpCCDirection": atmConfVpCCDirection,
       "atmConfVpCreationTime": atmConfVpCreationTime,
       "atmConfVpOamSupport": atmConfVpOamSupport,
       "atmConfVpCCOperStatus": atmConfVpCCOperStatus,
       "atmConfVpLoopbackTraffic": atmConfVpLoopbackTraffic,
       "atmConfVpLoopbackFailureInd": atmConfVpLoopbackFailureInd,
       "atmConfVpLoopbackFailureThreshold": atmConfVpLoopbackFailureThreshold,
       "atmConfVpOamDirection": atmConfVpOamDirection,
       "atmConfVpOamDescrIndex": atmConfVpOamDescrIndex,
       "atmConfVpConnected": atmConfVpConnected,
       "atmNteAlarmVpTable": atmNteAlarmVpTable,
       "atmNteAlarmVpEntry": atmNteAlarmVpEntry,
       "atmNteVpAlarmVpi": atmNteVpAlarmVpi,
       "atmNteVpActiveAlarms": atmNteVpActiveAlarms,
       "atmNteAlarmVcTable": atmNteAlarmVcTable,
       "atmNteAlarmVcEntry": atmNteAlarmVcEntry,
       "atmNteVcAlarmVpi": atmNteVcAlarmVpi,
       "atmNteVcAlarmVci": atmNteVcAlarmVci,
       "atmNteVcActiveAlarms": atmNteVcActiveAlarms,
       "atmNteLoopback": atmNteLoopback,
       "atmLoopbackVpTable": atmLoopbackVpTable,
       "atmLoopbackVpEntry": atmLoopbackVpEntry,
       "atmLoopbackVpIfIndex": atmLoopbackVpIfIndex,
       "atmLoopbackVpVpi": atmLoopbackVpVpi,
       "atmLoopbackVpOperStatus": atmLoopbackVpOperStatus,
       "atmLoopbackVpCDV": atmLoopbackVpCDV,
       "atmLoopbackVpAverageDelay": atmLoopbackVpAverageDelay,
       "atmLoopbackVpMaxDelay": atmLoopbackVpMaxDelay,
       "atmLoopbackVpMinDelay": atmLoopbackVpMinDelay,
       "atmLoopbackVpErrSessions": atmLoopbackVpErrSessions,
       "atmLoopbackVcTable": atmLoopbackVcTable,
       "atmLoopbackVcEntry": atmLoopbackVcEntry,
       "atmLoopbackVcIfIndex": atmLoopbackVcIfIndex,
       "atmLoopbackVcVpi": atmLoopbackVcVpi,
       "atmLoopbackVcVci": atmLoopbackVcVci,
       "atmLoopbackVcOperStatus": atmLoopbackVcOperStatus,
       "atmLoopbackVcCDV": atmLoopbackVcCDV,
       "atmLoopbackVcAverageDelay": atmLoopbackVcAverageDelay,
       "atmLoopbackVcMaxDelay": atmLoopbackVcMaxDelay,
       "atmLoopbackVcMinDelay": atmLoopbackVcMinDelay,
       "atmLoopbackVcErrSessions": atmLoopbackVcErrSessions,
       "atmLoopbackVpIvlTable": atmLoopbackVpIvlTable,
       "atmLoopbackVpIvlEntry": atmLoopbackVpIvlEntry,
       "atmLoopbackVpIvlIfIndex": atmLoopbackVpIvlIfIndex,
       "atmLoopbackVpIvlVpi": atmLoopbackVpIvlVpi,
       "atmLoopbackVpIvlIvl": atmLoopbackVpIvlIvl,
       "atmLoopbackVpIvlOperStatus": atmLoopbackVpIvlOperStatus,
       "atmLoopbackVpIvlCDV": atmLoopbackVpIvlCDV,
       "atmLoopbackVpIvlAverageDelay": atmLoopbackVpIvlAverageDelay,
       "atmLoopbackVpIvlMaxDelay": atmLoopbackVpIvlMaxDelay,
       "atmLoopbackVpIvlMinDelay": atmLoopbackVpIvlMinDelay,
       "atmLoopbackVpIvlErrSessions": atmLoopbackVpIvlErrSessions,
       "atmLoopbackVcIvlTable": atmLoopbackVcIvlTable,
       "atmLoopbackVcIvlEntry": atmLoopbackVcIvlEntry,
       "atmLoopbackVcIvlIfIndex": atmLoopbackVcIvlIfIndex,
       "atmLoopbackVcIvlVpi": atmLoopbackVcIvlVpi,
       "atmLoopbackVcIvlVci": atmLoopbackVcIvlVci,
       "atmLoopbackVcIvlIvl": atmLoopbackVcIvlIvl,
       "atmLoopbackVcIvlOperStatus": atmLoopbackVcIvlOperStatus,
       "atmLoopbackVcIvlCDV": atmLoopbackVcIvlCDV,
       "atmLoopbackVcIvlAverageDelay": atmLoopbackVcIvlAverageDelay,
       "atmLoopbackVcIvlMaxDelay": atmLoopbackVcIvlMaxDelay,
       "atmLoopbackVcIvlMinDelay": atmLoopbackVcIvlMinDelay,
       "atmLoopbackVcIvlErrSessions": atmLoopbackVcIvlErrSessions,
       "atmNtePM": atmNtePM,
       "atmVpPmTable": atmVpPmTable,
       "atmVpPmEntry": atmVpPmEntry,
       "atmVpPmIfIndex": atmVpPmIfIndex,
       "atmVpPmVpi": atmVpPmVpi,
       "atmVpPmAdminStatus": atmVpPmAdminStatus,
       "atmVpPmDirection": atmVpPmDirection,
       "atmVpPmBlockSize": atmVpPmBlockSize,
       "atmVpPmRowStatus": atmVpPmRowStatus,
       "atmVpPmSink": atmVpPmSink,
       "atmVpPmSource": atmVpPmSource,
       "atmVcPmTable": atmVcPmTable,
       "atmVcPmEntry": atmVcPmEntry,
       "atmVcPmIfIndex": atmVcPmIfIndex,
       "atmVcPmVpi": atmVcPmVpi,
       "atmVcPmVci": atmVcPmVci,
       "atmVcPmAdminStatus": atmVcPmAdminStatus,
       "atmVcPmDirection": atmVcPmDirection,
       "atmVcPmBlockSize": atmVcPmBlockSize,
       "atmVcPmRowStatus": atmVcPmRowStatus,
       "atmVcPmSink": atmVcPmSink,
       "atmVcPmSource": atmVcPmSource,
       "atmNteMdl": atmNteMdl,
       "atmNteMdlConfig": atmNteMdlConfig,
       "atmNteMdlConfigTable": atmNteMdlConfigTable,
       "atmNteMdlConfigEntry": atmNteMdlConfigEntry,
       "atmNteMdlSlotIndex": atmNteMdlSlotIndex,
       "atmNteMdlPrtCpuSharing": atmNteMdlPrtCpuSharing,
       "atmNteMdlInputPriorityMechanism": atmNteMdlInputPriorityMechanism}
)

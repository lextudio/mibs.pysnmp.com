# SNMP MIB module (Nortel-MsCarrier-MscPassport-LogicalProcessorMIB) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file:///Users/lextm/pysnmp.com/mibs.pysnmp.com/asn1/Nortel-MsCarrier-MscPassport-LogicalProcessorMIB
# Produced by pysmi-1.5.4 at Mon Oct 14 22:31:47 2024
# On host MacBook-Pro.local platform Darwin version 24.0.0 by user lextm
# Using Python version 3.12.0 (main, Nov 14 2023, 23:52:11) [Clang 15.0.0 (clang-1500.0.40.1)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint,
 ConstraintsUnion) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint",
    "ConstraintsUnion")

# Import SMI symbols from the MIBs this MIB depends on

(Counter32,
 DisplayString,
 Gauge32,
 Integer32,
 InterfaceIndex,
 RowPointer,
 RowStatus,
 StorageType,
 Unsigned32) = mibBuilder.importSymbols(
    "Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB",
    "Counter32",
    "DisplayString",
    "Gauge32",
    "Integer32",
    "InterfaceIndex",
    "RowPointer",
    "RowStatus",
    "StorageType",
    "Unsigned32")

(AsciiString,
 EnterpriseDateAndTime,
 Hex,
 Link,
 NonReplicated,
 PassportCounter64) = mibBuilder.importSymbols(
    "Nortel-MsCarrier-MscPassport-TextualConventionsMIB",
    "AsciiString",
    "EnterpriseDateAndTime",
    "Hex",
    "Link",
    "NonReplicated",
    "PassportCounter64")

(mscComponents,
 mscPassportMIBs) = mibBuilder.importSymbols(
    "Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB",
    "mscComponents",
    "mscPassportMIBs")

(ModuleCompliance,
 NotificationGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup")

(Bits,
 Counter32,
 Counter64,
 Gauge32,
 Integer32,
 IpAddress,
 ModuleIdentity,
 MibIdentifier,
 NotificationType,
 ObjectIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 TimeTicks,
 Unsigned32,
 iso) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Bits",
    "Counter32",
    "Counter64",
    "Gauge32",
    "Integer32",
    "IpAddress",
    "ModuleIdentity",
    "MibIdentifier",
    "NotificationType",
    "ObjectIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "TimeTicks",
    "Unsigned32",
    "iso")

(DisplayString,
 TextualConvention) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "DisplayString",
    "TextualConvention")


# MODULE-IDENTITY


# Types definitions


# TEXTUAL-CONVENTIONS



# MIB Managed Objects in the order of their OIDs

_MscLp_ObjectIdentity = ObjectIdentity
mscLp = _MscLp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12)
)
_MscLpRowStatusTable_Object = MibTable
mscLpRowStatusTable = _MscLpRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 1)
)
if mibBuilder.loadTexts:
    mscLpRowStatusTable.setStatus("mandatory")
_MscLpRowStatusEntry_Object = MibTableRow
mscLpRowStatusEntry = _MscLpRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 1, 1)
)
mscLpRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
)
if mibBuilder.loadTexts:
    mscLpRowStatusEntry.setStatus("mandatory")
_MscLpRowStatus_Type = RowStatus
_MscLpRowStatus_Object = MibTableColumn
mscLpRowStatus = _MscLpRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 1, 1, 1),
    _MscLpRowStatus_Type()
)
mscLpRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpRowStatus.setStatus("mandatory")
_MscLpComponentName_Type = DisplayString
_MscLpComponentName_Object = MibTableColumn
mscLpComponentName = _MscLpComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 1, 1, 2),
    _MscLpComponentName_Type()
)
mscLpComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpComponentName.setStatus("mandatory")
_MscLpStorageType_Type = StorageType
_MscLpStorageType_Object = MibTableColumn
mscLpStorageType = _MscLpStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 1, 1, 4),
    _MscLpStorageType_Type()
)
mscLpStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpStorageType.setStatus("mandatory")


class _MscLpIndex_Type(Integer32):
    """Custom type mscLpIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_MscLpIndex_Type.__name__ = "Integer32"
_MscLpIndex_Object = MibTableColumn
mscLpIndex = _MscLpIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 1, 1, 10),
    _MscLpIndex_Type()
)
mscLpIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpIndex.setStatus("mandatory")
_MscLpDS3_ObjectIdentity = ObjectIdentity
mscLpDS3 = _MscLpDS3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5)
)
_MscLpDS3RowStatusTable_Object = MibTable
mscLpDS3RowStatusTable = _MscLpDS3RowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 1)
)
if mibBuilder.loadTexts:
    mscLpDS3RowStatusTable.setStatus("mandatory")
_MscLpDS3RowStatusEntry_Object = MibTableRow
mscLpDS3RowStatusEntry = _MscLpDS3RowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 1, 1)
)
mscLpDS3RowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
)
if mibBuilder.loadTexts:
    mscLpDS3RowStatusEntry.setStatus("mandatory")
_MscLpDS3RowStatus_Type = RowStatus
_MscLpDS3RowStatus_Object = MibTableColumn
mscLpDS3RowStatus = _MscLpDS3RowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 1, 1, 1),
    _MscLpDS3RowStatus_Type()
)
mscLpDS3RowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3RowStatus.setStatus("mandatory")
_MscLpDS3ComponentName_Type = DisplayString
_MscLpDS3ComponentName_Object = MibTableColumn
mscLpDS3ComponentName = _MscLpDS3ComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 1, 1, 2),
    _MscLpDS3ComponentName_Type()
)
mscLpDS3ComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3ComponentName.setStatus("mandatory")
_MscLpDS3StorageType_Type = StorageType
_MscLpDS3StorageType_Object = MibTableColumn
mscLpDS3StorageType = _MscLpDS3StorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 1, 1, 4),
    _MscLpDS3StorageType_Type()
)
mscLpDS3StorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3StorageType.setStatus("mandatory")


class _MscLpDS3Index_Type(Integer32):
    """Custom type mscLpDS3Index based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_MscLpDS3Index_Type.__name__ = "Integer32"
_MscLpDS3Index_Object = MibTableColumn
mscLpDS3Index = _MscLpDS3Index_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 1, 1, 10),
    _MscLpDS3Index_Type()
)
mscLpDS3Index.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS3Index.setStatus("mandatory")
_MscLpDS3Test_ObjectIdentity = ObjectIdentity
mscLpDS3Test = _MscLpDS3Test_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2)
)
_MscLpDS3TestRowStatusTable_Object = MibTable
mscLpDS3TestRowStatusTable = _MscLpDS3TestRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 1)
)
if mibBuilder.loadTexts:
    mscLpDS3TestRowStatusTable.setStatus("mandatory")
_MscLpDS3TestRowStatusEntry_Object = MibTableRow
mscLpDS3TestRowStatusEntry = _MscLpDS3TestRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 1, 1)
)
mscLpDS3TestRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3TestRowStatusEntry.setStatus("mandatory")
_MscLpDS3TestRowStatus_Type = RowStatus
_MscLpDS3TestRowStatus_Object = MibTableColumn
mscLpDS3TestRowStatus = _MscLpDS3TestRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 1, 1, 1),
    _MscLpDS3TestRowStatus_Type()
)
mscLpDS3TestRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3TestRowStatus.setStatus("mandatory")
_MscLpDS3TestComponentName_Type = DisplayString
_MscLpDS3TestComponentName_Object = MibTableColumn
mscLpDS3TestComponentName = _MscLpDS3TestComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 1, 1, 2),
    _MscLpDS3TestComponentName_Type()
)
mscLpDS3TestComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3TestComponentName.setStatus("mandatory")
_MscLpDS3TestStorageType_Type = StorageType
_MscLpDS3TestStorageType_Object = MibTableColumn
mscLpDS3TestStorageType = _MscLpDS3TestStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 1, 1, 4),
    _MscLpDS3TestStorageType_Type()
)
mscLpDS3TestStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3TestStorageType.setStatus("mandatory")
_MscLpDS3TestIndex_Type = NonReplicated
_MscLpDS3TestIndex_Object = MibTableColumn
mscLpDS3TestIndex = _MscLpDS3TestIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 1, 1, 10),
    _MscLpDS3TestIndex_Type()
)
mscLpDS3TestIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS3TestIndex.setStatus("mandatory")
_MscLpDS3TestStateTable_Object = MibTable
mscLpDS3TestStateTable = _MscLpDS3TestStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 10)
)
if mibBuilder.loadTexts:
    mscLpDS3TestStateTable.setStatus("mandatory")
_MscLpDS3TestStateEntry_Object = MibTableRow
mscLpDS3TestStateEntry = _MscLpDS3TestStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 10, 1)
)
mscLpDS3TestStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3TestStateEntry.setStatus("mandatory")


class _MscLpDS3TestAdminState_Type(Integer32):
    """Custom type mscLpDS3TestAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpDS3TestAdminState_Type.__name__ = "Integer32"
_MscLpDS3TestAdminState_Object = MibTableColumn
mscLpDS3TestAdminState = _MscLpDS3TestAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 10, 1, 1),
    _MscLpDS3TestAdminState_Type()
)
mscLpDS3TestAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3TestAdminState.setStatus("mandatory")


class _MscLpDS3TestOperationalState_Type(Integer32):
    """Custom type mscLpDS3TestOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpDS3TestOperationalState_Type.__name__ = "Integer32"
_MscLpDS3TestOperationalState_Object = MibTableColumn
mscLpDS3TestOperationalState = _MscLpDS3TestOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 10, 1, 2),
    _MscLpDS3TestOperationalState_Type()
)
mscLpDS3TestOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3TestOperationalState.setStatus("mandatory")


class _MscLpDS3TestUsageState_Type(Integer32):
    """Custom type mscLpDS3TestUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpDS3TestUsageState_Type.__name__ = "Integer32"
_MscLpDS3TestUsageState_Object = MibTableColumn
mscLpDS3TestUsageState = _MscLpDS3TestUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 10, 1, 3),
    _MscLpDS3TestUsageState_Type()
)
mscLpDS3TestUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3TestUsageState.setStatus("mandatory")
_MscLpDS3TestSetupTable_Object = MibTable
mscLpDS3TestSetupTable = _MscLpDS3TestSetupTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 11)
)
if mibBuilder.loadTexts:
    mscLpDS3TestSetupTable.setStatus("mandatory")
_MscLpDS3TestSetupEntry_Object = MibTableRow
mscLpDS3TestSetupEntry = _MscLpDS3TestSetupEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 11, 1)
)
mscLpDS3TestSetupEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3TestSetupEntry.setStatus("mandatory")


class _MscLpDS3TestPurpose_Type(AsciiString):
    """Custom type mscLpDS3TestPurpose based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_MscLpDS3TestPurpose_Type.__name__ = "AsciiString"
_MscLpDS3TestPurpose_Object = MibTableColumn
mscLpDS3TestPurpose = _MscLpDS3TestPurpose_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 11, 1, 1),
    _MscLpDS3TestPurpose_Type()
)
mscLpDS3TestPurpose.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3TestPurpose.setStatus("mandatory")


class _MscLpDS3TestType_Type(Integer32):
    """Custom type mscLpDS3TestType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("card", 0),
          ("externalLoop", 4),
          ("localLoop", 2),
          ("manual", 1),
          ("payloadLoop", 5),
          ("pn127RemoteLoop", 8),
          ("remoteLoop", 3),
          ("remoteLoopThisTrib", 6),
          ("v54RemoteLoop", 7))
    )


_MscLpDS3TestType_Type.__name__ = "Integer32"
_MscLpDS3TestType_Object = MibTableColumn
mscLpDS3TestType = _MscLpDS3TestType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 11, 1, 2),
    _MscLpDS3TestType_Type()
)
mscLpDS3TestType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3TestType.setStatus("mandatory")


class _MscLpDS3TestFrmSize_Type(Unsigned32):
    """Custom type mscLpDS3TestFrmSize based on Unsigned32"""
    defaultValue = 1024

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 4096),
    )


_MscLpDS3TestFrmSize_Type.__name__ = "Unsigned32"
_MscLpDS3TestFrmSize_Object = MibTableColumn
mscLpDS3TestFrmSize = _MscLpDS3TestFrmSize_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 11, 1, 3),
    _MscLpDS3TestFrmSize_Type()
)
mscLpDS3TestFrmSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3TestFrmSize.setStatus("mandatory")


class _MscLpDS3TestFrmPatternType_Type(Integer32):
    """Custom type mscLpDS3TestFrmPatternType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ccitt32kBitPattern", 0),
          ("ccitt8MBitPattern", 1),
          ("customizedPattern", 2))
    )


_MscLpDS3TestFrmPatternType_Type.__name__ = "Integer32"
_MscLpDS3TestFrmPatternType_Object = MibTableColumn
mscLpDS3TestFrmPatternType = _MscLpDS3TestFrmPatternType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 11, 1, 4),
    _MscLpDS3TestFrmPatternType_Type()
)
mscLpDS3TestFrmPatternType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3TestFrmPatternType.setStatus("mandatory")


class _MscLpDS3TestCustomizedPattern_Type(Hex):
    """Custom type mscLpDS3TestCustomizedPattern based on Hex"""
    defaultValue = 1431655765

    subtypeSpec = Hex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpDS3TestCustomizedPattern_Type.__name__ = "Hex"
_MscLpDS3TestCustomizedPattern_Object = MibTableColumn
mscLpDS3TestCustomizedPattern = _MscLpDS3TestCustomizedPattern_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 11, 1, 5),
    _MscLpDS3TestCustomizedPattern_Type()
)
mscLpDS3TestCustomizedPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3TestCustomizedPattern.setStatus("mandatory")


class _MscLpDS3TestDataStartDelay_Type(Unsigned32):
    """Custom type mscLpDS3TestDataStartDelay based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1814400),
    )


_MscLpDS3TestDataStartDelay_Type.__name__ = "Unsigned32"
_MscLpDS3TestDataStartDelay_Object = MibTableColumn
mscLpDS3TestDataStartDelay = _MscLpDS3TestDataStartDelay_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 11, 1, 6),
    _MscLpDS3TestDataStartDelay_Type()
)
mscLpDS3TestDataStartDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3TestDataStartDelay.setStatus("mandatory")


class _MscLpDS3TestDisplayInterval_Type(Unsigned32):
    """Custom type mscLpDS3TestDisplayInterval based on Unsigned32"""
    defaultValue = 5

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30240),
    )


_MscLpDS3TestDisplayInterval_Type.__name__ = "Unsigned32"
_MscLpDS3TestDisplayInterval_Object = MibTableColumn
mscLpDS3TestDisplayInterval = _MscLpDS3TestDisplayInterval_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 11, 1, 7),
    _MscLpDS3TestDisplayInterval_Type()
)
mscLpDS3TestDisplayInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3TestDisplayInterval.setStatus("mandatory")


class _MscLpDS3TestDuration_Type(Unsigned32):
    """Custom type mscLpDS3TestDuration based on Unsigned32"""
    defaultValue = 1

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30240),
    )


_MscLpDS3TestDuration_Type.__name__ = "Unsigned32"
_MscLpDS3TestDuration_Object = MibTableColumn
mscLpDS3TestDuration = _MscLpDS3TestDuration_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 11, 1, 8),
    _MscLpDS3TestDuration_Type()
)
mscLpDS3TestDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3TestDuration.setStatus("mandatory")
_MscLpDS3TestResultsTable_Object = MibTable
mscLpDS3TestResultsTable = _MscLpDS3TestResultsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12)
)
if mibBuilder.loadTexts:
    mscLpDS3TestResultsTable.setStatus("mandatory")
_MscLpDS3TestResultsEntry_Object = MibTableRow
mscLpDS3TestResultsEntry = _MscLpDS3TestResultsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1)
)
mscLpDS3TestResultsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3TestResultsEntry.setStatus("mandatory")
_MscLpDS3TestElapsedTime_Type = Counter32
_MscLpDS3TestElapsedTime_Object = MibTableColumn
mscLpDS3TestElapsedTime = _MscLpDS3TestElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1, 1),
    _MscLpDS3TestElapsedTime_Type()
)
mscLpDS3TestElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3TestElapsedTime.setStatus("mandatory")


class _MscLpDS3TestTimeRemaining_Type(Unsigned32):
    """Custom type mscLpDS3TestTimeRemaining based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpDS3TestTimeRemaining_Type.__name__ = "Unsigned32"
_MscLpDS3TestTimeRemaining_Object = MibTableColumn
mscLpDS3TestTimeRemaining = _MscLpDS3TestTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1, 2),
    _MscLpDS3TestTimeRemaining_Type()
)
mscLpDS3TestTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3TestTimeRemaining.setStatus("mandatory")


class _MscLpDS3TestCauseOfTermination_Type(Integer32):
    """Custom type mscLpDS3TestCauseOfTermination based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("hardwareReconfigured", 5),
          ("loopCodeSyncFailed", 6),
          ("neverStarted", 3),
          ("patternSyncFailed", 7),
          ("patternSyncLost", 8),
          ("stoppedByOperator", 1),
          ("testRunning", 4),
          ("testTimeExpired", 0),
          ("unknown", 2))
    )


_MscLpDS3TestCauseOfTermination_Type.__name__ = "Integer32"
_MscLpDS3TestCauseOfTermination_Object = MibTableColumn
mscLpDS3TestCauseOfTermination = _MscLpDS3TestCauseOfTermination_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1, 3),
    _MscLpDS3TestCauseOfTermination_Type()
)
mscLpDS3TestCauseOfTermination.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3TestCauseOfTermination.setStatus("mandatory")
_MscLpDS3TestBitsTx_Type = PassportCounter64
_MscLpDS3TestBitsTx_Object = MibTableColumn
mscLpDS3TestBitsTx = _MscLpDS3TestBitsTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1, 4),
    _MscLpDS3TestBitsTx_Type()
)
mscLpDS3TestBitsTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3TestBitsTx.setStatus("mandatory")
_MscLpDS3TestBytesTx_Type = PassportCounter64
_MscLpDS3TestBytesTx_Object = MibTableColumn
mscLpDS3TestBytesTx = _MscLpDS3TestBytesTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1, 5),
    _MscLpDS3TestBytesTx_Type()
)
mscLpDS3TestBytesTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3TestBytesTx.setStatus("mandatory")
_MscLpDS3TestFrmTx_Type = PassportCounter64
_MscLpDS3TestFrmTx_Object = MibTableColumn
mscLpDS3TestFrmTx = _MscLpDS3TestFrmTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1, 6),
    _MscLpDS3TestFrmTx_Type()
)
mscLpDS3TestFrmTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3TestFrmTx.setStatus("mandatory")
_MscLpDS3TestBitsRx_Type = PassportCounter64
_MscLpDS3TestBitsRx_Object = MibTableColumn
mscLpDS3TestBitsRx = _MscLpDS3TestBitsRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1, 7),
    _MscLpDS3TestBitsRx_Type()
)
mscLpDS3TestBitsRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3TestBitsRx.setStatus("mandatory")
_MscLpDS3TestBytesRx_Type = PassportCounter64
_MscLpDS3TestBytesRx_Object = MibTableColumn
mscLpDS3TestBytesRx = _MscLpDS3TestBytesRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1, 8),
    _MscLpDS3TestBytesRx_Type()
)
mscLpDS3TestBytesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3TestBytesRx.setStatus("mandatory")
_MscLpDS3TestFrmRx_Type = PassportCounter64
_MscLpDS3TestFrmRx_Object = MibTableColumn
mscLpDS3TestFrmRx = _MscLpDS3TestFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1, 9),
    _MscLpDS3TestFrmRx_Type()
)
mscLpDS3TestFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3TestFrmRx.setStatus("mandatory")
_MscLpDS3TestErroredFrmRx_Type = PassportCounter64
_MscLpDS3TestErroredFrmRx_Object = MibTableColumn
mscLpDS3TestErroredFrmRx = _MscLpDS3TestErroredFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1, 10),
    _MscLpDS3TestErroredFrmRx_Type()
)
mscLpDS3TestErroredFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3TestErroredFrmRx.setStatus("mandatory")


class _MscLpDS3TestBitErrorRate_Type(AsciiString):
    """Custom type mscLpDS3TestBitErrorRate based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )


_MscLpDS3TestBitErrorRate_Type.__name__ = "AsciiString"
_MscLpDS3TestBitErrorRate_Object = MibTableColumn
mscLpDS3TestBitErrorRate = _MscLpDS3TestBitErrorRate_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 2, 12, 1, 11),
    _MscLpDS3TestBitErrorRate_Type()
)
mscLpDS3TestBitErrorRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3TestBitErrorRate.setStatus("mandatory")
_MscLpDS3CBit_ObjectIdentity = ObjectIdentity
mscLpDS3CBit = _MscLpDS3CBit_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3)
)
_MscLpDS3CBitRowStatusTable_Object = MibTable
mscLpDS3CBitRowStatusTable = _MscLpDS3CBitRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 1)
)
if mibBuilder.loadTexts:
    mscLpDS3CBitRowStatusTable.setStatus("mandatory")
_MscLpDS3CBitRowStatusEntry_Object = MibTableRow
mscLpDS3CBitRowStatusEntry = _MscLpDS3CBitRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 1, 1)
)
mscLpDS3CBitRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3CBitIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3CBitRowStatusEntry.setStatus("mandatory")
_MscLpDS3CBitRowStatus_Type = RowStatus
_MscLpDS3CBitRowStatus_Object = MibTableColumn
mscLpDS3CBitRowStatus = _MscLpDS3CBitRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 1, 1, 1),
    _MscLpDS3CBitRowStatus_Type()
)
mscLpDS3CBitRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CBitRowStatus.setStatus("mandatory")
_MscLpDS3CBitComponentName_Type = DisplayString
_MscLpDS3CBitComponentName_Object = MibTableColumn
mscLpDS3CBitComponentName = _MscLpDS3CBitComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 1, 1, 2),
    _MscLpDS3CBitComponentName_Type()
)
mscLpDS3CBitComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CBitComponentName.setStatus("mandatory")
_MscLpDS3CBitStorageType_Type = StorageType
_MscLpDS3CBitStorageType_Object = MibTableColumn
mscLpDS3CBitStorageType = _MscLpDS3CBitStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 1, 1, 4),
    _MscLpDS3CBitStorageType_Type()
)
mscLpDS3CBitStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CBitStorageType.setStatus("mandatory")
_MscLpDS3CBitIndex_Type = NonReplicated
_MscLpDS3CBitIndex_Object = MibTableColumn
mscLpDS3CBitIndex = _MscLpDS3CBitIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 1, 1, 10),
    _MscLpDS3CBitIndex_Type()
)
mscLpDS3CBitIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS3CBitIndex.setStatus("mandatory")
_MscLpDS3CBitOperationalTable_Object = MibTable
mscLpDS3CBitOperationalTable = _MscLpDS3CBitOperationalTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 10)
)
if mibBuilder.loadTexts:
    mscLpDS3CBitOperationalTable.setStatus("mandatory")
_MscLpDS3CBitOperationalEntry_Object = MibTableRow
mscLpDS3CBitOperationalEntry = _MscLpDS3CBitOperationalEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 10, 1)
)
mscLpDS3CBitOperationalEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3CBitIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3CBitOperationalEntry.setStatus("mandatory")


class _MscLpDS3CBitFarEndAlarm_Type(Integer32):
    """Custom type mscLpDS3CBitFarEndAlarm based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("ais", 3),
          ("equipmentFailure", 0),
          ("idle", 4),
          ("los", 1),
          ("none", 5),
          ("sef", 2))
    )


_MscLpDS3CBitFarEndAlarm_Type.__name__ = "Integer32"
_MscLpDS3CBitFarEndAlarm_Object = MibTableColumn
mscLpDS3CBitFarEndAlarm = _MscLpDS3CBitFarEndAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 10, 1, 1),
    _MscLpDS3CBitFarEndAlarm_Type()
)
mscLpDS3CBitFarEndAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CBitFarEndAlarm.setStatus("mandatory")


class _MscLpDS3CBitLoopedbackToFarEnd_Type(OctetString):
    """Custom type mscLpDS3CBitLoopedbackToFarEnd based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_MscLpDS3CBitLoopedbackToFarEnd_Type.__name__ = "OctetString"
_MscLpDS3CBitLoopedbackToFarEnd_Object = MibTableColumn
mscLpDS3CBitLoopedbackToFarEnd = _MscLpDS3CBitLoopedbackToFarEnd_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 10, 1, 2),
    _MscLpDS3CBitLoopedbackToFarEnd_Type()
)
mscLpDS3CBitLoopedbackToFarEnd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CBitLoopedbackToFarEnd.setStatus("mandatory")


class _MscLpDS3CBitLoopbackAtFarEndRequested_Type(OctetString):
    """Custom type mscLpDS3CBitLoopbackAtFarEndRequested based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_MscLpDS3CBitLoopbackAtFarEndRequested_Type.__name__ = "OctetString"
_MscLpDS3CBitLoopbackAtFarEndRequested_Object = MibTableColumn
mscLpDS3CBitLoopbackAtFarEndRequested = _MscLpDS3CBitLoopbackAtFarEndRequested_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 10, 1, 3),
    _MscLpDS3CBitLoopbackAtFarEndRequested_Type()
)
mscLpDS3CBitLoopbackAtFarEndRequested.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CBitLoopbackAtFarEndRequested.setStatus("mandatory")
_MscLpDS3CBitStatsTable_Object = MibTable
mscLpDS3CBitStatsTable = _MscLpDS3CBitStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11)
)
if mibBuilder.loadTexts:
    mscLpDS3CBitStatsTable.setStatus("mandatory")
_MscLpDS3CBitStatsEntry_Object = MibTableRow
mscLpDS3CBitStatsEntry = _MscLpDS3CBitStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1)
)
mscLpDS3CBitStatsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3CBitIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3CBitStatsEntry.setStatus("mandatory")
_MscLpDS3CBitCbitErrorFreeSec_Type = Counter32
_MscLpDS3CBitCbitErrorFreeSec_Object = MibTableColumn
mscLpDS3CBitCbitErrorFreeSec = _MscLpDS3CBitCbitErrorFreeSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 1),
    _MscLpDS3CBitCbitErrorFreeSec_Type()
)
mscLpDS3CBitCbitErrorFreeSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CBitCbitErrorFreeSec.setStatus("mandatory")
_MscLpDS3CBitCbitCodeViolations_Type = Counter32
_MscLpDS3CBitCbitCodeViolations_Object = MibTableColumn
mscLpDS3CBitCbitCodeViolations = _MscLpDS3CBitCbitCodeViolations_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 2),
    _MscLpDS3CBitCbitCodeViolations_Type()
)
mscLpDS3CBitCbitCodeViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CBitCbitCodeViolations.setStatus("mandatory")
_MscLpDS3CBitCbitErroredSec_Type = Counter32
_MscLpDS3CBitCbitErroredSec_Object = MibTableColumn
mscLpDS3CBitCbitErroredSec = _MscLpDS3CBitCbitErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 3),
    _MscLpDS3CBitCbitErroredSec_Type()
)
mscLpDS3CBitCbitErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CBitCbitErroredSec.setStatus("mandatory")
_MscLpDS3CBitCbitSevErroredSec_Type = Counter32
_MscLpDS3CBitCbitSevErroredSec_Object = MibTableColumn
mscLpDS3CBitCbitSevErroredSec = _MscLpDS3CBitCbitSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 4),
    _MscLpDS3CBitCbitSevErroredSec_Type()
)
mscLpDS3CBitCbitSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CBitCbitSevErroredSec.setStatus("mandatory")
_MscLpDS3CBitCbitUnavailSec_Type = Counter32
_MscLpDS3CBitCbitUnavailSec_Object = MibTableColumn
mscLpDS3CBitCbitUnavailSec = _MscLpDS3CBitCbitUnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 5),
    _MscLpDS3CBitCbitUnavailSec_Type()
)
mscLpDS3CBitCbitUnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CBitCbitUnavailSec.setStatus("mandatory")
_MscLpDS3CBitFarEndErrorFreeSec_Type = Counter32
_MscLpDS3CBitFarEndErrorFreeSec_Object = MibTableColumn
mscLpDS3CBitFarEndErrorFreeSec = _MscLpDS3CBitFarEndErrorFreeSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 6),
    _MscLpDS3CBitFarEndErrorFreeSec_Type()
)
mscLpDS3CBitFarEndErrorFreeSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CBitFarEndErrorFreeSec.setStatus("mandatory")
_MscLpDS3CBitFarEndCodeViolations_Type = Counter32
_MscLpDS3CBitFarEndCodeViolations_Object = MibTableColumn
mscLpDS3CBitFarEndCodeViolations = _MscLpDS3CBitFarEndCodeViolations_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 7),
    _MscLpDS3CBitFarEndCodeViolations_Type()
)
mscLpDS3CBitFarEndCodeViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CBitFarEndCodeViolations.setStatus("mandatory")
_MscLpDS3CBitFarEndErroredSec_Type = Counter32
_MscLpDS3CBitFarEndErroredSec_Object = MibTableColumn
mscLpDS3CBitFarEndErroredSec = _MscLpDS3CBitFarEndErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 8),
    _MscLpDS3CBitFarEndErroredSec_Type()
)
mscLpDS3CBitFarEndErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CBitFarEndErroredSec.setStatus("mandatory")
_MscLpDS3CBitFarEndSevErroredSec_Type = Counter32
_MscLpDS3CBitFarEndSevErroredSec_Object = MibTableColumn
mscLpDS3CBitFarEndSevErroredSec = _MscLpDS3CBitFarEndSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 9),
    _MscLpDS3CBitFarEndSevErroredSec_Type()
)
mscLpDS3CBitFarEndSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CBitFarEndSevErroredSec.setStatus("mandatory")
_MscLpDS3CBitFarEndSefAisSec_Type = Counter32
_MscLpDS3CBitFarEndSefAisSec_Object = MibTableColumn
mscLpDS3CBitFarEndSefAisSec = _MscLpDS3CBitFarEndSefAisSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 10),
    _MscLpDS3CBitFarEndSefAisSec_Type()
)
mscLpDS3CBitFarEndSefAisSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CBitFarEndSefAisSec.setStatus("mandatory")
_MscLpDS3CBitFarEndUnavailSec_Type = Counter32
_MscLpDS3CBitFarEndUnavailSec_Object = MibTableColumn
mscLpDS3CBitFarEndUnavailSec = _MscLpDS3CBitFarEndUnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 11),
    _MscLpDS3CBitFarEndUnavailSec_Type()
)
mscLpDS3CBitFarEndUnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CBitFarEndUnavailSec.setStatus("mandatory")
_MscLpDS3CBitFarEndFailures_Type = Counter32
_MscLpDS3CBitFarEndFailures_Object = MibTableColumn
mscLpDS3CBitFarEndFailures = _MscLpDS3CBitFarEndFailures_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 3, 11, 1, 12),
    _MscLpDS3CBitFarEndFailures_Type()
)
mscLpDS3CBitFarEndFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CBitFarEndFailures.setStatus("mandatory")
_MscLpDS3Plcp_ObjectIdentity = ObjectIdentity
mscLpDS3Plcp = _MscLpDS3Plcp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4)
)
_MscLpDS3PlcpRowStatusTable_Object = MibTable
mscLpDS3PlcpRowStatusTable = _MscLpDS3PlcpRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 1)
)
if mibBuilder.loadTexts:
    mscLpDS3PlcpRowStatusTable.setStatus("mandatory")
_MscLpDS3PlcpRowStatusEntry_Object = MibTableRow
mscLpDS3PlcpRowStatusEntry = _MscLpDS3PlcpRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 1, 1)
)
mscLpDS3PlcpRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3PlcpIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3PlcpRowStatusEntry.setStatus("mandatory")
_MscLpDS3PlcpRowStatus_Type = RowStatus
_MscLpDS3PlcpRowStatus_Object = MibTableColumn
mscLpDS3PlcpRowStatus = _MscLpDS3PlcpRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 1, 1, 1),
    _MscLpDS3PlcpRowStatus_Type()
)
mscLpDS3PlcpRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3PlcpRowStatus.setStatus("mandatory")
_MscLpDS3PlcpComponentName_Type = DisplayString
_MscLpDS3PlcpComponentName_Object = MibTableColumn
mscLpDS3PlcpComponentName = _MscLpDS3PlcpComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 1, 1, 2),
    _MscLpDS3PlcpComponentName_Type()
)
mscLpDS3PlcpComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3PlcpComponentName.setStatus("mandatory")
_MscLpDS3PlcpStorageType_Type = StorageType
_MscLpDS3PlcpStorageType_Object = MibTableColumn
mscLpDS3PlcpStorageType = _MscLpDS3PlcpStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 1, 1, 4),
    _MscLpDS3PlcpStorageType_Type()
)
mscLpDS3PlcpStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3PlcpStorageType.setStatus("mandatory")
_MscLpDS3PlcpIndex_Type = NonReplicated
_MscLpDS3PlcpIndex_Object = MibTableColumn
mscLpDS3PlcpIndex = _MscLpDS3PlcpIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 1, 1, 10),
    _MscLpDS3PlcpIndex_Type()
)
mscLpDS3PlcpIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS3PlcpIndex.setStatus("mandatory")
_MscLpDS3PlcpOperationalTable_Object = MibTable
mscLpDS3PlcpOperationalTable = _MscLpDS3PlcpOperationalTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 10)
)
if mibBuilder.loadTexts:
    mscLpDS3PlcpOperationalTable.setStatus("mandatory")
_MscLpDS3PlcpOperationalEntry_Object = MibTableRow
mscLpDS3PlcpOperationalEntry = _MscLpDS3PlcpOperationalEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 10, 1)
)
mscLpDS3PlcpOperationalEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3PlcpIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3PlcpOperationalEntry.setStatus("mandatory")


class _MscLpDS3PlcpLofAlarm_Type(Integer32):
    """Custom type mscLpDS3PlcpLofAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS3PlcpLofAlarm_Type.__name__ = "Integer32"
_MscLpDS3PlcpLofAlarm_Object = MibTableColumn
mscLpDS3PlcpLofAlarm = _MscLpDS3PlcpLofAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 10, 1, 1),
    _MscLpDS3PlcpLofAlarm_Type()
)
mscLpDS3PlcpLofAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3PlcpLofAlarm.setStatus("mandatory")


class _MscLpDS3PlcpRxRaiAlarm_Type(Integer32):
    """Custom type mscLpDS3PlcpRxRaiAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS3PlcpRxRaiAlarm_Type.__name__ = "Integer32"
_MscLpDS3PlcpRxRaiAlarm_Object = MibTableColumn
mscLpDS3PlcpRxRaiAlarm = _MscLpDS3PlcpRxRaiAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 10, 1, 2),
    _MscLpDS3PlcpRxRaiAlarm_Type()
)
mscLpDS3PlcpRxRaiAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3PlcpRxRaiAlarm.setStatus("mandatory")
_MscLpDS3PlcpStatsTable_Object = MibTable
mscLpDS3PlcpStatsTable = _MscLpDS3PlcpStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11)
)
if mibBuilder.loadTexts:
    mscLpDS3PlcpStatsTable.setStatus("mandatory")
_MscLpDS3PlcpStatsEntry_Object = MibTableRow
mscLpDS3PlcpStatsEntry = _MscLpDS3PlcpStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1)
)
mscLpDS3PlcpStatsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3PlcpIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3PlcpStatsEntry.setStatus("mandatory")
_MscLpDS3PlcpErrorFreeSec_Type = Counter32
_MscLpDS3PlcpErrorFreeSec_Object = MibTableColumn
mscLpDS3PlcpErrorFreeSec = _MscLpDS3PlcpErrorFreeSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1, 1),
    _MscLpDS3PlcpErrorFreeSec_Type()
)
mscLpDS3PlcpErrorFreeSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3PlcpErrorFreeSec.setStatus("mandatory")
_MscLpDS3PlcpCodingViolations_Type = Counter32
_MscLpDS3PlcpCodingViolations_Object = MibTableColumn
mscLpDS3PlcpCodingViolations = _MscLpDS3PlcpCodingViolations_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1, 2),
    _MscLpDS3PlcpCodingViolations_Type()
)
mscLpDS3PlcpCodingViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3PlcpCodingViolations.setStatus("mandatory")
_MscLpDS3PlcpErroredSec_Type = Counter32
_MscLpDS3PlcpErroredSec_Object = MibTableColumn
mscLpDS3PlcpErroredSec = _MscLpDS3PlcpErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1, 3),
    _MscLpDS3PlcpErroredSec_Type()
)
mscLpDS3PlcpErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3PlcpErroredSec.setStatus("mandatory")
_MscLpDS3PlcpSevErroredSec_Type = Counter32
_MscLpDS3PlcpSevErroredSec_Object = MibTableColumn
mscLpDS3PlcpSevErroredSec = _MscLpDS3PlcpSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1, 4),
    _MscLpDS3PlcpSevErroredSec_Type()
)
mscLpDS3PlcpSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3PlcpSevErroredSec.setStatus("mandatory")
_MscLpDS3PlcpSevErroredFramingSec_Type = Counter32
_MscLpDS3PlcpSevErroredFramingSec_Object = MibTableColumn
mscLpDS3PlcpSevErroredFramingSec = _MscLpDS3PlcpSevErroredFramingSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1, 5),
    _MscLpDS3PlcpSevErroredFramingSec_Type()
)
mscLpDS3PlcpSevErroredFramingSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3PlcpSevErroredFramingSec.setStatus("mandatory")
_MscLpDS3PlcpUnavailSec_Type = Counter32
_MscLpDS3PlcpUnavailSec_Object = MibTableColumn
mscLpDS3PlcpUnavailSec = _MscLpDS3PlcpUnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1, 6),
    _MscLpDS3PlcpUnavailSec_Type()
)
mscLpDS3PlcpUnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3PlcpUnavailSec.setStatus("mandatory")
_MscLpDS3PlcpFarEndErrorFreeSec_Type = Counter32
_MscLpDS3PlcpFarEndErrorFreeSec_Object = MibTableColumn
mscLpDS3PlcpFarEndErrorFreeSec = _MscLpDS3PlcpFarEndErrorFreeSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1, 7),
    _MscLpDS3PlcpFarEndErrorFreeSec_Type()
)
mscLpDS3PlcpFarEndErrorFreeSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3PlcpFarEndErrorFreeSec.setStatus("mandatory")
_MscLpDS3PlcpFarEndCodingViolations_Type = Counter32
_MscLpDS3PlcpFarEndCodingViolations_Object = MibTableColumn
mscLpDS3PlcpFarEndCodingViolations = _MscLpDS3PlcpFarEndCodingViolations_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1, 8),
    _MscLpDS3PlcpFarEndCodingViolations_Type()
)
mscLpDS3PlcpFarEndCodingViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3PlcpFarEndCodingViolations.setStatus("mandatory")
_MscLpDS3PlcpFarEndErroredSec_Type = Counter32
_MscLpDS3PlcpFarEndErroredSec_Object = MibTableColumn
mscLpDS3PlcpFarEndErroredSec = _MscLpDS3PlcpFarEndErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1, 9),
    _MscLpDS3PlcpFarEndErroredSec_Type()
)
mscLpDS3PlcpFarEndErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3PlcpFarEndErroredSec.setStatus("mandatory")
_MscLpDS3PlcpFarEndSevErroredSec_Type = Counter32
_MscLpDS3PlcpFarEndSevErroredSec_Object = MibTableColumn
mscLpDS3PlcpFarEndSevErroredSec = _MscLpDS3PlcpFarEndSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1, 10),
    _MscLpDS3PlcpFarEndSevErroredSec_Type()
)
mscLpDS3PlcpFarEndSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3PlcpFarEndSevErroredSec.setStatus("mandatory")
_MscLpDS3PlcpFarEndUnavailableSec_Type = Counter32
_MscLpDS3PlcpFarEndUnavailableSec_Object = MibTableColumn
mscLpDS3PlcpFarEndUnavailableSec = _MscLpDS3PlcpFarEndUnavailableSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 4, 11, 1, 11),
    _MscLpDS3PlcpFarEndUnavailableSec_Type()
)
mscLpDS3PlcpFarEndUnavailableSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3PlcpFarEndUnavailableSec.setStatus("mandatory")
_MscLpDS3Cell_ObjectIdentity = ObjectIdentity
mscLpDS3Cell = _MscLpDS3Cell_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5)
)
_MscLpDS3CellRowStatusTable_Object = MibTable
mscLpDS3CellRowStatusTable = _MscLpDS3CellRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 1)
)
if mibBuilder.loadTexts:
    mscLpDS3CellRowStatusTable.setStatus("mandatory")
_MscLpDS3CellRowStatusEntry_Object = MibTableRow
mscLpDS3CellRowStatusEntry = _MscLpDS3CellRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 1, 1)
)
mscLpDS3CellRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3CellIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3CellRowStatusEntry.setStatus("mandatory")
_MscLpDS3CellRowStatus_Type = RowStatus
_MscLpDS3CellRowStatus_Object = MibTableColumn
mscLpDS3CellRowStatus = _MscLpDS3CellRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 1, 1, 1),
    _MscLpDS3CellRowStatus_Type()
)
mscLpDS3CellRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3CellRowStatus.setStatus("mandatory")
_MscLpDS3CellComponentName_Type = DisplayString
_MscLpDS3CellComponentName_Object = MibTableColumn
mscLpDS3CellComponentName = _MscLpDS3CellComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 1, 1, 2),
    _MscLpDS3CellComponentName_Type()
)
mscLpDS3CellComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CellComponentName.setStatus("mandatory")
_MscLpDS3CellStorageType_Type = StorageType
_MscLpDS3CellStorageType_Object = MibTableColumn
mscLpDS3CellStorageType = _MscLpDS3CellStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 1, 1, 4),
    _MscLpDS3CellStorageType_Type()
)
mscLpDS3CellStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CellStorageType.setStatus("mandatory")
_MscLpDS3CellIndex_Type = NonReplicated
_MscLpDS3CellIndex_Object = MibTableColumn
mscLpDS3CellIndex = _MscLpDS3CellIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 1, 1, 10),
    _MscLpDS3CellIndex_Type()
)
mscLpDS3CellIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS3CellIndex.setStatus("mandatory")
_MscLpDS3CellProvTable_Object = MibTable
mscLpDS3CellProvTable = _MscLpDS3CellProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 10)
)
if mibBuilder.loadTexts:
    mscLpDS3CellProvTable.setStatus("mandatory")
_MscLpDS3CellProvEntry_Object = MibTableRow
mscLpDS3CellProvEntry = _MscLpDS3CellProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 10, 1)
)
mscLpDS3CellProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3CellIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3CellProvEntry.setStatus("mandatory")


class _MscLpDS3CellAlarmActDelay_Type(Unsigned32):
    """Custom type mscLpDS3CellAlarmActDelay based on Unsigned32"""
    defaultValue = 500

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2000),
    )


_MscLpDS3CellAlarmActDelay_Type.__name__ = "Unsigned32"
_MscLpDS3CellAlarmActDelay_Object = MibTableColumn
mscLpDS3CellAlarmActDelay = _MscLpDS3CellAlarmActDelay_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 10, 1, 1),
    _MscLpDS3CellAlarmActDelay_Type()
)
mscLpDS3CellAlarmActDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3CellAlarmActDelay.setStatus("mandatory")


class _MscLpDS3CellScrambleCellPayload_Type(Integer32):
    """Custom type mscLpDS3CellScrambleCellPayload based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpDS3CellScrambleCellPayload_Type.__name__ = "Integer32"
_MscLpDS3CellScrambleCellPayload_Object = MibTableColumn
mscLpDS3CellScrambleCellPayload = _MscLpDS3CellScrambleCellPayload_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 10, 1, 2),
    _MscLpDS3CellScrambleCellPayload_Type()
)
mscLpDS3CellScrambleCellPayload.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3CellScrambleCellPayload.setStatus("mandatory")


class _MscLpDS3CellCorrectSingleBitHeaderErrors_Type(Integer32):
    """Custom type mscLpDS3CellCorrectSingleBitHeaderErrors based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpDS3CellCorrectSingleBitHeaderErrors_Type.__name__ = "Integer32"
_MscLpDS3CellCorrectSingleBitHeaderErrors_Object = MibTableColumn
mscLpDS3CellCorrectSingleBitHeaderErrors = _MscLpDS3CellCorrectSingleBitHeaderErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 10, 1, 3),
    _MscLpDS3CellCorrectSingleBitHeaderErrors_Type()
)
mscLpDS3CellCorrectSingleBitHeaderErrors.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3CellCorrectSingleBitHeaderErrors.setStatus("mandatory")
_MscLpDS3CellOperTable_Object = MibTable
mscLpDS3CellOperTable = _MscLpDS3CellOperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 11)
)
if mibBuilder.loadTexts:
    mscLpDS3CellOperTable.setStatus("mandatory")
_MscLpDS3CellOperEntry_Object = MibTableRow
mscLpDS3CellOperEntry = _MscLpDS3CellOperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 11, 1)
)
mscLpDS3CellOperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3CellIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3CellOperEntry.setStatus("mandatory")


class _MscLpDS3CellLcdAlarm_Type(Integer32):
    """Custom type mscLpDS3CellLcdAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS3CellLcdAlarm_Type.__name__ = "Integer32"
_MscLpDS3CellLcdAlarm_Object = MibTableColumn
mscLpDS3CellLcdAlarm = _MscLpDS3CellLcdAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 11, 1, 1),
    _MscLpDS3CellLcdAlarm_Type()
)
mscLpDS3CellLcdAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CellLcdAlarm.setStatus("mandatory")
_MscLpDS3CellStatsTable_Object = MibTable
mscLpDS3CellStatsTable = _MscLpDS3CellStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 12)
)
if mibBuilder.loadTexts:
    mscLpDS3CellStatsTable.setStatus("mandatory")
_MscLpDS3CellStatsEntry_Object = MibTableRow
mscLpDS3CellStatsEntry = _MscLpDS3CellStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 12, 1)
)
mscLpDS3CellStatsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3CellIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3CellStatsEntry.setStatus("mandatory")
_MscLpDS3CellUncorrectableHecErrors_Type = Counter32
_MscLpDS3CellUncorrectableHecErrors_Object = MibTableColumn
mscLpDS3CellUncorrectableHecErrors = _MscLpDS3CellUncorrectableHecErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 12, 1, 1),
    _MscLpDS3CellUncorrectableHecErrors_Type()
)
mscLpDS3CellUncorrectableHecErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CellUncorrectableHecErrors.setStatus("mandatory")
_MscLpDS3CellSevErroredSec_Type = Counter32
_MscLpDS3CellSevErroredSec_Object = MibTableColumn
mscLpDS3CellSevErroredSec = _MscLpDS3CellSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 12, 1, 2),
    _MscLpDS3CellSevErroredSec_Type()
)
mscLpDS3CellSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CellSevErroredSec.setStatus("mandatory")


class _MscLpDS3CellReceiveCellUtilization_Type(Gauge32):
    """Custom type mscLpDS3CellReceiveCellUtilization based on Gauge32"""
    defaultValue = 0

    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_MscLpDS3CellReceiveCellUtilization_Type.__name__ = "Gauge32"
_MscLpDS3CellReceiveCellUtilization_Object = MibTableColumn
mscLpDS3CellReceiveCellUtilization = _MscLpDS3CellReceiveCellUtilization_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 12, 1, 3),
    _MscLpDS3CellReceiveCellUtilization_Type()
)
mscLpDS3CellReceiveCellUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CellReceiveCellUtilization.setStatus("mandatory")


class _MscLpDS3CellTransmitCellUtilization_Type(Gauge32):
    """Custom type mscLpDS3CellTransmitCellUtilization based on Gauge32"""
    defaultValue = 0

    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_MscLpDS3CellTransmitCellUtilization_Type.__name__ = "Gauge32"
_MscLpDS3CellTransmitCellUtilization_Object = MibTableColumn
mscLpDS3CellTransmitCellUtilization = _MscLpDS3CellTransmitCellUtilization_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 12, 1, 4),
    _MscLpDS3CellTransmitCellUtilization_Type()
)
mscLpDS3CellTransmitCellUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CellTransmitCellUtilization.setStatus("mandatory")
_MscLpDS3CellCorrectableHeaderErrors_Type = Counter32
_MscLpDS3CellCorrectableHeaderErrors_Object = MibTableColumn
mscLpDS3CellCorrectableHeaderErrors = _MscLpDS3CellCorrectableHeaderErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 5, 12, 1, 5),
    _MscLpDS3CellCorrectableHeaderErrors_Type()
)
mscLpDS3CellCorrectableHeaderErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3CellCorrectableHeaderErrors.setStatus("mandatory")
_MscLpDS3DS1_ObjectIdentity = ObjectIdentity
mscLpDS3DS1 = _MscLpDS3DS1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6)
)
_MscLpDS3DS1RowStatusTable_Object = MibTable
mscLpDS3DS1RowStatusTable = _MscLpDS3DS1RowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 1)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1RowStatusTable.setStatus("mandatory")
_MscLpDS3DS1RowStatusEntry_Object = MibTableRow
mscLpDS3DS1RowStatusEntry = _MscLpDS3DS1RowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 1, 1)
)
mscLpDS3DS1RowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1RowStatusEntry.setStatus("mandatory")
_MscLpDS3DS1RowStatus_Type = RowStatus
_MscLpDS3DS1RowStatus_Object = MibTableColumn
mscLpDS3DS1RowStatus = _MscLpDS3DS1RowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 1, 1, 1),
    _MscLpDS3DS1RowStatus_Type()
)
mscLpDS3DS1RowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1RowStatus.setStatus("mandatory")
_MscLpDS3DS1ComponentName_Type = DisplayString
_MscLpDS3DS1ComponentName_Object = MibTableColumn
mscLpDS3DS1ComponentName = _MscLpDS3DS1ComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 1, 1, 2),
    _MscLpDS3DS1ComponentName_Type()
)
mscLpDS3DS1ComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ComponentName.setStatus("mandatory")
_MscLpDS3DS1StorageType_Type = StorageType
_MscLpDS3DS1StorageType_Object = MibTableColumn
mscLpDS3DS1StorageType = _MscLpDS3DS1StorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 1, 1, 4),
    _MscLpDS3DS1StorageType_Type()
)
mscLpDS3DS1StorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1StorageType.setStatus("mandatory")


class _MscLpDS3DS1Index_Type(Integer32):
    """Custom type mscLpDS3DS1Index based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 28),
    )


_MscLpDS3DS1Index_Type.__name__ = "Integer32"
_MscLpDS3DS1Index_Object = MibTableColumn
mscLpDS3DS1Index = _MscLpDS3DS1Index_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 1, 1, 10),
    _MscLpDS3DS1Index_Type()
)
mscLpDS3DS1Index.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS3DS1Index.setStatus("mandatory")
_MscLpDS3DS1Chan_ObjectIdentity = ObjectIdentity
mscLpDS3DS1Chan = _MscLpDS3DS1Chan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2)
)
_MscLpDS3DS1ChanRowStatusTable_Object = MibTable
mscLpDS3DS1ChanRowStatusTable = _MscLpDS3DS1ChanRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 1)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanRowStatusTable.setStatus("mandatory")
_MscLpDS3DS1ChanRowStatusEntry_Object = MibTableRow
mscLpDS3DS1ChanRowStatusEntry = _MscLpDS3DS1ChanRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 1, 1)
)
mscLpDS3DS1ChanRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanRowStatusEntry.setStatus("mandatory")
_MscLpDS3DS1ChanRowStatus_Type = RowStatus
_MscLpDS3DS1ChanRowStatus_Object = MibTableColumn
mscLpDS3DS1ChanRowStatus = _MscLpDS3DS1ChanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 1, 1, 1),
    _MscLpDS3DS1ChanRowStatus_Type()
)
mscLpDS3DS1ChanRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanRowStatus.setStatus("mandatory")
_MscLpDS3DS1ChanComponentName_Type = DisplayString
_MscLpDS3DS1ChanComponentName_Object = MibTableColumn
mscLpDS3DS1ChanComponentName = _MscLpDS3DS1ChanComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 1, 1, 2),
    _MscLpDS3DS1ChanComponentName_Type()
)
mscLpDS3DS1ChanComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanComponentName.setStatus("mandatory")
_MscLpDS3DS1ChanStorageType_Type = StorageType
_MscLpDS3DS1ChanStorageType_Object = MibTableColumn
mscLpDS3DS1ChanStorageType = _MscLpDS3DS1ChanStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 1, 1, 4),
    _MscLpDS3DS1ChanStorageType_Type()
)
mscLpDS3DS1ChanStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanStorageType.setStatus("mandatory")


class _MscLpDS3DS1ChanIndex_Type(Integer32):
    """Custom type mscLpDS3DS1ChanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_MscLpDS3DS1ChanIndex_Type.__name__ = "Integer32"
_MscLpDS3DS1ChanIndex_Object = MibTableColumn
mscLpDS3DS1ChanIndex = _MscLpDS3DS1ChanIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 1, 1, 10),
    _MscLpDS3DS1ChanIndex_Type()
)
mscLpDS3DS1ChanIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanIndex.setStatus("mandatory")
_MscLpDS3DS1ChanTest_ObjectIdentity = ObjectIdentity
mscLpDS3DS1ChanTest = _MscLpDS3DS1ChanTest_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2)
)
_MscLpDS3DS1ChanTestRowStatusTable_Object = MibTable
mscLpDS3DS1ChanTestRowStatusTable = _MscLpDS3DS1ChanTestRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 1)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestRowStatusTable.setStatus("mandatory")
_MscLpDS3DS1ChanTestRowStatusEntry_Object = MibTableRow
mscLpDS3DS1ChanTestRowStatusEntry = _MscLpDS3DS1ChanTestRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 1, 1)
)
mscLpDS3DS1ChanTestRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestRowStatusEntry.setStatus("mandatory")
_MscLpDS3DS1ChanTestRowStatus_Type = RowStatus
_MscLpDS3DS1ChanTestRowStatus_Object = MibTableColumn
mscLpDS3DS1ChanTestRowStatus = _MscLpDS3DS1ChanTestRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 1, 1, 1),
    _MscLpDS3DS1ChanTestRowStatus_Type()
)
mscLpDS3DS1ChanTestRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestRowStatus.setStatus("mandatory")
_MscLpDS3DS1ChanTestComponentName_Type = DisplayString
_MscLpDS3DS1ChanTestComponentName_Object = MibTableColumn
mscLpDS3DS1ChanTestComponentName = _MscLpDS3DS1ChanTestComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 1, 1, 2),
    _MscLpDS3DS1ChanTestComponentName_Type()
)
mscLpDS3DS1ChanTestComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestComponentName.setStatus("mandatory")
_MscLpDS3DS1ChanTestStorageType_Type = StorageType
_MscLpDS3DS1ChanTestStorageType_Object = MibTableColumn
mscLpDS3DS1ChanTestStorageType = _MscLpDS3DS1ChanTestStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 1, 1, 4),
    _MscLpDS3DS1ChanTestStorageType_Type()
)
mscLpDS3DS1ChanTestStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestStorageType.setStatus("mandatory")
_MscLpDS3DS1ChanTestIndex_Type = NonReplicated
_MscLpDS3DS1ChanTestIndex_Object = MibTableColumn
mscLpDS3DS1ChanTestIndex = _MscLpDS3DS1ChanTestIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 1, 1, 10),
    _MscLpDS3DS1ChanTestIndex_Type()
)
mscLpDS3DS1ChanTestIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestIndex.setStatus("mandatory")
_MscLpDS3DS1ChanTestStateTable_Object = MibTable
mscLpDS3DS1ChanTestStateTable = _MscLpDS3DS1ChanTestStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 10)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestStateTable.setStatus("mandatory")
_MscLpDS3DS1ChanTestStateEntry_Object = MibTableRow
mscLpDS3DS1ChanTestStateEntry = _MscLpDS3DS1ChanTestStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 10, 1)
)
mscLpDS3DS1ChanTestStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestStateEntry.setStatus("mandatory")


class _MscLpDS3DS1ChanTestAdminState_Type(Integer32):
    """Custom type mscLpDS3DS1ChanTestAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpDS3DS1ChanTestAdminState_Type.__name__ = "Integer32"
_MscLpDS3DS1ChanTestAdminState_Object = MibTableColumn
mscLpDS3DS1ChanTestAdminState = _MscLpDS3DS1ChanTestAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 10, 1, 1),
    _MscLpDS3DS1ChanTestAdminState_Type()
)
mscLpDS3DS1ChanTestAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestAdminState.setStatus("mandatory")


class _MscLpDS3DS1ChanTestOperationalState_Type(Integer32):
    """Custom type mscLpDS3DS1ChanTestOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpDS3DS1ChanTestOperationalState_Type.__name__ = "Integer32"
_MscLpDS3DS1ChanTestOperationalState_Object = MibTableColumn
mscLpDS3DS1ChanTestOperationalState = _MscLpDS3DS1ChanTestOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 10, 1, 2),
    _MscLpDS3DS1ChanTestOperationalState_Type()
)
mscLpDS3DS1ChanTestOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestOperationalState.setStatus("mandatory")


class _MscLpDS3DS1ChanTestUsageState_Type(Integer32):
    """Custom type mscLpDS3DS1ChanTestUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpDS3DS1ChanTestUsageState_Type.__name__ = "Integer32"
_MscLpDS3DS1ChanTestUsageState_Object = MibTableColumn
mscLpDS3DS1ChanTestUsageState = _MscLpDS3DS1ChanTestUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 10, 1, 3),
    _MscLpDS3DS1ChanTestUsageState_Type()
)
mscLpDS3DS1ChanTestUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestUsageState.setStatus("mandatory")
_MscLpDS3DS1ChanTestSetupTable_Object = MibTable
mscLpDS3DS1ChanTestSetupTable = _MscLpDS3DS1ChanTestSetupTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 11)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestSetupTable.setStatus("mandatory")
_MscLpDS3DS1ChanTestSetupEntry_Object = MibTableRow
mscLpDS3DS1ChanTestSetupEntry = _MscLpDS3DS1ChanTestSetupEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 11, 1)
)
mscLpDS3DS1ChanTestSetupEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestSetupEntry.setStatus("mandatory")


class _MscLpDS3DS1ChanTestPurpose_Type(AsciiString):
    """Custom type mscLpDS3DS1ChanTestPurpose based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_MscLpDS3DS1ChanTestPurpose_Type.__name__ = "AsciiString"
_MscLpDS3DS1ChanTestPurpose_Object = MibTableColumn
mscLpDS3DS1ChanTestPurpose = _MscLpDS3DS1ChanTestPurpose_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 11, 1, 1),
    _MscLpDS3DS1ChanTestPurpose_Type()
)
mscLpDS3DS1ChanTestPurpose.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestPurpose.setStatus("mandatory")


class _MscLpDS3DS1ChanTestType_Type(Integer32):
    """Custom type mscLpDS3DS1ChanTestType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("card", 0),
          ("externalLoop", 4),
          ("localLoop", 2),
          ("manual", 1),
          ("payloadLoop", 5),
          ("pn127RemoteLoop", 8),
          ("remoteLoop", 3),
          ("remoteLoopThisTrib", 6),
          ("v54RemoteLoop", 7))
    )


_MscLpDS3DS1ChanTestType_Type.__name__ = "Integer32"
_MscLpDS3DS1ChanTestType_Object = MibTableColumn
mscLpDS3DS1ChanTestType = _MscLpDS3DS1ChanTestType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 11, 1, 2),
    _MscLpDS3DS1ChanTestType_Type()
)
mscLpDS3DS1ChanTestType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestType.setStatus("mandatory")


class _MscLpDS3DS1ChanTestFrmSize_Type(Unsigned32):
    """Custom type mscLpDS3DS1ChanTestFrmSize based on Unsigned32"""
    defaultValue = 1024

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 4096),
    )


_MscLpDS3DS1ChanTestFrmSize_Type.__name__ = "Unsigned32"
_MscLpDS3DS1ChanTestFrmSize_Object = MibTableColumn
mscLpDS3DS1ChanTestFrmSize = _MscLpDS3DS1ChanTestFrmSize_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 11, 1, 3),
    _MscLpDS3DS1ChanTestFrmSize_Type()
)
mscLpDS3DS1ChanTestFrmSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestFrmSize.setStatus("mandatory")


class _MscLpDS3DS1ChanTestFrmPatternType_Type(Integer32):
    """Custom type mscLpDS3DS1ChanTestFrmPatternType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ccitt32kBitPattern", 0),
          ("ccitt8MBitPattern", 1),
          ("customizedPattern", 2))
    )


_MscLpDS3DS1ChanTestFrmPatternType_Type.__name__ = "Integer32"
_MscLpDS3DS1ChanTestFrmPatternType_Object = MibTableColumn
mscLpDS3DS1ChanTestFrmPatternType = _MscLpDS3DS1ChanTestFrmPatternType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 11, 1, 4),
    _MscLpDS3DS1ChanTestFrmPatternType_Type()
)
mscLpDS3DS1ChanTestFrmPatternType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestFrmPatternType.setStatus("mandatory")


class _MscLpDS3DS1ChanTestCustomizedPattern_Type(Hex):
    """Custom type mscLpDS3DS1ChanTestCustomizedPattern based on Hex"""
    defaultValue = 1431655765

    subtypeSpec = Hex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpDS3DS1ChanTestCustomizedPattern_Type.__name__ = "Hex"
_MscLpDS3DS1ChanTestCustomizedPattern_Object = MibTableColumn
mscLpDS3DS1ChanTestCustomizedPattern = _MscLpDS3DS1ChanTestCustomizedPattern_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 11, 1, 5),
    _MscLpDS3DS1ChanTestCustomizedPattern_Type()
)
mscLpDS3DS1ChanTestCustomizedPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestCustomizedPattern.setStatus("mandatory")


class _MscLpDS3DS1ChanTestDataStartDelay_Type(Unsigned32):
    """Custom type mscLpDS3DS1ChanTestDataStartDelay based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1814400),
    )


_MscLpDS3DS1ChanTestDataStartDelay_Type.__name__ = "Unsigned32"
_MscLpDS3DS1ChanTestDataStartDelay_Object = MibTableColumn
mscLpDS3DS1ChanTestDataStartDelay = _MscLpDS3DS1ChanTestDataStartDelay_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 11, 1, 6),
    _MscLpDS3DS1ChanTestDataStartDelay_Type()
)
mscLpDS3DS1ChanTestDataStartDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestDataStartDelay.setStatus("mandatory")


class _MscLpDS3DS1ChanTestDisplayInterval_Type(Unsigned32):
    """Custom type mscLpDS3DS1ChanTestDisplayInterval based on Unsigned32"""
    defaultValue = 5

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30240),
    )


_MscLpDS3DS1ChanTestDisplayInterval_Type.__name__ = "Unsigned32"
_MscLpDS3DS1ChanTestDisplayInterval_Object = MibTableColumn
mscLpDS3DS1ChanTestDisplayInterval = _MscLpDS3DS1ChanTestDisplayInterval_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 11, 1, 7),
    _MscLpDS3DS1ChanTestDisplayInterval_Type()
)
mscLpDS3DS1ChanTestDisplayInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestDisplayInterval.setStatus("mandatory")


class _MscLpDS3DS1ChanTestDuration_Type(Unsigned32):
    """Custom type mscLpDS3DS1ChanTestDuration based on Unsigned32"""
    defaultValue = 1

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30240),
    )


_MscLpDS3DS1ChanTestDuration_Type.__name__ = "Unsigned32"
_MscLpDS3DS1ChanTestDuration_Object = MibTableColumn
mscLpDS3DS1ChanTestDuration = _MscLpDS3DS1ChanTestDuration_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 11, 1, 8),
    _MscLpDS3DS1ChanTestDuration_Type()
)
mscLpDS3DS1ChanTestDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestDuration.setStatus("mandatory")
_MscLpDS3DS1ChanTestResultsTable_Object = MibTable
mscLpDS3DS1ChanTestResultsTable = _MscLpDS3DS1ChanTestResultsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestResultsTable.setStatus("mandatory")
_MscLpDS3DS1ChanTestResultsEntry_Object = MibTableRow
mscLpDS3DS1ChanTestResultsEntry = _MscLpDS3DS1ChanTestResultsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1)
)
mscLpDS3DS1ChanTestResultsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestResultsEntry.setStatus("mandatory")
_MscLpDS3DS1ChanTestElapsedTime_Type = Counter32
_MscLpDS3DS1ChanTestElapsedTime_Object = MibTableColumn
mscLpDS3DS1ChanTestElapsedTime = _MscLpDS3DS1ChanTestElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1, 1),
    _MscLpDS3DS1ChanTestElapsedTime_Type()
)
mscLpDS3DS1ChanTestElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestElapsedTime.setStatus("mandatory")


class _MscLpDS3DS1ChanTestTimeRemaining_Type(Unsigned32):
    """Custom type mscLpDS3DS1ChanTestTimeRemaining based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpDS3DS1ChanTestTimeRemaining_Type.__name__ = "Unsigned32"
_MscLpDS3DS1ChanTestTimeRemaining_Object = MibTableColumn
mscLpDS3DS1ChanTestTimeRemaining = _MscLpDS3DS1ChanTestTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1, 2),
    _MscLpDS3DS1ChanTestTimeRemaining_Type()
)
mscLpDS3DS1ChanTestTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestTimeRemaining.setStatus("mandatory")


class _MscLpDS3DS1ChanTestCauseOfTermination_Type(Integer32):
    """Custom type mscLpDS3DS1ChanTestCauseOfTermination based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("hardwareReconfigured", 5),
          ("loopCodeSyncFailed", 6),
          ("neverStarted", 3),
          ("patternSyncFailed", 7),
          ("patternSyncLost", 8),
          ("stoppedByOperator", 1),
          ("testRunning", 4),
          ("testTimeExpired", 0),
          ("unknown", 2))
    )


_MscLpDS3DS1ChanTestCauseOfTermination_Type.__name__ = "Integer32"
_MscLpDS3DS1ChanTestCauseOfTermination_Object = MibTableColumn
mscLpDS3DS1ChanTestCauseOfTermination = _MscLpDS3DS1ChanTestCauseOfTermination_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1, 3),
    _MscLpDS3DS1ChanTestCauseOfTermination_Type()
)
mscLpDS3DS1ChanTestCauseOfTermination.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestCauseOfTermination.setStatus("mandatory")
_MscLpDS3DS1ChanTestBitsTx_Type = PassportCounter64
_MscLpDS3DS1ChanTestBitsTx_Object = MibTableColumn
mscLpDS3DS1ChanTestBitsTx = _MscLpDS3DS1ChanTestBitsTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1, 4),
    _MscLpDS3DS1ChanTestBitsTx_Type()
)
mscLpDS3DS1ChanTestBitsTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestBitsTx.setStatus("mandatory")
_MscLpDS3DS1ChanTestBytesTx_Type = PassportCounter64
_MscLpDS3DS1ChanTestBytesTx_Object = MibTableColumn
mscLpDS3DS1ChanTestBytesTx = _MscLpDS3DS1ChanTestBytesTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1, 5),
    _MscLpDS3DS1ChanTestBytesTx_Type()
)
mscLpDS3DS1ChanTestBytesTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestBytesTx.setStatus("mandatory")
_MscLpDS3DS1ChanTestFrmTx_Type = PassportCounter64
_MscLpDS3DS1ChanTestFrmTx_Object = MibTableColumn
mscLpDS3DS1ChanTestFrmTx = _MscLpDS3DS1ChanTestFrmTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1, 6),
    _MscLpDS3DS1ChanTestFrmTx_Type()
)
mscLpDS3DS1ChanTestFrmTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestFrmTx.setStatus("mandatory")
_MscLpDS3DS1ChanTestBitsRx_Type = PassportCounter64
_MscLpDS3DS1ChanTestBitsRx_Object = MibTableColumn
mscLpDS3DS1ChanTestBitsRx = _MscLpDS3DS1ChanTestBitsRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1, 7),
    _MscLpDS3DS1ChanTestBitsRx_Type()
)
mscLpDS3DS1ChanTestBitsRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestBitsRx.setStatus("mandatory")
_MscLpDS3DS1ChanTestBytesRx_Type = PassportCounter64
_MscLpDS3DS1ChanTestBytesRx_Object = MibTableColumn
mscLpDS3DS1ChanTestBytesRx = _MscLpDS3DS1ChanTestBytesRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1, 8),
    _MscLpDS3DS1ChanTestBytesRx_Type()
)
mscLpDS3DS1ChanTestBytesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestBytesRx.setStatus("mandatory")
_MscLpDS3DS1ChanTestFrmRx_Type = PassportCounter64
_MscLpDS3DS1ChanTestFrmRx_Object = MibTableColumn
mscLpDS3DS1ChanTestFrmRx = _MscLpDS3DS1ChanTestFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1, 9),
    _MscLpDS3DS1ChanTestFrmRx_Type()
)
mscLpDS3DS1ChanTestFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestFrmRx.setStatus("mandatory")
_MscLpDS3DS1ChanTestErroredFrmRx_Type = PassportCounter64
_MscLpDS3DS1ChanTestErroredFrmRx_Object = MibTableColumn
mscLpDS3DS1ChanTestErroredFrmRx = _MscLpDS3DS1ChanTestErroredFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1, 10),
    _MscLpDS3DS1ChanTestErroredFrmRx_Type()
)
mscLpDS3DS1ChanTestErroredFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestErroredFrmRx.setStatus("mandatory")


class _MscLpDS3DS1ChanTestBitErrorRate_Type(AsciiString):
    """Custom type mscLpDS3DS1ChanTestBitErrorRate based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )


_MscLpDS3DS1ChanTestBitErrorRate_Type.__name__ = "AsciiString"
_MscLpDS3DS1ChanTestBitErrorRate_Object = MibTableColumn
mscLpDS3DS1ChanTestBitErrorRate = _MscLpDS3DS1ChanTestBitErrorRate_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 2, 12, 1, 11),
    _MscLpDS3DS1ChanTestBitErrorRate_Type()
)
mscLpDS3DS1ChanTestBitErrorRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTestBitErrorRate.setStatus("mandatory")
_MscLpDS3DS1ChanCell_ObjectIdentity = ObjectIdentity
mscLpDS3DS1ChanCell = _MscLpDS3DS1ChanCell_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3)
)
_MscLpDS3DS1ChanCellRowStatusTable_Object = MibTable
mscLpDS3DS1ChanCellRowStatusTable = _MscLpDS3DS1ChanCellRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 1)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCellRowStatusTable.setStatus("mandatory")
_MscLpDS3DS1ChanCellRowStatusEntry_Object = MibTableRow
mscLpDS3DS1ChanCellRowStatusEntry = _MscLpDS3DS1ChanCellRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 1, 1)
)
mscLpDS3DS1ChanCellRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanCellIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCellRowStatusEntry.setStatus("mandatory")
_MscLpDS3DS1ChanCellRowStatus_Type = RowStatus
_MscLpDS3DS1ChanCellRowStatus_Object = MibTableColumn
mscLpDS3DS1ChanCellRowStatus = _MscLpDS3DS1ChanCellRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 1, 1, 1),
    _MscLpDS3DS1ChanCellRowStatus_Type()
)
mscLpDS3DS1ChanCellRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCellRowStatus.setStatus("mandatory")
_MscLpDS3DS1ChanCellComponentName_Type = DisplayString
_MscLpDS3DS1ChanCellComponentName_Object = MibTableColumn
mscLpDS3DS1ChanCellComponentName = _MscLpDS3DS1ChanCellComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 1, 1, 2),
    _MscLpDS3DS1ChanCellComponentName_Type()
)
mscLpDS3DS1ChanCellComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCellComponentName.setStatus("mandatory")
_MscLpDS3DS1ChanCellStorageType_Type = StorageType
_MscLpDS3DS1ChanCellStorageType_Object = MibTableColumn
mscLpDS3DS1ChanCellStorageType = _MscLpDS3DS1ChanCellStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 1, 1, 4),
    _MscLpDS3DS1ChanCellStorageType_Type()
)
mscLpDS3DS1ChanCellStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCellStorageType.setStatus("mandatory")
_MscLpDS3DS1ChanCellIndex_Type = NonReplicated
_MscLpDS3DS1ChanCellIndex_Object = MibTableColumn
mscLpDS3DS1ChanCellIndex = _MscLpDS3DS1ChanCellIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 1, 1, 10),
    _MscLpDS3DS1ChanCellIndex_Type()
)
mscLpDS3DS1ChanCellIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCellIndex.setStatus("mandatory")
_MscLpDS3DS1ChanCellProvTable_Object = MibTable
mscLpDS3DS1ChanCellProvTable = _MscLpDS3DS1ChanCellProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 10)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCellProvTable.setStatus("mandatory")
_MscLpDS3DS1ChanCellProvEntry_Object = MibTableRow
mscLpDS3DS1ChanCellProvEntry = _MscLpDS3DS1ChanCellProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 10, 1)
)
mscLpDS3DS1ChanCellProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanCellIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCellProvEntry.setStatus("mandatory")


class _MscLpDS3DS1ChanCellAlarmActDelay_Type(Unsigned32):
    """Custom type mscLpDS3DS1ChanCellAlarmActDelay based on Unsigned32"""
    defaultValue = 500

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2000),
    )


_MscLpDS3DS1ChanCellAlarmActDelay_Type.__name__ = "Unsigned32"
_MscLpDS3DS1ChanCellAlarmActDelay_Object = MibTableColumn
mscLpDS3DS1ChanCellAlarmActDelay = _MscLpDS3DS1ChanCellAlarmActDelay_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 10, 1, 1),
    _MscLpDS3DS1ChanCellAlarmActDelay_Type()
)
mscLpDS3DS1ChanCellAlarmActDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCellAlarmActDelay.setStatus("mandatory")


class _MscLpDS3DS1ChanCellScrambleCellPayload_Type(Integer32):
    """Custom type mscLpDS3DS1ChanCellScrambleCellPayload based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpDS3DS1ChanCellScrambleCellPayload_Type.__name__ = "Integer32"
_MscLpDS3DS1ChanCellScrambleCellPayload_Object = MibTableColumn
mscLpDS3DS1ChanCellScrambleCellPayload = _MscLpDS3DS1ChanCellScrambleCellPayload_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 10, 1, 2),
    _MscLpDS3DS1ChanCellScrambleCellPayload_Type()
)
mscLpDS3DS1ChanCellScrambleCellPayload.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCellScrambleCellPayload.setStatus("mandatory")


class _MscLpDS3DS1ChanCellCorrectSingleBitHeaderErrors_Type(Integer32):
    """Custom type mscLpDS3DS1ChanCellCorrectSingleBitHeaderErrors based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpDS3DS1ChanCellCorrectSingleBitHeaderErrors_Type.__name__ = "Integer32"
_MscLpDS3DS1ChanCellCorrectSingleBitHeaderErrors_Object = MibTableColumn
mscLpDS3DS1ChanCellCorrectSingleBitHeaderErrors = _MscLpDS3DS1ChanCellCorrectSingleBitHeaderErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 10, 1, 3),
    _MscLpDS3DS1ChanCellCorrectSingleBitHeaderErrors_Type()
)
mscLpDS3DS1ChanCellCorrectSingleBitHeaderErrors.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCellCorrectSingleBitHeaderErrors.setStatus("mandatory")
_MscLpDS3DS1ChanCellOperTable_Object = MibTable
mscLpDS3DS1ChanCellOperTable = _MscLpDS3DS1ChanCellOperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 11)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCellOperTable.setStatus("mandatory")
_MscLpDS3DS1ChanCellOperEntry_Object = MibTableRow
mscLpDS3DS1ChanCellOperEntry = _MscLpDS3DS1ChanCellOperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 11, 1)
)
mscLpDS3DS1ChanCellOperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanCellIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCellOperEntry.setStatus("mandatory")


class _MscLpDS3DS1ChanCellLcdAlarm_Type(Integer32):
    """Custom type mscLpDS3DS1ChanCellLcdAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS3DS1ChanCellLcdAlarm_Type.__name__ = "Integer32"
_MscLpDS3DS1ChanCellLcdAlarm_Object = MibTableColumn
mscLpDS3DS1ChanCellLcdAlarm = _MscLpDS3DS1ChanCellLcdAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 11, 1, 1),
    _MscLpDS3DS1ChanCellLcdAlarm_Type()
)
mscLpDS3DS1ChanCellLcdAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCellLcdAlarm.setStatus("mandatory")
_MscLpDS3DS1ChanCellStatsTable_Object = MibTable
mscLpDS3DS1ChanCellStatsTable = _MscLpDS3DS1ChanCellStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 12)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCellStatsTable.setStatus("mandatory")
_MscLpDS3DS1ChanCellStatsEntry_Object = MibTableRow
mscLpDS3DS1ChanCellStatsEntry = _MscLpDS3DS1ChanCellStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 12, 1)
)
mscLpDS3DS1ChanCellStatsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanCellIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCellStatsEntry.setStatus("mandatory")
_MscLpDS3DS1ChanCellUncorrectableHecErrors_Type = Counter32
_MscLpDS3DS1ChanCellUncorrectableHecErrors_Object = MibTableColumn
mscLpDS3DS1ChanCellUncorrectableHecErrors = _MscLpDS3DS1ChanCellUncorrectableHecErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 12, 1, 1),
    _MscLpDS3DS1ChanCellUncorrectableHecErrors_Type()
)
mscLpDS3DS1ChanCellUncorrectableHecErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCellUncorrectableHecErrors.setStatus("mandatory")
_MscLpDS3DS1ChanCellSevErroredSec_Type = Counter32
_MscLpDS3DS1ChanCellSevErroredSec_Object = MibTableColumn
mscLpDS3DS1ChanCellSevErroredSec = _MscLpDS3DS1ChanCellSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 12, 1, 2),
    _MscLpDS3DS1ChanCellSevErroredSec_Type()
)
mscLpDS3DS1ChanCellSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCellSevErroredSec.setStatus("mandatory")


class _MscLpDS3DS1ChanCellReceiveCellUtilization_Type(Gauge32):
    """Custom type mscLpDS3DS1ChanCellReceiveCellUtilization based on Gauge32"""
    defaultValue = 0

    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_MscLpDS3DS1ChanCellReceiveCellUtilization_Type.__name__ = "Gauge32"
_MscLpDS3DS1ChanCellReceiveCellUtilization_Object = MibTableColumn
mscLpDS3DS1ChanCellReceiveCellUtilization = _MscLpDS3DS1ChanCellReceiveCellUtilization_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 12, 1, 3),
    _MscLpDS3DS1ChanCellReceiveCellUtilization_Type()
)
mscLpDS3DS1ChanCellReceiveCellUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCellReceiveCellUtilization.setStatus("mandatory")


class _MscLpDS3DS1ChanCellTransmitCellUtilization_Type(Gauge32):
    """Custom type mscLpDS3DS1ChanCellTransmitCellUtilization based on Gauge32"""
    defaultValue = 0

    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_MscLpDS3DS1ChanCellTransmitCellUtilization_Type.__name__ = "Gauge32"
_MscLpDS3DS1ChanCellTransmitCellUtilization_Object = MibTableColumn
mscLpDS3DS1ChanCellTransmitCellUtilization = _MscLpDS3DS1ChanCellTransmitCellUtilization_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 12, 1, 4),
    _MscLpDS3DS1ChanCellTransmitCellUtilization_Type()
)
mscLpDS3DS1ChanCellTransmitCellUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCellTransmitCellUtilization.setStatus("mandatory")
_MscLpDS3DS1ChanCellCorrectableHeaderErrors_Type = Counter32
_MscLpDS3DS1ChanCellCorrectableHeaderErrors_Object = MibTableColumn
mscLpDS3DS1ChanCellCorrectableHeaderErrors = _MscLpDS3DS1ChanCellCorrectableHeaderErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 3, 12, 1, 5),
    _MscLpDS3DS1ChanCellCorrectableHeaderErrors_Type()
)
mscLpDS3DS1ChanCellCorrectableHeaderErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCellCorrectableHeaderErrors.setStatus("mandatory")
_MscLpDS3DS1ChanTc_ObjectIdentity = ObjectIdentity
mscLpDS3DS1ChanTc = _MscLpDS3DS1ChanTc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4)
)
_MscLpDS3DS1ChanTcRowStatusTable_Object = MibTable
mscLpDS3DS1ChanTcRowStatusTable = _MscLpDS3DS1ChanTcRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 1)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTcRowStatusTable.setStatus("mandatory")
_MscLpDS3DS1ChanTcRowStatusEntry_Object = MibTableRow
mscLpDS3DS1ChanTcRowStatusEntry = _MscLpDS3DS1ChanTcRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 1, 1)
)
mscLpDS3DS1ChanTcRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanTcIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTcRowStatusEntry.setStatus("mandatory")
_MscLpDS3DS1ChanTcRowStatus_Type = RowStatus
_MscLpDS3DS1ChanTcRowStatus_Object = MibTableColumn
mscLpDS3DS1ChanTcRowStatus = _MscLpDS3DS1ChanTcRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 1, 1, 1),
    _MscLpDS3DS1ChanTcRowStatus_Type()
)
mscLpDS3DS1ChanTcRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTcRowStatus.setStatus("mandatory")
_MscLpDS3DS1ChanTcComponentName_Type = DisplayString
_MscLpDS3DS1ChanTcComponentName_Object = MibTableColumn
mscLpDS3DS1ChanTcComponentName = _MscLpDS3DS1ChanTcComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 1, 1, 2),
    _MscLpDS3DS1ChanTcComponentName_Type()
)
mscLpDS3DS1ChanTcComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTcComponentName.setStatus("mandatory")
_MscLpDS3DS1ChanTcStorageType_Type = StorageType
_MscLpDS3DS1ChanTcStorageType_Object = MibTableColumn
mscLpDS3DS1ChanTcStorageType = _MscLpDS3DS1ChanTcStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 1, 1, 4),
    _MscLpDS3DS1ChanTcStorageType_Type()
)
mscLpDS3DS1ChanTcStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTcStorageType.setStatus("mandatory")
_MscLpDS3DS1ChanTcIndex_Type = NonReplicated
_MscLpDS3DS1ChanTcIndex_Object = MibTableColumn
mscLpDS3DS1ChanTcIndex = _MscLpDS3DS1ChanTcIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 1, 1, 10),
    _MscLpDS3DS1ChanTcIndex_Type()
)
mscLpDS3DS1ChanTcIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTcIndex.setStatus("mandatory")
_MscLpDS3DS1ChanTcProvTable_Object = MibTable
mscLpDS3DS1ChanTcProvTable = _MscLpDS3DS1ChanTcProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 10)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTcProvTable.setStatus("mandatory")
_MscLpDS3DS1ChanTcProvEntry_Object = MibTableRow
mscLpDS3DS1ChanTcProvEntry = _MscLpDS3DS1ChanTcProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 10, 1)
)
mscLpDS3DS1ChanTcProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanTcIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTcProvEntry.setStatus("mandatory")


class _MscLpDS3DS1ChanTcReplacementData_Type(Hex):
    """Custom type mscLpDS3DS1ChanTcReplacementData based on Hex"""
    defaultValue = 255

    subtypeSpec = Hex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_MscLpDS3DS1ChanTcReplacementData_Type.__name__ = "Hex"
_MscLpDS3DS1ChanTcReplacementData_Object = MibTableColumn
mscLpDS3DS1ChanTcReplacementData = _MscLpDS3DS1ChanTcReplacementData_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 10, 1, 1),
    _MscLpDS3DS1ChanTcReplacementData_Type()
)
mscLpDS3DS1ChanTcReplacementData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTcReplacementData.setStatus("mandatory")


class _MscLpDS3DS1ChanTcSignalOneDuration_Type(Unsigned32):
    """Custom type mscLpDS3DS1ChanTcSignalOneDuration based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 60),
    )


_MscLpDS3DS1ChanTcSignalOneDuration_Type.__name__ = "Unsigned32"
_MscLpDS3DS1ChanTcSignalOneDuration_Object = MibTableColumn
mscLpDS3DS1ChanTcSignalOneDuration = _MscLpDS3DS1ChanTcSignalOneDuration_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 10, 1, 2),
    _MscLpDS3DS1ChanTcSignalOneDuration_Type()
)
mscLpDS3DS1ChanTcSignalOneDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTcSignalOneDuration.setStatus("mandatory")
_MscLpDS3DS1ChanTcOpTable_Object = MibTable
mscLpDS3DS1ChanTcOpTable = _MscLpDS3DS1ChanTcOpTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 11)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTcOpTable.setStatus("mandatory")
_MscLpDS3DS1ChanTcOpEntry_Object = MibTableRow
mscLpDS3DS1ChanTcOpEntry = _MscLpDS3DS1ChanTcOpEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 11, 1)
)
mscLpDS3DS1ChanTcOpEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanTcIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTcOpEntry.setStatus("mandatory")


class _MscLpDS3DS1ChanTcIngressConditioning_Type(Integer32):
    """Custom type mscLpDS3DS1ChanTcIngressConditioning based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpDS3DS1ChanTcIngressConditioning_Type.__name__ = "Integer32"
_MscLpDS3DS1ChanTcIngressConditioning_Object = MibTableColumn
mscLpDS3DS1ChanTcIngressConditioning = _MscLpDS3DS1ChanTcIngressConditioning_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 11, 1, 1),
    _MscLpDS3DS1ChanTcIngressConditioning_Type()
)
mscLpDS3DS1ChanTcIngressConditioning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTcIngressConditioning.setStatus("mandatory")


class _MscLpDS3DS1ChanTcEgressConditioning_Type(Integer32):
    """Custom type mscLpDS3DS1ChanTcEgressConditioning based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpDS3DS1ChanTcEgressConditioning_Type.__name__ = "Integer32"
_MscLpDS3DS1ChanTcEgressConditioning_Object = MibTableColumn
mscLpDS3DS1ChanTcEgressConditioning = _MscLpDS3DS1ChanTcEgressConditioning_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 11, 1, 2),
    _MscLpDS3DS1ChanTcEgressConditioning_Type()
)
mscLpDS3DS1ChanTcEgressConditioning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTcEgressConditioning.setStatus("mandatory")
_MscLpDS3DS1ChanTcSigOneTable_Object = MibTable
mscLpDS3DS1ChanTcSigOneTable = _MscLpDS3DS1ChanTcSigOneTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 398)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTcSigOneTable.setStatus("mandatory")
_MscLpDS3DS1ChanTcSigOneEntry_Object = MibTableRow
mscLpDS3DS1ChanTcSigOneEntry = _MscLpDS3DS1ChanTcSigOneEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 398, 1)
)
mscLpDS3DS1ChanTcSigOneEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanTcIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanTcSigOneIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTcSigOneEntry.setStatus("mandatory")


class _MscLpDS3DS1ChanTcSigOneIndex_Type(Integer32):
    """Custom type mscLpDS3DS1ChanTcSigOneIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("a", 3),
          ("b", 2),
          ("c", 1),
          ("d", 0))
    )


_MscLpDS3DS1ChanTcSigOneIndex_Type.__name__ = "Integer32"
_MscLpDS3DS1ChanTcSigOneIndex_Object = MibTableColumn
mscLpDS3DS1ChanTcSigOneIndex = _MscLpDS3DS1ChanTcSigOneIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 398, 1, 1),
    _MscLpDS3DS1ChanTcSigOneIndex_Type()
)
mscLpDS3DS1ChanTcSigOneIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTcSigOneIndex.setStatus("mandatory")


class _MscLpDS3DS1ChanTcSigOneValue_Type(Unsigned32):
    """Custom type mscLpDS3DS1ChanTcSigOneValue based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_MscLpDS3DS1ChanTcSigOneValue_Type.__name__ = "Unsigned32"
_MscLpDS3DS1ChanTcSigOneValue_Object = MibTableColumn
mscLpDS3DS1ChanTcSigOneValue = _MscLpDS3DS1ChanTcSigOneValue_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 398, 1, 2),
    _MscLpDS3DS1ChanTcSigOneValue_Type()
)
mscLpDS3DS1ChanTcSigOneValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTcSigOneValue.setStatus("mandatory")
_MscLpDS3DS1ChanTcSigTwoTable_Object = MibTable
mscLpDS3DS1ChanTcSigTwoTable = _MscLpDS3DS1ChanTcSigTwoTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 399)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTcSigTwoTable.setStatus("mandatory")
_MscLpDS3DS1ChanTcSigTwoEntry_Object = MibTableRow
mscLpDS3DS1ChanTcSigTwoEntry = _MscLpDS3DS1ChanTcSigTwoEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 399, 1)
)
mscLpDS3DS1ChanTcSigTwoEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanTcIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanTcSigTwoIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTcSigTwoEntry.setStatus("mandatory")


class _MscLpDS3DS1ChanTcSigTwoIndex_Type(Integer32):
    """Custom type mscLpDS3DS1ChanTcSigTwoIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("a", 3),
          ("b", 2),
          ("c", 1),
          ("d", 0))
    )


_MscLpDS3DS1ChanTcSigTwoIndex_Type.__name__ = "Integer32"
_MscLpDS3DS1ChanTcSigTwoIndex_Object = MibTableColumn
mscLpDS3DS1ChanTcSigTwoIndex = _MscLpDS3DS1ChanTcSigTwoIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 399, 1, 1),
    _MscLpDS3DS1ChanTcSigTwoIndex_Type()
)
mscLpDS3DS1ChanTcSigTwoIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTcSigTwoIndex.setStatus("mandatory")


class _MscLpDS3DS1ChanTcSigTwoValue_Type(Unsigned32):
    """Custom type mscLpDS3DS1ChanTcSigTwoValue based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_MscLpDS3DS1ChanTcSigTwoValue_Type.__name__ = "Unsigned32"
_MscLpDS3DS1ChanTcSigTwoValue_Object = MibTableColumn
mscLpDS3DS1ChanTcSigTwoValue = _MscLpDS3DS1ChanTcSigTwoValue_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 4, 399, 1, 2),
    _MscLpDS3DS1ChanTcSigTwoValue_Type()
)
mscLpDS3DS1ChanTcSigTwoValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTcSigTwoValue.setStatus("mandatory")
_MscLpDS3DS1ChanProvTable_Object = MibTable
mscLpDS3DS1ChanProvTable = _MscLpDS3DS1ChanProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 10)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanProvTable.setStatus("mandatory")
_MscLpDS3DS1ChanProvEntry_Object = MibTableRow
mscLpDS3DS1ChanProvEntry = _MscLpDS3DS1ChanProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 10, 1)
)
mscLpDS3DS1ChanProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanProvEntry.setStatus("mandatory")


class _MscLpDS3DS1ChanTimeslots_Type(OctetString):
    """Custom type mscLpDS3DS1ChanTimeslots based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_MscLpDS3DS1ChanTimeslots_Type.__name__ = "OctetString"
_MscLpDS3DS1ChanTimeslots_Object = MibTableColumn
mscLpDS3DS1ChanTimeslots = _MscLpDS3DS1ChanTimeslots_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 10, 1, 1),
    _MscLpDS3DS1ChanTimeslots_Type()
)
mscLpDS3DS1ChanTimeslots.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTimeslots.setStatus("mandatory")


class _MscLpDS3DS1ChanTimeslotDataRate_Type(Integer32):
    """Custom type mscLpDS3DS1ChanTimeslotDataRate based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("doNotOverride", 1),
          ("n56k", 0))
    )


_MscLpDS3DS1ChanTimeslotDataRate_Type.__name__ = "Integer32"
_MscLpDS3DS1ChanTimeslotDataRate_Object = MibTableColumn
mscLpDS3DS1ChanTimeslotDataRate = _MscLpDS3DS1ChanTimeslotDataRate_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 10, 1, 2),
    _MscLpDS3DS1ChanTimeslotDataRate_Type()
)
mscLpDS3DS1ChanTimeslotDataRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanTimeslotDataRate.setStatus("mandatory")
_MscLpDS3DS1ChanApplicationFramerName_Type = Link
_MscLpDS3DS1ChanApplicationFramerName_Object = MibTableColumn
mscLpDS3DS1ChanApplicationFramerName = _MscLpDS3DS1ChanApplicationFramerName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 10, 1, 3),
    _MscLpDS3DS1ChanApplicationFramerName_Type()
)
mscLpDS3DS1ChanApplicationFramerName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanApplicationFramerName.setStatus("mandatory")
_MscLpDS3DS1ChanCidDataTable_Object = MibTable
mscLpDS3DS1ChanCidDataTable = _MscLpDS3DS1ChanCidDataTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 11)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCidDataTable.setStatus("mandatory")
_MscLpDS3DS1ChanCidDataEntry_Object = MibTableRow
mscLpDS3DS1ChanCidDataEntry = _MscLpDS3DS1ChanCidDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 11, 1)
)
mscLpDS3DS1ChanCidDataEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCidDataEntry.setStatus("mandatory")


class _MscLpDS3DS1ChanCustomerIdentifier_Type(Unsigned32):
    """Custom type mscLpDS3DS1ChanCustomerIdentifier based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 8191),
    )


_MscLpDS3DS1ChanCustomerIdentifier_Type.__name__ = "Unsigned32"
_MscLpDS3DS1ChanCustomerIdentifier_Object = MibTableColumn
mscLpDS3DS1ChanCustomerIdentifier = _MscLpDS3DS1ChanCustomerIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 11, 1, 1),
    _MscLpDS3DS1ChanCustomerIdentifier_Type()
)
mscLpDS3DS1ChanCustomerIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCustomerIdentifier.setStatus("mandatory")
_MscLpDS3DS1ChanIfEntryTable_Object = MibTable
mscLpDS3DS1ChanIfEntryTable = _MscLpDS3DS1ChanIfEntryTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 12)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanIfEntryTable.setStatus("mandatory")
_MscLpDS3DS1ChanIfEntryEntry_Object = MibTableRow
mscLpDS3DS1ChanIfEntryEntry = _MscLpDS3DS1ChanIfEntryEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 12, 1)
)
mscLpDS3DS1ChanIfEntryEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanIfEntryEntry.setStatus("mandatory")


class _MscLpDS3DS1ChanIfAdminStatus_Type(Integer32):
    """Custom type mscLpDS3DS1ChanIfAdminStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpDS3DS1ChanIfAdminStatus_Type.__name__ = "Integer32"
_MscLpDS3DS1ChanIfAdminStatus_Object = MibTableColumn
mscLpDS3DS1ChanIfAdminStatus = _MscLpDS3DS1ChanIfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 12, 1, 1),
    _MscLpDS3DS1ChanIfAdminStatus_Type()
)
mscLpDS3DS1ChanIfAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanIfAdminStatus.setStatus("mandatory")


class _MscLpDS3DS1ChanIfIndex_Type(InterfaceIndex):
    """Custom type mscLpDS3DS1ChanIfIndex based on InterfaceIndex"""
    subtypeSpec = InterfaceIndex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_MscLpDS3DS1ChanIfIndex_Type.__name__ = "InterfaceIndex"
_MscLpDS3DS1ChanIfIndex_Object = MibTableColumn
mscLpDS3DS1ChanIfIndex = _MscLpDS3DS1ChanIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 12, 1, 2),
    _MscLpDS3DS1ChanIfIndex_Type()
)
mscLpDS3DS1ChanIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanIfIndex.setStatus("mandatory")
_MscLpDS3DS1ChanOperStatusTable_Object = MibTable
mscLpDS3DS1ChanOperStatusTable = _MscLpDS3DS1ChanOperStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 13)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanOperStatusTable.setStatus("mandatory")
_MscLpDS3DS1ChanOperStatusEntry_Object = MibTableRow
mscLpDS3DS1ChanOperStatusEntry = _MscLpDS3DS1ChanOperStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 13, 1)
)
mscLpDS3DS1ChanOperStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanOperStatusEntry.setStatus("mandatory")


class _MscLpDS3DS1ChanSnmpOperStatus_Type(Integer32):
    """Custom type mscLpDS3DS1ChanSnmpOperStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpDS3DS1ChanSnmpOperStatus_Type.__name__ = "Integer32"
_MscLpDS3DS1ChanSnmpOperStatus_Object = MibTableColumn
mscLpDS3DS1ChanSnmpOperStatus = _MscLpDS3DS1ChanSnmpOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 13, 1, 1),
    _MscLpDS3DS1ChanSnmpOperStatus_Type()
)
mscLpDS3DS1ChanSnmpOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanSnmpOperStatus.setStatus("mandatory")
_MscLpDS3DS1ChanStateTable_Object = MibTable
mscLpDS3DS1ChanStateTable = _MscLpDS3DS1ChanStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 14)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanStateTable.setStatus("mandatory")
_MscLpDS3DS1ChanStateEntry_Object = MibTableRow
mscLpDS3DS1ChanStateEntry = _MscLpDS3DS1ChanStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 14, 1)
)
mscLpDS3DS1ChanStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanStateEntry.setStatus("mandatory")


class _MscLpDS3DS1ChanAdminState_Type(Integer32):
    """Custom type mscLpDS3DS1ChanAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpDS3DS1ChanAdminState_Type.__name__ = "Integer32"
_MscLpDS3DS1ChanAdminState_Object = MibTableColumn
mscLpDS3DS1ChanAdminState = _MscLpDS3DS1ChanAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 14, 1, 1),
    _MscLpDS3DS1ChanAdminState_Type()
)
mscLpDS3DS1ChanAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanAdminState.setStatus("mandatory")


class _MscLpDS3DS1ChanOperationalState_Type(Integer32):
    """Custom type mscLpDS3DS1ChanOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpDS3DS1ChanOperationalState_Type.__name__ = "Integer32"
_MscLpDS3DS1ChanOperationalState_Object = MibTableColumn
mscLpDS3DS1ChanOperationalState = _MscLpDS3DS1ChanOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 14, 1, 2),
    _MscLpDS3DS1ChanOperationalState_Type()
)
mscLpDS3DS1ChanOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanOperationalState.setStatus("mandatory")


class _MscLpDS3DS1ChanUsageState_Type(Integer32):
    """Custom type mscLpDS3DS1ChanUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpDS3DS1ChanUsageState_Type.__name__ = "Integer32"
_MscLpDS3DS1ChanUsageState_Object = MibTableColumn
mscLpDS3DS1ChanUsageState = _MscLpDS3DS1ChanUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 14, 1, 3),
    _MscLpDS3DS1ChanUsageState_Type()
)
mscLpDS3DS1ChanUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanUsageState.setStatus("mandatory")


class _MscLpDS3DS1ChanAvailabilityStatus_Type(OctetString):
    """Custom type mscLpDS3DS1ChanAvailabilityStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_MscLpDS3DS1ChanAvailabilityStatus_Type.__name__ = "OctetString"
_MscLpDS3DS1ChanAvailabilityStatus_Object = MibTableColumn
mscLpDS3DS1ChanAvailabilityStatus = _MscLpDS3DS1ChanAvailabilityStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 14, 1, 4),
    _MscLpDS3DS1ChanAvailabilityStatus_Type()
)
mscLpDS3DS1ChanAvailabilityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanAvailabilityStatus.setStatus("mandatory")


class _MscLpDS3DS1ChanProceduralStatus_Type(OctetString):
    """Custom type mscLpDS3DS1ChanProceduralStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpDS3DS1ChanProceduralStatus_Type.__name__ = "OctetString"
_MscLpDS3DS1ChanProceduralStatus_Object = MibTableColumn
mscLpDS3DS1ChanProceduralStatus = _MscLpDS3DS1ChanProceduralStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 14, 1, 5),
    _MscLpDS3DS1ChanProceduralStatus_Type()
)
mscLpDS3DS1ChanProceduralStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanProceduralStatus.setStatus("mandatory")


class _MscLpDS3DS1ChanControlStatus_Type(OctetString):
    """Custom type mscLpDS3DS1ChanControlStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpDS3DS1ChanControlStatus_Type.__name__ = "OctetString"
_MscLpDS3DS1ChanControlStatus_Object = MibTableColumn
mscLpDS3DS1ChanControlStatus = _MscLpDS3DS1ChanControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 14, 1, 6),
    _MscLpDS3DS1ChanControlStatus_Type()
)
mscLpDS3DS1ChanControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanControlStatus.setStatus("mandatory")


class _MscLpDS3DS1ChanAlarmStatus_Type(OctetString):
    """Custom type mscLpDS3DS1ChanAlarmStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpDS3DS1ChanAlarmStatus_Type.__name__ = "OctetString"
_MscLpDS3DS1ChanAlarmStatus_Object = MibTableColumn
mscLpDS3DS1ChanAlarmStatus = _MscLpDS3DS1ChanAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 14, 1, 7),
    _MscLpDS3DS1ChanAlarmStatus_Type()
)
mscLpDS3DS1ChanAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanAlarmStatus.setStatus("mandatory")


class _MscLpDS3DS1ChanStandbyStatus_Type(Integer32):
    """Custom type mscLpDS3DS1ChanStandbyStatus based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              15)
        )
    )
    namedValues = NamedValues(
        *(("coldStandby", 1),
          ("hotStandby", 0),
          ("notSet", 15),
          ("providingService", 2))
    )


_MscLpDS3DS1ChanStandbyStatus_Type.__name__ = "Integer32"
_MscLpDS3DS1ChanStandbyStatus_Object = MibTableColumn
mscLpDS3DS1ChanStandbyStatus = _MscLpDS3DS1ChanStandbyStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 14, 1, 8),
    _MscLpDS3DS1ChanStandbyStatus_Type()
)
mscLpDS3DS1ChanStandbyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanStandbyStatus.setStatus("mandatory")


class _MscLpDS3DS1ChanUnknownStatus_Type(Integer32):
    """Custom type mscLpDS3DS1ChanUnknownStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_MscLpDS3DS1ChanUnknownStatus_Type.__name__ = "Integer32"
_MscLpDS3DS1ChanUnknownStatus_Object = MibTableColumn
mscLpDS3DS1ChanUnknownStatus = _MscLpDS3DS1ChanUnknownStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 14, 1, 9),
    _MscLpDS3DS1ChanUnknownStatus_Type()
)
mscLpDS3DS1ChanUnknownStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanUnknownStatus.setStatus("mandatory")
_MscLpDS3DS1ChanOperTable_Object = MibTable
mscLpDS3DS1ChanOperTable = _MscLpDS3DS1ChanOperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 15)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanOperTable.setStatus("mandatory")
_MscLpDS3DS1ChanOperEntry_Object = MibTableRow
mscLpDS3DS1ChanOperEntry = _MscLpDS3DS1ChanOperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 15, 1)
)
mscLpDS3DS1ChanOperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanOperEntry.setStatus("mandatory")


class _MscLpDS3DS1ChanActualChannelSpeed_Type(Gauge32):
    """Custom type mscLpDS3DS1ChanActualChannelSpeed based on Gauge32"""
    defaultValue = 0

    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpDS3DS1ChanActualChannelSpeed_Type.__name__ = "Gauge32"
_MscLpDS3DS1ChanActualChannelSpeed_Object = MibTableColumn
mscLpDS3DS1ChanActualChannelSpeed = _MscLpDS3DS1ChanActualChannelSpeed_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 15, 1, 1),
    _MscLpDS3DS1ChanActualChannelSpeed_Type()
)
mscLpDS3DS1ChanActualChannelSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanActualChannelSpeed.setStatus("mandatory")
_MscLpDS3DS1ChanAdminInfoTable_Object = MibTable
mscLpDS3DS1ChanAdminInfoTable = _MscLpDS3DS1ChanAdminInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 16)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanAdminInfoTable.setStatus("mandatory")
_MscLpDS3DS1ChanAdminInfoEntry_Object = MibTableRow
mscLpDS3DS1ChanAdminInfoEntry = _MscLpDS3DS1ChanAdminInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 16, 1)
)
mscLpDS3DS1ChanAdminInfoEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanAdminInfoEntry.setStatus("mandatory")


class _MscLpDS3DS1ChanVendor_Type(AsciiString):
    """Custom type mscLpDS3DS1ChanVendor based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_MscLpDS3DS1ChanVendor_Type.__name__ = "AsciiString"
_MscLpDS3DS1ChanVendor_Object = MibTableColumn
mscLpDS3DS1ChanVendor = _MscLpDS3DS1ChanVendor_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 16, 1, 1),
    _MscLpDS3DS1ChanVendor_Type()
)
mscLpDS3DS1ChanVendor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanVendor.setStatus("mandatory")


class _MscLpDS3DS1ChanCommentText_Type(AsciiString):
    """Custom type mscLpDS3DS1ChanCommentText based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 60),
    )


_MscLpDS3DS1ChanCommentText_Type.__name__ = "AsciiString"
_MscLpDS3DS1ChanCommentText_Object = MibTableColumn
mscLpDS3DS1ChanCommentText = _MscLpDS3DS1ChanCommentText_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 2, 16, 1, 2),
    _MscLpDS3DS1ChanCommentText_Type()
)
mscLpDS3DS1ChanCommentText.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ChanCommentText.setStatus("mandatory")
_MscLpDS3DS1Test_ObjectIdentity = ObjectIdentity
mscLpDS3DS1Test = _MscLpDS3DS1Test_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3)
)
_MscLpDS3DS1TestRowStatusTable_Object = MibTable
mscLpDS3DS1TestRowStatusTable = _MscLpDS3DS1TestRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 1)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1TestRowStatusTable.setStatus("mandatory")
_MscLpDS3DS1TestRowStatusEntry_Object = MibTableRow
mscLpDS3DS1TestRowStatusEntry = _MscLpDS3DS1TestRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 1, 1)
)
mscLpDS3DS1TestRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1TestRowStatusEntry.setStatus("mandatory")
_MscLpDS3DS1TestRowStatus_Type = RowStatus
_MscLpDS3DS1TestRowStatus_Object = MibTableColumn
mscLpDS3DS1TestRowStatus = _MscLpDS3DS1TestRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 1, 1, 1),
    _MscLpDS3DS1TestRowStatus_Type()
)
mscLpDS3DS1TestRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestRowStatus.setStatus("mandatory")
_MscLpDS3DS1TestComponentName_Type = DisplayString
_MscLpDS3DS1TestComponentName_Object = MibTableColumn
mscLpDS3DS1TestComponentName = _MscLpDS3DS1TestComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 1, 1, 2),
    _MscLpDS3DS1TestComponentName_Type()
)
mscLpDS3DS1TestComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestComponentName.setStatus("mandatory")
_MscLpDS3DS1TestStorageType_Type = StorageType
_MscLpDS3DS1TestStorageType_Object = MibTableColumn
mscLpDS3DS1TestStorageType = _MscLpDS3DS1TestStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 1, 1, 4),
    _MscLpDS3DS1TestStorageType_Type()
)
mscLpDS3DS1TestStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestStorageType.setStatus("mandatory")
_MscLpDS3DS1TestIndex_Type = NonReplicated
_MscLpDS3DS1TestIndex_Object = MibTableColumn
mscLpDS3DS1TestIndex = _MscLpDS3DS1TestIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 1, 1, 10),
    _MscLpDS3DS1TestIndex_Type()
)
mscLpDS3DS1TestIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestIndex.setStatus("mandatory")
_MscLpDS3DS1TestStateTable_Object = MibTable
mscLpDS3DS1TestStateTable = _MscLpDS3DS1TestStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 10)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1TestStateTable.setStatus("mandatory")
_MscLpDS3DS1TestStateEntry_Object = MibTableRow
mscLpDS3DS1TestStateEntry = _MscLpDS3DS1TestStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 10, 1)
)
mscLpDS3DS1TestStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1TestStateEntry.setStatus("mandatory")


class _MscLpDS3DS1TestAdminState_Type(Integer32):
    """Custom type mscLpDS3DS1TestAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpDS3DS1TestAdminState_Type.__name__ = "Integer32"
_MscLpDS3DS1TestAdminState_Object = MibTableColumn
mscLpDS3DS1TestAdminState = _MscLpDS3DS1TestAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 10, 1, 1),
    _MscLpDS3DS1TestAdminState_Type()
)
mscLpDS3DS1TestAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestAdminState.setStatus("mandatory")


class _MscLpDS3DS1TestOperationalState_Type(Integer32):
    """Custom type mscLpDS3DS1TestOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpDS3DS1TestOperationalState_Type.__name__ = "Integer32"
_MscLpDS3DS1TestOperationalState_Object = MibTableColumn
mscLpDS3DS1TestOperationalState = _MscLpDS3DS1TestOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 10, 1, 2),
    _MscLpDS3DS1TestOperationalState_Type()
)
mscLpDS3DS1TestOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestOperationalState.setStatus("mandatory")


class _MscLpDS3DS1TestUsageState_Type(Integer32):
    """Custom type mscLpDS3DS1TestUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpDS3DS1TestUsageState_Type.__name__ = "Integer32"
_MscLpDS3DS1TestUsageState_Object = MibTableColumn
mscLpDS3DS1TestUsageState = _MscLpDS3DS1TestUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 10, 1, 3),
    _MscLpDS3DS1TestUsageState_Type()
)
mscLpDS3DS1TestUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestUsageState.setStatus("mandatory")
_MscLpDS3DS1TestSetupTable_Object = MibTable
mscLpDS3DS1TestSetupTable = _MscLpDS3DS1TestSetupTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 11)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1TestSetupTable.setStatus("mandatory")
_MscLpDS3DS1TestSetupEntry_Object = MibTableRow
mscLpDS3DS1TestSetupEntry = _MscLpDS3DS1TestSetupEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 11, 1)
)
mscLpDS3DS1TestSetupEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1TestSetupEntry.setStatus("mandatory")


class _MscLpDS3DS1TestPurpose_Type(AsciiString):
    """Custom type mscLpDS3DS1TestPurpose based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_MscLpDS3DS1TestPurpose_Type.__name__ = "AsciiString"
_MscLpDS3DS1TestPurpose_Object = MibTableColumn
mscLpDS3DS1TestPurpose = _MscLpDS3DS1TestPurpose_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 11, 1, 1),
    _MscLpDS3DS1TestPurpose_Type()
)
mscLpDS3DS1TestPurpose.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestPurpose.setStatus("mandatory")


class _MscLpDS3DS1TestType_Type(Integer32):
    """Custom type mscLpDS3DS1TestType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("card", 0),
          ("externalLoop", 4),
          ("localLoop", 2),
          ("manual", 1),
          ("payloadLoop", 5),
          ("pn127RemoteLoop", 8),
          ("remoteLoop", 3),
          ("remoteLoopThisTrib", 6),
          ("v54RemoteLoop", 7))
    )


_MscLpDS3DS1TestType_Type.__name__ = "Integer32"
_MscLpDS3DS1TestType_Object = MibTableColumn
mscLpDS3DS1TestType = _MscLpDS3DS1TestType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 11, 1, 2),
    _MscLpDS3DS1TestType_Type()
)
mscLpDS3DS1TestType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestType.setStatus("mandatory")


class _MscLpDS3DS1TestFrmSize_Type(Unsigned32):
    """Custom type mscLpDS3DS1TestFrmSize based on Unsigned32"""
    defaultValue = 1024

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 4096),
    )


_MscLpDS3DS1TestFrmSize_Type.__name__ = "Unsigned32"
_MscLpDS3DS1TestFrmSize_Object = MibTableColumn
mscLpDS3DS1TestFrmSize = _MscLpDS3DS1TestFrmSize_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 11, 1, 3),
    _MscLpDS3DS1TestFrmSize_Type()
)
mscLpDS3DS1TestFrmSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestFrmSize.setStatus("mandatory")


class _MscLpDS3DS1TestFrmPatternType_Type(Integer32):
    """Custom type mscLpDS3DS1TestFrmPatternType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ccitt32kBitPattern", 0),
          ("ccitt8MBitPattern", 1),
          ("customizedPattern", 2))
    )


_MscLpDS3DS1TestFrmPatternType_Type.__name__ = "Integer32"
_MscLpDS3DS1TestFrmPatternType_Object = MibTableColumn
mscLpDS3DS1TestFrmPatternType = _MscLpDS3DS1TestFrmPatternType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 11, 1, 4),
    _MscLpDS3DS1TestFrmPatternType_Type()
)
mscLpDS3DS1TestFrmPatternType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestFrmPatternType.setStatus("mandatory")


class _MscLpDS3DS1TestCustomizedPattern_Type(Hex):
    """Custom type mscLpDS3DS1TestCustomizedPattern based on Hex"""
    defaultValue = 1431655765

    subtypeSpec = Hex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpDS3DS1TestCustomizedPattern_Type.__name__ = "Hex"
_MscLpDS3DS1TestCustomizedPattern_Object = MibTableColumn
mscLpDS3DS1TestCustomizedPattern = _MscLpDS3DS1TestCustomizedPattern_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 11, 1, 5),
    _MscLpDS3DS1TestCustomizedPattern_Type()
)
mscLpDS3DS1TestCustomizedPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestCustomizedPattern.setStatus("mandatory")


class _MscLpDS3DS1TestDataStartDelay_Type(Unsigned32):
    """Custom type mscLpDS3DS1TestDataStartDelay based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1814400),
    )


_MscLpDS3DS1TestDataStartDelay_Type.__name__ = "Unsigned32"
_MscLpDS3DS1TestDataStartDelay_Object = MibTableColumn
mscLpDS3DS1TestDataStartDelay = _MscLpDS3DS1TestDataStartDelay_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 11, 1, 6),
    _MscLpDS3DS1TestDataStartDelay_Type()
)
mscLpDS3DS1TestDataStartDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestDataStartDelay.setStatus("mandatory")


class _MscLpDS3DS1TestDisplayInterval_Type(Unsigned32):
    """Custom type mscLpDS3DS1TestDisplayInterval based on Unsigned32"""
    defaultValue = 5

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30240),
    )


_MscLpDS3DS1TestDisplayInterval_Type.__name__ = "Unsigned32"
_MscLpDS3DS1TestDisplayInterval_Object = MibTableColumn
mscLpDS3DS1TestDisplayInterval = _MscLpDS3DS1TestDisplayInterval_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 11, 1, 7),
    _MscLpDS3DS1TestDisplayInterval_Type()
)
mscLpDS3DS1TestDisplayInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestDisplayInterval.setStatus("mandatory")


class _MscLpDS3DS1TestDuration_Type(Unsigned32):
    """Custom type mscLpDS3DS1TestDuration based on Unsigned32"""
    defaultValue = 1

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30240),
    )


_MscLpDS3DS1TestDuration_Type.__name__ = "Unsigned32"
_MscLpDS3DS1TestDuration_Object = MibTableColumn
mscLpDS3DS1TestDuration = _MscLpDS3DS1TestDuration_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 11, 1, 8),
    _MscLpDS3DS1TestDuration_Type()
)
mscLpDS3DS1TestDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestDuration.setStatus("mandatory")
_MscLpDS3DS1TestResultsTable_Object = MibTable
mscLpDS3DS1TestResultsTable = _MscLpDS3DS1TestResultsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1TestResultsTable.setStatus("mandatory")
_MscLpDS3DS1TestResultsEntry_Object = MibTableRow
mscLpDS3DS1TestResultsEntry = _MscLpDS3DS1TestResultsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1)
)
mscLpDS3DS1TestResultsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1TestResultsEntry.setStatus("mandatory")
_MscLpDS3DS1TestElapsedTime_Type = Counter32
_MscLpDS3DS1TestElapsedTime_Object = MibTableColumn
mscLpDS3DS1TestElapsedTime = _MscLpDS3DS1TestElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1, 1),
    _MscLpDS3DS1TestElapsedTime_Type()
)
mscLpDS3DS1TestElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestElapsedTime.setStatus("mandatory")


class _MscLpDS3DS1TestTimeRemaining_Type(Unsigned32):
    """Custom type mscLpDS3DS1TestTimeRemaining based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpDS3DS1TestTimeRemaining_Type.__name__ = "Unsigned32"
_MscLpDS3DS1TestTimeRemaining_Object = MibTableColumn
mscLpDS3DS1TestTimeRemaining = _MscLpDS3DS1TestTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1, 2),
    _MscLpDS3DS1TestTimeRemaining_Type()
)
mscLpDS3DS1TestTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestTimeRemaining.setStatus("mandatory")


class _MscLpDS3DS1TestCauseOfTermination_Type(Integer32):
    """Custom type mscLpDS3DS1TestCauseOfTermination based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("hardwareReconfigured", 5),
          ("loopCodeSyncFailed", 6),
          ("neverStarted", 3),
          ("patternSyncFailed", 7),
          ("patternSyncLost", 8),
          ("stoppedByOperator", 1),
          ("testRunning", 4),
          ("testTimeExpired", 0),
          ("unknown", 2))
    )


_MscLpDS3DS1TestCauseOfTermination_Type.__name__ = "Integer32"
_MscLpDS3DS1TestCauseOfTermination_Object = MibTableColumn
mscLpDS3DS1TestCauseOfTermination = _MscLpDS3DS1TestCauseOfTermination_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1, 3),
    _MscLpDS3DS1TestCauseOfTermination_Type()
)
mscLpDS3DS1TestCauseOfTermination.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestCauseOfTermination.setStatus("mandatory")
_MscLpDS3DS1TestBitsTx_Type = PassportCounter64
_MscLpDS3DS1TestBitsTx_Object = MibTableColumn
mscLpDS3DS1TestBitsTx = _MscLpDS3DS1TestBitsTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1, 4),
    _MscLpDS3DS1TestBitsTx_Type()
)
mscLpDS3DS1TestBitsTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestBitsTx.setStatus("mandatory")
_MscLpDS3DS1TestBytesTx_Type = PassportCounter64
_MscLpDS3DS1TestBytesTx_Object = MibTableColumn
mscLpDS3DS1TestBytesTx = _MscLpDS3DS1TestBytesTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1, 5),
    _MscLpDS3DS1TestBytesTx_Type()
)
mscLpDS3DS1TestBytesTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestBytesTx.setStatus("mandatory")
_MscLpDS3DS1TestFrmTx_Type = PassportCounter64
_MscLpDS3DS1TestFrmTx_Object = MibTableColumn
mscLpDS3DS1TestFrmTx = _MscLpDS3DS1TestFrmTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1, 6),
    _MscLpDS3DS1TestFrmTx_Type()
)
mscLpDS3DS1TestFrmTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestFrmTx.setStatus("mandatory")
_MscLpDS3DS1TestBitsRx_Type = PassportCounter64
_MscLpDS3DS1TestBitsRx_Object = MibTableColumn
mscLpDS3DS1TestBitsRx = _MscLpDS3DS1TestBitsRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1, 7),
    _MscLpDS3DS1TestBitsRx_Type()
)
mscLpDS3DS1TestBitsRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestBitsRx.setStatus("mandatory")
_MscLpDS3DS1TestBytesRx_Type = PassportCounter64
_MscLpDS3DS1TestBytesRx_Object = MibTableColumn
mscLpDS3DS1TestBytesRx = _MscLpDS3DS1TestBytesRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1, 8),
    _MscLpDS3DS1TestBytesRx_Type()
)
mscLpDS3DS1TestBytesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestBytesRx.setStatus("mandatory")
_MscLpDS3DS1TestFrmRx_Type = PassportCounter64
_MscLpDS3DS1TestFrmRx_Object = MibTableColumn
mscLpDS3DS1TestFrmRx = _MscLpDS3DS1TestFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1, 9),
    _MscLpDS3DS1TestFrmRx_Type()
)
mscLpDS3DS1TestFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestFrmRx.setStatus("mandatory")
_MscLpDS3DS1TestErroredFrmRx_Type = PassportCounter64
_MscLpDS3DS1TestErroredFrmRx_Object = MibTableColumn
mscLpDS3DS1TestErroredFrmRx = _MscLpDS3DS1TestErroredFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1, 10),
    _MscLpDS3DS1TestErroredFrmRx_Type()
)
mscLpDS3DS1TestErroredFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestErroredFrmRx.setStatus("mandatory")


class _MscLpDS3DS1TestBitErrorRate_Type(AsciiString):
    """Custom type mscLpDS3DS1TestBitErrorRate based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )


_MscLpDS3DS1TestBitErrorRate_Type.__name__ = "AsciiString"
_MscLpDS3DS1TestBitErrorRate_Object = MibTableColumn
mscLpDS3DS1TestBitErrorRate = _MscLpDS3DS1TestBitErrorRate_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 3, 12, 1, 11),
    _MscLpDS3DS1TestBitErrorRate_Type()
)
mscLpDS3DS1TestBitErrorRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1TestBitErrorRate.setStatus("mandatory")
_MscLpDS3DS1ProvTable_Object = MibTable
mscLpDS3DS1ProvTable = _MscLpDS3DS1ProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 10)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ProvTable.setStatus("mandatory")
_MscLpDS3DS1ProvEntry_Object = MibTableRow
mscLpDS3DS1ProvEntry = _MscLpDS3DS1ProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 10, 1)
)
mscLpDS3DS1ProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1ProvEntry.setStatus("mandatory")


class _MscLpDS3DS1LineType_Type(Integer32):
    """Custom type mscLpDS3DS1LineType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("d4", 0),
          ("d4Cas", 4),
          ("esf", 1),
          ("esfCas", 5))
    )


_MscLpDS3DS1LineType_Type.__name__ = "Integer32"
_MscLpDS3DS1LineType_Object = MibTableColumn
mscLpDS3DS1LineType = _MscLpDS3DS1LineType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 10, 1, 1),
    _MscLpDS3DS1LineType_Type()
)
mscLpDS3DS1LineType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1LineType.setStatus("mandatory")


class _MscLpDS3DS1ZeroCoding_Type(Integer32):
    """Custom type mscLpDS3DS1ZeroCoding based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              3)
        )
    )
    namedValues = NamedValues(
        *(("bit7Stuffing", 0),
          ("none", 3))
    )


_MscLpDS3DS1ZeroCoding_Type.__name__ = "Integer32"
_MscLpDS3DS1ZeroCoding_Object = MibTableColumn
mscLpDS3DS1ZeroCoding = _MscLpDS3DS1ZeroCoding_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 10, 1, 2),
    _MscLpDS3DS1ZeroCoding_Type()
)
mscLpDS3DS1ZeroCoding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ZeroCoding.setStatus("mandatory")


class _MscLpDS3DS1ClockingSource_Type(Integer32):
    """Custom type mscLpDS3DS1ClockingSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("line", 1),
          ("local", 0),
          ("module", 2))
    )


_MscLpDS3DS1ClockingSource_Type.__name__ = "Integer32"
_MscLpDS3DS1ClockingSource_Object = MibTableColumn
mscLpDS3DS1ClockingSource = _MscLpDS3DS1ClockingSource_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 10, 1, 3),
    _MscLpDS3DS1ClockingSource_Type()
)
mscLpDS3DS1ClockingSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1ClockingSource.setStatus("mandatory")
_MscLpDS3DS1CidDataTable_Object = MibTable
mscLpDS3DS1CidDataTable = _MscLpDS3DS1CidDataTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 11)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1CidDataTable.setStatus("mandatory")
_MscLpDS3DS1CidDataEntry_Object = MibTableRow
mscLpDS3DS1CidDataEntry = _MscLpDS3DS1CidDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 11, 1)
)
mscLpDS3DS1CidDataEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1CidDataEntry.setStatus("mandatory")


class _MscLpDS3DS1CustomerIdentifier_Type(Unsigned32):
    """Custom type mscLpDS3DS1CustomerIdentifier based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 8191),
    )


_MscLpDS3DS1CustomerIdentifier_Type.__name__ = "Unsigned32"
_MscLpDS3DS1CustomerIdentifier_Object = MibTableColumn
mscLpDS3DS1CustomerIdentifier = _MscLpDS3DS1CustomerIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 11, 1, 1),
    _MscLpDS3DS1CustomerIdentifier_Type()
)
mscLpDS3DS1CustomerIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1CustomerIdentifier.setStatus("mandatory")
_MscLpDS3DS1AdminInfoTable_Object = MibTable
mscLpDS3DS1AdminInfoTable = _MscLpDS3DS1AdminInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 12)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1AdminInfoTable.setStatus("mandatory")
_MscLpDS3DS1AdminInfoEntry_Object = MibTableRow
mscLpDS3DS1AdminInfoEntry = _MscLpDS3DS1AdminInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 12, 1)
)
mscLpDS3DS1AdminInfoEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1AdminInfoEntry.setStatus("mandatory")


class _MscLpDS3DS1Vendor_Type(AsciiString):
    """Custom type mscLpDS3DS1Vendor based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_MscLpDS3DS1Vendor_Type.__name__ = "AsciiString"
_MscLpDS3DS1Vendor_Object = MibTableColumn
mscLpDS3DS1Vendor = _MscLpDS3DS1Vendor_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 12, 1, 1),
    _MscLpDS3DS1Vendor_Type()
)
mscLpDS3DS1Vendor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1Vendor.setStatus("mandatory")


class _MscLpDS3DS1CommentText_Type(AsciiString):
    """Custom type mscLpDS3DS1CommentText based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 60),
    )


_MscLpDS3DS1CommentText_Type.__name__ = "AsciiString"
_MscLpDS3DS1CommentText_Object = MibTableColumn
mscLpDS3DS1CommentText = _MscLpDS3DS1CommentText_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 12, 1, 2),
    _MscLpDS3DS1CommentText_Type()
)
mscLpDS3DS1CommentText.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1CommentText.setStatus("mandatory")
_MscLpDS3DS1IfEntryTable_Object = MibTable
mscLpDS3DS1IfEntryTable = _MscLpDS3DS1IfEntryTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 13)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1IfEntryTable.setStatus("mandatory")
_MscLpDS3DS1IfEntryEntry_Object = MibTableRow
mscLpDS3DS1IfEntryEntry = _MscLpDS3DS1IfEntryEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 13, 1)
)
mscLpDS3DS1IfEntryEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1IfEntryEntry.setStatus("mandatory")


class _MscLpDS3DS1IfAdminStatus_Type(Integer32):
    """Custom type mscLpDS3DS1IfAdminStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpDS3DS1IfAdminStatus_Type.__name__ = "Integer32"
_MscLpDS3DS1IfAdminStatus_Object = MibTableColumn
mscLpDS3DS1IfAdminStatus = _MscLpDS3DS1IfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 13, 1, 1),
    _MscLpDS3DS1IfAdminStatus_Type()
)
mscLpDS3DS1IfAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3DS1IfAdminStatus.setStatus("mandatory")


class _MscLpDS3DS1IfIndex_Type(InterfaceIndex):
    """Custom type mscLpDS3DS1IfIndex based on InterfaceIndex"""
    subtypeSpec = InterfaceIndex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_MscLpDS3DS1IfIndex_Type.__name__ = "InterfaceIndex"
_MscLpDS3DS1IfIndex_Object = MibTableColumn
mscLpDS3DS1IfIndex = _MscLpDS3DS1IfIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 13, 1, 2),
    _MscLpDS3DS1IfIndex_Type()
)
mscLpDS3DS1IfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1IfIndex.setStatus("mandatory")
_MscLpDS3DS1OperStatusTable_Object = MibTable
mscLpDS3DS1OperStatusTable = _MscLpDS3DS1OperStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 14)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1OperStatusTable.setStatus("mandatory")
_MscLpDS3DS1OperStatusEntry_Object = MibTableRow
mscLpDS3DS1OperStatusEntry = _MscLpDS3DS1OperStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 14, 1)
)
mscLpDS3DS1OperStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1OperStatusEntry.setStatus("mandatory")


class _MscLpDS3DS1SnmpOperStatus_Type(Integer32):
    """Custom type mscLpDS3DS1SnmpOperStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpDS3DS1SnmpOperStatus_Type.__name__ = "Integer32"
_MscLpDS3DS1SnmpOperStatus_Object = MibTableColumn
mscLpDS3DS1SnmpOperStatus = _MscLpDS3DS1SnmpOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 14, 1, 1),
    _MscLpDS3DS1SnmpOperStatus_Type()
)
mscLpDS3DS1SnmpOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1SnmpOperStatus.setStatus("mandatory")
_MscLpDS3DS1StateTable_Object = MibTable
mscLpDS3DS1StateTable = _MscLpDS3DS1StateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 15)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1StateTable.setStatus("mandatory")
_MscLpDS3DS1StateEntry_Object = MibTableRow
mscLpDS3DS1StateEntry = _MscLpDS3DS1StateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 15, 1)
)
mscLpDS3DS1StateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1StateEntry.setStatus("mandatory")


class _MscLpDS3DS1AdminState_Type(Integer32):
    """Custom type mscLpDS3DS1AdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpDS3DS1AdminState_Type.__name__ = "Integer32"
_MscLpDS3DS1AdminState_Object = MibTableColumn
mscLpDS3DS1AdminState = _MscLpDS3DS1AdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 15, 1, 1),
    _MscLpDS3DS1AdminState_Type()
)
mscLpDS3DS1AdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1AdminState.setStatus("mandatory")


class _MscLpDS3DS1OperationalState_Type(Integer32):
    """Custom type mscLpDS3DS1OperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpDS3DS1OperationalState_Type.__name__ = "Integer32"
_MscLpDS3DS1OperationalState_Object = MibTableColumn
mscLpDS3DS1OperationalState = _MscLpDS3DS1OperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 15, 1, 2),
    _MscLpDS3DS1OperationalState_Type()
)
mscLpDS3DS1OperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1OperationalState.setStatus("mandatory")


class _MscLpDS3DS1UsageState_Type(Integer32):
    """Custom type mscLpDS3DS1UsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpDS3DS1UsageState_Type.__name__ = "Integer32"
_MscLpDS3DS1UsageState_Object = MibTableColumn
mscLpDS3DS1UsageState = _MscLpDS3DS1UsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 15, 1, 3),
    _MscLpDS3DS1UsageState_Type()
)
mscLpDS3DS1UsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1UsageState.setStatus("mandatory")


class _MscLpDS3DS1AvailabilityStatus_Type(OctetString):
    """Custom type mscLpDS3DS1AvailabilityStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_MscLpDS3DS1AvailabilityStatus_Type.__name__ = "OctetString"
_MscLpDS3DS1AvailabilityStatus_Object = MibTableColumn
mscLpDS3DS1AvailabilityStatus = _MscLpDS3DS1AvailabilityStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 15, 1, 4),
    _MscLpDS3DS1AvailabilityStatus_Type()
)
mscLpDS3DS1AvailabilityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1AvailabilityStatus.setStatus("mandatory")


class _MscLpDS3DS1ProceduralStatus_Type(OctetString):
    """Custom type mscLpDS3DS1ProceduralStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpDS3DS1ProceduralStatus_Type.__name__ = "OctetString"
_MscLpDS3DS1ProceduralStatus_Object = MibTableColumn
mscLpDS3DS1ProceduralStatus = _MscLpDS3DS1ProceduralStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 15, 1, 5),
    _MscLpDS3DS1ProceduralStatus_Type()
)
mscLpDS3DS1ProceduralStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ProceduralStatus.setStatus("mandatory")


class _MscLpDS3DS1ControlStatus_Type(OctetString):
    """Custom type mscLpDS3DS1ControlStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpDS3DS1ControlStatus_Type.__name__ = "OctetString"
_MscLpDS3DS1ControlStatus_Object = MibTableColumn
mscLpDS3DS1ControlStatus = _MscLpDS3DS1ControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 15, 1, 6),
    _MscLpDS3DS1ControlStatus_Type()
)
mscLpDS3DS1ControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ControlStatus.setStatus("mandatory")


class _MscLpDS3DS1AlarmStatus_Type(OctetString):
    """Custom type mscLpDS3DS1AlarmStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpDS3DS1AlarmStatus_Type.__name__ = "OctetString"
_MscLpDS3DS1AlarmStatus_Object = MibTableColumn
mscLpDS3DS1AlarmStatus = _MscLpDS3DS1AlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 15, 1, 7),
    _MscLpDS3DS1AlarmStatus_Type()
)
mscLpDS3DS1AlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1AlarmStatus.setStatus("mandatory")


class _MscLpDS3DS1StandbyStatus_Type(Integer32):
    """Custom type mscLpDS3DS1StandbyStatus based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              15)
        )
    )
    namedValues = NamedValues(
        *(("coldStandby", 1),
          ("hotStandby", 0),
          ("notSet", 15),
          ("providingService", 2))
    )


_MscLpDS3DS1StandbyStatus_Type.__name__ = "Integer32"
_MscLpDS3DS1StandbyStatus_Object = MibTableColumn
mscLpDS3DS1StandbyStatus = _MscLpDS3DS1StandbyStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 15, 1, 8),
    _MscLpDS3DS1StandbyStatus_Type()
)
mscLpDS3DS1StandbyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1StandbyStatus.setStatus("mandatory")


class _MscLpDS3DS1UnknownStatus_Type(Integer32):
    """Custom type mscLpDS3DS1UnknownStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_MscLpDS3DS1UnknownStatus_Type.__name__ = "Integer32"
_MscLpDS3DS1UnknownStatus_Object = MibTableColumn
mscLpDS3DS1UnknownStatus = _MscLpDS3DS1UnknownStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 15, 1, 9),
    _MscLpDS3DS1UnknownStatus_Type()
)
mscLpDS3DS1UnknownStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1UnknownStatus.setStatus("mandatory")
_MscLpDS3DS1OperTable_Object = MibTable
mscLpDS3DS1OperTable = _MscLpDS3DS1OperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 16)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1OperTable.setStatus("mandatory")
_MscLpDS3DS1OperEntry_Object = MibTableRow
mscLpDS3DS1OperEntry = _MscLpDS3DS1OperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 16, 1)
)
mscLpDS3DS1OperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1OperEntry.setStatus("mandatory")


class _MscLpDS3DS1RxAisAlarm_Type(Integer32):
    """Custom type mscLpDS3DS1RxAisAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS3DS1RxAisAlarm_Type.__name__ = "Integer32"
_MscLpDS3DS1RxAisAlarm_Object = MibTableColumn
mscLpDS3DS1RxAisAlarm = _MscLpDS3DS1RxAisAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 16, 1, 1),
    _MscLpDS3DS1RxAisAlarm_Type()
)
mscLpDS3DS1RxAisAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1RxAisAlarm.setStatus("mandatory")


class _MscLpDS3DS1LofAlarm_Type(Integer32):
    """Custom type mscLpDS3DS1LofAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS3DS1LofAlarm_Type.__name__ = "Integer32"
_MscLpDS3DS1LofAlarm_Object = MibTableColumn
mscLpDS3DS1LofAlarm = _MscLpDS3DS1LofAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 16, 1, 2),
    _MscLpDS3DS1LofAlarm_Type()
)
mscLpDS3DS1LofAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1LofAlarm.setStatus("mandatory")


class _MscLpDS3DS1RxRaiAlarm_Type(Integer32):
    """Custom type mscLpDS3DS1RxRaiAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS3DS1RxRaiAlarm_Type.__name__ = "Integer32"
_MscLpDS3DS1RxRaiAlarm_Object = MibTableColumn
mscLpDS3DS1RxRaiAlarm = _MscLpDS3DS1RxRaiAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 16, 1, 3),
    _MscLpDS3DS1RxRaiAlarm_Type()
)
mscLpDS3DS1RxRaiAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1RxRaiAlarm.setStatus("mandatory")


class _MscLpDS3DS1TxAisAlarm_Type(Integer32):
    """Custom type mscLpDS3DS1TxAisAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS3DS1TxAisAlarm_Type.__name__ = "Integer32"
_MscLpDS3DS1TxAisAlarm_Object = MibTableColumn
mscLpDS3DS1TxAisAlarm = _MscLpDS3DS1TxAisAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 16, 1, 4),
    _MscLpDS3DS1TxAisAlarm_Type()
)
mscLpDS3DS1TxAisAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1TxAisAlarm.setStatus("mandatory")


class _MscLpDS3DS1TxRaiAlarm_Type(Integer32):
    """Custom type mscLpDS3DS1TxRaiAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS3DS1TxRaiAlarm_Type.__name__ = "Integer32"
_MscLpDS3DS1TxRaiAlarm_Object = MibTableColumn
mscLpDS3DS1TxRaiAlarm = _MscLpDS3DS1TxRaiAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 16, 1, 5),
    _MscLpDS3DS1TxRaiAlarm_Type()
)
mscLpDS3DS1TxRaiAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1TxRaiAlarm.setStatus("mandatory")
_MscLpDS3DS1StatsTable_Object = MibTable
mscLpDS3DS1StatsTable = _MscLpDS3DS1StatsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 17)
)
if mibBuilder.loadTexts:
    mscLpDS3DS1StatsTable.setStatus("mandatory")
_MscLpDS3DS1StatsEntry_Object = MibTableRow
mscLpDS3DS1StatsEntry = _MscLpDS3DS1StatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 17, 1)
)
mscLpDS3DS1StatsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3DS1Index"),
)
if mibBuilder.loadTexts:
    mscLpDS3DS1StatsEntry.setStatus("mandatory")
_MscLpDS3DS1RunningTime_Type = Counter32
_MscLpDS3DS1RunningTime_Object = MibTableColumn
mscLpDS3DS1RunningTime = _MscLpDS3DS1RunningTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 17, 1, 1),
    _MscLpDS3DS1RunningTime_Type()
)
mscLpDS3DS1RunningTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1RunningTime.setStatus("mandatory")
_MscLpDS3DS1ErrorFreeSec_Type = Counter32
_MscLpDS3DS1ErrorFreeSec_Object = MibTableColumn
mscLpDS3DS1ErrorFreeSec = _MscLpDS3DS1ErrorFreeSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 17, 1, 2),
    _MscLpDS3DS1ErrorFreeSec_Type()
)
mscLpDS3DS1ErrorFreeSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ErrorFreeSec.setStatus("mandatory")
_MscLpDS3DS1ErroredSec_Type = Counter32
_MscLpDS3DS1ErroredSec_Object = MibTableColumn
mscLpDS3DS1ErroredSec = _MscLpDS3DS1ErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 17, 1, 3),
    _MscLpDS3DS1ErroredSec_Type()
)
mscLpDS3DS1ErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1ErroredSec.setStatus("mandatory")
_MscLpDS3DS1SevErroredSec_Type = Counter32
_MscLpDS3DS1SevErroredSec_Object = MibTableColumn
mscLpDS3DS1SevErroredSec = _MscLpDS3DS1SevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 17, 1, 4),
    _MscLpDS3DS1SevErroredSec_Type()
)
mscLpDS3DS1SevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1SevErroredSec.setStatus("mandatory")
_MscLpDS3DS1SevErroredFrmSec_Type = Counter32
_MscLpDS3DS1SevErroredFrmSec_Object = MibTableColumn
mscLpDS3DS1SevErroredFrmSec = _MscLpDS3DS1SevErroredFrmSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 17, 1, 5),
    _MscLpDS3DS1SevErroredFrmSec_Type()
)
mscLpDS3DS1SevErroredFrmSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1SevErroredFrmSec.setStatus("mandatory")
_MscLpDS3DS1UnavailSec_Type = Counter32
_MscLpDS3DS1UnavailSec_Object = MibTableColumn
mscLpDS3DS1UnavailSec = _MscLpDS3DS1UnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 17, 1, 6),
    _MscLpDS3DS1UnavailSec_Type()
)
mscLpDS3DS1UnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1UnavailSec.setStatus("mandatory")
_MscLpDS3DS1CrcErrors_Type = Counter32
_MscLpDS3DS1CrcErrors_Object = MibTableColumn
mscLpDS3DS1CrcErrors = _MscLpDS3DS1CrcErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 17, 1, 7),
    _MscLpDS3DS1CrcErrors_Type()
)
mscLpDS3DS1CrcErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1CrcErrors.setStatus("mandatory")
_MscLpDS3DS1FrmErrors_Type = Counter32
_MscLpDS3DS1FrmErrors_Object = MibTableColumn
mscLpDS3DS1FrmErrors = _MscLpDS3DS1FrmErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 17, 1, 8),
    _MscLpDS3DS1FrmErrors_Type()
)
mscLpDS3DS1FrmErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1FrmErrors.setStatus("mandatory")
_MscLpDS3DS1SlipErrors_Type = Counter32
_MscLpDS3DS1SlipErrors_Object = MibTableColumn
mscLpDS3DS1SlipErrors = _MscLpDS3DS1SlipErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 6, 17, 1, 9),
    _MscLpDS3DS1SlipErrors_Type()
)
mscLpDS3DS1SlipErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3DS1SlipErrors.setStatus("mandatory")
_MscLpDS3ProvTable_Object = MibTable
mscLpDS3ProvTable = _MscLpDS3ProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 10)
)
if mibBuilder.loadTexts:
    mscLpDS3ProvTable.setStatus("mandatory")
_MscLpDS3ProvEntry_Object = MibTableRow
mscLpDS3ProvEntry = _MscLpDS3ProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 10, 1)
)
mscLpDS3ProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
)
if mibBuilder.loadTexts:
    mscLpDS3ProvEntry.setStatus("mandatory")


class _MscLpDS3CbitParity_Type(Integer32):
    """Custom type mscLpDS3CbitParity based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpDS3CbitParity_Type.__name__ = "Integer32"
_MscLpDS3CbitParity_Object = MibTableColumn
mscLpDS3CbitParity = _MscLpDS3CbitParity_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 10, 1, 1),
    _MscLpDS3CbitParity_Type()
)
mscLpDS3CbitParity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3CbitParity.setStatus("mandatory")


class _MscLpDS3LineLength_Type(Unsigned32):
    """Custom type mscLpDS3LineLength based on Unsigned32"""
    defaultValue = 1

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 450),
    )


_MscLpDS3LineLength_Type.__name__ = "Unsigned32"
_MscLpDS3LineLength_Object = MibTableColumn
mscLpDS3LineLength = _MscLpDS3LineLength_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 10, 1, 2),
    _MscLpDS3LineLength_Type()
)
mscLpDS3LineLength.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3LineLength.setStatus("mandatory")


class _MscLpDS3ClockingSource_Type(Integer32):
    """Custom type mscLpDS3ClockingSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("line", 1),
          ("local", 0),
          ("module", 2),
          ("otherPort", 4))
    )


_MscLpDS3ClockingSource_Type.__name__ = "Integer32"
_MscLpDS3ClockingSource_Object = MibTableColumn
mscLpDS3ClockingSource = _MscLpDS3ClockingSource_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 10, 1, 3),
    _MscLpDS3ClockingSource_Type()
)
mscLpDS3ClockingSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3ClockingSource.setStatus("mandatory")
_MscLpDS3ApplicationFramerName_Type = Link
_MscLpDS3ApplicationFramerName_Object = MibTableColumn
mscLpDS3ApplicationFramerName = _MscLpDS3ApplicationFramerName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 10, 1, 4),
    _MscLpDS3ApplicationFramerName_Type()
)
mscLpDS3ApplicationFramerName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3ApplicationFramerName.setStatus("mandatory")


class _MscLpDS3Mapping_Type(Integer32):
    """Custom type mscLpDS3Mapping based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("direct", 0),
          ("plcp", 1))
    )


_MscLpDS3Mapping_Type.__name__ = "Integer32"
_MscLpDS3Mapping_Object = MibTableColumn
mscLpDS3Mapping = _MscLpDS3Mapping_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 10, 1, 5),
    _MscLpDS3Mapping_Type()
)
mscLpDS3Mapping.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3Mapping.setStatus("mandatory")
_MscLpDS3CidDataTable_Object = MibTable
mscLpDS3CidDataTable = _MscLpDS3CidDataTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 11)
)
if mibBuilder.loadTexts:
    mscLpDS3CidDataTable.setStatus("mandatory")
_MscLpDS3CidDataEntry_Object = MibTableRow
mscLpDS3CidDataEntry = _MscLpDS3CidDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 11, 1)
)
mscLpDS3CidDataEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
)
if mibBuilder.loadTexts:
    mscLpDS3CidDataEntry.setStatus("mandatory")


class _MscLpDS3CustomerIdentifier_Type(Unsigned32):
    """Custom type mscLpDS3CustomerIdentifier based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 8191),
    )


_MscLpDS3CustomerIdentifier_Type.__name__ = "Unsigned32"
_MscLpDS3CustomerIdentifier_Object = MibTableColumn
mscLpDS3CustomerIdentifier = _MscLpDS3CustomerIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 11, 1, 1),
    _MscLpDS3CustomerIdentifier_Type()
)
mscLpDS3CustomerIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3CustomerIdentifier.setStatus("mandatory")
_MscLpDS3AdminInfoTable_Object = MibTable
mscLpDS3AdminInfoTable = _MscLpDS3AdminInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 12)
)
if mibBuilder.loadTexts:
    mscLpDS3AdminInfoTable.setStatus("mandatory")
_MscLpDS3AdminInfoEntry_Object = MibTableRow
mscLpDS3AdminInfoEntry = _MscLpDS3AdminInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 12, 1)
)
mscLpDS3AdminInfoEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
)
if mibBuilder.loadTexts:
    mscLpDS3AdminInfoEntry.setStatus("mandatory")


class _MscLpDS3Vendor_Type(AsciiString):
    """Custom type mscLpDS3Vendor based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_MscLpDS3Vendor_Type.__name__ = "AsciiString"
_MscLpDS3Vendor_Object = MibTableColumn
mscLpDS3Vendor = _MscLpDS3Vendor_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 12, 1, 1),
    _MscLpDS3Vendor_Type()
)
mscLpDS3Vendor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3Vendor.setStatus("mandatory")


class _MscLpDS3CommentText_Type(AsciiString):
    """Custom type mscLpDS3CommentText based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 60),
    )


_MscLpDS3CommentText_Type.__name__ = "AsciiString"
_MscLpDS3CommentText_Object = MibTableColumn
mscLpDS3CommentText = _MscLpDS3CommentText_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 12, 1, 2),
    _MscLpDS3CommentText_Type()
)
mscLpDS3CommentText.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3CommentText.setStatus("mandatory")
_MscLpDS3IfEntryTable_Object = MibTable
mscLpDS3IfEntryTable = _MscLpDS3IfEntryTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 13)
)
if mibBuilder.loadTexts:
    mscLpDS3IfEntryTable.setStatus("mandatory")
_MscLpDS3IfEntryEntry_Object = MibTableRow
mscLpDS3IfEntryEntry = _MscLpDS3IfEntryEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 13, 1)
)
mscLpDS3IfEntryEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
)
if mibBuilder.loadTexts:
    mscLpDS3IfEntryEntry.setStatus("mandatory")


class _MscLpDS3IfAdminStatus_Type(Integer32):
    """Custom type mscLpDS3IfAdminStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpDS3IfAdminStatus_Type.__name__ = "Integer32"
_MscLpDS3IfAdminStatus_Object = MibTableColumn
mscLpDS3IfAdminStatus = _MscLpDS3IfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 13, 1, 1),
    _MscLpDS3IfAdminStatus_Type()
)
mscLpDS3IfAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS3IfAdminStatus.setStatus("mandatory")


class _MscLpDS3IfIndex_Type(InterfaceIndex):
    """Custom type mscLpDS3IfIndex based on InterfaceIndex"""
    subtypeSpec = InterfaceIndex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_MscLpDS3IfIndex_Type.__name__ = "InterfaceIndex"
_MscLpDS3IfIndex_Object = MibTableColumn
mscLpDS3IfIndex = _MscLpDS3IfIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 13, 1, 2),
    _MscLpDS3IfIndex_Type()
)
mscLpDS3IfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3IfIndex.setStatus("mandatory")
_MscLpDS3OperStatusTable_Object = MibTable
mscLpDS3OperStatusTable = _MscLpDS3OperStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 14)
)
if mibBuilder.loadTexts:
    mscLpDS3OperStatusTable.setStatus("mandatory")
_MscLpDS3OperStatusEntry_Object = MibTableRow
mscLpDS3OperStatusEntry = _MscLpDS3OperStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 14, 1)
)
mscLpDS3OperStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
)
if mibBuilder.loadTexts:
    mscLpDS3OperStatusEntry.setStatus("mandatory")


class _MscLpDS3SnmpOperStatus_Type(Integer32):
    """Custom type mscLpDS3SnmpOperStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpDS3SnmpOperStatus_Type.__name__ = "Integer32"
_MscLpDS3SnmpOperStatus_Object = MibTableColumn
mscLpDS3SnmpOperStatus = _MscLpDS3SnmpOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 14, 1, 1),
    _MscLpDS3SnmpOperStatus_Type()
)
mscLpDS3SnmpOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3SnmpOperStatus.setStatus("mandatory")
_MscLpDS3StateTable_Object = MibTable
mscLpDS3StateTable = _MscLpDS3StateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 15)
)
if mibBuilder.loadTexts:
    mscLpDS3StateTable.setStatus("mandatory")
_MscLpDS3StateEntry_Object = MibTableRow
mscLpDS3StateEntry = _MscLpDS3StateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 15, 1)
)
mscLpDS3StateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
)
if mibBuilder.loadTexts:
    mscLpDS3StateEntry.setStatus("mandatory")


class _MscLpDS3AdminState_Type(Integer32):
    """Custom type mscLpDS3AdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpDS3AdminState_Type.__name__ = "Integer32"
_MscLpDS3AdminState_Object = MibTableColumn
mscLpDS3AdminState = _MscLpDS3AdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 15, 1, 1),
    _MscLpDS3AdminState_Type()
)
mscLpDS3AdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3AdminState.setStatus("mandatory")


class _MscLpDS3OperationalState_Type(Integer32):
    """Custom type mscLpDS3OperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpDS3OperationalState_Type.__name__ = "Integer32"
_MscLpDS3OperationalState_Object = MibTableColumn
mscLpDS3OperationalState = _MscLpDS3OperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 15, 1, 2),
    _MscLpDS3OperationalState_Type()
)
mscLpDS3OperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3OperationalState.setStatus("mandatory")


class _MscLpDS3UsageState_Type(Integer32):
    """Custom type mscLpDS3UsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpDS3UsageState_Type.__name__ = "Integer32"
_MscLpDS3UsageState_Object = MibTableColumn
mscLpDS3UsageState = _MscLpDS3UsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 15, 1, 3),
    _MscLpDS3UsageState_Type()
)
mscLpDS3UsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3UsageState.setStatus("mandatory")


class _MscLpDS3AvailabilityStatus_Type(OctetString):
    """Custom type mscLpDS3AvailabilityStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_MscLpDS3AvailabilityStatus_Type.__name__ = "OctetString"
_MscLpDS3AvailabilityStatus_Object = MibTableColumn
mscLpDS3AvailabilityStatus = _MscLpDS3AvailabilityStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 15, 1, 4),
    _MscLpDS3AvailabilityStatus_Type()
)
mscLpDS3AvailabilityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3AvailabilityStatus.setStatus("mandatory")


class _MscLpDS3ProceduralStatus_Type(OctetString):
    """Custom type mscLpDS3ProceduralStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpDS3ProceduralStatus_Type.__name__ = "OctetString"
_MscLpDS3ProceduralStatus_Object = MibTableColumn
mscLpDS3ProceduralStatus = _MscLpDS3ProceduralStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 15, 1, 5),
    _MscLpDS3ProceduralStatus_Type()
)
mscLpDS3ProceduralStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3ProceduralStatus.setStatus("mandatory")


class _MscLpDS3ControlStatus_Type(OctetString):
    """Custom type mscLpDS3ControlStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpDS3ControlStatus_Type.__name__ = "OctetString"
_MscLpDS3ControlStatus_Object = MibTableColumn
mscLpDS3ControlStatus = _MscLpDS3ControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 15, 1, 6),
    _MscLpDS3ControlStatus_Type()
)
mscLpDS3ControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3ControlStatus.setStatus("mandatory")


class _MscLpDS3AlarmStatus_Type(OctetString):
    """Custom type mscLpDS3AlarmStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpDS3AlarmStatus_Type.__name__ = "OctetString"
_MscLpDS3AlarmStatus_Object = MibTableColumn
mscLpDS3AlarmStatus = _MscLpDS3AlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 15, 1, 7),
    _MscLpDS3AlarmStatus_Type()
)
mscLpDS3AlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3AlarmStatus.setStatus("mandatory")


class _MscLpDS3StandbyStatus_Type(Integer32):
    """Custom type mscLpDS3StandbyStatus based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              15)
        )
    )
    namedValues = NamedValues(
        *(("coldStandby", 1),
          ("hotStandby", 0),
          ("notSet", 15),
          ("providingService", 2))
    )


_MscLpDS3StandbyStatus_Type.__name__ = "Integer32"
_MscLpDS3StandbyStatus_Object = MibTableColumn
mscLpDS3StandbyStatus = _MscLpDS3StandbyStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 15, 1, 8),
    _MscLpDS3StandbyStatus_Type()
)
mscLpDS3StandbyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3StandbyStatus.setStatus("mandatory")


class _MscLpDS3UnknownStatus_Type(Integer32):
    """Custom type mscLpDS3UnknownStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_MscLpDS3UnknownStatus_Type.__name__ = "Integer32"
_MscLpDS3UnknownStatus_Object = MibTableColumn
mscLpDS3UnknownStatus = _MscLpDS3UnknownStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 15, 1, 9),
    _MscLpDS3UnknownStatus_Type()
)
mscLpDS3UnknownStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3UnknownStatus.setStatus("mandatory")
_MscLpDS3OperTable_Object = MibTable
mscLpDS3OperTable = _MscLpDS3OperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 16)
)
if mibBuilder.loadTexts:
    mscLpDS3OperTable.setStatus("mandatory")
_MscLpDS3OperEntry_Object = MibTableRow
mscLpDS3OperEntry = _MscLpDS3OperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 16, 1)
)
mscLpDS3OperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
)
if mibBuilder.loadTexts:
    mscLpDS3OperEntry.setStatus("mandatory")


class _MscLpDS3LosAlarm_Type(Integer32):
    """Custom type mscLpDS3LosAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS3LosAlarm_Type.__name__ = "Integer32"
_MscLpDS3LosAlarm_Object = MibTableColumn
mscLpDS3LosAlarm = _MscLpDS3LosAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 16, 1, 1),
    _MscLpDS3LosAlarm_Type()
)
mscLpDS3LosAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3LosAlarm.setStatus("mandatory")


class _MscLpDS3LofAlarm_Type(Integer32):
    """Custom type mscLpDS3LofAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS3LofAlarm_Type.__name__ = "Integer32"
_MscLpDS3LofAlarm_Object = MibTableColumn
mscLpDS3LofAlarm = _MscLpDS3LofAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 16, 1, 2),
    _MscLpDS3LofAlarm_Type()
)
mscLpDS3LofAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3LofAlarm.setStatus("mandatory")


class _MscLpDS3RxAisAlarm_Type(Integer32):
    """Custom type mscLpDS3RxAisAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS3RxAisAlarm_Type.__name__ = "Integer32"
_MscLpDS3RxAisAlarm_Object = MibTableColumn
mscLpDS3RxAisAlarm = _MscLpDS3RxAisAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 16, 1, 3),
    _MscLpDS3RxAisAlarm_Type()
)
mscLpDS3RxAisAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3RxAisAlarm.setStatus("mandatory")


class _MscLpDS3RxRaiAlarm_Type(Integer32):
    """Custom type mscLpDS3RxRaiAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS3RxRaiAlarm_Type.__name__ = "Integer32"
_MscLpDS3RxRaiAlarm_Object = MibTableColumn
mscLpDS3RxRaiAlarm = _MscLpDS3RxRaiAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 16, 1, 4),
    _MscLpDS3RxRaiAlarm_Type()
)
mscLpDS3RxRaiAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3RxRaiAlarm.setStatus("mandatory")


class _MscLpDS3RxIdle_Type(Integer32):
    """Custom type mscLpDS3RxIdle based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS3RxIdle_Type.__name__ = "Integer32"
_MscLpDS3RxIdle_Object = MibTableColumn
mscLpDS3RxIdle = _MscLpDS3RxIdle_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 16, 1, 5),
    _MscLpDS3RxIdle_Type()
)
mscLpDS3RxIdle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3RxIdle.setStatus("mandatory")


class _MscLpDS3TxAis_Type(Integer32):
    """Custom type mscLpDS3TxAis based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS3TxAis_Type.__name__ = "Integer32"
_MscLpDS3TxAis_Object = MibTableColumn
mscLpDS3TxAis = _MscLpDS3TxAis_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 16, 1, 6),
    _MscLpDS3TxAis_Type()
)
mscLpDS3TxAis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3TxAis.setStatus("mandatory")


class _MscLpDS3TxRai_Type(Integer32):
    """Custom type mscLpDS3TxRai based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS3TxRai_Type.__name__ = "Integer32"
_MscLpDS3TxRai_Object = MibTableColumn
mscLpDS3TxRai = _MscLpDS3TxRai_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 16, 1, 7),
    _MscLpDS3TxRai_Type()
)
mscLpDS3TxRai.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3TxRai.setStatus("mandatory")


class _MscLpDS3TxIdle_Type(Integer32):
    """Custom type mscLpDS3TxIdle based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS3TxIdle_Type.__name__ = "Integer32"
_MscLpDS3TxIdle_Object = MibTableColumn
mscLpDS3TxIdle = _MscLpDS3TxIdle_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 16, 1, 8),
    _MscLpDS3TxIdle_Type()
)
mscLpDS3TxIdle.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3TxIdle.setStatus("mandatory")
_MscLpDS3StatsTable_Object = MibTable
mscLpDS3StatsTable = _MscLpDS3StatsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17)
)
if mibBuilder.loadTexts:
    mscLpDS3StatsTable.setStatus("mandatory")
_MscLpDS3StatsEntry_Object = MibTableRow
mscLpDS3StatsEntry = _MscLpDS3StatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1)
)
mscLpDS3StatsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS3Index"),
)
if mibBuilder.loadTexts:
    mscLpDS3StatsEntry.setStatus("mandatory")
_MscLpDS3RunningTime_Type = Counter32
_MscLpDS3RunningTime_Object = MibTableColumn
mscLpDS3RunningTime = _MscLpDS3RunningTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 1),
    _MscLpDS3RunningTime_Type()
)
mscLpDS3RunningTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3RunningTime.setStatus("mandatory")
_MscLpDS3ErrorFreeSec_Type = Counter32
_MscLpDS3ErrorFreeSec_Object = MibTableColumn
mscLpDS3ErrorFreeSec = _MscLpDS3ErrorFreeSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 2),
    _MscLpDS3ErrorFreeSec_Type()
)
mscLpDS3ErrorFreeSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3ErrorFreeSec.setStatus("mandatory")
_MscLpDS3LineCodeViolations_Type = Counter32
_MscLpDS3LineCodeViolations_Object = MibTableColumn
mscLpDS3LineCodeViolations = _MscLpDS3LineCodeViolations_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 3),
    _MscLpDS3LineCodeViolations_Type()
)
mscLpDS3LineCodeViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3LineCodeViolations.setStatus("mandatory")
_MscLpDS3LineErroredSec_Type = Counter32
_MscLpDS3LineErroredSec_Object = MibTableColumn
mscLpDS3LineErroredSec = _MscLpDS3LineErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 4),
    _MscLpDS3LineErroredSec_Type()
)
mscLpDS3LineErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3LineErroredSec.setStatus("mandatory")
_MscLpDS3LineSevErroredSec_Type = Counter32
_MscLpDS3LineSevErroredSec_Object = MibTableColumn
mscLpDS3LineSevErroredSec = _MscLpDS3LineSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 5),
    _MscLpDS3LineSevErroredSec_Type()
)
mscLpDS3LineSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3LineSevErroredSec.setStatus("mandatory")
_MscLpDS3LineLosSec_Type = Counter32
_MscLpDS3LineLosSec_Object = MibTableColumn
mscLpDS3LineLosSec = _MscLpDS3LineLosSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 6),
    _MscLpDS3LineLosSec_Type()
)
mscLpDS3LineLosSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3LineLosSec.setStatus("mandatory")
_MscLpDS3LineFailures_Type = Counter32
_MscLpDS3LineFailures_Object = MibTableColumn
mscLpDS3LineFailures = _MscLpDS3LineFailures_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 7),
    _MscLpDS3LineFailures_Type()
)
mscLpDS3LineFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3LineFailures.setStatus("mandatory")
_MscLpDS3PathCodeViolations_Type = Counter32
_MscLpDS3PathCodeViolations_Object = MibTableColumn
mscLpDS3PathCodeViolations = _MscLpDS3PathCodeViolations_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 8),
    _MscLpDS3PathCodeViolations_Type()
)
mscLpDS3PathCodeViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3PathCodeViolations.setStatus("mandatory")
_MscLpDS3PathErroredSec_Type = Counter32
_MscLpDS3PathErroredSec_Object = MibTableColumn
mscLpDS3PathErroredSec = _MscLpDS3PathErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 9),
    _MscLpDS3PathErroredSec_Type()
)
mscLpDS3PathErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3PathErroredSec.setStatus("mandatory")
_MscLpDS3PathSevErroredSec_Type = Counter32
_MscLpDS3PathSevErroredSec_Object = MibTableColumn
mscLpDS3PathSevErroredSec = _MscLpDS3PathSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 10),
    _MscLpDS3PathSevErroredSec_Type()
)
mscLpDS3PathSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3PathSevErroredSec.setStatus("mandatory")
_MscLpDS3PathSefAisSec_Type = Counter32
_MscLpDS3PathSefAisSec_Object = MibTableColumn
mscLpDS3PathSefAisSec = _MscLpDS3PathSefAisSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 11),
    _MscLpDS3PathSefAisSec_Type()
)
mscLpDS3PathSefAisSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3PathSefAisSec.setStatus("mandatory")
_MscLpDS3PathUnavailSec_Type = Counter32
_MscLpDS3PathUnavailSec_Object = MibTableColumn
mscLpDS3PathUnavailSec = _MscLpDS3PathUnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 12),
    _MscLpDS3PathUnavailSec_Type()
)
mscLpDS3PathUnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3PathUnavailSec.setStatus("mandatory")
_MscLpDS3PathFailures_Type = Counter32
_MscLpDS3PathFailures_Object = MibTableColumn
mscLpDS3PathFailures = _MscLpDS3PathFailures_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 5, 17, 1, 13),
    _MscLpDS3PathFailures_Type()
)
mscLpDS3PathFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS3PathFailures.setStatus("mandatory")
_MscLpE3_ObjectIdentity = ObjectIdentity
mscLpE3 = _MscLpE3_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6)
)
_MscLpE3RowStatusTable_Object = MibTable
mscLpE3RowStatusTable = _MscLpE3RowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 1)
)
if mibBuilder.loadTexts:
    mscLpE3RowStatusTable.setStatus("mandatory")
_MscLpE3RowStatusEntry_Object = MibTableRow
mscLpE3RowStatusEntry = _MscLpE3RowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 1, 1)
)
mscLpE3RowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
)
if mibBuilder.loadTexts:
    mscLpE3RowStatusEntry.setStatus("mandatory")
_MscLpE3RowStatus_Type = RowStatus
_MscLpE3RowStatus_Object = MibTableColumn
mscLpE3RowStatus = _MscLpE3RowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 1, 1, 1),
    _MscLpE3RowStatus_Type()
)
mscLpE3RowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3RowStatus.setStatus("mandatory")
_MscLpE3ComponentName_Type = DisplayString
_MscLpE3ComponentName_Object = MibTableColumn
mscLpE3ComponentName = _MscLpE3ComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 1, 1, 2),
    _MscLpE3ComponentName_Type()
)
mscLpE3ComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3ComponentName.setStatus("mandatory")
_MscLpE3StorageType_Type = StorageType
_MscLpE3StorageType_Object = MibTableColumn
mscLpE3StorageType = _MscLpE3StorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 1, 1, 4),
    _MscLpE3StorageType_Type()
)
mscLpE3StorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3StorageType.setStatus("mandatory")


class _MscLpE3Index_Type(Integer32):
    """Custom type mscLpE3Index based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 11),
    )


_MscLpE3Index_Type.__name__ = "Integer32"
_MscLpE3Index_Object = MibTableColumn
mscLpE3Index = _MscLpE3Index_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 1, 1, 10),
    _MscLpE3Index_Type()
)
mscLpE3Index.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpE3Index.setStatus("mandatory")
_MscLpE3Test_ObjectIdentity = ObjectIdentity
mscLpE3Test = _MscLpE3Test_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2)
)
_MscLpE3TestRowStatusTable_Object = MibTable
mscLpE3TestRowStatusTable = _MscLpE3TestRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 1)
)
if mibBuilder.loadTexts:
    mscLpE3TestRowStatusTable.setStatus("mandatory")
_MscLpE3TestRowStatusEntry_Object = MibTableRow
mscLpE3TestRowStatusEntry = _MscLpE3TestRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 1, 1)
)
mscLpE3TestRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpE3TestRowStatusEntry.setStatus("mandatory")
_MscLpE3TestRowStatus_Type = RowStatus
_MscLpE3TestRowStatus_Object = MibTableColumn
mscLpE3TestRowStatus = _MscLpE3TestRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 1, 1, 1),
    _MscLpE3TestRowStatus_Type()
)
mscLpE3TestRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3TestRowStatus.setStatus("mandatory")
_MscLpE3TestComponentName_Type = DisplayString
_MscLpE3TestComponentName_Object = MibTableColumn
mscLpE3TestComponentName = _MscLpE3TestComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 1, 1, 2),
    _MscLpE3TestComponentName_Type()
)
mscLpE3TestComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3TestComponentName.setStatus("mandatory")
_MscLpE3TestStorageType_Type = StorageType
_MscLpE3TestStorageType_Object = MibTableColumn
mscLpE3TestStorageType = _MscLpE3TestStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 1, 1, 4),
    _MscLpE3TestStorageType_Type()
)
mscLpE3TestStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3TestStorageType.setStatus("mandatory")
_MscLpE3TestIndex_Type = NonReplicated
_MscLpE3TestIndex_Object = MibTableColumn
mscLpE3TestIndex = _MscLpE3TestIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 1, 1, 10),
    _MscLpE3TestIndex_Type()
)
mscLpE3TestIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpE3TestIndex.setStatus("mandatory")
_MscLpE3TestStateTable_Object = MibTable
mscLpE3TestStateTable = _MscLpE3TestStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 10)
)
if mibBuilder.loadTexts:
    mscLpE3TestStateTable.setStatus("mandatory")
_MscLpE3TestStateEntry_Object = MibTableRow
mscLpE3TestStateEntry = _MscLpE3TestStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 10, 1)
)
mscLpE3TestStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpE3TestStateEntry.setStatus("mandatory")


class _MscLpE3TestAdminState_Type(Integer32):
    """Custom type mscLpE3TestAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpE3TestAdminState_Type.__name__ = "Integer32"
_MscLpE3TestAdminState_Object = MibTableColumn
mscLpE3TestAdminState = _MscLpE3TestAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 10, 1, 1),
    _MscLpE3TestAdminState_Type()
)
mscLpE3TestAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3TestAdminState.setStatus("mandatory")


class _MscLpE3TestOperationalState_Type(Integer32):
    """Custom type mscLpE3TestOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpE3TestOperationalState_Type.__name__ = "Integer32"
_MscLpE3TestOperationalState_Object = MibTableColumn
mscLpE3TestOperationalState = _MscLpE3TestOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 10, 1, 2),
    _MscLpE3TestOperationalState_Type()
)
mscLpE3TestOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3TestOperationalState.setStatus("mandatory")


class _MscLpE3TestUsageState_Type(Integer32):
    """Custom type mscLpE3TestUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpE3TestUsageState_Type.__name__ = "Integer32"
_MscLpE3TestUsageState_Object = MibTableColumn
mscLpE3TestUsageState = _MscLpE3TestUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 10, 1, 3),
    _MscLpE3TestUsageState_Type()
)
mscLpE3TestUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3TestUsageState.setStatus("mandatory")
_MscLpE3TestSetupTable_Object = MibTable
mscLpE3TestSetupTable = _MscLpE3TestSetupTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 11)
)
if mibBuilder.loadTexts:
    mscLpE3TestSetupTable.setStatus("mandatory")
_MscLpE3TestSetupEntry_Object = MibTableRow
mscLpE3TestSetupEntry = _MscLpE3TestSetupEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 11, 1)
)
mscLpE3TestSetupEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpE3TestSetupEntry.setStatus("mandatory")


class _MscLpE3TestPurpose_Type(AsciiString):
    """Custom type mscLpE3TestPurpose based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_MscLpE3TestPurpose_Type.__name__ = "AsciiString"
_MscLpE3TestPurpose_Object = MibTableColumn
mscLpE3TestPurpose = _MscLpE3TestPurpose_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 11, 1, 1),
    _MscLpE3TestPurpose_Type()
)
mscLpE3TestPurpose.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3TestPurpose.setStatus("mandatory")


class _MscLpE3TestType_Type(Integer32):
    """Custom type mscLpE3TestType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("card", 0),
          ("externalLoop", 4),
          ("localLoop", 2),
          ("manual", 1),
          ("payloadLoop", 5),
          ("pn127RemoteLoop", 8),
          ("remoteLoop", 3),
          ("remoteLoopThisTrib", 6),
          ("v54RemoteLoop", 7))
    )


_MscLpE3TestType_Type.__name__ = "Integer32"
_MscLpE3TestType_Object = MibTableColumn
mscLpE3TestType = _MscLpE3TestType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 11, 1, 2),
    _MscLpE3TestType_Type()
)
mscLpE3TestType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3TestType.setStatus("mandatory")


class _MscLpE3TestFrmSize_Type(Unsigned32):
    """Custom type mscLpE3TestFrmSize based on Unsigned32"""
    defaultValue = 1024

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 4096),
    )


_MscLpE3TestFrmSize_Type.__name__ = "Unsigned32"
_MscLpE3TestFrmSize_Object = MibTableColumn
mscLpE3TestFrmSize = _MscLpE3TestFrmSize_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 11, 1, 3),
    _MscLpE3TestFrmSize_Type()
)
mscLpE3TestFrmSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3TestFrmSize.setStatus("mandatory")


class _MscLpE3TestFrmPatternType_Type(Integer32):
    """Custom type mscLpE3TestFrmPatternType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ccitt32kBitPattern", 0),
          ("ccitt8MBitPattern", 1),
          ("customizedPattern", 2))
    )


_MscLpE3TestFrmPatternType_Type.__name__ = "Integer32"
_MscLpE3TestFrmPatternType_Object = MibTableColumn
mscLpE3TestFrmPatternType = _MscLpE3TestFrmPatternType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 11, 1, 4),
    _MscLpE3TestFrmPatternType_Type()
)
mscLpE3TestFrmPatternType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3TestFrmPatternType.setStatus("mandatory")


class _MscLpE3TestCustomizedPattern_Type(Hex):
    """Custom type mscLpE3TestCustomizedPattern based on Hex"""
    defaultValue = 1431655765

    subtypeSpec = Hex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpE3TestCustomizedPattern_Type.__name__ = "Hex"
_MscLpE3TestCustomizedPattern_Object = MibTableColumn
mscLpE3TestCustomizedPattern = _MscLpE3TestCustomizedPattern_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 11, 1, 5),
    _MscLpE3TestCustomizedPattern_Type()
)
mscLpE3TestCustomizedPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3TestCustomizedPattern.setStatus("mandatory")


class _MscLpE3TestDataStartDelay_Type(Unsigned32):
    """Custom type mscLpE3TestDataStartDelay based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1814400),
    )


_MscLpE3TestDataStartDelay_Type.__name__ = "Unsigned32"
_MscLpE3TestDataStartDelay_Object = MibTableColumn
mscLpE3TestDataStartDelay = _MscLpE3TestDataStartDelay_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 11, 1, 6),
    _MscLpE3TestDataStartDelay_Type()
)
mscLpE3TestDataStartDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3TestDataStartDelay.setStatus("mandatory")


class _MscLpE3TestDisplayInterval_Type(Unsigned32):
    """Custom type mscLpE3TestDisplayInterval based on Unsigned32"""
    defaultValue = 5

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30240),
    )


_MscLpE3TestDisplayInterval_Type.__name__ = "Unsigned32"
_MscLpE3TestDisplayInterval_Object = MibTableColumn
mscLpE3TestDisplayInterval = _MscLpE3TestDisplayInterval_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 11, 1, 7),
    _MscLpE3TestDisplayInterval_Type()
)
mscLpE3TestDisplayInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3TestDisplayInterval.setStatus("mandatory")


class _MscLpE3TestDuration_Type(Unsigned32):
    """Custom type mscLpE3TestDuration based on Unsigned32"""
    defaultValue = 1

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30240),
    )


_MscLpE3TestDuration_Type.__name__ = "Unsigned32"
_MscLpE3TestDuration_Object = MibTableColumn
mscLpE3TestDuration = _MscLpE3TestDuration_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 11, 1, 8),
    _MscLpE3TestDuration_Type()
)
mscLpE3TestDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3TestDuration.setStatus("mandatory")
_MscLpE3TestResultsTable_Object = MibTable
mscLpE3TestResultsTable = _MscLpE3TestResultsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12)
)
if mibBuilder.loadTexts:
    mscLpE3TestResultsTable.setStatus("mandatory")
_MscLpE3TestResultsEntry_Object = MibTableRow
mscLpE3TestResultsEntry = _MscLpE3TestResultsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1)
)
mscLpE3TestResultsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpE3TestResultsEntry.setStatus("mandatory")
_MscLpE3TestElapsedTime_Type = Counter32
_MscLpE3TestElapsedTime_Object = MibTableColumn
mscLpE3TestElapsedTime = _MscLpE3TestElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1, 1),
    _MscLpE3TestElapsedTime_Type()
)
mscLpE3TestElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3TestElapsedTime.setStatus("mandatory")


class _MscLpE3TestTimeRemaining_Type(Unsigned32):
    """Custom type mscLpE3TestTimeRemaining based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpE3TestTimeRemaining_Type.__name__ = "Unsigned32"
_MscLpE3TestTimeRemaining_Object = MibTableColumn
mscLpE3TestTimeRemaining = _MscLpE3TestTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1, 2),
    _MscLpE3TestTimeRemaining_Type()
)
mscLpE3TestTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3TestTimeRemaining.setStatus("mandatory")


class _MscLpE3TestCauseOfTermination_Type(Integer32):
    """Custom type mscLpE3TestCauseOfTermination based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("hardwareReconfigured", 5),
          ("loopCodeSyncFailed", 6),
          ("neverStarted", 3),
          ("patternSyncFailed", 7),
          ("patternSyncLost", 8),
          ("stoppedByOperator", 1),
          ("testRunning", 4),
          ("testTimeExpired", 0),
          ("unknown", 2))
    )


_MscLpE3TestCauseOfTermination_Type.__name__ = "Integer32"
_MscLpE3TestCauseOfTermination_Object = MibTableColumn
mscLpE3TestCauseOfTermination = _MscLpE3TestCauseOfTermination_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1, 3),
    _MscLpE3TestCauseOfTermination_Type()
)
mscLpE3TestCauseOfTermination.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3TestCauseOfTermination.setStatus("mandatory")
_MscLpE3TestBitsTx_Type = PassportCounter64
_MscLpE3TestBitsTx_Object = MibTableColumn
mscLpE3TestBitsTx = _MscLpE3TestBitsTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1, 4),
    _MscLpE3TestBitsTx_Type()
)
mscLpE3TestBitsTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3TestBitsTx.setStatus("mandatory")
_MscLpE3TestBytesTx_Type = PassportCounter64
_MscLpE3TestBytesTx_Object = MibTableColumn
mscLpE3TestBytesTx = _MscLpE3TestBytesTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1, 5),
    _MscLpE3TestBytesTx_Type()
)
mscLpE3TestBytesTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3TestBytesTx.setStatus("mandatory")
_MscLpE3TestFrmTx_Type = PassportCounter64
_MscLpE3TestFrmTx_Object = MibTableColumn
mscLpE3TestFrmTx = _MscLpE3TestFrmTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1, 6),
    _MscLpE3TestFrmTx_Type()
)
mscLpE3TestFrmTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3TestFrmTx.setStatus("mandatory")
_MscLpE3TestBitsRx_Type = PassportCounter64
_MscLpE3TestBitsRx_Object = MibTableColumn
mscLpE3TestBitsRx = _MscLpE3TestBitsRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1, 7),
    _MscLpE3TestBitsRx_Type()
)
mscLpE3TestBitsRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3TestBitsRx.setStatus("mandatory")
_MscLpE3TestBytesRx_Type = PassportCounter64
_MscLpE3TestBytesRx_Object = MibTableColumn
mscLpE3TestBytesRx = _MscLpE3TestBytesRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1, 8),
    _MscLpE3TestBytesRx_Type()
)
mscLpE3TestBytesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3TestBytesRx.setStatus("mandatory")
_MscLpE3TestFrmRx_Type = PassportCounter64
_MscLpE3TestFrmRx_Object = MibTableColumn
mscLpE3TestFrmRx = _MscLpE3TestFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1, 9),
    _MscLpE3TestFrmRx_Type()
)
mscLpE3TestFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3TestFrmRx.setStatus("mandatory")
_MscLpE3TestErroredFrmRx_Type = PassportCounter64
_MscLpE3TestErroredFrmRx_Object = MibTableColumn
mscLpE3TestErroredFrmRx = _MscLpE3TestErroredFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1, 10),
    _MscLpE3TestErroredFrmRx_Type()
)
mscLpE3TestErroredFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3TestErroredFrmRx.setStatus("mandatory")


class _MscLpE3TestBitErrorRate_Type(AsciiString):
    """Custom type mscLpE3TestBitErrorRate based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )


_MscLpE3TestBitErrorRate_Type.__name__ = "AsciiString"
_MscLpE3TestBitErrorRate_Object = MibTableColumn
mscLpE3TestBitErrorRate = _MscLpE3TestBitErrorRate_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 2, 12, 1, 11),
    _MscLpE3TestBitErrorRate_Type()
)
mscLpE3TestBitErrorRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3TestBitErrorRate.setStatus("mandatory")
_MscLpE3G832_ObjectIdentity = ObjectIdentity
mscLpE3G832 = _MscLpE3G832_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3)
)
_MscLpE3G832RowStatusTable_Object = MibTable
mscLpE3G832RowStatusTable = _MscLpE3G832RowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 1)
)
if mibBuilder.loadTexts:
    mscLpE3G832RowStatusTable.setStatus("mandatory")
_MscLpE3G832RowStatusEntry_Object = MibTableRow
mscLpE3G832RowStatusEntry = _MscLpE3G832RowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 1, 1)
)
mscLpE3G832RowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3G832Index"),
)
if mibBuilder.loadTexts:
    mscLpE3G832RowStatusEntry.setStatus("mandatory")
_MscLpE3G832RowStatus_Type = RowStatus
_MscLpE3G832RowStatus_Object = MibTableColumn
mscLpE3G832RowStatus = _MscLpE3G832RowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 1, 1, 1),
    _MscLpE3G832RowStatus_Type()
)
mscLpE3G832RowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3G832RowStatus.setStatus("mandatory")
_MscLpE3G832ComponentName_Type = DisplayString
_MscLpE3G832ComponentName_Object = MibTableColumn
mscLpE3G832ComponentName = _MscLpE3G832ComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 1, 1, 2),
    _MscLpE3G832ComponentName_Type()
)
mscLpE3G832ComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3G832ComponentName.setStatus("mandatory")
_MscLpE3G832StorageType_Type = StorageType
_MscLpE3G832StorageType_Object = MibTableColumn
mscLpE3G832StorageType = _MscLpE3G832StorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 1, 1, 4),
    _MscLpE3G832StorageType_Type()
)
mscLpE3G832StorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3G832StorageType.setStatus("mandatory")
_MscLpE3G832Index_Type = NonReplicated
_MscLpE3G832Index_Object = MibTableColumn
mscLpE3G832Index = _MscLpE3G832Index_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 1, 1, 10),
    _MscLpE3G832Index_Type()
)
mscLpE3G832Index.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpE3G832Index.setStatus("mandatory")
_MscLpE3G832ProvisionedTable_Object = MibTable
mscLpE3G832ProvisionedTable = _MscLpE3G832ProvisionedTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 10)
)
if mibBuilder.loadTexts:
    mscLpE3G832ProvisionedTable.setStatus("mandatory")
_MscLpE3G832ProvisionedEntry_Object = MibTableRow
mscLpE3G832ProvisionedEntry = _MscLpE3G832ProvisionedEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 10, 1)
)
mscLpE3G832ProvisionedEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3G832Index"),
)
if mibBuilder.loadTexts:
    mscLpE3G832ProvisionedEntry.setStatus("mandatory")


class _MscLpE3G832TrailTraceTransmitted_Type(AsciiString):
    """Custom type mscLpE3G832TrailTraceTransmitted based on AsciiString"""
    defaultHexValue = ""

    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_MscLpE3G832TrailTraceTransmitted_Type.__name__ = "AsciiString"
_MscLpE3G832TrailTraceTransmitted_Object = MibTableColumn
mscLpE3G832TrailTraceTransmitted = _MscLpE3G832TrailTraceTransmitted_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 10, 1, 1),
    _MscLpE3G832TrailTraceTransmitted_Type()
)
mscLpE3G832TrailTraceTransmitted.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3G832TrailTraceTransmitted.setStatus("mandatory")


class _MscLpE3G832TrailTraceExpected_Type(AsciiString):
    """Custom type mscLpE3G832TrailTraceExpected based on AsciiString"""
    defaultHexValue = ""

    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_MscLpE3G832TrailTraceExpected_Type.__name__ = "AsciiString"
_MscLpE3G832TrailTraceExpected_Object = MibTableColumn
mscLpE3G832TrailTraceExpected = _MscLpE3G832TrailTraceExpected_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 10, 1, 2),
    _MscLpE3G832TrailTraceExpected_Type()
)
mscLpE3G832TrailTraceExpected.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3G832TrailTraceExpected.setStatus("mandatory")
_MscLpE3G832OperationalTable_Object = MibTable
mscLpE3G832OperationalTable = _MscLpE3G832OperationalTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 11)
)
if mibBuilder.loadTexts:
    mscLpE3G832OperationalTable.setStatus("mandatory")
_MscLpE3G832OperationalEntry_Object = MibTableRow
mscLpE3G832OperationalEntry = _MscLpE3G832OperationalEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 11, 1)
)
mscLpE3G832OperationalEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3G832Index"),
)
if mibBuilder.loadTexts:
    mscLpE3G832OperationalEntry.setStatus("mandatory")


class _MscLpE3G832UnexpectedPayloadType_Type(Integer32):
    """Custom type mscLpE3G832UnexpectedPayloadType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpE3G832UnexpectedPayloadType_Type.__name__ = "Integer32"
_MscLpE3G832UnexpectedPayloadType_Object = MibTableColumn
mscLpE3G832UnexpectedPayloadType = _MscLpE3G832UnexpectedPayloadType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 11, 1, 1),
    _MscLpE3G832UnexpectedPayloadType_Type()
)
mscLpE3G832UnexpectedPayloadType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3G832UnexpectedPayloadType.setStatus("mandatory")


class _MscLpE3G832TrailTraceMismatch_Type(Integer32):
    """Custom type mscLpE3G832TrailTraceMismatch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpE3G832TrailTraceMismatch_Type.__name__ = "Integer32"
_MscLpE3G832TrailTraceMismatch_Object = MibTableColumn
mscLpE3G832TrailTraceMismatch = _MscLpE3G832TrailTraceMismatch_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 11, 1, 2),
    _MscLpE3G832TrailTraceMismatch_Type()
)
mscLpE3G832TrailTraceMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3G832TrailTraceMismatch.setStatus("mandatory")


class _MscLpE3G832TimingMarker_Type(Integer32):
    """Custom type mscLpE3G832TimingMarker based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("notTraceable", 0),
          ("traceable", 1))
    )


_MscLpE3G832TimingMarker_Type.__name__ = "Integer32"
_MscLpE3G832TimingMarker_Object = MibTableColumn
mscLpE3G832TimingMarker = _MscLpE3G832TimingMarker_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 11, 1, 3),
    _MscLpE3G832TimingMarker_Type()
)
mscLpE3G832TimingMarker.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3G832TimingMarker.setStatus("mandatory")


class _MscLpE3G832TrailTraceReceived_Type(AsciiString):
    """Custom type mscLpE3G832TrailTraceReceived based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_MscLpE3G832TrailTraceReceived_Type.__name__ = "AsciiString"
_MscLpE3G832TrailTraceReceived_Object = MibTableColumn
mscLpE3G832TrailTraceReceived = _MscLpE3G832TrailTraceReceived_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 11, 1, 4),
    _MscLpE3G832TrailTraceReceived_Type()
)
mscLpE3G832TrailTraceReceived.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3G832TrailTraceReceived.setStatus("mandatory")
_MscLpE3G832StatsTable_Object = MibTable
mscLpE3G832StatsTable = _MscLpE3G832StatsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 12)
)
if mibBuilder.loadTexts:
    mscLpE3G832StatsTable.setStatus("mandatory")
_MscLpE3G832StatsEntry_Object = MibTableRow
mscLpE3G832StatsEntry = _MscLpE3G832StatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 12, 1)
)
mscLpE3G832StatsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3G832Index"),
)
if mibBuilder.loadTexts:
    mscLpE3G832StatsEntry.setStatus("mandatory")
_MscLpE3G832FarEndErrorFreeSec_Type = Counter32
_MscLpE3G832FarEndErrorFreeSec_Object = MibTableColumn
mscLpE3G832FarEndErrorFreeSec = _MscLpE3G832FarEndErrorFreeSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 12, 1, 1),
    _MscLpE3G832FarEndErrorFreeSec_Type()
)
mscLpE3G832FarEndErrorFreeSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3G832FarEndErrorFreeSec.setStatus("mandatory")
_MscLpE3G832FarEndCodeViolations_Type = Counter32
_MscLpE3G832FarEndCodeViolations_Object = MibTableColumn
mscLpE3G832FarEndCodeViolations = _MscLpE3G832FarEndCodeViolations_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 12, 1, 2),
    _MscLpE3G832FarEndCodeViolations_Type()
)
mscLpE3G832FarEndCodeViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3G832FarEndCodeViolations.setStatus("mandatory")
_MscLpE3G832FarEndErroredSec_Type = Counter32
_MscLpE3G832FarEndErroredSec_Object = MibTableColumn
mscLpE3G832FarEndErroredSec = _MscLpE3G832FarEndErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 12, 1, 3),
    _MscLpE3G832FarEndErroredSec_Type()
)
mscLpE3G832FarEndErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3G832FarEndErroredSec.setStatus("mandatory")
_MscLpE3G832FarEndSevErroredSec_Type = Counter32
_MscLpE3G832FarEndSevErroredSec_Object = MibTableColumn
mscLpE3G832FarEndSevErroredSec = _MscLpE3G832FarEndSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 12, 1, 4),
    _MscLpE3G832FarEndSevErroredSec_Type()
)
mscLpE3G832FarEndSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3G832FarEndSevErroredSec.setStatus("mandatory")
_MscLpE3G832FarEndSefAisSec_Type = Counter32
_MscLpE3G832FarEndSefAisSec_Object = MibTableColumn
mscLpE3G832FarEndSefAisSec = _MscLpE3G832FarEndSefAisSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 12, 1, 5),
    _MscLpE3G832FarEndSefAisSec_Type()
)
mscLpE3G832FarEndSefAisSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3G832FarEndSefAisSec.setStatus("mandatory")
_MscLpE3G832FarEndUnavailSec_Type = Counter32
_MscLpE3G832FarEndUnavailSec_Object = MibTableColumn
mscLpE3G832FarEndUnavailSec = _MscLpE3G832FarEndUnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 3, 12, 1, 6),
    _MscLpE3G832FarEndUnavailSec_Type()
)
mscLpE3G832FarEndUnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3G832FarEndUnavailSec.setStatus("mandatory")
_MscLpE3Plcp_ObjectIdentity = ObjectIdentity
mscLpE3Plcp = _MscLpE3Plcp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4)
)
_MscLpE3PlcpRowStatusTable_Object = MibTable
mscLpE3PlcpRowStatusTable = _MscLpE3PlcpRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 1)
)
if mibBuilder.loadTexts:
    mscLpE3PlcpRowStatusTable.setStatus("mandatory")
_MscLpE3PlcpRowStatusEntry_Object = MibTableRow
mscLpE3PlcpRowStatusEntry = _MscLpE3PlcpRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 1, 1)
)
mscLpE3PlcpRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3PlcpIndex"),
)
if mibBuilder.loadTexts:
    mscLpE3PlcpRowStatusEntry.setStatus("mandatory")
_MscLpE3PlcpRowStatus_Type = RowStatus
_MscLpE3PlcpRowStatus_Object = MibTableColumn
mscLpE3PlcpRowStatus = _MscLpE3PlcpRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 1, 1, 1),
    _MscLpE3PlcpRowStatus_Type()
)
mscLpE3PlcpRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3PlcpRowStatus.setStatus("mandatory")
_MscLpE3PlcpComponentName_Type = DisplayString
_MscLpE3PlcpComponentName_Object = MibTableColumn
mscLpE3PlcpComponentName = _MscLpE3PlcpComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 1, 1, 2),
    _MscLpE3PlcpComponentName_Type()
)
mscLpE3PlcpComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3PlcpComponentName.setStatus("mandatory")
_MscLpE3PlcpStorageType_Type = StorageType
_MscLpE3PlcpStorageType_Object = MibTableColumn
mscLpE3PlcpStorageType = _MscLpE3PlcpStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 1, 1, 4),
    _MscLpE3PlcpStorageType_Type()
)
mscLpE3PlcpStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3PlcpStorageType.setStatus("mandatory")
_MscLpE3PlcpIndex_Type = NonReplicated
_MscLpE3PlcpIndex_Object = MibTableColumn
mscLpE3PlcpIndex = _MscLpE3PlcpIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 1, 1, 10),
    _MscLpE3PlcpIndex_Type()
)
mscLpE3PlcpIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpE3PlcpIndex.setStatus("mandatory")
_MscLpE3PlcpOperationalTable_Object = MibTable
mscLpE3PlcpOperationalTable = _MscLpE3PlcpOperationalTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 10)
)
if mibBuilder.loadTexts:
    mscLpE3PlcpOperationalTable.setStatus("mandatory")
_MscLpE3PlcpOperationalEntry_Object = MibTableRow
mscLpE3PlcpOperationalEntry = _MscLpE3PlcpOperationalEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 10, 1)
)
mscLpE3PlcpOperationalEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3PlcpIndex"),
)
if mibBuilder.loadTexts:
    mscLpE3PlcpOperationalEntry.setStatus("mandatory")


class _MscLpE3PlcpLofAlarm_Type(Integer32):
    """Custom type mscLpE3PlcpLofAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpE3PlcpLofAlarm_Type.__name__ = "Integer32"
_MscLpE3PlcpLofAlarm_Object = MibTableColumn
mscLpE3PlcpLofAlarm = _MscLpE3PlcpLofAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 10, 1, 1),
    _MscLpE3PlcpLofAlarm_Type()
)
mscLpE3PlcpLofAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3PlcpLofAlarm.setStatus("mandatory")


class _MscLpE3PlcpRxRaiAlarm_Type(Integer32):
    """Custom type mscLpE3PlcpRxRaiAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpE3PlcpRxRaiAlarm_Type.__name__ = "Integer32"
_MscLpE3PlcpRxRaiAlarm_Object = MibTableColumn
mscLpE3PlcpRxRaiAlarm = _MscLpE3PlcpRxRaiAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 10, 1, 2),
    _MscLpE3PlcpRxRaiAlarm_Type()
)
mscLpE3PlcpRxRaiAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3PlcpRxRaiAlarm.setStatus("mandatory")
_MscLpE3PlcpStatsTable_Object = MibTable
mscLpE3PlcpStatsTable = _MscLpE3PlcpStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11)
)
if mibBuilder.loadTexts:
    mscLpE3PlcpStatsTable.setStatus("mandatory")
_MscLpE3PlcpStatsEntry_Object = MibTableRow
mscLpE3PlcpStatsEntry = _MscLpE3PlcpStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1)
)
mscLpE3PlcpStatsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3PlcpIndex"),
)
if mibBuilder.loadTexts:
    mscLpE3PlcpStatsEntry.setStatus("mandatory")
_MscLpE3PlcpErrorFreeSec_Type = Counter32
_MscLpE3PlcpErrorFreeSec_Object = MibTableColumn
mscLpE3PlcpErrorFreeSec = _MscLpE3PlcpErrorFreeSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1, 1),
    _MscLpE3PlcpErrorFreeSec_Type()
)
mscLpE3PlcpErrorFreeSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3PlcpErrorFreeSec.setStatus("mandatory")
_MscLpE3PlcpCodingViolations_Type = Counter32
_MscLpE3PlcpCodingViolations_Object = MibTableColumn
mscLpE3PlcpCodingViolations = _MscLpE3PlcpCodingViolations_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1, 2),
    _MscLpE3PlcpCodingViolations_Type()
)
mscLpE3PlcpCodingViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3PlcpCodingViolations.setStatus("mandatory")
_MscLpE3PlcpErroredSec_Type = Counter32
_MscLpE3PlcpErroredSec_Object = MibTableColumn
mscLpE3PlcpErroredSec = _MscLpE3PlcpErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1, 3),
    _MscLpE3PlcpErroredSec_Type()
)
mscLpE3PlcpErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3PlcpErroredSec.setStatus("mandatory")
_MscLpE3PlcpSevErroredSec_Type = Counter32
_MscLpE3PlcpSevErroredSec_Object = MibTableColumn
mscLpE3PlcpSevErroredSec = _MscLpE3PlcpSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1, 4),
    _MscLpE3PlcpSevErroredSec_Type()
)
mscLpE3PlcpSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3PlcpSevErroredSec.setStatus("mandatory")
_MscLpE3PlcpSevErroredFramingSec_Type = Counter32
_MscLpE3PlcpSevErroredFramingSec_Object = MibTableColumn
mscLpE3PlcpSevErroredFramingSec = _MscLpE3PlcpSevErroredFramingSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1, 5),
    _MscLpE3PlcpSevErroredFramingSec_Type()
)
mscLpE3PlcpSevErroredFramingSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3PlcpSevErroredFramingSec.setStatus("mandatory")
_MscLpE3PlcpUnavailSec_Type = Counter32
_MscLpE3PlcpUnavailSec_Object = MibTableColumn
mscLpE3PlcpUnavailSec = _MscLpE3PlcpUnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1, 6),
    _MscLpE3PlcpUnavailSec_Type()
)
mscLpE3PlcpUnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3PlcpUnavailSec.setStatus("mandatory")
_MscLpE3PlcpFarEndErrorFreeSec_Type = Counter32
_MscLpE3PlcpFarEndErrorFreeSec_Object = MibTableColumn
mscLpE3PlcpFarEndErrorFreeSec = _MscLpE3PlcpFarEndErrorFreeSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1, 7),
    _MscLpE3PlcpFarEndErrorFreeSec_Type()
)
mscLpE3PlcpFarEndErrorFreeSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3PlcpFarEndErrorFreeSec.setStatus("mandatory")
_MscLpE3PlcpFarEndCodingViolations_Type = Counter32
_MscLpE3PlcpFarEndCodingViolations_Object = MibTableColumn
mscLpE3PlcpFarEndCodingViolations = _MscLpE3PlcpFarEndCodingViolations_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1, 8),
    _MscLpE3PlcpFarEndCodingViolations_Type()
)
mscLpE3PlcpFarEndCodingViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3PlcpFarEndCodingViolations.setStatus("mandatory")
_MscLpE3PlcpFarEndErroredSec_Type = Counter32
_MscLpE3PlcpFarEndErroredSec_Object = MibTableColumn
mscLpE3PlcpFarEndErroredSec = _MscLpE3PlcpFarEndErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1, 9),
    _MscLpE3PlcpFarEndErroredSec_Type()
)
mscLpE3PlcpFarEndErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3PlcpFarEndErroredSec.setStatus("mandatory")
_MscLpE3PlcpFarEndSevErroredSec_Type = Counter32
_MscLpE3PlcpFarEndSevErroredSec_Object = MibTableColumn
mscLpE3PlcpFarEndSevErroredSec = _MscLpE3PlcpFarEndSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1, 10),
    _MscLpE3PlcpFarEndSevErroredSec_Type()
)
mscLpE3PlcpFarEndSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3PlcpFarEndSevErroredSec.setStatus("mandatory")
_MscLpE3PlcpFarEndUnavailableSec_Type = Counter32
_MscLpE3PlcpFarEndUnavailableSec_Object = MibTableColumn
mscLpE3PlcpFarEndUnavailableSec = _MscLpE3PlcpFarEndUnavailableSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 4, 11, 1, 11),
    _MscLpE3PlcpFarEndUnavailableSec_Type()
)
mscLpE3PlcpFarEndUnavailableSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3PlcpFarEndUnavailableSec.setStatus("mandatory")
_MscLpE3Cell_ObjectIdentity = ObjectIdentity
mscLpE3Cell = _MscLpE3Cell_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5)
)
_MscLpE3CellRowStatusTable_Object = MibTable
mscLpE3CellRowStatusTable = _MscLpE3CellRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 1)
)
if mibBuilder.loadTexts:
    mscLpE3CellRowStatusTable.setStatus("mandatory")
_MscLpE3CellRowStatusEntry_Object = MibTableRow
mscLpE3CellRowStatusEntry = _MscLpE3CellRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 1, 1)
)
mscLpE3CellRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3CellIndex"),
)
if mibBuilder.loadTexts:
    mscLpE3CellRowStatusEntry.setStatus("mandatory")
_MscLpE3CellRowStatus_Type = RowStatus
_MscLpE3CellRowStatus_Object = MibTableColumn
mscLpE3CellRowStatus = _MscLpE3CellRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 1, 1, 1),
    _MscLpE3CellRowStatus_Type()
)
mscLpE3CellRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3CellRowStatus.setStatus("mandatory")
_MscLpE3CellComponentName_Type = DisplayString
_MscLpE3CellComponentName_Object = MibTableColumn
mscLpE3CellComponentName = _MscLpE3CellComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 1, 1, 2),
    _MscLpE3CellComponentName_Type()
)
mscLpE3CellComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3CellComponentName.setStatus("mandatory")
_MscLpE3CellStorageType_Type = StorageType
_MscLpE3CellStorageType_Object = MibTableColumn
mscLpE3CellStorageType = _MscLpE3CellStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 1, 1, 4),
    _MscLpE3CellStorageType_Type()
)
mscLpE3CellStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3CellStorageType.setStatus("mandatory")
_MscLpE3CellIndex_Type = NonReplicated
_MscLpE3CellIndex_Object = MibTableColumn
mscLpE3CellIndex = _MscLpE3CellIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 1, 1, 10),
    _MscLpE3CellIndex_Type()
)
mscLpE3CellIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpE3CellIndex.setStatus("mandatory")
_MscLpE3CellProvTable_Object = MibTable
mscLpE3CellProvTable = _MscLpE3CellProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 10)
)
if mibBuilder.loadTexts:
    mscLpE3CellProvTable.setStatus("mandatory")
_MscLpE3CellProvEntry_Object = MibTableRow
mscLpE3CellProvEntry = _MscLpE3CellProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 10, 1)
)
mscLpE3CellProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3CellIndex"),
)
if mibBuilder.loadTexts:
    mscLpE3CellProvEntry.setStatus("mandatory")


class _MscLpE3CellAlarmActDelay_Type(Unsigned32):
    """Custom type mscLpE3CellAlarmActDelay based on Unsigned32"""
    defaultValue = 500

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2000),
    )


_MscLpE3CellAlarmActDelay_Type.__name__ = "Unsigned32"
_MscLpE3CellAlarmActDelay_Object = MibTableColumn
mscLpE3CellAlarmActDelay = _MscLpE3CellAlarmActDelay_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 10, 1, 1),
    _MscLpE3CellAlarmActDelay_Type()
)
mscLpE3CellAlarmActDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3CellAlarmActDelay.setStatus("mandatory")


class _MscLpE3CellScrambleCellPayload_Type(Integer32):
    """Custom type mscLpE3CellScrambleCellPayload based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpE3CellScrambleCellPayload_Type.__name__ = "Integer32"
_MscLpE3CellScrambleCellPayload_Object = MibTableColumn
mscLpE3CellScrambleCellPayload = _MscLpE3CellScrambleCellPayload_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 10, 1, 2),
    _MscLpE3CellScrambleCellPayload_Type()
)
mscLpE3CellScrambleCellPayload.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3CellScrambleCellPayload.setStatus("mandatory")


class _MscLpE3CellCorrectSingleBitHeaderErrors_Type(Integer32):
    """Custom type mscLpE3CellCorrectSingleBitHeaderErrors based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpE3CellCorrectSingleBitHeaderErrors_Type.__name__ = "Integer32"
_MscLpE3CellCorrectSingleBitHeaderErrors_Object = MibTableColumn
mscLpE3CellCorrectSingleBitHeaderErrors = _MscLpE3CellCorrectSingleBitHeaderErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 10, 1, 3),
    _MscLpE3CellCorrectSingleBitHeaderErrors_Type()
)
mscLpE3CellCorrectSingleBitHeaderErrors.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3CellCorrectSingleBitHeaderErrors.setStatus("mandatory")
_MscLpE3CellOperTable_Object = MibTable
mscLpE3CellOperTable = _MscLpE3CellOperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 11)
)
if mibBuilder.loadTexts:
    mscLpE3CellOperTable.setStatus("mandatory")
_MscLpE3CellOperEntry_Object = MibTableRow
mscLpE3CellOperEntry = _MscLpE3CellOperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 11, 1)
)
mscLpE3CellOperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3CellIndex"),
)
if mibBuilder.loadTexts:
    mscLpE3CellOperEntry.setStatus("mandatory")


class _MscLpE3CellLcdAlarm_Type(Integer32):
    """Custom type mscLpE3CellLcdAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpE3CellLcdAlarm_Type.__name__ = "Integer32"
_MscLpE3CellLcdAlarm_Object = MibTableColumn
mscLpE3CellLcdAlarm = _MscLpE3CellLcdAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 11, 1, 1),
    _MscLpE3CellLcdAlarm_Type()
)
mscLpE3CellLcdAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3CellLcdAlarm.setStatus("mandatory")
_MscLpE3CellStatsTable_Object = MibTable
mscLpE3CellStatsTable = _MscLpE3CellStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 12)
)
if mibBuilder.loadTexts:
    mscLpE3CellStatsTable.setStatus("mandatory")
_MscLpE3CellStatsEntry_Object = MibTableRow
mscLpE3CellStatsEntry = _MscLpE3CellStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 12, 1)
)
mscLpE3CellStatsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3CellIndex"),
)
if mibBuilder.loadTexts:
    mscLpE3CellStatsEntry.setStatus("mandatory")
_MscLpE3CellUncorrectableHecErrors_Type = Counter32
_MscLpE3CellUncorrectableHecErrors_Object = MibTableColumn
mscLpE3CellUncorrectableHecErrors = _MscLpE3CellUncorrectableHecErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 12, 1, 1),
    _MscLpE3CellUncorrectableHecErrors_Type()
)
mscLpE3CellUncorrectableHecErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3CellUncorrectableHecErrors.setStatus("mandatory")
_MscLpE3CellSevErroredSec_Type = Counter32
_MscLpE3CellSevErroredSec_Object = MibTableColumn
mscLpE3CellSevErroredSec = _MscLpE3CellSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 12, 1, 2),
    _MscLpE3CellSevErroredSec_Type()
)
mscLpE3CellSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3CellSevErroredSec.setStatus("mandatory")


class _MscLpE3CellReceiveCellUtilization_Type(Gauge32):
    """Custom type mscLpE3CellReceiveCellUtilization based on Gauge32"""
    defaultValue = 0

    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_MscLpE3CellReceiveCellUtilization_Type.__name__ = "Gauge32"
_MscLpE3CellReceiveCellUtilization_Object = MibTableColumn
mscLpE3CellReceiveCellUtilization = _MscLpE3CellReceiveCellUtilization_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 12, 1, 3),
    _MscLpE3CellReceiveCellUtilization_Type()
)
mscLpE3CellReceiveCellUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3CellReceiveCellUtilization.setStatus("mandatory")


class _MscLpE3CellTransmitCellUtilization_Type(Gauge32):
    """Custom type mscLpE3CellTransmitCellUtilization based on Gauge32"""
    defaultValue = 0

    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_MscLpE3CellTransmitCellUtilization_Type.__name__ = "Gauge32"
_MscLpE3CellTransmitCellUtilization_Object = MibTableColumn
mscLpE3CellTransmitCellUtilization = _MscLpE3CellTransmitCellUtilization_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 12, 1, 4),
    _MscLpE3CellTransmitCellUtilization_Type()
)
mscLpE3CellTransmitCellUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3CellTransmitCellUtilization.setStatus("mandatory")
_MscLpE3CellCorrectableHeaderErrors_Type = Counter32
_MscLpE3CellCorrectableHeaderErrors_Object = MibTableColumn
mscLpE3CellCorrectableHeaderErrors = _MscLpE3CellCorrectableHeaderErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 5, 12, 1, 5),
    _MscLpE3CellCorrectableHeaderErrors_Type()
)
mscLpE3CellCorrectableHeaderErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3CellCorrectableHeaderErrors.setStatus("mandatory")
_MscLpE3ProvTable_Object = MibTable
mscLpE3ProvTable = _MscLpE3ProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 10)
)
if mibBuilder.loadTexts:
    mscLpE3ProvTable.setStatus("mandatory")
_MscLpE3ProvEntry_Object = MibTableRow
mscLpE3ProvEntry = _MscLpE3ProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 10, 1)
)
mscLpE3ProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
)
if mibBuilder.loadTexts:
    mscLpE3ProvEntry.setStatus("mandatory")


class _MscLpE3LineLength_Type(Unsigned32):
    """Custom type mscLpE3LineLength based on Unsigned32"""
    defaultValue = 1

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 300),
    )


_MscLpE3LineLength_Type.__name__ = "Unsigned32"
_MscLpE3LineLength_Object = MibTableColumn
mscLpE3LineLength = _MscLpE3LineLength_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 10, 1, 1),
    _MscLpE3LineLength_Type()
)
mscLpE3LineLength.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3LineLength.setStatus("mandatory")


class _MscLpE3ClockingSource_Type(Integer32):
    """Custom type mscLpE3ClockingSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("line", 1),
          ("local", 0),
          ("module", 2),
          ("otherPort", 4))
    )


_MscLpE3ClockingSource_Type.__name__ = "Integer32"
_MscLpE3ClockingSource_Object = MibTableColumn
mscLpE3ClockingSource = _MscLpE3ClockingSource_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 10, 1, 2),
    _MscLpE3ClockingSource_Type()
)
mscLpE3ClockingSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3ClockingSource.setStatus("mandatory")
_MscLpE3ApplicationFramerName_Type = Link
_MscLpE3ApplicationFramerName_Object = MibTableColumn
mscLpE3ApplicationFramerName = _MscLpE3ApplicationFramerName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 10, 1, 3),
    _MscLpE3ApplicationFramerName_Type()
)
mscLpE3ApplicationFramerName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3ApplicationFramerName.setStatus("mandatory")


class _MscLpE3Mapping_Type(Integer32):
    """Custom type mscLpE3Mapping based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("direct", 0),
          ("plcp", 1))
    )


_MscLpE3Mapping_Type.__name__ = "Integer32"
_MscLpE3Mapping_Object = MibTableColumn
mscLpE3Mapping = _MscLpE3Mapping_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 10, 1, 4),
    _MscLpE3Mapping_Type()
)
mscLpE3Mapping.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3Mapping.setStatus("mandatory")


class _MscLpE3Framing_Type(Integer32):
    """Custom type mscLpE3Framing based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("g751", 0),
          ("g832", 1))
    )


_MscLpE3Framing_Type.__name__ = "Integer32"
_MscLpE3Framing_Object = MibTableColumn
mscLpE3Framing = _MscLpE3Framing_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 10, 1, 5),
    _MscLpE3Framing_Type()
)
mscLpE3Framing.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3Framing.setStatus("mandatory")


class _MscLpE3LinkAlarmActivationThreshold_Type(Unsigned32):
    """Custom type mscLpE3LinkAlarmActivationThreshold based on Unsigned32"""
    defaultValue = 2200

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(100, 2600),
    )


_MscLpE3LinkAlarmActivationThreshold_Type.__name__ = "Unsigned32"
_MscLpE3LinkAlarmActivationThreshold_Object = MibTableColumn
mscLpE3LinkAlarmActivationThreshold = _MscLpE3LinkAlarmActivationThreshold_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 10, 1, 6),
    _MscLpE3LinkAlarmActivationThreshold_Type()
)
mscLpE3LinkAlarmActivationThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3LinkAlarmActivationThreshold.setStatus("mandatory")


class _MscLpE3LinkAlarmScanInterval_Type(Unsigned32):
    """Custom type mscLpE3LinkAlarmScanInterval based on Unsigned32"""
    defaultValue = 200

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(50, 250),
    )


_MscLpE3LinkAlarmScanInterval_Type.__name__ = "Unsigned32"
_MscLpE3LinkAlarmScanInterval_Object = MibTableColumn
mscLpE3LinkAlarmScanInterval = _MscLpE3LinkAlarmScanInterval_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 10, 1, 7),
    _MscLpE3LinkAlarmScanInterval_Type()
)
mscLpE3LinkAlarmScanInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3LinkAlarmScanInterval.setStatus("mandatory")
_MscLpE3CidDataTable_Object = MibTable
mscLpE3CidDataTable = _MscLpE3CidDataTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 11)
)
if mibBuilder.loadTexts:
    mscLpE3CidDataTable.setStatus("mandatory")
_MscLpE3CidDataEntry_Object = MibTableRow
mscLpE3CidDataEntry = _MscLpE3CidDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 11, 1)
)
mscLpE3CidDataEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
)
if mibBuilder.loadTexts:
    mscLpE3CidDataEntry.setStatus("mandatory")


class _MscLpE3CustomerIdentifier_Type(Unsigned32):
    """Custom type mscLpE3CustomerIdentifier based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 8191),
    )


_MscLpE3CustomerIdentifier_Type.__name__ = "Unsigned32"
_MscLpE3CustomerIdentifier_Object = MibTableColumn
mscLpE3CustomerIdentifier = _MscLpE3CustomerIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 11, 1, 1),
    _MscLpE3CustomerIdentifier_Type()
)
mscLpE3CustomerIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3CustomerIdentifier.setStatus("mandatory")
_MscLpE3AdminInfoTable_Object = MibTable
mscLpE3AdminInfoTable = _MscLpE3AdminInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 12)
)
if mibBuilder.loadTexts:
    mscLpE3AdminInfoTable.setStatus("mandatory")
_MscLpE3AdminInfoEntry_Object = MibTableRow
mscLpE3AdminInfoEntry = _MscLpE3AdminInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 12, 1)
)
mscLpE3AdminInfoEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
)
if mibBuilder.loadTexts:
    mscLpE3AdminInfoEntry.setStatus("mandatory")


class _MscLpE3Vendor_Type(AsciiString):
    """Custom type mscLpE3Vendor based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_MscLpE3Vendor_Type.__name__ = "AsciiString"
_MscLpE3Vendor_Object = MibTableColumn
mscLpE3Vendor = _MscLpE3Vendor_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 12, 1, 1),
    _MscLpE3Vendor_Type()
)
mscLpE3Vendor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3Vendor.setStatus("mandatory")


class _MscLpE3CommentText_Type(AsciiString):
    """Custom type mscLpE3CommentText based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 60),
    )


_MscLpE3CommentText_Type.__name__ = "AsciiString"
_MscLpE3CommentText_Object = MibTableColumn
mscLpE3CommentText = _MscLpE3CommentText_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 12, 1, 2),
    _MscLpE3CommentText_Type()
)
mscLpE3CommentText.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3CommentText.setStatus("mandatory")
_MscLpE3IfEntryTable_Object = MibTable
mscLpE3IfEntryTable = _MscLpE3IfEntryTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 13)
)
if mibBuilder.loadTexts:
    mscLpE3IfEntryTable.setStatus("mandatory")
_MscLpE3IfEntryEntry_Object = MibTableRow
mscLpE3IfEntryEntry = _MscLpE3IfEntryEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 13, 1)
)
mscLpE3IfEntryEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
)
if mibBuilder.loadTexts:
    mscLpE3IfEntryEntry.setStatus("mandatory")


class _MscLpE3IfAdminStatus_Type(Integer32):
    """Custom type mscLpE3IfAdminStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpE3IfAdminStatus_Type.__name__ = "Integer32"
_MscLpE3IfAdminStatus_Object = MibTableColumn
mscLpE3IfAdminStatus = _MscLpE3IfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 13, 1, 1),
    _MscLpE3IfAdminStatus_Type()
)
mscLpE3IfAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE3IfAdminStatus.setStatus("mandatory")


class _MscLpE3IfIndex_Type(InterfaceIndex):
    """Custom type mscLpE3IfIndex based on InterfaceIndex"""
    subtypeSpec = InterfaceIndex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_MscLpE3IfIndex_Type.__name__ = "InterfaceIndex"
_MscLpE3IfIndex_Object = MibTableColumn
mscLpE3IfIndex = _MscLpE3IfIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 13, 1, 2),
    _MscLpE3IfIndex_Type()
)
mscLpE3IfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3IfIndex.setStatus("mandatory")
_MscLpE3OperStatusTable_Object = MibTable
mscLpE3OperStatusTable = _MscLpE3OperStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 14)
)
if mibBuilder.loadTexts:
    mscLpE3OperStatusTable.setStatus("mandatory")
_MscLpE3OperStatusEntry_Object = MibTableRow
mscLpE3OperStatusEntry = _MscLpE3OperStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 14, 1)
)
mscLpE3OperStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
)
if mibBuilder.loadTexts:
    mscLpE3OperStatusEntry.setStatus("mandatory")


class _MscLpE3SnmpOperStatus_Type(Integer32):
    """Custom type mscLpE3SnmpOperStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpE3SnmpOperStatus_Type.__name__ = "Integer32"
_MscLpE3SnmpOperStatus_Object = MibTableColumn
mscLpE3SnmpOperStatus = _MscLpE3SnmpOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 14, 1, 1),
    _MscLpE3SnmpOperStatus_Type()
)
mscLpE3SnmpOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3SnmpOperStatus.setStatus("mandatory")
_MscLpE3StateTable_Object = MibTable
mscLpE3StateTable = _MscLpE3StateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 15)
)
if mibBuilder.loadTexts:
    mscLpE3StateTable.setStatus("mandatory")
_MscLpE3StateEntry_Object = MibTableRow
mscLpE3StateEntry = _MscLpE3StateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 15, 1)
)
mscLpE3StateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
)
if mibBuilder.loadTexts:
    mscLpE3StateEntry.setStatus("mandatory")


class _MscLpE3AdminState_Type(Integer32):
    """Custom type mscLpE3AdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpE3AdminState_Type.__name__ = "Integer32"
_MscLpE3AdminState_Object = MibTableColumn
mscLpE3AdminState = _MscLpE3AdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 15, 1, 1),
    _MscLpE3AdminState_Type()
)
mscLpE3AdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3AdminState.setStatus("mandatory")


class _MscLpE3OperationalState_Type(Integer32):
    """Custom type mscLpE3OperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpE3OperationalState_Type.__name__ = "Integer32"
_MscLpE3OperationalState_Object = MibTableColumn
mscLpE3OperationalState = _MscLpE3OperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 15, 1, 2),
    _MscLpE3OperationalState_Type()
)
mscLpE3OperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3OperationalState.setStatus("mandatory")


class _MscLpE3UsageState_Type(Integer32):
    """Custom type mscLpE3UsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpE3UsageState_Type.__name__ = "Integer32"
_MscLpE3UsageState_Object = MibTableColumn
mscLpE3UsageState = _MscLpE3UsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 15, 1, 3),
    _MscLpE3UsageState_Type()
)
mscLpE3UsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3UsageState.setStatus("mandatory")


class _MscLpE3AvailabilityStatus_Type(OctetString):
    """Custom type mscLpE3AvailabilityStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_MscLpE3AvailabilityStatus_Type.__name__ = "OctetString"
_MscLpE3AvailabilityStatus_Object = MibTableColumn
mscLpE3AvailabilityStatus = _MscLpE3AvailabilityStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 15, 1, 4),
    _MscLpE3AvailabilityStatus_Type()
)
mscLpE3AvailabilityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3AvailabilityStatus.setStatus("mandatory")


class _MscLpE3ProceduralStatus_Type(OctetString):
    """Custom type mscLpE3ProceduralStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpE3ProceduralStatus_Type.__name__ = "OctetString"
_MscLpE3ProceduralStatus_Object = MibTableColumn
mscLpE3ProceduralStatus = _MscLpE3ProceduralStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 15, 1, 5),
    _MscLpE3ProceduralStatus_Type()
)
mscLpE3ProceduralStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3ProceduralStatus.setStatus("mandatory")


class _MscLpE3ControlStatus_Type(OctetString):
    """Custom type mscLpE3ControlStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpE3ControlStatus_Type.__name__ = "OctetString"
_MscLpE3ControlStatus_Object = MibTableColumn
mscLpE3ControlStatus = _MscLpE3ControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 15, 1, 6),
    _MscLpE3ControlStatus_Type()
)
mscLpE3ControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3ControlStatus.setStatus("mandatory")


class _MscLpE3AlarmStatus_Type(OctetString):
    """Custom type mscLpE3AlarmStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpE3AlarmStatus_Type.__name__ = "OctetString"
_MscLpE3AlarmStatus_Object = MibTableColumn
mscLpE3AlarmStatus = _MscLpE3AlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 15, 1, 7),
    _MscLpE3AlarmStatus_Type()
)
mscLpE3AlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3AlarmStatus.setStatus("mandatory")


class _MscLpE3StandbyStatus_Type(Integer32):
    """Custom type mscLpE3StandbyStatus based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              15)
        )
    )
    namedValues = NamedValues(
        *(("coldStandby", 1),
          ("hotStandby", 0),
          ("notSet", 15),
          ("providingService", 2))
    )


_MscLpE3StandbyStatus_Type.__name__ = "Integer32"
_MscLpE3StandbyStatus_Object = MibTableColumn
mscLpE3StandbyStatus = _MscLpE3StandbyStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 15, 1, 8),
    _MscLpE3StandbyStatus_Type()
)
mscLpE3StandbyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3StandbyStatus.setStatus("mandatory")


class _MscLpE3UnknownStatus_Type(Integer32):
    """Custom type mscLpE3UnknownStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_MscLpE3UnknownStatus_Type.__name__ = "Integer32"
_MscLpE3UnknownStatus_Object = MibTableColumn
mscLpE3UnknownStatus = _MscLpE3UnknownStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 15, 1, 9),
    _MscLpE3UnknownStatus_Type()
)
mscLpE3UnknownStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3UnknownStatus.setStatus("mandatory")
_MscLpE3OperTable_Object = MibTable
mscLpE3OperTable = _MscLpE3OperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 16)
)
if mibBuilder.loadTexts:
    mscLpE3OperTable.setStatus("mandatory")
_MscLpE3OperEntry_Object = MibTableRow
mscLpE3OperEntry = _MscLpE3OperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 16, 1)
)
mscLpE3OperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
)
if mibBuilder.loadTexts:
    mscLpE3OperEntry.setStatus("mandatory")


class _MscLpE3LosAlarm_Type(Integer32):
    """Custom type mscLpE3LosAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpE3LosAlarm_Type.__name__ = "Integer32"
_MscLpE3LosAlarm_Object = MibTableColumn
mscLpE3LosAlarm = _MscLpE3LosAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 16, 1, 1),
    _MscLpE3LosAlarm_Type()
)
mscLpE3LosAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3LosAlarm.setStatus("mandatory")


class _MscLpE3LofAlarm_Type(Integer32):
    """Custom type mscLpE3LofAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpE3LofAlarm_Type.__name__ = "Integer32"
_MscLpE3LofAlarm_Object = MibTableColumn
mscLpE3LofAlarm = _MscLpE3LofAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 16, 1, 2),
    _MscLpE3LofAlarm_Type()
)
mscLpE3LofAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3LofAlarm.setStatus("mandatory")


class _MscLpE3RxAisAlarm_Type(Integer32):
    """Custom type mscLpE3RxAisAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpE3RxAisAlarm_Type.__name__ = "Integer32"
_MscLpE3RxAisAlarm_Object = MibTableColumn
mscLpE3RxAisAlarm = _MscLpE3RxAisAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 16, 1, 3),
    _MscLpE3RxAisAlarm_Type()
)
mscLpE3RxAisAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3RxAisAlarm.setStatus("mandatory")


class _MscLpE3RxRaiAlarm_Type(Integer32):
    """Custom type mscLpE3RxRaiAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpE3RxRaiAlarm_Type.__name__ = "Integer32"
_MscLpE3RxRaiAlarm_Object = MibTableColumn
mscLpE3RxRaiAlarm = _MscLpE3RxRaiAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 16, 1, 4),
    _MscLpE3RxRaiAlarm_Type()
)
mscLpE3RxRaiAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3RxRaiAlarm.setStatus("mandatory")


class _MscLpE3TxAis_Type(Integer32):
    """Custom type mscLpE3TxAis based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpE3TxAis_Type.__name__ = "Integer32"
_MscLpE3TxAis_Object = MibTableColumn
mscLpE3TxAis = _MscLpE3TxAis_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 16, 1, 5),
    _MscLpE3TxAis_Type()
)
mscLpE3TxAis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3TxAis.setStatus("mandatory")


class _MscLpE3TxRai_Type(Integer32):
    """Custom type mscLpE3TxRai based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpE3TxRai_Type.__name__ = "Integer32"
_MscLpE3TxRai_Object = MibTableColumn
mscLpE3TxRai = _MscLpE3TxRai_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 16, 1, 6),
    _MscLpE3TxRai_Type()
)
mscLpE3TxRai.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3TxRai.setStatus("mandatory")
_MscLpE3StatsTable_Object = MibTable
mscLpE3StatsTable = _MscLpE3StatsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17)
)
if mibBuilder.loadTexts:
    mscLpE3StatsTable.setStatus("mandatory")
_MscLpE3StatsEntry_Object = MibTableRow
mscLpE3StatsEntry = _MscLpE3StatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1)
)
mscLpE3StatsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE3Index"),
)
if mibBuilder.loadTexts:
    mscLpE3StatsEntry.setStatus("mandatory")
_MscLpE3RunningTime_Type = Counter32
_MscLpE3RunningTime_Object = MibTableColumn
mscLpE3RunningTime = _MscLpE3RunningTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 1),
    _MscLpE3RunningTime_Type()
)
mscLpE3RunningTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3RunningTime.setStatus("mandatory")
_MscLpE3ErrorFreeSec_Type = Counter32
_MscLpE3ErrorFreeSec_Object = MibTableColumn
mscLpE3ErrorFreeSec = _MscLpE3ErrorFreeSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 2),
    _MscLpE3ErrorFreeSec_Type()
)
mscLpE3ErrorFreeSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3ErrorFreeSec.setStatus("mandatory")
_MscLpE3LineCodeViolations_Type = Counter32
_MscLpE3LineCodeViolations_Object = MibTableColumn
mscLpE3LineCodeViolations = _MscLpE3LineCodeViolations_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 3),
    _MscLpE3LineCodeViolations_Type()
)
mscLpE3LineCodeViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3LineCodeViolations.setStatus("mandatory")
_MscLpE3LineErroredSec_Type = Counter32
_MscLpE3LineErroredSec_Object = MibTableColumn
mscLpE3LineErroredSec = _MscLpE3LineErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 4),
    _MscLpE3LineErroredSec_Type()
)
mscLpE3LineErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3LineErroredSec.setStatus("mandatory")
_MscLpE3LineSevErroredSec_Type = Counter32
_MscLpE3LineSevErroredSec_Object = MibTableColumn
mscLpE3LineSevErroredSec = _MscLpE3LineSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 5),
    _MscLpE3LineSevErroredSec_Type()
)
mscLpE3LineSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3LineSevErroredSec.setStatus("mandatory")
_MscLpE3LineLosSec_Type = Counter32
_MscLpE3LineLosSec_Object = MibTableColumn
mscLpE3LineLosSec = _MscLpE3LineLosSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 6),
    _MscLpE3LineLosSec_Type()
)
mscLpE3LineLosSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3LineLosSec.setStatus("mandatory")
_MscLpE3LineFailures_Type = Counter32
_MscLpE3LineFailures_Object = MibTableColumn
mscLpE3LineFailures = _MscLpE3LineFailures_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 7),
    _MscLpE3LineFailures_Type()
)
mscLpE3LineFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3LineFailures.setStatus("mandatory")
_MscLpE3PathCodeViolations_Type = Counter32
_MscLpE3PathCodeViolations_Object = MibTableColumn
mscLpE3PathCodeViolations = _MscLpE3PathCodeViolations_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 8),
    _MscLpE3PathCodeViolations_Type()
)
mscLpE3PathCodeViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3PathCodeViolations.setStatus("mandatory")
_MscLpE3PathErroredSec_Type = Counter32
_MscLpE3PathErroredSec_Object = MibTableColumn
mscLpE3PathErroredSec = _MscLpE3PathErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 9),
    _MscLpE3PathErroredSec_Type()
)
mscLpE3PathErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3PathErroredSec.setStatus("mandatory")
_MscLpE3PathSevErroredSec_Type = Counter32
_MscLpE3PathSevErroredSec_Object = MibTableColumn
mscLpE3PathSevErroredSec = _MscLpE3PathSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 10),
    _MscLpE3PathSevErroredSec_Type()
)
mscLpE3PathSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3PathSevErroredSec.setStatus("mandatory")
_MscLpE3PathSefAisSec_Type = Counter32
_MscLpE3PathSefAisSec_Object = MibTableColumn
mscLpE3PathSefAisSec = _MscLpE3PathSefAisSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 11),
    _MscLpE3PathSefAisSec_Type()
)
mscLpE3PathSefAisSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3PathSefAisSec.setStatus("mandatory")
_MscLpE3PathUnavailSec_Type = Counter32
_MscLpE3PathUnavailSec_Object = MibTableColumn
mscLpE3PathUnavailSec = _MscLpE3PathUnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 12),
    _MscLpE3PathUnavailSec_Type()
)
mscLpE3PathUnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3PathUnavailSec.setStatus("mandatory")
_MscLpE3PathFailures_Type = Counter32
_MscLpE3PathFailures_Object = MibTableColumn
mscLpE3PathFailures = _MscLpE3PathFailures_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 6, 17, 1, 13),
    _MscLpE3PathFailures_Type()
)
mscLpE3PathFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE3PathFailures.setStatus("mandatory")
_MscLpDS1_ObjectIdentity = ObjectIdentity
mscLpDS1 = _MscLpDS1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7)
)
_MscLpDS1RowStatusTable_Object = MibTable
mscLpDS1RowStatusTable = _MscLpDS1RowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 1)
)
if mibBuilder.loadTexts:
    mscLpDS1RowStatusTable.setStatus("mandatory")
_MscLpDS1RowStatusEntry_Object = MibTableRow
mscLpDS1RowStatusEntry = _MscLpDS1RowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 1, 1)
)
mscLpDS1RowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
)
if mibBuilder.loadTexts:
    mscLpDS1RowStatusEntry.setStatus("mandatory")
_MscLpDS1RowStatus_Type = RowStatus
_MscLpDS1RowStatus_Object = MibTableColumn
mscLpDS1RowStatus = _MscLpDS1RowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 1, 1, 1),
    _MscLpDS1RowStatus_Type()
)
mscLpDS1RowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1RowStatus.setStatus("mandatory")
_MscLpDS1ComponentName_Type = DisplayString
_MscLpDS1ComponentName_Object = MibTableColumn
mscLpDS1ComponentName = _MscLpDS1ComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 1, 1, 2),
    _MscLpDS1ComponentName_Type()
)
mscLpDS1ComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ComponentName.setStatus("mandatory")
_MscLpDS1StorageType_Type = StorageType
_MscLpDS1StorageType_Object = MibTableColumn
mscLpDS1StorageType = _MscLpDS1StorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 1, 1, 4),
    _MscLpDS1StorageType_Type()
)
mscLpDS1StorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1StorageType.setStatus("mandatory")


class _MscLpDS1Index_Type(Integer32):
    """Custom type mscLpDS1Index based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_MscLpDS1Index_Type.__name__ = "Integer32"
_MscLpDS1Index_Object = MibTableColumn
mscLpDS1Index = _MscLpDS1Index_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 1, 1, 10),
    _MscLpDS1Index_Type()
)
mscLpDS1Index.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS1Index.setStatus("mandatory")
_MscLpDS1Chan_ObjectIdentity = ObjectIdentity
mscLpDS1Chan = _MscLpDS1Chan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2)
)
_MscLpDS1ChanRowStatusTable_Object = MibTable
mscLpDS1ChanRowStatusTable = _MscLpDS1ChanRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 1)
)
if mibBuilder.loadTexts:
    mscLpDS1ChanRowStatusTable.setStatus("mandatory")
_MscLpDS1ChanRowStatusEntry_Object = MibTableRow
mscLpDS1ChanRowStatusEntry = _MscLpDS1ChanRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 1, 1)
)
mscLpDS1ChanRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1ChanRowStatusEntry.setStatus("mandatory")
_MscLpDS1ChanRowStatus_Type = RowStatus
_MscLpDS1ChanRowStatus_Object = MibTableColumn
mscLpDS1ChanRowStatus = _MscLpDS1ChanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 1, 1, 1),
    _MscLpDS1ChanRowStatus_Type()
)
mscLpDS1ChanRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanRowStatus.setStatus("mandatory")
_MscLpDS1ChanComponentName_Type = DisplayString
_MscLpDS1ChanComponentName_Object = MibTableColumn
mscLpDS1ChanComponentName = _MscLpDS1ChanComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 1, 1, 2),
    _MscLpDS1ChanComponentName_Type()
)
mscLpDS1ChanComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanComponentName.setStatus("mandatory")
_MscLpDS1ChanStorageType_Type = StorageType
_MscLpDS1ChanStorageType_Object = MibTableColumn
mscLpDS1ChanStorageType = _MscLpDS1ChanStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 1, 1, 4),
    _MscLpDS1ChanStorageType_Type()
)
mscLpDS1ChanStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanStorageType.setStatus("mandatory")


class _MscLpDS1ChanIndex_Type(Integer32):
    """Custom type mscLpDS1ChanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 24),
    )


_MscLpDS1ChanIndex_Type.__name__ = "Integer32"
_MscLpDS1ChanIndex_Object = MibTableColumn
mscLpDS1ChanIndex = _MscLpDS1ChanIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 1, 1, 10),
    _MscLpDS1ChanIndex_Type()
)
mscLpDS1ChanIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS1ChanIndex.setStatus("mandatory")
_MscLpDS1ChanTest_ObjectIdentity = ObjectIdentity
mscLpDS1ChanTest = _MscLpDS1ChanTest_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2)
)
_MscLpDS1ChanTestRowStatusTable_Object = MibTable
mscLpDS1ChanTestRowStatusTable = _MscLpDS1ChanTestRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 1)
)
if mibBuilder.loadTexts:
    mscLpDS1ChanTestRowStatusTable.setStatus("mandatory")
_MscLpDS1ChanTestRowStatusEntry_Object = MibTableRow
mscLpDS1ChanTestRowStatusEntry = _MscLpDS1ChanTestRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 1, 1)
)
mscLpDS1ChanTestRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1ChanTestRowStatusEntry.setStatus("mandatory")
_MscLpDS1ChanTestRowStatus_Type = RowStatus
_MscLpDS1ChanTestRowStatus_Object = MibTableColumn
mscLpDS1ChanTestRowStatus = _MscLpDS1ChanTestRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 1, 1, 1),
    _MscLpDS1ChanTestRowStatus_Type()
)
mscLpDS1ChanTestRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestRowStatus.setStatus("mandatory")
_MscLpDS1ChanTestComponentName_Type = DisplayString
_MscLpDS1ChanTestComponentName_Object = MibTableColumn
mscLpDS1ChanTestComponentName = _MscLpDS1ChanTestComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 1, 1, 2),
    _MscLpDS1ChanTestComponentName_Type()
)
mscLpDS1ChanTestComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestComponentName.setStatus("mandatory")
_MscLpDS1ChanTestStorageType_Type = StorageType
_MscLpDS1ChanTestStorageType_Object = MibTableColumn
mscLpDS1ChanTestStorageType = _MscLpDS1ChanTestStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 1, 1, 4),
    _MscLpDS1ChanTestStorageType_Type()
)
mscLpDS1ChanTestStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestStorageType.setStatus("mandatory")
_MscLpDS1ChanTestIndex_Type = NonReplicated
_MscLpDS1ChanTestIndex_Object = MibTableColumn
mscLpDS1ChanTestIndex = _MscLpDS1ChanTestIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 1, 1, 10),
    _MscLpDS1ChanTestIndex_Type()
)
mscLpDS1ChanTestIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestIndex.setStatus("mandatory")
_MscLpDS1ChanTestStateTable_Object = MibTable
mscLpDS1ChanTestStateTable = _MscLpDS1ChanTestStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 10)
)
if mibBuilder.loadTexts:
    mscLpDS1ChanTestStateTable.setStatus("mandatory")
_MscLpDS1ChanTestStateEntry_Object = MibTableRow
mscLpDS1ChanTestStateEntry = _MscLpDS1ChanTestStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 10, 1)
)
mscLpDS1ChanTestStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1ChanTestStateEntry.setStatus("mandatory")


class _MscLpDS1ChanTestAdminState_Type(Integer32):
    """Custom type mscLpDS1ChanTestAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpDS1ChanTestAdminState_Type.__name__ = "Integer32"
_MscLpDS1ChanTestAdminState_Object = MibTableColumn
mscLpDS1ChanTestAdminState = _MscLpDS1ChanTestAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 10, 1, 1),
    _MscLpDS1ChanTestAdminState_Type()
)
mscLpDS1ChanTestAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestAdminState.setStatus("mandatory")


class _MscLpDS1ChanTestOperationalState_Type(Integer32):
    """Custom type mscLpDS1ChanTestOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpDS1ChanTestOperationalState_Type.__name__ = "Integer32"
_MscLpDS1ChanTestOperationalState_Object = MibTableColumn
mscLpDS1ChanTestOperationalState = _MscLpDS1ChanTestOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 10, 1, 2),
    _MscLpDS1ChanTestOperationalState_Type()
)
mscLpDS1ChanTestOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestOperationalState.setStatus("mandatory")


class _MscLpDS1ChanTestUsageState_Type(Integer32):
    """Custom type mscLpDS1ChanTestUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpDS1ChanTestUsageState_Type.__name__ = "Integer32"
_MscLpDS1ChanTestUsageState_Object = MibTableColumn
mscLpDS1ChanTestUsageState = _MscLpDS1ChanTestUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 10, 1, 3),
    _MscLpDS1ChanTestUsageState_Type()
)
mscLpDS1ChanTestUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestUsageState.setStatus("mandatory")
_MscLpDS1ChanTestSetupTable_Object = MibTable
mscLpDS1ChanTestSetupTable = _MscLpDS1ChanTestSetupTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 11)
)
if mibBuilder.loadTexts:
    mscLpDS1ChanTestSetupTable.setStatus("mandatory")
_MscLpDS1ChanTestSetupEntry_Object = MibTableRow
mscLpDS1ChanTestSetupEntry = _MscLpDS1ChanTestSetupEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 11, 1)
)
mscLpDS1ChanTestSetupEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1ChanTestSetupEntry.setStatus("mandatory")


class _MscLpDS1ChanTestPurpose_Type(AsciiString):
    """Custom type mscLpDS1ChanTestPurpose based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_MscLpDS1ChanTestPurpose_Type.__name__ = "AsciiString"
_MscLpDS1ChanTestPurpose_Object = MibTableColumn
mscLpDS1ChanTestPurpose = _MscLpDS1ChanTestPurpose_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 11, 1, 1),
    _MscLpDS1ChanTestPurpose_Type()
)
mscLpDS1ChanTestPurpose.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestPurpose.setStatus("mandatory")


class _MscLpDS1ChanTestType_Type(Integer32):
    """Custom type mscLpDS1ChanTestType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("card", 0),
          ("externalLoop", 4),
          ("localLoop", 2),
          ("manual", 1),
          ("payloadLoop", 5),
          ("pn127RemoteLoop", 8),
          ("remoteLoop", 3),
          ("remoteLoopThisTrib", 6),
          ("v54RemoteLoop", 7))
    )


_MscLpDS1ChanTestType_Type.__name__ = "Integer32"
_MscLpDS1ChanTestType_Object = MibTableColumn
mscLpDS1ChanTestType = _MscLpDS1ChanTestType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 11, 1, 2),
    _MscLpDS1ChanTestType_Type()
)
mscLpDS1ChanTestType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestType.setStatus("mandatory")


class _MscLpDS1ChanTestFrmSize_Type(Unsigned32):
    """Custom type mscLpDS1ChanTestFrmSize based on Unsigned32"""
    defaultValue = 1024

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 4096),
    )


_MscLpDS1ChanTestFrmSize_Type.__name__ = "Unsigned32"
_MscLpDS1ChanTestFrmSize_Object = MibTableColumn
mscLpDS1ChanTestFrmSize = _MscLpDS1ChanTestFrmSize_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 11, 1, 3),
    _MscLpDS1ChanTestFrmSize_Type()
)
mscLpDS1ChanTestFrmSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestFrmSize.setStatus("mandatory")


class _MscLpDS1ChanTestFrmPatternType_Type(Integer32):
    """Custom type mscLpDS1ChanTestFrmPatternType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ccitt32kBitPattern", 0),
          ("ccitt8MBitPattern", 1),
          ("customizedPattern", 2))
    )


_MscLpDS1ChanTestFrmPatternType_Type.__name__ = "Integer32"
_MscLpDS1ChanTestFrmPatternType_Object = MibTableColumn
mscLpDS1ChanTestFrmPatternType = _MscLpDS1ChanTestFrmPatternType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 11, 1, 4),
    _MscLpDS1ChanTestFrmPatternType_Type()
)
mscLpDS1ChanTestFrmPatternType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestFrmPatternType.setStatus("mandatory")


class _MscLpDS1ChanTestCustomizedPattern_Type(Hex):
    """Custom type mscLpDS1ChanTestCustomizedPattern based on Hex"""
    defaultValue = 1431655765

    subtypeSpec = Hex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpDS1ChanTestCustomizedPattern_Type.__name__ = "Hex"
_MscLpDS1ChanTestCustomizedPattern_Object = MibTableColumn
mscLpDS1ChanTestCustomizedPattern = _MscLpDS1ChanTestCustomizedPattern_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 11, 1, 5),
    _MscLpDS1ChanTestCustomizedPattern_Type()
)
mscLpDS1ChanTestCustomizedPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestCustomizedPattern.setStatus("mandatory")


class _MscLpDS1ChanTestDataStartDelay_Type(Unsigned32):
    """Custom type mscLpDS1ChanTestDataStartDelay based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1814400),
    )


_MscLpDS1ChanTestDataStartDelay_Type.__name__ = "Unsigned32"
_MscLpDS1ChanTestDataStartDelay_Object = MibTableColumn
mscLpDS1ChanTestDataStartDelay = _MscLpDS1ChanTestDataStartDelay_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 11, 1, 6),
    _MscLpDS1ChanTestDataStartDelay_Type()
)
mscLpDS1ChanTestDataStartDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestDataStartDelay.setStatus("mandatory")


class _MscLpDS1ChanTestDisplayInterval_Type(Unsigned32):
    """Custom type mscLpDS1ChanTestDisplayInterval based on Unsigned32"""
    defaultValue = 5

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30240),
    )


_MscLpDS1ChanTestDisplayInterval_Type.__name__ = "Unsigned32"
_MscLpDS1ChanTestDisplayInterval_Object = MibTableColumn
mscLpDS1ChanTestDisplayInterval = _MscLpDS1ChanTestDisplayInterval_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 11, 1, 7),
    _MscLpDS1ChanTestDisplayInterval_Type()
)
mscLpDS1ChanTestDisplayInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestDisplayInterval.setStatus("mandatory")


class _MscLpDS1ChanTestDuration_Type(Unsigned32):
    """Custom type mscLpDS1ChanTestDuration based on Unsigned32"""
    defaultValue = 1

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30240),
    )


_MscLpDS1ChanTestDuration_Type.__name__ = "Unsigned32"
_MscLpDS1ChanTestDuration_Object = MibTableColumn
mscLpDS1ChanTestDuration = _MscLpDS1ChanTestDuration_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 11, 1, 8),
    _MscLpDS1ChanTestDuration_Type()
)
mscLpDS1ChanTestDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestDuration.setStatus("mandatory")
_MscLpDS1ChanTestResultsTable_Object = MibTable
mscLpDS1ChanTestResultsTable = _MscLpDS1ChanTestResultsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12)
)
if mibBuilder.loadTexts:
    mscLpDS1ChanTestResultsTable.setStatus("mandatory")
_MscLpDS1ChanTestResultsEntry_Object = MibTableRow
mscLpDS1ChanTestResultsEntry = _MscLpDS1ChanTestResultsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1)
)
mscLpDS1ChanTestResultsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1ChanTestResultsEntry.setStatus("mandatory")
_MscLpDS1ChanTestElapsedTime_Type = Counter32
_MscLpDS1ChanTestElapsedTime_Object = MibTableColumn
mscLpDS1ChanTestElapsedTime = _MscLpDS1ChanTestElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1, 1),
    _MscLpDS1ChanTestElapsedTime_Type()
)
mscLpDS1ChanTestElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestElapsedTime.setStatus("mandatory")


class _MscLpDS1ChanTestTimeRemaining_Type(Unsigned32):
    """Custom type mscLpDS1ChanTestTimeRemaining based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpDS1ChanTestTimeRemaining_Type.__name__ = "Unsigned32"
_MscLpDS1ChanTestTimeRemaining_Object = MibTableColumn
mscLpDS1ChanTestTimeRemaining = _MscLpDS1ChanTestTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1, 2),
    _MscLpDS1ChanTestTimeRemaining_Type()
)
mscLpDS1ChanTestTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestTimeRemaining.setStatus("mandatory")


class _MscLpDS1ChanTestCauseOfTermination_Type(Integer32):
    """Custom type mscLpDS1ChanTestCauseOfTermination based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("hardwareReconfigured", 5),
          ("loopCodeSyncFailed", 6),
          ("neverStarted", 3),
          ("patternSyncFailed", 7),
          ("patternSyncLost", 8),
          ("stoppedByOperator", 1),
          ("testRunning", 4),
          ("testTimeExpired", 0),
          ("unknown", 2))
    )


_MscLpDS1ChanTestCauseOfTermination_Type.__name__ = "Integer32"
_MscLpDS1ChanTestCauseOfTermination_Object = MibTableColumn
mscLpDS1ChanTestCauseOfTermination = _MscLpDS1ChanTestCauseOfTermination_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1, 3),
    _MscLpDS1ChanTestCauseOfTermination_Type()
)
mscLpDS1ChanTestCauseOfTermination.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestCauseOfTermination.setStatus("mandatory")
_MscLpDS1ChanTestBitsTx_Type = PassportCounter64
_MscLpDS1ChanTestBitsTx_Object = MibTableColumn
mscLpDS1ChanTestBitsTx = _MscLpDS1ChanTestBitsTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1, 4),
    _MscLpDS1ChanTestBitsTx_Type()
)
mscLpDS1ChanTestBitsTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestBitsTx.setStatus("mandatory")
_MscLpDS1ChanTestBytesTx_Type = PassportCounter64
_MscLpDS1ChanTestBytesTx_Object = MibTableColumn
mscLpDS1ChanTestBytesTx = _MscLpDS1ChanTestBytesTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1, 5),
    _MscLpDS1ChanTestBytesTx_Type()
)
mscLpDS1ChanTestBytesTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestBytesTx.setStatus("mandatory")
_MscLpDS1ChanTestFrmTx_Type = PassportCounter64
_MscLpDS1ChanTestFrmTx_Object = MibTableColumn
mscLpDS1ChanTestFrmTx = _MscLpDS1ChanTestFrmTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1, 6),
    _MscLpDS1ChanTestFrmTx_Type()
)
mscLpDS1ChanTestFrmTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestFrmTx.setStatus("mandatory")
_MscLpDS1ChanTestBitsRx_Type = PassportCounter64
_MscLpDS1ChanTestBitsRx_Object = MibTableColumn
mscLpDS1ChanTestBitsRx = _MscLpDS1ChanTestBitsRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1, 7),
    _MscLpDS1ChanTestBitsRx_Type()
)
mscLpDS1ChanTestBitsRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestBitsRx.setStatus("mandatory")
_MscLpDS1ChanTestBytesRx_Type = PassportCounter64
_MscLpDS1ChanTestBytesRx_Object = MibTableColumn
mscLpDS1ChanTestBytesRx = _MscLpDS1ChanTestBytesRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1, 8),
    _MscLpDS1ChanTestBytesRx_Type()
)
mscLpDS1ChanTestBytesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestBytesRx.setStatus("mandatory")
_MscLpDS1ChanTestFrmRx_Type = PassportCounter64
_MscLpDS1ChanTestFrmRx_Object = MibTableColumn
mscLpDS1ChanTestFrmRx = _MscLpDS1ChanTestFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1, 9),
    _MscLpDS1ChanTestFrmRx_Type()
)
mscLpDS1ChanTestFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestFrmRx.setStatus("mandatory")
_MscLpDS1ChanTestErroredFrmRx_Type = PassportCounter64
_MscLpDS1ChanTestErroredFrmRx_Object = MibTableColumn
mscLpDS1ChanTestErroredFrmRx = _MscLpDS1ChanTestErroredFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1, 10),
    _MscLpDS1ChanTestErroredFrmRx_Type()
)
mscLpDS1ChanTestErroredFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestErroredFrmRx.setStatus("mandatory")


class _MscLpDS1ChanTestBitErrorRate_Type(AsciiString):
    """Custom type mscLpDS1ChanTestBitErrorRate based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )


_MscLpDS1ChanTestBitErrorRate_Type.__name__ = "AsciiString"
_MscLpDS1ChanTestBitErrorRate_Object = MibTableColumn
mscLpDS1ChanTestBitErrorRate = _MscLpDS1ChanTestBitErrorRate_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 2, 12, 1, 11),
    _MscLpDS1ChanTestBitErrorRate_Type()
)
mscLpDS1ChanTestBitErrorRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanTestBitErrorRate.setStatus("mandatory")
_MscLpDS1ChanCell_ObjectIdentity = ObjectIdentity
mscLpDS1ChanCell = _MscLpDS1ChanCell_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3)
)
_MscLpDS1ChanCellRowStatusTable_Object = MibTable
mscLpDS1ChanCellRowStatusTable = _MscLpDS1ChanCellRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 1)
)
if mibBuilder.loadTexts:
    mscLpDS1ChanCellRowStatusTable.setStatus("mandatory")
_MscLpDS1ChanCellRowStatusEntry_Object = MibTableRow
mscLpDS1ChanCellRowStatusEntry = _MscLpDS1ChanCellRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 1, 1)
)
mscLpDS1ChanCellRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanCellIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1ChanCellRowStatusEntry.setStatus("mandatory")
_MscLpDS1ChanCellRowStatus_Type = RowStatus
_MscLpDS1ChanCellRowStatus_Object = MibTableColumn
mscLpDS1ChanCellRowStatus = _MscLpDS1ChanCellRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 1, 1, 1),
    _MscLpDS1ChanCellRowStatus_Type()
)
mscLpDS1ChanCellRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanCellRowStatus.setStatus("mandatory")
_MscLpDS1ChanCellComponentName_Type = DisplayString
_MscLpDS1ChanCellComponentName_Object = MibTableColumn
mscLpDS1ChanCellComponentName = _MscLpDS1ChanCellComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 1, 1, 2),
    _MscLpDS1ChanCellComponentName_Type()
)
mscLpDS1ChanCellComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanCellComponentName.setStatus("mandatory")
_MscLpDS1ChanCellStorageType_Type = StorageType
_MscLpDS1ChanCellStorageType_Object = MibTableColumn
mscLpDS1ChanCellStorageType = _MscLpDS1ChanCellStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 1, 1, 4),
    _MscLpDS1ChanCellStorageType_Type()
)
mscLpDS1ChanCellStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanCellStorageType.setStatus("mandatory")
_MscLpDS1ChanCellIndex_Type = NonReplicated
_MscLpDS1ChanCellIndex_Object = MibTableColumn
mscLpDS1ChanCellIndex = _MscLpDS1ChanCellIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 1, 1, 10),
    _MscLpDS1ChanCellIndex_Type()
)
mscLpDS1ChanCellIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS1ChanCellIndex.setStatus("mandatory")
_MscLpDS1ChanCellProvTable_Object = MibTable
mscLpDS1ChanCellProvTable = _MscLpDS1ChanCellProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 10)
)
if mibBuilder.loadTexts:
    mscLpDS1ChanCellProvTable.setStatus("mandatory")
_MscLpDS1ChanCellProvEntry_Object = MibTableRow
mscLpDS1ChanCellProvEntry = _MscLpDS1ChanCellProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 10, 1)
)
mscLpDS1ChanCellProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanCellIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1ChanCellProvEntry.setStatus("mandatory")


class _MscLpDS1ChanCellAlarmActDelay_Type(Unsigned32):
    """Custom type mscLpDS1ChanCellAlarmActDelay based on Unsigned32"""
    defaultValue = 500

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2000),
    )


_MscLpDS1ChanCellAlarmActDelay_Type.__name__ = "Unsigned32"
_MscLpDS1ChanCellAlarmActDelay_Object = MibTableColumn
mscLpDS1ChanCellAlarmActDelay = _MscLpDS1ChanCellAlarmActDelay_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 10, 1, 1),
    _MscLpDS1ChanCellAlarmActDelay_Type()
)
mscLpDS1ChanCellAlarmActDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanCellAlarmActDelay.setStatus("mandatory")


class _MscLpDS1ChanCellScrambleCellPayload_Type(Integer32):
    """Custom type mscLpDS1ChanCellScrambleCellPayload based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpDS1ChanCellScrambleCellPayload_Type.__name__ = "Integer32"
_MscLpDS1ChanCellScrambleCellPayload_Object = MibTableColumn
mscLpDS1ChanCellScrambleCellPayload = _MscLpDS1ChanCellScrambleCellPayload_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 10, 1, 2),
    _MscLpDS1ChanCellScrambleCellPayload_Type()
)
mscLpDS1ChanCellScrambleCellPayload.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanCellScrambleCellPayload.setStatus("mandatory")


class _MscLpDS1ChanCellCorrectSingleBitHeaderErrors_Type(Integer32):
    """Custom type mscLpDS1ChanCellCorrectSingleBitHeaderErrors based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpDS1ChanCellCorrectSingleBitHeaderErrors_Type.__name__ = "Integer32"
_MscLpDS1ChanCellCorrectSingleBitHeaderErrors_Object = MibTableColumn
mscLpDS1ChanCellCorrectSingleBitHeaderErrors = _MscLpDS1ChanCellCorrectSingleBitHeaderErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 10, 1, 3),
    _MscLpDS1ChanCellCorrectSingleBitHeaderErrors_Type()
)
mscLpDS1ChanCellCorrectSingleBitHeaderErrors.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanCellCorrectSingleBitHeaderErrors.setStatus("mandatory")
_MscLpDS1ChanCellOperTable_Object = MibTable
mscLpDS1ChanCellOperTable = _MscLpDS1ChanCellOperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 11)
)
if mibBuilder.loadTexts:
    mscLpDS1ChanCellOperTable.setStatus("mandatory")
_MscLpDS1ChanCellOperEntry_Object = MibTableRow
mscLpDS1ChanCellOperEntry = _MscLpDS1ChanCellOperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 11, 1)
)
mscLpDS1ChanCellOperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanCellIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1ChanCellOperEntry.setStatus("mandatory")


class _MscLpDS1ChanCellLcdAlarm_Type(Integer32):
    """Custom type mscLpDS1ChanCellLcdAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS1ChanCellLcdAlarm_Type.__name__ = "Integer32"
_MscLpDS1ChanCellLcdAlarm_Object = MibTableColumn
mscLpDS1ChanCellLcdAlarm = _MscLpDS1ChanCellLcdAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 11, 1, 1),
    _MscLpDS1ChanCellLcdAlarm_Type()
)
mscLpDS1ChanCellLcdAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanCellLcdAlarm.setStatus("mandatory")
_MscLpDS1ChanCellStatsTable_Object = MibTable
mscLpDS1ChanCellStatsTable = _MscLpDS1ChanCellStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 12)
)
if mibBuilder.loadTexts:
    mscLpDS1ChanCellStatsTable.setStatus("mandatory")
_MscLpDS1ChanCellStatsEntry_Object = MibTableRow
mscLpDS1ChanCellStatsEntry = _MscLpDS1ChanCellStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 12, 1)
)
mscLpDS1ChanCellStatsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanCellIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1ChanCellStatsEntry.setStatus("mandatory")
_MscLpDS1ChanCellUncorrectableHecErrors_Type = Counter32
_MscLpDS1ChanCellUncorrectableHecErrors_Object = MibTableColumn
mscLpDS1ChanCellUncorrectableHecErrors = _MscLpDS1ChanCellUncorrectableHecErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 12, 1, 1),
    _MscLpDS1ChanCellUncorrectableHecErrors_Type()
)
mscLpDS1ChanCellUncorrectableHecErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanCellUncorrectableHecErrors.setStatus("mandatory")
_MscLpDS1ChanCellSevErroredSec_Type = Counter32
_MscLpDS1ChanCellSevErroredSec_Object = MibTableColumn
mscLpDS1ChanCellSevErroredSec = _MscLpDS1ChanCellSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 12, 1, 2),
    _MscLpDS1ChanCellSevErroredSec_Type()
)
mscLpDS1ChanCellSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanCellSevErroredSec.setStatus("mandatory")


class _MscLpDS1ChanCellReceiveCellUtilization_Type(Gauge32):
    """Custom type mscLpDS1ChanCellReceiveCellUtilization based on Gauge32"""
    defaultValue = 0

    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_MscLpDS1ChanCellReceiveCellUtilization_Type.__name__ = "Gauge32"
_MscLpDS1ChanCellReceiveCellUtilization_Object = MibTableColumn
mscLpDS1ChanCellReceiveCellUtilization = _MscLpDS1ChanCellReceiveCellUtilization_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 12, 1, 3),
    _MscLpDS1ChanCellReceiveCellUtilization_Type()
)
mscLpDS1ChanCellReceiveCellUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanCellReceiveCellUtilization.setStatus("mandatory")


class _MscLpDS1ChanCellTransmitCellUtilization_Type(Gauge32):
    """Custom type mscLpDS1ChanCellTransmitCellUtilization based on Gauge32"""
    defaultValue = 0

    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_MscLpDS1ChanCellTransmitCellUtilization_Type.__name__ = "Gauge32"
_MscLpDS1ChanCellTransmitCellUtilization_Object = MibTableColumn
mscLpDS1ChanCellTransmitCellUtilization = _MscLpDS1ChanCellTransmitCellUtilization_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 12, 1, 4),
    _MscLpDS1ChanCellTransmitCellUtilization_Type()
)
mscLpDS1ChanCellTransmitCellUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanCellTransmitCellUtilization.setStatus("mandatory")
_MscLpDS1ChanCellCorrectableHeaderErrors_Type = Counter32
_MscLpDS1ChanCellCorrectableHeaderErrors_Object = MibTableColumn
mscLpDS1ChanCellCorrectableHeaderErrors = _MscLpDS1ChanCellCorrectableHeaderErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 3, 12, 1, 5),
    _MscLpDS1ChanCellCorrectableHeaderErrors_Type()
)
mscLpDS1ChanCellCorrectableHeaderErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanCellCorrectableHeaderErrors.setStatus("mandatory")
_MscLpDS1ChanTc_ObjectIdentity = ObjectIdentity
mscLpDS1ChanTc = _MscLpDS1ChanTc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4)
)
_MscLpDS1ChanTcRowStatusTable_Object = MibTable
mscLpDS1ChanTcRowStatusTable = _MscLpDS1ChanTcRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 1)
)
if mibBuilder.loadTexts:
    mscLpDS1ChanTcRowStatusTable.setStatus("mandatory")
_MscLpDS1ChanTcRowStatusEntry_Object = MibTableRow
mscLpDS1ChanTcRowStatusEntry = _MscLpDS1ChanTcRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 1, 1)
)
mscLpDS1ChanTcRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanTcIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1ChanTcRowStatusEntry.setStatus("mandatory")
_MscLpDS1ChanTcRowStatus_Type = RowStatus
_MscLpDS1ChanTcRowStatus_Object = MibTableColumn
mscLpDS1ChanTcRowStatus = _MscLpDS1ChanTcRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 1, 1, 1),
    _MscLpDS1ChanTcRowStatus_Type()
)
mscLpDS1ChanTcRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanTcRowStatus.setStatus("mandatory")
_MscLpDS1ChanTcComponentName_Type = DisplayString
_MscLpDS1ChanTcComponentName_Object = MibTableColumn
mscLpDS1ChanTcComponentName = _MscLpDS1ChanTcComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 1, 1, 2),
    _MscLpDS1ChanTcComponentName_Type()
)
mscLpDS1ChanTcComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanTcComponentName.setStatus("mandatory")
_MscLpDS1ChanTcStorageType_Type = StorageType
_MscLpDS1ChanTcStorageType_Object = MibTableColumn
mscLpDS1ChanTcStorageType = _MscLpDS1ChanTcStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 1, 1, 4),
    _MscLpDS1ChanTcStorageType_Type()
)
mscLpDS1ChanTcStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanTcStorageType.setStatus("mandatory")
_MscLpDS1ChanTcIndex_Type = NonReplicated
_MscLpDS1ChanTcIndex_Object = MibTableColumn
mscLpDS1ChanTcIndex = _MscLpDS1ChanTcIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 1, 1, 10),
    _MscLpDS1ChanTcIndex_Type()
)
mscLpDS1ChanTcIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS1ChanTcIndex.setStatus("mandatory")
_MscLpDS1ChanTcProvTable_Object = MibTable
mscLpDS1ChanTcProvTable = _MscLpDS1ChanTcProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 10)
)
if mibBuilder.loadTexts:
    mscLpDS1ChanTcProvTable.setStatus("mandatory")
_MscLpDS1ChanTcProvEntry_Object = MibTableRow
mscLpDS1ChanTcProvEntry = _MscLpDS1ChanTcProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 10, 1)
)
mscLpDS1ChanTcProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanTcIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1ChanTcProvEntry.setStatus("mandatory")


class _MscLpDS1ChanTcReplacementData_Type(Hex):
    """Custom type mscLpDS1ChanTcReplacementData based on Hex"""
    defaultValue = 255

    subtypeSpec = Hex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_MscLpDS1ChanTcReplacementData_Type.__name__ = "Hex"
_MscLpDS1ChanTcReplacementData_Object = MibTableColumn
mscLpDS1ChanTcReplacementData = _MscLpDS1ChanTcReplacementData_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 10, 1, 1),
    _MscLpDS1ChanTcReplacementData_Type()
)
mscLpDS1ChanTcReplacementData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanTcReplacementData.setStatus("mandatory")


class _MscLpDS1ChanTcSignalOneDuration_Type(Unsigned32):
    """Custom type mscLpDS1ChanTcSignalOneDuration based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 60),
    )


_MscLpDS1ChanTcSignalOneDuration_Type.__name__ = "Unsigned32"
_MscLpDS1ChanTcSignalOneDuration_Object = MibTableColumn
mscLpDS1ChanTcSignalOneDuration = _MscLpDS1ChanTcSignalOneDuration_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 10, 1, 2),
    _MscLpDS1ChanTcSignalOneDuration_Type()
)
mscLpDS1ChanTcSignalOneDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanTcSignalOneDuration.setStatus("mandatory")
_MscLpDS1ChanTcOpTable_Object = MibTable
mscLpDS1ChanTcOpTable = _MscLpDS1ChanTcOpTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 11)
)
if mibBuilder.loadTexts:
    mscLpDS1ChanTcOpTable.setStatus("mandatory")
_MscLpDS1ChanTcOpEntry_Object = MibTableRow
mscLpDS1ChanTcOpEntry = _MscLpDS1ChanTcOpEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 11, 1)
)
mscLpDS1ChanTcOpEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanTcIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1ChanTcOpEntry.setStatus("mandatory")


class _MscLpDS1ChanTcIngressConditioning_Type(Integer32):
    """Custom type mscLpDS1ChanTcIngressConditioning based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpDS1ChanTcIngressConditioning_Type.__name__ = "Integer32"
_MscLpDS1ChanTcIngressConditioning_Object = MibTableColumn
mscLpDS1ChanTcIngressConditioning = _MscLpDS1ChanTcIngressConditioning_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 11, 1, 1),
    _MscLpDS1ChanTcIngressConditioning_Type()
)
mscLpDS1ChanTcIngressConditioning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanTcIngressConditioning.setStatus("mandatory")


class _MscLpDS1ChanTcEgressConditioning_Type(Integer32):
    """Custom type mscLpDS1ChanTcEgressConditioning based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpDS1ChanTcEgressConditioning_Type.__name__ = "Integer32"
_MscLpDS1ChanTcEgressConditioning_Object = MibTableColumn
mscLpDS1ChanTcEgressConditioning = _MscLpDS1ChanTcEgressConditioning_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 11, 1, 2),
    _MscLpDS1ChanTcEgressConditioning_Type()
)
mscLpDS1ChanTcEgressConditioning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanTcEgressConditioning.setStatus("mandatory")
_MscLpDS1ChanTcSigOneTable_Object = MibTable
mscLpDS1ChanTcSigOneTable = _MscLpDS1ChanTcSigOneTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 398)
)
if mibBuilder.loadTexts:
    mscLpDS1ChanTcSigOneTable.setStatus("mandatory")
_MscLpDS1ChanTcSigOneEntry_Object = MibTableRow
mscLpDS1ChanTcSigOneEntry = _MscLpDS1ChanTcSigOneEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 398, 1)
)
mscLpDS1ChanTcSigOneEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanTcIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanTcSigOneIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1ChanTcSigOneEntry.setStatus("mandatory")


class _MscLpDS1ChanTcSigOneIndex_Type(Integer32):
    """Custom type mscLpDS1ChanTcSigOneIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("a", 3),
          ("b", 2),
          ("c", 1),
          ("d", 0))
    )


_MscLpDS1ChanTcSigOneIndex_Type.__name__ = "Integer32"
_MscLpDS1ChanTcSigOneIndex_Object = MibTableColumn
mscLpDS1ChanTcSigOneIndex = _MscLpDS1ChanTcSigOneIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 398, 1, 1),
    _MscLpDS1ChanTcSigOneIndex_Type()
)
mscLpDS1ChanTcSigOneIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS1ChanTcSigOneIndex.setStatus("mandatory")


class _MscLpDS1ChanTcSigOneValue_Type(Unsigned32):
    """Custom type mscLpDS1ChanTcSigOneValue based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_MscLpDS1ChanTcSigOneValue_Type.__name__ = "Unsigned32"
_MscLpDS1ChanTcSigOneValue_Object = MibTableColumn
mscLpDS1ChanTcSigOneValue = _MscLpDS1ChanTcSigOneValue_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 398, 1, 2),
    _MscLpDS1ChanTcSigOneValue_Type()
)
mscLpDS1ChanTcSigOneValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanTcSigOneValue.setStatus("mandatory")
_MscLpDS1ChanTcSigTwoTable_Object = MibTable
mscLpDS1ChanTcSigTwoTable = _MscLpDS1ChanTcSigTwoTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 399)
)
if mibBuilder.loadTexts:
    mscLpDS1ChanTcSigTwoTable.setStatus("mandatory")
_MscLpDS1ChanTcSigTwoEntry_Object = MibTableRow
mscLpDS1ChanTcSigTwoEntry = _MscLpDS1ChanTcSigTwoEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 399, 1)
)
mscLpDS1ChanTcSigTwoEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanTcIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanTcSigTwoIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1ChanTcSigTwoEntry.setStatus("mandatory")


class _MscLpDS1ChanTcSigTwoIndex_Type(Integer32):
    """Custom type mscLpDS1ChanTcSigTwoIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("a", 3),
          ("b", 2),
          ("c", 1),
          ("d", 0))
    )


_MscLpDS1ChanTcSigTwoIndex_Type.__name__ = "Integer32"
_MscLpDS1ChanTcSigTwoIndex_Object = MibTableColumn
mscLpDS1ChanTcSigTwoIndex = _MscLpDS1ChanTcSigTwoIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 399, 1, 1),
    _MscLpDS1ChanTcSigTwoIndex_Type()
)
mscLpDS1ChanTcSigTwoIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS1ChanTcSigTwoIndex.setStatus("mandatory")


class _MscLpDS1ChanTcSigTwoValue_Type(Unsigned32):
    """Custom type mscLpDS1ChanTcSigTwoValue based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_MscLpDS1ChanTcSigTwoValue_Type.__name__ = "Unsigned32"
_MscLpDS1ChanTcSigTwoValue_Object = MibTableColumn
mscLpDS1ChanTcSigTwoValue = _MscLpDS1ChanTcSigTwoValue_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 4, 399, 1, 2),
    _MscLpDS1ChanTcSigTwoValue_Type()
)
mscLpDS1ChanTcSigTwoValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanTcSigTwoValue.setStatus("mandatory")
_MscLpDS1ChanProvTable_Object = MibTable
mscLpDS1ChanProvTable = _MscLpDS1ChanProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 10)
)
if mibBuilder.loadTexts:
    mscLpDS1ChanProvTable.setStatus("mandatory")
_MscLpDS1ChanProvEntry_Object = MibTableRow
mscLpDS1ChanProvEntry = _MscLpDS1ChanProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 10, 1)
)
mscLpDS1ChanProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1ChanProvEntry.setStatus("mandatory")


class _MscLpDS1ChanTimeslots_Type(OctetString):
    """Custom type mscLpDS1ChanTimeslots based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_MscLpDS1ChanTimeslots_Type.__name__ = "OctetString"
_MscLpDS1ChanTimeslots_Object = MibTableColumn
mscLpDS1ChanTimeslots = _MscLpDS1ChanTimeslots_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 10, 1, 1),
    _MscLpDS1ChanTimeslots_Type()
)
mscLpDS1ChanTimeslots.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanTimeslots.setStatus("mandatory")


class _MscLpDS1ChanTimeslotDataRate_Type(Integer32):
    """Custom type mscLpDS1ChanTimeslotDataRate based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("doNotOverride", 1),
          ("n56k", 0))
    )


_MscLpDS1ChanTimeslotDataRate_Type.__name__ = "Integer32"
_MscLpDS1ChanTimeslotDataRate_Object = MibTableColumn
mscLpDS1ChanTimeslotDataRate = _MscLpDS1ChanTimeslotDataRate_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 10, 1, 2),
    _MscLpDS1ChanTimeslotDataRate_Type()
)
mscLpDS1ChanTimeslotDataRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanTimeslotDataRate.setStatus("mandatory")
_MscLpDS1ChanApplicationFramerName_Type = Link
_MscLpDS1ChanApplicationFramerName_Object = MibTableColumn
mscLpDS1ChanApplicationFramerName = _MscLpDS1ChanApplicationFramerName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 10, 1, 3),
    _MscLpDS1ChanApplicationFramerName_Type()
)
mscLpDS1ChanApplicationFramerName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanApplicationFramerName.setStatus("mandatory")
_MscLpDS1ChanCidDataTable_Object = MibTable
mscLpDS1ChanCidDataTable = _MscLpDS1ChanCidDataTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 11)
)
if mibBuilder.loadTexts:
    mscLpDS1ChanCidDataTable.setStatus("mandatory")
_MscLpDS1ChanCidDataEntry_Object = MibTableRow
mscLpDS1ChanCidDataEntry = _MscLpDS1ChanCidDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 11, 1)
)
mscLpDS1ChanCidDataEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1ChanCidDataEntry.setStatus("mandatory")


class _MscLpDS1ChanCustomerIdentifier_Type(Unsigned32):
    """Custom type mscLpDS1ChanCustomerIdentifier based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 8191),
    )


_MscLpDS1ChanCustomerIdentifier_Type.__name__ = "Unsigned32"
_MscLpDS1ChanCustomerIdentifier_Object = MibTableColumn
mscLpDS1ChanCustomerIdentifier = _MscLpDS1ChanCustomerIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 11, 1, 1),
    _MscLpDS1ChanCustomerIdentifier_Type()
)
mscLpDS1ChanCustomerIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanCustomerIdentifier.setStatus("mandatory")
_MscLpDS1ChanIfEntryTable_Object = MibTable
mscLpDS1ChanIfEntryTable = _MscLpDS1ChanIfEntryTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 12)
)
if mibBuilder.loadTexts:
    mscLpDS1ChanIfEntryTable.setStatus("mandatory")
_MscLpDS1ChanIfEntryEntry_Object = MibTableRow
mscLpDS1ChanIfEntryEntry = _MscLpDS1ChanIfEntryEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 12, 1)
)
mscLpDS1ChanIfEntryEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1ChanIfEntryEntry.setStatus("mandatory")


class _MscLpDS1ChanIfAdminStatus_Type(Integer32):
    """Custom type mscLpDS1ChanIfAdminStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpDS1ChanIfAdminStatus_Type.__name__ = "Integer32"
_MscLpDS1ChanIfAdminStatus_Object = MibTableColumn
mscLpDS1ChanIfAdminStatus = _MscLpDS1ChanIfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 12, 1, 1),
    _MscLpDS1ChanIfAdminStatus_Type()
)
mscLpDS1ChanIfAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanIfAdminStatus.setStatus("mandatory")


class _MscLpDS1ChanIfIndex_Type(InterfaceIndex):
    """Custom type mscLpDS1ChanIfIndex based on InterfaceIndex"""
    subtypeSpec = InterfaceIndex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_MscLpDS1ChanIfIndex_Type.__name__ = "InterfaceIndex"
_MscLpDS1ChanIfIndex_Object = MibTableColumn
mscLpDS1ChanIfIndex = _MscLpDS1ChanIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 12, 1, 2),
    _MscLpDS1ChanIfIndex_Type()
)
mscLpDS1ChanIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanIfIndex.setStatus("mandatory")
_MscLpDS1ChanOperStatusTable_Object = MibTable
mscLpDS1ChanOperStatusTable = _MscLpDS1ChanOperStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 13)
)
if mibBuilder.loadTexts:
    mscLpDS1ChanOperStatusTable.setStatus("mandatory")
_MscLpDS1ChanOperStatusEntry_Object = MibTableRow
mscLpDS1ChanOperStatusEntry = _MscLpDS1ChanOperStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 13, 1)
)
mscLpDS1ChanOperStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1ChanOperStatusEntry.setStatus("mandatory")


class _MscLpDS1ChanSnmpOperStatus_Type(Integer32):
    """Custom type mscLpDS1ChanSnmpOperStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpDS1ChanSnmpOperStatus_Type.__name__ = "Integer32"
_MscLpDS1ChanSnmpOperStatus_Object = MibTableColumn
mscLpDS1ChanSnmpOperStatus = _MscLpDS1ChanSnmpOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 13, 1, 1),
    _MscLpDS1ChanSnmpOperStatus_Type()
)
mscLpDS1ChanSnmpOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanSnmpOperStatus.setStatus("mandatory")
_MscLpDS1ChanStateTable_Object = MibTable
mscLpDS1ChanStateTable = _MscLpDS1ChanStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 14)
)
if mibBuilder.loadTexts:
    mscLpDS1ChanStateTable.setStatus("mandatory")
_MscLpDS1ChanStateEntry_Object = MibTableRow
mscLpDS1ChanStateEntry = _MscLpDS1ChanStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 14, 1)
)
mscLpDS1ChanStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1ChanStateEntry.setStatus("mandatory")


class _MscLpDS1ChanAdminState_Type(Integer32):
    """Custom type mscLpDS1ChanAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpDS1ChanAdminState_Type.__name__ = "Integer32"
_MscLpDS1ChanAdminState_Object = MibTableColumn
mscLpDS1ChanAdminState = _MscLpDS1ChanAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 14, 1, 1),
    _MscLpDS1ChanAdminState_Type()
)
mscLpDS1ChanAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanAdminState.setStatus("mandatory")


class _MscLpDS1ChanOperationalState_Type(Integer32):
    """Custom type mscLpDS1ChanOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpDS1ChanOperationalState_Type.__name__ = "Integer32"
_MscLpDS1ChanOperationalState_Object = MibTableColumn
mscLpDS1ChanOperationalState = _MscLpDS1ChanOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 14, 1, 2),
    _MscLpDS1ChanOperationalState_Type()
)
mscLpDS1ChanOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanOperationalState.setStatus("mandatory")


class _MscLpDS1ChanUsageState_Type(Integer32):
    """Custom type mscLpDS1ChanUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpDS1ChanUsageState_Type.__name__ = "Integer32"
_MscLpDS1ChanUsageState_Object = MibTableColumn
mscLpDS1ChanUsageState = _MscLpDS1ChanUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 14, 1, 3),
    _MscLpDS1ChanUsageState_Type()
)
mscLpDS1ChanUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanUsageState.setStatus("mandatory")


class _MscLpDS1ChanAvailabilityStatus_Type(OctetString):
    """Custom type mscLpDS1ChanAvailabilityStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_MscLpDS1ChanAvailabilityStatus_Type.__name__ = "OctetString"
_MscLpDS1ChanAvailabilityStatus_Object = MibTableColumn
mscLpDS1ChanAvailabilityStatus = _MscLpDS1ChanAvailabilityStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 14, 1, 4),
    _MscLpDS1ChanAvailabilityStatus_Type()
)
mscLpDS1ChanAvailabilityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanAvailabilityStatus.setStatus("mandatory")


class _MscLpDS1ChanProceduralStatus_Type(OctetString):
    """Custom type mscLpDS1ChanProceduralStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpDS1ChanProceduralStatus_Type.__name__ = "OctetString"
_MscLpDS1ChanProceduralStatus_Object = MibTableColumn
mscLpDS1ChanProceduralStatus = _MscLpDS1ChanProceduralStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 14, 1, 5),
    _MscLpDS1ChanProceduralStatus_Type()
)
mscLpDS1ChanProceduralStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanProceduralStatus.setStatus("mandatory")


class _MscLpDS1ChanControlStatus_Type(OctetString):
    """Custom type mscLpDS1ChanControlStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpDS1ChanControlStatus_Type.__name__ = "OctetString"
_MscLpDS1ChanControlStatus_Object = MibTableColumn
mscLpDS1ChanControlStatus = _MscLpDS1ChanControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 14, 1, 6),
    _MscLpDS1ChanControlStatus_Type()
)
mscLpDS1ChanControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanControlStatus.setStatus("mandatory")


class _MscLpDS1ChanAlarmStatus_Type(OctetString):
    """Custom type mscLpDS1ChanAlarmStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpDS1ChanAlarmStatus_Type.__name__ = "OctetString"
_MscLpDS1ChanAlarmStatus_Object = MibTableColumn
mscLpDS1ChanAlarmStatus = _MscLpDS1ChanAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 14, 1, 7),
    _MscLpDS1ChanAlarmStatus_Type()
)
mscLpDS1ChanAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanAlarmStatus.setStatus("mandatory")


class _MscLpDS1ChanStandbyStatus_Type(Integer32):
    """Custom type mscLpDS1ChanStandbyStatus based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              15)
        )
    )
    namedValues = NamedValues(
        *(("coldStandby", 1),
          ("hotStandby", 0),
          ("notSet", 15),
          ("providingService", 2))
    )


_MscLpDS1ChanStandbyStatus_Type.__name__ = "Integer32"
_MscLpDS1ChanStandbyStatus_Object = MibTableColumn
mscLpDS1ChanStandbyStatus = _MscLpDS1ChanStandbyStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 14, 1, 8),
    _MscLpDS1ChanStandbyStatus_Type()
)
mscLpDS1ChanStandbyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanStandbyStatus.setStatus("mandatory")


class _MscLpDS1ChanUnknownStatus_Type(Integer32):
    """Custom type mscLpDS1ChanUnknownStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_MscLpDS1ChanUnknownStatus_Type.__name__ = "Integer32"
_MscLpDS1ChanUnknownStatus_Object = MibTableColumn
mscLpDS1ChanUnknownStatus = _MscLpDS1ChanUnknownStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 14, 1, 9),
    _MscLpDS1ChanUnknownStatus_Type()
)
mscLpDS1ChanUnknownStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanUnknownStatus.setStatus("mandatory")
_MscLpDS1ChanOperTable_Object = MibTable
mscLpDS1ChanOperTable = _MscLpDS1ChanOperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 15)
)
if mibBuilder.loadTexts:
    mscLpDS1ChanOperTable.setStatus("mandatory")
_MscLpDS1ChanOperEntry_Object = MibTableRow
mscLpDS1ChanOperEntry = _MscLpDS1ChanOperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 15, 1)
)
mscLpDS1ChanOperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1ChanOperEntry.setStatus("mandatory")


class _MscLpDS1ChanActualChannelSpeed_Type(Gauge32):
    """Custom type mscLpDS1ChanActualChannelSpeed based on Gauge32"""
    defaultValue = 0

    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpDS1ChanActualChannelSpeed_Type.__name__ = "Gauge32"
_MscLpDS1ChanActualChannelSpeed_Object = MibTableColumn
mscLpDS1ChanActualChannelSpeed = _MscLpDS1ChanActualChannelSpeed_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 15, 1, 1),
    _MscLpDS1ChanActualChannelSpeed_Type()
)
mscLpDS1ChanActualChannelSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ChanActualChannelSpeed.setStatus("mandatory")
_MscLpDS1ChanAdminInfoTable_Object = MibTable
mscLpDS1ChanAdminInfoTable = _MscLpDS1ChanAdminInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 16)
)
if mibBuilder.loadTexts:
    mscLpDS1ChanAdminInfoTable.setStatus("mandatory")
_MscLpDS1ChanAdminInfoEntry_Object = MibTableRow
mscLpDS1ChanAdminInfoEntry = _MscLpDS1ChanAdminInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 16, 1)
)
mscLpDS1ChanAdminInfoEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1ChanAdminInfoEntry.setStatus("mandatory")


class _MscLpDS1ChanVendor_Type(AsciiString):
    """Custom type mscLpDS1ChanVendor based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_MscLpDS1ChanVendor_Type.__name__ = "AsciiString"
_MscLpDS1ChanVendor_Object = MibTableColumn
mscLpDS1ChanVendor = _MscLpDS1ChanVendor_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 16, 1, 1),
    _MscLpDS1ChanVendor_Type()
)
mscLpDS1ChanVendor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanVendor.setStatus("mandatory")


class _MscLpDS1ChanCommentText_Type(AsciiString):
    """Custom type mscLpDS1ChanCommentText based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 60),
    )


_MscLpDS1ChanCommentText_Type.__name__ = "AsciiString"
_MscLpDS1ChanCommentText_Object = MibTableColumn
mscLpDS1ChanCommentText = _MscLpDS1ChanCommentText_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 2, 16, 1, 2),
    _MscLpDS1ChanCommentText_Type()
)
mscLpDS1ChanCommentText.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ChanCommentText.setStatus("mandatory")
_MscLpDS1Test_ObjectIdentity = ObjectIdentity
mscLpDS1Test = _MscLpDS1Test_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3)
)
_MscLpDS1TestRowStatusTable_Object = MibTable
mscLpDS1TestRowStatusTable = _MscLpDS1TestRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 1)
)
if mibBuilder.loadTexts:
    mscLpDS1TestRowStatusTable.setStatus("mandatory")
_MscLpDS1TestRowStatusEntry_Object = MibTableRow
mscLpDS1TestRowStatusEntry = _MscLpDS1TestRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 1, 1)
)
mscLpDS1TestRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1TestRowStatusEntry.setStatus("mandatory")
_MscLpDS1TestRowStatus_Type = RowStatus
_MscLpDS1TestRowStatus_Object = MibTableColumn
mscLpDS1TestRowStatus = _MscLpDS1TestRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 1, 1, 1),
    _MscLpDS1TestRowStatus_Type()
)
mscLpDS1TestRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1TestRowStatus.setStatus("mandatory")
_MscLpDS1TestComponentName_Type = DisplayString
_MscLpDS1TestComponentName_Object = MibTableColumn
mscLpDS1TestComponentName = _MscLpDS1TestComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 1, 1, 2),
    _MscLpDS1TestComponentName_Type()
)
mscLpDS1TestComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1TestComponentName.setStatus("mandatory")
_MscLpDS1TestStorageType_Type = StorageType
_MscLpDS1TestStorageType_Object = MibTableColumn
mscLpDS1TestStorageType = _MscLpDS1TestStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 1, 1, 4),
    _MscLpDS1TestStorageType_Type()
)
mscLpDS1TestStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1TestStorageType.setStatus("mandatory")
_MscLpDS1TestIndex_Type = NonReplicated
_MscLpDS1TestIndex_Object = MibTableColumn
mscLpDS1TestIndex = _MscLpDS1TestIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 1, 1, 10),
    _MscLpDS1TestIndex_Type()
)
mscLpDS1TestIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS1TestIndex.setStatus("mandatory")
_MscLpDS1TestStateTable_Object = MibTable
mscLpDS1TestStateTable = _MscLpDS1TestStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 10)
)
if mibBuilder.loadTexts:
    mscLpDS1TestStateTable.setStatus("mandatory")
_MscLpDS1TestStateEntry_Object = MibTableRow
mscLpDS1TestStateEntry = _MscLpDS1TestStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 10, 1)
)
mscLpDS1TestStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1TestStateEntry.setStatus("mandatory")


class _MscLpDS1TestAdminState_Type(Integer32):
    """Custom type mscLpDS1TestAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpDS1TestAdminState_Type.__name__ = "Integer32"
_MscLpDS1TestAdminState_Object = MibTableColumn
mscLpDS1TestAdminState = _MscLpDS1TestAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 10, 1, 1),
    _MscLpDS1TestAdminState_Type()
)
mscLpDS1TestAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1TestAdminState.setStatus("mandatory")


class _MscLpDS1TestOperationalState_Type(Integer32):
    """Custom type mscLpDS1TestOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpDS1TestOperationalState_Type.__name__ = "Integer32"
_MscLpDS1TestOperationalState_Object = MibTableColumn
mscLpDS1TestOperationalState = _MscLpDS1TestOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 10, 1, 2),
    _MscLpDS1TestOperationalState_Type()
)
mscLpDS1TestOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1TestOperationalState.setStatus("mandatory")


class _MscLpDS1TestUsageState_Type(Integer32):
    """Custom type mscLpDS1TestUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpDS1TestUsageState_Type.__name__ = "Integer32"
_MscLpDS1TestUsageState_Object = MibTableColumn
mscLpDS1TestUsageState = _MscLpDS1TestUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 10, 1, 3),
    _MscLpDS1TestUsageState_Type()
)
mscLpDS1TestUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1TestUsageState.setStatus("mandatory")
_MscLpDS1TestSetupTable_Object = MibTable
mscLpDS1TestSetupTable = _MscLpDS1TestSetupTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 11)
)
if mibBuilder.loadTexts:
    mscLpDS1TestSetupTable.setStatus("mandatory")
_MscLpDS1TestSetupEntry_Object = MibTableRow
mscLpDS1TestSetupEntry = _MscLpDS1TestSetupEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 11, 1)
)
mscLpDS1TestSetupEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1TestSetupEntry.setStatus("mandatory")


class _MscLpDS1TestPurpose_Type(AsciiString):
    """Custom type mscLpDS1TestPurpose based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_MscLpDS1TestPurpose_Type.__name__ = "AsciiString"
_MscLpDS1TestPurpose_Object = MibTableColumn
mscLpDS1TestPurpose = _MscLpDS1TestPurpose_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 11, 1, 1),
    _MscLpDS1TestPurpose_Type()
)
mscLpDS1TestPurpose.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1TestPurpose.setStatus("mandatory")


class _MscLpDS1TestType_Type(Integer32):
    """Custom type mscLpDS1TestType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("card", 0),
          ("externalLoop", 4),
          ("localLoop", 2),
          ("manual", 1),
          ("payloadLoop", 5),
          ("pn127RemoteLoop", 8),
          ("remoteLoop", 3),
          ("remoteLoopThisTrib", 6),
          ("v54RemoteLoop", 7))
    )


_MscLpDS1TestType_Type.__name__ = "Integer32"
_MscLpDS1TestType_Object = MibTableColumn
mscLpDS1TestType = _MscLpDS1TestType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 11, 1, 2),
    _MscLpDS1TestType_Type()
)
mscLpDS1TestType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1TestType.setStatus("mandatory")


class _MscLpDS1TestFrmSize_Type(Unsigned32):
    """Custom type mscLpDS1TestFrmSize based on Unsigned32"""
    defaultValue = 1024

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 4096),
    )


_MscLpDS1TestFrmSize_Type.__name__ = "Unsigned32"
_MscLpDS1TestFrmSize_Object = MibTableColumn
mscLpDS1TestFrmSize = _MscLpDS1TestFrmSize_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 11, 1, 3),
    _MscLpDS1TestFrmSize_Type()
)
mscLpDS1TestFrmSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1TestFrmSize.setStatus("mandatory")


class _MscLpDS1TestFrmPatternType_Type(Integer32):
    """Custom type mscLpDS1TestFrmPatternType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ccitt32kBitPattern", 0),
          ("ccitt8MBitPattern", 1),
          ("customizedPattern", 2))
    )


_MscLpDS1TestFrmPatternType_Type.__name__ = "Integer32"
_MscLpDS1TestFrmPatternType_Object = MibTableColumn
mscLpDS1TestFrmPatternType = _MscLpDS1TestFrmPatternType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 11, 1, 4),
    _MscLpDS1TestFrmPatternType_Type()
)
mscLpDS1TestFrmPatternType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1TestFrmPatternType.setStatus("mandatory")


class _MscLpDS1TestCustomizedPattern_Type(Hex):
    """Custom type mscLpDS1TestCustomizedPattern based on Hex"""
    defaultValue = 1431655765

    subtypeSpec = Hex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpDS1TestCustomizedPattern_Type.__name__ = "Hex"
_MscLpDS1TestCustomizedPattern_Object = MibTableColumn
mscLpDS1TestCustomizedPattern = _MscLpDS1TestCustomizedPattern_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 11, 1, 5),
    _MscLpDS1TestCustomizedPattern_Type()
)
mscLpDS1TestCustomizedPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1TestCustomizedPattern.setStatus("mandatory")


class _MscLpDS1TestDataStartDelay_Type(Unsigned32):
    """Custom type mscLpDS1TestDataStartDelay based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1814400),
    )


_MscLpDS1TestDataStartDelay_Type.__name__ = "Unsigned32"
_MscLpDS1TestDataStartDelay_Object = MibTableColumn
mscLpDS1TestDataStartDelay = _MscLpDS1TestDataStartDelay_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 11, 1, 6),
    _MscLpDS1TestDataStartDelay_Type()
)
mscLpDS1TestDataStartDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1TestDataStartDelay.setStatus("mandatory")


class _MscLpDS1TestDisplayInterval_Type(Unsigned32):
    """Custom type mscLpDS1TestDisplayInterval based on Unsigned32"""
    defaultValue = 5

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30240),
    )


_MscLpDS1TestDisplayInterval_Type.__name__ = "Unsigned32"
_MscLpDS1TestDisplayInterval_Object = MibTableColumn
mscLpDS1TestDisplayInterval = _MscLpDS1TestDisplayInterval_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 11, 1, 7),
    _MscLpDS1TestDisplayInterval_Type()
)
mscLpDS1TestDisplayInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1TestDisplayInterval.setStatus("mandatory")


class _MscLpDS1TestDuration_Type(Unsigned32):
    """Custom type mscLpDS1TestDuration based on Unsigned32"""
    defaultValue = 1

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30240),
    )


_MscLpDS1TestDuration_Type.__name__ = "Unsigned32"
_MscLpDS1TestDuration_Object = MibTableColumn
mscLpDS1TestDuration = _MscLpDS1TestDuration_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 11, 1, 8),
    _MscLpDS1TestDuration_Type()
)
mscLpDS1TestDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1TestDuration.setStatus("mandatory")
_MscLpDS1TestResultsTable_Object = MibTable
mscLpDS1TestResultsTable = _MscLpDS1TestResultsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12)
)
if mibBuilder.loadTexts:
    mscLpDS1TestResultsTable.setStatus("mandatory")
_MscLpDS1TestResultsEntry_Object = MibTableRow
mscLpDS1TestResultsEntry = _MscLpDS1TestResultsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1)
)
mscLpDS1TestResultsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1TestResultsEntry.setStatus("mandatory")
_MscLpDS1TestElapsedTime_Type = Counter32
_MscLpDS1TestElapsedTime_Object = MibTableColumn
mscLpDS1TestElapsedTime = _MscLpDS1TestElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1, 1),
    _MscLpDS1TestElapsedTime_Type()
)
mscLpDS1TestElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1TestElapsedTime.setStatus("mandatory")


class _MscLpDS1TestTimeRemaining_Type(Unsigned32):
    """Custom type mscLpDS1TestTimeRemaining based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpDS1TestTimeRemaining_Type.__name__ = "Unsigned32"
_MscLpDS1TestTimeRemaining_Object = MibTableColumn
mscLpDS1TestTimeRemaining = _MscLpDS1TestTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1, 2),
    _MscLpDS1TestTimeRemaining_Type()
)
mscLpDS1TestTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1TestTimeRemaining.setStatus("mandatory")


class _MscLpDS1TestCauseOfTermination_Type(Integer32):
    """Custom type mscLpDS1TestCauseOfTermination based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("hardwareReconfigured", 5),
          ("loopCodeSyncFailed", 6),
          ("neverStarted", 3),
          ("patternSyncFailed", 7),
          ("patternSyncLost", 8),
          ("stoppedByOperator", 1),
          ("testRunning", 4),
          ("testTimeExpired", 0),
          ("unknown", 2))
    )


_MscLpDS1TestCauseOfTermination_Type.__name__ = "Integer32"
_MscLpDS1TestCauseOfTermination_Object = MibTableColumn
mscLpDS1TestCauseOfTermination = _MscLpDS1TestCauseOfTermination_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1, 3),
    _MscLpDS1TestCauseOfTermination_Type()
)
mscLpDS1TestCauseOfTermination.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1TestCauseOfTermination.setStatus("mandatory")
_MscLpDS1TestBitsTx_Type = PassportCounter64
_MscLpDS1TestBitsTx_Object = MibTableColumn
mscLpDS1TestBitsTx = _MscLpDS1TestBitsTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1, 4),
    _MscLpDS1TestBitsTx_Type()
)
mscLpDS1TestBitsTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1TestBitsTx.setStatus("mandatory")
_MscLpDS1TestBytesTx_Type = PassportCounter64
_MscLpDS1TestBytesTx_Object = MibTableColumn
mscLpDS1TestBytesTx = _MscLpDS1TestBytesTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1, 5),
    _MscLpDS1TestBytesTx_Type()
)
mscLpDS1TestBytesTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1TestBytesTx.setStatus("mandatory")
_MscLpDS1TestFrmTx_Type = PassportCounter64
_MscLpDS1TestFrmTx_Object = MibTableColumn
mscLpDS1TestFrmTx = _MscLpDS1TestFrmTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1, 6),
    _MscLpDS1TestFrmTx_Type()
)
mscLpDS1TestFrmTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1TestFrmTx.setStatus("mandatory")
_MscLpDS1TestBitsRx_Type = PassportCounter64
_MscLpDS1TestBitsRx_Object = MibTableColumn
mscLpDS1TestBitsRx = _MscLpDS1TestBitsRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1, 7),
    _MscLpDS1TestBitsRx_Type()
)
mscLpDS1TestBitsRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1TestBitsRx.setStatus("mandatory")
_MscLpDS1TestBytesRx_Type = PassportCounter64
_MscLpDS1TestBytesRx_Object = MibTableColumn
mscLpDS1TestBytesRx = _MscLpDS1TestBytesRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1, 8),
    _MscLpDS1TestBytesRx_Type()
)
mscLpDS1TestBytesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1TestBytesRx.setStatus("mandatory")
_MscLpDS1TestFrmRx_Type = PassportCounter64
_MscLpDS1TestFrmRx_Object = MibTableColumn
mscLpDS1TestFrmRx = _MscLpDS1TestFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1, 9),
    _MscLpDS1TestFrmRx_Type()
)
mscLpDS1TestFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1TestFrmRx.setStatus("mandatory")
_MscLpDS1TestErroredFrmRx_Type = PassportCounter64
_MscLpDS1TestErroredFrmRx_Object = MibTableColumn
mscLpDS1TestErroredFrmRx = _MscLpDS1TestErroredFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1, 10),
    _MscLpDS1TestErroredFrmRx_Type()
)
mscLpDS1TestErroredFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1TestErroredFrmRx.setStatus("mandatory")


class _MscLpDS1TestBitErrorRate_Type(AsciiString):
    """Custom type mscLpDS1TestBitErrorRate based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )


_MscLpDS1TestBitErrorRate_Type.__name__ = "AsciiString"
_MscLpDS1TestBitErrorRate_Object = MibTableColumn
mscLpDS1TestBitErrorRate = _MscLpDS1TestBitErrorRate_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 3, 12, 1, 11),
    _MscLpDS1TestBitErrorRate_Type()
)
mscLpDS1TestBitErrorRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1TestBitErrorRate.setStatus("mandatory")
_MscLpDS1Dsp_ObjectIdentity = ObjectIdentity
mscLpDS1Dsp = _MscLpDS1Dsp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 4)
)
_MscLpDS1DspRowStatusTable_Object = MibTable
mscLpDS1DspRowStatusTable = _MscLpDS1DspRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 4, 1)
)
if mibBuilder.loadTexts:
    mscLpDS1DspRowStatusTable.setStatus("mandatory")
_MscLpDS1DspRowStatusEntry_Object = MibTableRow
mscLpDS1DspRowStatusEntry = _MscLpDS1DspRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 4, 1, 1)
)
mscLpDS1DspRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1DspIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1DspRowStatusEntry.setStatus("mandatory")
_MscLpDS1DspRowStatus_Type = RowStatus
_MscLpDS1DspRowStatus_Object = MibTableColumn
mscLpDS1DspRowStatus = _MscLpDS1DspRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 4, 1, 1, 1),
    _MscLpDS1DspRowStatus_Type()
)
mscLpDS1DspRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1DspRowStatus.setStatus("mandatory")
_MscLpDS1DspComponentName_Type = DisplayString
_MscLpDS1DspComponentName_Object = MibTableColumn
mscLpDS1DspComponentName = _MscLpDS1DspComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 4, 1, 1, 2),
    _MscLpDS1DspComponentName_Type()
)
mscLpDS1DspComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1DspComponentName.setStatus("mandatory")
_MscLpDS1DspStorageType_Type = StorageType
_MscLpDS1DspStorageType_Object = MibTableColumn
mscLpDS1DspStorageType = _MscLpDS1DspStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 4, 1, 1, 4),
    _MscLpDS1DspStorageType_Type()
)
mscLpDS1DspStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1DspStorageType.setStatus("mandatory")
_MscLpDS1DspIndex_Type = NonReplicated
_MscLpDS1DspIndex_Object = MibTableColumn
mscLpDS1DspIndex = _MscLpDS1DspIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 4, 1, 1, 10),
    _MscLpDS1DspIndex_Type()
)
mscLpDS1DspIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS1DspIndex.setStatus("mandatory")
_MscLpDS1Audio_ObjectIdentity = ObjectIdentity
mscLpDS1Audio = _MscLpDS1Audio_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 5)
)
_MscLpDS1AudioRowStatusTable_Object = MibTable
mscLpDS1AudioRowStatusTable = _MscLpDS1AudioRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 5, 1)
)
if mibBuilder.loadTexts:
    mscLpDS1AudioRowStatusTable.setStatus("mandatory")
_MscLpDS1AudioRowStatusEntry_Object = MibTableRow
mscLpDS1AudioRowStatusEntry = _MscLpDS1AudioRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 5, 1, 1)
)
mscLpDS1AudioRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1AudioIndex"),
)
if mibBuilder.loadTexts:
    mscLpDS1AudioRowStatusEntry.setStatus("mandatory")
_MscLpDS1AudioRowStatus_Type = RowStatus
_MscLpDS1AudioRowStatus_Object = MibTableColumn
mscLpDS1AudioRowStatus = _MscLpDS1AudioRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 5, 1, 1, 1),
    _MscLpDS1AudioRowStatus_Type()
)
mscLpDS1AudioRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1AudioRowStatus.setStatus("mandatory")
_MscLpDS1AudioComponentName_Type = DisplayString
_MscLpDS1AudioComponentName_Object = MibTableColumn
mscLpDS1AudioComponentName = _MscLpDS1AudioComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 5, 1, 1, 2),
    _MscLpDS1AudioComponentName_Type()
)
mscLpDS1AudioComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1AudioComponentName.setStatus("mandatory")
_MscLpDS1AudioStorageType_Type = StorageType
_MscLpDS1AudioStorageType_Object = MibTableColumn
mscLpDS1AudioStorageType = _MscLpDS1AudioStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 5, 1, 1, 4),
    _MscLpDS1AudioStorageType_Type()
)
mscLpDS1AudioStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1AudioStorageType.setStatus("mandatory")
_MscLpDS1AudioIndex_Type = NonReplicated
_MscLpDS1AudioIndex_Object = MibTableColumn
mscLpDS1AudioIndex = _MscLpDS1AudioIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 5, 1, 1, 10),
    _MscLpDS1AudioIndex_Type()
)
mscLpDS1AudioIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpDS1AudioIndex.setStatus("mandatory")
_MscLpDS1ProvTable_Object = MibTable
mscLpDS1ProvTable = _MscLpDS1ProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 10)
)
if mibBuilder.loadTexts:
    mscLpDS1ProvTable.setStatus("mandatory")
_MscLpDS1ProvEntry_Object = MibTableRow
mscLpDS1ProvEntry = _MscLpDS1ProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 10, 1)
)
mscLpDS1ProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
)
if mibBuilder.loadTexts:
    mscLpDS1ProvEntry.setStatus("mandatory")


class _MscLpDS1LineType_Type(Integer32):
    """Custom type mscLpDS1LineType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("d4", 0),
          ("d4Cas", 4),
          ("esf", 1),
          ("esfCas", 5),
          ("unframed", 6))
    )


_MscLpDS1LineType_Type.__name__ = "Integer32"
_MscLpDS1LineType_Object = MibTableColumn
mscLpDS1LineType = _MscLpDS1LineType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 10, 1, 1),
    _MscLpDS1LineType_Type()
)
mscLpDS1LineType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1LineType.setStatus("mandatory")


class _MscLpDS1ZeroCoding_Type(Integer32):
    """Custom type mscLpDS1ZeroCoding based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ami", 2),
          ("b8zs", 1),
          ("bit7Stuffing", 0))
    )


_MscLpDS1ZeroCoding_Type.__name__ = "Integer32"
_MscLpDS1ZeroCoding_Object = MibTableColumn
mscLpDS1ZeroCoding = _MscLpDS1ZeroCoding_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 10, 1, 2),
    _MscLpDS1ZeroCoding_Type()
)
mscLpDS1ZeroCoding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ZeroCoding.setStatus("mandatory")


class _MscLpDS1ClockingSource_Type(Integer32):
    """Custom type mscLpDS1ClockingSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("adaptiveMode", 5),
          ("line", 1),
          ("local", 0),
          ("module", 2),
          ("otherPort", 3),
          ("srtsMode", 4))
    )


_MscLpDS1ClockingSource_Type.__name__ = "Integer32"
_MscLpDS1ClockingSource_Object = MibTableColumn
mscLpDS1ClockingSource = _MscLpDS1ClockingSource_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 10, 1, 3),
    _MscLpDS1ClockingSource_Type()
)
mscLpDS1ClockingSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1ClockingSource.setStatus("mandatory")


class _MscLpDS1RaiAlarmType_Type(Integer32):
    """Custom type mscLpDS1RaiAlarmType based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("bit2", 1),
          ("fdl", 2),
          ("sBit", 0))
    )


_MscLpDS1RaiAlarmType_Type.__name__ = "Integer32"
_MscLpDS1RaiAlarmType_Object = MibTableColumn
mscLpDS1RaiAlarmType = _MscLpDS1RaiAlarmType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 10, 1, 4),
    _MscLpDS1RaiAlarmType_Type()
)
mscLpDS1RaiAlarmType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1RaiAlarmType.setStatus("mandatory")


class _MscLpDS1LineLength_Type(Unsigned32):
    """Custom type mscLpDS1LineLength based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 655),
    )


_MscLpDS1LineLength_Type.__name__ = "Unsigned32"
_MscLpDS1LineLength_Object = MibTableColumn
mscLpDS1LineLength = _MscLpDS1LineLength_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 10, 1, 5),
    _MscLpDS1LineLength_Type()
)
mscLpDS1LineLength.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1LineLength.setStatus("mandatory")
_MscLpDS1CidDataTable_Object = MibTable
mscLpDS1CidDataTable = _MscLpDS1CidDataTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 11)
)
if mibBuilder.loadTexts:
    mscLpDS1CidDataTable.setStatus("mandatory")
_MscLpDS1CidDataEntry_Object = MibTableRow
mscLpDS1CidDataEntry = _MscLpDS1CidDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 11, 1)
)
mscLpDS1CidDataEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
)
if mibBuilder.loadTexts:
    mscLpDS1CidDataEntry.setStatus("mandatory")


class _MscLpDS1CustomerIdentifier_Type(Unsigned32):
    """Custom type mscLpDS1CustomerIdentifier based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 8191),
    )


_MscLpDS1CustomerIdentifier_Type.__name__ = "Unsigned32"
_MscLpDS1CustomerIdentifier_Object = MibTableColumn
mscLpDS1CustomerIdentifier = _MscLpDS1CustomerIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 11, 1, 1),
    _MscLpDS1CustomerIdentifier_Type()
)
mscLpDS1CustomerIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1CustomerIdentifier.setStatus("mandatory")
_MscLpDS1AdminInfoTable_Object = MibTable
mscLpDS1AdminInfoTable = _MscLpDS1AdminInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 12)
)
if mibBuilder.loadTexts:
    mscLpDS1AdminInfoTable.setStatus("mandatory")
_MscLpDS1AdminInfoEntry_Object = MibTableRow
mscLpDS1AdminInfoEntry = _MscLpDS1AdminInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 12, 1)
)
mscLpDS1AdminInfoEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
)
if mibBuilder.loadTexts:
    mscLpDS1AdminInfoEntry.setStatus("mandatory")


class _MscLpDS1Vendor_Type(AsciiString):
    """Custom type mscLpDS1Vendor based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_MscLpDS1Vendor_Type.__name__ = "AsciiString"
_MscLpDS1Vendor_Object = MibTableColumn
mscLpDS1Vendor = _MscLpDS1Vendor_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 12, 1, 1),
    _MscLpDS1Vendor_Type()
)
mscLpDS1Vendor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1Vendor.setStatus("mandatory")


class _MscLpDS1CommentText_Type(AsciiString):
    """Custom type mscLpDS1CommentText based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 60),
    )


_MscLpDS1CommentText_Type.__name__ = "AsciiString"
_MscLpDS1CommentText_Object = MibTableColumn
mscLpDS1CommentText = _MscLpDS1CommentText_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 12, 1, 2),
    _MscLpDS1CommentText_Type()
)
mscLpDS1CommentText.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1CommentText.setStatus("mandatory")
_MscLpDS1IfEntryTable_Object = MibTable
mscLpDS1IfEntryTable = _MscLpDS1IfEntryTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 13)
)
if mibBuilder.loadTexts:
    mscLpDS1IfEntryTable.setStatus("mandatory")
_MscLpDS1IfEntryEntry_Object = MibTableRow
mscLpDS1IfEntryEntry = _MscLpDS1IfEntryEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 13, 1)
)
mscLpDS1IfEntryEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
)
if mibBuilder.loadTexts:
    mscLpDS1IfEntryEntry.setStatus("mandatory")


class _MscLpDS1IfAdminStatus_Type(Integer32):
    """Custom type mscLpDS1IfAdminStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpDS1IfAdminStatus_Type.__name__ = "Integer32"
_MscLpDS1IfAdminStatus_Object = MibTableColumn
mscLpDS1IfAdminStatus = _MscLpDS1IfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 13, 1, 1),
    _MscLpDS1IfAdminStatus_Type()
)
mscLpDS1IfAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpDS1IfAdminStatus.setStatus("mandatory")


class _MscLpDS1IfIndex_Type(InterfaceIndex):
    """Custom type mscLpDS1IfIndex based on InterfaceIndex"""
    subtypeSpec = InterfaceIndex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_MscLpDS1IfIndex_Type.__name__ = "InterfaceIndex"
_MscLpDS1IfIndex_Object = MibTableColumn
mscLpDS1IfIndex = _MscLpDS1IfIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 13, 1, 2),
    _MscLpDS1IfIndex_Type()
)
mscLpDS1IfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1IfIndex.setStatus("mandatory")
_MscLpDS1OperStatusTable_Object = MibTable
mscLpDS1OperStatusTable = _MscLpDS1OperStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 14)
)
if mibBuilder.loadTexts:
    mscLpDS1OperStatusTable.setStatus("mandatory")
_MscLpDS1OperStatusEntry_Object = MibTableRow
mscLpDS1OperStatusEntry = _MscLpDS1OperStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 14, 1)
)
mscLpDS1OperStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
)
if mibBuilder.loadTexts:
    mscLpDS1OperStatusEntry.setStatus("mandatory")


class _MscLpDS1SnmpOperStatus_Type(Integer32):
    """Custom type mscLpDS1SnmpOperStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpDS1SnmpOperStatus_Type.__name__ = "Integer32"
_MscLpDS1SnmpOperStatus_Object = MibTableColumn
mscLpDS1SnmpOperStatus = _MscLpDS1SnmpOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 14, 1, 1),
    _MscLpDS1SnmpOperStatus_Type()
)
mscLpDS1SnmpOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1SnmpOperStatus.setStatus("mandatory")
_MscLpDS1StateTable_Object = MibTable
mscLpDS1StateTable = _MscLpDS1StateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 15)
)
if mibBuilder.loadTexts:
    mscLpDS1StateTable.setStatus("mandatory")
_MscLpDS1StateEntry_Object = MibTableRow
mscLpDS1StateEntry = _MscLpDS1StateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 15, 1)
)
mscLpDS1StateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
)
if mibBuilder.loadTexts:
    mscLpDS1StateEntry.setStatus("mandatory")


class _MscLpDS1AdminState_Type(Integer32):
    """Custom type mscLpDS1AdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpDS1AdminState_Type.__name__ = "Integer32"
_MscLpDS1AdminState_Object = MibTableColumn
mscLpDS1AdminState = _MscLpDS1AdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 15, 1, 1),
    _MscLpDS1AdminState_Type()
)
mscLpDS1AdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1AdminState.setStatus("mandatory")


class _MscLpDS1OperationalState_Type(Integer32):
    """Custom type mscLpDS1OperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpDS1OperationalState_Type.__name__ = "Integer32"
_MscLpDS1OperationalState_Object = MibTableColumn
mscLpDS1OperationalState = _MscLpDS1OperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 15, 1, 2),
    _MscLpDS1OperationalState_Type()
)
mscLpDS1OperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1OperationalState.setStatus("mandatory")


class _MscLpDS1UsageState_Type(Integer32):
    """Custom type mscLpDS1UsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpDS1UsageState_Type.__name__ = "Integer32"
_MscLpDS1UsageState_Object = MibTableColumn
mscLpDS1UsageState = _MscLpDS1UsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 15, 1, 3),
    _MscLpDS1UsageState_Type()
)
mscLpDS1UsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1UsageState.setStatus("mandatory")


class _MscLpDS1AvailabilityStatus_Type(OctetString):
    """Custom type mscLpDS1AvailabilityStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_MscLpDS1AvailabilityStatus_Type.__name__ = "OctetString"
_MscLpDS1AvailabilityStatus_Object = MibTableColumn
mscLpDS1AvailabilityStatus = _MscLpDS1AvailabilityStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 15, 1, 4),
    _MscLpDS1AvailabilityStatus_Type()
)
mscLpDS1AvailabilityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1AvailabilityStatus.setStatus("mandatory")


class _MscLpDS1ProceduralStatus_Type(OctetString):
    """Custom type mscLpDS1ProceduralStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpDS1ProceduralStatus_Type.__name__ = "OctetString"
_MscLpDS1ProceduralStatus_Object = MibTableColumn
mscLpDS1ProceduralStatus = _MscLpDS1ProceduralStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 15, 1, 5),
    _MscLpDS1ProceduralStatus_Type()
)
mscLpDS1ProceduralStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ProceduralStatus.setStatus("mandatory")


class _MscLpDS1ControlStatus_Type(OctetString):
    """Custom type mscLpDS1ControlStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpDS1ControlStatus_Type.__name__ = "OctetString"
_MscLpDS1ControlStatus_Object = MibTableColumn
mscLpDS1ControlStatus = _MscLpDS1ControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 15, 1, 6),
    _MscLpDS1ControlStatus_Type()
)
mscLpDS1ControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ControlStatus.setStatus("mandatory")


class _MscLpDS1AlarmStatus_Type(OctetString):
    """Custom type mscLpDS1AlarmStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpDS1AlarmStatus_Type.__name__ = "OctetString"
_MscLpDS1AlarmStatus_Object = MibTableColumn
mscLpDS1AlarmStatus = _MscLpDS1AlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 15, 1, 7),
    _MscLpDS1AlarmStatus_Type()
)
mscLpDS1AlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1AlarmStatus.setStatus("mandatory")


class _MscLpDS1StandbyStatus_Type(Integer32):
    """Custom type mscLpDS1StandbyStatus based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              15)
        )
    )
    namedValues = NamedValues(
        *(("coldStandby", 1),
          ("hotStandby", 0),
          ("notSet", 15),
          ("providingService", 2))
    )


_MscLpDS1StandbyStatus_Type.__name__ = "Integer32"
_MscLpDS1StandbyStatus_Object = MibTableColumn
mscLpDS1StandbyStatus = _MscLpDS1StandbyStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 15, 1, 8),
    _MscLpDS1StandbyStatus_Type()
)
mscLpDS1StandbyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1StandbyStatus.setStatus("mandatory")


class _MscLpDS1UnknownStatus_Type(Integer32):
    """Custom type mscLpDS1UnknownStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_MscLpDS1UnknownStatus_Type.__name__ = "Integer32"
_MscLpDS1UnknownStatus_Object = MibTableColumn
mscLpDS1UnknownStatus = _MscLpDS1UnknownStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 15, 1, 9),
    _MscLpDS1UnknownStatus_Type()
)
mscLpDS1UnknownStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1UnknownStatus.setStatus("mandatory")
_MscLpDS1OperTable_Object = MibTable
mscLpDS1OperTable = _MscLpDS1OperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 16)
)
if mibBuilder.loadTexts:
    mscLpDS1OperTable.setStatus("mandatory")
_MscLpDS1OperEntry_Object = MibTableRow
mscLpDS1OperEntry = _MscLpDS1OperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 16, 1)
)
mscLpDS1OperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
)
if mibBuilder.loadTexts:
    mscLpDS1OperEntry.setStatus("mandatory")


class _MscLpDS1LosAlarm_Type(Integer32):
    """Custom type mscLpDS1LosAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS1LosAlarm_Type.__name__ = "Integer32"
_MscLpDS1LosAlarm_Object = MibTableColumn
mscLpDS1LosAlarm = _MscLpDS1LosAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 16, 1, 1),
    _MscLpDS1LosAlarm_Type()
)
mscLpDS1LosAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1LosAlarm.setStatus("mandatory")


class _MscLpDS1RxAisAlarm_Type(Integer32):
    """Custom type mscLpDS1RxAisAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS1RxAisAlarm_Type.__name__ = "Integer32"
_MscLpDS1RxAisAlarm_Object = MibTableColumn
mscLpDS1RxAisAlarm = _MscLpDS1RxAisAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 16, 1, 2),
    _MscLpDS1RxAisAlarm_Type()
)
mscLpDS1RxAisAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1RxAisAlarm.setStatus("mandatory")


class _MscLpDS1LofAlarm_Type(Integer32):
    """Custom type mscLpDS1LofAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS1LofAlarm_Type.__name__ = "Integer32"
_MscLpDS1LofAlarm_Object = MibTableColumn
mscLpDS1LofAlarm = _MscLpDS1LofAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 16, 1, 3),
    _MscLpDS1LofAlarm_Type()
)
mscLpDS1LofAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1LofAlarm.setStatus("mandatory")


class _MscLpDS1RxRaiAlarm_Type(Integer32):
    """Custom type mscLpDS1RxRaiAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS1RxRaiAlarm_Type.__name__ = "Integer32"
_MscLpDS1RxRaiAlarm_Object = MibTableColumn
mscLpDS1RxRaiAlarm = _MscLpDS1RxRaiAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 16, 1, 4),
    _MscLpDS1RxRaiAlarm_Type()
)
mscLpDS1RxRaiAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1RxRaiAlarm.setStatus("mandatory")


class _MscLpDS1TxAisAlarm_Type(Integer32):
    """Custom type mscLpDS1TxAisAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS1TxAisAlarm_Type.__name__ = "Integer32"
_MscLpDS1TxAisAlarm_Object = MibTableColumn
mscLpDS1TxAisAlarm = _MscLpDS1TxAisAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 16, 1, 5),
    _MscLpDS1TxAisAlarm_Type()
)
mscLpDS1TxAisAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1TxAisAlarm.setStatus("mandatory")


class _MscLpDS1TxRaiAlarm_Type(Integer32):
    """Custom type mscLpDS1TxRaiAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpDS1TxRaiAlarm_Type.__name__ = "Integer32"
_MscLpDS1TxRaiAlarm_Object = MibTableColumn
mscLpDS1TxRaiAlarm = _MscLpDS1TxRaiAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 16, 1, 6),
    _MscLpDS1TxRaiAlarm_Type()
)
mscLpDS1TxRaiAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1TxRaiAlarm.setStatus("mandatory")
_MscLpDS1StatsTable_Object = MibTable
mscLpDS1StatsTable = _MscLpDS1StatsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17)
)
if mibBuilder.loadTexts:
    mscLpDS1StatsTable.setStatus("mandatory")
_MscLpDS1StatsEntry_Object = MibTableRow
mscLpDS1StatsEntry = _MscLpDS1StatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1)
)
mscLpDS1StatsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpDS1Index"),
)
if mibBuilder.loadTexts:
    mscLpDS1StatsEntry.setStatus("mandatory")
_MscLpDS1RunningTime_Type = Counter32
_MscLpDS1RunningTime_Object = MibTableColumn
mscLpDS1RunningTime = _MscLpDS1RunningTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1, 1),
    _MscLpDS1RunningTime_Type()
)
mscLpDS1RunningTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1RunningTime.setStatus("mandatory")
_MscLpDS1ErrorFreeSec_Type = Counter32
_MscLpDS1ErrorFreeSec_Object = MibTableColumn
mscLpDS1ErrorFreeSec = _MscLpDS1ErrorFreeSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1, 2),
    _MscLpDS1ErrorFreeSec_Type()
)
mscLpDS1ErrorFreeSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ErrorFreeSec.setStatus("mandatory")
_MscLpDS1ErroredSec_Type = Counter32
_MscLpDS1ErroredSec_Object = MibTableColumn
mscLpDS1ErroredSec = _MscLpDS1ErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1, 3),
    _MscLpDS1ErroredSec_Type()
)
mscLpDS1ErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1ErroredSec.setStatus("mandatory")
_MscLpDS1SevErroredSec_Type = Counter32
_MscLpDS1SevErroredSec_Object = MibTableColumn
mscLpDS1SevErroredSec = _MscLpDS1SevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1, 4),
    _MscLpDS1SevErroredSec_Type()
)
mscLpDS1SevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1SevErroredSec.setStatus("mandatory")
_MscLpDS1SevErroredFrmSec_Type = Counter32
_MscLpDS1SevErroredFrmSec_Object = MibTableColumn
mscLpDS1SevErroredFrmSec = _MscLpDS1SevErroredFrmSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1, 5),
    _MscLpDS1SevErroredFrmSec_Type()
)
mscLpDS1SevErroredFrmSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1SevErroredFrmSec.setStatus("mandatory")
_MscLpDS1UnavailSec_Type = Counter32
_MscLpDS1UnavailSec_Object = MibTableColumn
mscLpDS1UnavailSec = _MscLpDS1UnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1, 6),
    _MscLpDS1UnavailSec_Type()
)
mscLpDS1UnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1UnavailSec.setStatus("mandatory")
_MscLpDS1BpvErrors_Type = Counter32
_MscLpDS1BpvErrors_Object = MibTableColumn
mscLpDS1BpvErrors = _MscLpDS1BpvErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1, 7),
    _MscLpDS1BpvErrors_Type()
)
mscLpDS1BpvErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1BpvErrors.setStatus("mandatory")
_MscLpDS1CrcErrors_Type = Counter32
_MscLpDS1CrcErrors_Object = MibTableColumn
mscLpDS1CrcErrors = _MscLpDS1CrcErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1, 8),
    _MscLpDS1CrcErrors_Type()
)
mscLpDS1CrcErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1CrcErrors.setStatus("mandatory")
_MscLpDS1FrmErrors_Type = Counter32
_MscLpDS1FrmErrors_Object = MibTableColumn
mscLpDS1FrmErrors = _MscLpDS1FrmErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1, 9),
    _MscLpDS1FrmErrors_Type()
)
mscLpDS1FrmErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1FrmErrors.setStatus("mandatory")
_MscLpDS1LosStateChanges_Type = Counter32
_MscLpDS1LosStateChanges_Object = MibTableColumn
mscLpDS1LosStateChanges = _MscLpDS1LosStateChanges_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1, 10),
    _MscLpDS1LosStateChanges_Type()
)
mscLpDS1LosStateChanges.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1LosStateChanges.setStatus("mandatory")
_MscLpDS1SlipErrors_Type = Counter32
_MscLpDS1SlipErrors_Object = MibTableColumn
mscLpDS1SlipErrors = _MscLpDS1SlipErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 7, 17, 1, 11),
    _MscLpDS1SlipErrors_Type()
)
mscLpDS1SlipErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpDS1SlipErrors.setStatus("mandatory")
_MscLpE1_ObjectIdentity = ObjectIdentity
mscLpE1 = _MscLpE1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8)
)
_MscLpE1RowStatusTable_Object = MibTable
mscLpE1RowStatusTable = _MscLpE1RowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 1)
)
if mibBuilder.loadTexts:
    mscLpE1RowStatusTable.setStatus("mandatory")
_MscLpE1RowStatusEntry_Object = MibTableRow
mscLpE1RowStatusEntry = _MscLpE1RowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 1, 1)
)
mscLpE1RowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
)
if mibBuilder.loadTexts:
    mscLpE1RowStatusEntry.setStatus("mandatory")
_MscLpE1RowStatus_Type = RowStatus
_MscLpE1RowStatus_Object = MibTableColumn
mscLpE1RowStatus = _MscLpE1RowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 1, 1, 1),
    _MscLpE1RowStatus_Type()
)
mscLpE1RowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1RowStatus.setStatus("mandatory")
_MscLpE1ComponentName_Type = DisplayString
_MscLpE1ComponentName_Object = MibTableColumn
mscLpE1ComponentName = _MscLpE1ComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 1, 1, 2),
    _MscLpE1ComponentName_Type()
)
mscLpE1ComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ComponentName.setStatus("mandatory")
_MscLpE1StorageType_Type = StorageType
_MscLpE1StorageType_Object = MibTableColumn
mscLpE1StorageType = _MscLpE1StorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 1, 1, 4),
    _MscLpE1StorageType_Type()
)
mscLpE1StorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1StorageType.setStatus("mandatory")


class _MscLpE1Index_Type(Integer32):
    """Custom type mscLpE1Index based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_MscLpE1Index_Type.__name__ = "Integer32"
_MscLpE1Index_Object = MibTableColumn
mscLpE1Index = _MscLpE1Index_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 1, 1, 10),
    _MscLpE1Index_Type()
)
mscLpE1Index.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpE1Index.setStatus("mandatory")
_MscLpE1Chan_ObjectIdentity = ObjectIdentity
mscLpE1Chan = _MscLpE1Chan_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2)
)
_MscLpE1ChanRowStatusTable_Object = MibTable
mscLpE1ChanRowStatusTable = _MscLpE1ChanRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 1)
)
if mibBuilder.loadTexts:
    mscLpE1ChanRowStatusTable.setStatus("mandatory")
_MscLpE1ChanRowStatusEntry_Object = MibTableRow
mscLpE1ChanRowStatusEntry = _MscLpE1ChanRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 1, 1)
)
mscLpE1ChanRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanRowStatusEntry.setStatus("mandatory")
_MscLpE1ChanRowStatus_Type = RowStatus
_MscLpE1ChanRowStatus_Object = MibTableColumn
mscLpE1ChanRowStatus = _MscLpE1ChanRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 1, 1, 1),
    _MscLpE1ChanRowStatus_Type()
)
mscLpE1ChanRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanRowStatus.setStatus("mandatory")
_MscLpE1ChanComponentName_Type = DisplayString
_MscLpE1ChanComponentName_Object = MibTableColumn
mscLpE1ChanComponentName = _MscLpE1ChanComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 1, 1, 2),
    _MscLpE1ChanComponentName_Type()
)
mscLpE1ChanComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanComponentName.setStatus("mandatory")
_MscLpE1ChanStorageType_Type = StorageType
_MscLpE1ChanStorageType_Object = MibTableColumn
mscLpE1ChanStorageType = _MscLpE1ChanStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 1, 1, 4),
    _MscLpE1ChanStorageType_Type()
)
mscLpE1ChanStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanStorageType.setStatus("mandatory")


class _MscLpE1ChanIndex_Type(Integer32):
    """Custom type mscLpE1ChanIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_MscLpE1ChanIndex_Type.__name__ = "Integer32"
_MscLpE1ChanIndex_Object = MibTableColumn
mscLpE1ChanIndex = _MscLpE1ChanIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 1, 1, 10),
    _MscLpE1ChanIndex_Type()
)
mscLpE1ChanIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpE1ChanIndex.setStatus("mandatory")
_MscLpE1ChanTest_ObjectIdentity = ObjectIdentity
mscLpE1ChanTest = _MscLpE1ChanTest_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2)
)
_MscLpE1ChanTestRowStatusTable_Object = MibTable
mscLpE1ChanTestRowStatusTable = _MscLpE1ChanTestRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 1)
)
if mibBuilder.loadTexts:
    mscLpE1ChanTestRowStatusTable.setStatus("mandatory")
_MscLpE1ChanTestRowStatusEntry_Object = MibTableRow
mscLpE1ChanTestRowStatusEntry = _MscLpE1ChanTestRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 1, 1)
)
mscLpE1ChanTestRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanTestRowStatusEntry.setStatus("mandatory")
_MscLpE1ChanTestRowStatus_Type = RowStatus
_MscLpE1ChanTestRowStatus_Object = MibTableColumn
mscLpE1ChanTestRowStatus = _MscLpE1ChanTestRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 1, 1, 1),
    _MscLpE1ChanTestRowStatus_Type()
)
mscLpE1ChanTestRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanTestRowStatus.setStatus("mandatory")
_MscLpE1ChanTestComponentName_Type = DisplayString
_MscLpE1ChanTestComponentName_Object = MibTableColumn
mscLpE1ChanTestComponentName = _MscLpE1ChanTestComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 1, 1, 2),
    _MscLpE1ChanTestComponentName_Type()
)
mscLpE1ChanTestComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanTestComponentName.setStatus("mandatory")
_MscLpE1ChanTestStorageType_Type = StorageType
_MscLpE1ChanTestStorageType_Object = MibTableColumn
mscLpE1ChanTestStorageType = _MscLpE1ChanTestStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 1, 1, 4),
    _MscLpE1ChanTestStorageType_Type()
)
mscLpE1ChanTestStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanTestStorageType.setStatus("mandatory")
_MscLpE1ChanTestIndex_Type = NonReplicated
_MscLpE1ChanTestIndex_Object = MibTableColumn
mscLpE1ChanTestIndex = _MscLpE1ChanTestIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 1, 1, 10),
    _MscLpE1ChanTestIndex_Type()
)
mscLpE1ChanTestIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpE1ChanTestIndex.setStatus("mandatory")
_MscLpE1ChanTestStateTable_Object = MibTable
mscLpE1ChanTestStateTable = _MscLpE1ChanTestStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 10)
)
if mibBuilder.loadTexts:
    mscLpE1ChanTestStateTable.setStatus("mandatory")
_MscLpE1ChanTestStateEntry_Object = MibTableRow
mscLpE1ChanTestStateEntry = _MscLpE1ChanTestStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 10, 1)
)
mscLpE1ChanTestStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanTestStateEntry.setStatus("mandatory")


class _MscLpE1ChanTestAdminState_Type(Integer32):
    """Custom type mscLpE1ChanTestAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpE1ChanTestAdminState_Type.__name__ = "Integer32"
_MscLpE1ChanTestAdminState_Object = MibTableColumn
mscLpE1ChanTestAdminState = _MscLpE1ChanTestAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 10, 1, 1),
    _MscLpE1ChanTestAdminState_Type()
)
mscLpE1ChanTestAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanTestAdminState.setStatus("mandatory")


class _MscLpE1ChanTestOperationalState_Type(Integer32):
    """Custom type mscLpE1ChanTestOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpE1ChanTestOperationalState_Type.__name__ = "Integer32"
_MscLpE1ChanTestOperationalState_Object = MibTableColumn
mscLpE1ChanTestOperationalState = _MscLpE1ChanTestOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 10, 1, 2),
    _MscLpE1ChanTestOperationalState_Type()
)
mscLpE1ChanTestOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanTestOperationalState.setStatus("mandatory")


class _MscLpE1ChanTestUsageState_Type(Integer32):
    """Custom type mscLpE1ChanTestUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpE1ChanTestUsageState_Type.__name__ = "Integer32"
_MscLpE1ChanTestUsageState_Object = MibTableColumn
mscLpE1ChanTestUsageState = _MscLpE1ChanTestUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 10, 1, 3),
    _MscLpE1ChanTestUsageState_Type()
)
mscLpE1ChanTestUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanTestUsageState.setStatus("mandatory")
_MscLpE1ChanTestSetupTable_Object = MibTable
mscLpE1ChanTestSetupTable = _MscLpE1ChanTestSetupTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 11)
)
if mibBuilder.loadTexts:
    mscLpE1ChanTestSetupTable.setStatus("mandatory")
_MscLpE1ChanTestSetupEntry_Object = MibTableRow
mscLpE1ChanTestSetupEntry = _MscLpE1ChanTestSetupEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 11, 1)
)
mscLpE1ChanTestSetupEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanTestSetupEntry.setStatus("mandatory")


class _MscLpE1ChanTestPurpose_Type(AsciiString):
    """Custom type mscLpE1ChanTestPurpose based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_MscLpE1ChanTestPurpose_Type.__name__ = "AsciiString"
_MscLpE1ChanTestPurpose_Object = MibTableColumn
mscLpE1ChanTestPurpose = _MscLpE1ChanTestPurpose_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 11, 1, 1),
    _MscLpE1ChanTestPurpose_Type()
)
mscLpE1ChanTestPurpose.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanTestPurpose.setStatus("mandatory")


class _MscLpE1ChanTestType_Type(Integer32):
    """Custom type mscLpE1ChanTestType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("card", 0),
          ("externalLoop", 4),
          ("localLoop", 2),
          ("manual", 1),
          ("payloadLoop", 5),
          ("pn127RemoteLoop", 8),
          ("remoteLoop", 3),
          ("remoteLoopThisTrib", 6),
          ("v54RemoteLoop", 7))
    )


_MscLpE1ChanTestType_Type.__name__ = "Integer32"
_MscLpE1ChanTestType_Object = MibTableColumn
mscLpE1ChanTestType = _MscLpE1ChanTestType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 11, 1, 2),
    _MscLpE1ChanTestType_Type()
)
mscLpE1ChanTestType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanTestType.setStatus("mandatory")


class _MscLpE1ChanTestFrmSize_Type(Unsigned32):
    """Custom type mscLpE1ChanTestFrmSize based on Unsigned32"""
    defaultValue = 1024

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 4096),
    )


_MscLpE1ChanTestFrmSize_Type.__name__ = "Unsigned32"
_MscLpE1ChanTestFrmSize_Object = MibTableColumn
mscLpE1ChanTestFrmSize = _MscLpE1ChanTestFrmSize_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 11, 1, 3),
    _MscLpE1ChanTestFrmSize_Type()
)
mscLpE1ChanTestFrmSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanTestFrmSize.setStatus("mandatory")


class _MscLpE1ChanTestFrmPatternType_Type(Integer32):
    """Custom type mscLpE1ChanTestFrmPatternType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ccitt32kBitPattern", 0),
          ("ccitt8MBitPattern", 1),
          ("customizedPattern", 2))
    )


_MscLpE1ChanTestFrmPatternType_Type.__name__ = "Integer32"
_MscLpE1ChanTestFrmPatternType_Object = MibTableColumn
mscLpE1ChanTestFrmPatternType = _MscLpE1ChanTestFrmPatternType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 11, 1, 4),
    _MscLpE1ChanTestFrmPatternType_Type()
)
mscLpE1ChanTestFrmPatternType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanTestFrmPatternType.setStatus("mandatory")


class _MscLpE1ChanTestCustomizedPattern_Type(Hex):
    """Custom type mscLpE1ChanTestCustomizedPattern based on Hex"""
    defaultValue = 1431655765

    subtypeSpec = Hex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpE1ChanTestCustomizedPattern_Type.__name__ = "Hex"
_MscLpE1ChanTestCustomizedPattern_Object = MibTableColumn
mscLpE1ChanTestCustomizedPattern = _MscLpE1ChanTestCustomizedPattern_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 11, 1, 5),
    _MscLpE1ChanTestCustomizedPattern_Type()
)
mscLpE1ChanTestCustomizedPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanTestCustomizedPattern.setStatus("mandatory")


class _MscLpE1ChanTestDataStartDelay_Type(Unsigned32):
    """Custom type mscLpE1ChanTestDataStartDelay based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1814400),
    )


_MscLpE1ChanTestDataStartDelay_Type.__name__ = "Unsigned32"
_MscLpE1ChanTestDataStartDelay_Object = MibTableColumn
mscLpE1ChanTestDataStartDelay = _MscLpE1ChanTestDataStartDelay_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 11, 1, 6),
    _MscLpE1ChanTestDataStartDelay_Type()
)
mscLpE1ChanTestDataStartDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanTestDataStartDelay.setStatus("mandatory")


class _MscLpE1ChanTestDisplayInterval_Type(Unsigned32):
    """Custom type mscLpE1ChanTestDisplayInterval based on Unsigned32"""
    defaultValue = 5

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30240),
    )


_MscLpE1ChanTestDisplayInterval_Type.__name__ = "Unsigned32"
_MscLpE1ChanTestDisplayInterval_Object = MibTableColumn
mscLpE1ChanTestDisplayInterval = _MscLpE1ChanTestDisplayInterval_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 11, 1, 7),
    _MscLpE1ChanTestDisplayInterval_Type()
)
mscLpE1ChanTestDisplayInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanTestDisplayInterval.setStatus("mandatory")


class _MscLpE1ChanTestDuration_Type(Unsigned32):
    """Custom type mscLpE1ChanTestDuration based on Unsigned32"""
    defaultValue = 1

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30240),
    )


_MscLpE1ChanTestDuration_Type.__name__ = "Unsigned32"
_MscLpE1ChanTestDuration_Object = MibTableColumn
mscLpE1ChanTestDuration = _MscLpE1ChanTestDuration_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 11, 1, 8),
    _MscLpE1ChanTestDuration_Type()
)
mscLpE1ChanTestDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanTestDuration.setStatus("mandatory")
_MscLpE1ChanTestResultsTable_Object = MibTable
mscLpE1ChanTestResultsTable = _MscLpE1ChanTestResultsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12)
)
if mibBuilder.loadTexts:
    mscLpE1ChanTestResultsTable.setStatus("mandatory")
_MscLpE1ChanTestResultsEntry_Object = MibTableRow
mscLpE1ChanTestResultsEntry = _MscLpE1ChanTestResultsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1)
)
mscLpE1ChanTestResultsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanTestResultsEntry.setStatus("mandatory")
_MscLpE1ChanTestElapsedTime_Type = Counter32
_MscLpE1ChanTestElapsedTime_Object = MibTableColumn
mscLpE1ChanTestElapsedTime = _MscLpE1ChanTestElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1, 1),
    _MscLpE1ChanTestElapsedTime_Type()
)
mscLpE1ChanTestElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanTestElapsedTime.setStatus("mandatory")


class _MscLpE1ChanTestTimeRemaining_Type(Unsigned32):
    """Custom type mscLpE1ChanTestTimeRemaining based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpE1ChanTestTimeRemaining_Type.__name__ = "Unsigned32"
_MscLpE1ChanTestTimeRemaining_Object = MibTableColumn
mscLpE1ChanTestTimeRemaining = _MscLpE1ChanTestTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1, 2),
    _MscLpE1ChanTestTimeRemaining_Type()
)
mscLpE1ChanTestTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanTestTimeRemaining.setStatus("mandatory")


class _MscLpE1ChanTestCauseOfTermination_Type(Integer32):
    """Custom type mscLpE1ChanTestCauseOfTermination based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("hardwareReconfigured", 5),
          ("loopCodeSyncFailed", 6),
          ("neverStarted", 3),
          ("patternSyncFailed", 7),
          ("patternSyncLost", 8),
          ("stoppedByOperator", 1),
          ("testRunning", 4),
          ("testTimeExpired", 0),
          ("unknown", 2))
    )


_MscLpE1ChanTestCauseOfTermination_Type.__name__ = "Integer32"
_MscLpE1ChanTestCauseOfTermination_Object = MibTableColumn
mscLpE1ChanTestCauseOfTermination = _MscLpE1ChanTestCauseOfTermination_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1, 3),
    _MscLpE1ChanTestCauseOfTermination_Type()
)
mscLpE1ChanTestCauseOfTermination.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanTestCauseOfTermination.setStatus("mandatory")
_MscLpE1ChanTestBitsTx_Type = PassportCounter64
_MscLpE1ChanTestBitsTx_Object = MibTableColumn
mscLpE1ChanTestBitsTx = _MscLpE1ChanTestBitsTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1, 4),
    _MscLpE1ChanTestBitsTx_Type()
)
mscLpE1ChanTestBitsTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanTestBitsTx.setStatus("mandatory")
_MscLpE1ChanTestBytesTx_Type = PassportCounter64
_MscLpE1ChanTestBytesTx_Object = MibTableColumn
mscLpE1ChanTestBytesTx = _MscLpE1ChanTestBytesTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1, 5),
    _MscLpE1ChanTestBytesTx_Type()
)
mscLpE1ChanTestBytesTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanTestBytesTx.setStatus("mandatory")
_MscLpE1ChanTestFrmTx_Type = PassportCounter64
_MscLpE1ChanTestFrmTx_Object = MibTableColumn
mscLpE1ChanTestFrmTx = _MscLpE1ChanTestFrmTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1, 6),
    _MscLpE1ChanTestFrmTx_Type()
)
mscLpE1ChanTestFrmTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanTestFrmTx.setStatus("mandatory")
_MscLpE1ChanTestBitsRx_Type = PassportCounter64
_MscLpE1ChanTestBitsRx_Object = MibTableColumn
mscLpE1ChanTestBitsRx = _MscLpE1ChanTestBitsRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1, 7),
    _MscLpE1ChanTestBitsRx_Type()
)
mscLpE1ChanTestBitsRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanTestBitsRx.setStatus("mandatory")
_MscLpE1ChanTestBytesRx_Type = PassportCounter64
_MscLpE1ChanTestBytesRx_Object = MibTableColumn
mscLpE1ChanTestBytesRx = _MscLpE1ChanTestBytesRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1, 8),
    _MscLpE1ChanTestBytesRx_Type()
)
mscLpE1ChanTestBytesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanTestBytesRx.setStatus("mandatory")
_MscLpE1ChanTestFrmRx_Type = PassportCounter64
_MscLpE1ChanTestFrmRx_Object = MibTableColumn
mscLpE1ChanTestFrmRx = _MscLpE1ChanTestFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1, 9),
    _MscLpE1ChanTestFrmRx_Type()
)
mscLpE1ChanTestFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanTestFrmRx.setStatus("mandatory")
_MscLpE1ChanTestErroredFrmRx_Type = PassportCounter64
_MscLpE1ChanTestErroredFrmRx_Object = MibTableColumn
mscLpE1ChanTestErroredFrmRx = _MscLpE1ChanTestErroredFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1, 10),
    _MscLpE1ChanTestErroredFrmRx_Type()
)
mscLpE1ChanTestErroredFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanTestErroredFrmRx.setStatus("mandatory")


class _MscLpE1ChanTestBitErrorRate_Type(AsciiString):
    """Custom type mscLpE1ChanTestBitErrorRate based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )


_MscLpE1ChanTestBitErrorRate_Type.__name__ = "AsciiString"
_MscLpE1ChanTestBitErrorRate_Object = MibTableColumn
mscLpE1ChanTestBitErrorRate = _MscLpE1ChanTestBitErrorRate_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 2, 12, 1, 11),
    _MscLpE1ChanTestBitErrorRate_Type()
)
mscLpE1ChanTestBitErrorRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanTestBitErrorRate.setStatus("mandatory")
_MscLpE1ChanCell_ObjectIdentity = ObjectIdentity
mscLpE1ChanCell = _MscLpE1ChanCell_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3)
)
_MscLpE1ChanCellRowStatusTable_Object = MibTable
mscLpE1ChanCellRowStatusTable = _MscLpE1ChanCellRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 1)
)
if mibBuilder.loadTexts:
    mscLpE1ChanCellRowStatusTable.setStatus("mandatory")
_MscLpE1ChanCellRowStatusEntry_Object = MibTableRow
mscLpE1ChanCellRowStatusEntry = _MscLpE1ChanCellRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 1, 1)
)
mscLpE1ChanCellRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanCellIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanCellRowStatusEntry.setStatus("mandatory")
_MscLpE1ChanCellRowStatus_Type = RowStatus
_MscLpE1ChanCellRowStatus_Object = MibTableColumn
mscLpE1ChanCellRowStatus = _MscLpE1ChanCellRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 1, 1, 1),
    _MscLpE1ChanCellRowStatus_Type()
)
mscLpE1ChanCellRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanCellRowStatus.setStatus("mandatory")
_MscLpE1ChanCellComponentName_Type = DisplayString
_MscLpE1ChanCellComponentName_Object = MibTableColumn
mscLpE1ChanCellComponentName = _MscLpE1ChanCellComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 1, 1, 2),
    _MscLpE1ChanCellComponentName_Type()
)
mscLpE1ChanCellComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanCellComponentName.setStatus("mandatory")
_MscLpE1ChanCellStorageType_Type = StorageType
_MscLpE1ChanCellStorageType_Object = MibTableColumn
mscLpE1ChanCellStorageType = _MscLpE1ChanCellStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 1, 1, 4),
    _MscLpE1ChanCellStorageType_Type()
)
mscLpE1ChanCellStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanCellStorageType.setStatus("mandatory")
_MscLpE1ChanCellIndex_Type = NonReplicated
_MscLpE1ChanCellIndex_Object = MibTableColumn
mscLpE1ChanCellIndex = _MscLpE1ChanCellIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 1, 1, 10),
    _MscLpE1ChanCellIndex_Type()
)
mscLpE1ChanCellIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpE1ChanCellIndex.setStatus("mandatory")
_MscLpE1ChanCellProvTable_Object = MibTable
mscLpE1ChanCellProvTable = _MscLpE1ChanCellProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 10)
)
if mibBuilder.loadTexts:
    mscLpE1ChanCellProvTable.setStatus("mandatory")
_MscLpE1ChanCellProvEntry_Object = MibTableRow
mscLpE1ChanCellProvEntry = _MscLpE1ChanCellProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 10, 1)
)
mscLpE1ChanCellProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanCellIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanCellProvEntry.setStatus("mandatory")


class _MscLpE1ChanCellAlarmActDelay_Type(Unsigned32):
    """Custom type mscLpE1ChanCellAlarmActDelay based on Unsigned32"""
    defaultValue = 500

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2000),
    )


_MscLpE1ChanCellAlarmActDelay_Type.__name__ = "Unsigned32"
_MscLpE1ChanCellAlarmActDelay_Object = MibTableColumn
mscLpE1ChanCellAlarmActDelay = _MscLpE1ChanCellAlarmActDelay_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 10, 1, 1),
    _MscLpE1ChanCellAlarmActDelay_Type()
)
mscLpE1ChanCellAlarmActDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanCellAlarmActDelay.setStatus("mandatory")


class _MscLpE1ChanCellScrambleCellPayload_Type(Integer32):
    """Custom type mscLpE1ChanCellScrambleCellPayload based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpE1ChanCellScrambleCellPayload_Type.__name__ = "Integer32"
_MscLpE1ChanCellScrambleCellPayload_Object = MibTableColumn
mscLpE1ChanCellScrambleCellPayload = _MscLpE1ChanCellScrambleCellPayload_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 10, 1, 2),
    _MscLpE1ChanCellScrambleCellPayload_Type()
)
mscLpE1ChanCellScrambleCellPayload.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanCellScrambleCellPayload.setStatus("mandatory")


class _MscLpE1ChanCellCorrectSingleBitHeaderErrors_Type(Integer32):
    """Custom type mscLpE1ChanCellCorrectSingleBitHeaderErrors based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpE1ChanCellCorrectSingleBitHeaderErrors_Type.__name__ = "Integer32"
_MscLpE1ChanCellCorrectSingleBitHeaderErrors_Object = MibTableColumn
mscLpE1ChanCellCorrectSingleBitHeaderErrors = _MscLpE1ChanCellCorrectSingleBitHeaderErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 10, 1, 3),
    _MscLpE1ChanCellCorrectSingleBitHeaderErrors_Type()
)
mscLpE1ChanCellCorrectSingleBitHeaderErrors.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanCellCorrectSingleBitHeaderErrors.setStatus("mandatory")
_MscLpE1ChanCellOperTable_Object = MibTable
mscLpE1ChanCellOperTable = _MscLpE1ChanCellOperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 11)
)
if mibBuilder.loadTexts:
    mscLpE1ChanCellOperTable.setStatus("mandatory")
_MscLpE1ChanCellOperEntry_Object = MibTableRow
mscLpE1ChanCellOperEntry = _MscLpE1ChanCellOperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 11, 1)
)
mscLpE1ChanCellOperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanCellIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanCellOperEntry.setStatus("mandatory")


class _MscLpE1ChanCellLcdAlarm_Type(Integer32):
    """Custom type mscLpE1ChanCellLcdAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpE1ChanCellLcdAlarm_Type.__name__ = "Integer32"
_MscLpE1ChanCellLcdAlarm_Object = MibTableColumn
mscLpE1ChanCellLcdAlarm = _MscLpE1ChanCellLcdAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 11, 1, 1),
    _MscLpE1ChanCellLcdAlarm_Type()
)
mscLpE1ChanCellLcdAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanCellLcdAlarm.setStatus("mandatory")
_MscLpE1ChanCellStatsTable_Object = MibTable
mscLpE1ChanCellStatsTable = _MscLpE1ChanCellStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 12)
)
if mibBuilder.loadTexts:
    mscLpE1ChanCellStatsTable.setStatus("mandatory")
_MscLpE1ChanCellStatsEntry_Object = MibTableRow
mscLpE1ChanCellStatsEntry = _MscLpE1ChanCellStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 12, 1)
)
mscLpE1ChanCellStatsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanCellIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanCellStatsEntry.setStatus("mandatory")
_MscLpE1ChanCellUncorrectableHecErrors_Type = Counter32
_MscLpE1ChanCellUncorrectableHecErrors_Object = MibTableColumn
mscLpE1ChanCellUncorrectableHecErrors = _MscLpE1ChanCellUncorrectableHecErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 12, 1, 1),
    _MscLpE1ChanCellUncorrectableHecErrors_Type()
)
mscLpE1ChanCellUncorrectableHecErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanCellUncorrectableHecErrors.setStatus("mandatory")
_MscLpE1ChanCellSevErroredSec_Type = Counter32
_MscLpE1ChanCellSevErroredSec_Object = MibTableColumn
mscLpE1ChanCellSevErroredSec = _MscLpE1ChanCellSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 12, 1, 2),
    _MscLpE1ChanCellSevErroredSec_Type()
)
mscLpE1ChanCellSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanCellSevErroredSec.setStatus("mandatory")


class _MscLpE1ChanCellReceiveCellUtilization_Type(Gauge32):
    """Custom type mscLpE1ChanCellReceiveCellUtilization based on Gauge32"""
    defaultValue = 0

    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_MscLpE1ChanCellReceiveCellUtilization_Type.__name__ = "Gauge32"
_MscLpE1ChanCellReceiveCellUtilization_Object = MibTableColumn
mscLpE1ChanCellReceiveCellUtilization = _MscLpE1ChanCellReceiveCellUtilization_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 12, 1, 3),
    _MscLpE1ChanCellReceiveCellUtilization_Type()
)
mscLpE1ChanCellReceiveCellUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanCellReceiveCellUtilization.setStatus("mandatory")


class _MscLpE1ChanCellTransmitCellUtilization_Type(Gauge32):
    """Custom type mscLpE1ChanCellTransmitCellUtilization based on Gauge32"""
    defaultValue = 0

    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_MscLpE1ChanCellTransmitCellUtilization_Type.__name__ = "Gauge32"
_MscLpE1ChanCellTransmitCellUtilization_Object = MibTableColumn
mscLpE1ChanCellTransmitCellUtilization = _MscLpE1ChanCellTransmitCellUtilization_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 12, 1, 4),
    _MscLpE1ChanCellTransmitCellUtilization_Type()
)
mscLpE1ChanCellTransmitCellUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanCellTransmitCellUtilization.setStatus("mandatory")
_MscLpE1ChanCellCorrectableHeaderErrors_Type = Counter32
_MscLpE1ChanCellCorrectableHeaderErrors_Object = MibTableColumn
mscLpE1ChanCellCorrectableHeaderErrors = _MscLpE1ChanCellCorrectableHeaderErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 3, 12, 1, 5),
    _MscLpE1ChanCellCorrectableHeaderErrors_Type()
)
mscLpE1ChanCellCorrectableHeaderErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanCellCorrectableHeaderErrors.setStatus("mandatory")
_MscLpE1ChanTc_ObjectIdentity = ObjectIdentity
mscLpE1ChanTc = _MscLpE1ChanTc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4)
)
_MscLpE1ChanTcRowStatusTable_Object = MibTable
mscLpE1ChanTcRowStatusTable = _MscLpE1ChanTcRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 1)
)
if mibBuilder.loadTexts:
    mscLpE1ChanTcRowStatusTable.setStatus("mandatory")
_MscLpE1ChanTcRowStatusEntry_Object = MibTableRow
mscLpE1ChanTcRowStatusEntry = _MscLpE1ChanTcRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 1, 1)
)
mscLpE1ChanTcRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanTcIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanTcRowStatusEntry.setStatus("mandatory")
_MscLpE1ChanTcRowStatus_Type = RowStatus
_MscLpE1ChanTcRowStatus_Object = MibTableColumn
mscLpE1ChanTcRowStatus = _MscLpE1ChanTcRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 1, 1, 1),
    _MscLpE1ChanTcRowStatus_Type()
)
mscLpE1ChanTcRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanTcRowStatus.setStatus("mandatory")
_MscLpE1ChanTcComponentName_Type = DisplayString
_MscLpE1ChanTcComponentName_Object = MibTableColumn
mscLpE1ChanTcComponentName = _MscLpE1ChanTcComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 1, 1, 2),
    _MscLpE1ChanTcComponentName_Type()
)
mscLpE1ChanTcComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanTcComponentName.setStatus("mandatory")
_MscLpE1ChanTcStorageType_Type = StorageType
_MscLpE1ChanTcStorageType_Object = MibTableColumn
mscLpE1ChanTcStorageType = _MscLpE1ChanTcStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 1, 1, 4),
    _MscLpE1ChanTcStorageType_Type()
)
mscLpE1ChanTcStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanTcStorageType.setStatus("mandatory")
_MscLpE1ChanTcIndex_Type = NonReplicated
_MscLpE1ChanTcIndex_Object = MibTableColumn
mscLpE1ChanTcIndex = _MscLpE1ChanTcIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 1, 1, 10),
    _MscLpE1ChanTcIndex_Type()
)
mscLpE1ChanTcIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpE1ChanTcIndex.setStatus("mandatory")
_MscLpE1ChanTcProvTable_Object = MibTable
mscLpE1ChanTcProvTable = _MscLpE1ChanTcProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 10)
)
if mibBuilder.loadTexts:
    mscLpE1ChanTcProvTable.setStatus("mandatory")
_MscLpE1ChanTcProvEntry_Object = MibTableRow
mscLpE1ChanTcProvEntry = _MscLpE1ChanTcProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 10, 1)
)
mscLpE1ChanTcProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanTcIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanTcProvEntry.setStatus("mandatory")


class _MscLpE1ChanTcReplacementData_Type(Hex):
    """Custom type mscLpE1ChanTcReplacementData based on Hex"""
    defaultValue = 255

    subtypeSpec = Hex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_MscLpE1ChanTcReplacementData_Type.__name__ = "Hex"
_MscLpE1ChanTcReplacementData_Object = MibTableColumn
mscLpE1ChanTcReplacementData = _MscLpE1ChanTcReplacementData_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 10, 1, 1),
    _MscLpE1ChanTcReplacementData_Type()
)
mscLpE1ChanTcReplacementData.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanTcReplacementData.setStatus("mandatory")


class _MscLpE1ChanTcSignalOneDuration_Type(Unsigned32):
    """Custom type mscLpE1ChanTcSignalOneDuration based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 60),
    )


_MscLpE1ChanTcSignalOneDuration_Type.__name__ = "Unsigned32"
_MscLpE1ChanTcSignalOneDuration_Object = MibTableColumn
mscLpE1ChanTcSignalOneDuration = _MscLpE1ChanTcSignalOneDuration_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 10, 1, 2),
    _MscLpE1ChanTcSignalOneDuration_Type()
)
mscLpE1ChanTcSignalOneDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanTcSignalOneDuration.setStatus("mandatory")
_MscLpE1ChanTcOpTable_Object = MibTable
mscLpE1ChanTcOpTable = _MscLpE1ChanTcOpTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 11)
)
if mibBuilder.loadTexts:
    mscLpE1ChanTcOpTable.setStatus("mandatory")
_MscLpE1ChanTcOpEntry_Object = MibTableRow
mscLpE1ChanTcOpEntry = _MscLpE1ChanTcOpEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 11, 1)
)
mscLpE1ChanTcOpEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanTcIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanTcOpEntry.setStatus("mandatory")


class _MscLpE1ChanTcIngressConditioning_Type(Integer32):
    """Custom type mscLpE1ChanTcIngressConditioning based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpE1ChanTcIngressConditioning_Type.__name__ = "Integer32"
_MscLpE1ChanTcIngressConditioning_Object = MibTableColumn
mscLpE1ChanTcIngressConditioning = _MscLpE1ChanTcIngressConditioning_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 11, 1, 1),
    _MscLpE1ChanTcIngressConditioning_Type()
)
mscLpE1ChanTcIngressConditioning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanTcIngressConditioning.setStatus("mandatory")


class _MscLpE1ChanTcEgressConditioning_Type(Integer32):
    """Custom type mscLpE1ChanTcEgressConditioning based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpE1ChanTcEgressConditioning_Type.__name__ = "Integer32"
_MscLpE1ChanTcEgressConditioning_Object = MibTableColumn
mscLpE1ChanTcEgressConditioning = _MscLpE1ChanTcEgressConditioning_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 11, 1, 2),
    _MscLpE1ChanTcEgressConditioning_Type()
)
mscLpE1ChanTcEgressConditioning.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanTcEgressConditioning.setStatus("mandatory")
_MscLpE1ChanTcSigOneTable_Object = MibTable
mscLpE1ChanTcSigOneTable = _MscLpE1ChanTcSigOneTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 398)
)
if mibBuilder.loadTexts:
    mscLpE1ChanTcSigOneTable.setStatus("mandatory")
_MscLpE1ChanTcSigOneEntry_Object = MibTableRow
mscLpE1ChanTcSigOneEntry = _MscLpE1ChanTcSigOneEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 398, 1)
)
mscLpE1ChanTcSigOneEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanTcIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanTcSigOneIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanTcSigOneEntry.setStatus("mandatory")


class _MscLpE1ChanTcSigOneIndex_Type(Integer32):
    """Custom type mscLpE1ChanTcSigOneIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("a", 3),
          ("b", 2),
          ("c", 1),
          ("d", 0))
    )


_MscLpE1ChanTcSigOneIndex_Type.__name__ = "Integer32"
_MscLpE1ChanTcSigOneIndex_Object = MibTableColumn
mscLpE1ChanTcSigOneIndex = _MscLpE1ChanTcSigOneIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 398, 1, 1),
    _MscLpE1ChanTcSigOneIndex_Type()
)
mscLpE1ChanTcSigOneIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpE1ChanTcSigOneIndex.setStatus("mandatory")


class _MscLpE1ChanTcSigOneValue_Type(Unsigned32):
    """Custom type mscLpE1ChanTcSigOneValue based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_MscLpE1ChanTcSigOneValue_Type.__name__ = "Unsigned32"
_MscLpE1ChanTcSigOneValue_Object = MibTableColumn
mscLpE1ChanTcSigOneValue = _MscLpE1ChanTcSigOneValue_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 398, 1, 2),
    _MscLpE1ChanTcSigOneValue_Type()
)
mscLpE1ChanTcSigOneValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanTcSigOneValue.setStatus("mandatory")
_MscLpE1ChanTcSigTwoTable_Object = MibTable
mscLpE1ChanTcSigTwoTable = _MscLpE1ChanTcSigTwoTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 399)
)
if mibBuilder.loadTexts:
    mscLpE1ChanTcSigTwoTable.setStatus("mandatory")
_MscLpE1ChanTcSigTwoEntry_Object = MibTableRow
mscLpE1ChanTcSigTwoEntry = _MscLpE1ChanTcSigTwoEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 399, 1)
)
mscLpE1ChanTcSigTwoEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanTcIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanTcSigTwoIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanTcSigTwoEntry.setStatus("mandatory")


class _MscLpE1ChanTcSigTwoIndex_Type(Integer32):
    """Custom type mscLpE1ChanTcSigTwoIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("a", 3),
          ("b", 2),
          ("c", 1),
          ("d", 0))
    )


_MscLpE1ChanTcSigTwoIndex_Type.__name__ = "Integer32"
_MscLpE1ChanTcSigTwoIndex_Object = MibTableColumn
mscLpE1ChanTcSigTwoIndex = _MscLpE1ChanTcSigTwoIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 399, 1, 1),
    _MscLpE1ChanTcSigTwoIndex_Type()
)
mscLpE1ChanTcSigTwoIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpE1ChanTcSigTwoIndex.setStatus("mandatory")


class _MscLpE1ChanTcSigTwoValue_Type(Unsigned32):
    """Custom type mscLpE1ChanTcSigTwoValue based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_MscLpE1ChanTcSigTwoValue_Type.__name__ = "Unsigned32"
_MscLpE1ChanTcSigTwoValue_Object = MibTableColumn
mscLpE1ChanTcSigTwoValue = _MscLpE1ChanTcSigTwoValue_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 4, 399, 1, 2),
    _MscLpE1ChanTcSigTwoValue_Type()
)
mscLpE1ChanTcSigTwoValue.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanTcSigTwoValue.setStatus("mandatory")
_MscLpE1ChanFlm_ObjectIdentity = ObjectIdentity
mscLpE1ChanFlm = _MscLpE1ChanFlm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5)
)
_MscLpE1ChanFlmRowStatusTable_Object = MibTable
mscLpE1ChanFlmRowStatusTable = _MscLpE1ChanFlmRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 1)
)
if mibBuilder.loadTexts:
    mscLpE1ChanFlmRowStatusTable.setStatus("mandatory")
_MscLpE1ChanFlmRowStatusEntry_Object = MibTableRow
mscLpE1ChanFlmRowStatusEntry = _MscLpE1ChanFlmRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 1, 1)
)
mscLpE1ChanFlmRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanFlmIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanFlmRowStatusEntry.setStatus("mandatory")
_MscLpE1ChanFlmRowStatus_Type = RowStatus
_MscLpE1ChanFlmRowStatus_Object = MibTableColumn
mscLpE1ChanFlmRowStatus = _MscLpE1ChanFlmRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 1, 1, 1),
    _MscLpE1ChanFlmRowStatus_Type()
)
mscLpE1ChanFlmRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanFlmRowStatus.setStatus("mandatory")
_MscLpE1ChanFlmComponentName_Type = DisplayString
_MscLpE1ChanFlmComponentName_Object = MibTableColumn
mscLpE1ChanFlmComponentName = _MscLpE1ChanFlmComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 1, 1, 2),
    _MscLpE1ChanFlmComponentName_Type()
)
mscLpE1ChanFlmComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanFlmComponentName.setStatus("mandatory")
_MscLpE1ChanFlmStorageType_Type = StorageType
_MscLpE1ChanFlmStorageType_Object = MibTableColumn
mscLpE1ChanFlmStorageType = _MscLpE1ChanFlmStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 1, 1, 4),
    _MscLpE1ChanFlmStorageType_Type()
)
mscLpE1ChanFlmStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanFlmStorageType.setStatus("mandatory")
_MscLpE1ChanFlmIndex_Type = NonReplicated
_MscLpE1ChanFlmIndex_Object = MibTableColumn
mscLpE1ChanFlmIndex = _MscLpE1ChanFlmIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 1, 1, 10),
    _MscLpE1ChanFlmIndex_Type()
)
mscLpE1ChanFlmIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpE1ChanFlmIndex.setStatus("mandatory")
_MscLpE1ChanFlmProvTable_Object = MibTable
mscLpE1ChanFlmProvTable = _MscLpE1ChanFlmProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 10)
)
if mibBuilder.loadTexts:
    mscLpE1ChanFlmProvTable.setStatus("mandatory")
_MscLpE1ChanFlmProvEntry_Object = MibTableRow
mscLpE1ChanFlmProvEntry = _MscLpE1ChanFlmProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 10, 1)
)
mscLpE1ChanFlmProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanFlmIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanFlmProvEntry.setStatus("mandatory")


class _MscLpE1ChanFlmABitMonitoring_Type(Integer32):
    """Custom type mscLpE1ChanFlmABitMonitoring based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpE1ChanFlmABitMonitoring_Type.__name__ = "Integer32"
_MscLpE1ChanFlmABitMonitoring_Object = MibTableColumn
mscLpE1ChanFlmABitMonitoring = _MscLpE1ChanFlmABitMonitoring_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 10, 1, 1),
    _MscLpE1ChanFlmABitMonitoring_Type()
)
mscLpE1ChanFlmABitMonitoring.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanFlmABitMonitoring.setStatus("mandatory")


class _MscLpE1ChanFlmHdlcMonitoring_Type(Integer32):
    """Custom type mscLpE1ChanFlmHdlcMonitoring based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpE1ChanFlmHdlcMonitoring_Type.__name__ = "Integer32"
_MscLpE1ChanFlmHdlcMonitoring_Object = MibTableColumn
mscLpE1ChanFlmHdlcMonitoring = _MscLpE1ChanFlmHdlcMonitoring_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 10, 1, 2),
    _MscLpE1ChanFlmHdlcMonitoring_Type()
)
mscLpE1ChanFlmHdlcMonitoring.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanFlmHdlcMonitoring.setStatus("mandatory")
_MscLpE1ChanFlmOpTable_Object = MibTable
mscLpE1ChanFlmOpTable = _MscLpE1ChanFlmOpTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 11)
)
if mibBuilder.loadTexts:
    mscLpE1ChanFlmOpTable.setStatus("mandatory")
_MscLpE1ChanFlmOpEntry_Object = MibTableRow
mscLpE1ChanFlmOpEntry = _MscLpE1ChanFlmOpEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 11, 1)
)
mscLpE1ChanFlmOpEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanFlmIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanFlmOpEntry.setStatus("mandatory")


class _MscLpE1ChanFlmFlmStatus_Type(Integer32):
    """Custom type mscLpE1ChanFlmFlmStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("frameLinkDown", 2),
          ("frameLinkUp", 1),
          ("lossOfAbit", 4),
          ("lossOfHdlc", 3),
          ("notMonitoring", 0))
    )


_MscLpE1ChanFlmFlmStatus_Type.__name__ = "Integer32"
_MscLpE1ChanFlmFlmStatus_Object = MibTableColumn
mscLpE1ChanFlmFlmStatus = _MscLpE1ChanFlmFlmStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 5, 11, 1, 1),
    _MscLpE1ChanFlmFlmStatus_Type()
)
mscLpE1ChanFlmFlmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanFlmFlmStatus.setStatus("mandatory")
_MscLpE1ChanProvTable_Object = MibTable
mscLpE1ChanProvTable = _MscLpE1ChanProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 10)
)
if mibBuilder.loadTexts:
    mscLpE1ChanProvTable.setStatus("mandatory")
_MscLpE1ChanProvEntry_Object = MibTableRow
mscLpE1ChanProvEntry = _MscLpE1ChanProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 10, 1)
)
mscLpE1ChanProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanProvEntry.setStatus("mandatory")


class _MscLpE1ChanTimeslots_Type(OctetString):
    """Custom type mscLpE1ChanTimeslots based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )


_MscLpE1ChanTimeslots_Type.__name__ = "OctetString"
_MscLpE1ChanTimeslots_Object = MibTableColumn
mscLpE1ChanTimeslots = _MscLpE1ChanTimeslots_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 10, 1, 1),
    _MscLpE1ChanTimeslots_Type()
)
mscLpE1ChanTimeslots.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanTimeslots.setStatus("mandatory")


class _MscLpE1ChanTimeslotDataRate_Type(Integer32):
    """Custom type mscLpE1ChanTimeslotDataRate based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("doNotOverride", 1),
          ("n56k", 0))
    )


_MscLpE1ChanTimeslotDataRate_Type.__name__ = "Integer32"
_MscLpE1ChanTimeslotDataRate_Object = MibTableColumn
mscLpE1ChanTimeslotDataRate = _MscLpE1ChanTimeslotDataRate_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 10, 1, 2),
    _MscLpE1ChanTimeslotDataRate_Type()
)
mscLpE1ChanTimeslotDataRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanTimeslotDataRate.setStatus("mandatory")
_MscLpE1ChanApplicationFramerName_Type = Link
_MscLpE1ChanApplicationFramerName_Object = MibTableColumn
mscLpE1ChanApplicationFramerName = _MscLpE1ChanApplicationFramerName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 10, 1, 3),
    _MscLpE1ChanApplicationFramerName_Type()
)
mscLpE1ChanApplicationFramerName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanApplicationFramerName.setStatus("mandatory")
_MscLpE1ChanCidDataTable_Object = MibTable
mscLpE1ChanCidDataTable = _MscLpE1ChanCidDataTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 11)
)
if mibBuilder.loadTexts:
    mscLpE1ChanCidDataTable.setStatus("mandatory")
_MscLpE1ChanCidDataEntry_Object = MibTableRow
mscLpE1ChanCidDataEntry = _MscLpE1ChanCidDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 11, 1)
)
mscLpE1ChanCidDataEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanCidDataEntry.setStatus("mandatory")


class _MscLpE1ChanCustomerIdentifier_Type(Unsigned32):
    """Custom type mscLpE1ChanCustomerIdentifier based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 8191),
    )


_MscLpE1ChanCustomerIdentifier_Type.__name__ = "Unsigned32"
_MscLpE1ChanCustomerIdentifier_Object = MibTableColumn
mscLpE1ChanCustomerIdentifier = _MscLpE1ChanCustomerIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 11, 1, 1),
    _MscLpE1ChanCustomerIdentifier_Type()
)
mscLpE1ChanCustomerIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanCustomerIdentifier.setStatus("mandatory")
_MscLpE1ChanIfEntryTable_Object = MibTable
mscLpE1ChanIfEntryTable = _MscLpE1ChanIfEntryTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 12)
)
if mibBuilder.loadTexts:
    mscLpE1ChanIfEntryTable.setStatus("mandatory")
_MscLpE1ChanIfEntryEntry_Object = MibTableRow
mscLpE1ChanIfEntryEntry = _MscLpE1ChanIfEntryEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 12, 1)
)
mscLpE1ChanIfEntryEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanIfEntryEntry.setStatus("mandatory")


class _MscLpE1ChanIfAdminStatus_Type(Integer32):
    """Custom type mscLpE1ChanIfAdminStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpE1ChanIfAdminStatus_Type.__name__ = "Integer32"
_MscLpE1ChanIfAdminStatus_Object = MibTableColumn
mscLpE1ChanIfAdminStatus = _MscLpE1ChanIfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 12, 1, 1),
    _MscLpE1ChanIfAdminStatus_Type()
)
mscLpE1ChanIfAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanIfAdminStatus.setStatus("mandatory")


class _MscLpE1ChanIfIndex_Type(InterfaceIndex):
    """Custom type mscLpE1ChanIfIndex based on InterfaceIndex"""
    subtypeSpec = InterfaceIndex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_MscLpE1ChanIfIndex_Type.__name__ = "InterfaceIndex"
_MscLpE1ChanIfIndex_Object = MibTableColumn
mscLpE1ChanIfIndex = _MscLpE1ChanIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 12, 1, 2),
    _MscLpE1ChanIfIndex_Type()
)
mscLpE1ChanIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanIfIndex.setStatus("mandatory")
_MscLpE1ChanOperStatusTable_Object = MibTable
mscLpE1ChanOperStatusTable = _MscLpE1ChanOperStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 13)
)
if mibBuilder.loadTexts:
    mscLpE1ChanOperStatusTable.setStatus("mandatory")
_MscLpE1ChanOperStatusEntry_Object = MibTableRow
mscLpE1ChanOperStatusEntry = _MscLpE1ChanOperStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 13, 1)
)
mscLpE1ChanOperStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanOperStatusEntry.setStatus("mandatory")


class _MscLpE1ChanSnmpOperStatus_Type(Integer32):
    """Custom type mscLpE1ChanSnmpOperStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpE1ChanSnmpOperStatus_Type.__name__ = "Integer32"
_MscLpE1ChanSnmpOperStatus_Object = MibTableColumn
mscLpE1ChanSnmpOperStatus = _MscLpE1ChanSnmpOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 13, 1, 1),
    _MscLpE1ChanSnmpOperStatus_Type()
)
mscLpE1ChanSnmpOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanSnmpOperStatus.setStatus("mandatory")
_MscLpE1ChanStateTable_Object = MibTable
mscLpE1ChanStateTable = _MscLpE1ChanStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 14)
)
if mibBuilder.loadTexts:
    mscLpE1ChanStateTable.setStatus("mandatory")
_MscLpE1ChanStateEntry_Object = MibTableRow
mscLpE1ChanStateEntry = _MscLpE1ChanStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 14, 1)
)
mscLpE1ChanStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanStateEntry.setStatus("mandatory")


class _MscLpE1ChanAdminState_Type(Integer32):
    """Custom type mscLpE1ChanAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpE1ChanAdminState_Type.__name__ = "Integer32"
_MscLpE1ChanAdminState_Object = MibTableColumn
mscLpE1ChanAdminState = _MscLpE1ChanAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 14, 1, 1),
    _MscLpE1ChanAdminState_Type()
)
mscLpE1ChanAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanAdminState.setStatus("mandatory")


class _MscLpE1ChanOperationalState_Type(Integer32):
    """Custom type mscLpE1ChanOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpE1ChanOperationalState_Type.__name__ = "Integer32"
_MscLpE1ChanOperationalState_Object = MibTableColumn
mscLpE1ChanOperationalState = _MscLpE1ChanOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 14, 1, 2),
    _MscLpE1ChanOperationalState_Type()
)
mscLpE1ChanOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanOperationalState.setStatus("mandatory")


class _MscLpE1ChanUsageState_Type(Integer32):
    """Custom type mscLpE1ChanUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpE1ChanUsageState_Type.__name__ = "Integer32"
_MscLpE1ChanUsageState_Object = MibTableColumn
mscLpE1ChanUsageState = _MscLpE1ChanUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 14, 1, 3),
    _MscLpE1ChanUsageState_Type()
)
mscLpE1ChanUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanUsageState.setStatus("mandatory")


class _MscLpE1ChanAvailabilityStatus_Type(OctetString):
    """Custom type mscLpE1ChanAvailabilityStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_MscLpE1ChanAvailabilityStatus_Type.__name__ = "OctetString"
_MscLpE1ChanAvailabilityStatus_Object = MibTableColumn
mscLpE1ChanAvailabilityStatus = _MscLpE1ChanAvailabilityStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 14, 1, 4),
    _MscLpE1ChanAvailabilityStatus_Type()
)
mscLpE1ChanAvailabilityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanAvailabilityStatus.setStatus("mandatory")


class _MscLpE1ChanProceduralStatus_Type(OctetString):
    """Custom type mscLpE1ChanProceduralStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpE1ChanProceduralStatus_Type.__name__ = "OctetString"
_MscLpE1ChanProceduralStatus_Object = MibTableColumn
mscLpE1ChanProceduralStatus = _MscLpE1ChanProceduralStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 14, 1, 5),
    _MscLpE1ChanProceduralStatus_Type()
)
mscLpE1ChanProceduralStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanProceduralStatus.setStatus("mandatory")


class _MscLpE1ChanControlStatus_Type(OctetString):
    """Custom type mscLpE1ChanControlStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpE1ChanControlStatus_Type.__name__ = "OctetString"
_MscLpE1ChanControlStatus_Object = MibTableColumn
mscLpE1ChanControlStatus = _MscLpE1ChanControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 14, 1, 6),
    _MscLpE1ChanControlStatus_Type()
)
mscLpE1ChanControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanControlStatus.setStatus("mandatory")


class _MscLpE1ChanAlarmStatus_Type(OctetString):
    """Custom type mscLpE1ChanAlarmStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpE1ChanAlarmStatus_Type.__name__ = "OctetString"
_MscLpE1ChanAlarmStatus_Object = MibTableColumn
mscLpE1ChanAlarmStatus = _MscLpE1ChanAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 14, 1, 7),
    _MscLpE1ChanAlarmStatus_Type()
)
mscLpE1ChanAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanAlarmStatus.setStatus("mandatory")


class _MscLpE1ChanStandbyStatus_Type(Integer32):
    """Custom type mscLpE1ChanStandbyStatus based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              15)
        )
    )
    namedValues = NamedValues(
        *(("coldStandby", 1),
          ("hotStandby", 0),
          ("notSet", 15),
          ("providingService", 2))
    )


_MscLpE1ChanStandbyStatus_Type.__name__ = "Integer32"
_MscLpE1ChanStandbyStatus_Object = MibTableColumn
mscLpE1ChanStandbyStatus = _MscLpE1ChanStandbyStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 14, 1, 8),
    _MscLpE1ChanStandbyStatus_Type()
)
mscLpE1ChanStandbyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanStandbyStatus.setStatus("mandatory")


class _MscLpE1ChanUnknownStatus_Type(Integer32):
    """Custom type mscLpE1ChanUnknownStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_MscLpE1ChanUnknownStatus_Type.__name__ = "Integer32"
_MscLpE1ChanUnknownStatus_Object = MibTableColumn
mscLpE1ChanUnknownStatus = _MscLpE1ChanUnknownStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 14, 1, 9),
    _MscLpE1ChanUnknownStatus_Type()
)
mscLpE1ChanUnknownStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanUnknownStatus.setStatus("mandatory")
_MscLpE1ChanOperTable_Object = MibTable
mscLpE1ChanOperTable = _MscLpE1ChanOperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 15)
)
if mibBuilder.loadTexts:
    mscLpE1ChanOperTable.setStatus("mandatory")
_MscLpE1ChanOperEntry_Object = MibTableRow
mscLpE1ChanOperEntry = _MscLpE1ChanOperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 15, 1)
)
mscLpE1ChanOperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanOperEntry.setStatus("mandatory")


class _MscLpE1ChanActualChannelSpeed_Type(Gauge32):
    """Custom type mscLpE1ChanActualChannelSpeed based on Gauge32"""
    defaultValue = 0

    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpE1ChanActualChannelSpeed_Type.__name__ = "Gauge32"
_MscLpE1ChanActualChannelSpeed_Object = MibTableColumn
mscLpE1ChanActualChannelSpeed = _MscLpE1ChanActualChannelSpeed_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 15, 1, 1),
    _MscLpE1ChanActualChannelSpeed_Type()
)
mscLpE1ChanActualChannelSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ChanActualChannelSpeed.setStatus("mandatory")
_MscLpE1ChanAdminInfoTable_Object = MibTable
mscLpE1ChanAdminInfoTable = _MscLpE1ChanAdminInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 16)
)
if mibBuilder.loadTexts:
    mscLpE1ChanAdminInfoTable.setStatus("mandatory")
_MscLpE1ChanAdminInfoEntry_Object = MibTableRow
mscLpE1ChanAdminInfoEntry = _MscLpE1ChanAdminInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 16, 1)
)
mscLpE1ChanAdminInfoEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1ChanIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1ChanAdminInfoEntry.setStatus("mandatory")


class _MscLpE1ChanVendor_Type(AsciiString):
    """Custom type mscLpE1ChanVendor based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_MscLpE1ChanVendor_Type.__name__ = "AsciiString"
_MscLpE1ChanVendor_Object = MibTableColumn
mscLpE1ChanVendor = _MscLpE1ChanVendor_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 16, 1, 1),
    _MscLpE1ChanVendor_Type()
)
mscLpE1ChanVendor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanVendor.setStatus("mandatory")


class _MscLpE1ChanCommentText_Type(AsciiString):
    """Custom type mscLpE1ChanCommentText based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 60),
    )


_MscLpE1ChanCommentText_Type.__name__ = "AsciiString"
_MscLpE1ChanCommentText_Object = MibTableColumn
mscLpE1ChanCommentText = _MscLpE1ChanCommentText_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 2, 16, 1, 2),
    _MscLpE1ChanCommentText_Type()
)
mscLpE1ChanCommentText.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ChanCommentText.setStatus("mandatory")
_MscLpE1Test_ObjectIdentity = ObjectIdentity
mscLpE1Test = _MscLpE1Test_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3)
)
_MscLpE1TestRowStatusTable_Object = MibTable
mscLpE1TestRowStatusTable = _MscLpE1TestRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 1)
)
if mibBuilder.loadTexts:
    mscLpE1TestRowStatusTable.setStatus("mandatory")
_MscLpE1TestRowStatusEntry_Object = MibTableRow
mscLpE1TestRowStatusEntry = _MscLpE1TestRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 1, 1)
)
mscLpE1TestRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1TestRowStatusEntry.setStatus("mandatory")
_MscLpE1TestRowStatus_Type = RowStatus
_MscLpE1TestRowStatus_Object = MibTableColumn
mscLpE1TestRowStatus = _MscLpE1TestRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 1, 1, 1),
    _MscLpE1TestRowStatus_Type()
)
mscLpE1TestRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1TestRowStatus.setStatus("mandatory")
_MscLpE1TestComponentName_Type = DisplayString
_MscLpE1TestComponentName_Object = MibTableColumn
mscLpE1TestComponentName = _MscLpE1TestComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 1, 1, 2),
    _MscLpE1TestComponentName_Type()
)
mscLpE1TestComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1TestComponentName.setStatus("mandatory")
_MscLpE1TestStorageType_Type = StorageType
_MscLpE1TestStorageType_Object = MibTableColumn
mscLpE1TestStorageType = _MscLpE1TestStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 1, 1, 4),
    _MscLpE1TestStorageType_Type()
)
mscLpE1TestStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1TestStorageType.setStatus("mandatory")
_MscLpE1TestIndex_Type = NonReplicated
_MscLpE1TestIndex_Object = MibTableColumn
mscLpE1TestIndex = _MscLpE1TestIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 1, 1, 10),
    _MscLpE1TestIndex_Type()
)
mscLpE1TestIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpE1TestIndex.setStatus("mandatory")
_MscLpE1TestStateTable_Object = MibTable
mscLpE1TestStateTable = _MscLpE1TestStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 10)
)
if mibBuilder.loadTexts:
    mscLpE1TestStateTable.setStatus("mandatory")
_MscLpE1TestStateEntry_Object = MibTableRow
mscLpE1TestStateEntry = _MscLpE1TestStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 10, 1)
)
mscLpE1TestStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1TestStateEntry.setStatus("mandatory")


class _MscLpE1TestAdminState_Type(Integer32):
    """Custom type mscLpE1TestAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpE1TestAdminState_Type.__name__ = "Integer32"
_MscLpE1TestAdminState_Object = MibTableColumn
mscLpE1TestAdminState = _MscLpE1TestAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 10, 1, 1),
    _MscLpE1TestAdminState_Type()
)
mscLpE1TestAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1TestAdminState.setStatus("mandatory")


class _MscLpE1TestOperationalState_Type(Integer32):
    """Custom type mscLpE1TestOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpE1TestOperationalState_Type.__name__ = "Integer32"
_MscLpE1TestOperationalState_Object = MibTableColumn
mscLpE1TestOperationalState = _MscLpE1TestOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 10, 1, 2),
    _MscLpE1TestOperationalState_Type()
)
mscLpE1TestOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1TestOperationalState.setStatus("mandatory")


class _MscLpE1TestUsageState_Type(Integer32):
    """Custom type mscLpE1TestUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpE1TestUsageState_Type.__name__ = "Integer32"
_MscLpE1TestUsageState_Object = MibTableColumn
mscLpE1TestUsageState = _MscLpE1TestUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 10, 1, 3),
    _MscLpE1TestUsageState_Type()
)
mscLpE1TestUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1TestUsageState.setStatus("mandatory")
_MscLpE1TestSetupTable_Object = MibTable
mscLpE1TestSetupTable = _MscLpE1TestSetupTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 11)
)
if mibBuilder.loadTexts:
    mscLpE1TestSetupTable.setStatus("mandatory")
_MscLpE1TestSetupEntry_Object = MibTableRow
mscLpE1TestSetupEntry = _MscLpE1TestSetupEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 11, 1)
)
mscLpE1TestSetupEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1TestSetupEntry.setStatus("mandatory")


class _MscLpE1TestPurpose_Type(AsciiString):
    """Custom type mscLpE1TestPurpose based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_MscLpE1TestPurpose_Type.__name__ = "AsciiString"
_MscLpE1TestPurpose_Object = MibTableColumn
mscLpE1TestPurpose = _MscLpE1TestPurpose_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 11, 1, 1),
    _MscLpE1TestPurpose_Type()
)
mscLpE1TestPurpose.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1TestPurpose.setStatus("mandatory")


class _MscLpE1TestType_Type(Integer32):
    """Custom type mscLpE1TestType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("card", 0),
          ("externalLoop", 4),
          ("localLoop", 2),
          ("manual", 1),
          ("payloadLoop", 5),
          ("pn127RemoteLoop", 8),
          ("remoteLoop", 3),
          ("remoteLoopThisTrib", 6),
          ("v54RemoteLoop", 7))
    )


_MscLpE1TestType_Type.__name__ = "Integer32"
_MscLpE1TestType_Object = MibTableColumn
mscLpE1TestType = _MscLpE1TestType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 11, 1, 2),
    _MscLpE1TestType_Type()
)
mscLpE1TestType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1TestType.setStatus("mandatory")


class _MscLpE1TestFrmSize_Type(Unsigned32):
    """Custom type mscLpE1TestFrmSize based on Unsigned32"""
    defaultValue = 1024

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 4096),
    )


_MscLpE1TestFrmSize_Type.__name__ = "Unsigned32"
_MscLpE1TestFrmSize_Object = MibTableColumn
mscLpE1TestFrmSize = _MscLpE1TestFrmSize_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 11, 1, 3),
    _MscLpE1TestFrmSize_Type()
)
mscLpE1TestFrmSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1TestFrmSize.setStatus("mandatory")


class _MscLpE1TestFrmPatternType_Type(Integer32):
    """Custom type mscLpE1TestFrmPatternType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ccitt32kBitPattern", 0),
          ("ccitt8MBitPattern", 1),
          ("customizedPattern", 2))
    )


_MscLpE1TestFrmPatternType_Type.__name__ = "Integer32"
_MscLpE1TestFrmPatternType_Object = MibTableColumn
mscLpE1TestFrmPatternType = _MscLpE1TestFrmPatternType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 11, 1, 4),
    _MscLpE1TestFrmPatternType_Type()
)
mscLpE1TestFrmPatternType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1TestFrmPatternType.setStatus("mandatory")


class _MscLpE1TestCustomizedPattern_Type(Hex):
    """Custom type mscLpE1TestCustomizedPattern based on Hex"""
    defaultValue = 1431655765

    subtypeSpec = Hex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpE1TestCustomizedPattern_Type.__name__ = "Hex"
_MscLpE1TestCustomizedPattern_Object = MibTableColumn
mscLpE1TestCustomizedPattern = _MscLpE1TestCustomizedPattern_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 11, 1, 5),
    _MscLpE1TestCustomizedPattern_Type()
)
mscLpE1TestCustomizedPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1TestCustomizedPattern.setStatus("mandatory")


class _MscLpE1TestDataStartDelay_Type(Unsigned32):
    """Custom type mscLpE1TestDataStartDelay based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1814400),
    )


_MscLpE1TestDataStartDelay_Type.__name__ = "Unsigned32"
_MscLpE1TestDataStartDelay_Object = MibTableColumn
mscLpE1TestDataStartDelay = _MscLpE1TestDataStartDelay_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 11, 1, 6),
    _MscLpE1TestDataStartDelay_Type()
)
mscLpE1TestDataStartDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1TestDataStartDelay.setStatus("mandatory")


class _MscLpE1TestDisplayInterval_Type(Unsigned32):
    """Custom type mscLpE1TestDisplayInterval based on Unsigned32"""
    defaultValue = 5

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30240),
    )


_MscLpE1TestDisplayInterval_Type.__name__ = "Unsigned32"
_MscLpE1TestDisplayInterval_Object = MibTableColumn
mscLpE1TestDisplayInterval = _MscLpE1TestDisplayInterval_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 11, 1, 7),
    _MscLpE1TestDisplayInterval_Type()
)
mscLpE1TestDisplayInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1TestDisplayInterval.setStatus("mandatory")


class _MscLpE1TestDuration_Type(Unsigned32):
    """Custom type mscLpE1TestDuration based on Unsigned32"""
    defaultValue = 1

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30240),
    )


_MscLpE1TestDuration_Type.__name__ = "Unsigned32"
_MscLpE1TestDuration_Object = MibTableColumn
mscLpE1TestDuration = _MscLpE1TestDuration_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 11, 1, 8),
    _MscLpE1TestDuration_Type()
)
mscLpE1TestDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1TestDuration.setStatus("mandatory")
_MscLpE1TestResultsTable_Object = MibTable
mscLpE1TestResultsTable = _MscLpE1TestResultsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12)
)
if mibBuilder.loadTexts:
    mscLpE1TestResultsTable.setStatus("mandatory")
_MscLpE1TestResultsEntry_Object = MibTableRow
mscLpE1TestResultsEntry = _MscLpE1TestResultsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1)
)
mscLpE1TestResultsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1TestResultsEntry.setStatus("mandatory")
_MscLpE1TestElapsedTime_Type = Counter32
_MscLpE1TestElapsedTime_Object = MibTableColumn
mscLpE1TestElapsedTime = _MscLpE1TestElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1, 1),
    _MscLpE1TestElapsedTime_Type()
)
mscLpE1TestElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1TestElapsedTime.setStatus("mandatory")


class _MscLpE1TestTimeRemaining_Type(Unsigned32):
    """Custom type mscLpE1TestTimeRemaining based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpE1TestTimeRemaining_Type.__name__ = "Unsigned32"
_MscLpE1TestTimeRemaining_Object = MibTableColumn
mscLpE1TestTimeRemaining = _MscLpE1TestTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1, 2),
    _MscLpE1TestTimeRemaining_Type()
)
mscLpE1TestTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1TestTimeRemaining.setStatus("mandatory")


class _MscLpE1TestCauseOfTermination_Type(Integer32):
    """Custom type mscLpE1TestCauseOfTermination based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("hardwareReconfigured", 5),
          ("loopCodeSyncFailed", 6),
          ("neverStarted", 3),
          ("patternSyncFailed", 7),
          ("patternSyncLost", 8),
          ("stoppedByOperator", 1),
          ("testRunning", 4),
          ("testTimeExpired", 0),
          ("unknown", 2))
    )


_MscLpE1TestCauseOfTermination_Type.__name__ = "Integer32"
_MscLpE1TestCauseOfTermination_Object = MibTableColumn
mscLpE1TestCauseOfTermination = _MscLpE1TestCauseOfTermination_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1, 3),
    _MscLpE1TestCauseOfTermination_Type()
)
mscLpE1TestCauseOfTermination.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1TestCauseOfTermination.setStatus("mandatory")
_MscLpE1TestBitsTx_Type = PassportCounter64
_MscLpE1TestBitsTx_Object = MibTableColumn
mscLpE1TestBitsTx = _MscLpE1TestBitsTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1, 4),
    _MscLpE1TestBitsTx_Type()
)
mscLpE1TestBitsTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1TestBitsTx.setStatus("mandatory")
_MscLpE1TestBytesTx_Type = PassportCounter64
_MscLpE1TestBytesTx_Object = MibTableColumn
mscLpE1TestBytesTx = _MscLpE1TestBytesTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1, 5),
    _MscLpE1TestBytesTx_Type()
)
mscLpE1TestBytesTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1TestBytesTx.setStatus("mandatory")
_MscLpE1TestFrmTx_Type = PassportCounter64
_MscLpE1TestFrmTx_Object = MibTableColumn
mscLpE1TestFrmTx = _MscLpE1TestFrmTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1, 6),
    _MscLpE1TestFrmTx_Type()
)
mscLpE1TestFrmTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1TestFrmTx.setStatus("mandatory")
_MscLpE1TestBitsRx_Type = PassportCounter64
_MscLpE1TestBitsRx_Object = MibTableColumn
mscLpE1TestBitsRx = _MscLpE1TestBitsRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1, 7),
    _MscLpE1TestBitsRx_Type()
)
mscLpE1TestBitsRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1TestBitsRx.setStatus("mandatory")
_MscLpE1TestBytesRx_Type = PassportCounter64
_MscLpE1TestBytesRx_Object = MibTableColumn
mscLpE1TestBytesRx = _MscLpE1TestBytesRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1, 8),
    _MscLpE1TestBytesRx_Type()
)
mscLpE1TestBytesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1TestBytesRx.setStatus("mandatory")
_MscLpE1TestFrmRx_Type = PassportCounter64
_MscLpE1TestFrmRx_Object = MibTableColumn
mscLpE1TestFrmRx = _MscLpE1TestFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1, 9),
    _MscLpE1TestFrmRx_Type()
)
mscLpE1TestFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1TestFrmRx.setStatus("mandatory")
_MscLpE1TestErroredFrmRx_Type = PassportCounter64
_MscLpE1TestErroredFrmRx_Object = MibTableColumn
mscLpE1TestErroredFrmRx = _MscLpE1TestErroredFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1, 10),
    _MscLpE1TestErroredFrmRx_Type()
)
mscLpE1TestErroredFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1TestErroredFrmRx.setStatus("mandatory")


class _MscLpE1TestBitErrorRate_Type(AsciiString):
    """Custom type mscLpE1TestBitErrorRate based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )


_MscLpE1TestBitErrorRate_Type.__name__ = "AsciiString"
_MscLpE1TestBitErrorRate_Object = MibTableColumn
mscLpE1TestBitErrorRate = _MscLpE1TestBitErrorRate_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 3, 12, 1, 11),
    _MscLpE1TestBitErrorRate_Type()
)
mscLpE1TestBitErrorRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1TestBitErrorRate.setStatus("mandatory")
_MscLpE1Dsp_ObjectIdentity = ObjectIdentity
mscLpE1Dsp = _MscLpE1Dsp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 4)
)
_MscLpE1DspRowStatusTable_Object = MibTable
mscLpE1DspRowStatusTable = _MscLpE1DspRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 4, 1)
)
if mibBuilder.loadTexts:
    mscLpE1DspRowStatusTable.setStatus("mandatory")
_MscLpE1DspRowStatusEntry_Object = MibTableRow
mscLpE1DspRowStatusEntry = _MscLpE1DspRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 4, 1, 1)
)
mscLpE1DspRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1DspIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1DspRowStatusEntry.setStatus("mandatory")
_MscLpE1DspRowStatus_Type = RowStatus
_MscLpE1DspRowStatus_Object = MibTableColumn
mscLpE1DspRowStatus = _MscLpE1DspRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 4, 1, 1, 1),
    _MscLpE1DspRowStatus_Type()
)
mscLpE1DspRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1DspRowStatus.setStatus("mandatory")
_MscLpE1DspComponentName_Type = DisplayString
_MscLpE1DspComponentName_Object = MibTableColumn
mscLpE1DspComponentName = _MscLpE1DspComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 4, 1, 1, 2),
    _MscLpE1DspComponentName_Type()
)
mscLpE1DspComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1DspComponentName.setStatus("mandatory")
_MscLpE1DspStorageType_Type = StorageType
_MscLpE1DspStorageType_Object = MibTableColumn
mscLpE1DspStorageType = _MscLpE1DspStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 4, 1, 1, 4),
    _MscLpE1DspStorageType_Type()
)
mscLpE1DspStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1DspStorageType.setStatus("mandatory")
_MscLpE1DspIndex_Type = NonReplicated
_MscLpE1DspIndex_Object = MibTableColumn
mscLpE1DspIndex = _MscLpE1DspIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 4, 1, 1, 10),
    _MscLpE1DspIndex_Type()
)
mscLpE1DspIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpE1DspIndex.setStatus("mandatory")
_MscLpE1Audio_ObjectIdentity = ObjectIdentity
mscLpE1Audio = _MscLpE1Audio_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 5)
)
_MscLpE1AudioRowStatusTable_Object = MibTable
mscLpE1AudioRowStatusTable = _MscLpE1AudioRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 5, 1)
)
if mibBuilder.loadTexts:
    mscLpE1AudioRowStatusTable.setStatus("mandatory")
_MscLpE1AudioRowStatusEntry_Object = MibTableRow
mscLpE1AudioRowStatusEntry = _MscLpE1AudioRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 5, 1, 1)
)
mscLpE1AudioRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1AudioIndex"),
)
if mibBuilder.loadTexts:
    mscLpE1AudioRowStatusEntry.setStatus("mandatory")
_MscLpE1AudioRowStatus_Type = RowStatus
_MscLpE1AudioRowStatus_Object = MibTableColumn
mscLpE1AudioRowStatus = _MscLpE1AudioRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 5, 1, 1, 1),
    _MscLpE1AudioRowStatus_Type()
)
mscLpE1AudioRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1AudioRowStatus.setStatus("mandatory")
_MscLpE1AudioComponentName_Type = DisplayString
_MscLpE1AudioComponentName_Object = MibTableColumn
mscLpE1AudioComponentName = _MscLpE1AudioComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 5, 1, 1, 2),
    _MscLpE1AudioComponentName_Type()
)
mscLpE1AudioComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1AudioComponentName.setStatus("mandatory")
_MscLpE1AudioStorageType_Type = StorageType
_MscLpE1AudioStorageType_Object = MibTableColumn
mscLpE1AudioStorageType = _MscLpE1AudioStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 5, 1, 1, 4),
    _MscLpE1AudioStorageType_Type()
)
mscLpE1AudioStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1AudioStorageType.setStatus("mandatory")
_MscLpE1AudioIndex_Type = NonReplicated
_MscLpE1AudioIndex_Object = MibTableColumn
mscLpE1AudioIndex = _MscLpE1AudioIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 5, 1, 1, 10),
    _MscLpE1AudioIndex_Type()
)
mscLpE1AudioIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpE1AudioIndex.setStatus("mandatory")
_MscLpE1ProvTable_Object = MibTable
mscLpE1ProvTable = _MscLpE1ProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 10)
)
if mibBuilder.loadTexts:
    mscLpE1ProvTable.setStatus("mandatory")
_MscLpE1ProvEntry_Object = MibTableRow
mscLpE1ProvEntry = _MscLpE1ProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 10, 1)
)
mscLpE1ProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
)
if mibBuilder.loadTexts:
    mscLpE1ProvEntry.setStatus("mandatory")


class _MscLpE1LineType_Type(Integer32):
    """Custom type mscLpE1LineType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(2,
              3,
              6)
        )
    )
    namedValues = NamedValues(
        *(("cas", 3),
          ("ccs", 2),
          ("unframed", 6))
    )


_MscLpE1LineType_Type.__name__ = "Integer32"
_MscLpE1LineType_Object = MibTableColumn
mscLpE1LineType = _MscLpE1LineType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 10, 1, 1),
    _MscLpE1LineType_Type()
)
mscLpE1LineType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1LineType.setStatus("mandatory")


class _MscLpE1ClockingSource_Type(Integer32):
    """Custom type mscLpE1ClockingSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("adaptiveMode", 5),
          ("line", 1),
          ("local", 0),
          ("module", 2),
          ("otherPort", 3),
          ("srtsMode", 4))
    )


_MscLpE1ClockingSource_Type.__name__ = "Integer32"
_MscLpE1ClockingSource_Object = MibTableColumn
mscLpE1ClockingSource = _MscLpE1ClockingSource_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 10, 1, 2),
    _MscLpE1ClockingSource_Type()
)
mscLpE1ClockingSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1ClockingSource.setStatus("mandatory")


class _MscLpE1Crc4Mode_Type(Integer32):
    """Custom type mscLpE1Crc4Mode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpE1Crc4Mode_Type.__name__ = "Integer32"
_MscLpE1Crc4Mode_Object = MibTableColumn
mscLpE1Crc4Mode = _MscLpE1Crc4Mode_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 10, 1, 3),
    _MscLpE1Crc4Mode_Type()
)
mscLpE1Crc4Mode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1Crc4Mode.setStatus("mandatory")


class _MscLpE1SendRaiOnAis_Type(Integer32):
    """Custom type mscLpE1SendRaiOnAis based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_MscLpE1SendRaiOnAis_Type.__name__ = "Integer32"
_MscLpE1SendRaiOnAis_Object = MibTableColumn
mscLpE1SendRaiOnAis = _MscLpE1SendRaiOnAis_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 10, 1, 4),
    _MscLpE1SendRaiOnAis_Type()
)
mscLpE1SendRaiOnAis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1SendRaiOnAis.setStatus("mandatory")


class _MscLpE1RaiDeclareAlarmTime_Type(Unsigned32):
    """Custom type mscLpE1RaiDeclareAlarmTime based on Unsigned32"""
    defaultValue = 100

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 20000),
    )


_MscLpE1RaiDeclareAlarmTime_Type.__name__ = "Unsigned32"
_MscLpE1RaiDeclareAlarmTime_Object = MibTableColumn
mscLpE1RaiDeclareAlarmTime = _MscLpE1RaiDeclareAlarmTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 10, 1, 5),
    _MscLpE1RaiDeclareAlarmTime_Type()
)
mscLpE1RaiDeclareAlarmTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1RaiDeclareAlarmTime.setStatus("mandatory")


class _MscLpE1RaiClearAlarmTime_Type(Unsigned32):
    """Custom type mscLpE1RaiClearAlarmTime based on Unsigned32"""
    defaultValue = 100

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 20000),
    )


_MscLpE1RaiClearAlarmTime_Type.__name__ = "Unsigned32"
_MscLpE1RaiClearAlarmTime_Object = MibTableColumn
mscLpE1RaiClearAlarmTime = _MscLpE1RaiClearAlarmTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 10, 1, 6),
    _MscLpE1RaiClearAlarmTime_Type()
)
mscLpE1RaiClearAlarmTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1RaiClearAlarmTime.setStatus("mandatory")
_MscLpE1CidDataTable_Object = MibTable
mscLpE1CidDataTable = _MscLpE1CidDataTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 11)
)
if mibBuilder.loadTexts:
    mscLpE1CidDataTable.setStatus("mandatory")
_MscLpE1CidDataEntry_Object = MibTableRow
mscLpE1CidDataEntry = _MscLpE1CidDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 11, 1)
)
mscLpE1CidDataEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
)
if mibBuilder.loadTexts:
    mscLpE1CidDataEntry.setStatus("mandatory")


class _MscLpE1CustomerIdentifier_Type(Unsigned32):
    """Custom type mscLpE1CustomerIdentifier based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 8191),
    )


_MscLpE1CustomerIdentifier_Type.__name__ = "Unsigned32"
_MscLpE1CustomerIdentifier_Object = MibTableColumn
mscLpE1CustomerIdentifier = _MscLpE1CustomerIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 11, 1, 1),
    _MscLpE1CustomerIdentifier_Type()
)
mscLpE1CustomerIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1CustomerIdentifier.setStatus("mandatory")
_MscLpE1AdminInfoTable_Object = MibTable
mscLpE1AdminInfoTable = _MscLpE1AdminInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 12)
)
if mibBuilder.loadTexts:
    mscLpE1AdminInfoTable.setStatus("mandatory")
_MscLpE1AdminInfoEntry_Object = MibTableRow
mscLpE1AdminInfoEntry = _MscLpE1AdminInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 12, 1)
)
mscLpE1AdminInfoEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
)
if mibBuilder.loadTexts:
    mscLpE1AdminInfoEntry.setStatus("mandatory")


class _MscLpE1Vendor_Type(AsciiString):
    """Custom type mscLpE1Vendor based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_MscLpE1Vendor_Type.__name__ = "AsciiString"
_MscLpE1Vendor_Object = MibTableColumn
mscLpE1Vendor = _MscLpE1Vendor_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 12, 1, 1),
    _MscLpE1Vendor_Type()
)
mscLpE1Vendor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1Vendor.setStatus("mandatory")


class _MscLpE1CommentText_Type(AsciiString):
    """Custom type mscLpE1CommentText based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 60),
    )


_MscLpE1CommentText_Type.__name__ = "AsciiString"
_MscLpE1CommentText_Object = MibTableColumn
mscLpE1CommentText = _MscLpE1CommentText_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 12, 1, 2),
    _MscLpE1CommentText_Type()
)
mscLpE1CommentText.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1CommentText.setStatus("mandatory")
_MscLpE1IfEntryTable_Object = MibTable
mscLpE1IfEntryTable = _MscLpE1IfEntryTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 13)
)
if mibBuilder.loadTexts:
    mscLpE1IfEntryTable.setStatus("mandatory")
_MscLpE1IfEntryEntry_Object = MibTableRow
mscLpE1IfEntryEntry = _MscLpE1IfEntryEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 13, 1)
)
mscLpE1IfEntryEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
)
if mibBuilder.loadTexts:
    mscLpE1IfEntryEntry.setStatus("mandatory")


class _MscLpE1IfAdminStatus_Type(Integer32):
    """Custom type mscLpE1IfAdminStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpE1IfAdminStatus_Type.__name__ = "Integer32"
_MscLpE1IfAdminStatus_Object = MibTableColumn
mscLpE1IfAdminStatus = _MscLpE1IfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 13, 1, 1),
    _MscLpE1IfAdminStatus_Type()
)
mscLpE1IfAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpE1IfAdminStatus.setStatus("mandatory")


class _MscLpE1IfIndex_Type(InterfaceIndex):
    """Custom type mscLpE1IfIndex based on InterfaceIndex"""
    subtypeSpec = InterfaceIndex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_MscLpE1IfIndex_Type.__name__ = "InterfaceIndex"
_MscLpE1IfIndex_Object = MibTableColumn
mscLpE1IfIndex = _MscLpE1IfIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 13, 1, 2),
    _MscLpE1IfIndex_Type()
)
mscLpE1IfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1IfIndex.setStatus("mandatory")
_MscLpE1OperStatusTable_Object = MibTable
mscLpE1OperStatusTable = _MscLpE1OperStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 14)
)
if mibBuilder.loadTexts:
    mscLpE1OperStatusTable.setStatus("mandatory")
_MscLpE1OperStatusEntry_Object = MibTableRow
mscLpE1OperStatusEntry = _MscLpE1OperStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 14, 1)
)
mscLpE1OperStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
)
if mibBuilder.loadTexts:
    mscLpE1OperStatusEntry.setStatus("mandatory")


class _MscLpE1SnmpOperStatus_Type(Integer32):
    """Custom type mscLpE1SnmpOperStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpE1SnmpOperStatus_Type.__name__ = "Integer32"
_MscLpE1SnmpOperStatus_Object = MibTableColumn
mscLpE1SnmpOperStatus = _MscLpE1SnmpOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 14, 1, 1),
    _MscLpE1SnmpOperStatus_Type()
)
mscLpE1SnmpOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1SnmpOperStatus.setStatus("mandatory")
_MscLpE1StateTable_Object = MibTable
mscLpE1StateTable = _MscLpE1StateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 15)
)
if mibBuilder.loadTexts:
    mscLpE1StateTable.setStatus("mandatory")
_MscLpE1StateEntry_Object = MibTableRow
mscLpE1StateEntry = _MscLpE1StateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 15, 1)
)
mscLpE1StateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
)
if mibBuilder.loadTexts:
    mscLpE1StateEntry.setStatus("mandatory")


class _MscLpE1AdminState_Type(Integer32):
    """Custom type mscLpE1AdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpE1AdminState_Type.__name__ = "Integer32"
_MscLpE1AdminState_Object = MibTableColumn
mscLpE1AdminState = _MscLpE1AdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 15, 1, 1),
    _MscLpE1AdminState_Type()
)
mscLpE1AdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1AdminState.setStatus("mandatory")


class _MscLpE1OperationalState_Type(Integer32):
    """Custom type mscLpE1OperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpE1OperationalState_Type.__name__ = "Integer32"
_MscLpE1OperationalState_Object = MibTableColumn
mscLpE1OperationalState = _MscLpE1OperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 15, 1, 2),
    _MscLpE1OperationalState_Type()
)
mscLpE1OperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1OperationalState.setStatus("mandatory")


class _MscLpE1UsageState_Type(Integer32):
    """Custom type mscLpE1UsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpE1UsageState_Type.__name__ = "Integer32"
_MscLpE1UsageState_Object = MibTableColumn
mscLpE1UsageState = _MscLpE1UsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 15, 1, 3),
    _MscLpE1UsageState_Type()
)
mscLpE1UsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1UsageState.setStatus("mandatory")


class _MscLpE1AvailabilityStatus_Type(OctetString):
    """Custom type mscLpE1AvailabilityStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_MscLpE1AvailabilityStatus_Type.__name__ = "OctetString"
_MscLpE1AvailabilityStatus_Object = MibTableColumn
mscLpE1AvailabilityStatus = _MscLpE1AvailabilityStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 15, 1, 4),
    _MscLpE1AvailabilityStatus_Type()
)
mscLpE1AvailabilityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1AvailabilityStatus.setStatus("mandatory")


class _MscLpE1ProceduralStatus_Type(OctetString):
    """Custom type mscLpE1ProceduralStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpE1ProceduralStatus_Type.__name__ = "OctetString"
_MscLpE1ProceduralStatus_Object = MibTableColumn
mscLpE1ProceduralStatus = _MscLpE1ProceduralStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 15, 1, 5),
    _MscLpE1ProceduralStatus_Type()
)
mscLpE1ProceduralStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ProceduralStatus.setStatus("mandatory")


class _MscLpE1ControlStatus_Type(OctetString):
    """Custom type mscLpE1ControlStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpE1ControlStatus_Type.__name__ = "OctetString"
_MscLpE1ControlStatus_Object = MibTableColumn
mscLpE1ControlStatus = _MscLpE1ControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 15, 1, 6),
    _MscLpE1ControlStatus_Type()
)
mscLpE1ControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ControlStatus.setStatus("mandatory")


class _MscLpE1AlarmStatus_Type(OctetString):
    """Custom type mscLpE1AlarmStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpE1AlarmStatus_Type.__name__ = "OctetString"
_MscLpE1AlarmStatus_Object = MibTableColumn
mscLpE1AlarmStatus = _MscLpE1AlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 15, 1, 7),
    _MscLpE1AlarmStatus_Type()
)
mscLpE1AlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1AlarmStatus.setStatus("mandatory")


class _MscLpE1StandbyStatus_Type(Integer32):
    """Custom type mscLpE1StandbyStatus based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              15)
        )
    )
    namedValues = NamedValues(
        *(("coldStandby", 1),
          ("hotStandby", 0),
          ("notSet", 15),
          ("providingService", 2))
    )


_MscLpE1StandbyStatus_Type.__name__ = "Integer32"
_MscLpE1StandbyStatus_Object = MibTableColumn
mscLpE1StandbyStatus = _MscLpE1StandbyStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 15, 1, 8),
    _MscLpE1StandbyStatus_Type()
)
mscLpE1StandbyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1StandbyStatus.setStatus("mandatory")


class _MscLpE1UnknownStatus_Type(Integer32):
    """Custom type mscLpE1UnknownStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_MscLpE1UnknownStatus_Type.__name__ = "Integer32"
_MscLpE1UnknownStatus_Object = MibTableColumn
mscLpE1UnknownStatus = _MscLpE1UnknownStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 15, 1, 9),
    _MscLpE1UnknownStatus_Type()
)
mscLpE1UnknownStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1UnknownStatus.setStatus("mandatory")
_MscLpE1OperTable_Object = MibTable
mscLpE1OperTable = _MscLpE1OperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 16)
)
if mibBuilder.loadTexts:
    mscLpE1OperTable.setStatus("mandatory")
_MscLpE1OperEntry_Object = MibTableRow
mscLpE1OperEntry = _MscLpE1OperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 16, 1)
)
mscLpE1OperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
)
if mibBuilder.loadTexts:
    mscLpE1OperEntry.setStatus("mandatory")


class _MscLpE1LosAlarm_Type(Integer32):
    """Custom type mscLpE1LosAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpE1LosAlarm_Type.__name__ = "Integer32"
_MscLpE1LosAlarm_Object = MibTableColumn
mscLpE1LosAlarm = _MscLpE1LosAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 16, 1, 1),
    _MscLpE1LosAlarm_Type()
)
mscLpE1LosAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1LosAlarm.setStatus("mandatory")


class _MscLpE1RxAisAlarm_Type(Integer32):
    """Custom type mscLpE1RxAisAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpE1RxAisAlarm_Type.__name__ = "Integer32"
_MscLpE1RxAisAlarm_Object = MibTableColumn
mscLpE1RxAisAlarm = _MscLpE1RxAisAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 16, 1, 2),
    _MscLpE1RxAisAlarm_Type()
)
mscLpE1RxAisAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1RxAisAlarm.setStatus("mandatory")


class _MscLpE1LofAlarm_Type(Integer32):
    """Custom type mscLpE1LofAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpE1LofAlarm_Type.__name__ = "Integer32"
_MscLpE1LofAlarm_Object = MibTableColumn
mscLpE1LofAlarm = _MscLpE1LofAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 16, 1, 3),
    _MscLpE1LofAlarm_Type()
)
mscLpE1LofAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1LofAlarm.setStatus("mandatory")


class _MscLpE1RxRaiAlarm_Type(Integer32):
    """Custom type mscLpE1RxRaiAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpE1RxRaiAlarm_Type.__name__ = "Integer32"
_MscLpE1RxRaiAlarm_Object = MibTableColumn
mscLpE1RxRaiAlarm = _MscLpE1RxRaiAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 16, 1, 4),
    _MscLpE1RxRaiAlarm_Type()
)
mscLpE1RxRaiAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1RxRaiAlarm.setStatus("mandatory")


class _MscLpE1TxAisAlarm_Type(Integer32):
    """Custom type mscLpE1TxAisAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpE1TxAisAlarm_Type.__name__ = "Integer32"
_MscLpE1TxAisAlarm_Object = MibTableColumn
mscLpE1TxAisAlarm = _MscLpE1TxAisAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 16, 1, 5),
    _MscLpE1TxAisAlarm_Type()
)
mscLpE1TxAisAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1TxAisAlarm.setStatus("mandatory")


class _MscLpE1TxRaiAlarm_Type(Integer32):
    """Custom type mscLpE1TxRaiAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpE1TxRaiAlarm_Type.__name__ = "Integer32"
_MscLpE1TxRaiAlarm_Object = MibTableColumn
mscLpE1TxRaiAlarm = _MscLpE1TxRaiAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 16, 1, 6),
    _MscLpE1TxRaiAlarm_Type()
)
mscLpE1TxRaiAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1TxRaiAlarm.setStatus("mandatory")
_MscLpE1E1OperTable_Object = MibTable
mscLpE1E1OperTable = _MscLpE1E1OperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 17)
)
if mibBuilder.loadTexts:
    mscLpE1E1OperTable.setStatus("mandatory")
_MscLpE1E1OperEntry_Object = MibTableRow
mscLpE1E1OperEntry = _MscLpE1E1OperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 17, 1)
)
mscLpE1E1OperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
)
if mibBuilder.loadTexts:
    mscLpE1E1OperEntry.setStatus("mandatory")


class _MscLpE1MultifrmLofAlarm_Type(Integer32):
    """Custom type mscLpE1MultifrmLofAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpE1MultifrmLofAlarm_Type.__name__ = "Integer32"
_MscLpE1MultifrmLofAlarm_Object = MibTableColumn
mscLpE1MultifrmLofAlarm = _MscLpE1MultifrmLofAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 17, 1, 1),
    _MscLpE1MultifrmLofAlarm_Type()
)
mscLpE1MultifrmLofAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1MultifrmLofAlarm.setStatus("mandatory")


class _MscLpE1RxMultifrmRaiAlarm_Type(Integer32):
    """Custom type mscLpE1RxMultifrmRaiAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpE1RxMultifrmRaiAlarm_Type.__name__ = "Integer32"
_MscLpE1RxMultifrmRaiAlarm_Object = MibTableColumn
mscLpE1RxMultifrmRaiAlarm = _MscLpE1RxMultifrmRaiAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 17, 1, 2),
    _MscLpE1RxMultifrmRaiAlarm_Type()
)
mscLpE1RxMultifrmRaiAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1RxMultifrmRaiAlarm.setStatus("mandatory")


class _MscLpE1TxMultifrmRaiAlarm_Type(Integer32):
    """Custom type mscLpE1TxMultifrmRaiAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpE1TxMultifrmRaiAlarm_Type.__name__ = "Integer32"
_MscLpE1TxMultifrmRaiAlarm_Object = MibTableColumn
mscLpE1TxMultifrmRaiAlarm = _MscLpE1TxMultifrmRaiAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 17, 1, 3),
    _MscLpE1TxMultifrmRaiAlarm_Type()
)
mscLpE1TxMultifrmRaiAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1TxMultifrmRaiAlarm.setStatus("mandatory")
_MscLpE1StatsTable_Object = MibTable
mscLpE1StatsTable = _MscLpE1StatsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18)
)
if mibBuilder.loadTexts:
    mscLpE1StatsTable.setStatus("mandatory")
_MscLpE1StatsEntry_Object = MibTableRow
mscLpE1StatsEntry = _MscLpE1StatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1)
)
mscLpE1StatsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpE1Index"),
)
if mibBuilder.loadTexts:
    mscLpE1StatsEntry.setStatus("mandatory")
_MscLpE1RunningTime_Type = Counter32
_MscLpE1RunningTime_Object = MibTableColumn
mscLpE1RunningTime = _MscLpE1RunningTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1, 1),
    _MscLpE1RunningTime_Type()
)
mscLpE1RunningTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1RunningTime.setStatus("mandatory")
_MscLpE1ErrorFreeSec_Type = Counter32
_MscLpE1ErrorFreeSec_Object = MibTableColumn
mscLpE1ErrorFreeSec = _MscLpE1ErrorFreeSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1, 2),
    _MscLpE1ErrorFreeSec_Type()
)
mscLpE1ErrorFreeSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ErrorFreeSec.setStatus("mandatory")
_MscLpE1ErroredSec_Type = Counter32
_MscLpE1ErroredSec_Object = MibTableColumn
mscLpE1ErroredSec = _MscLpE1ErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1, 3),
    _MscLpE1ErroredSec_Type()
)
mscLpE1ErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1ErroredSec.setStatus("mandatory")
_MscLpE1SevErroredSec_Type = Counter32
_MscLpE1SevErroredSec_Object = MibTableColumn
mscLpE1SevErroredSec = _MscLpE1SevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1, 4),
    _MscLpE1SevErroredSec_Type()
)
mscLpE1SevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1SevErroredSec.setStatus("mandatory")
_MscLpE1SevErroredFrmSec_Type = Counter32
_MscLpE1SevErroredFrmSec_Object = MibTableColumn
mscLpE1SevErroredFrmSec = _MscLpE1SevErroredFrmSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1, 5),
    _MscLpE1SevErroredFrmSec_Type()
)
mscLpE1SevErroredFrmSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1SevErroredFrmSec.setStatus("mandatory")
_MscLpE1UnavailSec_Type = Counter32
_MscLpE1UnavailSec_Object = MibTableColumn
mscLpE1UnavailSec = _MscLpE1UnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1, 6),
    _MscLpE1UnavailSec_Type()
)
mscLpE1UnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1UnavailSec.setStatus("mandatory")
_MscLpE1BpvErrors_Type = Counter32
_MscLpE1BpvErrors_Object = MibTableColumn
mscLpE1BpvErrors = _MscLpE1BpvErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1, 7),
    _MscLpE1BpvErrors_Type()
)
mscLpE1BpvErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1BpvErrors.setStatus("mandatory")
_MscLpE1CrcErrors_Type = Counter32
_MscLpE1CrcErrors_Object = MibTableColumn
mscLpE1CrcErrors = _MscLpE1CrcErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1, 8),
    _MscLpE1CrcErrors_Type()
)
mscLpE1CrcErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1CrcErrors.setStatus("mandatory")
_MscLpE1FrmErrors_Type = Counter32
_MscLpE1FrmErrors_Object = MibTableColumn
mscLpE1FrmErrors = _MscLpE1FrmErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1, 9),
    _MscLpE1FrmErrors_Type()
)
mscLpE1FrmErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1FrmErrors.setStatus("mandatory")
_MscLpE1LosStateChanges_Type = Counter32
_MscLpE1LosStateChanges_Object = MibTableColumn
mscLpE1LosStateChanges = _MscLpE1LosStateChanges_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1, 10),
    _MscLpE1LosStateChanges_Type()
)
mscLpE1LosStateChanges.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1LosStateChanges.setStatus("mandatory")
_MscLpE1SlipErrors_Type = Counter32
_MscLpE1SlipErrors_Object = MibTableColumn
mscLpE1SlipErrors = _MscLpE1SlipErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 8, 18, 1, 11),
    _MscLpE1SlipErrors_Type()
)
mscLpE1SlipErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpE1SlipErrors.setStatus("mandatory")
_MscLpV35_ObjectIdentity = ObjectIdentity
mscLpV35 = _MscLpV35_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9)
)
_MscLpV35RowStatusTable_Object = MibTable
mscLpV35RowStatusTable = _MscLpV35RowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 1)
)
if mibBuilder.loadTexts:
    mscLpV35RowStatusTable.setStatus("mandatory")
_MscLpV35RowStatusEntry_Object = MibTableRow
mscLpV35RowStatusEntry = _MscLpV35RowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 1, 1)
)
mscLpV35RowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"),
)
if mibBuilder.loadTexts:
    mscLpV35RowStatusEntry.setStatus("mandatory")
_MscLpV35RowStatus_Type = RowStatus
_MscLpV35RowStatus_Object = MibTableColumn
mscLpV35RowStatus = _MscLpV35RowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 1, 1, 1),
    _MscLpV35RowStatus_Type()
)
mscLpV35RowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpV35RowStatus.setStatus("mandatory")
_MscLpV35ComponentName_Type = DisplayString
_MscLpV35ComponentName_Object = MibTableColumn
mscLpV35ComponentName = _MscLpV35ComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 1, 1, 2),
    _MscLpV35ComponentName_Type()
)
mscLpV35ComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35ComponentName.setStatus("mandatory")
_MscLpV35StorageType_Type = StorageType
_MscLpV35StorageType_Object = MibTableColumn
mscLpV35StorageType = _MscLpV35StorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 1, 1, 4),
    _MscLpV35StorageType_Type()
)
mscLpV35StorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35StorageType.setStatus("mandatory")


class _MscLpV35Index_Type(Integer32):
    """Custom type mscLpV35Index based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_MscLpV35Index_Type.__name__ = "Integer32"
_MscLpV35Index_Object = MibTableColumn
mscLpV35Index = _MscLpV35Index_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 1, 1, 10),
    _MscLpV35Index_Type()
)
mscLpV35Index.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpV35Index.setStatus("mandatory")
_MscLpV35Test_ObjectIdentity = ObjectIdentity
mscLpV35Test = _MscLpV35Test_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2)
)
_MscLpV35TestRowStatusTable_Object = MibTable
mscLpV35TestRowStatusTable = _MscLpV35TestRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 1)
)
if mibBuilder.loadTexts:
    mscLpV35TestRowStatusTable.setStatus("mandatory")
_MscLpV35TestRowStatusEntry_Object = MibTableRow
mscLpV35TestRowStatusEntry = _MscLpV35TestRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 1, 1)
)
mscLpV35TestRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpV35TestRowStatusEntry.setStatus("mandatory")
_MscLpV35TestRowStatus_Type = RowStatus
_MscLpV35TestRowStatus_Object = MibTableColumn
mscLpV35TestRowStatus = _MscLpV35TestRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 1, 1, 1),
    _MscLpV35TestRowStatus_Type()
)
mscLpV35TestRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35TestRowStatus.setStatus("mandatory")
_MscLpV35TestComponentName_Type = DisplayString
_MscLpV35TestComponentName_Object = MibTableColumn
mscLpV35TestComponentName = _MscLpV35TestComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 1, 1, 2),
    _MscLpV35TestComponentName_Type()
)
mscLpV35TestComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35TestComponentName.setStatus("mandatory")
_MscLpV35TestStorageType_Type = StorageType
_MscLpV35TestStorageType_Object = MibTableColumn
mscLpV35TestStorageType = _MscLpV35TestStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 1, 1, 4),
    _MscLpV35TestStorageType_Type()
)
mscLpV35TestStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35TestStorageType.setStatus("mandatory")
_MscLpV35TestIndex_Type = NonReplicated
_MscLpV35TestIndex_Object = MibTableColumn
mscLpV35TestIndex = _MscLpV35TestIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 1, 1, 10),
    _MscLpV35TestIndex_Type()
)
mscLpV35TestIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpV35TestIndex.setStatus("mandatory")
_MscLpV35TestStateTable_Object = MibTable
mscLpV35TestStateTable = _MscLpV35TestStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 10)
)
if mibBuilder.loadTexts:
    mscLpV35TestStateTable.setStatus("mandatory")
_MscLpV35TestStateEntry_Object = MibTableRow
mscLpV35TestStateEntry = _MscLpV35TestStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 10, 1)
)
mscLpV35TestStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpV35TestStateEntry.setStatus("mandatory")


class _MscLpV35TestAdminState_Type(Integer32):
    """Custom type mscLpV35TestAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpV35TestAdminState_Type.__name__ = "Integer32"
_MscLpV35TestAdminState_Object = MibTableColumn
mscLpV35TestAdminState = _MscLpV35TestAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 10, 1, 1),
    _MscLpV35TestAdminState_Type()
)
mscLpV35TestAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35TestAdminState.setStatus("mandatory")


class _MscLpV35TestOperationalState_Type(Integer32):
    """Custom type mscLpV35TestOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpV35TestOperationalState_Type.__name__ = "Integer32"
_MscLpV35TestOperationalState_Object = MibTableColumn
mscLpV35TestOperationalState = _MscLpV35TestOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 10, 1, 2),
    _MscLpV35TestOperationalState_Type()
)
mscLpV35TestOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35TestOperationalState.setStatus("mandatory")


class _MscLpV35TestUsageState_Type(Integer32):
    """Custom type mscLpV35TestUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpV35TestUsageState_Type.__name__ = "Integer32"
_MscLpV35TestUsageState_Object = MibTableColumn
mscLpV35TestUsageState = _MscLpV35TestUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 10, 1, 3),
    _MscLpV35TestUsageState_Type()
)
mscLpV35TestUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35TestUsageState.setStatus("mandatory")
_MscLpV35TestSetupTable_Object = MibTable
mscLpV35TestSetupTable = _MscLpV35TestSetupTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 11)
)
if mibBuilder.loadTexts:
    mscLpV35TestSetupTable.setStatus("mandatory")
_MscLpV35TestSetupEntry_Object = MibTableRow
mscLpV35TestSetupEntry = _MscLpV35TestSetupEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 11, 1)
)
mscLpV35TestSetupEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpV35TestSetupEntry.setStatus("mandatory")


class _MscLpV35TestPurpose_Type(AsciiString):
    """Custom type mscLpV35TestPurpose based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_MscLpV35TestPurpose_Type.__name__ = "AsciiString"
_MscLpV35TestPurpose_Object = MibTableColumn
mscLpV35TestPurpose = _MscLpV35TestPurpose_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 11, 1, 1),
    _MscLpV35TestPurpose_Type()
)
mscLpV35TestPurpose.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpV35TestPurpose.setStatus("mandatory")


class _MscLpV35TestType_Type(Integer32):
    """Custom type mscLpV35TestType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("card", 0),
          ("externalLoop", 4),
          ("localLoop", 2),
          ("manual", 1),
          ("payloadLoop", 5),
          ("pn127RemoteLoop", 8),
          ("remoteLoop", 3),
          ("remoteLoopThisTrib", 6),
          ("v54RemoteLoop", 7))
    )


_MscLpV35TestType_Type.__name__ = "Integer32"
_MscLpV35TestType_Object = MibTableColumn
mscLpV35TestType = _MscLpV35TestType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 11, 1, 2),
    _MscLpV35TestType_Type()
)
mscLpV35TestType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpV35TestType.setStatus("mandatory")


class _MscLpV35TestFrmSize_Type(Unsigned32):
    """Custom type mscLpV35TestFrmSize based on Unsigned32"""
    defaultValue = 1024

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 4096),
    )


_MscLpV35TestFrmSize_Type.__name__ = "Unsigned32"
_MscLpV35TestFrmSize_Object = MibTableColumn
mscLpV35TestFrmSize = _MscLpV35TestFrmSize_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 11, 1, 3),
    _MscLpV35TestFrmSize_Type()
)
mscLpV35TestFrmSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpV35TestFrmSize.setStatus("mandatory")


class _MscLpV35TestFrmPatternType_Type(Integer32):
    """Custom type mscLpV35TestFrmPatternType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ccitt32kBitPattern", 0),
          ("ccitt8MBitPattern", 1),
          ("customizedPattern", 2))
    )


_MscLpV35TestFrmPatternType_Type.__name__ = "Integer32"
_MscLpV35TestFrmPatternType_Object = MibTableColumn
mscLpV35TestFrmPatternType = _MscLpV35TestFrmPatternType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 11, 1, 4),
    _MscLpV35TestFrmPatternType_Type()
)
mscLpV35TestFrmPatternType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpV35TestFrmPatternType.setStatus("mandatory")


class _MscLpV35TestCustomizedPattern_Type(Hex):
    """Custom type mscLpV35TestCustomizedPattern based on Hex"""
    defaultValue = 1431655765

    subtypeSpec = Hex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpV35TestCustomizedPattern_Type.__name__ = "Hex"
_MscLpV35TestCustomizedPattern_Object = MibTableColumn
mscLpV35TestCustomizedPattern = _MscLpV35TestCustomizedPattern_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 11, 1, 5),
    _MscLpV35TestCustomizedPattern_Type()
)
mscLpV35TestCustomizedPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpV35TestCustomizedPattern.setStatus("mandatory")


class _MscLpV35TestDataStartDelay_Type(Unsigned32):
    """Custom type mscLpV35TestDataStartDelay based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1814400),
    )


_MscLpV35TestDataStartDelay_Type.__name__ = "Unsigned32"
_MscLpV35TestDataStartDelay_Object = MibTableColumn
mscLpV35TestDataStartDelay = _MscLpV35TestDataStartDelay_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 11, 1, 6),
    _MscLpV35TestDataStartDelay_Type()
)
mscLpV35TestDataStartDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpV35TestDataStartDelay.setStatus("mandatory")


class _MscLpV35TestDisplayInterval_Type(Unsigned32):
    """Custom type mscLpV35TestDisplayInterval based on Unsigned32"""
    defaultValue = 5

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30240),
    )


_MscLpV35TestDisplayInterval_Type.__name__ = "Unsigned32"
_MscLpV35TestDisplayInterval_Object = MibTableColumn
mscLpV35TestDisplayInterval = _MscLpV35TestDisplayInterval_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 11, 1, 7),
    _MscLpV35TestDisplayInterval_Type()
)
mscLpV35TestDisplayInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpV35TestDisplayInterval.setStatus("mandatory")


class _MscLpV35TestDuration_Type(Unsigned32):
    """Custom type mscLpV35TestDuration based on Unsigned32"""
    defaultValue = 1

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30240),
    )


_MscLpV35TestDuration_Type.__name__ = "Unsigned32"
_MscLpV35TestDuration_Object = MibTableColumn
mscLpV35TestDuration = _MscLpV35TestDuration_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 11, 1, 8),
    _MscLpV35TestDuration_Type()
)
mscLpV35TestDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpV35TestDuration.setStatus("mandatory")
_MscLpV35TestResultsTable_Object = MibTable
mscLpV35TestResultsTable = _MscLpV35TestResultsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12)
)
if mibBuilder.loadTexts:
    mscLpV35TestResultsTable.setStatus("mandatory")
_MscLpV35TestResultsEntry_Object = MibTableRow
mscLpV35TestResultsEntry = _MscLpV35TestResultsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1)
)
mscLpV35TestResultsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpV35TestResultsEntry.setStatus("mandatory")
_MscLpV35TestElapsedTime_Type = Counter32
_MscLpV35TestElapsedTime_Object = MibTableColumn
mscLpV35TestElapsedTime = _MscLpV35TestElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1, 1),
    _MscLpV35TestElapsedTime_Type()
)
mscLpV35TestElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35TestElapsedTime.setStatus("mandatory")


class _MscLpV35TestTimeRemaining_Type(Unsigned32):
    """Custom type mscLpV35TestTimeRemaining based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpV35TestTimeRemaining_Type.__name__ = "Unsigned32"
_MscLpV35TestTimeRemaining_Object = MibTableColumn
mscLpV35TestTimeRemaining = _MscLpV35TestTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1, 2),
    _MscLpV35TestTimeRemaining_Type()
)
mscLpV35TestTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35TestTimeRemaining.setStatus("mandatory")


class _MscLpV35TestCauseOfTermination_Type(Integer32):
    """Custom type mscLpV35TestCauseOfTermination based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("hardwareReconfigured", 5),
          ("loopCodeSyncFailed", 6),
          ("neverStarted", 3),
          ("patternSyncFailed", 7),
          ("patternSyncLost", 8),
          ("stoppedByOperator", 1),
          ("testRunning", 4),
          ("testTimeExpired", 0),
          ("unknown", 2))
    )


_MscLpV35TestCauseOfTermination_Type.__name__ = "Integer32"
_MscLpV35TestCauseOfTermination_Object = MibTableColumn
mscLpV35TestCauseOfTermination = _MscLpV35TestCauseOfTermination_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1, 3),
    _MscLpV35TestCauseOfTermination_Type()
)
mscLpV35TestCauseOfTermination.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35TestCauseOfTermination.setStatus("mandatory")
_MscLpV35TestBitsTx_Type = PassportCounter64
_MscLpV35TestBitsTx_Object = MibTableColumn
mscLpV35TestBitsTx = _MscLpV35TestBitsTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1, 4),
    _MscLpV35TestBitsTx_Type()
)
mscLpV35TestBitsTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35TestBitsTx.setStatus("mandatory")
_MscLpV35TestBytesTx_Type = PassportCounter64
_MscLpV35TestBytesTx_Object = MibTableColumn
mscLpV35TestBytesTx = _MscLpV35TestBytesTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1, 5),
    _MscLpV35TestBytesTx_Type()
)
mscLpV35TestBytesTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35TestBytesTx.setStatus("mandatory")
_MscLpV35TestFrmTx_Type = PassportCounter64
_MscLpV35TestFrmTx_Object = MibTableColumn
mscLpV35TestFrmTx = _MscLpV35TestFrmTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1, 6),
    _MscLpV35TestFrmTx_Type()
)
mscLpV35TestFrmTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35TestFrmTx.setStatus("mandatory")
_MscLpV35TestBitsRx_Type = PassportCounter64
_MscLpV35TestBitsRx_Object = MibTableColumn
mscLpV35TestBitsRx = _MscLpV35TestBitsRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1, 7),
    _MscLpV35TestBitsRx_Type()
)
mscLpV35TestBitsRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35TestBitsRx.setStatus("mandatory")
_MscLpV35TestBytesRx_Type = PassportCounter64
_MscLpV35TestBytesRx_Object = MibTableColumn
mscLpV35TestBytesRx = _MscLpV35TestBytesRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1, 8),
    _MscLpV35TestBytesRx_Type()
)
mscLpV35TestBytesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35TestBytesRx.setStatus("mandatory")
_MscLpV35TestFrmRx_Type = PassportCounter64
_MscLpV35TestFrmRx_Object = MibTableColumn
mscLpV35TestFrmRx = _MscLpV35TestFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1, 9),
    _MscLpV35TestFrmRx_Type()
)
mscLpV35TestFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35TestFrmRx.setStatus("mandatory")
_MscLpV35TestErroredFrmRx_Type = PassportCounter64
_MscLpV35TestErroredFrmRx_Object = MibTableColumn
mscLpV35TestErroredFrmRx = _MscLpV35TestErroredFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1, 10),
    _MscLpV35TestErroredFrmRx_Type()
)
mscLpV35TestErroredFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35TestErroredFrmRx.setStatus("mandatory")


class _MscLpV35TestBitErrorRate_Type(AsciiString):
    """Custom type mscLpV35TestBitErrorRate based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )


_MscLpV35TestBitErrorRate_Type.__name__ = "AsciiString"
_MscLpV35TestBitErrorRate_Object = MibTableColumn
mscLpV35TestBitErrorRate = _MscLpV35TestBitErrorRate_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 2, 12, 1, 11),
    _MscLpV35TestBitErrorRate_Type()
)
mscLpV35TestBitErrorRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35TestBitErrorRate.setStatus("mandatory")
_MscLpV35ProvTable_Object = MibTable
mscLpV35ProvTable = _MscLpV35ProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 10)
)
if mibBuilder.loadTexts:
    mscLpV35ProvTable.setStatus("mandatory")
_MscLpV35ProvEntry_Object = MibTableRow
mscLpV35ProvEntry = _MscLpV35ProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 10, 1)
)
mscLpV35ProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"),
)
if mibBuilder.loadTexts:
    mscLpV35ProvEntry.setStatus("mandatory")


class _MscLpV35LinkMode_Type(Integer32):
    """Custom type mscLpV35LinkMode based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              128)
        )
    )
    namedValues = NamedValues(
        *(("dce", 128),
          ("dte", 0))
    )


_MscLpV35LinkMode_Type.__name__ = "Integer32"
_MscLpV35LinkMode_Object = MibTableColumn
mscLpV35LinkMode = _MscLpV35LinkMode_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 10, 1, 1),
    _MscLpV35LinkMode_Type()
)
mscLpV35LinkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpV35LinkMode.setStatus("mandatory")


class _MscLpV35ReadyLineState_Type(OctetString):
    """Custom type mscLpV35ReadyLineState based on OctetString"""
    defaultHexValue = "f0"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpV35ReadyLineState_Type.__name__ = "OctetString"
_MscLpV35ReadyLineState_Object = MibTableColumn
mscLpV35ReadyLineState = _MscLpV35ReadyLineState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 10, 1, 2),
    _MscLpV35ReadyLineState_Type()
)
mscLpV35ReadyLineState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpV35ReadyLineState.setStatus("mandatory")


class _MscLpV35DataTransferLineState_Type(OctetString):
    """Custom type mscLpV35DataTransferLineState based on OctetString"""
    defaultHexValue = "f0"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpV35DataTransferLineState_Type.__name__ = "OctetString"
_MscLpV35DataTransferLineState_Object = MibTableColumn
mscLpV35DataTransferLineState = _MscLpV35DataTransferLineState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 10, 1, 3),
    _MscLpV35DataTransferLineState_Type()
)
mscLpV35DataTransferLineState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpV35DataTransferLineState.setStatus("mandatory")


class _MscLpV35LineStatusTimeOut_Type(Unsigned32):
    """Custom type mscLpV35LineStatusTimeOut based on Unsigned32"""
    defaultValue = 1000

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 20000),
    )


_MscLpV35LineStatusTimeOut_Type.__name__ = "Unsigned32"
_MscLpV35LineStatusTimeOut_Object = MibTableColumn
mscLpV35LineStatusTimeOut = _MscLpV35LineStatusTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 10, 1, 4),
    _MscLpV35LineStatusTimeOut_Type()
)
mscLpV35LineStatusTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpV35LineStatusTimeOut.setStatus("mandatory")


class _MscLpV35LineSpeed_Type(Unsigned32):
    """Custom type mscLpV35LineSpeed based on Unsigned32"""
    defaultValue = 192000

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(9600, 3840000),
    )


_MscLpV35LineSpeed_Type.__name__ = "Unsigned32"
_MscLpV35LineSpeed_Object = MibTableColumn
mscLpV35LineSpeed = _MscLpV35LineSpeed_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 10, 1, 5),
    _MscLpV35LineSpeed_Type()
)
mscLpV35LineSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpV35LineSpeed.setStatus("mandatory")


class _MscLpV35ClockingSource_Type(Integer32):
    """Custom type mscLpV35ClockingSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("local", 0),
          ("module", 1))
    )


_MscLpV35ClockingSource_Type.__name__ = "Integer32"
_MscLpV35ClockingSource_Object = MibTableColumn
mscLpV35ClockingSource = _MscLpV35ClockingSource_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 10, 1, 6),
    _MscLpV35ClockingSource_Type()
)
mscLpV35ClockingSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpV35ClockingSource.setStatus("mandatory")


class _MscLpV35DteDataClockSource_Type(Integer32):
    """Custom type mscLpV35DteDataClockSource based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fromDce", 0),
          ("fromDte", 2))
    )


_MscLpV35DteDataClockSource_Type.__name__ = "Integer32"
_MscLpV35DteDataClockSource_Object = MibTableColumn
mscLpV35DteDataClockSource = _MscLpV35DteDataClockSource_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 10, 1, 7),
    _MscLpV35DteDataClockSource_Type()
)
mscLpV35DteDataClockSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpV35DteDataClockSource.setStatus("mandatory")
_MscLpV35ApplicationFramerName_Type = Link
_MscLpV35ApplicationFramerName_Object = MibTableColumn
mscLpV35ApplicationFramerName = _MscLpV35ApplicationFramerName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 10, 1, 8),
    _MscLpV35ApplicationFramerName_Type()
)
mscLpV35ApplicationFramerName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpV35ApplicationFramerName.setStatus("mandatory")


class _MscLpV35EnableDynamicSpeed_Type(Integer32):
    """Custom type mscLpV35EnableDynamicSpeed based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_MscLpV35EnableDynamicSpeed_Type.__name__ = "Integer32"
_MscLpV35EnableDynamicSpeed_Object = MibTableColumn
mscLpV35EnableDynamicSpeed = _MscLpV35EnableDynamicSpeed_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 10, 1, 9),
    _MscLpV35EnableDynamicSpeed_Type()
)
mscLpV35EnableDynamicSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpV35EnableDynamicSpeed.setStatus("mandatory")
_MscLpV35CidDataTable_Object = MibTable
mscLpV35CidDataTable = _MscLpV35CidDataTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 11)
)
if mibBuilder.loadTexts:
    mscLpV35CidDataTable.setStatus("mandatory")
_MscLpV35CidDataEntry_Object = MibTableRow
mscLpV35CidDataEntry = _MscLpV35CidDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 11, 1)
)
mscLpV35CidDataEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"),
)
if mibBuilder.loadTexts:
    mscLpV35CidDataEntry.setStatus("mandatory")


class _MscLpV35CustomerIdentifier_Type(Unsigned32):
    """Custom type mscLpV35CustomerIdentifier based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 8191),
    )


_MscLpV35CustomerIdentifier_Type.__name__ = "Unsigned32"
_MscLpV35CustomerIdentifier_Object = MibTableColumn
mscLpV35CustomerIdentifier = _MscLpV35CustomerIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 11, 1, 1),
    _MscLpV35CustomerIdentifier_Type()
)
mscLpV35CustomerIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpV35CustomerIdentifier.setStatus("mandatory")
_MscLpV35AdminInfoTable_Object = MibTable
mscLpV35AdminInfoTable = _MscLpV35AdminInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 12)
)
if mibBuilder.loadTexts:
    mscLpV35AdminInfoTable.setStatus("mandatory")
_MscLpV35AdminInfoEntry_Object = MibTableRow
mscLpV35AdminInfoEntry = _MscLpV35AdminInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 12, 1)
)
mscLpV35AdminInfoEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"),
)
if mibBuilder.loadTexts:
    mscLpV35AdminInfoEntry.setStatus("mandatory")


class _MscLpV35Vendor_Type(AsciiString):
    """Custom type mscLpV35Vendor based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_MscLpV35Vendor_Type.__name__ = "AsciiString"
_MscLpV35Vendor_Object = MibTableColumn
mscLpV35Vendor = _MscLpV35Vendor_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 12, 1, 1),
    _MscLpV35Vendor_Type()
)
mscLpV35Vendor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpV35Vendor.setStatus("mandatory")


class _MscLpV35CommentText_Type(AsciiString):
    """Custom type mscLpV35CommentText based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 60),
    )


_MscLpV35CommentText_Type.__name__ = "AsciiString"
_MscLpV35CommentText_Object = MibTableColumn
mscLpV35CommentText = _MscLpV35CommentText_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 12, 1, 2),
    _MscLpV35CommentText_Type()
)
mscLpV35CommentText.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpV35CommentText.setStatus("mandatory")
_MscLpV35IfEntryTable_Object = MibTable
mscLpV35IfEntryTable = _MscLpV35IfEntryTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 13)
)
if mibBuilder.loadTexts:
    mscLpV35IfEntryTable.setStatus("mandatory")
_MscLpV35IfEntryEntry_Object = MibTableRow
mscLpV35IfEntryEntry = _MscLpV35IfEntryEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 13, 1)
)
mscLpV35IfEntryEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"),
)
if mibBuilder.loadTexts:
    mscLpV35IfEntryEntry.setStatus("mandatory")


class _MscLpV35IfAdminStatus_Type(Integer32):
    """Custom type mscLpV35IfAdminStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpV35IfAdminStatus_Type.__name__ = "Integer32"
_MscLpV35IfAdminStatus_Object = MibTableColumn
mscLpV35IfAdminStatus = _MscLpV35IfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 13, 1, 1),
    _MscLpV35IfAdminStatus_Type()
)
mscLpV35IfAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpV35IfAdminStatus.setStatus("mandatory")


class _MscLpV35IfIndex_Type(InterfaceIndex):
    """Custom type mscLpV35IfIndex based on InterfaceIndex"""
    subtypeSpec = InterfaceIndex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_MscLpV35IfIndex_Type.__name__ = "InterfaceIndex"
_MscLpV35IfIndex_Object = MibTableColumn
mscLpV35IfIndex = _MscLpV35IfIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 13, 1, 2),
    _MscLpV35IfIndex_Type()
)
mscLpV35IfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35IfIndex.setStatus("mandatory")
_MscLpV35OperStatusTable_Object = MibTable
mscLpV35OperStatusTable = _MscLpV35OperStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 14)
)
if mibBuilder.loadTexts:
    mscLpV35OperStatusTable.setStatus("mandatory")
_MscLpV35OperStatusEntry_Object = MibTableRow
mscLpV35OperStatusEntry = _MscLpV35OperStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 14, 1)
)
mscLpV35OperStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"),
)
if mibBuilder.loadTexts:
    mscLpV35OperStatusEntry.setStatus("mandatory")


class _MscLpV35SnmpOperStatus_Type(Integer32):
    """Custom type mscLpV35SnmpOperStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpV35SnmpOperStatus_Type.__name__ = "Integer32"
_MscLpV35SnmpOperStatus_Object = MibTableColumn
mscLpV35SnmpOperStatus = _MscLpV35SnmpOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 14, 1, 1),
    _MscLpV35SnmpOperStatus_Type()
)
mscLpV35SnmpOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35SnmpOperStatus.setStatus("mandatory")
_MscLpV35StateTable_Object = MibTable
mscLpV35StateTable = _MscLpV35StateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 15)
)
if mibBuilder.loadTexts:
    mscLpV35StateTable.setStatus("mandatory")
_MscLpV35StateEntry_Object = MibTableRow
mscLpV35StateEntry = _MscLpV35StateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 15, 1)
)
mscLpV35StateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"),
)
if mibBuilder.loadTexts:
    mscLpV35StateEntry.setStatus("mandatory")


class _MscLpV35AdminState_Type(Integer32):
    """Custom type mscLpV35AdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpV35AdminState_Type.__name__ = "Integer32"
_MscLpV35AdminState_Object = MibTableColumn
mscLpV35AdminState = _MscLpV35AdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 15, 1, 1),
    _MscLpV35AdminState_Type()
)
mscLpV35AdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35AdminState.setStatus("mandatory")


class _MscLpV35OperationalState_Type(Integer32):
    """Custom type mscLpV35OperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpV35OperationalState_Type.__name__ = "Integer32"
_MscLpV35OperationalState_Object = MibTableColumn
mscLpV35OperationalState = _MscLpV35OperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 15, 1, 2),
    _MscLpV35OperationalState_Type()
)
mscLpV35OperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35OperationalState.setStatus("mandatory")


class _MscLpV35UsageState_Type(Integer32):
    """Custom type mscLpV35UsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpV35UsageState_Type.__name__ = "Integer32"
_MscLpV35UsageState_Object = MibTableColumn
mscLpV35UsageState = _MscLpV35UsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 15, 1, 3),
    _MscLpV35UsageState_Type()
)
mscLpV35UsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35UsageState.setStatus("mandatory")


class _MscLpV35AvailabilityStatus_Type(OctetString):
    """Custom type mscLpV35AvailabilityStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_MscLpV35AvailabilityStatus_Type.__name__ = "OctetString"
_MscLpV35AvailabilityStatus_Object = MibTableColumn
mscLpV35AvailabilityStatus = _MscLpV35AvailabilityStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 15, 1, 4),
    _MscLpV35AvailabilityStatus_Type()
)
mscLpV35AvailabilityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35AvailabilityStatus.setStatus("mandatory")


class _MscLpV35ProceduralStatus_Type(OctetString):
    """Custom type mscLpV35ProceduralStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpV35ProceduralStatus_Type.__name__ = "OctetString"
_MscLpV35ProceduralStatus_Object = MibTableColumn
mscLpV35ProceduralStatus = _MscLpV35ProceduralStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 15, 1, 5),
    _MscLpV35ProceduralStatus_Type()
)
mscLpV35ProceduralStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35ProceduralStatus.setStatus("mandatory")


class _MscLpV35ControlStatus_Type(OctetString):
    """Custom type mscLpV35ControlStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpV35ControlStatus_Type.__name__ = "OctetString"
_MscLpV35ControlStatus_Object = MibTableColumn
mscLpV35ControlStatus = _MscLpV35ControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 15, 1, 6),
    _MscLpV35ControlStatus_Type()
)
mscLpV35ControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35ControlStatus.setStatus("mandatory")


class _MscLpV35AlarmStatus_Type(OctetString):
    """Custom type mscLpV35AlarmStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpV35AlarmStatus_Type.__name__ = "OctetString"
_MscLpV35AlarmStatus_Object = MibTableColumn
mscLpV35AlarmStatus = _MscLpV35AlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 15, 1, 7),
    _MscLpV35AlarmStatus_Type()
)
mscLpV35AlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35AlarmStatus.setStatus("mandatory")


class _MscLpV35StandbyStatus_Type(Integer32):
    """Custom type mscLpV35StandbyStatus based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              15)
        )
    )
    namedValues = NamedValues(
        *(("coldStandby", 1),
          ("hotStandby", 0),
          ("notSet", 15),
          ("providingService", 2))
    )


_MscLpV35StandbyStatus_Type.__name__ = "Integer32"
_MscLpV35StandbyStatus_Object = MibTableColumn
mscLpV35StandbyStatus = _MscLpV35StandbyStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 15, 1, 8),
    _MscLpV35StandbyStatus_Type()
)
mscLpV35StandbyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35StandbyStatus.setStatus("mandatory")


class _MscLpV35UnknownStatus_Type(Integer32):
    """Custom type mscLpV35UnknownStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_MscLpV35UnknownStatus_Type.__name__ = "Integer32"
_MscLpV35UnknownStatus_Object = MibTableColumn
mscLpV35UnknownStatus = _MscLpV35UnknownStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 15, 1, 9),
    _MscLpV35UnknownStatus_Type()
)
mscLpV35UnknownStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35UnknownStatus.setStatus("mandatory")
_MscLpV35OperTable_Object = MibTable
mscLpV35OperTable = _MscLpV35OperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 16)
)
if mibBuilder.loadTexts:
    mscLpV35OperTable.setStatus("mandatory")
_MscLpV35OperEntry_Object = MibTableRow
mscLpV35OperEntry = _MscLpV35OperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 16, 1)
)
mscLpV35OperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpV35Index"),
)
if mibBuilder.loadTexts:
    mscLpV35OperEntry.setStatus("mandatory")


class _MscLpV35ActualLinkMode_Type(Integer32):
    """Custom type mscLpV35ActualLinkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              128)
        )
    )
    namedValues = NamedValues(
        *(("dce", 128),
          ("dte", 0))
    )


_MscLpV35ActualLinkMode_Type.__name__ = "Integer32"
_MscLpV35ActualLinkMode_Object = MibTableColumn
mscLpV35ActualLinkMode = _MscLpV35ActualLinkMode_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 16, 1, 1),
    _MscLpV35ActualLinkMode_Type()
)
mscLpV35ActualLinkMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35ActualLinkMode.setStatus("mandatory")


class _MscLpV35LineState_Type(OctetString):
    """Custom type mscLpV35LineState based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpV35LineState_Type.__name__ = "OctetString"
_MscLpV35LineState_Object = MibTableColumn
mscLpV35LineState = _MscLpV35LineState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 16, 1, 2),
    _MscLpV35LineState_Type()
)
mscLpV35LineState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35LineState.setStatus("mandatory")


class _MscLpV35ActualTxLineSpeed_Type(Gauge32):
    """Custom type mscLpV35ActualTxLineSpeed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpV35ActualTxLineSpeed_Type.__name__ = "Gauge32"
_MscLpV35ActualTxLineSpeed_Object = MibTableColumn
mscLpV35ActualTxLineSpeed = _MscLpV35ActualTxLineSpeed_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 16, 1, 3),
    _MscLpV35ActualTxLineSpeed_Type()
)
mscLpV35ActualTxLineSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35ActualTxLineSpeed.setStatus("mandatory")


class _MscLpV35ActualRxLineSpeed_Type(Gauge32):
    """Custom type mscLpV35ActualRxLineSpeed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpV35ActualRxLineSpeed_Type.__name__ = "Gauge32"
_MscLpV35ActualRxLineSpeed_Object = MibTableColumn
mscLpV35ActualRxLineSpeed = _MscLpV35ActualRxLineSpeed_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 16, 1, 4),
    _MscLpV35ActualRxLineSpeed_Type()
)
mscLpV35ActualRxLineSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35ActualRxLineSpeed.setStatus("mandatory")
_MscLpV35DataXferStateChanges_Type = Counter32
_MscLpV35DataXferStateChanges_Object = MibTableColumn
mscLpV35DataXferStateChanges = _MscLpV35DataXferStateChanges_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 9, 16, 1, 5),
    _MscLpV35DataXferStateChanges_Type()
)
mscLpV35DataXferStateChanges.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpV35DataXferStateChanges.setStatus("mandatory")
_MscLpX21_ObjectIdentity = ObjectIdentity
mscLpX21 = _MscLpX21_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10)
)
_MscLpX21RowStatusTable_Object = MibTable
mscLpX21RowStatusTable = _MscLpX21RowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 1)
)
if mibBuilder.loadTexts:
    mscLpX21RowStatusTable.setStatus("mandatory")
_MscLpX21RowStatusEntry_Object = MibTableRow
mscLpX21RowStatusEntry = _MscLpX21RowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 1, 1)
)
mscLpX21RowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"),
)
if mibBuilder.loadTexts:
    mscLpX21RowStatusEntry.setStatus("mandatory")
_MscLpX21RowStatus_Type = RowStatus
_MscLpX21RowStatus_Object = MibTableColumn
mscLpX21RowStatus = _MscLpX21RowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 1, 1, 1),
    _MscLpX21RowStatus_Type()
)
mscLpX21RowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21RowStatus.setStatus("mandatory")
_MscLpX21ComponentName_Type = DisplayString
_MscLpX21ComponentName_Object = MibTableColumn
mscLpX21ComponentName = _MscLpX21ComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 1, 1, 2),
    _MscLpX21ComponentName_Type()
)
mscLpX21ComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21ComponentName.setStatus("mandatory")
_MscLpX21StorageType_Type = StorageType
_MscLpX21StorageType_Object = MibTableColumn
mscLpX21StorageType = _MscLpX21StorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 1, 1, 4),
    _MscLpX21StorageType_Type()
)
mscLpX21StorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21StorageType.setStatus("mandatory")


class _MscLpX21Index_Type(Integer32):
    """Custom type mscLpX21Index based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_MscLpX21Index_Type.__name__ = "Integer32"
_MscLpX21Index_Object = MibTableColumn
mscLpX21Index = _MscLpX21Index_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 1, 1, 10),
    _MscLpX21Index_Type()
)
mscLpX21Index.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpX21Index.setStatus("mandatory")
_MscLpX21Test_ObjectIdentity = ObjectIdentity
mscLpX21Test = _MscLpX21Test_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2)
)
_MscLpX21TestRowStatusTable_Object = MibTable
mscLpX21TestRowStatusTable = _MscLpX21TestRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 1)
)
if mibBuilder.loadTexts:
    mscLpX21TestRowStatusTable.setStatus("mandatory")
_MscLpX21TestRowStatusEntry_Object = MibTableRow
mscLpX21TestRowStatusEntry = _MscLpX21TestRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 1, 1)
)
mscLpX21TestRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpX21TestRowStatusEntry.setStatus("mandatory")
_MscLpX21TestRowStatus_Type = RowStatus
_MscLpX21TestRowStatus_Object = MibTableColumn
mscLpX21TestRowStatus = _MscLpX21TestRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 1, 1, 1),
    _MscLpX21TestRowStatus_Type()
)
mscLpX21TestRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21TestRowStatus.setStatus("mandatory")
_MscLpX21TestComponentName_Type = DisplayString
_MscLpX21TestComponentName_Object = MibTableColumn
mscLpX21TestComponentName = _MscLpX21TestComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 1, 1, 2),
    _MscLpX21TestComponentName_Type()
)
mscLpX21TestComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21TestComponentName.setStatus("mandatory")
_MscLpX21TestStorageType_Type = StorageType
_MscLpX21TestStorageType_Object = MibTableColumn
mscLpX21TestStorageType = _MscLpX21TestStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 1, 1, 4),
    _MscLpX21TestStorageType_Type()
)
mscLpX21TestStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21TestStorageType.setStatus("mandatory")
_MscLpX21TestIndex_Type = NonReplicated
_MscLpX21TestIndex_Object = MibTableColumn
mscLpX21TestIndex = _MscLpX21TestIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 1, 1, 10),
    _MscLpX21TestIndex_Type()
)
mscLpX21TestIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpX21TestIndex.setStatus("mandatory")
_MscLpX21TestStateTable_Object = MibTable
mscLpX21TestStateTable = _MscLpX21TestStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 10)
)
if mibBuilder.loadTexts:
    mscLpX21TestStateTable.setStatus("mandatory")
_MscLpX21TestStateEntry_Object = MibTableRow
mscLpX21TestStateEntry = _MscLpX21TestStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 10, 1)
)
mscLpX21TestStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpX21TestStateEntry.setStatus("mandatory")


class _MscLpX21TestAdminState_Type(Integer32):
    """Custom type mscLpX21TestAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpX21TestAdminState_Type.__name__ = "Integer32"
_MscLpX21TestAdminState_Object = MibTableColumn
mscLpX21TestAdminState = _MscLpX21TestAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 10, 1, 1),
    _MscLpX21TestAdminState_Type()
)
mscLpX21TestAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21TestAdminState.setStatus("mandatory")


class _MscLpX21TestOperationalState_Type(Integer32):
    """Custom type mscLpX21TestOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpX21TestOperationalState_Type.__name__ = "Integer32"
_MscLpX21TestOperationalState_Object = MibTableColumn
mscLpX21TestOperationalState = _MscLpX21TestOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 10, 1, 2),
    _MscLpX21TestOperationalState_Type()
)
mscLpX21TestOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21TestOperationalState.setStatus("mandatory")


class _MscLpX21TestUsageState_Type(Integer32):
    """Custom type mscLpX21TestUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpX21TestUsageState_Type.__name__ = "Integer32"
_MscLpX21TestUsageState_Object = MibTableColumn
mscLpX21TestUsageState = _MscLpX21TestUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 10, 1, 3),
    _MscLpX21TestUsageState_Type()
)
mscLpX21TestUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21TestUsageState.setStatus("mandatory")
_MscLpX21TestSetupTable_Object = MibTable
mscLpX21TestSetupTable = _MscLpX21TestSetupTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 11)
)
if mibBuilder.loadTexts:
    mscLpX21TestSetupTable.setStatus("mandatory")
_MscLpX21TestSetupEntry_Object = MibTableRow
mscLpX21TestSetupEntry = _MscLpX21TestSetupEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 11, 1)
)
mscLpX21TestSetupEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpX21TestSetupEntry.setStatus("mandatory")


class _MscLpX21TestPurpose_Type(AsciiString):
    """Custom type mscLpX21TestPurpose based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_MscLpX21TestPurpose_Type.__name__ = "AsciiString"
_MscLpX21TestPurpose_Object = MibTableColumn
mscLpX21TestPurpose = _MscLpX21TestPurpose_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 11, 1, 1),
    _MscLpX21TestPurpose_Type()
)
mscLpX21TestPurpose.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21TestPurpose.setStatus("mandatory")


class _MscLpX21TestType_Type(Integer32):
    """Custom type mscLpX21TestType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("card", 0),
          ("externalLoop", 4),
          ("localLoop", 2),
          ("manual", 1),
          ("payloadLoop", 5),
          ("pn127RemoteLoop", 8),
          ("remoteLoop", 3),
          ("remoteLoopThisTrib", 6),
          ("v54RemoteLoop", 7))
    )


_MscLpX21TestType_Type.__name__ = "Integer32"
_MscLpX21TestType_Object = MibTableColumn
mscLpX21TestType = _MscLpX21TestType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 11, 1, 2),
    _MscLpX21TestType_Type()
)
mscLpX21TestType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21TestType.setStatus("mandatory")


class _MscLpX21TestFrmSize_Type(Unsigned32):
    """Custom type mscLpX21TestFrmSize based on Unsigned32"""
    defaultValue = 1024

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 4096),
    )


_MscLpX21TestFrmSize_Type.__name__ = "Unsigned32"
_MscLpX21TestFrmSize_Object = MibTableColumn
mscLpX21TestFrmSize = _MscLpX21TestFrmSize_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 11, 1, 3),
    _MscLpX21TestFrmSize_Type()
)
mscLpX21TestFrmSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21TestFrmSize.setStatus("mandatory")


class _MscLpX21TestFrmPatternType_Type(Integer32):
    """Custom type mscLpX21TestFrmPatternType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ccitt32kBitPattern", 0),
          ("ccitt8MBitPattern", 1),
          ("customizedPattern", 2))
    )


_MscLpX21TestFrmPatternType_Type.__name__ = "Integer32"
_MscLpX21TestFrmPatternType_Object = MibTableColumn
mscLpX21TestFrmPatternType = _MscLpX21TestFrmPatternType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 11, 1, 4),
    _MscLpX21TestFrmPatternType_Type()
)
mscLpX21TestFrmPatternType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21TestFrmPatternType.setStatus("mandatory")


class _MscLpX21TestCustomizedPattern_Type(Hex):
    """Custom type mscLpX21TestCustomizedPattern based on Hex"""
    defaultValue = 1431655765

    subtypeSpec = Hex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpX21TestCustomizedPattern_Type.__name__ = "Hex"
_MscLpX21TestCustomizedPattern_Object = MibTableColumn
mscLpX21TestCustomizedPattern = _MscLpX21TestCustomizedPattern_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 11, 1, 5),
    _MscLpX21TestCustomizedPattern_Type()
)
mscLpX21TestCustomizedPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21TestCustomizedPattern.setStatus("mandatory")


class _MscLpX21TestDataStartDelay_Type(Unsigned32):
    """Custom type mscLpX21TestDataStartDelay based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1814400),
    )


_MscLpX21TestDataStartDelay_Type.__name__ = "Unsigned32"
_MscLpX21TestDataStartDelay_Object = MibTableColumn
mscLpX21TestDataStartDelay = _MscLpX21TestDataStartDelay_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 11, 1, 6),
    _MscLpX21TestDataStartDelay_Type()
)
mscLpX21TestDataStartDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21TestDataStartDelay.setStatus("mandatory")


class _MscLpX21TestDisplayInterval_Type(Unsigned32):
    """Custom type mscLpX21TestDisplayInterval based on Unsigned32"""
    defaultValue = 5

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30240),
    )


_MscLpX21TestDisplayInterval_Type.__name__ = "Unsigned32"
_MscLpX21TestDisplayInterval_Object = MibTableColumn
mscLpX21TestDisplayInterval = _MscLpX21TestDisplayInterval_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 11, 1, 7),
    _MscLpX21TestDisplayInterval_Type()
)
mscLpX21TestDisplayInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21TestDisplayInterval.setStatus("mandatory")


class _MscLpX21TestDuration_Type(Unsigned32):
    """Custom type mscLpX21TestDuration based on Unsigned32"""
    defaultValue = 1

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30240),
    )


_MscLpX21TestDuration_Type.__name__ = "Unsigned32"
_MscLpX21TestDuration_Object = MibTableColumn
mscLpX21TestDuration = _MscLpX21TestDuration_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 11, 1, 8),
    _MscLpX21TestDuration_Type()
)
mscLpX21TestDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21TestDuration.setStatus("mandatory")
_MscLpX21TestResultsTable_Object = MibTable
mscLpX21TestResultsTable = _MscLpX21TestResultsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12)
)
if mibBuilder.loadTexts:
    mscLpX21TestResultsTable.setStatus("mandatory")
_MscLpX21TestResultsEntry_Object = MibTableRow
mscLpX21TestResultsEntry = _MscLpX21TestResultsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1)
)
mscLpX21TestResultsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpX21TestResultsEntry.setStatus("mandatory")
_MscLpX21TestElapsedTime_Type = Counter32
_MscLpX21TestElapsedTime_Object = MibTableColumn
mscLpX21TestElapsedTime = _MscLpX21TestElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1, 1),
    _MscLpX21TestElapsedTime_Type()
)
mscLpX21TestElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21TestElapsedTime.setStatus("mandatory")


class _MscLpX21TestTimeRemaining_Type(Unsigned32):
    """Custom type mscLpX21TestTimeRemaining based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpX21TestTimeRemaining_Type.__name__ = "Unsigned32"
_MscLpX21TestTimeRemaining_Object = MibTableColumn
mscLpX21TestTimeRemaining = _MscLpX21TestTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1, 2),
    _MscLpX21TestTimeRemaining_Type()
)
mscLpX21TestTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21TestTimeRemaining.setStatus("mandatory")


class _MscLpX21TestCauseOfTermination_Type(Integer32):
    """Custom type mscLpX21TestCauseOfTermination based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("hardwareReconfigured", 5),
          ("loopCodeSyncFailed", 6),
          ("neverStarted", 3),
          ("patternSyncFailed", 7),
          ("patternSyncLost", 8),
          ("stoppedByOperator", 1),
          ("testRunning", 4),
          ("testTimeExpired", 0),
          ("unknown", 2))
    )


_MscLpX21TestCauseOfTermination_Type.__name__ = "Integer32"
_MscLpX21TestCauseOfTermination_Object = MibTableColumn
mscLpX21TestCauseOfTermination = _MscLpX21TestCauseOfTermination_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1, 3),
    _MscLpX21TestCauseOfTermination_Type()
)
mscLpX21TestCauseOfTermination.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21TestCauseOfTermination.setStatus("mandatory")
_MscLpX21TestBitsTx_Type = PassportCounter64
_MscLpX21TestBitsTx_Object = MibTableColumn
mscLpX21TestBitsTx = _MscLpX21TestBitsTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1, 4),
    _MscLpX21TestBitsTx_Type()
)
mscLpX21TestBitsTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21TestBitsTx.setStatus("mandatory")
_MscLpX21TestBytesTx_Type = PassportCounter64
_MscLpX21TestBytesTx_Object = MibTableColumn
mscLpX21TestBytesTx = _MscLpX21TestBytesTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1, 5),
    _MscLpX21TestBytesTx_Type()
)
mscLpX21TestBytesTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21TestBytesTx.setStatus("mandatory")
_MscLpX21TestFrmTx_Type = PassportCounter64
_MscLpX21TestFrmTx_Object = MibTableColumn
mscLpX21TestFrmTx = _MscLpX21TestFrmTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1, 6),
    _MscLpX21TestFrmTx_Type()
)
mscLpX21TestFrmTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21TestFrmTx.setStatus("mandatory")
_MscLpX21TestBitsRx_Type = PassportCounter64
_MscLpX21TestBitsRx_Object = MibTableColumn
mscLpX21TestBitsRx = _MscLpX21TestBitsRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1, 7),
    _MscLpX21TestBitsRx_Type()
)
mscLpX21TestBitsRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21TestBitsRx.setStatus("mandatory")
_MscLpX21TestBytesRx_Type = PassportCounter64
_MscLpX21TestBytesRx_Object = MibTableColumn
mscLpX21TestBytesRx = _MscLpX21TestBytesRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1, 8),
    _MscLpX21TestBytesRx_Type()
)
mscLpX21TestBytesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21TestBytesRx.setStatus("mandatory")
_MscLpX21TestFrmRx_Type = PassportCounter64
_MscLpX21TestFrmRx_Object = MibTableColumn
mscLpX21TestFrmRx = _MscLpX21TestFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1, 9),
    _MscLpX21TestFrmRx_Type()
)
mscLpX21TestFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21TestFrmRx.setStatus("mandatory")
_MscLpX21TestErroredFrmRx_Type = PassportCounter64
_MscLpX21TestErroredFrmRx_Object = MibTableColumn
mscLpX21TestErroredFrmRx = _MscLpX21TestErroredFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1, 10),
    _MscLpX21TestErroredFrmRx_Type()
)
mscLpX21TestErroredFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21TestErroredFrmRx.setStatus("mandatory")


class _MscLpX21TestBitErrorRate_Type(AsciiString):
    """Custom type mscLpX21TestBitErrorRate based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )


_MscLpX21TestBitErrorRate_Type.__name__ = "AsciiString"
_MscLpX21TestBitErrorRate_Object = MibTableColumn
mscLpX21TestBitErrorRate = _MscLpX21TestBitErrorRate_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 2, 12, 1, 11),
    _MscLpX21TestBitErrorRate_Type()
)
mscLpX21TestBitErrorRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21TestBitErrorRate.setStatus("mandatory")
_MscLpX21ProvTable_Object = MibTable
mscLpX21ProvTable = _MscLpX21ProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10)
)
if mibBuilder.loadTexts:
    mscLpX21ProvTable.setStatus("mandatory")
_MscLpX21ProvEntry_Object = MibTableRow
mscLpX21ProvEntry = _MscLpX21ProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10, 1)
)
mscLpX21ProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"),
)
if mibBuilder.loadTexts:
    mscLpX21ProvEntry.setStatus("mandatory")


class _MscLpX21LinkMode_Type(Integer32):
    """Custom type mscLpX21LinkMode based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              128)
        )
    )
    namedValues = NamedValues(
        *(("dce", 128),
          ("dte", 0))
    )


_MscLpX21LinkMode_Type.__name__ = "Integer32"
_MscLpX21LinkMode_Object = MibTableColumn
mscLpX21LinkMode = _MscLpX21LinkMode_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10, 1, 1),
    _MscLpX21LinkMode_Type()
)
mscLpX21LinkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21LinkMode.setStatus("mandatory")


class _MscLpX21ReadyLineState_Type(OctetString):
    """Custom type mscLpX21ReadyLineState based on OctetString"""
    defaultHexValue = "c0"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpX21ReadyLineState_Type.__name__ = "OctetString"
_MscLpX21ReadyLineState_Object = MibTableColumn
mscLpX21ReadyLineState = _MscLpX21ReadyLineState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10, 1, 2),
    _MscLpX21ReadyLineState_Type()
)
mscLpX21ReadyLineState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21ReadyLineState.setStatus("mandatory")


class _MscLpX21DataTransferLineState_Type(OctetString):
    """Custom type mscLpX21DataTransferLineState based on OctetString"""
    defaultHexValue = "c0"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpX21DataTransferLineState_Type.__name__ = "OctetString"
_MscLpX21DataTransferLineState_Object = MibTableColumn
mscLpX21DataTransferLineState = _MscLpX21DataTransferLineState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10, 1, 3),
    _MscLpX21DataTransferLineState_Type()
)
mscLpX21DataTransferLineState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21DataTransferLineState.setStatus("mandatory")


class _MscLpX21LineStatusTimeOut_Type(Unsigned32):
    """Custom type mscLpX21LineStatusTimeOut based on Unsigned32"""
    defaultValue = 1000

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 20000),
    )


_MscLpX21LineStatusTimeOut_Type.__name__ = "Unsigned32"
_MscLpX21LineStatusTimeOut_Object = MibTableColumn
mscLpX21LineStatusTimeOut = _MscLpX21LineStatusTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10, 1, 4),
    _MscLpX21LineStatusTimeOut_Type()
)
mscLpX21LineStatusTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21LineStatusTimeOut.setStatus("mandatory")


class _MscLpX21LineSpeed_Type(Unsigned32):
    """Custom type mscLpX21LineSpeed based on Unsigned32"""
    defaultValue = 192000

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(9600, 7680000),
    )


_MscLpX21LineSpeed_Type.__name__ = "Unsigned32"
_MscLpX21LineSpeed_Object = MibTableColumn
mscLpX21LineSpeed = _MscLpX21LineSpeed_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10, 1, 5),
    _MscLpX21LineSpeed_Type()
)
mscLpX21LineSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21LineSpeed.setStatus("mandatory")


class _MscLpX21ClockingSource_Type(Integer32):
    """Custom type mscLpX21ClockingSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("local", 0),
          ("module", 1))
    )


_MscLpX21ClockingSource_Type.__name__ = "Integer32"
_MscLpX21ClockingSource_Object = MibTableColumn
mscLpX21ClockingSource = _MscLpX21ClockingSource_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10, 1, 6),
    _MscLpX21ClockingSource_Type()
)
mscLpX21ClockingSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21ClockingSource.setStatus("mandatory")


class _MscLpX21DteDataClockSource_Type(Integer32):
    """Custom type mscLpX21DteDataClockSource based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fromDce", 0),
          ("fromDte", 2))
    )


_MscLpX21DteDataClockSource_Type.__name__ = "Integer32"
_MscLpX21DteDataClockSource_Object = MibTableColumn
mscLpX21DteDataClockSource = _MscLpX21DteDataClockSource_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10, 1, 7),
    _MscLpX21DteDataClockSource_Type()
)
mscLpX21DteDataClockSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21DteDataClockSource.setStatus("mandatory")


class _MscLpX21LineTerminationRequired_Type(Integer32):
    """Custom type mscLpX21LineTerminationRequired based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_MscLpX21LineTerminationRequired_Type.__name__ = "Integer32"
_MscLpX21LineTerminationRequired_Object = MibTableColumn
mscLpX21LineTerminationRequired = _MscLpX21LineTerminationRequired_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10, 1, 8),
    _MscLpX21LineTerminationRequired_Type()
)
mscLpX21LineTerminationRequired.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21LineTerminationRequired.setStatus("mandatory")
_MscLpX21ApplicationFramerName_Type = Link
_MscLpX21ApplicationFramerName_Object = MibTableColumn
mscLpX21ApplicationFramerName = _MscLpX21ApplicationFramerName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10, 1, 9),
    _MscLpX21ApplicationFramerName_Type()
)
mscLpX21ApplicationFramerName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21ApplicationFramerName.setStatus("mandatory")


class _MscLpX21EnableDynamicSpeed_Type(Integer32):
    """Custom type mscLpX21EnableDynamicSpeed based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("no", 0),
          ("yes", 1))
    )


_MscLpX21EnableDynamicSpeed_Type.__name__ = "Integer32"
_MscLpX21EnableDynamicSpeed_Object = MibTableColumn
mscLpX21EnableDynamicSpeed = _MscLpX21EnableDynamicSpeed_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 10, 1, 10),
    _MscLpX21EnableDynamicSpeed_Type()
)
mscLpX21EnableDynamicSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21EnableDynamicSpeed.setStatus("mandatory")
_MscLpX21CidDataTable_Object = MibTable
mscLpX21CidDataTable = _MscLpX21CidDataTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 11)
)
if mibBuilder.loadTexts:
    mscLpX21CidDataTable.setStatus("mandatory")
_MscLpX21CidDataEntry_Object = MibTableRow
mscLpX21CidDataEntry = _MscLpX21CidDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 11, 1)
)
mscLpX21CidDataEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"),
)
if mibBuilder.loadTexts:
    mscLpX21CidDataEntry.setStatus("mandatory")


class _MscLpX21CustomerIdentifier_Type(Unsigned32):
    """Custom type mscLpX21CustomerIdentifier based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 8191),
    )


_MscLpX21CustomerIdentifier_Type.__name__ = "Unsigned32"
_MscLpX21CustomerIdentifier_Object = MibTableColumn
mscLpX21CustomerIdentifier = _MscLpX21CustomerIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 11, 1, 1),
    _MscLpX21CustomerIdentifier_Type()
)
mscLpX21CustomerIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21CustomerIdentifier.setStatus("mandatory")
_MscLpX21AdminInfoTable_Object = MibTable
mscLpX21AdminInfoTable = _MscLpX21AdminInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 12)
)
if mibBuilder.loadTexts:
    mscLpX21AdminInfoTable.setStatus("mandatory")
_MscLpX21AdminInfoEntry_Object = MibTableRow
mscLpX21AdminInfoEntry = _MscLpX21AdminInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 12, 1)
)
mscLpX21AdminInfoEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"),
)
if mibBuilder.loadTexts:
    mscLpX21AdminInfoEntry.setStatus("mandatory")


class _MscLpX21Vendor_Type(AsciiString):
    """Custom type mscLpX21Vendor based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_MscLpX21Vendor_Type.__name__ = "AsciiString"
_MscLpX21Vendor_Object = MibTableColumn
mscLpX21Vendor = _MscLpX21Vendor_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 12, 1, 1),
    _MscLpX21Vendor_Type()
)
mscLpX21Vendor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21Vendor.setStatus("mandatory")


class _MscLpX21CommentText_Type(AsciiString):
    """Custom type mscLpX21CommentText based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 60),
    )


_MscLpX21CommentText_Type.__name__ = "AsciiString"
_MscLpX21CommentText_Object = MibTableColumn
mscLpX21CommentText = _MscLpX21CommentText_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 12, 1, 2),
    _MscLpX21CommentText_Type()
)
mscLpX21CommentText.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21CommentText.setStatus("mandatory")
_MscLpX21IfEntryTable_Object = MibTable
mscLpX21IfEntryTable = _MscLpX21IfEntryTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 13)
)
if mibBuilder.loadTexts:
    mscLpX21IfEntryTable.setStatus("mandatory")
_MscLpX21IfEntryEntry_Object = MibTableRow
mscLpX21IfEntryEntry = _MscLpX21IfEntryEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 13, 1)
)
mscLpX21IfEntryEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"),
)
if mibBuilder.loadTexts:
    mscLpX21IfEntryEntry.setStatus("mandatory")


class _MscLpX21IfAdminStatus_Type(Integer32):
    """Custom type mscLpX21IfAdminStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpX21IfAdminStatus_Type.__name__ = "Integer32"
_MscLpX21IfAdminStatus_Object = MibTableColumn
mscLpX21IfAdminStatus = _MscLpX21IfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 13, 1, 1),
    _MscLpX21IfAdminStatus_Type()
)
mscLpX21IfAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpX21IfAdminStatus.setStatus("mandatory")


class _MscLpX21IfIndex_Type(InterfaceIndex):
    """Custom type mscLpX21IfIndex based on InterfaceIndex"""
    subtypeSpec = InterfaceIndex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_MscLpX21IfIndex_Type.__name__ = "InterfaceIndex"
_MscLpX21IfIndex_Object = MibTableColumn
mscLpX21IfIndex = _MscLpX21IfIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 13, 1, 2),
    _MscLpX21IfIndex_Type()
)
mscLpX21IfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21IfIndex.setStatus("mandatory")
_MscLpX21OperStatusTable_Object = MibTable
mscLpX21OperStatusTable = _MscLpX21OperStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 14)
)
if mibBuilder.loadTexts:
    mscLpX21OperStatusTable.setStatus("mandatory")
_MscLpX21OperStatusEntry_Object = MibTableRow
mscLpX21OperStatusEntry = _MscLpX21OperStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 14, 1)
)
mscLpX21OperStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"),
)
if mibBuilder.loadTexts:
    mscLpX21OperStatusEntry.setStatus("mandatory")


class _MscLpX21SnmpOperStatus_Type(Integer32):
    """Custom type mscLpX21SnmpOperStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpX21SnmpOperStatus_Type.__name__ = "Integer32"
_MscLpX21SnmpOperStatus_Object = MibTableColumn
mscLpX21SnmpOperStatus = _MscLpX21SnmpOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 14, 1, 1),
    _MscLpX21SnmpOperStatus_Type()
)
mscLpX21SnmpOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21SnmpOperStatus.setStatus("mandatory")
_MscLpX21StateTable_Object = MibTable
mscLpX21StateTable = _MscLpX21StateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 15)
)
if mibBuilder.loadTexts:
    mscLpX21StateTable.setStatus("mandatory")
_MscLpX21StateEntry_Object = MibTableRow
mscLpX21StateEntry = _MscLpX21StateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 15, 1)
)
mscLpX21StateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"),
)
if mibBuilder.loadTexts:
    mscLpX21StateEntry.setStatus("mandatory")


class _MscLpX21AdminState_Type(Integer32):
    """Custom type mscLpX21AdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpX21AdminState_Type.__name__ = "Integer32"
_MscLpX21AdminState_Object = MibTableColumn
mscLpX21AdminState = _MscLpX21AdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 15, 1, 1),
    _MscLpX21AdminState_Type()
)
mscLpX21AdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21AdminState.setStatus("mandatory")


class _MscLpX21OperationalState_Type(Integer32):
    """Custom type mscLpX21OperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpX21OperationalState_Type.__name__ = "Integer32"
_MscLpX21OperationalState_Object = MibTableColumn
mscLpX21OperationalState = _MscLpX21OperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 15, 1, 2),
    _MscLpX21OperationalState_Type()
)
mscLpX21OperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21OperationalState.setStatus("mandatory")


class _MscLpX21UsageState_Type(Integer32):
    """Custom type mscLpX21UsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpX21UsageState_Type.__name__ = "Integer32"
_MscLpX21UsageState_Object = MibTableColumn
mscLpX21UsageState = _MscLpX21UsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 15, 1, 3),
    _MscLpX21UsageState_Type()
)
mscLpX21UsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21UsageState.setStatus("mandatory")


class _MscLpX21AvailabilityStatus_Type(OctetString):
    """Custom type mscLpX21AvailabilityStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_MscLpX21AvailabilityStatus_Type.__name__ = "OctetString"
_MscLpX21AvailabilityStatus_Object = MibTableColumn
mscLpX21AvailabilityStatus = _MscLpX21AvailabilityStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 15, 1, 4),
    _MscLpX21AvailabilityStatus_Type()
)
mscLpX21AvailabilityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21AvailabilityStatus.setStatus("mandatory")


class _MscLpX21ProceduralStatus_Type(OctetString):
    """Custom type mscLpX21ProceduralStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpX21ProceduralStatus_Type.__name__ = "OctetString"
_MscLpX21ProceduralStatus_Object = MibTableColumn
mscLpX21ProceduralStatus = _MscLpX21ProceduralStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 15, 1, 5),
    _MscLpX21ProceduralStatus_Type()
)
mscLpX21ProceduralStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21ProceduralStatus.setStatus("mandatory")


class _MscLpX21ControlStatus_Type(OctetString):
    """Custom type mscLpX21ControlStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpX21ControlStatus_Type.__name__ = "OctetString"
_MscLpX21ControlStatus_Object = MibTableColumn
mscLpX21ControlStatus = _MscLpX21ControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 15, 1, 6),
    _MscLpX21ControlStatus_Type()
)
mscLpX21ControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21ControlStatus.setStatus("mandatory")


class _MscLpX21AlarmStatus_Type(OctetString):
    """Custom type mscLpX21AlarmStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpX21AlarmStatus_Type.__name__ = "OctetString"
_MscLpX21AlarmStatus_Object = MibTableColumn
mscLpX21AlarmStatus = _MscLpX21AlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 15, 1, 7),
    _MscLpX21AlarmStatus_Type()
)
mscLpX21AlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21AlarmStatus.setStatus("mandatory")


class _MscLpX21StandbyStatus_Type(Integer32):
    """Custom type mscLpX21StandbyStatus based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              15)
        )
    )
    namedValues = NamedValues(
        *(("coldStandby", 1),
          ("hotStandby", 0),
          ("notSet", 15),
          ("providingService", 2))
    )


_MscLpX21StandbyStatus_Type.__name__ = "Integer32"
_MscLpX21StandbyStatus_Object = MibTableColumn
mscLpX21StandbyStatus = _MscLpX21StandbyStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 15, 1, 8),
    _MscLpX21StandbyStatus_Type()
)
mscLpX21StandbyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21StandbyStatus.setStatus("mandatory")


class _MscLpX21UnknownStatus_Type(Integer32):
    """Custom type mscLpX21UnknownStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_MscLpX21UnknownStatus_Type.__name__ = "Integer32"
_MscLpX21UnknownStatus_Object = MibTableColumn
mscLpX21UnknownStatus = _MscLpX21UnknownStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 15, 1, 9),
    _MscLpX21UnknownStatus_Type()
)
mscLpX21UnknownStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21UnknownStatus.setStatus("mandatory")
_MscLpX21OperTable_Object = MibTable
mscLpX21OperTable = _MscLpX21OperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 16)
)
if mibBuilder.loadTexts:
    mscLpX21OperTable.setStatus("mandatory")
_MscLpX21OperEntry_Object = MibTableRow
mscLpX21OperEntry = _MscLpX21OperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 16, 1)
)
mscLpX21OperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpX21Index"),
)
if mibBuilder.loadTexts:
    mscLpX21OperEntry.setStatus("mandatory")


class _MscLpX21ActualLinkMode_Type(Integer32):
    """Custom type mscLpX21ActualLinkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              128)
        )
    )
    namedValues = NamedValues(
        *(("dce", 128),
          ("dte", 0))
    )


_MscLpX21ActualLinkMode_Type.__name__ = "Integer32"
_MscLpX21ActualLinkMode_Object = MibTableColumn
mscLpX21ActualLinkMode = _MscLpX21ActualLinkMode_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 16, 1, 1),
    _MscLpX21ActualLinkMode_Type()
)
mscLpX21ActualLinkMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21ActualLinkMode.setStatus("mandatory")


class _MscLpX21LineState_Type(OctetString):
    """Custom type mscLpX21LineState based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpX21LineState_Type.__name__ = "OctetString"
_MscLpX21LineState_Object = MibTableColumn
mscLpX21LineState = _MscLpX21LineState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 16, 1, 2),
    _MscLpX21LineState_Type()
)
mscLpX21LineState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21LineState.setStatus("mandatory")


class _MscLpX21ActualTxLineSpeed_Type(Gauge32):
    """Custom type mscLpX21ActualTxLineSpeed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpX21ActualTxLineSpeed_Type.__name__ = "Gauge32"
_MscLpX21ActualTxLineSpeed_Object = MibTableColumn
mscLpX21ActualTxLineSpeed = _MscLpX21ActualTxLineSpeed_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 16, 1, 3),
    _MscLpX21ActualTxLineSpeed_Type()
)
mscLpX21ActualTxLineSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21ActualTxLineSpeed.setStatus("mandatory")


class _MscLpX21ActualRxLineSpeed_Type(Gauge32):
    """Custom type mscLpX21ActualRxLineSpeed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpX21ActualRxLineSpeed_Type.__name__ = "Gauge32"
_MscLpX21ActualRxLineSpeed_Object = MibTableColumn
mscLpX21ActualRxLineSpeed = _MscLpX21ActualRxLineSpeed_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 16, 1, 4),
    _MscLpX21ActualRxLineSpeed_Type()
)
mscLpX21ActualRxLineSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21ActualRxLineSpeed.setStatus("mandatory")
_MscLpX21DataXferStateChanges_Type = Counter32
_MscLpX21DataXferStateChanges_Object = MibTableColumn
mscLpX21DataXferStateChanges = _MscLpX21DataXferStateChanges_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 10, 16, 1, 5),
    _MscLpX21DataXferStateChanges_Type()
)
mscLpX21DataXferStateChanges.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpX21DataXferStateChanges.setStatus("mandatory")
_MscLpSonet_ObjectIdentity = ObjectIdentity
mscLpSonet = _MscLpSonet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14)
)
_MscLpSonetRowStatusTable_Object = MibTable
mscLpSonetRowStatusTable = _MscLpSonetRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 1)
)
if mibBuilder.loadTexts:
    mscLpSonetRowStatusTable.setStatus("mandatory")
_MscLpSonetRowStatusEntry_Object = MibTableRow
mscLpSonetRowStatusEntry = _MscLpSonetRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 1, 1)
)
mscLpSonetRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetRowStatusEntry.setStatus("mandatory")
_MscLpSonetRowStatus_Type = RowStatus
_MscLpSonetRowStatus_Object = MibTableColumn
mscLpSonetRowStatus = _MscLpSonetRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 1, 1, 1),
    _MscLpSonetRowStatus_Type()
)
mscLpSonetRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSonetRowStatus.setStatus("mandatory")
_MscLpSonetComponentName_Type = DisplayString
_MscLpSonetComponentName_Object = MibTableColumn
mscLpSonetComponentName = _MscLpSonetComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 1, 1, 2),
    _MscLpSonetComponentName_Type()
)
mscLpSonetComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetComponentName.setStatus("mandatory")
_MscLpSonetStorageType_Type = StorageType
_MscLpSonetStorageType_Object = MibTableColumn
mscLpSonetStorageType = _MscLpSonetStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 1, 1, 4),
    _MscLpSonetStorageType_Type()
)
mscLpSonetStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetStorageType.setStatus("mandatory")


class _MscLpSonetIndex_Type(Integer32):
    """Custom type mscLpSonetIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_MscLpSonetIndex_Type.__name__ = "Integer32"
_MscLpSonetIndex_Object = MibTableColumn
mscLpSonetIndex = _MscLpSonetIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 1, 1, 10),
    _MscLpSonetIndex_Type()
)
mscLpSonetIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpSonetIndex.setStatus("mandatory")
_MscLpSonetPath_ObjectIdentity = ObjectIdentity
mscLpSonetPath = _MscLpSonetPath_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2)
)
_MscLpSonetPathRowStatusTable_Object = MibTable
mscLpSonetPathRowStatusTable = _MscLpSonetPathRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 1)
)
if mibBuilder.loadTexts:
    mscLpSonetPathRowStatusTable.setStatus("mandatory")
_MscLpSonetPathRowStatusEntry_Object = MibTableRow
mscLpSonetPathRowStatusEntry = _MscLpSonetPathRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 1, 1)
)
mscLpSonetPathRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetPathRowStatusEntry.setStatus("mandatory")
_MscLpSonetPathRowStatus_Type = RowStatus
_MscLpSonetPathRowStatus_Object = MibTableColumn
mscLpSonetPathRowStatus = _MscLpSonetPathRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 1, 1, 1),
    _MscLpSonetPathRowStatus_Type()
)
mscLpSonetPathRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSonetPathRowStatus.setStatus("mandatory")
_MscLpSonetPathComponentName_Type = DisplayString
_MscLpSonetPathComponentName_Object = MibTableColumn
mscLpSonetPathComponentName = _MscLpSonetPathComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 1, 1, 2),
    _MscLpSonetPathComponentName_Type()
)
mscLpSonetPathComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathComponentName.setStatus("mandatory")
_MscLpSonetPathStorageType_Type = StorageType
_MscLpSonetPathStorageType_Object = MibTableColumn
mscLpSonetPathStorageType = _MscLpSonetPathStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 1, 1, 4),
    _MscLpSonetPathStorageType_Type()
)
mscLpSonetPathStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathStorageType.setStatus("mandatory")


class _MscLpSonetPathIndex_Type(Integer32):
    """Custom type mscLpSonetPathIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_MscLpSonetPathIndex_Type.__name__ = "Integer32"
_MscLpSonetPathIndex_Object = MibTableColumn
mscLpSonetPathIndex = _MscLpSonetPathIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 1, 1, 10),
    _MscLpSonetPathIndex_Type()
)
mscLpSonetPathIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpSonetPathIndex.setStatus("mandatory")
_MscLpSonetPathCell_ObjectIdentity = ObjectIdentity
mscLpSonetPathCell = _MscLpSonetPathCell_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2)
)
_MscLpSonetPathCellRowStatusTable_Object = MibTable
mscLpSonetPathCellRowStatusTable = _MscLpSonetPathCellRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 1)
)
if mibBuilder.loadTexts:
    mscLpSonetPathCellRowStatusTable.setStatus("mandatory")
_MscLpSonetPathCellRowStatusEntry_Object = MibTableRow
mscLpSonetPathCellRowStatusEntry = _MscLpSonetPathCellRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 1, 1)
)
mscLpSonetPathCellRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathCellIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetPathCellRowStatusEntry.setStatus("mandatory")
_MscLpSonetPathCellRowStatus_Type = RowStatus
_MscLpSonetPathCellRowStatus_Object = MibTableColumn
mscLpSonetPathCellRowStatus = _MscLpSonetPathCellRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 1, 1, 1),
    _MscLpSonetPathCellRowStatus_Type()
)
mscLpSonetPathCellRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathCellRowStatus.setStatus("mandatory")
_MscLpSonetPathCellComponentName_Type = DisplayString
_MscLpSonetPathCellComponentName_Object = MibTableColumn
mscLpSonetPathCellComponentName = _MscLpSonetPathCellComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 1, 1, 2),
    _MscLpSonetPathCellComponentName_Type()
)
mscLpSonetPathCellComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathCellComponentName.setStatus("mandatory")
_MscLpSonetPathCellStorageType_Type = StorageType
_MscLpSonetPathCellStorageType_Object = MibTableColumn
mscLpSonetPathCellStorageType = _MscLpSonetPathCellStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 1, 1, 4),
    _MscLpSonetPathCellStorageType_Type()
)
mscLpSonetPathCellStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathCellStorageType.setStatus("mandatory")
_MscLpSonetPathCellIndex_Type = NonReplicated
_MscLpSonetPathCellIndex_Object = MibTableColumn
mscLpSonetPathCellIndex = _MscLpSonetPathCellIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 1, 1, 10),
    _MscLpSonetPathCellIndex_Type()
)
mscLpSonetPathCellIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpSonetPathCellIndex.setStatus("mandatory")
_MscLpSonetPathCellProvTable_Object = MibTable
mscLpSonetPathCellProvTable = _MscLpSonetPathCellProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 10)
)
if mibBuilder.loadTexts:
    mscLpSonetPathCellProvTable.setStatus("mandatory")
_MscLpSonetPathCellProvEntry_Object = MibTableRow
mscLpSonetPathCellProvEntry = _MscLpSonetPathCellProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 10, 1)
)
mscLpSonetPathCellProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathCellIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetPathCellProvEntry.setStatus("mandatory")


class _MscLpSonetPathCellAlarmActDelay_Type(Unsigned32):
    """Custom type mscLpSonetPathCellAlarmActDelay based on Unsigned32"""
    defaultValue = 500

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2000),
    )


_MscLpSonetPathCellAlarmActDelay_Type.__name__ = "Unsigned32"
_MscLpSonetPathCellAlarmActDelay_Object = MibTableColumn
mscLpSonetPathCellAlarmActDelay = _MscLpSonetPathCellAlarmActDelay_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 10, 1, 1),
    _MscLpSonetPathCellAlarmActDelay_Type()
)
mscLpSonetPathCellAlarmActDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSonetPathCellAlarmActDelay.setStatus("mandatory")


class _MscLpSonetPathCellScrambleCellPayload_Type(Integer32):
    """Custom type mscLpSonetPathCellScrambleCellPayload based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpSonetPathCellScrambleCellPayload_Type.__name__ = "Integer32"
_MscLpSonetPathCellScrambleCellPayload_Object = MibTableColumn
mscLpSonetPathCellScrambleCellPayload = _MscLpSonetPathCellScrambleCellPayload_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 10, 1, 2),
    _MscLpSonetPathCellScrambleCellPayload_Type()
)
mscLpSonetPathCellScrambleCellPayload.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSonetPathCellScrambleCellPayload.setStatus("mandatory")


class _MscLpSonetPathCellCorrectSingleBitHeaderErrors_Type(Integer32):
    """Custom type mscLpSonetPathCellCorrectSingleBitHeaderErrors based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpSonetPathCellCorrectSingleBitHeaderErrors_Type.__name__ = "Integer32"
_MscLpSonetPathCellCorrectSingleBitHeaderErrors_Object = MibTableColumn
mscLpSonetPathCellCorrectSingleBitHeaderErrors = _MscLpSonetPathCellCorrectSingleBitHeaderErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 10, 1, 3),
    _MscLpSonetPathCellCorrectSingleBitHeaderErrors_Type()
)
mscLpSonetPathCellCorrectSingleBitHeaderErrors.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSonetPathCellCorrectSingleBitHeaderErrors.setStatus("mandatory")
_MscLpSonetPathCellOperTable_Object = MibTable
mscLpSonetPathCellOperTable = _MscLpSonetPathCellOperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 11)
)
if mibBuilder.loadTexts:
    mscLpSonetPathCellOperTable.setStatus("mandatory")
_MscLpSonetPathCellOperEntry_Object = MibTableRow
mscLpSonetPathCellOperEntry = _MscLpSonetPathCellOperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 11, 1)
)
mscLpSonetPathCellOperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathCellIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetPathCellOperEntry.setStatus("mandatory")


class _MscLpSonetPathCellLcdAlarm_Type(Integer32):
    """Custom type mscLpSonetPathCellLcdAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSonetPathCellLcdAlarm_Type.__name__ = "Integer32"
_MscLpSonetPathCellLcdAlarm_Object = MibTableColumn
mscLpSonetPathCellLcdAlarm = _MscLpSonetPathCellLcdAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 11, 1, 1),
    _MscLpSonetPathCellLcdAlarm_Type()
)
mscLpSonetPathCellLcdAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathCellLcdAlarm.setStatus("mandatory")
_MscLpSonetPathCellStatsTable_Object = MibTable
mscLpSonetPathCellStatsTable = _MscLpSonetPathCellStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 12)
)
if mibBuilder.loadTexts:
    mscLpSonetPathCellStatsTable.setStatus("mandatory")
_MscLpSonetPathCellStatsEntry_Object = MibTableRow
mscLpSonetPathCellStatsEntry = _MscLpSonetPathCellStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 12, 1)
)
mscLpSonetPathCellStatsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathCellIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetPathCellStatsEntry.setStatus("mandatory")
_MscLpSonetPathCellUncorrectableHecErrors_Type = Counter32
_MscLpSonetPathCellUncorrectableHecErrors_Object = MibTableColumn
mscLpSonetPathCellUncorrectableHecErrors = _MscLpSonetPathCellUncorrectableHecErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 12, 1, 1),
    _MscLpSonetPathCellUncorrectableHecErrors_Type()
)
mscLpSonetPathCellUncorrectableHecErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathCellUncorrectableHecErrors.setStatus("mandatory")
_MscLpSonetPathCellSevErroredSec_Type = Counter32
_MscLpSonetPathCellSevErroredSec_Object = MibTableColumn
mscLpSonetPathCellSevErroredSec = _MscLpSonetPathCellSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 12, 1, 2),
    _MscLpSonetPathCellSevErroredSec_Type()
)
mscLpSonetPathCellSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathCellSevErroredSec.setStatus("mandatory")


class _MscLpSonetPathCellReceiveCellUtilization_Type(Gauge32):
    """Custom type mscLpSonetPathCellReceiveCellUtilization based on Gauge32"""
    defaultValue = 0

    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_MscLpSonetPathCellReceiveCellUtilization_Type.__name__ = "Gauge32"
_MscLpSonetPathCellReceiveCellUtilization_Object = MibTableColumn
mscLpSonetPathCellReceiveCellUtilization = _MscLpSonetPathCellReceiveCellUtilization_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 12, 1, 3),
    _MscLpSonetPathCellReceiveCellUtilization_Type()
)
mscLpSonetPathCellReceiveCellUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathCellReceiveCellUtilization.setStatus("mandatory")


class _MscLpSonetPathCellTransmitCellUtilization_Type(Gauge32):
    """Custom type mscLpSonetPathCellTransmitCellUtilization based on Gauge32"""
    defaultValue = 0

    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_MscLpSonetPathCellTransmitCellUtilization_Type.__name__ = "Gauge32"
_MscLpSonetPathCellTransmitCellUtilization_Object = MibTableColumn
mscLpSonetPathCellTransmitCellUtilization = _MscLpSonetPathCellTransmitCellUtilization_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 12, 1, 4),
    _MscLpSonetPathCellTransmitCellUtilization_Type()
)
mscLpSonetPathCellTransmitCellUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathCellTransmitCellUtilization.setStatus("mandatory")
_MscLpSonetPathCellCorrectableHeaderErrors_Type = Counter32
_MscLpSonetPathCellCorrectableHeaderErrors_Object = MibTableColumn
mscLpSonetPathCellCorrectableHeaderErrors = _MscLpSonetPathCellCorrectableHeaderErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 2, 12, 1, 5),
    _MscLpSonetPathCellCorrectableHeaderErrors_Type()
)
mscLpSonetPathCellCorrectableHeaderErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathCellCorrectableHeaderErrors.setStatus("mandatory")
_MscLpSonetPathProvTable_Object = MibTable
mscLpSonetPathProvTable = _MscLpSonetPathProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 10)
)
if mibBuilder.loadTexts:
    mscLpSonetPathProvTable.setStatus("mandatory")
_MscLpSonetPathProvEntry_Object = MibTableRow
mscLpSonetPathProvEntry = _MscLpSonetPathProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 10, 1)
)
mscLpSonetPathProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetPathProvEntry.setStatus("mandatory")
_MscLpSonetPathApplicationFramerName_Type = Link
_MscLpSonetPathApplicationFramerName_Object = MibTableColumn
mscLpSonetPathApplicationFramerName = _MscLpSonetPathApplicationFramerName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 10, 1, 1),
    _MscLpSonetPathApplicationFramerName_Type()
)
mscLpSonetPathApplicationFramerName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSonetPathApplicationFramerName.setStatus("mandatory")
_MscLpSonetPathCidDataTable_Object = MibTable
mscLpSonetPathCidDataTable = _MscLpSonetPathCidDataTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 11)
)
if mibBuilder.loadTexts:
    mscLpSonetPathCidDataTable.setStatus("mandatory")
_MscLpSonetPathCidDataEntry_Object = MibTableRow
mscLpSonetPathCidDataEntry = _MscLpSonetPathCidDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 11, 1)
)
mscLpSonetPathCidDataEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetPathCidDataEntry.setStatus("mandatory")


class _MscLpSonetPathCustomerIdentifier_Type(Unsigned32):
    """Custom type mscLpSonetPathCustomerIdentifier based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 8191),
    )


_MscLpSonetPathCustomerIdentifier_Type.__name__ = "Unsigned32"
_MscLpSonetPathCustomerIdentifier_Object = MibTableColumn
mscLpSonetPathCustomerIdentifier = _MscLpSonetPathCustomerIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 11, 1, 1),
    _MscLpSonetPathCustomerIdentifier_Type()
)
mscLpSonetPathCustomerIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSonetPathCustomerIdentifier.setStatus("mandatory")
_MscLpSonetPathStateTable_Object = MibTable
mscLpSonetPathStateTable = _MscLpSonetPathStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 12)
)
if mibBuilder.loadTexts:
    mscLpSonetPathStateTable.setStatus("mandatory")
_MscLpSonetPathStateEntry_Object = MibTableRow
mscLpSonetPathStateEntry = _MscLpSonetPathStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 12, 1)
)
mscLpSonetPathStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetPathStateEntry.setStatus("mandatory")


class _MscLpSonetPathAdminState_Type(Integer32):
    """Custom type mscLpSonetPathAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpSonetPathAdminState_Type.__name__ = "Integer32"
_MscLpSonetPathAdminState_Object = MibTableColumn
mscLpSonetPathAdminState = _MscLpSonetPathAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 12, 1, 1),
    _MscLpSonetPathAdminState_Type()
)
mscLpSonetPathAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathAdminState.setStatus("mandatory")


class _MscLpSonetPathOperationalState_Type(Integer32):
    """Custom type mscLpSonetPathOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpSonetPathOperationalState_Type.__name__ = "Integer32"
_MscLpSonetPathOperationalState_Object = MibTableColumn
mscLpSonetPathOperationalState = _MscLpSonetPathOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 12, 1, 2),
    _MscLpSonetPathOperationalState_Type()
)
mscLpSonetPathOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathOperationalState.setStatus("mandatory")


class _MscLpSonetPathUsageState_Type(Integer32):
    """Custom type mscLpSonetPathUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpSonetPathUsageState_Type.__name__ = "Integer32"
_MscLpSonetPathUsageState_Object = MibTableColumn
mscLpSonetPathUsageState = _MscLpSonetPathUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 12, 1, 3),
    _MscLpSonetPathUsageState_Type()
)
mscLpSonetPathUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathUsageState.setStatus("mandatory")


class _MscLpSonetPathAvailabilityStatus_Type(OctetString):
    """Custom type mscLpSonetPathAvailabilityStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_MscLpSonetPathAvailabilityStatus_Type.__name__ = "OctetString"
_MscLpSonetPathAvailabilityStatus_Object = MibTableColumn
mscLpSonetPathAvailabilityStatus = _MscLpSonetPathAvailabilityStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 12, 1, 4),
    _MscLpSonetPathAvailabilityStatus_Type()
)
mscLpSonetPathAvailabilityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathAvailabilityStatus.setStatus("mandatory")


class _MscLpSonetPathProceduralStatus_Type(OctetString):
    """Custom type mscLpSonetPathProceduralStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpSonetPathProceduralStatus_Type.__name__ = "OctetString"
_MscLpSonetPathProceduralStatus_Object = MibTableColumn
mscLpSonetPathProceduralStatus = _MscLpSonetPathProceduralStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 12, 1, 5),
    _MscLpSonetPathProceduralStatus_Type()
)
mscLpSonetPathProceduralStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathProceduralStatus.setStatus("mandatory")


class _MscLpSonetPathControlStatus_Type(OctetString):
    """Custom type mscLpSonetPathControlStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpSonetPathControlStatus_Type.__name__ = "OctetString"
_MscLpSonetPathControlStatus_Object = MibTableColumn
mscLpSonetPathControlStatus = _MscLpSonetPathControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 12, 1, 6),
    _MscLpSonetPathControlStatus_Type()
)
mscLpSonetPathControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathControlStatus.setStatus("mandatory")


class _MscLpSonetPathAlarmStatus_Type(OctetString):
    """Custom type mscLpSonetPathAlarmStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpSonetPathAlarmStatus_Type.__name__ = "OctetString"
_MscLpSonetPathAlarmStatus_Object = MibTableColumn
mscLpSonetPathAlarmStatus = _MscLpSonetPathAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 12, 1, 7),
    _MscLpSonetPathAlarmStatus_Type()
)
mscLpSonetPathAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathAlarmStatus.setStatus("mandatory")


class _MscLpSonetPathStandbyStatus_Type(Integer32):
    """Custom type mscLpSonetPathStandbyStatus based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              15)
        )
    )
    namedValues = NamedValues(
        *(("coldStandby", 1),
          ("hotStandby", 0),
          ("notSet", 15),
          ("providingService", 2))
    )


_MscLpSonetPathStandbyStatus_Type.__name__ = "Integer32"
_MscLpSonetPathStandbyStatus_Object = MibTableColumn
mscLpSonetPathStandbyStatus = _MscLpSonetPathStandbyStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 12, 1, 8),
    _MscLpSonetPathStandbyStatus_Type()
)
mscLpSonetPathStandbyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathStandbyStatus.setStatus("mandatory")


class _MscLpSonetPathUnknownStatus_Type(Integer32):
    """Custom type mscLpSonetPathUnknownStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_MscLpSonetPathUnknownStatus_Type.__name__ = "Integer32"
_MscLpSonetPathUnknownStatus_Object = MibTableColumn
mscLpSonetPathUnknownStatus = _MscLpSonetPathUnknownStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 12, 1, 9),
    _MscLpSonetPathUnknownStatus_Type()
)
mscLpSonetPathUnknownStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathUnknownStatus.setStatus("mandatory")
_MscLpSonetPathIfEntryTable_Object = MibTable
mscLpSonetPathIfEntryTable = _MscLpSonetPathIfEntryTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 13)
)
if mibBuilder.loadTexts:
    mscLpSonetPathIfEntryTable.setStatus("mandatory")
_MscLpSonetPathIfEntryEntry_Object = MibTableRow
mscLpSonetPathIfEntryEntry = _MscLpSonetPathIfEntryEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 13, 1)
)
mscLpSonetPathIfEntryEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetPathIfEntryEntry.setStatus("mandatory")


class _MscLpSonetPathIfAdminStatus_Type(Integer32):
    """Custom type mscLpSonetPathIfAdminStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpSonetPathIfAdminStatus_Type.__name__ = "Integer32"
_MscLpSonetPathIfAdminStatus_Object = MibTableColumn
mscLpSonetPathIfAdminStatus = _MscLpSonetPathIfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 13, 1, 1),
    _MscLpSonetPathIfAdminStatus_Type()
)
mscLpSonetPathIfAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSonetPathIfAdminStatus.setStatus("mandatory")


class _MscLpSonetPathIfIndex_Type(InterfaceIndex):
    """Custom type mscLpSonetPathIfIndex based on InterfaceIndex"""
    subtypeSpec = InterfaceIndex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_MscLpSonetPathIfIndex_Type.__name__ = "InterfaceIndex"
_MscLpSonetPathIfIndex_Object = MibTableColumn
mscLpSonetPathIfIndex = _MscLpSonetPathIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 13, 1, 2),
    _MscLpSonetPathIfIndex_Type()
)
mscLpSonetPathIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathIfIndex.setStatus("mandatory")
_MscLpSonetPathOperStatusTable_Object = MibTable
mscLpSonetPathOperStatusTable = _MscLpSonetPathOperStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 14)
)
if mibBuilder.loadTexts:
    mscLpSonetPathOperStatusTable.setStatus("mandatory")
_MscLpSonetPathOperStatusEntry_Object = MibTableRow
mscLpSonetPathOperStatusEntry = _MscLpSonetPathOperStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 14, 1)
)
mscLpSonetPathOperStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetPathOperStatusEntry.setStatus("mandatory")


class _MscLpSonetPathSnmpOperStatus_Type(Integer32):
    """Custom type mscLpSonetPathSnmpOperStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpSonetPathSnmpOperStatus_Type.__name__ = "Integer32"
_MscLpSonetPathSnmpOperStatus_Object = MibTableColumn
mscLpSonetPathSnmpOperStatus = _MscLpSonetPathSnmpOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 14, 1, 1),
    _MscLpSonetPathSnmpOperStatus_Type()
)
mscLpSonetPathSnmpOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathSnmpOperStatus.setStatus("mandatory")
_MscLpSonetPathOperTable_Object = MibTable
mscLpSonetPathOperTable = _MscLpSonetPathOperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 15)
)
if mibBuilder.loadTexts:
    mscLpSonetPathOperTable.setStatus("mandatory")
_MscLpSonetPathOperEntry_Object = MibTableRow
mscLpSonetPathOperEntry = _MscLpSonetPathOperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 15, 1)
)
mscLpSonetPathOperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetPathOperEntry.setStatus("mandatory")


class _MscLpSonetPathLopAlarm_Type(Integer32):
    """Custom type mscLpSonetPathLopAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSonetPathLopAlarm_Type.__name__ = "Integer32"
_MscLpSonetPathLopAlarm_Object = MibTableColumn
mscLpSonetPathLopAlarm = _MscLpSonetPathLopAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 15, 1, 1),
    _MscLpSonetPathLopAlarm_Type()
)
mscLpSonetPathLopAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathLopAlarm.setStatus("mandatory")


class _MscLpSonetPathRxAisAlarm_Type(Integer32):
    """Custom type mscLpSonetPathRxAisAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSonetPathRxAisAlarm_Type.__name__ = "Integer32"
_MscLpSonetPathRxAisAlarm_Object = MibTableColumn
mscLpSonetPathRxAisAlarm = _MscLpSonetPathRxAisAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 15, 1, 2),
    _MscLpSonetPathRxAisAlarm_Type()
)
mscLpSonetPathRxAisAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathRxAisAlarm.setStatus("mandatory")


class _MscLpSonetPathRxRfiAlarm_Type(Integer32):
    """Custom type mscLpSonetPathRxRfiAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSonetPathRxRfiAlarm_Type.__name__ = "Integer32"
_MscLpSonetPathRxRfiAlarm_Object = MibTableColumn
mscLpSonetPathRxRfiAlarm = _MscLpSonetPathRxRfiAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 15, 1, 3),
    _MscLpSonetPathRxRfiAlarm_Type()
)
mscLpSonetPathRxRfiAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathRxRfiAlarm.setStatus("mandatory")


class _MscLpSonetPathSignalLabelMismatch_Type(Integer32):
    """Custom type mscLpSonetPathSignalLabelMismatch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSonetPathSignalLabelMismatch_Type.__name__ = "Integer32"
_MscLpSonetPathSignalLabelMismatch_Object = MibTableColumn
mscLpSonetPathSignalLabelMismatch = _MscLpSonetPathSignalLabelMismatch_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 15, 1, 4),
    _MscLpSonetPathSignalLabelMismatch_Type()
)
mscLpSonetPathSignalLabelMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathSignalLabelMismatch.setStatus("mandatory")


class _MscLpSonetPathTxAis_Type(Integer32):
    """Custom type mscLpSonetPathTxAis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSonetPathTxAis_Type.__name__ = "Integer32"
_MscLpSonetPathTxAis_Object = MibTableColumn
mscLpSonetPathTxAis = _MscLpSonetPathTxAis_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 15, 1, 5),
    _MscLpSonetPathTxAis_Type()
)
mscLpSonetPathTxAis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathTxAis.setStatus("mandatory")


class _MscLpSonetPathTxRdi_Type(Integer32):
    """Custom type mscLpSonetPathTxRdi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSonetPathTxRdi_Type.__name__ = "Integer32"
_MscLpSonetPathTxRdi_Object = MibTableColumn
mscLpSonetPathTxRdi = _MscLpSonetPathTxRdi_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 15, 1, 6),
    _MscLpSonetPathTxRdi_Type()
)
mscLpSonetPathTxRdi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathTxRdi.setStatus("mandatory")
_MscLpSonetPathStatsTable_Object = MibTable
mscLpSonetPathStatsTable = _MscLpSonetPathStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16)
)
if mibBuilder.loadTexts:
    mscLpSonetPathStatsTable.setStatus("mandatory")
_MscLpSonetPathStatsEntry_Object = MibTableRow
mscLpSonetPathStatsEntry = _MscLpSonetPathStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1)
)
mscLpSonetPathStatsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetPathIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetPathStatsEntry.setStatus("mandatory")
_MscLpSonetPathPathErrorFreeSec_Type = Counter32
_MscLpSonetPathPathErrorFreeSec_Object = MibTableColumn
mscLpSonetPathPathErrorFreeSec = _MscLpSonetPathPathErrorFreeSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 1),
    _MscLpSonetPathPathErrorFreeSec_Type()
)
mscLpSonetPathPathErrorFreeSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathPathErrorFreeSec.setStatus("mandatory")
_MscLpSonetPathPathCodeViolations_Type = Counter32
_MscLpSonetPathPathCodeViolations_Object = MibTableColumn
mscLpSonetPathPathCodeViolations = _MscLpSonetPathPathCodeViolations_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 2),
    _MscLpSonetPathPathCodeViolations_Type()
)
mscLpSonetPathPathCodeViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathPathCodeViolations.setStatus("mandatory")
_MscLpSonetPathPathErroredSec_Type = Counter32
_MscLpSonetPathPathErroredSec_Object = MibTableColumn
mscLpSonetPathPathErroredSec = _MscLpSonetPathPathErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 3),
    _MscLpSonetPathPathErroredSec_Type()
)
mscLpSonetPathPathErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathPathErroredSec.setStatus("mandatory")
_MscLpSonetPathPathSevErroredSec_Type = Counter32
_MscLpSonetPathPathSevErroredSec_Object = MibTableColumn
mscLpSonetPathPathSevErroredSec = _MscLpSonetPathPathSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 4),
    _MscLpSonetPathPathSevErroredSec_Type()
)
mscLpSonetPathPathSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathPathSevErroredSec.setStatus("mandatory")
_MscLpSonetPathPathAisLopSec_Type = Counter32
_MscLpSonetPathPathAisLopSec_Object = MibTableColumn
mscLpSonetPathPathAisLopSec = _MscLpSonetPathPathAisLopSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 5),
    _MscLpSonetPathPathAisLopSec_Type()
)
mscLpSonetPathPathAisLopSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathPathAisLopSec.setStatus("mandatory")
_MscLpSonetPathPathUnavailSec_Type = Counter32
_MscLpSonetPathPathUnavailSec_Object = MibTableColumn
mscLpSonetPathPathUnavailSec = _MscLpSonetPathPathUnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 6),
    _MscLpSonetPathPathUnavailSec_Type()
)
mscLpSonetPathPathUnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathPathUnavailSec.setStatus("mandatory")
_MscLpSonetPathPathFailures_Type = Counter32
_MscLpSonetPathPathFailures_Object = MibTableColumn
mscLpSonetPathPathFailures = _MscLpSonetPathPathFailures_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 7),
    _MscLpSonetPathPathFailures_Type()
)
mscLpSonetPathPathFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathPathFailures.setStatus("mandatory")
_MscLpSonetPathFarEndPathErrorFreeSec_Type = Counter32
_MscLpSonetPathFarEndPathErrorFreeSec_Object = MibTableColumn
mscLpSonetPathFarEndPathErrorFreeSec = _MscLpSonetPathFarEndPathErrorFreeSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 8),
    _MscLpSonetPathFarEndPathErrorFreeSec_Type()
)
mscLpSonetPathFarEndPathErrorFreeSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathFarEndPathErrorFreeSec.setStatus("mandatory")
_MscLpSonetPathFarEndPathCodeViolations_Type = Counter32
_MscLpSonetPathFarEndPathCodeViolations_Object = MibTableColumn
mscLpSonetPathFarEndPathCodeViolations = _MscLpSonetPathFarEndPathCodeViolations_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 9),
    _MscLpSonetPathFarEndPathCodeViolations_Type()
)
mscLpSonetPathFarEndPathCodeViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathFarEndPathCodeViolations.setStatus("mandatory")
_MscLpSonetPathFarEndPathErroredSec_Type = Counter32
_MscLpSonetPathFarEndPathErroredSec_Object = MibTableColumn
mscLpSonetPathFarEndPathErroredSec = _MscLpSonetPathFarEndPathErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 10),
    _MscLpSonetPathFarEndPathErroredSec_Type()
)
mscLpSonetPathFarEndPathErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathFarEndPathErroredSec.setStatus("mandatory")
_MscLpSonetPathFarEndPathSevErroredSec_Type = Counter32
_MscLpSonetPathFarEndPathSevErroredSec_Object = MibTableColumn
mscLpSonetPathFarEndPathSevErroredSec = _MscLpSonetPathFarEndPathSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 11),
    _MscLpSonetPathFarEndPathSevErroredSec_Type()
)
mscLpSonetPathFarEndPathSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathFarEndPathSevErroredSec.setStatus("mandatory")
_MscLpSonetPathFarEndPathAisLopSec_Type = Counter32
_MscLpSonetPathFarEndPathAisLopSec_Object = MibTableColumn
mscLpSonetPathFarEndPathAisLopSec = _MscLpSonetPathFarEndPathAisLopSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 12),
    _MscLpSonetPathFarEndPathAisLopSec_Type()
)
mscLpSonetPathFarEndPathAisLopSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathFarEndPathAisLopSec.setStatus("mandatory")
_MscLpSonetPathFarEndPathUnavailSec_Type = Counter32
_MscLpSonetPathFarEndPathUnavailSec_Object = MibTableColumn
mscLpSonetPathFarEndPathUnavailSec = _MscLpSonetPathFarEndPathUnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 13),
    _MscLpSonetPathFarEndPathUnavailSec_Type()
)
mscLpSonetPathFarEndPathUnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathFarEndPathUnavailSec.setStatus("mandatory")
_MscLpSonetPathFarEndPathFailures_Type = Counter32
_MscLpSonetPathFarEndPathFailures_Object = MibTableColumn
mscLpSonetPathFarEndPathFailures = _MscLpSonetPathFarEndPathFailures_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 2, 16, 1, 14),
    _MscLpSonetPathFarEndPathFailures_Type()
)
mscLpSonetPathFarEndPathFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetPathFarEndPathFailures.setStatus("mandatory")
_MscLpSonetTest_ObjectIdentity = ObjectIdentity
mscLpSonetTest = _MscLpSonetTest_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3)
)
_MscLpSonetTestRowStatusTable_Object = MibTable
mscLpSonetTestRowStatusTable = _MscLpSonetTestRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 1)
)
if mibBuilder.loadTexts:
    mscLpSonetTestRowStatusTable.setStatus("mandatory")
_MscLpSonetTestRowStatusEntry_Object = MibTableRow
mscLpSonetTestRowStatusEntry = _MscLpSonetTestRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 1, 1)
)
mscLpSonetTestRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetTestRowStatusEntry.setStatus("mandatory")
_MscLpSonetTestRowStatus_Type = RowStatus
_MscLpSonetTestRowStatus_Object = MibTableColumn
mscLpSonetTestRowStatus = _MscLpSonetTestRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 1, 1, 1),
    _MscLpSonetTestRowStatus_Type()
)
mscLpSonetTestRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetTestRowStatus.setStatus("mandatory")
_MscLpSonetTestComponentName_Type = DisplayString
_MscLpSonetTestComponentName_Object = MibTableColumn
mscLpSonetTestComponentName = _MscLpSonetTestComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 1, 1, 2),
    _MscLpSonetTestComponentName_Type()
)
mscLpSonetTestComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetTestComponentName.setStatus("mandatory")
_MscLpSonetTestStorageType_Type = StorageType
_MscLpSonetTestStorageType_Object = MibTableColumn
mscLpSonetTestStorageType = _MscLpSonetTestStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 1, 1, 4),
    _MscLpSonetTestStorageType_Type()
)
mscLpSonetTestStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetTestStorageType.setStatus("mandatory")
_MscLpSonetTestIndex_Type = NonReplicated
_MscLpSonetTestIndex_Object = MibTableColumn
mscLpSonetTestIndex = _MscLpSonetTestIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 1, 1, 10),
    _MscLpSonetTestIndex_Type()
)
mscLpSonetTestIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpSonetTestIndex.setStatus("mandatory")
_MscLpSonetTestStateTable_Object = MibTable
mscLpSonetTestStateTable = _MscLpSonetTestStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 10)
)
if mibBuilder.loadTexts:
    mscLpSonetTestStateTable.setStatus("mandatory")
_MscLpSonetTestStateEntry_Object = MibTableRow
mscLpSonetTestStateEntry = _MscLpSonetTestStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 10, 1)
)
mscLpSonetTestStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetTestStateEntry.setStatus("mandatory")


class _MscLpSonetTestAdminState_Type(Integer32):
    """Custom type mscLpSonetTestAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpSonetTestAdminState_Type.__name__ = "Integer32"
_MscLpSonetTestAdminState_Object = MibTableColumn
mscLpSonetTestAdminState = _MscLpSonetTestAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 10, 1, 1),
    _MscLpSonetTestAdminState_Type()
)
mscLpSonetTestAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetTestAdminState.setStatus("mandatory")


class _MscLpSonetTestOperationalState_Type(Integer32):
    """Custom type mscLpSonetTestOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpSonetTestOperationalState_Type.__name__ = "Integer32"
_MscLpSonetTestOperationalState_Object = MibTableColumn
mscLpSonetTestOperationalState = _MscLpSonetTestOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 10, 1, 2),
    _MscLpSonetTestOperationalState_Type()
)
mscLpSonetTestOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetTestOperationalState.setStatus("mandatory")


class _MscLpSonetTestUsageState_Type(Integer32):
    """Custom type mscLpSonetTestUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpSonetTestUsageState_Type.__name__ = "Integer32"
_MscLpSonetTestUsageState_Object = MibTableColumn
mscLpSonetTestUsageState = _MscLpSonetTestUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 10, 1, 3),
    _MscLpSonetTestUsageState_Type()
)
mscLpSonetTestUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetTestUsageState.setStatus("mandatory")
_MscLpSonetTestSetupTable_Object = MibTable
mscLpSonetTestSetupTable = _MscLpSonetTestSetupTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 11)
)
if mibBuilder.loadTexts:
    mscLpSonetTestSetupTable.setStatus("mandatory")
_MscLpSonetTestSetupEntry_Object = MibTableRow
mscLpSonetTestSetupEntry = _MscLpSonetTestSetupEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 11, 1)
)
mscLpSonetTestSetupEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetTestSetupEntry.setStatus("mandatory")


class _MscLpSonetTestPurpose_Type(AsciiString):
    """Custom type mscLpSonetTestPurpose based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_MscLpSonetTestPurpose_Type.__name__ = "AsciiString"
_MscLpSonetTestPurpose_Object = MibTableColumn
mscLpSonetTestPurpose = _MscLpSonetTestPurpose_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 11, 1, 1),
    _MscLpSonetTestPurpose_Type()
)
mscLpSonetTestPurpose.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSonetTestPurpose.setStatus("mandatory")


class _MscLpSonetTestType_Type(Integer32):
    """Custom type mscLpSonetTestType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("card", 0),
          ("externalLoop", 4),
          ("localLoop", 2),
          ("manual", 1),
          ("payloadLoop", 5),
          ("pn127RemoteLoop", 8),
          ("remoteLoop", 3),
          ("remoteLoopThisTrib", 6),
          ("v54RemoteLoop", 7))
    )


_MscLpSonetTestType_Type.__name__ = "Integer32"
_MscLpSonetTestType_Object = MibTableColumn
mscLpSonetTestType = _MscLpSonetTestType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 11, 1, 2),
    _MscLpSonetTestType_Type()
)
mscLpSonetTestType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSonetTestType.setStatus("mandatory")


class _MscLpSonetTestFrmSize_Type(Unsigned32):
    """Custom type mscLpSonetTestFrmSize based on Unsigned32"""
    defaultValue = 1024

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 4096),
    )


_MscLpSonetTestFrmSize_Type.__name__ = "Unsigned32"
_MscLpSonetTestFrmSize_Object = MibTableColumn
mscLpSonetTestFrmSize = _MscLpSonetTestFrmSize_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 11, 1, 3),
    _MscLpSonetTestFrmSize_Type()
)
mscLpSonetTestFrmSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSonetTestFrmSize.setStatus("mandatory")


class _MscLpSonetTestFrmPatternType_Type(Integer32):
    """Custom type mscLpSonetTestFrmPatternType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ccitt32kBitPattern", 0),
          ("ccitt8MBitPattern", 1),
          ("customizedPattern", 2))
    )


_MscLpSonetTestFrmPatternType_Type.__name__ = "Integer32"
_MscLpSonetTestFrmPatternType_Object = MibTableColumn
mscLpSonetTestFrmPatternType = _MscLpSonetTestFrmPatternType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 11, 1, 4),
    _MscLpSonetTestFrmPatternType_Type()
)
mscLpSonetTestFrmPatternType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSonetTestFrmPatternType.setStatus("mandatory")


class _MscLpSonetTestCustomizedPattern_Type(Hex):
    """Custom type mscLpSonetTestCustomizedPattern based on Hex"""
    defaultValue = 1431655765

    subtypeSpec = Hex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpSonetTestCustomizedPattern_Type.__name__ = "Hex"
_MscLpSonetTestCustomizedPattern_Object = MibTableColumn
mscLpSonetTestCustomizedPattern = _MscLpSonetTestCustomizedPattern_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 11, 1, 5),
    _MscLpSonetTestCustomizedPattern_Type()
)
mscLpSonetTestCustomizedPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSonetTestCustomizedPattern.setStatus("mandatory")


class _MscLpSonetTestDataStartDelay_Type(Unsigned32):
    """Custom type mscLpSonetTestDataStartDelay based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1814400),
    )


_MscLpSonetTestDataStartDelay_Type.__name__ = "Unsigned32"
_MscLpSonetTestDataStartDelay_Object = MibTableColumn
mscLpSonetTestDataStartDelay = _MscLpSonetTestDataStartDelay_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 11, 1, 6),
    _MscLpSonetTestDataStartDelay_Type()
)
mscLpSonetTestDataStartDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSonetTestDataStartDelay.setStatus("mandatory")


class _MscLpSonetTestDisplayInterval_Type(Unsigned32):
    """Custom type mscLpSonetTestDisplayInterval based on Unsigned32"""
    defaultValue = 5

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30240),
    )


_MscLpSonetTestDisplayInterval_Type.__name__ = "Unsigned32"
_MscLpSonetTestDisplayInterval_Object = MibTableColumn
mscLpSonetTestDisplayInterval = _MscLpSonetTestDisplayInterval_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 11, 1, 7),
    _MscLpSonetTestDisplayInterval_Type()
)
mscLpSonetTestDisplayInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSonetTestDisplayInterval.setStatus("mandatory")


class _MscLpSonetTestDuration_Type(Unsigned32):
    """Custom type mscLpSonetTestDuration based on Unsigned32"""
    defaultValue = 1

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30240),
    )


_MscLpSonetTestDuration_Type.__name__ = "Unsigned32"
_MscLpSonetTestDuration_Object = MibTableColumn
mscLpSonetTestDuration = _MscLpSonetTestDuration_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 11, 1, 8),
    _MscLpSonetTestDuration_Type()
)
mscLpSonetTestDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSonetTestDuration.setStatus("mandatory")
_MscLpSonetTestResultsTable_Object = MibTable
mscLpSonetTestResultsTable = _MscLpSonetTestResultsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12)
)
if mibBuilder.loadTexts:
    mscLpSonetTestResultsTable.setStatus("mandatory")
_MscLpSonetTestResultsEntry_Object = MibTableRow
mscLpSonetTestResultsEntry = _MscLpSonetTestResultsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1)
)
mscLpSonetTestResultsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetTestResultsEntry.setStatus("mandatory")
_MscLpSonetTestElapsedTime_Type = Counter32
_MscLpSonetTestElapsedTime_Object = MibTableColumn
mscLpSonetTestElapsedTime = _MscLpSonetTestElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1, 1),
    _MscLpSonetTestElapsedTime_Type()
)
mscLpSonetTestElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetTestElapsedTime.setStatus("mandatory")


class _MscLpSonetTestTimeRemaining_Type(Unsigned32):
    """Custom type mscLpSonetTestTimeRemaining based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpSonetTestTimeRemaining_Type.__name__ = "Unsigned32"
_MscLpSonetTestTimeRemaining_Object = MibTableColumn
mscLpSonetTestTimeRemaining = _MscLpSonetTestTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1, 2),
    _MscLpSonetTestTimeRemaining_Type()
)
mscLpSonetTestTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetTestTimeRemaining.setStatus("mandatory")


class _MscLpSonetTestCauseOfTermination_Type(Integer32):
    """Custom type mscLpSonetTestCauseOfTermination based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("hardwareReconfigured", 5),
          ("loopCodeSyncFailed", 6),
          ("neverStarted", 3),
          ("patternSyncFailed", 7),
          ("patternSyncLost", 8),
          ("stoppedByOperator", 1),
          ("testRunning", 4),
          ("testTimeExpired", 0),
          ("unknown", 2))
    )


_MscLpSonetTestCauseOfTermination_Type.__name__ = "Integer32"
_MscLpSonetTestCauseOfTermination_Object = MibTableColumn
mscLpSonetTestCauseOfTermination = _MscLpSonetTestCauseOfTermination_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1, 3),
    _MscLpSonetTestCauseOfTermination_Type()
)
mscLpSonetTestCauseOfTermination.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetTestCauseOfTermination.setStatus("mandatory")
_MscLpSonetTestBitsTx_Type = PassportCounter64
_MscLpSonetTestBitsTx_Object = MibTableColumn
mscLpSonetTestBitsTx = _MscLpSonetTestBitsTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1, 4),
    _MscLpSonetTestBitsTx_Type()
)
mscLpSonetTestBitsTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetTestBitsTx.setStatus("mandatory")
_MscLpSonetTestBytesTx_Type = PassportCounter64
_MscLpSonetTestBytesTx_Object = MibTableColumn
mscLpSonetTestBytesTx = _MscLpSonetTestBytesTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1, 5),
    _MscLpSonetTestBytesTx_Type()
)
mscLpSonetTestBytesTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetTestBytesTx.setStatus("mandatory")
_MscLpSonetTestFrmTx_Type = PassportCounter64
_MscLpSonetTestFrmTx_Object = MibTableColumn
mscLpSonetTestFrmTx = _MscLpSonetTestFrmTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1, 6),
    _MscLpSonetTestFrmTx_Type()
)
mscLpSonetTestFrmTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetTestFrmTx.setStatus("mandatory")
_MscLpSonetTestBitsRx_Type = PassportCounter64
_MscLpSonetTestBitsRx_Object = MibTableColumn
mscLpSonetTestBitsRx = _MscLpSonetTestBitsRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1, 7),
    _MscLpSonetTestBitsRx_Type()
)
mscLpSonetTestBitsRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetTestBitsRx.setStatus("mandatory")
_MscLpSonetTestBytesRx_Type = PassportCounter64
_MscLpSonetTestBytesRx_Object = MibTableColumn
mscLpSonetTestBytesRx = _MscLpSonetTestBytesRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1, 8),
    _MscLpSonetTestBytesRx_Type()
)
mscLpSonetTestBytesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetTestBytesRx.setStatus("mandatory")
_MscLpSonetTestFrmRx_Type = PassportCounter64
_MscLpSonetTestFrmRx_Object = MibTableColumn
mscLpSonetTestFrmRx = _MscLpSonetTestFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1, 9),
    _MscLpSonetTestFrmRx_Type()
)
mscLpSonetTestFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetTestFrmRx.setStatus("mandatory")
_MscLpSonetTestErroredFrmRx_Type = PassportCounter64
_MscLpSonetTestErroredFrmRx_Object = MibTableColumn
mscLpSonetTestErroredFrmRx = _MscLpSonetTestErroredFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1, 10),
    _MscLpSonetTestErroredFrmRx_Type()
)
mscLpSonetTestErroredFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetTestErroredFrmRx.setStatus("mandatory")


class _MscLpSonetTestBitErrorRate_Type(AsciiString):
    """Custom type mscLpSonetTestBitErrorRate based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )


_MscLpSonetTestBitErrorRate_Type.__name__ = "AsciiString"
_MscLpSonetTestBitErrorRate_Object = MibTableColumn
mscLpSonetTestBitErrorRate = _MscLpSonetTestBitErrorRate_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 3, 12, 1, 11),
    _MscLpSonetTestBitErrorRate_Type()
)
mscLpSonetTestBitErrorRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetTestBitErrorRate.setStatus("mandatory")
_MscLpSonetProvTable_Object = MibTable
mscLpSonetProvTable = _MscLpSonetProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 10)
)
if mibBuilder.loadTexts:
    mscLpSonetProvTable.setStatus("mandatory")
_MscLpSonetProvEntry_Object = MibTableRow
mscLpSonetProvEntry = _MscLpSonetProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 10, 1)
)
mscLpSonetProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetProvEntry.setStatus("mandatory")


class _MscLpSonetClockingSource_Type(Integer32):
    """Custom type mscLpSonetClockingSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("line", 1),
          ("local", 0),
          ("module", 2))
    )


_MscLpSonetClockingSource_Type.__name__ = "Integer32"
_MscLpSonetClockingSource_Object = MibTableColumn
mscLpSonetClockingSource = _MscLpSonetClockingSource_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 10, 1, 1),
    _MscLpSonetClockingSource_Type()
)
mscLpSonetClockingSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSonetClockingSource.setStatus("mandatory")
_MscLpSonetCidDataTable_Object = MibTable
mscLpSonetCidDataTable = _MscLpSonetCidDataTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 11)
)
if mibBuilder.loadTexts:
    mscLpSonetCidDataTable.setStatus("mandatory")
_MscLpSonetCidDataEntry_Object = MibTableRow
mscLpSonetCidDataEntry = _MscLpSonetCidDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 11, 1)
)
mscLpSonetCidDataEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetCidDataEntry.setStatus("mandatory")


class _MscLpSonetCustomerIdentifier_Type(Unsigned32):
    """Custom type mscLpSonetCustomerIdentifier based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 8191),
    )


_MscLpSonetCustomerIdentifier_Type.__name__ = "Unsigned32"
_MscLpSonetCustomerIdentifier_Object = MibTableColumn
mscLpSonetCustomerIdentifier = _MscLpSonetCustomerIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 11, 1, 1),
    _MscLpSonetCustomerIdentifier_Type()
)
mscLpSonetCustomerIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSonetCustomerIdentifier.setStatus("mandatory")
_MscLpSonetAdminInfoTable_Object = MibTable
mscLpSonetAdminInfoTable = _MscLpSonetAdminInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 12)
)
if mibBuilder.loadTexts:
    mscLpSonetAdminInfoTable.setStatus("mandatory")
_MscLpSonetAdminInfoEntry_Object = MibTableRow
mscLpSonetAdminInfoEntry = _MscLpSonetAdminInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 12, 1)
)
mscLpSonetAdminInfoEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetAdminInfoEntry.setStatus("mandatory")


class _MscLpSonetVendor_Type(AsciiString):
    """Custom type mscLpSonetVendor based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_MscLpSonetVendor_Type.__name__ = "AsciiString"
_MscLpSonetVendor_Object = MibTableColumn
mscLpSonetVendor = _MscLpSonetVendor_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 12, 1, 1),
    _MscLpSonetVendor_Type()
)
mscLpSonetVendor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSonetVendor.setStatus("mandatory")


class _MscLpSonetCommentText_Type(AsciiString):
    """Custom type mscLpSonetCommentText based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 60),
    )


_MscLpSonetCommentText_Type.__name__ = "AsciiString"
_MscLpSonetCommentText_Object = MibTableColumn
mscLpSonetCommentText = _MscLpSonetCommentText_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 12, 1, 2),
    _MscLpSonetCommentText_Type()
)
mscLpSonetCommentText.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSonetCommentText.setStatus("mandatory")
_MscLpSonetIfEntryTable_Object = MibTable
mscLpSonetIfEntryTable = _MscLpSonetIfEntryTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 13)
)
if mibBuilder.loadTexts:
    mscLpSonetIfEntryTable.setStatus("mandatory")
_MscLpSonetIfEntryEntry_Object = MibTableRow
mscLpSonetIfEntryEntry = _MscLpSonetIfEntryEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 13, 1)
)
mscLpSonetIfEntryEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetIfEntryEntry.setStatus("mandatory")


class _MscLpSonetIfAdminStatus_Type(Integer32):
    """Custom type mscLpSonetIfAdminStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpSonetIfAdminStatus_Type.__name__ = "Integer32"
_MscLpSonetIfAdminStatus_Object = MibTableColumn
mscLpSonetIfAdminStatus = _MscLpSonetIfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 13, 1, 1),
    _MscLpSonetIfAdminStatus_Type()
)
mscLpSonetIfAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSonetIfAdminStatus.setStatus("mandatory")


class _MscLpSonetIfIndex_Type(InterfaceIndex):
    """Custom type mscLpSonetIfIndex based on InterfaceIndex"""
    subtypeSpec = InterfaceIndex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_MscLpSonetIfIndex_Type.__name__ = "InterfaceIndex"
_MscLpSonetIfIndex_Object = MibTableColumn
mscLpSonetIfIndex = _MscLpSonetIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 13, 1, 2),
    _MscLpSonetIfIndex_Type()
)
mscLpSonetIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetIfIndex.setStatus("mandatory")
_MscLpSonetOperStatusTable_Object = MibTable
mscLpSonetOperStatusTable = _MscLpSonetOperStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 14)
)
if mibBuilder.loadTexts:
    mscLpSonetOperStatusTable.setStatus("mandatory")
_MscLpSonetOperStatusEntry_Object = MibTableRow
mscLpSonetOperStatusEntry = _MscLpSonetOperStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 14, 1)
)
mscLpSonetOperStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetOperStatusEntry.setStatus("mandatory")


class _MscLpSonetSnmpOperStatus_Type(Integer32):
    """Custom type mscLpSonetSnmpOperStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpSonetSnmpOperStatus_Type.__name__ = "Integer32"
_MscLpSonetSnmpOperStatus_Object = MibTableColumn
mscLpSonetSnmpOperStatus = _MscLpSonetSnmpOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 14, 1, 1),
    _MscLpSonetSnmpOperStatus_Type()
)
mscLpSonetSnmpOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetSnmpOperStatus.setStatus("mandatory")
_MscLpSonetStateTable_Object = MibTable
mscLpSonetStateTable = _MscLpSonetStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 15)
)
if mibBuilder.loadTexts:
    mscLpSonetStateTable.setStatus("mandatory")
_MscLpSonetStateEntry_Object = MibTableRow
mscLpSonetStateEntry = _MscLpSonetStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 15, 1)
)
mscLpSonetStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetStateEntry.setStatus("mandatory")


class _MscLpSonetAdminState_Type(Integer32):
    """Custom type mscLpSonetAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpSonetAdminState_Type.__name__ = "Integer32"
_MscLpSonetAdminState_Object = MibTableColumn
mscLpSonetAdminState = _MscLpSonetAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 15, 1, 1),
    _MscLpSonetAdminState_Type()
)
mscLpSonetAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetAdminState.setStatus("mandatory")


class _MscLpSonetOperationalState_Type(Integer32):
    """Custom type mscLpSonetOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpSonetOperationalState_Type.__name__ = "Integer32"
_MscLpSonetOperationalState_Object = MibTableColumn
mscLpSonetOperationalState = _MscLpSonetOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 15, 1, 2),
    _MscLpSonetOperationalState_Type()
)
mscLpSonetOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetOperationalState.setStatus("mandatory")


class _MscLpSonetUsageState_Type(Integer32):
    """Custom type mscLpSonetUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpSonetUsageState_Type.__name__ = "Integer32"
_MscLpSonetUsageState_Object = MibTableColumn
mscLpSonetUsageState = _MscLpSonetUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 15, 1, 3),
    _MscLpSonetUsageState_Type()
)
mscLpSonetUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetUsageState.setStatus("mandatory")


class _MscLpSonetAvailabilityStatus_Type(OctetString):
    """Custom type mscLpSonetAvailabilityStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_MscLpSonetAvailabilityStatus_Type.__name__ = "OctetString"
_MscLpSonetAvailabilityStatus_Object = MibTableColumn
mscLpSonetAvailabilityStatus = _MscLpSonetAvailabilityStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 15, 1, 4),
    _MscLpSonetAvailabilityStatus_Type()
)
mscLpSonetAvailabilityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetAvailabilityStatus.setStatus("mandatory")


class _MscLpSonetProceduralStatus_Type(OctetString):
    """Custom type mscLpSonetProceduralStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpSonetProceduralStatus_Type.__name__ = "OctetString"
_MscLpSonetProceduralStatus_Object = MibTableColumn
mscLpSonetProceduralStatus = _MscLpSonetProceduralStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 15, 1, 5),
    _MscLpSonetProceduralStatus_Type()
)
mscLpSonetProceduralStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetProceduralStatus.setStatus("mandatory")


class _MscLpSonetControlStatus_Type(OctetString):
    """Custom type mscLpSonetControlStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpSonetControlStatus_Type.__name__ = "OctetString"
_MscLpSonetControlStatus_Object = MibTableColumn
mscLpSonetControlStatus = _MscLpSonetControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 15, 1, 6),
    _MscLpSonetControlStatus_Type()
)
mscLpSonetControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetControlStatus.setStatus("mandatory")


class _MscLpSonetAlarmStatus_Type(OctetString):
    """Custom type mscLpSonetAlarmStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpSonetAlarmStatus_Type.__name__ = "OctetString"
_MscLpSonetAlarmStatus_Object = MibTableColumn
mscLpSonetAlarmStatus = _MscLpSonetAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 15, 1, 7),
    _MscLpSonetAlarmStatus_Type()
)
mscLpSonetAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetAlarmStatus.setStatus("mandatory")


class _MscLpSonetStandbyStatus_Type(Integer32):
    """Custom type mscLpSonetStandbyStatus based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              15)
        )
    )
    namedValues = NamedValues(
        *(("coldStandby", 1),
          ("hotStandby", 0),
          ("notSet", 15),
          ("providingService", 2))
    )


_MscLpSonetStandbyStatus_Type.__name__ = "Integer32"
_MscLpSonetStandbyStatus_Object = MibTableColumn
mscLpSonetStandbyStatus = _MscLpSonetStandbyStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 15, 1, 8),
    _MscLpSonetStandbyStatus_Type()
)
mscLpSonetStandbyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetStandbyStatus.setStatus("mandatory")


class _MscLpSonetUnknownStatus_Type(Integer32):
    """Custom type mscLpSonetUnknownStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_MscLpSonetUnknownStatus_Type.__name__ = "Integer32"
_MscLpSonetUnknownStatus_Object = MibTableColumn
mscLpSonetUnknownStatus = _MscLpSonetUnknownStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 15, 1, 9),
    _MscLpSonetUnknownStatus_Type()
)
mscLpSonetUnknownStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetUnknownStatus.setStatus("mandatory")
_MscLpSonetOperTable_Object = MibTable
mscLpSonetOperTable = _MscLpSonetOperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 16)
)
if mibBuilder.loadTexts:
    mscLpSonetOperTable.setStatus("mandatory")
_MscLpSonetOperEntry_Object = MibTableRow
mscLpSonetOperEntry = _MscLpSonetOperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 16, 1)
)
mscLpSonetOperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetOperEntry.setStatus("mandatory")


class _MscLpSonetLosAlarm_Type(Integer32):
    """Custom type mscLpSonetLosAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSonetLosAlarm_Type.__name__ = "Integer32"
_MscLpSonetLosAlarm_Object = MibTableColumn
mscLpSonetLosAlarm = _MscLpSonetLosAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 16, 1, 1),
    _MscLpSonetLosAlarm_Type()
)
mscLpSonetLosAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetLosAlarm.setStatus("mandatory")


class _MscLpSonetLofAlarm_Type(Integer32):
    """Custom type mscLpSonetLofAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSonetLofAlarm_Type.__name__ = "Integer32"
_MscLpSonetLofAlarm_Object = MibTableColumn
mscLpSonetLofAlarm = _MscLpSonetLofAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 16, 1, 2),
    _MscLpSonetLofAlarm_Type()
)
mscLpSonetLofAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetLofAlarm.setStatus("mandatory")


class _MscLpSonetRxAisAlarm_Type(Integer32):
    """Custom type mscLpSonetRxAisAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSonetRxAisAlarm_Type.__name__ = "Integer32"
_MscLpSonetRxAisAlarm_Object = MibTableColumn
mscLpSonetRxAisAlarm = _MscLpSonetRxAisAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 16, 1, 3),
    _MscLpSonetRxAisAlarm_Type()
)
mscLpSonetRxAisAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetRxAisAlarm.setStatus("mandatory")


class _MscLpSonetRxRfiAlarm_Type(Integer32):
    """Custom type mscLpSonetRxRfiAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSonetRxRfiAlarm_Type.__name__ = "Integer32"
_MscLpSonetRxRfiAlarm_Object = MibTableColumn
mscLpSonetRxRfiAlarm = _MscLpSonetRxRfiAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 16, 1, 4),
    _MscLpSonetRxRfiAlarm_Type()
)
mscLpSonetRxRfiAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetRxRfiAlarm.setStatus("mandatory")


class _MscLpSonetTxAis_Type(Integer32):
    """Custom type mscLpSonetTxAis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSonetTxAis_Type.__name__ = "Integer32"
_MscLpSonetTxAis_Object = MibTableColumn
mscLpSonetTxAis = _MscLpSonetTxAis_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 16, 1, 5),
    _MscLpSonetTxAis_Type()
)
mscLpSonetTxAis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetTxAis.setStatus("mandatory")


class _MscLpSonetTxRdi_Type(Integer32):
    """Custom type mscLpSonetTxRdi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSonetTxRdi_Type.__name__ = "Integer32"
_MscLpSonetTxRdi_Object = MibTableColumn
mscLpSonetTxRdi = _MscLpSonetTxRdi_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 16, 1, 6),
    _MscLpSonetTxRdi_Type()
)
mscLpSonetTxRdi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetTxRdi.setStatus("mandatory")


class _MscLpSonetUnusableTxClockRefAlarm_Type(Integer32):
    """Custom type mscLpSonetUnusableTxClockRefAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSonetUnusableTxClockRefAlarm_Type.__name__ = "Integer32"
_MscLpSonetUnusableTxClockRefAlarm_Object = MibTableColumn
mscLpSonetUnusableTxClockRefAlarm = _MscLpSonetUnusableTxClockRefAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 16, 1, 7),
    _MscLpSonetUnusableTxClockRefAlarm_Type()
)
mscLpSonetUnusableTxClockRefAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetUnusableTxClockRefAlarm.setStatus("mandatory")
_MscLpSonetStatsTable_Object = MibTable
mscLpSonetStatsTable = _MscLpSonetStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17)
)
if mibBuilder.loadTexts:
    mscLpSonetStatsTable.setStatus("mandatory")
_MscLpSonetStatsEntry_Object = MibTableRow
mscLpSonetStatsEntry = _MscLpSonetStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1)
)
mscLpSonetStatsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSonetIndex"),
)
if mibBuilder.loadTexts:
    mscLpSonetStatsEntry.setStatus("mandatory")
_MscLpSonetRunningTime_Type = Counter32
_MscLpSonetRunningTime_Object = MibTableColumn
mscLpSonetRunningTime = _MscLpSonetRunningTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 1),
    _MscLpSonetRunningTime_Type()
)
mscLpSonetRunningTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetRunningTime.setStatus("mandatory")
_MscLpSonetErrorFreeSec_Type = Counter32
_MscLpSonetErrorFreeSec_Object = MibTableColumn
mscLpSonetErrorFreeSec = _MscLpSonetErrorFreeSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 2),
    _MscLpSonetErrorFreeSec_Type()
)
mscLpSonetErrorFreeSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetErrorFreeSec.setStatus("mandatory")
_MscLpSonetSectCodeViolations_Type = Counter32
_MscLpSonetSectCodeViolations_Object = MibTableColumn
mscLpSonetSectCodeViolations = _MscLpSonetSectCodeViolations_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 3),
    _MscLpSonetSectCodeViolations_Type()
)
mscLpSonetSectCodeViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetSectCodeViolations.setStatus("mandatory")
_MscLpSonetSectErroredSec_Type = Counter32
_MscLpSonetSectErroredSec_Object = MibTableColumn
mscLpSonetSectErroredSec = _MscLpSonetSectErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 4),
    _MscLpSonetSectErroredSec_Type()
)
mscLpSonetSectErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetSectErroredSec.setStatus("mandatory")
_MscLpSonetSectSevErroredSec_Type = Counter32
_MscLpSonetSectSevErroredSec_Object = MibTableColumn
mscLpSonetSectSevErroredSec = _MscLpSonetSectSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 5),
    _MscLpSonetSectSevErroredSec_Type()
)
mscLpSonetSectSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetSectSevErroredSec.setStatus("mandatory")
_MscLpSonetSectLosSec_Type = Counter32
_MscLpSonetSectLosSec_Object = MibTableColumn
mscLpSonetSectLosSec = _MscLpSonetSectLosSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 6),
    _MscLpSonetSectLosSec_Type()
)
mscLpSonetSectLosSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetSectLosSec.setStatus("mandatory")
_MscLpSonetSectSevErroredFrmSec_Type = Counter32
_MscLpSonetSectSevErroredFrmSec_Object = MibTableColumn
mscLpSonetSectSevErroredFrmSec = _MscLpSonetSectSevErroredFrmSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 7),
    _MscLpSonetSectSevErroredFrmSec_Type()
)
mscLpSonetSectSevErroredFrmSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetSectSevErroredFrmSec.setStatus("mandatory")
_MscLpSonetSectFailures_Type = Counter32
_MscLpSonetSectFailures_Object = MibTableColumn
mscLpSonetSectFailures = _MscLpSonetSectFailures_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 8),
    _MscLpSonetSectFailures_Type()
)
mscLpSonetSectFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetSectFailures.setStatus("mandatory")
_MscLpSonetLineCodeViolations_Type = Counter32
_MscLpSonetLineCodeViolations_Object = MibTableColumn
mscLpSonetLineCodeViolations = _MscLpSonetLineCodeViolations_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 9),
    _MscLpSonetLineCodeViolations_Type()
)
mscLpSonetLineCodeViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetLineCodeViolations.setStatus("mandatory")
_MscLpSonetLineErroredSec_Type = Counter32
_MscLpSonetLineErroredSec_Object = MibTableColumn
mscLpSonetLineErroredSec = _MscLpSonetLineErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 10),
    _MscLpSonetLineErroredSec_Type()
)
mscLpSonetLineErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetLineErroredSec.setStatus("mandatory")
_MscLpSonetLineSevErroredSec_Type = Counter32
_MscLpSonetLineSevErroredSec_Object = MibTableColumn
mscLpSonetLineSevErroredSec = _MscLpSonetLineSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 11),
    _MscLpSonetLineSevErroredSec_Type()
)
mscLpSonetLineSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetLineSevErroredSec.setStatus("mandatory")
_MscLpSonetLineAisSec_Type = Counter32
_MscLpSonetLineAisSec_Object = MibTableColumn
mscLpSonetLineAisSec = _MscLpSonetLineAisSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 12),
    _MscLpSonetLineAisSec_Type()
)
mscLpSonetLineAisSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetLineAisSec.setStatus("mandatory")
_MscLpSonetLineUnavailSec_Type = Counter32
_MscLpSonetLineUnavailSec_Object = MibTableColumn
mscLpSonetLineUnavailSec = _MscLpSonetLineUnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 13),
    _MscLpSonetLineUnavailSec_Type()
)
mscLpSonetLineUnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetLineUnavailSec.setStatus("mandatory")
_MscLpSonetLineFailures_Type = Counter32
_MscLpSonetLineFailures_Object = MibTableColumn
mscLpSonetLineFailures = _MscLpSonetLineFailures_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 14),
    _MscLpSonetLineFailures_Type()
)
mscLpSonetLineFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetLineFailures.setStatus("mandatory")
_MscLpSonetFarEndLineErrorFreeSec_Type = Counter32
_MscLpSonetFarEndLineErrorFreeSec_Object = MibTableColumn
mscLpSonetFarEndLineErrorFreeSec = _MscLpSonetFarEndLineErrorFreeSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 15),
    _MscLpSonetFarEndLineErrorFreeSec_Type()
)
mscLpSonetFarEndLineErrorFreeSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetFarEndLineErrorFreeSec.setStatus("mandatory")
_MscLpSonetFarEndLineCodeViolations_Type = Counter32
_MscLpSonetFarEndLineCodeViolations_Object = MibTableColumn
mscLpSonetFarEndLineCodeViolations = _MscLpSonetFarEndLineCodeViolations_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 16),
    _MscLpSonetFarEndLineCodeViolations_Type()
)
mscLpSonetFarEndLineCodeViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetFarEndLineCodeViolations.setStatus("mandatory")
_MscLpSonetFarEndLineErroredSec_Type = Counter32
_MscLpSonetFarEndLineErroredSec_Object = MibTableColumn
mscLpSonetFarEndLineErroredSec = _MscLpSonetFarEndLineErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 17),
    _MscLpSonetFarEndLineErroredSec_Type()
)
mscLpSonetFarEndLineErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetFarEndLineErroredSec.setStatus("mandatory")
_MscLpSonetFarEndLineSevErroredSec_Type = Counter32
_MscLpSonetFarEndLineSevErroredSec_Object = MibTableColumn
mscLpSonetFarEndLineSevErroredSec = _MscLpSonetFarEndLineSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 18),
    _MscLpSonetFarEndLineSevErroredSec_Type()
)
mscLpSonetFarEndLineSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetFarEndLineSevErroredSec.setStatus("mandatory")
_MscLpSonetFarEndLineAisSec_Type = Counter32
_MscLpSonetFarEndLineAisSec_Object = MibTableColumn
mscLpSonetFarEndLineAisSec = _MscLpSonetFarEndLineAisSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 19),
    _MscLpSonetFarEndLineAisSec_Type()
)
mscLpSonetFarEndLineAisSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetFarEndLineAisSec.setStatus("mandatory")
_MscLpSonetFarEndLineUnavailSec_Type = Counter32
_MscLpSonetFarEndLineUnavailSec_Object = MibTableColumn
mscLpSonetFarEndLineUnavailSec = _MscLpSonetFarEndLineUnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 20),
    _MscLpSonetFarEndLineUnavailSec_Type()
)
mscLpSonetFarEndLineUnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetFarEndLineUnavailSec.setStatus("mandatory")
_MscLpSonetFarEndLineFailures_Type = Counter32
_MscLpSonetFarEndLineFailures_Object = MibTableColumn
mscLpSonetFarEndLineFailures = _MscLpSonetFarEndLineFailures_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 14, 17, 1, 21),
    _MscLpSonetFarEndLineFailures_Type()
)
mscLpSonetFarEndLineFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSonetFarEndLineFailures.setStatus("mandatory")
_MscLpSdh_ObjectIdentity = ObjectIdentity
mscLpSdh = _MscLpSdh_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15)
)
_MscLpSdhRowStatusTable_Object = MibTable
mscLpSdhRowStatusTable = _MscLpSdhRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 1)
)
if mibBuilder.loadTexts:
    mscLpSdhRowStatusTable.setStatus("mandatory")
_MscLpSdhRowStatusEntry_Object = MibTableRow
mscLpSdhRowStatusEntry = _MscLpSdhRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 1, 1)
)
mscLpSdhRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhRowStatusEntry.setStatus("mandatory")
_MscLpSdhRowStatus_Type = RowStatus
_MscLpSdhRowStatus_Object = MibTableColumn
mscLpSdhRowStatus = _MscLpSdhRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 1, 1, 1),
    _MscLpSdhRowStatus_Type()
)
mscLpSdhRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSdhRowStatus.setStatus("mandatory")
_MscLpSdhComponentName_Type = DisplayString
_MscLpSdhComponentName_Object = MibTableColumn
mscLpSdhComponentName = _MscLpSdhComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 1, 1, 2),
    _MscLpSdhComponentName_Type()
)
mscLpSdhComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhComponentName.setStatus("mandatory")
_MscLpSdhStorageType_Type = StorageType
_MscLpSdhStorageType_Object = MibTableColumn
mscLpSdhStorageType = _MscLpSdhStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 1, 1, 4),
    _MscLpSdhStorageType_Type()
)
mscLpSdhStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhStorageType.setStatus("mandatory")


class _MscLpSdhIndex_Type(Integer32):
    """Custom type mscLpSdhIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_MscLpSdhIndex_Type.__name__ = "Integer32"
_MscLpSdhIndex_Object = MibTableColumn
mscLpSdhIndex = _MscLpSdhIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 1, 1, 10),
    _MscLpSdhIndex_Type()
)
mscLpSdhIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpSdhIndex.setStatus("mandatory")
_MscLpSdhPath_ObjectIdentity = ObjectIdentity
mscLpSdhPath = _MscLpSdhPath_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2)
)
_MscLpSdhPathRowStatusTable_Object = MibTable
mscLpSdhPathRowStatusTable = _MscLpSdhPathRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 1)
)
if mibBuilder.loadTexts:
    mscLpSdhPathRowStatusTable.setStatus("mandatory")
_MscLpSdhPathRowStatusEntry_Object = MibTableRow
mscLpSdhPathRowStatusEntry = _MscLpSdhPathRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 1, 1)
)
mscLpSdhPathRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhPathRowStatusEntry.setStatus("mandatory")
_MscLpSdhPathRowStatus_Type = RowStatus
_MscLpSdhPathRowStatus_Object = MibTableColumn
mscLpSdhPathRowStatus = _MscLpSdhPathRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 1, 1, 1),
    _MscLpSdhPathRowStatus_Type()
)
mscLpSdhPathRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSdhPathRowStatus.setStatus("mandatory")
_MscLpSdhPathComponentName_Type = DisplayString
_MscLpSdhPathComponentName_Object = MibTableColumn
mscLpSdhPathComponentName = _MscLpSdhPathComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 1, 1, 2),
    _MscLpSdhPathComponentName_Type()
)
mscLpSdhPathComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathComponentName.setStatus("mandatory")
_MscLpSdhPathStorageType_Type = StorageType
_MscLpSdhPathStorageType_Object = MibTableColumn
mscLpSdhPathStorageType = _MscLpSdhPathStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 1, 1, 4),
    _MscLpSdhPathStorageType_Type()
)
mscLpSdhPathStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathStorageType.setStatus("mandatory")


class _MscLpSdhPathIndex_Type(Integer32):
    """Custom type mscLpSdhPathIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_MscLpSdhPathIndex_Type.__name__ = "Integer32"
_MscLpSdhPathIndex_Object = MibTableColumn
mscLpSdhPathIndex = _MscLpSdhPathIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 1, 1, 10),
    _MscLpSdhPathIndex_Type()
)
mscLpSdhPathIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpSdhPathIndex.setStatus("mandatory")
_MscLpSdhPathCell_ObjectIdentity = ObjectIdentity
mscLpSdhPathCell = _MscLpSdhPathCell_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2)
)
_MscLpSdhPathCellRowStatusTable_Object = MibTable
mscLpSdhPathCellRowStatusTable = _MscLpSdhPathCellRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 1)
)
if mibBuilder.loadTexts:
    mscLpSdhPathCellRowStatusTable.setStatus("mandatory")
_MscLpSdhPathCellRowStatusEntry_Object = MibTableRow
mscLpSdhPathCellRowStatusEntry = _MscLpSdhPathCellRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 1, 1)
)
mscLpSdhPathCellRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathCellIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhPathCellRowStatusEntry.setStatus("mandatory")
_MscLpSdhPathCellRowStatus_Type = RowStatus
_MscLpSdhPathCellRowStatus_Object = MibTableColumn
mscLpSdhPathCellRowStatus = _MscLpSdhPathCellRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 1, 1, 1),
    _MscLpSdhPathCellRowStatus_Type()
)
mscLpSdhPathCellRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathCellRowStatus.setStatus("mandatory")
_MscLpSdhPathCellComponentName_Type = DisplayString
_MscLpSdhPathCellComponentName_Object = MibTableColumn
mscLpSdhPathCellComponentName = _MscLpSdhPathCellComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 1, 1, 2),
    _MscLpSdhPathCellComponentName_Type()
)
mscLpSdhPathCellComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathCellComponentName.setStatus("mandatory")
_MscLpSdhPathCellStorageType_Type = StorageType
_MscLpSdhPathCellStorageType_Object = MibTableColumn
mscLpSdhPathCellStorageType = _MscLpSdhPathCellStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 1, 1, 4),
    _MscLpSdhPathCellStorageType_Type()
)
mscLpSdhPathCellStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathCellStorageType.setStatus("mandatory")
_MscLpSdhPathCellIndex_Type = NonReplicated
_MscLpSdhPathCellIndex_Object = MibTableColumn
mscLpSdhPathCellIndex = _MscLpSdhPathCellIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 1, 1, 10),
    _MscLpSdhPathCellIndex_Type()
)
mscLpSdhPathCellIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpSdhPathCellIndex.setStatus("mandatory")
_MscLpSdhPathCellProvTable_Object = MibTable
mscLpSdhPathCellProvTable = _MscLpSdhPathCellProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 10)
)
if mibBuilder.loadTexts:
    mscLpSdhPathCellProvTable.setStatus("mandatory")
_MscLpSdhPathCellProvEntry_Object = MibTableRow
mscLpSdhPathCellProvEntry = _MscLpSdhPathCellProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 10, 1)
)
mscLpSdhPathCellProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathCellIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhPathCellProvEntry.setStatus("mandatory")


class _MscLpSdhPathCellAlarmActDelay_Type(Unsigned32):
    """Custom type mscLpSdhPathCellAlarmActDelay based on Unsigned32"""
    defaultValue = 500

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2000),
    )


_MscLpSdhPathCellAlarmActDelay_Type.__name__ = "Unsigned32"
_MscLpSdhPathCellAlarmActDelay_Object = MibTableColumn
mscLpSdhPathCellAlarmActDelay = _MscLpSdhPathCellAlarmActDelay_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 10, 1, 1),
    _MscLpSdhPathCellAlarmActDelay_Type()
)
mscLpSdhPathCellAlarmActDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSdhPathCellAlarmActDelay.setStatus("mandatory")


class _MscLpSdhPathCellScrambleCellPayload_Type(Integer32):
    """Custom type mscLpSdhPathCellScrambleCellPayload based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpSdhPathCellScrambleCellPayload_Type.__name__ = "Integer32"
_MscLpSdhPathCellScrambleCellPayload_Object = MibTableColumn
mscLpSdhPathCellScrambleCellPayload = _MscLpSdhPathCellScrambleCellPayload_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 10, 1, 2),
    _MscLpSdhPathCellScrambleCellPayload_Type()
)
mscLpSdhPathCellScrambleCellPayload.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSdhPathCellScrambleCellPayload.setStatus("mandatory")


class _MscLpSdhPathCellCorrectSingleBitHeaderErrors_Type(Integer32):
    """Custom type mscLpSdhPathCellCorrectSingleBitHeaderErrors based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpSdhPathCellCorrectSingleBitHeaderErrors_Type.__name__ = "Integer32"
_MscLpSdhPathCellCorrectSingleBitHeaderErrors_Object = MibTableColumn
mscLpSdhPathCellCorrectSingleBitHeaderErrors = _MscLpSdhPathCellCorrectSingleBitHeaderErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 10, 1, 3),
    _MscLpSdhPathCellCorrectSingleBitHeaderErrors_Type()
)
mscLpSdhPathCellCorrectSingleBitHeaderErrors.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSdhPathCellCorrectSingleBitHeaderErrors.setStatus("mandatory")
_MscLpSdhPathCellOperTable_Object = MibTable
mscLpSdhPathCellOperTable = _MscLpSdhPathCellOperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 11)
)
if mibBuilder.loadTexts:
    mscLpSdhPathCellOperTable.setStatus("mandatory")
_MscLpSdhPathCellOperEntry_Object = MibTableRow
mscLpSdhPathCellOperEntry = _MscLpSdhPathCellOperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 11, 1)
)
mscLpSdhPathCellOperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathCellIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhPathCellOperEntry.setStatus("mandatory")


class _MscLpSdhPathCellLcdAlarm_Type(Integer32):
    """Custom type mscLpSdhPathCellLcdAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSdhPathCellLcdAlarm_Type.__name__ = "Integer32"
_MscLpSdhPathCellLcdAlarm_Object = MibTableColumn
mscLpSdhPathCellLcdAlarm = _MscLpSdhPathCellLcdAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 11, 1, 1),
    _MscLpSdhPathCellLcdAlarm_Type()
)
mscLpSdhPathCellLcdAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathCellLcdAlarm.setStatus("mandatory")
_MscLpSdhPathCellStatsTable_Object = MibTable
mscLpSdhPathCellStatsTable = _MscLpSdhPathCellStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 12)
)
if mibBuilder.loadTexts:
    mscLpSdhPathCellStatsTable.setStatus("mandatory")
_MscLpSdhPathCellStatsEntry_Object = MibTableRow
mscLpSdhPathCellStatsEntry = _MscLpSdhPathCellStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 12, 1)
)
mscLpSdhPathCellStatsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathCellIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhPathCellStatsEntry.setStatus("mandatory")
_MscLpSdhPathCellUncorrectableHecErrors_Type = Counter32
_MscLpSdhPathCellUncorrectableHecErrors_Object = MibTableColumn
mscLpSdhPathCellUncorrectableHecErrors = _MscLpSdhPathCellUncorrectableHecErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 12, 1, 1),
    _MscLpSdhPathCellUncorrectableHecErrors_Type()
)
mscLpSdhPathCellUncorrectableHecErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathCellUncorrectableHecErrors.setStatus("mandatory")
_MscLpSdhPathCellSevErroredSec_Type = Counter32
_MscLpSdhPathCellSevErroredSec_Object = MibTableColumn
mscLpSdhPathCellSevErroredSec = _MscLpSdhPathCellSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 12, 1, 2),
    _MscLpSdhPathCellSevErroredSec_Type()
)
mscLpSdhPathCellSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathCellSevErroredSec.setStatus("mandatory")


class _MscLpSdhPathCellReceiveCellUtilization_Type(Gauge32):
    """Custom type mscLpSdhPathCellReceiveCellUtilization based on Gauge32"""
    defaultValue = 0

    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_MscLpSdhPathCellReceiveCellUtilization_Type.__name__ = "Gauge32"
_MscLpSdhPathCellReceiveCellUtilization_Object = MibTableColumn
mscLpSdhPathCellReceiveCellUtilization = _MscLpSdhPathCellReceiveCellUtilization_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 12, 1, 3),
    _MscLpSdhPathCellReceiveCellUtilization_Type()
)
mscLpSdhPathCellReceiveCellUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathCellReceiveCellUtilization.setStatus("mandatory")


class _MscLpSdhPathCellTransmitCellUtilization_Type(Gauge32):
    """Custom type mscLpSdhPathCellTransmitCellUtilization based on Gauge32"""
    defaultValue = 0

    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_MscLpSdhPathCellTransmitCellUtilization_Type.__name__ = "Gauge32"
_MscLpSdhPathCellTransmitCellUtilization_Object = MibTableColumn
mscLpSdhPathCellTransmitCellUtilization = _MscLpSdhPathCellTransmitCellUtilization_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 12, 1, 4),
    _MscLpSdhPathCellTransmitCellUtilization_Type()
)
mscLpSdhPathCellTransmitCellUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathCellTransmitCellUtilization.setStatus("mandatory")
_MscLpSdhPathCellCorrectableHeaderErrors_Type = Counter32
_MscLpSdhPathCellCorrectableHeaderErrors_Object = MibTableColumn
mscLpSdhPathCellCorrectableHeaderErrors = _MscLpSdhPathCellCorrectableHeaderErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 2, 12, 1, 5),
    _MscLpSdhPathCellCorrectableHeaderErrors_Type()
)
mscLpSdhPathCellCorrectableHeaderErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathCellCorrectableHeaderErrors.setStatus("mandatory")
_MscLpSdhPathProvTable_Object = MibTable
mscLpSdhPathProvTable = _MscLpSdhPathProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 10)
)
if mibBuilder.loadTexts:
    mscLpSdhPathProvTable.setStatus("mandatory")
_MscLpSdhPathProvEntry_Object = MibTableRow
mscLpSdhPathProvEntry = _MscLpSdhPathProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 10, 1)
)
mscLpSdhPathProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhPathProvEntry.setStatus("mandatory")
_MscLpSdhPathApplicationFramerName_Type = Link
_MscLpSdhPathApplicationFramerName_Object = MibTableColumn
mscLpSdhPathApplicationFramerName = _MscLpSdhPathApplicationFramerName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 10, 1, 1),
    _MscLpSdhPathApplicationFramerName_Type()
)
mscLpSdhPathApplicationFramerName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSdhPathApplicationFramerName.setStatus("mandatory")
_MscLpSdhPathCidDataTable_Object = MibTable
mscLpSdhPathCidDataTable = _MscLpSdhPathCidDataTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 11)
)
if mibBuilder.loadTexts:
    mscLpSdhPathCidDataTable.setStatus("mandatory")
_MscLpSdhPathCidDataEntry_Object = MibTableRow
mscLpSdhPathCidDataEntry = _MscLpSdhPathCidDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 11, 1)
)
mscLpSdhPathCidDataEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhPathCidDataEntry.setStatus("mandatory")


class _MscLpSdhPathCustomerIdentifier_Type(Unsigned32):
    """Custom type mscLpSdhPathCustomerIdentifier based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 8191),
    )


_MscLpSdhPathCustomerIdentifier_Type.__name__ = "Unsigned32"
_MscLpSdhPathCustomerIdentifier_Object = MibTableColumn
mscLpSdhPathCustomerIdentifier = _MscLpSdhPathCustomerIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 11, 1, 1),
    _MscLpSdhPathCustomerIdentifier_Type()
)
mscLpSdhPathCustomerIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSdhPathCustomerIdentifier.setStatus("mandatory")
_MscLpSdhPathStateTable_Object = MibTable
mscLpSdhPathStateTable = _MscLpSdhPathStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 12)
)
if mibBuilder.loadTexts:
    mscLpSdhPathStateTable.setStatus("mandatory")
_MscLpSdhPathStateEntry_Object = MibTableRow
mscLpSdhPathStateEntry = _MscLpSdhPathStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 12, 1)
)
mscLpSdhPathStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhPathStateEntry.setStatus("mandatory")


class _MscLpSdhPathAdminState_Type(Integer32):
    """Custom type mscLpSdhPathAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpSdhPathAdminState_Type.__name__ = "Integer32"
_MscLpSdhPathAdminState_Object = MibTableColumn
mscLpSdhPathAdminState = _MscLpSdhPathAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 12, 1, 1),
    _MscLpSdhPathAdminState_Type()
)
mscLpSdhPathAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathAdminState.setStatus("mandatory")


class _MscLpSdhPathOperationalState_Type(Integer32):
    """Custom type mscLpSdhPathOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpSdhPathOperationalState_Type.__name__ = "Integer32"
_MscLpSdhPathOperationalState_Object = MibTableColumn
mscLpSdhPathOperationalState = _MscLpSdhPathOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 12, 1, 2),
    _MscLpSdhPathOperationalState_Type()
)
mscLpSdhPathOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathOperationalState.setStatus("mandatory")


class _MscLpSdhPathUsageState_Type(Integer32):
    """Custom type mscLpSdhPathUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpSdhPathUsageState_Type.__name__ = "Integer32"
_MscLpSdhPathUsageState_Object = MibTableColumn
mscLpSdhPathUsageState = _MscLpSdhPathUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 12, 1, 3),
    _MscLpSdhPathUsageState_Type()
)
mscLpSdhPathUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathUsageState.setStatus("mandatory")


class _MscLpSdhPathAvailabilityStatus_Type(OctetString):
    """Custom type mscLpSdhPathAvailabilityStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_MscLpSdhPathAvailabilityStatus_Type.__name__ = "OctetString"
_MscLpSdhPathAvailabilityStatus_Object = MibTableColumn
mscLpSdhPathAvailabilityStatus = _MscLpSdhPathAvailabilityStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 12, 1, 4),
    _MscLpSdhPathAvailabilityStatus_Type()
)
mscLpSdhPathAvailabilityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathAvailabilityStatus.setStatus("mandatory")


class _MscLpSdhPathProceduralStatus_Type(OctetString):
    """Custom type mscLpSdhPathProceduralStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpSdhPathProceduralStatus_Type.__name__ = "OctetString"
_MscLpSdhPathProceduralStatus_Object = MibTableColumn
mscLpSdhPathProceduralStatus = _MscLpSdhPathProceduralStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 12, 1, 5),
    _MscLpSdhPathProceduralStatus_Type()
)
mscLpSdhPathProceduralStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathProceduralStatus.setStatus("mandatory")


class _MscLpSdhPathControlStatus_Type(OctetString):
    """Custom type mscLpSdhPathControlStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpSdhPathControlStatus_Type.__name__ = "OctetString"
_MscLpSdhPathControlStatus_Object = MibTableColumn
mscLpSdhPathControlStatus = _MscLpSdhPathControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 12, 1, 6),
    _MscLpSdhPathControlStatus_Type()
)
mscLpSdhPathControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathControlStatus.setStatus("mandatory")


class _MscLpSdhPathAlarmStatus_Type(OctetString):
    """Custom type mscLpSdhPathAlarmStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpSdhPathAlarmStatus_Type.__name__ = "OctetString"
_MscLpSdhPathAlarmStatus_Object = MibTableColumn
mscLpSdhPathAlarmStatus = _MscLpSdhPathAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 12, 1, 7),
    _MscLpSdhPathAlarmStatus_Type()
)
mscLpSdhPathAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathAlarmStatus.setStatus("mandatory")


class _MscLpSdhPathStandbyStatus_Type(Integer32):
    """Custom type mscLpSdhPathStandbyStatus based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              15)
        )
    )
    namedValues = NamedValues(
        *(("coldStandby", 1),
          ("hotStandby", 0),
          ("notSet", 15),
          ("providingService", 2))
    )


_MscLpSdhPathStandbyStatus_Type.__name__ = "Integer32"
_MscLpSdhPathStandbyStatus_Object = MibTableColumn
mscLpSdhPathStandbyStatus = _MscLpSdhPathStandbyStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 12, 1, 8),
    _MscLpSdhPathStandbyStatus_Type()
)
mscLpSdhPathStandbyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathStandbyStatus.setStatus("mandatory")


class _MscLpSdhPathUnknownStatus_Type(Integer32):
    """Custom type mscLpSdhPathUnknownStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_MscLpSdhPathUnknownStatus_Type.__name__ = "Integer32"
_MscLpSdhPathUnknownStatus_Object = MibTableColumn
mscLpSdhPathUnknownStatus = _MscLpSdhPathUnknownStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 12, 1, 9),
    _MscLpSdhPathUnknownStatus_Type()
)
mscLpSdhPathUnknownStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathUnknownStatus.setStatus("mandatory")
_MscLpSdhPathIfEntryTable_Object = MibTable
mscLpSdhPathIfEntryTable = _MscLpSdhPathIfEntryTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 13)
)
if mibBuilder.loadTexts:
    mscLpSdhPathIfEntryTable.setStatus("mandatory")
_MscLpSdhPathIfEntryEntry_Object = MibTableRow
mscLpSdhPathIfEntryEntry = _MscLpSdhPathIfEntryEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 13, 1)
)
mscLpSdhPathIfEntryEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhPathIfEntryEntry.setStatus("mandatory")


class _MscLpSdhPathIfAdminStatus_Type(Integer32):
    """Custom type mscLpSdhPathIfAdminStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpSdhPathIfAdminStatus_Type.__name__ = "Integer32"
_MscLpSdhPathIfAdminStatus_Object = MibTableColumn
mscLpSdhPathIfAdminStatus = _MscLpSdhPathIfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 13, 1, 1),
    _MscLpSdhPathIfAdminStatus_Type()
)
mscLpSdhPathIfAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSdhPathIfAdminStatus.setStatus("mandatory")


class _MscLpSdhPathIfIndex_Type(InterfaceIndex):
    """Custom type mscLpSdhPathIfIndex based on InterfaceIndex"""
    subtypeSpec = InterfaceIndex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_MscLpSdhPathIfIndex_Type.__name__ = "InterfaceIndex"
_MscLpSdhPathIfIndex_Object = MibTableColumn
mscLpSdhPathIfIndex = _MscLpSdhPathIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 13, 1, 2),
    _MscLpSdhPathIfIndex_Type()
)
mscLpSdhPathIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathIfIndex.setStatus("mandatory")
_MscLpSdhPathOperStatusTable_Object = MibTable
mscLpSdhPathOperStatusTable = _MscLpSdhPathOperStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 14)
)
if mibBuilder.loadTexts:
    mscLpSdhPathOperStatusTable.setStatus("mandatory")
_MscLpSdhPathOperStatusEntry_Object = MibTableRow
mscLpSdhPathOperStatusEntry = _MscLpSdhPathOperStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 14, 1)
)
mscLpSdhPathOperStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhPathOperStatusEntry.setStatus("mandatory")


class _MscLpSdhPathSnmpOperStatus_Type(Integer32):
    """Custom type mscLpSdhPathSnmpOperStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpSdhPathSnmpOperStatus_Type.__name__ = "Integer32"
_MscLpSdhPathSnmpOperStatus_Object = MibTableColumn
mscLpSdhPathSnmpOperStatus = _MscLpSdhPathSnmpOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 14, 1, 1),
    _MscLpSdhPathSnmpOperStatus_Type()
)
mscLpSdhPathSnmpOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathSnmpOperStatus.setStatus("mandatory")
_MscLpSdhPathOperTable_Object = MibTable
mscLpSdhPathOperTable = _MscLpSdhPathOperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 15)
)
if mibBuilder.loadTexts:
    mscLpSdhPathOperTable.setStatus("mandatory")
_MscLpSdhPathOperEntry_Object = MibTableRow
mscLpSdhPathOperEntry = _MscLpSdhPathOperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 15, 1)
)
mscLpSdhPathOperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhPathOperEntry.setStatus("mandatory")


class _MscLpSdhPathLopAlarm_Type(Integer32):
    """Custom type mscLpSdhPathLopAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSdhPathLopAlarm_Type.__name__ = "Integer32"
_MscLpSdhPathLopAlarm_Object = MibTableColumn
mscLpSdhPathLopAlarm = _MscLpSdhPathLopAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 15, 1, 1),
    _MscLpSdhPathLopAlarm_Type()
)
mscLpSdhPathLopAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathLopAlarm.setStatus("mandatory")


class _MscLpSdhPathRxAisAlarm_Type(Integer32):
    """Custom type mscLpSdhPathRxAisAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSdhPathRxAisAlarm_Type.__name__ = "Integer32"
_MscLpSdhPathRxAisAlarm_Object = MibTableColumn
mscLpSdhPathRxAisAlarm = _MscLpSdhPathRxAisAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 15, 1, 2),
    _MscLpSdhPathRxAisAlarm_Type()
)
mscLpSdhPathRxAisAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathRxAisAlarm.setStatus("mandatory")


class _MscLpSdhPathRxRfiAlarm_Type(Integer32):
    """Custom type mscLpSdhPathRxRfiAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSdhPathRxRfiAlarm_Type.__name__ = "Integer32"
_MscLpSdhPathRxRfiAlarm_Object = MibTableColumn
mscLpSdhPathRxRfiAlarm = _MscLpSdhPathRxRfiAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 15, 1, 3),
    _MscLpSdhPathRxRfiAlarm_Type()
)
mscLpSdhPathRxRfiAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathRxRfiAlarm.setStatus("mandatory")


class _MscLpSdhPathSignalLabelMismatch_Type(Integer32):
    """Custom type mscLpSdhPathSignalLabelMismatch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSdhPathSignalLabelMismatch_Type.__name__ = "Integer32"
_MscLpSdhPathSignalLabelMismatch_Object = MibTableColumn
mscLpSdhPathSignalLabelMismatch = _MscLpSdhPathSignalLabelMismatch_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 15, 1, 4),
    _MscLpSdhPathSignalLabelMismatch_Type()
)
mscLpSdhPathSignalLabelMismatch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathSignalLabelMismatch.setStatus("mandatory")


class _MscLpSdhPathTxAis_Type(Integer32):
    """Custom type mscLpSdhPathTxAis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSdhPathTxAis_Type.__name__ = "Integer32"
_MscLpSdhPathTxAis_Object = MibTableColumn
mscLpSdhPathTxAis = _MscLpSdhPathTxAis_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 15, 1, 5),
    _MscLpSdhPathTxAis_Type()
)
mscLpSdhPathTxAis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathTxAis.setStatus("mandatory")


class _MscLpSdhPathTxRdi_Type(Integer32):
    """Custom type mscLpSdhPathTxRdi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSdhPathTxRdi_Type.__name__ = "Integer32"
_MscLpSdhPathTxRdi_Object = MibTableColumn
mscLpSdhPathTxRdi = _MscLpSdhPathTxRdi_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 15, 1, 6),
    _MscLpSdhPathTxRdi_Type()
)
mscLpSdhPathTxRdi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathTxRdi.setStatus("mandatory")
_MscLpSdhPathStatsTable_Object = MibTable
mscLpSdhPathStatsTable = _MscLpSdhPathStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16)
)
if mibBuilder.loadTexts:
    mscLpSdhPathStatsTable.setStatus("mandatory")
_MscLpSdhPathStatsEntry_Object = MibTableRow
mscLpSdhPathStatsEntry = _MscLpSdhPathStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1)
)
mscLpSdhPathStatsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhPathIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhPathStatsEntry.setStatus("mandatory")
_MscLpSdhPathPathErrorFreeSec_Type = Counter32
_MscLpSdhPathPathErrorFreeSec_Object = MibTableColumn
mscLpSdhPathPathErrorFreeSec = _MscLpSdhPathPathErrorFreeSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 1),
    _MscLpSdhPathPathErrorFreeSec_Type()
)
mscLpSdhPathPathErrorFreeSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathPathErrorFreeSec.setStatus("mandatory")
_MscLpSdhPathPathCodeViolations_Type = Counter32
_MscLpSdhPathPathCodeViolations_Object = MibTableColumn
mscLpSdhPathPathCodeViolations = _MscLpSdhPathPathCodeViolations_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 2),
    _MscLpSdhPathPathCodeViolations_Type()
)
mscLpSdhPathPathCodeViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathPathCodeViolations.setStatus("mandatory")
_MscLpSdhPathPathErroredSec_Type = Counter32
_MscLpSdhPathPathErroredSec_Object = MibTableColumn
mscLpSdhPathPathErroredSec = _MscLpSdhPathPathErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 3),
    _MscLpSdhPathPathErroredSec_Type()
)
mscLpSdhPathPathErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathPathErroredSec.setStatus("mandatory")
_MscLpSdhPathPathSevErroredSec_Type = Counter32
_MscLpSdhPathPathSevErroredSec_Object = MibTableColumn
mscLpSdhPathPathSevErroredSec = _MscLpSdhPathPathSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 4),
    _MscLpSdhPathPathSevErroredSec_Type()
)
mscLpSdhPathPathSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathPathSevErroredSec.setStatus("mandatory")
_MscLpSdhPathPathAisLopSec_Type = Counter32
_MscLpSdhPathPathAisLopSec_Object = MibTableColumn
mscLpSdhPathPathAisLopSec = _MscLpSdhPathPathAisLopSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 5),
    _MscLpSdhPathPathAisLopSec_Type()
)
mscLpSdhPathPathAisLopSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathPathAisLopSec.setStatus("mandatory")
_MscLpSdhPathPathUnavailSec_Type = Counter32
_MscLpSdhPathPathUnavailSec_Object = MibTableColumn
mscLpSdhPathPathUnavailSec = _MscLpSdhPathPathUnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 6),
    _MscLpSdhPathPathUnavailSec_Type()
)
mscLpSdhPathPathUnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathPathUnavailSec.setStatus("mandatory")
_MscLpSdhPathPathFailures_Type = Counter32
_MscLpSdhPathPathFailures_Object = MibTableColumn
mscLpSdhPathPathFailures = _MscLpSdhPathPathFailures_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 7),
    _MscLpSdhPathPathFailures_Type()
)
mscLpSdhPathPathFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathPathFailures.setStatus("mandatory")
_MscLpSdhPathFarEndPathErrorFreeSec_Type = Counter32
_MscLpSdhPathFarEndPathErrorFreeSec_Object = MibTableColumn
mscLpSdhPathFarEndPathErrorFreeSec = _MscLpSdhPathFarEndPathErrorFreeSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 8),
    _MscLpSdhPathFarEndPathErrorFreeSec_Type()
)
mscLpSdhPathFarEndPathErrorFreeSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathFarEndPathErrorFreeSec.setStatus("mandatory")
_MscLpSdhPathFarEndPathCodeViolations_Type = Counter32
_MscLpSdhPathFarEndPathCodeViolations_Object = MibTableColumn
mscLpSdhPathFarEndPathCodeViolations = _MscLpSdhPathFarEndPathCodeViolations_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 9),
    _MscLpSdhPathFarEndPathCodeViolations_Type()
)
mscLpSdhPathFarEndPathCodeViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathFarEndPathCodeViolations.setStatus("mandatory")
_MscLpSdhPathFarEndPathErroredSec_Type = Counter32
_MscLpSdhPathFarEndPathErroredSec_Object = MibTableColumn
mscLpSdhPathFarEndPathErroredSec = _MscLpSdhPathFarEndPathErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 10),
    _MscLpSdhPathFarEndPathErroredSec_Type()
)
mscLpSdhPathFarEndPathErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathFarEndPathErroredSec.setStatus("mandatory")
_MscLpSdhPathFarEndPathSevErroredSec_Type = Counter32
_MscLpSdhPathFarEndPathSevErroredSec_Object = MibTableColumn
mscLpSdhPathFarEndPathSevErroredSec = _MscLpSdhPathFarEndPathSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 11),
    _MscLpSdhPathFarEndPathSevErroredSec_Type()
)
mscLpSdhPathFarEndPathSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathFarEndPathSevErroredSec.setStatus("mandatory")
_MscLpSdhPathFarEndPathAisLopSec_Type = Counter32
_MscLpSdhPathFarEndPathAisLopSec_Object = MibTableColumn
mscLpSdhPathFarEndPathAisLopSec = _MscLpSdhPathFarEndPathAisLopSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 12),
    _MscLpSdhPathFarEndPathAisLopSec_Type()
)
mscLpSdhPathFarEndPathAisLopSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathFarEndPathAisLopSec.setStatus("mandatory")
_MscLpSdhPathFarEndPathUnavailSec_Type = Counter32
_MscLpSdhPathFarEndPathUnavailSec_Object = MibTableColumn
mscLpSdhPathFarEndPathUnavailSec = _MscLpSdhPathFarEndPathUnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 13),
    _MscLpSdhPathFarEndPathUnavailSec_Type()
)
mscLpSdhPathFarEndPathUnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathFarEndPathUnavailSec.setStatus("mandatory")
_MscLpSdhPathFarEndPathFailures_Type = Counter32
_MscLpSdhPathFarEndPathFailures_Object = MibTableColumn
mscLpSdhPathFarEndPathFailures = _MscLpSdhPathFarEndPathFailures_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 2, 16, 1, 14),
    _MscLpSdhPathFarEndPathFailures_Type()
)
mscLpSdhPathFarEndPathFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhPathFarEndPathFailures.setStatus("mandatory")
_MscLpSdhTest_ObjectIdentity = ObjectIdentity
mscLpSdhTest = _MscLpSdhTest_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3)
)
_MscLpSdhTestRowStatusTable_Object = MibTable
mscLpSdhTestRowStatusTable = _MscLpSdhTestRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 1)
)
if mibBuilder.loadTexts:
    mscLpSdhTestRowStatusTable.setStatus("mandatory")
_MscLpSdhTestRowStatusEntry_Object = MibTableRow
mscLpSdhTestRowStatusEntry = _MscLpSdhTestRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 1, 1)
)
mscLpSdhTestRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhTestRowStatusEntry.setStatus("mandatory")
_MscLpSdhTestRowStatus_Type = RowStatus
_MscLpSdhTestRowStatus_Object = MibTableColumn
mscLpSdhTestRowStatus = _MscLpSdhTestRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 1, 1, 1),
    _MscLpSdhTestRowStatus_Type()
)
mscLpSdhTestRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhTestRowStatus.setStatus("mandatory")
_MscLpSdhTestComponentName_Type = DisplayString
_MscLpSdhTestComponentName_Object = MibTableColumn
mscLpSdhTestComponentName = _MscLpSdhTestComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 1, 1, 2),
    _MscLpSdhTestComponentName_Type()
)
mscLpSdhTestComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhTestComponentName.setStatus("mandatory")
_MscLpSdhTestStorageType_Type = StorageType
_MscLpSdhTestStorageType_Object = MibTableColumn
mscLpSdhTestStorageType = _MscLpSdhTestStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 1, 1, 4),
    _MscLpSdhTestStorageType_Type()
)
mscLpSdhTestStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhTestStorageType.setStatus("mandatory")
_MscLpSdhTestIndex_Type = NonReplicated
_MscLpSdhTestIndex_Object = MibTableColumn
mscLpSdhTestIndex = _MscLpSdhTestIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 1, 1, 10),
    _MscLpSdhTestIndex_Type()
)
mscLpSdhTestIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpSdhTestIndex.setStatus("mandatory")
_MscLpSdhTestStateTable_Object = MibTable
mscLpSdhTestStateTable = _MscLpSdhTestStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 10)
)
if mibBuilder.loadTexts:
    mscLpSdhTestStateTable.setStatus("mandatory")
_MscLpSdhTestStateEntry_Object = MibTableRow
mscLpSdhTestStateEntry = _MscLpSdhTestStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 10, 1)
)
mscLpSdhTestStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhTestStateEntry.setStatus("mandatory")


class _MscLpSdhTestAdminState_Type(Integer32):
    """Custom type mscLpSdhTestAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpSdhTestAdminState_Type.__name__ = "Integer32"
_MscLpSdhTestAdminState_Object = MibTableColumn
mscLpSdhTestAdminState = _MscLpSdhTestAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 10, 1, 1),
    _MscLpSdhTestAdminState_Type()
)
mscLpSdhTestAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhTestAdminState.setStatus("mandatory")


class _MscLpSdhTestOperationalState_Type(Integer32):
    """Custom type mscLpSdhTestOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpSdhTestOperationalState_Type.__name__ = "Integer32"
_MscLpSdhTestOperationalState_Object = MibTableColumn
mscLpSdhTestOperationalState = _MscLpSdhTestOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 10, 1, 2),
    _MscLpSdhTestOperationalState_Type()
)
mscLpSdhTestOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhTestOperationalState.setStatus("mandatory")


class _MscLpSdhTestUsageState_Type(Integer32):
    """Custom type mscLpSdhTestUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpSdhTestUsageState_Type.__name__ = "Integer32"
_MscLpSdhTestUsageState_Object = MibTableColumn
mscLpSdhTestUsageState = _MscLpSdhTestUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 10, 1, 3),
    _MscLpSdhTestUsageState_Type()
)
mscLpSdhTestUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhTestUsageState.setStatus("mandatory")
_MscLpSdhTestSetupTable_Object = MibTable
mscLpSdhTestSetupTable = _MscLpSdhTestSetupTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 11)
)
if mibBuilder.loadTexts:
    mscLpSdhTestSetupTable.setStatus("mandatory")
_MscLpSdhTestSetupEntry_Object = MibTableRow
mscLpSdhTestSetupEntry = _MscLpSdhTestSetupEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 11, 1)
)
mscLpSdhTestSetupEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhTestSetupEntry.setStatus("mandatory")


class _MscLpSdhTestPurpose_Type(AsciiString):
    """Custom type mscLpSdhTestPurpose based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_MscLpSdhTestPurpose_Type.__name__ = "AsciiString"
_MscLpSdhTestPurpose_Object = MibTableColumn
mscLpSdhTestPurpose = _MscLpSdhTestPurpose_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 11, 1, 1),
    _MscLpSdhTestPurpose_Type()
)
mscLpSdhTestPurpose.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSdhTestPurpose.setStatus("mandatory")


class _MscLpSdhTestType_Type(Integer32):
    """Custom type mscLpSdhTestType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("card", 0),
          ("externalLoop", 4),
          ("localLoop", 2),
          ("manual", 1),
          ("payloadLoop", 5),
          ("pn127RemoteLoop", 8),
          ("remoteLoop", 3),
          ("remoteLoopThisTrib", 6),
          ("v54RemoteLoop", 7))
    )


_MscLpSdhTestType_Type.__name__ = "Integer32"
_MscLpSdhTestType_Object = MibTableColumn
mscLpSdhTestType = _MscLpSdhTestType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 11, 1, 2),
    _MscLpSdhTestType_Type()
)
mscLpSdhTestType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSdhTestType.setStatus("mandatory")


class _MscLpSdhTestFrmSize_Type(Unsigned32):
    """Custom type mscLpSdhTestFrmSize based on Unsigned32"""
    defaultValue = 1024

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 4096),
    )


_MscLpSdhTestFrmSize_Type.__name__ = "Unsigned32"
_MscLpSdhTestFrmSize_Object = MibTableColumn
mscLpSdhTestFrmSize = _MscLpSdhTestFrmSize_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 11, 1, 3),
    _MscLpSdhTestFrmSize_Type()
)
mscLpSdhTestFrmSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSdhTestFrmSize.setStatus("mandatory")


class _MscLpSdhTestFrmPatternType_Type(Integer32):
    """Custom type mscLpSdhTestFrmPatternType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ccitt32kBitPattern", 0),
          ("ccitt8MBitPattern", 1),
          ("customizedPattern", 2))
    )


_MscLpSdhTestFrmPatternType_Type.__name__ = "Integer32"
_MscLpSdhTestFrmPatternType_Object = MibTableColumn
mscLpSdhTestFrmPatternType = _MscLpSdhTestFrmPatternType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 11, 1, 4),
    _MscLpSdhTestFrmPatternType_Type()
)
mscLpSdhTestFrmPatternType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSdhTestFrmPatternType.setStatus("mandatory")


class _MscLpSdhTestCustomizedPattern_Type(Hex):
    """Custom type mscLpSdhTestCustomizedPattern based on Hex"""
    defaultValue = 1431655765

    subtypeSpec = Hex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpSdhTestCustomizedPattern_Type.__name__ = "Hex"
_MscLpSdhTestCustomizedPattern_Object = MibTableColumn
mscLpSdhTestCustomizedPattern = _MscLpSdhTestCustomizedPattern_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 11, 1, 5),
    _MscLpSdhTestCustomizedPattern_Type()
)
mscLpSdhTestCustomizedPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSdhTestCustomizedPattern.setStatus("mandatory")


class _MscLpSdhTestDataStartDelay_Type(Unsigned32):
    """Custom type mscLpSdhTestDataStartDelay based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1814400),
    )


_MscLpSdhTestDataStartDelay_Type.__name__ = "Unsigned32"
_MscLpSdhTestDataStartDelay_Object = MibTableColumn
mscLpSdhTestDataStartDelay = _MscLpSdhTestDataStartDelay_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 11, 1, 6),
    _MscLpSdhTestDataStartDelay_Type()
)
mscLpSdhTestDataStartDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSdhTestDataStartDelay.setStatus("mandatory")


class _MscLpSdhTestDisplayInterval_Type(Unsigned32):
    """Custom type mscLpSdhTestDisplayInterval based on Unsigned32"""
    defaultValue = 5

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30240),
    )


_MscLpSdhTestDisplayInterval_Type.__name__ = "Unsigned32"
_MscLpSdhTestDisplayInterval_Object = MibTableColumn
mscLpSdhTestDisplayInterval = _MscLpSdhTestDisplayInterval_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 11, 1, 7),
    _MscLpSdhTestDisplayInterval_Type()
)
mscLpSdhTestDisplayInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSdhTestDisplayInterval.setStatus("mandatory")


class _MscLpSdhTestDuration_Type(Unsigned32):
    """Custom type mscLpSdhTestDuration based on Unsigned32"""
    defaultValue = 1

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30240),
    )


_MscLpSdhTestDuration_Type.__name__ = "Unsigned32"
_MscLpSdhTestDuration_Object = MibTableColumn
mscLpSdhTestDuration = _MscLpSdhTestDuration_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 11, 1, 8),
    _MscLpSdhTestDuration_Type()
)
mscLpSdhTestDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSdhTestDuration.setStatus("mandatory")
_MscLpSdhTestResultsTable_Object = MibTable
mscLpSdhTestResultsTable = _MscLpSdhTestResultsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12)
)
if mibBuilder.loadTexts:
    mscLpSdhTestResultsTable.setStatus("mandatory")
_MscLpSdhTestResultsEntry_Object = MibTableRow
mscLpSdhTestResultsEntry = _MscLpSdhTestResultsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1)
)
mscLpSdhTestResultsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhTestResultsEntry.setStatus("mandatory")
_MscLpSdhTestElapsedTime_Type = Counter32
_MscLpSdhTestElapsedTime_Object = MibTableColumn
mscLpSdhTestElapsedTime = _MscLpSdhTestElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1, 1),
    _MscLpSdhTestElapsedTime_Type()
)
mscLpSdhTestElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhTestElapsedTime.setStatus("mandatory")


class _MscLpSdhTestTimeRemaining_Type(Unsigned32):
    """Custom type mscLpSdhTestTimeRemaining based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpSdhTestTimeRemaining_Type.__name__ = "Unsigned32"
_MscLpSdhTestTimeRemaining_Object = MibTableColumn
mscLpSdhTestTimeRemaining = _MscLpSdhTestTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1, 2),
    _MscLpSdhTestTimeRemaining_Type()
)
mscLpSdhTestTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhTestTimeRemaining.setStatus("mandatory")


class _MscLpSdhTestCauseOfTermination_Type(Integer32):
    """Custom type mscLpSdhTestCauseOfTermination based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("hardwareReconfigured", 5),
          ("loopCodeSyncFailed", 6),
          ("neverStarted", 3),
          ("patternSyncFailed", 7),
          ("patternSyncLost", 8),
          ("stoppedByOperator", 1),
          ("testRunning", 4),
          ("testTimeExpired", 0),
          ("unknown", 2))
    )


_MscLpSdhTestCauseOfTermination_Type.__name__ = "Integer32"
_MscLpSdhTestCauseOfTermination_Object = MibTableColumn
mscLpSdhTestCauseOfTermination = _MscLpSdhTestCauseOfTermination_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1, 3),
    _MscLpSdhTestCauseOfTermination_Type()
)
mscLpSdhTestCauseOfTermination.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhTestCauseOfTermination.setStatus("mandatory")
_MscLpSdhTestBitsTx_Type = PassportCounter64
_MscLpSdhTestBitsTx_Object = MibTableColumn
mscLpSdhTestBitsTx = _MscLpSdhTestBitsTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1, 4),
    _MscLpSdhTestBitsTx_Type()
)
mscLpSdhTestBitsTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhTestBitsTx.setStatus("mandatory")
_MscLpSdhTestBytesTx_Type = PassportCounter64
_MscLpSdhTestBytesTx_Object = MibTableColumn
mscLpSdhTestBytesTx = _MscLpSdhTestBytesTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1, 5),
    _MscLpSdhTestBytesTx_Type()
)
mscLpSdhTestBytesTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhTestBytesTx.setStatus("mandatory")
_MscLpSdhTestFrmTx_Type = PassportCounter64
_MscLpSdhTestFrmTx_Object = MibTableColumn
mscLpSdhTestFrmTx = _MscLpSdhTestFrmTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1, 6),
    _MscLpSdhTestFrmTx_Type()
)
mscLpSdhTestFrmTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhTestFrmTx.setStatus("mandatory")
_MscLpSdhTestBitsRx_Type = PassportCounter64
_MscLpSdhTestBitsRx_Object = MibTableColumn
mscLpSdhTestBitsRx = _MscLpSdhTestBitsRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1, 7),
    _MscLpSdhTestBitsRx_Type()
)
mscLpSdhTestBitsRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhTestBitsRx.setStatus("mandatory")
_MscLpSdhTestBytesRx_Type = PassportCounter64
_MscLpSdhTestBytesRx_Object = MibTableColumn
mscLpSdhTestBytesRx = _MscLpSdhTestBytesRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1, 8),
    _MscLpSdhTestBytesRx_Type()
)
mscLpSdhTestBytesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhTestBytesRx.setStatus("mandatory")
_MscLpSdhTestFrmRx_Type = PassportCounter64
_MscLpSdhTestFrmRx_Object = MibTableColumn
mscLpSdhTestFrmRx = _MscLpSdhTestFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1, 9),
    _MscLpSdhTestFrmRx_Type()
)
mscLpSdhTestFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhTestFrmRx.setStatus("mandatory")
_MscLpSdhTestErroredFrmRx_Type = PassportCounter64
_MscLpSdhTestErroredFrmRx_Object = MibTableColumn
mscLpSdhTestErroredFrmRx = _MscLpSdhTestErroredFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1, 10),
    _MscLpSdhTestErroredFrmRx_Type()
)
mscLpSdhTestErroredFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhTestErroredFrmRx.setStatus("mandatory")


class _MscLpSdhTestBitErrorRate_Type(AsciiString):
    """Custom type mscLpSdhTestBitErrorRate based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )


_MscLpSdhTestBitErrorRate_Type.__name__ = "AsciiString"
_MscLpSdhTestBitErrorRate_Object = MibTableColumn
mscLpSdhTestBitErrorRate = _MscLpSdhTestBitErrorRate_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 3, 12, 1, 11),
    _MscLpSdhTestBitErrorRate_Type()
)
mscLpSdhTestBitErrorRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhTestBitErrorRate.setStatus("mandatory")
_MscLpSdhProvTable_Object = MibTable
mscLpSdhProvTable = _MscLpSdhProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 10)
)
if mibBuilder.loadTexts:
    mscLpSdhProvTable.setStatus("mandatory")
_MscLpSdhProvEntry_Object = MibTableRow
mscLpSdhProvEntry = _MscLpSdhProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 10, 1)
)
mscLpSdhProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhProvEntry.setStatus("mandatory")


class _MscLpSdhClockingSource_Type(Integer32):
    """Custom type mscLpSdhClockingSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("line", 1),
          ("local", 0),
          ("module", 2))
    )


_MscLpSdhClockingSource_Type.__name__ = "Integer32"
_MscLpSdhClockingSource_Object = MibTableColumn
mscLpSdhClockingSource = _MscLpSdhClockingSource_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 10, 1, 1),
    _MscLpSdhClockingSource_Type()
)
mscLpSdhClockingSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSdhClockingSource.setStatus("mandatory")
_MscLpSdhCidDataTable_Object = MibTable
mscLpSdhCidDataTable = _MscLpSdhCidDataTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 11)
)
if mibBuilder.loadTexts:
    mscLpSdhCidDataTable.setStatus("mandatory")
_MscLpSdhCidDataEntry_Object = MibTableRow
mscLpSdhCidDataEntry = _MscLpSdhCidDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 11, 1)
)
mscLpSdhCidDataEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhCidDataEntry.setStatus("mandatory")


class _MscLpSdhCustomerIdentifier_Type(Unsigned32):
    """Custom type mscLpSdhCustomerIdentifier based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 8191),
    )


_MscLpSdhCustomerIdentifier_Type.__name__ = "Unsigned32"
_MscLpSdhCustomerIdentifier_Object = MibTableColumn
mscLpSdhCustomerIdentifier = _MscLpSdhCustomerIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 11, 1, 1),
    _MscLpSdhCustomerIdentifier_Type()
)
mscLpSdhCustomerIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSdhCustomerIdentifier.setStatus("mandatory")
_MscLpSdhAdminInfoTable_Object = MibTable
mscLpSdhAdminInfoTable = _MscLpSdhAdminInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 12)
)
if mibBuilder.loadTexts:
    mscLpSdhAdminInfoTable.setStatus("mandatory")
_MscLpSdhAdminInfoEntry_Object = MibTableRow
mscLpSdhAdminInfoEntry = _MscLpSdhAdminInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 12, 1)
)
mscLpSdhAdminInfoEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhAdminInfoEntry.setStatus("mandatory")


class _MscLpSdhVendor_Type(AsciiString):
    """Custom type mscLpSdhVendor based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_MscLpSdhVendor_Type.__name__ = "AsciiString"
_MscLpSdhVendor_Object = MibTableColumn
mscLpSdhVendor = _MscLpSdhVendor_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 12, 1, 1),
    _MscLpSdhVendor_Type()
)
mscLpSdhVendor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSdhVendor.setStatus("mandatory")


class _MscLpSdhCommentText_Type(AsciiString):
    """Custom type mscLpSdhCommentText based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 60),
    )


_MscLpSdhCommentText_Type.__name__ = "AsciiString"
_MscLpSdhCommentText_Object = MibTableColumn
mscLpSdhCommentText = _MscLpSdhCommentText_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 12, 1, 2),
    _MscLpSdhCommentText_Type()
)
mscLpSdhCommentText.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSdhCommentText.setStatus("mandatory")
_MscLpSdhIfEntryTable_Object = MibTable
mscLpSdhIfEntryTable = _MscLpSdhIfEntryTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 13)
)
if mibBuilder.loadTexts:
    mscLpSdhIfEntryTable.setStatus("mandatory")
_MscLpSdhIfEntryEntry_Object = MibTableRow
mscLpSdhIfEntryEntry = _MscLpSdhIfEntryEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 13, 1)
)
mscLpSdhIfEntryEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhIfEntryEntry.setStatus("mandatory")


class _MscLpSdhIfAdminStatus_Type(Integer32):
    """Custom type mscLpSdhIfAdminStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpSdhIfAdminStatus_Type.__name__ = "Integer32"
_MscLpSdhIfAdminStatus_Object = MibTableColumn
mscLpSdhIfAdminStatus = _MscLpSdhIfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 13, 1, 1),
    _MscLpSdhIfAdminStatus_Type()
)
mscLpSdhIfAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSdhIfAdminStatus.setStatus("mandatory")


class _MscLpSdhIfIndex_Type(InterfaceIndex):
    """Custom type mscLpSdhIfIndex based on InterfaceIndex"""
    subtypeSpec = InterfaceIndex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_MscLpSdhIfIndex_Type.__name__ = "InterfaceIndex"
_MscLpSdhIfIndex_Object = MibTableColumn
mscLpSdhIfIndex = _MscLpSdhIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 13, 1, 2),
    _MscLpSdhIfIndex_Type()
)
mscLpSdhIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhIfIndex.setStatus("mandatory")
_MscLpSdhOperStatusTable_Object = MibTable
mscLpSdhOperStatusTable = _MscLpSdhOperStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 14)
)
if mibBuilder.loadTexts:
    mscLpSdhOperStatusTable.setStatus("mandatory")
_MscLpSdhOperStatusEntry_Object = MibTableRow
mscLpSdhOperStatusEntry = _MscLpSdhOperStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 14, 1)
)
mscLpSdhOperStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhOperStatusEntry.setStatus("mandatory")


class _MscLpSdhSnmpOperStatus_Type(Integer32):
    """Custom type mscLpSdhSnmpOperStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpSdhSnmpOperStatus_Type.__name__ = "Integer32"
_MscLpSdhSnmpOperStatus_Object = MibTableColumn
mscLpSdhSnmpOperStatus = _MscLpSdhSnmpOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 14, 1, 1),
    _MscLpSdhSnmpOperStatus_Type()
)
mscLpSdhSnmpOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhSnmpOperStatus.setStatus("mandatory")
_MscLpSdhStateTable_Object = MibTable
mscLpSdhStateTable = _MscLpSdhStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 15)
)
if mibBuilder.loadTexts:
    mscLpSdhStateTable.setStatus("mandatory")
_MscLpSdhStateEntry_Object = MibTableRow
mscLpSdhStateEntry = _MscLpSdhStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 15, 1)
)
mscLpSdhStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhStateEntry.setStatus("mandatory")


class _MscLpSdhAdminState_Type(Integer32):
    """Custom type mscLpSdhAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpSdhAdminState_Type.__name__ = "Integer32"
_MscLpSdhAdminState_Object = MibTableColumn
mscLpSdhAdminState = _MscLpSdhAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 15, 1, 1),
    _MscLpSdhAdminState_Type()
)
mscLpSdhAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhAdminState.setStatus("mandatory")


class _MscLpSdhOperationalState_Type(Integer32):
    """Custom type mscLpSdhOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpSdhOperationalState_Type.__name__ = "Integer32"
_MscLpSdhOperationalState_Object = MibTableColumn
mscLpSdhOperationalState = _MscLpSdhOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 15, 1, 2),
    _MscLpSdhOperationalState_Type()
)
mscLpSdhOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhOperationalState.setStatus("mandatory")


class _MscLpSdhUsageState_Type(Integer32):
    """Custom type mscLpSdhUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpSdhUsageState_Type.__name__ = "Integer32"
_MscLpSdhUsageState_Object = MibTableColumn
mscLpSdhUsageState = _MscLpSdhUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 15, 1, 3),
    _MscLpSdhUsageState_Type()
)
mscLpSdhUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhUsageState.setStatus("mandatory")


class _MscLpSdhAvailabilityStatus_Type(OctetString):
    """Custom type mscLpSdhAvailabilityStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_MscLpSdhAvailabilityStatus_Type.__name__ = "OctetString"
_MscLpSdhAvailabilityStatus_Object = MibTableColumn
mscLpSdhAvailabilityStatus = _MscLpSdhAvailabilityStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 15, 1, 4),
    _MscLpSdhAvailabilityStatus_Type()
)
mscLpSdhAvailabilityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhAvailabilityStatus.setStatus("mandatory")


class _MscLpSdhProceduralStatus_Type(OctetString):
    """Custom type mscLpSdhProceduralStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpSdhProceduralStatus_Type.__name__ = "OctetString"
_MscLpSdhProceduralStatus_Object = MibTableColumn
mscLpSdhProceduralStatus = _MscLpSdhProceduralStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 15, 1, 5),
    _MscLpSdhProceduralStatus_Type()
)
mscLpSdhProceduralStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhProceduralStatus.setStatus("mandatory")


class _MscLpSdhControlStatus_Type(OctetString):
    """Custom type mscLpSdhControlStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpSdhControlStatus_Type.__name__ = "OctetString"
_MscLpSdhControlStatus_Object = MibTableColumn
mscLpSdhControlStatus = _MscLpSdhControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 15, 1, 6),
    _MscLpSdhControlStatus_Type()
)
mscLpSdhControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhControlStatus.setStatus("mandatory")


class _MscLpSdhAlarmStatus_Type(OctetString):
    """Custom type mscLpSdhAlarmStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpSdhAlarmStatus_Type.__name__ = "OctetString"
_MscLpSdhAlarmStatus_Object = MibTableColumn
mscLpSdhAlarmStatus = _MscLpSdhAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 15, 1, 7),
    _MscLpSdhAlarmStatus_Type()
)
mscLpSdhAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhAlarmStatus.setStatus("mandatory")


class _MscLpSdhStandbyStatus_Type(Integer32):
    """Custom type mscLpSdhStandbyStatus based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              15)
        )
    )
    namedValues = NamedValues(
        *(("coldStandby", 1),
          ("hotStandby", 0),
          ("notSet", 15),
          ("providingService", 2))
    )


_MscLpSdhStandbyStatus_Type.__name__ = "Integer32"
_MscLpSdhStandbyStatus_Object = MibTableColumn
mscLpSdhStandbyStatus = _MscLpSdhStandbyStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 15, 1, 8),
    _MscLpSdhStandbyStatus_Type()
)
mscLpSdhStandbyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhStandbyStatus.setStatus("mandatory")


class _MscLpSdhUnknownStatus_Type(Integer32):
    """Custom type mscLpSdhUnknownStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_MscLpSdhUnknownStatus_Type.__name__ = "Integer32"
_MscLpSdhUnknownStatus_Object = MibTableColumn
mscLpSdhUnknownStatus = _MscLpSdhUnknownStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 15, 1, 9),
    _MscLpSdhUnknownStatus_Type()
)
mscLpSdhUnknownStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhUnknownStatus.setStatus("mandatory")
_MscLpSdhOperTable_Object = MibTable
mscLpSdhOperTable = _MscLpSdhOperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 16)
)
if mibBuilder.loadTexts:
    mscLpSdhOperTable.setStatus("mandatory")
_MscLpSdhOperEntry_Object = MibTableRow
mscLpSdhOperEntry = _MscLpSdhOperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 16, 1)
)
mscLpSdhOperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhOperEntry.setStatus("mandatory")


class _MscLpSdhLosAlarm_Type(Integer32):
    """Custom type mscLpSdhLosAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSdhLosAlarm_Type.__name__ = "Integer32"
_MscLpSdhLosAlarm_Object = MibTableColumn
mscLpSdhLosAlarm = _MscLpSdhLosAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 16, 1, 1),
    _MscLpSdhLosAlarm_Type()
)
mscLpSdhLosAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhLosAlarm.setStatus("mandatory")


class _MscLpSdhLofAlarm_Type(Integer32):
    """Custom type mscLpSdhLofAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSdhLofAlarm_Type.__name__ = "Integer32"
_MscLpSdhLofAlarm_Object = MibTableColumn
mscLpSdhLofAlarm = _MscLpSdhLofAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 16, 1, 2),
    _MscLpSdhLofAlarm_Type()
)
mscLpSdhLofAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhLofAlarm.setStatus("mandatory")


class _MscLpSdhRxAisAlarm_Type(Integer32):
    """Custom type mscLpSdhRxAisAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSdhRxAisAlarm_Type.__name__ = "Integer32"
_MscLpSdhRxAisAlarm_Object = MibTableColumn
mscLpSdhRxAisAlarm = _MscLpSdhRxAisAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 16, 1, 3),
    _MscLpSdhRxAisAlarm_Type()
)
mscLpSdhRxAisAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhRxAisAlarm.setStatus("mandatory")


class _MscLpSdhRxRfiAlarm_Type(Integer32):
    """Custom type mscLpSdhRxRfiAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSdhRxRfiAlarm_Type.__name__ = "Integer32"
_MscLpSdhRxRfiAlarm_Object = MibTableColumn
mscLpSdhRxRfiAlarm = _MscLpSdhRxRfiAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 16, 1, 4),
    _MscLpSdhRxRfiAlarm_Type()
)
mscLpSdhRxRfiAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhRxRfiAlarm.setStatus("mandatory")


class _MscLpSdhTxAis_Type(Integer32):
    """Custom type mscLpSdhTxAis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSdhTxAis_Type.__name__ = "Integer32"
_MscLpSdhTxAis_Object = MibTableColumn
mscLpSdhTxAis = _MscLpSdhTxAis_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 16, 1, 5),
    _MscLpSdhTxAis_Type()
)
mscLpSdhTxAis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhTxAis.setStatus("mandatory")


class _MscLpSdhTxRdi_Type(Integer32):
    """Custom type mscLpSdhTxRdi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSdhTxRdi_Type.__name__ = "Integer32"
_MscLpSdhTxRdi_Object = MibTableColumn
mscLpSdhTxRdi = _MscLpSdhTxRdi_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 16, 1, 6),
    _MscLpSdhTxRdi_Type()
)
mscLpSdhTxRdi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhTxRdi.setStatus("mandatory")


class _MscLpSdhUnusableTxClockRefAlarm_Type(Integer32):
    """Custom type mscLpSdhUnusableTxClockRefAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpSdhUnusableTxClockRefAlarm_Type.__name__ = "Integer32"
_MscLpSdhUnusableTxClockRefAlarm_Object = MibTableColumn
mscLpSdhUnusableTxClockRefAlarm = _MscLpSdhUnusableTxClockRefAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 16, 1, 7),
    _MscLpSdhUnusableTxClockRefAlarm_Type()
)
mscLpSdhUnusableTxClockRefAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhUnusableTxClockRefAlarm.setStatus("mandatory")
_MscLpSdhStatsTable_Object = MibTable
mscLpSdhStatsTable = _MscLpSdhStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17)
)
if mibBuilder.loadTexts:
    mscLpSdhStatsTable.setStatus("mandatory")
_MscLpSdhStatsEntry_Object = MibTableRow
mscLpSdhStatsEntry = _MscLpSdhStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1)
)
mscLpSdhStatsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpSdhIndex"),
)
if mibBuilder.loadTexts:
    mscLpSdhStatsEntry.setStatus("mandatory")
_MscLpSdhRunningTime_Type = Counter32
_MscLpSdhRunningTime_Object = MibTableColumn
mscLpSdhRunningTime = _MscLpSdhRunningTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 1),
    _MscLpSdhRunningTime_Type()
)
mscLpSdhRunningTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhRunningTime.setStatus("mandatory")
_MscLpSdhErrorFreeSec_Type = Counter32
_MscLpSdhErrorFreeSec_Object = MibTableColumn
mscLpSdhErrorFreeSec = _MscLpSdhErrorFreeSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 2),
    _MscLpSdhErrorFreeSec_Type()
)
mscLpSdhErrorFreeSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhErrorFreeSec.setStatus("mandatory")
_MscLpSdhSectCodeViolations_Type = Counter32
_MscLpSdhSectCodeViolations_Object = MibTableColumn
mscLpSdhSectCodeViolations = _MscLpSdhSectCodeViolations_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 3),
    _MscLpSdhSectCodeViolations_Type()
)
mscLpSdhSectCodeViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhSectCodeViolations.setStatus("mandatory")
_MscLpSdhSectErroredSec_Type = Counter32
_MscLpSdhSectErroredSec_Object = MibTableColumn
mscLpSdhSectErroredSec = _MscLpSdhSectErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 4),
    _MscLpSdhSectErroredSec_Type()
)
mscLpSdhSectErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhSectErroredSec.setStatus("mandatory")
_MscLpSdhSectSevErroredSec_Type = Counter32
_MscLpSdhSectSevErroredSec_Object = MibTableColumn
mscLpSdhSectSevErroredSec = _MscLpSdhSectSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 5),
    _MscLpSdhSectSevErroredSec_Type()
)
mscLpSdhSectSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhSectSevErroredSec.setStatus("mandatory")
_MscLpSdhSectLosSec_Type = Counter32
_MscLpSdhSectLosSec_Object = MibTableColumn
mscLpSdhSectLosSec = _MscLpSdhSectLosSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 6),
    _MscLpSdhSectLosSec_Type()
)
mscLpSdhSectLosSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhSectLosSec.setStatus("mandatory")
_MscLpSdhSectSevErroredFrmSec_Type = Counter32
_MscLpSdhSectSevErroredFrmSec_Object = MibTableColumn
mscLpSdhSectSevErroredFrmSec = _MscLpSdhSectSevErroredFrmSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 7),
    _MscLpSdhSectSevErroredFrmSec_Type()
)
mscLpSdhSectSevErroredFrmSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhSectSevErroredFrmSec.setStatus("mandatory")
_MscLpSdhSectFailures_Type = Counter32
_MscLpSdhSectFailures_Object = MibTableColumn
mscLpSdhSectFailures = _MscLpSdhSectFailures_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 8),
    _MscLpSdhSectFailures_Type()
)
mscLpSdhSectFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhSectFailures.setStatus("mandatory")
_MscLpSdhLineCodeViolations_Type = Counter32
_MscLpSdhLineCodeViolations_Object = MibTableColumn
mscLpSdhLineCodeViolations = _MscLpSdhLineCodeViolations_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 9),
    _MscLpSdhLineCodeViolations_Type()
)
mscLpSdhLineCodeViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhLineCodeViolations.setStatus("mandatory")
_MscLpSdhLineErroredSec_Type = Counter32
_MscLpSdhLineErroredSec_Object = MibTableColumn
mscLpSdhLineErroredSec = _MscLpSdhLineErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 10),
    _MscLpSdhLineErroredSec_Type()
)
mscLpSdhLineErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhLineErroredSec.setStatus("mandatory")
_MscLpSdhLineSevErroredSec_Type = Counter32
_MscLpSdhLineSevErroredSec_Object = MibTableColumn
mscLpSdhLineSevErroredSec = _MscLpSdhLineSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 11),
    _MscLpSdhLineSevErroredSec_Type()
)
mscLpSdhLineSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhLineSevErroredSec.setStatus("mandatory")
_MscLpSdhLineAisSec_Type = Counter32
_MscLpSdhLineAisSec_Object = MibTableColumn
mscLpSdhLineAisSec = _MscLpSdhLineAisSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 12),
    _MscLpSdhLineAisSec_Type()
)
mscLpSdhLineAisSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhLineAisSec.setStatus("mandatory")
_MscLpSdhLineUnavailSec_Type = Counter32
_MscLpSdhLineUnavailSec_Object = MibTableColumn
mscLpSdhLineUnavailSec = _MscLpSdhLineUnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 13),
    _MscLpSdhLineUnavailSec_Type()
)
mscLpSdhLineUnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhLineUnavailSec.setStatus("mandatory")
_MscLpSdhLineFailures_Type = Counter32
_MscLpSdhLineFailures_Object = MibTableColumn
mscLpSdhLineFailures = _MscLpSdhLineFailures_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 14),
    _MscLpSdhLineFailures_Type()
)
mscLpSdhLineFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhLineFailures.setStatus("mandatory")
_MscLpSdhFarEndLineErrorFreeSec_Type = Counter32
_MscLpSdhFarEndLineErrorFreeSec_Object = MibTableColumn
mscLpSdhFarEndLineErrorFreeSec = _MscLpSdhFarEndLineErrorFreeSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 15),
    _MscLpSdhFarEndLineErrorFreeSec_Type()
)
mscLpSdhFarEndLineErrorFreeSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhFarEndLineErrorFreeSec.setStatus("mandatory")
_MscLpSdhFarEndLineCodeViolations_Type = Counter32
_MscLpSdhFarEndLineCodeViolations_Object = MibTableColumn
mscLpSdhFarEndLineCodeViolations = _MscLpSdhFarEndLineCodeViolations_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 16),
    _MscLpSdhFarEndLineCodeViolations_Type()
)
mscLpSdhFarEndLineCodeViolations.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhFarEndLineCodeViolations.setStatus("mandatory")
_MscLpSdhFarEndLineErroredSec_Type = Counter32
_MscLpSdhFarEndLineErroredSec_Object = MibTableColumn
mscLpSdhFarEndLineErroredSec = _MscLpSdhFarEndLineErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 17),
    _MscLpSdhFarEndLineErroredSec_Type()
)
mscLpSdhFarEndLineErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhFarEndLineErroredSec.setStatus("mandatory")
_MscLpSdhFarEndLineSevErroredSec_Type = Counter32
_MscLpSdhFarEndLineSevErroredSec_Object = MibTableColumn
mscLpSdhFarEndLineSevErroredSec = _MscLpSdhFarEndLineSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 18),
    _MscLpSdhFarEndLineSevErroredSec_Type()
)
mscLpSdhFarEndLineSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhFarEndLineSevErroredSec.setStatus("mandatory")
_MscLpSdhFarEndLineAisSec_Type = Counter32
_MscLpSdhFarEndLineAisSec_Object = MibTableColumn
mscLpSdhFarEndLineAisSec = _MscLpSdhFarEndLineAisSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 19),
    _MscLpSdhFarEndLineAisSec_Type()
)
mscLpSdhFarEndLineAisSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhFarEndLineAisSec.setStatus("mandatory")
_MscLpSdhFarEndLineUnavailSec_Type = Counter32
_MscLpSdhFarEndLineUnavailSec_Object = MibTableColumn
mscLpSdhFarEndLineUnavailSec = _MscLpSdhFarEndLineUnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 20),
    _MscLpSdhFarEndLineUnavailSec_Type()
)
mscLpSdhFarEndLineUnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhFarEndLineUnavailSec.setStatus("mandatory")
_MscLpSdhFarEndLineFailures_Type = Counter32
_MscLpSdhFarEndLineFailures_Object = MibTableColumn
mscLpSdhFarEndLineFailures = _MscLpSdhFarEndLineFailures_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 15, 17, 1, 21),
    _MscLpSdhFarEndLineFailures_Type()
)
mscLpSdhFarEndLineFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSdhFarEndLineFailures.setStatus("mandatory")
_MscLpJT2_ObjectIdentity = ObjectIdentity
mscLpJT2 = _MscLpJT2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16)
)
_MscLpJT2RowStatusTable_Object = MibTable
mscLpJT2RowStatusTable = _MscLpJT2RowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 1)
)
if mibBuilder.loadTexts:
    mscLpJT2RowStatusTable.setStatus("mandatory")
_MscLpJT2RowStatusEntry_Object = MibTableRow
mscLpJT2RowStatusEntry = _MscLpJT2RowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 1, 1)
)
mscLpJT2RowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"),
)
if mibBuilder.loadTexts:
    mscLpJT2RowStatusEntry.setStatus("mandatory")
_MscLpJT2RowStatus_Type = RowStatus
_MscLpJT2RowStatus_Object = MibTableColumn
mscLpJT2RowStatus = _MscLpJT2RowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 1, 1, 1),
    _MscLpJT2RowStatus_Type()
)
mscLpJT2RowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpJT2RowStatus.setStatus("mandatory")
_MscLpJT2ComponentName_Type = DisplayString
_MscLpJT2ComponentName_Object = MibTableColumn
mscLpJT2ComponentName = _MscLpJT2ComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 1, 1, 2),
    _MscLpJT2ComponentName_Type()
)
mscLpJT2ComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2ComponentName.setStatus("mandatory")
_MscLpJT2StorageType_Type = StorageType
_MscLpJT2StorageType_Object = MibTableColumn
mscLpJT2StorageType = _MscLpJT2StorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 1, 1, 4),
    _MscLpJT2StorageType_Type()
)
mscLpJT2StorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2StorageType.setStatus("mandatory")


class _MscLpJT2Index_Type(Integer32):
    """Custom type mscLpJT2Index based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_MscLpJT2Index_Type.__name__ = "Integer32"
_MscLpJT2Index_Object = MibTableColumn
mscLpJT2Index = _MscLpJT2Index_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 1, 1, 10),
    _MscLpJT2Index_Type()
)
mscLpJT2Index.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpJT2Index.setStatus("mandatory")
_MscLpJT2Test_ObjectIdentity = ObjectIdentity
mscLpJT2Test = _MscLpJT2Test_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2)
)
_MscLpJT2TestRowStatusTable_Object = MibTable
mscLpJT2TestRowStatusTable = _MscLpJT2TestRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 1)
)
if mibBuilder.loadTexts:
    mscLpJT2TestRowStatusTable.setStatus("mandatory")
_MscLpJT2TestRowStatusEntry_Object = MibTableRow
mscLpJT2TestRowStatusEntry = _MscLpJT2TestRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 1, 1)
)
mscLpJT2TestRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpJT2TestRowStatusEntry.setStatus("mandatory")
_MscLpJT2TestRowStatus_Type = RowStatus
_MscLpJT2TestRowStatus_Object = MibTableColumn
mscLpJT2TestRowStatus = _MscLpJT2TestRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 1, 1, 1),
    _MscLpJT2TestRowStatus_Type()
)
mscLpJT2TestRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2TestRowStatus.setStatus("mandatory")
_MscLpJT2TestComponentName_Type = DisplayString
_MscLpJT2TestComponentName_Object = MibTableColumn
mscLpJT2TestComponentName = _MscLpJT2TestComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 1, 1, 2),
    _MscLpJT2TestComponentName_Type()
)
mscLpJT2TestComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2TestComponentName.setStatus("mandatory")
_MscLpJT2TestStorageType_Type = StorageType
_MscLpJT2TestStorageType_Object = MibTableColumn
mscLpJT2TestStorageType = _MscLpJT2TestStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 1, 1, 4),
    _MscLpJT2TestStorageType_Type()
)
mscLpJT2TestStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2TestStorageType.setStatus("mandatory")
_MscLpJT2TestIndex_Type = NonReplicated
_MscLpJT2TestIndex_Object = MibTableColumn
mscLpJT2TestIndex = _MscLpJT2TestIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 1, 1, 10),
    _MscLpJT2TestIndex_Type()
)
mscLpJT2TestIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpJT2TestIndex.setStatus("mandatory")
_MscLpJT2TestStateTable_Object = MibTable
mscLpJT2TestStateTable = _MscLpJT2TestStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 10)
)
if mibBuilder.loadTexts:
    mscLpJT2TestStateTable.setStatus("mandatory")
_MscLpJT2TestStateEntry_Object = MibTableRow
mscLpJT2TestStateEntry = _MscLpJT2TestStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 10, 1)
)
mscLpJT2TestStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpJT2TestStateEntry.setStatus("mandatory")


class _MscLpJT2TestAdminState_Type(Integer32):
    """Custom type mscLpJT2TestAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpJT2TestAdminState_Type.__name__ = "Integer32"
_MscLpJT2TestAdminState_Object = MibTableColumn
mscLpJT2TestAdminState = _MscLpJT2TestAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 10, 1, 1),
    _MscLpJT2TestAdminState_Type()
)
mscLpJT2TestAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2TestAdminState.setStatus("mandatory")


class _MscLpJT2TestOperationalState_Type(Integer32):
    """Custom type mscLpJT2TestOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpJT2TestOperationalState_Type.__name__ = "Integer32"
_MscLpJT2TestOperationalState_Object = MibTableColumn
mscLpJT2TestOperationalState = _MscLpJT2TestOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 10, 1, 2),
    _MscLpJT2TestOperationalState_Type()
)
mscLpJT2TestOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2TestOperationalState.setStatus("mandatory")


class _MscLpJT2TestUsageState_Type(Integer32):
    """Custom type mscLpJT2TestUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpJT2TestUsageState_Type.__name__ = "Integer32"
_MscLpJT2TestUsageState_Object = MibTableColumn
mscLpJT2TestUsageState = _MscLpJT2TestUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 10, 1, 3),
    _MscLpJT2TestUsageState_Type()
)
mscLpJT2TestUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2TestUsageState.setStatus("mandatory")
_MscLpJT2TestSetupTable_Object = MibTable
mscLpJT2TestSetupTable = _MscLpJT2TestSetupTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 11)
)
if mibBuilder.loadTexts:
    mscLpJT2TestSetupTable.setStatus("mandatory")
_MscLpJT2TestSetupEntry_Object = MibTableRow
mscLpJT2TestSetupEntry = _MscLpJT2TestSetupEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 11, 1)
)
mscLpJT2TestSetupEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpJT2TestSetupEntry.setStatus("mandatory")


class _MscLpJT2TestPurpose_Type(AsciiString):
    """Custom type mscLpJT2TestPurpose based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_MscLpJT2TestPurpose_Type.__name__ = "AsciiString"
_MscLpJT2TestPurpose_Object = MibTableColumn
mscLpJT2TestPurpose = _MscLpJT2TestPurpose_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 11, 1, 1),
    _MscLpJT2TestPurpose_Type()
)
mscLpJT2TestPurpose.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpJT2TestPurpose.setStatus("mandatory")


class _MscLpJT2TestType_Type(Integer32):
    """Custom type mscLpJT2TestType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("card", 0),
          ("externalLoop", 4),
          ("localLoop", 2),
          ("manual", 1),
          ("payloadLoop", 5),
          ("pn127RemoteLoop", 8),
          ("remoteLoop", 3),
          ("remoteLoopThisTrib", 6),
          ("v54RemoteLoop", 7))
    )


_MscLpJT2TestType_Type.__name__ = "Integer32"
_MscLpJT2TestType_Object = MibTableColumn
mscLpJT2TestType = _MscLpJT2TestType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 11, 1, 2),
    _MscLpJT2TestType_Type()
)
mscLpJT2TestType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpJT2TestType.setStatus("mandatory")


class _MscLpJT2TestFrmSize_Type(Unsigned32):
    """Custom type mscLpJT2TestFrmSize based on Unsigned32"""
    defaultValue = 1024

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 4096),
    )


_MscLpJT2TestFrmSize_Type.__name__ = "Unsigned32"
_MscLpJT2TestFrmSize_Object = MibTableColumn
mscLpJT2TestFrmSize = _MscLpJT2TestFrmSize_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 11, 1, 3),
    _MscLpJT2TestFrmSize_Type()
)
mscLpJT2TestFrmSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpJT2TestFrmSize.setStatus("mandatory")


class _MscLpJT2TestFrmPatternType_Type(Integer32):
    """Custom type mscLpJT2TestFrmPatternType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ccitt32kBitPattern", 0),
          ("ccitt8MBitPattern", 1),
          ("customizedPattern", 2))
    )


_MscLpJT2TestFrmPatternType_Type.__name__ = "Integer32"
_MscLpJT2TestFrmPatternType_Object = MibTableColumn
mscLpJT2TestFrmPatternType = _MscLpJT2TestFrmPatternType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 11, 1, 4),
    _MscLpJT2TestFrmPatternType_Type()
)
mscLpJT2TestFrmPatternType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpJT2TestFrmPatternType.setStatus("mandatory")


class _MscLpJT2TestCustomizedPattern_Type(Hex):
    """Custom type mscLpJT2TestCustomizedPattern based on Hex"""
    defaultValue = 1431655765

    subtypeSpec = Hex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpJT2TestCustomizedPattern_Type.__name__ = "Hex"
_MscLpJT2TestCustomizedPattern_Object = MibTableColumn
mscLpJT2TestCustomizedPattern = _MscLpJT2TestCustomizedPattern_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 11, 1, 5),
    _MscLpJT2TestCustomizedPattern_Type()
)
mscLpJT2TestCustomizedPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpJT2TestCustomizedPattern.setStatus("mandatory")


class _MscLpJT2TestDataStartDelay_Type(Unsigned32):
    """Custom type mscLpJT2TestDataStartDelay based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1814400),
    )


_MscLpJT2TestDataStartDelay_Type.__name__ = "Unsigned32"
_MscLpJT2TestDataStartDelay_Object = MibTableColumn
mscLpJT2TestDataStartDelay = _MscLpJT2TestDataStartDelay_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 11, 1, 6),
    _MscLpJT2TestDataStartDelay_Type()
)
mscLpJT2TestDataStartDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpJT2TestDataStartDelay.setStatus("mandatory")


class _MscLpJT2TestDisplayInterval_Type(Unsigned32):
    """Custom type mscLpJT2TestDisplayInterval based on Unsigned32"""
    defaultValue = 5

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30240),
    )


_MscLpJT2TestDisplayInterval_Type.__name__ = "Unsigned32"
_MscLpJT2TestDisplayInterval_Object = MibTableColumn
mscLpJT2TestDisplayInterval = _MscLpJT2TestDisplayInterval_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 11, 1, 7),
    _MscLpJT2TestDisplayInterval_Type()
)
mscLpJT2TestDisplayInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpJT2TestDisplayInterval.setStatus("mandatory")


class _MscLpJT2TestDuration_Type(Unsigned32):
    """Custom type mscLpJT2TestDuration based on Unsigned32"""
    defaultValue = 1

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30240),
    )


_MscLpJT2TestDuration_Type.__name__ = "Unsigned32"
_MscLpJT2TestDuration_Object = MibTableColumn
mscLpJT2TestDuration = _MscLpJT2TestDuration_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 11, 1, 8),
    _MscLpJT2TestDuration_Type()
)
mscLpJT2TestDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpJT2TestDuration.setStatus("mandatory")
_MscLpJT2TestResultsTable_Object = MibTable
mscLpJT2TestResultsTable = _MscLpJT2TestResultsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12)
)
if mibBuilder.loadTexts:
    mscLpJT2TestResultsTable.setStatus("mandatory")
_MscLpJT2TestResultsEntry_Object = MibTableRow
mscLpJT2TestResultsEntry = _MscLpJT2TestResultsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1)
)
mscLpJT2TestResultsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2TestIndex"),
)
if mibBuilder.loadTexts:
    mscLpJT2TestResultsEntry.setStatus("mandatory")
_MscLpJT2TestElapsedTime_Type = Counter32
_MscLpJT2TestElapsedTime_Object = MibTableColumn
mscLpJT2TestElapsedTime = _MscLpJT2TestElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1, 1),
    _MscLpJT2TestElapsedTime_Type()
)
mscLpJT2TestElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2TestElapsedTime.setStatus("mandatory")


class _MscLpJT2TestTimeRemaining_Type(Unsigned32):
    """Custom type mscLpJT2TestTimeRemaining based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpJT2TestTimeRemaining_Type.__name__ = "Unsigned32"
_MscLpJT2TestTimeRemaining_Object = MibTableColumn
mscLpJT2TestTimeRemaining = _MscLpJT2TestTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1, 2),
    _MscLpJT2TestTimeRemaining_Type()
)
mscLpJT2TestTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2TestTimeRemaining.setStatus("mandatory")


class _MscLpJT2TestCauseOfTermination_Type(Integer32):
    """Custom type mscLpJT2TestCauseOfTermination based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("hardwareReconfigured", 5),
          ("loopCodeSyncFailed", 6),
          ("neverStarted", 3),
          ("patternSyncFailed", 7),
          ("patternSyncLost", 8),
          ("stoppedByOperator", 1),
          ("testRunning", 4),
          ("testTimeExpired", 0),
          ("unknown", 2))
    )


_MscLpJT2TestCauseOfTermination_Type.__name__ = "Integer32"
_MscLpJT2TestCauseOfTermination_Object = MibTableColumn
mscLpJT2TestCauseOfTermination = _MscLpJT2TestCauseOfTermination_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1, 3),
    _MscLpJT2TestCauseOfTermination_Type()
)
mscLpJT2TestCauseOfTermination.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2TestCauseOfTermination.setStatus("mandatory")
_MscLpJT2TestBitsTx_Type = PassportCounter64
_MscLpJT2TestBitsTx_Object = MibTableColumn
mscLpJT2TestBitsTx = _MscLpJT2TestBitsTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1, 4),
    _MscLpJT2TestBitsTx_Type()
)
mscLpJT2TestBitsTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2TestBitsTx.setStatus("mandatory")
_MscLpJT2TestBytesTx_Type = PassportCounter64
_MscLpJT2TestBytesTx_Object = MibTableColumn
mscLpJT2TestBytesTx = _MscLpJT2TestBytesTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1, 5),
    _MscLpJT2TestBytesTx_Type()
)
mscLpJT2TestBytesTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2TestBytesTx.setStatus("mandatory")
_MscLpJT2TestFrmTx_Type = PassportCounter64
_MscLpJT2TestFrmTx_Object = MibTableColumn
mscLpJT2TestFrmTx = _MscLpJT2TestFrmTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1, 6),
    _MscLpJT2TestFrmTx_Type()
)
mscLpJT2TestFrmTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2TestFrmTx.setStatus("mandatory")
_MscLpJT2TestBitsRx_Type = PassportCounter64
_MscLpJT2TestBitsRx_Object = MibTableColumn
mscLpJT2TestBitsRx = _MscLpJT2TestBitsRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1, 7),
    _MscLpJT2TestBitsRx_Type()
)
mscLpJT2TestBitsRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2TestBitsRx.setStatus("mandatory")
_MscLpJT2TestBytesRx_Type = PassportCounter64
_MscLpJT2TestBytesRx_Object = MibTableColumn
mscLpJT2TestBytesRx = _MscLpJT2TestBytesRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1, 8),
    _MscLpJT2TestBytesRx_Type()
)
mscLpJT2TestBytesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2TestBytesRx.setStatus("mandatory")
_MscLpJT2TestFrmRx_Type = PassportCounter64
_MscLpJT2TestFrmRx_Object = MibTableColumn
mscLpJT2TestFrmRx = _MscLpJT2TestFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1, 9),
    _MscLpJT2TestFrmRx_Type()
)
mscLpJT2TestFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2TestFrmRx.setStatus("mandatory")
_MscLpJT2TestErroredFrmRx_Type = PassportCounter64
_MscLpJT2TestErroredFrmRx_Object = MibTableColumn
mscLpJT2TestErroredFrmRx = _MscLpJT2TestErroredFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1, 10),
    _MscLpJT2TestErroredFrmRx_Type()
)
mscLpJT2TestErroredFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2TestErroredFrmRx.setStatus("mandatory")


class _MscLpJT2TestBitErrorRate_Type(AsciiString):
    """Custom type mscLpJT2TestBitErrorRate based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )


_MscLpJT2TestBitErrorRate_Type.__name__ = "AsciiString"
_MscLpJT2TestBitErrorRate_Object = MibTableColumn
mscLpJT2TestBitErrorRate = _MscLpJT2TestBitErrorRate_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 2, 12, 1, 11),
    _MscLpJT2TestBitErrorRate_Type()
)
mscLpJT2TestBitErrorRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2TestBitErrorRate.setStatus("mandatory")
_MscLpJT2Cell_ObjectIdentity = ObjectIdentity
mscLpJT2Cell = _MscLpJT2Cell_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3)
)
_MscLpJT2CellRowStatusTable_Object = MibTable
mscLpJT2CellRowStatusTable = _MscLpJT2CellRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 1)
)
if mibBuilder.loadTexts:
    mscLpJT2CellRowStatusTable.setStatus("mandatory")
_MscLpJT2CellRowStatusEntry_Object = MibTableRow
mscLpJT2CellRowStatusEntry = _MscLpJT2CellRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 1, 1)
)
mscLpJT2CellRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2CellIndex"),
)
if mibBuilder.loadTexts:
    mscLpJT2CellRowStatusEntry.setStatus("mandatory")
_MscLpJT2CellRowStatus_Type = RowStatus
_MscLpJT2CellRowStatus_Object = MibTableColumn
mscLpJT2CellRowStatus = _MscLpJT2CellRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 1, 1, 1),
    _MscLpJT2CellRowStatus_Type()
)
mscLpJT2CellRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2CellRowStatus.setStatus("mandatory")
_MscLpJT2CellComponentName_Type = DisplayString
_MscLpJT2CellComponentName_Object = MibTableColumn
mscLpJT2CellComponentName = _MscLpJT2CellComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 1, 1, 2),
    _MscLpJT2CellComponentName_Type()
)
mscLpJT2CellComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2CellComponentName.setStatus("mandatory")
_MscLpJT2CellStorageType_Type = StorageType
_MscLpJT2CellStorageType_Object = MibTableColumn
mscLpJT2CellStorageType = _MscLpJT2CellStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 1, 1, 4),
    _MscLpJT2CellStorageType_Type()
)
mscLpJT2CellStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2CellStorageType.setStatus("mandatory")
_MscLpJT2CellIndex_Type = NonReplicated
_MscLpJT2CellIndex_Object = MibTableColumn
mscLpJT2CellIndex = _MscLpJT2CellIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 1, 1, 10),
    _MscLpJT2CellIndex_Type()
)
mscLpJT2CellIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpJT2CellIndex.setStatus("mandatory")
_MscLpJT2CellProvTable_Object = MibTable
mscLpJT2CellProvTable = _MscLpJT2CellProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 10)
)
if mibBuilder.loadTexts:
    mscLpJT2CellProvTable.setStatus("mandatory")
_MscLpJT2CellProvEntry_Object = MibTableRow
mscLpJT2CellProvEntry = _MscLpJT2CellProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 10, 1)
)
mscLpJT2CellProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2CellIndex"),
)
if mibBuilder.loadTexts:
    mscLpJT2CellProvEntry.setStatus("mandatory")


class _MscLpJT2CellAlarmActDelay_Type(Unsigned32):
    """Custom type mscLpJT2CellAlarmActDelay based on Unsigned32"""
    defaultValue = 500

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2000),
    )


_MscLpJT2CellAlarmActDelay_Type.__name__ = "Unsigned32"
_MscLpJT2CellAlarmActDelay_Object = MibTableColumn
mscLpJT2CellAlarmActDelay = _MscLpJT2CellAlarmActDelay_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 10, 1, 1),
    _MscLpJT2CellAlarmActDelay_Type()
)
mscLpJT2CellAlarmActDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpJT2CellAlarmActDelay.setStatus("mandatory")


class _MscLpJT2CellScrambleCellPayload_Type(Integer32):
    """Custom type mscLpJT2CellScrambleCellPayload based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpJT2CellScrambleCellPayload_Type.__name__ = "Integer32"
_MscLpJT2CellScrambleCellPayload_Object = MibTableColumn
mscLpJT2CellScrambleCellPayload = _MscLpJT2CellScrambleCellPayload_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 10, 1, 2),
    _MscLpJT2CellScrambleCellPayload_Type()
)
mscLpJT2CellScrambleCellPayload.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpJT2CellScrambleCellPayload.setStatus("mandatory")


class _MscLpJT2CellCorrectSingleBitHeaderErrors_Type(Integer32):
    """Custom type mscLpJT2CellCorrectSingleBitHeaderErrors based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 0),
          ("on", 1))
    )


_MscLpJT2CellCorrectSingleBitHeaderErrors_Type.__name__ = "Integer32"
_MscLpJT2CellCorrectSingleBitHeaderErrors_Object = MibTableColumn
mscLpJT2CellCorrectSingleBitHeaderErrors = _MscLpJT2CellCorrectSingleBitHeaderErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 10, 1, 3),
    _MscLpJT2CellCorrectSingleBitHeaderErrors_Type()
)
mscLpJT2CellCorrectSingleBitHeaderErrors.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpJT2CellCorrectSingleBitHeaderErrors.setStatus("mandatory")
_MscLpJT2CellOperTable_Object = MibTable
mscLpJT2CellOperTable = _MscLpJT2CellOperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 11)
)
if mibBuilder.loadTexts:
    mscLpJT2CellOperTable.setStatus("mandatory")
_MscLpJT2CellOperEntry_Object = MibTableRow
mscLpJT2CellOperEntry = _MscLpJT2CellOperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 11, 1)
)
mscLpJT2CellOperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2CellIndex"),
)
if mibBuilder.loadTexts:
    mscLpJT2CellOperEntry.setStatus("mandatory")


class _MscLpJT2CellLcdAlarm_Type(Integer32):
    """Custom type mscLpJT2CellLcdAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpJT2CellLcdAlarm_Type.__name__ = "Integer32"
_MscLpJT2CellLcdAlarm_Object = MibTableColumn
mscLpJT2CellLcdAlarm = _MscLpJT2CellLcdAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 11, 1, 1),
    _MscLpJT2CellLcdAlarm_Type()
)
mscLpJT2CellLcdAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2CellLcdAlarm.setStatus("mandatory")
_MscLpJT2CellStatsTable_Object = MibTable
mscLpJT2CellStatsTable = _MscLpJT2CellStatsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 12)
)
if mibBuilder.loadTexts:
    mscLpJT2CellStatsTable.setStatus("mandatory")
_MscLpJT2CellStatsEntry_Object = MibTableRow
mscLpJT2CellStatsEntry = _MscLpJT2CellStatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 12, 1)
)
mscLpJT2CellStatsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2CellIndex"),
)
if mibBuilder.loadTexts:
    mscLpJT2CellStatsEntry.setStatus("mandatory")
_MscLpJT2CellUncorrectableHecErrors_Type = Counter32
_MscLpJT2CellUncorrectableHecErrors_Object = MibTableColumn
mscLpJT2CellUncorrectableHecErrors = _MscLpJT2CellUncorrectableHecErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 12, 1, 1),
    _MscLpJT2CellUncorrectableHecErrors_Type()
)
mscLpJT2CellUncorrectableHecErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2CellUncorrectableHecErrors.setStatus("mandatory")
_MscLpJT2CellSevErroredSec_Type = Counter32
_MscLpJT2CellSevErroredSec_Object = MibTableColumn
mscLpJT2CellSevErroredSec = _MscLpJT2CellSevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 12, 1, 2),
    _MscLpJT2CellSevErroredSec_Type()
)
mscLpJT2CellSevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2CellSevErroredSec.setStatus("mandatory")


class _MscLpJT2CellReceiveCellUtilization_Type(Gauge32):
    """Custom type mscLpJT2CellReceiveCellUtilization based on Gauge32"""
    defaultValue = 0

    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_MscLpJT2CellReceiveCellUtilization_Type.__name__ = "Gauge32"
_MscLpJT2CellReceiveCellUtilization_Object = MibTableColumn
mscLpJT2CellReceiveCellUtilization = _MscLpJT2CellReceiveCellUtilization_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 12, 1, 3),
    _MscLpJT2CellReceiveCellUtilization_Type()
)
mscLpJT2CellReceiveCellUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2CellReceiveCellUtilization.setStatus("mandatory")


class _MscLpJT2CellTransmitCellUtilization_Type(Gauge32):
    """Custom type mscLpJT2CellTransmitCellUtilization based on Gauge32"""
    defaultValue = 0

    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_MscLpJT2CellTransmitCellUtilization_Type.__name__ = "Gauge32"
_MscLpJT2CellTransmitCellUtilization_Object = MibTableColumn
mscLpJT2CellTransmitCellUtilization = _MscLpJT2CellTransmitCellUtilization_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 12, 1, 4),
    _MscLpJT2CellTransmitCellUtilization_Type()
)
mscLpJT2CellTransmitCellUtilization.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2CellTransmitCellUtilization.setStatus("mandatory")
_MscLpJT2CellCorrectableHeaderErrors_Type = Counter32
_MscLpJT2CellCorrectableHeaderErrors_Object = MibTableColumn
mscLpJT2CellCorrectableHeaderErrors = _MscLpJT2CellCorrectableHeaderErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 3, 12, 1, 5),
    _MscLpJT2CellCorrectableHeaderErrors_Type()
)
mscLpJT2CellCorrectableHeaderErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2CellCorrectableHeaderErrors.setStatus("mandatory")
_MscLpJT2CidDataTable_Object = MibTable
mscLpJT2CidDataTable = _MscLpJT2CidDataTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 10)
)
if mibBuilder.loadTexts:
    mscLpJT2CidDataTable.setStatus("mandatory")
_MscLpJT2CidDataEntry_Object = MibTableRow
mscLpJT2CidDataEntry = _MscLpJT2CidDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 10, 1)
)
mscLpJT2CidDataEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"),
)
if mibBuilder.loadTexts:
    mscLpJT2CidDataEntry.setStatus("mandatory")


class _MscLpJT2CustomerIdentifier_Type(Unsigned32):
    """Custom type mscLpJT2CustomerIdentifier based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 8191),
    )


_MscLpJT2CustomerIdentifier_Type.__name__ = "Unsigned32"
_MscLpJT2CustomerIdentifier_Object = MibTableColumn
mscLpJT2CustomerIdentifier = _MscLpJT2CustomerIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 10, 1, 1),
    _MscLpJT2CustomerIdentifier_Type()
)
mscLpJT2CustomerIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpJT2CustomerIdentifier.setStatus("mandatory")
_MscLpJT2ProvTable_Object = MibTable
mscLpJT2ProvTable = _MscLpJT2ProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 11)
)
if mibBuilder.loadTexts:
    mscLpJT2ProvTable.setStatus("mandatory")
_MscLpJT2ProvEntry_Object = MibTableRow
mscLpJT2ProvEntry = _MscLpJT2ProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 11, 1)
)
mscLpJT2ProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"),
)
if mibBuilder.loadTexts:
    mscLpJT2ProvEntry.setStatus("mandatory")


class _MscLpJT2ClockingSource_Type(Integer32):
    """Custom type mscLpJT2ClockingSource based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              4)
        )
    )
    namedValues = NamedValues(
        *(("line", 1),
          ("local", 0),
          ("module", 2),
          ("otherPort", 4))
    )


_MscLpJT2ClockingSource_Type.__name__ = "Integer32"
_MscLpJT2ClockingSource_Object = MibTableColumn
mscLpJT2ClockingSource = _MscLpJT2ClockingSource_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 11, 1, 1),
    _MscLpJT2ClockingSource_Type()
)
mscLpJT2ClockingSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpJT2ClockingSource.setStatus("mandatory")


class _MscLpJT2LineLength_Type(Unsigned32):
    """Custom type mscLpJT2LineLength based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 480),
    )


_MscLpJT2LineLength_Type.__name__ = "Unsigned32"
_MscLpJT2LineLength_Object = MibTableColumn
mscLpJT2LineLength = _MscLpJT2LineLength_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 11, 1, 2),
    _MscLpJT2LineLength_Type()
)
mscLpJT2LineLength.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpJT2LineLength.setStatus("mandatory")
_MscLpJT2ApplicationFramerName_Type = Link
_MscLpJT2ApplicationFramerName_Object = MibTableColumn
mscLpJT2ApplicationFramerName = _MscLpJT2ApplicationFramerName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 11, 1, 3),
    _MscLpJT2ApplicationFramerName_Type()
)
mscLpJT2ApplicationFramerName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpJT2ApplicationFramerName.setStatus("mandatory")
_MscLpJT2IfEntryTable_Object = MibTable
mscLpJT2IfEntryTable = _MscLpJT2IfEntryTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 12)
)
if mibBuilder.loadTexts:
    mscLpJT2IfEntryTable.setStatus("mandatory")
_MscLpJT2IfEntryEntry_Object = MibTableRow
mscLpJT2IfEntryEntry = _MscLpJT2IfEntryEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 12, 1)
)
mscLpJT2IfEntryEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"),
)
if mibBuilder.loadTexts:
    mscLpJT2IfEntryEntry.setStatus("mandatory")


class _MscLpJT2IfAdminStatus_Type(Integer32):
    """Custom type mscLpJT2IfAdminStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpJT2IfAdminStatus_Type.__name__ = "Integer32"
_MscLpJT2IfAdminStatus_Object = MibTableColumn
mscLpJT2IfAdminStatus = _MscLpJT2IfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 12, 1, 1),
    _MscLpJT2IfAdminStatus_Type()
)
mscLpJT2IfAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpJT2IfAdminStatus.setStatus("mandatory")


class _MscLpJT2IfIndex_Type(InterfaceIndex):
    """Custom type mscLpJT2IfIndex based on InterfaceIndex"""
    subtypeSpec = InterfaceIndex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_MscLpJT2IfIndex_Type.__name__ = "InterfaceIndex"
_MscLpJT2IfIndex_Object = MibTableColumn
mscLpJT2IfIndex = _MscLpJT2IfIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 12, 1, 2),
    _MscLpJT2IfIndex_Type()
)
mscLpJT2IfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2IfIndex.setStatus("mandatory")
_MscLpJT2OperStatusTable_Object = MibTable
mscLpJT2OperStatusTable = _MscLpJT2OperStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 13)
)
if mibBuilder.loadTexts:
    mscLpJT2OperStatusTable.setStatus("mandatory")
_MscLpJT2OperStatusEntry_Object = MibTableRow
mscLpJT2OperStatusEntry = _MscLpJT2OperStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 13, 1)
)
mscLpJT2OperStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"),
)
if mibBuilder.loadTexts:
    mscLpJT2OperStatusEntry.setStatus("mandatory")


class _MscLpJT2SnmpOperStatus_Type(Integer32):
    """Custom type mscLpJT2SnmpOperStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpJT2SnmpOperStatus_Type.__name__ = "Integer32"
_MscLpJT2SnmpOperStatus_Object = MibTableColumn
mscLpJT2SnmpOperStatus = _MscLpJT2SnmpOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 13, 1, 1),
    _MscLpJT2SnmpOperStatus_Type()
)
mscLpJT2SnmpOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2SnmpOperStatus.setStatus("mandatory")
_MscLpJT2StateTable_Object = MibTable
mscLpJT2StateTable = _MscLpJT2StateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 14)
)
if mibBuilder.loadTexts:
    mscLpJT2StateTable.setStatus("mandatory")
_MscLpJT2StateEntry_Object = MibTableRow
mscLpJT2StateEntry = _MscLpJT2StateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 14, 1)
)
mscLpJT2StateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"),
)
if mibBuilder.loadTexts:
    mscLpJT2StateEntry.setStatus("mandatory")


class _MscLpJT2AdminState_Type(Integer32):
    """Custom type mscLpJT2AdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpJT2AdminState_Type.__name__ = "Integer32"
_MscLpJT2AdminState_Object = MibTableColumn
mscLpJT2AdminState = _MscLpJT2AdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 14, 1, 1),
    _MscLpJT2AdminState_Type()
)
mscLpJT2AdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2AdminState.setStatus("mandatory")


class _MscLpJT2OperationalState_Type(Integer32):
    """Custom type mscLpJT2OperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpJT2OperationalState_Type.__name__ = "Integer32"
_MscLpJT2OperationalState_Object = MibTableColumn
mscLpJT2OperationalState = _MscLpJT2OperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 14, 1, 2),
    _MscLpJT2OperationalState_Type()
)
mscLpJT2OperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2OperationalState.setStatus("mandatory")


class _MscLpJT2UsageState_Type(Integer32):
    """Custom type mscLpJT2UsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpJT2UsageState_Type.__name__ = "Integer32"
_MscLpJT2UsageState_Object = MibTableColumn
mscLpJT2UsageState = _MscLpJT2UsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 14, 1, 3),
    _MscLpJT2UsageState_Type()
)
mscLpJT2UsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2UsageState.setStatus("mandatory")


class _MscLpJT2AvailabilityStatus_Type(OctetString):
    """Custom type mscLpJT2AvailabilityStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_MscLpJT2AvailabilityStatus_Type.__name__ = "OctetString"
_MscLpJT2AvailabilityStatus_Object = MibTableColumn
mscLpJT2AvailabilityStatus = _MscLpJT2AvailabilityStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 14, 1, 4),
    _MscLpJT2AvailabilityStatus_Type()
)
mscLpJT2AvailabilityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2AvailabilityStatus.setStatus("mandatory")


class _MscLpJT2ProceduralStatus_Type(OctetString):
    """Custom type mscLpJT2ProceduralStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpJT2ProceduralStatus_Type.__name__ = "OctetString"
_MscLpJT2ProceduralStatus_Object = MibTableColumn
mscLpJT2ProceduralStatus = _MscLpJT2ProceduralStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 14, 1, 5),
    _MscLpJT2ProceduralStatus_Type()
)
mscLpJT2ProceduralStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2ProceduralStatus.setStatus("mandatory")


class _MscLpJT2ControlStatus_Type(OctetString):
    """Custom type mscLpJT2ControlStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpJT2ControlStatus_Type.__name__ = "OctetString"
_MscLpJT2ControlStatus_Object = MibTableColumn
mscLpJT2ControlStatus = _MscLpJT2ControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 14, 1, 6),
    _MscLpJT2ControlStatus_Type()
)
mscLpJT2ControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2ControlStatus.setStatus("mandatory")


class _MscLpJT2AlarmStatus_Type(OctetString):
    """Custom type mscLpJT2AlarmStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpJT2AlarmStatus_Type.__name__ = "OctetString"
_MscLpJT2AlarmStatus_Object = MibTableColumn
mscLpJT2AlarmStatus = _MscLpJT2AlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 14, 1, 7),
    _MscLpJT2AlarmStatus_Type()
)
mscLpJT2AlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2AlarmStatus.setStatus("mandatory")


class _MscLpJT2StandbyStatus_Type(Integer32):
    """Custom type mscLpJT2StandbyStatus based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              15)
        )
    )
    namedValues = NamedValues(
        *(("coldStandby", 1),
          ("hotStandby", 0),
          ("notSet", 15),
          ("providingService", 2))
    )


_MscLpJT2StandbyStatus_Type.__name__ = "Integer32"
_MscLpJT2StandbyStatus_Object = MibTableColumn
mscLpJT2StandbyStatus = _MscLpJT2StandbyStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 14, 1, 8),
    _MscLpJT2StandbyStatus_Type()
)
mscLpJT2StandbyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2StandbyStatus.setStatus("mandatory")


class _MscLpJT2UnknownStatus_Type(Integer32):
    """Custom type mscLpJT2UnknownStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_MscLpJT2UnknownStatus_Type.__name__ = "Integer32"
_MscLpJT2UnknownStatus_Object = MibTableColumn
mscLpJT2UnknownStatus = _MscLpJT2UnknownStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 14, 1, 9),
    _MscLpJT2UnknownStatus_Type()
)
mscLpJT2UnknownStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2UnknownStatus.setStatus("mandatory")
_MscLpJT2OperTable_Object = MibTable
mscLpJT2OperTable = _MscLpJT2OperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 15)
)
if mibBuilder.loadTexts:
    mscLpJT2OperTable.setStatus("mandatory")
_MscLpJT2OperEntry_Object = MibTableRow
mscLpJT2OperEntry = _MscLpJT2OperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 15, 1)
)
mscLpJT2OperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"),
)
if mibBuilder.loadTexts:
    mscLpJT2OperEntry.setStatus("mandatory")


class _MscLpJT2LosAlarm_Type(Integer32):
    """Custom type mscLpJT2LosAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpJT2LosAlarm_Type.__name__ = "Integer32"
_MscLpJT2LosAlarm_Object = MibTableColumn
mscLpJT2LosAlarm = _MscLpJT2LosAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 15, 1, 1),
    _MscLpJT2LosAlarm_Type()
)
mscLpJT2LosAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2LosAlarm.setStatus("mandatory")


class _MscLpJT2LofAlarm_Type(Integer32):
    """Custom type mscLpJT2LofAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpJT2LofAlarm_Type.__name__ = "Integer32"
_MscLpJT2LofAlarm_Object = MibTableColumn
mscLpJT2LofAlarm = _MscLpJT2LofAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 15, 1, 2),
    _MscLpJT2LofAlarm_Type()
)
mscLpJT2LofAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2LofAlarm.setStatus("mandatory")


class _MscLpJT2RxAisPhysicalAlarm_Type(Integer32):
    """Custom type mscLpJT2RxAisPhysicalAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpJT2RxAisPhysicalAlarm_Type.__name__ = "Integer32"
_MscLpJT2RxAisPhysicalAlarm_Object = MibTableColumn
mscLpJT2RxAisPhysicalAlarm = _MscLpJT2RxAisPhysicalAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 15, 1, 3),
    _MscLpJT2RxAisPhysicalAlarm_Type()
)
mscLpJT2RxAisPhysicalAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2RxAisPhysicalAlarm.setStatus("mandatory")


class _MscLpJT2RxAisPayloadAlarm_Type(Integer32):
    """Custom type mscLpJT2RxAisPayloadAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpJT2RxAisPayloadAlarm_Type.__name__ = "Integer32"
_MscLpJT2RxAisPayloadAlarm_Object = MibTableColumn
mscLpJT2RxAisPayloadAlarm = _MscLpJT2RxAisPayloadAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 15, 1, 4),
    _MscLpJT2RxAisPayloadAlarm_Type()
)
mscLpJT2RxAisPayloadAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2RxAisPayloadAlarm.setStatus("mandatory")


class _MscLpJT2RxRaiAlarm_Type(Integer32):
    """Custom type mscLpJT2RxRaiAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpJT2RxRaiAlarm_Type.__name__ = "Integer32"
_MscLpJT2RxRaiAlarm_Object = MibTableColumn
mscLpJT2RxRaiAlarm = _MscLpJT2RxRaiAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 15, 1, 5),
    _MscLpJT2RxRaiAlarm_Type()
)
mscLpJT2RxRaiAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2RxRaiAlarm.setStatus("mandatory")


class _MscLpJT2TxAisPhysicalAlarm_Type(Integer32):
    """Custom type mscLpJT2TxAisPhysicalAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpJT2TxAisPhysicalAlarm_Type.__name__ = "Integer32"
_MscLpJT2TxAisPhysicalAlarm_Object = MibTableColumn
mscLpJT2TxAisPhysicalAlarm = _MscLpJT2TxAisPhysicalAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 15, 1, 6),
    _MscLpJT2TxAisPhysicalAlarm_Type()
)
mscLpJT2TxAisPhysicalAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2TxAisPhysicalAlarm.setStatus("mandatory")


class _MscLpJT2TxRaiAlarm_Type(Integer32):
    """Custom type mscLpJT2TxRaiAlarm based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 0))
    )


_MscLpJT2TxRaiAlarm_Type.__name__ = "Integer32"
_MscLpJT2TxRaiAlarm_Object = MibTableColumn
mscLpJT2TxRaiAlarm = _MscLpJT2TxRaiAlarm_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 15, 1, 7),
    _MscLpJT2TxRaiAlarm_Type()
)
mscLpJT2TxRaiAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2TxRaiAlarm.setStatus("mandatory")
_MscLpJT2StatsTable_Object = MibTable
mscLpJT2StatsTable = _MscLpJT2StatsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16)
)
if mibBuilder.loadTexts:
    mscLpJT2StatsTable.setStatus("mandatory")
_MscLpJT2StatsEntry_Object = MibTableRow
mscLpJT2StatsEntry = _MscLpJT2StatsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16, 1)
)
mscLpJT2StatsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"),
)
if mibBuilder.loadTexts:
    mscLpJT2StatsEntry.setStatus("mandatory")
_MscLpJT2RunningTime_Type = Counter32
_MscLpJT2RunningTime_Object = MibTableColumn
mscLpJT2RunningTime = _MscLpJT2RunningTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16, 1, 1),
    _MscLpJT2RunningTime_Type()
)
mscLpJT2RunningTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2RunningTime.setStatus("mandatory")
_MscLpJT2ErrorFreeSec_Type = Counter32
_MscLpJT2ErrorFreeSec_Object = MibTableColumn
mscLpJT2ErrorFreeSec = _MscLpJT2ErrorFreeSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16, 1, 2),
    _MscLpJT2ErrorFreeSec_Type()
)
mscLpJT2ErrorFreeSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2ErrorFreeSec.setStatus("mandatory")
_MscLpJT2ErroredSec_Type = Counter32
_MscLpJT2ErroredSec_Object = MibTableColumn
mscLpJT2ErroredSec = _MscLpJT2ErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16, 1, 3),
    _MscLpJT2ErroredSec_Type()
)
mscLpJT2ErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2ErroredSec.setStatus("mandatory")
_MscLpJT2SevErroredSec_Type = Counter32
_MscLpJT2SevErroredSec_Object = MibTableColumn
mscLpJT2SevErroredSec = _MscLpJT2SevErroredSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16, 1, 4),
    _MscLpJT2SevErroredSec_Type()
)
mscLpJT2SevErroredSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2SevErroredSec.setStatus("mandatory")
_MscLpJT2SevErroredFrmSec_Type = Counter32
_MscLpJT2SevErroredFrmSec_Object = MibTableColumn
mscLpJT2SevErroredFrmSec = _MscLpJT2SevErroredFrmSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16, 1, 5),
    _MscLpJT2SevErroredFrmSec_Type()
)
mscLpJT2SevErroredFrmSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2SevErroredFrmSec.setStatus("mandatory")
_MscLpJT2UnavailSec_Type = Counter32
_MscLpJT2UnavailSec_Object = MibTableColumn
mscLpJT2UnavailSec = _MscLpJT2UnavailSec_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16, 1, 6),
    _MscLpJT2UnavailSec_Type()
)
mscLpJT2UnavailSec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2UnavailSec.setStatus("mandatory")
_MscLpJT2BpvErrors_Type = Counter32
_MscLpJT2BpvErrors_Object = MibTableColumn
mscLpJT2BpvErrors = _MscLpJT2BpvErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16, 1, 7),
    _MscLpJT2BpvErrors_Type()
)
mscLpJT2BpvErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2BpvErrors.setStatus("mandatory")
_MscLpJT2CrcErrors_Type = Counter32
_MscLpJT2CrcErrors_Object = MibTableColumn
mscLpJT2CrcErrors = _MscLpJT2CrcErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16, 1, 8),
    _MscLpJT2CrcErrors_Type()
)
mscLpJT2CrcErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2CrcErrors.setStatus("mandatory")
_MscLpJT2FrameErrors_Type = Counter32
_MscLpJT2FrameErrors_Object = MibTableColumn
mscLpJT2FrameErrors = _MscLpJT2FrameErrors_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16, 1, 9),
    _MscLpJT2FrameErrors_Type()
)
mscLpJT2FrameErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2FrameErrors.setStatus("mandatory")
_MscLpJT2LosStateChanges_Type = Counter32
_MscLpJT2LosStateChanges_Object = MibTableColumn
mscLpJT2LosStateChanges = _MscLpJT2LosStateChanges_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 16, 1, 10),
    _MscLpJT2LosStateChanges_Type()
)
mscLpJT2LosStateChanges.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpJT2LosStateChanges.setStatus("mandatory")
_MscLpJT2AdminInfoTable_Object = MibTable
mscLpJT2AdminInfoTable = _MscLpJT2AdminInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 17)
)
if mibBuilder.loadTexts:
    mscLpJT2AdminInfoTable.setStatus("mandatory")
_MscLpJT2AdminInfoEntry_Object = MibTableRow
mscLpJT2AdminInfoEntry = _MscLpJT2AdminInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 17, 1)
)
mscLpJT2AdminInfoEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpJT2Index"),
)
if mibBuilder.loadTexts:
    mscLpJT2AdminInfoEntry.setStatus("mandatory")


class _MscLpJT2Vendor_Type(AsciiString):
    """Custom type mscLpJT2Vendor based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_MscLpJT2Vendor_Type.__name__ = "AsciiString"
_MscLpJT2Vendor_Object = MibTableColumn
mscLpJT2Vendor = _MscLpJT2Vendor_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 17, 1, 1),
    _MscLpJT2Vendor_Type()
)
mscLpJT2Vendor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpJT2Vendor.setStatus("mandatory")


class _MscLpJT2CommentText_Type(AsciiString):
    """Custom type mscLpJT2CommentText based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 60),
    )


_MscLpJT2CommentText_Type.__name__ = "AsciiString"
_MscLpJT2CommentText_Object = MibTableColumn
mscLpJT2CommentText = _MscLpJT2CommentText_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 16, 17, 1, 2),
    _MscLpJT2CommentText_Type()
)
mscLpJT2CommentText.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpJT2CommentText.setStatus("mandatory")
_MscLpHssi_ObjectIdentity = ObjectIdentity
mscLpHssi = _MscLpHssi_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17)
)
_MscLpHssiRowStatusTable_Object = MibTable
mscLpHssiRowStatusTable = _MscLpHssiRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 1)
)
if mibBuilder.loadTexts:
    mscLpHssiRowStatusTable.setStatus("mandatory")
_MscLpHssiRowStatusEntry_Object = MibTableRow
mscLpHssiRowStatusEntry = _MscLpHssiRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 1, 1)
)
mscLpHssiRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"),
)
if mibBuilder.loadTexts:
    mscLpHssiRowStatusEntry.setStatus("mandatory")
_MscLpHssiRowStatus_Type = RowStatus
_MscLpHssiRowStatus_Object = MibTableColumn
mscLpHssiRowStatus = _MscLpHssiRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 1, 1, 1),
    _MscLpHssiRowStatus_Type()
)
mscLpHssiRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpHssiRowStatus.setStatus("mandatory")
_MscLpHssiComponentName_Type = DisplayString
_MscLpHssiComponentName_Object = MibTableColumn
mscLpHssiComponentName = _MscLpHssiComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 1, 1, 2),
    _MscLpHssiComponentName_Type()
)
mscLpHssiComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiComponentName.setStatus("mandatory")
_MscLpHssiStorageType_Type = StorageType
_MscLpHssiStorageType_Object = MibTableColumn
mscLpHssiStorageType = _MscLpHssiStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 1, 1, 4),
    _MscLpHssiStorageType_Type()
)
mscLpHssiStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiStorageType.setStatus("mandatory")


class _MscLpHssiIndex_Type(Integer32):
    """Custom type mscLpHssiIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
    )


_MscLpHssiIndex_Type.__name__ = "Integer32"
_MscLpHssiIndex_Object = MibTableColumn
mscLpHssiIndex = _MscLpHssiIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 1, 1, 10),
    _MscLpHssiIndex_Type()
)
mscLpHssiIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpHssiIndex.setStatus("mandatory")
_MscLpHssiTest_ObjectIdentity = ObjectIdentity
mscLpHssiTest = _MscLpHssiTest_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2)
)
_MscLpHssiTestRowStatusTable_Object = MibTable
mscLpHssiTestRowStatusTable = _MscLpHssiTestRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 1)
)
if mibBuilder.loadTexts:
    mscLpHssiTestRowStatusTable.setStatus("mandatory")
_MscLpHssiTestRowStatusEntry_Object = MibTableRow
mscLpHssiTestRowStatusEntry = _MscLpHssiTestRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 1, 1)
)
mscLpHssiTestRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpHssiTestRowStatusEntry.setStatus("mandatory")
_MscLpHssiTestRowStatus_Type = RowStatus
_MscLpHssiTestRowStatus_Object = MibTableColumn
mscLpHssiTestRowStatus = _MscLpHssiTestRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 1, 1, 1),
    _MscLpHssiTestRowStatus_Type()
)
mscLpHssiTestRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiTestRowStatus.setStatus("mandatory")
_MscLpHssiTestComponentName_Type = DisplayString
_MscLpHssiTestComponentName_Object = MibTableColumn
mscLpHssiTestComponentName = _MscLpHssiTestComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 1, 1, 2),
    _MscLpHssiTestComponentName_Type()
)
mscLpHssiTestComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiTestComponentName.setStatus("mandatory")
_MscLpHssiTestStorageType_Type = StorageType
_MscLpHssiTestStorageType_Object = MibTableColumn
mscLpHssiTestStorageType = _MscLpHssiTestStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 1, 1, 4),
    _MscLpHssiTestStorageType_Type()
)
mscLpHssiTestStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiTestStorageType.setStatus("mandatory")
_MscLpHssiTestIndex_Type = NonReplicated
_MscLpHssiTestIndex_Object = MibTableColumn
mscLpHssiTestIndex = _MscLpHssiTestIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 1, 1, 10),
    _MscLpHssiTestIndex_Type()
)
mscLpHssiTestIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpHssiTestIndex.setStatus("mandatory")
_MscLpHssiTestStateTable_Object = MibTable
mscLpHssiTestStateTable = _MscLpHssiTestStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 10)
)
if mibBuilder.loadTexts:
    mscLpHssiTestStateTable.setStatus("mandatory")
_MscLpHssiTestStateEntry_Object = MibTableRow
mscLpHssiTestStateEntry = _MscLpHssiTestStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 10, 1)
)
mscLpHssiTestStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpHssiTestStateEntry.setStatus("mandatory")


class _MscLpHssiTestAdminState_Type(Integer32):
    """Custom type mscLpHssiTestAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpHssiTestAdminState_Type.__name__ = "Integer32"
_MscLpHssiTestAdminState_Object = MibTableColumn
mscLpHssiTestAdminState = _MscLpHssiTestAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 10, 1, 1),
    _MscLpHssiTestAdminState_Type()
)
mscLpHssiTestAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiTestAdminState.setStatus("mandatory")


class _MscLpHssiTestOperationalState_Type(Integer32):
    """Custom type mscLpHssiTestOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpHssiTestOperationalState_Type.__name__ = "Integer32"
_MscLpHssiTestOperationalState_Object = MibTableColumn
mscLpHssiTestOperationalState = _MscLpHssiTestOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 10, 1, 2),
    _MscLpHssiTestOperationalState_Type()
)
mscLpHssiTestOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiTestOperationalState.setStatus("mandatory")


class _MscLpHssiTestUsageState_Type(Integer32):
    """Custom type mscLpHssiTestUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpHssiTestUsageState_Type.__name__ = "Integer32"
_MscLpHssiTestUsageState_Object = MibTableColumn
mscLpHssiTestUsageState = _MscLpHssiTestUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 10, 1, 3),
    _MscLpHssiTestUsageState_Type()
)
mscLpHssiTestUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiTestUsageState.setStatus("mandatory")
_MscLpHssiTestSetupTable_Object = MibTable
mscLpHssiTestSetupTable = _MscLpHssiTestSetupTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 11)
)
if mibBuilder.loadTexts:
    mscLpHssiTestSetupTable.setStatus("mandatory")
_MscLpHssiTestSetupEntry_Object = MibTableRow
mscLpHssiTestSetupEntry = _MscLpHssiTestSetupEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 11, 1)
)
mscLpHssiTestSetupEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpHssiTestSetupEntry.setStatus("mandatory")


class _MscLpHssiTestPurpose_Type(AsciiString):
    """Custom type mscLpHssiTestPurpose based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )


_MscLpHssiTestPurpose_Type.__name__ = "AsciiString"
_MscLpHssiTestPurpose_Object = MibTableColumn
mscLpHssiTestPurpose = _MscLpHssiTestPurpose_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 11, 1, 1),
    _MscLpHssiTestPurpose_Type()
)
mscLpHssiTestPurpose.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpHssiTestPurpose.setStatus("mandatory")


class _MscLpHssiTestType_Type(Integer32):
    """Custom type mscLpHssiTestType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("card", 0),
          ("externalLoop", 4),
          ("localLoop", 2),
          ("manual", 1),
          ("payloadLoop", 5),
          ("pn127RemoteLoop", 8),
          ("remoteLoop", 3),
          ("remoteLoopThisTrib", 6),
          ("v54RemoteLoop", 7))
    )


_MscLpHssiTestType_Type.__name__ = "Integer32"
_MscLpHssiTestType_Object = MibTableColumn
mscLpHssiTestType = _MscLpHssiTestType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 11, 1, 2),
    _MscLpHssiTestType_Type()
)
mscLpHssiTestType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpHssiTestType.setStatus("mandatory")


class _MscLpHssiTestFrmSize_Type(Unsigned32):
    """Custom type mscLpHssiTestFrmSize based on Unsigned32"""
    defaultValue = 1024

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 4096),
    )


_MscLpHssiTestFrmSize_Type.__name__ = "Unsigned32"
_MscLpHssiTestFrmSize_Object = MibTableColumn
mscLpHssiTestFrmSize = _MscLpHssiTestFrmSize_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 11, 1, 3),
    _MscLpHssiTestFrmSize_Type()
)
mscLpHssiTestFrmSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpHssiTestFrmSize.setStatus("mandatory")


class _MscLpHssiTestFrmPatternType_Type(Integer32):
    """Custom type mscLpHssiTestFrmPatternType based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ccitt32kBitPattern", 0),
          ("ccitt8MBitPattern", 1),
          ("customizedPattern", 2))
    )


_MscLpHssiTestFrmPatternType_Type.__name__ = "Integer32"
_MscLpHssiTestFrmPatternType_Object = MibTableColumn
mscLpHssiTestFrmPatternType = _MscLpHssiTestFrmPatternType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 11, 1, 4),
    _MscLpHssiTestFrmPatternType_Type()
)
mscLpHssiTestFrmPatternType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpHssiTestFrmPatternType.setStatus("mandatory")


class _MscLpHssiTestCustomizedPattern_Type(Hex):
    """Custom type mscLpHssiTestCustomizedPattern based on Hex"""
    defaultValue = 1431655765

    subtypeSpec = Hex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpHssiTestCustomizedPattern_Type.__name__ = "Hex"
_MscLpHssiTestCustomizedPattern_Object = MibTableColumn
mscLpHssiTestCustomizedPattern = _MscLpHssiTestCustomizedPattern_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 11, 1, 5),
    _MscLpHssiTestCustomizedPattern_Type()
)
mscLpHssiTestCustomizedPattern.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpHssiTestCustomizedPattern.setStatus("mandatory")


class _MscLpHssiTestDataStartDelay_Type(Unsigned32):
    """Custom type mscLpHssiTestDataStartDelay based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1814400),
    )


_MscLpHssiTestDataStartDelay_Type.__name__ = "Unsigned32"
_MscLpHssiTestDataStartDelay_Object = MibTableColumn
mscLpHssiTestDataStartDelay = _MscLpHssiTestDataStartDelay_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 11, 1, 6),
    _MscLpHssiTestDataStartDelay_Type()
)
mscLpHssiTestDataStartDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpHssiTestDataStartDelay.setStatus("mandatory")


class _MscLpHssiTestDisplayInterval_Type(Unsigned32):
    """Custom type mscLpHssiTestDisplayInterval based on Unsigned32"""
    defaultValue = 5

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30240),
    )


_MscLpHssiTestDisplayInterval_Type.__name__ = "Unsigned32"
_MscLpHssiTestDisplayInterval_Object = MibTableColumn
mscLpHssiTestDisplayInterval = _MscLpHssiTestDisplayInterval_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 11, 1, 7),
    _MscLpHssiTestDisplayInterval_Type()
)
mscLpHssiTestDisplayInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpHssiTestDisplayInterval.setStatus("mandatory")


class _MscLpHssiTestDuration_Type(Unsigned32):
    """Custom type mscLpHssiTestDuration based on Unsigned32"""
    defaultValue = 1

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 30240),
    )


_MscLpHssiTestDuration_Type.__name__ = "Unsigned32"
_MscLpHssiTestDuration_Object = MibTableColumn
mscLpHssiTestDuration = _MscLpHssiTestDuration_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 11, 1, 8),
    _MscLpHssiTestDuration_Type()
)
mscLpHssiTestDuration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpHssiTestDuration.setStatus("mandatory")
_MscLpHssiTestResultsTable_Object = MibTable
mscLpHssiTestResultsTable = _MscLpHssiTestResultsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12)
)
if mibBuilder.loadTexts:
    mscLpHssiTestResultsTable.setStatus("mandatory")
_MscLpHssiTestResultsEntry_Object = MibTableRow
mscLpHssiTestResultsEntry = _MscLpHssiTestResultsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1)
)
mscLpHssiTestResultsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiTestIndex"),
)
if mibBuilder.loadTexts:
    mscLpHssiTestResultsEntry.setStatus("mandatory")
_MscLpHssiTestElapsedTime_Type = Counter32
_MscLpHssiTestElapsedTime_Object = MibTableColumn
mscLpHssiTestElapsedTime = _MscLpHssiTestElapsedTime_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1, 1),
    _MscLpHssiTestElapsedTime_Type()
)
mscLpHssiTestElapsedTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiTestElapsedTime.setStatus("mandatory")


class _MscLpHssiTestTimeRemaining_Type(Unsigned32):
    """Custom type mscLpHssiTestTimeRemaining based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpHssiTestTimeRemaining_Type.__name__ = "Unsigned32"
_MscLpHssiTestTimeRemaining_Object = MibTableColumn
mscLpHssiTestTimeRemaining = _MscLpHssiTestTimeRemaining_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1, 2),
    _MscLpHssiTestTimeRemaining_Type()
)
mscLpHssiTestTimeRemaining.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiTestTimeRemaining.setStatus("mandatory")


class _MscLpHssiTestCauseOfTermination_Type(Integer32):
    """Custom type mscLpHssiTestCauseOfTermination based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("hardwareReconfigured", 5),
          ("loopCodeSyncFailed", 6),
          ("neverStarted", 3),
          ("patternSyncFailed", 7),
          ("patternSyncLost", 8),
          ("stoppedByOperator", 1),
          ("testRunning", 4),
          ("testTimeExpired", 0),
          ("unknown", 2))
    )


_MscLpHssiTestCauseOfTermination_Type.__name__ = "Integer32"
_MscLpHssiTestCauseOfTermination_Object = MibTableColumn
mscLpHssiTestCauseOfTermination = _MscLpHssiTestCauseOfTermination_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1, 3),
    _MscLpHssiTestCauseOfTermination_Type()
)
mscLpHssiTestCauseOfTermination.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiTestCauseOfTermination.setStatus("mandatory")
_MscLpHssiTestBitsTx_Type = PassportCounter64
_MscLpHssiTestBitsTx_Object = MibTableColumn
mscLpHssiTestBitsTx = _MscLpHssiTestBitsTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1, 4),
    _MscLpHssiTestBitsTx_Type()
)
mscLpHssiTestBitsTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiTestBitsTx.setStatus("mandatory")
_MscLpHssiTestBytesTx_Type = PassportCounter64
_MscLpHssiTestBytesTx_Object = MibTableColumn
mscLpHssiTestBytesTx = _MscLpHssiTestBytesTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1, 5),
    _MscLpHssiTestBytesTx_Type()
)
mscLpHssiTestBytesTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiTestBytesTx.setStatus("mandatory")
_MscLpHssiTestFrmTx_Type = PassportCounter64
_MscLpHssiTestFrmTx_Object = MibTableColumn
mscLpHssiTestFrmTx = _MscLpHssiTestFrmTx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1, 6),
    _MscLpHssiTestFrmTx_Type()
)
mscLpHssiTestFrmTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiTestFrmTx.setStatus("mandatory")
_MscLpHssiTestBitsRx_Type = PassportCounter64
_MscLpHssiTestBitsRx_Object = MibTableColumn
mscLpHssiTestBitsRx = _MscLpHssiTestBitsRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1, 7),
    _MscLpHssiTestBitsRx_Type()
)
mscLpHssiTestBitsRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiTestBitsRx.setStatus("mandatory")
_MscLpHssiTestBytesRx_Type = PassportCounter64
_MscLpHssiTestBytesRx_Object = MibTableColumn
mscLpHssiTestBytesRx = _MscLpHssiTestBytesRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1, 8),
    _MscLpHssiTestBytesRx_Type()
)
mscLpHssiTestBytesRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiTestBytesRx.setStatus("mandatory")
_MscLpHssiTestFrmRx_Type = PassportCounter64
_MscLpHssiTestFrmRx_Object = MibTableColumn
mscLpHssiTestFrmRx = _MscLpHssiTestFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1, 9),
    _MscLpHssiTestFrmRx_Type()
)
mscLpHssiTestFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiTestFrmRx.setStatus("mandatory")
_MscLpHssiTestErroredFrmRx_Type = PassportCounter64
_MscLpHssiTestErroredFrmRx_Object = MibTableColumn
mscLpHssiTestErroredFrmRx = _MscLpHssiTestErroredFrmRx_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1, 10),
    _MscLpHssiTestErroredFrmRx_Type()
)
mscLpHssiTestErroredFrmRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiTestErroredFrmRx.setStatus("mandatory")


class _MscLpHssiTestBitErrorRate_Type(AsciiString):
    """Custom type mscLpHssiTestBitErrorRate based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(5, 5),
    )


_MscLpHssiTestBitErrorRate_Type.__name__ = "AsciiString"
_MscLpHssiTestBitErrorRate_Object = MibTableColumn
mscLpHssiTestBitErrorRate = _MscLpHssiTestBitErrorRate_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 2, 12, 1, 11),
    _MscLpHssiTestBitErrorRate_Type()
)
mscLpHssiTestBitErrorRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiTestBitErrorRate.setStatus("mandatory")
_MscLpHssiProvTable_Object = MibTable
mscLpHssiProvTable = _MscLpHssiProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 10)
)
if mibBuilder.loadTexts:
    mscLpHssiProvTable.setStatus("mandatory")
_MscLpHssiProvEntry_Object = MibTableRow
mscLpHssiProvEntry = _MscLpHssiProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 10, 1)
)
mscLpHssiProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"),
)
if mibBuilder.loadTexts:
    mscLpHssiProvEntry.setStatus("mandatory")


class _MscLpHssiLinkMode_Type(Integer32):
    """Custom type mscLpHssiLinkMode based on Integer32"""
    defaultValue = 128

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              128)
        )
    )
    namedValues = NamedValues(
        *(("dce", 128),
          ("dte", 0))
    )


_MscLpHssiLinkMode_Type.__name__ = "Integer32"
_MscLpHssiLinkMode_Object = MibTableColumn
mscLpHssiLinkMode = _MscLpHssiLinkMode_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 10, 1, 1),
    _MscLpHssiLinkMode_Type()
)
mscLpHssiLinkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpHssiLinkMode.setStatus("mandatory")


class _MscLpHssiReadyLineState_Type(OctetString):
    """Custom type mscLpHssiReadyLineState based on OctetString"""
    defaultHexValue = "c0"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpHssiReadyLineState_Type.__name__ = "OctetString"
_MscLpHssiReadyLineState_Object = MibTableColumn
mscLpHssiReadyLineState = _MscLpHssiReadyLineState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 10, 1, 2),
    _MscLpHssiReadyLineState_Type()
)
mscLpHssiReadyLineState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpHssiReadyLineState.setStatus("mandatory")


class _MscLpHssiDataTransferLineState_Type(OctetString):
    """Custom type mscLpHssiDataTransferLineState based on OctetString"""
    defaultHexValue = "c0"

    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpHssiDataTransferLineState_Type.__name__ = "OctetString"
_MscLpHssiDataTransferLineState_Object = MibTableColumn
mscLpHssiDataTransferLineState = _MscLpHssiDataTransferLineState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 10, 1, 3),
    _MscLpHssiDataTransferLineState_Type()
)
mscLpHssiDataTransferLineState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpHssiDataTransferLineState.setStatus("mandatory")


class _MscLpHssiLineSpeed_Type(Unsigned32):
    """Custom type mscLpHssiLineSpeed based on Unsigned32"""
    defaultValue = 45000000

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1000000, 50000000),
    )


_MscLpHssiLineSpeed_Type.__name__ = "Unsigned32"
_MscLpHssiLineSpeed_Object = MibTableColumn
mscLpHssiLineSpeed = _MscLpHssiLineSpeed_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 10, 1, 5),
    _MscLpHssiLineSpeed_Type()
)
mscLpHssiLineSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpHssiLineSpeed.setStatus("mandatory")
_MscLpHssiApplicationFramerName_Type = Link
_MscLpHssiApplicationFramerName_Object = MibTableColumn
mscLpHssiApplicationFramerName = _MscLpHssiApplicationFramerName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 10, 1, 7),
    _MscLpHssiApplicationFramerName_Type()
)
mscLpHssiApplicationFramerName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpHssiApplicationFramerName.setStatus("mandatory")
_MscLpHssiCidDataTable_Object = MibTable
mscLpHssiCidDataTable = _MscLpHssiCidDataTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 11)
)
if mibBuilder.loadTexts:
    mscLpHssiCidDataTable.setStatus("mandatory")
_MscLpHssiCidDataEntry_Object = MibTableRow
mscLpHssiCidDataEntry = _MscLpHssiCidDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 11, 1)
)
mscLpHssiCidDataEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"),
)
if mibBuilder.loadTexts:
    mscLpHssiCidDataEntry.setStatus("mandatory")


class _MscLpHssiCustomerIdentifier_Type(Unsigned32):
    """Custom type mscLpHssiCustomerIdentifier based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 8191),
    )


_MscLpHssiCustomerIdentifier_Type.__name__ = "Unsigned32"
_MscLpHssiCustomerIdentifier_Object = MibTableColumn
mscLpHssiCustomerIdentifier = _MscLpHssiCustomerIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 11, 1, 1),
    _MscLpHssiCustomerIdentifier_Type()
)
mscLpHssiCustomerIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpHssiCustomerIdentifier.setStatus("mandatory")
_MscLpHssiAdminInfoTable_Object = MibTable
mscLpHssiAdminInfoTable = _MscLpHssiAdminInfoTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 12)
)
if mibBuilder.loadTexts:
    mscLpHssiAdminInfoTable.setStatus("mandatory")
_MscLpHssiAdminInfoEntry_Object = MibTableRow
mscLpHssiAdminInfoEntry = _MscLpHssiAdminInfoEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 12, 1)
)
mscLpHssiAdminInfoEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"),
)
if mibBuilder.loadTexts:
    mscLpHssiAdminInfoEntry.setStatus("mandatory")


class _MscLpHssiVendor_Type(AsciiString):
    """Custom type mscLpHssiVendor based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_MscLpHssiVendor_Type.__name__ = "AsciiString"
_MscLpHssiVendor_Object = MibTableColumn
mscLpHssiVendor = _MscLpHssiVendor_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 12, 1, 1),
    _MscLpHssiVendor_Type()
)
mscLpHssiVendor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpHssiVendor.setStatus("mandatory")


class _MscLpHssiCommentText_Type(AsciiString):
    """Custom type mscLpHssiCommentText based on AsciiString"""
    subtypeSpec = AsciiString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 60),
    )


_MscLpHssiCommentText_Type.__name__ = "AsciiString"
_MscLpHssiCommentText_Object = MibTableColumn
mscLpHssiCommentText = _MscLpHssiCommentText_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 12, 1, 2),
    _MscLpHssiCommentText_Type()
)
mscLpHssiCommentText.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpHssiCommentText.setStatus("mandatory")
_MscLpHssiIfEntryTable_Object = MibTable
mscLpHssiIfEntryTable = _MscLpHssiIfEntryTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 13)
)
if mibBuilder.loadTexts:
    mscLpHssiIfEntryTable.setStatus("mandatory")
_MscLpHssiIfEntryEntry_Object = MibTableRow
mscLpHssiIfEntryEntry = _MscLpHssiIfEntryEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 13, 1)
)
mscLpHssiIfEntryEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"),
)
if mibBuilder.loadTexts:
    mscLpHssiIfEntryEntry.setStatus("mandatory")


class _MscLpHssiIfAdminStatus_Type(Integer32):
    """Custom type mscLpHssiIfAdminStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpHssiIfAdminStatus_Type.__name__ = "Integer32"
_MscLpHssiIfAdminStatus_Object = MibTableColumn
mscLpHssiIfAdminStatus = _MscLpHssiIfAdminStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 13, 1, 1),
    _MscLpHssiIfAdminStatus_Type()
)
mscLpHssiIfAdminStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpHssiIfAdminStatus.setStatus("mandatory")


class _MscLpHssiIfIndex_Type(InterfaceIndex):
    """Custom type mscLpHssiIfIndex based on InterfaceIndex"""
    subtypeSpec = InterfaceIndex.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_MscLpHssiIfIndex_Type.__name__ = "InterfaceIndex"
_MscLpHssiIfIndex_Object = MibTableColumn
mscLpHssiIfIndex = _MscLpHssiIfIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 13, 1, 2),
    _MscLpHssiIfIndex_Type()
)
mscLpHssiIfIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiIfIndex.setStatus("mandatory")
_MscLpHssiOperStatusTable_Object = MibTable
mscLpHssiOperStatusTable = _MscLpHssiOperStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 14)
)
if mibBuilder.loadTexts:
    mscLpHssiOperStatusTable.setStatus("mandatory")
_MscLpHssiOperStatusEntry_Object = MibTableRow
mscLpHssiOperStatusEntry = _MscLpHssiOperStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 14, 1)
)
mscLpHssiOperStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"),
)
if mibBuilder.loadTexts:
    mscLpHssiOperStatusEntry.setStatus("mandatory")


class _MscLpHssiSnmpOperStatus_Type(Integer32):
    """Custom type mscLpHssiSnmpOperStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("testing", 3),
          ("up", 1))
    )


_MscLpHssiSnmpOperStatus_Type.__name__ = "Integer32"
_MscLpHssiSnmpOperStatus_Object = MibTableColumn
mscLpHssiSnmpOperStatus = _MscLpHssiSnmpOperStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 14, 1, 1),
    _MscLpHssiSnmpOperStatus_Type()
)
mscLpHssiSnmpOperStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiSnmpOperStatus.setStatus("mandatory")
_MscLpHssiStateTable_Object = MibTable
mscLpHssiStateTable = _MscLpHssiStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 15)
)
if mibBuilder.loadTexts:
    mscLpHssiStateTable.setStatus("mandatory")
_MscLpHssiStateEntry_Object = MibTableRow
mscLpHssiStateEntry = _MscLpHssiStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 15, 1)
)
mscLpHssiStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"),
)
if mibBuilder.loadTexts:
    mscLpHssiStateEntry.setStatus("mandatory")


class _MscLpHssiAdminState_Type(Integer32):
    """Custom type mscLpHssiAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpHssiAdminState_Type.__name__ = "Integer32"
_MscLpHssiAdminState_Object = MibTableColumn
mscLpHssiAdminState = _MscLpHssiAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 15, 1, 1),
    _MscLpHssiAdminState_Type()
)
mscLpHssiAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiAdminState.setStatus("mandatory")


class _MscLpHssiOperationalState_Type(Integer32):
    """Custom type mscLpHssiOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpHssiOperationalState_Type.__name__ = "Integer32"
_MscLpHssiOperationalState_Object = MibTableColumn
mscLpHssiOperationalState = _MscLpHssiOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 15, 1, 2),
    _MscLpHssiOperationalState_Type()
)
mscLpHssiOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiOperationalState.setStatus("mandatory")


class _MscLpHssiUsageState_Type(Integer32):
    """Custom type mscLpHssiUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpHssiUsageState_Type.__name__ = "Integer32"
_MscLpHssiUsageState_Object = MibTableColumn
mscLpHssiUsageState = _MscLpHssiUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 15, 1, 3),
    _MscLpHssiUsageState_Type()
)
mscLpHssiUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiUsageState.setStatus("mandatory")


class _MscLpHssiAvailabilityStatus_Type(OctetString):
    """Custom type mscLpHssiAvailabilityStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_MscLpHssiAvailabilityStatus_Type.__name__ = "OctetString"
_MscLpHssiAvailabilityStatus_Object = MibTableColumn
mscLpHssiAvailabilityStatus = _MscLpHssiAvailabilityStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 15, 1, 4),
    _MscLpHssiAvailabilityStatus_Type()
)
mscLpHssiAvailabilityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiAvailabilityStatus.setStatus("mandatory")


class _MscLpHssiProceduralStatus_Type(OctetString):
    """Custom type mscLpHssiProceduralStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpHssiProceduralStatus_Type.__name__ = "OctetString"
_MscLpHssiProceduralStatus_Object = MibTableColumn
mscLpHssiProceduralStatus = _MscLpHssiProceduralStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 15, 1, 5),
    _MscLpHssiProceduralStatus_Type()
)
mscLpHssiProceduralStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiProceduralStatus.setStatus("mandatory")


class _MscLpHssiControlStatus_Type(OctetString):
    """Custom type mscLpHssiControlStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpHssiControlStatus_Type.__name__ = "OctetString"
_MscLpHssiControlStatus_Object = MibTableColumn
mscLpHssiControlStatus = _MscLpHssiControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 15, 1, 6),
    _MscLpHssiControlStatus_Type()
)
mscLpHssiControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiControlStatus.setStatus("mandatory")


class _MscLpHssiAlarmStatus_Type(OctetString):
    """Custom type mscLpHssiAlarmStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpHssiAlarmStatus_Type.__name__ = "OctetString"
_MscLpHssiAlarmStatus_Object = MibTableColumn
mscLpHssiAlarmStatus = _MscLpHssiAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 15, 1, 7),
    _MscLpHssiAlarmStatus_Type()
)
mscLpHssiAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiAlarmStatus.setStatus("mandatory")


class _MscLpHssiStandbyStatus_Type(Integer32):
    """Custom type mscLpHssiStandbyStatus based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              15)
        )
    )
    namedValues = NamedValues(
        *(("coldStandby", 1),
          ("hotStandby", 0),
          ("notSet", 15),
          ("providingService", 2))
    )


_MscLpHssiStandbyStatus_Type.__name__ = "Integer32"
_MscLpHssiStandbyStatus_Object = MibTableColumn
mscLpHssiStandbyStatus = _MscLpHssiStandbyStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 15, 1, 8),
    _MscLpHssiStandbyStatus_Type()
)
mscLpHssiStandbyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiStandbyStatus.setStatus("mandatory")


class _MscLpHssiUnknownStatus_Type(Integer32):
    """Custom type mscLpHssiUnknownStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_MscLpHssiUnknownStatus_Type.__name__ = "Integer32"
_MscLpHssiUnknownStatus_Object = MibTableColumn
mscLpHssiUnknownStatus = _MscLpHssiUnknownStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 15, 1, 9),
    _MscLpHssiUnknownStatus_Type()
)
mscLpHssiUnknownStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiUnknownStatus.setStatus("mandatory")
_MscLpHssiOperTable_Object = MibTable
mscLpHssiOperTable = _MscLpHssiOperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 16)
)
if mibBuilder.loadTexts:
    mscLpHssiOperTable.setStatus("mandatory")
_MscLpHssiOperEntry_Object = MibTableRow
mscLpHssiOperEntry = _MscLpHssiOperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 16, 1)
)
mscLpHssiOperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpHssiIndex"),
)
if mibBuilder.loadTexts:
    mscLpHssiOperEntry.setStatus("mandatory")


class _MscLpHssiActualLinkMode_Type(Integer32):
    """Custom type mscLpHssiActualLinkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              128)
        )
    )
    namedValues = NamedValues(
        *(("dce", 128),
          ("dte", 0))
    )


_MscLpHssiActualLinkMode_Type.__name__ = "Integer32"
_MscLpHssiActualLinkMode_Object = MibTableColumn
mscLpHssiActualLinkMode = _MscLpHssiActualLinkMode_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 16, 1, 1),
    _MscLpHssiActualLinkMode_Type()
)
mscLpHssiActualLinkMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiActualLinkMode.setStatus("mandatory")


class _MscLpHssiLineState_Type(OctetString):
    """Custom type mscLpHssiLineState based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpHssiLineState_Type.__name__ = "OctetString"
_MscLpHssiLineState_Object = MibTableColumn
mscLpHssiLineState = _MscLpHssiLineState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 16, 1, 2),
    _MscLpHssiLineState_Type()
)
mscLpHssiLineState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiLineState.setStatus("mandatory")


class _MscLpHssiActualTxLineSpeed_Type(Gauge32):
    """Custom type mscLpHssiActualTxLineSpeed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpHssiActualTxLineSpeed_Type.__name__ = "Gauge32"
_MscLpHssiActualTxLineSpeed_Object = MibTableColumn
mscLpHssiActualTxLineSpeed = _MscLpHssiActualTxLineSpeed_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 16, 1, 3),
    _MscLpHssiActualTxLineSpeed_Type()
)
mscLpHssiActualTxLineSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiActualTxLineSpeed.setStatus("mandatory")


class _MscLpHssiActualRxLineSpeed_Type(Gauge32):
    """Custom type mscLpHssiActualRxLineSpeed based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpHssiActualRxLineSpeed_Type.__name__ = "Gauge32"
_MscLpHssiActualRxLineSpeed_Object = MibTableColumn
mscLpHssiActualRxLineSpeed = _MscLpHssiActualRxLineSpeed_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 16, 1, 4),
    _MscLpHssiActualRxLineSpeed_Type()
)
mscLpHssiActualRxLineSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiActualRxLineSpeed.setStatus("mandatory")
_MscLpHssiDataXferStateChanges_Type = Counter32
_MscLpHssiDataXferStateChanges_Object = MibTableColumn
mscLpHssiDataXferStateChanges = _MscLpHssiDataXferStateChanges_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 17, 16, 1, 5),
    _MscLpHssiDataXferStateChanges_Type()
)
mscLpHssiDataXferStateChanges.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpHssiDataXferStateChanges.setStatus("mandatory")
_MscLpEng_ObjectIdentity = ObjectIdentity
mscLpEng = _MscLpEng_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23)
)
_MscLpEngRowStatusTable_Object = MibTable
mscLpEngRowStatusTable = _MscLpEngRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 1)
)
if mibBuilder.loadTexts:
    mscLpEngRowStatusTable.setStatus("mandatory")
_MscLpEngRowStatusEntry_Object = MibTableRow
mscLpEngRowStatusEntry = _MscLpEngRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 1, 1)
)
mscLpEngRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngIndex"),
)
if mibBuilder.loadTexts:
    mscLpEngRowStatusEntry.setStatus("mandatory")
_MscLpEngRowStatus_Type = RowStatus
_MscLpEngRowStatus_Object = MibTableColumn
mscLpEngRowStatus = _MscLpEngRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 1, 1, 1),
    _MscLpEngRowStatus_Type()
)
mscLpEngRowStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpEngRowStatus.setStatus("mandatory")
_MscLpEngComponentName_Type = DisplayString
_MscLpEngComponentName_Object = MibTableColumn
mscLpEngComponentName = _MscLpEngComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 1, 1, 2),
    _MscLpEngComponentName_Type()
)
mscLpEngComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpEngComponentName.setStatus("mandatory")
_MscLpEngStorageType_Type = StorageType
_MscLpEngStorageType_Object = MibTableColumn
mscLpEngStorageType = _MscLpEngStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 1, 1, 4),
    _MscLpEngStorageType_Type()
)
mscLpEngStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpEngStorageType.setStatus("mandatory")
_MscLpEngIndex_Type = NonReplicated
_MscLpEngIndex_Object = MibTableColumn
mscLpEngIndex = _MscLpEngIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 1, 1, 10),
    _MscLpEngIndex_Type()
)
mscLpEngIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpEngIndex.setStatus("mandatory")
_MscLpEngDs_ObjectIdentity = ObjectIdentity
mscLpEngDs = _MscLpEngDs_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2)
)
_MscLpEngDsRowStatusTable_Object = MibTable
mscLpEngDsRowStatusTable = _MscLpEngDsRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 1)
)
if mibBuilder.loadTexts:
    mscLpEngDsRowStatusTable.setStatus("mandatory")
_MscLpEngDsRowStatusEntry_Object = MibTableRow
mscLpEngDsRowStatusEntry = _MscLpEngDsRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 1, 1)
)
mscLpEngDsRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngDsIndex"),
)
if mibBuilder.loadTexts:
    mscLpEngDsRowStatusEntry.setStatus("mandatory")
_MscLpEngDsRowStatus_Type = RowStatus
_MscLpEngDsRowStatus_Object = MibTableColumn
mscLpEngDsRowStatus = _MscLpEngDsRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 1, 1, 1),
    _MscLpEngDsRowStatus_Type()
)
mscLpEngDsRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpEngDsRowStatus.setStatus("mandatory")
_MscLpEngDsComponentName_Type = DisplayString
_MscLpEngDsComponentName_Object = MibTableColumn
mscLpEngDsComponentName = _MscLpEngDsComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 1, 1, 2),
    _MscLpEngDsComponentName_Type()
)
mscLpEngDsComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpEngDsComponentName.setStatus("mandatory")
_MscLpEngDsStorageType_Type = StorageType
_MscLpEngDsStorageType_Object = MibTableColumn
mscLpEngDsStorageType = _MscLpEngDsStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 1, 1, 4),
    _MscLpEngDsStorageType_Type()
)
mscLpEngDsStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpEngDsStorageType.setStatus("mandatory")


class _MscLpEngDsIndex_Type(Integer32):
    """Custom type mscLpEngDsIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("accounting", 0),
          ("alarm", 1),
          ("debug", 3),
          ("log", 2),
          ("scn", 4),
          ("stats", 6),
          ("trap", 5))
    )


_MscLpEngDsIndex_Type.__name__ = "Integer32"
_MscLpEngDsIndex_Object = MibTableColumn
mscLpEngDsIndex = _MscLpEngDsIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 1, 1, 10),
    _MscLpEngDsIndex_Type()
)
mscLpEngDsIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpEngDsIndex.setStatus("mandatory")
_MscLpEngDsOv_ObjectIdentity = ObjectIdentity
mscLpEngDsOv = _MscLpEngDsOv_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 2)
)
_MscLpEngDsOvRowStatusTable_Object = MibTable
mscLpEngDsOvRowStatusTable = _MscLpEngDsOvRowStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 2, 1)
)
if mibBuilder.loadTexts:
    mscLpEngDsOvRowStatusTable.setStatus("mandatory")
_MscLpEngDsOvRowStatusEntry_Object = MibTableRow
mscLpEngDsOvRowStatusEntry = _MscLpEngDsOvRowStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 2, 1, 1)
)
mscLpEngDsOvRowStatusEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngDsIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngDsOvIndex"),
)
if mibBuilder.loadTexts:
    mscLpEngDsOvRowStatusEntry.setStatus("mandatory")
_MscLpEngDsOvRowStatus_Type = RowStatus
_MscLpEngDsOvRowStatus_Object = MibTableColumn
mscLpEngDsOvRowStatus = _MscLpEngDsOvRowStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 2, 1, 1, 1),
    _MscLpEngDsOvRowStatus_Type()
)
mscLpEngDsOvRowStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpEngDsOvRowStatus.setStatus("mandatory")
_MscLpEngDsOvComponentName_Type = DisplayString
_MscLpEngDsOvComponentName_Object = MibTableColumn
mscLpEngDsOvComponentName = _MscLpEngDsOvComponentName_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 2, 1, 1, 2),
    _MscLpEngDsOvComponentName_Type()
)
mscLpEngDsOvComponentName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpEngDsOvComponentName.setStatus("mandatory")
_MscLpEngDsOvStorageType_Type = StorageType
_MscLpEngDsOvStorageType_Object = MibTableColumn
mscLpEngDsOvStorageType = _MscLpEngDsOvStorageType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 2, 1, 1, 4),
    _MscLpEngDsOvStorageType_Type()
)
mscLpEngDsOvStorageType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpEngDsOvStorageType.setStatus("mandatory")
_MscLpEngDsOvIndex_Type = NonReplicated
_MscLpEngDsOvIndex_Object = MibTableColumn
mscLpEngDsOvIndex = _MscLpEngDsOvIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 2, 1, 1, 10),
    _MscLpEngDsOvIndex_Type()
)
mscLpEngDsOvIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpEngDsOvIndex.setStatus("mandatory")
_MscLpEngDsOvProvTable_Object = MibTable
mscLpEngDsOvProvTable = _MscLpEngDsOvProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 2, 10)
)
if mibBuilder.loadTexts:
    mscLpEngDsOvProvTable.setStatus("mandatory")
_MscLpEngDsOvProvEntry_Object = MibTableRow
mscLpEngDsOvProvEntry = _MscLpEngDsOvProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 2, 10, 1)
)
mscLpEngDsOvProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngDsIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngDsOvIndex"),
)
if mibBuilder.loadTexts:
    mscLpEngDsOvProvEntry.setStatus("mandatory")


class _MscLpEngDsOvAgentQueueSize_Type(Unsigned32):
    """Custom type mscLpEngDsOvAgentQueueSize based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpEngDsOvAgentQueueSize_Type.__name__ = "Unsigned32"
_MscLpEngDsOvAgentQueueSize_Object = MibTableColumn
mscLpEngDsOvAgentQueueSize = _MscLpEngDsOvAgentQueueSize_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 2, 10, 1, 1),
    _MscLpEngDsOvAgentQueueSize_Type()
)
mscLpEngDsOvAgentQueueSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpEngDsOvAgentQueueSize.setStatus("mandatory")
_MscLpEngDsOperTable_Object = MibTable
mscLpEngDsOperTable = _MscLpEngDsOperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 10)
)
if mibBuilder.loadTexts:
    mscLpEngDsOperTable.setStatus("mandatory")
_MscLpEngDsOperEntry_Object = MibTableRow
mscLpEngDsOperEntry = _MscLpEngDsOperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 10, 1)
)
mscLpEngDsOperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpEngDsIndex"),
)
if mibBuilder.loadTexts:
    mscLpEngDsOperEntry.setStatus("mandatory")


class _MscLpEngDsAgentQueueSize_Type(Unsigned32):
    """Custom type mscLpEngDsAgentQueueSize based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4294967295),
    )


_MscLpEngDsAgentQueueSize_Type.__name__ = "Unsigned32"
_MscLpEngDsAgentQueueSize_Object = MibTableColumn
mscLpEngDsAgentQueueSize = _MscLpEngDsAgentQueueSize_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 23, 2, 10, 1, 1),
    _MscLpEngDsAgentQueueSize_Type()
)
mscLpEngDsAgentQueueSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpEngDsAgentQueueSize.setStatus("mandatory")
_MscLpProvTable_Object = MibTable
mscLpProvTable = _MscLpProvTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 100)
)
if mibBuilder.loadTexts:
    mscLpProvTable.setStatus("mandatory")
_MscLpProvEntry_Object = MibTableRow
mscLpProvEntry = _MscLpProvEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 100, 1)
)
mscLpProvEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
)
if mibBuilder.loadTexts:
    mscLpProvEntry.setStatus("mandatory")
_MscLpMainCard_Type = Link
_MscLpMainCard_Object = MibTableColumn
mscLpMainCard = _MscLpMainCard_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 100, 1, 1),
    _MscLpMainCard_Type()
)
mscLpMainCard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpMainCard.setStatus("mandatory")
_MscLpSpareCard_Type = Link
_MscLpSpareCard_Object = MibTableColumn
mscLpSpareCard = _MscLpSpareCard_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 100, 1, 2),
    _MscLpSpareCard_Type()
)
mscLpSpareCard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpSpareCard.setStatus("mandatory")
_MscLpLogicalProcessorType_Type = Link
_MscLpLogicalProcessorType_Object = MibTableColumn
mscLpLogicalProcessorType = _MscLpLogicalProcessorType_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 100, 1, 3),
    _MscLpLogicalProcessorType_Type()
)
mscLpLogicalProcessorType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpLogicalProcessorType.setStatus("mandatory")
_MscLpCidDataTable_Object = MibTable
mscLpCidDataTable = _MscLpCidDataTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 101)
)
if mibBuilder.loadTexts:
    mscLpCidDataTable.setStatus("mandatory")
_MscLpCidDataEntry_Object = MibTableRow
mscLpCidDataEntry = _MscLpCidDataEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 101, 1)
)
mscLpCidDataEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
)
if mibBuilder.loadTexts:
    mscLpCidDataEntry.setStatus("mandatory")


class _MscLpCustomerIdentifier_Type(Unsigned32):
    """Custom type mscLpCustomerIdentifier based on Unsigned32"""
    defaultValue = 0

    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 0),
        ValueRangeConstraint(1, 8191),
    )


_MscLpCustomerIdentifier_Type.__name__ = "Unsigned32"
_MscLpCustomerIdentifier_Object = MibTableColumn
mscLpCustomerIdentifier = _MscLpCustomerIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 101, 1, 1),
    _MscLpCustomerIdentifier_Type()
)
mscLpCustomerIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mscLpCustomerIdentifier.setStatus("mandatory")
_MscLpStateTable_Object = MibTable
mscLpStateTable = _MscLpStateTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 102)
)
if mibBuilder.loadTexts:
    mscLpStateTable.setStatus("mandatory")
_MscLpStateEntry_Object = MibTableRow
mscLpStateEntry = _MscLpStateEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 102, 1)
)
mscLpStateEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
)
if mibBuilder.loadTexts:
    mscLpStateEntry.setStatus("mandatory")


class _MscLpAdminState_Type(Integer32):
    """Custom type mscLpAdminState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("locked", 0),
          ("shuttingDown", 2),
          ("unlocked", 1))
    )


_MscLpAdminState_Type.__name__ = "Integer32"
_MscLpAdminState_Object = MibTableColumn
mscLpAdminState = _MscLpAdminState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 102, 1, 1),
    _MscLpAdminState_Type()
)
mscLpAdminState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpAdminState.setStatus("mandatory")


class _MscLpOperationalState_Type(Integer32):
    """Custom type mscLpOperationalState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 0),
          ("enabled", 1))
    )


_MscLpOperationalState_Type.__name__ = "Integer32"
_MscLpOperationalState_Object = MibTableColumn
mscLpOperationalState = _MscLpOperationalState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 102, 1, 2),
    _MscLpOperationalState_Type()
)
mscLpOperationalState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpOperationalState.setStatus("mandatory")


class _MscLpUsageState_Type(Integer32):
    """Custom type mscLpUsageState based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("busy", 2),
          ("idle", 0))
    )


_MscLpUsageState_Type.__name__ = "Integer32"
_MscLpUsageState_Object = MibTableColumn
mscLpUsageState = _MscLpUsageState_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 102, 1, 3),
    _MscLpUsageState_Type()
)
mscLpUsageState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpUsageState.setStatus("mandatory")


class _MscLpAvailabilityStatus_Type(OctetString):
    """Custom type mscLpAvailabilityStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 2),
    )


_MscLpAvailabilityStatus_Type.__name__ = "OctetString"
_MscLpAvailabilityStatus_Object = MibTableColumn
mscLpAvailabilityStatus = _MscLpAvailabilityStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 102, 1, 4),
    _MscLpAvailabilityStatus_Type()
)
mscLpAvailabilityStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpAvailabilityStatus.setStatus("mandatory")


class _MscLpProceduralStatus_Type(OctetString):
    """Custom type mscLpProceduralStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpProceduralStatus_Type.__name__ = "OctetString"
_MscLpProceduralStatus_Object = MibTableColumn
mscLpProceduralStatus = _MscLpProceduralStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 102, 1, 5),
    _MscLpProceduralStatus_Type()
)
mscLpProceduralStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpProceduralStatus.setStatus("mandatory")


class _MscLpControlStatus_Type(OctetString):
    """Custom type mscLpControlStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpControlStatus_Type.__name__ = "OctetString"
_MscLpControlStatus_Object = MibTableColumn
mscLpControlStatus = _MscLpControlStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 102, 1, 6),
    _MscLpControlStatus_Type()
)
mscLpControlStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpControlStatus.setStatus("mandatory")


class _MscLpAlarmStatus_Type(OctetString):
    """Custom type mscLpAlarmStatus based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 1),
    )


_MscLpAlarmStatus_Type.__name__ = "OctetString"
_MscLpAlarmStatus_Object = MibTableColumn
mscLpAlarmStatus = _MscLpAlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 102, 1, 7),
    _MscLpAlarmStatus_Type()
)
mscLpAlarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpAlarmStatus.setStatus("mandatory")


class _MscLpStandbyStatus_Type(Integer32):
    """Custom type mscLpStandbyStatus based on Integer32"""
    defaultValue = 15

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              15)
        )
    )
    namedValues = NamedValues(
        *(("coldStandby", 1),
          ("hotStandby", 0),
          ("notSet", 15),
          ("providingService", 2))
    )


_MscLpStandbyStatus_Type.__name__ = "Integer32"
_MscLpStandbyStatus_Object = MibTableColumn
mscLpStandbyStatus = _MscLpStandbyStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 102, 1, 8),
    _MscLpStandbyStatus_Type()
)
mscLpStandbyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpStandbyStatus.setStatus("mandatory")


class _MscLpUnknownStatus_Type(Integer32):
    """Custom type mscLpUnknownStatus based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_MscLpUnknownStatus_Type.__name__ = "Integer32"
_MscLpUnknownStatus_Object = MibTableColumn
mscLpUnknownStatus = _MscLpUnknownStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 102, 1, 9),
    _MscLpUnknownStatus_Type()
)
mscLpUnknownStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpUnknownStatus.setStatus("mandatory")
_MscLpOperTable_Object = MibTable
mscLpOperTable = _MscLpOperTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 103)
)
if mibBuilder.loadTexts:
    mscLpOperTable.setStatus("mandatory")
_MscLpOperEntry_Object = MibTableRow
mscLpOperEntry = _MscLpOperEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 103, 1)
)
mscLpOperEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
)
if mibBuilder.loadTexts:
    mscLpOperEntry.setStatus("mandatory")
_MscLpActiveCard_Type = RowPointer
_MscLpActiveCard_Object = MibTableColumn
mscLpActiveCard = _MscLpActiveCard_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 103, 1, 1),
    _MscLpActiveCard_Type()
)
mscLpActiveCard.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpActiveCard.setStatus("mandatory")


class _MscLpMainCardStatus_Type(Integer32):
    """Custom type mscLpMainCardStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("active", 4),
          ("available", 3),
          ("notAvailable", 1),
          ("notProvisioned", 0))
    )


_MscLpMainCardStatus_Type.__name__ = "Integer32"
_MscLpMainCardStatus_Object = MibTableColumn
mscLpMainCardStatus = _MscLpMainCardStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 103, 1, 2),
    _MscLpMainCardStatus_Type()
)
mscLpMainCardStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpMainCardStatus.setStatus("mandatory")


class _MscLpSpareCardStatus_Type(Integer32):
    """Custom type mscLpSpareCardStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("active", 4),
          ("alreadyInUse", 2),
          ("available", 3),
          ("notAvailable", 1),
          ("notProvisioned", 0))
    )


_MscLpSpareCardStatus_Type.__name__ = "Integer32"
_MscLpSpareCardStatus_Object = MibTableColumn
mscLpSpareCardStatus = _MscLpSpareCardStatus_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 103, 1, 3),
    _MscLpSpareCardStatus_Type()
)
mscLpSpareCardStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpSpareCardStatus.setStatus("mandatory")


class _MscLpRestartOnCpSwitch_Type(Integer32):
    """Custom type mscLpRestartOnCpSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1)
        )
    )
    namedValues = NamedValues(
        *(("false", 0),
          ("true", 1))
    )


_MscLpRestartOnCpSwitch_Type.__name__ = "Integer32"
_MscLpRestartOnCpSwitch_Object = MibTableColumn
mscLpRestartOnCpSwitch = _MscLpRestartOnCpSwitch_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 103, 1, 4),
    _MscLpRestartOnCpSwitch_Type()
)
mscLpRestartOnCpSwitch.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpRestartOnCpSwitch.setStatus("mandatory")


class _MscLpScheduledSwitchover_Type(EnterpriseDateAndTime):
    """Custom type mscLpScheduledSwitchover based on EnterpriseDateAndTime"""
    subtypeSpec = EnterpriseDateAndTime.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 0),
        ValueSizeConstraint(16, 16),
    )


_MscLpScheduledSwitchover_Type.__name__ = "EnterpriseDateAndTime"
_MscLpScheduledSwitchover_Object = MibTableColumn
mscLpScheduledSwitchover = _MscLpScheduledSwitchover_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 103, 1, 5),
    _MscLpScheduledSwitchover_Type()
)
mscLpScheduledSwitchover.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpScheduledSwitchover.setStatus("mandatory")
_MscLpUtilTable_Object = MibTable
mscLpUtilTable = _MscLpUtilTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104)
)
if mibBuilder.loadTexts:
    mscLpUtilTable.setStatus("mandatory")
_MscLpUtilEntry_Object = MibTableRow
mscLpUtilEntry = _MscLpUtilEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1)
)
mscLpUtilEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
)
if mibBuilder.loadTexts:
    mscLpUtilEntry.setStatus("mandatory")


class _MscLpTimeInterval_Type(Unsigned32):
    """Custom type mscLpTimeInterval based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_MscLpTimeInterval_Type.__name__ = "Unsigned32"
_MscLpTimeInterval_Object = MibTableColumn
mscLpTimeInterval = _MscLpTimeInterval_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 1),
    _MscLpTimeInterval_Type()
)
mscLpTimeInterval.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpTimeInterval.setStatus("mandatory")


class _MscLpCpuUtil_Type(Gauge32):
    """Custom type mscLpCpuUtil based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_MscLpCpuUtil_Type.__name__ = "Gauge32"
_MscLpCpuUtil_Object = MibTableColumn
mscLpCpuUtil = _MscLpCpuUtil_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 2),
    _MscLpCpuUtil_Type()
)
mscLpCpuUtil.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpCpuUtil.setStatus("mandatory")


class _MscLpCpuUtilAvg_Type(Gauge32):
    """Custom type mscLpCpuUtilAvg based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_MscLpCpuUtilAvg_Type.__name__ = "Gauge32"
_MscLpCpuUtilAvg_Object = MibTableColumn
mscLpCpuUtilAvg = _MscLpCpuUtilAvg_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 3),
    _MscLpCpuUtilAvg_Type()
)
mscLpCpuUtilAvg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpCpuUtilAvg.setStatus("mandatory")


class _MscLpCpuUtilAvgMin_Type(Gauge32):
    """Custom type mscLpCpuUtilAvgMin based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_MscLpCpuUtilAvgMin_Type.__name__ = "Gauge32"
_MscLpCpuUtilAvgMin_Object = MibTableColumn
mscLpCpuUtilAvgMin = _MscLpCpuUtilAvgMin_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 4),
    _MscLpCpuUtilAvgMin_Type()
)
mscLpCpuUtilAvgMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpCpuUtilAvgMin.setStatus("mandatory")


class _MscLpCpuUtilAvgMax_Type(Gauge32):
    """Custom type mscLpCpuUtilAvgMax based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_MscLpCpuUtilAvgMax_Type.__name__ = "Gauge32"
_MscLpCpuUtilAvgMax_Object = MibTableColumn
mscLpCpuUtilAvgMax = _MscLpCpuUtilAvgMax_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 5),
    _MscLpCpuUtilAvgMax_Type()
)
mscLpCpuUtilAvgMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpCpuUtilAvgMax.setStatus("mandatory")


class _MscLpMsgBlockUsage_Type(Gauge32):
    """Custom type mscLpMsgBlockUsage based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_MscLpMsgBlockUsage_Type.__name__ = "Gauge32"
_MscLpMsgBlockUsage_Object = MibTableColumn
mscLpMsgBlockUsage = _MscLpMsgBlockUsage_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 6),
    _MscLpMsgBlockUsage_Type()
)
mscLpMsgBlockUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpMsgBlockUsage.setStatus("mandatory")


class _MscLpMsgBlockUsageAvg_Type(Gauge32):
    """Custom type mscLpMsgBlockUsageAvg based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_MscLpMsgBlockUsageAvg_Type.__name__ = "Gauge32"
_MscLpMsgBlockUsageAvg_Object = MibTableColumn
mscLpMsgBlockUsageAvg = _MscLpMsgBlockUsageAvg_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 7),
    _MscLpMsgBlockUsageAvg_Type()
)
mscLpMsgBlockUsageAvg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpMsgBlockUsageAvg.setStatus("mandatory")


class _MscLpMsgBlockUsageAvgMin_Type(Gauge32):
    """Custom type mscLpMsgBlockUsageAvgMin based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_MscLpMsgBlockUsageAvgMin_Type.__name__ = "Gauge32"
_MscLpMsgBlockUsageAvgMin_Object = MibTableColumn
mscLpMsgBlockUsageAvgMin = _MscLpMsgBlockUsageAvgMin_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 8),
    _MscLpMsgBlockUsageAvgMin_Type()
)
mscLpMsgBlockUsageAvgMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpMsgBlockUsageAvgMin.setStatus("mandatory")


class _MscLpMsgBlockUsageAvgMax_Type(Gauge32):
    """Custom type mscLpMsgBlockUsageAvgMax based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_MscLpMsgBlockUsageAvgMax_Type.__name__ = "Gauge32"
_MscLpMsgBlockUsageAvgMax_Object = MibTableColumn
mscLpMsgBlockUsageAvgMax = _MscLpMsgBlockUsageAvgMax_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 9),
    _MscLpMsgBlockUsageAvgMax_Type()
)
mscLpMsgBlockUsageAvgMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpMsgBlockUsageAvgMax.setStatus("mandatory")


class _MscLpLocalMsgBlockUsage_Type(Gauge32):
    """Custom type mscLpLocalMsgBlockUsage based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_MscLpLocalMsgBlockUsage_Type.__name__ = "Gauge32"
_MscLpLocalMsgBlockUsage_Object = MibTableColumn
mscLpLocalMsgBlockUsage = _MscLpLocalMsgBlockUsage_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 10),
    _MscLpLocalMsgBlockUsage_Type()
)
mscLpLocalMsgBlockUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpLocalMsgBlockUsage.setStatus("mandatory")


class _MscLpLocalMsgBlockUsageAvg_Type(Gauge32):
    """Custom type mscLpLocalMsgBlockUsageAvg based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_MscLpLocalMsgBlockUsageAvg_Type.__name__ = "Gauge32"
_MscLpLocalMsgBlockUsageAvg_Object = MibTableColumn
mscLpLocalMsgBlockUsageAvg = _MscLpLocalMsgBlockUsageAvg_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 11),
    _MscLpLocalMsgBlockUsageAvg_Type()
)
mscLpLocalMsgBlockUsageAvg.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpLocalMsgBlockUsageAvg.setStatus("mandatory")


class _MscLpLocalMsgBlockUsageMin_Type(Gauge32):
    """Custom type mscLpLocalMsgBlockUsageMin based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_MscLpLocalMsgBlockUsageMin_Type.__name__ = "Gauge32"
_MscLpLocalMsgBlockUsageMin_Object = MibTableColumn
mscLpLocalMsgBlockUsageMin = _MscLpLocalMsgBlockUsageMin_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 12),
    _MscLpLocalMsgBlockUsageMin_Type()
)
mscLpLocalMsgBlockUsageMin.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpLocalMsgBlockUsageMin.setStatus("mandatory")


class _MscLpLocalMsgBlockUsageMax_Type(Gauge32):
    """Custom type mscLpLocalMsgBlockUsageMax based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_MscLpLocalMsgBlockUsageMax_Type.__name__ = "Gauge32"
_MscLpLocalMsgBlockUsageMax_Object = MibTableColumn
mscLpLocalMsgBlockUsageMax = _MscLpLocalMsgBlockUsageMax_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 104, 1, 13),
    _MscLpLocalMsgBlockUsageMax_Type()
)
mscLpLocalMsgBlockUsageMax.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpLocalMsgBlockUsageMax.setStatus("mandatory")
_MscLpCapTable_Object = MibTable
mscLpCapTable = _MscLpCapTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 105)
)
if mibBuilder.loadTexts:
    mscLpCapTable.setStatus("mandatory")
_MscLpCapEntry_Object = MibTableRow
mscLpCapEntry = _MscLpCapEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 105, 1)
)
mscLpCapEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
)
if mibBuilder.loadTexts:
    mscLpCapEntry.setStatus("mandatory")


class _MscLpMsgBlockCapacity_Type(Unsigned32):
    """Custom type mscLpMsgBlockCapacity based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_MscLpMsgBlockCapacity_Type.__name__ = "Unsigned32"
_MscLpMsgBlockCapacity_Object = MibTableColumn
mscLpMsgBlockCapacity = _MscLpMsgBlockCapacity_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 105, 1, 1),
    _MscLpMsgBlockCapacity_Type()
)
mscLpMsgBlockCapacity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpMsgBlockCapacity.setStatus("mandatory")


class _MscLpLocalMsgBlockCapacity_Type(Unsigned32):
    """Custom type mscLpLocalMsgBlockCapacity based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_MscLpLocalMsgBlockCapacity_Type.__name__ = "Unsigned32"
_MscLpLocalMsgBlockCapacity_Object = MibTableColumn
mscLpLocalMsgBlockCapacity = _MscLpLocalMsgBlockCapacity_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 105, 1, 2),
    _MscLpLocalMsgBlockCapacity_Type()
)
mscLpLocalMsgBlockCapacity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpLocalMsgBlockCapacity.setStatus("mandatory")
_MscLpLinkToApplicationsTable_Object = MibTable
mscLpLinkToApplicationsTable = _MscLpLinkToApplicationsTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 242)
)
if mibBuilder.loadTexts:
    mscLpLinkToApplicationsTable.setStatus("mandatory")
_MscLpLinkToApplicationsEntry_Object = MibTableRow
mscLpLinkToApplicationsEntry = _MscLpLinkToApplicationsEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 242, 1)
)
mscLpLinkToApplicationsEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpLinkToApplicationsValue"),
)
if mibBuilder.loadTexts:
    mscLpLinkToApplicationsEntry.setStatus("mandatory")
_MscLpLinkToApplicationsValue_Type = Link
_MscLpLinkToApplicationsValue_Object = MibTableColumn
mscLpLinkToApplicationsValue = _MscLpLinkToApplicationsValue_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 242, 1, 1),
    _MscLpLinkToApplicationsValue_Type()
)
mscLpLinkToApplicationsValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpLinkToApplicationsValue.setStatus("mandatory")
_MscLpMemoryCapacityTable_Object = MibTable
mscLpMemoryCapacityTable = _MscLpMemoryCapacityTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 244)
)
if mibBuilder.loadTexts:
    mscLpMemoryCapacityTable.setStatus("mandatory")
_MscLpMemoryCapacityEntry_Object = MibTableRow
mscLpMemoryCapacityEntry = _MscLpMemoryCapacityEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 244, 1)
)
mscLpMemoryCapacityEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpMemoryCapacityIndex"),
)
if mibBuilder.loadTexts:
    mscLpMemoryCapacityEntry.setStatus("mandatory")


class _MscLpMemoryCapacityIndex_Type(Integer32):
    """Custom type mscLpMemoryCapacityIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fastRam", 0),
          ("normalRam", 1),
          ("sharedRam", 2))
    )


_MscLpMemoryCapacityIndex_Type.__name__ = "Integer32"
_MscLpMemoryCapacityIndex_Object = MibTableColumn
mscLpMemoryCapacityIndex = _MscLpMemoryCapacityIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 244, 1, 1),
    _MscLpMemoryCapacityIndex_Type()
)
mscLpMemoryCapacityIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpMemoryCapacityIndex.setStatus("mandatory")


class _MscLpMemoryCapacityValue_Type(Unsigned32):
    """Custom type mscLpMemoryCapacityValue based on Unsigned32"""
    subtypeSpec = Unsigned32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_MscLpMemoryCapacityValue_Type.__name__ = "Unsigned32"
_MscLpMemoryCapacityValue_Object = MibTableColumn
mscLpMemoryCapacityValue = _MscLpMemoryCapacityValue_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 244, 1, 2),
    _MscLpMemoryCapacityValue_Type()
)
mscLpMemoryCapacityValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpMemoryCapacityValue.setStatus("mandatory")
_MscLpMemoryUsageTable_Object = MibTable
mscLpMemoryUsageTable = _MscLpMemoryUsageTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 245)
)
if mibBuilder.loadTexts:
    mscLpMemoryUsageTable.setStatus("mandatory")
_MscLpMemoryUsageEntry_Object = MibTableRow
mscLpMemoryUsageEntry = _MscLpMemoryUsageEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 245, 1)
)
mscLpMemoryUsageEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpMemoryUsageIndex"),
)
if mibBuilder.loadTexts:
    mscLpMemoryUsageEntry.setStatus("mandatory")


class _MscLpMemoryUsageIndex_Type(Integer32):
    """Custom type mscLpMemoryUsageIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fastRam", 0),
          ("normalRam", 1),
          ("sharedRam", 2))
    )


_MscLpMemoryUsageIndex_Type.__name__ = "Integer32"
_MscLpMemoryUsageIndex_Object = MibTableColumn
mscLpMemoryUsageIndex = _MscLpMemoryUsageIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 245, 1, 1),
    _MscLpMemoryUsageIndex_Type()
)
mscLpMemoryUsageIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpMemoryUsageIndex.setStatus("mandatory")


class _MscLpMemoryUsageValue_Type(Gauge32):
    """Custom type mscLpMemoryUsageValue based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_MscLpMemoryUsageValue_Type.__name__ = "Gauge32"
_MscLpMemoryUsageValue_Object = MibTableColumn
mscLpMemoryUsageValue = _MscLpMemoryUsageValue_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 245, 1, 2),
    _MscLpMemoryUsageValue_Type()
)
mscLpMemoryUsageValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpMemoryUsageValue.setStatus("mandatory")
_MscLpMemoryUsageAvgTable_Object = MibTable
mscLpMemoryUsageAvgTable = _MscLpMemoryUsageAvgTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 276)
)
if mibBuilder.loadTexts:
    mscLpMemoryUsageAvgTable.setStatus("mandatory")
_MscLpMemoryUsageAvgEntry_Object = MibTableRow
mscLpMemoryUsageAvgEntry = _MscLpMemoryUsageAvgEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 276, 1)
)
mscLpMemoryUsageAvgEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpMemoryUsageAvgIndex"),
)
if mibBuilder.loadTexts:
    mscLpMemoryUsageAvgEntry.setStatus("mandatory")


class _MscLpMemoryUsageAvgIndex_Type(Integer32):
    """Custom type mscLpMemoryUsageAvgIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fastRam", 0),
          ("normalRam", 1),
          ("sharedRam", 2))
    )


_MscLpMemoryUsageAvgIndex_Type.__name__ = "Integer32"
_MscLpMemoryUsageAvgIndex_Object = MibTableColumn
mscLpMemoryUsageAvgIndex = _MscLpMemoryUsageAvgIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 276, 1, 1),
    _MscLpMemoryUsageAvgIndex_Type()
)
mscLpMemoryUsageAvgIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpMemoryUsageAvgIndex.setStatus("mandatory")


class _MscLpMemoryUsageAvgValue_Type(Gauge32):
    """Custom type mscLpMemoryUsageAvgValue based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_MscLpMemoryUsageAvgValue_Type.__name__ = "Gauge32"
_MscLpMemoryUsageAvgValue_Object = MibTableColumn
mscLpMemoryUsageAvgValue = _MscLpMemoryUsageAvgValue_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 276, 1, 2),
    _MscLpMemoryUsageAvgValue_Type()
)
mscLpMemoryUsageAvgValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpMemoryUsageAvgValue.setStatus("mandatory")
_MscLpMemoryUsageAvgMinTable_Object = MibTable
mscLpMemoryUsageAvgMinTable = _MscLpMemoryUsageAvgMinTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 277)
)
if mibBuilder.loadTexts:
    mscLpMemoryUsageAvgMinTable.setStatus("mandatory")
_MscLpMemoryUsageAvgMinEntry_Object = MibTableRow
mscLpMemoryUsageAvgMinEntry = _MscLpMemoryUsageAvgMinEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 277, 1)
)
mscLpMemoryUsageAvgMinEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpMemoryUsageAvgMinIndex"),
)
if mibBuilder.loadTexts:
    mscLpMemoryUsageAvgMinEntry.setStatus("mandatory")


class _MscLpMemoryUsageAvgMinIndex_Type(Integer32):
    """Custom type mscLpMemoryUsageAvgMinIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fastRam", 0),
          ("normalRam", 1),
          ("sharedRam", 2))
    )


_MscLpMemoryUsageAvgMinIndex_Type.__name__ = "Integer32"
_MscLpMemoryUsageAvgMinIndex_Object = MibTableColumn
mscLpMemoryUsageAvgMinIndex = _MscLpMemoryUsageAvgMinIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 277, 1, 1),
    _MscLpMemoryUsageAvgMinIndex_Type()
)
mscLpMemoryUsageAvgMinIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpMemoryUsageAvgMinIndex.setStatus("mandatory")


class _MscLpMemoryUsageAvgMinValue_Type(Gauge32):
    """Custom type mscLpMemoryUsageAvgMinValue based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_MscLpMemoryUsageAvgMinValue_Type.__name__ = "Gauge32"
_MscLpMemoryUsageAvgMinValue_Object = MibTableColumn
mscLpMemoryUsageAvgMinValue = _MscLpMemoryUsageAvgMinValue_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 277, 1, 2),
    _MscLpMemoryUsageAvgMinValue_Type()
)
mscLpMemoryUsageAvgMinValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpMemoryUsageAvgMinValue.setStatus("mandatory")
_MscLpMemoryUsageAvgMaxTable_Object = MibTable
mscLpMemoryUsageAvgMaxTable = _MscLpMemoryUsageAvgMaxTable_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 278)
)
if mibBuilder.loadTexts:
    mscLpMemoryUsageAvgMaxTable.setStatus("mandatory")
_MscLpMemoryUsageAvgMaxEntry_Object = MibTableRow
mscLpMemoryUsageAvgMaxEntry = _MscLpMemoryUsageAvgMaxEntry_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 278, 1)
)
mscLpMemoryUsageAvgMaxEntry.setIndexNames(
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"),
    (0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpMemoryUsageAvgMaxIndex"),
)
if mibBuilder.loadTexts:
    mscLpMemoryUsageAvgMaxEntry.setStatus("mandatory")


class _MscLpMemoryUsageAvgMaxIndex_Type(Integer32):
    """Custom type mscLpMemoryUsageAvgMaxIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fastRam", 0),
          ("normalRam", 1),
          ("sharedRam", 2))
    )


_MscLpMemoryUsageAvgMaxIndex_Type.__name__ = "Integer32"
_MscLpMemoryUsageAvgMaxIndex_Object = MibTableColumn
mscLpMemoryUsageAvgMaxIndex = _MscLpMemoryUsageAvgMaxIndex_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 278, 1, 1),
    _MscLpMemoryUsageAvgMaxIndex_Type()
)
mscLpMemoryUsageAvgMaxIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mscLpMemoryUsageAvgMaxIndex.setStatus("mandatory")


class _MscLpMemoryUsageAvgMaxValue_Type(Gauge32):
    """Custom type mscLpMemoryUsageAvgMaxValue based on Gauge32"""
    subtypeSpec = Gauge32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_MscLpMemoryUsageAvgMaxValue_Type.__name__ = "Gauge32"
_MscLpMemoryUsageAvgMaxValue_Object = MibTableColumn
mscLpMemoryUsageAvgMaxValue = _MscLpMemoryUsageAvgMaxValue_Object(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 278, 1, 2),
    _MscLpMemoryUsageAvgMaxValue_Type()
)
mscLpMemoryUsageAvgMaxValue.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mscLpMemoryUsageAvgMaxValue.setStatus("mandatory")
_LogicalProcessorMIB_ObjectIdentity = ObjectIdentity
logicalProcessorMIB = _LogicalProcessorMIB_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 11)
)
_LogicalProcessorGroup_ObjectIdentity = ObjectIdentity
logicalProcessorGroup = _LogicalProcessorGroup_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 11, 1)
)
_LogicalProcessorGroupCA_ObjectIdentity = ObjectIdentity
logicalProcessorGroupCA = _LogicalProcessorGroupCA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 11, 1, 1)
)
_LogicalProcessorGroupCA02_ObjectIdentity = ObjectIdentity
logicalProcessorGroupCA02 = _LogicalProcessorGroupCA02_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 11, 1, 1, 3)
)
_LogicalProcessorGroupCA02A_ObjectIdentity = ObjectIdentity
logicalProcessorGroupCA02A = _LogicalProcessorGroupCA02A_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 11, 1, 1, 3, 2)
)
_LogicalProcessorCapabilities_ObjectIdentity = ObjectIdentity
logicalProcessorCapabilities = _LogicalProcessorCapabilities_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 11, 3)
)
_LogicalProcessorCapabilitiesCA_ObjectIdentity = ObjectIdentity
logicalProcessorCapabilitiesCA = _LogicalProcessorCapabilitiesCA_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 11, 3, 1)
)
_LogicalProcessorCapabilitiesCA02_ObjectIdentity = ObjectIdentity
logicalProcessorCapabilitiesCA02 = _LogicalProcessorCapabilitiesCA02_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 11, 3, 1, 3)
)
_LogicalProcessorCapabilitiesCA02A_ObjectIdentity = ObjectIdentity
logicalProcessorCapabilitiesCA02A = _LogicalProcessorCapabilitiesCA02A_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 11, 3, 1, 3, 2)
)

# Managed Objects groups


# Notification objects


# Notifications groups


# Agent capabilities


# Module compliance


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB",
    **{"mscLp": mscLp,
       "mscLpRowStatusTable": mscLpRowStatusTable,
       "mscLpRowStatusEntry": mscLpRowStatusEntry,
       "mscLpRowStatus": mscLpRowStatus,
       "mscLpComponentName": mscLpComponentName,
       "mscLpStorageType": mscLpStorageType,
       "mscLpIndex": mscLpIndex,
       "mscLpDS3": mscLpDS3,
       "mscLpDS3RowStatusTable": mscLpDS3RowStatusTable,
       "mscLpDS3RowStatusEntry": mscLpDS3RowStatusEntry,
       "mscLpDS3RowStatus": mscLpDS3RowStatus,
       "mscLpDS3ComponentName": mscLpDS3ComponentName,
       "mscLpDS3StorageType": mscLpDS3StorageType,
       "mscLpDS3Index": mscLpDS3Index,
       "mscLpDS3Test": mscLpDS3Test,
       "mscLpDS3TestRowStatusTable": mscLpDS3TestRowStatusTable,
       "mscLpDS3TestRowStatusEntry": mscLpDS3TestRowStatusEntry,
       "mscLpDS3TestRowStatus": mscLpDS3TestRowStatus,
       "mscLpDS3TestComponentName": mscLpDS3TestComponentName,
       "mscLpDS3TestStorageType": mscLpDS3TestStorageType,
       "mscLpDS3TestIndex": mscLpDS3TestIndex,
       "mscLpDS3TestStateTable": mscLpDS3TestStateTable,
       "mscLpDS3TestStateEntry": mscLpDS3TestStateEntry,
       "mscLpDS3TestAdminState": mscLpDS3TestAdminState,
       "mscLpDS3TestOperationalState": mscLpDS3TestOperationalState,
       "mscLpDS3TestUsageState": mscLpDS3TestUsageState,
       "mscLpDS3TestSetupTable": mscLpDS3TestSetupTable,
       "mscLpDS3TestSetupEntry": mscLpDS3TestSetupEntry,
       "mscLpDS3TestPurpose": mscLpDS3TestPurpose,
       "mscLpDS3TestType": mscLpDS3TestType,
       "mscLpDS3TestFrmSize": mscLpDS3TestFrmSize,
       "mscLpDS3TestFrmPatternType": mscLpDS3TestFrmPatternType,
       "mscLpDS3TestCustomizedPattern": mscLpDS3TestCustomizedPattern,
       "mscLpDS3TestDataStartDelay": mscLpDS3TestDataStartDelay,
       "mscLpDS3TestDisplayInterval": mscLpDS3TestDisplayInterval,
       "mscLpDS3TestDuration": mscLpDS3TestDuration,
       "mscLpDS3TestResultsTable": mscLpDS3TestResultsTable,
       "mscLpDS3TestResultsEntry": mscLpDS3TestResultsEntry,
       "mscLpDS3TestElapsedTime": mscLpDS3TestElapsedTime,
       "mscLpDS3TestTimeRemaining": mscLpDS3TestTimeRemaining,
       "mscLpDS3TestCauseOfTermination": mscLpDS3TestCauseOfTermination,
       "mscLpDS3TestBitsTx": mscLpDS3TestBitsTx,
       "mscLpDS3TestBytesTx": mscLpDS3TestBytesTx,
       "mscLpDS3TestFrmTx": mscLpDS3TestFrmTx,
       "mscLpDS3TestBitsRx": mscLpDS3TestBitsRx,
       "mscLpDS3TestBytesRx": mscLpDS3TestBytesRx,
       "mscLpDS3TestFrmRx": mscLpDS3TestFrmRx,
       "mscLpDS3TestErroredFrmRx": mscLpDS3TestErroredFrmRx,
       "mscLpDS3TestBitErrorRate": mscLpDS3TestBitErrorRate,
       "mscLpDS3CBit": mscLpDS3CBit,
       "mscLpDS3CBitRowStatusTable": mscLpDS3CBitRowStatusTable,
       "mscLpDS3CBitRowStatusEntry": mscLpDS3CBitRowStatusEntry,
       "mscLpDS3CBitRowStatus": mscLpDS3CBitRowStatus,
       "mscLpDS3CBitComponentName": mscLpDS3CBitComponentName,
       "mscLpDS3CBitStorageType": mscLpDS3CBitStorageType,
       "mscLpDS3CBitIndex": mscLpDS3CBitIndex,
       "mscLpDS3CBitOperationalTable": mscLpDS3CBitOperationalTable,
       "mscLpDS3CBitOperationalEntry": mscLpDS3CBitOperationalEntry,
       "mscLpDS3CBitFarEndAlarm": mscLpDS3CBitFarEndAlarm,
       "mscLpDS3CBitLoopedbackToFarEnd": mscLpDS3CBitLoopedbackToFarEnd,
       "mscLpDS3CBitLoopbackAtFarEndRequested": mscLpDS3CBitLoopbackAtFarEndRequested,
       "mscLpDS3CBitStatsTable": mscLpDS3CBitStatsTable,
       "mscLpDS3CBitStatsEntry": mscLpDS3CBitStatsEntry,
       "mscLpDS3CBitCbitErrorFreeSec": mscLpDS3CBitCbitErrorFreeSec,
       "mscLpDS3CBitCbitCodeViolations": mscLpDS3CBitCbitCodeViolations,
       "mscLpDS3CBitCbitErroredSec": mscLpDS3CBitCbitErroredSec,
       "mscLpDS3CBitCbitSevErroredSec": mscLpDS3CBitCbitSevErroredSec,
       "mscLpDS3CBitCbitUnavailSec": mscLpDS3CBitCbitUnavailSec,
       "mscLpDS3CBitFarEndErrorFreeSec": mscLpDS3CBitFarEndErrorFreeSec,
       "mscLpDS3CBitFarEndCodeViolations": mscLpDS3CBitFarEndCodeViolations,
       "mscLpDS3CBitFarEndErroredSec": mscLpDS3CBitFarEndErroredSec,
       "mscLpDS3CBitFarEndSevErroredSec": mscLpDS3CBitFarEndSevErroredSec,
       "mscLpDS3CBitFarEndSefAisSec": mscLpDS3CBitFarEndSefAisSec,
       "mscLpDS3CBitFarEndUnavailSec": mscLpDS3CBitFarEndUnavailSec,
       "mscLpDS3CBitFarEndFailures": mscLpDS3CBitFarEndFailures,
       "mscLpDS3Plcp": mscLpDS3Plcp,
       "mscLpDS3PlcpRowStatusTable": mscLpDS3PlcpRowStatusTable,
       "mscLpDS3PlcpRowStatusEntry": mscLpDS3PlcpRowStatusEntry,
       "mscLpDS3PlcpRowStatus": mscLpDS3PlcpRowStatus,
       "mscLpDS3PlcpComponentName": mscLpDS3PlcpComponentName,
       "mscLpDS3PlcpStorageType": mscLpDS3PlcpStorageType,
       "mscLpDS3PlcpIndex": mscLpDS3PlcpIndex,
       "mscLpDS3PlcpOperationalTable": mscLpDS3PlcpOperationalTable,
       "mscLpDS3PlcpOperationalEntry": mscLpDS3PlcpOperationalEntry,
       "mscLpDS3PlcpLofAlarm": mscLpDS3PlcpLofAlarm,
       "mscLpDS3PlcpRxRaiAlarm": mscLpDS3PlcpRxRaiAlarm,
       "mscLpDS3PlcpStatsTable": mscLpDS3PlcpStatsTable,
       "mscLpDS3PlcpStatsEntry": mscLpDS3PlcpStatsEntry,
       "mscLpDS3PlcpErrorFreeSec": mscLpDS3PlcpErrorFreeSec,
       "mscLpDS3PlcpCodingViolations": mscLpDS3PlcpCodingViolations,
       "mscLpDS3PlcpErroredSec": mscLpDS3PlcpErroredSec,
       "mscLpDS3PlcpSevErroredSec": mscLpDS3PlcpSevErroredSec,
       "mscLpDS3PlcpSevErroredFramingSec": mscLpDS3PlcpSevErroredFramingSec,
       "mscLpDS3PlcpUnavailSec": mscLpDS3PlcpUnavailSec,
       "mscLpDS3PlcpFarEndErrorFreeSec": mscLpDS3PlcpFarEndErrorFreeSec,
       "mscLpDS3PlcpFarEndCodingViolations": mscLpDS3PlcpFarEndCodingViolations,
       "mscLpDS3PlcpFarEndErroredSec": mscLpDS3PlcpFarEndErroredSec,
       "mscLpDS3PlcpFarEndSevErroredSec": mscLpDS3PlcpFarEndSevErroredSec,
       "mscLpDS3PlcpFarEndUnavailableSec": mscLpDS3PlcpFarEndUnavailableSec,
       "mscLpDS3Cell": mscLpDS3Cell,
       "mscLpDS3CellRowStatusTable": mscLpDS3CellRowStatusTable,
       "mscLpDS3CellRowStatusEntry": mscLpDS3CellRowStatusEntry,
       "mscLpDS3CellRowStatus": mscLpDS3CellRowStatus,
       "mscLpDS3CellComponentName": mscLpDS3CellComponentName,
       "mscLpDS3CellStorageType": mscLpDS3CellStorageType,
       "mscLpDS3CellIndex": mscLpDS3CellIndex,
       "mscLpDS3CellProvTable": mscLpDS3CellProvTable,
       "mscLpDS3CellProvEntry": mscLpDS3CellProvEntry,
       "mscLpDS3CellAlarmActDelay": mscLpDS3CellAlarmActDelay,
       "mscLpDS3CellScrambleCellPayload": mscLpDS3CellScrambleCellPayload,
       "mscLpDS3CellCorrectSingleBitHeaderErrors": mscLpDS3CellCorrectSingleBitHeaderErrors,
       "mscLpDS3CellOperTable": mscLpDS3CellOperTable,
       "mscLpDS3CellOperEntry": mscLpDS3CellOperEntry,
       "mscLpDS3CellLcdAlarm": mscLpDS3CellLcdAlarm,
       "mscLpDS3CellStatsTable": mscLpDS3CellStatsTable,
       "mscLpDS3CellStatsEntry": mscLpDS3CellStatsEntry,
       "mscLpDS3CellUncorrectableHecErrors": mscLpDS3CellUncorrectableHecErrors,
       "mscLpDS3CellSevErroredSec": mscLpDS3CellSevErroredSec,
       "mscLpDS3CellReceiveCellUtilization": mscLpDS3CellReceiveCellUtilization,
       "mscLpDS3CellTransmitCellUtilization": mscLpDS3CellTransmitCellUtilization,
       "mscLpDS3CellCorrectableHeaderErrors": mscLpDS3CellCorrectableHeaderErrors,
       "mscLpDS3DS1": mscLpDS3DS1,
       "mscLpDS3DS1RowStatusTable": mscLpDS3DS1RowStatusTable,
       "mscLpDS3DS1RowStatusEntry": mscLpDS3DS1RowStatusEntry,
       "mscLpDS3DS1RowStatus": mscLpDS3DS1RowStatus,
       "mscLpDS3DS1ComponentName": mscLpDS3DS1ComponentName,
       "mscLpDS3DS1StorageType": mscLpDS3DS1StorageType,
       "mscLpDS3DS1Index": mscLpDS3DS1Index,
       "mscLpDS3DS1Chan": mscLpDS3DS1Chan,
       "mscLpDS3DS1ChanRowStatusTable": mscLpDS3DS1ChanRowStatusTable,
       "mscLpDS3DS1ChanRowStatusEntry": mscLpDS3DS1ChanRowStatusEntry,
       "mscLpDS3DS1ChanRowStatus": mscLpDS3DS1ChanRowStatus,
       "mscLpDS3DS1ChanComponentName": mscLpDS3DS1ChanComponentName,
       "mscLpDS3DS1ChanStorageType": mscLpDS3DS1ChanStorageType,
       "mscLpDS3DS1ChanIndex": mscLpDS3DS1ChanIndex,
       "mscLpDS3DS1ChanTest": mscLpDS3DS1ChanTest,
       "mscLpDS3DS1ChanTestRowStatusTable": mscLpDS3DS1ChanTestRowStatusTable,
       "mscLpDS3DS1ChanTestRowStatusEntry": mscLpDS3DS1ChanTestRowStatusEntry,
       "mscLpDS3DS1ChanTestRowStatus": mscLpDS3DS1ChanTestRowStatus,
       "mscLpDS3DS1ChanTestComponentName": mscLpDS3DS1ChanTestComponentName,
       "mscLpDS3DS1ChanTestStorageType": mscLpDS3DS1ChanTestStorageType,
       "mscLpDS3DS1ChanTestIndex": mscLpDS3DS1ChanTestIndex,
       "mscLpDS3DS1ChanTestStateTable": mscLpDS3DS1ChanTestStateTable,
       "mscLpDS3DS1ChanTestStateEntry": mscLpDS3DS1ChanTestStateEntry,
       "mscLpDS3DS1ChanTestAdminState": mscLpDS3DS1ChanTestAdminState,
       "mscLpDS3DS1ChanTestOperationalState": mscLpDS3DS1ChanTestOperationalState,
       "mscLpDS3DS1ChanTestUsageState": mscLpDS3DS1ChanTestUsageState,
       "mscLpDS3DS1ChanTestSetupTable": mscLpDS3DS1ChanTestSetupTable,
       "mscLpDS3DS1ChanTestSetupEntry": mscLpDS3DS1ChanTestSetupEntry,
       "mscLpDS3DS1ChanTestPurpose": mscLpDS3DS1ChanTestPurpose,
       "mscLpDS3DS1ChanTestType": mscLpDS3DS1ChanTestType,
       "mscLpDS3DS1ChanTestFrmSize": mscLpDS3DS1ChanTestFrmSize,
       "mscLpDS3DS1ChanTestFrmPatternType": mscLpDS3DS1ChanTestFrmPatternType,
       "mscLpDS3DS1ChanTestCustomizedPattern": mscLpDS3DS1ChanTestCustomizedPattern,
       "mscLpDS3DS1ChanTestDataStartDelay": mscLpDS3DS1ChanTestDataStartDelay,
       "mscLpDS3DS1ChanTestDisplayInterval": mscLpDS3DS1ChanTestDisplayInterval,
       "mscLpDS3DS1ChanTestDuration": mscLpDS3DS1ChanTestDuration,
       "mscLpDS3DS1ChanTestResultsTable": mscLpDS3DS1ChanTestResultsTable,
       "mscLpDS3DS1ChanTestResultsEntry": mscLpDS3DS1ChanTestResultsEntry,
       "mscLpDS3DS1ChanTestElapsedTime": mscLpDS3DS1ChanTestElapsedTime,
       "mscLpDS3DS1ChanTestTimeRemaining": mscLpDS3DS1ChanTestTimeRemaining,
       "mscLpDS3DS1ChanTestCauseOfTermination": mscLpDS3DS1ChanTestCauseOfTermination,
       "mscLpDS3DS1ChanTestBitsTx": mscLpDS3DS1ChanTestBitsTx,
       "mscLpDS3DS1ChanTestBytesTx": mscLpDS3DS1ChanTestBytesTx,
       "mscLpDS3DS1ChanTestFrmTx": mscLpDS3DS1ChanTestFrmTx,
       "mscLpDS3DS1ChanTestBitsRx": mscLpDS3DS1ChanTestBitsRx,
       "mscLpDS3DS1ChanTestBytesRx": mscLpDS3DS1ChanTestBytesRx,
       "mscLpDS3DS1ChanTestFrmRx": mscLpDS3DS1ChanTestFrmRx,
       "mscLpDS3DS1ChanTestErroredFrmRx": mscLpDS3DS1ChanTestErroredFrmRx,
       "mscLpDS3DS1ChanTestBitErrorRate": mscLpDS3DS1ChanTestBitErrorRate,
       "mscLpDS3DS1ChanCell": mscLpDS3DS1ChanCell,
       "mscLpDS3DS1ChanCellRowStatusTable": mscLpDS3DS1ChanCellRowStatusTable,
       "mscLpDS3DS1ChanCellRowStatusEntry": mscLpDS3DS1ChanCellRowStatusEntry,
       "mscLpDS3DS1ChanCellRowStatus": mscLpDS3DS1ChanCellRowStatus,
       "mscLpDS3DS1ChanCellComponentName": mscLpDS3DS1ChanCellComponentName,
       "mscLpDS3DS1ChanCellStorageType": mscLpDS3DS1ChanCellStorageType,
       "mscLpDS3DS1ChanCellIndex": mscLpDS3DS1ChanCellIndex,
       "mscLpDS3DS1ChanCellProvTable": mscLpDS3DS1ChanCellProvTable,
       "mscLpDS3DS1ChanCellProvEntry": mscLpDS3DS1ChanCellProvEntry,
       "mscLpDS3DS1ChanCellAlarmActDelay": mscLpDS3DS1ChanCellAlarmActDelay,
       "mscLpDS3DS1ChanCellScrambleCellPayload": mscLpDS3DS1ChanCellScrambleCellPayload,
       "mscLpDS3DS1ChanCellCorrectSingleBitHeaderErrors": mscLpDS3DS1ChanCellCorrectSingleBitHeaderErrors,
       "mscLpDS3DS1ChanCellOperTable": mscLpDS3DS1ChanCellOperTable,
       "mscLpDS3DS1ChanCellOperEntry": mscLpDS3DS1ChanCellOperEntry,
       "mscLpDS3DS1ChanCellLcdAlarm": mscLpDS3DS1ChanCellLcdAlarm,
       "mscLpDS3DS1ChanCellStatsTable": mscLpDS3DS1ChanCellStatsTable,
       "mscLpDS3DS1ChanCellStatsEntry": mscLpDS3DS1ChanCellStatsEntry,
       "mscLpDS3DS1ChanCellUncorrectableHecErrors": mscLpDS3DS1ChanCellUncorrectableHecErrors,
       "mscLpDS3DS1ChanCellSevErroredSec": mscLpDS3DS1ChanCellSevErroredSec,
       "mscLpDS3DS1ChanCellReceiveCellUtilization": mscLpDS3DS1ChanCellReceiveCellUtilization,
       "mscLpDS3DS1ChanCellTransmitCellUtilization": mscLpDS3DS1ChanCellTransmitCellUtilization,
       "mscLpDS3DS1ChanCellCorrectableHeaderErrors": mscLpDS3DS1ChanCellCorrectableHeaderErrors,
       "mscLpDS3DS1ChanTc": mscLpDS3DS1ChanTc,
       "mscLpDS3DS1ChanTcRowStatusTable": mscLpDS3DS1ChanTcRowStatusTable,
       "mscLpDS3DS1ChanTcRowStatusEntry": mscLpDS3DS1ChanTcRowStatusEntry,
       "mscLpDS3DS1ChanTcRowStatus": mscLpDS3DS1ChanTcRowStatus,
       "mscLpDS3DS1ChanTcComponentName": mscLpDS3DS1ChanTcComponentName,
       "mscLpDS3DS1ChanTcStorageType": mscLpDS3DS1ChanTcStorageType,
       "mscLpDS3DS1ChanTcIndex": mscLpDS3DS1ChanTcIndex,
       "mscLpDS3DS1ChanTcProvTable": mscLpDS3DS1ChanTcProvTable,
       "mscLpDS3DS1ChanTcProvEntry": mscLpDS3DS1ChanTcProvEntry,
       "mscLpDS3DS1ChanTcReplacementData": mscLpDS3DS1ChanTcReplacementData,
       "mscLpDS3DS1ChanTcSignalOneDuration": mscLpDS3DS1ChanTcSignalOneDuration,
       "mscLpDS3DS1ChanTcOpTable": mscLpDS3DS1ChanTcOpTable,
       "mscLpDS3DS1ChanTcOpEntry": mscLpDS3DS1ChanTcOpEntry,
       "mscLpDS3DS1ChanTcIngressConditioning": mscLpDS3DS1ChanTcIngressConditioning,
       "mscLpDS3DS1ChanTcEgressConditioning": mscLpDS3DS1ChanTcEgressConditioning,
       "mscLpDS3DS1ChanTcSigOneTable": mscLpDS3DS1ChanTcSigOneTable,
       "mscLpDS3DS1ChanTcSigOneEntry": mscLpDS3DS1ChanTcSigOneEntry,
       "mscLpDS3DS1ChanTcSigOneIndex": mscLpDS3DS1ChanTcSigOneIndex,
       "mscLpDS3DS1ChanTcSigOneValue": mscLpDS3DS1ChanTcSigOneValue,
       "mscLpDS3DS1ChanTcSigTwoTable": mscLpDS3DS1ChanTcSigTwoTable,
       "mscLpDS3DS1ChanTcSigTwoEntry": mscLpDS3DS1ChanTcSigTwoEntry,
       "mscLpDS3DS1ChanTcSigTwoIndex": mscLpDS3DS1ChanTcSigTwoIndex,
       "mscLpDS3DS1ChanTcSigTwoValue": mscLpDS3DS1ChanTcSigTwoValue,
       "mscLpDS3DS1ChanProvTable": mscLpDS3DS1ChanProvTable,
       "mscLpDS3DS1ChanProvEntry": mscLpDS3DS1ChanProvEntry,
       "mscLpDS3DS1ChanTimeslots": mscLpDS3DS1ChanTimeslots,
       "mscLpDS3DS1ChanTimeslotDataRate": mscLpDS3DS1ChanTimeslotDataRate,
       "mscLpDS3DS1ChanApplicationFramerName": mscLpDS3DS1ChanApplicationFramerName,
       "mscLpDS3DS1ChanCidDataTable": mscLpDS3DS1ChanCidDataTable,
       "mscLpDS3DS1ChanCidDataEntry": mscLpDS3DS1ChanCidDataEntry,
       "mscLpDS3DS1ChanCustomerIdentifier": mscLpDS3DS1ChanCustomerIdentifier,
       "mscLpDS3DS1ChanIfEntryTable": mscLpDS3DS1ChanIfEntryTable,
       "mscLpDS3DS1ChanIfEntryEntry": mscLpDS3DS1ChanIfEntryEntry,
       "mscLpDS3DS1ChanIfAdminStatus": mscLpDS3DS1ChanIfAdminStatus,
       "mscLpDS3DS1ChanIfIndex": mscLpDS3DS1ChanIfIndex,
       "mscLpDS3DS1ChanOperStatusTable": mscLpDS3DS1ChanOperStatusTable,
       "mscLpDS3DS1ChanOperStatusEntry": mscLpDS3DS1ChanOperStatusEntry,
       "mscLpDS3DS1ChanSnmpOperStatus": mscLpDS3DS1ChanSnmpOperStatus,
       "mscLpDS3DS1ChanStateTable": mscLpDS3DS1ChanStateTable,
       "mscLpDS3DS1ChanStateEntry": mscLpDS3DS1ChanStateEntry,
       "mscLpDS3DS1ChanAdminState": mscLpDS3DS1ChanAdminState,
       "mscLpDS3DS1ChanOperationalState": mscLpDS3DS1ChanOperationalState,
       "mscLpDS3DS1ChanUsageState": mscLpDS3DS1ChanUsageState,
       "mscLpDS3DS1ChanAvailabilityStatus": mscLpDS3DS1ChanAvailabilityStatus,
       "mscLpDS3DS1ChanProceduralStatus": mscLpDS3DS1ChanProceduralStatus,
       "mscLpDS3DS1ChanControlStatus": mscLpDS3DS1ChanControlStatus,
       "mscLpDS3DS1ChanAlarmStatus": mscLpDS3DS1ChanAlarmStatus,
       "mscLpDS3DS1ChanStandbyStatus": mscLpDS3DS1ChanStandbyStatus,
       "mscLpDS3DS1ChanUnknownStatus": mscLpDS3DS1ChanUnknownStatus,
       "mscLpDS3DS1ChanOperTable": mscLpDS3DS1ChanOperTable,
       "mscLpDS3DS1ChanOperEntry": mscLpDS3DS1ChanOperEntry,
       "mscLpDS3DS1ChanActualChannelSpeed": mscLpDS3DS1ChanActualChannelSpeed,
       "mscLpDS3DS1ChanAdminInfoTable": mscLpDS3DS1ChanAdminInfoTable,
       "mscLpDS3DS1ChanAdminInfoEntry": mscLpDS3DS1ChanAdminInfoEntry,
       "mscLpDS3DS1ChanVendor": mscLpDS3DS1ChanVendor,
       "mscLpDS3DS1ChanCommentText": mscLpDS3DS1ChanCommentText,
       "mscLpDS3DS1Test": mscLpDS3DS1Test,
       "mscLpDS3DS1TestRowStatusTable": mscLpDS3DS1TestRowStatusTable,
       "mscLpDS3DS1TestRowStatusEntry": mscLpDS3DS1TestRowStatusEntry,
       "mscLpDS3DS1TestRowStatus": mscLpDS3DS1TestRowStatus,
       "mscLpDS3DS1TestComponentName": mscLpDS3DS1TestComponentName,
       "mscLpDS3DS1TestStorageType": mscLpDS3DS1TestStorageType,
       "mscLpDS3DS1TestIndex": mscLpDS3DS1TestIndex,
       "mscLpDS3DS1TestStateTable": mscLpDS3DS1TestStateTable,
       "mscLpDS3DS1TestStateEntry": mscLpDS3DS1TestStateEntry,
       "mscLpDS3DS1TestAdminState": mscLpDS3DS1TestAdminState,
       "mscLpDS3DS1TestOperationalState": mscLpDS3DS1TestOperationalState,
       "mscLpDS3DS1TestUsageState": mscLpDS3DS1TestUsageState,
       "mscLpDS3DS1TestSetupTable": mscLpDS3DS1TestSetupTable,
       "mscLpDS3DS1TestSetupEntry": mscLpDS3DS1TestSetupEntry,
       "mscLpDS3DS1TestPurpose": mscLpDS3DS1TestPurpose,
       "mscLpDS3DS1TestType": mscLpDS3DS1TestType,
       "mscLpDS3DS1TestFrmSize": mscLpDS3DS1TestFrmSize,
       "mscLpDS3DS1TestFrmPatternType": mscLpDS3DS1TestFrmPatternType,
       "mscLpDS3DS1TestCustomizedPattern": mscLpDS3DS1TestCustomizedPattern,
       "mscLpDS3DS1TestDataStartDelay": mscLpDS3DS1TestDataStartDelay,
       "mscLpDS3DS1TestDisplayInterval": mscLpDS3DS1TestDisplayInterval,
       "mscLpDS3DS1TestDuration": mscLpDS3DS1TestDuration,
       "mscLpDS3DS1TestResultsTable": mscLpDS3DS1TestResultsTable,
       "mscLpDS3DS1TestResultsEntry": mscLpDS3DS1TestResultsEntry,
       "mscLpDS3DS1TestElapsedTime": mscLpDS3DS1TestElapsedTime,
       "mscLpDS3DS1TestTimeRemaining": mscLpDS3DS1TestTimeRemaining,
       "mscLpDS3DS1TestCauseOfTermination": mscLpDS3DS1TestCauseOfTermination,
       "mscLpDS3DS1TestBitsTx": mscLpDS3DS1TestBitsTx,
       "mscLpDS3DS1TestBytesTx": mscLpDS3DS1TestBytesTx,
       "mscLpDS3DS1TestFrmTx": mscLpDS3DS1TestFrmTx,
       "mscLpDS3DS1TestBitsRx": mscLpDS3DS1TestBitsRx,
       "mscLpDS3DS1TestBytesRx": mscLpDS3DS1TestBytesRx,
       "mscLpDS3DS1TestFrmRx": mscLpDS3DS1TestFrmRx,
       "mscLpDS3DS1TestErroredFrmRx": mscLpDS3DS1TestErroredFrmRx,
       "mscLpDS3DS1TestBitErrorRate": mscLpDS3DS1TestBitErrorRate,
       "mscLpDS3DS1ProvTable": mscLpDS3DS1ProvTable,
       "mscLpDS3DS1ProvEntry": mscLpDS3DS1ProvEntry,
       "mscLpDS3DS1LineType": mscLpDS3DS1LineType,
       "mscLpDS3DS1ZeroCoding": mscLpDS3DS1ZeroCoding,
       "mscLpDS3DS1ClockingSource": mscLpDS3DS1ClockingSource,
       "mscLpDS3DS1CidDataTable": mscLpDS3DS1CidDataTable,
       "mscLpDS3DS1CidDataEntry": mscLpDS3DS1CidDataEntry,
       "mscLpDS3DS1CustomerIdentifier": mscLpDS3DS1CustomerIdentifier,
       "mscLpDS3DS1AdminInfoTable": mscLpDS3DS1AdminInfoTable,
       "mscLpDS3DS1AdminInfoEntry": mscLpDS3DS1AdminInfoEntry,
       "mscLpDS3DS1Vendor": mscLpDS3DS1Vendor,
       "mscLpDS3DS1CommentText": mscLpDS3DS1CommentText,
       "mscLpDS3DS1IfEntryTable": mscLpDS3DS1IfEntryTable,
       "mscLpDS3DS1IfEntryEntry": mscLpDS3DS1IfEntryEntry,
       "mscLpDS3DS1IfAdminStatus": mscLpDS3DS1IfAdminStatus,
       "mscLpDS3DS1IfIndex": mscLpDS3DS1IfIndex,
       "mscLpDS3DS1OperStatusTable": mscLpDS3DS1OperStatusTable,
       "mscLpDS3DS1OperStatusEntry": mscLpDS3DS1OperStatusEntry,
       "mscLpDS3DS1SnmpOperStatus": mscLpDS3DS1SnmpOperStatus,
       "mscLpDS3DS1StateTable": mscLpDS3DS1StateTable,
       "mscLpDS3DS1StateEntry": mscLpDS3DS1StateEntry,
       "mscLpDS3DS1AdminState": mscLpDS3DS1AdminState,
       "mscLpDS3DS1OperationalState": mscLpDS3DS1OperationalState,
       "mscLpDS3DS1UsageState": mscLpDS3DS1UsageState,
       "mscLpDS3DS1AvailabilityStatus": mscLpDS3DS1AvailabilityStatus,
       "mscLpDS3DS1ProceduralStatus": mscLpDS3DS1ProceduralStatus,
       "mscLpDS3DS1ControlStatus": mscLpDS3DS1ControlStatus,
       "mscLpDS3DS1AlarmStatus": mscLpDS3DS1AlarmStatus,
       "mscLpDS3DS1StandbyStatus": mscLpDS3DS1StandbyStatus,
       "mscLpDS3DS1UnknownStatus": mscLpDS3DS1UnknownStatus,
       "mscLpDS3DS1OperTable": mscLpDS3DS1OperTable,
       "mscLpDS3DS1OperEntry": mscLpDS3DS1OperEntry,
       "mscLpDS3DS1RxAisAlarm": mscLpDS3DS1RxAisAlarm,
       "mscLpDS3DS1LofAlarm": mscLpDS3DS1LofAlarm,
       "mscLpDS3DS1RxRaiAlarm": mscLpDS3DS1RxRaiAlarm,
       "mscLpDS3DS1TxAisAlarm": mscLpDS3DS1TxAisAlarm,
       "mscLpDS3DS1TxRaiAlarm": mscLpDS3DS1TxRaiAlarm,
       "mscLpDS3DS1StatsTable": mscLpDS3DS1StatsTable,
       "mscLpDS3DS1StatsEntry": mscLpDS3DS1StatsEntry,
       "mscLpDS3DS1RunningTime": mscLpDS3DS1RunningTime,
       "mscLpDS3DS1ErrorFreeSec": mscLpDS3DS1ErrorFreeSec,
       "mscLpDS3DS1ErroredSec": mscLpDS3DS1ErroredSec,
       "mscLpDS3DS1SevErroredSec": mscLpDS3DS1SevErroredSec,
       "mscLpDS3DS1SevErroredFrmSec": mscLpDS3DS1SevErroredFrmSec,
       "mscLpDS3DS1UnavailSec": mscLpDS3DS1UnavailSec,
       "mscLpDS3DS1CrcErrors": mscLpDS3DS1CrcErrors,
       "mscLpDS3DS1FrmErrors": mscLpDS3DS1FrmErrors,
       "mscLpDS3DS1SlipErrors": mscLpDS3DS1SlipErrors,
       "mscLpDS3ProvTable": mscLpDS3ProvTable,
       "mscLpDS3ProvEntry": mscLpDS3ProvEntry,
       "mscLpDS3CbitParity": mscLpDS3CbitParity,
       "mscLpDS3LineLength": mscLpDS3LineLength,
       "mscLpDS3ClockingSource": mscLpDS3ClockingSource,
       "mscLpDS3ApplicationFramerName": mscLpDS3ApplicationFramerName,
       "mscLpDS3Mapping": mscLpDS3Mapping,
       "mscLpDS3CidDataTable": mscLpDS3CidDataTable,
       "mscLpDS3CidDataEntry": mscLpDS3CidDataEntry,
       "mscLpDS3CustomerIdentifier": mscLpDS3CustomerIdentifier,
       "mscLpDS3AdminInfoTable": mscLpDS3AdminInfoTable,
       "mscLpDS3AdminInfoEntry": mscLpDS3AdminInfoEntry,
       "mscLpDS3Vendor": mscLpDS3Vendor,
       "mscLpDS3CommentText": mscLpDS3CommentText,
       "mscLpDS3IfEntryTable": mscLpDS3IfEntryTable,
       "mscLpDS3IfEntryEntry": mscLpDS3IfEntryEntry,
       "mscLpDS3IfAdminStatus": mscLpDS3IfAdminStatus,
       "mscLpDS3IfIndex": mscLpDS3IfIndex,
       "mscLpDS3OperStatusTable": mscLpDS3OperStatusTable,
       "mscLpDS3OperStatusEntry": mscLpDS3OperStatusEntry,
       "mscLpDS3SnmpOperStatus": mscLpDS3SnmpOperStatus,
       "mscLpDS3StateTable": mscLpDS3StateTable,
       "mscLpDS3StateEntry": mscLpDS3StateEntry,
       "mscLpDS3AdminState": mscLpDS3AdminState,
       "mscLpDS3OperationalState": mscLpDS3OperationalState,
       "mscLpDS3UsageState": mscLpDS3UsageState,
       "mscLpDS3AvailabilityStatus": mscLpDS3AvailabilityStatus,
       "mscLpDS3ProceduralStatus": mscLpDS3ProceduralStatus,
       "mscLpDS3ControlStatus": mscLpDS3ControlStatus,
       "mscLpDS3AlarmStatus": mscLpDS3AlarmStatus,
       "mscLpDS3StandbyStatus": mscLpDS3StandbyStatus,
       "mscLpDS3UnknownStatus": mscLpDS3UnknownStatus,
       "mscLpDS3OperTable": mscLpDS3OperTable,
       "mscLpDS3OperEntry": mscLpDS3OperEntry,
       "mscLpDS3LosAlarm": mscLpDS3LosAlarm,
       "mscLpDS3LofAlarm": mscLpDS3LofAlarm,
       "mscLpDS3RxAisAlarm": mscLpDS3RxAisAlarm,
       "mscLpDS3RxRaiAlarm": mscLpDS3RxRaiAlarm,
       "mscLpDS3RxIdle": mscLpDS3RxIdle,
       "mscLpDS3TxAis": mscLpDS3TxAis,
       "mscLpDS3TxRai": mscLpDS3TxRai,
       "mscLpDS3TxIdle": mscLpDS3TxIdle,
       "mscLpDS3StatsTable": mscLpDS3StatsTable,
       "mscLpDS3StatsEntry": mscLpDS3StatsEntry,
       "mscLpDS3RunningTime": mscLpDS3RunningTime,
       "mscLpDS3ErrorFreeSec": mscLpDS3ErrorFreeSec,
       "mscLpDS3LineCodeViolations": mscLpDS3LineCodeViolations,
       "mscLpDS3LineErroredSec": mscLpDS3LineErroredSec,
       "mscLpDS3LineSevErroredSec": mscLpDS3LineSevErroredSec,
       "mscLpDS3LineLosSec": mscLpDS3LineLosSec,
       "mscLpDS3LineFailures": mscLpDS3LineFailures,
       "mscLpDS3PathCodeViolations": mscLpDS3PathCodeViolations,
       "mscLpDS3PathErroredSec": mscLpDS3PathErroredSec,
       "mscLpDS3PathSevErroredSec": mscLpDS3PathSevErroredSec,
       "mscLpDS3PathSefAisSec": mscLpDS3PathSefAisSec,
       "mscLpDS3PathUnavailSec": mscLpDS3PathUnavailSec,
       "mscLpDS3PathFailures": mscLpDS3PathFailures,
       "mscLpE3": mscLpE3,
       "mscLpE3RowStatusTable": mscLpE3RowStatusTable,
       "mscLpE3RowStatusEntry": mscLpE3RowStatusEntry,
       "mscLpE3RowStatus": mscLpE3RowStatus,
       "mscLpE3ComponentName": mscLpE3ComponentName,
       "mscLpE3StorageType": mscLpE3StorageType,
       "mscLpE3Index": mscLpE3Index,
       "mscLpE3Test": mscLpE3Test,
       "mscLpE3TestRowStatusTable": mscLpE3TestRowStatusTable,
       "mscLpE3TestRowStatusEntry": mscLpE3TestRowStatusEntry,
       "mscLpE3TestRowStatus": mscLpE3TestRowStatus,
       "mscLpE3TestComponentName": mscLpE3TestComponentName,
       "mscLpE3TestStorageType": mscLpE3TestStorageType,
       "mscLpE3TestIndex": mscLpE3TestIndex,
       "mscLpE3TestStateTable": mscLpE3TestStateTable,
       "mscLpE3TestStateEntry": mscLpE3TestStateEntry,
       "mscLpE3TestAdminState": mscLpE3TestAdminState,
       "mscLpE3TestOperationalState": mscLpE3TestOperationalState,
       "mscLpE3TestUsageState": mscLpE3TestUsageState,
       "mscLpE3TestSetupTable": mscLpE3TestSetupTable,
       "mscLpE3TestSetupEntry": mscLpE3TestSetupEntry,
       "mscLpE3TestPurpose": mscLpE3TestPurpose,
       "mscLpE3TestType": mscLpE3TestType,
       "mscLpE3TestFrmSize": mscLpE3TestFrmSize,
       "mscLpE3TestFrmPatternType": mscLpE3TestFrmPatternType,
       "mscLpE3TestCustomizedPattern": mscLpE3TestCustomizedPattern,
       "mscLpE3TestDataStartDelay": mscLpE3TestDataStartDelay,
       "mscLpE3TestDisplayInterval": mscLpE3TestDisplayInterval,
       "mscLpE3TestDuration": mscLpE3TestDuration,
       "mscLpE3TestResultsTable": mscLpE3TestResultsTable,
       "mscLpE3TestResultsEntry": mscLpE3TestResultsEntry,
       "mscLpE3TestElapsedTime": mscLpE3TestElapsedTime,
       "mscLpE3TestTimeRemaining": mscLpE3TestTimeRemaining,
       "mscLpE3TestCauseOfTermination": mscLpE3TestCauseOfTermination,
       "mscLpE3TestBitsTx": mscLpE3TestBitsTx,
       "mscLpE3TestBytesTx": mscLpE3TestBytesTx,
       "mscLpE3TestFrmTx": mscLpE3TestFrmTx,
       "mscLpE3TestBitsRx": mscLpE3TestBitsRx,
       "mscLpE3TestBytesRx": mscLpE3TestBytesRx,
       "mscLpE3TestFrmRx": mscLpE3TestFrmRx,
       "mscLpE3TestErroredFrmRx": mscLpE3TestErroredFrmRx,
       "mscLpE3TestBitErrorRate": mscLpE3TestBitErrorRate,
       "mscLpE3G832": mscLpE3G832,
       "mscLpE3G832RowStatusTable": mscLpE3G832RowStatusTable,
       "mscLpE3G832RowStatusEntry": mscLpE3G832RowStatusEntry,
       "mscLpE3G832RowStatus": mscLpE3G832RowStatus,
       "mscLpE3G832ComponentName": mscLpE3G832ComponentName,
       "mscLpE3G832StorageType": mscLpE3G832StorageType,
       "mscLpE3G832Index": mscLpE3G832Index,
       "mscLpE3G832ProvisionedTable": mscLpE3G832ProvisionedTable,
       "mscLpE3G832ProvisionedEntry": mscLpE3G832ProvisionedEntry,
       "mscLpE3G832TrailTraceTransmitted": mscLpE3G832TrailTraceTransmitted,
       "mscLpE3G832TrailTraceExpected": mscLpE3G832TrailTraceExpected,
       "mscLpE3G832OperationalTable": mscLpE3G832OperationalTable,
       "mscLpE3G832OperationalEntry": mscLpE3G832OperationalEntry,
       "mscLpE3G832UnexpectedPayloadType": mscLpE3G832UnexpectedPayloadType,
       "mscLpE3G832TrailTraceMismatch": mscLpE3G832TrailTraceMismatch,
       "mscLpE3G832TimingMarker": mscLpE3G832TimingMarker,
       "mscLpE3G832TrailTraceReceived": mscLpE3G832TrailTraceReceived,
       "mscLpE3G832StatsTable": mscLpE3G832StatsTable,
       "mscLpE3G832StatsEntry": mscLpE3G832StatsEntry,
       "mscLpE3G832FarEndErrorFreeSec": mscLpE3G832FarEndErrorFreeSec,
       "mscLpE3G832FarEndCodeViolations": mscLpE3G832FarEndCodeViolations,
       "mscLpE3G832FarEndErroredSec": mscLpE3G832FarEndErroredSec,
       "mscLpE3G832FarEndSevErroredSec": mscLpE3G832FarEndSevErroredSec,
       "mscLpE3G832FarEndSefAisSec": mscLpE3G832FarEndSefAisSec,
       "mscLpE3G832FarEndUnavailSec": mscLpE3G832FarEndUnavailSec,
       "mscLpE3Plcp": mscLpE3Plcp,
       "mscLpE3PlcpRowStatusTable": mscLpE3PlcpRowStatusTable,
       "mscLpE3PlcpRowStatusEntry": mscLpE3PlcpRowStatusEntry,
       "mscLpE3PlcpRowStatus": mscLpE3PlcpRowStatus,
       "mscLpE3PlcpComponentName": mscLpE3PlcpComponentName,
       "mscLpE3PlcpStorageType": mscLpE3PlcpStorageType,
       "mscLpE3PlcpIndex": mscLpE3PlcpIndex,
       "mscLpE3PlcpOperationalTable": mscLpE3PlcpOperationalTable,
       "mscLpE3PlcpOperationalEntry": mscLpE3PlcpOperationalEntry,
       "mscLpE3PlcpLofAlarm": mscLpE3PlcpLofAlarm,
       "mscLpE3PlcpRxRaiAlarm": mscLpE3PlcpRxRaiAlarm,
       "mscLpE3PlcpStatsTable": mscLpE3PlcpStatsTable,
       "mscLpE3PlcpStatsEntry": mscLpE3PlcpStatsEntry,
       "mscLpE3PlcpErrorFreeSec": mscLpE3PlcpErrorFreeSec,
       "mscLpE3PlcpCodingViolations": mscLpE3PlcpCodingViolations,
       "mscLpE3PlcpErroredSec": mscLpE3PlcpErroredSec,
       "mscLpE3PlcpSevErroredSec": mscLpE3PlcpSevErroredSec,
       "mscLpE3PlcpSevErroredFramingSec": mscLpE3PlcpSevErroredFramingSec,
       "mscLpE3PlcpUnavailSec": mscLpE3PlcpUnavailSec,
       "mscLpE3PlcpFarEndErrorFreeSec": mscLpE3PlcpFarEndErrorFreeSec,
       "mscLpE3PlcpFarEndCodingViolations": mscLpE3PlcpFarEndCodingViolations,
       "mscLpE3PlcpFarEndErroredSec": mscLpE3PlcpFarEndErroredSec,
       "mscLpE3PlcpFarEndSevErroredSec": mscLpE3PlcpFarEndSevErroredSec,
       "mscLpE3PlcpFarEndUnavailableSec": mscLpE3PlcpFarEndUnavailableSec,
       "mscLpE3Cell": mscLpE3Cell,
       "mscLpE3CellRowStatusTable": mscLpE3CellRowStatusTable,
       "mscLpE3CellRowStatusEntry": mscLpE3CellRowStatusEntry,
       "mscLpE3CellRowStatus": mscLpE3CellRowStatus,
       "mscLpE3CellComponentName": mscLpE3CellComponentName,
       "mscLpE3CellStorageType": mscLpE3CellStorageType,
       "mscLpE3CellIndex": mscLpE3CellIndex,
       "mscLpE3CellProvTable": mscLpE3CellProvTable,
       "mscLpE3CellProvEntry": mscLpE3CellProvEntry,
       "mscLpE3CellAlarmActDelay": mscLpE3CellAlarmActDelay,
       "mscLpE3CellScrambleCellPayload": mscLpE3CellScrambleCellPayload,
       "mscLpE3CellCorrectSingleBitHeaderErrors": mscLpE3CellCorrectSingleBitHeaderErrors,
       "mscLpE3CellOperTable": mscLpE3CellOperTable,
       "mscLpE3CellOperEntry": mscLpE3CellOperEntry,
       "mscLpE3CellLcdAlarm": mscLpE3CellLcdAlarm,
       "mscLpE3CellStatsTable": mscLpE3CellStatsTable,
       "mscLpE3CellStatsEntry": mscLpE3CellStatsEntry,
       "mscLpE3CellUncorrectableHecErrors": mscLpE3CellUncorrectableHecErrors,
       "mscLpE3CellSevErroredSec": mscLpE3CellSevErroredSec,
       "mscLpE3CellReceiveCellUtilization": mscLpE3CellReceiveCellUtilization,
       "mscLpE3CellTransmitCellUtilization": mscLpE3CellTransmitCellUtilization,
       "mscLpE3CellCorrectableHeaderErrors": mscLpE3CellCorrectableHeaderErrors,
       "mscLpE3ProvTable": mscLpE3ProvTable,
       "mscLpE3ProvEntry": mscLpE3ProvEntry,
       "mscLpE3LineLength": mscLpE3LineLength,
       "mscLpE3ClockingSource": mscLpE3ClockingSource,
       "mscLpE3ApplicationFramerName": mscLpE3ApplicationFramerName,
       "mscLpE3Mapping": mscLpE3Mapping,
       "mscLpE3Framing": mscLpE3Framing,
       "mscLpE3LinkAlarmActivationThreshold": mscLpE3LinkAlarmActivationThreshold,
       "mscLpE3LinkAlarmScanInterval": mscLpE3LinkAlarmScanInterval,
       "mscLpE3CidDataTable": mscLpE3CidDataTable,
       "mscLpE3CidDataEntry": mscLpE3CidDataEntry,
       "mscLpE3CustomerIdentifier": mscLpE3CustomerIdentifier,
       "mscLpE3AdminInfoTable": mscLpE3AdminInfoTable,
       "mscLpE3AdminInfoEntry": mscLpE3AdminInfoEntry,
       "mscLpE3Vendor": mscLpE3Vendor,
       "mscLpE3CommentText": mscLpE3CommentText,
       "mscLpE3IfEntryTable": mscLpE3IfEntryTable,
       "mscLpE3IfEntryEntry": mscLpE3IfEntryEntry,
       "mscLpE3IfAdminStatus": mscLpE3IfAdminStatus,
       "mscLpE3IfIndex": mscLpE3IfIndex,
       "mscLpE3OperStatusTable": mscLpE3OperStatusTable,
       "mscLpE3OperStatusEntry": mscLpE3OperStatusEntry,
       "mscLpE3SnmpOperStatus": mscLpE3SnmpOperStatus,
       "mscLpE3StateTable": mscLpE3StateTable,
       "mscLpE3StateEntry": mscLpE3StateEntry,
       "mscLpE3AdminState": mscLpE3AdminState,
       "mscLpE3OperationalState": mscLpE3OperationalState,
       "mscLpE3UsageState": mscLpE3UsageState,
       "mscLpE3AvailabilityStatus": mscLpE3AvailabilityStatus,
       "mscLpE3ProceduralStatus": mscLpE3ProceduralStatus,
       "mscLpE3ControlStatus": mscLpE3ControlStatus,
       "mscLpE3AlarmStatus": mscLpE3AlarmStatus,
       "mscLpE3StandbyStatus": mscLpE3StandbyStatus,
       "mscLpE3UnknownStatus": mscLpE3UnknownStatus,
       "mscLpE3OperTable": mscLpE3OperTable,
       "mscLpE3OperEntry": mscLpE3OperEntry,
       "mscLpE3LosAlarm": mscLpE3LosAlarm,
       "mscLpE3LofAlarm": mscLpE3LofAlarm,
       "mscLpE3RxAisAlarm": mscLpE3RxAisAlarm,
       "mscLpE3RxRaiAlarm": mscLpE3RxRaiAlarm,
       "mscLpE3TxAis": mscLpE3TxAis,
       "mscLpE3TxRai": mscLpE3TxRai,
       "mscLpE3StatsTable": mscLpE3StatsTable,
       "mscLpE3StatsEntry": mscLpE3StatsEntry,
       "mscLpE3RunningTime": mscLpE3RunningTime,
       "mscLpE3ErrorFreeSec": mscLpE3ErrorFreeSec,
       "mscLpE3LineCodeViolations": mscLpE3LineCodeViolations,
       "mscLpE3LineErroredSec": mscLpE3LineErroredSec,
       "mscLpE3LineSevErroredSec": mscLpE3LineSevErroredSec,
       "mscLpE3LineLosSec": mscLpE3LineLosSec,
       "mscLpE3LineFailures": mscLpE3LineFailures,
       "mscLpE3PathCodeViolations": mscLpE3PathCodeViolations,
       "mscLpE3PathErroredSec": mscLpE3PathErroredSec,
       "mscLpE3PathSevErroredSec": mscLpE3PathSevErroredSec,
       "mscLpE3PathSefAisSec": mscLpE3PathSefAisSec,
       "mscLpE3PathUnavailSec": mscLpE3PathUnavailSec,
       "mscLpE3PathFailures": mscLpE3PathFailures,
       "mscLpDS1": mscLpDS1,
       "mscLpDS1RowStatusTable": mscLpDS1RowStatusTable,
       "mscLpDS1RowStatusEntry": mscLpDS1RowStatusEntry,
       "mscLpDS1RowStatus": mscLpDS1RowStatus,
       "mscLpDS1ComponentName": mscLpDS1ComponentName,
       "mscLpDS1StorageType": mscLpDS1StorageType,
       "mscLpDS1Index": mscLpDS1Index,
       "mscLpDS1Chan": mscLpDS1Chan,
       "mscLpDS1ChanRowStatusTable": mscLpDS1ChanRowStatusTable,
       "mscLpDS1ChanRowStatusEntry": mscLpDS1ChanRowStatusEntry,
       "mscLpDS1ChanRowStatus": mscLpDS1ChanRowStatus,
       "mscLpDS1ChanComponentName": mscLpDS1ChanComponentName,
       "mscLpDS1ChanStorageType": mscLpDS1ChanStorageType,
       "mscLpDS1ChanIndex": mscLpDS1ChanIndex,
       "mscLpDS1ChanTest": mscLpDS1ChanTest,
       "mscLpDS1ChanTestRowStatusTable": mscLpDS1ChanTestRowStatusTable,
       "mscLpDS1ChanTestRowStatusEntry": mscLpDS1ChanTestRowStatusEntry,
       "mscLpDS1ChanTestRowStatus": mscLpDS1ChanTestRowStatus,
       "mscLpDS1ChanTestComponentName": mscLpDS1ChanTestComponentName,
       "mscLpDS1ChanTestStorageType": mscLpDS1ChanTestStorageType,
       "mscLpDS1ChanTestIndex": mscLpDS1ChanTestIndex,
       "mscLpDS1ChanTestStateTable": mscLpDS1ChanTestStateTable,
       "mscLpDS1ChanTestStateEntry": mscLpDS1ChanTestStateEntry,
       "mscLpDS1ChanTestAdminState": mscLpDS1ChanTestAdminState,
       "mscLpDS1ChanTestOperationalState": mscLpDS1ChanTestOperationalState,
       "mscLpDS1ChanTestUsageState": mscLpDS1ChanTestUsageState,
       "mscLpDS1ChanTestSetupTable": mscLpDS1ChanTestSetupTable,
       "mscLpDS1ChanTestSetupEntry": mscLpDS1ChanTestSetupEntry,
       "mscLpDS1ChanTestPurpose": mscLpDS1ChanTestPurpose,
       "mscLpDS1ChanTestType": mscLpDS1ChanTestType,
       "mscLpDS1ChanTestFrmSize": mscLpDS1ChanTestFrmSize,
       "mscLpDS1ChanTestFrmPatternType": mscLpDS1ChanTestFrmPatternType,
       "mscLpDS1ChanTestCustomizedPattern": mscLpDS1ChanTestCustomizedPattern,
       "mscLpDS1ChanTestDataStartDelay": mscLpDS1ChanTestDataStartDelay,
       "mscLpDS1ChanTestDisplayInterval": mscLpDS1ChanTestDisplayInterval,
       "mscLpDS1ChanTestDuration": mscLpDS1ChanTestDuration,
       "mscLpDS1ChanTestResultsTable": mscLpDS1ChanTestResultsTable,
       "mscLpDS1ChanTestResultsEntry": mscLpDS1ChanTestResultsEntry,
       "mscLpDS1ChanTestElapsedTime": mscLpDS1ChanTestElapsedTime,
       "mscLpDS1ChanTestTimeRemaining": mscLpDS1ChanTestTimeRemaining,
       "mscLpDS1ChanTestCauseOfTermination": mscLpDS1ChanTestCauseOfTermination,
       "mscLpDS1ChanTestBitsTx": mscLpDS1ChanTestBitsTx,
       "mscLpDS1ChanTestBytesTx": mscLpDS1ChanTestBytesTx,
       "mscLpDS1ChanTestFrmTx": mscLpDS1ChanTestFrmTx,
       "mscLpDS1ChanTestBitsRx": mscLpDS1ChanTestBitsRx,
       "mscLpDS1ChanTestBytesRx": mscLpDS1ChanTestBytesRx,
       "mscLpDS1ChanTestFrmRx": mscLpDS1ChanTestFrmRx,
       "mscLpDS1ChanTestErroredFrmRx": mscLpDS1ChanTestErroredFrmRx,
       "mscLpDS1ChanTestBitErrorRate": mscLpDS1ChanTestBitErrorRate,
       "mscLpDS1ChanCell": mscLpDS1ChanCell,
       "mscLpDS1ChanCellRowStatusTable": mscLpDS1ChanCellRowStatusTable,
       "mscLpDS1ChanCellRowStatusEntry": mscLpDS1ChanCellRowStatusEntry,
       "mscLpDS1ChanCellRowStatus": mscLpDS1ChanCellRowStatus,
       "mscLpDS1ChanCellComponentName": mscLpDS1ChanCellComponentName,
       "mscLpDS1ChanCellStorageType": mscLpDS1ChanCellStorageType,
       "mscLpDS1ChanCellIndex": mscLpDS1ChanCellIndex,
       "mscLpDS1ChanCellProvTable": mscLpDS1ChanCellProvTable,
       "mscLpDS1ChanCellProvEntry": mscLpDS1ChanCellProvEntry,
       "mscLpDS1ChanCellAlarmActDelay": mscLpDS1ChanCellAlarmActDelay,
       "mscLpDS1ChanCellScrambleCellPayload": mscLpDS1ChanCellScrambleCellPayload,
       "mscLpDS1ChanCellCorrectSingleBitHeaderErrors": mscLpDS1ChanCellCorrectSingleBitHeaderErrors,
       "mscLpDS1ChanCellOperTable": mscLpDS1ChanCellOperTable,
       "mscLpDS1ChanCellOperEntry": mscLpDS1ChanCellOperEntry,
       "mscLpDS1ChanCellLcdAlarm": mscLpDS1ChanCellLcdAlarm,
       "mscLpDS1ChanCellStatsTable": mscLpDS1ChanCellStatsTable,
       "mscLpDS1ChanCellStatsEntry": mscLpDS1ChanCellStatsEntry,
       "mscLpDS1ChanCellUncorrectableHecErrors": mscLpDS1ChanCellUncorrectableHecErrors,
       "mscLpDS1ChanCellSevErroredSec": mscLpDS1ChanCellSevErroredSec,
       "mscLpDS1ChanCellReceiveCellUtilization": mscLpDS1ChanCellReceiveCellUtilization,
       "mscLpDS1ChanCellTransmitCellUtilization": mscLpDS1ChanCellTransmitCellUtilization,
       "mscLpDS1ChanCellCorrectableHeaderErrors": mscLpDS1ChanCellCorrectableHeaderErrors,
       "mscLpDS1ChanTc": mscLpDS1ChanTc,
       "mscLpDS1ChanTcRowStatusTable": mscLpDS1ChanTcRowStatusTable,
       "mscLpDS1ChanTcRowStatusEntry": mscLpDS1ChanTcRowStatusEntry,
       "mscLpDS1ChanTcRowStatus": mscLpDS1ChanTcRowStatus,
       "mscLpDS1ChanTcComponentName": mscLpDS1ChanTcComponentName,
       "mscLpDS1ChanTcStorageType": mscLpDS1ChanTcStorageType,
       "mscLpDS1ChanTcIndex": mscLpDS1ChanTcIndex,
       "mscLpDS1ChanTcProvTable": mscLpDS1ChanTcProvTable,
       "mscLpDS1ChanTcProvEntry": mscLpDS1ChanTcProvEntry,
       "mscLpDS1ChanTcReplacementData": mscLpDS1ChanTcReplacementData,
       "mscLpDS1ChanTcSignalOneDuration": mscLpDS1ChanTcSignalOneDuration,
       "mscLpDS1ChanTcOpTable": mscLpDS1ChanTcOpTable,
       "mscLpDS1ChanTcOpEntry": mscLpDS1ChanTcOpEntry,
       "mscLpDS1ChanTcIngressConditioning": mscLpDS1ChanTcIngressConditioning,
       "mscLpDS1ChanTcEgressConditioning": mscLpDS1ChanTcEgressConditioning,
       "mscLpDS1ChanTcSigOneTable": mscLpDS1ChanTcSigOneTable,
       "mscLpDS1ChanTcSigOneEntry": mscLpDS1ChanTcSigOneEntry,
       "mscLpDS1ChanTcSigOneIndex": mscLpDS1ChanTcSigOneIndex,
       "mscLpDS1ChanTcSigOneValue": mscLpDS1ChanTcSigOneValue,
       "mscLpDS1ChanTcSigTwoTable": mscLpDS1ChanTcSigTwoTable,
       "mscLpDS1ChanTcSigTwoEntry": mscLpDS1ChanTcSigTwoEntry,
       "mscLpDS1ChanTcSigTwoIndex": mscLpDS1ChanTcSigTwoIndex,
       "mscLpDS1ChanTcSigTwoValue": mscLpDS1ChanTcSigTwoValue,
       "mscLpDS1ChanProvTable": mscLpDS1ChanProvTable,
       "mscLpDS1ChanProvEntry": mscLpDS1ChanProvEntry,
       "mscLpDS1ChanTimeslots": mscLpDS1ChanTimeslots,
       "mscLpDS1ChanTimeslotDataRate": mscLpDS1ChanTimeslotDataRate,
       "mscLpDS1ChanApplicationFramerName": mscLpDS1ChanApplicationFramerName,
       "mscLpDS1ChanCidDataTable": mscLpDS1ChanCidDataTable,
       "mscLpDS1ChanCidDataEntry": mscLpDS1ChanCidDataEntry,
       "mscLpDS1ChanCustomerIdentifier": mscLpDS1ChanCustomerIdentifier,
       "mscLpDS1ChanIfEntryTable": mscLpDS1ChanIfEntryTable,
       "mscLpDS1ChanIfEntryEntry": mscLpDS1ChanIfEntryEntry,
       "mscLpDS1ChanIfAdminStatus": mscLpDS1ChanIfAdminStatus,
       "mscLpDS1ChanIfIndex": mscLpDS1ChanIfIndex,
       "mscLpDS1ChanOperStatusTable": mscLpDS1ChanOperStatusTable,
       "mscLpDS1ChanOperStatusEntry": mscLpDS1ChanOperStatusEntry,
       "mscLpDS1ChanSnmpOperStatus": mscLpDS1ChanSnmpOperStatus,
       "mscLpDS1ChanStateTable": mscLpDS1ChanStateTable,
       "mscLpDS1ChanStateEntry": mscLpDS1ChanStateEntry,
       "mscLpDS1ChanAdminState": mscLpDS1ChanAdminState,
       "mscLpDS1ChanOperationalState": mscLpDS1ChanOperationalState,
       "mscLpDS1ChanUsageState": mscLpDS1ChanUsageState,
       "mscLpDS1ChanAvailabilityStatus": mscLpDS1ChanAvailabilityStatus,
       "mscLpDS1ChanProceduralStatus": mscLpDS1ChanProceduralStatus,
       "mscLpDS1ChanControlStatus": mscLpDS1ChanControlStatus,
       "mscLpDS1ChanAlarmStatus": mscLpDS1ChanAlarmStatus,
       "mscLpDS1ChanStandbyStatus": mscLpDS1ChanStandbyStatus,
       "mscLpDS1ChanUnknownStatus": mscLpDS1ChanUnknownStatus,
       "mscLpDS1ChanOperTable": mscLpDS1ChanOperTable,
       "mscLpDS1ChanOperEntry": mscLpDS1ChanOperEntry,
       "mscLpDS1ChanActualChannelSpeed": mscLpDS1ChanActualChannelSpeed,
       "mscLpDS1ChanAdminInfoTable": mscLpDS1ChanAdminInfoTable,
       "mscLpDS1ChanAdminInfoEntry": mscLpDS1ChanAdminInfoEntry,
       "mscLpDS1ChanVendor": mscLpDS1ChanVendor,
       "mscLpDS1ChanCommentText": mscLpDS1ChanCommentText,
       "mscLpDS1Test": mscLpDS1Test,
       "mscLpDS1TestRowStatusTable": mscLpDS1TestRowStatusTable,
       "mscLpDS1TestRowStatusEntry": mscLpDS1TestRowStatusEntry,
       "mscLpDS1TestRowStatus": mscLpDS1TestRowStatus,
       "mscLpDS1TestComponentName": mscLpDS1TestComponentName,
       "mscLpDS1TestStorageType": mscLpDS1TestStorageType,
       "mscLpDS1TestIndex": mscLpDS1TestIndex,
       "mscLpDS1TestStateTable": mscLpDS1TestStateTable,
       "mscLpDS1TestStateEntry": mscLpDS1TestStateEntry,
       "mscLpDS1TestAdminState": mscLpDS1TestAdminState,
       "mscLpDS1TestOperationalState": mscLpDS1TestOperationalState,
       "mscLpDS1TestUsageState": mscLpDS1TestUsageState,
       "mscLpDS1TestSetupTable": mscLpDS1TestSetupTable,
       "mscLpDS1TestSetupEntry": mscLpDS1TestSetupEntry,
       "mscLpDS1TestPurpose": mscLpDS1TestPurpose,
       "mscLpDS1TestType": mscLpDS1TestType,
       "mscLpDS1TestFrmSize": mscLpDS1TestFrmSize,
       "mscLpDS1TestFrmPatternType": mscLpDS1TestFrmPatternType,
       "mscLpDS1TestCustomizedPattern": mscLpDS1TestCustomizedPattern,
       "mscLpDS1TestDataStartDelay": mscLpDS1TestDataStartDelay,
       "mscLpDS1TestDisplayInterval": mscLpDS1TestDisplayInterval,
       "mscLpDS1TestDuration": mscLpDS1TestDuration,
       "mscLpDS1TestResultsTable": mscLpDS1TestResultsTable,
       "mscLpDS1TestResultsEntry": mscLpDS1TestResultsEntry,
       "mscLpDS1TestElapsedTime": mscLpDS1TestElapsedTime,
       "mscLpDS1TestTimeRemaining": mscLpDS1TestTimeRemaining,
       "mscLpDS1TestCauseOfTermination": mscLpDS1TestCauseOfTermination,
       "mscLpDS1TestBitsTx": mscLpDS1TestBitsTx,
       "mscLpDS1TestBytesTx": mscLpDS1TestBytesTx,
       "mscLpDS1TestFrmTx": mscLpDS1TestFrmTx,
       "mscLpDS1TestBitsRx": mscLpDS1TestBitsRx,
       "mscLpDS1TestBytesRx": mscLpDS1TestBytesRx,
       "mscLpDS1TestFrmRx": mscLpDS1TestFrmRx,
       "mscLpDS1TestErroredFrmRx": mscLpDS1TestErroredFrmRx,
       "mscLpDS1TestBitErrorRate": mscLpDS1TestBitErrorRate,
       "mscLpDS1Dsp": mscLpDS1Dsp,
       "mscLpDS1DspRowStatusTable": mscLpDS1DspRowStatusTable,
       "mscLpDS1DspRowStatusEntry": mscLpDS1DspRowStatusEntry,
       "mscLpDS1DspRowStatus": mscLpDS1DspRowStatus,
       "mscLpDS1DspComponentName": mscLpDS1DspComponentName,
       "mscLpDS1DspStorageType": mscLpDS1DspStorageType,
       "mscLpDS1DspIndex": mscLpDS1DspIndex,
       "mscLpDS1Audio": mscLpDS1Audio,
       "mscLpDS1AudioRowStatusTable": mscLpDS1AudioRowStatusTable,
       "mscLpDS1AudioRowStatusEntry": mscLpDS1AudioRowStatusEntry,
       "mscLpDS1AudioRowStatus": mscLpDS1AudioRowStatus,
       "mscLpDS1AudioComponentName": mscLpDS1AudioComponentName,
       "mscLpDS1AudioStorageType": mscLpDS1AudioStorageType,
       "mscLpDS1AudioIndex": mscLpDS1AudioIndex,
       "mscLpDS1ProvTable": mscLpDS1ProvTable,
       "mscLpDS1ProvEntry": mscLpDS1ProvEntry,
       "mscLpDS1LineType": mscLpDS1LineType,
       "mscLpDS1ZeroCoding": mscLpDS1ZeroCoding,
       "mscLpDS1ClockingSource": mscLpDS1ClockingSource,
       "mscLpDS1RaiAlarmType": mscLpDS1RaiAlarmType,
       "mscLpDS1LineLength": mscLpDS1LineLength,
       "mscLpDS1CidDataTable": mscLpDS1CidDataTable,
       "mscLpDS1CidDataEntry": mscLpDS1CidDataEntry,
       "mscLpDS1CustomerIdentifier": mscLpDS1CustomerIdentifier,
       "mscLpDS1AdminInfoTable": mscLpDS1AdminInfoTable,
       "mscLpDS1AdminInfoEntry": mscLpDS1AdminInfoEntry,
       "mscLpDS1Vendor": mscLpDS1Vendor,
       "mscLpDS1CommentText": mscLpDS1CommentText,
       "mscLpDS1IfEntryTable": mscLpDS1IfEntryTable,
       "mscLpDS1IfEntryEntry": mscLpDS1IfEntryEntry,
       "mscLpDS1IfAdminStatus": mscLpDS1IfAdminStatus,
       "mscLpDS1IfIndex": mscLpDS1IfIndex,
       "mscLpDS1OperStatusTable": mscLpDS1OperStatusTable,
       "mscLpDS1OperStatusEntry": mscLpDS1OperStatusEntry,
       "mscLpDS1SnmpOperStatus": mscLpDS1SnmpOperStatus,
       "mscLpDS1StateTable": mscLpDS1StateTable,
       "mscLpDS1StateEntry": mscLpDS1StateEntry,
       "mscLpDS1AdminState": mscLpDS1AdminState,
       "mscLpDS1OperationalState": mscLpDS1OperationalState,
       "mscLpDS1UsageState": mscLpDS1UsageState,
       "mscLpDS1AvailabilityStatus": mscLpDS1AvailabilityStatus,
       "mscLpDS1ProceduralStatus": mscLpDS1ProceduralStatus,
       "mscLpDS1ControlStatus": mscLpDS1ControlStatus,
       "mscLpDS1AlarmStatus": mscLpDS1AlarmStatus,
       "mscLpDS1StandbyStatus": mscLpDS1StandbyStatus,
       "mscLpDS1UnknownStatus": mscLpDS1UnknownStatus,
       "mscLpDS1OperTable": mscLpDS1OperTable,
       "mscLpDS1OperEntry": mscLpDS1OperEntry,
       "mscLpDS1LosAlarm": mscLpDS1LosAlarm,
       "mscLpDS1RxAisAlarm": mscLpDS1RxAisAlarm,
       "mscLpDS1LofAlarm": mscLpDS1LofAlarm,
       "mscLpDS1RxRaiAlarm": mscLpDS1RxRaiAlarm,
       "mscLpDS1TxAisAlarm": mscLpDS1TxAisAlarm,
       "mscLpDS1TxRaiAlarm": mscLpDS1TxRaiAlarm,
       "mscLpDS1StatsTable": mscLpDS1StatsTable,
       "mscLpDS1StatsEntry": mscLpDS1StatsEntry,
       "mscLpDS1RunningTime": mscLpDS1RunningTime,
       "mscLpDS1ErrorFreeSec": mscLpDS1ErrorFreeSec,
       "mscLpDS1ErroredSec": mscLpDS1ErroredSec,
       "mscLpDS1SevErroredSec": mscLpDS1SevErroredSec,
       "mscLpDS1SevErroredFrmSec": mscLpDS1SevErroredFrmSec,
       "mscLpDS1UnavailSec": mscLpDS1UnavailSec,
       "mscLpDS1BpvErrors": mscLpDS1BpvErrors,
       "mscLpDS1CrcErrors": mscLpDS1CrcErrors,
       "mscLpDS1FrmErrors": mscLpDS1FrmErrors,
       "mscLpDS1LosStateChanges": mscLpDS1LosStateChanges,
       "mscLpDS1SlipErrors": mscLpDS1SlipErrors,
       "mscLpE1": mscLpE1,
       "mscLpE1RowStatusTable": mscLpE1RowStatusTable,
       "mscLpE1RowStatusEntry": mscLpE1RowStatusEntry,
       "mscLpE1RowStatus": mscLpE1RowStatus,
       "mscLpE1ComponentName": mscLpE1ComponentName,
       "mscLpE1StorageType": mscLpE1StorageType,
       "mscLpE1Index": mscLpE1Index,
       "mscLpE1Chan": mscLpE1Chan,
       "mscLpE1ChanRowStatusTable": mscLpE1ChanRowStatusTable,
       "mscLpE1ChanRowStatusEntry": mscLpE1ChanRowStatusEntry,
       "mscLpE1ChanRowStatus": mscLpE1ChanRowStatus,
       "mscLpE1ChanComponentName": mscLpE1ChanComponentName,
       "mscLpE1ChanStorageType": mscLpE1ChanStorageType,
       "mscLpE1ChanIndex": mscLpE1ChanIndex,
       "mscLpE1ChanTest": mscLpE1ChanTest,
       "mscLpE1ChanTestRowStatusTable": mscLpE1ChanTestRowStatusTable,
       "mscLpE1ChanTestRowStatusEntry": mscLpE1ChanTestRowStatusEntry,
       "mscLpE1ChanTestRowStatus": mscLpE1ChanTestRowStatus,
       "mscLpE1ChanTestComponentName": mscLpE1ChanTestComponentName,
       "mscLpE1ChanTestStorageType": mscLpE1ChanTestStorageType,
       "mscLpE1ChanTestIndex": mscLpE1ChanTestIndex,
       "mscLpE1ChanTestStateTable": mscLpE1ChanTestStateTable,
       "mscLpE1ChanTestStateEntry": mscLpE1ChanTestStateEntry,
       "mscLpE1ChanTestAdminState": mscLpE1ChanTestAdminState,
       "mscLpE1ChanTestOperationalState": mscLpE1ChanTestOperationalState,
       "mscLpE1ChanTestUsageState": mscLpE1ChanTestUsageState,
       "mscLpE1ChanTestSetupTable": mscLpE1ChanTestSetupTable,
       "mscLpE1ChanTestSetupEntry": mscLpE1ChanTestSetupEntry,
       "mscLpE1ChanTestPurpose": mscLpE1ChanTestPurpose,
       "mscLpE1ChanTestType": mscLpE1ChanTestType,
       "mscLpE1ChanTestFrmSize": mscLpE1ChanTestFrmSize,
       "mscLpE1ChanTestFrmPatternType": mscLpE1ChanTestFrmPatternType,
       "mscLpE1ChanTestCustomizedPattern": mscLpE1ChanTestCustomizedPattern,
       "mscLpE1ChanTestDataStartDelay": mscLpE1ChanTestDataStartDelay,
       "mscLpE1ChanTestDisplayInterval": mscLpE1ChanTestDisplayInterval,
       "mscLpE1ChanTestDuration": mscLpE1ChanTestDuration,
       "mscLpE1ChanTestResultsTable": mscLpE1ChanTestResultsTable,
       "mscLpE1ChanTestResultsEntry": mscLpE1ChanTestResultsEntry,
       "mscLpE1ChanTestElapsedTime": mscLpE1ChanTestElapsedTime,
       "mscLpE1ChanTestTimeRemaining": mscLpE1ChanTestTimeRemaining,
       "mscLpE1ChanTestCauseOfTermination": mscLpE1ChanTestCauseOfTermination,
       "mscLpE1ChanTestBitsTx": mscLpE1ChanTestBitsTx,
       "mscLpE1ChanTestBytesTx": mscLpE1ChanTestBytesTx,
       "mscLpE1ChanTestFrmTx": mscLpE1ChanTestFrmTx,
       "mscLpE1ChanTestBitsRx": mscLpE1ChanTestBitsRx,
       "mscLpE1ChanTestBytesRx": mscLpE1ChanTestBytesRx,
       "mscLpE1ChanTestFrmRx": mscLpE1ChanTestFrmRx,
       "mscLpE1ChanTestErroredFrmRx": mscLpE1ChanTestErroredFrmRx,
       "mscLpE1ChanTestBitErrorRate": mscLpE1ChanTestBitErrorRate,
       "mscLpE1ChanCell": mscLpE1ChanCell,
       "mscLpE1ChanCellRowStatusTable": mscLpE1ChanCellRowStatusTable,
       "mscLpE1ChanCellRowStatusEntry": mscLpE1ChanCellRowStatusEntry,
       "mscLpE1ChanCellRowStatus": mscLpE1ChanCellRowStatus,
       "mscLpE1ChanCellComponentName": mscLpE1ChanCellComponentName,
       "mscLpE1ChanCellStorageType": mscLpE1ChanCellStorageType,
       "mscLpE1ChanCellIndex": mscLpE1ChanCellIndex,
       "mscLpE1ChanCellProvTable": mscLpE1ChanCellProvTable,
       "mscLpE1ChanCellProvEntry": mscLpE1ChanCellProvEntry,
       "mscLpE1ChanCellAlarmActDelay": mscLpE1ChanCellAlarmActDelay,
       "mscLpE1ChanCellScrambleCellPayload": mscLpE1ChanCellScrambleCellPayload,
       "mscLpE1ChanCellCorrectSingleBitHeaderErrors": mscLpE1ChanCellCorrectSingleBitHeaderErrors,
       "mscLpE1ChanCellOperTable": mscLpE1ChanCellOperTable,
       "mscLpE1ChanCellOperEntry": mscLpE1ChanCellOperEntry,
       "mscLpE1ChanCellLcdAlarm": mscLpE1ChanCellLcdAlarm,
       "mscLpE1ChanCellStatsTable": mscLpE1ChanCellStatsTable,
       "mscLpE1ChanCellStatsEntry": mscLpE1ChanCellStatsEntry,
       "mscLpE1ChanCellUncorrectableHecErrors": mscLpE1ChanCellUncorrectableHecErrors,
       "mscLpE1ChanCellSevErroredSec": mscLpE1ChanCellSevErroredSec,
       "mscLpE1ChanCellReceiveCellUtilization": mscLpE1ChanCellReceiveCellUtilization,
       "mscLpE1ChanCellTransmitCellUtilization": mscLpE1ChanCellTransmitCellUtilization,
       "mscLpE1ChanCellCorrectableHeaderErrors": mscLpE1ChanCellCorrectableHeaderErrors,
       "mscLpE1ChanTc": mscLpE1ChanTc,
       "mscLpE1ChanTcRowStatusTable": mscLpE1ChanTcRowStatusTable,
       "mscLpE1ChanTcRowStatusEntry": mscLpE1ChanTcRowStatusEntry,
       "mscLpE1ChanTcRowStatus": mscLpE1ChanTcRowStatus,
       "mscLpE1ChanTcComponentName": mscLpE1ChanTcComponentName,
       "mscLpE1ChanTcStorageType": mscLpE1ChanTcStorageType,
       "mscLpE1ChanTcIndex": mscLpE1ChanTcIndex,
       "mscLpE1ChanTcProvTable": mscLpE1ChanTcProvTable,
       "mscLpE1ChanTcProvEntry": mscLpE1ChanTcProvEntry,
       "mscLpE1ChanTcReplacementData": mscLpE1ChanTcReplacementData,
       "mscLpE1ChanTcSignalOneDuration": mscLpE1ChanTcSignalOneDuration,
       "mscLpE1ChanTcOpTable": mscLpE1ChanTcOpTable,
       "mscLpE1ChanTcOpEntry": mscLpE1ChanTcOpEntry,
       "mscLpE1ChanTcIngressConditioning": mscLpE1ChanTcIngressConditioning,
       "mscLpE1ChanTcEgressConditioning": mscLpE1ChanTcEgressConditioning,
       "mscLpE1ChanTcSigOneTable": mscLpE1ChanTcSigOneTable,
       "mscLpE1ChanTcSigOneEntry": mscLpE1ChanTcSigOneEntry,
       "mscLpE1ChanTcSigOneIndex": mscLpE1ChanTcSigOneIndex,
       "mscLpE1ChanTcSigOneValue": mscLpE1ChanTcSigOneValue,
       "mscLpE1ChanTcSigTwoTable": mscLpE1ChanTcSigTwoTable,
       "mscLpE1ChanTcSigTwoEntry": mscLpE1ChanTcSigTwoEntry,
       "mscLpE1ChanTcSigTwoIndex": mscLpE1ChanTcSigTwoIndex,
       "mscLpE1ChanTcSigTwoValue": mscLpE1ChanTcSigTwoValue,
       "mscLpE1ChanFlm": mscLpE1ChanFlm,
       "mscLpE1ChanFlmRowStatusTable": mscLpE1ChanFlmRowStatusTable,
       "mscLpE1ChanFlmRowStatusEntry": mscLpE1ChanFlmRowStatusEntry,
       "mscLpE1ChanFlmRowStatus": mscLpE1ChanFlmRowStatus,
       "mscLpE1ChanFlmComponentName": mscLpE1ChanFlmComponentName,
       "mscLpE1ChanFlmStorageType": mscLpE1ChanFlmStorageType,
       "mscLpE1ChanFlmIndex": mscLpE1ChanFlmIndex,
       "mscLpE1ChanFlmProvTable": mscLpE1ChanFlmProvTable,
       "mscLpE1ChanFlmProvEntry": mscLpE1ChanFlmProvEntry,
       "mscLpE1ChanFlmABitMonitoring": mscLpE1ChanFlmABitMonitoring,
       "mscLpE1ChanFlmHdlcMonitoring": mscLpE1ChanFlmHdlcMonitoring,
       "mscLpE1ChanFlmOpTable": mscLpE1ChanFlmOpTable,
       "mscLpE1ChanFlmOpEntry": mscLpE1ChanFlmOpEntry,
       "mscLpE1ChanFlmFlmStatus": mscLpE1ChanFlmFlmStatus,
       "mscLpE1ChanProvTable": mscLpE1ChanProvTable,
       "mscLpE1ChanProvEntry": mscLpE1ChanProvEntry,
       "mscLpE1ChanTimeslots": mscLpE1ChanTimeslots,
       "mscLpE1ChanTimeslotDataRate": mscLpE1ChanTimeslotDataRate,
       "mscLpE1ChanApplicationFramerName": mscLpE1ChanApplicationFramerName,
       "mscLpE1ChanCidDataTable": mscLpE1ChanCidDataTable,
       "mscLpE1ChanCidDataEntry": mscLpE1ChanCidDataEntry,
       "mscLpE1ChanCustomerIdentifier": mscLpE1ChanCustomerIdentifier,
       "mscLpE1ChanIfEntryTable": mscLpE1ChanIfEntryTable,
       "mscLpE1ChanIfEntryEntry": mscLpE1ChanIfEntryEntry,
       "mscLpE1ChanIfAdminStatus": mscLpE1ChanIfAdminStatus,
       "mscLpE1ChanIfIndex": mscLpE1ChanIfIndex,
       "mscLpE1ChanOperStatusTable": mscLpE1ChanOperStatusTable,
       "mscLpE1ChanOperStatusEntry": mscLpE1ChanOperStatusEntry,
       "mscLpE1ChanSnmpOperStatus": mscLpE1ChanSnmpOperStatus,
       "mscLpE1ChanStateTable": mscLpE1ChanStateTable,
       "mscLpE1ChanStateEntry": mscLpE1ChanStateEntry,
       "mscLpE1ChanAdminState": mscLpE1ChanAdminState,
       "mscLpE1ChanOperationalState": mscLpE1ChanOperationalState,
       "mscLpE1ChanUsageState": mscLpE1ChanUsageState,
       "mscLpE1ChanAvailabilityStatus": mscLpE1ChanAvailabilityStatus,
       "mscLpE1ChanProceduralStatus": mscLpE1ChanProceduralStatus,
       "mscLpE1ChanControlStatus": mscLpE1ChanControlStatus,
       "mscLpE1ChanAlarmStatus": mscLpE1ChanAlarmStatus,
       "mscLpE1ChanStandbyStatus": mscLpE1ChanStandbyStatus,
       "mscLpE1ChanUnknownStatus": mscLpE1ChanUnknownStatus,
       "mscLpE1ChanOperTable": mscLpE1ChanOperTable,
       "mscLpE1ChanOperEntry": mscLpE1ChanOperEntry,
       "mscLpE1ChanActualChannelSpeed": mscLpE1ChanActualChannelSpeed,
       "mscLpE1ChanAdminInfoTable": mscLpE1ChanAdminInfoTable,
       "mscLpE1ChanAdminInfoEntry": mscLpE1ChanAdminInfoEntry,
       "mscLpE1ChanVendor": mscLpE1ChanVendor,
       "mscLpE1ChanCommentText": mscLpE1ChanCommentText,
       "mscLpE1Test": mscLpE1Test,
       "mscLpE1TestRowStatusTable": mscLpE1TestRowStatusTable,
       "mscLpE1TestRowStatusEntry": mscLpE1TestRowStatusEntry,
       "mscLpE1TestRowStatus": mscLpE1TestRowStatus,
       "mscLpE1TestComponentName": mscLpE1TestComponentName,
       "mscLpE1TestStorageType": mscLpE1TestStorageType,
       "mscLpE1TestIndex": mscLpE1TestIndex,
       "mscLpE1TestStateTable": mscLpE1TestStateTable,
       "mscLpE1TestStateEntry": mscLpE1TestStateEntry,
       "mscLpE1TestAdminState": mscLpE1TestAdminState,
       "mscLpE1TestOperationalState": mscLpE1TestOperationalState,
       "mscLpE1TestUsageState": mscLpE1TestUsageState,
       "mscLpE1TestSetupTable": mscLpE1TestSetupTable,
       "mscLpE1TestSetupEntry": mscLpE1TestSetupEntry,
       "mscLpE1TestPurpose": mscLpE1TestPurpose,
       "mscLpE1TestType": mscLpE1TestType,
       "mscLpE1TestFrmSize": mscLpE1TestFrmSize,
       "mscLpE1TestFrmPatternType": mscLpE1TestFrmPatternType,
       "mscLpE1TestCustomizedPattern": mscLpE1TestCustomizedPattern,
       "mscLpE1TestDataStartDelay": mscLpE1TestDataStartDelay,
       "mscLpE1TestDisplayInterval": mscLpE1TestDisplayInterval,
       "mscLpE1TestDuration": mscLpE1TestDuration,
       "mscLpE1TestResultsTable": mscLpE1TestResultsTable,
       "mscLpE1TestResultsEntry": mscLpE1TestResultsEntry,
       "mscLpE1TestElapsedTime": mscLpE1TestElapsedTime,
       "mscLpE1TestTimeRemaining": mscLpE1TestTimeRemaining,
       "mscLpE1TestCauseOfTermination": mscLpE1TestCauseOfTermination,
       "mscLpE1TestBitsTx": mscLpE1TestBitsTx,
       "mscLpE1TestBytesTx": mscLpE1TestBytesTx,
       "mscLpE1TestFrmTx": mscLpE1TestFrmTx,
       "mscLpE1TestBitsRx": mscLpE1TestBitsRx,
       "mscLpE1TestBytesRx": mscLpE1TestBytesRx,
       "mscLpE1TestFrmRx": mscLpE1TestFrmRx,
       "mscLpE1TestErroredFrmRx": mscLpE1TestErroredFrmRx,
       "mscLpE1TestBitErrorRate": mscLpE1TestBitErrorRate,
       "mscLpE1Dsp": mscLpE1Dsp,
       "mscLpE1DspRowStatusTable": mscLpE1DspRowStatusTable,
       "mscLpE1DspRowStatusEntry": mscLpE1DspRowStatusEntry,
       "mscLpE1DspRowStatus": mscLpE1DspRowStatus,
       "mscLpE1DspComponentName": mscLpE1DspComponentName,
       "mscLpE1DspStorageType": mscLpE1DspStorageType,
       "mscLpE1DspIndex": mscLpE1DspIndex,
       "mscLpE1Audio": mscLpE1Audio,
       "mscLpE1AudioRowStatusTable": mscLpE1AudioRowStatusTable,
       "mscLpE1AudioRowStatusEntry": mscLpE1AudioRowStatusEntry,
       "mscLpE1AudioRowStatus": mscLpE1AudioRowStatus,
       "mscLpE1AudioComponentName": mscLpE1AudioComponentName,
       "mscLpE1AudioStorageType": mscLpE1AudioStorageType,
       "mscLpE1AudioIndex": mscLpE1AudioIndex,
       "mscLpE1ProvTable": mscLpE1ProvTable,
       "mscLpE1ProvEntry": mscLpE1ProvEntry,
       "mscLpE1LineType": mscLpE1LineType,
       "mscLpE1ClockingSource": mscLpE1ClockingSource,
       "mscLpE1Crc4Mode": mscLpE1Crc4Mode,
       "mscLpE1SendRaiOnAis": mscLpE1SendRaiOnAis,
       "mscLpE1RaiDeclareAlarmTime": mscLpE1RaiDeclareAlarmTime,
       "mscLpE1RaiClearAlarmTime": mscLpE1RaiClearAlarmTime,
       "mscLpE1CidDataTable": mscLpE1CidDataTable,
       "mscLpE1CidDataEntry": mscLpE1CidDataEntry,
       "mscLpE1CustomerIdentifier": mscLpE1CustomerIdentifier,
       "mscLpE1AdminInfoTable": mscLpE1AdminInfoTable,
       "mscLpE1AdminInfoEntry": mscLpE1AdminInfoEntry,
       "mscLpE1Vendor": mscLpE1Vendor,
       "mscLpE1CommentText": mscLpE1CommentText,
       "mscLpE1IfEntryTable": mscLpE1IfEntryTable,
       "mscLpE1IfEntryEntry": mscLpE1IfEntryEntry,
       "mscLpE1IfAdminStatus": mscLpE1IfAdminStatus,
       "mscLpE1IfIndex": mscLpE1IfIndex,
       "mscLpE1OperStatusTable": mscLpE1OperStatusTable,
       "mscLpE1OperStatusEntry": mscLpE1OperStatusEntry,
       "mscLpE1SnmpOperStatus": mscLpE1SnmpOperStatus,
       "mscLpE1StateTable": mscLpE1StateTable,
       "mscLpE1StateEntry": mscLpE1StateEntry,
       "mscLpE1AdminState": mscLpE1AdminState,
       "mscLpE1OperationalState": mscLpE1OperationalState,
       "mscLpE1UsageState": mscLpE1UsageState,
       "mscLpE1AvailabilityStatus": mscLpE1AvailabilityStatus,
       "mscLpE1ProceduralStatus": mscLpE1ProceduralStatus,
       "mscLpE1ControlStatus": mscLpE1ControlStatus,
       "mscLpE1AlarmStatus": mscLpE1AlarmStatus,
       "mscLpE1StandbyStatus": mscLpE1StandbyStatus,
       "mscLpE1UnknownStatus": mscLpE1UnknownStatus,
       "mscLpE1OperTable": mscLpE1OperTable,
       "mscLpE1OperEntry": mscLpE1OperEntry,
       "mscLpE1LosAlarm": mscLpE1LosAlarm,
       "mscLpE1RxAisAlarm": mscLpE1RxAisAlarm,
       "mscLpE1LofAlarm": mscLpE1LofAlarm,
       "mscLpE1RxRaiAlarm": mscLpE1RxRaiAlarm,
       "mscLpE1TxAisAlarm": mscLpE1TxAisAlarm,
       "mscLpE1TxRaiAlarm": mscLpE1TxRaiAlarm,
       "mscLpE1E1OperTable": mscLpE1E1OperTable,
       "mscLpE1E1OperEntry": mscLpE1E1OperEntry,
       "mscLpE1MultifrmLofAlarm": mscLpE1MultifrmLofAlarm,
       "mscLpE1RxMultifrmRaiAlarm": mscLpE1RxMultifrmRaiAlarm,
       "mscLpE1TxMultifrmRaiAlarm": mscLpE1TxMultifrmRaiAlarm,
       "mscLpE1StatsTable": mscLpE1StatsTable,
       "mscLpE1StatsEntry": mscLpE1StatsEntry,
       "mscLpE1RunningTime": mscLpE1RunningTime,
       "mscLpE1ErrorFreeSec": mscLpE1ErrorFreeSec,
       "mscLpE1ErroredSec": mscLpE1ErroredSec,
       "mscLpE1SevErroredSec": mscLpE1SevErroredSec,
       "mscLpE1SevErroredFrmSec": mscLpE1SevErroredFrmSec,
       "mscLpE1UnavailSec": mscLpE1UnavailSec,
       "mscLpE1BpvErrors": mscLpE1BpvErrors,
       "mscLpE1CrcErrors": mscLpE1CrcErrors,
       "mscLpE1FrmErrors": mscLpE1FrmErrors,
       "mscLpE1LosStateChanges": mscLpE1LosStateChanges,
       "mscLpE1SlipErrors": mscLpE1SlipErrors,
       "mscLpV35": mscLpV35,
       "mscLpV35RowStatusTable": mscLpV35RowStatusTable,
       "mscLpV35RowStatusEntry": mscLpV35RowStatusEntry,
       "mscLpV35RowStatus": mscLpV35RowStatus,
       "mscLpV35ComponentName": mscLpV35ComponentName,
       "mscLpV35StorageType": mscLpV35StorageType,
       "mscLpV35Index": mscLpV35Index,
       "mscLpV35Test": mscLpV35Test,
       "mscLpV35TestRowStatusTable": mscLpV35TestRowStatusTable,
       "mscLpV35TestRowStatusEntry": mscLpV35TestRowStatusEntry,
       "mscLpV35TestRowStatus": mscLpV35TestRowStatus,
       "mscLpV35TestComponentName": mscLpV35TestComponentName,
       "mscLpV35TestStorageType": mscLpV35TestStorageType,
       "mscLpV35TestIndex": mscLpV35TestIndex,
       "mscLpV35TestStateTable": mscLpV35TestStateTable,
       "mscLpV35TestStateEntry": mscLpV35TestStateEntry,
       "mscLpV35TestAdminState": mscLpV35TestAdminState,
       "mscLpV35TestOperationalState": mscLpV35TestOperationalState,
       "mscLpV35TestUsageState": mscLpV35TestUsageState,
       "mscLpV35TestSetupTable": mscLpV35TestSetupTable,
       "mscLpV35TestSetupEntry": mscLpV35TestSetupEntry,
       "mscLpV35TestPurpose": mscLpV35TestPurpose,
       "mscLpV35TestType": mscLpV35TestType,
       "mscLpV35TestFrmSize": mscLpV35TestFrmSize,
       "mscLpV35TestFrmPatternType": mscLpV35TestFrmPatternType,
       "mscLpV35TestCustomizedPattern": mscLpV35TestCustomizedPattern,
       "mscLpV35TestDataStartDelay": mscLpV35TestDataStartDelay,
       "mscLpV35TestDisplayInterval": mscLpV35TestDisplayInterval,
       "mscLpV35TestDuration": mscLpV35TestDuration,
       "mscLpV35TestResultsTable": mscLpV35TestResultsTable,
       "mscLpV35TestResultsEntry": mscLpV35TestResultsEntry,
       "mscLpV35TestElapsedTime": mscLpV35TestElapsedTime,
       "mscLpV35TestTimeRemaining": mscLpV35TestTimeRemaining,
       "mscLpV35TestCauseOfTermination": mscLpV35TestCauseOfTermination,
       "mscLpV35TestBitsTx": mscLpV35TestBitsTx,
       "mscLpV35TestBytesTx": mscLpV35TestBytesTx,
       "mscLpV35TestFrmTx": mscLpV35TestFrmTx,
       "mscLpV35TestBitsRx": mscLpV35TestBitsRx,
       "mscLpV35TestBytesRx": mscLpV35TestBytesRx,
       "mscLpV35TestFrmRx": mscLpV35TestFrmRx,
       "mscLpV35TestErroredFrmRx": mscLpV35TestErroredFrmRx,
       "mscLpV35TestBitErrorRate": mscLpV35TestBitErrorRate,
       "mscLpV35ProvTable": mscLpV35ProvTable,
       "mscLpV35ProvEntry": mscLpV35ProvEntry,
       "mscLpV35LinkMode": mscLpV35LinkMode,
       "mscLpV35ReadyLineState": mscLpV35ReadyLineState,
       "mscLpV35DataTransferLineState": mscLpV35DataTransferLineState,
       "mscLpV35LineStatusTimeOut": mscLpV35LineStatusTimeOut,
       "mscLpV35LineSpeed": mscLpV35LineSpeed,
       "mscLpV35ClockingSource": mscLpV35ClockingSource,
       "mscLpV35DteDataClockSource": mscLpV35DteDataClockSource,
       "mscLpV35ApplicationFramerName": mscLpV35ApplicationFramerName,
       "mscLpV35EnableDynamicSpeed": mscLpV35EnableDynamicSpeed,
       "mscLpV35CidDataTable": mscLpV35CidDataTable,
       "mscLpV35CidDataEntry": mscLpV35CidDataEntry,
       "mscLpV35CustomerIdentifier": mscLpV35CustomerIdentifier,
       "mscLpV35AdminInfoTable": mscLpV35AdminInfoTable,
       "mscLpV35AdminInfoEntry": mscLpV35AdminInfoEntry,
       "mscLpV35Vendor": mscLpV35Vendor,
       "mscLpV35CommentText": mscLpV35CommentText,
       "mscLpV35IfEntryTable": mscLpV35IfEntryTable,
       "mscLpV35IfEntryEntry": mscLpV35IfEntryEntry,
       "mscLpV35IfAdminStatus": mscLpV35IfAdminStatus,
       "mscLpV35IfIndex": mscLpV35IfIndex,
       "mscLpV35OperStatusTable": mscLpV35OperStatusTable,
       "mscLpV35OperStatusEntry": mscLpV35OperStatusEntry,
       "mscLpV35SnmpOperStatus": mscLpV35SnmpOperStatus,
       "mscLpV35StateTable": mscLpV35StateTable,
       "mscLpV35StateEntry": mscLpV35StateEntry,
       "mscLpV35AdminState": mscLpV35AdminState,
       "mscLpV35OperationalState": mscLpV35OperationalState,
       "mscLpV35UsageState": mscLpV35UsageState,
       "mscLpV35AvailabilityStatus": mscLpV35AvailabilityStatus,
       "mscLpV35ProceduralStatus": mscLpV35ProceduralStatus,
       "mscLpV35ControlStatus": mscLpV35ControlStatus,
       "mscLpV35AlarmStatus": mscLpV35AlarmStatus,
       "mscLpV35StandbyStatus": mscLpV35StandbyStatus,
       "mscLpV35UnknownStatus": mscLpV35UnknownStatus,
       "mscLpV35OperTable": mscLpV35OperTable,
       "mscLpV35OperEntry": mscLpV35OperEntry,
       "mscLpV35ActualLinkMode": mscLpV35ActualLinkMode,
       "mscLpV35LineState": mscLpV35LineState,
       "mscLpV35ActualTxLineSpeed": mscLpV35ActualTxLineSpeed,
       "mscLpV35ActualRxLineSpeed": mscLpV35ActualRxLineSpeed,
       "mscLpV35DataXferStateChanges": mscLpV35DataXferStateChanges,
       "mscLpX21": mscLpX21,
       "mscLpX21RowStatusTable": mscLpX21RowStatusTable,
       "mscLpX21RowStatusEntry": mscLpX21RowStatusEntry,
       "mscLpX21RowStatus": mscLpX21RowStatus,
       "mscLpX21ComponentName": mscLpX21ComponentName,
       "mscLpX21StorageType": mscLpX21StorageType,
       "mscLpX21Index": mscLpX21Index,
       "mscLpX21Test": mscLpX21Test,
       "mscLpX21TestRowStatusTable": mscLpX21TestRowStatusTable,
       "mscLpX21TestRowStatusEntry": mscLpX21TestRowStatusEntry,
       "mscLpX21TestRowStatus": mscLpX21TestRowStatus,
       "mscLpX21TestComponentName": mscLpX21TestComponentName,
       "mscLpX21TestStorageType": mscLpX21TestStorageType,
       "mscLpX21TestIndex": mscLpX21TestIndex,
       "mscLpX21TestStateTable": mscLpX21TestStateTable,
       "mscLpX21TestStateEntry": mscLpX21TestStateEntry,
       "mscLpX21TestAdminState": mscLpX21TestAdminState,
       "mscLpX21TestOperationalState": mscLpX21TestOperationalState,
       "mscLpX21TestUsageState": mscLpX21TestUsageState,
       "mscLpX21TestSetupTable": mscLpX21TestSetupTable,
       "mscLpX21TestSetupEntry": mscLpX21TestSetupEntry,
       "mscLpX21TestPurpose": mscLpX21TestPurpose,
       "mscLpX21TestType": mscLpX21TestType,
       "mscLpX21TestFrmSize": mscLpX21TestFrmSize,
       "mscLpX21TestFrmPatternType": mscLpX21TestFrmPatternType,
       "mscLpX21TestCustomizedPattern": mscLpX21TestCustomizedPattern,
       "mscLpX21TestDataStartDelay": mscLpX21TestDataStartDelay,
       "mscLpX21TestDisplayInterval": mscLpX21TestDisplayInterval,
       "mscLpX21TestDuration": mscLpX21TestDuration,
       "mscLpX21TestResultsTable": mscLpX21TestResultsTable,
       "mscLpX21TestResultsEntry": mscLpX21TestResultsEntry,
       "mscLpX21TestElapsedTime": mscLpX21TestElapsedTime,
       "mscLpX21TestTimeRemaining": mscLpX21TestTimeRemaining,
       "mscLpX21TestCauseOfTermination": mscLpX21TestCauseOfTermination,
       "mscLpX21TestBitsTx": mscLpX21TestBitsTx,
       "mscLpX21TestBytesTx": mscLpX21TestBytesTx,
       "mscLpX21TestFrmTx": mscLpX21TestFrmTx,
       "mscLpX21TestBitsRx": mscLpX21TestBitsRx,
       "mscLpX21TestBytesRx": mscLpX21TestBytesRx,
       "mscLpX21TestFrmRx": mscLpX21TestFrmRx,
       "mscLpX21TestErroredFrmRx": mscLpX21TestErroredFrmRx,
       "mscLpX21TestBitErrorRate": mscLpX21TestBitErrorRate,
       "mscLpX21ProvTable": mscLpX21ProvTable,
       "mscLpX21ProvEntry": mscLpX21ProvEntry,
       "mscLpX21LinkMode": mscLpX21LinkMode,
       "mscLpX21ReadyLineState": mscLpX21ReadyLineState,
       "mscLpX21DataTransferLineState": mscLpX21DataTransferLineState,
       "mscLpX21LineStatusTimeOut": mscLpX21LineStatusTimeOut,
       "mscLpX21LineSpeed": mscLpX21LineSpeed,
       "mscLpX21ClockingSource": mscLpX21ClockingSource,
       "mscLpX21DteDataClockSource": mscLpX21DteDataClockSource,
       "mscLpX21LineTerminationRequired": mscLpX21LineTerminationRequired,
       "mscLpX21ApplicationFramerName": mscLpX21ApplicationFramerName,
       "mscLpX21EnableDynamicSpeed": mscLpX21EnableDynamicSpeed,
       "mscLpX21CidDataTable": mscLpX21CidDataTable,
       "mscLpX21CidDataEntry": mscLpX21CidDataEntry,
       "mscLpX21CustomerIdentifier": mscLpX21CustomerIdentifier,
       "mscLpX21AdminInfoTable": mscLpX21AdminInfoTable,
       "mscLpX21AdminInfoEntry": mscLpX21AdminInfoEntry,
       "mscLpX21Vendor": mscLpX21Vendor,
       "mscLpX21CommentText": mscLpX21CommentText,
       "mscLpX21IfEntryTable": mscLpX21IfEntryTable,
       "mscLpX21IfEntryEntry": mscLpX21IfEntryEntry,
       "mscLpX21IfAdminStatus": mscLpX21IfAdminStatus,
       "mscLpX21IfIndex": mscLpX21IfIndex,
       "mscLpX21OperStatusTable": mscLpX21OperStatusTable,
       "mscLpX21OperStatusEntry": mscLpX21OperStatusEntry,
       "mscLpX21SnmpOperStatus": mscLpX21SnmpOperStatus,
       "mscLpX21StateTable": mscLpX21StateTable,
       "mscLpX21StateEntry": mscLpX21StateEntry,
       "mscLpX21AdminState": mscLpX21AdminState,
       "mscLpX21OperationalState": mscLpX21OperationalState,
       "mscLpX21UsageState": mscLpX21UsageState,
       "mscLpX21AvailabilityStatus": mscLpX21AvailabilityStatus,
       "mscLpX21ProceduralStatus": mscLpX21ProceduralStatus,
       "mscLpX21ControlStatus": mscLpX21ControlStatus,
       "mscLpX21AlarmStatus": mscLpX21AlarmStatus,
       "mscLpX21StandbyStatus": mscLpX21StandbyStatus,
       "mscLpX21UnknownStatus": mscLpX21UnknownStatus,
       "mscLpX21OperTable": mscLpX21OperTable,
       "mscLpX21OperEntry": mscLpX21OperEntry,
       "mscLpX21ActualLinkMode": mscLpX21ActualLinkMode,
       "mscLpX21LineState": mscLpX21LineState,
       "mscLpX21ActualTxLineSpeed": mscLpX21ActualTxLineSpeed,
       "mscLpX21ActualRxLineSpeed": mscLpX21ActualRxLineSpeed,
       "mscLpX21DataXferStateChanges": mscLpX21DataXferStateChanges,
       "mscLpSonet": mscLpSonet,
       "mscLpSonetRowStatusTable": mscLpSonetRowStatusTable,
       "mscLpSonetRowStatusEntry": mscLpSonetRowStatusEntry,
       "mscLpSonetRowStatus": mscLpSonetRowStatus,
       "mscLpSonetComponentName": mscLpSonetComponentName,
       "mscLpSonetStorageType": mscLpSonetStorageType,
       "mscLpSonetIndex": mscLpSonetIndex,
       "mscLpSonetPath": mscLpSonetPath,
       "mscLpSonetPathRowStatusTable": mscLpSonetPathRowStatusTable,
       "mscLpSonetPathRowStatusEntry": mscLpSonetPathRowStatusEntry,
       "mscLpSonetPathRowStatus": mscLpSonetPathRowStatus,
       "mscLpSonetPathComponentName": mscLpSonetPathComponentName,
       "mscLpSonetPathStorageType": mscLpSonetPathStorageType,
       "mscLpSonetPathIndex": mscLpSonetPathIndex,
       "mscLpSonetPathCell": mscLpSonetPathCell,
       "mscLpSonetPathCellRowStatusTable": mscLpSonetPathCellRowStatusTable,
       "mscLpSonetPathCellRowStatusEntry": mscLpSonetPathCellRowStatusEntry,
       "mscLpSonetPathCellRowStatus": mscLpSonetPathCellRowStatus,
       "mscLpSonetPathCellComponentName": mscLpSonetPathCellComponentName,
       "mscLpSonetPathCellStorageType": mscLpSonetPathCellStorageType,
       "mscLpSonetPathCellIndex": mscLpSonetPathCellIndex,
       "mscLpSonetPathCellProvTable": mscLpSonetPathCellProvTable,
       "mscLpSonetPathCellProvEntry": mscLpSonetPathCellProvEntry,
       "mscLpSonetPathCellAlarmActDelay": mscLpSonetPathCellAlarmActDelay,
       "mscLpSonetPathCellScrambleCellPayload": mscLpSonetPathCellScrambleCellPayload,
       "mscLpSonetPathCellCorrectSingleBitHeaderErrors": mscLpSonetPathCellCorrectSingleBitHeaderErrors,
       "mscLpSonetPathCellOperTable": mscLpSonetPathCellOperTable,
       "mscLpSonetPathCellOperEntry": mscLpSonetPathCellOperEntry,
       "mscLpSonetPathCellLcdAlarm": mscLpSonetPathCellLcdAlarm,
       "mscLpSonetPathCellStatsTable": mscLpSonetPathCellStatsTable,
       "mscLpSonetPathCellStatsEntry": mscLpSonetPathCellStatsEntry,
       "mscLpSonetPathCellUncorrectableHecErrors": mscLpSonetPathCellUncorrectableHecErrors,
       "mscLpSonetPathCellSevErroredSec": mscLpSonetPathCellSevErroredSec,
       "mscLpSonetPathCellReceiveCellUtilization": mscLpSonetPathCellReceiveCellUtilization,
       "mscLpSonetPathCellTransmitCellUtilization": mscLpSonetPathCellTransmitCellUtilization,
       "mscLpSonetPathCellCorrectableHeaderErrors": mscLpSonetPathCellCorrectableHeaderErrors,
       "mscLpSonetPathProvTable": mscLpSonetPathProvTable,
       "mscLpSonetPathProvEntry": mscLpSonetPathProvEntry,
       "mscLpSonetPathApplicationFramerName": mscLpSonetPathApplicationFramerName,
       "mscLpSonetPathCidDataTable": mscLpSonetPathCidDataTable,
       "mscLpSonetPathCidDataEntry": mscLpSonetPathCidDataEntry,
       "mscLpSonetPathCustomerIdentifier": mscLpSonetPathCustomerIdentifier,
       "mscLpSonetPathStateTable": mscLpSonetPathStateTable,
       "mscLpSonetPathStateEntry": mscLpSonetPathStateEntry,
       "mscLpSonetPathAdminState": mscLpSonetPathAdminState,
       "mscLpSonetPathOperationalState": mscLpSonetPathOperationalState,
       "mscLpSonetPathUsageState": mscLpSonetPathUsageState,
       "mscLpSonetPathAvailabilityStatus": mscLpSonetPathAvailabilityStatus,
       "mscLpSonetPathProceduralStatus": mscLpSonetPathProceduralStatus,
       "mscLpSonetPathControlStatus": mscLpSonetPathControlStatus,
       "mscLpSonetPathAlarmStatus": mscLpSonetPathAlarmStatus,
       "mscLpSonetPathStandbyStatus": mscLpSonetPathStandbyStatus,
       "mscLpSonetPathUnknownStatus": mscLpSonetPathUnknownStatus,
       "mscLpSonetPathIfEntryTable": mscLpSonetPathIfEntryTable,
       "mscLpSonetPathIfEntryEntry": mscLpSonetPathIfEntryEntry,
       "mscLpSonetPathIfAdminStatus": mscLpSonetPathIfAdminStatus,
       "mscLpSonetPathIfIndex": mscLpSonetPathIfIndex,
       "mscLpSonetPathOperStatusTable": mscLpSonetPathOperStatusTable,
       "mscLpSonetPathOperStatusEntry": mscLpSonetPathOperStatusEntry,
       "mscLpSonetPathSnmpOperStatus": mscLpSonetPathSnmpOperStatus,
       "mscLpSonetPathOperTable": mscLpSonetPathOperTable,
       "mscLpSonetPathOperEntry": mscLpSonetPathOperEntry,
       "mscLpSonetPathLopAlarm": mscLpSonetPathLopAlarm,
       "mscLpSonetPathRxAisAlarm": mscLpSonetPathRxAisAlarm,
       "mscLpSonetPathRxRfiAlarm": mscLpSonetPathRxRfiAlarm,
       "mscLpSonetPathSignalLabelMismatch": mscLpSonetPathSignalLabelMismatch,
       "mscLpSonetPathTxAis": mscLpSonetPathTxAis,
       "mscLpSonetPathTxRdi": mscLpSonetPathTxRdi,
       "mscLpSonetPathStatsTable": mscLpSonetPathStatsTable,
       "mscLpSonetPathStatsEntry": mscLpSonetPathStatsEntry,
       "mscLpSonetPathPathErrorFreeSec": mscLpSonetPathPathErrorFreeSec,
       "mscLpSonetPathPathCodeViolations": mscLpSonetPathPathCodeViolations,
       "mscLpSonetPathPathErroredSec": mscLpSonetPathPathErroredSec,
       "mscLpSonetPathPathSevErroredSec": mscLpSonetPathPathSevErroredSec,
       "mscLpSonetPathPathAisLopSec": mscLpSonetPathPathAisLopSec,
       "mscLpSonetPathPathUnavailSec": mscLpSonetPathPathUnavailSec,
       "mscLpSonetPathPathFailures": mscLpSonetPathPathFailures,
       "mscLpSonetPathFarEndPathErrorFreeSec": mscLpSonetPathFarEndPathErrorFreeSec,
       "mscLpSonetPathFarEndPathCodeViolations": mscLpSonetPathFarEndPathCodeViolations,
       "mscLpSonetPathFarEndPathErroredSec": mscLpSonetPathFarEndPathErroredSec,
       "mscLpSonetPathFarEndPathSevErroredSec": mscLpSonetPathFarEndPathSevErroredSec,
       "mscLpSonetPathFarEndPathAisLopSec": mscLpSonetPathFarEndPathAisLopSec,
       "mscLpSonetPathFarEndPathUnavailSec": mscLpSonetPathFarEndPathUnavailSec,
       "mscLpSonetPathFarEndPathFailures": mscLpSonetPathFarEndPathFailures,
       "mscLpSonetTest": mscLpSonetTest,
       "mscLpSonetTestRowStatusTable": mscLpSonetTestRowStatusTable,
       "mscLpSonetTestRowStatusEntry": mscLpSonetTestRowStatusEntry,
       "mscLpSonetTestRowStatus": mscLpSonetTestRowStatus,
       "mscLpSonetTestComponentName": mscLpSonetTestComponentName,
       "mscLpSonetTestStorageType": mscLpSonetTestStorageType,
       "mscLpSonetTestIndex": mscLpSonetTestIndex,
       "mscLpSonetTestStateTable": mscLpSonetTestStateTable,
       "mscLpSonetTestStateEntry": mscLpSonetTestStateEntry,
       "mscLpSonetTestAdminState": mscLpSonetTestAdminState,
       "mscLpSonetTestOperationalState": mscLpSonetTestOperationalState,
       "mscLpSonetTestUsageState": mscLpSonetTestUsageState,
       "mscLpSonetTestSetupTable": mscLpSonetTestSetupTable,
       "mscLpSonetTestSetupEntry": mscLpSonetTestSetupEntry,
       "mscLpSonetTestPurpose": mscLpSonetTestPurpose,
       "mscLpSonetTestType": mscLpSonetTestType,
       "mscLpSonetTestFrmSize": mscLpSonetTestFrmSize,
       "mscLpSonetTestFrmPatternType": mscLpSonetTestFrmPatternType,
       "mscLpSonetTestCustomizedPattern": mscLpSonetTestCustomizedPattern,
       "mscLpSonetTestDataStartDelay": mscLpSonetTestDataStartDelay,
       "mscLpSonetTestDisplayInterval": mscLpSonetTestDisplayInterval,
       "mscLpSonetTestDuration": mscLpSonetTestDuration,
       "mscLpSonetTestResultsTable": mscLpSonetTestResultsTable,
       "mscLpSonetTestResultsEntry": mscLpSonetTestResultsEntry,
       "mscLpSonetTestElapsedTime": mscLpSonetTestElapsedTime,
       "mscLpSonetTestTimeRemaining": mscLpSonetTestTimeRemaining,
       "mscLpSonetTestCauseOfTermination": mscLpSonetTestCauseOfTermination,
       "mscLpSonetTestBitsTx": mscLpSonetTestBitsTx,
       "mscLpSonetTestBytesTx": mscLpSonetTestBytesTx,
       "mscLpSonetTestFrmTx": mscLpSonetTestFrmTx,
       "mscLpSonetTestBitsRx": mscLpSonetTestBitsRx,
       "mscLpSonetTestBytesRx": mscLpSonetTestBytesRx,
       "mscLpSonetTestFrmRx": mscLpSonetTestFrmRx,
       "mscLpSonetTestErroredFrmRx": mscLpSonetTestErroredFrmRx,
       "mscLpSonetTestBitErrorRate": mscLpSonetTestBitErrorRate,
       "mscLpSonetProvTable": mscLpSonetProvTable,
       "mscLpSonetProvEntry": mscLpSonetProvEntry,
       "mscLpSonetClockingSource": mscLpSonetClockingSource,
       "mscLpSonetCidDataTable": mscLpSonetCidDataTable,
       "mscLpSonetCidDataEntry": mscLpSonetCidDataEntry,
       "mscLpSonetCustomerIdentifier": mscLpSonetCustomerIdentifier,
       "mscLpSonetAdminInfoTable": mscLpSonetAdminInfoTable,
       "mscLpSonetAdminInfoEntry": mscLpSonetAdminInfoEntry,
       "mscLpSonetVendor": mscLpSonetVendor,
       "mscLpSonetCommentText": mscLpSonetCommentText,
       "mscLpSonetIfEntryTable": mscLpSonetIfEntryTable,
       "mscLpSonetIfEntryEntry": mscLpSonetIfEntryEntry,
       "mscLpSonetIfAdminStatus": mscLpSonetIfAdminStatus,
       "mscLpSonetIfIndex": mscLpSonetIfIndex,
       "mscLpSonetOperStatusTable": mscLpSonetOperStatusTable,
       "mscLpSonetOperStatusEntry": mscLpSonetOperStatusEntry,
       "mscLpSonetSnmpOperStatus": mscLpSonetSnmpOperStatus,
       "mscLpSonetStateTable": mscLpSonetStateTable,
       "mscLpSonetStateEntry": mscLpSonetStateEntry,
       "mscLpSonetAdminState": mscLpSonetAdminState,
       "mscLpSonetOperationalState": mscLpSonetOperationalState,
       "mscLpSonetUsageState": mscLpSonetUsageState,
       "mscLpSonetAvailabilityStatus": mscLpSonetAvailabilityStatus,
       "mscLpSonetProceduralStatus": mscLpSonetProceduralStatus,
       "mscLpSonetControlStatus": mscLpSonetControlStatus,
       "mscLpSonetAlarmStatus": mscLpSonetAlarmStatus,
       "mscLpSonetStandbyStatus": mscLpSonetStandbyStatus,
       "mscLpSonetUnknownStatus": mscLpSonetUnknownStatus,
       "mscLpSonetOperTable": mscLpSonetOperTable,
       "mscLpSonetOperEntry": mscLpSonetOperEntry,
       "mscLpSonetLosAlarm": mscLpSonetLosAlarm,
       "mscLpSonetLofAlarm": mscLpSonetLofAlarm,
       "mscLpSonetRxAisAlarm": mscLpSonetRxAisAlarm,
       "mscLpSonetRxRfiAlarm": mscLpSonetRxRfiAlarm,
       "mscLpSonetTxAis": mscLpSonetTxAis,
       "mscLpSonetTxRdi": mscLpSonetTxRdi,
       "mscLpSonetUnusableTxClockRefAlarm": mscLpSonetUnusableTxClockRefAlarm,
       "mscLpSonetStatsTable": mscLpSonetStatsTable,
       "mscLpSonetStatsEntry": mscLpSonetStatsEntry,
       "mscLpSonetRunningTime": mscLpSonetRunningTime,
       "mscLpSonetErrorFreeSec": mscLpSonetErrorFreeSec,
       "mscLpSonetSectCodeViolations": mscLpSonetSectCodeViolations,
       "mscLpSonetSectErroredSec": mscLpSonetSectErroredSec,
       "mscLpSonetSectSevErroredSec": mscLpSonetSectSevErroredSec,
       "mscLpSonetSectLosSec": mscLpSonetSectLosSec,
       "mscLpSonetSectSevErroredFrmSec": mscLpSonetSectSevErroredFrmSec,
       "mscLpSonetSectFailures": mscLpSonetSectFailures,
       "mscLpSonetLineCodeViolations": mscLpSonetLineCodeViolations,
       "mscLpSonetLineErroredSec": mscLpSonetLineErroredSec,
       "mscLpSonetLineSevErroredSec": mscLpSonetLineSevErroredSec,
       "mscLpSonetLineAisSec": mscLpSonetLineAisSec,
       "mscLpSonetLineUnavailSec": mscLpSonetLineUnavailSec,
       "mscLpSonetLineFailures": mscLpSonetLineFailures,
       "mscLpSonetFarEndLineErrorFreeSec": mscLpSonetFarEndLineErrorFreeSec,
       "mscLpSonetFarEndLineCodeViolations": mscLpSonetFarEndLineCodeViolations,
       "mscLpSonetFarEndLineErroredSec": mscLpSonetFarEndLineErroredSec,
       "mscLpSonetFarEndLineSevErroredSec": mscLpSonetFarEndLineSevErroredSec,
       "mscLpSonetFarEndLineAisSec": mscLpSonetFarEndLineAisSec,
       "mscLpSonetFarEndLineUnavailSec": mscLpSonetFarEndLineUnavailSec,
       "mscLpSonetFarEndLineFailures": mscLpSonetFarEndLineFailures,
       "mscLpSdh": mscLpSdh,
       "mscLpSdhRowStatusTable": mscLpSdhRowStatusTable,
       "mscLpSdhRowStatusEntry": mscLpSdhRowStatusEntry,
       "mscLpSdhRowStatus": mscLpSdhRowStatus,
       "mscLpSdhComponentName": mscLpSdhComponentName,
       "mscLpSdhStorageType": mscLpSdhStorageType,
       "mscLpSdhIndex": mscLpSdhIndex,
       "mscLpSdhPath": mscLpSdhPath,
       "mscLpSdhPathRowStatusTable": mscLpSdhPathRowStatusTable,
       "mscLpSdhPathRowStatusEntry": mscLpSdhPathRowStatusEntry,
       "mscLpSdhPathRowStatus": mscLpSdhPathRowStatus,
       "mscLpSdhPathComponentName": mscLpSdhPathComponentName,
       "mscLpSdhPathStorageType": mscLpSdhPathStorageType,
       "mscLpSdhPathIndex": mscLpSdhPathIndex,
       "mscLpSdhPathCell": mscLpSdhPathCell,
       "mscLpSdhPathCellRowStatusTable": mscLpSdhPathCellRowStatusTable,
       "mscLpSdhPathCellRowStatusEntry": mscLpSdhPathCellRowStatusEntry,
       "mscLpSdhPathCellRowStatus": mscLpSdhPathCellRowStatus,
       "mscLpSdhPathCellComponentName": mscLpSdhPathCellComponentName,
       "mscLpSdhPathCellStorageType": mscLpSdhPathCellStorageType,
       "mscLpSdhPathCellIndex": mscLpSdhPathCellIndex,
       "mscLpSdhPathCellProvTable": mscLpSdhPathCellProvTable,
       "mscLpSdhPathCellProvEntry": mscLpSdhPathCellProvEntry,
       "mscLpSdhPathCellAlarmActDelay": mscLpSdhPathCellAlarmActDelay,
       "mscLpSdhPathCellScrambleCellPayload": mscLpSdhPathCellScrambleCellPayload,
       "mscLpSdhPathCellCorrectSingleBitHeaderErrors": mscLpSdhPathCellCorrectSingleBitHeaderErrors,
       "mscLpSdhPathCellOperTable": mscLpSdhPathCellOperTable,
       "mscLpSdhPathCellOperEntry": mscLpSdhPathCellOperEntry,
       "mscLpSdhPathCellLcdAlarm": mscLpSdhPathCellLcdAlarm,
       "mscLpSdhPathCellStatsTable": mscLpSdhPathCellStatsTable,
       "mscLpSdhPathCellStatsEntry": mscLpSdhPathCellStatsEntry,
       "mscLpSdhPathCellUncorrectableHecErrors": mscLpSdhPathCellUncorrectableHecErrors,
       "mscLpSdhPathCellSevErroredSec": mscLpSdhPathCellSevErroredSec,
       "mscLpSdhPathCellReceiveCellUtilization": mscLpSdhPathCellReceiveCellUtilization,
       "mscLpSdhPathCellTransmitCellUtilization": mscLpSdhPathCellTransmitCellUtilization,
       "mscLpSdhPathCellCorrectableHeaderErrors": mscLpSdhPathCellCorrectableHeaderErrors,
       "mscLpSdhPathProvTable": mscLpSdhPathProvTable,
       "mscLpSdhPathProvEntry": mscLpSdhPathProvEntry,
       "mscLpSdhPathApplicationFramerName": mscLpSdhPathApplicationFramerName,
       "mscLpSdhPathCidDataTable": mscLpSdhPathCidDataTable,
       "mscLpSdhPathCidDataEntry": mscLpSdhPathCidDataEntry,
       "mscLpSdhPathCustomerIdentifier": mscLpSdhPathCustomerIdentifier,
       "mscLpSdhPathStateTable": mscLpSdhPathStateTable,
       "mscLpSdhPathStateEntry": mscLpSdhPathStateEntry,
       "mscLpSdhPathAdminState": mscLpSdhPathAdminState,
       "mscLpSdhPathOperationalState": mscLpSdhPathOperationalState,
       "mscLpSdhPathUsageState": mscLpSdhPathUsageState,
       "mscLpSdhPathAvailabilityStatus": mscLpSdhPathAvailabilityStatus,
       "mscLpSdhPathProceduralStatus": mscLpSdhPathProceduralStatus,
       "mscLpSdhPathControlStatus": mscLpSdhPathControlStatus,
       "mscLpSdhPathAlarmStatus": mscLpSdhPathAlarmStatus,
       "mscLpSdhPathStandbyStatus": mscLpSdhPathStandbyStatus,
       "mscLpSdhPathUnknownStatus": mscLpSdhPathUnknownStatus,
       "mscLpSdhPathIfEntryTable": mscLpSdhPathIfEntryTable,
       "mscLpSdhPathIfEntryEntry": mscLpSdhPathIfEntryEntry,
       "mscLpSdhPathIfAdminStatus": mscLpSdhPathIfAdminStatus,
       "mscLpSdhPathIfIndex": mscLpSdhPathIfIndex,
       "mscLpSdhPathOperStatusTable": mscLpSdhPathOperStatusTable,
       "mscLpSdhPathOperStatusEntry": mscLpSdhPathOperStatusEntry,
       "mscLpSdhPathSnmpOperStatus": mscLpSdhPathSnmpOperStatus,
       "mscLpSdhPathOperTable": mscLpSdhPathOperTable,
       "mscLpSdhPathOperEntry": mscLpSdhPathOperEntry,
       "mscLpSdhPathLopAlarm": mscLpSdhPathLopAlarm,
       "mscLpSdhPathRxAisAlarm": mscLpSdhPathRxAisAlarm,
       "mscLpSdhPathRxRfiAlarm": mscLpSdhPathRxRfiAlarm,
       "mscLpSdhPathSignalLabelMismatch": mscLpSdhPathSignalLabelMismatch,
       "mscLpSdhPathTxAis": mscLpSdhPathTxAis,
       "mscLpSdhPathTxRdi": mscLpSdhPathTxRdi,
       "mscLpSdhPathStatsTable": mscLpSdhPathStatsTable,
       "mscLpSdhPathStatsEntry": mscLpSdhPathStatsEntry,
       "mscLpSdhPathPathErrorFreeSec": mscLpSdhPathPathErrorFreeSec,
       "mscLpSdhPathPathCodeViolations": mscLpSdhPathPathCodeViolations,
       "mscLpSdhPathPathErroredSec": mscLpSdhPathPathErroredSec,
       "mscLpSdhPathPathSevErroredSec": mscLpSdhPathPathSevErroredSec,
       "mscLpSdhPathPathAisLopSec": mscLpSdhPathPathAisLopSec,
       "mscLpSdhPathPathUnavailSec": mscLpSdhPathPathUnavailSec,
       "mscLpSdhPathPathFailures": mscLpSdhPathPathFailures,
       "mscLpSdhPathFarEndPathErrorFreeSec": mscLpSdhPathFarEndPathErrorFreeSec,
       "mscLpSdhPathFarEndPathCodeViolations": mscLpSdhPathFarEndPathCodeViolations,
       "mscLpSdhPathFarEndPathErroredSec": mscLpSdhPathFarEndPathErroredSec,
       "mscLpSdhPathFarEndPathSevErroredSec": mscLpSdhPathFarEndPathSevErroredSec,
       "mscLpSdhPathFarEndPathAisLopSec": mscLpSdhPathFarEndPathAisLopSec,
       "mscLpSdhPathFarEndPathUnavailSec": mscLpSdhPathFarEndPathUnavailSec,
       "mscLpSdhPathFarEndPathFailures": mscLpSdhPathFarEndPathFailures,
       "mscLpSdhTest": mscLpSdhTest,
       "mscLpSdhTestRowStatusTable": mscLpSdhTestRowStatusTable,
       "mscLpSdhTestRowStatusEntry": mscLpSdhTestRowStatusEntry,
       "mscLpSdhTestRowStatus": mscLpSdhTestRowStatus,
       "mscLpSdhTestComponentName": mscLpSdhTestComponentName,
       "mscLpSdhTestStorageType": mscLpSdhTestStorageType,
       "mscLpSdhTestIndex": mscLpSdhTestIndex,
       "mscLpSdhTestStateTable": mscLpSdhTestStateTable,
       "mscLpSdhTestStateEntry": mscLpSdhTestStateEntry,
       "mscLpSdhTestAdminState": mscLpSdhTestAdminState,
       "mscLpSdhTestOperationalState": mscLpSdhTestOperationalState,
       "mscLpSdhTestUsageState": mscLpSdhTestUsageState,
       "mscLpSdhTestSetupTable": mscLpSdhTestSetupTable,
       "mscLpSdhTestSetupEntry": mscLpSdhTestSetupEntry,
       "mscLpSdhTestPurpose": mscLpSdhTestPurpose,
       "mscLpSdhTestType": mscLpSdhTestType,
       "mscLpSdhTestFrmSize": mscLpSdhTestFrmSize,
       "mscLpSdhTestFrmPatternType": mscLpSdhTestFrmPatternType,
       "mscLpSdhTestCustomizedPattern": mscLpSdhTestCustomizedPattern,
       "mscLpSdhTestDataStartDelay": mscLpSdhTestDataStartDelay,
       "mscLpSdhTestDisplayInterval": mscLpSdhTestDisplayInterval,
       "mscLpSdhTestDuration": mscLpSdhTestDuration,
       "mscLpSdhTestResultsTable": mscLpSdhTestResultsTable,
       "mscLpSdhTestResultsEntry": mscLpSdhTestResultsEntry,
       "mscLpSdhTestElapsedTime": mscLpSdhTestElapsedTime,
       "mscLpSdhTestTimeRemaining": mscLpSdhTestTimeRemaining,
       "mscLpSdhTestCauseOfTermination": mscLpSdhTestCauseOfTermination,
       "mscLpSdhTestBitsTx": mscLpSdhTestBitsTx,
       "mscLpSdhTestBytesTx": mscLpSdhTestBytesTx,
       "mscLpSdhTestFrmTx": mscLpSdhTestFrmTx,
       "mscLpSdhTestBitsRx": mscLpSdhTestBitsRx,
       "mscLpSdhTestBytesRx": mscLpSdhTestBytesRx,
       "mscLpSdhTestFrmRx": mscLpSdhTestFrmRx,
       "mscLpSdhTestErroredFrmRx": mscLpSdhTestErroredFrmRx,
       "mscLpSdhTestBitErrorRate": mscLpSdhTestBitErrorRate,
       "mscLpSdhProvTable": mscLpSdhProvTable,
       "mscLpSdhProvEntry": mscLpSdhProvEntry,
       "mscLpSdhClockingSource": mscLpSdhClockingSource,
       "mscLpSdhCidDataTable": mscLpSdhCidDataTable,
       "mscLpSdhCidDataEntry": mscLpSdhCidDataEntry,
       "mscLpSdhCustomerIdentifier": mscLpSdhCustomerIdentifier,
       "mscLpSdhAdminInfoTable": mscLpSdhAdminInfoTable,
       "mscLpSdhAdminInfoEntry": mscLpSdhAdminInfoEntry,
       "mscLpSdhVendor": mscLpSdhVendor,
       "mscLpSdhCommentText": mscLpSdhCommentText,
       "mscLpSdhIfEntryTable": mscLpSdhIfEntryTable,
       "mscLpSdhIfEntryEntry": mscLpSdhIfEntryEntry,
       "mscLpSdhIfAdminStatus": mscLpSdhIfAdminStatus,
       "mscLpSdhIfIndex": mscLpSdhIfIndex,
       "mscLpSdhOperStatusTable": mscLpSdhOperStatusTable,
       "mscLpSdhOperStatusEntry": mscLpSdhOperStatusEntry,
       "mscLpSdhSnmpOperStatus": mscLpSdhSnmpOperStatus,
       "mscLpSdhStateTable": mscLpSdhStateTable,
       "mscLpSdhStateEntry": mscLpSdhStateEntry,
       "mscLpSdhAdminState": mscLpSdhAdminState,
       "mscLpSdhOperationalState": mscLpSdhOperationalState,
       "mscLpSdhUsageState": mscLpSdhUsageState,
       "mscLpSdhAvailabilityStatus": mscLpSdhAvailabilityStatus,
       "mscLpSdhProceduralStatus": mscLpSdhProceduralStatus,
       "mscLpSdhControlStatus": mscLpSdhControlStatus,
       "mscLpSdhAlarmStatus": mscLpSdhAlarmStatus,
       "mscLpSdhStandbyStatus": mscLpSdhStandbyStatus,
       "mscLpSdhUnknownStatus": mscLpSdhUnknownStatus,
       "mscLpSdhOperTable": mscLpSdhOperTable,
       "mscLpSdhOperEntry": mscLpSdhOperEntry,
       "mscLpSdhLosAlarm": mscLpSdhLosAlarm,
       "mscLpSdhLofAlarm": mscLpSdhLofAlarm,
       "mscLpSdhRxAisAlarm": mscLpSdhRxAisAlarm,
       "mscLpSdhRxRfiAlarm": mscLpSdhRxRfiAlarm,
       "mscLpSdhTxAis": mscLpSdhTxAis,
       "mscLpSdhTxRdi": mscLpSdhTxRdi,
       "mscLpSdhUnusableTxClockRefAlarm": mscLpSdhUnusableTxClockRefAlarm,
       "mscLpSdhStatsTable": mscLpSdhStatsTable,
       "mscLpSdhStatsEntry": mscLpSdhStatsEntry,
       "mscLpSdhRunningTime": mscLpSdhRunningTime,
       "mscLpSdhErrorFreeSec": mscLpSdhErrorFreeSec,
       "mscLpSdhSectCodeViolations": mscLpSdhSectCodeViolations,
       "mscLpSdhSectErroredSec": mscLpSdhSectErroredSec,
       "mscLpSdhSectSevErroredSec": mscLpSdhSectSevErroredSec,
       "mscLpSdhSectLosSec": mscLpSdhSectLosSec,
       "mscLpSdhSectSevErroredFrmSec": mscLpSdhSectSevErroredFrmSec,
       "mscLpSdhSectFailures": mscLpSdhSectFailures,
       "mscLpSdhLineCodeViolations": mscLpSdhLineCodeViolations,
       "mscLpSdhLineErroredSec": mscLpSdhLineErroredSec,
       "mscLpSdhLineSevErroredSec": mscLpSdhLineSevErroredSec,
       "mscLpSdhLineAisSec": mscLpSdhLineAisSec,
       "mscLpSdhLineUnavailSec": mscLpSdhLineUnavailSec,
       "mscLpSdhLineFailures": mscLpSdhLineFailures,
       "mscLpSdhFarEndLineErrorFreeSec": mscLpSdhFarEndLineErrorFreeSec,
       "mscLpSdhFarEndLineCodeViolations": mscLpSdhFarEndLineCodeViolations,
       "mscLpSdhFarEndLineErroredSec": mscLpSdhFarEndLineErroredSec,
       "mscLpSdhFarEndLineSevErroredSec": mscLpSdhFarEndLineSevErroredSec,
       "mscLpSdhFarEndLineAisSec": mscLpSdhFarEndLineAisSec,
       "mscLpSdhFarEndLineUnavailSec": mscLpSdhFarEndLineUnavailSec,
       "mscLpSdhFarEndLineFailures": mscLpSdhFarEndLineFailures,
       "mscLpJT2": mscLpJT2,
       "mscLpJT2RowStatusTable": mscLpJT2RowStatusTable,
       "mscLpJT2RowStatusEntry": mscLpJT2RowStatusEntry,
       "mscLpJT2RowStatus": mscLpJT2RowStatus,
       "mscLpJT2ComponentName": mscLpJT2ComponentName,
       "mscLpJT2StorageType": mscLpJT2StorageType,
       "mscLpJT2Index": mscLpJT2Index,
       "mscLpJT2Test": mscLpJT2Test,
       "mscLpJT2TestRowStatusTable": mscLpJT2TestRowStatusTable,
       "mscLpJT2TestRowStatusEntry": mscLpJT2TestRowStatusEntry,
       "mscLpJT2TestRowStatus": mscLpJT2TestRowStatus,
       "mscLpJT2TestComponentName": mscLpJT2TestComponentName,
       "mscLpJT2TestStorageType": mscLpJT2TestStorageType,
       "mscLpJT2TestIndex": mscLpJT2TestIndex,
       "mscLpJT2TestStateTable": mscLpJT2TestStateTable,
       "mscLpJT2TestStateEntry": mscLpJT2TestStateEntry,
       "mscLpJT2TestAdminState": mscLpJT2TestAdminState,
       "mscLpJT2TestOperationalState": mscLpJT2TestOperationalState,
       "mscLpJT2TestUsageState": mscLpJT2TestUsageState,
       "mscLpJT2TestSetupTable": mscLpJT2TestSetupTable,
       "mscLpJT2TestSetupEntry": mscLpJT2TestSetupEntry,
       "mscLpJT2TestPurpose": mscLpJT2TestPurpose,
       "mscLpJT2TestType": mscLpJT2TestType,
       "mscLpJT2TestFrmSize": mscLpJT2TestFrmSize,
       "mscLpJT2TestFrmPatternType": mscLpJT2TestFrmPatternType,
       "mscLpJT2TestCustomizedPattern": mscLpJT2TestCustomizedPattern,
       "mscLpJT2TestDataStartDelay": mscLpJT2TestDataStartDelay,
       "mscLpJT2TestDisplayInterval": mscLpJT2TestDisplayInterval,
       "mscLpJT2TestDuration": mscLpJT2TestDuration,
       "mscLpJT2TestResultsTable": mscLpJT2TestResultsTable,
       "mscLpJT2TestResultsEntry": mscLpJT2TestResultsEntry,
       "mscLpJT2TestElapsedTime": mscLpJT2TestElapsedTime,
       "mscLpJT2TestTimeRemaining": mscLpJT2TestTimeRemaining,
       "mscLpJT2TestCauseOfTermination": mscLpJT2TestCauseOfTermination,
       "mscLpJT2TestBitsTx": mscLpJT2TestBitsTx,
       "mscLpJT2TestBytesTx": mscLpJT2TestBytesTx,
       "mscLpJT2TestFrmTx": mscLpJT2TestFrmTx,
       "mscLpJT2TestBitsRx": mscLpJT2TestBitsRx,
       "mscLpJT2TestBytesRx": mscLpJT2TestBytesRx,
       "mscLpJT2TestFrmRx": mscLpJT2TestFrmRx,
       "mscLpJT2TestErroredFrmRx": mscLpJT2TestErroredFrmRx,
       "mscLpJT2TestBitErrorRate": mscLpJT2TestBitErrorRate,
       "mscLpJT2Cell": mscLpJT2Cell,
       "mscLpJT2CellRowStatusTable": mscLpJT2CellRowStatusTable,
       "mscLpJT2CellRowStatusEntry": mscLpJT2CellRowStatusEntry,
       "mscLpJT2CellRowStatus": mscLpJT2CellRowStatus,
       "mscLpJT2CellComponentName": mscLpJT2CellComponentName,
       "mscLpJT2CellStorageType": mscLpJT2CellStorageType,
       "mscLpJT2CellIndex": mscLpJT2CellIndex,
       "mscLpJT2CellProvTable": mscLpJT2CellProvTable,
       "mscLpJT2CellProvEntry": mscLpJT2CellProvEntry,
       "mscLpJT2CellAlarmActDelay": mscLpJT2CellAlarmActDelay,
       "mscLpJT2CellScrambleCellPayload": mscLpJT2CellScrambleCellPayload,
       "mscLpJT2CellCorrectSingleBitHeaderErrors": mscLpJT2CellCorrectSingleBitHeaderErrors,
       "mscLpJT2CellOperTable": mscLpJT2CellOperTable,
       "mscLpJT2CellOperEntry": mscLpJT2CellOperEntry,
       "mscLpJT2CellLcdAlarm": mscLpJT2CellLcdAlarm,
       "mscLpJT2CellStatsTable": mscLpJT2CellStatsTable,
       "mscLpJT2CellStatsEntry": mscLpJT2CellStatsEntry,
       "mscLpJT2CellUncorrectableHecErrors": mscLpJT2CellUncorrectableHecErrors,
       "mscLpJT2CellSevErroredSec": mscLpJT2CellSevErroredSec,
       "mscLpJT2CellReceiveCellUtilization": mscLpJT2CellReceiveCellUtilization,
       "mscLpJT2CellTransmitCellUtilization": mscLpJT2CellTransmitCellUtilization,
       "mscLpJT2CellCorrectableHeaderErrors": mscLpJT2CellCorrectableHeaderErrors,
       "mscLpJT2CidDataTable": mscLpJT2CidDataTable,
       "mscLpJT2CidDataEntry": mscLpJT2CidDataEntry,
       "mscLpJT2CustomerIdentifier": mscLpJT2CustomerIdentifier,
       "mscLpJT2ProvTable": mscLpJT2ProvTable,
       "mscLpJT2ProvEntry": mscLpJT2ProvEntry,
       "mscLpJT2ClockingSource": mscLpJT2ClockingSource,
       "mscLpJT2LineLength": mscLpJT2LineLength,
       "mscLpJT2ApplicationFramerName": mscLpJT2ApplicationFramerName,
       "mscLpJT2IfEntryTable": mscLpJT2IfEntryTable,
       "mscLpJT2IfEntryEntry": mscLpJT2IfEntryEntry,
       "mscLpJT2IfAdminStatus": mscLpJT2IfAdminStatus,
       "mscLpJT2IfIndex": mscLpJT2IfIndex,
       "mscLpJT2OperStatusTable": mscLpJT2OperStatusTable,
       "mscLpJT2OperStatusEntry": mscLpJT2OperStatusEntry,
       "mscLpJT2SnmpOperStatus": mscLpJT2SnmpOperStatus,
       "mscLpJT2StateTable": mscLpJT2StateTable,
       "mscLpJT2StateEntry": mscLpJT2StateEntry,
       "mscLpJT2AdminState": mscLpJT2AdminState,
       "mscLpJT2OperationalState": mscLpJT2OperationalState,
       "mscLpJT2UsageState": mscLpJT2UsageState,
       "mscLpJT2AvailabilityStatus": mscLpJT2AvailabilityStatus,
       "mscLpJT2ProceduralStatus": mscLpJT2ProceduralStatus,
       "mscLpJT2ControlStatus": mscLpJT2ControlStatus,
       "mscLpJT2AlarmStatus": mscLpJT2AlarmStatus,
       "mscLpJT2StandbyStatus": mscLpJT2StandbyStatus,
       "mscLpJT2UnknownStatus": mscLpJT2UnknownStatus,
       "mscLpJT2OperTable": mscLpJT2OperTable,
       "mscLpJT2OperEntry": mscLpJT2OperEntry,
       "mscLpJT2LosAlarm": mscLpJT2LosAlarm,
       "mscLpJT2LofAlarm": mscLpJT2LofAlarm,
       "mscLpJT2RxAisPhysicalAlarm": mscLpJT2RxAisPhysicalAlarm,
       "mscLpJT2RxAisPayloadAlarm": mscLpJT2RxAisPayloadAlarm,
       "mscLpJT2RxRaiAlarm": mscLpJT2RxRaiAlarm,
       "mscLpJT2TxAisPhysicalAlarm": mscLpJT2TxAisPhysicalAlarm,
       "mscLpJT2TxRaiAlarm": mscLpJT2TxRaiAlarm,
       "mscLpJT2StatsTable": mscLpJT2StatsTable,
       "mscLpJT2StatsEntry": mscLpJT2StatsEntry,
       "mscLpJT2RunningTime": mscLpJT2RunningTime,
       "mscLpJT2ErrorFreeSec": mscLpJT2ErrorFreeSec,
       "mscLpJT2ErroredSec": mscLpJT2ErroredSec,
       "mscLpJT2SevErroredSec": mscLpJT2SevErroredSec,
       "mscLpJT2SevErroredFrmSec": mscLpJT2SevErroredFrmSec,
       "mscLpJT2UnavailSec": mscLpJT2UnavailSec,
       "mscLpJT2BpvErrors": mscLpJT2BpvErrors,
       "mscLpJT2CrcErrors": mscLpJT2CrcErrors,
       "mscLpJT2FrameErrors": mscLpJT2FrameErrors,
       "mscLpJT2LosStateChanges": mscLpJT2LosStateChanges,
       "mscLpJT2AdminInfoTable": mscLpJT2AdminInfoTable,
       "mscLpJT2AdminInfoEntry": mscLpJT2AdminInfoEntry,
       "mscLpJT2Vendor": mscLpJT2Vendor,
       "mscLpJT2CommentText": mscLpJT2CommentText,
       "mscLpHssi": mscLpHssi,
       "mscLpHssiRowStatusTable": mscLpHssiRowStatusTable,
       "mscLpHssiRowStatusEntry": mscLpHssiRowStatusEntry,
       "mscLpHssiRowStatus": mscLpHssiRowStatus,
       "mscLpHssiComponentName": mscLpHssiComponentName,
       "mscLpHssiStorageType": mscLpHssiStorageType,
       "mscLpHssiIndex": mscLpHssiIndex,
       "mscLpHssiTest": mscLpHssiTest,
       "mscLpHssiTestRowStatusTable": mscLpHssiTestRowStatusTable,
       "mscLpHssiTestRowStatusEntry": mscLpHssiTestRowStatusEntry,
       "mscLpHssiTestRowStatus": mscLpHssiTestRowStatus,
       "mscLpHssiTestComponentName": mscLpHssiTestComponentName,
       "mscLpHssiTestStorageType": mscLpHssiTestStorageType,
       "mscLpHssiTestIndex": mscLpHssiTestIndex,
       "mscLpHssiTestStateTable": mscLpHssiTestStateTable,
       "mscLpHssiTestStateEntry": mscLpHssiTestStateEntry,
       "mscLpHssiTestAdminState": mscLpHssiTestAdminState,
       "mscLpHssiTestOperationalState": mscLpHssiTestOperationalState,
       "mscLpHssiTestUsageState": mscLpHssiTestUsageState,
       "mscLpHssiTestSetupTable": mscLpHssiTestSetupTable,
       "mscLpHssiTestSetupEntry": mscLpHssiTestSetupEntry,
       "mscLpHssiTestPurpose": mscLpHssiTestPurpose,
       "mscLpHssiTestType": mscLpHssiTestType,
       "mscLpHssiTestFrmSize": mscLpHssiTestFrmSize,
       "mscLpHssiTestFrmPatternType": mscLpHssiTestFrmPatternType,
       "mscLpHssiTestCustomizedPattern": mscLpHssiTestCustomizedPattern,
       "mscLpHssiTestDataStartDelay": mscLpHssiTestDataStartDelay,
       "mscLpHssiTestDisplayInterval": mscLpHssiTestDisplayInterval,
       "mscLpHssiTestDuration": mscLpHssiTestDuration,
       "mscLpHssiTestResultsTable": mscLpHssiTestResultsTable,
       "mscLpHssiTestResultsEntry": mscLpHssiTestResultsEntry,
       "mscLpHssiTestElapsedTime": mscLpHssiTestElapsedTime,
       "mscLpHssiTestTimeRemaining": mscLpHssiTestTimeRemaining,
       "mscLpHssiTestCauseOfTermination": mscLpHssiTestCauseOfTermination,
       "mscLpHssiTestBitsTx": mscLpHssiTestBitsTx,
       "mscLpHssiTestBytesTx": mscLpHssiTestBytesTx,
       "mscLpHssiTestFrmTx": mscLpHssiTestFrmTx,
       "mscLpHssiTestBitsRx": mscLpHssiTestBitsRx,
       "mscLpHssiTestBytesRx": mscLpHssiTestBytesRx,
       "mscLpHssiTestFrmRx": mscLpHssiTestFrmRx,
       "mscLpHssiTestErroredFrmRx": mscLpHssiTestErroredFrmRx,
       "mscLpHssiTestBitErrorRate": mscLpHssiTestBitErrorRate,
       "mscLpHssiProvTable": mscLpHssiProvTable,
       "mscLpHssiProvEntry": mscLpHssiProvEntry,
       "mscLpHssiLinkMode": mscLpHssiLinkMode,
       "mscLpHssiReadyLineState": mscLpHssiReadyLineState,
       "mscLpHssiDataTransferLineState": mscLpHssiDataTransferLineState,
       "mscLpHssiLineSpeed": mscLpHssiLineSpeed,
       "mscLpHssiApplicationFramerName": mscLpHssiApplicationFramerName,
       "mscLpHssiCidDataTable": mscLpHssiCidDataTable,
       "mscLpHssiCidDataEntry": mscLpHssiCidDataEntry,
       "mscLpHssiCustomerIdentifier": mscLpHssiCustomerIdentifier,
       "mscLpHssiAdminInfoTable": mscLpHssiAdminInfoTable,
       "mscLpHssiAdminInfoEntry": mscLpHssiAdminInfoEntry,
       "mscLpHssiVendor": mscLpHssiVendor,
       "mscLpHssiCommentText": mscLpHssiCommentText,
       "mscLpHssiIfEntryTable": mscLpHssiIfEntryTable,
       "mscLpHssiIfEntryEntry": mscLpHssiIfEntryEntry,
       "mscLpHssiIfAdminStatus": mscLpHssiIfAdminStatus,
       "mscLpHssiIfIndex": mscLpHssiIfIndex,
       "mscLpHssiOperStatusTable": mscLpHssiOperStatusTable,
       "mscLpHssiOperStatusEntry": mscLpHssiOperStatusEntry,
       "mscLpHssiSnmpOperStatus": mscLpHssiSnmpOperStatus,
       "mscLpHssiStateTable": mscLpHssiStateTable,
       "mscLpHssiStateEntry": mscLpHssiStateEntry,
       "mscLpHssiAdminState": mscLpHssiAdminState,
       "mscLpHssiOperationalState": mscLpHssiOperationalState,
       "mscLpHssiUsageState": mscLpHssiUsageState,
       "mscLpHssiAvailabilityStatus": mscLpHssiAvailabilityStatus,
       "mscLpHssiProceduralStatus": mscLpHssiProceduralStatus,
       "mscLpHssiControlStatus": mscLpHssiControlStatus,
       "mscLpHssiAlarmStatus": mscLpHssiAlarmStatus,
       "mscLpHssiStandbyStatus": mscLpHssiStandbyStatus,
       "mscLpHssiUnknownStatus": mscLpHssiUnknownStatus,
       "mscLpHssiOperTable": mscLpHssiOperTable,
       "mscLpHssiOperEntry": mscLpHssiOperEntry,
       "mscLpHssiActualLinkMode": mscLpHssiActualLinkMode,
       "mscLpHssiLineState": mscLpHssiLineState,
       "mscLpHssiActualTxLineSpeed": mscLpHssiActualTxLineSpeed,
       "mscLpHssiActualRxLineSpeed": mscLpHssiActualRxLineSpeed,
       "mscLpHssiDataXferStateChanges": mscLpHssiDataXferStateChanges,
       "mscLpEng": mscLpEng,
       "mscLpEngRowStatusTable": mscLpEngRowStatusTable,
       "mscLpEngRowStatusEntry": mscLpEngRowStatusEntry,
       "mscLpEngRowStatus": mscLpEngRowStatus,
       "mscLpEngComponentName": mscLpEngComponentName,
       "mscLpEngStorageType": mscLpEngStorageType,
       "mscLpEngIndex": mscLpEngIndex,
       "mscLpEngDs": mscLpEngDs,
       "mscLpEngDsRowStatusTable": mscLpEngDsRowStatusTable,
       "mscLpEngDsRowStatusEntry": mscLpEngDsRowStatusEntry,
       "mscLpEngDsRowStatus": mscLpEngDsRowStatus,
       "mscLpEngDsComponentName": mscLpEngDsComponentName,
       "mscLpEngDsStorageType": mscLpEngDsStorageType,
       "mscLpEngDsIndex": mscLpEngDsIndex,
       "mscLpEngDsOv": mscLpEngDsOv,
       "mscLpEngDsOvRowStatusTable": mscLpEngDsOvRowStatusTable,
       "mscLpEngDsOvRowStatusEntry": mscLpEngDsOvRowStatusEntry,
       "mscLpEngDsOvRowStatus": mscLpEngDsOvRowStatus,
       "mscLpEngDsOvComponentName": mscLpEngDsOvComponentName,
       "mscLpEngDsOvStorageType": mscLpEngDsOvStorageType,
       "mscLpEngDsOvIndex": mscLpEngDsOvIndex,
       "mscLpEngDsOvProvTable": mscLpEngDsOvProvTable,
       "mscLpEngDsOvProvEntry": mscLpEngDsOvProvEntry,
       "mscLpEngDsOvAgentQueueSize": mscLpEngDsOvAgentQueueSize,
       "mscLpEngDsOperTable": mscLpEngDsOperTable,
       "mscLpEngDsOperEntry": mscLpEngDsOperEntry,
       "mscLpEngDsAgentQueueSize": mscLpEngDsAgentQueueSize,
       "mscLpProvTable": mscLpProvTable,
       "mscLpProvEntry": mscLpProvEntry,
       "mscLpMainCard": mscLpMainCard,
       "mscLpSpareCard": mscLpSpareCard,
       "mscLpLogicalProcessorType": mscLpLogicalProcessorType,
       "mscLpCidDataTable": mscLpCidDataTable,
       "mscLpCidDataEntry": mscLpCidDataEntry,
       "mscLpCustomerIdentifier": mscLpCustomerIdentifier,
       "mscLpStateTable": mscLpStateTable,
       "mscLpStateEntry": mscLpStateEntry,
       "mscLpAdminState": mscLpAdminState,
       "mscLpOperationalState": mscLpOperationalState,
       "mscLpUsageState": mscLpUsageState,
       "mscLpAvailabilityStatus": mscLpAvailabilityStatus,
       "mscLpProceduralStatus": mscLpProceduralStatus,
       "mscLpControlStatus": mscLpControlStatus,
       "mscLpAlarmStatus": mscLpAlarmStatus,
       "mscLpStandbyStatus": mscLpStandbyStatus,
       "mscLpUnknownStatus": mscLpUnknownStatus,
       "mscLpOperTable": mscLpOperTable,
       "mscLpOperEntry": mscLpOperEntry,
       "mscLpActiveCard": mscLpActiveCard,
       "mscLpMainCardStatus": mscLpMainCardStatus,
       "mscLpSpareCardStatus": mscLpSpareCardStatus,
       "mscLpRestartOnCpSwitch": mscLpRestartOnCpSwitch,
       "mscLpScheduledSwitchover": mscLpScheduledSwitchover,
       "mscLpUtilTable": mscLpUtilTable,
       "mscLpUtilEntry": mscLpUtilEntry,
       "mscLpTimeInterval": mscLpTimeInterval,
       "mscLpCpuUtil": mscLpCpuUtil,
       "mscLpCpuUtilAvg": mscLpCpuUtilAvg,
       "mscLpCpuUtilAvgMin": mscLpCpuUtilAvgMin,
       "mscLpCpuUtilAvgMax": mscLpCpuUtilAvgMax,
       "mscLpMsgBlockUsage": mscLpMsgBlockUsage,
       "mscLpMsgBlockUsageAvg": mscLpMsgBlockUsageAvg,
       "mscLpMsgBlockUsageAvgMin": mscLpMsgBlockUsageAvgMin,
       "mscLpMsgBlockUsageAvgMax": mscLpMsgBlockUsageAvgMax,
       "mscLpLocalMsgBlockUsage": mscLpLocalMsgBlockUsage,
       "mscLpLocalMsgBlockUsageAvg": mscLpLocalMsgBlockUsageAvg,
       "mscLpLocalMsgBlockUsageMin": mscLpLocalMsgBlockUsageMin,
       "mscLpLocalMsgBlockUsageMax": mscLpLocalMsgBlockUsageMax,
       "mscLpCapTable": mscLpCapTable,
       "mscLpCapEntry": mscLpCapEntry,
       "mscLpMsgBlockCapacity": mscLpMsgBlockCapacity,
       "mscLpLocalMsgBlockCapacity": mscLpLocalMsgBlockCapacity,
       "mscLpLinkToApplicationsTable": mscLpLinkToApplicationsTable,
       "mscLpLinkToApplicationsEntry": mscLpLinkToApplicationsEntry,
       "mscLpLinkToApplicationsValue": mscLpLinkToApplicationsValue,
       "mscLpMemoryCapacityTable": mscLpMemoryCapacityTable,
       "mscLpMemoryCapacityEntry": mscLpMemoryCapacityEntry,
       "mscLpMemoryCapacityIndex": mscLpMemoryCapacityIndex,
       "mscLpMemoryCapacityValue": mscLpMemoryCapacityValue,
       "mscLpMemoryUsageTable": mscLpMemoryUsageTable,
       "mscLpMemoryUsageEntry": mscLpMemoryUsageEntry,
       "mscLpMemoryUsageIndex": mscLpMemoryUsageIndex,
       "mscLpMemoryUsageValue": mscLpMemoryUsageValue,
       "mscLpMemoryUsageAvgTable": mscLpMemoryUsageAvgTable,
       "mscLpMemoryUsageAvgEntry": mscLpMemoryUsageAvgEntry,
       "mscLpMemoryUsageAvgIndex": mscLpMemoryUsageAvgIndex,
       "mscLpMemoryUsageAvgValue": mscLpMemoryUsageAvgValue,
       "mscLpMemoryUsageAvgMinTable": mscLpMemoryUsageAvgMinTable,
       "mscLpMemoryUsageAvgMinEntry": mscLpMemoryUsageAvgMinEntry,
       "mscLpMemoryUsageAvgMinIndex": mscLpMemoryUsageAvgMinIndex,
       "mscLpMemoryUsageAvgMinValue": mscLpMemoryUsageAvgMinValue,
       "mscLpMemoryUsageAvgMaxTable": mscLpMemoryUsageAvgMaxTable,
       "mscLpMemoryUsageAvgMaxEntry": mscLpMemoryUsageAvgMaxEntry,
       "mscLpMemoryUsageAvgMaxIndex": mscLpMemoryUsageAvgMaxIndex,
       "mscLpMemoryUsageAvgMaxValue": mscLpMemoryUsageAvgMaxValue,
       "logicalProcessorMIB": logicalProcessorMIB,
       "logicalProcessorGroup": logicalProcessorGroup,
       "logicalProcessorGroupCA": logicalProcessorGroupCA,
       "logicalProcessorGroupCA02": logicalProcessorGroupCA02,
       "logicalProcessorGroupCA02A": logicalProcessorGroupCA02A,
       "logicalProcessorCapabilities": logicalProcessorCapabilities,
       "logicalProcessorCapabilitiesCA": logicalProcessorCapabilitiesCA,
       "logicalProcessorCapabilitiesCA02": logicalProcessorCapabilitiesCA02,
       "logicalProcessorCapabilitiesCA02A": logicalProcessorCapabilitiesCA02A}
)

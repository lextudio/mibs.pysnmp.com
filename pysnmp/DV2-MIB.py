# SNMP MIB module (DV2-MIB) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file:///Users/lextm/pysnmp.com/mibs.pysnmp.com/asn1/DV2-MIB
# Produced by pysmi-1.5.4 at Mon Oct 14 21:33:49 2024
# On host MacBook-Pro.local platform Darwin version 24.0.0 by user lextm
# Using Python version 3.12.0 (main, Nov 14 2023, 23:52:11) [Clang 15.0.0 (clang-1500.0.40.1)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint,
 ConstraintsUnion) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint",
    "ConstraintsUnion")

# Import SMI symbols from the MIBs this MIB depends on

(ModuleCompliance,
 NotificationGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup")

(Bits,
 Counter32,
 Counter64,
 Gauge32,
 Integer32,
 IpAddress,
 ModuleIdentity,
 MibIdentifier,
 NotificationType,
 ObjectIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 NotificationType,
 TimeTicks,
 Unsigned32,
 enterprises,
 iso) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Bits",
    "Counter32",
    "Counter64",
    "Gauge32",
    "Integer32",
    "IpAddress",
    "ModuleIdentity",
    "MibIdentifier",
    "NotificationType",
    "ObjectIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "NotificationType",
    "TimeTicks",
    "Unsigned32",
    "enterprises",
    "iso")

(DisplayString,
 PhysAddress,
 TextualConvention) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "DisplayString",
    "PhysAddress",
    "TextualConvention")


# MODULE-IDENTITY


# Types definitions



class VirtualCircuitIdentifier(Integer32):
    """Custom type VirtualCircuitIdentifier based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )





class VirtualPathIdentifier(Integer32):
    """Custom type VirtualPathIdentifier based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )





class E164(OctetString):
    """Custom type E164 based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 10),
    )





class E164SUB(OctetString):
    """Custom type E164SUB based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(2, 22),
    )





class Q93bCauseDiag(OctetString):
    """Custom type Q93bCauseDiag based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(4, 4),
    )





class Hex(Integer32):
    """Custom type Hex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )





class DateTimeString(OctetString):
    """Custom type DateTimeString based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )





class DateAndTime(DateTimeString):
    """Custom type DateAndTime based on DateTimeString"""



# TEXTUAL-CONVENTIONS



# MIB Managed Objects in the order of their OIDs

_Netcomm_ObjectIdentity = ObjectIdentity
netcomm = _Netcomm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251)
)
_Products_ObjectIdentity = ObjectIdentity
products = _Products_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1)
)
_Dv2_ObjectIdentity = ObjectIdentity
dv2 = _Dv2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1)
)
_Dv2System_ObjectIdentity = ObjectIdentity
dv2System = _Dv2System_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1)
)
_SysMemEnd_Type = Hex
_SysMemEnd_Object = MibScalar
sysMemEnd = _SysMemEnd_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 1),
    _SysMemEnd_Type()
)
sysMemEnd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysMemEnd.setStatus("mandatory")
_SysInitialMemB_Type = Integer32
_SysInitialMemB_Object = MibScalar
sysInitialMemB = _SysInitialMemB_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 4),
    _SysInitialMemB_Type()
)
sysInitialMemB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysInitialMemB.setStatus("mandatory")
_SysCurrentMemB_Type = Integer32
_SysCurrentMemB_Object = MibScalar
sysCurrentMemB = _SysCurrentMemB_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 5),
    _SysCurrentMemB_Type()
)
sysCurrentMemB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCurrentMemB.setStatus("mandatory")
_SysInitialSema_Type = Integer32
_SysInitialSema_Object = MibScalar
sysInitialSema = _SysInitialSema_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 6),
    _SysInitialSema_Type()
)
sysInitialSema.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysInitialSema.setStatus("mandatory")
_SysCurrentSema_Type = Integer32
_SysCurrentSema_Object = MibScalar
sysCurrentSema = _SysCurrentSema_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 7),
    _SysCurrentSema_Type()
)
sysCurrentSema.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCurrentSema.setStatus("mandatory")
_SysInitialQItems_Type = Integer32
_SysInitialQItems_Object = MibScalar
sysInitialQItems = _SysInitialQItems_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 8),
    _SysInitialQItems_Type()
)
sysInitialQItems.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysInitialQItems.setStatus("mandatory")
_SysCurrentQItems_Type = Integer32
_SysCurrentQItems_Object = MibScalar
sysCurrentQItems = _SysCurrentQItems_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 9),
    _SysCurrentQItems_Type()
)
sysCurrentQItems.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCurrentQItems.setStatus("mandatory")
_SysInitialQs_Type = Integer32
_SysInitialQs_Object = MibScalar
sysInitialQs = _SysInitialQs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 10),
    _SysInitialQs_Type()
)
sysInitialQs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysInitialQs.setStatus("mandatory")
_SysCurrentQs_Type = Integer32
_SysCurrentQs_Object = MibScalar
sysCurrentQs = _SysCurrentQs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 11),
    _SysCurrentQs_Type()
)
sysCurrentQs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCurrentQs.setStatus("mandatory")
_SysInitialPorts_Type = Integer32
_SysInitialPorts_Object = MibScalar
sysInitialPorts = _SysInitialPorts_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 12),
    _SysInitialPorts_Type()
)
sysInitialPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysInitialPorts.setStatus("mandatory")
_SysCurrentPorts_Type = Integer32
_SysCurrentPorts_Object = MibScalar
sysCurrentPorts = _SysCurrentPorts_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 13),
    _SysCurrentPorts_Type()
)
sysCurrentPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCurrentPorts.setStatus("mandatory")


class _SysDefaultCellMode_Type(Integer32):
    """Custom type sysDefaultCellMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_SysDefaultCellMode_Type.__name__ = "Integer32"
_SysDefaultCellMode_Object = MibScalar
sysDefaultCellMode = _SysDefaultCellMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 14),
    _SysDefaultCellMode_Type()
)
sysDefaultCellMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysDefaultCellMode.setStatus("mandatory")
_SysLinkTable_Object = MibTable
sysLinkTable = _SysLinkTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15)
)
if mibBuilder.loadTexts:
    sysLinkTable.setStatus("mandatory")
_SysLinkEntry_Object = MibTableRow
sysLinkEntry = _SysLinkEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1)
)
sysLinkEntry.setIndexNames(
    (0, "DV2-MIB", "sysLkLinkNo"),
)
if mibBuilder.loadTexts:
    sysLinkEntry.setStatus("mandatory")


class _SysLkLinkNo_Type(Integer32):
    """Custom type sysLkLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_SysLkLinkNo_Type.__name__ = "Integer32"
_SysLkLinkNo_Object = MibTableColumn
sysLkLinkNo = _SysLkLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 1),
    _SysLkLinkNo_Type()
)
sysLkLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysLkLinkNo.setStatus("mandatory")


class _SysLkKillLink_Type(Integer32):
    """Custom type sysLkKillLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("restart", 2))
    )


_SysLkKillLink_Type.__name__ = "Integer32"
_SysLkKillLink_Object = MibTableColumn
sysLkKillLink = _SysLkKillLink_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 2),
    _SysLkKillLink_Type()
)
sysLkKillLink.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysLkKillLink.setStatus("mandatory")


class _SysLkState_Type(Integer32):
    """Custom type sysLkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("stop", 3),
          ("up", 1))
    )


_SysLkState_Type.__name__ = "Integer32"
_SysLkState_Object = MibTableColumn
sysLkState = _SysLkState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 3),
    _SysLkState_Type()
)
sysLkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysLkState.setStatus("mandatory")
_SysLkTxCells_Type = Counter32
_SysLkTxCells_Object = MibTableColumn
sysLkTxCells = _SysLkTxCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 4),
    _SysLkTxCells_Type()
)
sysLkTxCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysLkTxCells.setStatus("mandatory")
_SysLkRxCells_Type = Counter32
_SysLkRxCells_Object = MibTableColumn
sysLkRxCells = _SysLkRxCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 5),
    _SysLkRxCells_Type()
)
sysLkRxCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysLkRxCells.setStatus("mandatory")
_SysLkTxRate_Type = Gauge32
_SysLkTxRate_Object = MibTableColumn
sysLkTxRate = _SysLkTxRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 6),
    _SysLkTxRate_Type()
)
sysLkTxRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysLkTxRate.setStatus("mandatory")
_SysLkRxRate_Type = Gauge32
_SysLkRxRate_Object = MibTableColumn
sysLkRxRate = _SysLkRxRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 7),
    _SysLkRxRate_Type()
)
sysLkRxRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysLkRxRate.setStatus("mandatory")
_SysLkTxMaxRate_Type = Gauge32
_SysLkTxMaxRate_Object = MibTableColumn
sysLkTxMaxRate = _SysLkTxMaxRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 8),
    _SysLkTxMaxRate_Type()
)
sysLkTxMaxRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysLkTxMaxRate.setStatus("mandatory")
_SysLkRxMaxRate_Type = Gauge32
_SysLkRxMaxRate_Object = MibTableColumn
sysLkRxMaxRate = _SysLkRxMaxRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 9),
    _SysLkRxMaxRate_Type()
)
sysLkRxMaxRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysLkRxMaxRate.setStatus("mandatory")


class _SysLkResetStats_Type(Integer32):
    """Custom type sysLkResetStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_SysLkResetStats_Type.__name__ = "Integer32"
_SysLkResetStats_Object = MibTableColumn
sysLkResetStats = _SysLkResetStats_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 10),
    _SysLkResetStats_Type()
)
sysLkResetStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysLkResetStats.setStatus("mandatory")


class _SysLkClockSrc_Type(Integer32):
    """Custom type sysLkClockSrc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("high-quality", 3),
          ("local", 5),
          ("loop-timed", 4),
          ("low-quality", 2),
          ("normal", 1))
    )


_SysLkClockSrc_Type.__name__ = "Integer32"
_SysLkClockSrc_Object = MibTableColumn
sysLkClockSrc = _SysLkClockSrc_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 11),
    _SysLkClockSrc_Type()
)
sysLkClockSrc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysLkClockSrc.setStatus("mandatory")


class _SysLkResetResrc_Type(Integer32):
    """Custom type sysLkResetResrc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_SysLkResetResrc_Type.__name__ = "Integer32"
_SysLkResetResrc_Object = MibTableColumn
sysLkResetResrc = _SysLkResetResrc_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 12),
    _SysLkResetResrc_Type()
)
sysLkResetResrc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysLkResetResrc.setStatus("mandatory")


class _SysLKEgCLPThreshold_Type(Integer32):
    """Custom type sysLKEgCLPThreshold based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_SysLKEgCLPThreshold_Type.__name__ = "Integer32"
_SysLKEgCLPThreshold_Object = MibTableColumn
sysLKEgCLPThreshold = _SysLKEgCLPThreshold_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 13),
    _SysLKEgCLPThreshold_Type()
)
sysLKEgCLPThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysLKEgCLPThreshold.setStatus("mandatory")


class _SysLKIgCLPThreshold_Type(Integer32):
    """Custom type sysLKIgCLPThreshold based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_SysLKIgCLPThreshold_Type.__name__ = "Integer32"
_SysLKIgCLPThreshold_Object = MibTableColumn
sysLKIgCLPThreshold = _SysLKIgCLPThreshold_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 14),
    _SysLKIgCLPThreshold_Type()
)
sysLKIgCLPThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysLKIgCLPThreshold.setStatus("mandatory")


class _SysLKEgEFCIThreshold_Type(Integer32):
    """Custom type sysLKEgEFCIThreshold based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_SysLKEgEFCIThreshold_Type.__name__ = "Integer32"
_SysLKEgEFCIThreshold_Object = MibTableColumn
sysLKEgEFCIThreshold = _SysLKEgEFCIThreshold_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 15),
    _SysLKEgEFCIThreshold_Type()
)
sysLKEgEFCIThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysLKEgEFCIThreshold.setStatus("mandatory")


class _SysLKIgEFCIThreshold_Type(Integer32):
    """Custom type sysLKIgEFCIThreshold based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_SysLKIgEFCIThreshold_Type.__name__ = "Integer32"
_SysLKIgEFCIThreshold_Object = MibTableColumn
sysLKIgEFCIThreshold = _SysLKIgEFCIThreshold_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 16),
    _SysLKIgEFCIThreshold_Type()
)
sysLKIgEFCIThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysLKIgEFCIThreshold.setStatus("mandatory")


class _SysLKEgLogBuffer_Type(Integer32):
    """Custom type sysLKEgLogBuffer based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_SysLKEgLogBuffer_Type.__name__ = "Integer32"
_SysLKEgLogBuffer_Object = MibTableColumn
sysLKEgLogBuffer = _SysLKEgLogBuffer_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 17),
    _SysLKEgLogBuffer_Type()
)
sysLKEgLogBuffer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysLKEgLogBuffer.setStatus("mandatory")


class _SysLKIgLogBuffer_Type(Integer32):
    """Custom type sysLKIgLogBuffer based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_SysLKIgLogBuffer_Type.__name__ = "Integer32"
_SysLKIgLogBuffer_Object = MibTableColumn
sysLKIgLogBuffer = _SysLKIgLogBuffer_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 18),
    _SysLKIgLogBuffer_Type()
)
sysLKIgLogBuffer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysLKIgLogBuffer.setStatus("mandatory")
_SysLKEgFIFODepth_Type = Integer32
_SysLKEgFIFODepth_Object = MibTableColumn
sysLKEgFIFODepth = _SysLKEgFIFODepth_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 19),
    _SysLKEgFIFODepth_Type()
)
sysLKEgFIFODepth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysLKEgFIFODepth.setStatus("mandatory")
_SysLKIgFIFODepth_Type = Integer32
_SysLKIgFIFODepth_Object = MibTableColumn
sysLKIgFIFODepth = _SysLKIgFIFODepth_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 20),
    _SysLKIgFIFODepth_Type()
)
sysLKIgFIFODepth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysLKIgFIFODepth.setStatus("mandatory")


class _SysLKEgMemBlockId_Type(Integer32):
    """Custom type sysLKEgMemBlockId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              16,
              63)
        )
    )
    namedValues = NamedValues(
        *(("mem-16k", 16),
          ("mem-4k", 4),
          ("mem-64k", 63))
    )


_SysLKEgMemBlockId_Type.__name__ = "Integer32"
_SysLKEgMemBlockId_Object = MibTableColumn
sysLKEgMemBlockId = _SysLKEgMemBlockId_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 21),
    _SysLKEgMemBlockId_Type()
)
sysLKEgMemBlockId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysLKEgMemBlockId.setStatus("mandatory")


class _SysLKIgMemBlockId_Type(Integer32):
    """Custom type sysLKIgMemBlockId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              16,
              63)
        )
    )
    namedValues = NamedValues(
        *(("mem-16k", 16),
          ("mem-4k", 4),
          ("mem-64k", 63))
    )


_SysLKIgMemBlockId_Type.__name__ = "Integer32"
_SysLKIgMemBlockId_Object = MibTableColumn
sysLKIgMemBlockId = _SysLKIgMemBlockId_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 15, 1, 22),
    _SysLKIgMemBlockId_Type()
)
sysLKIgMemBlockId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysLKIgMemBlockId.setStatus("mandatory")
_SysDbTable_Object = MibTable
sysDbTable = _SysDbTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 16)
)
if mibBuilder.loadTexts:
    sysDbTable.setStatus("mandatory")
_SysDbEntry_Object = MibTableRow
sysDbEntry = _SysDbEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 16, 1)
)
sysDbEntry.setIndexNames(
    (0, "DV2-MIB", "sysDbIndex"),
)
if mibBuilder.loadTexts:
    sysDbEntry.setStatus("mandatory")


class _SysDbIndex_Type(Integer32):
    """Custom type sysDbIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_SysDbIndex_Type.__name__ = "Integer32"
_SysDbIndex_Object = MibTableColumn
sysDbIndex = _SysDbIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 16, 1, 1),
    _SysDbIndex_Type()
)
sysDbIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysDbIndex.setStatus("mandatory")


class _SysDbSize_Type(Integer32):
    """Custom type sysDbSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              16,
              48,
              128,
              368,
              1600)
        )
    )
    namedValues = NamedValues(
        *(("buff128", 128),
          ("buff16", 16),
          ("buff1600", 1600),
          ("buff368", 368),
          ("cells", 48),
          ("ip-quota", 2),
          ("signal-quota", 1))
    )


_SysDbSize_Type.__name__ = "Integer32"
_SysDbSize_Object = MibTableColumn
sysDbSize = _SysDbSize_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 16, 1, 2),
    _SysDbSize_Type()
)
sysDbSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysDbSize.setStatus("mandatory")
_SysDbInitial_Type = Integer32
_SysDbInitial_Object = MibTableColumn
sysDbInitial = _SysDbInitial_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 16, 1, 3),
    _SysDbInitial_Type()
)
sysDbInitial.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysDbInitial.setStatus("mandatory")
_SysDbCurrent_Type = Integer32
_SysDbCurrent_Object = MibTableColumn
sysDbCurrent = _SysDbCurrent_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 16, 1, 4),
    _SysDbCurrent_Type()
)
sysDbCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysDbCurrent.setStatus("mandatory")
_SysAuthenticateTable_Object = MibTable
sysAuthenticateTable = _SysAuthenticateTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17)
)
if mibBuilder.loadTexts:
    sysAuthenticateTable.setStatus("mandatory")
_SysAuthenticateEntry_Object = MibTableRow
sysAuthenticateEntry = _SysAuthenticateEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17, 1)
)
sysAuthenticateEntry.setIndexNames(
    (0, "DV2-MIB", "sysAuIndex"),
)
if mibBuilder.loadTexts:
    sysAuthenticateEntry.setStatus("mandatory")


class _SysAuIndex_Type(Integer32):
    """Custom type sysAuIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_SysAuIndex_Type.__name__ = "Integer32"
_SysAuIndex_Object = MibTableColumn
sysAuIndex = _SysAuIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17, 1, 1),
    _SysAuIndex_Type()
)
sysAuIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysAuIndex.setStatus("mandatory")
_SysAuIpaddress_Type = IpAddress
_SysAuIpaddress_Object = MibTableColumn
sysAuIpaddress = _SysAuIpaddress_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17, 1, 2),
    _SysAuIpaddress_Type()
)
sysAuIpaddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysAuIpaddress.setStatus("mandatory")
_SysAuCommunity_Type = DisplayString
_SysAuCommunity_Object = MibTableColumn
sysAuCommunity = _SysAuCommunity_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17, 1, 3),
    _SysAuCommunity_Type()
)
sysAuCommunity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysAuCommunity.setStatus("mandatory")


class _SysAuAccess_Type(Integer32):
    """Custom type sysAuAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("readOnly", 1),
          ("readWrite", 3))
    )


_SysAuAccess_Type.__name__ = "Integer32"
_SysAuAccess_Object = MibTableColumn
sysAuAccess = _SysAuAccess_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17, 1, 4),
    _SysAuAccess_Type()
)
sysAuAccess.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysAuAccess.setStatus("mandatory")


class _SysAuSendTraps_Type(Integer32):
    """Custom type sysAuSendTraps based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("send-all", 1),
          ("send-none", 2))
    )


_SysAuSendTraps_Type.__name__ = "Integer32"
_SysAuSendTraps_Object = MibTableColumn
sysAuSendTraps = _SysAuSendTraps_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17, 1, 5),
    _SysAuSendTraps_Type()
)
sysAuSendTraps.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysAuSendTraps.setStatus("mandatory")


class _SysAuValidity_Type(Integer32):
    """Custom type sysAuValidity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_SysAuValidity_Type.__name__ = "Integer32"
_SysAuValidity_Object = MibTableColumn
sysAuValidity = _SysAuValidity_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 17, 1, 6),
    _SysAuValidity_Type()
)
sysAuValidity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysAuValidity.setStatus("mandatory")


class _SysLastTrapMessage_Type(DisplayString):
    """Custom type sysLastTrapMessage based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 70),
    )


_SysLastTrapMessage_Type.__name__ = "DisplayString"
_SysLastTrapMessage_Object = MibScalar
sysLastTrapMessage = _SysLastTrapMessage_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 18),
    _SysLastTrapMessage_Type()
)
sysLastTrapMessage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysLastTrapMessage.setStatus("mandatory")


class _SysConfigChanged_Type(Integer32):
    """Custom type sysConfigChanged based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_SysConfigChanged_Type.__name__ = "Integer32"
_SysConfigChanged_Object = MibScalar
sysConfigChanged = _SysConfigChanged_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 19),
    _SysConfigChanged_Type()
)
sysConfigChanged.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysConfigChanged.setStatus("mandatory")


class _SysConfigFile_Type(Integer32):
    """Custom type sysConfigFile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no-action", 1),
          ("read", 2),
          ("write", 3))
    )


_SysConfigFile_Type.__name__ = "Integer32"
_SysConfigFile_Object = MibScalar
sysConfigFile = _SysConfigFile_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 20),
    _SysConfigFile_Type()
)
sysConfigFile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysConfigFile.setStatus("mandatory")
_SysCompileTime_Type = DisplayString
_SysCompileTime_Object = MibScalar
sysCompileTime = _SysCompileTime_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 21),
    _SysCompileTime_Type()
)
sysCompileTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysCompileTime.setStatus("mandatory")


class _SlotNumber_Type(Integer32):
    """Custom type slotNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_SlotNumber_Type.__name__ = "Integer32"
_SlotNumber_Object = MibScalar
slotNumber = _SlotNumber_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 22),
    _SlotNumber_Type()
)
slotNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotNumber.setStatus("mandatory")
_SysLastResetTimeM2_Type = DateAndTime
_SysLastResetTimeM2_Object = MibScalar
sysLastResetTimeM2 = _SysLastResetTimeM2_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 23),
    _SysLastResetTimeM2_Type()
)
sysLastResetTimeM2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysLastResetTimeM2.setStatus("mandatory")
_SysCurrentTimeM2_Type = DateAndTime
_SysCurrentTimeM2_Object = MibScalar
sysCurrentTimeM2 = _SysCurrentTimeM2_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 24),
    _SysCurrentTimeM2_Type()
)
sysCurrentTimeM2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysCurrentTimeM2.setStatus("mandatory")


class _LimTypeStatus_Type(Integer32):
    """Custom type limTypeStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("compatible", 2),
          ("not-compatible", 3),
          ("unknown", 1))
    )


_LimTypeStatus_Type.__name__ = "Integer32"
_LimTypeStatus_Object = MibScalar
limTypeStatus = _LimTypeStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 1, 25),
    _LimTypeStatus_Type()
)
limTypeStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    limTypeStatus.setStatus("mandatory")
_Dv2Slot0_ObjectIdentity = ObjectIdentity
dv2Slot0 = _Dv2Slot0_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2)
)
_Slot0IntIp_Type = IpAddress
_Slot0IntIp_Object = MibScalar
slot0IntIp = _Slot0IntIp_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 1),
    _Slot0IntIp_Type()
)
slot0IntIp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0IntIp.setStatus("mandatory")


class _Slot0XpInUse_Type(Integer32):
    """Custom type slot0XpInUse based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("main-in-service", 1),
          ("standby-in-service", 2),
          ("unknown", 3))
    )


_Slot0XpInUse_Type.__name__ = "Integer32"
_Slot0XpInUse_Object = MibScalar
slot0XpInUse = _Slot0XpInUse_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 2),
    _Slot0XpInUse_Type()
)
slot0XpInUse.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0XpInUse.setStatus("mandatory")


class _Slot0XpToUse_Type(Integer32):
    """Custom type slot0XpToUse based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("auto", 3),
          ("main", 1),
          ("not-applicable", 4),
          ("standby", 2))
    )


_Slot0XpToUse_Type.__name__ = "Integer32"
_Slot0XpToUse_Object = MibScalar
slot0XpToUse = _Slot0XpToUse_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 3),
    _Slot0XpToUse_Type()
)
slot0XpToUse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slot0XpToUse.setStatus("mandatory")


class _Slot0StandbyXp_Type(Integer32):
    """Custom type slot0StandbyXp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Slot0StandbyXp_Type.__name__ = "Integer32"
_Slot0StandbyXp_Object = MibScalar
slot0StandbyXp = _Slot0StandbyXp_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 4),
    _Slot0StandbyXp_Type()
)
slot0StandbyXp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slot0StandbyXp.setStatus("mandatory")
_Slot0PsuTable_Object = MibTable
slot0PsuTable = _Slot0PsuTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5)
)
if mibBuilder.loadTexts:
    slot0PsuTable.setStatus("mandatory")
_Slot0PsuEntry_Object = MibTableRow
slot0PsuEntry = _Slot0PsuEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1)
)
slot0PsuEntry.setIndexNames(
    (0, "DV2-MIB", "slot0PsuIndex"),
)
if mibBuilder.loadTexts:
    slot0PsuEntry.setStatus("mandatory")


class _Slot0PsuIndex_Type(Integer32):
    """Custom type slot0PsuIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_Slot0PsuIndex_Type.__name__ = "Integer32"
_Slot0PsuIndex_Object = MibTableColumn
slot0PsuIndex = _Slot0PsuIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 1),
    _Slot0PsuIndex_Type()
)
slot0PsuIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PsuIndex.setStatus("mandatory")


class _Slot0PsuFault_Type(Integer32):
    """Custom type slot0PsuFault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("absent", 3),
          ("fault", 2),
          ("ok", 1))
    )


_Slot0PsuFault_Type.__name__ = "Integer32"
_Slot0PsuFault_Object = MibTableColumn
slot0PsuFault = _Slot0PsuFault_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 2),
    _Slot0PsuFault_Type()
)
slot0PsuFault.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PsuFault.setStatus("mandatory")


class _Slot0PsuTestFault_Type(Integer32):
    """Custom type slot0PsuTestFault based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("not-applicable", 3),
          ("yes", 2))
    )


_Slot0PsuTestFault_Type.__name__ = "Integer32"
_Slot0PsuTestFault_Object = MibTableColumn
slot0PsuTestFault = _Slot0PsuTestFault_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 3),
    _Slot0PsuTestFault_Type()
)
slot0PsuTestFault.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PsuTestFault.setStatus("mandatory")
_Slot0PsuVoltage_Type = Integer32
_Slot0PsuVoltage_Object = MibTableColumn
slot0PsuVoltage = _Slot0PsuVoltage_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 4),
    _Slot0PsuVoltage_Type()
)
slot0PsuVoltage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PsuVoltage.setStatus("mandatory")
_Slot0PsuTemp_Type = Integer32
_Slot0PsuTemp_Object = MibTableColumn
slot0PsuTemp = _Slot0PsuTemp_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 5),
    _Slot0PsuTemp_Type()
)
slot0PsuTemp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PsuTemp.setStatus("mandatory")
_Slot0PsuFanASpeed_Type = Integer32
_Slot0PsuFanASpeed_Object = MibTableColumn
slot0PsuFanASpeed = _Slot0PsuFanASpeed_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 6),
    _Slot0PsuFanASpeed_Type()
)
slot0PsuFanASpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PsuFanASpeed.setStatus("mandatory")
_Slot0PsuFanBSpeed_Type = Integer32
_Slot0PsuFanBSpeed_Object = MibTableColumn
slot0PsuFanBSpeed = _Slot0PsuFanBSpeed_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 7),
    _Slot0PsuFanBSpeed_Type()
)
slot0PsuFanBSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PsuFanBSpeed.setStatus("mandatory")
_Slot0PsuFanCSpeed_Type = Integer32
_Slot0PsuFanCSpeed_Object = MibTableColumn
slot0PsuFanCSpeed = _Slot0PsuFanCSpeed_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 8),
    _Slot0PsuFanCSpeed_Type()
)
slot0PsuFanCSpeed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PsuFanCSpeed.setStatus("mandatory")


class _Slot0PsuReset_Type(Integer32):
    """Custom type slot0PsuReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("not-applicable", 3),
          ("yes", 2))
    )


_Slot0PsuReset_Type.__name__ = "Integer32"
_Slot0PsuReset_Object = MibTableColumn
slot0PsuReset = _Slot0PsuReset_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 9),
    _Slot0PsuReset_Type()
)
slot0PsuReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slot0PsuReset.setStatus("mandatory")


class _Slot0PsuType_Type(Integer32):
    """Custom type slot0PsuType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("v1-ATM-SWITCH", 1),
          ("v2-ATM-SWITCH", 2),
          ("v3-ATM-SWITCH", 3),
          ("v4-ATM-SWITCH", 4),
          ("v5-ATM-SWITCH", 5))
    )


_Slot0PsuType_Type.__name__ = "Integer32"
_Slot0PsuType_Object = MibTableColumn
slot0PsuType = _Slot0PsuType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 10),
    _Slot0PsuType_Type()
)
slot0PsuType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PsuType.setStatus("mandatory")


class _Slot0PsuFanFail_Type(Integer32):
    """Custom type slot0PsuFanFail based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Slot0PsuFanFail_Type.__name__ = "Integer32"
_Slot0PsuFanFail_Object = MibTableColumn
slot0PsuFanFail = _Slot0PsuFanFail_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 11),
    _Slot0PsuFanFail_Type()
)
slot0PsuFanFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PsuFanFail.setStatus("mandatory")


class _Slot0PsuTooHot_Type(Integer32):
    """Custom type slot0PsuTooHot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("not-applicable", 3),
          ("yes", 2))
    )


_Slot0PsuTooHot_Type.__name__ = "Integer32"
_Slot0PsuTooHot_Object = MibTableColumn
slot0PsuTooHot = _Slot0PsuTooHot_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 12),
    _Slot0PsuTooHot_Type()
)
slot0PsuTooHot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PsuTooHot.setStatus("mandatory")


class _Slot0PsuFrontTooHot_Type(Integer32):
    """Custom type slot0PsuFrontTooHot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("not-applicable", 3),
          ("yes", 2))
    )


_Slot0PsuFrontTooHot_Type.__name__ = "Integer32"
_Slot0PsuFrontTooHot_Object = MibTableColumn
slot0PsuFrontTooHot = _Slot0PsuFrontTooHot_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 5, 1, 13),
    _Slot0PsuFrontTooHot_Type()
)
slot0PsuFrontTooHot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PsuFrontTooHot.setStatus("mandatory")
_Slot0PhyTable_Object = MibTable
slot0PhyTable = _Slot0PhyTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6)
)
if mibBuilder.loadTexts:
    slot0PhyTable.setStatus("mandatory")
_Slot0PhyEntry_Object = MibTableRow
slot0PhyEntry = _Slot0PhyEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1)
)
slot0PhyEntry.setIndexNames(
    (0, "DV2-MIB", "slot0PhySlotNo"),
)
if mibBuilder.loadTexts:
    slot0PhyEntry.setStatus("mandatory")


class _Slot0PhySlotNo_Type(Integer32):
    """Custom type slot0PhySlotNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_Slot0PhySlotNo_Type.__name__ = "Integer32"
_Slot0PhySlotNo_Object = MibTableColumn
slot0PhySlotNo = _Slot0PhySlotNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 1),
    _Slot0PhySlotNo_Type()
)
slot0PhySlotNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PhySlotNo.setStatus("mandatory")
_Slot0PhyName_Type = DisplayString
_Slot0PhyName_Object = MibTableColumn
slot0PhyName = _Slot0PhyName_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 2),
    _Slot0PhyName_Type()
)
slot0PhyName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slot0PhyName.setStatus("mandatory")


class _Slot0PhyType_Type(Integer32):
    """Custom type slot0PhyType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              128,
              129,
              130,
              133,
              134,
              135,
              136,
              137,
              138,
              139,
              140,
              141,
              142,
              143,
              144,
              145,
              146,
              147,
              148,
              149,
              150)
        )
    )
    namedValues = NamedValues(
        *(("ce", 139),
          ("chfrc", 141),
          ("cl", 134),
          ("cp", 133),
          ("cs", 135),
          ("dv2ap", 146),
          ("dv2as", 147),
          ("dxdoc", 128),
          ("eth", 142),
          ("frac", 143),
          ("hl", 137),
          ("hp", 136),
          ("hs", 138),
          ("ipap", 150),
          ("ipas", 149),
          ("qedoc", 129),
          ("sce", 145),
          ("trdoc", 144),
          ("unknown", 1),
          ("vcdoc", 130),
          ("ve", 140),
          ("vsm", 148))
    )


_Slot0PhyType_Type.__name__ = "Integer32"
_Slot0PhyType_Object = MibTableColumn
slot0PhyType = _Slot0PhyType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 3),
    _Slot0PhyType_Type()
)
slot0PhyType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PhyType.setStatus("mandatory")


class _Slot0PhyDlim_Type(Integer32):
    """Custom type slot0PhyDlim based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27)
        )
    )
    namedValues = NamedValues(
        *(("d2G703", 4),
          ("d34G703", 6),
          ("d8G703", 5),
          ("dAUI", 7),
          ("dds1", 9),
          ("dds3", 10),
          ("delim", 25),
          ("dhssi", 11),
          ("dlfLIM", 8),
          ("ds1-dual", 17),
          ("ds1-quad", 18),
          ("ds3-2c", 13),
          ("dsolim", 12),
          ("dx21", 2),
          ("dx27", 3),
          ("e1-dual", 15),
          ("e1-quad", 16),
          ("e3-2c", 14),
          ("j2-dual", 20),
          ("j2-quad", 21),
          ("jpeg", 19),
          ("mpg2v", 26),
          ("qtlim", 27),
          ("si-dual", 23),
          ("si-quad", 24),
          ("unknown", 1),
          ("vh320", 22))
    )


_Slot0PhyDlim_Type.__name__ = "Integer32"
_Slot0PhyDlim_Object = MibTableColumn
slot0PhyDlim = _Slot0PhyDlim_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 4),
    _Slot0PhyDlim_Type()
)
slot0PhyDlim.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slot0PhyDlim.setStatus("mandatory")
_Slot0PhySwVer_Type = DisplayString
_Slot0PhySwVer_Object = MibTableColumn
slot0PhySwVer = _Slot0PhySwVer_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 5),
    _Slot0PhySwVer_Type()
)
slot0PhySwVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PhySwVer.setStatus("mandatory")


class _Slot0PhyState_Type(Integer32):
    """Custom type slot0PhyState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("absent", 1),
          ("active", 3),
          ("bootmode", 2),
          ("shadow", 5),
          ("shutdown", 4))
    )


_Slot0PhyState_Type.__name__ = "Integer32"
_Slot0PhyState_Object = MibTableColumn
slot0PhyState = _Slot0PhyState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 6),
    _Slot0PhyState_Type()
)
slot0PhyState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PhyState.setStatus("mandatory")


class _Slot0PhyReset_Type(Integer32):
    """Custom type slot0PhyReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Slot0PhyReset_Type.__name__ = "Integer32"
_Slot0PhyReset_Object = MibTableColumn
slot0PhyReset = _Slot0PhyReset_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 7),
    _Slot0PhyReset_Type()
)
slot0PhyReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slot0PhyReset.setStatus("mandatory")


class _Slot0PhyReqState_Type(Integer32):
    """Custom type slot0PhyReqState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("main", 3),
          ("normal", 1),
          ("shadow", 4),
          ("shutdown", 2))
    )


_Slot0PhyReqState_Type.__name__ = "Integer32"
_Slot0PhyReqState_Object = MibTableColumn
slot0PhyReqState = _Slot0PhyReqState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 8),
    _Slot0PhyReqState_Type()
)
slot0PhyReqState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slot0PhyReqState.setStatus("mandatory")


class _Slot0PhyStateChange_Type(Integer32):
    """Custom type slot0PhyStateChange based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Slot0PhyStateChange_Type.__name__ = "Integer32"
_Slot0PhyStateChange_Object = MibTableColumn
slot0PhyStateChange = _Slot0PhyStateChange_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 10),
    _Slot0PhyStateChange_Type()
)
slot0PhyStateChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PhyStateChange.setStatus("mandatory")


class _Slot0PhyLinkedSlot_Type(Integer32):
    """Custom type slot0PhyLinkedSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_Slot0PhyLinkedSlot_Type.__name__ = "Integer32"
_Slot0PhyLinkedSlot_Object = MibTableColumn
slot0PhyLinkedSlot = _Slot0PhyLinkedSlot_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 11),
    _Slot0PhyLinkedSlot_Type()
)
slot0PhyLinkedSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slot0PhyLinkedSlot.setStatus("mandatory")


class _Slot0PhyLink0State_Type(Integer32):
    """Custom type slot0PhyLink0State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("off", 3),
          ("reset", 5),
          ("stop", 4),
          ("up", 1))
    )


_Slot0PhyLink0State_Type.__name__ = "Integer32"
_Slot0PhyLink0State_Object = MibTableColumn
slot0PhyLink0State = _Slot0PhyLink0State_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 12),
    _Slot0PhyLink0State_Type()
)
slot0PhyLink0State.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PhyLink0State.setStatus("mandatory")


class _Slot0PhyLink1State_Type(Integer32):
    """Custom type slot0PhyLink1State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("off", 3),
          ("reset", 5),
          ("stop", 4),
          ("up", 1))
    )


_Slot0PhyLink1State_Type.__name__ = "Integer32"
_Slot0PhyLink1State_Object = MibTableColumn
slot0PhyLink1State = _Slot0PhyLink1State_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 13),
    _Slot0PhyLink1State_Type()
)
slot0PhyLink1State.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PhyLink1State.setStatus("mandatory")


class _Slot0PhyLink2State_Type(Integer32):
    """Custom type slot0PhyLink2State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("off", 3),
          ("reset", 5),
          ("stop", 4),
          ("up", 1))
    )


_Slot0PhyLink2State_Type.__name__ = "Integer32"
_Slot0PhyLink2State_Object = MibTableColumn
slot0PhyLink2State = _Slot0PhyLink2State_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 14),
    _Slot0PhyLink2State_Type()
)
slot0PhyLink2State.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PhyLink2State.setStatus("mandatory")


class _Slot0PhyLink3State_Type(Integer32):
    """Custom type slot0PhyLink3State based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("off", 3),
          ("reset", 5),
          ("stop", 4),
          ("up", 1))
    )


_Slot0PhyLink3State_Type.__name__ = "Integer32"
_Slot0PhyLink3State_Object = MibTableColumn
slot0PhyLink3State = _Slot0PhyLink3State_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 15),
    _Slot0PhyLink3State_Type()
)
slot0PhyLink3State.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PhyLink3State.setStatus("mandatory")
_Slot0PhySlotSerNo_Type = DisplayString
_Slot0PhySlotSerNo_Object = MibTableColumn
slot0PhySlotSerNo = _Slot0PhySlotSerNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 16),
    _Slot0PhySlotSerNo_Type()
)
slot0PhySlotSerNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PhySlotSerNo.setStatus("mandatory")
_Slot0PhySlotHwVerNo_Type = DisplayString
_Slot0PhySlotHwVerNo_Object = MibTableColumn
slot0PhySlotHwVerNo = _Slot0PhySlotHwVerNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 17),
    _Slot0PhySlotHwVerNo_Type()
)
slot0PhySlotHwVerNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PhySlotHwVerNo.setStatus("mandatory")
_Slot0PhyDocSerNo_Type = DisplayString
_Slot0PhyDocSerNo_Object = MibTableColumn
slot0PhyDocSerNo = _Slot0PhyDocSerNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 18),
    _Slot0PhyDocSerNo_Type()
)
slot0PhyDocSerNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PhyDocSerNo.setStatus("mandatory")
_Slot0PhyDocHwVerNo_Type = DisplayString
_Slot0PhyDocHwVerNo_Object = MibTableColumn
slot0PhyDocHwVerNo = _Slot0PhyDocHwVerNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 19),
    _Slot0PhyDocHwVerNo_Type()
)
slot0PhyDocHwVerNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PhyDocHwVerNo.setStatus("mandatory")
_Slot0PhyMacAddress_Type = PhysAddress
_Slot0PhyMacAddress_Object = MibTableColumn
slot0PhyMacAddress = _Slot0PhyMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 20),
    _Slot0PhyMacAddress_Type()
)
slot0PhyMacAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slot0PhyMacAddress.setStatus("mandatory")
_Slot0PhyChangeTimeM2_Type = DateAndTime
_Slot0PhyChangeTimeM2_Object = MibTableColumn
slot0PhyChangeTimeM2 = _Slot0PhyChangeTimeM2_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 21),
    _Slot0PhyChangeTimeM2_Type()
)
slot0PhyChangeTimeM2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PhyChangeTimeM2.setStatus("mandatory")


class _Slot0PhyLstChngLnkNum_Type(Integer32):
    """Custom type slot0PhyLstChngLnkNum based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("link-0", 1),
          ("link-1", 2),
          ("link-2", 3),
          ("link-3", 4),
          ("none", 5))
    )


_Slot0PhyLstChngLnkNum_Type.__name__ = "Integer32"
_Slot0PhyLstChngLnkNum_Object = MibTableColumn
slot0PhyLstChngLnkNum = _Slot0PhyLstChngLnkNum_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 22),
    _Slot0PhyLstChngLnkNum_Type()
)
slot0PhyLstChngLnkNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PhyLstChngLnkNum.setStatus("mandatory")


class _Slot0PhyLstChngPrevLnkStat_Type(Integer32):
    """Custom type slot0PhyLstChngPrevLnkStat based on Integer32"""
    defaultValue = 6

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("none", 6),
          ("off", 3),
          ("reset", 5),
          ("stop", 4),
          ("up", 1))
    )


_Slot0PhyLstChngPrevLnkStat_Type.__name__ = "Integer32"
_Slot0PhyLstChngPrevLnkStat_Object = MibTableColumn
slot0PhyLstChngPrevLnkStat = _Slot0PhyLstChngPrevLnkStat_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 6, 1, 23),
    _Slot0PhyLstChngPrevLnkStat_Type()
)
slot0PhyLstChngPrevLnkStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0PhyLstChngPrevLnkStat.setStatus("mandatory")
_Slot0MaxUpSlots_Type = Integer32
_Slot0MaxUpSlots_Object = MibScalar
slot0MaxUpSlots = _Slot0MaxUpSlots_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 7),
    _Slot0MaxUpSlots_Type()
)
slot0MaxUpSlots.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0MaxUpSlots.setStatus("mandatory")
_Slot0CurrentUpSlots_Type = Integer32
_Slot0CurrentUpSlots_Object = MibScalar
slot0CurrentUpSlots = _Slot0CurrentUpSlots_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 8),
    _Slot0CurrentUpSlots_Type()
)
slot0CurrentUpSlots.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0CurrentUpSlots.setStatus("mandatory")


class _Slot0IsStandbySlot0_Type(Integer32):
    """Custom type slot0IsStandbySlot0 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("not-applicable", 4),
          ("not-ready", 6),
          ("unknown", 5),
          ("yes", 2))
    )


_Slot0IsStandbySlot0_Type.__name__ = "Integer32"
_Slot0IsStandbySlot0_Object = MibScalar
slot0IsStandbySlot0 = _Slot0IsStandbySlot0_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 9),
    _Slot0IsStandbySlot0_Type()
)
slot0IsStandbySlot0.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0IsStandbySlot0.setStatus("mandatory")


class _Slot0TftpToStandby_Type(Integer32):
    """Custom type slot0TftpToStandby based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Slot0TftpToStandby_Type.__name__ = "Integer32"
_Slot0TftpToStandby_Object = MibScalar
slot0TftpToStandby = _Slot0TftpToStandby_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 10),
    _Slot0TftpToStandby_Type()
)
slot0TftpToStandby.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slot0TftpToStandby.setStatus("mandatory")


class _Slot0MibBroadcast_Type(Integer32):
    """Custom type slot0MibBroadcast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("snmp-Authentication", 2))
    )


_Slot0MibBroadcast_Type.__name__ = "Integer32"
_Slot0MibBroadcast_Object = MibScalar
slot0MibBroadcast = _Slot0MibBroadcast_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 11),
    _Slot0MibBroadcast_Type()
)
slot0MibBroadcast.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slot0MibBroadcast.setStatus("mandatory")
_Slot0Address_Type = E164
_Slot0Address_Object = MibScalar
slot0Address = _Slot0Address_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 14),
    _Slot0Address_Type()
)
slot0Address.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slot0Address.setStatus("mandatory")


class _Slot0InUse_Type(Integer32):
    """Custom type slot0InUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("main-disabled", 6),
          ("main-in-service", 1),
          ("main-out-of-service", 3),
          ("standby-disabled", 7),
          ("standby-in-service", 2),
          ("standby-out-of-service", 4),
          ("unknown", 5))
    )


_Slot0InUse_Type.__name__ = "Integer32"
_Slot0InUse_Object = MibScalar
slot0InUse = _Slot0InUse_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 15),
    _Slot0InUse_Type()
)
slot0InUse.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0InUse.setStatus("mandatory")


class _Slot0ToUse_Type(Integer32):
    """Custom type slot0ToUse based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("auto", 3),
          ("disable", 5),
          ("main", 1),
          ("not-applicable", 4),
          ("standby", 2))
    )


_Slot0ToUse_Type.__name__ = "Integer32"
_Slot0ToUse_Object = MibScalar
slot0ToUse = _Slot0ToUse_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 16),
    _Slot0ToUse_Type()
)
slot0ToUse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slot0ToUse.setStatus("mandatory")


class _Slot0redmode_Type(Integer32):
    """Custom type slot0redmode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("basic-redundancy", 2),
          ("enhanced-redundancy", 3),
          ("non-redundant", 1),
          ("unknown", 4))
    )


_Slot0redmode_Type.__name__ = "Integer32"
_Slot0redmode_Object = MibScalar
slot0redmode = _Slot0redmode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 17),
    _Slot0redmode_Type()
)
slot0redmode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slot0redmode.setStatus("mandatory")
_Slot0IntIPMask_Type = IpAddress
_Slot0IntIPMask_Object = MibScalar
slot0IntIPMask = _Slot0IntIPMask_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 18),
    _Slot0IntIPMask_Type()
)
slot0IntIPMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slot0IntIPMask.setStatus("mandatory")


class _Slot0SwitchId_Type(Integer32):
    """Custom type slot0SwitchId based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_Slot0SwitchId_Type.__name__ = "Integer32"
_Slot0SwitchId_Object = MibScalar
slot0SwitchId = _Slot0SwitchId_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 19),
    _Slot0SwitchId_Type()
)
slot0SwitchId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slot0SwitchId.setStatus("mandatory")


class _Ntms0doc_Type(Integer32):
    """Custom type ntms0doc based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Ntms0doc_Type.__name__ = "Integer32"
_Ntms0doc_Object = MibScalar
ntms0doc = _Ntms0doc_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 20),
    _Ntms0doc_Type()
)
ntms0doc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ntms0doc.setStatus("mandatory")
_Slot0LecsPrefix_Type = E164
_Slot0LecsPrefix_Object = MibScalar
slot0LecsPrefix = _Slot0LecsPrefix_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 21),
    _Slot0LecsPrefix_Type()
)
slot0LecsPrefix.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slot0LecsPrefix.setStatus("mandatory")
_Slot0LecsESI_Type = E164
_Slot0LecsESI_Object = MibScalar
slot0LecsESI = _Slot0LecsESI_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 2, 22),
    _Slot0LecsESI_Type()
)
slot0LecsESI.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slot0LecsESI.setStatus("mandatory")
_Dv2Trace_ObjectIdentity = ObjectIdentity
dv2Trace = _Dv2Trace_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 3)
)


class _TraceIp_Type(Integer32):
    """Custom type traceIp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_TraceIp_Type.__name__ = "Integer32"
_TraceIp_Object = MibScalar
traceIp = _TraceIp_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 3, 1),
    _TraceIp_Type()
)
traceIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    traceIp.setStatus("mandatory")


class _TraceUdp_Type(Integer32):
    """Custom type traceUdp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_TraceUdp_Type.__name__ = "Integer32"
_TraceUdp_Object = MibScalar
traceUdp = _TraceUdp_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 3, 2),
    _TraceUdp_Type()
)
traceUdp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    traceUdp.setStatus("mandatory")


class _TraceTcp_Type(Integer32):
    """Custom type traceTcp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_TraceTcp_Type.__name__ = "Integer32"
_TraceTcp_Object = MibScalar
traceTcp = _TraceTcp_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 3, 3),
    _TraceTcp_Type()
)
traceTcp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    traceTcp.setStatus("mandatory")


class _TraceSnmp_Type(Integer32):
    """Custom type traceSnmp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_TraceSnmp_Type.__name__ = "Integer32"
_TraceSnmp_Object = MibScalar
traceSnmp = _TraceSnmp_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 3, 4),
    _TraceSnmp_Type()
)
traceSnmp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    traceSnmp.setStatus("mandatory")


class _TraceCat_Type(Integer32):
    """Custom type traceCat based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_TraceCat_Type.__name__ = "Integer32"
_TraceCat_Object = MibScalar
traceCat = _TraceCat_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 3, 5),
    _TraceCat_Type()
)
traceCat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    traceCat.setStatus("mandatory")
_Dv2SlipLine_ObjectIdentity = ObjectIdentity
dv2SlipLine = _Dv2SlipLine_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 4)
)
_SlipIp_Type = IpAddress
_SlipIp_Object = MibScalar
slipIp = _SlipIp_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 4, 1),
    _SlipIp_Type()
)
slipIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slipIp.setStatus("mandatory")
_SlipMask_Type = IpAddress
_SlipMask_Object = MibScalar
slipMask = _SlipMask_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 4, 2),
    _SlipMask_Type()
)
slipMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slipMask.setStatus("mandatory")
_SlipRemoteIp_Type = IpAddress
_SlipRemoteIp_Object = MibScalar
slipRemoteIp = _SlipRemoteIp_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 4, 3),
    _SlipRemoteIp_Type()
)
slipRemoteIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slipRemoteIp.setStatus("mandatory")


class _SlipSpeed_Type(Integer32):
    """Custom type slipSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("baud115200", 7),
          ("baud19200", 4),
          ("baud2400", 1),
          ("baud38400", 5),
          ("baud4800", 2),
          ("baud57600", 6),
          ("baud9600", 3))
    )


_SlipSpeed_Type.__name__ = "Integer32"
_SlipSpeed_Object = MibScalar
slipSpeed = _SlipSpeed_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 4, 4),
    _SlipSpeed_Type()
)
slipSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    slipSpeed.setStatus("mandatory")
_Dv2StaticRoute_ObjectIdentity = ObjectIdentity
dv2StaticRoute = _Dv2StaticRoute_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 5)
)
_Dv2Clocks_ObjectIdentity = ObjectIdentity
dv2Clocks = _Dv2Clocks_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 6)
)


class _ClksTxTimingRef_Type(Integer32):
    """Custom type clksTxTimingRef based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("local-link0", 2),
          ("local-link1", 3),
          ("local-oscillator", 4),
          ("system-timing-reference", 1))
    )


_ClksTxTimingRef_Type.__name__ = "Integer32"
_ClksTxTimingRef_Object = MibScalar
clksTxTimingRef = _ClksTxTimingRef_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 6, 1),
    _ClksTxTimingRef_Type()
)
clksTxTimingRef.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clksTxTimingRef.setStatus("mandatory")


class _ClksSysRefSlotNum_Type(Integer32):
    """Custom type clksSysRefSlotNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_ClksSysRefSlotNum_Type.__name__ = "Integer32"
_ClksSysRefSlotNum_Object = MibScalar
clksSysRefSlotNum = _ClksSysRefSlotNum_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 6, 2),
    _ClksSysRefSlotNum_Type()
)
clksSysRefSlotNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clksSysRefSlotNum.setStatus("mandatory")


class _ClksSysRefLinkNum_Type(Integer32):
    """Custom type clksSysRefLinkNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("link0", 1),
          ("link1", 2),
          ("none", 3))
    )


_ClksSysRefLinkNum_Type.__name__ = "Integer32"
_ClksSysRefLinkNum_Object = MibScalar
clksSysRefLinkNum = _ClksSysRefLinkNum_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 6, 3),
    _ClksSysRefLinkNum_Type()
)
clksSysRefLinkNum.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    clksSysRefLinkNum.setStatus("mandatory")


class _ClksSysRefError_Type(Integer32):
    """Custom type clksSysRefError based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17)
        )
    )
    namedValues = NamedValues(
        *(("none", 17),
          ("slot0", 1),
          ("slot1", 2),
          ("slot10", 11),
          ("slot11", 12),
          ("slot12", 13),
          ("slot13", 14),
          ("slot14", 15),
          ("slot15", 16),
          ("slot2", 3),
          ("slot3", 4),
          ("slot4", 5),
          ("slot5", 6),
          ("slot6", 7),
          ("slot7", 8),
          ("slot8", 9),
          ("slot9", 10))
    )


_ClksSysRefError_Type.__name__ = "Integer32"
_ClksSysRefError_Object = MibScalar
clksSysRefError = _ClksSysRefError_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 6, 4),
    _ClksSysRefError_Type()
)
clksSysRefError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    clksSysRefError.setStatus("mandatory")
_Dv2VcDoc_ObjectIdentity = ObjectIdentity
dv2VcDoc = _Dv2VcDoc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8)
)
_VcDocTable_Object = MibTable
vcDocTable = _VcDocTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1)
)
if mibBuilder.loadTexts:
    vcDocTable.setStatus("mandatory")
_VcDocEntry_Object = MibTableRow
vcDocEntry = _VcDocEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1)
)
vcDocEntry.setIndexNames(
    (0, "DV2-MIB", "vcDocLinkNo"),
)
if mibBuilder.loadTexts:
    vcDocEntry.setStatus("mandatory")


class _VcDocLinkNo_Type(Integer32):
    """Custom type vcDocLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 127),
    )


_VcDocLinkNo_Type.__name__ = "Integer32"
_VcDocLinkNo_Object = MibTableColumn
vcDocLinkNo = _VcDocLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 1),
    _VcDocLinkNo_Type()
)
vcDocLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcDocLinkNo.setStatus("mandatory")


class _VcDocEnable_Type(Integer32):
    """Custom type vcDocEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_VcDocEnable_Type.__name__ = "Integer32"
_VcDocEnable_Object = MibTableColumn
vcDocEnable = _VcDocEnable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 2),
    _VcDocEnable_Type()
)
vcDocEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcDocEnable.setStatus("mandatory")
_VcDocVpi_Type = VirtualPathIdentifier
_VcDocVpi_Object = MibTableColumn
vcDocVpi = _VcDocVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 3),
    _VcDocVpi_Type()
)
vcDocVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcDocVpi.setStatus("mandatory")
_VcDocVci_Type = VirtualCircuitIdentifier
_VcDocVci_Object = MibTableColumn
vcDocVci = _VcDocVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 4),
    _VcDocVci_Type()
)
vcDocVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcDocVci.setStatus("mandatory")


class _VcDocLinkSpeed_Type(Integer32):
    """Custom type vcDocLinkSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(64,
              128,
              192,
              224,
              240,
              248,
              252)
        )
    )
    namedValues = NamedValues(
        *(("s1024kbps", 248),
          ("s128kbps", 192),
          ("s2048kbps", 252),
          ("s256kbps", 224),
          ("s32kbps", 64),
          ("s512kbps", 240),
          ("s64kbps", 128))
    )


_VcDocLinkSpeed_Type.__name__ = "Integer32"
_VcDocLinkSpeed_Object = MibTableColumn
vcDocLinkSpeed = _VcDocLinkSpeed_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 5),
    _VcDocLinkSpeed_Type()
)
vcDocLinkSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcDocLinkSpeed.setStatus("mandatory")


class _VcDocCLines_Type(Integer32):
    """Custom type vcDocCLines based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ignore", 2),
          ("process", 1))
    )


_VcDocCLines_Type.__name__ = "Integer32"
_VcDocCLines_Object = MibTableColumn
vcDocCLines = _VcDocCLines_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 6),
    _VcDocCLines_Type()
)
vcDocCLines.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcDocCLines.setStatus("mandatory")


class _VcDocFifoSize_Type(Integer32):
    """Custom type vcDocFifoSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 100),
    )


_VcDocFifoSize_Type.__name__ = "Integer32"
_VcDocFifoSize_Object = MibTableColumn
vcDocFifoSize = _VcDocFifoSize_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 7),
    _VcDocFifoSize_Type()
)
vcDocFifoSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcDocFifoSize.setStatus("mandatory")


class _VcDocLowWater_Type(Integer32):
    """Custom type vcDocLowWater based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 50),
    )


_VcDocLowWater_Type.__name__ = "Integer32"
_VcDocLowWater_Object = MibTableColumn
vcDocLowWater = _VcDocLowWater_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 8),
    _VcDocLowWater_Type()
)
vcDocLowWater.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcDocLowWater.setStatus("mandatory")


class _VcDocHighWater_Type(Integer32):
    """Custom type vcDocHighWater based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 100),
    )


_VcDocHighWater_Type.__name__ = "Integer32"
_VcDocHighWater_Object = MibTableColumn
vcDocHighWater = _VcDocHighWater_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 9),
    _VcDocHighWater_Type()
)
vcDocHighWater.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcDocHighWater.setStatus("mandatory")


class _VcDocTestMode_Type(Integer32):
    """Custom type vcDocTestMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("cable-loop", 3),
          ("local-loop", 2),
          ("normal", 1),
          ("pattern-send", 5),
          ("remote-loop", 4))
    )


_VcDocTestMode_Type.__name__ = "Integer32"
_VcDocTestMode_Object = MibTableColumn
vcDocTestMode = _VcDocTestMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 10),
    _VcDocTestMode_Type()
)
vcDocTestMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcDocTestMode.setStatus("mandatory")
_VcDocTestVal_Type = Hex
_VcDocTestVal_Object = MibTableColumn
vcDocTestVal = _VcDocTestVal_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 11),
    _VcDocTestVal_Type()
)
vcDocTestVal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcDocTestVal.setStatus("mandatory")


class _VcDocPriority_Type(Integer32):
    """Custom type vcDocPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_VcDocPriority_Type.__name__ = "Integer32"
_VcDocPriority_Object = MibTableColumn
vcDocPriority = _VcDocPriority_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 12),
    _VcDocPriority_Type()
)
vcDocPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcDocPriority.setStatus("mandatory")


class _VcDocSuba_Type(Integer32):
    """Custom type vcDocSuba based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_VcDocSuba_Type.__name__ = "Integer32"
_VcDocSuba_Object = MibTableColumn
vcDocSuba = _VcDocSuba_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 13),
    _VcDocSuba_Type()
)
vcDocSuba.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcDocSuba.setStatus("mandatory")


class _VcDocSaddr_Type(Integer32):
    """Custom type vcDocSaddr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_VcDocSaddr_Type.__name__ = "Integer32"
_VcDocSaddr_Object = MibTableColumn
vcDocSaddr = _VcDocSaddr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 14),
    _VcDocSaddr_Type()
)
vcDocSaddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcDocSaddr.setStatus("mandatory")


class _VcDocClockFix_Type(Integer32):
    """Custom type vcDocClockFix based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_VcDocClockFix_Type.__name__ = "Integer32"
_VcDocClockFix_Object = MibTableColumn
vcDocClockFix = _VcDocClockFix_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 1, 1, 15),
    _VcDocClockFix_Type()
)
vcDocClockFix.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vcDocClockFix.setStatus("mandatory")
_VcStatTable_Object = MibTable
vcStatTable = _VcStatTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2)
)
if mibBuilder.loadTexts:
    vcStatTable.setStatus("mandatory")
_VcStatEntry_Object = MibTableRow
vcStatEntry = _VcStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1)
)
vcStatEntry.setIndexNames(
    (0, "DV2-MIB", "vcStatPortNo"),
)
if mibBuilder.loadTexts:
    vcStatEntry.setStatus("mandatory")


class _VcStatPortNo_Type(Integer32):
    """Custom type vcStatPortNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_VcStatPortNo_Type.__name__ = "Integer32"
_VcStatPortNo_Object = MibTableColumn
vcStatPortNo = _VcStatPortNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 1),
    _VcStatPortNo_Type()
)
vcStatPortNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcStatPortNo.setStatus("mandatory")


class _VcStatRxState_Type(Integer32):
    """Custom type vcStatRxState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_VcStatRxState_Type.__name__ = "Integer32"
_VcStatRxState_Object = MibTableColumn
vcStatRxState = _VcStatRxState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 2),
    _VcStatRxState_Type()
)
vcStatRxState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcStatRxState.setStatus("mandatory")


class _VcStatTxState_Type(Integer32):
    """Custom type vcStatTxState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_VcStatTxState_Type.__name__ = "Integer32"
_VcStatTxState_Object = MibTableColumn
vcStatTxState = _VcStatTxState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 3),
    _VcStatTxState_Type()
)
vcStatTxState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcStatTxState.setStatus("mandatory")
_VcStatFifoCount_Type = Integer32
_VcStatFifoCount_Object = MibTableColumn
vcStatFifoCount = _VcStatFifoCount_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 4),
    _VcStatFifoCount_Type()
)
vcStatFifoCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcStatFifoCount.setStatus("mandatory")
_VcStatOFlow_Type = Integer32
_VcStatOFlow_Object = MibTableColumn
vcStatOFlow = _VcStatOFlow_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 5),
    _VcStatOFlow_Type()
)
vcStatOFlow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcStatOFlow.setStatus("mandatory")
_VcStatUFlow_Type = Integer32
_VcStatUFlow_Object = MibTableColumn
vcStatUFlow = _VcStatUFlow_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 6),
    _VcStatUFlow_Type()
)
vcStatUFlow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcStatUFlow.setStatus("mandatory")
_VcStatReSync_Type = Integer32
_VcStatReSync_Object = MibTableColumn
vcStatReSync = _VcStatReSync_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 7),
    _VcStatReSync_Type()
)
vcStatReSync.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcStatReSync.setStatus("mandatory")
_VcStatInvented_Type = Integer32
_VcStatInvented_Object = MibTableColumn
vcStatInvented = _VcStatInvented_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 8),
    _VcStatInvented_Type()
)
vcStatInvented.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcStatInvented.setStatus("mandatory")
_VcStatRxCells_Type = Counter32
_VcStatRxCells_Object = MibTableColumn
vcStatRxCells = _VcStatRxCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 9),
    _VcStatRxCells_Type()
)
vcStatRxCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcStatRxCells.setStatus("mandatory")
_VcStatTxCells_Type = Counter32
_VcStatTxCells_Object = MibTableColumn
vcStatTxCells = _VcStatTxCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 10),
    _VcStatTxCells_Type()
)
vcStatTxCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcStatTxCells.setStatus("mandatory")
_VcStatRxSeqNo_Type = Integer32
_VcStatRxSeqNo_Object = MibTableColumn
vcStatRxSeqNo = _VcStatRxSeqNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 11),
    _VcStatRxSeqNo_Type()
)
vcStatRxSeqNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcStatRxSeqNo.setStatus("mandatory")
_VcStatTxSeqNo_Type = Integer32
_VcStatTxSeqNo_Object = MibTableColumn
vcStatTxSeqNo = _VcStatTxSeqNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 12),
    _VcStatTxSeqNo_Type()
)
vcStatTxSeqNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcStatTxSeqNo.setStatus("mandatory")
_VcStatLastError_Type = Integer32
_VcStatLastError_Object = MibTableColumn
vcStatLastError = _VcStatLastError_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 13),
    _VcStatLastError_Type()
)
vcStatLastError.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcStatLastError.setStatus("mandatory")
_VcStatLastCompare_Type = Integer32
_VcStatLastCompare_Object = MibTableColumn
vcStatLastCompare = _VcStatLastCompare_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 14),
    _VcStatLastCompare_Type()
)
vcStatLastCompare.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcStatLastCompare.setStatus("mandatory")
_VcStatTestErrors_Type = Integer32
_VcStatTestErrors_Object = MibTableColumn
vcStatTestErrors = _VcStatTestErrors_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 8, 2, 1, 15),
    _VcStatTestErrors_Type()
)
vcStatTestErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcStatTestErrors.setStatus("mandatory")
_Dv2FrRelay_ObjectIdentity = ObjectIdentity
dv2FrRelay = _Dv2FrRelay_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9)
)
_FRelayStatTable_Object = MibTable
fRelayStatTable = _FRelayStatTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1)
)
if mibBuilder.loadTexts:
    fRelayStatTable.setStatus("mandatory")
_FRelayStatEntry_Object = MibTableRow
fRelayStatEntry = _FRelayStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1)
)
fRelayStatEntry.setIndexNames(
    (0, "DV2-MIB", "fRelStatLinkNo"),
)
if mibBuilder.loadTexts:
    fRelayStatEntry.setStatus("mandatory")


class _FRelStatLinkNo_Type(Integer32):
    """Custom type fRelStatLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_FRelStatLinkNo_Type.__name__ = "Integer32"
_FRelStatLinkNo_Object = MibTableColumn
fRelStatLinkNo = _FRelStatLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 1),
    _FRelStatLinkNo_Type()
)
fRelStatLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fRelStatLinkNo.setStatus("mandatory")
_FRelStatLocSeq_Type = Integer32
_FRelStatLocSeq_Object = MibTableColumn
fRelStatLocSeq = _FRelStatLocSeq_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 2),
    _FRelStatLocSeq_Type()
)
fRelStatLocSeq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fRelStatLocSeq.setStatus("mandatory")
_FRelStatLocAck_Type = Integer32
_FRelStatLocAck_Object = MibTableColumn
fRelStatLocAck = _FRelStatLocAck_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 3),
    _FRelStatLocAck_Type()
)
fRelStatLocAck.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fRelStatLocAck.setStatus("mandatory")


class _FRelStatLocState_Type(Integer32):
    """Custom type fRelStatLocState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_FRelStatLocState_Type.__name__ = "Integer32"
_FRelStatLocState_Object = MibTableColumn
fRelStatLocState = _FRelStatLocState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 4),
    _FRelStatLocState_Type()
)
fRelStatLocState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fRelStatLocState.setStatus("mandatory")
_FRelStatLocStartT_Type = Integer32
_FRelStatLocStartT_Object = MibTableColumn
fRelStatLocStartT = _FRelStatLocStartT_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 5),
    _FRelStatLocStartT_Type()
)
fRelStatLocStartT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fRelStatLocStartT.setStatus("mandatory")
_FRelStatLocErrThr_Type = Counter32
_FRelStatLocErrThr_Object = MibTableColumn
fRelStatLocErrThr = _FRelStatLocErrThr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 6),
    _FRelStatLocErrThr_Type()
)
fRelStatLocErrThr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fRelStatLocErrThr.setStatus("mandatory")
_FRelStatLocMec_Type = Counter32
_FRelStatLocMec_Object = MibTableColumn
fRelStatLocMec = _FRelStatLocMec_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 7),
    _FRelStatLocMec_Type()
)
fRelStatLocMec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fRelStatLocMec.setStatus("mandatory")
_FRelStatLocPoll_Type = Counter32
_FRelStatLocPoll_Object = MibTableColumn
fRelStatLocPoll = _FRelStatLocPoll_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 8),
    _FRelStatLocPoll_Type()
)
fRelStatLocPoll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fRelStatLocPoll.setStatus("mandatory")
_FRelStatRemSeq_Type = Integer32
_FRelStatRemSeq_Object = MibTableColumn
fRelStatRemSeq = _FRelStatRemSeq_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 9),
    _FRelStatRemSeq_Type()
)
fRelStatRemSeq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fRelStatRemSeq.setStatus("mandatory")
_FRelStatRemAck_Type = Integer32
_FRelStatRemAck_Object = MibTableColumn
fRelStatRemAck = _FRelStatRemAck_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 10),
    _FRelStatRemAck_Type()
)
fRelStatRemAck.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fRelStatRemAck.setStatus("mandatory")


class _FRelStatRemState_Type(Integer32):
    """Custom type fRelStatRemState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_FRelStatRemState_Type.__name__ = "Integer32"
_FRelStatRemState_Object = MibTableColumn
fRelStatRemState = _FRelStatRemState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 11),
    _FRelStatRemState_Type()
)
fRelStatRemState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fRelStatRemState.setStatus("mandatory")
_FRelStatRemStartT_Type = Integer32
_FRelStatRemStartT_Object = MibTableColumn
fRelStatRemStartT = _FRelStatRemStartT_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 12),
    _FRelStatRemStartT_Type()
)
fRelStatRemStartT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fRelStatRemStartT.setStatus("mandatory")
_FRelStatRemErrThr_Type = Counter32
_FRelStatRemErrThr_Object = MibTableColumn
fRelStatRemErrThr = _FRelStatRemErrThr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 13),
    _FRelStatRemErrThr_Type()
)
fRelStatRemErrThr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fRelStatRemErrThr.setStatus("mandatory")
_FRelStatRemMec_Type = Counter32
_FRelStatRemMec_Object = MibTableColumn
fRelStatRemMec = _FRelStatRemMec_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 14),
    _FRelStatRemMec_Type()
)
fRelStatRemMec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fRelStatRemMec.setStatus("mandatory")
_FRelStatRemPoll_Type = Counter32
_FRelStatRemPoll_Object = MibTableColumn
fRelStatRemPoll = _FRelStatRemPoll_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 1, 1, 15),
    _FRelStatRemPoll_Type()
)
fRelStatRemPoll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fRelStatRemPoll.setStatus("mandatory")
_FRelayConfTable_Object = MibTable
fRelayConfTable = _FRelayConfTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2)
)
if mibBuilder.loadTexts:
    fRelayConfTable.setStatus("mandatory")
_FRelayConfEntry_Object = MibTableRow
fRelayConfEntry = _FRelayConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1)
)
fRelayConfEntry.setIndexNames(
    (0, "DV2-MIB", "fRelConfLinkNo"),
)
if mibBuilder.loadTexts:
    fRelayConfEntry.setStatus("mandatory")


class _FRelConfLinkNo_Type(Integer32):
    """Custom type fRelConfLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_FRelConfLinkNo_Type.__name__ = "Integer32"
_FRelConfLinkNo_Object = MibTableColumn
fRelConfLinkNo = _FRelConfLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 1),
    _FRelConfLinkNo_Type()
)
fRelConfLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fRelConfLinkNo.setStatus("mandatory")


class _FRelConfLinkEnab_Type(Integer32):
    """Custom type fRelConfLinkEnab based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_FRelConfLinkEnab_Type.__name__ = "Integer32"
_FRelConfLinkEnab_Object = MibTableColumn
fRelConfLinkEnab = _FRelConfLinkEnab_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 2),
    _FRelConfLinkEnab_Type()
)
fRelConfLinkEnab.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fRelConfLinkEnab.setStatus("mandatory")


class _FRelConfLinkMode_Type(Integer32):
    """Custom type fRelConfLinkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ansi", 1),
          ("dxi", 4),
          ("lmi", 2),
          ("transport", 3))
    )


_FRelConfLinkMode_Type.__name__ = "Integer32"
_FRelConfLinkMode_Object = MibTableColumn
fRelConfLinkMode = _FRelConfLinkMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 3),
    _FRelConfLinkMode_Type()
)
fRelConfLinkMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fRelConfLinkMode.setStatus("mandatory")


class _FRelConfLinkSpeed_Type(Integer32):
    """Custom type fRelConfLinkSpeed based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(48,
              77,
              100,
              117,
              177,
              191,
              217,
              223,
              240,
              244,
              246,
              251,
              253,
              254,
              255)
        )
    )
    namedValues = NamedValues(
        *(("s10Mbps", 255),
          ("s128kbps", 177),
          ("s153k6bps", 191),
          ("s1Mbps", 246),
          ("s256kbps", 217),
          ("s2Mbps", 251),
          ("s307k2bps", 223),
          ("s3Mbps", 253),
          ("s48kbps", 48),
          ("s56kbps", 77),
          ("s5Mbps", 254),
          ("s614k4bps", 240),
          ("s64kbps", 100),
          ("s72kbps", 117),
          ("s819k2bps", 244))
    )


_FRelConfLinkSpeed_Type.__name__ = "Integer32"
_FRelConfLinkSpeed_Object = MibTableColumn
fRelConfLinkSpeed = _FRelConfLinkSpeed_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 4),
    _FRelConfLinkSpeed_Type()
)
fRelConfLinkSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fRelConfLinkSpeed.setStatus("mandatory")


class _FRelConfLinkCline_Type(Integer32):
    """Custom type fRelConfLinkCline based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_FRelConfLinkCline_Type.__name__ = "Integer32"
_FRelConfLinkCline_Object = MibTableColumn
fRelConfLinkCline = _FRelConfLinkCline_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 5),
    _FRelConfLinkCline_Type()
)
fRelConfLinkCline.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fRelConfLinkCline.setStatus("mandatory")


class _FRelConfLinkType_Type(Integer32):
    """Custom type fRelConfLinkType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("network", 2),
          ("nni", 3),
          ("user", 1))
    )


_FRelConfLinkType_Type.__name__ = "Integer32"
_FRelConfLinkType_Object = MibTableColumn
fRelConfLinkType = _FRelConfLinkType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 6),
    _FRelConfLinkType_Type()
)
fRelConfLinkType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fRelConfLinkType.setStatus("mandatory")


class _FRelConfN391_Type(Integer32):
    """Custom type fRelConfN391 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_FRelConfN391_Type.__name__ = "Integer32"
_FRelConfN391_Object = MibTableColumn
fRelConfN391 = _FRelConfN391_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 7),
    _FRelConfN391_Type()
)
fRelConfN391.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fRelConfN391.setStatus("mandatory")


class _FRelConfN392_Type(Integer32):
    """Custom type fRelConfN392 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_FRelConfN392_Type.__name__ = "Integer32"
_FRelConfN392_Object = MibTableColumn
fRelConfN392 = _FRelConfN392_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 8),
    _FRelConfN392_Type()
)
fRelConfN392.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fRelConfN392.setStatus("mandatory")


class _FRelConfN393_Type(Integer32):
    """Custom type fRelConfN393 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_FRelConfN393_Type.__name__ = "Integer32"
_FRelConfN393_Object = MibTableColumn
fRelConfN393 = _FRelConfN393_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 9),
    _FRelConfN393_Type()
)
fRelConfN393.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fRelConfN393.setStatus("mandatory")


class _FRelConfT391_Type(Integer32):
    """Custom type fRelConfT391 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 30),
    )


_FRelConfT391_Type.__name__ = "Integer32"
_FRelConfT391_Object = MibTableColumn
fRelConfT391 = _FRelConfT391_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 10),
    _FRelConfT391_Type()
)
fRelConfT391.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fRelConfT391.setStatus("mandatory")


class _FRelConfT392_Type(Integer32):
    """Custom type fRelConfT392 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 30),
    )


_FRelConfT392_Type.__name__ = "Integer32"
_FRelConfT392_Object = MibTableColumn
fRelConfT392 = _FRelConfT392_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 2, 1, 11),
    _FRelConfT392_Type()
)
fRelConfT392.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fRelConfT392.setStatus("mandatory")
_FraPStatTable_Object = MibTable
fraPStatTable = _FraPStatTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3)
)
if mibBuilder.loadTexts:
    fraPStatTable.setStatus("mandatory")
_FraPStatEntry_Object = MibTableRow
fraPStatEntry = _FraPStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1)
)
fraPStatEntry.setIndexNames(
    (0, "DV2-MIB", "fraPStatDlci"),
)
if mibBuilder.loadTexts:
    fraPStatEntry.setStatus("mandatory")


class _FraPStatDlci_Type(Integer32):
    """Custom type fraPStatDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 511),
    )


_FraPStatDlci_Type.__name__ = "Integer32"
_FraPStatDlci_Object = MibTableColumn
fraPStatDlci = _FraPStatDlci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 1),
    _FraPStatDlci_Type()
)
fraPStatDlci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatDlci.setStatus("mandatory")
_FraPStatRxBCnt_Type = Counter32
_FraPStatRxBCnt_Object = MibTableColumn
fraPStatRxBCnt = _FraPStatRxBCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 2),
    _FraPStatRxBCnt_Type()
)
fraPStatRxBCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatRxBCnt.setStatus("mandatory")
_FraPStatTxBCnt_Type = Counter32
_FraPStatTxBCnt_Object = MibTableColumn
fraPStatTxBCnt = _FraPStatTxBCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 3),
    _FraPStatTxBCnt_Type()
)
fraPStatTxBCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatTxBCnt.setStatus("mandatory")
_FraPStatRxFCnt_Type = Counter32
_FraPStatRxFCnt_Object = MibTableColumn
fraPStatRxFCnt = _FraPStatRxFCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 4),
    _FraPStatRxFCnt_Type()
)
fraPStatRxFCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatRxFCnt.setStatus("mandatory")
_FraPStatTxFCnt_Type = Counter32
_FraPStatTxFCnt_Object = MibTableColumn
fraPStatTxFCnt = _FraPStatTxFCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 5),
    _FraPStatTxFCnt_Type()
)
fraPStatTxFCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatTxFCnt.setStatus("mandatory")
_FraPStatRxBRate_Type = Gauge32
_FraPStatRxBRate_Object = MibTableColumn
fraPStatRxBRate = _FraPStatRxBRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 6),
    _FraPStatRxBRate_Type()
)
fraPStatRxBRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatRxBRate.setStatus("mandatory")
_FraPStatTxBRate_Type = Gauge32
_FraPStatTxBRate_Object = MibTableColumn
fraPStatTxBRate = _FraPStatTxBRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 7),
    _FraPStatTxBRate_Type()
)
fraPStatTxBRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatTxBRate.setStatus("mandatory")
_FraPStatRxFRate_Type = Gauge32
_FraPStatRxFRate_Object = MibTableColumn
fraPStatRxFRate = _FraPStatRxFRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 8),
    _FraPStatRxFRate_Type()
)
fraPStatRxFRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatRxFRate.setStatus("mandatory")
_FraPStatTxFRate_Type = Gauge32
_FraPStatTxFRate_Object = MibTableColumn
fraPStatTxFRate = _FraPStatTxFRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 9),
    _FraPStatTxFRate_Type()
)
fraPStatTxFRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatTxFRate.setStatus("mandatory")
_FraPStatDERxF_Type = Counter32
_FraPStatDERxF_Object = MibTableColumn
fraPStatDERxF = _FraPStatDERxF_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 10),
    _FraPStatDERxF_Type()
)
fraPStatDERxF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatDERxF.setStatus("mandatory")
_FraPStatDisRxF_Type = Counter32
_FraPStatDisRxF_Object = MibTableColumn
fraPStatDisRxF = _FraPStatDisRxF_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 11),
    _FraPStatDisRxF_Type()
)
fraPStatDisRxF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatDisRxF.setStatus("mandatory")
_FraPStatPvcStat_Type = Hex
_FraPStatPvcStat_Object = MibTableColumn
fraPStatPvcStat = _FraPStatPvcStat_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 12),
    _FraPStatPvcStat_Type()
)
fraPStatPvcStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatPvcStat.setStatus("mandatory")
_FraPStatLinkState_Type = Hex
_FraPStatLinkState_Object = MibTableColumn
fraPStatLinkState = _FraPStatLinkState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 13),
    _FraPStatLinkState_Type()
)
fraPStatLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatLinkState.setStatus("mandatory")
_FraPStatLocSeq_Type = Integer32
_FraPStatLocSeq_Object = MibTableColumn
fraPStatLocSeq = _FraPStatLocSeq_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 14),
    _FraPStatLocSeq_Type()
)
fraPStatLocSeq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatLocSeq.setStatus("mandatory")
_FraPStatLocAck_Type = Integer32
_FraPStatLocAck_Object = MibTableColumn
fraPStatLocAck = _FraPStatLocAck_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 15),
    _FraPStatLocAck_Type()
)
fraPStatLocAck.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatLocAck.setStatus("mandatory")
_FraPStatLocStat_Type = Integer32
_FraPStatLocStat_Object = MibTableColumn
fraPStatLocStat = _FraPStatLocStat_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 16),
    _FraPStatLocStat_Type()
)
fraPStatLocStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatLocStat.setStatus("mandatory")
_FraPStatLocStartT_Type = Integer32
_FraPStatLocStartT_Object = MibTableColumn
fraPStatLocStartT = _FraPStatLocStartT_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 17),
    _FraPStatLocStartT_Type()
)
fraPStatLocStartT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatLocStartT.setStatus("mandatory")
_FraPStatLocErrThr_Type = Counter32
_FraPStatLocErrThr_Object = MibTableColumn
fraPStatLocErrThr = _FraPStatLocErrThr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 18),
    _FraPStatLocErrThr_Type()
)
fraPStatLocErrThr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatLocErrThr.setStatus("mandatory")
_FraPStatLocMec_Type = Counter32
_FraPStatLocMec_Object = MibTableColumn
fraPStatLocMec = _FraPStatLocMec_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 19),
    _FraPStatLocMec_Type()
)
fraPStatLocMec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatLocMec.setStatus("mandatory")
_FraPStatLocPoll_Type = Counter32
_FraPStatLocPoll_Object = MibTableColumn
fraPStatLocPoll = _FraPStatLocPoll_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 20),
    _FraPStatLocPoll_Type()
)
fraPStatLocPoll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatLocPoll.setStatus("mandatory")
_FraPStatRemSeq_Type = Integer32
_FraPStatRemSeq_Object = MibTableColumn
fraPStatRemSeq = _FraPStatRemSeq_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 21),
    _FraPStatRemSeq_Type()
)
fraPStatRemSeq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatRemSeq.setStatus("mandatory")
_FraPStatRemAck_Type = Integer32
_FraPStatRemAck_Object = MibTableColumn
fraPStatRemAck = _FraPStatRemAck_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 22),
    _FraPStatRemAck_Type()
)
fraPStatRemAck.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatRemAck.setStatus("mandatory")
_FraPStatRemStat_Type = Integer32
_FraPStatRemStat_Object = MibTableColumn
fraPStatRemStat = _FraPStatRemStat_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 23),
    _FraPStatRemStat_Type()
)
fraPStatRemStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatRemStat.setStatus("mandatory")
_FraPStatRemStartT_Type = Integer32
_FraPStatRemStartT_Object = MibTableColumn
fraPStatRemStartT = _FraPStatRemStartT_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 24),
    _FraPStatRemStartT_Type()
)
fraPStatRemStartT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatRemStartT.setStatus("mandatory")
_FraPStatRemErrThr_Type = Counter32
_FraPStatRemErrThr_Object = MibTableColumn
fraPStatRemErrThr = _FraPStatRemErrThr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 25),
    _FraPStatRemErrThr_Type()
)
fraPStatRemErrThr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatRemErrThr.setStatus("mandatory")
_FraPStatRemMec_Type = Counter32
_FraPStatRemMec_Object = MibTableColumn
fraPStatRemMec = _FraPStatRemMec_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 26),
    _FraPStatRemMec_Type()
)
fraPStatRemMec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatRemMec.setStatus("mandatory")
_FraPStatRemPoll_Type = Counter32
_FraPStatRemPoll_Object = MibTableColumn
fraPStatRemPoll = _FraPStatRemPoll_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 27),
    _FraPStatRemPoll_Type()
)
fraPStatRemPoll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatRemPoll.setStatus("mandatory")
_FraPStatLastChangeM2_Type = DateAndTime
_FraPStatLastChangeM2_Object = MibTableColumn
fraPStatLastChangeM2 = _FraPStatLastChangeM2_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 3, 1, 29),
    _FraPStatLastChangeM2_Type()
)
fraPStatLastChangeM2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPStatLastChangeM2.setStatus("mandatory")
_FraPConfigTable_Object = MibTable
fraPConfigTable = _FraPConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4)
)
if mibBuilder.loadTexts:
    fraPConfigTable.setStatus("mandatory")
_FraPConfigEntry_Object = MibTableRow
fraPConfigEntry = _FraPConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1)
)
fraPConfigEntry.setIndexNames(
    (0, "DV2-MIB", "fraPConfigDlci"),
)
if mibBuilder.loadTexts:
    fraPConfigEntry.setStatus("mandatory")


class _FraPConfigDlci_Type(Integer32):
    """Custom type fraPConfigDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 511),
    )


_FraPConfigDlci_Type.__name__ = "Integer32"
_FraPConfigDlci_Object = MibTableColumn
fraPConfigDlci = _FraPConfigDlci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 1),
    _FraPConfigDlci_Type()
)
fraPConfigDlci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fraPConfigDlci.setStatus("mandatory")
_FraPConfigCir_Type = Integer32
_FraPConfigCir_Object = MibTableColumn
fraPConfigCir = _FraPConfigCir_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 2),
    _FraPConfigCir_Type()
)
fraPConfigCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fraPConfigCir.setStatus("mandatory")
_FraPConfigCommitB_Type = Integer32
_FraPConfigCommitB_Object = MibTableColumn
fraPConfigCommitB = _FraPConfigCommitB_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 3),
    _FraPConfigCommitB_Type()
)
fraPConfigCommitB.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fraPConfigCommitB.setStatus("mandatory")
_FraPConfigExcessB_Type = Integer32
_FraPConfigExcessB_Object = MibTableColumn
fraPConfigExcessB = _FraPConfigExcessB_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 4),
    _FraPConfigExcessB_Type()
)
fraPConfigExcessB.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fraPConfigExcessB.setStatus("mandatory")
_FraVpi_Type = VirtualPathIdentifier
_FraVpi_Object = MibTableColumn
fraVpi = _FraVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 5),
    _FraVpi_Type()
)
fraVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraVpi.setStatus("mandatory")
_FraVci_Type = VirtualCircuitIdentifier
_FraVci_Object = MibTableColumn
fraVci = _FraVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 6),
    _FraVci_Type()
)
fraVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraVci.setStatus("mandatory")
_FraPConfigPriority_Type = Integer32
_FraPConfigPriority_Object = MibTableColumn
fraPConfigPriority = _FraPConfigPriority_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 7),
    _FraPConfigPriority_Type()
)
fraPConfigPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPConfigPriority.setStatus("mandatory")
_FraPConfigSuba_Type = Integer32
_FraPConfigSuba_Object = MibTableColumn
fraPConfigSuba = _FraPConfigSuba_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 8),
    _FraPConfigSuba_Type()
)
fraPConfigSuba.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPConfigSuba.setStatus("mandatory")
_FraPConfigSaddr_Type = Integer32
_FraPConfigSaddr_Object = MibTableColumn
fraPConfigSaddr = _FraPConfigSaddr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 9),
    _FraPConfigSaddr_Type()
)
fraPConfigSaddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fraPConfigSaddr.setStatus("mandatory")


class _FraPConfigValidity_Type(Integer32):
    """Custom type fraPConfigValidity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FraPConfigValidity_Type.__name__ = "Integer32"
_FraPConfigValidity_Object = MibTableColumn
fraPConfigValidity = _FraPConfigValidity_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 10),
    _FraPConfigValidity_Type()
)
fraPConfigValidity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fraPConfigValidity.setStatus("mandatory")


class _FraPConfigDxivpi_Type(Integer32):
    """Custom type fraPConfigDxivpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_FraPConfigDxivpi_Type.__name__ = "Integer32"
_FraPConfigDxivpi_Object = MibTableColumn
fraPConfigDxivpi = _FraPConfigDxivpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 11),
    _FraPConfigDxivpi_Type()
)
fraPConfigDxivpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fraPConfigDxivpi.setStatus("mandatory")


class _FraPConfigDxivci_Type(Integer32):
    """Custom type fraPConfigDxivci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_FraPConfigDxivci_Type.__name__ = "Integer32"
_FraPConfigDxivci_Object = MibTableColumn
fraPConfigDxivci = _FraPConfigDxivci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 12),
    _FraPConfigDxivci_Type()
)
fraPConfigDxivci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fraPConfigDxivci.setStatus("mandatory")


class _FraPConfigDximode_Type(Integer32):
    """Custom type fraPConfigDximode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FraPConfigDximode_Type.__name__ = "Integer32"
_FraPConfigDximode_Object = MibTableColumn
fraPConfigDximode = _FraPConfigDximode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 4, 1, 13),
    _FraPConfigDximode_Type()
)
fraPConfigDximode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fraPConfigDximode.setStatus("mandatory")
_FrbPStatTable_Object = MibTable
frbPStatTable = _FrbPStatTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5)
)
if mibBuilder.loadTexts:
    frbPStatTable.setStatus("mandatory")
_FrbPStatEntry_Object = MibTableRow
frbPStatEntry = _FrbPStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1)
)
frbPStatEntry.setIndexNames(
    (0, "DV2-MIB", "frbPStatDlci"),
)
if mibBuilder.loadTexts:
    frbPStatEntry.setStatus("mandatory")


class _FrbPStatDlci_Type(Integer32):
    """Custom type frbPStatDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 511),
    )


_FrbPStatDlci_Type.__name__ = "Integer32"
_FrbPStatDlci_Object = MibTableColumn
frbPStatDlci = _FrbPStatDlci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 1),
    _FrbPStatDlci_Type()
)
frbPStatDlci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatDlci.setStatus("mandatory")
_FrbPStatRxBCnt_Type = Counter32
_FrbPStatRxBCnt_Object = MibTableColumn
frbPStatRxBCnt = _FrbPStatRxBCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 2),
    _FrbPStatRxBCnt_Type()
)
frbPStatRxBCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatRxBCnt.setStatus("mandatory")
_FrbPStatTxBCnt_Type = Counter32
_FrbPStatTxBCnt_Object = MibTableColumn
frbPStatTxBCnt = _FrbPStatTxBCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 3),
    _FrbPStatTxBCnt_Type()
)
frbPStatTxBCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatTxBCnt.setStatus("mandatory")
_FrbPStatRxFCnt_Type = Counter32
_FrbPStatRxFCnt_Object = MibTableColumn
frbPStatRxFCnt = _FrbPStatRxFCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 4),
    _FrbPStatRxFCnt_Type()
)
frbPStatRxFCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatRxFCnt.setStatus("mandatory")
_FrbPStatTxFCnt_Type = Counter32
_FrbPStatTxFCnt_Object = MibTableColumn
frbPStatTxFCnt = _FrbPStatTxFCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 5),
    _FrbPStatTxFCnt_Type()
)
frbPStatTxFCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatTxFCnt.setStatus("mandatory")
_FrbPStatRxBRate_Type = Gauge32
_FrbPStatRxBRate_Object = MibTableColumn
frbPStatRxBRate = _FrbPStatRxBRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 6),
    _FrbPStatRxBRate_Type()
)
frbPStatRxBRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatRxBRate.setStatus("mandatory")
_FrbPStatTxBRate_Type = Gauge32
_FrbPStatTxBRate_Object = MibTableColumn
frbPStatTxBRate = _FrbPStatTxBRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 7),
    _FrbPStatTxBRate_Type()
)
frbPStatTxBRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatTxBRate.setStatus("mandatory")
_FrbPStatRxFRate_Type = Gauge32
_FrbPStatRxFRate_Object = MibTableColumn
frbPStatRxFRate = _FrbPStatRxFRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 8),
    _FrbPStatRxFRate_Type()
)
frbPStatRxFRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatRxFRate.setStatus("mandatory")
_FrbPStatTxFRate_Type = Gauge32
_FrbPStatTxFRate_Object = MibTableColumn
frbPStatTxFRate = _FrbPStatTxFRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 9),
    _FrbPStatTxFRate_Type()
)
frbPStatTxFRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatTxFRate.setStatus("mandatory")
_FrbPStatDERxF_Type = Counter32
_FrbPStatDERxF_Object = MibTableColumn
frbPStatDERxF = _FrbPStatDERxF_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 10),
    _FrbPStatDERxF_Type()
)
frbPStatDERxF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatDERxF.setStatus("mandatory")
_FrbPStatDisRxF_Type = Counter32
_FrbPStatDisRxF_Object = MibTableColumn
frbPStatDisRxF = _FrbPStatDisRxF_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 11),
    _FrbPStatDisRxF_Type()
)
frbPStatDisRxF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatDisRxF.setStatus("mandatory")
_FrbPStatPvcStat_Type = Hex
_FrbPStatPvcStat_Object = MibTableColumn
frbPStatPvcStat = _FrbPStatPvcStat_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 12),
    _FrbPStatPvcStat_Type()
)
frbPStatPvcStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatPvcStat.setStatus("mandatory")
_FrbPStatLinkState_Type = Hex
_FrbPStatLinkState_Object = MibTableColumn
frbPStatLinkState = _FrbPStatLinkState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 13),
    _FrbPStatLinkState_Type()
)
frbPStatLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatLinkState.setStatus("mandatory")
_FrbPStatLocSeq_Type = Integer32
_FrbPStatLocSeq_Object = MibTableColumn
frbPStatLocSeq = _FrbPStatLocSeq_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 14),
    _FrbPStatLocSeq_Type()
)
frbPStatLocSeq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatLocSeq.setStatus("mandatory")
_FrbPStatLocAck_Type = Integer32
_FrbPStatLocAck_Object = MibTableColumn
frbPStatLocAck = _FrbPStatLocAck_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 15),
    _FrbPStatLocAck_Type()
)
frbPStatLocAck.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatLocAck.setStatus("mandatory")
_FrbPStatLocStat_Type = Integer32
_FrbPStatLocStat_Object = MibTableColumn
frbPStatLocStat = _FrbPStatLocStat_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 16),
    _FrbPStatLocStat_Type()
)
frbPStatLocStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatLocStat.setStatus("mandatory")
_FrbPStatLocStartT_Type = Integer32
_FrbPStatLocStartT_Object = MibTableColumn
frbPStatLocStartT = _FrbPStatLocStartT_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 17),
    _FrbPStatLocStartT_Type()
)
frbPStatLocStartT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatLocStartT.setStatus("mandatory")
_FrbPStatLocErrThr_Type = Counter32
_FrbPStatLocErrThr_Object = MibTableColumn
frbPStatLocErrThr = _FrbPStatLocErrThr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 18),
    _FrbPStatLocErrThr_Type()
)
frbPStatLocErrThr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatLocErrThr.setStatus("mandatory")
_FrbPStatLocMec_Type = Counter32
_FrbPStatLocMec_Object = MibTableColumn
frbPStatLocMec = _FrbPStatLocMec_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 19),
    _FrbPStatLocMec_Type()
)
frbPStatLocMec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatLocMec.setStatus("mandatory")
_FrbPStatLocPoll_Type = Counter32
_FrbPStatLocPoll_Object = MibTableColumn
frbPStatLocPoll = _FrbPStatLocPoll_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 20),
    _FrbPStatLocPoll_Type()
)
frbPStatLocPoll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatLocPoll.setStatus("mandatory")
_FrbPStatRemSeq_Type = Integer32
_FrbPStatRemSeq_Object = MibTableColumn
frbPStatRemSeq = _FrbPStatRemSeq_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 21),
    _FrbPStatRemSeq_Type()
)
frbPStatRemSeq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatRemSeq.setStatus("mandatory")
_FrbPStatRemAck_Type = Integer32
_FrbPStatRemAck_Object = MibTableColumn
frbPStatRemAck = _FrbPStatRemAck_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 22),
    _FrbPStatRemAck_Type()
)
frbPStatRemAck.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatRemAck.setStatus("mandatory")
_FrbPStatRemStat_Type = Integer32
_FrbPStatRemStat_Object = MibTableColumn
frbPStatRemStat = _FrbPStatRemStat_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 23),
    _FrbPStatRemStat_Type()
)
frbPStatRemStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatRemStat.setStatus("mandatory")
_FrbPStatRemStartT_Type = Integer32
_FrbPStatRemStartT_Object = MibTableColumn
frbPStatRemStartT = _FrbPStatRemStartT_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 24),
    _FrbPStatRemStartT_Type()
)
frbPStatRemStartT.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatRemStartT.setStatus("mandatory")
_FrbPStatRemErrThr_Type = Counter32
_FrbPStatRemErrThr_Object = MibTableColumn
frbPStatRemErrThr = _FrbPStatRemErrThr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 25),
    _FrbPStatRemErrThr_Type()
)
frbPStatRemErrThr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatRemErrThr.setStatus("mandatory")
_FrbPStatRemMec_Type = Counter32
_FrbPStatRemMec_Object = MibTableColumn
frbPStatRemMec = _FrbPStatRemMec_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 26),
    _FrbPStatRemMec_Type()
)
frbPStatRemMec.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatRemMec.setStatus("mandatory")
_FrbPStatRemPoll_Type = Counter32
_FrbPStatRemPoll_Object = MibTableColumn
frbPStatRemPoll = _FrbPStatRemPoll_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 27),
    _FrbPStatRemPoll_Type()
)
frbPStatRemPoll.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatRemPoll.setStatus("mandatory")
_FrbPStatLastChangeM2_Type = DateAndTime
_FrbPStatLastChangeM2_Object = MibTableColumn
frbPStatLastChangeM2 = _FrbPStatLastChangeM2_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 5, 1, 29),
    _FrbPStatLastChangeM2_Type()
)
frbPStatLastChangeM2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPStatLastChangeM2.setStatus("mandatory")
_FrbPConfigTable_Object = MibTable
frbPConfigTable = _FrbPConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6)
)
if mibBuilder.loadTexts:
    frbPConfigTable.setStatus("mandatory")
_FrbPConfigEntry_Object = MibTableRow
frbPConfigEntry = _FrbPConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1)
)
frbPConfigEntry.setIndexNames(
    (0, "DV2-MIB", "frbPConfigDlci"),
)
if mibBuilder.loadTexts:
    frbPConfigEntry.setStatus("mandatory")


class _FrbPConfigDlci_Type(Integer32):
    """Custom type frbPConfigDlci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(16, 511),
    )


_FrbPConfigDlci_Type.__name__ = "Integer32"
_FrbPConfigDlci_Object = MibTableColumn
frbPConfigDlci = _FrbPConfigDlci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 1),
    _FrbPConfigDlci_Type()
)
frbPConfigDlci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frbPConfigDlci.setStatus("mandatory")
_FrbPConfigCir_Type = Integer32
_FrbPConfigCir_Object = MibTableColumn
frbPConfigCir = _FrbPConfigCir_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 2),
    _FrbPConfigCir_Type()
)
frbPConfigCir.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frbPConfigCir.setStatus("mandatory")
_FrbPConfigCommitB_Type = Integer32
_FrbPConfigCommitB_Object = MibTableColumn
frbPConfigCommitB = _FrbPConfigCommitB_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 3),
    _FrbPConfigCommitB_Type()
)
frbPConfigCommitB.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frbPConfigCommitB.setStatus("mandatory")
_FrbPConfigExcessB_Type = Integer32
_FrbPConfigExcessB_Object = MibTableColumn
frbPConfigExcessB = _FrbPConfigExcessB_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 4),
    _FrbPConfigExcessB_Type()
)
frbPConfigExcessB.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frbPConfigExcessB.setStatus("mandatory")
_FrbVpi_Type = VirtualPathIdentifier
_FrbVpi_Object = MibTableColumn
frbVpi = _FrbVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 5),
    _FrbVpi_Type()
)
frbVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbVpi.setStatus("mandatory")
_FrbVci_Type = VirtualCircuitIdentifier
_FrbVci_Object = MibTableColumn
frbVci = _FrbVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 6),
    _FrbVci_Type()
)
frbVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbVci.setStatus("mandatory")
_FrbPConfigPriority_Type = Integer32
_FrbPConfigPriority_Object = MibTableColumn
frbPConfigPriority = _FrbPConfigPriority_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 7),
    _FrbPConfigPriority_Type()
)
frbPConfigPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPConfigPriority.setStatus("mandatory")
_FrbPConfigSuba_Type = Integer32
_FrbPConfigSuba_Object = MibTableColumn
frbPConfigSuba = _FrbPConfigSuba_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 8),
    _FrbPConfigSuba_Type()
)
frbPConfigSuba.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPConfigSuba.setStatus("mandatory")
_FrbPConfigSaddr_Type = Integer32
_FrbPConfigSaddr_Object = MibTableColumn
frbPConfigSaddr = _FrbPConfigSaddr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 9),
    _FrbPConfigSaddr_Type()
)
frbPConfigSaddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    frbPConfigSaddr.setStatus("mandatory")


class _FrbPConfigValidity_Type(Integer32):
    """Custom type frbPConfigValidity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_FrbPConfigValidity_Type.__name__ = "Integer32"
_FrbPConfigValidity_Object = MibTableColumn
frbPConfigValidity = _FrbPConfigValidity_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 10),
    _FrbPConfigValidity_Type()
)
frbPConfigValidity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frbPConfigValidity.setStatus("mandatory")


class _FrbPConfigDxivpi_Type(Integer32):
    """Custom type frbPConfigDxivpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_FrbPConfigDxivpi_Type.__name__ = "Integer32"
_FrbPConfigDxivpi_Object = MibTableColumn
frbPConfigDxivpi = _FrbPConfigDxivpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 11),
    _FrbPConfigDxivpi_Type()
)
frbPConfigDxivpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frbPConfigDxivpi.setStatus("mandatory")


class _FrbPConfigDxivci_Type(Integer32):
    """Custom type frbPConfigDxivci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 63),
    )


_FrbPConfigDxivci_Type.__name__ = "Integer32"
_FrbPConfigDxivci_Object = MibTableColumn
frbPConfigDxivci = _FrbPConfigDxivci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 12),
    _FrbPConfigDxivci_Type()
)
frbPConfigDxivci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frbPConfigDxivci.setStatus("mandatory")


class _FrbPConfigDximode_Type(Integer32):
    """Custom type frbPConfigDximode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_FrbPConfigDximode_Type.__name__ = "Integer32"
_FrbPConfigDximode_Object = MibTableColumn
frbPConfigDximode = _FrbPConfigDximode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 9, 6, 1, 13),
    _FrbPConfigDximode_Type()
)
frbPConfigDximode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    frbPConfigDximode.setStatus("mandatory")
_Dv2VcStatus_ObjectIdentity = ObjectIdentity
dv2VcStatus = _Dv2VcStatus_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10)
)
_VcaTable_Object = MibTable
vcaTable = _VcaTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3)
)
if mibBuilder.loadTexts:
    vcaTable.setStatus("mandatory")
_VcaEntry_Object = MibTableRow
vcaEntry = _VcaEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1)
)
vcaEntry.setIndexNames(
    (0, "DV2-MIB", "vcaVpi"),
    (0, "DV2-MIB", "vcaVci"),
)
if mibBuilder.loadTexts:
    vcaEntry.setStatus("mandatory")


class _VcaVpi_Type(Integer32):
    """Custom type vcaVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_VcaVpi_Type.__name__ = "Integer32"
_VcaVpi_Object = MibTableColumn
vcaVpi = _VcaVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 1),
    _VcaVpi_Type()
)
vcaVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaVpi.setStatus("mandatory")


class _VcaVci_Type(Integer32):
    """Custom type vcaVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_VcaVci_Type.__name__ = "Integer32"
_VcaVci_Object = MibTableColumn
vcaVci = _VcaVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 2),
    _VcaVci_Type()
)
vcaVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaVci.setStatus("mandatory")
_VcaTxGCells_Type = Counter32
_VcaTxGCells_Object = MibTableColumn
vcaTxGCells = _VcaTxGCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 3),
    _VcaTxGCells_Type()
)
vcaTxGCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaTxGCells.setStatus("mandatory")
_VcaTxGCellsClp1_Type = Counter32
_VcaTxGCellsClp1_Object = MibTableColumn
vcaTxGCellsClp1 = _VcaTxGCellsClp1_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 4),
    _VcaTxGCellsClp1_Type()
)
vcaTxGCellsClp1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaTxGCellsClp1.setStatus("mandatory")
_VcaRxGCells_Type = Counter32
_VcaRxGCells_Object = MibTableColumn
vcaRxGCells = _VcaRxGCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 5),
    _VcaRxGCells_Type()
)
vcaRxGCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaRxGCells.setStatus("mandatory")
_VcaExcessCells_Type = Counter32
_VcaExcessCells_Object = MibTableColumn
vcaExcessCells = _VcaExcessCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 6),
    _VcaExcessCells_Type()
)
vcaExcessCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaExcessCells.setStatus("mandatory")
_VcaPeakExceeds_Type = Counter32
_VcaPeakExceeds_Object = MibTableColumn
vcaPeakExceeds = _VcaPeakExceeds_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 7),
    _VcaPeakExceeds_Type()
)
vcaPeakExceeds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaPeakExceeds.setStatus("mandatory")
_VcaCellHead_Type = Hex
_VcaCellHead_Object = MibTableColumn
vcaCellHead = _VcaCellHead_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 8),
    _VcaCellHead_Type()
)
vcaCellHead.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaCellHead.setStatus("mandatory")
_VcaCellMask_Type = Hex
_VcaCellMask_Object = MibTableColumn
vcaCellMask = _VcaCellMask_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 9),
    _VcaCellMask_Type()
)
vcaCellMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaCellMask.setStatus("mandatory")
_VcaCellSwitchHead_Type = Hex
_VcaCellSwitchHead_Object = MibTableColumn
vcaCellSwitchHead = _VcaCellSwitchHead_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 10),
    _VcaCellSwitchHead_Type()
)
vcaCellSwitchHead.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaCellSwitchHead.setStatus("mandatory")
_VcaStartTime_Type = Integer32
_VcaStartTime_Object = MibTableColumn
vcaStartTime = _VcaStartTime_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 11),
    _VcaStartTime_Type()
)
vcaStartTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaStartTime.setStatus("mandatory")
_VcaBucketControl_Type = Hex
_VcaBucketControl_Object = MibTableColumn
vcaBucketControl = _VcaBucketControl_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 12),
    _VcaBucketControl_Type()
)
vcaBucketControl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaBucketControl.setStatus("mandatory")
_VcaBucket0CV_Type = Gauge32
_VcaBucket0CV_Object = MibTableColumn
vcaBucket0CV = _VcaBucket0CV_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 13),
    _VcaBucket0CV_Type()
)
vcaBucket0CV.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaBucket0CV.setStatus("mandatory")
_VcaBucket0Max_Type = Gauge32
_VcaBucket0Max_Object = MibTableColumn
vcaBucket0Max = _VcaBucket0Max_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 14),
    _VcaBucket0Max_Type()
)
vcaBucket0Max.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaBucket0Max.setStatus("mandatory")
_VcaBucket0Inc_Type = Integer32
_VcaBucket0Inc_Object = MibTableColumn
vcaBucket0Inc = _VcaBucket0Inc_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 15),
    _VcaBucket0Inc_Type()
)
vcaBucket0Inc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaBucket0Inc.setStatus("mandatory")
_VcaBucket1CV_Type = Gauge32
_VcaBucket1CV_Object = MibTableColumn
vcaBucket1CV = _VcaBucket1CV_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 16),
    _VcaBucket1CV_Type()
)
vcaBucket1CV.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaBucket1CV.setStatus("mandatory")
_VcaBucket1Max_Type = Gauge32
_VcaBucket1Max_Object = MibTableColumn
vcaBucket1Max = _VcaBucket1Max_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 17),
    _VcaBucket1Max_Type()
)
vcaBucket1Max.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaBucket1Max.setStatus("mandatory")
_VcaBucket1Inc_Type = Integer32
_VcaBucket1Inc_Object = MibTableColumn
vcaBucket1Inc = _VcaBucket1Inc_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 18),
    _VcaBucket1Inc_Type()
)
vcaBucket1Inc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaBucket1Inc.setStatus("mandatory")
_VcaBucket2CV_Type = Gauge32
_VcaBucket2CV_Object = MibTableColumn
vcaBucket2CV = _VcaBucket2CV_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 19),
    _VcaBucket2CV_Type()
)
vcaBucket2CV.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaBucket2CV.setStatus("mandatory")
_VcaBucket2Max_Type = Gauge32
_VcaBucket2Max_Object = MibTableColumn
vcaBucket2Max = _VcaBucket2Max_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 20),
    _VcaBucket2Max_Type()
)
vcaBucket2Max.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaBucket2Max.setStatus("mandatory")
_VcaBucket2Inc_Type = Integer32
_VcaBucket2Inc_Object = MibTableColumn
vcaBucket2Inc = _VcaBucket2Inc_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 21),
    _VcaBucket2Inc_Type()
)
vcaBucket2Inc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaBucket2Inc.setStatus("mandatory")
_VcaBucket3CV_Type = Gauge32
_VcaBucket3CV_Object = MibTableColumn
vcaBucket3CV = _VcaBucket3CV_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 22),
    _VcaBucket3CV_Type()
)
vcaBucket3CV.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaBucket3CV.setStatus("mandatory")
_VcaBucket3Max_Type = Gauge32
_VcaBucket3Max_Object = MibTableColumn
vcaBucket3Max = _VcaBucket3Max_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 23),
    _VcaBucket3Max_Type()
)
vcaBucket3Max.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaBucket3Max.setStatus("mandatory")
_VcaBucket3Inc_Type = Integer32
_VcaBucket3Inc_Object = MibTableColumn
vcaBucket3Inc = _VcaBucket3Inc_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 24),
    _VcaBucket3Inc_Type()
)
vcaBucket3Inc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaBucket3Inc.setStatus("mandatory")


class _VcaType_Type(Integer32):
    """Custom type vcaType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              5,
              6,
              9,
              10,
              13,
              14,
              25,
              26,
              29,
              30,
              33,
              34,
              37,
              38,
              41,
              42,
              45,
              46,
              57,
              58,
              61,
              62)
        )
    )
    namedValues = NamedValues(
        *(("ds-mp-bi-pvc", 42),
          ("ds-mp-bi-pvp", 46),
          ("ds-mp-bi-svc", 41),
          ("ds-mp-bi-svp", 45),
          ("ds-mp-uni-pvc", 58),
          ("ds-mp-uni-pvp", 62),
          ("ds-mp-uni-svc", 57),
          ("ds-mp-uni-svp", 61),
          ("ds-pp-pvc", 34),
          ("ds-pp-pvp", 38),
          ("ds-pp-svc", 33),
          ("ds-pp-svp", 37),
          ("mgmt-vc", 3),
          ("sr-mp-bi-pvc", 10),
          ("sr-mp-bi-pvp", 14),
          ("sr-mp-bi-svc", 9),
          ("sr-mp-bi-svp", 13),
          ("sr-mp-uni-pvc", 26),
          ("sr-mp-uni-pvp", 30),
          ("sr-mp-uni-svc", 25),
          ("sr-mp-uni-svp", 29),
          ("sr-pp-pvc", 2),
          ("sr-pp-pvp", 6),
          ("sr-pp-svc", 1),
          ("sr-pp-svp", 5))
    )


_VcaType_Type.__name__ = "Integer32"
_VcaType_Object = MibTableColumn
vcaType = _VcaType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 25),
    _VcaType_Type()
)
vcaType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaType.setStatus("mandatory")
_VcaDstSlot_Type = Integer32
_VcaDstSlot_Object = MibTableColumn
vcaDstSlot = _VcaDstSlot_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 26),
    _VcaDstSlot_Type()
)
vcaDstSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaDstSlot.setStatus("mandatory")
_VcaDstLink_Type = Integer32
_VcaDstLink_Object = MibTableColumn
vcaDstLink = _VcaDstLink_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 27),
    _VcaDstLink_Type()
)
vcaDstLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaDstLink.setStatus("mandatory")
_VcaDstVpi_Type = Integer32
_VcaDstVpi_Object = MibTableColumn
vcaDstVpi = _VcaDstVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 28),
    _VcaDstVpi_Type()
)
vcaDstVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaDstVpi.setStatus("mandatory")
_VcaDstVci_Type = Integer32
_VcaDstVci_Object = MibTableColumn
vcaDstVci = _VcaDstVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 29),
    _VcaDstVci_Type()
)
vcaDstVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaDstVci.setStatus("mandatory")
_VcaInternalVpi_Type = Integer32
_VcaInternalVpi_Object = MibTableColumn
vcaInternalVpi = _VcaInternalVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 30),
    _VcaInternalVpi_Type()
)
vcaInternalVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaInternalVpi.setStatus("mandatory")
_VcaInternalVci_Type = Integer32
_VcaInternalVci_Object = MibTableColumn
vcaInternalVci = _VcaInternalVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 3, 1, 31),
    _VcaInternalVci_Type()
)
vcaInternalVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcaInternalVci.setStatus("mandatory")
_VcbTable_Object = MibTable
vcbTable = _VcbTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4)
)
if mibBuilder.loadTexts:
    vcbTable.setStatus("mandatory")
_VcbEntry_Object = MibTableRow
vcbEntry = _VcbEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1)
)
vcbEntry.setIndexNames(
    (0, "DV2-MIB", "vcbVpi"),
    (0, "DV2-MIB", "vcbVci"),
)
if mibBuilder.loadTexts:
    vcbEntry.setStatus("mandatory")


class _VcbVpi_Type(Integer32):
    """Custom type vcbVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 4095),
    )


_VcbVpi_Type.__name__ = "Integer32"
_VcbVpi_Object = MibTableColumn
vcbVpi = _VcbVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 1),
    _VcbVpi_Type()
)
vcbVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbVpi.setStatus("mandatory")


class _VcbVci_Type(Integer32):
    """Custom type vcbVci based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_VcbVci_Type.__name__ = "Integer32"
_VcbVci_Object = MibTableColumn
vcbVci = _VcbVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 2),
    _VcbVci_Type()
)
vcbVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbVci.setStatus("mandatory")
_VcbTxGCells_Type = Counter32
_VcbTxGCells_Object = MibTableColumn
vcbTxGCells = _VcbTxGCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 3),
    _VcbTxGCells_Type()
)
vcbTxGCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbTxGCells.setStatus("mandatory")
_VcbTxGCellsClp1_Type = Counter32
_VcbTxGCellsClp1_Object = MibTableColumn
vcbTxGCellsClp1 = _VcbTxGCellsClp1_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 4),
    _VcbTxGCellsClp1_Type()
)
vcbTxGCellsClp1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbTxGCellsClp1.setStatus("mandatory")
_VcbRxGCells_Type = Counter32
_VcbRxGCells_Object = MibTableColumn
vcbRxGCells = _VcbRxGCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 5),
    _VcbRxGCells_Type()
)
vcbRxGCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbRxGCells.setStatus("mandatory")
_VcbExcessCells_Type = Counter32
_VcbExcessCells_Object = MibTableColumn
vcbExcessCells = _VcbExcessCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 6),
    _VcbExcessCells_Type()
)
vcbExcessCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbExcessCells.setStatus("mandatory")
_VcbPeakExceeds_Type = Counter32
_VcbPeakExceeds_Object = MibTableColumn
vcbPeakExceeds = _VcbPeakExceeds_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 7),
    _VcbPeakExceeds_Type()
)
vcbPeakExceeds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbPeakExceeds.setStatus("mandatory")
_VcbCellHead_Type = Hex
_VcbCellHead_Object = MibTableColumn
vcbCellHead = _VcbCellHead_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 8),
    _VcbCellHead_Type()
)
vcbCellHead.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbCellHead.setStatus("mandatory")
_VcbCellMask_Type = Hex
_VcbCellMask_Object = MibTableColumn
vcbCellMask = _VcbCellMask_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 9),
    _VcbCellMask_Type()
)
vcbCellMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbCellMask.setStatus("mandatory")
_VcbCellSwitchHead_Type = Hex
_VcbCellSwitchHead_Object = MibTableColumn
vcbCellSwitchHead = _VcbCellSwitchHead_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 10),
    _VcbCellSwitchHead_Type()
)
vcbCellSwitchHead.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbCellSwitchHead.setStatus("mandatory")
_VcbStartTime_Type = Integer32
_VcbStartTime_Object = MibTableColumn
vcbStartTime = _VcbStartTime_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 11),
    _VcbStartTime_Type()
)
vcbStartTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbStartTime.setStatus("mandatory")
_VcbBucketControl_Type = Hex
_VcbBucketControl_Object = MibTableColumn
vcbBucketControl = _VcbBucketControl_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 12),
    _VcbBucketControl_Type()
)
vcbBucketControl.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbBucketControl.setStatus("mandatory")
_VcbBucket0CV_Type = Gauge32
_VcbBucket0CV_Object = MibTableColumn
vcbBucket0CV = _VcbBucket0CV_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 13),
    _VcbBucket0CV_Type()
)
vcbBucket0CV.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbBucket0CV.setStatus("mandatory")
_VcbBucket0Max_Type = Gauge32
_VcbBucket0Max_Object = MibTableColumn
vcbBucket0Max = _VcbBucket0Max_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 14),
    _VcbBucket0Max_Type()
)
vcbBucket0Max.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbBucket0Max.setStatus("mandatory")
_VcbBucket0Inc_Type = Integer32
_VcbBucket0Inc_Object = MibTableColumn
vcbBucket0Inc = _VcbBucket0Inc_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 15),
    _VcbBucket0Inc_Type()
)
vcbBucket0Inc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbBucket0Inc.setStatus("mandatory")
_VcbBucket1CV_Type = Gauge32
_VcbBucket1CV_Object = MibTableColumn
vcbBucket1CV = _VcbBucket1CV_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 16),
    _VcbBucket1CV_Type()
)
vcbBucket1CV.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbBucket1CV.setStatus("mandatory")
_VcbBucket1Max_Type = Gauge32
_VcbBucket1Max_Object = MibTableColumn
vcbBucket1Max = _VcbBucket1Max_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 17),
    _VcbBucket1Max_Type()
)
vcbBucket1Max.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbBucket1Max.setStatus("mandatory")
_VcbBucket1Inc_Type = Integer32
_VcbBucket1Inc_Object = MibTableColumn
vcbBucket1Inc = _VcbBucket1Inc_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 18),
    _VcbBucket1Inc_Type()
)
vcbBucket1Inc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbBucket1Inc.setStatus("mandatory")
_VcbBucket2CV_Type = Gauge32
_VcbBucket2CV_Object = MibTableColumn
vcbBucket2CV = _VcbBucket2CV_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 19),
    _VcbBucket2CV_Type()
)
vcbBucket2CV.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbBucket2CV.setStatus("mandatory")
_VcbBucket2Max_Type = Gauge32
_VcbBucket2Max_Object = MibTableColumn
vcbBucket2Max = _VcbBucket2Max_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 20),
    _VcbBucket2Max_Type()
)
vcbBucket2Max.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbBucket2Max.setStatus("mandatory")
_VcbBucket2Inc_Type = Integer32
_VcbBucket2Inc_Object = MibTableColumn
vcbBucket2Inc = _VcbBucket2Inc_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 21),
    _VcbBucket2Inc_Type()
)
vcbBucket2Inc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbBucket2Inc.setStatus("mandatory")
_VcbBucket3CV_Type = Gauge32
_VcbBucket3CV_Object = MibTableColumn
vcbBucket3CV = _VcbBucket3CV_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 22),
    _VcbBucket3CV_Type()
)
vcbBucket3CV.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbBucket3CV.setStatus("mandatory")
_VcbBucket3Max_Type = Gauge32
_VcbBucket3Max_Object = MibTableColumn
vcbBucket3Max = _VcbBucket3Max_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 23),
    _VcbBucket3Max_Type()
)
vcbBucket3Max.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbBucket3Max.setStatus("mandatory")
_VcbBucket3Inc_Type = Integer32
_VcbBucket3Inc_Object = MibTableColumn
vcbBucket3Inc = _VcbBucket3Inc_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 24),
    _VcbBucket3Inc_Type()
)
vcbBucket3Inc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbBucket3Inc.setStatus("mandatory")


class _VcbType_Type(Integer32):
    """Custom type vcbType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              5,
              6,
              9,
              10,
              13,
              14,
              25,
              26,
              29,
              30,
              33,
              34,
              37,
              38,
              41,
              42,
              45,
              46,
              57,
              58,
              61,
              62)
        )
    )
    namedValues = NamedValues(
        *(("ds-mp-bi-pvc", 42),
          ("ds-mp-bi-pvp", 46),
          ("ds-mp-bi-svc", 41),
          ("ds-mp-bi-svp", 45),
          ("ds-mp-uni-pvc", 58),
          ("ds-mp-uni-pvp", 62),
          ("ds-mp-uni-svc", 57),
          ("ds-mp-uni-svp", 61),
          ("ds-pp-pvc", 34),
          ("ds-pp-pvp", 38),
          ("ds-pp-svc", 33),
          ("ds-pp-svp", 37),
          ("mgmt-vc", 3),
          ("sr-mp-bi-pvc", 10),
          ("sr-mp-bi-pvp", 14),
          ("sr-mp-bi-svc", 9),
          ("sr-mp-bi-svp", 13),
          ("sr-mp-uni-pvc", 26),
          ("sr-mp-uni-pvp", 30),
          ("sr-mp-uni-svc", 25),
          ("sr-mp-uni-svp", 29),
          ("sr-pp-pvc", 2),
          ("sr-pp-pvp", 6),
          ("sr-pp-svc", 1),
          ("sr-pp-svp", 5))
    )


_VcbType_Type.__name__ = "Integer32"
_VcbType_Object = MibTableColumn
vcbType = _VcbType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 25),
    _VcbType_Type()
)
vcbType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbType.setStatus("mandatory")
_VcbDstSlot_Type = Integer32
_VcbDstSlot_Object = MibTableColumn
vcbDstSlot = _VcbDstSlot_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 26),
    _VcbDstSlot_Type()
)
vcbDstSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbDstSlot.setStatus("mandatory")
_VcbDstLink_Type = Integer32
_VcbDstLink_Object = MibTableColumn
vcbDstLink = _VcbDstLink_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 27),
    _VcbDstLink_Type()
)
vcbDstLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbDstLink.setStatus("mandatory")
_VcbDstVpi_Type = Integer32
_VcbDstVpi_Object = MibTableColumn
vcbDstVpi = _VcbDstVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 28),
    _VcbDstVpi_Type()
)
vcbDstVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbDstVpi.setStatus("mandatory")
_VcbDstVci_Type = Integer32
_VcbDstVci_Object = MibTableColumn
vcbDstVci = _VcbDstVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 29),
    _VcbDstVci_Type()
)
vcbDstVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbDstVci.setStatus("mandatory")
_VcbInternalVpi_Type = Integer32
_VcbInternalVpi_Object = MibTableColumn
vcbInternalVpi = _VcbInternalVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 30),
    _VcbInternalVpi_Type()
)
vcbInternalVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbInternalVpi.setStatus("mandatory")
_VcbInternalVci_Type = Integer32
_VcbInternalVci_Object = MibTableColumn
vcbInternalVci = _VcbInternalVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 4, 1, 31),
    _VcbInternalVci_Type()
)
vcbInternalVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vcbInternalVci.setStatus("mandatory")
_XpStatTable_Object = MibTable
xpStatTable = _XpStatTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5)
)
if mibBuilder.loadTexts:
    xpStatTable.setStatus("mandatory")
_XpStatEntry_Object = MibTableRow
xpStatEntry = _XpStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1)
)
xpStatEntry.setIndexNames(
    (0, "DV2-MIB", "xpIFace"),
)
if mibBuilder.loadTexts:
    xpStatEntry.setStatus("mandatory")


class _XpIFace_Type(Integer32):
    """Custom type xpIFace based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_XpIFace_Type.__name__ = "Integer32"
_XpIFace_Object = MibTableColumn
xpIFace = _XpIFace_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 1),
    _XpIFace_Type()
)
xpIFace.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xpIFace.setStatus("mandatory")
_XpRXCells_Type = Counter32
_XpRXCells_Object = MibTableColumn
xpRXCells = _XpRXCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 2),
    _XpRXCells_Type()
)
xpRXCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xpRXCells.setStatus("mandatory")
_XpTXCells_Type = Counter32
_XpTXCells_Object = MibTableColumn
xpTXCells = _XpTXCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 3),
    _XpTXCells_Type()
)
xpTXCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xpTXCells.setStatus("mandatory")
_XpBadVpiVci_Type = Counter32
_XpBadVpiVci_Object = MibTableColumn
xpBadVpiVci = _XpBadVpiVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 4),
    _XpBadVpiVci_Type()
)
xpBadVpiVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xpBadVpiVci.setStatus("mandatory")
_XpRxOverflow_Type = Counter32
_XpRxOverflow_Object = MibTableColumn
xpRxOverflow = _XpRxOverflow_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 5),
    _XpRxOverflow_Type()
)
xpRxOverflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xpRxOverflow.setStatus("mandatory")
_XpTxHighPrOver_Type = Counter32
_XpTxHighPrOver_Object = MibTableColumn
xpTxHighPrOver = _XpTxHighPrOver_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 6),
    _XpTxHighPrOver_Type()
)
xpTxHighPrOver.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xpTxHighPrOver.setStatus("mandatory")
_XpTxLowPrOver_Type = Counter32
_XpTxLowPrOver_Object = MibTableColumn
xpTxLowPrOver = _XpTxLowPrOver_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 7),
    _XpTxLowPrOver_Type()
)
xpTxLowPrOver.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xpTxLowPrOver.setStatus("mandatory")
_XpInputOverflow_Type = Counter32
_XpInputOverflow_Object = MibTableColumn
xpInputOverflow = _XpInputOverflow_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 8),
    _XpInputOverflow_Type()
)
xpInputOverflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xpInputOverflow.setStatus("mandatory")
_XpDocErrors_Type = Counter32
_XpDocErrors_Object = MibTableColumn
xpDocErrors = _XpDocErrors_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 9),
    _XpDocErrors_Type()
)
xpDocErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xpDocErrors.setStatus("mandatory")
_XpLowPriorityFifo_Type = Counter32
_XpLowPriorityFifo_Object = MibTableColumn
xpLowPriorityFifo = _XpLowPriorityFifo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 10),
    _XpLowPriorityFifo_Type()
)
xpLowPriorityFifo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xpLowPriorityFifo.setStatus("mandatory")
_XpEgDiscCells_Type = Counter32
_XpEgDiscCells_Object = MibTableColumn
xpEgDiscCells = _XpEgDiscCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 11),
    _XpEgDiscCells_Type()
)
xpEgDiscCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xpEgDiscCells.setStatus("mandatory")
_XpIgDiscCells_Type = Counter32
_XpIgDiscCells_Object = MibTableColumn
xpIgDiscCells = _XpIgDiscCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 10, 5, 1, 12),
    _XpIgDiscCells_Type()
)
xpIgDiscCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    xpIgDiscCells.setStatus("mandatory")
_Dv2PLPP_ObjectIdentity = ObjectIdentity
dv2PLPP = _Dv2PLPP_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11)
)
_PlppCTable_Object = MibTable
plppCTable = _PlppCTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1)
)
if mibBuilder.loadTexts:
    plppCTable.setStatus("mandatory")
_PlppCEntry_Object = MibTableRow
plppCEntry = _PlppCEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1)
)
plppCEntry.setIndexNames(
    (0, "DV2-MIB", "plppCLinkNo"),
)
if mibBuilder.loadTexts:
    plppCEntry.setStatus("mandatory")


class _PlppCLinkNo_Type(Integer32):
    """Custom type plppCLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_PlppCLinkNo_Type.__name__ = "Integer32"
_PlppCLinkNo_Object = MibTableColumn
plppCLinkNo = _PlppCLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 1),
    _PlppCLinkNo_Type()
)
plppCLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppCLinkNo.setStatus("mandatory")


class _PlppCLinkEnab_Type(Integer32):
    """Custom type plppCLinkEnab based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppCLinkEnab_Type.__name__ = "Integer32"
_PlppCLinkEnab_Object = MibTableColumn
plppCLinkEnab = _PlppCLinkEnab_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 2),
    _PlppCLinkEnab_Type()
)
plppCLinkEnab.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppCLinkEnab.setStatus("mandatory")


class _PlppCCPLCPMode_Type(Integer32):
    """Custom type plppCCPLCPMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("ds1", 4),
          ("ds3", 5),
          ("e1", 2),
          ("g751-e3", 3),
          ("g832-e3", 6),
          ("none", 1))
    )


_PlppCCPLCPMode_Type.__name__ = "Integer32"
_PlppCCPLCPMode_Object = MibTableColumn
plppCCPLCPMode = _PlppCCPLCPMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 3),
    _PlppCCPLCPMode_Type()
)
plppCCPLCPMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppCCPLCPMode.setStatus("mandatory")


class _PlppCDS3Framer_Type(Integer32):
    """Custom type plppCDS3Framer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppCDS3Framer_Type.__name__ = "Integer32"
_PlppCDS3Framer_Object = MibTableColumn
plppCDS3Framer = _PlppCDS3Framer_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 4),
    _PlppCDS3Framer_Type()
)
plppCDS3Framer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppCDS3Framer.setStatus("mandatory")


class _PlppCScrambler_Type(Integer32):
    """Custom type plppCScrambler based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppCScrambler_Type.__name__ = "Integer32"
_PlppCScrambler_Object = MibTableColumn
plppCScrambler = _PlppCScrambler_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 5),
    _PlppCScrambler_Type()
)
plppCScrambler.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppCScrambler.setStatus("mandatory")


class _PlppC0x55_Type(Integer32):
    """Custom type plppC0x55 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppC0x55_Type.__name__ = "Integer32"
_PlppC0x55_Object = MibTableColumn
plppC0x55 = _PlppC0x55_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 6),
    _PlppC0x55_Type()
)
plppC0x55.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppC0x55.setStatus("mandatory")


class _PlppCCLine_Type(Integer32):
    """Custom type plppCCLine based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ignored", 2),
          ("processed", 1))
    )


_PlppCCLine_Type.__name__ = "Integer32"
_PlppCCLine_Object = MibTableColumn
plppCCLine = _PlppCCLine_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 7),
    _PlppCCLine_Type()
)
plppCCLine.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppCCLine.setStatus("mandatory")


class _PlppCLoopback_Type(Integer32):
    """Custom type plppCLoopback based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppCLoopback_Type.__name__ = "Integer32"
_PlppCLoopback_Object = MibTableColumn
plppCLoopback = _PlppCLoopback_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 8),
    _PlppCLoopback_Type()
)
plppCLoopback.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppCLoopback.setStatus("mandatory")


class _PlppCSmdsMode_Type(Integer32):
    """Custom type plppCSmdsMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppCSmdsMode_Type.__name__ = "Integer32"
_PlppCSmdsMode_Object = MibTableColumn
plppCSmdsMode = _PlppCSmdsMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 12),
    _PlppCSmdsMode_Type()
)
plppCSmdsMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppCSmdsMode.setStatus("mandatory")


class _PlppCPloadTypeLab_Type(Integer32):
    """Custom type plppCPloadTypeLab based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 7),
    )


_PlppCPloadTypeLab_Type.__name__ = "Integer32"
_PlppCPloadTypeLab_Object = MibTableColumn
plppCPloadTypeLab = _PlppCPloadTypeLab_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 13),
    _PlppCPloadTypeLab_Type()
)
plppCPloadTypeLab.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppCPloadTypeLab.setStatus("mandatory")


class _PlppCTxTrlTrcIdLen_Type(Integer32):
    """Custom type plppCTxTrlTrcIdLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(16,
              64)
        )
    )
    namedValues = NamedValues(
        *(("l16", 16),
          ("l64", 64))
    )


_PlppCTxTrlTrcIdLen_Type.__name__ = "Integer32"
_PlppCTxTrlTrcIdLen_Object = MibTableColumn
plppCTxTrlTrcIdLen = _PlppCTxTrlTrcIdLen_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 14),
    _PlppCTxTrlTrcIdLen_Type()
)
plppCTxTrlTrcIdLen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppCTxTrlTrcIdLen.setStatus("mandatory")


class _PlppCTxTrcId_Type(PhysAddress):
    """Custom type plppCTxTrcId based on PhysAddress"""
    subtypeSpec = PhysAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 64),
    )


_PlppCTxTrcId_Type.__name__ = "PhysAddress"
_PlppCTxTrcId_Object = MibTableColumn
plppCTxTrcId = _PlppCTxTrcId_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 15),
    _PlppCTxTrcId_Type()
)
plppCTxTrcId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppCTxTrcId.setStatus("mandatory")


class _PlppCRxExTrcId_Type(PhysAddress):
    """Custom type plppCRxExTrcId based on PhysAddress"""
    subtypeSpec = PhysAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 64),
    )


_PlppCRxExTrcId_Type.__name__ = "PhysAddress"
_PlppCRxExTrcId_Object = MibTableColumn
plppCRxExTrcId = _PlppCRxExTrcId_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 1, 1, 16),
    _PlppCRxExTrcId_Type()
)
plppCRxExTrcId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppCRxExTrcId.setStatus("mandatory")
_PlppSTable_Object = MibTable
plppSTable = _PlppSTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2)
)
if mibBuilder.loadTexts:
    plppSTable.setStatus("mandatory")
_PlppSEntry_Object = MibTableRow
plppSEntry = _PlppSEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1)
)
plppSEntry.setIndexNames(
    (0, "DV2-MIB", "plppSLinkNo"),
)
if mibBuilder.loadTexts:
    plppSEntry.setStatus("mandatory")


class _PlppSLinkNo_Type(Integer32):
    """Custom type plppSLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_PlppSLinkNo_Type.__name__ = "Integer32"
_PlppSLinkNo_Object = MibTableColumn
plppSLinkNo = _PlppSLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 1),
    _PlppSLinkNo_Type()
)
plppSLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppSLinkNo.setStatus("mandatory")


class _PlppSCLines_Type(Integer32):
    """Custom type plppSCLines based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_PlppSCLines_Type.__name__ = "Integer32"
_PlppSCLines_Object = MibTableColumn
plppSCLines = _PlppSCLines_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 2),
    _PlppSCLines_Type()
)
plppSCLines.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppSCLines.setStatus("mandatory")


class _PlppSTXclock_Type(Integer32):
    """Custom type plppSTXclock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_PlppSTXclock_Type.__name__ = "Integer32"
_PlppSTXclock_Object = MibTableColumn
plppSTXclock = _PlppSTXclock_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 3),
    _PlppSTXclock_Type()
)
plppSTXclock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppSTXclock.setStatus("mandatory")


class _PlppSRXclock_Type(Integer32):
    """Custom type plppSRXclock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_PlppSRXclock_Type.__name__ = "Integer32"
_PlppSRXclock_Object = MibTableColumn
plppSRXclock = _PlppSRXclock_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 4),
    _PlppSRXclock_Type()
)
plppSRXclock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppSRXclock.setStatus("mandatory")
_PlppSTXCells_Type = Counter32
_PlppSTXCells_Object = MibTableColumn
plppSTXCells = _PlppSTXCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 5),
    _PlppSTXCells_Type()
)
plppSTXCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppSTXCells.setStatus("mandatory")
_PlppSRXCells_Type = Counter32
_PlppSRXCells_Object = MibTableColumn
plppSRXCells = _PlppSRXCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 6),
    _PlppSRXCells_Type()
)
plppSRXCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppSRXCells.setStatus("mandatory")
_PlppSHCSErrs_Type = Counter32
_PlppSHCSErrs_Object = MibTableColumn
plppSHCSErrs = _PlppSHCSErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 7),
    _PlppSHCSErrs_Type()
)
plppSHCSErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppSHCSErrs.setStatus("mandatory")
_PlppSFrameErrs_Type = Counter32
_PlppSFrameErrs_Object = MibTableColumn
plppSFrameErrs = _PlppSFrameErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 11),
    _PlppSFrameErrs_Type()
)
plppSFrameErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppSFrameErrs.setStatus("mandatory")
_PlppSBIP8Errs_Type = Counter32
_PlppSBIP8Errs_Object = MibTableColumn
plppSBIP8Errs = _PlppSBIP8Errs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 12),
    _PlppSBIP8Errs_Type()
)
plppSBIP8Errs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppSBIP8Errs.setStatus("mandatory")
_PlppSFEBEErrs_Type = Counter32
_PlppSFEBEErrs_Object = MibTableColumn
plppSFEBEErrs = _PlppSFEBEErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 13),
    _PlppSFEBEErrs_Type()
)
plppSFEBEErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppSFEBEErrs.setStatus("mandatory")
_PlppSSPLRStatus_Type = Integer32
_PlppSSPLRStatus_Object = MibTableColumn
plppSSPLRStatus = _PlppSSPLRStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 14),
    _PlppSSPLRStatus_Type()
)
plppSSPLRStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppSSPLRStatus.setStatus("mandatory")
_PlppSDs3Lcvs_Type = Counter32
_PlppSDs3Lcvs_Object = MibTableColumn
plppSDs3Lcvs = _PlppSDs3Lcvs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 15),
    _PlppSDs3Lcvs_Type()
)
plppSDs3Lcvs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppSDs3Lcvs.setStatus("mandatory")
_PlppSDs3FrameErrs_Type = Counter32
_PlppSDs3FrameErrs_Object = MibTableColumn
plppSDs3FrameErrs = _PlppSDs3FrameErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 16),
    _PlppSDs3FrameErrs_Type()
)
plppSDs3FrameErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppSDs3FrameErrs.setStatus("mandatory")
_PlppSDs3ParityErrs_Type = Counter32
_PlppSDs3ParityErrs_Object = MibTableColumn
plppSDs3ParityErrs = _PlppSDs3ParityErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 17),
    _PlppSDs3ParityErrs_Type()
)
plppSDs3ParityErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppSDs3ParityErrs.setStatus("mandatory")
_PlppSDs3CbitPrtyErrs_Type = Counter32
_PlppSDs3CbitPrtyErrs_Object = MibTableColumn
plppSDs3CbitPrtyErrs = _PlppSDs3CbitPrtyErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 18),
    _PlppSDs3CbitPrtyErrs_Type()
)
plppSDs3CbitPrtyErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppSDs3CbitPrtyErrs.setStatus("mandatory")
_PlppSDs3FEBEErrs_Type = Counter32
_PlppSDs3FEBEErrs_Object = MibTableColumn
plppSDs3FEBEErrs = _PlppSDs3FEBEErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 19),
    _PlppSDs3FEBEErrs_Type()
)
plppSDs3FEBEErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppSDs3FEBEErrs.setStatus("mandatory")


class _PlppSDs3RxAIS_Type(Integer32):
    """Custom type plppSDs3RxAIS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppSDs3RxAIS_Type.__name__ = "Integer32"
_PlppSDs3RxAIS_Object = MibTableColumn
plppSDs3RxAIS = _PlppSDs3RxAIS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 20),
    _PlppSDs3RxAIS_Type()
)
plppSDs3RxAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppSDs3RxAIS.setStatus("mandatory")


class _PlppSDs3RxRedAlarm_Type(Integer32):
    """Custom type plppSDs3RxRedAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppSDs3RxRedAlarm_Type.__name__ = "Integer32"
_PlppSDs3RxRedAlarm_Object = MibTableColumn
plppSDs3RxRedAlarm = _PlppSDs3RxRedAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 21),
    _PlppSDs3RxRedAlarm_Type()
)
plppSDs3RxRedAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppSDs3RxRedAlarm.setStatus("mandatory")


class _PlppSDs3RxYellowAlarm_Type(Integer32):
    """Custom type plppSDs3RxYellowAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppSDs3RxYellowAlarm_Type.__name__ = "Integer32"
_PlppSDs3RxYellowAlarm_Object = MibTableColumn
plppSDs3RxYellowAlarm = _PlppSDs3RxYellowAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 22),
    _PlppSDs3RxYellowAlarm_Type()
)
plppSDs3RxYellowAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppSDs3RxYellowAlarm.setStatus("mandatory")


class _PlppSPLCPRxYellowAlarm_Type(Integer32):
    """Custom type plppSPLCPRxYellowAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppSPLCPRxYellowAlarm_Type.__name__ = "Integer32"
_PlppSPLCPRxYellowAlarm_Object = MibTableColumn
plppSPLCPRxYellowAlarm = _PlppSPLCPRxYellowAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 23),
    _PlppSPLCPRxYellowAlarm_Type()
)
plppSPLCPRxYellowAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppSPLCPRxYellowAlarm.setStatus("mandatory")


class _PlppsRxTrIdMis_Type(Integer32):
    """Custom type plppsRxTrIdMis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppsRxTrIdMis_Type.__name__ = "Integer32"
_PlppsRxTrIdMis_Object = MibTableColumn
plppsRxTrIdMis = _PlppsRxTrIdMis_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 24),
    _PlppsRxTrIdMis_Type()
)
plppsRxTrIdMis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppsRxTrIdMis.setStatus("mandatory")


class _PlppsRxTrIdUnst_Type(Integer32):
    """Custom type plppsRxTrIdUnst based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppsRxTrIdUnst_Type.__name__ = "Integer32"
_PlppsRxTrIdUnst_Object = MibTableColumn
plppsRxTrIdUnst = _PlppsRxTrIdUnst_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 25),
    _PlppsRxTrIdUnst_Type()
)
plppsRxTrIdUnst.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppsRxTrIdUnst.setStatus("mandatory")


class _PlppsRxPloadTypeLabMis_Type(Integer32):
    """Custom type plppsRxPloadTypeLabMis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppsRxPloadTypeLabMis_Type.__name__ = "Integer32"
_PlppsRxPloadTypeLabMis_Object = MibTableColumn
plppsRxPloadTypeLabMis = _PlppsRxPloadTypeLabMis_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 26),
    _PlppsRxPloadTypeLabMis_Type()
)
plppsRxPloadTypeLabMis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppsRxPloadTypeLabMis.setStatus("mandatory")


class _PlppsRxPloadTypeLabUnst_Type(Integer32):
    """Custom type plppsRxPloadTypeLabUnst based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppsRxPloadTypeLabUnst_Type.__name__ = "Integer32"
_PlppsRxPloadTypeLabUnst_Object = MibTableColumn
plppsRxPloadTypeLabUnst = _PlppsRxPloadTypeLabUnst_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 27),
    _PlppsRxPloadTypeLabUnst_Type()
)
plppsRxPloadTypeLabUnst.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppsRxPloadTypeLabUnst.setStatus("mandatory")


class _PlppsRxTrlTrc_Type(PhysAddress):
    """Custom type plppsRxTrlTrc based on PhysAddress"""
    subtypeSpec = PhysAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 64),
    )


_PlppsRxTrlTrc_Type.__name__ = "PhysAddress"
_PlppsRxTrlTrc_Object = MibTableColumn
plppsRxTrlTrc = _PlppsRxTrlTrc_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 2, 1, 28),
    _PlppsRxTrlTrc_Type()
)
plppsRxTrlTrc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppsRxTrlTrc.setStatus("mandatory")
_PlppV2CTable_Object = MibTable
plppV2CTable = _PlppV2CTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3)
)
if mibBuilder.loadTexts:
    plppV2CTable.setStatus("mandatory")
_PlppV2CEntry_Object = MibTableRow
plppV2CEntry = _PlppV2CEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1)
)
plppV2CEntry.setIndexNames(
    (0, "DV2-MIB", "plppV2CLinkNo"),
)
if mibBuilder.loadTexts:
    plppV2CEntry.setStatus("mandatory")


class _PlppV2CLinkNo_Type(Integer32):
    """Custom type plppV2CLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_PlppV2CLinkNo_Type.__name__ = "Integer32"
_PlppV2CLinkNo_Object = MibTableColumn
plppV2CLinkNo = _PlppV2CLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 1),
    _PlppV2CLinkNo_Type()
)
plppV2CLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2CLinkNo.setStatus("mandatory")


class _PlppV2CLinkEnab_Type(Integer32):
    """Custom type plppV2CLinkEnab based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppV2CLinkEnab_Type.__name__ = "Integer32"
_PlppV2CLinkEnab_Object = MibTableColumn
plppV2CLinkEnab = _PlppV2CLinkEnab_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 2),
    _PlppV2CLinkEnab_Type()
)
plppV2CLinkEnab.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppV2CLinkEnab.setStatus("mandatory")


class _PlppV2CCPLCPMode_Type(Integer32):
    """Custom type plppV2CCPLCPMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppV2CCPLCPMode_Type.__name__ = "Integer32"
_PlppV2CCPLCPMode_Object = MibTableColumn
plppV2CCPLCPMode = _PlppV2CCPLCPMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 3),
    _PlppV2CCPLCPMode_Type()
)
plppV2CCPLCPMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppV2CCPLCPMode.setStatus("mandatory")


class _PlppV2CDS3Framer_Type(Integer32):
    """Custom type plppV2CDS3Framer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppV2CDS3Framer_Type.__name__ = "Integer32"
_PlppV2CDS3Framer_Object = MibTableColumn
plppV2CDS3Framer = _PlppV2CDS3Framer_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 4),
    _PlppV2CDS3Framer_Type()
)
plppV2CDS3Framer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppV2CDS3Framer.setStatus("mandatory")


class _PlppV2CScrambler_Type(Integer32):
    """Custom type plppV2CScrambler based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppV2CScrambler_Type.__name__ = "Integer32"
_PlppV2CScrambler_Object = MibTableColumn
plppV2CScrambler = _PlppV2CScrambler_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 5),
    _PlppV2CScrambler_Type()
)
plppV2CScrambler.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppV2CScrambler.setStatus("mandatory")


class _PlppV2C0x55_Type(Integer32):
    """Custom type plppV2C0x55 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppV2C0x55_Type.__name__ = "Integer32"
_PlppV2C0x55_Object = MibTableColumn
plppV2C0x55 = _PlppV2C0x55_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 6),
    _PlppV2C0x55_Type()
)
plppV2C0x55.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppV2C0x55.setStatus("mandatory")


class _PlppV2CLoopback_Type(Integer32):
    """Custom type plppV2CLoopback based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppV2CLoopback_Type.__name__ = "Integer32"
_PlppV2CLoopback_Object = MibTableColumn
plppV2CLoopback = _PlppV2CLoopback_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 7),
    _PlppV2CLoopback_Type()
)
plppV2CLoopback.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppV2CLoopback.setStatus("mandatory")


class _PlppV2CSmdsMode_Type(Integer32):
    """Custom type plppV2CSmdsMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppV2CSmdsMode_Type.__name__ = "Integer32"
_PlppV2CSmdsMode_Object = MibTableColumn
plppV2CSmdsMode = _PlppV2CSmdsMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 8),
    _PlppV2CSmdsMode_Type()
)
plppV2CSmdsMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppV2CSmdsMode.setStatus("mandatory")


class _PlppV2CFrmFmt_Type(Integer32):
    """Custom type plppV2CFrmFmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("c-bit", 1),
          ("clear-channel", 2))
    )


_PlppV2CFrmFmt_Type.__name__ = "Integer32"
_PlppV2CFrmFmt_Object = MibTableColumn
plppV2CFrmFmt = _PlppV2CFrmFmt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 9),
    _PlppV2CFrmFmt_Type()
)
plppV2CFrmFmt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppV2CFrmFmt.setStatus("mandatory")


class _PlppV2CTxAIS_Type(Integer32):
    """Custom type plppV2CTxAIS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppV2CTxAIS_Type.__name__ = "Integer32"
_PlppV2CTxAIS_Object = MibTableColumn
plppV2CTxAIS = _PlppV2CTxAIS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 3, 1, 10),
    _PlppV2CTxAIS_Type()
)
plppV2CTxAIS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppV2CTxAIS.setStatus("mandatory")
_PlppV2STable_Object = MibTable
plppV2STable = _PlppV2STable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4)
)
if mibBuilder.loadTexts:
    plppV2STable.setStatus("mandatory")
_PlppV2SEntry_Object = MibTableRow
plppV2SEntry = _PlppV2SEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1)
)
plppV2SEntry.setIndexNames(
    (0, "DV2-MIB", "plppV2SLinkNo"),
)
if mibBuilder.loadTexts:
    plppV2SEntry.setStatus("mandatory")


class _PlppV2SLinkNo_Type(Integer32):
    """Custom type plppV2SLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_PlppV2SLinkNo_Type.__name__ = "Integer32"
_PlppV2SLinkNo_Object = MibTableColumn
plppV2SLinkNo = _PlppV2SLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 1),
    _PlppV2SLinkNo_Type()
)
plppV2SLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2SLinkNo.setStatus("mandatory")


class _PlppV2STXclock_Type(Integer32):
    """Custom type plppV2STXclock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_PlppV2STXclock_Type.__name__ = "Integer32"
_PlppV2STXclock_Object = MibTableColumn
plppV2STXclock = _PlppV2STXclock_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 2),
    _PlppV2STXclock_Type()
)
plppV2STXclock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2STXclock.setStatus("mandatory")


class _PlppV2SRXclock_Type(Integer32):
    """Custom type plppV2SRXclock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_PlppV2SRXclock_Type.__name__ = "Integer32"
_PlppV2SRXclock_Object = MibTableColumn
plppV2SRXclock = _PlppV2SRXclock_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 3),
    _PlppV2SRXclock_Type()
)
plppV2SRXclock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2SRXclock.setStatus("mandatory")
_PlppV2STXCells_Type = Counter32
_PlppV2STXCells_Object = MibTableColumn
plppV2STXCells = _PlppV2STXCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 4),
    _PlppV2STXCells_Type()
)
plppV2STXCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2STXCells.setStatus("mandatory")
_PlppV2SRXCells_Type = Counter32
_PlppV2SRXCells_Object = MibTableColumn
plppV2SRXCells = _PlppV2SRXCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 5),
    _PlppV2SRXCells_Type()
)
plppV2SRXCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2SRXCells.setStatus("mandatory")
_PlppV2SHCSErrs_Type = Counter32
_PlppV2SHCSErrs_Object = MibTableColumn
plppV2SHCSErrs = _PlppV2SHCSErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 6),
    _PlppV2SHCSErrs_Type()
)
plppV2SHCSErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2SHCSErrs.setStatus("mandatory")
_PlppV2SFrameErrs_Type = Counter32
_PlppV2SFrameErrs_Object = MibTableColumn
plppV2SFrameErrs = _PlppV2SFrameErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 7),
    _PlppV2SFrameErrs_Type()
)
plppV2SFrameErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2SFrameErrs.setStatus("mandatory")
_PlppV2SBIP8Errs_Type = Counter32
_PlppV2SBIP8Errs_Object = MibTableColumn
plppV2SBIP8Errs = _PlppV2SBIP8Errs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 8),
    _PlppV2SBIP8Errs_Type()
)
plppV2SBIP8Errs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2SBIP8Errs.setStatus("mandatory")
_PlppV2SFEBEErrs_Type = Counter32
_PlppV2SFEBEErrs_Object = MibTableColumn
plppV2SFEBEErrs = _PlppV2SFEBEErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 9),
    _PlppV2SFEBEErrs_Type()
)
plppV2SFEBEErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2SFEBEErrs.setStatus("mandatory")


class _PlppV2SSPLRStatus_Type(Integer32):
    """Custom type plppV2SSPLRStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppV2SSPLRStatus_Type.__name__ = "Integer32"
_PlppV2SSPLRStatus_Object = MibTableColumn
plppV2SSPLRStatus = _PlppV2SSPLRStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 10),
    _PlppV2SSPLRStatus_Type()
)
plppV2SSPLRStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2SSPLRStatus.setStatus("mandatory")


class _PlppV2SDs3FrmFmt_Type(Integer32):
    """Custom type plppV2SDs3FrmFmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("c-bit", 1),
          ("clear-channel", 2))
    )


_PlppV2SDs3FrmFmt_Type.__name__ = "Integer32"
_PlppV2SDs3FrmFmt_Object = MibTableColumn
plppV2SDs3FrmFmt = _PlppV2SDs3FrmFmt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 11),
    _PlppV2SDs3FrmFmt_Type()
)
plppV2SDs3FrmFmt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2SDs3FrmFmt.setStatus("mandatory")
_PlppV2SDs3Lcvs_Type = Counter32
_PlppV2SDs3Lcvs_Object = MibTableColumn
plppV2SDs3Lcvs = _PlppV2SDs3Lcvs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 12),
    _PlppV2SDs3Lcvs_Type()
)
plppV2SDs3Lcvs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2SDs3Lcvs.setStatus("mandatory")
_PlppV2SDs3FrameErrs_Type = Counter32
_PlppV2SDs3FrameErrs_Object = MibTableColumn
plppV2SDs3FrameErrs = _PlppV2SDs3FrameErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 13),
    _PlppV2SDs3FrameErrs_Type()
)
plppV2SDs3FrameErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2SDs3FrameErrs.setStatus("mandatory")
_PlppV2SDs3ParityErrs_Type = Counter32
_PlppV2SDs3ParityErrs_Object = MibTableColumn
plppV2SDs3ParityErrs = _PlppV2SDs3ParityErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 14),
    _PlppV2SDs3ParityErrs_Type()
)
plppV2SDs3ParityErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2SDs3ParityErrs.setStatus("mandatory")
_PlppV2SDs3CbitPrtyErrs_Type = Counter32
_PlppV2SDs3CbitPrtyErrs_Object = MibTableColumn
plppV2SDs3CbitPrtyErrs = _PlppV2SDs3CbitPrtyErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 15),
    _PlppV2SDs3CbitPrtyErrs_Type()
)
plppV2SDs3CbitPrtyErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2SDs3CbitPrtyErrs.setStatus("mandatory")
_PlppV2SDs3FEBEErrs_Type = Counter32
_PlppV2SDs3FEBEErrs_Object = MibTableColumn
plppV2SDs3FEBEErrs = _PlppV2SDs3FEBEErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 16),
    _PlppV2SDs3FEBEErrs_Type()
)
plppV2SDs3FEBEErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2SDs3FEBEErrs.setStatus("mandatory")


class _PlppV2SDs3RxAIS_Type(Integer32):
    """Custom type plppV2SDs3RxAIS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppV2SDs3RxAIS_Type.__name__ = "Integer32"
_PlppV2SDs3RxAIS_Object = MibTableColumn
plppV2SDs3RxAIS = _PlppV2SDs3RxAIS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 17),
    _PlppV2SDs3RxAIS_Type()
)
plppV2SDs3RxAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2SDs3RxAIS.setStatus("mandatory")


class _PlppV2SDs3RxRedAlarm_Type(Integer32):
    """Custom type plppV2SDs3RxRedAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppV2SDs3RxRedAlarm_Type.__name__ = "Integer32"
_PlppV2SDs3RxRedAlarm_Object = MibTableColumn
plppV2SDs3RxRedAlarm = _PlppV2SDs3RxRedAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 18),
    _PlppV2SDs3RxRedAlarm_Type()
)
plppV2SDs3RxRedAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2SDs3RxRedAlarm.setStatus("mandatory")


class _PlppV2SDs3RxYellowAlarm_Type(Integer32):
    """Custom type plppV2SDs3RxYellowAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppV2SDs3RxYellowAlarm_Type.__name__ = "Integer32"
_PlppV2SDs3RxYellowAlarm_Object = MibTableColumn
plppV2SDs3RxYellowAlarm = _PlppV2SDs3RxYellowAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 19),
    _PlppV2SDs3RxYellowAlarm_Type()
)
plppV2SDs3RxYellowAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2SDs3RxYellowAlarm.setStatus("mandatory")


class _PlppV2SPLCPRxYellowAlarm_Type(Integer32):
    """Custom type plppV2SPLCPRxYellowAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppV2SPLCPRxYellowAlarm_Type.__name__ = "Integer32"
_PlppV2SPLCPRxYellowAlarm_Object = MibTableColumn
plppV2SPLCPRxYellowAlarm = _PlppV2SPLCPRxYellowAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 20),
    _PlppV2SPLCPRxYellowAlarm_Type()
)
plppV2SPLCPRxYellowAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2SPLCPRxYellowAlarm.setStatus("mandatory")


class _PlppV2SDs3FEACTxmt_Type(Integer32):
    """Custom type plppV2SDs3FEACTxmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("ds3-ais", 3),
          ("ds3-idl", 4),
          ("ds3-los", 1),
          ("ds3-oof", 2),
          ("line-loopback-active", 6),
          ("line-loopback-deactive", 5),
          ("none", 7))
    )


_PlppV2SDs3FEACTxmt_Type.__name__ = "Integer32"
_PlppV2SDs3FEACTxmt_Object = MibTableColumn
plppV2SDs3FEACTxmt = _PlppV2SDs3FEACTxmt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 21),
    _PlppV2SDs3FEACTxmt_Type()
)
plppV2SDs3FEACTxmt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2SDs3FEACTxmt.setStatus("mandatory")


class _PlppV2SRxIDL_Type(Integer32):
    """Custom type plppV2SRxIDL based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppV2SRxIDL_Type.__name__ = "Integer32"
_PlppV2SRxIDL_Object = MibTableColumn
plppV2SRxIDL = _PlppV2SRxIDL_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 22),
    _PlppV2SRxIDL_Type()
)
plppV2SRxIDL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2SRxIDL.setStatus("mandatory")


class _PlppV2SLOC_Type(Integer32):
    """Custom type plppV2SLOC based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppV2SLOC_Type.__name__ = "Integer32"
_PlppV2SLOC_Object = MibTableColumn
plppV2SLOC = _PlppV2SLOC_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 23),
    _PlppV2SLOC_Type()
)
plppV2SLOC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2SLOC.setStatus("mandatory")


class _PlppV2SDs3LPBK_Type(Integer32):
    """Custom type plppV2SDs3LPBK based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppV2SDs3LPBK_Type.__name__ = "Integer32"
_PlppV2SDs3LPBK_Object = MibTableColumn
plppV2SDs3LPBK = _PlppV2SDs3LPBK_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 4, 1, 24),
    _PlppV2SDs3LPBK_Type()
)
plppV2SDs3LPBK.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppV2SDs3LPBK.setStatus("mandatory")
_PlppE1CTable_Object = MibTable
plppE1CTable = _PlppE1CTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5)
)
if mibBuilder.loadTexts:
    plppE1CTable.setStatus("mandatory")
_PlppE1CEntry_Object = MibTableRow
plppE1CEntry = _PlppE1CEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5, 1)
)
plppE1CEntry.setIndexNames(
    (0, "DV2-MIB", "plppE1CLinkNo"),
)
if mibBuilder.loadTexts:
    plppE1CEntry.setStatus("mandatory")


class _PlppE1CLinkNo_Type(Integer32):
    """Custom type plppE1CLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_PlppE1CLinkNo_Type.__name__ = "Integer32"
_PlppE1CLinkNo_Object = MibTableColumn
plppE1CLinkNo = _PlppE1CLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5, 1, 1),
    _PlppE1CLinkNo_Type()
)
plppE1CLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE1CLinkNo.setStatus("mandatory")


class _PlppE1CLinkEnab_Type(Integer32):
    """Custom type plppE1CLinkEnab based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE1CLinkEnab_Type.__name__ = "Integer32"
_PlppE1CLinkEnab_Object = MibTableColumn
plppE1CLinkEnab = _PlppE1CLinkEnab_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5, 1, 2),
    _PlppE1CLinkEnab_Type()
)
plppE1CLinkEnab.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppE1CLinkEnab.setStatus("mandatory")


class _PlppE1CScrambler_Type(Integer32):
    """Custom type plppE1CScrambler based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE1CScrambler_Type.__name__ = "Integer32"
_PlppE1CScrambler_Object = MibTableColumn
plppE1CScrambler = _PlppE1CScrambler_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5, 1, 3),
    _PlppE1CScrambler_Type()
)
plppE1CScrambler.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppE1CScrambler.setStatus("mandatory")


class _PlppE1C0x55_Type(Integer32):
    """Custom type plppE1C0x55 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE1C0x55_Type.__name__ = "Integer32"
_PlppE1C0x55_Object = MibTableColumn
plppE1C0x55 = _PlppE1C0x55_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5, 1, 4),
    _PlppE1C0x55_Type()
)
plppE1C0x55.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppE1C0x55.setStatus("mandatory")


class _PlppE1CSmdsMode_Type(Integer32):
    """Custom type plppE1CSmdsMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE1CSmdsMode_Type.__name__ = "Integer32"
_PlppE1CSmdsMode_Object = MibTableColumn
plppE1CSmdsMode = _PlppE1CSmdsMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5, 1, 5),
    _PlppE1CSmdsMode_Type()
)
plppE1CSmdsMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppE1CSmdsMode.setStatus("mandatory")


class _PlppE1CLpbk_Type(Integer32):
    """Custom type plppE1CLpbk based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE1CLpbk_Type.__name__ = "Integer32"
_PlppE1CLpbk_Object = MibTableColumn
plppE1CLpbk = _PlppE1CLpbk_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 5, 1, 6),
    _PlppE1CLpbk_Type()
)
plppE1CLpbk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppE1CLpbk.setStatus("mandatory")
_PlppE1STable_Object = MibTable
plppE1STable = _PlppE1STable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6)
)
if mibBuilder.loadTexts:
    plppE1STable.setStatus("mandatory")
_PlppE1SEntry_Object = MibTableRow
plppE1SEntry = _PlppE1SEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1)
)
plppE1SEntry.setIndexNames(
    (0, "DV2-MIB", "plppE1SLinkNo"),
)
if mibBuilder.loadTexts:
    plppE1SEntry.setStatus("mandatory")


class _PlppE1SLinkNo_Type(Integer32):
    """Custom type plppE1SLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_PlppE1SLinkNo_Type.__name__ = "Integer32"
_PlppE1SLinkNo_Object = MibTableColumn
plppE1SLinkNo = _PlppE1SLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 1),
    _PlppE1SLinkNo_Type()
)
plppE1SLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE1SLinkNo.setStatus("mandatory")


class _PlppE1STXclock_Type(Integer32):
    """Custom type plppE1STXclock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_PlppE1STXclock_Type.__name__ = "Integer32"
_PlppE1STXclock_Object = MibTableColumn
plppE1STXclock = _PlppE1STXclock_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 2),
    _PlppE1STXclock_Type()
)
plppE1STXclock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE1STXclock.setStatus("mandatory")


class _PlppE1SRXclock_Type(Integer32):
    """Custom type plppE1SRXclock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_PlppE1SRXclock_Type.__name__ = "Integer32"
_PlppE1SRXclock_Object = MibTableColumn
plppE1SRXclock = _PlppE1SRXclock_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 3),
    _PlppE1SRXclock_Type()
)
plppE1SRXclock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE1SRXclock.setStatus("mandatory")
_PlppE1STXCells_Type = Counter32
_PlppE1STXCells_Object = MibTableColumn
plppE1STXCells = _PlppE1STXCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 4),
    _PlppE1STXCells_Type()
)
plppE1STXCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE1STXCells.setStatus("mandatory")
_PlppE1SRXCells_Type = Counter32
_PlppE1SRXCells_Object = MibTableColumn
plppE1SRXCells = _PlppE1SRXCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 5),
    _PlppE1SRXCells_Type()
)
plppE1SRXCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE1SRXCells.setStatus("mandatory")
_PlppE1SHCSErrs_Type = Counter32
_PlppE1SHCSErrs_Object = MibTableColumn
plppE1SHCSErrs = _PlppE1SHCSErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 6),
    _PlppE1SHCSErrs_Type()
)
plppE1SHCSErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE1SHCSErrs.setStatus("mandatory")
_PlppE1SCRCErrs_Type = Counter32
_PlppE1SCRCErrs_Object = MibTableColumn
plppE1SCRCErrs = _PlppE1SCRCErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 7),
    _PlppE1SCRCErrs_Type()
)
plppE1SCRCErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE1SCRCErrs.setStatus("mandatory")
_PlppE1SFrameErrs_Type = Counter32
_PlppE1SFrameErrs_Object = MibTableColumn
plppE1SFrameErrs = _PlppE1SFrameErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 8),
    _PlppE1SFrameErrs_Type()
)
plppE1SFrameErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE1SFrameErrs.setStatus("mandatory")
_PlppE1SFEBEErrs_Type = Counter32
_PlppE1SFEBEErrs_Object = MibTableColumn
plppE1SFEBEErrs = _PlppE1SFEBEErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 9),
    _PlppE1SFEBEErrs_Type()
)
plppE1SFEBEErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE1SFEBEErrs.setStatus("mandatory")
_PlppE1SLcvs_Type = Counter32
_PlppE1SLcvs_Object = MibTableColumn
plppE1SLcvs = _PlppE1SLcvs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 10),
    _PlppE1SLcvs_Type()
)
plppE1SLcvs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE1SLcvs.setStatus("mandatory")


class _PlppE1SRxAIS_Type(Integer32):
    """Custom type plppE1SRxAIS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE1SRxAIS_Type.__name__ = "Integer32"
_PlppE1SRxAIS_Object = MibTableColumn
plppE1SRxAIS = _PlppE1SRxAIS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 11),
    _PlppE1SRxAIS_Type()
)
plppE1SRxAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE1SRxAIS.setStatus("mandatory")


class _PlppE1SRxOOF_Type(Integer32):
    """Custom type plppE1SRxOOF based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE1SRxOOF_Type.__name__ = "Integer32"
_PlppE1SRxOOF_Object = MibTableColumn
plppE1SRxOOF = _PlppE1SRxOOF_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 12),
    _PlppE1SRxOOF_Type()
)
plppE1SRxOOF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE1SRxOOF.setStatus("mandatory")


class _PlppE1SRxLOS_Type(Integer32):
    """Custom type plppE1SRxLOS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE1SRxLOS_Type.__name__ = "Integer32"
_PlppE1SRxLOS_Object = MibTableColumn
plppE1SRxLOS = _PlppE1SRxLOS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 13),
    _PlppE1SRxLOS_Type()
)
plppE1SRxLOS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE1SRxLOS.setStatus("mandatory")


class _PlppE1SRxLOF_Type(Integer32):
    """Custom type plppE1SRxLOF based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE1SRxLOF_Type.__name__ = "Integer32"
_PlppE1SRxLOF_Object = MibTableColumn
plppE1SRxLOF = _PlppE1SRxLOF_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 14),
    _PlppE1SRxLOF_Type()
)
plppE1SRxLOF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE1SRxLOF.setStatus("mandatory")


class _PlppE1SFerf_Type(Integer32):
    """Custom type plppE1SFerf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE1SFerf_Type.__name__ = "Integer32"
_PlppE1SFerf_Object = MibTableColumn
plppE1SFerf = _PlppE1SFerf_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 6, 1, 15),
    _PlppE1SFerf_Type()
)
plppE1SFerf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE1SFerf.setStatus("mandatory")
_PlppE3CTable_Object = MibTable
plppE3CTable = _PlppE3CTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7)
)
if mibBuilder.loadTexts:
    plppE3CTable.setStatus("mandatory")
_PlppE3CEntry_Object = MibTableRow
plppE3CEntry = _PlppE3CEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1)
)
plppE3CEntry.setIndexNames(
    (0, "DV2-MIB", "plppE3CLinkNo"),
)
if mibBuilder.loadTexts:
    plppE3CEntry.setStatus("mandatory")


class _PlppE3CLinkNo_Type(Integer32):
    """Custom type plppE3CLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_PlppE3CLinkNo_Type.__name__ = "Integer32"
_PlppE3CLinkNo_Object = MibTableColumn
plppE3CLinkNo = _PlppE3CLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 1),
    _PlppE3CLinkNo_Type()
)
plppE3CLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3CLinkNo.setStatus("mandatory")


class _PlppE3CLinkEnab_Type(Integer32):
    """Custom type plppE3CLinkEnab based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE3CLinkEnab_Type.__name__ = "Integer32"
_PlppE3CLinkEnab_Object = MibTableColumn
plppE3CLinkEnab = _PlppE3CLinkEnab_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 2),
    _PlppE3CLinkEnab_Type()
)
plppE3CLinkEnab.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppE3CLinkEnab.setStatus("mandatory")


class _PlppE3CFramer_Type(Integer32):
    """Custom type plppE3CFramer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("g751", 2),
          ("g832", 3),
          ("none", 1))
    )


_PlppE3CFramer_Type.__name__ = "Integer32"
_PlppE3CFramer_Object = MibTableColumn
plppE3CFramer = _PlppE3CFramer_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 3),
    _PlppE3CFramer_Type()
)
plppE3CFramer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppE3CFramer.setStatus("mandatory")


class _PlppE3CPLCPMode_Type(Integer32):
    """Custom type plppE3CPLCPMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3)
        )
    )
    namedValues = NamedValues(
        *(("g751", 3),
          ("none", 1))
    )


_PlppE3CPLCPMode_Type.__name__ = "Integer32"
_PlppE3CPLCPMode_Object = MibTableColumn
plppE3CPLCPMode = _PlppE3CPLCPMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 4),
    _PlppE3CPLCPMode_Type()
)
plppE3CPLCPMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppE3CPLCPMode.setStatus("mandatory")


class _PlppE3CScrambler_Type(Integer32):
    """Custom type plppE3CScrambler based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE3CScrambler_Type.__name__ = "Integer32"
_PlppE3CScrambler_Object = MibTableColumn
plppE3CScrambler = _PlppE3CScrambler_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 5),
    _PlppE3CScrambler_Type()
)
plppE3CScrambler.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppE3CScrambler.setStatus("mandatory")


class _PlppE3C0x55_Type(Integer32):
    """Custom type plppE3C0x55 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE3C0x55_Type.__name__ = "Integer32"
_PlppE3C0x55_Object = MibTableColumn
plppE3C0x55 = _PlppE3C0x55_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 6),
    _PlppE3C0x55_Type()
)
plppE3C0x55.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppE3C0x55.setStatus("mandatory")


class _PlppE3CLoopback_Type(Integer32):
    """Custom type plppE3CLoopback based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE3CLoopback_Type.__name__ = "Integer32"
_PlppE3CLoopback_Object = MibTableColumn
plppE3CLoopback = _PlppE3CLoopback_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 7),
    _PlppE3CLoopback_Type()
)
plppE3CLoopback.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppE3CLoopback.setStatus("mandatory")


class _PlppE3CSmdsMode_Type(Integer32):
    """Custom type plppE3CSmdsMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE3CSmdsMode_Type.__name__ = "Integer32"
_PlppE3CSmdsMode_Object = MibTableColumn
plppE3CSmdsMode = _PlppE3CSmdsMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 8),
    _PlppE3CSmdsMode_Type()
)
plppE3CSmdsMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppE3CSmdsMode.setStatus("mandatory")


class _PlppE3CTxmtTimMk_Type(Integer32):
    """Custom type plppE3CTxmtTimMk based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE3CTxmtTimMk_Type.__name__ = "Integer32"
_PlppE3CTxmtTimMk_Object = MibTableColumn
plppE3CTxmtTimMk = _PlppE3CTxmtTimMk_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 9),
    _PlppE3CTxmtTimMk_Type()
)
plppE3CTxmtTimMk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppE3CTxmtTimMk.setStatus("mandatory")


class _PlppE3CPloadTypeLab_Type(Integer32):
    """Custom type plppE3CPloadTypeLab based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            2
        )
    )
    namedValues = NamedValues(
        ("atm", 2)
    )


_PlppE3CPloadTypeLab_Type.__name__ = "Integer32"
_PlppE3CPloadTypeLab_Object = MibTableColumn
plppE3CPloadTypeLab = _PlppE3CPloadTypeLab_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 10),
    _PlppE3CPloadTypeLab_Type()
)
plppE3CPloadTypeLab.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppE3CPloadTypeLab.setStatus("mandatory")


class _PlppE3CTxTrlTrcIdLen_Type(Integer32):
    """Custom type plppE3CTxTrlTrcIdLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            16
        )
    )
    namedValues = NamedValues(
        ("length-16", 16)
    )


_PlppE3CTxTrlTrcIdLen_Type.__name__ = "Integer32"
_PlppE3CTxTrlTrcIdLen_Object = MibTableColumn
plppE3CTxTrlTrcIdLen = _PlppE3CTxTrlTrcIdLen_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 11),
    _PlppE3CTxTrlTrcIdLen_Type()
)
plppE3CTxTrlTrcIdLen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppE3CTxTrlTrcIdLen.setStatus("mandatory")


class _PlppE3CTxTrcIdUH_Type(PhysAddress):
    """Custom type plppE3CTxTrcIdUH based on PhysAddress"""
    subtypeSpec = PhysAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_PlppE3CTxTrcIdUH_Type.__name__ = "PhysAddress"
_PlppE3CTxTrcIdUH_Object = MibTableColumn
plppE3CTxTrcIdUH = _PlppE3CTxTrcIdUH_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 12),
    _PlppE3CTxTrcIdUH_Type()
)
plppE3CTxTrcIdUH.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppE3CTxTrcIdUH.setStatus("mandatory")


class _PlppE3CTxTrcIdLH_Type(PhysAddress):
    """Custom type plppE3CTxTrcIdLH based on PhysAddress"""
    subtypeSpec = PhysAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_PlppE3CTxTrcIdLH_Type.__name__ = "PhysAddress"
_PlppE3CTxTrcIdLH_Object = MibTableColumn
plppE3CTxTrcIdLH = _PlppE3CTxTrcIdLH_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 13),
    _PlppE3CTxTrcIdLH_Type()
)
plppE3CTxTrcIdLH.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppE3CTxTrcIdLH.setStatus("mandatory")


class _PlppE3CRxExTrcIdUH_Type(PhysAddress):
    """Custom type plppE3CRxExTrcIdUH based on PhysAddress"""
    subtypeSpec = PhysAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_PlppE3CRxExTrcIdUH_Type.__name__ = "PhysAddress"
_PlppE3CRxExTrcIdUH_Object = MibTableColumn
plppE3CRxExTrcIdUH = _PlppE3CRxExTrcIdUH_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 14),
    _PlppE3CRxExTrcIdUH_Type()
)
plppE3CRxExTrcIdUH.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppE3CRxExTrcIdUH.setStatus("mandatory")


class _PlppE3CRxExTrcIdLH_Type(PhysAddress):
    """Custom type plppE3CRxExTrcIdLH based on PhysAddress"""
    subtypeSpec = PhysAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(8, 8),
    )


_PlppE3CRxExTrcIdLH_Type.__name__ = "PhysAddress"
_PlppE3CRxExTrcIdLH_Object = MibTableColumn
plppE3CRxExTrcIdLH = _PlppE3CRxExTrcIdLH_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 7, 1, 15),
    _PlppE3CRxExTrcIdLH_Type()
)
plppE3CRxExTrcIdLH.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    plppE3CRxExTrcIdLH.setStatus("mandatory")
_PlppE3STable_Object = MibTable
plppE3STable = _PlppE3STable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8)
)
if mibBuilder.loadTexts:
    plppE3STable.setStatus("mandatory")
_PlppE3SEntry_Object = MibTableRow
plppE3SEntry = _PlppE3SEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1)
)
plppE3SEntry.setIndexNames(
    (0, "DV2-MIB", "plppE3SLinkNo"),
)
if mibBuilder.loadTexts:
    plppE3SEntry.setStatus("mandatory")


class _PlppE3SLinkNo_Type(Integer32):
    """Custom type plppE3SLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_PlppE3SLinkNo_Type.__name__ = "Integer32"
_PlppE3SLinkNo_Object = MibTableColumn
plppE3SLinkNo = _PlppE3SLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 1),
    _PlppE3SLinkNo_Type()
)
plppE3SLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3SLinkNo.setStatus("mandatory")


class _PlppE3STXclock_Type(Integer32):
    """Custom type plppE3STXclock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_PlppE3STXclock_Type.__name__ = "Integer32"
_PlppE3STXclock_Object = MibTableColumn
plppE3STXclock = _PlppE3STXclock_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 2),
    _PlppE3STXclock_Type()
)
plppE3STXclock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3STXclock.setStatus("mandatory")


class _PlppE3SRXclock_Type(Integer32):
    """Custom type plppE3SRXclock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_PlppE3SRXclock_Type.__name__ = "Integer32"
_PlppE3SRXclock_Object = MibTableColumn
plppE3SRXclock = _PlppE3SRXclock_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 3),
    _PlppE3SRXclock_Type()
)
plppE3SRXclock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3SRXclock.setStatus("mandatory")
_PlppE3STXCells_Type = Counter32
_PlppE3STXCells_Object = MibTableColumn
plppE3STXCells = _PlppE3STXCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 4),
    _PlppE3STXCells_Type()
)
plppE3STXCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3STXCells.setStatus("mandatory")
_PlppE3SRXCells_Type = Counter32
_PlppE3SRXCells_Object = MibTableColumn
plppE3SRXCells = _PlppE3SRXCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 5),
    _PlppE3SRXCells_Type()
)
plppE3SRXCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3SRXCells.setStatus("mandatory")
_PlppE3SHCSErrs_Type = Counter32
_PlppE3SHCSErrs_Object = MibTableColumn
plppE3SHCSErrs = _PlppE3SHCSErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 6),
    _PlppE3SHCSErrs_Type()
)
plppE3SHCSErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3SHCSErrs.setStatus("mandatory")
_PlppE3SE3FrameErrs_Type = Counter32
_PlppE3SE3FrameErrs_Object = MibTableColumn
plppE3SE3FrameErrs = _PlppE3SE3FrameErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 7),
    _PlppE3SE3FrameErrs_Type()
)
plppE3SE3FrameErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3SE3FrameErrs.setStatus("mandatory")
_PlppE3SPLCPFrameErrs_Type = Counter32
_PlppE3SPLCPFrameErrs_Object = MibTableColumn
plppE3SPLCPFrameErrs = _PlppE3SPLCPFrameErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 8),
    _PlppE3SPLCPFrameErrs_Type()
)
plppE3SPLCPFrameErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3SPLCPFrameErrs.setStatus("mandatory")
_PlppE3SBIP8Errs_Type = Counter32
_PlppE3SBIP8Errs_Object = MibTableColumn
plppE3SBIP8Errs = _PlppE3SBIP8Errs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 9),
    _PlppE3SBIP8Errs_Type()
)
plppE3SBIP8Errs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3SBIP8Errs.setStatus("mandatory")
_PlppE3SFEBEErrs_Type = Counter32
_PlppE3SFEBEErrs_Object = MibTableColumn
plppE3SFEBEErrs = _PlppE3SFEBEErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 10),
    _PlppE3SFEBEErrs_Type()
)
plppE3SFEBEErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3SFEBEErrs.setStatus("mandatory")
_PlppE3SLcvs_Type = Counter32
_PlppE3SLcvs_Object = MibTableColumn
plppE3SLcvs = _PlppE3SLcvs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 11),
    _PlppE3SLcvs_Type()
)
plppE3SLcvs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3SLcvs.setStatus("mandatory")


class _PlppE3SLcd_Type(Integer32):
    """Custom type plppE3SLcd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE3SLcd_Type.__name__ = "Integer32"
_PlppE3SLcd_Object = MibTableColumn
plppE3SLcd = _PlppE3SLcd_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 12),
    _PlppE3SLcd_Type()
)
plppE3SLcd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3SLcd.setStatus("mandatory")


class _PlppE3SRxTrlTrc_Type(PhysAddress):
    """Custom type plppE3SRxTrlTrc based on PhysAddress"""
    subtypeSpec = PhysAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )


_PlppE3SRxTrlTrc_Type.__name__ = "PhysAddress"
_PlppE3SRxTrlTrc_Object = MibTableColumn
plppE3SRxTrlTrc = _PlppE3SRxTrlTrc_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 13),
    _PlppE3SRxTrlTrc_Type()
)
plppE3SRxTrlTrc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3SRxTrlTrc.setStatus("mandatory")


class _PlppE3SRxAIS_Type(Integer32):
    """Custom type plppE3SRxAIS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE3SRxAIS_Type.__name__ = "Integer32"
_PlppE3SRxAIS_Object = MibTableColumn
plppE3SRxAIS = _PlppE3SRxAIS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 14),
    _PlppE3SRxAIS_Type()
)
plppE3SRxAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3SRxAIS.setStatus("mandatory")


class _PlppE3SRxOOF_Type(Integer32):
    """Custom type plppE3SRxOOF based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE3SRxOOF_Type.__name__ = "Integer32"
_PlppE3SRxOOF_Object = MibTableColumn
plppE3SRxOOF = _PlppE3SRxOOF_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 15),
    _PlppE3SRxOOF_Type()
)
plppE3SRxOOF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3SRxOOF.setStatus("mandatory")


class _PlppE3SRxLOS_Type(Integer32):
    """Custom type plppE3SRxLOS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE3SRxLOS_Type.__name__ = "Integer32"
_PlppE3SRxLOS_Object = MibTableColumn
plppE3SRxLOS = _PlppE3SRxLOS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 16),
    _PlppE3SRxLOS_Type()
)
plppE3SRxLOS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3SRxLOS.setStatus("mandatory")


class _PlppE3SRxLOF_Type(Integer32):
    """Custom type plppE3SRxLOF based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE3SRxLOF_Type.__name__ = "Integer32"
_PlppE3SRxLOF_Object = MibTableColumn
plppE3SRxLOF = _PlppE3SRxLOF_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 17),
    _PlppE3SRxLOF_Type()
)
plppE3SRxLOF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3SRxLOF.setStatus("mandatory")


class _PlppE3SRxFERF_Type(Integer32):
    """Custom type plppE3SRxFERF based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE3SRxFERF_Type.__name__ = "Integer32"
_PlppE3SRxFERF_Object = MibTableColumn
plppE3SRxFERF = _PlppE3SRxFERF_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 18),
    _PlppE3SRxFERF_Type()
)
plppE3SRxFERF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3SRxFERF.setStatus("mandatory")


class _PlppE3SPLCPRxLof_Type(Integer32):
    """Custom type plppE3SPLCPRxLof based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE3SPLCPRxLof_Type.__name__ = "Integer32"
_PlppE3SPLCPRxLof_Object = MibTableColumn
plppE3SPLCPRxLof = _PlppE3SPLCPRxLof_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 19),
    _PlppE3SPLCPRxLof_Type()
)
plppE3SPLCPRxLof.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3SPLCPRxLof.setStatus("mandatory")


class _PlppE3SPLCPRxYellowAlarm_Type(Integer32):
    """Custom type plppE3SPLCPRxYellowAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE3SPLCPRxYellowAlarm_Type.__name__ = "Integer32"
_PlppE3SPLCPRxYellowAlarm_Object = MibTableColumn
plppE3SPLCPRxYellowAlarm = _PlppE3SPLCPRxYellowAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 20),
    _PlppE3SPLCPRxYellowAlarm_Type()
)
plppE3SPLCPRxYellowAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3SPLCPRxYellowAlarm.setStatus("mandatory")


class _PlppE3SRxTrIdMis_Type(Integer32):
    """Custom type plppE3SRxTrIdMis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE3SRxTrIdMis_Type.__name__ = "Integer32"
_PlppE3SRxTrIdMis_Object = MibTableColumn
plppE3SRxTrIdMis = _PlppE3SRxTrIdMis_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 21),
    _PlppE3SRxTrIdMis_Type()
)
plppE3SRxTrIdMis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3SRxTrIdMis.setStatus("mandatory")


class _PlppE3SRxTrIdUnst_Type(Integer32):
    """Custom type plppE3SRxTrIdUnst based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE3SRxTrIdUnst_Type.__name__ = "Integer32"
_PlppE3SRxTrIdUnst_Object = MibTableColumn
plppE3SRxTrIdUnst = _PlppE3SRxTrIdUnst_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 22),
    _PlppE3SRxTrIdUnst_Type()
)
plppE3SRxTrIdUnst.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3SRxTrIdUnst.setStatus("mandatory")


class _PlppE3SRxPloadTypeLabMis_Type(Integer32):
    """Custom type plppE3SRxPloadTypeLabMis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE3SRxPloadTypeLabMis_Type.__name__ = "Integer32"
_PlppE3SRxPloadTypeLabMis_Object = MibTableColumn
plppE3SRxPloadTypeLabMis = _PlppE3SRxPloadTypeLabMis_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 23),
    _PlppE3SRxPloadTypeLabMis_Type()
)
plppE3SRxPloadTypeLabMis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3SRxPloadTypeLabMis.setStatus("mandatory")


class _PlppE3SRxPloadTypeLabUnst_Type(Integer32):
    """Custom type plppE3SRxPloadTypeLabUnst based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PlppE3SRxPloadTypeLabUnst_Type.__name__ = "Integer32"
_PlppE3SRxPloadTypeLabUnst_Object = MibTableColumn
plppE3SRxPloadTypeLabUnst = _PlppE3SRxPloadTypeLabUnst_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 11, 8, 1, 24),
    _PlppE3SRxPloadTypeLabUnst_Type()
)
plppE3SRxPloadTypeLabUnst.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    plppE3SRxPloadTypeLabUnst.setStatus("mandatory")
_Dv2LocalFibre_ObjectIdentity = ObjectIdentity
dv2LocalFibre = _Dv2LocalFibre_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 12)
)
_LFibreConfTable_Object = MibTable
lFibreConfTable = _LFibreConfTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 1)
)
if mibBuilder.loadTexts:
    lFibreConfTable.setStatus("mandatory")
_LFibreConfEntry_Object = MibTableRow
lFibreConfEntry = _LFibreConfEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 1, 1)
)
lFibreConfEntry.setIndexNames(
    (0, "DV2-MIB", "lFibreConfLinkNo"),
)
if mibBuilder.loadTexts:
    lFibreConfEntry.setStatus("mandatory")


class _LFibreConfLinkNo_Type(Integer32):
    """Custom type lFibreConfLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_LFibreConfLinkNo_Type.__name__ = "Integer32"
_LFibreConfLinkNo_Object = MibTableColumn
lFibreConfLinkNo = _LFibreConfLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 1, 1, 1),
    _LFibreConfLinkNo_Type()
)
lFibreConfLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lFibreConfLinkNo.setStatus("mandatory")


class _LFibreConfLinkEnab_Type(Integer32):
    """Custom type lFibreConfLinkEnab based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_LFibreConfLinkEnab_Type.__name__ = "Integer32"
_LFibreConfLinkEnab_Object = MibTableColumn
lFibreConfLinkEnab = _LFibreConfLinkEnab_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 1, 1, 2),
    _LFibreConfLinkEnab_Type()
)
lFibreConfLinkEnab.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lFibreConfLinkEnab.setStatus("mandatory")


class _LFibreConfCLine_Type(Integer32):
    """Custom type lFibreConfCLine based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ignored", 2),
          ("processed", 1))
    )


_LFibreConfCLine_Type.__name__ = "Integer32"
_LFibreConfCLine_Object = MibTableColumn
lFibreConfCLine = _LFibreConfCLine_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 1, 1, 3),
    _LFibreConfCLine_Type()
)
lFibreConfCLine.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lFibreConfCLine.setStatus("mandatory")


class _LFibreConfLoopback_Type(Integer32):
    """Custom type lFibreConfLoopback based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_LFibreConfLoopback_Type.__name__ = "Integer32"
_LFibreConfLoopback_Object = MibTableColumn
lFibreConfLoopback = _LFibreConfLoopback_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 1, 1, 4),
    _LFibreConfLoopback_Type()
)
lFibreConfLoopback.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lFibreConfLoopback.setStatus("mandatory")
_LFibreStatTable_Object = MibTable
lFibreStatTable = _LFibreStatTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 2)
)
if mibBuilder.loadTexts:
    lFibreStatTable.setStatus("mandatory")
_LFibreStatEntry_Object = MibTableRow
lFibreStatEntry = _LFibreStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 2, 1)
)
lFibreStatEntry.setIndexNames(
    (0, "DV2-MIB", "lFibreStatLinkNo"),
)
if mibBuilder.loadTexts:
    lFibreStatEntry.setStatus("mandatory")


class _LFibreStatLinkNo_Type(Integer32):
    """Custom type lFibreStatLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_LFibreStatLinkNo_Type.__name__ = "Integer32"
_LFibreStatLinkNo_Object = MibTableColumn
lFibreStatLinkNo = _LFibreStatLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 2, 1, 1),
    _LFibreStatLinkNo_Type()
)
lFibreStatLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lFibreStatLinkNo.setStatus("mandatory")


class _LFibreStatCLines_Type(Integer32):
    """Custom type lFibreStatCLines based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_LFibreStatCLines_Type.__name__ = "Integer32"
_LFibreStatCLines_Object = MibTableColumn
lFibreStatCLines = _LFibreStatCLines_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 2, 1, 2),
    _LFibreStatCLines_Type()
)
lFibreStatCLines.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lFibreStatCLines.setStatus("mandatory")
_LFibreStatHCSErrs_Type = Counter32
_LFibreStatHCSErrs_Object = MibTableColumn
lFibreStatHCSErrs = _LFibreStatHCSErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 12, 2, 1, 3),
    _LFibreStatHCSErrs_Type()
)
lFibreStatHCSErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lFibreStatHCSErrs.setStatus("mandatory")
_Dv2DS_ObjectIdentity = ObjectIdentity
dv2DS = _Dv2DS_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13)
)
_Ds1Table_Object = MibTable
ds1Table = _Ds1Table_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1)
)
if mibBuilder.loadTexts:
    ds1Table.setStatus("mandatory")
_Ds1Entry_Object = MibTableRow
ds1Entry = _Ds1Entry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1)
)
ds1Entry.setIndexNames(
    (0, "DV2-MIB", "ds1LinkNo"),
)
if mibBuilder.loadTexts:
    ds1Entry.setStatus("mandatory")


class _Ds1LinkNo_Type(Integer32):
    """Custom type ds1LinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_Ds1LinkNo_Type.__name__ = "Integer32"
_Ds1LinkNo_Object = MibTableColumn
ds1LinkNo = _Ds1LinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 1),
    _Ds1LinkNo_Type()
)
ds1LinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1LinkNo.setStatus("mandatory")


class _Ds1LineLength_Type(Integer32):
    """Custom type ds1LineLength based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("feet-0-110", 1),
          ("feet-110-220", 2),
          ("feet-220-330", 3),
          ("feet-330-440", 4),
          ("feet-440-550", 5),
          ("feet-550-660", 6),
          ("more-than-655-feet", 7),
          ("square", 8))
    )


_Ds1LineLength_Type.__name__ = "Integer32"
_Ds1LineLength_Object = MibTableColumn
ds1LineLength = _Ds1LineLength_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 2),
    _Ds1LineLength_Type()
)
ds1LineLength.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds1LineLength.setStatus("mandatory")


class _Ds1Framing_Type(Integer32):
    """Custom type ds1Framing based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("esf2k-1", 7),
          ("esf2k-3", 6),
          ("esf4k", 5),
          ("none", 1),
          ("sf", 2),
          ("slc96", 4),
          ("t1dm", 3))
    )


_Ds1Framing_Type.__name__ = "Integer32"
_Ds1Framing_Object = MibTableColumn
ds1Framing = _Ds1Framing_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 3),
    _Ds1Framing_Type()
)
ds1Framing.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds1Framing.setStatus("mandatory")


class _Ds1Coding_Type(Integer32):
    """Custom type ds1Coding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ami", 2),
          ("b8zs", 1))
    )


_Ds1Coding_Type.__name__ = "Integer32"
_Ds1Coding_Object = MibTableColumn
ds1Coding = _Ds1Coding_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 4),
    _Ds1Coding_Type()
)
ds1Coding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds1Coding.setStatus("mandatory")


class _Ds1Tr_Type(Integer32):
    """Custom type ds1Tr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1Tr_Type.__name__ = "Integer32"
_Ds1Tr_Object = MibTableColumn
ds1Tr = _Ds1Tr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 5),
    _Ds1Tr_Type()
)
ds1Tr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds1Tr.setStatus("mandatory")


class _Ds1Rt_Type(Integer32):
    """Custom type ds1Rt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1Rt_Type.__name__ = "Integer32"
_Ds1Rt_Object = MibTableColumn
ds1Rt = _Ds1Rt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 6),
    _Ds1Rt_Type()
)
ds1Rt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds1Rt.setStatus("mandatory")


class _Ds1LOSDefect_Type(Integer32):
    """Custom type ds1LOSDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1LOSDefect_Type.__name__ = "Integer32"
_Ds1LOSDefect_Object = MibTableColumn
ds1LOSDefect = _Ds1LOSDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 7),
    _Ds1LOSDefect_Type()
)
ds1LOSDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1LOSDefect.setStatus("mandatory")


class _Ds1AISDefect_Type(Integer32):
    """Custom type ds1AISDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1AISDefect_Type.__name__ = "Integer32"
_Ds1AISDefect_Object = MibTableColumn
ds1AISDefect = _Ds1AISDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 8),
    _Ds1AISDefect_Type()
)
ds1AISDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1AISDefect.setStatus("mandatory")


class _Ds1OOFDefect_Type(Integer32):
    """Custom type ds1OOFDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1OOFDefect_Type.__name__ = "Integer32"
_Ds1OOFDefect_Object = MibTableColumn
ds1OOFDefect = _Ds1OOFDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 9),
    _Ds1OOFDefect_Type()
)
ds1OOFDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1OOFDefect.setStatus("mandatory")


class _Ds1YellowDefect_Type(Integer32):
    """Custom type ds1YellowDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1YellowDefect_Type.__name__ = "Integer32"
_Ds1YellowDefect_Object = MibTableColumn
ds1YellowDefect = _Ds1YellowDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 10),
    _Ds1YellowDefect_Type()
)
ds1YellowDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1YellowDefect.setStatus("mandatory")


class _Ds1LOSAlarm_Type(Integer32):
    """Custom type ds1LOSAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1LOSAlarm_Type.__name__ = "Integer32"
_Ds1LOSAlarm_Object = MibTableColumn
ds1LOSAlarm = _Ds1LOSAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 11),
    _Ds1LOSAlarm_Type()
)
ds1LOSAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1LOSAlarm.setStatus("mandatory")


class _Ds1AISAlarm_Type(Integer32):
    """Custom type ds1AISAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1AISAlarm_Type.__name__ = "Integer32"
_Ds1AISAlarm_Object = MibTableColumn
ds1AISAlarm = _Ds1AISAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 12),
    _Ds1AISAlarm_Type()
)
ds1AISAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1AISAlarm.setStatus("mandatory")


class _Ds1LOFAlarm_Type(Integer32):
    """Custom type ds1LOFAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1LOFAlarm_Type.__name__ = "Integer32"
_Ds1LOFAlarm_Object = MibTableColumn
ds1LOFAlarm = _Ds1LOFAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 13),
    _Ds1LOFAlarm_Type()
)
ds1LOFAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1LOFAlarm.setStatus("mandatory")


class _Ds1YellowAlarm_Type(Integer32):
    """Custom type ds1YellowAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1YellowAlarm_Type.__name__ = "Integer32"
_Ds1YellowAlarm_Object = MibTableColumn
ds1YellowAlarm = _Ds1YellowAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 14),
    _Ds1YellowAlarm_Type()
)
ds1YellowAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1YellowAlarm.setStatus("mandatory")
_Ds1PdvCount_Type = Counter32
_Ds1PdvCount_Object = MibTableColumn
ds1PdvCount = _Ds1PdvCount_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 15),
    _Ds1PdvCount_Type()
)
ds1PdvCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1PdvCount.setStatus("mandatory")
_Ds1Z16Count_Type = Counter32
_Ds1Z16Count_Object = MibTableColumn
ds1Z16Count = _Ds1Z16Count_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 16),
    _Ds1Z16Count_Type()
)
ds1Z16Count.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1Z16Count.setStatus("mandatory")
_Ds1LcvCount_Type = Counter32
_Ds1LcvCount_Object = MibTableColumn
ds1LcvCount = _Ds1LcvCount_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 17),
    _Ds1LcvCount_Type()
)
ds1LcvCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1LcvCount.setStatus("mandatory")
_Ds1BeeCount_Type = Counter32
_Ds1BeeCount_Object = MibTableColumn
ds1BeeCount = _Ds1BeeCount_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 18),
    _Ds1BeeCount_Type()
)
ds1BeeCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1BeeCount.setStatus("mandatory")
_Ds1FerCount_Type = Counter32
_Ds1FerCount_Object = MibTableColumn
ds1FerCount = _Ds1FerCount_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 19),
    _Ds1FerCount_Type()
)
ds1FerCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1FerCount.setStatus("mandatory")
_Ds1OofCount_Type = Counter32
_Ds1OofCount_Object = MibTableColumn
ds1OofCount = _Ds1OofCount_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 20),
    _Ds1OofCount_Type()
)
ds1OofCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1OofCount.setStatus("mandatory")


class _Ds1ClrStats_Type(Integer32):
    """Custom type ds1ClrStats based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1ClrStats_Type.__name__ = "Integer32"
_Ds1ClrStats_Object = MibTableColumn
ds1ClrStats = _Ds1ClrStats_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 21),
    _Ds1ClrStats_Type()
)
ds1ClrStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds1ClrStats.setStatus("mandatory")


class _Ds1Reconfig_Type(Integer32):
    """Custom type ds1Reconfig based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1Reconfig_Type.__name__ = "Integer32"
_Ds1Reconfig_Object = MibTableColumn
ds1Reconfig = _Ds1Reconfig_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 22),
    _Ds1Reconfig_Type()
)
ds1Reconfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds1Reconfig.setStatus("mandatory")
_Ds1LineES_Type = Counter32
_Ds1LineES_Object = MibTableColumn
ds1LineES = _Ds1LineES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 23),
    _Ds1LineES_Type()
)
ds1LineES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1LineES.setStatus("mandatory")
_Ds1LineSES_Type = Counter32
_Ds1LineSES_Object = MibTableColumn
ds1LineSES = _Ds1LineSES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 24),
    _Ds1LineSES_Type()
)
ds1LineSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1LineSES.setStatus("mandatory")
_Ds1ES_Type = Counter32
_Ds1ES_Object = MibTableColumn
ds1ES = _Ds1ES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 25),
    _Ds1ES_Type()
)
ds1ES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1ES.setStatus("mandatory")
_Ds1SES_Type = Counter32
_Ds1SES_Object = MibTableColumn
ds1SES = _Ds1SES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 26),
    _Ds1SES_Type()
)
ds1SES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1SES.setStatus("mandatory")
_Ds1AISS_Type = Counter32
_Ds1AISS_Object = MibTableColumn
ds1AISS = _Ds1AISS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 27),
    _Ds1AISS_Type()
)
ds1AISS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1AISS.setStatus("mandatory")
_Ds1UAS_Type = Counter32
_Ds1UAS_Object = MibTableColumn
ds1UAS = _Ds1UAS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 28),
    _Ds1UAS_Type()
)
ds1UAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1UAS.setStatus("mandatory")


class _Ds1TxClkSel_Type(Integer32):
    """Custom type ds1TxClkSel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("local-link", 13),
          ("local-oscillator", 12))
    )


_Ds1TxClkSel_Type.__name__ = "Integer32"
_Ds1TxClkSel_Object = MibTableColumn
ds1TxClkSel = _Ds1TxClkSel_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 29),
    _Ds1TxClkSel_Type()
)
ds1TxClkSel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds1TxClkSel.setStatus("mandatory")


class _Ds1ExBERDefect_Type(Integer32):
    """Custom type ds1ExBERDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1ExBERDefect_Type.__name__ = "Integer32"
_Ds1ExBERDefect_Object = MibTableColumn
ds1ExBERDefect = _Ds1ExBERDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 30),
    _Ds1ExBERDefect_Type()
)
ds1ExBERDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1ExBERDefect.setStatus("mandatory")


class _Ds1ExBERAlarm_Type(Integer32):
    """Custom type ds1ExBERAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1ExBERAlarm_Type.__name__ = "Integer32"
_Ds1ExBERAlarm_Object = MibTableColumn
ds1ExBERAlarm = _Ds1ExBERAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 1, 1, 31),
    _Ds1ExBERAlarm_Type()
)
ds1ExBERAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1ExBERAlarm.setStatus("mandatory")
_Ds3Table_Object = MibTable
ds3Table = _Ds3Table_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2)
)
if mibBuilder.loadTexts:
    ds3Table.setStatus("mandatory")
_Ds3Entry_Object = MibTableRow
ds3Entry = _Ds3Entry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1)
)
ds3Entry.setIndexNames(
    (0, "DV2-MIB", "ds3LinkNo"),
)
if mibBuilder.loadTexts:
    ds3Entry.setStatus("mandatory")


class _Ds3LinkNo_Type(Integer32):
    """Custom type ds3LinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_Ds3LinkNo_Type.__name__ = "Integer32"
_Ds3LinkNo_Object = MibTableColumn
ds3LinkNo = _Ds3LinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 1),
    _Ds3LinkNo_Type()
)
ds3LinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds3LinkNo.setStatus("mandatory")


class _Ds3Lb_Type(Integer32):
    """Custom type ds3Lb based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds3Lb_Type.__name__ = "Integer32"
_Ds3Lb_Object = MibTableColumn
ds3Lb = _Ds3Lb_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 2),
    _Ds3Lb_Type()
)
ds3Lb.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds3Lb.setStatus("mandatory")


class _Ds3Err_Type(Integer32):
    """Custom type ds3Err based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds3Err_Type.__name__ = "Integer32"
_Ds3Err_Object = MibTableColumn
ds3Err = _Ds3Err_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 3),
    _Ds3Err_Type()
)
ds3Err.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds3Err.setStatus("mandatory")


class _Ds3RXLos_Type(Integer32):
    """Custom type ds3RXLos based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds3RXLos_Type.__name__ = "Integer32"
_Ds3RXLos_Object = MibTableColumn
ds3RXLos = _Ds3RXLos_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 4),
    _Ds3RXLos_Type()
)
ds3RXLos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds3RXLos.setStatus("mandatory")


class _Ds3TXLoc_Type(Integer32):
    """Custom type ds3TXLoc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds3TXLoc_Type.__name__ = "Integer32"
_Ds3TXLoc_Object = MibTableColumn
ds3TXLoc = _Ds3TXLoc_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 5),
    _Ds3TXLoc_Type()
)
ds3TXLoc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds3TXLoc.setStatus("mandatory")


class _Ds3RXErr_Type(Integer32):
    """Custom type ds3RXErr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds3RXErr_Type.__name__ = "Integer32"
_Ds3RXErr_Object = MibTableColumn
ds3RXErr = _Ds3RXErr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 6),
    _Ds3RXErr_Type()
)
ds3RXErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds3RXErr.setStatus("mandatory")


class _Ds3RXAis_Type(Integer32):
    """Custom type ds3RXAis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds3RXAis_Type.__name__ = "Integer32"
_Ds3RXAis_Object = MibTableColumn
ds3RXAis = _Ds3RXAis_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 7),
    _Ds3RXAis_Type()
)
ds3RXAis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds3RXAis.setStatus("mandatory")


class _Ds3TXAis_Type(Integer32):
    """Custom type ds3TXAis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds3TXAis_Type.__name__ = "Integer32"
_Ds3TXAis_Object = MibTableColumn
ds3TXAis = _Ds3TXAis_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 8),
    _Ds3TXAis_Type()
)
ds3TXAis.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds3TXAis.setStatus("mandatory")


class _Ds3TXLev_Type(Integer32):
    """Custom type ds3TXLev based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("high", 2),
          ("normal", 1))
    )


_Ds3TXLev_Type.__name__ = "Integer32"
_Ds3TXLev_Object = MibTableColumn
ds3TXLev = _Ds3TXLev_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 9),
    _Ds3TXLev_Type()
)
ds3TXLev.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds3TXLev.setStatus("mandatory")


class _Ds3Tr_Type(Integer32):
    """Custom type ds3Tr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds3Tr_Type.__name__ = "Integer32"
_Ds3Tr_Object = MibTableColumn
ds3Tr = _Ds3Tr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 10),
    _Ds3Tr_Type()
)
ds3Tr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds3Tr.setStatus("mandatory")


class _Ds3Rt_Type(Integer32):
    """Custom type ds3Rt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds3Rt_Type.__name__ = "Integer32"
_Ds3Rt_Object = MibTableColumn
ds3Rt = _Ds3Rt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 11),
    _Ds3Rt_Type()
)
ds3Rt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds3Rt.setStatus("mandatory")


class _Ds3Equal_Type(Integer32):
    """Custom type ds3Equal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("long", 2),
          ("short", 1))
    )


_Ds3Equal_Type.__name__ = "Integer32"
_Ds3Equal_Object = MibTableColumn
ds3Equal = _Ds3Equal_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 12),
    _Ds3Equal_Type()
)
ds3Equal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds3Equal.setStatus("mandatory")


class _Ds3LOSAlarm_Type(Integer32):
    """Custom type ds3LOSAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds3LOSAlarm_Type.__name__ = "Integer32"
_Ds3LOSAlarm_Object = MibTableColumn
ds3LOSAlarm = _Ds3LOSAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 13),
    _Ds3LOSAlarm_Type()
)
ds3LOSAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds3LOSAlarm.setStatus("mandatory")


class _Ds3Reconfig_Type(Integer32):
    """Custom type ds3Reconfig based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds3Reconfig_Type.__name__ = "Integer32"
_Ds3Reconfig_Object = MibTableColumn
ds3Reconfig = _Ds3Reconfig_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 2, 1, 14),
    _Ds3Reconfig_Type()
)
ds3Reconfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds3Reconfig.setStatus("mandatory")
_E1Table_Object = MibTable
e1Table = _E1Table_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5)
)
if mibBuilder.loadTexts:
    e1Table.setStatus("mandatory")
_E1Entry_Object = MibTableRow
e1Entry = _E1Entry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1)
)
e1Entry.setIndexNames(
    (0, "DV2-MIB", "e1LinkNo"),
)
if mibBuilder.loadTexts:
    e1Entry.setStatus("mandatory")


class _E1LinkNo_Type(Integer32):
    """Custom type e1LinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_E1LinkNo_Type.__name__ = "Integer32"
_E1LinkNo_Object = MibTableColumn
e1LinkNo = _E1LinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 1),
    _E1LinkNo_Type()
)
e1LinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1LinkNo.setStatus("mandatory")


class _E1LimType_Type(Integer32):
    """Custom type e1LimType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dual", 1),
          ("dual-sig", 3),
          ("quad", 2),
          ("quad-sig", 4))
    )


_E1LimType_Type.__name__ = "Integer32"
_E1LimType_Object = MibTableColumn
e1LimType = _E1LimType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 2),
    _E1LimType_Type()
)
e1LimType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1LimType.setStatus("mandatory")


class _E1Lb_Type(Integer32):
    """Custom type e1Lb based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("digital", 4),
          ("line", 2),
          ("none", 1),
          ("payload", 3))
    )


_E1Lb_Type.__name__ = "Integer32"
_E1Lb_Object = MibTableColumn
e1Lb = _E1Lb_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 3),
    _E1Lb_Type()
)
e1Lb.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e1Lb.setStatus("mandatory")


class _E1FRMRMode_Type(Integer32):
    """Custom type e1FRMRMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("basic", 2),
          ("crc-mfrm", 1),
          ("unframed", 3))
    )


_E1FRMRMode_Type.__name__ = "Integer32"
_E1FRMRMode_Object = MibTableColumn
e1FRMRMode = _E1FRMRMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 4),
    _E1FRMRMode_Type()
)
e1FRMRMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e1FRMRMode.setStatus("mandatory")


class _E1TxClkSel_Type(Integer32):
    """Custom type e1TxClkSel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("loc-link0", 13),
          ("loc-link1", 14),
          ("loc-link2", 15),
          ("loc-link3", 16),
          ("loc-oscil", 12),
          ("system", 11))
    )


_E1TxClkSel_Type.__name__ = "Integer32"
_E1TxClkSel_Object = MibTableColumn
e1TxClkSel = _E1TxClkSel_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 5),
    _E1TxClkSel_Type()
)
e1TxClkSel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e1TxClkSel.setStatus("mandatory")


class _E1TS16PayLd_Type(Integer32):
    """Custom type e1TS16PayLd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_E1TS16PayLd_Type.__name__ = "Integer32"
_E1TS16PayLd_Object = MibTableColumn
e1TS16PayLd = _E1TS16PayLd_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 6),
    _E1TS16PayLd_Type()
)
e1TS16PayLd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e1TS16PayLd.setStatus("mandatory")


class _E1TxAIS_Type(Integer32):
    """Custom type e1TxAIS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_E1TxAIS_Type.__name__ = "Integer32"
_E1TxAIS_Object = MibTableColumn
e1TxAIS = _E1TxAIS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 7),
    _E1TxAIS_Type()
)
e1TxAIS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e1TxAIS.setStatus("mandatory")


class _E1GappedClk_Type(Integer32):
    """Custom type e1GappedClk based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_E1GappedClk_Type.__name__ = "Integer32"
_E1GappedClk_Object = MibTableColumn
e1GappedClk = _E1GappedClk_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 8),
    _E1GappedClk_Type()
)
e1GappedClk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e1GappedClk.setStatus("mandatory")


class _E1IntrfType_Type(Integer32):
    """Custom type e1IntrfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("balanc-120", 1),
          ("unbalan-75", 2))
    )


_E1IntrfType_Type.__name__ = "Integer32"
_E1IntrfType_Object = MibTableColumn
e1IntrfType = _E1IntrfType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 9),
    _E1IntrfType_Type()
)
e1IntrfType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e1IntrfType.setStatus("mandatory")


class _E1ClrStats_Type(Integer32):
    """Custom type e1ClrStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_E1ClrStats_Type.__name__ = "Integer32"
_E1ClrStats_Object = MibTableColumn
e1ClrStats = _E1ClrStats_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 10),
    _E1ClrStats_Type()
)
e1ClrStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e1ClrStats.setStatus("mandatory")


class _E1Reconfig_Type(Integer32):
    """Custom type e1Reconfig based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_E1Reconfig_Type.__name__ = "Integer32"
_E1Reconfig_Object = MibTableColumn
e1Reconfig = _E1Reconfig_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 11),
    _E1Reconfig_Type()
)
e1Reconfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e1Reconfig.setStatus("mandatory")


class _Se1SA4_Type(Integer32):
    """Custom type se1SA4 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_Se1SA4_Type.__name__ = "Integer32"
_Se1SA4_Object = MibTableColumn
se1SA4 = _Se1SA4_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 12),
    _Se1SA4_Type()
)
se1SA4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    se1SA4.setStatus("mandatory")


class _Se1SA5_Type(Integer32):
    """Custom type se1SA5 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_Se1SA5_Type.__name__ = "Integer32"
_Se1SA5_Object = MibTableColumn
se1SA5 = _Se1SA5_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 13),
    _Se1SA5_Type()
)
se1SA5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    se1SA5.setStatus("mandatory")


class _Se1SA6_Type(Integer32):
    """Custom type se1SA6 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_Se1SA6_Type.__name__ = "Integer32"
_Se1SA6_Object = MibTableColumn
se1SA6 = _Se1SA6_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 14),
    _Se1SA6_Type()
)
se1SA6.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    se1SA6.setStatus("mandatory")


class _Se1SA7_Type(Integer32):
    """Custom type se1SA7 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_Se1SA7_Type.__name__ = "Integer32"
_Se1SA7_Object = MibTableColumn
se1SA7 = _Se1SA7_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 15),
    _Se1SA7_Type()
)
se1SA7.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    se1SA7.setStatus("mandatory")


class _Se1SA8_Type(Integer32):
    """Custom type se1SA8 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_Se1SA8_Type.__name__ = "Integer32"
_Se1SA8_Object = MibTableColumn
se1SA8 = _Se1SA8_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 16),
    _Se1SA8_Type()
)
se1SA8.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    se1SA8.setStatus("mandatory")


class _Se1SI0_Type(Integer32):
    """Custom type se1SI0 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_Se1SI0_Type.__name__ = "Integer32"
_Se1SI0_Object = MibTableColumn
se1SI0 = _Se1SI0_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 17),
    _Se1SI0_Type()
)
se1SI0.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    se1SI0.setStatus("mandatory")


class _Se1SI1_Type(Integer32):
    """Custom type se1SI1 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_Se1SI1_Type.__name__ = "Integer32"
_Se1SI1_Object = MibTableColumn
se1SI1 = _Se1SI1_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 18),
    _Se1SI1_Type()
)
se1SI1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    se1SI1.setStatus("mandatory")


class _E1LOSDefect_Type(Integer32):
    """Custom type e1LOSDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_E1LOSDefect_Type.__name__ = "Integer32"
_E1LOSDefect_Object = MibTableColumn
e1LOSDefect = _E1LOSDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 22),
    _E1LOSDefect_Type()
)
e1LOSDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1LOSDefect.setStatus("mandatory")


class _E1OOFDefect_Type(Integer32):
    """Custom type e1OOFDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_E1OOFDefect_Type.__name__ = "Integer32"
_E1OOFDefect_Object = MibTableColumn
e1OOFDefect = _E1OOFDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 23),
    _E1OOFDefect_Type()
)
e1OOFDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1OOFDefect.setStatus("mandatory")


class _E1AISDefect_Type(Integer32):
    """Custom type e1AISDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_E1AISDefect_Type.__name__ = "Integer32"
_E1AISDefect_Object = MibTableColumn
e1AISDefect = _E1AISDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 24),
    _E1AISDefect_Type()
)
e1AISDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1AISDefect.setStatus("mandatory")


class _E1FerfDefect_Type(Integer32):
    """Custom type e1FerfDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_E1FerfDefect_Type.__name__ = "Integer32"
_E1FerfDefect_Object = MibTableColumn
e1FerfDefect = _E1FerfDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 25),
    _E1FerfDefect_Type()
)
e1FerfDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1FerfDefect.setStatus("mandatory")


class _E1ExBERDefect_Type(Integer32):
    """Custom type e1ExBERDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_E1ExBERDefect_Type.__name__ = "Integer32"
_E1ExBERDefect_Object = MibTableColumn
e1ExBERDefect = _E1ExBERDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 26),
    _E1ExBERDefect_Type()
)
e1ExBERDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1ExBERDefect.setStatus("mandatory")


class _E1LOSAlarm_Type(Integer32):
    """Custom type e1LOSAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_E1LOSAlarm_Type.__name__ = "Integer32"
_E1LOSAlarm_Object = MibTableColumn
e1LOSAlarm = _E1LOSAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 37),
    _E1LOSAlarm_Type()
)
e1LOSAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1LOSAlarm.setStatus("mandatory")


class _E1LOFAlarm_Type(Integer32):
    """Custom type e1LOFAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_E1LOFAlarm_Type.__name__ = "Integer32"
_E1LOFAlarm_Object = MibTableColumn
e1LOFAlarm = _E1LOFAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 38),
    _E1LOFAlarm_Type()
)
e1LOFAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1LOFAlarm.setStatus("mandatory")


class _E1AISAlarm_Type(Integer32):
    """Custom type e1AISAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_E1AISAlarm_Type.__name__ = "Integer32"
_E1AISAlarm_Object = MibTableColumn
e1AISAlarm = _E1AISAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 39),
    _E1AISAlarm_Type()
)
e1AISAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1AISAlarm.setStatus("mandatory")


class _E1FerfAlarm_Type(Integer32):
    """Custom type e1FerfAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_E1FerfAlarm_Type.__name__ = "Integer32"
_E1FerfAlarm_Object = MibTableColumn
e1FerfAlarm = _E1FerfAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 40),
    _E1FerfAlarm_Type()
)
e1FerfAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1FerfAlarm.setStatus("mandatory")


class _E1ExBERAlarm_Type(Integer32):
    """Custom type e1ExBERAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_E1ExBERAlarm_Type.__name__ = "Integer32"
_E1ExBERAlarm_Object = MibTableColumn
e1ExBERAlarm = _E1ExBERAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 41),
    _E1ExBERAlarm_Type()
)
e1ExBERAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1ExBERAlarm.setStatus("mandatory")
_E1SCRCErrs_Type = Integer32
_E1SCRCErrs_Object = MibTableColumn
e1SCRCErrs = _E1SCRCErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 52),
    _E1SCRCErrs_Type()
)
e1SCRCErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1SCRCErrs.setStatus("mandatory")
_E1SFrameErrs_Type = Integer32
_E1SFrameErrs_Object = MibTableColumn
e1SFrameErrs = _E1SFrameErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 53),
    _E1SFrameErrs_Type()
)
e1SFrameErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1SFrameErrs.setStatus("mandatory")
_E1SFEBEErrs_Type = Integer32
_E1SFEBEErrs_Object = MibTableColumn
e1SFEBEErrs = _E1SFEBEErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 54),
    _E1SFEBEErrs_Type()
)
e1SFEBEErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1SFEBEErrs.setStatus("mandatory")
_E1SLcvs_Type = Integer32
_E1SLcvs_Object = MibTableColumn
e1SLcvs = _E1SLcvs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 55),
    _E1SLcvs_Type()
)
e1SLcvs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1SLcvs.setStatus("mandatory")
_E1LineES_Type = Counter32
_E1LineES_Object = MibTableColumn
e1LineES = _E1LineES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 66),
    _E1LineES_Type()
)
e1LineES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1LineES.setStatus("mandatory")
_E1LineSES_Type = Counter32
_E1LineSES_Object = MibTableColumn
e1LineSES = _E1LineSES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 67),
    _E1LineSES_Type()
)
e1LineSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1LineSES.setStatus("mandatory")
_E1ES_Type = Counter32
_E1ES_Object = MibTableColumn
e1ES = _E1ES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 68),
    _E1ES_Type()
)
e1ES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1ES.setStatus("mandatory")
_E1SES_Type = Counter32
_E1SES_Object = MibTableColumn
e1SES = _E1SES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 69),
    _E1SES_Type()
)
e1SES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1SES.setStatus("mandatory")
_E1AISS_Type = Counter32
_E1AISS_Object = MibTableColumn
e1AISS = _E1AISS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 70),
    _E1AISS_Type()
)
e1AISS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1AISS.setStatus("mandatory")
_E1UAS_Type = Counter32
_E1UAS_Object = MibTableColumn
e1UAS = _E1UAS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 5, 1, 71),
    _E1UAS_Type()
)
e1UAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e1UAS.setStatus("mandatory")
_SoTable_Object = MibTable
soTable = _SoTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7)
)
if mibBuilder.loadTexts:
    soTable.setStatus("mandatory")
_SoEntry_Object = MibTableRow
soEntry = _SoEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1)
)
soEntry.setIndexNames(
    (0, "DV2-MIB", "soLinkNo"),
)
if mibBuilder.loadTexts:
    soEntry.setStatus("mandatory")


class _SoLinkNo_Type(Integer32):
    """Custom type soLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_SoLinkNo_Type.__name__ = "Integer32"
_SoLinkNo_Object = MibTableColumn
soLinkNo = _SoLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1, 1),
    _SoLinkNo_Type()
)
soLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    soLinkNo.setStatus("mandatory")


class _SoLimType_Type(Integer32):
    """Custom type soLimType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("solim-v0", 1),
          ("solim-v1", 2),
          ("solim-v2", 3))
    )


_SoLimType_Type.__name__ = "Integer32"
_SoLimType_Object = MibTableColumn
soLimType = _SoLimType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1, 2),
    _SoLimType_Type()
)
soLimType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    soLimType.setStatus("mandatory")


class _SoTimingRef_Type(Integer32):
    """Custom type soTimingRef based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("local-link0", 13),
          ("local-link1", 14),
          ("local-oscillator", 12),
          ("system", 11))
    )


_SoTimingRef_Type.__name__ = "Integer32"
_SoTimingRef_Object = MibTableColumn
soTimingRef = _SoTimingRef_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1, 3),
    _SoTimingRef_Type()
)
soTimingRef.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    soTimingRef.setStatus("mandatory")


class _SoTxEn0_Type(Integer32):
    """Custom type soTxEn0 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SoTxEn0_Type.__name__ = "Integer32"
_SoTxEn0_Object = MibTableColumn
soTxEn0 = _SoTxEn0_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1, 4),
    _SoTxEn0_Type()
)
soTxEn0.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    soTxEn0.setStatus("mandatory")


class _SoTxEn1_Type(Integer32):
    """Custom type soTxEn1 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SoTxEn1_Type.__name__ = "Integer32"
_SoTxEn1_Object = MibTableColumn
soTxEn1 = _SoTxEn1_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1, 5),
    _SoTxEn1_Type()
)
soTxEn1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    soTxEn1.setStatus("mandatory")


class _SoLimDesc_Type(Integer32):
    """Custom type soLimDesc based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("dual-electrical", 10),
          ("dual-hybrid-intermediate", 8),
          ("dual-hybrid-long", 9),
          ("dual-intermediate-reach", 2),
          ("dual-long-reach", 6),
          ("dual-short-reach", 4),
          ("pre-system-timing", 1),
          ("single-intermediate-reach", 3),
          ("single-long-reach", 7),
          ("single-short-reach", 5))
    )


_SoLimDesc_Type.__name__ = "Integer32"
_SoLimDesc_Object = MibTableColumn
soLimDesc = _SoLimDesc_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1, 6),
    _SoLimDesc_Type()
)
soLimDesc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    soLimDesc.setStatus("mandatory")


class _SoReconfig_Type(Integer32):
    """Custom type soReconfig based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SoReconfig_Type.__name__ = "Integer32"
_SoReconfig_Object = MibTableColumn
soReconfig = _SoReconfig_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 7, 1, 7),
    _SoReconfig_Type()
)
soReconfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    soReconfig.setStatus("mandatory")
_Ds1V2Table_Object = MibTable
ds1V2Table = _Ds1V2Table_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9)
)
if mibBuilder.loadTexts:
    ds1V2Table.setStatus("mandatory")
_Ds1V2Entry_Object = MibTableRow
ds1V2Entry = _Ds1V2Entry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1)
)
ds1V2Entry.setIndexNames(
    (0, "DV2-MIB", "ds1V2LinkNo"),
)
if mibBuilder.loadTexts:
    ds1V2Entry.setStatus("mandatory")


class _Ds1V2LinkNo_Type(Integer32):
    """Custom type ds1V2LinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_Ds1V2LinkNo_Type.__name__ = "Integer32"
_Ds1V2LinkNo_Object = MibTableColumn
ds1V2LinkNo = _Ds1V2LinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 1),
    _Ds1V2LinkNo_Type()
)
ds1V2LinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2LinkNo.setStatus("mandatory")


class _Ds1V2LimType_Type(Integer32):
    """Custom type ds1V2LimType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("ds1-dual", 1),
          ("ds1-dual-signaling", 3),
          ("ds1-quad", 2),
          ("ds1-quad-signaling", 4))
    )


_Ds1V2LimType_Type.__name__ = "Integer32"
_Ds1V2LimType_Object = MibTableColumn
ds1V2LimType = _Ds1V2LimType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 2),
    _Ds1V2LimType_Type()
)
ds1V2LimType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2LimType.setStatus("mandatory")


class _Ds1V2TxLineLn_Type(Integer32):
    """Custom type ds1V2TxLineLn based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("feet-0-110", 1),
          ("feet-110-220", 2),
          ("feet-220-330", 3),
          ("feet-330-440", 4),
          ("feet-440-550", 5),
          ("feet-550-660", 6),
          ("more-than-655-feet", 7),
          ("square", 8))
    )


_Ds1V2TxLineLn_Type.__name__ = "Integer32"
_Ds1V2TxLineLn_Object = MibTableColumn
ds1V2TxLineLn = _Ds1V2TxLineLn_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 3),
    _Ds1V2TxLineLn_Type()
)
ds1V2TxLineLn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds1V2TxLineLn.setStatus("mandatory")


class _Ds1V2FRMRMode_Type(Integer32):
    """Custom type ds1V2FRMRMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("esf2K-3", 6),
          ("esf2k-1", 7),
          ("esf4k", 5),
          ("none", 1),
          ("sf", 2),
          ("slc96", 4),
          ("t1dm", 3))
    )


_Ds1V2FRMRMode_Type.__name__ = "Integer32"
_Ds1V2FRMRMode_Object = MibTableColumn
ds1V2FRMRMode = _Ds1V2FRMRMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 4),
    _Ds1V2FRMRMode_Type()
)
ds1V2FRMRMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds1V2FRMRMode.setStatus("mandatory")


class _Ds1V2Coding_Type(Integer32):
    """Custom type ds1V2Coding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ami", 1),
          ("b8zs", 2))
    )


_Ds1V2Coding_Type.__name__ = "Integer32"
_Ds1V2Coding_Object = MibTableColumn
ds1V2Coding = _Ds1V2Coding_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 5),
    _Ds1V2Coding_Type()
)
ds1V2Coding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds1V2Coding.setStatus("mandatory")


class _Ds1V2Lb_Type(Integer32):
    """Custom type ds1V2Lb based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("digital-lpbk", 4),
          ("line-lpbk", 2),
          ("none", 1),
          ("payload-lpbk", 3))
    )


_Ds1V2Lb_Type.__name__ = "Integer32"
_Ds1V2Lb_Object = MibTableColumn
ds1V2Lb = _Ds1V2Lb_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 6),
    _Ds1V2Lb_Type()
)
ds1V2Lb.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds1V2Lb.setStatus("mandatory")


class _Ds1V2TxAIS_Type(Integer32):
    """Custom type ds1V2TxAIS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1V2TxAIS_Type.__name__ = "Integer32"
_Ds1V2TxAIS_Object = MibTableColumn
ds1V2TxAIS = _Ds1V2TxAIS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 7),
    _Ds1V2TxAIS_Type()
)
ds1V2TxAIS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds1V2TxAIS.setStatus("mandatory")


class _Ds1V2GappedClk_Type(Integer32):
    """Custom type ds1V2GappedClk based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1V2GappedClk_Type.__name__ = "Integer32"
_Ds1V2GappedClk_Object = MibTableColumn
ds1V2GappedClk = _Ds1V2GappedClk_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 8),
    _Ds1V2GappedClk_Type()
)
ds1V2GappedClk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds1V2GappedClk.setStatus("mandatory")


class _Ds1V2TxClkSel_Type(Integer32):
    """Custom type ds1V2TxClkSel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(11,
              12,
              13,
              14,
              15,
              16)
        )
    )
    namedValues = NamedValues(
        *(("local-link0", 13),
          ("local-link1", 14),
          ("local-link2", 15),
          ("local-link3", 16),
          ("local-oscillator", 12),
          ("system", 11))
    )


_Ds1V2TxClkSel_Type.__name__ = "Integer32"
_Ds1V2TxClkSel_Object = MibTableColumn
ds1V2TxClkSel = _Ds1V2TxClkSel_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 9),
    _Ds1V2TxClkSel_Type()
)
ds1V2TxClkSel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds1V2TxClkSel.setStatus("mandatory")


class _Ds1V2ClrStats_Type(Integer32):
    """Custom type ds1V2ClrStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1V2ClrStats_Type.__name__ = "Integer32"
_Ds1V2ClrStats_Object = MibTableColumn
ds1V2ClrStats = _Ds1V2ClrStats_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 10),
    _Ds1V2ClrStats_Type()
)
ds1V2ClrStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds1V2ClrStats.setStatus("mandatory")


class _Ds1V2Reconfig_Type(Integer32):
    """Custom type ds1V2Reconfig based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1V2Reconfig_Type.__name__ = "Integer32"
_Ds1V2Reconfig_Object = MibTableColumn
ds1V2Reconfig = _Ds1V2Reconfig_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 11),
    _Ds1V2Reconfig_Type()
)
ds1V2Reconfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds1V2Reconfig.setStatus("mandatory")


class _Ds1V2LOSDefect_Type(Integer32):
    """Custom type ds1V2LOSDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1V2LOSDefect_Type.__name__ = "Integer32"
_Ds1V2LOSDefect_Object = MibTableColumn
ds1V2LOSDefect = _Ds1V2LOSDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 22),
    _Ds1V2LOSDefect_Type()
)
ds1V2LOSDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2LOSDefect.setStatus("mandatory")


class _Ds1V2OOFDefect_Type(Integer32):
    """Custom type ds1V2OOFDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1V2OOFDefect_Type.__name__ = "Integer32"
_Ds1V2OOFDefect_Object = MibTableColumn
ds1V2OOFDefect = _Ds1V2OOFDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 23),
    _Ds1V2OOFDefect_Type()
)
ds1V2OOFDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2OOFDefect.setStatus("mandatory")


class _Ds1V2AISDefect_Type(Integer32):
    """Custom type ds1V2AISDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1V2AISDefect_Type.__name__ = "Integer32"
_Ds1V2AISDefect_Object = MibTableColumn
ds1V2AISDefect = _Ds1V2AISDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 24),
    _Ds1V2AISDefect_Type()
)
ds1V2AISDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2AISDefect.setStatus("mandatory")


class _Ds1V2FerfDefect_Type(Integer32):
    """Custom type ds1V2FerfDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1V2FerfDefect_Type.__name__ = "Integer32"
_Ds1V2FerfDefect_Object = MibTableColumn
ds1V2FerfDefect = _Ds1V2FerfDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 25),
    _Ds1V2FerfDefect_Type()
)
ds1V2FerfDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2FerfDefect.setStatus("mandatory")


class _Ds1V2BERDefect_Type(Integer32):
    """Custom type ds1V2BERDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1V2BERDefect_Type.__name__ = "Integer32"
_Ds1V2BERDefect_Object = MibTableColumn
ds1V2BERDefect = _Ds1V2BERDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 26),
    _Ds1V2BERDefect_Type()
)
ds1V2BERDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2BERDefect.setStatus("mandatory")


class _Ds1V2LOSAlarm_Type(Integer32):
    """Custom type ds1V2LOSAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1V2LOSAlarm_Type.__name__ = "Integer32"
_Ds1V2LOSAlarm_Object = MibTableColumn
ds1V2LOSAlarm = _Ds1V2LOSAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 37),
    _Ds1V2LOSAlarm_Type()
)
ds1V2LOSAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2LOSAlarm.setStatus("mandatory")


class _Ds1V2LOFAlarm_Type(Integer32):
    """Custom type ds1V2LOFAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1V2LOFAlarm_Type.__name__ = "Integer32"
_Ds1V2LOFAlarm_Object = MibTableColumn
ds1V2LOFAlarm = _Ds1V2LOFAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 38),
    _Ds1V2LOFAlarm_Type()
)
ds1V2LOFAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2LOFAlarm.setStatus("mandatory")


class _Ds1V2AISAlarm_Type(Integer32):
    """Custom type ds1V2AISAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1V2AISAlarm_Type.__name__ = "Integer32"
_Ds1V2AISAlarm_Object = MibTableColumn
ds1V2AISAlarm = _Ds1V2AISAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 39),
    _Ds1V2AISAlarm_Type()
)
ds1V2AISAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2AISAlarm.setStatus("mandatory")


class _Ds1V2FerfAlarm_Type(Integer32):
    """Custom type ds1V2FerfAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1V2FerfAlarm_Type.__name__ = "Integer32"
_Ds1V2FerfAlarm_Object = MibTableColumn
ds1V2FerfAlarm = _Ds1V2FerfAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 40),
    _Ds1V2FerfAlarm_Type()
)
ds1V2FerfAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2FerfAlarm.setStatus("mandatory")


class _Ds1V2BERAlarm_Type(Integer32):
    """Custom type ds1V2BERAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds1V2BERAlarm_Type.__name__ = "Integer32"
_Ds1V2BERAlarm_Object = MibTableColumn
ds1V2BERAlarm = _Ds1V2BERAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 41),
    _Ds1V2BERAlarm_Type()
)
ds1V2BERAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2BERAlarm.setStatus("mandatory")
_Ds1V2FerCount_Type = Integer32
_Ds1V2FerCount_Object = MibTableColumn
ds1V2FerCount = _Ds1V2FerCount_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 52),
    _Ds1V2FerCount_Type()
)
ds1V2FerCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2FerCount.setStatus("mandatory")
_Ds1V2BeeCount_Type = Integer32
_Ds1V2BeeCount_Object = MibTableColumn
ds1V2BeeCount = _Ds1V2BeeCount_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 53),
    _Ds1V2BeeCount_Type()
)
ds1V2BeeCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2BeeCount.setStatus("mandatory")
_Ds1V2OCfCount_Type = Integer32
_Ds1V2OCfCount_Object = MibTableColumn
ds1V2OCfCount = _Ds1V2OCfCount_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 54),
    _Ds1V2OCfCount_Type()
)
ds1V2OCfCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2OCfCount.setStatus("mandatory")
_Ds1V2LcvCount_Type = Integer32
_Ds1V2LcvCount_Object = MibTableColumn
ds1V2LcvCount = _Ds1V2LcvCount_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 55),
    _Ds1V2LcvCount_Type()
)
ds1V2LcvCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2LcvCount.setStatus("mandatory")
_Ds1V2LineES_Type = Counter32
_Ds1V2LineES_Object = MibTableColumn
ds1V2LineES = _Ds1V2LineES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 66),
    _Ds1V2LineES_Type()
)
ds1V2LineES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2LineES.setStatus("mandatory")
_Ds1V2LineSES_Type = Counter32
_Ds1V2LineSES_Object = MibTableColumn
ds1V2LineSES = _Ds1V2LineSES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 67),
    _Ds1V2LineSES_Type()
)
ds1V2LineSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2LineSES.setStatus("mandatory")
_Ds1V2ES_Type = Counter32
_Ds1V2ES_Object = MibTableColumn
ds1V2ES = _Ds1V2ES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 68),
    _Ds1V2ES_Type()
)
ds1V2ES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2ES.setStatus("mandatory")
_Ds1V2SES_Type = Counter32
_Ds1V2SES_Object = MibTableColumn
ds1V2SES = _Ds1V2SES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 69),
    _Ds1V2SES_Type()
)
ds1V2SES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2SES.setStatus("mandatory")
_Ds1V2AISS_Type = Counter32
_Ds1V2AISS_Object = MibTableColumn
ds1V2AISS = _Ds1V2AISS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 70),
    _Ds1V2AISS_Type()
)
ds1V2AISS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2AISS.setStatus("mandatory")
_Ds1V2UAS_Type = Counter32
_Ds1V2UAS_Object = MibTableColumn
ds1V2UAS = _Ds1V2UAS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 71),
    _Ds1V2UAS_Type()
)
ds1V2UAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2UAS.setStatus("mandatory")
_Ds1V2ExBER_Type = Counter32
_Ds1V2ExBER_Object = MibTableColumn
ds1V2ExBER = _Ds1V2ExBER_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 9, 1, 72),
    _Ds1V2ExBER_Type()
)
ds1V2ExBER.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds1V2ExBER.setStatus("mandatory")


class _DlimLpbkTimeout_Type(Integer32):
    """Custom type dlimLpbkTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 604800),
    )


_DlimLpbkTimeout_Type.__name__ = "Integer32"
_DlimLpbkTimeout_Object = MibScalar
dlimLpbkTimeout = _DlimLpbkTimeout_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 10),
    _DlimLpbkTimeout_Type()
)
dlimLpbkTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dlimLpbkTimeout.setStatus("mandatory")
_Ds3V2Table_Object = MibTable
ds3V2Table = _Ds3V2Table_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11)
)
if mibBuilder.loadTexts:
    ds3V2Table.setStatus("mandatory")
_Ds3V2Entry_Object = MibTableRow
ds3V2Entry = _Ds3V2Entry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1)
)
ds3V2Entry.setIndexNames(
    (0, "DV2-MIB", "ds3V2LinkNo"),
)
if mibBuilder.loadTexts:
    ds3V2Entry.setStatus("mandatory")


class _Ds3V2LinkNo_Type(Integer32):
    """Custom type ds3V2LinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_Ds3V2LinkNo_Type.__name__ = "Integer32"
_Ds3V2LinkNo_Object = MibTableColumn
ds3V2LinkNo = _Ds3V2LinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 1),
    _Ds3V2LinkNo_Type()
)
ds3V2LinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds3V2LinkNo.setStatus("mandatory")


class _Ds3V2Lb_Type(Integer32):
    """Custom type ds3V2Lb based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("line-lpbk", 1),
          ("local-lpbk", 3),
          ("none", 2))
    )


_Ds3V2Lb_Type.__name__ = "Integer32"
_Ds3V2Lb_Object = MibTableColumn
ds3V2Lb = _Ds3V2Lb_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 2),
    _Ds3V2Lb_Type()
)
ds3V2Lb.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds3V2Lb.setStatus("mandatory")


class _Ds3V2LimType_Type(Integer32):
    """Custom type ds3V2LimType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("ds3-2c", 1)
    )


_Ds3V2LimType_Type.__name__ = "Integer32"
_Ds3V2LimType_Object = MibTableColumn
ds3V2LimType = _Ds3V2LimType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 3),
    _Ds3V2LimType_Type()
)
ds3V2LimType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds3V2LimType.setStatus("mandatory")


class _Ds3V2LimOK_Type(Integer32):
    """Custom type ds3V2LimOK based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds3V2LimOK_Type.__name__ = "Integer32"
_Ds3V2LimOK_Object = MibTableColumn
ds3V2LimOK = _Ds3V2LimOK_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 4),
    _Ds3V2LimOK_Type()
)
ds3V2LimOK.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds3V2LimOK.setStatus("mandatory")


class _Ds3V2TxLBO_Type(Integer32):
    """Custom type ds3V2TxLBO based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("long", 2),
          ("short", 1))
    )


_Ds3V2TxLBO_Type.__name__ = "Integer32"
_Ds3V2TxLBO_Object = MibTableColumn
ds3V2TxLBO = _Ds3V2TxLBO_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 5),
    _Ds3V2TxLBO_Type()
)
ds3V2TxLBO.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds3V2TxLBO.setStatus("mandatory")


class _Ds3V2TxClkSel_Type(Integer32):
    """Custom type ds3V2TxClkSel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(11,
              12,
              17,
              18)
        )
    )
    namedValues = NamedValues(
        *(("link0-plcp", 17),
          ("link1-plcp", 18),
          ("local-oscillator", 12),
          ("system", 11))
    )


_Ds3V2TxClkSel_Type.__name__ = "Integer32"
_Ds3V2TxClkSel_Object = MibTableColumn
ds3V2TxClkSel = _Ds3V2TxClkSel_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 6),
    _Ds3V2TxClkSel_Type()
)
ds3V2TxClkSel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds3V2TxClkSel.setStatus("mandatory")


class _Ds3V2LOSDefect_Type(Integer32):
    """Custom type ds3V2LOSDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds3V2LOSDefect_Type.__name__ = "Integer32"
_Ds3V2LOSDefect_Object = MibTableColumn
ds3V2LOSDefect = _Ds3V2LOSDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 8),
    _Ds3V2LOSDefect_Type()
)
ds3V2LOSDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds3V2LOSDefect.setStatus("mandatory")


class _Ds3V2LOSAlarm_Type(Integer32):
    """Custom type ds3V2LOSAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds3V2LOSAlarm_Type.__name__ = "Integer32"
_Ds3V2LOSAlarm_Object = MibTableColumn
ds3V2LOSAlarm = _Ds3V2LOSAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 9),
    _Ds3V2LOSAlarm_Type()
)
ds3V2LOSAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ds3V2LOSAlarm.setStatus("mandatory")


class _Ds3V2Reconfig_Type(Integer32):
    """Custom type ds3V2Reconfig based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_Ds3V2Reconfig_Type.__name__ = "Integer32"
_Ds3V2Reconfig_Object = MibTableColumn
ds3V2Reconfig = _Ds3V2Reconfig_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 11, 1, 10),
    _Ds3V2Reconfig_Type()
)
ds3V2Reconfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ds3V2Reconfig.setStatus("mandatory")
_E3Table_Object = MibTable
e3Table = _E3Table_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12)
)
if mibBuilder.loadTexts:
    e3Table.setStatus("mandatory")
_E3Entry_Object = MibTableRow
e3Entry = _E3Entry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1)
)
e3Entry.setIndexNames(
    (0, "DV2-MIB", "e3LinkNo"),
)
if mibBuilder.loadTexts:
    e3Entry.setStatus("mandatory")


class _E3LinkNo_Type(Integer32):
    """Custom type e3LinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_E3LinkNo_Type.__name__ = "Integer32"
_E3LinkNo_Object = MibTableColumn
e3LinkNo = _E3LinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 1),
    _E3LinkNo_Type()
)
e3LinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e3LinkNo.setStatus("mandatory")


class _E3LimType_Type(Integer32):
    """Custom type e3LimType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("e3-2c", 1)
    )


_E3LimType_Type.__name__ = "Integer32"
_E3LimType_Object = MibTableColumn
e3LimType = _E3LimType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 2),
    _E3LimType_Type()
)
e3LimType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e3LimType.setStatus("mandatory")


class _E3LimOK_Type(Integer32):
    """Custom type e3LimOK based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_E3LimOK_Type.__name__ = "Integer32"
_E3LimOK_Object = MibTableColumn
e3LimOK = _E3LimOK_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 3),
    _E3LimOK_Type()
)
e3LimOK.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e3LimOK.setStatus("mandatory")


class _E3EQSelect_Type(Integer32):
    """Custom type e3EQSelect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("set-0-to-3p5-dB", 2),
          ("set-2p6-to-8-dB", 3),
          ("set-6-to-9p9-dB", 4),
          ("set-8p6-to-13p2-dB", 5))
    )


_E3EQSelect_Type.__name__ = "Integer32"
_E3EQSelect_Object = MibTableColumn
e3EQSelect = _E3EQSelect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 4),
    _E3EQSelect_Type()
)
e3EQSelect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e3EQSelect.setStatus("mandatory")


class _E3Loopback_Type(Integer32):
    """Custom type e3Loopback based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("line-lpbk", 1),
          ("local-lpbk", 2),
          ("none", 3))
    )


_E3Loopback_Type.__name__ = "Integer32"
_E3Loopback_Object = MibTableColumn
e3Loopback = _E3Loopback_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 6),
    _E3Loopback_Type()
)
e3Loopback.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e3Loopback.setStatus("mandatory")


class _E3TxAIS_Type(Integer32):
    """Custom type e3TxAIS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_E3TxAIS_Type.__name__ = "Integer32"
_E3TxAIS_Object = MibTableColumn
e3TxAIS = _E3TxAIS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 7),
    _E3TxAIS_Type()
)
e3TxAIS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e3TxAIS.setStatus("mandatory")


class _E3TxClkSel_Type(Integer32):
    """Custom type e3TxClkSel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("local-link0", 13),
          ("local-link1", 14),
          ("local-oscillator", 12),
          ("system", 11))
    )


_E3TxClkSel_Type.__name__ = "Integer32"
_E3TxClkSel_Object = MibTableColumn
e3TxClkSel = _E3TxClkSel_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 8),
    _E3TxClkSel_Type()
)
e3TxClkSel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e3TxClkSel.setStatus("mandatory")


class _E3LOSDefect_Type(Integer32):
    """Custom type e3LOSDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_E3LOSDefect_Type.__name__ = "Integer32"
_E3LOSDefect_Object = MibTableColumn
e3LOSDefect = _E3LOSDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 9),
    _E3LOSDefect_Type()
)
e3LOSDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e3LOSDefect.setStatus("mandatory")


class _E3LOSAlarm_Type(Integer32):
    """Custom type e3LOSAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_E3LOSAlarm_Type.__name__ = "Integer32"
_E3LOSAlarm_Object = MibTableColumn
e3LOSAlarm = _E3LOSAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 10),
    _E3LOSAlarm_Type()
)
e3LOSAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    e3LOSAlarm.setStatus("mandatory")


class _E3Reconfig_Type(Integer32):
    """Custom type e3Reconfig based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_E3Reconfig_Type.__name__ = "Integer32"
_E3Reconfig_Object = MibTableColumn
e3Reconfig = _E3Reconfig_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 12, 1, 11),
    _E3Reconfig_Type()
)
e3Reconfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    e3Reconfig.setStatus("mandatory")
_HssiTable_Object = MibTable
hssiTable = _HssiTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13)
)
if mibBuilder.loadTexts:
    hssiTable.setStatus("mandatory")
_HssiEntry_Object = MibTableRow
hssiEntry = _HssiEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1)
)
hssiEntry.setIndexNames(
    (0, "DV2-MIB", "hssiLinkNo"),
)
if mibBuilder.loadTexts:
    hssiEntry.setStatus("mandatory")


class _HssiLinkNo_Type(Integer32):
    """Custom type hssiLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_HssiLinkNo_Type.__name__ = "Integer32"
_HssiLinkNo_Object = MibTableColumn
hssiLinkNo = _HssiLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 1),
    _HssiLinkNo_Type()
)
hssiLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hssiLinkNo.setStatus("mandatory")


class _HssiLocalLoopback_Type(Integer32):
    """Custom type hssiLocalLoopback based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bilateral", 4),
          ("internal", 3),
          ("line", 2),
          ("none", 1))
    )


_HssiLocalLoopback_Type.__name__ = "Integer32"
_HssiLocalLoopback_Object = MibTableColumn
hssiLocalLoopback = _HssiLocalLoopback_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 2),
    _HssiLocalLoopback_Type()
)
hssiLocalLoopback.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hssiLocalLoopback.setStatus("mandatory")


class _HssiRemoteLoopback_Type(Integer32):
    """Custom type hssiRemoteLoopback based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("digital", 3),
          ("line", 2),
          ("none", 1),
          ("remote-line", 4))
    )


_HssiRemoteLoopback_Type.__name__ = "Integer32"
_HssiRemoteLoopback_Object = MibTableColumn
hssiRemoteLoopback = _HssiRemoteLoopback_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 3),
    _HssiRemoteLoopback_Type()
)
hssiRemoteLoopback.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hssiRemoteLoopback.setStatus("mandatory")


class _HssiReconfig_Type(Integer32):
    """Custom type hssiReconfig based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_HssiReconfig_Type.__name__ = "Integer32"
_HssiReconfig_Object = MibTableColumn
hssiReconfig = _HssiReconfig_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 4),
    _HssiReconfig_Type()
)
hssiReconfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hssiReconfig.setStatus("mandatory")


class _HssiType_Type(Integer32):
    """Custom type hssiType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dce", 2),
          ("dte", 1))
    )


_HssiType_Type.__name__ = "Integer32"
_HssiType_Object = MibTableColumn
hssiType = _HssiType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 15),
    _HssiType_Type()
)
hssiType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hssiType.setStatus("mandatory")


class _HssiLimType_Type(Integer32):
    """Custom type hssiLimType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("hssi-v1", 1)
    )


_HssiLimType_Type.__name__ = "Integer32"
_HssiLimType_Object = MibTableColumn
hssiLimType = _HssiLimType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 16),
    _HssiLimType_Type()
)
hssiLimType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hssiLimType.setStatus("mandatory")


class _HssiClockSrc_Type(Integer32):
    """Custom type hssiClockSrc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("from-dce", 2),
          ("local", 1),
          ("local-34Mbps", 4),
          ("local-45Mbps", 3))
    )


_HssiClockSrc_Type.__name__ = "Integer32"
_HssiClockSrc_Object = MibTableColumn
hssiClockSrc = _HssiClockSrc_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 17),
    _HssiClockSrc_Type()
)
hssiClockSrc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    hssiClockSrc.setStatus("mandatory")


class _HssiCtrTestMode_Type(Integer32):
    """Custom type hssiCtrTestMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_HssiCtrTestMode_Type.__name__ = "Integer32"
_HssiCtrTestMode_Object = MibTableColumn
hssiCtrTestMode = _HssiCtrTestMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 18),
    _HssiCtrTestMode_Type()
)
hssiCtrTestMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hssiCtrTestMode.setStatus("mandatory")


class _HssiLinkReady_Type(Integer32):
    """Custom type hssiLinkReady based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_HssiLinkReady_Type.__name__ = "Integer32"
_HssiLinkReady_Object = MibTableColumn
hssiLinkReady = _HssiLinkReady_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 19),
    _HssiLinkReady_Type()
)
hssiLinkReady.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hssiLinkReady.setStatus("mandatory")


class _HssiRemoteReady_Type(Integer32):
    """Custom type hssiRemoteReady based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_HssiRemoteReady_Type.__name__ = "Integer32"
_HssiRemoteReady_Object = MibTableColumn
hssiRemoteReady = _HssiRemoteReady_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 20),
    _HssiRemoteReady_Type()
)
hssiRemoteReady.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hssiRemoteReady.setStatus("mandatory")


class _HssiLOSDefect_Type(Integer32):
    """Custom type hssiLOSDefect based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_HssiLOSDefect_Type.__name__ = "Integer32"
_HssiLOSDefect_Object = MibTableColumn
hssiLOSDefect = _HssiLOSDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 25),
    _HssiLOSDefect_Type()
)
hssiLOSDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hssiLOSDefect.setStatus("mandatory")


class _HssiLOSAlarm_Type(Integer32):
    """Custom type hssiLOSAlarm based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_HssiLOSAlarm_Type.__name__ = "Integer32"
_HssiLOSAlarm_Object = MibTableColumn
hssiLOSAlarm = _HssiLOSAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 13, 1, 30),
    _HssiLOSAlarm_Type()
)
hssiLOSAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    hssiLOSAlarm.setStatus("mandatory")
_J2Table_Object = MibTable
j2Table = _J2Table_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14)
)
if mibBuilder.loadTexts:
    j2Table.setStatus("mandatory")
_J2Entry_Object = MibTableRow
j2Entry = _J2Entry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1)
)
j2Entry.setIndexNames(
    (0, "DV2-MIB", "j2LinkNo"),
)
if mibBuilder.loadTexts:
    j2Entry.setStatus("mandatory")


class _J2LinkNo_Type(Integer32):
    """Custom type j2LinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_J2LinkNo_Type.__name__ = "Integer32"
_J2LinkNo_Object = MibTableColumn
j2LinkNo = _J2LinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 1),
    _J2LinkNo_Type()
)
j2LinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    j2LinkNo.setStatus("mandatory")
_J2FirmwareRev_Type = Integer32
_J2FirmwareRev_Object = MibTableColumn
j2FirmwareRev = _J2FirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 3),
    _J2FirmwareRev_Type()
)
j2FirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    j2FirmwareRev.setStatus("mandatory")


class _J2TxEq_Type(Integer32):
    """Custom type j2TxEq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("high-dB", 2),
          ("low-dB", 1))
    )


_J2TxEq_Type.__name__ = "Integer32"
_J2TxEq_Object = MibTableColumn
j2TxEq = _J2TxEq_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 4),
    _J2TxEq_Type()
)
j2TxEq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    j2TxEq.setStatus("mandatory")


class _J2Lb_Type(Integer32):
    """Custom type j2Lb based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("j2-Framer-Digital", 4),
          ("j2-Framer-Payload", 3),
          ("liu-line", 2),
          ("none", 1))
    )


_J2Lb_Type.__name__ = "Integer32"
_J2Lb_Object = MibTableColumn
j2Lb = _J2Lb_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 6),
    _J2Lb_Type()
)
j2Lb.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    j2Lb.setStatus("mandatory")


class _J2TxAIS_Type(Integer32):
    """Custom type j2TxAIS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_J2TxAIS_Type.__name__ = "Integer32"
_J2TxAIS_Object = MibTableColumn
j2TxAIS = _J2TxAIS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 7),
    _J2TxAIS_Type()
)
j2TxAIS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    j2TxAIS.setStatus("mandatory")


class _J2TxClkSel_Type(Integer32):
    """Custom type j2TxClkSel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("int-oscillator", 12),
          ("link-0", 13),
          ("link-1", 14),
          ("system-bus", 11))
    )


_J2TxClkSel_Type.__name__ = "Integer32"
_J2TxClkSel_Object = MibTableColumn
j2TxClkSel = _J2TxClkSel_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 9),
    _J2TxClkSel_Type()
)
j2TxClkSel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    j2TxClkSel.setStatus("mandatory")


class _J2ClrStats_Type(Integer32):
    """Custom type j2ClrStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_J2ClrStats_Type.__name__ = "Integer32"
_J2ClrStats_Object = MibTableColumn
j2ClrStats = _J2ClrStats_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 10),
    _J2ClrStats_Type()
)
j2ClrStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    j2ClrStats.setStatus("mandatory")


class _J2Reconfig_Type(Integer32):
    """Custom type j2Reconfig based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_J2Reconfig_Type.__name__ = "Integer32"
_J2Reconfig_Object = MibTableColumn
j2Reconfig = _J2Reconfig_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 11),
    _J2Reconfig_Type()
)
j2Reconfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    j2Reconfig.setStatus("mandatory")


class _J2TS97TS98_Type(Hex):
    """Custom type j2TS97TS98 based on Hex"""
    defaultValue = 65535


_J2TS97TS98_Object = MibTableColumn
j2TS97TS98 = _J2TS97TS98_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 12),
    _J2TS97TS98_Type()
)
j2TS97TS98.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    j2TS97TS98.setStatus("mandatory")


class _J2QualClock_Type(Integer32):
    """Custom type j2QualClock based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("high-Primary", 3),
          ("high-Secondary", 4),
          ("local-Oscillator", 5),
          ("low-Primary", 1),
          ("low-Secondary", 2))
    )


_J2QualClock_Type.__name__ = "Integer32"
_J2QualClock_Object = MibTableColumn
j2QualClock = _J2QualClock_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 20),
    _J2QualClock_Type()
)
j2QualClock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    j2QualClock.setStatus("mandatory")


class _J2LOSDefect_Type(Integer32):
    """Custom type j2LOSDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_J2LOSDefect_Type.__name__ = "Integer32"
_J2LOSDefect_Object = MibTableColumn
j2LOSDefect = _J2LOSDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 22),
    _J2LOSDefect_Type()
)
j2LOSDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    j2LOSDefect.setStatus("mandatory")


class _J2OOFDefect_Type(Integer32):
    """Custom type j2OOFDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_J2OOFDefect_Type.__name__ = "Integer32"
_J2OOFDefect_Object = MibTableColumn
j2OOFDefect = _J2OOFDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 23),
    _J2OOFDefect_Type()
)
j2OOFDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    j2OOFDefect.setStatus("mandatory")


class _J2AISDefect_Type(Integer32):
    """Custom type j2AISDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_J2AISDefect_Type.__name__ = "Integer32"
_J2AISDefect_Object = MibTableColumn
j2AISDefect = _J2AISDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 24),
    _J2AISDefect_Type()
)
j2AISDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    j2AISDefect.setStatus("mandatory")


class _J2RAlmDefect_Type(Integer32):
    """Custom type j2RAlmDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_J2RAlmDefect_Type.__name__ = "Integer32"
_J2RAlmDefect_Object = MibTableColumn
j2RAlmDefect = _J2RAlmDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 26),
    _J2RAlmDefect_Type()
)
j2RAlmDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    j2RAlmDefect.setStatus("mandatory")


class _J2LOSAlarm_Type(Integer32):
    """Custom type j2LOSAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_J2LOSAlarm_Type.__name__ = "Integer32"
_J2LOSAlarm_Object = MibTableColumn
j2LOSAlarm = _J2LOSAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 37),
    _J2LOSAlarm_Type()
)
j2LOSAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    j2LOSAlarm.setStatus("mandatory")


class _J2LOFAlarm_Type(Integer32):
    """Custom type j2LOFAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_J2LOFAlarm_Type.__name__ = "Integer32"
_J2LOFAlarm_Object = MibTableColumn
j2LOFAlarm = _J2LOFAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 38),
    _J2LOFAlarm_Type()
)
j2LOFAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    j2LOFAlarm.setStatus("mandatory")


class _J2AISAlarm_Type(Integer32):
    """Custom type j2AISAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_J2AISAlarm_Type.__name__ = "Integer32"
_J2AISAlarm_Object = MibTableColumn
j2AISAlarm = _J2AISAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 39),
    _J2AISAlarm_Type()
)
j2AISAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    j2AISAlarm.setStatus("mandatory")


class _J2RAlmAlarm_Type(Integer32):
    """Custom type j2RAlmAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_J2RAlmAlarm_Type.__name__ = "Integer32"
_J2RAlmAlarm_Object = MibTableColumn
j2RAlmAlarm = _J2RAlmAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 41),
    _J2RAlmAlarm_Type()
)
j2RAlmAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    j2RAlmAlarm.setStatus("mandatory")
_J2FerCount_Type = Integer32
_J2FerCount_Object = MibTableColumn
j2FerCount = _J2FerCount_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 52),
    _J2FerCount_Type()
)
j2FerCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    j2FerCount.setStatus("mandatory")
_J2RAlmCount_Type = Integer32
_J2RAlmCount_Object = MibTableColumn
j2RAlmCount = _J2RAlmCount_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 53),
    _J2RAlmCount_Type()
)
j2RAlmCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    j2RAlmCount.setStatus("mandatory")
_J2LcvCount_Type = Integer32
_J2LcvCount_Object = MibTableColumn
j2LcvCount = _J2LcvCount_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 55),
    _J2LcvCount_Type()
)
j2LcvCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    j2LcvCount.setStatus("mandatory")
_J2CrcCount_Type = Counter32
_J2CrcCount_Object = MibTableColumn
j2CrcCount = _J2CrcCount_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 56),
    _J2CrcCount_Type()
)
j2CrcCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    j2CrcCount.setStatus("mandatory")
_J2LineES_Type = Counter32
_J2LineES_Object = MibTableColumn
j2LineES = _J2LineES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 66),
    _J2LineES_Type()
)
j2LineES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    j2LineES.setStatus("mandatory")
_J2LineSES_Type = Counter32
_J2LineSES_Object = MibTableColumn
j2LineSES = _J2LineSES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 67),
    _J2LineSES_Type()
)
j2LineSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    j2LineSES.setStatus("mandatory")
_J2ES_Type = Counter32
_J2ES_Object = MibTableColumn
j2ES = _J2ES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 68),
    _J2ES_Type()
)
j2ES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    j2ES.setStatus("mandatory")
_J2SES_Type = Counter32
_J2SES_Object = MibTableColumn
j2SES = _J2SES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 69),
    _J2SES_Type()
)
j2SES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    j2SES.setStatus("mandatory")
_J2AISS_Type = Counter32
_J2AISS_Object = MibTableColumn
j2AISS = _J2AISS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 70),
    _J2AISS_Type()
)
j2AISS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    j2AISS.setStatus("mandatory")
_J2UAS_Type = Counter32
_J2UAS_Object = MibTableColumn
j2UAS = _J2UAS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 14, 1, 71),
    _J2UAS_Type()
)
j2UAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    j2UAS.setStatus("mandatory")
_ScfTable_Object = MibTable
scfTable = _ScfTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15)
)
if mibBuilder.loadTexts:
    scfTable.setStatus("mandatory")
_ScfEntry_Object = MibTableRow
scfEntry = _ScfEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1)
)
scfEntry.setIndexNames(
    (0, "DV2-MIB", "scfLinkNo"),
)
if mibBuilder.loadTexts:
    scfEntry.setStatus("mandatory")


class _ScfLinkNo_Type(Integer32):
    """Custom type scfLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_ScfLinkNo_Type.__name__ = "Integer32"
_ScfLinkNo_Object = MibTableColumn
scfLinkNo = _ScfLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 1),
    _ScfLinkNo_Type()
)
scfLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scfLinkNo.setStatus("mandatory")


class _ScfLimType_Type(Integer32):
    """Custom type scfLimType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("si-dual", 1),
          ("si-quad", 2))
    )


_ScfLimType_Type.__name__ = "Integer32"
_ScfLimType_Object = MibTableColumn
scfLimType = _ScfLimType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 2),
    _ScfLimType_Type()
)
scfLimType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scfLimType.setStatus("mandatory")
_ScfFirmwareRev_Type = Integer32
_ScfFirmwareRev_Object = MibTableColumn
scfFirmwareRev = _ScfFirmwareRev_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 3),
    _ScfFirmwareRev_Type()
)
scfFirmwareRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scfFirmwareRev.setStatus("mandatory")


class _ScfQualClock_Type(Integer32):
    """Custom type scfQualClock based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("high-Primary", 3),
          ("high-Secondary", 4),
          ("local-Oscillator", 5),
          ("low-Primary", 1),
          ("low-Secondary", 2))
    )


_ScfQualClock_Type.__name__ = "Integer32"
_ScfQualClock_Object = MibTableColumn
scfQualClock = _ScfQualClock_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 4),
    _ScfQualClock_Type()
)
scfQualClock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scfQualClock.setStatus("mandatory")


class _ScfContr_Type(Integer32):
    """Custom type scfContr based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ce-hpg-hc2", 1),
          ("ms-ms2", 2))
    )


_ScfContr_Type.__name__ = "Integer32"
_ScfContr_Object = MibTableColumn
scfContr = _ScfContr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 5),
    _ScfContr_Type()
)
scfContr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scfContr.setStatus("mandatory")


class _ScfDCEDTE_Type(Integer32):
    """Custom type scfDCEDTE based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dce", 1),
          ("dte", 2))
    )


_ScfDCEDTE_Type.__name__ = "Integer32"
_ScfDCEDTE_Object = MibTableColumn
scfDCEDTE = _ScfDCEDTE_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 6),
    _ScfDCEDTE_Type()
)
scfDCEDTE.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scfDCEDTE.setStatus("mandatory")


class _ScfLb_Type(Integer32):
    """Custom type scfLb based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("digital", 4),
          ("line", 2),
          ("link", 3),
          ("none", 1))
    )


_ScfLb_Type.__name__ = "Integer32"
_ScfLb_Object = MibTableColumn
scfLb = _ScfLb_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 7),
    _ScfLb_Type()
)
scfLb.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scfLb.setStatus("mandatory")


class _ScfLineTiming_Type(Integer32):
    """Custom type scfLineTiming based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_ScfLineTiming_Type.__name__ = "Integer32"
_ScfLineTiming_Object = MibTableColumn
scfLineTiming = _ScfLineTiming_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 8),
    _ScfLineTiming_Type()
)
scfLineTiming.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scfLineTiming.setStatus("mandatory")


class _ScfDataRate_Type(Integer32):
    """Custom type scfDataRate based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42)
        )
    )
    namedValues = NamedValues(
        *(("rate-1024x0", 35),
          ("rate-112x0", 19),
          ("rate-115x2", 20),
          ("rate-128x0", 21),
          ("rate-144x0", 22),
          ("rate-14x4", 5),
          ("rate-1536x0", 36),
          ("rate-153x6", 23),
          ("rate-16x0", 6),
          ("rate-16x6", 7),
          ("rate-1920x0", 37),
          ("rate-192x0", 24),
          ("rate-19x2", 8),
          ("rate-2048x0", 38),
          ("rate-224x0", 25),
          ("rate-230x0", 26),
          ("rate-256x0", 27),
          ("rate-288x0", 28),
          ("rate-28x8", 9),
          ("rate-2x4", 1),
          ("rate-3072x0", 39),
          ("rate-307x2", 29),
          ("rate-320x0", 30),
          ("rate-32x0", 10),
          ("rate-384x0", 31),
          ("rate-38x4", 11),
          ("rate-4096x0", 40),
          ("rate-448x0", 32),
          ("rate-48x0", 12),
          ("rate-4x8", 2),
          ("rate-50x0", 13),
          ("rate-512x0", 33),
          ("rate-56x0", 14),
          ("rate-57x6", 15),
          ("rate-6144x0", 41),
          ("rate-64x0", 16),
          ("rate-768x0", 34),
          ("rate-76x8", 17),
          ("rate-7x2", 3),
          ("rate-8192x0", 42),
          ("rate-96x0", 18),
          ("rate-9x6", 4))
    )


_ScfDataRate_Type.__name__ = "Integer32"
_ScfDataRate_Object = MibTableColumn
scfDataRate = _ScfDataRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 9),
    _ScfDataRate_Type()
)
scfDataRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scfDataRate.setStatus("mandatory")


class _ScfClkSel_Type(Integer32):
    """Custom type scfClkSel based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("localOscillator", 2),
          ("system", 1))
    )


_ScfClkSel_Type.__name__ = "Integer32"
_ScfClkSel_Object = MibTableColumn
scfClkSel = _ScfClkSel_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 10),
    _ScfClkSel_Type()
)
scfClkSel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scfClkSel.setStatus("mandatory")


class _ScfInterfaceType_Type(Integer32):
    """Custom type scfInterfaceType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("eia530-A", 3),
          ("rs449", 2),
          ("v35", 4),
          ("x21", 1))
    )


_ScfInterfaceType_Type.__name__ = "Integer32"
_ScfInterfaceType_Object = MibTableColumn
scfInterfaceType = _ScfInterfaceType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 11),
    _ScfInterfaceType_Type()
)
scfInterfaceType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scfInterfaceType.setStatus("mandatory")


class _ScfReconfig_Type(Integer32):
    """Custom type scfReconfig based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_ScfReconfig_Type.__name__ = "Integer32"
_ScfReconfig_Object = MibTableColumn
scfReconfig = _ScfReconfig_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 12),
    _ScfReconfig_Type()
)
scfReconfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scfReconfig.setStatus("mandatory")


class _ScfLOSDefect_Type(Integer32):
    """Custom type scfLOSDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_ScfLOSDefect_Type.__name__ = "Integer32"
_ScfLOSDefect_Object = MibTableColumn
scfLOSDefect = _ScfLOSDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 13),
    _ScfLOSDefect_Type()
)
scfLOSDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scfLOSDefect.setStatus("mandatory")


class _ScfLOSAlarm_Type(Integer32):
    """Custom type scfLOSAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_ScfLOSAlarm_Type.__name__ = "Integer32"
_ScfLOSAlarm_Object = MibTableColumn
scfLOSAlarm = _ScfLOSAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 13, 15, 1, 14),
    _ScfLOSAlarm_Type()
)
scfLOSAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scfLOSAlarm.setStatus("mandatory")
_Dv2Billing_ObjectIdentity = ObjectIdentity
dv2Billing = _Dv2Billing_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14)
)
_BillAvailable_Type = Integer32
_BillAvailable_Object = MibScalar
billAvailable = _BillAvailable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 1),
    _BillAvailable_Type()
)
billAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billAvailable.setStatus("mandatory")
_BillingTable_Object = MibTable
billingTable = _BillingTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3)
)
if mibBuilder.loadTexts:
    billingTable.setStatus("mandatory")
_BillingEntry_Object = MibTableRow
billingEntry = _BillingEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1)
)
billingEntry.setIndexNames(
    (0, "DV2-MIB", "billSeq"),
)
if mibBuilder.loadTexts:
    billingEntry.setStatus("mandatory")


class _BillSeq_Type(Integer32):
    """Custom type billSeq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_BillSeq_Type.__name__ = "Integer32"
_BillSeq_Object = MibTableColumn
billSeq = _BillSeq_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 1),
    _BillSeq_Type()
)
billSeq.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billSeq.setStatus("mandatory")
_BillSvpi_Type = VirtualPathIdentifier
_BillSvpi_Object = MibTableColumn
billSvpi = _BillSvpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 2),
    _BillSvpi_Type()
)
billSvpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billSvpi.setStatus("mandatory")
_BillSvci_Type = VirtualCircuitIdentifier
_BillSvci_Object = MibTableColumn
billSvci = _BillSvci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 3),
    _BillSvci_Type()
)
billSvci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billSvci.setStatus("mandatory")
_BillDvpi_Type = VirtualPathIdentifier
_BillDvpi_Object = MibTableColumn
billDvpi = _BillDvpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 4),
    _BillDvpi_Type()
)
billDvpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billDvpi.setStatus("mandatory")
_BillDvci_Type = VirtualCircuitIdentifier
_BillDvci_Object = MibTableColumn
billDvci = _BillDvci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 5),
    _BillDvci_Type()
)
billDvci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billDvci.setStatus("mandatory")
_BillSslot_Type = Integer32
_BillSslot_Object = MibTableColumn
billSslot = _BillSslot_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 6),
    _BillSslot_Type()
)
billSslot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billSslot.setStatus("mandatory")
_BillSlink_Type = Integer32
_BillSlink_Object = MibTableColumn
billSlink = _BillSlink_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 7),
    _BillSlink_Type()
)
billSlink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billSlink.setStatus("mandatory")
_BillDslot_Type = Integer32
_BillDslot_Object = MibTableColumn
billDslot = _BillDslot_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 8),
    _BillDslot_Type()
)
billDslot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billDslot.setStatus("mandatory")
_BillDlink_Type = Integer32
_BillDlink_Object = MibTableColumn
billDlink = _BillDlink_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 9),
    _BillDlink_Type()
)
billDlink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billDlink.setStatus("mandatory")
_BillCalled_Type = E164
_BillCalled_Object = MibTableColumn
billCalled = _BillCalled_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 10),
    _BillCalled_Type()
)
billCalled.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billCalled.setStatus("mandatory")
_BillCalledSub_Type = E164SUB
_BillCalledSub_Object = MibTableColumn
billCalledSub = _BillCalledSub_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 11),
    _BillCalledSub_Type()
)
billCalledSub.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billCalledSub.setStatus("mandatory")
_BillCalling_Type = E164
_BillCalling_Object = MibTableColumn
billCalling = _BillCalling_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 12),
    _BillCalling_Type()
)
billCalling.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billCalling.setStatus("mandatory")
_BillCallingSub_Type = E164SUB
_BillCallingSub_Object = MibTableColumn
billCallingSub = _BillCallingSub_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 13),
    _BillCallingSub_Type()
)
billCallingSub.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billCallingSub.setStatus("mandatory")
_BillCellInC_Type = Counter32
_BillCellInC_Object = MibTableColumn
billCellInC = _BillCellInC_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 14),
    _BillCellInC_Type()
)
billCellInC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billCellInC.setStatus("mandatory")
_BillCellIn_Type = Counter32
_BillCellIn_Object = MibTableColumn
billCellIn = _BillCellIn_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 15),
    _BillCellIn_Type()
)
billCellIn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billCellIn.setStatus("mandatory")
_BillFrameIn_Type = Counter32
_BillFrameIn_Object = MibTableColumn
billFrameIn = _BillFrameIn_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 16),
    _BillFrameIn_Type()
)
billFrameIn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billFrameIn.setStatus("mandatory")
_BillByteInC_Type = Counter32
_BillByteInC_Object = MibTableColumn
billByteInC = _BillByteInC_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 17),
    _BillByteInC_Type()
)
billByteInC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billByteInC.setStatus("mandatory")
_BillByteIn_Type = Counter32
_BillByteIn_Object = MibTableColumn
billByteIn = _BillByteIn_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 18),
    _BillByteIn_Type()
)
billByteIn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billByteIn.setStatus("mandatory")
_BillCellOutC_Type = Counter32
_BillCellOutC_Object = MibTableColumn
billCellOutC = _BillCellOutC_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 19),
    _BillCellOutC_Type()
)
billCellOutC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billCellOutC.setStatus("mandatory")
_BillCellOut_Type = Counter32
_BillCellOut_Object = MibTableColumn
billCellOut = _BillCellOut_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 20),
    _BillCellOut_Type()
)
billCellOut.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billCellOut.setStatus("mandatory")
_BillFrameOut_Type = Counter32
_BillFrameOut_Object = MibTableColumn
billFrameOut = _BillFrameOut_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 21),
    _BillFrameOut_Type()
)
billFrameOut.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billFrameOut.setStatus("mandatory")
_BillByteOutC_Type = Counter32
_BillByteOutC_Object = MibTableColumn
billByteOutC = _BillByteOutC_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 22),
    _BillByteOutC_Type()
)
billByteOutC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billByteOutC.setStatus("mandatory")
_BillByteOut_Type = Counter32
_BillByteOut_Object = MibTableColumn
billByteOut = _BillByteOut_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 23),
    _BillByteOut_Type()
)
billByteOut.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billByteOut.setStatus("mandatory")
_BillCause_Type = Integer32
_BillCause_Object = MibTableColumn
billCause = _BillCause_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 25),
    _BillCause_Type()
)
billCause.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billCause.setStatus("mandatory")


class _BillValid_Type(Integer32):
    """Custom type billValid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("block-invalid", 3),
          ("invalid", 2),
          ("valid", 1))
    )


_BillValid_Type.__name__ = "Integer32"
_BillValid_Object = MibTableColumn
billValid = _BillValid_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 28),
    _BillValid_Type()
)
billValid.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    billValid.setStatus("mandatory")
_BillCLP1OutC_Type = Counter32
_BillCLP1OutC_Object = MibTableColumn
billCLP1OutC = _BillCLP1OutC_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 29),
    _BillCLP1OutC_Type()
)
billCLP1OutC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billCLP1OutC.setStatus("mandatory")
_BillCLP1Out_Type = Counter32
_BillCLP1Out_Object = MibTableColumn
billCLP1Out = _BillCLP1Out_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 30),
    _BillCLP1Out_Type()
)
billCLP1Out.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billCLP1Out.setStatus("mandatory")
_BillTag_Type = Integer32
_BillTag_Object = MibTableColumn
billTag = _BillTag_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 31),
    _BillTag_Type()
)
billTag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billTag.setStatus("mandatory")
_BillStartM2_Type = DateAndTime
_BillStartM2_Object = MibTableColumn
billStartM2 = _BillStartM2_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 32),
    _BillStartM2_Type()
)
billStartM2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billStartM2.setStatus("mandatory")
_BillEndM2_Type = DateAndTime
_BillEndM2_Object = MibTableColumn
billEndM2 = _BillEndM2_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 33),
    _BillEndM2_Type()
)
billEndM2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billEndM2.setStatus("mandatory")
_BillFwdPCR_Type = Integer32
_BillFwdPCR_Object = MibTableColumn
billFwdPCR = _BillFwdPCR_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 34),
    _BillFwdPCR_Type()
)
billFwdPCR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billFwdPCR.setStatus("mandatory")
_BillBwdPCR_Type = Integer32
_BillBwdPCR_Object = MibTableColumn
billBwdPCR = _BillBwdPCR_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 35),
    _BillBwdPCR_Type()
)
billBwdPCR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billBwdPCR.setStatus("mandatory")
_BillFwdSCR_Type = Integer32
_BillFwdSCR_Object = MibTableColumn
billFwdSCR = _BillFwdSCR_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 36),
    _BillFwdSCR_Type()
)
billFwdSCR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billFwdSCR.setStatus("mandatory")
_BillBwdSCR_Type = Integer32
_BillBwdSCR_Object = MibTableColumn
billBwdSCR = _BillBwdSCR_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 37),
    _BillBwdSCR_Type()
)
billBwdSCR.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billBwdSCR.setStatus("mandatory")
_BillFwdMBS_Type = Integer32
_BillFwdMBS_Object = MibTableColumn
billFwdMBS = _BillFwdMBS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 38),
    _BillFwdMBS_Type()
)
billFwdMBS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billFwdMBS.setStatus("mandatory")
_BillBwdMBS_Type = Integer32
_BillBwdMBS_Object = MibTableColumn
billBwdMBS = _BillBwdMBS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 39),
    _BillBwdMBS_Type()
)
billBwdMBS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billBwdMBS.setStatus("mandatory")


class _BillFwdQOS_Type(Integer32):
    """Custom type billFwdQOS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("abr", 6),
          ("cbr", 7),
          ("qos1", 1),
          ("qos2", 2),
          ("qos3", 3),
          ("qos4", 4),
          ("vbrNrt", 9),
          ("vbrRt", 8))
    )


_BillFwdQOS_Type.__name__ = "Integer32"
_BillFwdQOS_Object = MibTableColumn
billFwdQOS = _BillFwdQOS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 40),
    _BillFwdQOS_Type()
)
billFwdQOS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billFwdQOS.setStatus("mandatory")


class _BillBwdQOS_Type(Integer32):
    """Custom type billBwdQOS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("abr", 6),
          ("cbr", 7),
          ("qos1", 1),
          ("qos2", 2),
          ("qos3", 3),
          ("qos4", 4),
          ("vbrNrt", 9),
          ("vbrRt", 8))
    )


_BillBwdQOS_Type.__name__ = "Integer32"
_BillBwdQOS_Object = MibTableColumn
billBwdQOS = _BillBwdQOS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 3, 1, 41),
    _BillBwdQOS_Type()
)
billBwdQOS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    billBwdQOS.setStatus("mandatory")


class _BillingControl_Type(Integer32):
    """Custom type billingControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("delete-all-billing-records", 5),
          ("start-PVC-billing-process", 3),
          ("start-SPVC-and-PVC-billing", 4),
          ("start-SPVC-billing-process", 2),
          ("start-SVC-and-PVC-billing", 7),
          ("start-SVC-billing-process", 6),
          ("stop-billing-process", 1))
    )


_BillingControl_Type.__name__ = "Integer32"
_BillingControl_Object = MibScalar
billingControl = _BillingControl_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 4),
    _BillingControl_Type()
)
billingControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    billingControl.setStatus("mandatory")
_BillLost_Type = Counter32
_BillLost_Object = MibScalar
billLost = _BillLost_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 7),
    _BillLost_Type()
)
billLost.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    billLost.setStatus("mandatory")


class _BillLinks_Type(Integer32):
    """Custom type billLinks based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              255)
        )
    )
    namedValues = NamedValues(
        *(("all", 255),
          ("link0", 1),
          ("link1", 2))
    )


_BillLinks_Type.__name__ = "Integer32"
_BillLinks_Object = MibScalar
billLinks = _BillLinks_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 8),
    _BillLinks_Type()
)
billLinks.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    billLinks.setStatus("mandatory")


class _BillTrapControl_Type(Integer32):
    """Custom type billTrapControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_BillTrapControl_Type.__name__ = "Integer32"
_BillTrapControl_Object = MibScalar
billTrapControl = _BillTrapControl_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 9),
    _BillTrapControl_Type()
)
billTrapControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    billTrapControl.setStatus("mandatory")


class _BillDirControl_Type(Integer32):
    """Custom type billDirControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("bi-direction", 2),
          ("uni-direction", 1))
    )


_BillDirControl_Type.__name__ = "Integer32"
_BillDirControl_Object = MibScalar
billDirControl = _BillDirControl_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 10),
    _BillDirControl_Type()
)
billDirControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    billDirControl.setStatus("mandatory")


class _BillingInterval_Type(Integer32):
    """Custom type billingInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("period120min", 4),
          ("period15min", 1),
          ("period30min", 2),
          ("period60min", 3))
    )


_BillingInterval_Type.__name__ = "Integer32"
_BillingInterval_Object = MibScalar
billingInterval = _BillingInterval_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 14, 12),
    _BillingInterval_Type()
)
billingInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    billingInterval.setStatus("mandatory")
_Dv2QeDoc_ObjectIdentity = ObjectIdentity
dv2QeDoc = _Dv2QeDoc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15)
)
_QeDocMacAddress_Type = PhysAddress
_QeDocMacAddress_Object = MibScalar
qeDocMacAddress = _QeDocMacAddress_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 1),
    _QeDocMacAddress_Type()
)
qeDocMacAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qeDocMacAddress.setStatus("mandatory")


class _QeDocTunRetryPeriod_Type(Integer32):
    """Custom type qeDocTunRetryPeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 60),
    )


_QeDocTunRetryPeriod_Type.__name__ = "Integer32"
_QeDocTunRetryPeriod_Object = MibScalar
qeDocTunRetryPeriod = _QeDocTunRetryPeriod_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 2),
    _QeDocTunRetryPeriod_Type()
)
qeDocTunRetryPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunRetryPeriod.setStatus("mandatory")


class _QeDocTunIdlePeriod_Type(Integer32):
    """Custom type qeDocTunIdlePeriod based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 3600),
    )


_QeDocTunIdlePeriod_Type.__name__ = "Integer32"
_QeDocTunIdlePeriod_Object = MibScalar
qeDocTunIdlePeriod = _QeDocTunIdlePeriod_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 3),
    _QeDocTunIdlePeriod_Type()
)
qeDocTunIdlePeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunIdlePeriod.setStatus("mandatory")
_QeDocBridgeTable_Object = MibTable
qeDocBridgeTable = _QeDocBridgeTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4)
)
if mibBuilder.loadTexts:
    qeDocBridgeTable.setStatus("mandatory")
_QeDocBridgeEntry_Object = MibTableRow
qeDocBridgeEntry = _QeDocBridgeEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4, 1)
)
qeDocBridgeEntry.setIndexNames(
    (0, "DV2-MIB", "qeDocBridgeLinkNo"),
)
if mibBuilder.loadTexts:
    qeDocBridgeEntry.setStatus("mandatory")


class _QeDocBridgeLinkNo_Type(Integer32):
    """Custom type qeDocBridgeLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_QeDocBridgeLinkNo_Type.__name__ = "Integer32"
_QeDocBridgeLinkNo_Object = MibTableColumn
qeDocBridgeLinkNo = _QeDocBridgeLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4, 1, 1),
    _QeDocBridgeLinkNo_Type()
)
qeDocBridgeLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qeDocBridgeLinkNo.setStatus("mandatory")


class _QeDocBridgeEnable_Type(Integer32):
    """Custom type qeDocBridgeEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_QeDocBridgeEnable_Type.__name__ = "Integer32"
_QeDocBridgeEnable_Object = MibTableColumn
qeDocBridgeEnable = _QeDocBridgeEnable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4, 1, 2),
    _QeDocBridgeEnable_Type()
)
qeDocBridgeEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocBridgeEnable.setStatus("mandatory")


class _QeDocBridgeLink0Eligible_Type(Integer32):
    """Custom type qeDocBridgeLink0Eligible based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_QeDocBridgeLink0Eligible_Type.__name__ = "Integer32"
_QeDocBridgeLink0Eligible_Object = MibTableColumn
qeDocBridgeLink0Eligible = _QeDocBridgeLink0Eligible_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4, 1, 3),
    _QeDocBridgeLink0Eligible_Type()
)
qeDocBridgeLink0Eligible.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocBridgeLink0Eligible.setStatus("mandatory")


class _QeDocBridgeLink1Eligible_Type(Integer32):
    """Custom type qeDocBridgeLink1Eligible based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_QeDocBridgeLink1Eligible_Type.__name__ = "Integer32"
_QeDocBridgeLink1Eligible_Object = MibTableColumn
qeDocBridgeLink1Eligible = _QeDocBridgeLink1Eligible_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4, 1, 4),
    _QeDocBridgeLink1Eligible_Type()
)
qeDocBridgeLink1Eligible.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocBridgeLink1Eligible.setStatus("mandatory")


class _QeDocBridgeLink2Eligible_Type(Integer32):
    """Custom type qeDocBridgeLink2Eligible based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_QeDocBridgeLink2Eligible_Type.__name__ = "Integer32"
_QeDocBridgeLink2Eligible_Object = MibTableColumn
qeDocBridgeLink2Eligible = _QeDocBridgeLink2Eligible_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4, 1, 5),
    _QeDocBridgeLink2Eligible_Type()
)
qeDocBridgeLink2Eligible.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocBridgeLink2Eligible.setStatus("mandatory")


class _QeDocBridgeLink3Eligible_Type(Integer32):
    """Custom type qeDocBridgeLink3Eligible based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_QeDocBridgeLink3Eligible_Type.__name__ = "Integer32"
_QeDocBridgeLink3Eligible_Object = MibTableColumn
qeDocBridgeLink3Eligible = _QeDocBridgeLink3Eligible_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 4, 1, 6),
    _QeDocBridgeLink3Eligible_Type()
)
qeDocBridgeLink3Eligible.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocBridgeLink3Eligible.setStatus("mandatory")
_QeDocTunTable_Object = MibTable
qeDocTunTable = _QeDocTunTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6)
)
if mibBuilder.loadTexts:
    qeDocTunTable.setStatus("mandatory")
_QeDocTunEntry_Object = MibTableRow
qeDocTunEntry = _QeDocTunEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1)
)
qeDocTunEntry.setIndexNames(
    (0, "DV2-MIB", "qeDocTunIndex"),
)
if mibBuilder.loadTexts:
    qeDocTunEntry.setStatus("mandatory")


class _QeDocTunIndex_Type(Integer32):
    """Custom type qeDocTunIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 127),
    )


_QeDocTunIndex_Type.__name__ = "Integer32"
_QeDocTunIndex_Object = MibTableColumn
qeDocTunIndex = _QeDocTunIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 1),
    _QeDocTunIndex_Type()
)
qeDocTunIndex.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunIndex.setStatus("mandatory")
_QeDocTunName_Type = DisplayString
_QeDocTunName_Object = MibTableColumn
qeDocTunName = _QeDocTunName_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 2),
    _QeDocTunName_Type()
)
qeDocTunName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunName.setStatus("mandatory")


class _QeDocTunType_Type(Integer32):
    """Custom type qeDocTunType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ip", 2),
          ("mac-bridge", 3),
          ("unused", 1))
    )


_QeDocTunType_Type.__name__ = "Integer32"
_QeDocTunType_Object = MibTableColumn
qeDocTunType = _QeDocTunType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 3),
    _QeDocTunType_Type()
)
qeDocTunType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunType.setStatus("mandatory")


class _QeDocTunState_Type(Integer32):
    """Custom type qeDocTunState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("failed", 4),
          ("idle", 1),
          ("use-pvc", 2),
          ("use-svc", 3))
    )


_QeDocTunState_Type.__name__ = "Integer32"
_QeDocTunState_Object = MibTableColumn
qeDocTunState = _QeDocTunState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 4),
    _QeDocTunState_Type()
)
qeDocTunState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunState.setStatus("mandatory")


class _QeDocTunCallState_Type(Integer32):
    """Custom type qeDocTunCallState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("active", 4),
          ("allocated", 2),
          ("idle", 1),
          ("waccept", 3))
    )


_QeDocTunCallState_Type.__name__ = "Integer32"
_QeDocTunCallState_Object = MibTableColumn
qeDocTunCallState = _QeDocTunCallState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 5),
    _QeDocTunCallState_Type()
)
qeDocTunCallState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qeDocTunCallState.setStatus("mandatory")
_QeDocTunInFrames_Type = Counter32
_QeDocTunInFrames_Object = MibTableColumn
qeDocTunInFrames = _QeDocTunInFrames_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 6),
    _QeDocTunInFrames_Type()
)
qeDocTunInFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qeDocTunInFrames.setStatus("mandatory")
_QeDocTunOutFrames_Type = Counter32
_QeDocTunOutFrames_Object = MibTableColumn
qeDocTunOutFrames = _QeDocTunOutFrames_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 7),
    _QeDocTunOutFrames_Type()
)
qeDocTunOutFrames.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qeDocTunOutFrames.setStatus("mandatory")
_QeDocTunVPI_Type = VirtualPathIdentifier
_QeDocTunVPI_Object = MibTableColumn
qeDocTunVPI = _QeDocTunVPI_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 8),
    _QeDocTunVPI_Type()
)
qeDocTunVPI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qeDocTunVPI.setStatus("mandatory")
_QeDocTunVCI_Type = VirtualCircuitIdentifier
_QeDocTunVCI_Object = MibTableColumn
qeDocTunVCI = _QeDocTunVCI_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 9),
    _QeDocTunVCI_Type()
)
qeDocTunVCI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qeDocTunVCI.setStatus("mandatory")


class _QeDocTunPriority_Type(Integer32):
    """Custom type qeDocTunPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_QeDocTunPriority_Type.__name__ = "Integer32"
_QeDocTunPriority_Object = MibTableColumn
qeDocTunPriority = _QeDocTunPriority_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 10),
    _QeDocTunPriority_Type()
)
qeDocTunPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qeDocTunPriority.setStatus("mandatory")


class _QeDocTunSlot_Type(Integer32):
    """Custom type qeDocTunSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_QeDocTunSlot_Type.__name__ = "Integer32"
_QeDocTunSlot_Object = MibTableColumn
qeDocTunSlot = _QeDocTunSlot_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 11),
    _QeDocTunSlot_Type()
)
qeDocTunSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qeDocTunSlot.setStatus("mandatory")


class _QeDocTunLink_Type(Integer32):
    """Custom type qeDocTunLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_QeDocTunLink_Type.__name__ = "Integer32"
_QeDocTunLink_Object = MibTableColumn
qeDocTunLink = _QeDocTunLink_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 12),
    _QeDocTunLink_Type()
)
qeDocTunLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qeDocTunLink.setStatus("mandatory")
_QeDocTunRemNet_Type = IpAddress
_QeDocTunRemNet_Object = MibTableColumn
qeDocTunRemNet = _QeDocTunRemNet_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 13),
    _QeDocTunRemNet_Type()
)
qeDocTunRemNet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunRemNet.setStatus("mandatory")
_QeDocTunRemMask_Type = IpAddress
_QeDocTunRemMask_Object = MibTableColumn
qeDocTunRemMask = _QeDocTunRemMask_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 14),
    _QeDocTunRemMask_Type()
)
qeDocTunRemMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunRemMask.setStatus("mandatory")
_QeDocTunLocNet_Type = IpAddress
_QeDocTunLocNet_Object = MibTableColumn
qeDocTunLocNet = _QeDocTunLocNet_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 15),
    _QeDocTunLocNet_Type()
)
qeDocTunLocNet.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunLocNet.setStatus("mandatory")
_QeDocTunLocMask_Type = IpAddress
_QeDocTunLocMask_Object = MibTableColumn
qeDocTunLocMask = _QeDocTunLocMask_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 16),
    _QeDocTunLocMask_Type()
)
qeDocTunLocMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunLocMask.setStatus("mandatory")


class _QeDocTunRemStartSkt_Type(Integer32):
    """Custom type qeDocTunRemStartSkt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_QeDocTunRemStartSkt_Type.__name__ = "Integer32"
_QeDocTunRemStartSkt_Object = MibTableColumn
qeDocTunRemStartSkt = _QeDocTunRemStartSkt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 17),
    _QeDocTunRemStartSkt_Type()
)
qeDocTunRemStartSkt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunRemStartSkt.setStatus("mandatory")


class _QeDocTunRemEndSkt_Type(Integer32):
    """Custom type qeDocTunRemEndSkt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_QeDocTunRemEndSkt_Type.__name__ = "Integer32"
_QeDocTunRemEndSkt_Object = MibTableColumn
qeDocTunRemEndSkt = _QeDocTunRemEndSkt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 18),
    _QeDocTunRemEndSkt_Type()
)
qeDocTunRemEndSkt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunRemEndSkt.setStatus("mandatory")


class _QeDocTunLocStartSkt_Type(Integer32):
    """Custom type qeDocTunLocStartSkt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_QeDocTunLocStartSkt_Type.__name__ = "Integer32"
_QeDocTunLocStartSkt_Object = MibTableColumn
qeDocTunLocStartSkt = _QeDocTunLocStartSkt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 19),
    _QeDocTunLocStartSkt_Type()
)
qeDocTunLocStartSkt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunLocStartSkt.setStatus("mandatory")


class _QeDocTunLocEndSkt_Type(Integer32):
    """Custom type qeDocTunLocEndSkt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_QeDocTunLocEndSkt_Type.__name__ = "Integer32"
_QeDocTunLocEndSkt_Object = MibTableColumn
qeDocTunLocEndSkt = _QeDocTunLocEndSkt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 20),
    _QeDocTunLocEndSkt_Type()
)
qeDocTunLocEndSkt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunLocEndSkt.setStatus("mandatory")


class _QeDocTunSktType_Type(Integer32):
    """Custom type qeDocTunSktType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("tcpExc-udpExc", 1),
          ("tcpExc-udpInc", 2),
          ("tcpInc-udpExc", 3),
          ("tcpInc-udpInc", 4))
    )


_QeDocTunSktType_Type.__name__ = "Integer32"
_QeDocTunSktType_Object = MibTableColumn
qeDocTunSktType = _QeDocTunSktType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 21),
    _QeDocTunSktType_Type()
)
qeDocTunSktType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunSktType.setStatus("mandatory")
_QeDocTunDestAddress_Type = E164
_QeDocTunDestAddress_Object = MibTableColumn
qeDocTunDestAddress = _QeDocTunDestAddress_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 22),
    _QeDocTunDestAddress_Type()
)
qeDocTunDestAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunDestAddress.setStatus("mandatory")
_QeDocTunDestSubAddress_Type = E164SUB
_QeDocTunDestSubAddress_Object = MibTableColumn
qeDocTunDestSubAddress = _QeDocTunDestSubAddress_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 23),
    _QeDocTunDestSubAddress_Type()
)
qeDocTunDestSubAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunDestSubAddress.setStatus("mandatory")


class _QeDocTunLink0Eligible_Type(Integer32):
    """Custom type qeDocTunLink0Eligible based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_QeDocTunLink0Eligible_Type.__name__ = "Integer32"
_QeDocTunLink0Eligible_Object = MibTableColumn
qeDocTunLink0Eligible = _QeDocTunLink0Eligible_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 24),
    _QeDocTunLink0Eligible_Type()
)
qeDocTunLink0Eligible.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunLink0Eligible.setStatus("mandatory")


class _QeDocTunLink1Eligible_Type(Integer32):
    """Custom type qeDocTunLink1Eligible based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_QeDocTunLink1Eligible_Type.__name__ = "Integer32"
_QeDocTunLink1Eligible_Object = MibTableColumn
qeDocTunLink1Eligible = _QeDocTunLink1Eligible_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 25),
    _QeDocTunLink1Eligible_Type()
)
qeDocTunLink1Eligible.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunLink1Eligible.setStatus("mandatory")


class _QeDocTunLink2Eligible_Type(Integer32):
    """Custom type qeDocTunLink2Eligible based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_QeDocTunLink2Eligible_Type.__name__ = "Integer32"
_QeDocTunLink2Eligible_Object = MibTableColumn
qeDocTunLink2Eligible = _QeDocTunLink2Eligible_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 26),
    _QeDocTunLink2Eligible_Type()
)
qeDocTunLink2Eligible.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunLink2Eligible.setStatus("mandatory")


class _QeDocTunLink3Eligible_Type(Integer32):
    """Custom type qeDocTunLink3Eligible based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_QeDocTunLink3Eligible_Type.__name__ = "Integer32"
_QeDocTunLink3Eligible_Object = MibTableColumn
qeDocTunLink3Eligible = _QeDocTunLink3Eligible_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 27),
    _QeDocTunLink3Eligible_Type()
)
qeDocTunLink3Eligible.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunLink3Eligible.setStatus("mandatory")


class _QeDocTunValidity_Type(Integer32):
    """Custom type qeDocTunValidity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("valid", 1))
    )


_QeDocTunValidity_Type.__name__ = "Integer32"
_QeDocTunValidity_Object = MibTableColumn
qeDocTunValidity = _QeDocTunValidity_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 28),
    _QeDocTunValidity_Type()
)
qeDocTunValidity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunValidity.setStatus("mandatory")


class _QeDocTunRfc1483Encap_Type(Integer32):
    """Custom type qeDocTunRfc1483Encap based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_QeDocTunRfc1483Encap_Type.__name__ = "Integer32"
_QeDocTunRfc1483Encap_Object = MibTableColumn
qeDocTunRfc1483Encap = _QeDocTunRfc1483Encap_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 29),
    _QeDocTunRfc1483Encap_Type()
)
qeDocTunRfc1483Encap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocTunRfc1483Encap.setStatus("mandatory")


class _QeDocTunClp_Type(Integer32):
    """Custom type qeDocTunClp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_QeDocTunClp_Type.__name__ = "Integer32"
_QeDocTunClp_Object = MibTableColumn
qeDocTunClp = _QeDocTunClp_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 6, 1, 31),
    _QeDocTunClp_Type()
)
qeDocTunClp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    qeDocTunClp.setStatus("mandatory")
_QeDocIpAddress_Type = IpAddress
_QeDocIpAddress_Object = MibScalar
qeDocIpAddress = _QeDocIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 7),
    _QeDocIpAddress_Type()
)
qeDocIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocIpAddress.setStatus("mandatory")
_QeDocIpMask_Type = IpAddress
_QeDocIpMask_Object = MibScalar
qeDocIpMask = _QeDocIpMask_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 8),
    _QeDocIpMask_Type()
)
qeDocIpMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocIpMask.setStatus("mandatory")
_QeDocIpBCast_Type = IpAddress
_QeDocIpBCast_Object = MibScalar
qeDocIpBCast = _QeDocIpBCast_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 15, 9),
    _QeDocIpBCast_Type()
)
qeDocIpBCast.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    qeDocIpBCast.setStatus("mandatory")
_Dv2SDH_ObjectIdentity = ObjectIdentity
dv2SDH = _Dv2SDH_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16)
)
_SdhCTable_Object = MibTable
sdhCTable = _SdhCTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1)
)
if mibBuilder.loadTexts:
    sdhCTable.setStatus("mandatory")
_SdhCEntry_Object = MibTableRow
sdhCEntry = _SdhCEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1)
)
sdhCEntry.setIndexNames(
    (0, "DV2-MIB", "sdhCLinkNo"),
)
if mibBuilder.loadTexts:
    sdhCEntry.setStatus("mandatory")


class _SdhCLinkNo_Type(Integer32):
    """Custom type sdhCLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_SdhCLinkNo_Type.__name__ = "Integer32"
_SdhCLinkNo_Object = MibTableColumn
sdhCLinkNo = _SdhCLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 1),
    _SdhCLinkNo_Type()
)
sdhCLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhCLinkNo.setStatus("mandatory")


class _SdhCLinkEnab_Type(Integer32):
    """Custom type sdhCLinkEnab based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhCLinkEnab_Type.__name__ = "Integer32"
_SdhCLinkEnab_Object = MibTableColumn
sdhCLinkEnab = _SdhCLinkEnab_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 2),
    _SdhCLinkEnab_Type()
)
sdhCLinkEnab.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sdhCLinkEnab.setStatus("mandatory")


class _SdhCLoopTimer_Type(Integer32):
    """Custom type sdhCLoopTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhCLoopTimer_Type.__name__ = "Integer32"
_SdhCLoopTimer_Object = MibTableColumn
sdhCLoopTimer = _SdhCLoopTimer_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 3),
    _SdhCLoopTimer_Type()
)
sdhCLoopTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sdhCLoopTimer.setStatus("mandatory")


class _SdhCLoopDiag_Type(Integer32):
    """Custom type sdhCLoopDiag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhCLoopDiag_Type.__name__ = "Integer32"
_SdhCLoopDiag_Object = MibTableColumn
sdhCLoopDiag = _SdhCLoopDiag_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 4),
    _SdhCLoopDiag_Type()
)
sdhCLoopDiag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sdhCLoopDiag.setStatus("mandatory")


class _SdhCLoopLine_Type(Integer32):
    """Custom type sdhCLoopLine based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhCLoopLine_Type.__name__ = "Integer32"
_SdhCLoopLine_Object = MibTableColumn
sdhCLoopLine = _SdhCLoopLine_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 5),
    _SdhCLoopLine_Type()
)
sdhCLoopLine.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sdhCLoopLine.setStatus("mandatory")


class _SdhCScrambler_Type(Integer32):
    """Custom type sdhCScrambler based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhCScrambler_Type.__name__ = "Integer32"
_SdhCScrambler_Object = MibTableColumn
sdhCScrambler = _SdhCScrambler_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 6),
    _SdhCScrambler_Type()
)
sdhCScrambler.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sdhCScrambler.setStatus("mandatory")


class _SdhC0x55_Type(Integer32):
    """Custom type sdhC0x55 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhC0x55_Type.__name__ = "Integer32"
_SdhC0x55_Object = MibTableColumn
sdhC0x55 = _SdhC0x55_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 7),
    _SdhC0x55_Type()
)
sdhC0x55.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sdhC0x55.setStatus("mandatory")


class _SdhSonetSdh_Type(Integer32):
    """Custom type sdhSonetSdh based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("sdh", 2),
          ("sonet", 1))
    )


_SdhSonetSdh_Type.__name__ = "Integer32"
_SdhSonetSdh_Object = MibTableColumn
sdhSonetSdh = _SdhSonetSdh_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 8),
    _SdhSonetSdh_Type()
)
sdhSonetSdh.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sdhSonetSdh.setStatus("mandatory")


class _SdhClearCounts_Type(Integer32):
    """Custom type sdhClearCounts based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhClearCounts_Type.__name__ = "Integer32"
_SdhClearCounts_Object = MibTableColumn
sdhClearCounts = _SdhClearCounts_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 9),
    _SdhClearCounts_Type()
)
sdhClearCounts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sdhClearCounts.setStatus("mandatory")


class _SdhReconfig_Type(Integer32):
    """Custom type sdhReconfig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhReconfig_Type.__name__ = "Integer32"
_SdhReconfig_Object = MibTableColumn
sdhReconfig = _SdhReconfig_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 10),
    _SdhReconfig_Type()
)
sdhReconfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sdhReconfig.setStatus("mandatory")


class _SdhCLpbkTimeout_Type(Integer32):
    """Custom type sdhCLpbkTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 604800),
    )


_SdhCLpbkTimeout_Type.__name__ = "Integer32"
_SdhCLpbkTimeout_Object = MibTableColumn
sdhCLpbkTimeout = _SdhCLpbkTimeout_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 11),
    _SdhCLpbkTimeout_Type()
)
sdhCLpbkTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sdhCLpbkTimeout.setStatus("mandatory")


class _SdhStmSts_Type(Integer32):
    """Custom type sdhStmSts based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("oc-1", 2),
          ("oc-3", 1))
    )


_SdhStmSts_Type.__name__ = "Integer32"
_SdhStmSts_Object = MibTableColumn
sdhStmSts = _SdhStmSts_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 12),
    _SdhStmSts_Type()
)
sdhStmSts.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sdhStmSts.setStatus("mandatory")


class _SdhAPSOnOff_Type(Integer32):
    """Custom type sdhAPSOnOff based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_SdhAPSOnOff_Type.__name__ = "Integer32"
_SdhAPSOnOff_Object = MibTableColumn
sdhAPSOnOff = _SdhAPSOnOff_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 13),
    _SdhAPSOnOff_Type()
)
sdhAPSOnOff.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sdhAPSOnOff.setStatus("mandatory")


class _SdhCIdleCell_Type(Integer32):
    """Custom type sdhCIdleCell based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("idle", 2),
          ("unassigned", 1))
    )


_SdhCIdleCell_Type.__name__ = "Integer32"
_SdhCIdleCell_Object = MibTableColumn
sdhCIdleCell = _SdhCIdleCell_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 1, 1, 14),
    _SdhCIdleCell_Type()
)
sdhCIdleCell.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sdhCIdleCell.setStatus("mandatory")
_SdhSTable_Object = MibTable
sdhSTable = _SdhSTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3)
)
if mibBuilder.loadTexts:
    sdhSTable.setStatus("mandatory")
_SdhSEntry_Object = MibTableRow
sdhSEntry = _SdhSEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1)
)
sdhSEntry.setIndexNames(
    (0, "DV2-MIB", "sdhSLinkNo"),
)
if mibBuilder.loadTexts:
    sdhSEntry.setStatus("mandatory")


class _SdhSLinkNo_Type(Integer32):
    """Custom type sdhSLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_SdhSLinkNo_Type.__name__ = "Integer32"
_SdhSLinkNo_Object = MibTableColumn
sdhSLinkNo = _SdhSLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 1),
    _SdhSLinkNo_Type()
)
sdhSLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSLinkNo.setStatus("mandatory")


class _SdhSTXclock_Type(Integer32):
    """Custom type sdhSTXclock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_SdhSTXclock_Type.__name__ = "Integer32"
_SdhSTXclock_Object = MibTableColumn
sdhSTXclock = _SdhSTXclock_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 2),
    _SdhSTXclock_Type()
)
sdhSTXclock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSTXclock.setStatus("mandatory")


class _SdhSRXclock_Type(Integer32):
    """Custom type sdhSRXclock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_SdhSRXclock_Type.__name__ = "Integer32"
_SdhSRXclock_Object = MibTableColumn
sdhSRXclock = _SdhSRXclock_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 3),
    _SdhSRXclock_Type()
)
sdhSRXclock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSRXclock.setStatus("mandatory")


class _SdhSSectLOS_Type(Integer32):
    """Custom type sdhSSectLOS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhSSectLOS_Type.__name__ = "Integer32"
_SdhSSectLOS_Object = MibTableColumn
sdhSSectLOS = _SdhSSectLOS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 4),
    _SdhSSectLOS_Type()
)
sdhSSectLOS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSSectLOS.setStatus("mandatory")


class _SdhSSectOOF_Type(Integer32):
    """Custom type sdhSSectOOF based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhSSectOOF_Type.__name__ = "Integer32"
_SdhSSectOOF_Object = MibTableColumn
sdhSSectOOF = _SdhSSectOOF_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 5),
    _SdhSSectOOF_Type()
)
sdhSSectOOF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSSectOOF.setStatus("mandatory")


class _SdhSSectLOF_Type(Integer32):
    """Custom type sdhSSectLOF based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhSSectLOF_Type.__name__ = "Integer32"
_SdhSSectLOF_Object = MibTableColumn
sdhSSectLOF = _SdhSSectLOF_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 6),
    _SdhSSectLOF_Type()
)
sdhSSectLOF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSSectLOF.setStatus("mandatory")


class _SdhSLineAIS_Type(Integer32):
    """Custom type sdhSLineAIS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhSLineAIS_Type.__name__ = "Integer32"
_SdhSLineAIS_Object = MibTableColumn
sdhSLineAIS = _SdhSLineAIS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 7),
    _SdhSLineAIS_Type()
)
sdhSLineAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSLineAIS.setStatus("mandatory")


class _SdhSLineFERF_Type(Integer32):
    """Custom type sdhSLineFERF based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhSLineFERF_Type.__name__ = "Integer32"
_SdhSLineFERF_Object = MibTableColumn
sdhSLineFERF = _SdhSLineFERF_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 8),
    _SdhSLineFERF_Type()
)
sdhSLineFERF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSLineFERF.setStatus("mandatory")


class _SdhSPathAIS_Type(Integer32):
    """Custom type sdhSPathAIS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhSPathAIS_Type.__name__ = "Integer32"
_SdhSPathAIS_Object = MibTableColumn
sdhSPathAIS = _SdhSPathAIS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 9),
    _SdhSPathAIS_Type()
)
sdhSPathAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSPathAIS.setStatus("mandatory")


class _SdhSPathYellow_Type(Integer32):
    """Custom type sdhSPathYellow based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhSPathYellow_Type.__name__ = "Integer32"
_SdhSPathYellow_Object = MibTableColumn
sdhSPathYellow = _SdhSPathYellow_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 10),
    _SdhSPathYellow_Type()
)
sdhSPathYellow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSPathYellow.setStatus("mandatory")


class _SdhSPathFERF_Type(Integer32):
    """Custom type sdhSPathFERF based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhSPathFERF_Type.__name__ = "Integer32"
_SdhSPathFERF_Object = MibTableColumn
sdhSPathFERF = _SdhSPathFERF_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 11),
    _SdhSPathFERF_Type()
)
sdhSPathFERF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSPathFERF.setStatus("mandatory")


class _SdhSPathLOP_Type(Integer32):
    """Custom type sdhSPathLOP based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhSPathLOP_Type.__name__ = "Integer32"
_SdhSPathLOP_Object = MibTableColumn
sdhSPathLOP = _SdhSPathLOP_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 12),
    _SdhSPathLOP_Type()
)
sdhSPathLOP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSPathLOP.setStatus("mandatory")


class _SdhSPathLabelMM_Type(Integer32):
    """Custom type sdhSPathLabelMM based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhSPathLabelMM_Type.__name__ = "Integer32"
_SdhSPathLabelMM_Object = MibTableColumn
sdhSPathLabelMM = _SdhSPathLabelMM_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 13),
    _SdhSPathLabelMM_Type()
)
sdhSPathLabelMM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSPathLabelMM.setStatus("mandatory")


class _SdhSExBERDefect_Type(Integer32):
    """Custom type sdhSExBERDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhSExBERDefect_Type.__name__ = "Integer32"
_SdhSExBERDefect_Object = MibTableColumn
sdhSExBERDefect = _SdhSExBERDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 14),
    _SdhSExBERDefect_Type()
)
sdhSExBERDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSExBERDefect.setStatus("mandatory")


class _SdhSPathLabel_Type(Integer32):
    """Custom type sdhSPathLabel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("atm", 1),
          ("non-atm", 2))
    )


_SdhSPathLabel_Type.__name__ = "Integer32"
_SdhSPathLabel_Object = MibTableColumn
sdhSPathLabel = _SdhSPathLabel_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 15),
    _SdhSPathLabel_Type()
)
sdhSPathLabel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSPathLabel.setStatus("mandatory")


class _SdhSCellDelState_Type(Integer32):
    """Custom type sdhSCellDelState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("hunt-or-presync", 1),
          ("sync", 2))
    )


_SdhSCellDelState_Type.__name__ = "Integer32"
_SdhSCellDelState_Object = MibTableColumn
sdhSCellDelState = _SdhSCellDelState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 16),
    _SdhSCellDelState_Type()
)
sdhSCellDelState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSCellDelState.setStatus("mandatory")


class _SdhSAlarmLOS_Type(Integer32):
    """Custom type sdhSAlarmLOS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhSAlarmLOS_Type.__name__ = "Integer32"
_SdhSAlarmLOS_Object = MibTableColumn
sdhSAlarmLOS = _SdhSAlarmLOS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 17),
    _SdhSAlarmLOS_Type()
)
sdhSAlarmLOS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSAlarmLOS.setStatus("mandatory")


class _SdhSAlarmLOF_Type(Integer32):
    """Custom type sdhSAlarmLOF based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhSAlarmLOF_Type.__name__ = "Integer32"
_SdhSAlarmLOF_Object = MibTableColumn
sdhSAlarmLOF = _SdhSAlarmLOF_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 18),
    _SdhSAlarmLOF_Type()
)
sdhSAlarmLOF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSAlarmLOF.setStatus("mandatory")


class _SdhSAlarmLineAIS_Type(Integer32):
    """Custom type sdhSAlarmLineAIS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhSAlarmLineAIS_Type.__name__ = "Integer32"
_SdhSAlarmLineAIS_Object = MibTableColumn
sdhSAlarmLineAIS = _SdhSAlarmLineAIS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 19),
    _SdhSAlarmLineAIS_Type()
)
sdhSAlarmLineAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSAlarmLineAIS.setStatus("mandatory")


class _SdhSAlarmLineRFI_Type(Integer32):
    """Custom type sdhSAlarmLineRFI based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhSAlarmLineRFI_Type.__name__ = "Integer32"
_SdhSAlarmLineRFI_Object = MibTableColumn
sdhSAlarmLineRFI = _SdhSAlarmLineRFI_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 20),
    _SdhSAlarmLineRFI_Type()
)
sdhSAlarmLineRFI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSAlarmLineRFI.setStatus("mandatory")


class _SdhSAlarmPathAIS_Type(Integer32):
    """Custom type sdhSAlarmPathAIS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhSAlarmPathAIS_Type.__name__ = "Integer32"
_SdhSAlarmPathAIS_Object = MibTableColumn
sdhSAlarmPathAIS = _SdhSAlarmPathAIS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 21),
    _SdhSAlarmPathAIS_Type()
)
sdhSAlarmPathAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSAlarmPathAIS.setStatus("mandatory")


class _SdhSAlarmPathRFI_Type(Integer32):
    """Custom type sdhSAlarmPathRFI based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhSAlarmPathRFI_Type.__name__ = "Integer32"
_SdhSAlarmPathRFI_Object = MibTableColumn
sdhSAlarmPathRFI = _SdhSAlarmPathRFI_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 22),
    _SdhSAlarmPathRFI_Type()
)
sdhSAlarmPathRFI.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSAlarmPathRFI.setStatus("mandatory")


class _SdhSAlarmLOP_Type(Integer32):
    """Custom type sdhSAlarmLOP based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhSAlarmLOP_Type.__name__ = "Integer32"
_SdhSAlarmLOP_Object = MibTableColumn
sdhSAlarmLOP = _SdhSAlarmLOP_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 23),
    _SdhSAlarmLOP_Type()
)
sdhSAlarmLOP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSAlarmLOP.setStatus("mandatory")


class _SdhSAlarmPLM_Type(Integer32):
    """Custom type sdhSAlarmPLM based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhSAlarmPLM_Type.__name__ = "Integer32"
_SdhSAlarmPLM_Object = MibTableColumn
sdhSAlarmPLM = _SdhSAlarmPLM_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 24),
    _SdhSAlarmPLM_Type()
)
sdhSAlarmPLM.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSAlarmPLM.setStatus("mandatory")


class _SdhSExBERAlarm_Type(Integer32):
    """Custom type sdhSExBERAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SdhSExBERAlarm_Type.__name__ = "Integer32"
_SdhSExBERAlarm_Object = MibTableColumn
sdhSExBERAlarm = _SdhSExBERAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 25),
    _SdhSExBERAlarm_Type()
)
sdhSExBERAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSExBERAlarm.setStatus("mandatory")
_SdhSCorrHCS_Type = Counter32
_SdhSCorrHCS_Object = MibTableColumn
sdhSCorrHCS = _SdhSCorrHCS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 26),
    _SdhSCorrHCS_Type()
)
sdhSCorrHCS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSCorrHCS.setStatus("mandatory")
_SdhSUnCorrHCS_Type = Counter32
_SdhSUnCorrHCS_Object = MibTableColumn
sdhSUnCorrHCS = _SdhSUnCorrHCS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 3, 1, 27),
    _SdhSUnCorrHCS_Type()
)
sdhSUnCorrHCS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSUnCorrHCS.setStatus("mandatory")
_SdhS2Table_Object = MibTable
sdhS2Table = _SdhS2Table_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4)
)
if mibBuilder.loadTexts:
    sdhS2Table.setStatus("mandatory")
_SdhS2Entry_Object = MibTableRow
sdhS2Entry = _SdhS2Entry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1)
)
sdhS2Entry.setIndexNames(
    (0, "DV2-MIB", "sdhS2LinkNo"),
)
if mibBuilder.loadTexts:
    sdhS2Entry.setStatus("mandatory")


class _SdhS2LinkNo_Type(Integer32):
    """Custom type sdhS2LinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_SdhS2LinkNo_Type.__name__ = "Integer32"
_SdhS2LinkNo_Object = MibTableColumn
sdhS2LinkNo = _SdhS2LinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 1),
    _SdhS2LinkNo_Type()
)
sdhS2LinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhS2LinkNo.setStatus("mandatory")
_SdhSSectBIP8_Type = Counter32
_SdhSSectBIP8_Object = MibTableColumn
sdhSSectBIP8 = _SdhSSectBIP8_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 2),
    _SdhSSectBIP8_Type()
)
sdhSSectBIP8.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSSectBIP8.setStatus("mandatory")
_SdhSSectES_Type = Counter32
_SdhSSectES_Object = MibTableColumn
sdhSSectES = _SdhSSectES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 3),
    _SdhSSectES_Type()
)
sdhSSectES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSSectES.setStatus("mandatory")
_SdhSSectSES_Type = Counter32
_SdhSSectSES_Object = MibTableColumn
sdhSSectSES = _SdhSSectSES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 4),
    _SdhSSectSES_Type()
)
sdhSSectSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSSectSES.setStatus("mandatory")
_SdhSLineBIP24_Type = Counter32
_SdhSLineBIP24_Object = MibTableColumn
sdhSLineBIP24 = _SdhSLineBIP24_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 5),
    _SdhSLineBIP24_Type()
)
sdhSLineBIP24.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSLineBIP24.setStatus("mandatory")
_SdhSLineES_Type = Counter32
_SdhSLineES_Object = MibTableColumn
sdhSLineES = _SdhSLineES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 6),
    _SdhSLineES_Type()
)
sdhSLineES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSLineES.setStatus("mandatory")
_SdhSLineSES_Type = Counter32
_SdhSLineSES_Object = MibTableColumn
sdhSLineSES = _SdhSLineSES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 7),
    _SdhSLineSES_Type()
)
sdhSLineSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSLineSES.setStatus("mandatory")
_SdhSLineUAS_Type = Counter32
_SdhSLineUAS_Object = MibTableColumn
sdhSLineUAS = _SdhSLineUAS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 8),
    _SdhSLineUAS_Type()
)
sdhSLineUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSLineUAS.setStatus("mandatory")
_SdhSLineFC_Type = Counter32
_SdhSLineFC_Object = MibTableColumn
sdhSLineFC = _SdhSLineFC_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 9),
    _SdhSLineFC_Type()
)
sdhSLineFC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSLineFC.setStatus("mandatory")
_SdhSPathBIP8_Type = Counter32
_SdhSPathBIP8_Object = MibTableColumn
sdhSPathBIP8 = _SdhSPathBIP8_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 10),
    _SdhSPathBIP8_Type()
)
sdhSPathBIP8.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSPathBIP8.setStatus("mandatory")
_SdhSPathES_Type = Counter32
_SdhSPathES_Object = MibTableColumn
sdhSPathES = _SdhSPathES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 11),
    _SdhSPathES_Type()
)
sdhSPathES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSPathES.setStatus("mandatory")
_SdhSPathSES_Type = Counter32
_SdhSPathSES_Object = MibTableColumn
sdhSPathSES = _SdhSPathSES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 12),
    _SdhSPathSES_Type()
)
sdhSPathSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSPathSES.setStatus("mandatory")
_SdhSPathUAS_Type = Counter32
_SdhSPathUAS_Object = MibTableColumn
sdhSPathUAS = _SdhSPathUAS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 13),
    _SdhSPathUAS_Type()
)
sdhSPathUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSPathUAS.setStatus("mandatory")
_SdhSPathFC_Type = Counter32
_SdhSPathFC_Object = MibTableColumn
sdhSPathFC = _SdhSPathFC_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 14),
    _SdhSPathFC_Type()
)
sdhSPathFC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSPathFC.setStatus("mandatory")
_SdhSLineFEBE_Type = Counter32
_SdhSLineFEBE_Object = MibTableColumn
sdhSLineFEBE = _SdhSLineFEBE_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 15),
    _SdhSLineFEBE_Type()
)
sdhSLineFEBE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSLineFEBE.setStatus("mandatory")
_SdhSLineFarEndES_Type = Counter32
_SdhSLineFarEndES_Object = MibTableColumn
sdhSLineFarEndES = _SdhSLineFarEndES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 16),
    _SdhSLineFarEndES_Type()
)
sdhSLineFarEndES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSLineFarEndES.setStatus("mandatory")
_SdhSLineFarEndSES_Type = Counter32
_SdhSLineFarEndSES_Object = MibTableColumn
sdhSLineFarEndSES = _SdhSLineFarEndSES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 17),
    _SdhSLineFarEndSES_Type()
)
sdhSLineFarEndSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSLineFarEndSES.setStatus("mandatory")
_SdhSLineFarEndUAS_Type = Counter32
_SdhSLineFarEndUAS_Object = MibTableColumn
sdhSLineFarEndUAS = _SdhSLineFarEndUAS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 18),
    _SdhSLineFarEndUAS_Type()
)
sdhSLineFarEndUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSLineFarEndUAS.setStatus("mandatory")
_SdhSLineFarEndFC_Type = Counter32
_SdhSLineFarEndFC_Object = MibTableColumn
sdhSLineFarEndFC = _SdhSLineFarEndFC_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 19),
    _SdhSLineFarEndFC_Type()
)
sdhSLineFarEndFC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSLineFarEndFC.setStatus("mandatory")
_SdhSPathFEBE_Type = Counter32
_SdhSPathFEBE_Object = MibTableColumn
sdhSPathFEBE = _SdhSPathFEBE_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 20),
    _SdhSPathFEBE_Type()
)
sdhSPathFEBE.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSPathFEBE.setStatus("mandatory")
_SdhSPathFarEndES_Type = Counter32
_SdhSPathFarEndES_Object = MibTableColumn
sdhSPathFarEndES = _SdhSPathFarEndES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 21),
    _SdhSPathFarEndES_Type()
)
sdhSPathFarEndES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSPathFarEndES.setStatus("mandatory")
_SdhSPathFarEndSES_Type = Counter32
_SdhSPathFarEndSES_Object = MibTableColumn
sdhSPathFarEndSES = _SdhSPathFarEndSES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 22),
    _SdhSPathFarEndSES_Type()
)
sdhSPathFarEndSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSPathFarEndSES.setStatus("mandatory")
_SdhSPathFarEndUAS_Type = Counter32
_SdhSPathFarEndUAS_Object = MibTableColumn
sdhSPathFarEndUAS = _SdhSPathFarEndUAS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 23),
    _SdhSPathFarEndUAS_Type()
)
sdhSPathFarEndUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSPathFarEndUAS.setStatus("mandatory")
_SdhSPathFarEndFC_Type = Counter32
_SdhSPathFarEndFC_Object = MibTableColumn
sdhSPathFarEndFC = _SdhSPathFarEndFC_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 16, 4, 1, 24),
    _SdhSPathFarEndFC_Type()
)
sdhSPathFarEndFC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdhSPathFarEndFC.setStatus("mandatory")
_Dv2Pvc_ObjectIdentity = ObjectIdentity
dv2Pvc = _Dv2Pvc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17)
)
_PvcResourceTable_Object = MibTable
pvcResourceTable = _PvcResourceTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1)
)
if mibBuilder.loadTexts:
    pvcResourceTable.setStatus("mandatory")
_PvcResourceEntry_Object = MibTableRow
pvcResourceEntry = _PvcResourceEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1)
)
pvcResourceEntry.setIndexNames(
    (0, "DV2-MIB", "pvcSlot"),
    (0, "DV2-MIB", "pvcLink"),
)
if mibBuilder.loadTexts:
    pvcResourceEntry.setStatus("mandatory")


class _PvcSlot_Type(Integer32):
    """Custom type pvcSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_PvcSlot_Type.__name__ = "Integer32"
_PvcSlot_Object = MibTableColumn
pvcSlot = _PvcSlot_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 1),
    _PvcSlot_Type()
)
pvcSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcSlot.setStatus("mandatory")


class _PvcLink_Type(Integer32):
    """Custom type pvcLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_PvcLink_Type.__name__ = "Integer32"
_PvcLink_Object = MibTableColumn
pvcLink = _PvcLink_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 2),
    _PvcLink_Type()
)
pvcLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcLink.setStatus("mandatory")
_PvcVciStart_Type = VirtualCircuitIdentifier
_PvcVciStart_Object = MibTableColumn
pvcVciStart = _PvcVciStart_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 3),
    _PvcVciStart_Type()
)
pvcVciStart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcVciStart.setStatus("mandatory")
_PvcVciEnd_Type = VirtualCircuitIdentifier
_PvcVciEnd_Object = MibTableColumn
pvcVciEnd = _PvcVciEnd_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 4),
    _PvcVciEnd_Type()
)
pvcVciEnd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcVciEnd.setStatus("mandatory")
_PvcVpiStart_Type = VirtualPathIdentifier
_PvcVpiStart_Object = MibTableColumn
pvcVpiStart = _PvcVpiStart_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 5),
    _PvcVpiStart_Type()
)
pvcVpiStart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcVpiStart.setStatus("mandatory")
_PvcVpiEnd_Type = VirtualPathIdentifier
_PvcVpiEnd_Object = MibTableColumn
pvcVpiEnd = _PvcVpiEnd_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 6),
    _PvcVpiEnd_Type()
)
pvcVpiEnd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcVpiEnd.setStatus("mandatory")
_PvcVpStart_Type = VirtualPathIdentifier
_PvcVpStart_Object = MibTableColumn
pvcVpStart = _PvcVpStart_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 7),
    _PvcVpStart_Type()
)
pvcVpStart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcVpStart.setStatus("mandatory")
_PvcVpEnd_Type = VirtualPathIdentifier
_PvcVpEnd_Object = MibTableColumn
pvcVpEnd = _PvcVpEnd_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 8),
    _PvcVpEnd_Type()
)
pvcVpEnd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcVpEnd.setStatus("mandatory")


class _PvcBackwardCellRateTotal_Type(Integer32):
    """Custom type pvcBackwardCellRateTotal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PvcBackwardCellRateTotal_Type.__name__ = "Integer32"
_PvcBackwardCellRateTotal_Object = MibTableColumn
pvcBackwardCellRateTotal = _PvcBackwardCellRateTotal_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 11),
    _PvcBackwardCellRateTotal_Type()
)
pvcBackwardCellRateTotal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcBackwardCellRateTotal.setStatus("mandatory")


class _PvcLinkQoS_Type(Integer32):
    """Custom type pvcLinkQoS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("b-ici", 3),
          ("nni", 2),
          ("non-atm-link", 4),
          ("uni", 1))
    )


_PvcLinkQoS_Type.__name__ = "Integer32"
_PvcLinkQoS_Object = MibTableColumn
pvcLinkQoS = _PvcLinkQoS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 13),
    _PvcLinkQoS_Type()
)
pvcLinkQoS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcLinkQoS.setStatus("mandatory")


class _PvcMolnVpi_Type(Integer32):
    """Custom type pvcMolnVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_PvcMolnVpi_Type.__name__ = "Integer32"
_PvcMolnVpi_Object = MibTableColumn
pvcMolnVpi = _PvcMolnVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 14),
    _PvcMolnVpi_Type()
)
pvcMolnVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcMolnVpi.setStatus("mandatory")


class _PvcMolnVci_Type(Integer32):
    """Custom type pvcMolnVci based on Integer32"""
    defaultValue = 16

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_PvcMolnVci_Type.__name__ = "Integer32"
_PvcMolnVci_Object = MibTableColumn
pvcMolnVci = _PvcMolnVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 15),
    _PvcMolnVci_Type()
)
pvcMolnVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcMolnVci.setStatus("mandatory")


class _PvcLowPriOverbookFactor_Type(Integer32):
    """Custom type pvcLowPriOverbookFactor based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10000),
    )


_PvcLowPriOverbookFactor_Type.__name__ = "Integer32"
_PvcLowPriOverbookFactor_Object = MibTableColumn
pvcLowPriOverbookFactor = _PvcLowPriOverbookFactor_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 1, 1, 16),
    _PvcLowPriOverbookFactor_Type()
)
pvcLowPriOverbookFactor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcLowPriOverbookFactor.setStatus("mandatory")
_PvcTable_Object = MibTable
pvcTable = _PvcTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2)
)
if mibBuilder.loadTexts:
    pvcTable.setStatus("mandatory")
_PvcEntry_Object = MibTableRow
pvcEntry = _PvcEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1)
)
pvcEntry.setIndexNames(
    (0, "DV2-MIB", "pvcDSlot"),
    (0, "DV2-MIB", "pvcDLink"),
    (0, "DV2-MIB", "pvcDvci"),
    (0, "DV2-MIB", "pvcDvpi"),
    (0, "DV2-MIB", "pvcSSlot"),
    (0, "DV2-MIB", "pvcSLink"),
    (0, "DV2-MIB", "pvcSvci"),
    (0, "DV2-MIB", "pvcSvpi"),
)
if mibBuilder.loadTexts:
    pvcEntry.setStatus("mandatory")


class _PvcDSlot_Type(Integer32):
    """Custom type pvcDSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_PvcDSlot_Type.__name__ = "Integer32"
_PvcDSlot_Object = MibTableColumn
pvcDSlot = _PvcDSlot_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 1),
    _PvcDSlot_Type()
)
pvcDSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcDSlot.setStatus("mandatory")


class _PvcDLink_Type(Integer32):
    """Custom type pvcDLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_PvcDLink_Type.__name__ = "Integer32"
_PvcDLink_Object = MibTableColumn
pvcDLink = _PvcDLink_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 2),
    _PvcDLink_Type()
)
pvcDLink.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcDLink.setStatus("mandatory")
_PvcDvci_Type = VirtualCircuitIdentifier
_PvcDvci_Object = MibTableColumn
pvcDvci = _PvcDvci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 3),
    _PvcDvci_Type()
)
pvcDvci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcDvci.setStatus("mandatory")
_PvcDvpi_Type = VirtualPathIdentifier
_PvcDvpi_Object = MibTableColumn
pvcDvpi = _PvcDvpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 4),
    _PvcDvpi_Type()
)
pvcDvpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcDvpi.setStatus("mandatory")


class _PvcSSlot_Type(Integer32):
    """Custom type pvcSSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_PvcSSlot_Type.__name__ = "Integer32"
_PvcSSlot_Object = MibTableColumn
pvcSSlot = _PvcSSlot_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 5),
    _PvcSSlot_Type()
)
pvcSSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcSSlot.setStatus("mandatory")


class _PvcSLink_Type(Integer32):
    """Custom type pvcSLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_PvcSLink_Type.__name__ = "Integer32"
_PvcSLink_Object = MibTableColumn
pvcSLink = _PvcSLink_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 6),
    _PvcSLink_Type()
)
pvcSLink.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcSLink.setStatus("mandatory")
_PvcSvci_Type = VirtualCircuitIdentifier
_PvcSvci_Object = MibTableColumn
pvcSvci = _PvcSvci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 7),
    _PvcSvci_Type()
)
pvcSvci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcSvci.setStatus("mandatory")
_PvcSvpi_Type = VirtualPathIdentifier
_PvcSvpi_Object = MibTableColumn
pvcSvpi = _PvcSvpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 8),
    _PvcSvpi_Type()
)
pvcSvpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcSvpi.setStatus("mandatory")


class _PvcForwardPeakCellRate_Type(Integer32):
    """Custom type pvcForwardPeakCellRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PvcForwardPeakCellRate_Type.__name__ = "Integer32"
_PvcForwardPeakCellRate_Object = MibTableColumn
pvcForwardPeakCellRate = _PvcForwardPeakCellRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 9),
    _PvcForwardPeakCellRate_Type()
)
pvcForwardPeakCellRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcForwardPeakCellRate.setStatus("mandatory")


class _PvcForwardPeakSize_Type(Integer32):
    """Custom type pvcForwardPeakSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PvcForwardPeakSize_Type.__name__ = "Integer32"
_PvcForwardPeakSize_Object = MibTableColumn
pvcForwardPeakSize = _PvcForwardPeakSize_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 10),
    _PvcForwardPeakSize_Type()
)
pvcForwardPeakSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcForwardPeakSize.setStatus("mandatory")


class _PvcForwardPeakMode_Type(Integer32):
    """Custom type pvcForwardPeakMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("clp0-disc", 2),
          ("clp01-disc", 4),
          ("clp1-disc", 3),
          ("off", 1))
    )


_PvcForwardPeakMode_Type.__name__ = "Integer32"
_PvcForwardPeakMode_Object = MibTableColumn
pvcForwardPeakMode = _PvcForwardPeakMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 11),
    _PvcForwardPeakMode_Type()
)
pvcForwardPeakMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcForwardPeakMode.setStatus("mandatory")


class _PvcBackwardPeakCellRate_Type(Integer32):
    """Custom type pvcBackwardPeakCellRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PvcBackwardPeakCellRate_Type.__name__ = "Integer32"
_PvcBackwardPeakCellRate_Object = MibTableColumn
pvcBackwardPeakCellRate = _PvcBackwardPeakCellRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 12),
    _PvcBackwardPeakCellRate_Type()
)
pvcBackwardPeakCellRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcBackwardPeakCellRate.setStatus("mandatory")


class _PvcBackwardPeakSize_Type(Integer32):
    """Custom type pvcBackwardPeakSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PvcBackwardPeakSize_Type.__name__ = "Integer32"
_PvcBackwardPeakSize_Object = MibTableColumn
pvcBackwardPeakSize = _PvcBackwardPeakSize_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 13),
    _PvcBackwardPeakSize_Type()
)
pvcBackwardPeakSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcBackwardPeakSize.setStatus("mandatory")


class _PvcBackwardPeakMode_Type(Integer32):
    """Custom type pvcBackwardPeakMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("clp0-disc", 2),
          ("clp01-disc", 4),
          ("clp1-disc", 3),
          ("off", 1))
    )


_PvcBackwardPeakMode_Type.__name__ = "Integer32"
_PvcBackwardPeakMode_Object = MibTableColumn
pvcBackwardPeakMode = _PvcBackwardPeakMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 14),
    _PvcBackwardPeakMode_Type()
)
pvcBackwardPeakMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcBackwardPeakMode.setStatus("mandatory")


class _PvcForwardSustainedCellRate_Type(Integer32):
    """Custom type pvcForwardSustainedCellRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PvcForwardSustainedCellRate_Type.__name__ = "Integer32"
_PvcForwardSustainedCellRate_Object = MibTableColumn
pvcForwardSustainedCellRate = _PvcForwardSustainedCellRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 15),
    _PvcForwardSustainedCellRate_Type()
)
pvcForwardSustainedCellRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcForwardSustainedCellRate.setStatus("mandatory")


class _PvcForwardSustainedSize_Type(Integer32):
    """Custom type pvcForwardSustainedSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PvcForwardSustainedSize_Type.__name__ = "Integer32"
_PvcForwardSustainedSize_Object = MibTableColumn
pvcForwardSustainedSize = _PvcForwardSustainedSize_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 16),
    _PvcForwardSustainedSize_Type()
)
pvcForwardSustainedSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcForwardSustainedSize.setStatus("mandatory")


class _PvcForwardSustainedMode_Type(Integer32):
    """Custom type pvcForwardSustainedMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              6,
              8)
        )
    )
    namedValues = NamedValues(
        *(("clp0-disc", 2),
          ("clp0-tag", 6),
          ("clp01-disc", 4),
          ("clp01-tag", 8),
          ("clp1-disc", 3),
          ("off", 1))
    )


_PvcForwardSustainedMode_Type.__name__ = "Integer32"
_PvcForwardSustainedMode_Object = MibTableColumn
pvcForwardSustainedMode = _PvcForwardSustainedMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 17),
    _PvcForwardSustainedMode_Type()
)
pvcForwardSustainedMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcForwardSustainedMode.setStatus("mandatory")


class _PvcBackwardSustainedCellRate_Type(Integer32):
    """Custom type pvcBackwardSustainedCellRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PvcBackwardSustainedCellRate_Type.__name__ = "Integer32"
_PvcBackwardSustainedCellRate_Object = MibTableColumn
pvcBackwardSustainedCellRate = _PvcBackwardSustainedCellRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 18),
    _PvcBackwardSustainedCellRate_Type()
)
pvcBackwardSustainedCellRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcBackwardSustainedCellRate.setStatus("mandatory")


class _PvcBackwardSustainedSize_Type(Integer32):
    """Custom type pvcBackwardSustainedSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PvcBackwardSustainedSize_Type.__name__ = "Integer32"
_PvcBackwardSustainedSize_Object = MibTableColumn
pvcBackwardSustainedSize = _PvcBackwardSustainedSize_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 19),
    _PvcBackwardSustainedSize_Type()
)
pvcBackwardSustainedSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcBackwardSustainedSize.setStatus("mandatory")


class _PvcBackwardSustainedMode_Type(Integer32):
    """Custom type pvcBackwardSustainedMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              6,
              8)
        )
    )
    namedValues = NamedValues(
        *(("clp0-disc", 2),
          ("clp0-tag", 6),
          ("clp01-disc", 4),
          ("clp01-tag", 8),
          ("clp1-disc", 3),
          ("off", 1))
    )


_PvcBackwardSustainedMode_Type.__name__ = "Integer32"
_PvcBackwardSustainedMode_Object = MibTableColumn
pvcBackwardSustainedMode = _PvcBackwardSustainedMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 20),
    _PvcBackwardSustainedMode_Type()
)
pvcBackwardSustainedMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcBackwardSustainedMode.setStatus("mandatory")


class _PvcAuxForwardPeakCellRate_Type(Integer32):
    """Custom type pvcAuxForwardPeakCellRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PvcAuxForwardPeakCellRate_Type.__name__ = "Integer32"
_PvcAuxForwardPeakCellRate_Object = MibTableColumn
pvcAuxForwardPeakCellRate = _PvcAuxForwardPeakCellRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 21),
    _PvcAuxForwardPeakCellRate_Type()
)
pvcAuxForwardPeakCellRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcAuxForwardPeakCellRate.setStatus("mandatory")


class _PvcAuxForwardPeakSize_Type(Integer32):
    """Custom type pvcAuxForwardPeakSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PvcAuxForwardPeakSize_Type.__name__ = "Integer32"
_PvcAuxForwardPeakSize_Object = MibTableColumn
pvcAuxForwardPeakSize = _PvcAuxForwardPeakSize_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 22),
    _PvcAuxForwardPeakSize_Type()
)
pvcAuxForwardPeakSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcAuxForwardPeakSize.setStatus("mandatory")


class _PvcAuxForwardPeakMode_Type(Integer32):
    """Custom type pvcAuxForwardPeakMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("clp0-disc", 2),
          ("clp01-disc", 4),
          ("clp1-disc", 3),
          ("off", 1))
    )


_PvcAuxForwardPeakMode_Type.__name__ = "Integer32"
_PvcAuxForwardPeakMode_Object = MibTableColumn
pvcAuxForwardPeakMode = _PvcAuxForwardPeakMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 23),
    _PvcAuxForwardPeakMode_Type()
)
pvcAuxForwardPeakMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcAuxForwardPeakMode.setStatus("mandatory")


class _PvcAuxBackwardPeakCellRate_Type(Integer32):
    """Custom type pvcAuxBackwardPeakCellRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PvcAuxBackwardPeakCellRate_Type.__name__ = "Integer32"
_PvcAuxBackwardPeakCellRate_Object = MibTableColumn
pvcAuxBackwardPeakCellRate = _PvcAuxBackwardPeakCellRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 24),
    _PvcAuxBackwardPeakCellRate_Type()
)
pvcAuxBackwardPeakCellRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcAuxBackwardPeakCellRate.setStatus("mandatory")


class _PvcAuxBackwardPeakSize_Type(Integer32):
    """Custom type pvcAuxBackwardPeakSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PvcAuxBackwardPeakSize_Type.__name__ = "Integer32"
_PvcAuxBackwardPeakSize_Object = MibTableColumn
pvcAuxBackwardPeakSize = _PvcAuxBackwardPeakSize_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 25),
    _PvcAuxBackwardPeakSize_Type()
)
pvcAuxBackwardPeakSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcAuxBackwardPeakSize.setStatus("mandatory")


class _PvcAuxBackwardPeakMode_Type(Integer32):
    """Custom type pvcAuxBackwardPeakMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("clp0-disc", 2),
          ("clp01-disc", 4),
          ("clp1-disc", 3),
          ("off", 1))
    )


_PvcAuxBackwardPeakMode_Type.__name__ = "Integer32"
_PvcAuxBackwardPeakMode_Object = MibTableColumn
pvcAuxBackwardPeakMode = _PvcAuxBackwardPeakMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 26),
    _PvcAuxBackwardPeakMode_Type()
)
pvcAuxBackwardPeakMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcAuxBackwardPeakMode.setStatus("mandatory")


class _PvcAuxForwardSustainedCellRate_Type(Integer32):
    """Custom type pvcAuxForwardSustainedCellRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PvcAuxForwardSustainedCellRate_Type.__name__ = "Integer32"
_PvcAuxForwardSustainedCellRate_Object = MibTableColumn
pvcAuxForwardSustainedCellRate = _PvcAuxForwardSustainedCellRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 27),
    _PvcAuxForwardSustainedCellRate_Type()
)
pvcAuxForwardSustainedCellRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcAuxForwardSustainedCellRate.setStatus("mandatory")


class _PvcAuxForwardSustainedSize_Type(Integer32):
    """Custom type pvcAuxForwardSustainedSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PvcAuxForwardSustainedSize_Type.__name__ = "Integer32"
_PvcAuxForwardSustainedSize_Object = MibTableColumn
pvcAuxForwardSustainedSize = _PvcAuxForwardSustainedSize_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 28),
    _PvcAuxForwardSustainedSize_Type()
)
pvcAuxForwardSustainedSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcAuxForwardSustainedSize.setStatus("mandatory")


class _PvcAuxForwardSustainedMode_Type(Integer32):
    """Custom type pvcAuxForwardSustainedMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              6,
              8)
        )
    )
    namedValues = NamedValues(
        *(("clp0-disc", 2),
          ("clp0-tag", 6),
          ("clp01-disc", 4),
          ("clp01-tag", 8),
          ("clp1-disc", 3),
          ("off", 1))
    )


_PvcAuxForwardSustainedMode_Type.__name__ = "Integer32"
_PvcAuxForwardSustainedMode_Object = MibTableColumn
pvcAuxForwardSustainedMode = _PvcAuxForwardSustainedMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 29),
    _PvcAuxForwardSustainedMode_Type()
)
pvcAuxForwardSustainedMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcAuxForwardSustainedMode.setStatus("mandatory")


class _PvcAuxBackwardSustainedCellRate_Type(Integer32):
    """Custom type pvcAuxBackwardSustainedCellRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PvcAuxBackwardSustainedCellRate_Type.__name__ = "Integer32"
_PvcAuxBackwardSustainedCellRate_Object = MibTableColumn
pvcAuxBackwardSustainedCellRate = _PvcAuxBackwardSustainedCellRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 30),
    _PvcAuxBackwardSustainedCellRate_Type()
)
pvcAuxBackwardSustainedCellRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcAuxBackwardSustainedCellRate.setStatus("mandatory")


class _PvcAuxBackwardSustainedSize_Type(Integer32):
    """Custom type pvcAuxBackwardSustainedSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_PvcAuxBackwardSustainedSize_Type.__name__ = "Integer32"
_PvcAuxBackwardSustainedSize_Object = MibTableColumn
pvcAuxBackwardSustainedSize = _PvcAuxBackwardSustainedSize_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 31),
    _PvcAuxBackwardSustainedSize_Type()
)
pvcAuxBackwardSustainedSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcAuxBackwardSustainedSize.setStatus("mandatory")


class _PvcAuxBackwardSustainedMode_Type(Integer32):
    """Custom type pvcAuxBackwardSustainedMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              6,
              8)
        )
    )
    namedValues = NamedValues(
        *(("clp0-disc", 2),
          ("clp0-tag", 6),
          ("clp01-disc", 4),
          ("clp01-tag", 8),
          ("clp1-disc", 3),
          ("off", 1))
    )


_PvcAuxBackwardSustainedMode_Type.__name__ = "Integer32"
_PvcAuxBackwardSustainedMode_Object = MibTableColumn
pvcAuxBackwardSustainedMode = _PvcAuxBackwardSustainedMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 32),
    _PvcAuxBackwardSustainedMode_Type()
)
pvcAuxBackwardSustainedMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcAuxBackwardSustainedMode.setStatus("mandatory")


class _PvcQoSClass_Type(Integer32):
    """Custom type pvcQoSClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("cbr", 1),
          ("vbr-high", 2),
          ("vbr-low", 4),
          ("vbr-med", 3))
    )


_PvcQoSClass_Type.__name__ = "Integer32"
_PvcQoSClass_Object = MibTableColumn
pvcQoSClass = _PvcQoSClass_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 33),
    _PvcQoSClass_Type()
)
pvcQoSClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcQoSClass.setStatus("mandatory")


class _PvcStatus_Type(Integer32):
    """Custom type pvcStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("invalid", 2),
          ("notified", 4),
          ("running", 5),
          ("start-PVC", 3),
          ("valid", 1),
          ("waiting", 6))
    )


_PvcStatus_Type.__name__ = "Integer32"
_PvcStatus_Object = MibTableColumn
pvcStatus = _PvcStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 34),
    _PvcStatus_Type()
)
pvcStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcStatus.setStatus("mandatory")


class _PvcMulticast_Type(Integer32):
    """Custom type pvcMulticast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_PvcMulticast_Type.__name__ = "Integer32"
_PvcMulticast_Object = MibTableColumn
pvcMulticast = _PvcMulticast_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 35),
    _PvcMulticast_Type()
)
pvcMulticast.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcMulticast.setStatus("mandatory")
_PvcInternalVpi_Type = Integer32
_PvcInternalVpi_Object = MibTableColumn
pvcInternalVpi = _PvcInternalVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 36),
    _PvcInternalVpi_Type()
)
pvcInternalVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcInternalVpi.setStatus("mandatory")
_PvcInternalVci_Type = Integer32
_PvcInternalVci_Object = MibTableColumn
pvcInternalVci = _PvcInternalVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 37),
    _PvcInternalVci_Type()
)
pvcInternalVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcInternalVci.setStatus("mandatory")
_PvcNumLeaves_Type = Integer32
_PvcNumLeaves_Object = MibTableColumn
pvcNumLeaves = _PvcNumLeaves_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 38),
    _PvcNumLeaves_Type()
)
pvcNumLeaves.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pvcNumLeaves.setStatus("mandatory")


class _PvcDirection_Type(Integer32):
    """Custom type pvcDirection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("bidirect", 1),
          ("unidirect", 2))
    )


_PvcDirection_Type.__name__ = "Integer32"
_PvcDirection_Object = MibTableColumn
pvcDirection = _PvcDirection_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 17, 2, 1, 39),
    _PvcDirection_Type()
)
pvcDirection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pvcDirection.setStatus("mandatory")
_Dv2Svc_ObjectIdentity = ObjectIdentity
dv2Svc = _Dv2Svc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18)
)


class _SvcMaxPtPtConnections_Type(Integer32):
    """Custom type svcMaxPtPtConnections based on Integer32"""
    defaultValue = 25

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 750),
    )


_SvcMaxPtPtConnections_Type.__name__ = "Integer32"
_SvcMaxPtPtConnections_Object = MibScalar
svcMaxPtPtConnections = _SvcMaxPtPtConnections_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 1),
    _SvcMaxPtPtConnections_Type()
)
svcMaxPtPtConnections.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcMaxPtPtConnections.setStatus("mandatory")


class _SvcMaxPtMptConnections_Type(Integer32):
    """Custom type svcMaxPtMptConnections based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 25),
    )


_SvcMaxPtMptConnections_Type.__name__ = "Integer32"
_SvcMaxPtMptConnections_Object = MibScalar
svcMaxPtMptConnections = _SvcMaxPtMptConnections_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 2),
    _SvcMaxPtMptConnections_Type()
)
svcMaxPtMptConnections.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcMaxPtMptConnections.setStatus("mandatory")


class _SvcMaxPtMptParties_Type(Integer32):
    """Custom type svcMaxPtMptParties based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 500),
    )


_SvcMaxPtMptParties_Type.__name__ = "Integer32"
_SvcMaxPtMptParties_Object = MibScalar
svcMaxPtMptParties = _SvcMaxPtMptParties_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 3),
    _SvcMaxPtMptParties_Type()
)
svcMaxPtMptParties.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcMaxPtMptParties.setStatus("mandatory")
_SvcResourceTable_Object = MibTable
svcResourceTable = _SvcResourceTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6)
)
if mibBuilder.loadTexts:
    svcResourceTable.setStatus("mandatory")
_SvcResourceEntry_Object = MibTableRow
svcResourceEntry = _SvcResourceEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1)
)
svcResourceEntry.setIndexNames(
    (0, "DV2-MIB", "svcSAP"),
)
if mibBuilder.loadTexts:
    svcResourceEntry.setStatus("mandatory")


class _SvcSAP_Type(Integer32):
    """Custom type svcSAP based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_SvcSAP_Type.__name__ = "Integer32"
_SvcSAP_Object = MibTableColumn
svcSAP = _SvcSAP_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 1),
    _SvcSAP_Type()
)
svcSAP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcSAP.setStatus("mandatory")


class _SvcHiLo_Type(Integer32):
    """Custom type svcHiLo based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("high", 1),
          ("low", 2))
    )


_SvcHiLo_Type.__name__ = "Integer32"
_SvcHiLo_Object = MibTableColumn
svcHiLo = _SvcHiLo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 2),
    _SvcHiLo_Type()
)
svcHiLo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcHiLo.setStatus("mandatory")


class _SvcVciStart_Type(Integer32):
    """Custom type svcVciStart based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(32, 4095),
    )


_SvcVciStart_Type.__name__ = "Integer32"
_SvcVciStart_Object = MibTableColumn
svcVciStart = _SvcVciStart_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 3),
    _SvcVciStart_Type()
)
svcVciStart.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcVciStart.setStatus("mandatory")


class _SvcVciEnd_Type(Integer32):
    """Custom type svcVciEnd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(32, 4095),
    )


_SvcVciEnd_Type.__name__ = "Integer32"
_SvcVciEnd_Object = MibTableColumn
svcVciEnd = _SvcVciEnd_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 4),
    _SvcVciEnd_Type()
)
svcVciEnd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcVciEnd.setStatus("mandatory")


class _SvcVpiStart_Type(Integer32):
    """Custom type svcVpiStart based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_SvcVpiStart_Type.__name__ = "Integer32"
_SvcVpiStart_Object = MibTableColumn
svcVpiStart = _SvcVpiStart_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 5),
    _SvcVpiStart_Type()
)
svcVpiStart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcVpiStart.setStatus("mandatory")


class _SvcVpiEnd_Type(Integer32):
    """Custom type svcVpiEnd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_SvcVpiEnd_Type.__name__ = "Integer32"
_SvcVpiEnd_Object = MibTableColumn
svcVpiEnd = _SvcVpiEnd_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 6),
    _SvcVpiEnd_Type()
)
svcVpiEnd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcVpiEnd.setStatus("mandatory")


class _SvcVpStart_Type(Integer32):
    """Custom type svcVpStart based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_SvcVpStart_Type.__name__ = "Integer32"
_SvcVpStart_Object = MibTableColumn
svcVpStart = _SvcVpStart_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 7),
    _SvcVpStart_Type()
)
svcVpStart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcVpStart.setStatus("mandatory")


class _SvcVpEnd_Type(Integer32):
    """Custom type svcVpEnd based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_SvcVpEnd_Type.__name__ = "Integer32"
_SvcVpEnd_Object = MibTableColumn
svcVpEnd = _SvcVpEnd_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 8),
    _SvcVpEnd_Type()
)
svcVpEnd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcVpEnd.setStatus("mandatory")


class _SvcBackwardCellRateTotal_Type(Integer32):
    """Custom type svcBackwardCellRateTotal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcBackwardCellRateTotal_Type.__name__ = "Integer32"
_SvcBackwardCellRateTotal_Object = MibTableColumn
svcBackwardCellRateTotal = _SvcBackwardCellRateTotal_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 11),
    _SvcBackwardCellRateTotal_Type()
)
svcBackwardCellRateTotal.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcBackwardCellRateTotal.setStatus("mandatory")


class _SvcBackwardCellRateAvailable_Type(Integer32):
    """Custom type svcBackwardCellRateAvailable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcBackwardCellRateAvailable_Type.__name__ = "Integer32"
_SvcBackwardCellRateAvailable_Object = MibTableColumn
svcBackwardCellRateAvailable = _SvcBackwardCellRateAvailable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 12),
    _SvcBackwardCellRateAvailable_Type()
)
svcBackwardCellRateAvailable.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcBackwardCellRateAvailable.setStatus("mandatory")


class _SvcSigVci_Type(Integer32):
    """Custom type svcSigVci based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 511),
    )


_SvcSigVci_Type.__name__ = "Integer32"
_SvcSigVci_Object = MibTableColumn
svcSigVci = _SvcSigVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 13),
    _SvcSigVci_Type()
)
svcSigVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcSigVci.setStatus("mandatory")


class _SvcSigVpi_Type(Integer32):
    """Custom type svcSigVpi based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_SvcSigVpi_Type.__name__ = "Integer32"
_SvcSigVpi_Object = MibTableColumn
svcSigVpi = _SvcSigVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 14),
    _SvcSigVpi_Type()
)
svcSigVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcSigVpi.setStatus("mandatory")


class _SvcSAPStatus_Type(Integer32):
    """Custom type svcSAPStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("idle", 5),
          ("off", 1),
          ("on", 4),
          ("reconfigure", 2),
          ("reset", 3))
    )


_SvcSAPStatus_Type.__name__ = "Integer32"
_SvcSAPStatus_Object = MibTableColumn
svcSAPStatus = _SvcSAPStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 15),
    _SvcSAPStatus_Type()
)
svcSAPStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcSAPStatus.setStatus("mandatory")


class _SvcCDVTSize_Type(Integer32):
    """Custom type svcCDVTSize based on Integer32"""
    defaultValue = 4


_SvcCDVTSize_Object = MibTableColumn
svcCDVTSize = _SvcCDVTSize_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 16),
    _SvcCDVTSize_Type()
)
svcCDVTSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcCDVTSize.setStatus("mandatory")


class _SvcIntType_Type(Integer32):
    """Custom type svcIntType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("network", 1),
          ("user", 2))
    )


_SvcIntType_Type.__name__ = "Integer32"
_SvcIntType_Object = MibTableColumn
svcIntType = _SvcIntType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 17),
    _SvcIntType_Type()
)
svcIntType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcIntType.setStatus("mandatory")


class _SvcPolicing_Type(Integer32):
    """Custom type svcPolicing based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_SvcPolicing_Type.__name__ = "Integer32"
_SvcPolicing_Object = MibTableColumn
svcPolicing = _SvcPolicing_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 18),
    _SvcPolicing_Type()
)
svcPolicing.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcPolicing.setStatus("mandatory")


class _SvcLowPriOverbookFactor_Type(Integer32):
    """Custom type svcLowPriOverbookFactor based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10000),
    )


_SvcLowPriOverbookFactor_Type.__name__ = "Integer32"
_SvcLowPriOverbookFactor_Object = MibTableColumn
svcLowPriOverbookFactor = _SvcLowPriOverbookFactor_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 19),
    _SvcLowPriOverbookFactor_Type()
)
svcLowPriOverbookFactor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcLowPriOverbookFactor.setStatus("mandatory")


class _SvcMaxSapConn_Type(Integer32):
    """Custom type svcMaxSapConn based on Integer32"""
    defaultValue = 500

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 750),
    )


_SvcMaxSapConn_Type.__name__ = "Integer32"
_SvcMaxSapConn_Object = MibTableColumn
svcMaxSapConn = _SvcMaxSapConn_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 20),
    _SvcMaxSapConn_Type()
)
svcMaxSapConn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcMaxSapConn.setStatus("mandatory")


class _SvcCurSapConn_Type(Integer32):
    """Custom type svcCurSapConn based on Integer32"""
    defaultValue = 0


_SvcCurSapConn_Object = MibTableColumn
svcCurSapConn = _SvcCurSapConn_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 21),
    _SvcCurSapConn_Type()
)
svcCurSapConn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcCurSapConn.setStatus("mandatory")


class _SvcLinkNo_Type(Integer32):
    """Custom type svcLinkNo based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_SvcLinkNo_Type.__name__ = "Integer32"
_SvcLinkNo_Object = MibTableColumn
svcLinkNo = _SvcLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 22),
    _SvcLinkNo_Type()
)
svcLinkNo.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcLinkNo.setStatus("mandatory")


class _SvcVpiMapping_Type(Integer32):
    """Custom type svcVpiMapping based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_SvcVpiMapping_Type.__name__ = "Integer32"
_SvcVpiMapping_Object = MibTableColumn
svcVpiMapping = _SvcVpiMapping_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 23),
    _SvcVpiMapping_Type()
)
svcVpiMapping.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcVpiMapping.setStatus("mandatory")


class _SvcQosRoute_Type(Integer32):
    """Custom type svcQosRoute based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_SvcQosRoute_Type.__name__ = "Integer32"
_SvcQosRoute_Object = MibTableColumn
svcQosRoute = _SvcQosRoute_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 24),
    _SvcQosRoute_Type()
)
svcQosRoute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcQosRoute.setStatus("mandatory")


class _SvcSwtch_Type(Integer32):
    """Custom type svcSwtch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("iisp30", 3),
          ("iisp31", 4),
          ("uni30", 1),
          ("uni31", 2))
    )


_SvcSwtch_Type.__name__ = "Integer32"
_SvcSwtch_Object = MibTableColumn
svcSwtch = _SvcSwtch_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 25),
    _SvcSwtch_Type()
)
svcSwtch.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcSwtch.setStatus("mandatory")


class _SvcRestart_Type(Integer32):
    """Custom type svcRestart based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_SvcRestart_Type.__name__ = "Integer32"
_SvcRestart_Object = MibTableColumn
svcRestart = _SvcRestart_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 26),
    _SvcRestart_Type()
)
svcRestart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcRestart.setStatus("mandatory")
_SvcE164Addr_Type = E164
_SvcE164Addr_Object = MibTableColumn
svcE164Addr = _SvcE164Addr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 27),
    _SvcE164Addr_Type()
)
svcE164Addr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcE164Addr.setStatus("mandatory")


class _SvcAutoSapOff_Type(Integer32):
    """Custom type svcAutoSapOff based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SvcAutoSapOff_Type.__name__ = "Integer32"
_SvcAutoSapOff_Object = MibTableColumn
svcAutoSapOff = _SvcAutoSapOff_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 6, 1, 28),
    _SvcAutoSapOff_Type()
)
svcAutoSapOff.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcAutoSapOff.setStatus("mandatory")
_SvcTable_Object = MibTable
svcTable = _SvcTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7)
)
if mibBuilder.loadTexts:
    svcTable.setStatus("mandatory")
_SvcEntry_Object = MibTableRow
svcEntry = _SvcEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1)
)
svcEntry.setIndexNames(
    (0, "DV2-MIB", "svcId"),
)
if mibBuilder.loadTexts:
    svcEntry.setStatus("mandatory")


class _SvcId_Type(Integer32):
    """Custom type svcId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2147483647),
    )


_SvcId_Type.__name__ = "Integer32"
_SvcId_Object = MibTableColumn
svcId = _SvcId_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 1),
    _SvcId_Type()
)
svcId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcId.setStatus("mandatory")


class _SvcDSlot_Type(Integer32):
    """Custom type svcDSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_SvcDSlot_Type.__name__ = "Integer32"
_SvcDSlot_Object = MibTableColumn
svcDSlot = _SvcDSlot_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 2),
    _SvcDSlot_Type()
)
svcDSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcDSlot.setStatus("mandatory")


class _SvcDLink_Type(Integer32):
    """Custom type svcDLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_SvcDLink_Type.__name__ = "Integer32"
_SvcDLink_Object = MibTableColumn
svcDLink = _SvcDLink_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 3),
    _SvcDLink_Type()
)
svcDLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcDLink.setStatus("mandatory")
_SvcDvci_Type = VirtualCircuitIdentifier
_SvcDvci_Object = MibTableColumn
svcDvci = _SvcDvci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 4),
    _SvcDvci_Type()
)
svcDvci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcDvci.setStatus("mandatory")
_SvcDvpi_Type = VirtualPathIdentifier
_SvcDvpi_Object = MibTableColumn
svcDvpi = _SvcDvpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 5),
    _SvcDvpi_Type()
)
svcDvpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcDvpi.setStatus("mandatory")
_SvcDE164_Type = E164
_SvcDE164_Object = MibTableColumn
svcDE164 = _SvcDE164_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 6),
    _SvcDE164_Type()
)
svcDE164.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcDE164.setStatus("mandatory")
_SvcDE164Sub_Type = E164SUB
_SvcDE164Sub_Object = MibTableColumn
svcDE164Sub = _SvcDE164Sub_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 7),
    _SvcDE164Sub_Type()
)
svcDE164Sub.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcDE164Sub.setStatus("mandatory")


class _SvcSSlot_Type(Integer32):
    """Custom type svcSSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_SvcSSlot_Type.__name__ = "Integer32"
_SvcSSlot_Object = MibTableColumn
svcSSlot = _SvcSSlot_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 8),
    _SvcSSlot_Type()
)
svcSSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcSSlot.setStatus("mandatory")


class _SvcSLink_Type(Integer32):
    """Custom type svcSLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_SvcSLink_Type.__name__ = "Integer32"
_SvcSLink_Object = MibTableColumn
svcSLink = _SvcSLink_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 9),
    _SvcSLink_Type()
)
svcSLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcSLink.setStatus("mandatory")
_SvcSvci_Type = VirtualCircuitIdentifier
_SvcSvci_Object = MibTableColumn
svcSvci = _SvcSvci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 10),
    _SvcSvci_Type()
)
svcSvci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcSvci.setStatus("mandatory")
_SvcSvpi_Type = VirtualPathIdentifier
_SvcSvpi_Object = MibTableColumn
svcSvpi = _SvcSvpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 11),
    _SvcSvpi_Type()
)
svcSvpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcSvpi.setStatus("mandatory")
_SvcSE164_Type = E164
_SvcSE164_Object = MibTableColumn
svcSE164 = _SvcSE164_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 12),
    _SvcSE164_Type()
)
svcSE164.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcSE164.setStatus("mandatory")
_SvcSE164Sub_Type = E164SUB
_SvcSE164Sub_Object = MibTableColumn
svcSE164Sub = _SvcSE164Sub_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 13),
    _SvcSE164Sub_Type()
)
svcSE164Sub.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcSE164Sub.setStatus("mandatory")


class _SvcForwardPeakCellRate_Type(Integer32):
    """Custom type svcForwardPeakCellRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcForwardPeakCellRate_Type.__name__ = "Integer32"
_SvcForwardPeakCellRate_Object = MibTableColumn
svcForwardPeakCellRate = _SvcForwardPeakCellRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 14),
    _SvcForwardPeakCellRate_Type()
)
svcForwardPeakCellRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcForwardPeakCellRate.setStatus("mandatory")


class _SvcForwardPeakMode_Type(Integer32):
    """Custom type svcForwardPeakMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              6,
              8)
        )
    )
    namedValues = NamedValues(
        *(("clp0-discard", 2),
          ("clp0-tag", 6),
          ("clp01-discard", 4),
          ("clp01-tag", 8),
          ("off", 1))
    )


_SvcForwardPeakMode_Type.__name__ = "Integer32"
_SvcForwardPeakMode_Object = MibTableColumn
svcForwardPeakMode = _SvcForwardPeakMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 15),
    _SvcForwardPeakMode_Type()
)
svcForwardPeakMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcForwardPeakMode.setStatus("mandatory")


class _SvcBackwardPeakCellRate_Type(Integer32):
    """Custom type svcBackwardPeakCellRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcBackwardPeakCellRate_Type.__name__ = "Integer32"
_SvcBackwardPeakCellRate_Object = MibTableColumn
svcBackwardPeakCellRate = _SvcBackwardPeakCellRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 16),
    _SvcBackwardPeakCellRate_Type()
)
svcBackwardPeakCellRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcBackwardPeakCellRate.setStatus("mandatory")


class _SvcBackwardPeakMode_Type(Integer32):
    """Custom type svcBackwardPeakMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              6,
              8)
        )
    )
    namedValues = NamedValues(
        *(("clp0-discard", 2),
          ("clp0-tag", 6),
          ("clp01-discard", 4),
          ("clp01-tag", 8),
          ("off", 1))
    )


_SvcBackwardPeakMode_Type.__name__ = "Integer32"
_SvcBackwardPeakMode_Object = MibTableColumn
svcBackwardPeakMode = _SvcBackwardPeakMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 17),
    _SvcBackwardPeakMode_Type()
)
svcBackwardPeakMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcBackwardPeakMode.setStatus("mandatory")


class _SvcForwardSustainableCellRate_Type(Integer32):
    """Custom type svcForwardSustainableCellRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcForwardSustainableCellRate_Type.__name__ = "Integer32"
_SvcForwardSustainableCellRate_Object = MibTableColumn
svcForwardSustainableCellRate = _SvcForwardSustainableCellRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 18),
    _SvcForwardSustainableCellRate_Type()
)
svcForwardSustainableCellRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcForwardSustainableCellRate.setStatus("mandatory")


class _SvcForwardMaxBurstSize_Type(Integer32):
    """Custom type svcForwardMaxBurstSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcForwardMaxBurstSize_Type.__name__ = "Integer32"
_SvcForwardMaxBurstSize_Object = MibTableColumn
svcForwardMaxBurstSize = _SvcForwardMaxBurstSize_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 19),
    _SvcForwardMaxBurstSize_Type()
)
svcForwardMaxBurstSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcForwardMaxBurstSize.setStatus("mandatory")


class _SvcForwardSustainableMode_Type(Integer32):
    """Custom type svcForwardSustainableMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              6,
              8)
        )
    )
    namedValues = NamedValues(
        *(("clp0-discard", 2),
          ("clp0-tag", 6),
          ("clp01-discard", 4),
          ("clp01-tag", 8),
          ("off", 1))
    )


_SvcForwardSustainableMode_Type.__name__ = "Integer32"
_SvcForwardSustainableMode_Object = MibTableColumn
svcForwardSustainableMode = _SvcForwardSustainableMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 20),
    _SvcForwardSustainableMode_Type()
)
svcForwardSustainableMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcForwardSustainableMode.setStatus("mandatory")


class _SvcBackwardSustainableCellRate_Type(Integer32):
    """Custom type svcBackwardSustainableCellRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcBackwardSustainableCellRate_Type.__name__ = "Integer32"
_SvcBackwardSustainableCellRate_Object = MibTableColumn
svcBackwardSustainableCellRate = _SvcBackwardSustainableCellRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 21),
    _SvcBackwardSustainableCellRate_Type()
)
svcBackwardSustainableCellRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcBackwardSustainableCellRate.setStatus("mandatory")


class _SvcBackwardMaxBurstSize_Type(Integer32):
    """Custom type svcBackwardMaxBurstSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcBackwardMaxBurstSize_Type.__name__ = "Integer32"
_SvcBackwardMaxBurstSize_Object = MibTableColumn
svcBackwardMaxBurstSize = _SvcBackwardMaxBurstSize_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 22),
    _SvcBackwardMaxBurstSize_Type()
)
svcBackwardMaxBurstSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcBackwardMaxBurstSize.setStatus("mandatory")


class _SvcBackwardSustainableMode_Type(Integer32):
    """Custom type svcBackwardSustainableMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              6,
              8)
        )
    )
    namedValues = NamedValues(
        *(("clp0-discard", 2),
          ("clp0-tag", 6),
          ("clp01-discard", 4),
          ("clp01-tag", 8),
          ("off", 1))
    )


_SvcBackwardSustainableMode_Type.__name__ = "Integer32"
_SvcBackwardSustainableMode_Object = MibTableColumn
svcBackwardSustainableMode = _SvcBackwardSustainableMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 23),
    _SvcBackwardSustainableMode_Type()
)
svcBackwardSustainableMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcBackwardSustainableMode.setStatus("mandatory")


class _SvcQoSClass_Type(Integer32):
    """Custom type svcQoSClass based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("abr", 6),
          ("cbr", 7),
          ("qos1", 1),
          ("qos2", 2),
          ("qos3", 3),
          ("qos4", 4),
          ("ubrBe", 5),
          ("vbrNrt", 9),
          ("vbrRt", 8))
    )


_SvcQoSClass_Type.__name__ = "Integer32"
_SvcQoSClass_Object = MibTableColumn
svcQoSClass = _SvcQoSClass_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 24),
    _SvcQoSClass_Type()
)
svcQoSClass.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQoSClass.setStatus("mandatory")
_SvcBillTag_Type = Integer32
_SvcBillTag_Object = MibTableColumn
svcBillTag = _SvcBillTag_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 25),
    _SvcBillTag_Type()
)
svcBillTag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcBillTag.setStatus("mandatory")
_SvcDuration_Type = Counter32
_SvcDuration_Object = MibTableColumn
svcDuration = _SvcDuration_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 26),
    _SvcDuration_Type()
)
svcDuration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcDuration.setStatus("mandatory")


class _SvcType_Type(Integer32):
    """Custom type svcType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("point-to-multipoint", 2),
          ("point-to-point", 1))
    )


_SvcType_Type.__name__ = "Integer32"
_SvcType_Object = MibTableColumn
svcType = _SvcType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 27),
    _SvcType_Type()
)
svcType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcType.setStatus("mandatory")


class _SvcStatus_Type(Integer32):
    """Custom type svcStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              5)
        )
    )
    namedValues = NamedValues(
        *(("active", 5),
          ("idle", 1),
          ("invalid", 2),
          ("reset", 3))
    )


_SvcStatus_Type.__name__ = "Integer32"
_SvcStatus_Object = MibTableColumn
svcStatus = _SvcStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 28),
    _SvcStatus_Type()
)
svcStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcStatus.setStatus("mandatory")
_SvcNumLeaves_Type = Integer32
_SvcNumLeaves_Object = MibTableColumn
svcNumLeaves = _SvcNumLeaves_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 29),
    _SvcNumLeaves_Type()
)
svcNumLeaves.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcNumLeaves.setStatus("mandatory")
_SvcInternalVpi_Type = Integer32
_SvcInternalVpi_Object = MibTableColumn
svcInternalVpi = _SvcInternalVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 30),
    _SvcInternalVpi_Type()
)
svcInternalVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcInternalVpi.setStatus("mandatory")
_SvcInternalVci_Type = Integer32
_SvcInternalVci_Object = MibTableColumn
svcInternalVci = _SvcInternalVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 7, 1, 31),
    _SvcInternalVci_Type()
)
svcInternalVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcInternalVci.setStatus("mandatory")
_SPvcTable_Object = MibTable
sPvcTable = _SPvcTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8)
)
if mibBuilder.loadTexts:
    sPvcTable.setStatus("mandatory")
_SPvcEntry_Object = MibTableRow
sPvcEntry = _SPvcEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1)
)
sPvcEntry.setIndexNames(
    (0, "DV2-MIB", "sPvcId"),
)
if mibBuilder.loadTexts:
    sPvcEntry.setStatus("mandatory")


class _SPvcId_Type(Integer32):
    """Custom type sPvcId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 750),
    )


_SPvcId_Type.__name__ = "Integer32"
_SPvcId_Object = MibTableColumn
sPvcId = _SPvcId_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 1),
    _SPvcId_Type()
)
sPvcId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcId.setStatus("mandatory")


class _SPvcCallId_Type(Integer32):
    """Custom type sPvcCallId based on Integer32"""
    defaultValue = -1


_SPvcCallId_Object = MibTableColumn
sPvcCallId = _SPvcCallId_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 2),
    _SPvcCallId_Type()
)
sPvcCallId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPvcCallId.setStatus("mandatory")


class _SPvcLink_Type(Integer32):
    """Custom type sPvcLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_SPvcLink_Type.__name__ = "Integer32"
_SPvcLink_Object = MibTableColumn
sPvcLink = _SPvcLink_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 3),
    _SPvcLink_Type()
)
sPvcLink.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcLink.setStatus("mandatory")
_SPvcAddress_Type = E164
_SPvcAddress_Object = MibTableColumn
sPvcAddress = _SPvcAddress_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 4),
    _SPvcAddress_Type()
)
sPvcAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcAddress.setStatus("mandatory")


class _SPvcForwardPeakCellRate_Type(Integer32):
    """Custom type sPvcForwardPeakCellRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SPvcForwardPeakCellRate_Type.__name__ = "Integer32"
_SPvcForwardPeakCellRate_Object = MibTableColumn
sPvcForwardPeakCellRate = _SPvcForwardPeakCellRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 5),
    _SPvcForwardPeakCellRate_Type()
)
sPvcForwardPeakCellRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcForwardPeakCellRate.setStatus("mandatory")


class _SPvcForwardPeakMode_Type(Integer32):
    """Custom type sPvcForwardPeakMode based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              4)
        )
    )
    namedValues = NamedValues(
        *(("clp01-discard", 4),
          ("off", 1))
    )


_SPvcForwardPeakMode_Type.__name__ = "Integer32"
_SPvcForwardPeakMode_Object = MibTableColumn
sPvcForwardPeakMode = _SPvcForwardPeakMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 6),
    _SPvcForwardPeakMode_Type()
)
sPvcForwardPeakMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcForwardPeakMode.setStatus("mandatory")


class _SPvcBackwardPeakCellRate_Type(Integer32):
    """Custom type sPvcBackwardPeakCellRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SPvcBackwardPeakCellRate_Type.__name__ = "Integer32"
_SPvcBackwardPeakCellRate_Object = MibTableColumn
sPvcBackwardPeakCellRate = _SPvcBackwardPeakCellRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 7),
    _SPvcBackwardPeakCellRate_Type()
)
sPvcBackwardPeakCellRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcBackwardPeakCellRate.setStatus("mandatory")


class _SPvcBackwardPeakMode_Type(Integer32):
    """Custom type sPvcBackwardPeakMode based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              4)
        )
    )
    namedValues = NamedValues(
        *(("clp01-discard", 4),
          ("off", 1))
    )


_SPvcBackwardPeakMode_Type.__name__ = "Integer32"
_SPvcBackwardPeakMode_Object = MibTableColumn
sPvcBackwardPeakMode = _SPvcBackwardPeakMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 8),
    _SPvcBackwardPeakMode_Type()
)
sPvcBackwardPeakMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcBackwardPeakMode.setStatus("mandatory")


class _SPvcForwardSustainableCellRate_Type(Integer32):
    """Custom type sPvcForwardSustainableCellRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SPvcForwardSustainableCellRate_Type.__name__ = "Integer32"
_SPvcForwardSustainableCellRate_Object = MibTableColumn
sPvcForwardSustainableCellRate = _SPvcForwardSustainableCellRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 9),
    _SPvcForwardSustainableCellRate_Type()
)
sPvcForwardSustainableCellRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcForwardSustainableCellRate.setStatus("mandatory")


class _SPvcForwardMaxBurstSize_Type(Integer32):
    """Custom type sPvcForwardMaxBurstSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SPvcForwardMaxBurstSize_Type.__name__ = "Integer32"
_SPvcForwardMaxBurstSize_Object = MibTableColumn
sPvcForwardMaxBurstSize = _SPvcForwardMaxBurstSize_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 10),
    _SPvcForwardMaxBurstSize_Type()
)
sPvcForwardMaxBurstSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcForwardMaxBurstSize.setStatus("mandatory")


class _SPvcForwardSustainableMode_Type(Integer32):
    """Custom type sPvcForwardSustainableMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              6)
        )
    )
    namedValues = NamedValues(
        *(("clp0-discard", 2),
          ("clp0-tag", 6),
          ("clp01-discard", 4),
          ("off", 1))
    )


_SPvcForwardSustainableMode_Type.__name__ = "Integer32"
_SPvcForwardSustainableMode_Object = MibTableColumn
sPvcForwardSustainableMode = _SPvcForwardSustainableMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 11),
    _SPvcForwardSustainableMode_Type()
)
sPvcForwardSustainableMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcForwardSustainableMode.setStatus("mandatory")


class _SPvcBackwardSustainableCellRate_Type(Integer32):
    """Custom type sPvcBackwardSustainableCellRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SPvcBackwardSustainableCellRate_Type.__name__ = "Integer32"
_SPvcBackwardSustainableCellRate_Object = MibTableColumn
sPvcBackwardSustainableCellRate = _SPvcBackwardSustainableCellRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 12),
    _SPvcBackwardSustainableCellRate_Type()
)
sPvcBackwardSustainableCellRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcBackwardSustainableCellRate.setStatus("mandatory")


class _SPvcBackwardMaxBurstSize_Type(Integer32):
    """Custom type sPvcBackwardMaxBurstSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SPvcBackwardMaxBurstSize_Type.__name__ = "Integer32"
_SPvcBackwardMaxBurstSize_Object = MibTableColumn
sPvcBackwardMaxBurstSize = _SPvcBackwardMaxBurstSize_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 13),
    _SPvcBackwardMaxBurstSize_Type()
)
sPvcBackwardMaxBurstSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcBackwardMaxBurstSize.setStatus("mandatory")


class _SPvcBackwardSustainableMode_Type(Integer32):
    """Custom type sPvcBackwardSustainableMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              4,
              6)
        )
    )
    namedValues = NamedValues(
        *(("clp0-discard", 2),
          ("clp0-tag", 6),
          ("clp01-discard", 4),
          ("off", 1))
    )


_SPvcBackwardSustainableMode_Type.__name__ = "Integer32"
_SPvcBackwardSustainableMode_Object = MibTableColumn
sPvcBackwardSustainableMode = _SPvcBackwardSustainableMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 14),
    _SPvcBackwardSustainableMode_Type()
)
sPvcBackwardSustainableMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcBackwardSustainableMode.setStatus("mandatory")


class _SPvcQoSClass_Type(Integer32):
    """Custom type sPvcQoSClass based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("best-effort", 5),
          ("cbr", 1),
          ("vbr-high", 2),
          ("vbr-low", 4),
          ("vbr-med", 3))
    )


_SPvcQoSClass_Type.__name__ = "Integer32"
_SPvcQoSClass_Object = MibTableColumn
sPvcQoSClass = _SPvcQoSClass_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 15),
    _SPvcQoSClass_Type()
)
sPvcQoSClass.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcQoSClass.setStatus("mandatory")
_SPvcSourceVci_Type = VirtualCircuitIdentifier
_SPvcSourceVci_Object = MibTableColumn
sPvcSourceVci = _SPvcSourceVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 16),
    _SPvcSourceVci_Type()
)
sPvcSourceVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcSourceVci.setStatus("mandatory")
_SPvcSourceVpi_Type = VirtualPathIdentifier
_SPvcSourceVpi_Object = MibTableColumn
sPvcSourceVpi = _SPvcSourceVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 17),
    _SPvcSourceVpi_Type()
)
sPvcSourceVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcSourceVpi.setStatus("mandatory")
_SPvcTargetVci_Type = VirtualCircuitIdentifier
_SPvcTargetVci_Object = MibTableColumn
sPvcTargetVci = _SPvcTargetVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 18),
    _SPvcTargetVci_Type()
)
sPvcTargetVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcTargetVci.setStatus("mandatory")
_SPvcTargetVpi_Type = VirtualPathIdentifier
_SPvcTargetVpi_Object = MibTableColumn
sPvcTargetVpi = _SPvcTargetVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 19),
    _SPvcTargetVpi_Type()
)
sPvcTargetVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcTargetVpi.setStatus("mandatory")


class _SPvcRetry_Type(Integer32):
    """Custom type sPvcRetry based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_SPvcRetry_Type.__name__ = "Integer32"
_SPvcRetry_Object = MibTableColumn
sPvcRetry = _SPvcRetry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 20),
    _SPvcRetry_Type()
)
sPvcRetry.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcRetry.setStatus("mandatory")
_SPvcConnectTime_Type = Integer32
_SPvcConnectTime_Object = MibTableColumn
sPvcConnectTime = _SPvcConnectTime_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 21),
    _SPvcConnectTime_Type()
)
sPvcConnectTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPvcConnectTime.setStatus("mandatory")


class _SPvcNumberRetries_Type(Integer32):
    """Custom type sPvcNumberRetries based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1000),
    )


_SPvcNumberRetries_Type.__name__ = "Integer32"
_SPvcNumberRetries_Object = MibTableColumn
sPvcNumberRetries = _SPvcNumberRetries_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 22),
    _SPvcNumberRetries_Type()
)
sPvcNumberRetries.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcNumberRetries.setStatus("mandatory")
_SPvcFailures_Type = Integer32
_SPvcFailures_Object = MibTableColumn
sPvcFailures = _SPvcFailures_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 23),
    _SPvcFailures_Type()
)
sPvcFailures.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPvcFailures.setStatus("mandatory")


class _SPvcAlertFailures_Type(Integer32):
    """Custom type sPvcAlertFailures based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("call-success", 5),
          ("fail", 2),
          ("fail-all-attempts", 4),
          ("fail-or-clear", 3),
          ("no-trap", 1),
          ("trap-all", 6),
          ("trap-state-change", 7))
    )


_SPvcAlertFailures_Type.__name__ = "Integer32"
_SPvcAlertFailures_Object = MibTableColumn
sPvcAlertFailures = _SPvcAlertFailures_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 24),
    _SPvcAlertFailures_Type()
)
sPvcAlertFailures.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcAlertFailures.setStatus("mandatory")
_SPvcCauseDiag_Type = Q93bCauseDiag
_SPvcCauseDiag_Object = MibTableColumn
sPvcCauseDiag = _SPvcCauseDiag_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 25),
    _SPvcCauseDiag_Type()
)
sPvcCauseDiag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPvcCauseDiag.setStatus("mandatory")


class _SPvcType_Type(Integer32):
    """Custom type sPvcType based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("passive", 1))
    )


_SPvcType_Type.__name__ = "Integer32"
_SPvcType_Object = MibTableColumn
sPvcType = _SPvcType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 26),
    _SPvcType_Type()
)
sPvcType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPvcType.setStatus("mandatory")


class _SPvcCallState_Type(Integer32):
    """Custom type sPvcCallState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("call-setup", 2),
          ("idle", 1),
          ("invalid", 4),
          ("reset", 3))
    )


_SPvcCallState_Type.__name__ = "Integer32"
_SPvcCallState_Object = MibTableColumn
sPvcCallState = _SPvcCallState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 27),
    _SPvcCallState_Type()
)
sPvcCallState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcCallState.setStatus("mandatory")


class _SPvcStatus_Type(Integer32):
    """Custom type sPvcStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("active", 4),
          ("idle", 1),
          ("l4-wait", 3),
          ("sPVC-wait", 2))
    )


_SPvcStatus_Type.__name__ = "Integer32"
_SPvcStatus_Object = MibTableColumn
sPvcStatus = _SPvcStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 28),
    _SPvcStatus_Type()
)
sPvcStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPvcStatus.setStatus("mandatory")
_SPvcCauseDiagCode_Type = Integer32
_SPvcCauseDiagCode_Object = MibTableColumn
sPvcCauseDiagCode = _SPvcCauseDiagCode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 29),
    _SPvcCauseDiagCode_Type()
)
sPvcCauseDiagCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sPvcCauseDiagCode.setStatus("mandatory")


class _SPvcMulticast_Type(Integer32):
    """Custom type sPvcMulticast based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("bidirect-root", 4),
          ("pt-mpt-leaf", 3),
          ("pt-mpt-root", 2),
          ("pt-pt", 1))
    )


_SPvcMulticast_Type.__name__ = "Integer32"
_SPvcMulticast_Object = MibTableColumn
sPvcMulticast = _SPvcMulticast_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 8, 1, 30),
    _SPvcMulticast_Type()
)
sPvcMulticast.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sPvcMulticast.setStatus("mandatory")
_SvcQ93bStatTable_Object = MibTable
svcQ93bStatTable = _SvcQ93bStatTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9)
)
if mibBuilder.loadTexts:
    svcQ93bStatTable.setStatus("mandatory")
_SvcQ93bStatEntry_Object = MibTableRow
svcQ93bStatEntry = _SvcQ93bStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1)
)
svcQ93bStatEntry.setIndexNames(
    (0, "DV2-MIB", "svcQ93bStatSAP"),
)
if mibBuilder.loadTexts:
    svcQ93bStatEntry.setStatus("mandatory")


class _SvcQ93bStatSAP_Type(Integer32):
    """Custom type svcQ93bStatSAP based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_SvcQ93bStatSAP_Type.__name__ = "Integer32"
_SvcQ93bStatSAP_Object = MibTableColumn
svcQ93bStatSAP = _SvcQ93bStatSAP_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 1),
    _SvcQ93bStatSAP_Type()
)
svcQ93bStatSAP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatSAP.setStatus("mandatory")


class _SvcQ93bStatActive_Type(Integer32):
    """Custom type svcQ93bStatActive based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatActive_Type.__name__ = "Integer32"
_SvcQ93bStatActive_Object = MibTableColumn
svcQ93bStatActive = _SvcQ93bStatActive_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 2),
    _SvcQ93bStatActive_Type()
)
svcQ93bStatActive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatActive.setStatus("mandatory")


class _SvcQ93bStatAccumalative_Type(Integer32):
    """Custom type svcQ93bStatAccumalative based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatAccumalative_Type.__name__ = "Integer32"
_SvcQ93bStatAccumalative_Object = MibTableColumn
svcQ93bStatAccumalative = _SvcQ93bStatAccumalative_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 3),
    _SvcQ93bStatAccumalative_Type()
)
svcQ93bStatAccumalative.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatAccumalative.setStatus("mandatory")


class _SvcQ93bStatCallProcTx_Type(Integer32):
    """Custom type svcQ93bStatCallProcTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatCallProcTx_Type.__name__ = "Integer32"
_SvcQ93bStatCallProcTx_Object = MibTableColumn
svcQ93bStatCallProcTx = _SvcQ93bStatCallProcTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 4),
    _SvcQ93bStatCallProcTx_Type()
)
svcQ93bStatCallProcTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatCallProcTx.setStatus("mandatory")


class _SvcQ93bStatConnTx_Type(Integer32):
    """Custom type svcQ93bStatConnTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatConnTx_Type.__name__ = "Integer32"
_SvcQ93bStatConnTx_Object = MibTableColumn
svcQ93bStatConnTx = _SvcQ93bStatConnTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 5),
    _SvcQ93bStatConnTx_Type()
)
svcQ93bStatConnTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatConnTx.setStatus("mandatory")


class _SvcQ93bStatConnAckTx_Type(Integer32):
    """Custom type svcQ93bStatConnAckTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatConnAckTx_Type.__name__ = "Integer32"
_SvcQ93bStatConnAckTx_Object = MibTableColumn
svcQ93bStatConnAckTx = _SvcQ93bStatConnAckTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 6),
    _SvcQ93bStatConnAckTx_Type()
)
svcQ93bStatConnAckTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatConnAckTx.setStatus("mandatory")


class _SvcQ93bStatSetupTx_Type(Integer32):
    """Custom type svcQ93bStatSetupTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatSetupTx_Type.__name__ = "Integer32"
_SvcQ93bStatSetupTx_Object = MibTableColumn
svcQ93bStatSetupTx = _SvcQ93bStatSetupTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 7),
    _SvcQ93bStatSetupTx_Type()
)
svcQ93bStatSetupTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatSetupTx.setStatus("mandatory")


class _SvcQ93bStatRelTx_Type(Integer32):
    """Custom type svcQ93bStatRelTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatRelTx_Type.__name__ = "Integer32"
_SvcQ93bStatRelTx_Object = MibTableColumn
svcQ93bStatRelTx = _SvcQ93bStatRelTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 8),
    _SvcQ93bStatRelTx_Type()
)
svcQ93bStatRelTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatRelTx.setStatus("mandatory")


class _SvcQ93bStatRelCmpltTx_Type(Integer32):
    """Custom type svcQ93bStatRelCmpltTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatRelCmpltTx_Type.__name__ = "Integer32"
_SvcQ93bStatRelCmpltTx_Object = MibTableColumn
svcQ93bStatRelCmpltTx = _SvcQ93bStatRelCmpltTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 9),
    _SvcQ93bStatRelCmpltTx_Type()
)
svcQ93bStatRelCmpltTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatRelCmpltTx.setStatus("mandatory")


class _SvcQ93bStatRstTx_Type(Integer32):
    """Custom type svcQ93bStatRstTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatRstTx_Type.__name__ = "Integer32"
_SvcQ93bStatRstTx_Object = MibTableColumn
svcQ93bStatRstTx = _SvcQ93bStatRstTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 10),
    _SvcQ93bStatRstTx_Type()
)
svcQ93bStatRstTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatRstTx.setStatus("mandatory")


class _SvcQ93bStatRstAckTx_Type(Integer32):
    """Custom type svcQ93bStatRstAckTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatRstAckTx_Type.__name__ = "Integer32"
_SvcQ93bStatRstAckTx_Object = MibTableColumn
svcQ93bStatRstAckTx = _SvcQ93bStatRstAckTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 11),
    _SvcQ93bStatRstAckTx_Type()
)
svcQ93bStatRstAckTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatRstAckTx.setStatus("mandatory")


class _SvcQ93bStatStatTx_Type(Integer32):
    """Custom type svcQ93bStatStatTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatStatTx_Type.__name__ = "Integer32"
_SvcQ93bStatStatTx_Object = MibTableColumn
svcQ93bStatStatTx = _SvcQ93bStatStatTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 12),
    _SvcQ93bStatStatTx_Type()
)
svcQ93bStatStatTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatStatTx.setStatus("mandatory")


class _SvcQ93bStatStatEnqTx_Type(Integer32):
    """Custom type svcQ93bStatStatEnqTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatStatEnqTx_Type.__name__ = "Integer32"
_SvcQ93bStatStatEnqTx_Object = MibTableColumn
svcQ93bStatStatEnqTx = _SvcQ93bStatStatEnqTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 13),
    _SvcQ93bStatStatEnqTx_Type()
)
svcQ93bStatStatEnqTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatStatEnqTx.setStatus("mandatory")


class _SvcQ93bStatAddPtyTx_Type(Integer32):
    """Custom type svcQ93bStatAddPtyTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatAddPtyTx_Type.__name__ = "Integer32"
_SvcQ93bStatAddPtyTx_Object = MibTableColumn
svcQ93bStatAddPtyTx = _SvcQ93bStatAddPtyTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 14),
    _SvcQ93bStatAddPtyTx_Type()
)
svcQ93bStatAddPtyTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatAddPtyTx.setStatus("mandatory")


class _SvcQ93bStatAddPtyAckTx_Type(Integer32):
    """Custom type svcQ93bStatAddPtyAckTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatAddPtyAckTx_Type.__name__ = "Integer32"
_SvcQ93bStatAddPtyAckTx_Object = MibTableColumn
svcQ93bStatAddPtyAckTx = _SvcQ93bStatAddPtyAckTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 15),
    _SvcQ93bStatAddPtyAckTx_Type()
)
svcQ93bStatAddPtyAckTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatAddPtyAckTx.setStatus("mandatory")


class _SvcQ93bStatAddPtyRejTx_Type(Integer32):
    """Custom type svcQ93bStatAddPtyRejTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatAddPtyRejTx_Type.__name__ = "Integer32"
_SvcQ93bStatAddPtyRejTx_Object = MibTableColumn
svcQ93bStatAddPtyRejTx = _SvcQ93bStatAddPtyRejTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 16),
    _SvcQ93bStatAddPtyRejTx_Type()
)
svcQ93bStatAddPtyRejTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatAddPtyRejTx.setStatus("mandatory")


class _SvcQ93bStatDropPtyTx_Type(Integer32):
    """Custom type svcQ93bStatDropPtyTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatDropPtyTx_Type.__name__ = "Integer32"
_SvcQ93bStatDropPtyTx_Object = MibTableColumn
svcQ93bStatDropPtyTx = _SvcQ93bStatDropPtyTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 17),
    _SvcQ93bStatDropPtyTx_Type()
)
svcQ93bStatDropPtyTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatDropPtyTx.setStatus("mandatory")


class _SvcQ93bStatDropPtyAckTx_Type(Integer32):
    """Custom type svcQ93bStatDropPtyAckTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatDropPtyAckTx_Type.__name__ = "Integer32"
_SvcQ93bStatDropPtyAckTx_Object = MibTableColumn
svcQ93bStatDropPtyAckTx = _SvcQ93bStatDropPtyAckTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 18),
    _SvcQ93bStatDropPtyAckTx_Type()
)
svcQ93bStatDropPtyAckTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatDropPtyAckTx.setStatus("mandatory")


class _SvcQ93bStatLstCauseTx_Type(Integer32):
    """Custom type svcQ93bStatLstCauseTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatLstCauseTx_Type.__name__ = "Integer32"
_SvcQ93bStatLstCauseTx_Object = MibTableColumn
svcQ93bStatLstCauseTx = _SvcQ93bStatLstCauseTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 19),
    _SvcQ93bStatLstCauseTx_Type()
)
svcQ93bStatLstCauseTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatLstCauseTx.setStatus("mandatory")


class _SvcQ93bStatLstDiagTx_Type(Integer32):
    """Custom type svcQ93bStatLstDiagTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatLstDiagTx_Type.__name__ = "Integer32"
_SvcQ93bStatLstDiagTx_Object = MibTableColumn
svcQ93bStatLstDiagTx = _SvcQ93bStatLstDiagTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 20),
    _SvcQ93bStatLstDiagTx_Type()
)
svcQ93bStatLstDiagTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatLstDiagTx.setStatus("mandatory")


class _SvcQ93bStatCallProcRx_Type(Integer32):
    """Custom type svcQ93bStatCallProcRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatCallProcRx_Type.__name__ = "Integer32"
_SvcQ93bStatCallProcRx_Object = MibTableColumn
svcQ93bStatCallProcRx = _SvcQ93bStatCallProcRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 21),
    _SvcQ93bStatCallProcRx_Type()
)
svcQ93bStatCallProcRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatCallProcRx.setStatus("mandatory")


class _SvcQ93bStatConnRx_Type(Integer32):
    """Custom type svcQ93bStatConnRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatConnRx_Type.__name__ = "Integer32"
_SvcQ93bStatConnRx_Object = MibTableColumn
svcQ93bStatConnRx = _SvcQ93bStatConnRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 22),
    _SvcQ93bStatConnRx_Type()
)
svcQ93bStatConnRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatConnRx.setStatus("mandatory")


class _SvcQ93bStatConnAckRx_Type(Integer32):
    """Custom type svcQ93bStatConnAckRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatConnAckRx_Type.__name__ = "Integer32"
_SvcQ93bStatConnAckRx_Object = MibTableColumn
svcQ93bStatConnAckRx = _SvcQ93bStatConnAckRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 23),
    _SvcQ93bStatConnAckRx_Type()
)
svcQ93bStatConnAckRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatConnAckRx.setStatus("mandatory")


class _SvcQ93bStatSetupRx_Type(Integer32):
    """Custom type svcQ93bStatSetupRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatSetupRx_Type.__name__ = "Integer32"
_SvcQ93bStatSetupRx_Object = MibTableColumn
svcQ93bStatSetupRx = _SvcQ93bStatSetupRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 24),
    _SvcQ93bStatSetupRx_Type()
)
svcQ93bStatSetupRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatSetupRx.setStatus("mandatory")


class _SvcQ93bStatRelRx_Type(Integer32):
    """Custom type svcQ93bStatRelRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatRelRx_Type.__name__ = "Integer32"
_SvcQ93bStatRelRx_Object = MibTableColumn
svcQ93bStatRelRx = _SvcQ93bStatRelRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 25),
    _SvcQ93bStatRelRx_Type()
)
svcQ93bStatRelRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatRelRx.setStatus("mandatory")


class _SvcQ93bStatRelCmpltRx_Type(Integer32):
    """Custom type svcQ93bStatRelCmpltRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatRelCmpltRx_Type.__name__ = "Integer32"
_SvcQ93bStatRelCmpltRx_Object = MibTableColumn
svcQ93bStatRelCmpltRx = _SvcQ93bStatRelCmpltRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 26),
    _SvcQ93bStatRelCmpltRx_Type()
)
svcQ93bStatRelCmpltRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatRelCmpltRx.setStatus("mandatory")


class _SvcQ93bStatRstRx_Type(Integer32):
    """Custom type svcQ93bStatRstRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatRstRx_Type.__name__ = "Integer32"
_SvcQ93bStatRstRx_Object = MibTableColumn
svcQ93bStatRstRx = _SvcQ93bStatRstRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 27),
    _SvcQ93bStatRstRx_Type()
)
svcQ93bStatRstRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatRstRx.setStatus("mandatory")


class _SvcQ93bStatRstAckRx_Type(Integer32):
    """Custom type svcQ93bStatRstAckRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatRstAckRx_Type.__name__ = "Integer32"
_SvcQ93bStatRstAckRx_Object = MibTableColumn
svcQ93bStatRstAckRx = _SvcQ93bStatRstAckRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 28),
    _SvcQ93bStatRstAckRx_Type()
)
svcQ93bStatRstAckRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatRstAckRx.setStatus("mandatory")


class _SvcQ93bStatStatRx_Type(Integer32):
    """Custom type svcQ93bStatStatRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatStatRx_Type.__name__ = "Integer32"
_SvcQ93bStatStatRx_Object = MibTableColumn
svcQ93bStatStatRx = _SvcQ93bStatStatRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 29),
    _SvcQ93bStatStatRx_Type()
)
svcQ93bStatStatRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatStatRx.setStatus("mandatory")


class _SvcQ93bStatStatEnqRx_Type(Integer32):
    """Custom type svcQ93bStatStatEnqRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatStatEnqRx_Type.__name__ = "Integer32"
_SvcQ93bStatStatEnqRx_Object = MibTableColumn
svcQ93bStatStatEnqRx = _SvcQ93bStatStatEnqRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 30),
    _SvcQ93bStatStatEnqRx_Type()
)
svcQ93bStatStatEnqRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatStatEnqRx.setStatus("mandatory")


class _SvcQ93bStatAddPtyRx_Type(Integer32):
    """Custom type svcQ93bStatAddPtyRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatAddPtyRx_Type.__name__ = "Integer32"
_SvcQ93bStatAddPtyRx_Object = MibTableColumn
svcQ93bStatAddPtyRx = _SvcQ93bStatAddPtyRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 31),
    _SvcQ93bStatAddPtyRx_Type()
)
svcQ93bStatAddPtyRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatAddPtyRx.setStatus("mandatory")


class _SvcQ93bStatAddPtyAckRx_Type(Integer32):
    """Custom type svcQ93bStatAddPtyAckRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatAddPtyAckRx_Type.__name__ = "Integer32"
_SvcQ93bStatAddPtyAckRx_Object = MibTableColumn
svcQ93bStatAddPtyAckRx = _SvcQ93bStatAddPtyAckRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 32),
    _SvcQ93bStatAddPtyAckRx_Type()
)
svcQ93bStatAddPtyAckRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatAddPtyAckRx.setStatus("mandatory")


class _SvcQ93bStatAddPtyRejRx_Type(Integer32):
    """Custom type svcQ93bStatAddPtyRejRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatAddPtyRejRx_Type.__name__ = "Integer32"
_SvcQ93bStatAddPtyRejRx_Object = MibTableColumn
svcQ93bStatAddPtyRejRx = _SvcQ93bStatAddPtyRejRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 33),
    _SvcQ93bStatAddPtyRejRx_Type()
)
svcQ93bStatAddPtyRejRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatAddPtyRejRx.setStatus("mandatory")


class _SvcQ93bStatDropPtyRx_Type(Integer32):
    """Custom type svcQ93bStatDropPtyRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatDropPtyRx_Type.__name__ = "Integer32"
_SvcQ93bStatDropPtyRx_Object = MibTableColumn
svcQ93bStatDropPtyRx = _SvcQ93bStatDropPtyRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 34),
    _SvcQ93bStatDropPtyRx_Type()
)
svcQ93bStatDropPtyRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatDropPtyRx.setStatus("mandatory")


class _SvcQ93bStatDropPtyAckRx_Type(Integer32):
    """Custom type svcQ93bStatDropPtyAckRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatDropPtyAckRx_Type.__name__ = "Integer32"
_SvcQ93bStatDropPtyAckRx_Object = MibTableColumn
svcQ93bStatDropPtyAckRx = _SvcQ93bStatDropPtyAckRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 35),
    _SvcQ93bStatDropPtyAckRx_Type()
)
svcQ93bStatDropPtyAckRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatDropPtyAckRx.setStatus("mandatory")


class _SvcQ93bStatLstCauseRx_Type(Integer32):
    """Custom type svcQ93bStatLstCauseRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatLstCauseRx_Type.__name__ = "Integer32"
_SvcQ93bStatLstCauseRx_Object = MibTableColumn
svcQ93bStatLstCauseRx = _SvcQ93bStatLstCauseRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 36),
    _SvcQ93bStatLstCauseRx_Type()
)
svcQ93bStatLstCauseRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatLstCauseRx.setStatus("mandatory")


class _SvcQ93bStatLstDiagRx_Type(Integer32):
    """Custom type svcQ93bStatLstDiagRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQ93bStatLstDiagRx_Type.__name__ = "Integer32"
_SvcQ93bStatLstDiagRx_Object = MibTableColumn
svcQ93bStatLstDiagRx = _SvcQ93bStatLstDiagRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 37),
    _SvcQ93bStatLstDiagRx_Type()
)
svcQ93bStatLstDiagRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatLstDiagRx.setStatus("mandatory")


class _SvcQ93bStatClr_Type(Integer32):
    """Custom type svcQ93bStatClr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_SvcQ93bStatClr_Type.__name__ = "Integer32"
_SvcQ93bStatClr_Object = MibTableColumn
svcQ93bStatClr = _SvcQ93bStatClr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 38),
    _SvcQ93bStatClr_Type()
)
svcQ93bStatClr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcQ93bStatClr.setStatus("mandatory")
_SvcQ93bStatDiagTx_Type = Q93bCauseDiag
_SvcQ93bStatDiagTx_Object = MibTableColumn
svcQ93bStatDiagTx = _SvcQ93bStatDiagTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 39),
    _SvcQ93bStatDiagTx_Type()
)
svcQ93bStatDiagTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatDiagTx.setStatus("mandatory")
_SvcQ93bStatDiagRx_Type = Q93bCauseDiag
_SvcQ93bStatDiagRx_Object = MibTableColumn
svcQ93bStatDiagRx = _SvcQ93bStatDiagRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 9, 1, 40),
    _SvcQ93bStatDiagRx_Type()
)
svcQ93bStatDiagRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQ93bStatDiagRx.setStatus("mandatory")
_SvcQsaalStatTable_Object = MibTable
svcQsaalStatTable = _SvcQsaalStatTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10)
)
if mibBuilder.loadTexts:
    svcQsaalStatTable.setStatus("mandatory")
_SvcQsaalStatEntry_Object = MibTableRow
svcQsaalStatEntry = _SvcQsaalStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1)
)
svcQsaalStatEntry.setIndexNames(
    (0, "DV2-MIB", "svcQsaalStatSAP"),
)
if mibBuilder.loadTexts:
    svcQsaalStatEntry.setStatus("mandatory")


class _SvcQsaalStatSAP_Type(Integer32):
    """Custom type svcQsaalStatSAP based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_SvcQsaalStatSAP_Type.__name__ = "Integer32"
_SvcQsaalStatSAP_Object = MibTableColumn
svcQsaalStatSAP = _SvcQsaalStatSAP_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 1),
    _SvcQsaalStatSAP_Type()
)
svcQsaalStatSAP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatSAP.setStatus("mandatory")


class _SvcQsaalStatOutSduDisc_Type(Integer32):
    """Custom type svcQsaalStatOutSduDisc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatOutSduDisc_Type.__name__ = "Integer32"
_SvcQsaalStatOutSduDisc_Object = MibTableColumn
svcQsaalStatOutSduDisc = _SvcQsaalStatOutSduDisc_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 2),
    _SvcQsaalStatOutSduDisc_Type()
)
svcQsaalStatOutSduDisc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatOutSduDisc.setStatus("mandatory")


class _SvcQsaalStatInPduErr_Type(Integer32):
    """Custom type svcQsaalStatInPduErr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatInPduErr_Type.__name__ = "Integer32"
_SvcQsaalStatInPduErr_Object = MibTableColumn
svcQsaalStatInPduErr = _SvcQsaalStatInPduErr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 3),
    _SvcQsaalStatInPduErr_Type()
)
svcQsaalStatInPduErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatInPduErr.setStatus("mandatory")


class _SvcQsaalStatInPduDisc_Type(Integer32):
    """Custom type svcQsaalStatInPduDisc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatInPduDisc_Type.__name__ = "Integer32"
_SvcQsaalStatInPduDisc_Object = MibTableColumn
svcQsaalStatInPduDisc = _SvcQsaalStatInPduDisc_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 4),
    _SvcQsaalStatInPduDisc_Type()
)
svcQsaalStatInPduDisc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatInPduDisc.setStatus("mandatory")


class _SvcQsaalStatOutPduErr_Type(Integer32):
    """Custom type svcQsaalStatOutPduErr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatOutPduErr_Type.__name__ = "Integer32"
_SvcQsaalStatOutPduErr_Object = MibTableColumn
svcQsaalStatOutPduErr = _SvcQsaalStatOutPduErr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 5),
    _SvcQsaalStatOutPduErr_Type()
)
svcQsaalStatOutPduErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatOutPduErr.setStatus("mandatory")


class _SvcQsaalStatOutPduDisc_Type(Integer32):
    """Custom type svcQsaalStatOutPduDisc based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatOutPduDisc_Type.__name__ = "Integer32"
_SvcQsaalStatOutPduDisc_Object = MibTableColumn
svcQsaalStatOutPduDisc = _SvcQsaalStatOutPduDisc_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 6),
    _SvcQsaalStatOutPduDisc_Type()
)
svcQsaalStatOutPduDisc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatOutPduDisc.setStatus("mandatory")


class _SvcQsaalStatBgnTx_Type(Integer32):
    """Custom type svcQsaalStatBgnTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatBgnTx_Type.__name__ = "Integer32"
_SvcQsaalStatBgnTx_Object = MibTableColumn
svcQsaalStatBgnTx = _SvcQsaalStatBgnTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 7),
    _SvcQsaalStatBgnTx_Type()
)
svcQsaalStatBgnTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatBgnTx.setStatus("mandatory")


class _SvcQsaalStatBgakTx_Type(Integer32):
    """Custom type svcQsaalStatBgakTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatBgakTx_Type.__name__ = "Integer32"
_SvcQsaalStatBgakTx_Object = MibTableColumn
svcQsaalStatBgakTx = _SvcQsaalStatBgakTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 8),
    _SvcQsaalStatBgakTx_Type()
)
svcQsaalStatBgakTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatBgakTx.setStatus("mandatory")


class _SvcQsaalStatBgrejTx_Type(Integer32):
    """Custom type svcQsaalStatBgrejTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatBgrejTx_Type.__name__ = "Integer32"
_SvcQsaalStatBgrejTx_Object = MibTableColumn
svcQsaalStatBgrejTx = _SvcQsaalStatBgrejTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 9),
    _SvcQsaalStatBgrejTx_Type()
)
svcQsaalStatBgrejTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatBgrejTx.setStatus("mandatory")


class _SvcQsaalStatEndTx_Type(Integer32):
    """Custom type svcQsaalStatEndTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatEndTx_Type.__name__ = "Integer32"
_SvcQsaalStatEndTx_Object = MibTableColumn
svcQsaalStatEndTx = _SvcQsaalStatEndTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 10),
    _SvcQsaalStatEndTx_Type()
)
svcQsaalStatEndTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatEndTx.setStatus("mandatory")


class _SvcQsaalStatRsTx_Type(Integer32):
    """Custom type svcQsaalStatRsTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatRsTx_Type.__name__ = "Integer32"
_SvcQsaalStatRsTx_Object = MibTableColumn
svcQsaalStatRsTx = _SvcQsaalStatRsTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 11),
    _SvcQsaalStatRsTx_Type()
)
svcQsaalStatRsTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatRsTx.setStatus("mandatory")


class _SvcQsaalStatRsakTx_Type(Integer32):
    """Custom type svcQsaalStatRsakTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatRsakTx_Type.__name__ = "Integer32"
_SvcQsaalStatRsakTx_Object = MibTableColumn
svcQsaalStatRsakTx = _SvcQsaalStatRsakTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 12),
    _SvcQsaalStatRsakTx_Type()
)
svcQsaalStatRsakTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatRsakTx.setStatus("mandatory")


class _SvcQsaalStatSdTx_Type(Integer32):
    """Custom type svcQsaalStatSdTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatSdTx_Type.__name__ = "Integer32"
_SvcQsaalStatSdTx_Object = MibTableColumn
svcQsaalStatSdTx = _SvcQsaalStatSdTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 13),
    _SvcQsaalStatSdTx_Type()
)
svcQsaalStatSdTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatSdTx.setStatus("mandatory")


class _SvcQsaalStatSdpTx_Type(Integer32):
    """Custom type svcQsaalStatSdpTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatSdpTx_Type.__name__ = "Integer32"
_SvcQsaalStatSdpTx_Object = MibTableColumn
svcQsaalStatSdpTx = _SvcQsaalStatSdpTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 14),
    _SvcQsaalStatSdpTx_Type()
)
svcQsaalStatSdpTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatSdpTx.setStatus("mandatory")


class _SvcQsaalStatPollTx_Type(Integer32):
    """Custom type svcQsaalStatPollTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatPollTx_Type.__name__ = "Integer32"
_SvcQsaalStatPollTx_Object = MibTableColumn
svcQsaalStatPollTx = _SvcQsaalStatPollTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 15),
    _SvcQsaalStatPollTx_Type()
)
svcQsaalStatPollTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatPollTx.setStatus("mandatory")


class _SvcQsaalStatStatTx_Type(Integer32):
    """Custom type svcQsaalStatStatTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatStatTx_Type.__name__ = "Integer32"
_SvcQsaalStatStatTx_Object = MibTableColumn
svcQsaalStatStatTx = _SvcQsaalStatStatTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 16),
    _SvcQsaalStatStatTx_Type()
)
svcQsaalStatStatTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatStatTx.setStatus("mandatory")


class _SvcQsaalStatUstatTx_Type(Integer32):
    """Custom type svcQsaalStatUstatTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatUstatTx_Type.__name__ = "Integer32"
_SvcQsaalStatUstatTx_Object = MibTableColumn
svcQsaalStatUstatTx = _SvcQsaalStatUstatTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 17),
    _SvcQsaalStatUstatTx_Type()
)
svcQsaalStatUstatTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatUstatTx.setStatus("mandatory")


class _SvcQsaalStatUdTx_Type(Integer32):
    """Custom type svcQsaalStatUdTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatUdTx_Type.__name__ = "Integer32"
_SvcQsaalStatUdTx_Object = MibTableColumn
svcQsaalStatUdTx = _SvcQsaalStatUdTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 18),
    _SvcQsaalStatUdTx_Type()
)
svcQsaalStatUdTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatUdTx.setStatus("mandatory")


class _SvcQsaalStatMdTx_Type(Integer32):
    """Custom type svcQsaalStatMdTx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatMdTx_Type.__name__ = "Integer32"
_SvcQsaalStatMdTx_Object = MibTableColumn
svcQsaalStatMdTx = _SvcQsaalStatMdTx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 19),
    _SvcQsaalStatMdTx_Type()
)
svcQsaalStatMdTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatMdTx.setStatus("mandatory")


class _SvcQsaalStatBgnRx_Type(Integer32):
    """Custom type svcQsaalStatBgnRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatBgnRx_Type.__name__ = "Integer32"
_SvcQsaalStatBgnRx_Object = MibTableColumn
svcQsaalStatBgnRx = _SvcQsaalStatBgnRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 20),
    _SvcQsaalStatBgnRx_Type()
)
svcQsaalStatBgnRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatBgnRx.setStatus("mandatory")


class _SvcQsaalStatBgakRx_Type(Integer32):
    """Custom type svcQsaalStatBgakRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatBgakRx_Type.__name__ = "Integer32"
_SvcQsaalStatBgakRx_Object = MibTableColumn
svcQsaalStatBgakRx = _SvcQsaalStatBgakRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 21),
    _SvcQsaalStatBgakRx_Type()
)
svcQsaalStatBgakRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatBgakRx.setStatus("mandatory")


class _SvcQsaalStatBgrejRx_Type(Integer32):
    """Custom type svcQsaalStatBgrejRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatBgrejRx_Type.__name__ = "Integer32"
_SvcQsaalStatBgrejRx_Object = MibTableColumn
svcQsaalStatBgrejRx = _SvcQsaalStatBgrejRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 22),
    _SvcQsaalStatBgrejRx_Type()
)
svcQsaalStatBgrejRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatBgrejRx.setStatus("mandatory")


class _SvcQsaalStatEndRx_Type(Integer32):
    """Custom type svcQsaalStatEndRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatEndRx_Type.__name__ = "Integer32"
_SvcQsaalStatEndRx_Object = MibTableColumn
svcQsaalStatEndRx = _SvcQsaalStatEndRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 23),
    _SvcQsaalStatEndRx_Type()
)
svcQsaalStatEndRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatEndRx.setStatus("mandatory")


class _SvcQsaalStatRsRx_Type(Integer32):
    """Custom type svcQsaalStatRsRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatRsRx_Type.__name__ = "Integer32"
_SvcQsaalStatRsRx_Object = MibTableColumn
svcQsaalStatRsRx = _SvcQsaalStatRsRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 24),
    _SvcQsaalStatRsRx_Type()
)
svcQsaalStatRsRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatRsRx.setStatus("mandatory")


class _SvcQsaalStatRsakRx_Type(Integer32):
    """Custom type svcQsaalStatRsakRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatRsakRx_Type.__name__ = "Integer32"
_SvcQsaalStatRsakRx_Object = MibTableColumn
svcQsaalStatRsakRx = _SvcQsaalStatRsakRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 25),
    _SvcQsaalStatRsakRx_Type()
)
svcQsaalStatRsakRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatRsakRx.setStatus("mandatory")


class _SvcQsaalStatSdRx_Type(Integer32):
    """Custom type svcQsaalStatSdRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatSdRx_Type.__name__ = "Integer32"
_SvcQsaalStatSdRx_Object = MibTableColumn
svcQsaalStatSdRx = _SvcQsaalStatSdRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 26),
    _SvcQsaalStatSdRx_Type()
)
svcQsaalStatSdRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatSdRx.setStatus("mandatory")


class _SvcQsaalStatSdpRx_Type(Integer32):
    """Custom type svcQsaalStatSdpRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatSdpRx_Type.__name__ = "Integer32"
_SvcQsaalStatSdpRx_Object = MibTableColumn
svcQsaalStatSdpRx = _SvcQsaalStatSdpRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 27),
    _SvcQsaalStatSdpRx_Type()
)
svcQsaalStatSdpRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatSdpRx.setStatus("mandatory")


class _SvcQsaalStatPollRx_Type(Integer32):
    """Custom type svcQsaalStatPollRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatPollRx_Type.__name__ = "Integer32"
_SvcQsaalStatPollRx_Object = MibTableColumn
svcQsaalStatPollRx = _SvcQsaalStatPollRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 28),
    _SvcQsaalStatPollRx_Type()
)
svcQsaalStatPollRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatPollRx.setStatus("mandatory")


class _SvcQsaalStatStatRx_Type(Integer32):
    """Custom type svcQsaalStatStatRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatStatRx_Type.__name__ = "Integer32"
_SvcQsaalStatStatRx_Object = MibTableColumn
svcQsaalStatStatRx = _SvcQsaalStatStatRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 29),
    _SvcQsaalStatStatRx_Type()
)
svcQsaalStatStatRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatStatRx.setStatus("mandatory")


class _SvcQsaalStatUstatRx_Type(Integer32):
    """Custom type svcQsaalStatUstatRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatUstatRx_Type.__name__ = "Integer32"
_SvcQsaalStatUstatRx_Object = MibTableColumn
svcQsaalStatUstatRx = _SvcQsaalStatUstatRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 30),
    _SvcQsaalStatUstatRx_Type()
)
svcQsaalStatUstatRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatUstatRx.setStatus("mandatory")


class _SvcQsaalStatUdRx_Type(Integer32):
    """Custom type svcQsaalStatUdRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatUdRx_Type.__name__ = "Integer32"
_SvcQsaalStatUdRx_Object = MibTableColumn
svcQsaalStatUdRx = _SvcQsaalStatUdRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 31),
    _SvcQsaalStatUdRx_Type()
)
svcQsaalStatUdRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatUdRx.setStatus("mandatory")


class _SvcQsaalStatMdRx_Type(Integer32):
    """Custom type svcQsaalStatMdRx based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777215),
    )


_SvcQsaalStatMdRx_Type.__name__ = "Integer32"
_SvcQsaalStatMdRx_Object = MibTableColumn
svcQsaalStatMdRx = _SvcQsaalStatMdRx_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 32),
    _SvcQsaalStatMdRx_Type()
)
svcQsaalStatMdRx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcQsaalStatMdRx.setStatus("mandatory")


class _SvcQsaalStatClr_Type(Integer32):
    """Custom type svcQsaalStatClr based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_SvcQsaalStatClr_Type.__name__ = "Integer32"
_SvcQsaalStatClr_Object = MibTableColumn
svcQsaalStatClr = _SvcQsaalStatClr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 10, 1, 33),
    _SvcQsaalStatClr_Type()
)
svcQsaalStatClr.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcQsaalStatClr.setStatus("mandatory")


class _SvcQsaalTmrPoll_Type(Integer32):
    """Custom type svcQsaalTmrPoll based on Integer32"""
    defaultValue = 8


_SvcQsaalTmrPoll_Object = MibScalar
svcQsaalTmrPoll = _SvcQsaalTmrPoll_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 11),
    _SvcQsaalTmrPoll_Type()
)
svcQsaalTmrPoll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcQsaalTmrPoll.setStatus("mandatory")


class _SvcQsaalTmrKeepAlive_Type(Integer32):
    """Custom type svcQsaalTmrKeepAlive based on Integer32"""
    defaultValue = 20


_SvcQsaalTmrKeepAlive_Object = MibScalar
svcQsaalTmrKeepAlive = _SvcQsaalTmrKeepAlive_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 12),
    _SvcQsaalTmrKeepAlive_Type()
)
svcQsaalTmrKeepAlive.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcQsaalTmrKeepAlive.setStatus("mandatory")


class _SvcQsaalTmrNoResponse_Type(Integer32):
    """Custom type svcQsaalTmrNoResponse based on Integer32"""
    defaultValue = 100


_SvcQsaalTmrNoResponse_Object = MibScalar
svcQsaalTmrNoResponse = _SvcQsaalTmrNoResponse_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 13),
    _SvcQsaalTmrNoResponse_Type()
)
svcQsaalTmrNoResponse.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcQsaalTmrNoResponse.setStatus("mandatory")


class _SvcQsaalTmrCC_Type(Integer32):
    """Custom type svcQsaalTmrCC based on Integer32"""
    defaultValue = 20


_SvcQsaalTmrCC_Object = MibScalar
svcQsaalTmrCC = _SvcQsaalTmrCC_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 14),
    _SvcQsaalTmrCC_Type()
)
svcQsaalTmrCC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcQsaalTmrCC.setStatus("mandatory")


class _SvcQsaalMaxPD_Type(Integer32):
    """Custom type svcQsaalMaxPD based on Integer32"""
    defaultValue = 15


_SvcQsaalMaxPD_Object = MibScalar
svcQsaalMaxPD = _SvcQsaalMaxPD_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 15),
    _SvcQsaalMaxPD_Type()
)
svcQsaalMaxPD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcQsaalMaxPD.setStatus("mandatory")


class _SvcQ93bTmrT303_Type(Integer32):
    """Custom type svcQ93bTmrT303 based on Integer32"""
    defaultValue = 40


_SvcQ93bTmrT303_Object = MibScalar
svcQ93bTmrT303 = _SvcQ93bTmrT303_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 16),
    _SvcQ93bTmrT303_Type()
)
svcQ93bTmrT303.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcQ93bTmrT303.setStatus("mandatory")


class _SvcQ93bTmrT310_Type(Integer32):
    """Custom type svcQ93bTmrT310 based on Integer32"""
    defaultValue = 200


_SvcQ93bTmrT310_Object = MibScalar
svcQ93bTmrT310 = _SvcQ93bTmrT310_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 17),
    _SvcQ93bTmrT310_Type()
)
svcQ93bTmrT310.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcQ93bTmrT310.setStatus("mandatory")


class _SvcQ93bTmrT308_Type(Integer32):
    """Custom type svcQ93bTmrT308 based on Integer32"""
    defaultValue = 300


_SvcQ93bTmrT308_Object = MibScalar
svcQ93bTmrT308 = _SvcQ93bTmrT308_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 18),
    _SvcQ93bTmrT308_Type()
)
svcQ93bTmrT308.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcQ93bTmrT308.setStatus("mandatory")


class _SvcQ93bTmrT309_Type(Integer32):
    """Custom type svcQ93bTmrT309 based on Integer32"""
    defaultValue = 150


_SvcQ93bTmrT309_Object = MibScalar
svcQ93bTmrT309 = _SvcQ93bTmrT309_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 19),
    _SvcQ93bTmrT309_Type()
)
svcQ93bTmrT309.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcQ93bTmrT309.setStatus("mandatory")


class _MaxOutstanding_Type(Integer32):
    """Custom type maxOutstanding based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_MaxOutstanding_Type.__name__ = "Integer32"
_MaxOutstanding_Object = MibScalar
maxOutstanding = _MaxOutstanding_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 20),
    _MaxOutstanding_Type()
)
maxOutstanding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    maxOutstanding.setStatus("mandatory")


class _SvcLoadRoute_Type(Integer32):
    """Custom type svcLoadRoute based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("both", 1),
          ("dtl-bin", 4),
          ("none", 2),
          ("rte-table", 3))
    )


_SvcLoadRoute_Type.__name__ = "Integer32"
_SvcLoadRoute_Object = MibScalar
svcLoadRoute = _SvcLoadRoute_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 21),
    _SvcLoadRoute_Type()
)
svcLoadRoute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcLoadRoute.setStatus("mandatory")


class _SvcHalfConTimer_Type(Integer32):
    """Custom type svcHalfConTimer based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3000),
    )


_SvcHalfConTimer_Type.__name__ = "Integer32"
_SvcHalfConTimer_Object = MibScalar
svcHalfConTimer = _SvcHalfConTimer_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 22),
    _SvcHalfConTimer_Type()
)
svcHalfConTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcHalfConTimer.setStatus("mandatory")


class _SvcHalfConCnt_Type(Integer32):
    """Custom type svcHalfConCnt based on Integer32"""
    defaultValue = 0


_SvcHalfConCnt_Object = MibScalar
svcHalfConCnt = _SvcHalfConCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 23),
    _SvcHalfConCnt_Type()
)
svcHalfConCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcHalfConCnt.setStatus("mandatory")


class _SvcQ93bTmrT398_Type(Integer32):
    """Custom type svcQ93bTmrT398 based on Integer32"""
    defaultValue = 40


_SvcQ93bTmrT398_Object = MibScalar
svcQ93bTmrT398 = _SvcQ93bTmrT398_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 24),
    _SvcQ93bTmrT398_Type()
)
svcQ93bTmrT398.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcQ93bTmrT398.setStatus("mandatory")


class _SvcQ93bTmrT399_Type(Integer32):
    """Custom type svcQ93bTmrT399 based on Integer32"""
    defaultValue = 140


_SvcQ93bTmrT399_Object = MibScalar
svcQ93bTmrT399 = _SvcQ93bTmrT399_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 25),
    _SvcQ93bTmrT399_Type()
)
svcQ93bTmrT399.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcQ93bTmrT399.setStatus("mandatory")


class _SvcRetryPeriod_Type(Integer32):
    """Custom type svcRetryPeriod based on Integer32"""
    defaultValue = 180

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(15, 180),
    )


_SvcRetryPeriod_Type.__name__ = "Integer32"
_SvcRetryPeriod_Object = MibScalar
svcRetryPeriod = _SvcRetryPeriod_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 26),
    _SvcRetryPeriod_Type()
)
svcRetryPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcRetryPeriod.setStatus("mandatory")
_SvcCellRateTable_Object = MibTable
svcCellRateTable = _SvcCellRateTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 27)
)
if mibBuilder.loadTexts:
    svcCellRateTable.setStatus("mandatory")
_SvcCellRateEntry_Object = MibTableRow
svcCellRateEntry = _SvcCellRateEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 27, 1)
)
svcCellRateEntry.setIndexNames(
    (0, "DV2-MIB", "svcCRLinkNo"),
)
if mibBuilder.loadTexts:
    svcCellRateEntry.setStatus("mandatory")


class _SvcCRLinkNo_Type(Integer32):
    """Custom type svcCRLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_SvcCRLinkNo_Type.__name__ = "Integer32"
_SvcCRLinkNo_Object = MibTableColumn
svcCRLinkNo = _SvcCRLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 27, 1, 1),
    _SvcCRLinkNo_Type()
)
svcCRLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcCRLinkNo.setStatus("mandatory")


class _SvcPCRCLP01Max_Type(Integer32):
    """Custom type svcPCRCLP01Max based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777216),
    )


_SvcPCRCLP01Max_Type.__name__ = "Integer32"
_SvcPCRCLP01Max_Object = MibTableColumn
svcPCRCLP01Max = _SvcPCRCLP01Max_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 27, 1, 2),
    _SvcPCRCLP01Max_Type()
)
svcPCRCLP01Max.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcPCRCLP01Max.setStatus("mandatory")


class _SvcSCRMax_Type(Integer32):
    """Custom type svcSCRMax based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777216),
    )


_SvcSCRMax_Type.__name__ = "Integer32"
_SvcSCRMax_Object = MibTableColumn
svcSCRMax = _SvcSCRMax_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 27, 1, 3),
    _SvcSCRMax_Type()
)
svcSCRMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcSCRMax.setStatus("mandatory")


class _SvcMBSMax_Type(Integer32):
    """Custom type svcMBSMax based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16777216),
    )


_SvcMBSMax_Type.__name__ = "Integer32"
_SvcMBSMax_Object = MibTableColumn
svcMBSMax = _SvcMBSMax_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 27, 1, 4),
    _SvcMBSMax_Type()
)
svcMBSMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcMBSMax.setStatus("mandatory")
_SvcTrafficTable_Object = MibTable
svcTrafficTable = _SvcTrafficTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28)
)
if mibBuilder.loadTexts:
    svcTrafficTable.setStatus("mandatory")
_SvcTrafficEntry_Object = MibTableRow
svcTrafficEntry = _SvcTrafficEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28, 1)
)
svcTrafficEntry.setIndexNames(
    (0, "DV2-MIB", "svcTLinkNo"),
)
if mibBuilder.loadTexts:
    svcTrafficEntry.setStatus("mandatory")


class _SvcTLinkNo_Type(Integer32):
    """Custom type svcTLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_SvcTLinkNo_Type.__name__ = "Integer32"
_SvcTLinkNo_Object = MibTableColumn
svcTLinkNo = _SvcTLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28, 1, 1),
    _SvcTLinkNo_Type()
)
svcTLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    svcTLinkNo.setStatus("mandatory")


class _SvcCBRallowed_Type(Integer32):
    """Custom type svcCBRallowed based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SvcCBRallowed_Type.__name__ = "Integer32"
_SvcCBRallowed_Object = MibTableColumn
svcCBRallowed = _SvcCBRallowed_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28, 1, 2),
    _SvcCBRallowed_Type()
)
svcCBRallowed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcCBRallowed.setStatus("mandatory")


class _SvcVBRHallowed_Type(Integer32):
    """Custom type svcVBRHallowed based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SvcVBRHallowed_Type.__name__ = "Integer32"
_SvcVBRHallowed_Object = MibTableColumn
svcVBRHallowed = _SvcVBRHallowed_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28, 1, 3),
    _SvcVBRHallowed_Type()
)
svcVBRHallowed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcVBRHallowed.setStatus("mandatory")


class _SvcVBRMallowed_Type(Integer32):
    """Custom type svcVBRMallowed based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SvcVBRMallowed_Type.__name__ = "Integer32"
_SvcVBRMallowed_Object = MibTableColumn
svcVBRMallowed = _SvcVBRMallowed_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28, 1, 4),
    _SvcVBRMallowed_Type()
)
svcVBRMallowed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcVBRMallowed.setStatus("mandatory")


class _SvcVBRLUBRallowed_Type(Integer32):
    """Custom type svcVBRLUBRallowed based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SvcVBRLUBRallowed_Type.__name__ = "Integer32"
_SvcVBRLUBRallowed_Object = MibTableColumn
svcVBRLUBRallowed = _SvcVBRLUBRallowed_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28, 1, 5),
    _SvcVBRLUBRallowed_Type()
)
svcVBRLUBRallowed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcVBRLUBRallowed.setStatus("mandatory")


class _SvcVBRLUBRsubtractpercent_Type(Integer32):
    """Custom type svcVBRLUBRsubtractpercent based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 100),
    )


_SvcVBRLUBRsubtractpercent_Type.__name__ = "Integer32"
_SvcVBRLUBRsubtractpercent_Object = MibTableColumn
svcVBRLUBRsubtractpercent = _SvcVBRLUBRsubtractpercent_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 18, 28, 1, 6),
    _SvcVBRLUBRsubtractpercent_Type()
)
svcVBRLUBRsubtractpercent.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    svcVBRLUBRsubtractpercent.setStatus("mandatory")
_Dv2CE_ObjectIdentity = ObjectIdentity
dv2CE = _Dv2CE_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19)
)
_CeTable_Object = MibTable
ceTable = _CeTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1)
)
if mibBuilder.loadTexts:
    ceTable.setStatus("mandatory")
_CeEntry_Object = MibTableRow
ceEntry = _CeEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1)
)
ceEntry.setIndexNames(
    (0, "DV2-MIB", "ceLinkNo"),
)
if mibBuilder.loadTexts:
    ceEntry.setStatus("mandatory")


class _CeLinkNo_Type(Integer32):
    """Custom type ceLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 127),
    )


_CeLinkNo_Type.__name__ = "Integer32"
_CeLinkNo_Object = MibTableColumn
ceLinkNo = _CeLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 1),
    _CeLinkNo_Type()
)
ceLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceLinkNo.setStatus("mandatory")


class _CeEnable_Type(Integer32):
    """Custom type ceEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("restart", 3),
          ("yes", 1))
    )


_CeEnable_Type.__name__ = "Integer32"
_CeEnable_Object = MibTableColumn
ceEnable = _CeEnable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 2),
    _CeEnable_Type()
)
ceEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ceEnable.setStatus("mandatory")


class _CeMode_Type(Integer32):
    """Custom type ceMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("adaptive", 2),
          ("none", 1),
          ("srts", 3))
    )


_CeMode_Type.__name__ = "Integer32"
_CeMode_Object = MibTableColumn
ceMode = _CeMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 3),
    _CeMode_Type()
)
ceMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ceMode.setStatus("mandatory")


class _CePriority_Type(Integer32):
    """Custom type cePriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("high", 1),
          ("low", 2))
    )


_CePriority_Type.__name__ = "Integer32"
_CePriority_Object = MibTableColumn
cePriority = _CePriority_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 4),
    _CePriority_Type()
)
cePriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cePriority.setStatus("mandatory")


class _CePvcValid_Type(Integer32):
    """Custom type cePvcValid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_CePvcValid_Type.__name__ = "Integer32"
_CePvcValid_Object = MibTableColumn
cePvcValid = _CePvcValid_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 5),
    _CePvcValid_Type()
)
cePvcValid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cePvcValid.setStatus("mandatory")


class _CeDstSlot_Type(Integer32):
    """Custom type ceDstSlot based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_CeDstSlot_Type.__name__ = "Integer32"
_CeDstSlot_Object = MibTableColumn
ceDstSlot = _CeDstSlot_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 6),
    _CeDstSlot_Type()
)
ceDstSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceDstSlot.setStatus("mandatory")


class _CeDstLink_Type(Integer32):
    """Custom type ceDstLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              7)
        )
    )
    namedValues = NamedValues(
        *(("link0", 1),
          ("link1", 2),
          ("link2", 3),
          ("link3", 4),
          ("multicast", 7))
    )


_CeDstLink_Type.__name__ = "Integer32"
_CeDstLink_Object = MibTableColumn
ceDstLink = _CeDstLink_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 7),
    _CeDstLink_Type()
)
ceDstLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceDstLink.setStatus("mandatory")
_CeDstVpi_Type = VirtualPathIdentifier
_CeDstVpi_Object = MibTableColumn
ceDstVpi = _CeDstVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 8),
    _CeDstVpi_Type()
)
ceDstVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceDstVpi.setStatus("mandatory")
_CeDstVci_Type = VirtualCircuitIdentifier
_CeDstVci_Object = MibTableColumn
ceDstVci = _CeDstVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 9),
    _CeDstVci_Type()
)
ceDstVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceDstVci.setStatus("mandatory")


class _CeCDV_Type(Integer32):
    """Custom type ceCDV based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 31),
    )


_CeCDV_Type.__name__ = "Integer32"
_CeCDV_Object = MibTableColumn
ceCDV = _CeCDV_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 10),
    _CeCDV_Type()
)
ceCDV.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ceCDV.setStatus("mandatory")


class _CeCDVMax_Type(Integer32):
    """Custom type ceCDVMax based on Integer32"""
    defaultValue = 8

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 62),
    )


_CeCDVMax_Type.__name__ = "Integer32"
_CeCDVMax_Object = MibTableColumn
ceCDVMax = _CeCDVMax_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 11),
    _CeCDVMax_Type()
)
ceCDVMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ceCDVMax.setStatus("mandatory")


class _CeMulticast_Type(Integer32):
    """Custom type ceMulticast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_CeMulticast_Type.__name__ = "Integer32"
_CeMulticast_Object = MibTableColumn
ceMulticast = _CeMulticast_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 24),
    _CeMulticast_Type()
)
ceMulticast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceMulticast.setStatus("mandatory")


class _CeXhInt_Type(Integer32):
    """Custom type ceXhInt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("bi-leaf", 7),
          ("bi-root", 4),
          ("inactive", 1),
          ("point-to-point", 2),
          ("uni-leaf", 6),
          ("uni-root", 3),
          ("uni-rt-and-leaf", 5),
          ("unknown", 8))
    )


_CeXhInt_Type.__name__ = "Integer32"
_CeXhInt_Object = MibTableColumn
ceXhInt = _CeXhInt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 1, 1, 25),
    _CeXhInt_Type()
)
ceXhInt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceXhInt.setStatus("mandatory")
_CeStatTable_Object = MibTable
ceStatTable = _CeStatTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2)
)
if mibBuilder.loadTexts:
    ceStatTable.setStatus("mandatory")
_CeStatEntry_Object = MibTableRow
ceStatEntry = _CeStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1)
)
ceStatEntry.setIndexNames(
    (0, "DV2-MIB", "ceStatPortNo"),
)
if mibBuilder.loadTexts:
    ceStatEntry.setStatus("mandatory")


class _CeStatPortNo_Type(Integer32):
    """Custom type ceStatPortNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_CeStatPortNo_Type.__name__ = "Integer32"
_CeStatPortNo_Object = MibTableColumn
ceStatPortNo = _CeStatPortNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 1),
    _CeStatPortNo_Type()
)
ceStatPortNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceStatPortNo.setStatus("mandatory")


class _CeStatReset_Type(Integer32):
    """Custom type ceStatReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_CeStatReset_Type.__name__ = "Integer32"
_CeStatReset_Object = MibTableColumn
ceStatReset = _CeStatReset_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 2),
    _CeStatReset_Type()
)
ceStatReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ceStatReset.setStatus("mandatory")


class _CeStatTxState_Type(Integer32):
    """Custom type ceStatTxState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("fifokick", 5),
          ("fifostart", 3),
          ("idle", 1),
          ("narrowband", 6),
          ("operating", 7),
          ("start", 2),
          ("wideband", 4))
    )


_CeStatTxState_Type.__name__ = "Integer32"
_CeStatTxState_Object = MibTableColumn
ceStatTxState = _CeStatTxState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 3),
    _CeStatTxState_Type()
)
ceStatTxState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceStatTxState.setStatus("mandatory")


class _CeStatRxState_Type(Integer32):
    """Custom type ceStatRxState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ais", 2),
          ("idle", 1),
          ("operating", 3))
    )


_CeStatRxState_Type.__name__ = "Integer32"
_CeStatRxState_Object = MibTableColumn
ceStatRxState = _CeStatRxState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 4),
    _CeStatRxState_Type()
)
ceStatRxState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceStatRxState.setStatus("mandatory")
_CeTxCnt_Type = Counter32
_CeTxCnt_Object = MibTableColumn
ceTxCnt = _CeTxCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 5),
    _CeTxCnt_Type()
)
ceTxCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceTxCnt.setStatus("mandatory")
_CeRxCnt_Type = Counter32
_CeRxCnt_Object = MibTableColumn
ceRxCnt = _CeRxCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 6),
    _CeRxCnt_Type()
)
ceRxCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceRxCnt.setStatus("mandatory")
_CeOflCnt_Type = Counter32
_CeOflCnt_Object = MibTableColumn
ceOflCnt = _CeOflCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 7),
    _CeOflCnt_Type()
)
ceOflCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceOflCnt.setStatus("mandatory")
_CeUflCnt_Type = Counter32
_CeUflCnt_Object = MibTableColumn
ceUflCnt = _CeUflCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 8),
    _CeUflCnt_Type()
)
ceUflCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceUflCnt.setStatus("mandatory")
_CeDisCnt_Type = Counter32
_CeDisCnt_Object = MibTableColumn
ceDisCnt = _CeDisCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 9),
    _CeDisCnt_Type()
)
ceDisCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceDisCnt.setStatus("mandatory")
_CeInvCnt_Type = Counter32
_CeInvCnt_Object = MibTableColumn
ceInvCnt = _CeInvCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 10),
    _CeInvCnt_Type()
)
ceInvCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceInvCnt.setStatus("mandatory")
_CeResCnt_Type = Counter32
_CeResCnt_Object = MibTableColumn
ceResCnt = _CeResCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 11),
    _CeResCnt_Type()
)
ceResCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceResCnt.setStatus("mandatory")
_CeFifoLvlCnt_Type = Counter32
_CeFifoLvlCnt_Object = MibTableColumn
ceFifoLvlCnt = _CeFifoLvlCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 2, 1, 12),
    _CeFifoLvlCnt_Type()
)
ceFifoLvlCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceFifoLvlCnt.setStatus("mandatory")


class _CePriVal_Type(Integer32):
    """Custom type cePriVal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_CePriVal_Type.__name__ = "Integer32"
_CePriVal_Object = MibScalar
cePriVal = _CePriVal_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 21),
    _CePriVal_Type()
)
cePriVal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cePriVal.setStatus("mandatory")


class _CeSecVal_Type(Integer32):
    """Custom type ceSecVal based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_CeSecVal_Type.__name__ = "Integer32"
_CeSecVal_Object = MibScalar
ceSecVal = _CeSecVal_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 22),
    _CeSecVal_Type()
)
ceSecVal.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceSecVal.setStatus("mandatory")


class _CeClkSel_Type(Integer32):
    """Custom type ceClkSel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("primary", 1),
          ("secondary", 2))
    )


_CeClkSel_Type.__name__ = "Integer32"
_CeClkSel_Object = MibScalar
ceClkSel = _CeClkSel_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 23),
    _CeClkSel_Type()
)
ceClkSel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceClkSel.setStatus("mandatory")


class _CeClkInp_Type(Integer32):
    """Custom type ceClkInp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_CeClkInp_Type.__name__ = "Integer32"
_CeClkInp_Object = MibScalar
ceClkInp = _CeClkInp_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 24),
    _CeClkInp_Type()
)
ceClkInp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceClkInp.setStatus("mandatory")


class _CeStr3_Type(Integer32):
    """Custom type ceStr3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_CeStr3_Type.__name__ = "Integer32"
_CeStr3_Object = MibScalar
ceStr3 = _CeStr3_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 19, 25),
    _CeStr3_Type()
)
ceStr3.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ceStr3.setStatus("mandatory")
_Dv2VE_ObjectIdentity = ObjectIdentity
dv2VE = _Dv2VE_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20)
)
_VeTable_Object = MibTable
veTable = _VeTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1)
)
if mibBuilder.loadTexts:
    veTable.setStatus("mandatory")
_VeEntry_Object = MibTableRow
veEntry = _VeEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1)
)
veEntry.setIndexNames(
    (0, "DV2-MIB", "veLinkNo"),
)
if mibBuilder.loadTexts:
    veEntry.setStatus("mandatory")


class _VeLinkNo_Type(Integer32):
    """Custom type veLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 127),
    )


_VeLinkNo_Type.__name__ = "Integer32"
_VeLinkNo_Object = MibTableColumn
veLinkNo = _VeLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 1),
    _VeLinkNo_Type()
)
veLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    veLinkNo.setStatus("mandatory")


class _VeEnable_Type(Integer32):
    """Custom type veEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("restart", 3),
          ("yes", 1))
    )


_VeEnable_Type.__name__ = "Integer32"
_VeEnable_Object = MibTableColumn
veEnable = _VeEnable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 2),
    _VeEnable_Type()
)
veEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    veEnable.setStatus("mandatory")


class _VeMode_Type(Integer32):
    """Custom type veMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            4
        )
    )
    namedValues = NamedValues(
        ("video", 4)
    )


_VeMode_Type.__name__ = "Integer32"
_VeMode_Object = MibTableColumn
veMode = _VeMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 3),
    _VeMode_Type()
)
veMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    veMode.setStatus("mandatory")


class _VePriority_Type(Integer32):
    """Custom type vePriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("high", 1),
          ("low", 2))
    )


_VePriority_Type.__name__ = "Integer32"
_VePriority_Object = MibTableColumn
vePriority = _VePriority_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 4),
    _VePriority_Type()
)
vePriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vePriority.setStatus("mandatory")


class _VePvcValid_Type(Integer32):
    """Custom type vePvcValid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_VePvcValid_Type.__name__ = "Integer32"
_VePvcValid_Object = MibTableColumn
vePvcValid = _VePvcValid_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 5),
    _VePvcValid_Type()
)
vePvcValid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vePvcValid.setStatus("mandatory")


class _VeDstSlot_Type(Integer32):
    """Custom type veDstSlot based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_VeDstSlot_Type.__name__ = "Integer32"
_VeDstSlot_Object = MibTableColumn
veDstSlot = _VeDstSlot_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 6),
    _VeDstSlot_Type()
)
veDstSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    veDstSlot.setStatus("mandatory")


class _VeDstLink_Type(Integer32):
    """Custom type veDstLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              7)
        )
    )
    namedValues = NamedValues(
        *(("link0", 1),
          ("link1", 2),
          ("link2", 3),
          ("link3", 4),
          ("multicast", 7))
    )


_VeDstLink_Type.__name__ = "Integer32"
_VeDstLink_Object = MibTableColumn
veDstLink = _VeDstLink_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 7),
    _VeDstLink_Type()
)
veDstLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    veDstLink.setStatus("mandatory")
_VeDstVpi_Type = VirtualPathIdentifier
_VeDstVpi_Object = MibTableColumn
veDstVpi = _VeDstVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 8),
    _VeDstVpi_Type()
)
veDstVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    veDstVpi.setStatus("mandatory")
_VeDstVci_Type = VirtualCircuitIdentifier
_VeDstVci_Object = MibTableColumn
veDstVci = _VeDstVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 9),
    _VeDstVci_Type()
)
veDstVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    veDstVci.setStatus("mandatory")


class _VeCDV_Type(Integer32):
    """Custom type veCDV based on Integer32"""
    defaultValue = 31

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 31),
    )


_VeCDV_Type.__name__ = "Integer32"
_VeCDV_Object = MibTableColumn
veCDV = _VeCDV_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 10),
    _VeCDV_Type()
)
veCDV.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    veCDV.setStatus("mandatory")


class _VeCDVMax_Type(Integer32):
    """Custom type veCDVMax based on Integer32"""
    defaultValue = 62

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 62),
    )


_VeCDVMax_Type.__name__ = "Integer32"
_VeCDVMax_Object = MibTableColumn
veCDVMax = _VeCDVMax_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 11),
    _VeCDVMax_Type()
)
veCDVMax.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    veCDVMax.setStatus("mandatory")


class _VeMulticast_Type(Integer32):
    """Custom type veMulticast based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_VeMulticast_Type.__name__ = "Integer32"
_VeMulticast_Object = MibTableColumn
veMulticast = _VeMulticast_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 24),
    _VeMulticast_Type()
)
veMulticast.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    veMulticast.setStatus("mandatory")


class _VeXhInt_Type(Integer32):
    """Custom type veXhInt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("bi-leaf", 7),
          ("bi-root", 4),
          ("inactive", 1),
          ("point-to-point", 2),
          ("uni-leaf", 6),
          ("uni-root", 3),
          ("uni-rt-and-leaf", 5),
          ("unknown", 8))
    )


_VeXhInt_Type.__name__ = "Integer32"
_VeXhInt_Object = MibTableColumn
veXhInt = _VeXhInt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 1, 1, 25),
    _VeXhInt_Type()
)
veXhInt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    veXhInt.setStatus("mandatory")
_VeStatTable_Object = MibTable
veStatTable = _VeStatTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2)
)
if mibBuilder.loadTexts:
    veStatTable.setStatus("mandatory")
_VeStatEntry_Object = MibTableRow
veStatEntry = _VeStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1)
)
veStatEntry.setIndexNames(
    (0, "DV2-MIB", "veStatPortNo"),
)
if mibBuilder.loadTexts:
    veStatEntry.setStatus("mandatory")


class _VeStatPortNo_Type(Integer32):
    """Custom type veStatPortNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_VeStatPortNo_Type.__name__ = "Integer32"
_VeStatPortNo_Object = MibTableColumn
veStatPortNo = _VeStatPortNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 1),
    _VeStatPortNo_Type()
)
veStatPortNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    veStatPortNo.setStatus("mandatory")


class _VeStatReset_Type(Integer32):
    """Custom type veStatReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_VeStatReset_Type.__name__ = "Integer32"
_VeStatReset_Object = MibTableColumn
veStatReset = _VeStatReset_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 2),
    _VeStatReset_Type()
)
veStatReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    veStatReset.setStatus("mandatory")


class _VeStatTxState_Type(Integer32):
    """Custom type veStatTxState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("fifokick", 5),
          ("fifostart", 3),
          ("idle", 1),
          ("narrowband", 6),
          ("operating", 7),
          ("start", 2),
          ("wideband", 4))
    )


_VeStatTxState_Type.__name__ = "Integer32"
_VeStatTxState_Object = MibTableColumn
veStatTxState = _VeStatTxState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 3),
    _VeStatTxState_Type()
)
veStatTxState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    veStatTxState.setStatus("mandatory")


class _VeStatRxState_Type(Integer32):
    """Custom type veStatRxState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ais", 2),
          ("idle", 1),
          ("operating", 3))
    )


_VeStatRxState_Type.__name__ = "Integer32"
_VeStatRxState_Object = MibTableColumn
veStatRxState = _VeStatRxState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 4),
    _VeStatRxState_Type()
)
veStatRxState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    veStatRxState.setStatus("mandatory")
_VeTxCnt_Type = Counter32
_VeTxCnt_Object = MibTableColumn
veTxCnt = _VeTxCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 5),
    _VeTxCnt_Type()
)
veTxCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    veTxCnt.setStatus("mandatory")
_VeRxCnt_Type = Counter32
_VeRxCnt_Object = MibTableColumn
veRxCnt = _VeRxCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 6),
    _VeRxCnt_Type()
)
veRxCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    veRxCnt.setStatus("mandatory")
_VeOflCnt_Type = Counter32
_VeOflCnt_Object = MibTableColumn
veOflCnt = _VeOflCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 7),
    _VeOflCnt_Type()
)
veOflCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    veOflCnt.setStatus("mandatory")
_VeUflCnt_Type = Counter32
_VeUflCnt_Object = MibTableColumn
veUflCnt = _VeUflCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 8),
    _VeUflCnt_Type()
)
veUflCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    veUflCnt.setStatus("mandatory")
_VeDisCnt_Type = Counter32
_VeDisCnt_Object = MibTableColumn
veDisCnt = _VeDisCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 9),
    _VeDisCnt_Type()
)
veDisCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    veDisCnt.setStatus("mandatory")
_VeInvCnt_Type = Counter32
_VeInvCnt_Object = MibTableColumn
veInvCnt = _VeInvCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 10),
    _VeInvCnt_Type()
)
veInvCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    veInvCnt.setStatus("mandatory")
_VeResCnt_Type = Counter32
_VeResCnt_Object = MibTableColumn
veResCnt = _VeResCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 11),
    _VeResCnt_Type()
)
veResCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    veResCnt.setStatus("mandatory")
_VeFifoLvlCnt_Type = Counter32
_VeFifoLvlCnt_Object = MibTableColumn
veFifoLvlCnt = _VeFifoLvlCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 20, 2, 1, 12),
    _VeFifoLvlCnt_Type()
)
veFifoLvlCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    veFifoLvlCnt.setStatus("mandatory")
_Dv2SystemClocks_ObjectIdentity = ObjectIdentity
dv2SystemClocks = _Dv2SystemClocks_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21)
)


class _AutoRevert_Type(Integer32):
    """Custom type autoRevert based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_AutoRevert_Type.__name__ = "Integer32"
_AutoRevert_Object = MibScalar
autoRevert = _AutoRevert_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 1),
    _AutoRevert_Type()
)
autoRevert.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    autoRevert.setStatus("mandatory")


class _RevertTimer_Type(Integer32):
    """Custom type revertTimer based on Integer32"""
    defaultValue = 30

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 60),
    )


_RevertTimer_Type.__name__ = "Integer32"
_RevertTimer_Object = MibScalar
revertTimer = _RevertTimer_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 2),
    _RevertTimer_Type()
)
revertTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    revertTimer.setStatus("mandatory")


class _ForceRevert_Type(Integer32):
    """Custom type forceRevert based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_ForceRevert_Type.__name__ = "Integer32"
_ForceRevert_Object = MibScalar
forceRevert = _ForceRevert_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 3),
    _ForceRevert_Type()
)
forceRevert.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    forceRevert.setStatus("mandatory")


class _ForceSecondary_Type(Integer32):
    """Custom type forceSecondary based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_ForceSecondary_Type.__name__ = "Integer32"
_ForceSecondary_Object = MibScalar
forceSecondary = _ForceSecondary_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 4),
    _ForceSecondary_Type()
)
forceSecondary.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    forceSecondary.setStatus("mandatory")


class _AlarmStatus_Type(Integer32):
    """Custom type alarmStatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clear", 1),
          ("major", 3),
          ("minor", 2))
    )


_AlarmStatus_Type.__name__ = "Integer32"
_AlarmStatus_Object = MibScalar
alarmStatus = _AlarmStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 5),
    _AlarmStatus_Type()
)
alarmStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmStatus.setStatus("mandatory")


class _InService_Type(Integer32):
    """Custom type inService based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("pri-external", 5),
          ("pri-internal", 3),
          ("pri-line", 2),
          ("pri-plcp", 10),
          ("pri-stratum3", 4),
          ("sec-external", 9),
          ("sec-internal", 7),
          ("sec-line", 6),
          ("sec-plcp", 11),
          ("sec-stratum3", 8))
    )


_InService_Type.__name__ = "Integer32"
_InService_Object = MibScalar
inService = _InService_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 6),
    _InService_Type()
)
inService.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    inService.setStatus("mandatory")
_PrimaryClockTable_Object = MibTable
primaryClockTable = _PrimaryClockTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7)
)
if mibBuilder.loadTexts:
    primaryClockTable.setStatus("mandatory")
_PrimaryEntry_Object = MibTableRow
primaryEntry = _PrimaryEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1)
)
primaryEntry.setIndexNames(
    (0, "DV2-MIB", "pIndex"),
)
if mibBuilder.loadTexts:
    primaryEntry.setStatus("mandatory")
_PIndex_Type = Integer32
_PIndex_Object = MibTableColumn
pIndex = _PIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 1),
    _PIndex_Type()
)
pIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pIndex.setStatus("mandatory")


class _PValidSource_Type(Integer32):
    """Custom type pValidSource based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_PValidSource_Type.__name__ = "Integer32"
_PValidSource_Object = MibTableColumn
pValidSource = _PValidSource_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 2),
    _PValidSource_Type()
)
pValidSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pValidSource.setStatus("mandatory")


class _POnOffLine_Type(Integer32):
    """Custom type pOnOffLine based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_POnOffLine_Type.__name__ = "Integer32"
_POnOffLine_Object = MibTableColumn
pOnOffLine = _POnOffLine_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 3),
    _POnOffLine_Type()
)
pOnOffLine.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pOnOffLine.setStatus("mandatory")


class _PSlotNumber_Type(Integer32):
    """Custom type pSlotNumber based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_PSlotNumber_Type.__name__ = "Integer32"
_PSlotNumber_Object = MibTableColumn
pSlotNumber = _PSlotNumber_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 4),
    _PSlotNumber_Type()
)
pSlotNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pSlotNumber.setStatus("mandatory")


class _PSysRefSelect_Type(Integer32):
    """Custom type pSysRefSelect based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("link0", 1),
          ("link1", 2),
          ("link2", 3),
          ("link3", 4),
          ("local-oscillator", 5))
    )


_PSysRefSelect_Type.__name__ = "Integer32"
_PSysRefSelect_Object = MibTableColumn
pSysRefSelect = _PSysRefSelect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 5),
    _PSysRefSelect_Type()
)
pSysRefSelect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pSysRefSelect.setStatus("mandatory")


class _PActiveTimingSource_Type(Integer32):
    """Custom type pActiveTimingSource based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("internal", 2),
          ("line", 1),
          ("plcp", 3))
    )


_PActiveTimingSource_Type.__name__ = "Integer32"
_PActiveTimingSource_Object = MibTableColumn
pActiveTimingSource = _PActiveTimingSource_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 6),
    _PActiveTimingSource_Type()
)
pActiveTimingSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pActiveTimingSource.setStatus("mandatory")


class _PInputLineOk_Type(Integer32):
    """Custom type pInputLineOk based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_PInputLineOk_Type.__name__ = "Integer32"
_PInputLineOk_Object = MibTableColumn
pInputLineOk = _PInputLineOk_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 7),
    _PInputLineOk_Type()
)
pInputLineOk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pInputLineOk.setStatus("mandatory")


class _PSysRefTimingOk_Type(Integer32):
    """Custom type pSysRefTimingOk based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_PSysRefTimingOk_Type.__name__ = "Integer32"
_PSysRefTimingOk_Object = MibTableColumn
pSysRefTimingOk = _PSysRefTimingOk_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 7, 1, 8),
    _PSysRefTimingOk_Type()
)
pSysRefTimingOk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pSysRefTimingOk.setStatus("mandatory")
_SecondaryClockTable_Object = MibTable
secondaryClockTable = _SecondaryClockTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8)
)
if mibBuilder.loadTexts:
    secondaryClockTable.setStatus("mandatory")
_SecondaryEntry_Object = MibTableRow
secondaryEntry = _SecondaryEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1)
)
secondaryEntry.setIndexNames(
    (0, "DV2-MIB", "sIndex"),
)
if mibBuilder.loadTexts:
    secondaryEntry.setStatus("mandatory")
_SIndex_Type = Integer32
_SIndex_Object = MibTableColumn
sIndex = _SIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 1),
    _SIndex_Type()
)
sIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sIndex.setStatus("mandatory")


class _SValidSource_Type(Integer32):
    """Custom type sValidSource based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_SValidSource_Type.__name__ = "Integer32"
_SValidSource_Object = MibTableColumn
sValidSource = _SValidSource_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 2),
    _SValidSource_Type()
)
sValidSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sValidSource.setStatus("mandatory")


class _SOnOffLine_Type(Integer32):
    """Custom type sOnOffLine based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_SOnOffLine_Type.__name__ = "Integer32"
_SOnOffLine_Object = MibTableColumn
sOnOffLine = _SOnOffLine_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 3),
    _SOnOffLine_Type()
)
sOnOffLine.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sOnOffLine.setStatus("mandatory")


class _SSlotNumber_Type(Integer32):
    """Custom type sSlotNumber based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_SSlotNumber_Type.__name__ = "Integer32"
_SSlotNumber_Object = MibTableColumn
sSlotNumber = _SSlotNumber_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 4),
    _SSlotNumber_Type()
)
sSlotNumber.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sSlotNumber.setStatus("mandatory")


class _SSysRefSelect_Type(Integer32):
    """Custom type sSysRefSelect based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("link0", 1),
          ("link1", 2),
          ("link2", 3),
          ("link3", 4),
          ("local-oscillator", 5))
    )


_SSysRefSelect_Type.__name__ = "Integer32"
_SSysRefSelect_Object = MibTableColumn
sSysRefSelect = _SSysRefSelect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 5),
    _SSysRefSelect_Type()
)
sSysRefSelect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sSysRefSelect.setStatus("mandatory")


class _SActiveTimingSource_Type(Integer32):
    """Custom type sActiveTimingSource based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("internal", 2),
          ("line", 1),
          ("plcp", 3))
    )


_SActiveTimingSource_Type.__name__ = "Integer32"
_SActiveTimingSource_Object = MibTableColumn
sActiveTimingSource = _SActiveTimingSource_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 6),
    _SActiveTimingSource_Type()
)
sActiveTimingSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sActiveTimingSource.setStatus("mandatory")


class _SInputLineOk_Type(Integer32):
    """Custom type sInputLineOk based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_SInputLineOk_Type.__name__ = "Integer32"
_SInputLineOk_Object = MibTableColumn
sInputLineOk = _SInputLineOk_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 7),
    _SInputLineOk_Type()
)
sInputLineOk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sInputLineOk.setStatus("mandatory")


class _SSysRefTimingOk_Type(Integer32):
    """Custom type sSysRefTimingOk based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_SSysRefTimingOk_Type.__name__ = "Integer32"
_SSysRefTimingOk_Object = MibTableColumn
sSysRefTimingOk = _SSysRefTimingOk_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 8, 1, 8),
    _SSysRefTimingOk_Type()
)
sSysRefTimingOk.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sSysRefTimingOk.setStatus("mandatory")


class _Str3Configured_Type(Integer32):
    """Custom type str3Configured based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Str3Configured_Type.__name__ = "Integer32"
_Str3Configured_Object = MibScalar
str3Configured = _Str3Configured_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 9),
    _Str3Configured_Type()
)
str3Configured.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    str3Configured.setStatus("mandatory")
_PCATcontrolTable_Object = MibTable
pCATcontrolTable = _PCATcontrolTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10)
)
if mibBuilder.loadTexts:
    pCATcontrolTable.setStatus("mandatory")
_PCATcontrolEntry_Object = MibTableRow
pCATcontrolEntry = _PCATcontrolEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1)
)
pCATcontrolEntry.setIndexNames(
    (0, "DV2-MIB", "pccIndex"),
)
if mibBuilder.loadTexts:
    pCATcontrolEntry.setStatus("mandatory")
_PccIndex_Type = Integer32
_PccIndex_Object = MibTableColumn
pccIndex = _PccIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 1),
    _PccIndex_Type()
)
pccIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pccIndex.setStatus("mandatory")


class _Pccatlimtype_Type(Integer32):
    """Custom type pccatlimtype based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("e1", 3),
          ("none", 1),
          ("t1", 2))
    )


_Pccatlimtype_Type.__name__ = "Integer32"
_Pccatlimtype_Object = MibTableColumn
pccatlimtype = _Pccatlimtype_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 2),
    _Pccatlimtype_Type()
)
pccatlimtype.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pccatlimtype.setStatus("mandatory")


class _Pccatsendcode_Type(Integer32):
    """Custom type pccatsendcode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Pccatsendcode_Type.__name__ = "Integer32"
_Pccatsendcode_Object = MibTableColumn
pccatsendcode = _Pccatsendcode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 3),
    _Pccatsendcode_Type()
)
pccatsendcode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pccatsendcode.setStatus("mandatory")


class _Pccatactivate_Type(Integer32):
    """Custom type pccatactivate based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Pccatactivate_Type.__name__ = "Integer32"
_Pccatactivate_Object = MibTableColumn
pccatactivate = _Pccatactivate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 4),
    _Pccatactivate_Type()
)
pccatactivate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pccatactivate.setStatus("mandatory")


class _Pccatsendconfig_Type(Integer32):
    """Custom type pccatsendconfig based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Pccatsendconfig_Type.__name__ = "Integer32"
_Pccatsendconfig_Object = MibTableColumn
pccatsendconfig = _Pccatsendconfig_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 5),
    _Pccatsendconfig_Type()
)
pccatsendconfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pccatsendconfig.setStatus("mandatory")
_Pccatbytestransferred_Type = Integer32
_Pccatbytestransferred_Object = MibTableColumn
pccatbytestransferred = _Pccatbytestransferred_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 6),
    _Pccatbytestransferred_Type()
)
pccatbytestransferred.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pccatbytestransferred.setStatus("mandatory")


class _Pccatfilexferstat_Type(Integer32):
    """Custom type pccatfilexferstat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("aborted", 6),
          ("ack", 5),
          ("continue", 3),
          ("end", 4),
          ("error", 7),
          ("idle", 1),
          ("start", 2))
    )


_Pccatfilexferstat_Type.__name__ = "Integer32"
_Pccatfilexferstat_Object = MibTableColumn
pccatfilexferstat = _Pccatfilexferstat_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 7),
    _Pccatfilexferstat_Type()
)
pccatfilexferstat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pccatfilexferstat.setStatus("mandatory")


class _Pcatforcesecext_Type(Integer32):
    """Custom type pcatforcesecext based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Pcatforcesecext_Type.__name__ = "Integer32"
_Pcatforcesecext_Object = MibTableColumn
pcatforcesecext = _Pcatforcesecext_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 8),
    _Pcatforcesecext_Type()
)
pcatforcesecext.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pcatforcesecext.setStatus("mandatory")


class _Pcatforcesecstr3_Type(Integer32):
    """Custom type pcatforcesecstr3 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Pcatforcesecstr3_Type.__name__ = "Integer32"
_Pcatforcesecstr3_Object = MibTableColumn
pcatforcesecstr3 = _Pcatforcesecstr3_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 9),
    _Pcatforcesecstr3_Type()
)
pcatforcesecstr3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pcatforcesecstr3.setStatus("mandatory")


class _Pcatcommand_Type(Integer32):
    """Custom type pcatcommand based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("revert", 2))
    )


_Pcatcommand_Type.__name__ = "Integer32"
_Pcatcommand_Object = MibTableColumn
pcatcommand = _Pcatcommand_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 10),
    _Pcatcommand_Type()
)
pcatcommand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pcatcommand.setStatus("mandatory")


class _Pcatplaceholder1_Type(Integer32):
    """Custom type pcatplaceholder1 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("na", 1)
    )


_Pcatplaceholder1_Type.__name__ = "Integer32"
_Pcatplaceholder1_Object = MibTableColumn
pcatplaceholder1 = _Pcatplaceholder1_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 11),
    _Pcatplaceholder1_Type()
)
pcatplaceholder1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pcatplaceholder1.setStatus("mandatory")


class _Pcatplaceholder2_Type(Integer32):
    """Custom type pcatplaceholder2 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("na", 1)
    )


_Pcatplaceholder2_Type.__name__ = "Integer32"
_Pcatplaceholder2_Object = MibTableColumn
pcatplaceholder2 = _Pcatplaceholder2_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 12),
    _Pcatplaceholder2_Type()
)
pcatplaceholder2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pcatplaceholder2.setStatus("mandatory")


class _Pcconoffline_Type(Integer32):
    """Custom type pcconoffline based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("offline", 1),
          ("online", 2))
    )


_Pcconoffline_Type.__name__ = "Integer32"
_Pcconoffline_Object = MibTableColumn
pcconoffline = _Pcconoffline_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 10, 1, 13),
    _Pcconoffline_Type()
)
pcconoffline.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pcconoffline.setStatus("mandatory")
_SCATcontrolTable_Object = MibTable
sCATcontrolTable = _SCATcontrolTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11)
)
if mibBuilder.loadTexts:
    sCATcontrolTable.setStatus("mandatory")
_SCATcontrolEntry_Object = MibTableRow
sCATcontrolEntry = _SCATcontrolEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1)
)
sCATcontrolEntry.setIndexNames(
    (0, "DV2-MIB", "sccIndex"),
)
if mibBuilder.loadTexts:
    sCATcontrolEntry.setStatus("mandatory")
_SccIndex_Type = Integer32
_SccIndex_Object = MibTableColumn
sccIndex = _SccIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 1),
    _SccIndex_Type()
)
sccIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sccIndex.setStatus("mandatory")


class _Sccatlimtype_Type(Integer32):
    """Custom type sccatlimtype based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("e1", 3),
          ("none", 1),
          ("t1", 2))
    )


_Sccatlimtype_Type.__name__ = "Integer32"
_Sccatlimtype_Object = MibTableColumn
sccatlimtype = _Sccatlimtype_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 2),
    _Sccatlimtype_Type()
)
sccatlimtype.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sccatlimtype.setStatus("mandatory")


class _Sccatsendcode_Type(Integer32):
    """Custom type sccatsendcode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Sccatsendcode_Type.__name__ = "Integer32"
_Sccatsendcode_Object = MibTableColumn
sccatsendcode = _Sccatsendcode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 3),
    _Sccatsendcode_Type()
)
sccatsendcode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sccatsendcode.setStatus("mandatory")


class _Sccatactivate_Type(Integer32):
    """Custom type sccatactivate based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Sccatactivate_Type.__name__ = "Integer32"
_Sccatactivate_Object = MibTableColumn
sccatactivate = _Sccatactivate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 4),
    _Sccatactivate_Type()
)
sccatactivate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sccatactivate.setStatus("mandatory")


class _Sccatsendconfig_Type(Integer32):
    """Custom type sccatsendconfig based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Sccatsendconfig_Type.__name__ = "Integer32"
_Sccatsendconfig_Object = MibTableColumn
sccatsendconfig = _Sccatsendconfig_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 5),
    _Sccatsendconfig_Type()
)
sccatsendconfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sccatsendconfig.setStatus("mandatory")
_Sccatbytestransferred_Type = Integer32
_Sccatbytestransferred_Object = MibTableColumn
sccatbytestransferred = _Sccatbytestransferred_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 6),
    _Sccatbytestransferred_Type()
)
sccatbytestransferred.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sccatbytestransferred.setStatus("mandatory")


class _Sccatfilexferstat_Type(Integer32):
    """Custom type sccatfilexferstat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("aborted", 6),
          ("ack", 5),
          ("continue", 3),
          ("end", 4),
          ("error", 7),
          ("idle", 1),
          ("start", 2))
    )


_Sccatfilexferstat_Type.__name__ = "Integer32"
_Sccatfilexferstat_Object = MibTableColumn
sccatfilexferstat = _Sccatfilexferstat_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 7),
    _Sccatfilexferstat_Type()
)
sccatfilexferstat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sccatfilexferstat.setStatus("mandatory")


class _Scatcommand_Type(Integer32):
    """Custom type scatcommand based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("revert", 2))
    )


_Scatcommand_Type.__name__ = "Integer32"
_Scatcommand_Object = MibTableColumn
scatcommand = _Scatcommand_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 8),
    _Scatcommand_Type()
)
scatcommand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scatcommand.setStatus("mandatory")


class _Scatplaceholder1_Type(Integer32):
    """Custom type scatplaceholder1 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("na", 1)
    )


_Scatplaceholder1_Type.__name__ = "Integer32"
_Scatplaceholder1_Object = MibTableColumn
scatplaceholder1 = _Scatplaceholder1_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 9),
    _Scatplaceholder1_Type()
)
scatplaceholder1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scatplaceholder1.setStatus("mandatory")


class _Scatplaceholder2_Type(Integer32):
    """Custom type scatplaceholder2 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("na", 1)
    )


_Scatplaceholder2_Type.__name__ = "Integer32"
_Scatplaceholder2_Object = MibTableColumn
scatplaceholder2 = _Scatplaceholder2_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 10),
    _Scatplaceholder2_Type()
)
scatplaceholder2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scatplaceholder2.setStatus("mandatory")


class _Scconoffline_Type(Integer32):
    """Custom type scconoffline based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("offline", 1),
          ("online", 2))
    )


_Scconoffline_Type.__name__ = "Integer32"
_Scconoffline_Object = MibTableColumn
scconoffline = _Scconoffline_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 11, 1, 11),
    _Scconoffline_Type()
)
scconoffline.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scconoffline.setStatus("mandatory")
_PCATstatusTable_Object = MibTable
pCATstatusTable = _PCATstatusTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12)
)
if mibBuilder.loadTexts:
    pCATstatusTable.setStatus("mandatory")
_PCATstatusEntry_Object = MibTableRow
pCATstatusEntry = _PCATstatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1)
)
pCATstatusEntry.setIndexNames(
    (0, "DV2-MIB", "pscIndex"),
)
if mibBuilder.loadTexts:
    pCATstatusEntry.setStatus("mandatory")
_PscIndex_Type = Integer32
_PscIndex_Object = MibTableColumn
pscIndex = _PscIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 1),
    _PscIndex_Type()
)
pscIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pscIndex.setStatus("mandatory")


class _Pscatlimtype_Type(Integer32):
    """Custom type pscatlimtype based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("e1", 3),
          ("none", 1),
          ("t1", 2))
    )


_Pscatlimtype_Type.__name__ = "Integer32"
_Pscatlimtype_Object = MibTableColumn
pscatlimtype = _Pscatlimtype_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 2),
    _Pscatlimtype_Type()
)
pscatlimtype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pscatlimtype.setStatus("mandatory")
_PsCATFFrevision_Type = DisplayString
_PsCATFFrevision_Object = MibTableColumn
psCATFFrevision = _PsCATFFrevision_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 3),
    _PsCATFFrevision_Type()
)
psCATFFrevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psCATFFrevision.setStatus("mandatory")
_PsCATBootrevision_Type = DisplayString
_PsCATBootrevision_Object = MibTableColumn
psCATBootrevision = _PsCATBootrevision_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 4),
    _PsCATBootrevision_Type()
)
psCATBootrevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psCATBootrevision.setStatus("mandatory")


class _Pscatfilestatus_Type(Integer32):
    """Custom type pscatfilestatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 1),
          ("not-present", 2),
          ("present", 3))
    )


_Pscatfilestatus_Type.__name__ = "Integer32"
_Pscatfilestatus_Object = MibTableColumn
pscatfilestatus = _Pscatfilestatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 5),
    _Pscatfilestatus_Type()
)
pscatfilestatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pscatfilestatus.setStatus("mandatory")
_PsCATfilerevision_Type = DisplayString
_PsCATfilerevision_Object = MibTableColumn
psCATfilerevision = _PsCATfilerevision_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 6),
    _PsCATfilerevision_Type()
)
psCATfilerevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psCATfilerevision.setStatus("mandatory")
_PsCATHWrevision_Type = Integer32
_PsCATHWrevision_Object = MibTableColumn
psCATHWrevision = _PsCATHWrevision_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 7),
    _PsCATHWrevision_Type()
)
psCATHWrevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psCATHWrevision.setStatus("mandatory")


class _Pscatmode_Type(Integer32):
    """Custom type pscatmode based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("boot", 1),
          ("boot-in-dnld", 6),
          ("full-feature-in-dnld", 5),
          ("full-feature-offline", 2),
          ("full-feature-online", 7),
          ("no-card", 3),
          ("unknown", 4))
    )


_Pscatmode_Type.__name__ = "Integer32"
_Pscatmode_Object = MibTableColumn
pscatmode = _Pscatmode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 8),
    _Pscatmode_Type()
)
pscatmode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pscatmode.setStatus("mandatory")


class _Pscaterrorcode_Type(Integer32):
    """Custom type pscaterrorcode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("bad-config", 3),
          ("download-fail", 7),
          ("download-ok", 6),
          ("no-code", 4),
          ("no-config", 5),
          ("none", 1))
    )


_Pscaterrorcode_Type.__name__ = "Integer32"
_Pscaterrorcode_Object = MibTableColumn
pscaterrorcode = _Pscaterrorcode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 9),
    _Pscaterrorcode_Type()
)
pscaterrorcode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pscaterrorcode.setStatus("mandatory")


class _Pscatplaceholder1_Type(Integer32):
    """Custom type pscatplaceholder1 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("na", 1)
    )


_Pscatplaceholder1_Type.__name__ = "Integer32"
_Pscatplaceholder1_Object = MibTableColumn
pscatplaceholder1 = _Pscatplaceholder1_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 10),
    _Pscatplaceholder1_Type()
)
pscatplaceholder1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pscatplaceholder1.setStatus("mandatory")


class _Pscatplaceholder2_Type(Integer32):
    """Custom type pscatplaceholder2 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("na", 1)
    )


_Pscatplaceholder2_Type.__name__ = "Integer32"
_Pscatplaceholder2_Object = MibTableColumn
pscatplaceholder2 = _Pscatplaceholder2_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 12, 1, 11),
    _Pscatplaceholder2_Type()
)
pscatplaceholder2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pscatplaceholder2.setStatus("mandatory")
_SCATstatusTable_Object = MibTable
sCATstatusTable = _SCATstatusTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13)
)
if mibBuilder.loadTexts:
    sCATstatusTable.setStatus("mandatory")
_SCATstatusEntry_Object = MibTableRow
sCATstatusEntry = _SCATstatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1)
)
sCATstatusEntry.setIndexNames(
    (0, "DV2-MIB", "sscIndex"),
)
if mibBuilder.loadTexts:
    sCATstatusEntry.setStatus("mandatory")
_SscIndex_Type = Integer32
_SscIndex_Object = MibTableColumn
sscIndex = _SscIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 1),
    _SscIndex_Type()
)
sscIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sscIndex.setStatus("mandatory")


class _Sscatlimtype_Type(Integer32):
    """Custom type sscatlimtype based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("e1", 3),
          ("none", 1),
          ("t1", 2))
    )


_Sscatlimtype_Type.__name__ = "Integer32"
_Sscatlimtype_Object = MibTableColumn
sscatlimtype = _Sscatlimtype_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 2),
    _Sscatlimtype_Type()
)
sscatlimtype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sscatlimtype.setStatus("mandatory")
_SsCATFFrevision_Type = DisplayString
_SsCATFFrevision_Object = MibTableColumn
ssCATFFrevision = _SsCATFFrevision_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 3),
    _SsCATFFrevision_Type()
)
ssCATFFrevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ssCATFFrevision.setStatus("mandatory")
_SsCATBootrevision_Type = DisplayString
_SsCATBootrevision_Object = MibTableColumn
ssCATBootrevision = _SsCATBootrevision_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 4),
    _SsCATBootrevision_Type()
)
ssCATBootrevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ssCATBootrevision.setStatus("mandatory")


class _Sscatfilestatus_Type(Integer32):
    """Custom type sscatfilestatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 1),
          ("not-present", 2),
          ("present", 3))
    )


_Sscatfilestatus_Type.__name__ = "Integer32"
_Sscatfilestatus_Object = MibTableColumn
sscatfilestatus = _Sscatfilestatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 5),
    _Sscatfilestatus_Type()
)
sscatfilestatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sscatfilestatus.setStatus("mandatory")
_SsCATfilerevision_Type = DisplayString
_SsCATfilerevision_Object = MibTableColumn
ssCATfilerevision = _SsCATfilerevision_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 6),
    _SsCATfilerevision_Type()
)
ssCATfilerevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ssCATfilerevision.setStatus("mandatory")
_SsCATHWrevision_Type = Integer32
_SsCATHWrevision_Object = MibTableColumn
ssCATHWrevision = _SsCATHWrevision_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 7),
    _SsCATHWrevision_Type()
)
ssCATHWrevision.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ssCATHWrevision.setStatus("mandatory")


class _Sscatmode_Type(Integer32):
    """Custom type sscatmode based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("boot", 1),
          ("boot-in-dnld", 6),
          ("full-feature-in-dnld", 5),
          ("full-feature-offline", 2),
          ("full-feature-online", 7),
          ("no-card", 3),
          ("unknown", 4))
    )


_Sscatmode_Type.__name__ = "Integer32"
_Sscatmode_Object = MibTableColumn
sscatmode = _Sscatmode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 8),
    _Sscatmode_Type()
)
sscatmode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sscatmode.setStatus("mandatory")


class _Sscaterrorcode_Type(Integer32):
    """Custom type sscaterrorcode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("bad-config", 3),
          ("download-fail", 7),
          ("download-ok", 6),
          ("no-cat", 2),
          ("no-code", 4),
          ("no-config", 5),
          ("none", 1))
    )


_Sscaterrorcode_Type.__name__ = "Integer32"
_Sscaterrorcode_Object = MibTableColumn
sscaterrorcode = _Sscaterrorcode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 9),
    _Sscaterrorcode_Type()
)
sscaterrorcode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sscaterrorcode.setStatus("mandatory")


class _Sscatplaceholder1_Type(Integer32):
    """Custom type sscatplaceholder1 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("na", 1)
    )


_Sscatplaceholder1_Type.__name__ = "Integer32"
_Sscatplaceholder1_Object = MibTableColumn
sscatplaceholder1 = _Sscatplaceholder1_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 10),
    _Sscatplaceholder1_Type()
)
sscatplaceholder1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sscatplaceholder1.setStatus("mandatory")


class _Sscatplaceholder2_Type(Integer32):
    """Custom type sscatplaceholder2 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("na", 1)
    )


_Sscatplaceholder2_Type.__name__ = "Integer32"
_Sscatplaceholder2_Object = MibTableColumn
sscatplaceholder2 = _Sscatplaceholder2_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 13, 1, 11),
    _Sscatplaceholder2_Type()
)
sscatplaceholder2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sscatplaceholder2.setStatus("mandatory")
_PCATStratum3ConfigTable_Object = MibTable
pCATStratum3ConfigTable = _PCATStratum3ConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 14)
)
if mibBuilder.loadTexts:
    pCATStratum3ConfigTable.setStatus("mandatory")
_PCATStratum3ConfigEntry_Object = MibTableRow
pCATStratum3ConfigEntry = _PCATStratum3ConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 14, 1)
)
pCATStratum3ConfigEntry.setIndexNames(
    (0, "DV2-MIB", "ps3cIndex"),
)
if mibBuilder.loadTexts:
    pCATStratum3ConfigEntry.setStatus("mandatory")
_Ps3cIndex_Type = Integer32
_Ps3cIndex_Object = MibTableColumn
ps3cIndex = _Ps3cIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 14, 1, 1),
    _Ps3cIndex_Type()
)
ps3cIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ps3cIndex.setStatus("mandatory")


class _Pcatstr3listener_Type(Integer32):
    """Custom type pcatstr3listener based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("external", 1),
          ("line", 2))
    )


_Pcatstr3listener_Type.__name__ = "Integer32"
_Pcatstr3listener_Object = MibTableColumn
pcatstr3listener = _Pcatstr3listener_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 14, 1, 2),
    _Pcatstr3listener_Type()
)
pcatstr3listener.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pcatstr3listener.setStatus("mandatory")


class _Pcatstr3oscillator_Type(Integer32):
    """Custom type pcatstr3oscillator based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("external-or-line", 1),
          ("internal", 2))
    )


_Pcatstr3oscillator_Type.__name__ = "Integer32"
_Pcatstr3oscillator_Object = MibTableColumn
pcatstr3oscillator = _Pcatstr3oscillator_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 14, 1, 3),
    _Pcatstr3oscillator_Type()
)
pcatstr3oscillator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pcatstr3oscillator.setStatus("mandatory")


class _Pcatstr3forcesecondary_Type(Integer32):
    """Custom type pcatstr3forcesecondary based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Pcatstr3forcesecondary_Type.__name__ = "Integer32"
_Pcatstr3forcesecondary_Object = MibTableColumn
pcatstr3forcesecondary = _Pcatstr3forcesecondary_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 14, 1, 4),
    _Pcatstr3forcesecondary_Type()
)
pcatstr3forcesecondary.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pcatstr3forcesecondary.setStatus("mandatory")


class _Pcatstr3reconfigure_Type(Integer32):
    """Custom type pcatstr3reconfigure based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Pcatstr3reconfigure_Type.__name__ = "Integer32"
_Pcatstr3reconfigure_Object = MibTableColumn
pcatstr3reconfigure = _Pcatstr3reconfigure_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 14, 1, 5),
    _Pcatstr3reconfigure_Type()
)
pcatstr3reconfigure.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pcatstr3reconfigure.setStatus("mandatory")
_SCATStratum3ConfigTable_Object = MibTable
sCATStratum3ConfigTable = _SCATStratum3ConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 15)
)
if mibBuilder.loadTexts:
    sCATStratum3ConfigTable.setStatus("mandatory")
_SCATStratum3ConfigEntry_Object = MibTableRow
sCATStratum3ConfigEntry = _SCATStratum3ConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 15, 1)
)
sCATStratum3ConfigEntry.setIndexNames(
    (0, "DV2-MIB", "ss3cIndex"),
)
if mibBuilder.loadTexts:
    sCATStratum3ConfigEntry.setStatus("mandatory")
_Ss3cIndex_Type = Integer32
_Ss3cIndex_Object = MibTableColumn
ss3cIndex = _Ss3cIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 15, 1, 1),
    _Ss3cIndex_Type()
)
ss3cIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ss3cIndex.setStatus("mandatory")


class _Scatstr3listener_Type(Integer32):
    """Custom type scatstr3listener based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("external", 1),
          ("line", 2))
    )


_Scatstr3listener_Type.__name__ = "Integer32"
_Scatstr3listener_Object = MibTableColumn
scatstr3listener = _Scatstr3listener_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 15, 1, 2),
    _Scatstr3listener_Type()
)
scatstr3listener.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scatstr3listener.setStatus("mandatory")


class _Scatstr3oscillator_Type(Integer32):
    """Custom type scatstr3oscillator based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("external-or-line", 1),
          ("internal", 2))
    )


_Scatstr3oscillator_Type.__name__ = "Integer32"
_Scatstr3oscillator_Object = MibTableColumn
scatstr3oscillator = _Scatstr3oscillator_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 15, 1, 3),
    _Scatstr3oscillator_Type()
)
scatstr3oscillator.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scatstr3oscillator.setStatus("mandatory")


class _Scatstr3reconfigure_Type(Integer32):
    """Custom type scatstr3reconfigure based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Scatstr3reconfigure_Type.__name__ = "Integer32"
_Scatstr3reconfigure_Object = MibTableColumn
scatstr3reconfigure = _Scatstr3reconfigure_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 15, 1, 4),
    _Scatstr3reconfigure_Type()
)
scatstr3reconfigure.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    scatstr3reconfigure.setStatus("mandatory")
_PCATStratum3StatusTable_Object = MibTable
pCATStratum3StatusTable = _PCATStratum3StatusTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 16)
)
if mibBuilder.loadTexts:
    pCATStratum3StatusTable.setStatus("mandatory")
_PCATStratum3StatusEntry_Object = MibTableRow
pCATStratum3StatusEntry = _PCATStratum3StatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 16, 1)
)
pCATStratum3StatusEntry.setIndexNames(
    (0, "DV2-MIB", "ps3sIndex"),
)
if mibBuilder.loadTexts:
    pCATStratum3StatusEntry.setStatus("mandatory")
_Ps3sIndex_Type = Integer32
_Ps3sIndex_Object = MibTableColumn
ps3sIndex = _Ps3sIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 16, 1, 1),
    _Ps3sIndex_Type()
)
ps3sIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ps3sIndex.setStatus("mandatory")


class _Pcatstr3listenerstatus_Type(Integer32):
    """Custom type pcatstr3listenerstatus based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("listening-to-Primary", 1),
          ("listening-to-Secondary", 2),
          ("no-input", 3))
    )


_Pcatstr3listenerstatus_Type.__name__ = "Integer32"
_Pcatstr3listenerstatus_Object = MibTableColumn
pcatstr3listenerstatus = _Pcatstr3listenerstatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 16, 1, 2),
    _Pcatstr3listenerstatus_Type()
)
pcatstr3listenerstatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pcatstr3listenerstatus.setStatus("mandatory")


class _Pcatstr3driverstatus_Type(Integer32):
    """Custom type pcatstr3driverstatus based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled-offline", 2),
          ("enabled-online", 1),
          ("fault", 3))
    )


_Pcatstr3driverstatus_Type.__name__ = "Integer32"
_Pcatstr3driverstatus_Object = MibTableColumn
pcatstr3driverstatus = _Pcatstr3driverstatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 16, 1, 3),
    _Pcatstr3driverstatus_Type()
)
pcatstr3driverstatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pcatstr3driverstatus.setStatus("mandatory")


class _Pcatstr3oscstatus_Type(Integer32):
    """Custom type pcatstr3oscstatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("acquisition-narrow-band", 4),
          ("acquisition-wide-band", 2),
          ("holdover", 5),
          ("idle", 1),
          ("internal", 6),
          ("locked-in-range", 3))
    )


_Pcatstr3oscstatus_Type.__name__ = "Integer32"
_Pcatstr3oscstatus_Object = MibTableColumn
pcatstr3oscstatus = _Pcatstr3oscstatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 16, 1, 4),
    _Pcatstr3oscstatus_Type()
)
pcatstr3oscstatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pcatstr3oscstatus.setStatus("mandatory")
_SCATStratum3StatusTable_Object = MibTable
sCATStratum3StatusTable = _SCATStratum3StatusTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 17)
)
if mibBuilder.loadTexts:
    sCATStratum3StatusTable.setStatus("mandatory")
_SCATStratum3StatusEntry_Object = MibTableRow
sCATStratum3StatusEntry = _SCATStratum3StatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 17, 1)
)
sCATStratum3StatusEntry.setIndexNames(
    (0, "DV2-MIB", "ss3sIndex"),
)
if mibBuilder.loadTexts:
    sCATStratum3StatusEntry.setStatus("mandatory")
_Ss3sIndex_Type = Integer32
_Ss3sIndex_Object = MibTableColumn
ss3sIndex = _Ss3sIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 17, 1, 1),
    _Ss3sIndex_Type()
)
ss3sIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ss3sIndex.setStatus("mandatory")


class _Scatstr3listenerstatus_Type(Integer32):
    """Custom type scatstr3listenerstatus based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("listening-to-Primary", 1),
          ("listening-to-secondary", 2),
          ("no-input", 3))
    )


_Scatstr3listenerstatus_Type.__name__ = "Integer32"
_Scatstr3listenerstatus_Object = MibTableColumn
scatstr3listenerstatus = _Scatstr3listenerstatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 17, 1, 2),
    _Scatstr3listenerstatus_Type()
)
scatstr3listenerstatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scatstr3listenerstatus.setStatus("mandatory")


class _Scatstr3driverstatus_Type(Integer32):
    """Custom type scatstr3driverstatus based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled-offline", 2),
          ("enabled-online", 1),
          ("fault", 3))
    )


_Scatstr3driverstatus_Type.__name__ = "Integer32"
_Scatstr3driverstatus_Object = MibTableColumn
scatstr3driverstatus = _Scatstr3driverstatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 17, 1, 3),
    _Scatstr3driverstatus_Type()
)
scatstr3driverstatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scatstr3driverstatus.setStatus("mandatory")


class _Scatstr3oscstatus_Type(Integer32):
    """Custom type scatstr3oscstatus based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("acquisition-narrow-band", 4),
          ("acquisition-wide-band", 2),
          ("holdover", 5),
          ("idle", 1),
          ("internal", 6),
          ("locked-in-range", 3))
    )


_Scatstr3oscstatus_Type.__name__ = "Integer32"
_Scatstr3oscstatus_Object = MibTableColumn
scatstr3oscstatus = _Scatstr3oscstatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 17, 1, 4),
    _Scatstr3oscstatus_Type()
)
scatstr3oscstatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    scatstr3oscstatus.setStatus("mandatory")
_PCATBitsConfigTable_Object = MibTable
pCATBitsConfigTable = _PCATBitsConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18)
)
if mibBuilder.loadTexts:
    pCATBitsConfigTable.setStatus("mandatory")
_PCATBitsConfigEntry_Object = MibTableRow
pCATBitsConfigEntry = _PCATBitsConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1)
)
pCATBitsConfigEntry.setIndexNames(
    (0, "DV2-MIB", "pbcIndex"),
)
if mibBuilder.loadTexts:
    pCATBitsConfigEntry.setStatus("mandatory")
_PbcIndex_Type = Integer32
_PbcIndex_Object = MibTableColumn
pbcIndex = _PbcIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 1),
    _PbcIndex_Type()
)
pbcIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pbcIndex.setStatus("mandatory")


class _Pbcds1V2TxLineLn_Type(Integer32):
    """Custom type pbcds1V2TxLineLn based on Integer32"""
    defaultValue = 8

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("feet-0-110", 1),
          ("feet-110-220", 2),
          ("feet-220-330", 3),
          ("feet-330-440", 4),
          ("feet-440-550", 5),
          ("feet-550-660", 6),
          ("more-than-655-ft", 7),
          ("na", 8))
    )


_Pbcds1V2TxLineLn_Type.__name__ = "Integer32"
_Pbcds1V2TxLineLn_Object = MibTableColumn
pbcds1V2TxLineLn = _Pbcds1V2TxLineLn_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 2),
    _Pbcds1V2TxLineLn_Type()
)
pbcds1V2TxLineLn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pbcds1V2TxLineLn.setStatus("mandatory")


class _Pbcplaceholder1_Type(Integer32):
    """Custom type pbcplaceholder1 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("na", 1)
    )


_Pbcplaceholder1_Type.__name__ = "Integer32"
_Pbcplaceholder1_Object = MibTableColumn
pbcplaceholder1 = _Pbcplaceholder1_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 3),
    _Pbcplaceholder1_Type()
)
pbcplaceholder1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pbcplaceholder1.setStatus("mandatory")


class _PbcV2FRMRMode_Type(Integer32):
    """Custom type pbcV2FRMRMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("esf", 3),
          ("none", 1),
          ("sf", 2))
    )


_PbcV2FRMRMode_Type.__name__ = "Integer32"
_PbcV2FRMRMode_Object = MibTableColumn
pbcV2FRMRMode = _PbcV2FRMRMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 4),
    _PbcV2FRMRMode_Type()
)
pbcV2FRMRMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pbcV2FRMRMode.setStatus("mandatory")


class _Pbcds1V2Coding_Type(Integer32):
    """Custom type pbcds1V2Coding based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ami", 2),
          ("b8zs-t1", 1),
          ("na", 3))
    )


_Pbcds1V2Coding_Type.__name__ = "Integer32"
_Pbcds1V2Coding_Object = MibTableColumn
pbcds1V2Coding = _Pbcds1V2Coding_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 5),
    _Pbcds1V2Coding_Type()
)
pbcds1V2Coding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pbcds1V2Coding.setStatus("mandatory")


class _PbcV2Lb_Type(Integer32):
    """Custom type pbcV2Lb based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("line-loopback", 2),
          ("local-loopback", 3),
          ("none", 1))
    )


_PbcV2Lb_Type.__name__ = "Integer32"
_PbcV2Lb_Object = MibTableColumn
pbcV2Lb = _PbcV2Lb_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 6),
    _PbcV2Lb_Type()
)
pbcV2Lb.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pbcV2Lb.setStatus("mandatory")


class _Pbcclrperf_Type(Integer32):
    """Custom type pbcclrperf based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Pbcclrperf_Type.__name__ = "Integer32"
_Pbcclrperf_Object = MibTableColumn
pbcclrperf = _Pbcclrperf_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 7),
    _Pbcclrperf_Type()
)
pbcclrperf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pbcclrperf.setStatus("mandatory")


class _Pbcreconfigure_Type(Integer32):
    """Custom type pbcreconfigure based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Pbcreconfigure_Type.__name__ = "Integer32"
_Pbcreconfigure_Object = MibTableColumn
pbcreconfigure = _Pbcreconfigure_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 18, 1, 9),
    _Pbcreconfigure_Type()
)
pbcreconfigure.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pbcreconfigure.setStatus("mandatory")
_SCATBitsConfigTable_Object = MibTable
sCATBitsConfigTable = _SCATBitsConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19)
)
if mibBuilder.loadTexts:
    sCATBitsConfigTable.setStatus("mandatory")
_SCATBitsConfigEntry_Object = MibTableRow
sCATBitsConfigEntry = _SCATBitsConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1)
)
sCATBitsConfigEntry.setIndexNames(
    (0, "DV2-MIB", "sbcIndex"),
)
if mibBuilder.loadTexts:
    sCATBitsConfigEntry.setStatus("mandatory")
_SbcIndex_Type = Integer32
_SbcIndex_Object = MibTableColumn
sbcIndex = _SbcIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 1),
    _SbcIndex_Type()
)
sbcIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sbcIndex.setStatus("mandatory")


class _Sbcds1V2TxLineLn_Type(Integer32):
    """Custom type sbcds1V2TxLineLn based on Integer32"""
    defaultValue = 8

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("feet-0-110", 1),
          ("feet-110-220", 2),
          ("feet-220-330", 3),
          ("feet-330-440", 4),
          ("feet-440-550", 5),
          ("feet-550-660", 6),
          ("more-than-655-ft", 7),
          ("na", 8))
    )


_Sbcds1V2TxLineLn_Type.__name__ = "Integer32"
_Sbcds1V2TxLineLn_Object = MibTableColumn
sbcds1V2TxLineLn = _Sbcds1V2TxLineLn_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 2),
    _Sbcds1V2TxLineLn_Type()
)
sbcds1V2TxLineLn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sbcds1V2TxLineLn.setStatus("mandatory")


class _Sbcplaceholder1_Type(Integer32):
    """Custom type sbcplaceholder1 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("na", 1)
    )


_Sbcplaceholder1_Type.__name__ = "Integer32"
_Sbcplaceholder1_Object = MibTableColumn
sbcplaceholder1 = _Sbcplaceholder1_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 3),
    _Sbcplaceholder1_Type()
)
sbcplaceholder1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sbcplaceholder1.setStatus("mandatory")


class _SbcV2FRMRMode_Type(Integer32):
    """Custom type sbcV2FRMRMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("esf", 3),
          ("none", 1),
          ("sf", 2))
    )


_SbcV2FRMRMode_Type.__name__ = "Integer32"
_SbcV2FRMRMode_Object = MibTableColumn
sbcV2FRMRMode = _SbcV2FRMRMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 4),
    _SbcV2FRMRMode_Type()
)
sbcV2FRMRMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sbcV2FRMRMode.setStatus("mandatory")


class _Sbcds1V2Coding_Type(Integer32):
    """Custom type sbcds1V2Coding based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ami", 2),
          ("b8zs", 1),
          ("na", 3))
    )


_Sbcds1V2Coding_Type.__name__ = "Integer32"
_Sbcds1V2Coding_Object = MibTableColumn
sbcds1V2Coding = _Sbcds1V2Coding_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 5),
    _Sbcds1V2Coding_Type()
)
sbcds1V2Coding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sbcds1V2Coding.setStatus("mandatory")


class _SbcV2Lb_Type(Integer32):
    """Custom type sbcV2Lb based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("line-loopback", 2),
          ("local-loopback", 3),
          ("none", 1))
    )


_SbcV2Lb_Type.__name__ = "Integer32"
_SbcV2Lb_Object = MibTableColumn
sbcV2Lb = _SbcV2Lb_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 6),
    _SbcV2Lb_Type()
)
sbcV2Lb.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sbcV2Lb.setStatus("mandatory")


class _Sbcclrperf_Type(Integer32):
    """Custom type sbcclrperf based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Sbcclrperf_Type.__name__ = "Integer32"
_Sbcclrperf_Object = MibTableColumn
sbcclrperf = _Sbcclrperf_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 7),
    _Sbcclrperf_Type()
)
sbcclrperf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sbcclrperf.setStatus("mandatory")


class _Sbcreconfigure_Type(Integer32):
    """Custom type sbcreconfigure based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Sbcreconfigure_Type.__name__ = "Integer32"
_Sbcreconfigure_Object = MibTableColumn
sbcreconfigure = _Sbcreconfigure_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 19, 1, 8),
    _Sbcreconfigure_Type()
)
sbcreconfigure.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sbcreconfigure.setStatus("mandatory")
_PCATBitsStatusTable_Object = MibTable
pCATBitsStatusTable = _PCATBitsStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20)
)
if mibBuilder.loadTexts:
    pCATBitsStatusTable.setStatus("mandatory")
_PCATBitsStatusEntry_Object = MibTableRow
pCATBitsStatusEntry = _PCATBitsStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1)
)
pCATBitsStatusEntry.setIndexNames(
    (0, "DV2-MIB", "pbsIndex"),
)
if mibBuilder.loadTexts:
    pCATBitsStatusEntry.setStatus("mandatory")
_PbsIndex_Type = Integer32
_PbsIndex_Object = MibTableColumn
pbsIndex = _PbsIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 1),
    _PbsIndex_Type()
)
pbsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pbsIndex.setStatus("mandatory")


class _Pbslineok_Type(Integer32):
    """Custom type pbslineok based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 3),
          ("no", 1),
          ("yes", 2))
    )


_Pbslineok_Type.__name__ = "Integer32"
_Pbslineok_Object = MibTableColumn
pbslineok = _Pbslineok_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 2),
    _Pbslineok_Type()
)
pbslineok.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pbslineok.setStatus("mandatory")


class _PbsV2RxAIS_Type(Integer32):
    """Custom type pbsV2RxAIS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 3),
          ("no", 1),
          ("yes", 2))
    )


_PbsV2RxAIS_Type.__name__ = "Integer32"
_PbsV2RxAIS_Object = MibTableColumn
pbsV2RxAIS = _PbsV2RxAIS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 3),
    _PbsV2RxAIS_Type()
)
pbsV2RxAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pbsV2RxAIS.setStatus("mandatory")


class _PbsV2RxLOS_Type(Integer32):
    """Custom type pbsV2RxLOS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_PbsV2RxLOS_Type.__name__ = "Integer32"
_PbsV2RxLOS_Object = MibTableColumn
pbsV2RxLOS = _PbsV2RxLOS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 4),
    _PbsV2RxLOS_Type()
)
pbsV2RxLOS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pbsV2RxLOS.setStatus("mandatory")


class _PbsV2RxOOF_Type(Integer32):
    """Custom type pbsV2RxOOF based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 3),
          ("no", 1),
          ("yes", 2))
    )


_PbsV2RxOOF_Type.__name__ = "Integer32"
_PbsV2RxOOF_Object = MibTableColumn
pbsV2RxOOF = _PbsV2RxOOF_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 5),
    _PbsV2RxOOF_Type()
)
pbsV2RxOOF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pbsV2RxOOF.setStatus("mandatory")


class _PbsV2RxBER_Type(Integer32):
    """Custom type pbsV2RxBER based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 3),
          ("no", 1),
          ("yes", 2))
    )


_PbsV2RxBER_Type.__name__ = "Integer32"
_PbsV2RxBER_Object = MibTableColumn
pbsV2RxBER = _PbsV2RxBER_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 6),
    _PbsV2RxBER_Type()
)
pbsV2RxBER.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pbsV2RxBER.setStatus("mandatory")
_PbsV2RxOOFCnt_Type = Integer32
_PbsV2RxOOFCnt_Object = MibTableColumn
pbsV2RxOOFCnt = _PbsV2RxOOFCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 7),
    _PbsV2RxOOFCnt_Type()
)
pbsV2RxOOFCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pbsV2RxOOFCnt.setStatus("mandatory")
_PbsV2RxBERCnt_Type = Integer32
_PbsV2RxBERCnt_Object = MibTableColumn
pbsV2RxBERCnt = _PbsV2RxBERCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 8),
    _PbsV2RxBERCnt_Type()
)
pbsV2RxBERCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pbsV2RxBERCnt.setStatus("mandatory")
_PbsV2RxLOSCnt_Type = Integer32
_PbsV2RxLOSCnt_Object = MibTableColumn
pbsV2RxLOSCnt = _PbsV2RxLOSCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 9),
    _PbsV2RxLOSCnt_Type()
)
pbsV2RxLOSCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pbsV2RxLOSCnt.setStatus("mandatory")
_PbsV2LCVCnt_Type = Integer32
_PbsV2LCVCnt_Object = MibTableColumn
pbsV2LCVCnt = _PbsV2LCVCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 20, 1, 10),
    _PbsV2LCVCnt_Type()
)
pbsV2LCVCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pbsV2LCVCnt.setStatus("mandatory")
_SCATBitsStatusTable_Object = MibTable
sCATBitsStatusTable = _SCATBitsStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21)
)
if mibBuilder.loadTexts:
    sCATBitsStatusTable.setStatus("mandatory")
_SCATBitsStatusEntry_Object = MibTableRow
sCATBitsStatusEntry = _SCATBitsStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1)
)
sCATBitsStatusEntry.setIndexNames(
    (0, "DV2-MIB", "sbsIndex"),
)
if mibBuilder.loadTexts:
    sCATBitsStatusEntry.setStatus("mandatory")
_SbsIndex_Type = Integer32
_SbsIndex_Object = MibTableColumn
sbsIndex = _SbsIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 1),
    _SbsIndex_Type()
)
sbsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sbsIndex.setStatus("mandatory")


class _Sbslineok_Type(Integer32):
    """Custom type sbslineok based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 3),
          ("no", 1),
          ("yes", 2))
    )


_Sbslineok_Type.__name__ = "Integer32"
_Sbslineok_Object = MibTableColumn
sbslineok = _Sbslineok_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 2),
    _Sbslineok_Type()
)
sbslineok.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sbslineok.setStatus("mandatory")


class _SbsV2RxAIS_Type(Integer32):
    """Custom type sbsV2RxAIS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 3),
          ("no", 1),
          ("yes", 2))
    )


_SbsV2RxAIS_Type.__name__ = "Integer32"
_SbsV2RxAIS_Object = MibTableColumn
sbsV2RxAIS = _SbsV2RxAIS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 3),
    _SbsV2RxAIS_Type()
)
sbsV2RxAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sbsV2RxAIS.setStatus("mandatory")


class _SbsV2RxLOS_Type(Integer32):
    """Custom type sbsV2RxLOS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_SbsV2RxLOS_Type.__name__ = "Integer32"
_SbsV2RxLOS_Object = MibTableColumn
sbsV2RxLOS = _SbsV2RxLOS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 4),
    _SbsV2RxLOS_Type()
)
sbsV2RxLOS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sbsV2RxLOS.setStatus("mandatory")


class _SbsV2RxOOF_Type(Integer32):
    """Custom type sbsV2RxOOF based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 3),
          ("no", 1),
          ("yes", 2))
    )


_SbsV2RxOOF_Type.__name__ = "Integer32"
_SbsV2RxOOF_Object = MibTableColumn
sbsV2RxOOF = _SbsV2RxOOF_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 5),
    _SbsV2RxOOF_Type()
)
sbsV2RxOOF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sbsV2RxOOF.setStatus("mandatory")


class _SbsV2RxBER_Type(Integer32):
    """Custom type sbsV2RxBER based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 3),
          ("no", 1),
          ("yes", 2))
    )


_SbsV2RxBER_Type.__name__ = "Integer32"
_SbsV2RxBER_Object = MibTableColumn
sbsV2RxBER = _SbsV2RxBER_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 6),
    _SbsV2RxBER_Type()
)
sbsV2RxBER.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sbsV2RxBER.setStatus("mandatory")
_SbsV2RxOOFCnt_Type = Integer32
_SbsV2RxOOFCnt_Object = MibTableColumn
sbsV2RxOOFCnt = _SbsV2RxOOFCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 7),
    _SbsV2RxOOFCnt_Type()
)
sbsV2RxOOFCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sbsV2RxOOFCnt.setStatus("mandatory")
_SbsV2RxBERCnt_Type = Integer32
_SbsV2RxBERCnt_Object = MibTableColumn
sbsV2RxBERCnt = _SbsV2RxBERCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 8),
    _SbsV2RxBERCnt_Type()
)
sbsV2RxBERCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sbsV2RxBERCnt.setStatus("mandatory")
_SbsV2RxLOSCnt_Type = Integer32
_SbsV2RxLOSCnt_Object = MibTableColumn
sbsV2RxLOSCnt = _SbsV2RxLOSCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 9),
    _SbsV2RxLOSCnt_Type()
)
sbsV2RxLOSCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sbsV2RxLOSCnt.setStatus("mandatory")
_SbsV2LCVCnt_Type = Integer32
_SbsV2LCVCnt_Object = MibTableColumn
sbsV2LCVCnt = _SbsV2LCVCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 21, 1, 10),
    _SbsV2LCVCnt_Type()
)
sbsV2LCVCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sbsV2LCVCnt.setStatus("mandatory")
_PCATDerConfigTable_Object = MibTable
pCATDerConfigTable = _PCATDerConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22)
)
if mibBuilder.loadTexts:
    pCATDerConfigTable.setStatus("mandatory")
_PCATDerConfigEntry_Object = MibTableRow
pCATDerConfigEntry = _PCATDerConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1)
)
pCATDerConfigEntry.setIndexNames(
    (0, "DV2-MIB", "pdcIndex"),
)
if mibBuilder.loadTexts:
    pCATDerConfigEntry.setStatus("mandatory")
_PdcIndex_Type = Integer32
_PdcIndex_Object = MibTableColumn
pdcIndex = _PdcIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 1),
    _PdcIndex_Type()
)
pdcIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdcIndex.setStatus("mandatory")


class _Pdcds1V2TxLineLn_Type(Integer32):
    """Custom type pdcds1V2TxLineLn based on Integer32"""
    defaultValue = 8

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("feet-0-110", 1),
          ("feet-110-220", 2),
          ("feet-220-330", 3),
          ("feet-330-440", 4),
          ("feet-440-550", 5),
          ("feet-550-660", 6),
          ("more-than-655-ft", 7),
          ("na", 8))
    )


_Pdcds1V2TxLineLn_Type.__name__ = "Integer32"
_Pdcds1V2TxLineLn_Object = MibTableColumn
pdcds1V2TxLineLn = _Pdcds1V2TxLineLn_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 2),
    _Pdcds1V2TxLineLn_Type()
)
pdcds1V2TxLineLn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdcds1V2TxLineLn.setStatus("mandatory")


class _Pdcplaceholder1_Type(Integer32):
    """Custom type pdcplaceholder1 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("na", 1)
    )


_Pdcplaceholder1_Type.__name__ = "Integer32"
_Pdcplaceholder1_Object = MibTableColumn
pdcplaceholder1 = _Pdcplaceholder1_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 3),
    _Pdcplaceholder1_Type()
)
pdcplaceholder1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdcplaceholder1.setStatus("mandatory")


class _PdcV2FRMRMode_Type(Integer32):
    """Custom type pdcV2FRMRMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("esf", 3),
          ("none", 1),
          ("sf", 2))
    )


_PdcV2FRMRMode_Type.__name__ = "Integer32"
_PdcV2FRMRMode_Object = MibTableColumn
pdcV2FRMRMode = _PdcV2FRMRMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 4),
    _PdcV2FRMRMode_Type()
)
pdcV2FRMRMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdcV2FRMRMode.setStatus("mandatory")


class _Pdcds1V2Coding_Type(Integer32):
    """Custom type pdcds1V2Coding based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ami", 2),
          ("b8zs", 1),
          ("na", 3))
    )


_Pdcds1V2Coding_Type.__name__ = "Integer32"
_Pdcds1V2Coding_Object = MibTableColumn
pdcds1V2Coding = _Pdcds1V2Coding_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 5),
    _Pdcds1V2Coding_Type()
)
pdcds1V2Coding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdcds1V2Coding.setStatus("mandatory")


class _PdcV2Lb_Type(Integer32):
    """Custom type pdcV2Lb based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("line-lpbk", 2),
          ("local-loopback", 3),
          ("none", 1))
    )


_PdcV2Lb_Type.__name__ = "Integer32"
_PdcV2Lb_Object = MibTableColumn
pdcV2Lb = _PdcV2Lb_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 6),
    _PdcV2Lb_Type()
)
pdcV2Lb.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdcV2Lb.setStatus("mandatory")


class _Pdcclrperf_Type(Integer32):
    """Custom type pdcclrperf based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Pdcclrperf_Type.__name__ = "Integer32"
_Pdcclrperf_Object = MibTableColumn
pdcclrperf = _Pdcclrperf_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 7),
    _Pdcclrperf_Type()
)
pdcclrperf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdcclrperf.setStatus("mandatory")


class _Pdcreconfigure_Type(Integer32):
    """Custom type pdcreconfigure based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Pdcreconfigure_Type.__name__ = "Integer32"
_Pdcreconfigure_Object = MibTableColumn
pdcreconfigure = _Pdcreconfigure_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 22, 1, 8),
    _Pdcreconfigure_Type()
)
pdcreconfigure.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdcreconfigure.setStatus("mandatory")
_SCATDerConfigTable_Object = MibTable
sCATDerConfigTable = _SCATDerConfigTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23)
)
if mibBuilder.loadTexts:
    sCATDerConfigTable.setStatus("mandatory")
_SCATDerConfigEntry_Object = MibTableRow
sCATDerConfigEntry = _SCATDerConfigEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1)
)
sCATDerConfigEntry.setIndexNames(
    (0, "DV2-MIB", "sdcIndex"),
)
if mibBuilder.loadTexts:
    sCATDerConfigEntry.setStatus("mandatory")
_SdcIndex_Type = Integer32
_SdcIndex_Object = MibTableColumn
sdcIndex = _SdcIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 1),
    _SdcIndex_Type()
)
sdcIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdcIndex.setStatus("mandatory")


class _Sdcds1V2TxLineLn_Type(Integer32):
    """Custom type sdcds1V2TxLineLn based on Integer32"""
    defaultValue = 8

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("feet-0-110", 1),
          ("feet-110-220", 2),
          ("feet-220-330", 3),
          ("feet-330-440", 4),
          ("feet-440-550", 5),
          ("feet-550-660", 6),
          ("more-than-655-ft", 7),
          ("na", 8))
    )


_Sdcds1V2TxLineLn_Type.__name__ = "Integer32"
_Sdcds1V2TxLineLn_Object = MibTableColumn
sdcds1V2TxLineLn = _Sdcds1V2TxLineLn_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 2),
    _Sdcds1V2TxLineLn_Type()
)
sdcds1V2TxLineLn.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sdcds1V2TxLineLn.setStatus("mandatory")


class _Sdcplaceholder1_Type(Integer32):
    """Custom type sdcplaceholder1 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("na", 1)
    )


_Sdcplaceholder1_Type.__name__ = "Integer32"
_Sdcplaceholder1_Object = MibTableColumn
sdcplaceholder1 = _Sdcplaceholder1_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 3),
    _Sdcplaceholder1_Type()
)
sdcplaceholder1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sdcplaceholder1.setStatus("mandatory")


class _SdcV2FRMRMode_Type(Integer32):
    """Custom type sdcV2FRMRMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("esf", 3),
          ("none", 1),
          ("sf", 2))
    )


_SdcV2FRMRMode_Type.__name__ = "Integer32"
_SdcV2FRMRMode_Object = MibTableColumn
sdcV2FRMRMode = _SdcV2FRMRMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 4),
    _SdcV2FRMRMode_Type()
)
sdcV2FRMRMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sdcV2FRMRMode.setStatus("mandatory")


class _Sdcds1V2Coding_Type(Integer32):
    """Custom type sdcds1V2Coding based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ami", 2),
          ("b8zs", 1),
          ("na", 3))
    )


_Sdcds1V2Coding_Type.__name__ = "Integer32"
_Sdcds1V2Coding_Object = MibTableColumn
sdcds1V2Coding = _Sdcds1V2Coding_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 5),
    _Sdcds1V2Coding_Type()
)
sdcds1V2Coding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sdcds1V2Coding.setStatus("mandatory")


class _SdcV2Lb_Type(Integer32):
    """Custom type sdcV2Lb based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("line-lpbk", 2),
          ("local-loopback", 3),
          ("none", 1))
    )


_SdcV2Lb_Type.__name__ = "Integer32"
_SdcV2Lb_Object = MibTableColumn
sdcV2Lb = _SdcV2Lb_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 6),
    _SdcV2Lb_Type()
)
sdcV2Lb.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sdcV2Lb.setStatus("mandatory")


class _Sdcclrperf_Type(Integer32):
    """Custom type sdcclrperf based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Sdcclrperf_Type.__name__ = "Integer32"
_Sdcclrperf_Object = MibTableColumn
sdcclrperf = _Sdcclrperf_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 7),
    _Sdcclrperf_Type()
)
sdcclrperf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sdcclrperf.setStatus("mandatory")


class _Sdcreconfigure_Type(Integer32):
    """Custom type sdcreconfigure based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_Sdcreconfigure_Type.__name__ = "Integer32"
_Sdcreconfigure_Object = MibTableColumn
sdcreconfigure = _Sdcreconfigure_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 23, 1, 8),
    _Sdcreconfigure_Type()
)
sdcreconfigure.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sdcreconfigure.setStatus("mandatory")
_PCATDerStatusTable_Object = MibTable
pCATDerStatusTable = _PCATDerStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24)
)
if mibBuilder.loadTexts:
    pCATDerStatusTable.setStatus("mandatory")
_PCATDerStatusEntry_Object = MibTableRow
pCATDerStatusEntry = _PCATDerStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1)
)
pCATDerStatusEntry.setIndexNames(
    (0, "DV2-MIB", "pdsIndex"),
)
if mibBuilder.loadTexts:
    pCATDerStatusEntry.setStatus("mandatory")
_PdsIndex_Type = Integer32
_PdsIndex_Object = MibTableColumn
pdsIndex = _PdsIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 1),
    _PdsIndex_Type()
)
pdsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdsIndex.setStatus("mandatory")


class _Pdslineok_Type(Integer32):
    """Custom type pdslineok based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 3),
          ("no", 1),
          ("yes", 2))
    )


_Pdslineok_Type.__name__ = "Integer32"
_Pdslineok_Object = MibTableColumn
pdslineok = _Pdslineok_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 2),
    _Pdslineok_Type()
)
pdslineok.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdslineok.setStatus("mandatory")


class _PdsV2TxReference_Type(Integer32):
    """Custom type pdsV2TxReference based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no-input", 1),
          ("primary-valid", 2),
          ("secondary-valid", 3))
    )


_PdsV2TxReference_Type.__name__ = "Integer32"
_PdsV2TxReference_Object = MibTableColumn
pdsV2TxReference = _PdsV2TxReference_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 3),
    _PdsV2TxReference_Type()
)
pdsV2TxReference.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdsV2TxReference.setStatus("mandatory")


class _PdsV2RxAIS_Type(Integer32):
    """Custom type pdsV2RxAIS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 3),
          ("no", 1),
          ("yes", 2))
    )


_PdsV2RxAIS_Type.__name__ = "Integer32"
_PdsV2RxAIS_Object = MibTableColumn
pdsV2RxAIS = _PdsV2RxAIS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 4),
    _PdsV2RxAIS_Type()
)
pdsV2RxAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdsV2RxAIS.setStatus("mandatory")


class _PdsV2RxLOS_Type(Integer32):
    """Custom type pdsV2RxLOS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 3),
          ("no", 1),
          ("yes", 2))
    )


_PdsV2RxLOS_Type.__name__ = "Integer32"
_PdsV2RxLOS_Object = MibTableColumn
pdsV2RxLOS = _PdsV2RxLOS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 5),
    _PdsV2RxLOS_Type()
)
pdsV2RxLOS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdsV2RxLOS.setStatus("mandatory")


class _PdsV2RxOOF_Type(Integer32):
    """Custom type pdsV2RxOOF based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 3),
          ("no", 1),
          ("yes", 2))
    )


_PdsV2RxOOF_Type.__name__ = "Integer32"
_PdsV2RxOOF_Object = MibTableColumn
pdsV2RxOOF = _PdsV2RxOOF_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 6),
    _PdsV2RxOOF_Type()
)
pdsV2RxOOF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdsV2RxOOF.setStatus("mandatory")


class _PdsV2RxBER_Type(Integer32):
    """Custom type pdsV2RxBER based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 3),
          ("no", 1),
          ("yes", 2))
    )


_PdsV2RxBER_Type.__name__ = "Integer32"
_PdsV2RxBER_Object = MibTableColumn
pdsV2RxBER = _PdsV2RxBER_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 7),
    _PdsV2RxBER_Type()
)
pdsV2RxBER.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdsV2RxBER.setStatus("mandatory")
_PdsV2RxOOFCnt_Type = Integer32
_PdsV2RxOOFCnt_Object = MibTableColumn
pdsV2RxOOFCnt = _PdsV2RxOOFCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 8),
    _PdsV2RxOOFCnt_Type()
)
pdsV2RxOOFCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdsV2RxOOFCnt.setStatus("mandatory")
_PdsV2RxBERCnt_Type = Integer32
_PdsV2RxBERCnt_Object = MibTableColumn
pdsV2RxBERCnt = _PdsV2RxBERCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 9),
    _PdsV2RxBERCnt_Type()
)
pdsV2RxBERCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdsV2RxBERCnt.setStatus("mandatory")
_PdsV2RxLOSCnt_Type = Integer32
_PdsV2RxLOSCnt_Object = MibTableColumn
pdsV2RxLOSCnt = _PdsV2RxLOSCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 10),
    _PdsV2RxLOSCnt_Type()
)
pdsV2RxLOSCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdsV2RxLOSCnt.setStatus("mandatory")
_PdsV2LCVCnt_Type = Integer32
_PdsV2LCVCnt_Object = MibTableColumn
pdsV2LCVCnt = _PdsV2LCVCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 24, 1, 11),
    _PdsV2LCVCnt_Type()
)
pdsV2LCVCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdsV2LCVCnt.setStatus("mandatory")
_SCATDerStatusTable_Object = MibTable
sCATDerStatusTable = _SCATDerStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25)
)
if mibBuilder.loadTexts:
    sCATDerStatusTable.setStatus("mandatory")
_SCATDerStatusEntry_Object = MibTableRow
sCATDerStatusEntry = _SCATDerStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1)
)
sCATDerStatusEntry.setIndexNames(
    (0, "DV2-MIB", "sdsIndex"),
)
if mibBuilder.loadTexts:
    sCATDerStatusEntry.setStatus("mandatory")
_SdsIndex_Type = Integer32
_SdsIndex_Object = MibTableColumn
sdsIndex = _SdsIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 1),
    _SdsIndex_Type()
)
sdsIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdsIndex.setStatus("mandatory")


class _Sdslineok_Type(Integer32):
    """Custom type sdslineok based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 3),
          ("no", 1),
          ("yes", 2))
    )


_Sdslineok_Type.__name__ = "Integer32"
_Sdslineok_Object = MibTableColumn
sdslineok = _Sdslineok_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 2),
    _Sdslineok_Type()
)
sdslineok.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdslineok.setStatus("mandatory")


class _SdsV2TxReference_Type(Integer32):
    """Custom type sdsV2TxReference based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("no-input", 1),
          ("primary-valid", 2),
          ("secondary-valid", 3))
    )


_SdsV2TxReference_Type.__name__ = "Integer32"
_SdsV2TxReference_Object = MibTableColumn
sdsV2TxReference = _SdsV2TxReference_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 3),
    _SdsV2TxReference_Type()
)
sdsV2TxReference.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdsV2TxReference.setStatus("mandatory")


class _SdsV2RxAIS_Type(Integer32):
    """Custom type sdsV2RxAIS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 3),
          ("no", 1),
          ("yes", 2))
    )


_SdsV2RxAIS_Type.__name__ = "Integer32"
_SdsV2RxAIS_Object = MibTableColumn
sdsV2RxAIS = _SdsV2RxAIS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 4),
    _SdsV2RxAIS_Type()
)
sdsV2RxAIS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdsV2RxAIS.setStatus("mandatory")


class _SdsV2RxLOS_Type(Integer32):
    """Custom type sdsV2RxLOS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 3),
          ("no", 1),
          ("yes", 2))
    )


_SdsV2RxLOS_Type.__name__ = "Integer32"
_SdsV2RxLOS_Object = MibTableColumn
sdsV2RxLOS = _SdsV2RxLOS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 5),
    _SdsV2RxLOS_Type()
)
sdsV2RxLOS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdsV2RxLOS.setStatus("mandatory")


class _SdsV2RxOOF_Type(Integer32):
    """Custom type sdsV2RxOOF based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 3),
          ("no", 1),
          ("yes", 2))
    )


_SdsV2RxOOF_Type.__name__ = "Integer32"
_SdsV2RxOOF_Object = MibTableColumn
sdsV2RxOOF = _SdsV2RxOOF_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 6),
    _SdsV2RxOOF_Type()
)
sdsV2RxOOF.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdsV2RxOOF.setStatus("mandatory")


class _SdsV2RxBER_Type(Integer32):
    """Custom type sdsV2RxBER based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 3),
          ("no", 1),
          ("yes", 2))
    )


_SdsV2RxBER_Type.__name__ = "Integer32"
_SdsV2RxBER_Object = MibTableColumn
sdsV2RxBER = _SdsV2RxBER_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 7),
    _SdsV2RxBER_Type()
)
sdsV2RxBER.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdsV2RxBER.setStatus("mandatory")
_SdsV2RxOOFCnt_Type = Integer32
_SdsV2RxOOFCnt_Object = MibTableColumn
sdsV2RxOOFCnt = _SdsV2RxOOFCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 8),
    _SdsV2RxOOFCnt_Type()
)
sdsV2RxOOFCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdsV2RxOOFCnt.setStatus("mandatory")
_SdsV2RxBERCnt_Type = Integer32
_SdsV2RxBERCnt_Object = MibTableColumn
sdsV2RxBERCnt = _SdsV2RxBERCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 9),
    _SdsV2RxBERCnt_Type()
)
sdsV2RxBERCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdsV2RxBERCnt.setStatus("mandatory")
_SdsV2RxLOSCnt_Type = Integer32
_SdsV2RxLOSCnt_Object = MibTableColumn
sdsV2RxLOSCnt = _SdsV2RxLOSCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 10),
    _SdsV2RxLOSCnt_Type()
)
sdsV2RxLOSCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdsV2RxLOSCnt.setStatus("mandatory")
_SdsV2LCVCnt_Type = Integer32
_SdsV2LCVCnt_Object = MibTableColumn
sdsV2LCVCnt = _SdsV2LCVCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 25, 1, 11),
    _SdsV2LCVCnt_Type()
)
sdsV2LCVCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sdsV2LCVCnt.setStatus("mandatory")


class _SysClkAlarmErr_Type(Integer32):
    """Custom type sysClkAlarmErr based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("no-valid-error", 14),
          ("none", 1),
          ("pRIlineSEC-ok", 3),
          ("pRIlineSECline", 8),
          ("pRIlineSECoffline", 4),
          ("pRIlineSECosc", 13),
          ("pRIosc", 9),
          ("pRIoscSECline", 12),
          ("pRIoscSECoffline", 5),
          ("pRIoscSECosc", 11),
          ("sEClinePRI-ok", 2),
          ("sEClinePRIoffline", 6),
          ("sECosc", 10),
          ("sECoscPRIoffline", 7))
    )


_SysClkAlarmErr_Type.__name__ = "Integer32"
_SysClkAlarmErr_Object = MibScalar
sysClkAlarmErr = _SysClkAlarmErr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 21, 26),
    _SysClkAlarmErr_Type()
)
sysClkAlarmErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysClkAlarmErr.setStatus("mandatory")
_MjlimSlipLine_ObjectIdentity = ObjectIdentity
mjlimSlipLine = _MjlimSlipLine_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 22)
)
_JpegSlipIp_Type = IpAddress
_JpegSlipIp_Object = MibScalar
jpegSlipIp = _JpegSlipIp_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 22, 1),
    _JpegSlipIp_Type()
)
jpegSlipIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    jpegSlipIp.setStatus("mandatory")
_JpegSlipMask_Type = IpAddress
_JpegSlipMask_Object = MibScalar
jpegSlipMask = _JpegSlipMask_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 22, 2),
    _JpegSlipMask_Type()
)
jpegSlipMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    jpegSlipMask.setStatus("mandatory")
_JpegSlipRemoteIp_Type = IpAddress
_JpegSlipRemoteIp_Object = MibScalar
jpegSlipRemoteIp = _JpegSlipRemoteIp_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 22, 3),
    _JpegSlipRemoteIp_Type()
)
jpegSlipRemoteIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    jpegSlipRemoteIp.setStatus("mandatory")


class _JpegSlipSpeed_Type(Integer32):
    """Custom type jpegSlipSpeed based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("baud19200", 4),
          ("baud2400", 1),
          ("baud38400", 5),
          ("baud4800", 2),
          ("baud9600", 3))
    )


_JpegSlipSpeed_Type.__name__ = "Integer32"
_JpegSlipSpeed_Object = MibScalar
jpegSlipSpeed = _JpegSlipSpeed_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 22, 4),
    _JpegSlipSpeed_Type()
)
jpegSlipSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    jpegSlipSpeed.setStatus("mandatory")
_MjlimSystem_ObjectIdentity = ObjectIdentity
mjlimSystem = _MjlimSystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 23)
)


class _LimSysState_Type(Integer32):
    """Custom type limSysState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("fault", 6),
          ("idle", 2),
          ("init", 1),
          ("start", 3),
          ("terminate", 5),
          ("working", 4))
    )


_LimSysState_Type.__name__ = "Integer32"
_LimSysState_Object = MibScalar
limSysState = _LimSysState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 23, 1),
    _LimSysState_Type()
)
limSysState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    limSysState.setStatus("mandatory")


class _LimSysFault_Type(Integer32):
    """Custom type limSysFault based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_LimSysFault_Type.__name__ = "Integer32"
_LimSysFault_Object = MibScalar
limSysFault = _LimSysFault_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 23, 2),
    _LimSysFault_Type()
)
limSysFault.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    limSysFault.setStatus("mandatory")


class _LimSysCompErr_Type(Integer32):
    """Custom type limSysCompErr based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_LimSysCompErr_Type.__name__ = "Integer32"
_LimSysCompErr_Object = MibScalar
limSysCompErr = _LimSysCompErr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 23, 3),
    _LimSysCompErr_Type()
)
limSysCompErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    limSysCompErr.setStatus("mandatory")


class _LimSysDecompErr_Type(Integer32):
    """Custom type limSysDecompErr based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_LimSysDecompErr_Type.__name__ = "Integer32"
_LimSysDecompErr_Object = MibScalar
limSysDecompErr = _LimSysDecompErr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 23, 4),
    _LimSysDecompErr_Type()
)
limSysDecompErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    limSysDecompErr.setStatus("mandatory")


class _LimSysVideoIn_Type(Integer32):
    """Custom type limSysVideoIn based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_LimSysVideoIn_Type.__name__ = "Integer32"
_LimSysVideoIn_Object = MibScalar
limSysVideoIn = _LimSysVideoIn_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 23, 5),
    _LimSysVideoIn_Type()
)
limSysVideoIn.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    limSysVideoIn.setStatus("mandatory")


class _LimSysVideoOut_Type(Integer32):
    """Custom type limSysVideoOut based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_LimSysVideoOut_Type.__name__ = "Integer32"
_LimSysVideoOut_Object = MibScalar
limSysVideoOut = _LimSysVideoOut_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 23, 6),
    _LimSysVideoOut_Type()
)
limSysVideoOut.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    limSysVideoOut.setStatus("mandatory")


class _LimSysStartMode_Type(Integer32):
    """Custom type limSysStartMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("force-init", 2))
    )


_LimSysStartMode_Type.__name__ = "Integer32"
_LimSysStartMode_Object = MibScalar
limSysStartMode = _LimSysStartMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 23, 30),
    _LimSysStartMode_Type()
)
limSysStartMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    limSysStartMode.setStatus("mandatory")
_VidInCfg_ObjectIdentity = ObjectIdentity
vidInCfg = _VidInCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 24)
)


class _VidInJpeg_Type(Integer32):
    """Custom type vidInJpeg based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("start", 1),
          ("stop", 2))
    )


_VidInJpeg_Type.__name__ = "Integer32"
_VidInJpeg_Object = MibScalar
vidInJpeg = _VidInJpeg_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 1),
    _VidInJpeg_Type()
)
vidInJpeg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidInJpeg.setStatus("mandatory")


class _VidInRate_Type(Integer32):
    """Custom type vidInRate based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("mbps10", 4),
          ("mbps15", 3),
          ("mbps20", 2),
          ("mbps25", 1),
          ("mbps5", 5))
    )


_VidInRate_Type.__name__ = "Integer32"
_VidInRate_Object = MibScalar
vidInRate = _VidInRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 2),
    _VidInRate_Type()
)
vidInRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidInRate.setStatus("mandatory")


class _VidInProvMode_Type(Integer32):
    """Custom type vidInProvMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("manual", 2))
    )


_VidInProvMode_Type.__name__ = "Integer32"
_VidInProvMode_Object = MibScalar
vidInProvMode = _VidInProvMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 3),
    _VidInProvMode_Type()
)
vidInProvMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidInProvMode.setStatus("mandatory")


class _VidInFrameRate_Type(Integer32):
    """Custom type vidInFrameRate based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("full", 1)
    )


_VidInFrameRate_Type.__name__ = "Integer32"
_VidInFrameRate_Object = MibScalar
vidInFrameRate = _VidInFrameRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 4),
    _VidInFrameRate_Type()
)
vidInFrameRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidInFrameRate.setStatus("mandatory")


class _VidInWindowSize_Type(Integer32):
    """Custom type vidInWindowSize based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("constrained", 2),
          ("full-screen", 1))
    )


_VidInWindowSize_Type.__name__ = "Integer32"
_VidInWindowSize_Object = MibScalar
vidInWindowSize = _VidInWindowSize_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 5),
    _VidInWindowSize_Type()
)
vidInWindowSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidInWindowSize.setStatus("mandatory")


class _VidInQuanFactor_Type(Integer32):
    """Custom type vidInQuanFactor based on Integer32"""
    defaultValue = 30

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(10, 100),
    )


_VidInQuanFactor_Type.__name__ = "Integer32"
_VidInQuanFactor_Object = MibScalar
vidInQuanFactor = _VidInQuanFactor_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 6),
    _VidInQuanFactor_Type()
)
vidInQuanFactor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidInQuanFactor.setStatus("mandatory")


class _VidInTransMode_Type(Integer32):
    """Custom type vidInTransMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("capped-vbr", 2),
          ("cbr", 1))
    )


_VidInTransMode_Type.__name__ = "Integer32"
_VidInTransMode_Object = MibScalar
vidInTransMode = _VidInTransMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 7),
    _VidInTransMode_Type()
)
vidInTransMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidInTransMode.setStatus("mandatory")


class _VidInStand_Type(Integer32):
    """Custom type vidInStand based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ntsc", 1),
          ("pal", 2))
    )


_VidInStand_Type.__name__ = "Integer32"
_VidInStand_Object = MibScalar
vidInStand = _VidInStand_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 8),
    _VidInStand_Type()
)
vidInStand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidInStand.setStatus("mandatory")


class _VidInVcrMode_Type(Integer32):
    """Custom type vidInVcrMode based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_VidInVcrMode_Type.__name__ = "Integer32"
_VidInVcrMode_Object = MibScalar
vidInVcrMode = _VidInVcrMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 9),
    _VidInVcrMode_Type()
)
vidInVcrMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidInVcrMode.setStatus("mandatory")


class _VidInAnLpbk_Type(Integer32):
    """Custom type vidInAnLpbk based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_VidInAnLpbk_Type.__name__ = "Integer32"
_VidInAnLpbk_Object = MibScalar
vidInAnLpbk = _VidInAnLpbk_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 10),
    _VidInAnLpbk_Type()
)
vidInAnLpbk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidInAnLpbk.setStatus("mandatory")


class _VidInTest_Type(Integer32):
    """Custom type vidInTest based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_VidInTest_Type.__name__ = "Integer32"
_VidInTest_Object = MibScalar
vidInTest = _VidInTest_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 24, 11),
    _VidInTest_Type()
)
vidInTest.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidInTest.setStatus("mandatory")
_VidOutCfg_ObjectIdentity = ObjectIdentity
vidOutCfg = _VidOutCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 25)
)


class _VidOutJpeg_Type(Integer32):
    """Custom type vidOutJpeg based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("start", 1),
          ("stop", 2))
    )


_VidOutJpeg_Type.__name__ = "Integer32"
_VidOutJpeg_Object = MibScalar
vidOutJpeg = _VidOutJpeg_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 25, 1),
    _VidOutJpeg_Type()
)
vidOutJpeg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidOutJpeg.setStatus("mandatory")


class _VidOutStand_Type(Integer32):
    """Custom type vidOutStand based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto-sel", 3),
          ("ntsc", 1),
          ("pal", 2))
    )


_VidOutStand_Type.__name__ = "Integer32"
_VidOutStand_Object = MibScalar
vidOutStand = _VidOutStand_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 25, 2),
    _VidOutStand_Type()
)
vidOutStand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidOutStand.setStatus("mandatory")


class _VidOutSource_Type(Integer32):
    """Custom type vidOutSource based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("free", 3),
          ("genlock", 1),
          ("through", 2))
    )


_VidOutSource_Type.__name__ = "Integer32"
_VidOutSource_Object = MibScalar
vidOutSource = _VidOutSource_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 25, 3),
    _VidOutSource_Type()
)
vidOutSource.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidOutSource.setStatus("mandatory")


class _VidOutUnLpb_Type(Integer32):
    """Custom type vidOutUnLpb based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_VidOutUnLpb_Type.__name__ = "Integer32"
_VidOutUnLpb_Object = MibScalar
vidOutUnLpb = _VidOutUnLpb_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 25, 4),
    _VidOutUnLpb_Type()
)
vidOutUnLpb.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidOutUnLpb.setStatus("mandatory")


class _VidOutIdleSrc_Type(Integer32):
    """Custom type vidOutIdleSrc based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("black", 1),
          ("color", 2))
    )


_VidOutIdleSrc_Type.__name__ = "Integer32"
_VidOutIdleSrc_Object = MibScalar
vidOutIdleSrc = _VidOutIdleSrc_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 25, 5),
    _VidOutIdleSrc_Type()
)
vidOutIdleSrc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidOutIdleSrc.setStatus("mandatory")


class _VidOutChnlLpbk_Type(Integer32):
    """Custom type vidOutChnlLpbk based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_VidOutChnlLpbk_Type.__name__ = "Integer32"
_VidOutChnlLpbk_Object = MibScalar
vidOutChnlLpbk = _VidOutChnlLpbk_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 25, 6),
    _VidOutChnlLpbk_Type()
)
vidOutChnlLpbk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidOutChnlLpbk.setStatus("mandatory")
_VidInSta_ObjectIdentity = ObjectIdentity
vidInSta = _VidInSta_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 26)
)


class _VidInState_Type(Integer32):
    """Custom type vidInState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("fault", 6),
          ("idle", 2),
          ("init", 1),
          ("start", 3),
          ("terminate", 5),
          ("working", 4))
    )


_VidInState_Type.__name__ = "Integer32"
_VidInState_Object = MibScalar
vidInState = _VidInState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 1),
    _VidInState_Type()
)
vidInState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidInState.setStatus("mandatory")


class _VidInPres_Type(Integer32):
    """Custom type vidInPres based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_VidInPres_Type.__name__ = "Integer32"
_VidInPres_Object = MibScalar
vidInPres = _VidInPres_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 2),
    _VidInPres_Type()
)
vidInPres.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidInPres.setStatus("mandatory")
_VidInCurQFactor_Type = Integer32
_VidInCurQFactor_Object = MibScalar
vidInCurQFactor = _VidInCurQFactor_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 3),
    _VidInCurQFactor_Type()
)
vidInCurQFactor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidInCurQFactor.setStatus("mandatory")
_VidInCurFrameRate_Type = Integer32
_VidInCurFrameRate_Object = MibScalar
vidInCurFrameRate = _VidInCurFrameRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 4),
    _VidInCurFrameRate_Type()
)
vidInCurFrameRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidInCurFrameRate.setStatus("mandatory")
_VidInAvgBitRate_Type = Integer32
_VidInAvgBitRate_Object = MibScalar
vidInAvgBitRate = _VidInAvgBitRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 5),
    _VidInAvgBitRate_Type()
)
vidInAvgBitRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidInAvgBitRate.setStatus("mandatory")
_VidInPeakBitRate_Type = Integer32
_VidInPeakBitRate_Object = MibScalar
vidInPeakBitRate = _VidInPeakBitRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 6),
    _VidInPeakBitRate_Type()
)
vidInPeakBitRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidInPeakBitRate.setStatus("mandatory")


class _VidInSubSample_Type(Integer32):
    """Custom type vidInSubSample based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_VidInSubSample_Type.__name__ = "Integer32"
_VidInSubSample_Object = MibScalar
vidInSubSample = _VidInSubSample_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 7),
    _VidInSubSample_Type()
)
vidInSubSample.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidInSubSample.setStatus("mandatory")
_VidInCompCnt_Type = Counter32
_VidInCompCnt_Object = MibScalar
vidInCompCnt = _VidInCompCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 8),
    _VidInCompCnt_Type()
)
vidInCompCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidInCompCnt.setStatus("mandatory")
_VidInSkipCnt_Type = Counter32
_VidInSkipCnt_Object = MibScalar
vidInSkipCnt = _VidInSkipCnt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 9),
    _VidInSkipCnt_Type()
)
vidInSkipCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidInSkipCnt.setStatus("mandatory")
_VidInBuffOvf_Type = Counter32
_VidInBuffOvf_Object = MibScalar
vidInBuffOvf = _VidInBuffOvf_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 10),
    _VidInBuffOvf_Type()
)
vidInBuffOvf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidInBuffOvf.setStatus("mandatory")
_VidInImageErr_Type = Counter32
_VidInImageErr_Object = MibScalar
vidInImageErr = _VidInImageErr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 11),
    _VidInImageErr_Type()
)
vidInImageErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidInImageErr.setStatus("mandatory")
_VidInFldSynErr_Type = Counter32
_VidInFldSynErr_Object = MibScalar
vidInFldSynErr = _VidInFldSynErr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 12),
    _VidInFldSynErr_Type()
)
vidInFldSynErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidInFldSynErr.setStatus("mandatory")
_VidInCompErr_Type = Counter32
_VidInCompErr_Object = MibScalar
vidInCompErr = _VidInCompErr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 13),
    _VidInCompErr_Type()
)
vidInCompErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidInCompErr.setStatus("mandatory")
_VidInBufLevel_Type = Integer32
_VidInBufLevel_Object = MibScalar
vidInBufLevel = _VidInBufLevel_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 14),
    _VidInBufLevel_Type()
)
vidInBufLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidInBufLevel.setStatus("mandatory")


class _VidInFailReason_Type(Integer32):
    """Custom type vidInFailReason based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("algorithm", 7),
          ("badparms", 6),
          ("ccube", 2),
          ("channel", 4),
          ("none", 1),
          ("timeout", 3),
          ("xilinx", 5))
    )


_VidInFailReason_Type.__name__ = "Integer32"
_VidInFailReason_Object = MibScalar
vidInFailReason = _VidInFailReason_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 26, 15),
    _VidInFailReason_Type()
)
vidInFailReason.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidInFailReason.setStatus("mandatory")
_VidOutSta_ObjectIdentity = ObjectIdentity
vidOutSta = _VidOutSta_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 27)
)


class _VidOutState_Type(Integer32):
    """Custom type vidOutState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("fault", 6),
          ("idle", 2),
          ("init", 1),
          ("start", 3),
          ("terminate", 5),
          ("working", 4))
    )


_VidOutState_Type.__name__ = "Integer32"
_VidOutState_Object = MibScalar
vidOutState = _VidOutState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 1),
    _VidOutState_Type()
)
vidOutState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidOutState.setStatus("mandatory")
_VidOutRate_Type = Integer32
_VidOutRate_Object = MibScalar
vidOutRate = _VidOutRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 2),
    _VidOutRate_Type()
)
vidOutRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidOutRate.setStatus("mandatory")
_VidOutFrameRate_Type = Integer32
_VidOutFrameRate_Object = MibScalar
vidOutFrameRate = _VidOutFrameRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 3),
    _VidOutFrameRate_Type()
)
vidOutFrameRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidOutFrameRate.setStatus("mandatory")
_VidOutWindowWidth_Type = Integer32
_VidOutWindowWidth_Object = MibScalar
vidOutWindowWidth = _VidOutWindowWidth_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 4),
    _VidOutWindowWidth_Type()
)
vidOutWindowWidth.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidOutWindowWidth.setStatus("mandatory")
_VidOutWindowHeight_Type = Integer32
_VidOutWindowHeight_Object = MibScalar
vidOutWindowHeight = _VidOutWindowHeight_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 5),
    _VidOutWindowHeight_Type()
)
vidOutWindowHeight.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidOutWindowHeight.setStatus("mandatory")


class _VidOutChnlLock_Type(Integer32):
    """Custom type vidOutChnlLock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_VidOutChnlLock_Type.__name__ = "Integer32"
_VidOutChnlLock_Object = MibScalar
vidOutChnlLock = _VidOutChnlLock_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 6),
    _VidOutChnlLock_Type()
)
vidOutChnlLock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidOutChnlLock.setStatus("mandatory")
_VidOutPackets_Type = Counter32
_VidOutPackets_Object = MibScalar
vidOutPackets = _VidOutPackets_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 7),
    _VidOutPackets_Type()
)
vidOutPackets.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidOutPackets.setStatus("mandatory")
_VidOutPlayed_Type = Counter32
_VidOutPlayed_Object = MibScalar
vidOutPlayed = _VidOutPlayed_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 8),
    _VidOutPlayed_Type()
)
vidOutPlayed.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidOutPlayed.setStatus("mandatory")
_VidOutSkipped_Type = Counter32
_VidOutSkipped_Object = MibScalar
vidOutSkipped = _VidOutSkipped_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 9),
    _VidOutSkipped_Type()
)
vidOutSkipped.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidOutSkipped.setStatus("mandatory")
_VidOutChnlErr_Type = Counter32
_VidOutChnlErr_Object = MibScalar
vidOutChnlErr = _VidOutChnlErr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 10),
    _VidOutChnlErr_Type()
)
vidOutChnlErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidOutChnlErr.setStatus("mandatory")
_VidOutBuffOvf_Type = Counter32
_VidOutBuffOvf_Object = MibScalar
vidOutBuffOvf = _VidOutBuffOvf_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 11),
    _VidOutBuffOvf_Type()
)
vidOutBuffOvf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidOutBuffOvf.setStatus("mandatory")
_VidOutImageErr_Type = Counter32
_VidOutImageErr_Object = MibScalar
vidOutImageErr = _VidOutImageErr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 12),
    _VidOutImageErr_Type()
)
vidOutImageErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidOutImageErr.setStatus("mandatory")
_VidOutSeqnoErr_Type = Counter32
_VidOutSeqnoErr_Object = MibScalar
vidOutSeqnoErr = _VidOutSeqnoErr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 13),
    _VidOutSeqnoErr_Type()
)
vidOutSeqnoErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidOutSeqnoErr.setStatus("mandatory")
_VidOutCurrQFactor_Type = Integer32
_VidOutCurrQFactor_Object = MibScalar
vidOutCurrQFactor = _VidOutCurrQFactor_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 14),
    _VidOutCurrQFactor_Type()
)
vidOutCurrQFactor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidOutCurrQFactor.setStatus("mandatory")


class _VidOutStdStat_Type(Integer32):
    """Custom type vidOutStdStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ntsc", 1),
          ("pal", 2))
    )


_VidOutStdStat_Type.__name__ = "Integer32"
_VidOutStdStat_Object = MibScalar
vidOutStdStat = _VidOutStdStat_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 15),
    _VidOutStdStat_Type()
)
vidOutStdStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidOutStdStat.setStatus("mandatory")
_VidOutBuffLevel_Type = Integer32
_VidOutBuffLevel_Object = MibScalar
vidOutBuffLevel = _VidOutBuffLevel_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 16),
    _VidOutBuffLevel_Type()
)
vidOutBuffLevel.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidOutBuffLevel.setStatus("mandatory")
_VidOutPktsInBuff_Type = Integer32
_VidOutPktsInBuff_Object = MibScalar
vidOutPktsInBuff = _VidOutPktsInBuff_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 17),
    _VidOutPktsInBuff_Type()
)
vidOutPktsInBuff.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidOutPktsInBuff.setStatus("mandatory")


class _VidOutFailReason_Type(Integer32):
    """Custom type vidOutFailReason based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("algorithm", 7),
          ("badparms", 6),
          ("ccube", 2),
          ("channel", 4),
          ("none", 1),
          ("timeout", 3),
          ("xilinx", 5))
    )


_VidOutFailReason_Type.__name__ = "Integer32"
_VidOutFailReason_Object = MibScalar
vidOutFailReason = _VidOutFailReason_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 18),
    _VidOutFailReason_Type()
)
vidOutFailReason.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidOutFailReason.setStatus("mandatory")


class _VidOutSrcSts_Type(Integer32):
    """Custom type vidOutSrcSts based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("free", 3),
          ("genlock", 1),
          ("through", 2))
    )


_VidOutSrcSts_Type.__name__ = "Integer32"
_VidOutSrcSts_Object = MibScalar
vidOutSrcSts = _VidOutSrcSts_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 27, 19),
    _VidOutSrcSts_Type()
)
vidOutSrcSts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidOutSrcSts.setStatus("mandatory")
_AudInCfg_ObjectIdentity = ObjectIdentity
audInCfg = _AudInCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 28)
)


class _AudInLoopBack_Type(Integer32):
    """Custom type audInLoopBack based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_AudInLoopBack_Type.__name__ = "Integer32"
_AudInLoopBack_Object = MibScalar
audInLoopBack = _AudInLoopBack_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 28, 1),
    _AudInLoopBack_Type()
)
audInLoopBack.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    audInLoopBack.setStatus("mandatory")
_AudOutCfg_ObjectIdentity = ObjectIdentity
audOutCfg = _AudOutCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 29)
)


class _AudOutMute_Type(Integer32):
    """Custom type audOutMute based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_AudOutMute_Type.__name__ = "Integer32"
_AudOutMute_Object = MibScalar
audOutMute = _AudOutMute_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 29, 1),
    _AudOutMute_Type()
)
audOutMute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    audOutMute.setStatus("mandatory")


class _AudOutDigLpbk_Type(Integer32):
    """Custom type audOutDigLpbk based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_AudOutDigLpbk_Type.__name__ = "Integer32"
_AudOutDigLpbk_Object = MibScalar
audOutDigLpbk = _AudOutDigLpbk_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 29, 2),
    _AudOutDigLpbk_Type()
)
audOutDigLpbk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    audOutDigLpbk.setStatus("mandatory")
_AudInSta_ObjectIdentity = ObjectIdentity
audInSta = _AudInSta_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 30)
)
_AudOutSta_ObjectIdentity = ObjectIdentity
audOutSta = _AudOutSta_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 31)
)


class _AudOutLock_Type(Integer32):
    """Custom type audOutLock based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_AudOutLock_Type.__name__ = "Integer32"
_AudOutLock_Object = MibScalar
audOutLock = _AudOutLock_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 31, 1),
    _AudOutLock_Type()
)
audOutLock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    audOutLock.setStatus("mandatory")


class _AudOutMuteStat_Type(Integer32):
    """Custom type audOutMuteStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_AudOutMuteStat_Type.__name__ = "Integer32"
_AudOutMuteStat_Object = MibScalar
audOutMuteStat = _AudOutMuteStat_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 31, 2),
    _AudOutMuteStat_Type()
)
audOutMuteStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    audOutMuteStat.setStatus("mandatory")
_DataCfg_ObjectIdentity = ObjectIdentity
dataCfg = _DataCfg_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 32)
)
_DataIp_Type = IpAddress
_DataIp_Object = MibScalar
dataIp = _DataIp_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 32, 1),
    _DataIp_Type()
)
dataIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dataIp.setStatus("mandatory")
_DataMask_Type = IpAddress
_DataMask_Object = MibScalar
dataMask = _DataMask_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 32, 2),
    _DataMask_Type()
)
dataMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dataMask.setStatus("mandatory")
_DataRemoteIp_Type = IpAddress
_DataRemoteIp_Object = MibScalar
dataRemoteIp = _DataRemoteIp_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 32, 3),
    _DataRemoteIp_Type()
)
dataRemoteIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dataRemoteIp.setStatus("mandatory")
_DataSta_ObjectIdentity = ObjectIdentity
dataSta = _DataSta_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 33)
)
_MjlimControl_ObjectIdentity = ObjectIdentity
mjlimControl = _MjlimControl_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 34)
)


class _SendFileSel_Type(Integer32):
    """Custom type sendFileSel based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("vjlca-cod", 3),
          ("vjlim-cod", 2))
    )


_SendFileSel_Type.__name__ = "Integer32"
_SendFileSel_Object = MibScalar
sendFileSel = _SendFileSel_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 1),
    _SendFileSel_Type()
)
sendFileSel.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sendFileSel.setStatus("mandatory")


class _JpegCurrentFile_Type(Integer32):
    """Custom type jpegCurrentFile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("vjlca-cod", 3),
          ("vjlim-cod", 2))
    )


_JpegCurrentFile_Type.__name__ = "Integer32"
_JpegCurrentFile_Object = MibScalar
jpegCurrentFile = _JpegCurrentFile_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 2),
    _JpegCurrentFile_Type()
)
jpegCurrentFile.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    jpegCurrentFile.setStatus("mandatory")


class _SendFileStat_Type(Integer32):
    """Custom type sendFileStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("aborted", 6),
          ("ack", 5),
          ("continue", 3),
          ("end", 4),
          ("error", 7),
          ("idle", 1),
          ("start", 2))
    )


_SendFileStat_Type.__name__ = "Integer32"
_SendFileStat_Object = MibScalar
sendFileStat = _SendFileStat_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 3),
    _SendFileStat_Type()
)
sendFileStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sendFileStat.setStatus("mandatory")
_SendFileBytes_Type = Integer32
_SendFileBytes_Object = MibScalar
sendFileBytes = _SendFileBytes_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 4),
    _SendFileBytes_Type()
)
sendFileBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sendFileBytes.setStatus("mandatory")


class _JpegReset_Type(Integer32):
    """Custom type jpegReset based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("reset", 2))
    )


_JpegReset_Type.__name__ = "Integer32"
_JpegReset_Object = MibScalar
jpegReset = _JpegReset_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 20),
    _JpegReset_Type()
)
jpegReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    jpegReset.setStatus("mandatory")


class _JpegSaveCfg_Type(Integer32):
    """Custom type jpegSaveCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_JpegSaveCfg_Type.__name__ = "Integer32"
_JpegSaveCfg_Object = MibScalar
jpegSaveCfg = _JpegSaveCfg_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 21),
    _JpegSaveCfg_Type()
)
jpegSaveCfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    jpegSaveCfg.setStatus("mandatory")


class _JpegLoadCfg_Type(Integer32):
    """Custom type jpegLoadCfg based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_JpegLoadCfg_Type.__name__ = "Integer32"
_JpegLoadCfg_Object = MibScalar
jpegLoadCfg = _JpegLoadCfg_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 22),
    _JpegLoadCfg_Type()
)
jpegLoadCfg.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    jpegLoadCfg.setStatus("mandatory")


class _JpegSWRev_Type(DisplayString):
    """Custom type jpegSWRev based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_JpegSWRev_Type.__name__ = "DisplayString"
_JpegSWRev_Object = MibScalar
jpegSWRev = _JpegSWRev_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 34, 40),
    _JpegSWRev_Type()
)
jpegSWRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    jpegSWRev.setStatus("mandatory")
_Dv2PDH_ObjectIdentity = ObjectIdentity
dv2PDH = _Dv2PDH_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35)
)
_PdhPLCPTable_Object = MibTable
pdhPLCPTable = _PdhPLCPTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1)
)
if mibBuilder.loadTexts:
    pdhPLCPTable.setStatus("mandatory")
_PdhPLCPEntry_Object = MibTableRow
pdhPLCPEntry = _PdhPLCPEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1)
)
pdhPLCPEntry.setIndexNames(
    (0, "DV2-MIB", "pdhPLCPLinkNo"),
)
if mibBuilder.loadTexts:
    pdhPLCPEntry.setStatus("mandatory")


class _PdhPLCPLinkNo_Type(Integer32):
    """Custom type pdhPLCPLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_PdhPLCPLinkNo_Type.__name__ = "Integer32"
_PdhPLCPLinkNo_Object = MibTableColumn
pdhPLCPLinkNo = _PdhPLCPLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 1),
    _PdhPLCPLinkNo_Type()
)
pdhPLCPLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPLinkNo.setStatus("mandatory")


class _PdhPLCPLinkEnable_Type(Integer32):
    """Custom type pdhPLCPLinkEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_PdhPLCPLinkEnable_Type.__name__ = "Integer32"
_PdhPLCPLinkEnable_Object = MibTableColumn
pdhPLCPLinkEnable = _PdhPLCPLinkEnable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 2),
    _PdhPLCPLinkEnable_Type()
)
pdhPLCPLinkEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhPLCPLinkEnable.setStatus("mandatory")


class _PdhPLCPLinkStatusAffect_Type(Integer32):
    """Custom type pdhPLCPLinkStatusAffect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ignored", 2),
          ("processed", 1))
    )


_PdhPLCPLinkStatusAffect_Type.__name__ = "Integer32"
_PdhPLCPLinkStatusAffect_Object = MibTableColumn
pdhPLCPLinkStatusAffect = _PdhPLCPLinkStatusAffect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 3),
    _PdhPLCPLinkStatusAffect_Type()
)
pdhPLCPLinkStatusAffect.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhPLCPLinkStatusAffect.setStatus("mandatory")


class _PdhPLCPLinkState_Type(Integer32):
    """Custom type pdhPLCPLinkState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_PdhPLCPLinkState_Type.__name__ = "Integer32"
_PdhPLCPLinkState_Object = MibTableColumn
pdhPLCPLinkState = _PdhPLCPLinkState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 4),
    _PdhPLCPLinkState_Type()
)
pdhPLCPLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPLinkState.setStatus("mandatory")


class _PdhPLCPPhyMode_Type(Integer32):
    """Custom type pdhPLCPPhyMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ds3", 2),
          ("e3", 3),
          ("none", 1))
    )


_PdhPLCPPhyMode_Type.__name__ = "Integer32"
_PdhPLCPPhyMode_Object = MibTableColumn
pdhPLCPPhyMode = _PdhPLCPPhyMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 5),
    _PdhPLCPPhyMode_Type()
)
pdhPLCPPhyMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhPLCPPhyMode.setStatus("mandatory")


class _PdhPLCPMode_Type(Integer32):
    """Custom type pdhPLCPMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("ds1-PLCP", 2),
          ("ds3-PLCP", 3),
          ("e1-PLCP", 4),
          ("e3-g751-PLCP", 5),
          ("hec-based-delineation", 1))
    )


_PdhPLCPMode_Type.__name__ = "Integer32"
_PdhPLCPMode_Object = MibTableColumn
pdhPLCPMode = _PdhPLCPMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 6),
    _PdhPLCPMode_Type()
)
pdhPLCPMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhPLCPMode.setStatus("mandatory")


class _PdhPLCPScrambler_Type(Integer32):
    """Custom type pdhPLCPScrambler based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_PdhPLCPScrambler_Type.__name__ = "Integer32"
_PdhPLCPScrambler_Object = MibTableColumn
pdhPLCPScrambler = _PdhPLCPScrambler_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 7),
    _PdhPLCPScrambler_Type()
)
pdhPLCPScrambler.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhPLCPScrambler.setStatus("mandatory")


class _PdhPLCP0x55_Type(Integer32):
    """Custom type pdhPLCP0x55 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_PdhPLCP0x55_Type.__name__ = "Integer32"
_PdhPLCP0x55_Object = MibTableColumn
pdhPLCP0x55 = _PdhPLCP0x55_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 8),
    _PdhPLCP0x55_Type()
)
pdhPLCP0x55.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhPLCP0x55.setStatus("mandatory")


class _PdhPLCPSmdsMode_Type(Integer32):
    """Custom type pdhPLCPSmdsMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_PdhPLCPSmdsMode_Type.__name__ = "Integer32"
_PdhPLCPSmdsMode_Object = MibTableColumn
pdhPLCPSmdsMode = _PdhPLCPSmdsMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 9),
    _PdhPLCPSmdsMode_Type()
)
pdhPLCPSmdsMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhPLCPSmdsMode.setStatus("mandatory")


class _PdhPLCPIdleCell_Type(Integer32):
    """Custom type pdhPLCPIdleCell based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("idle", 2),
          ("unassigned", 1))
    )


_PdhPLCPIdleCell_Type.__name__ = "Integer32"
_PdhPLCPIdleCell_Object = MibTableColumn
pdhPLCPIdleCell = _PdhPLCPIdleCell_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 10),
    _PdhPLCPIdleCell_Type()
)
pdhPLCPIdleCell.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhPLCPIdleCell.setStatus("mandatory")


class _PdhPLCPLoopback_Type(Integer32):
    """Custom type pdhPLCPLoopback based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("cell-lpbk", 5),
          ("diagnostic-lpbk", 2),
          ("line-lpbk", 3),
          ("none", 1),
          ("payload-lpbk", 4))
    )


_PdhPLCPLoopback_Type.__name__ = "Integer32"
_PdhPLCPLoopback_Object = MibTableColumn
pdhPLCPLoopback = _PdhPLCPLoopback_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 11),
    _PdhPLCPLoopback_Type()
)
pdhPLCPLoopback.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhPLCPLoopback.setStatus("mandatory")


class _PdhPLCPClear_Type(Integer32):
    """Custom type pdhPLCPClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhPLCPClear_Type.__name__ = "Integer32"
_PdhPLCPClear_Object = MibTableColumn
pdhPLCPClear = _PdhPLCPClear_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 12),
    _PdhPLCPClear_Type()
)
pdhPLCPClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhPLCPClear.setStatus("mandatory")


class _PdhPLCPReconfig_Type(Integer32):
    """Custom type pdhPLCPReconfig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhPLCPReconfig_Type.__name__ = "Integer32"
_PdhPLCPReconfig_Object = MibTableColumn
pdhPLCPReconfig = _PdhPLCPReconfig_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 13),
    _PdhPLCPReconfig_Type()
)
pdhPLCPReconfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhPLCPReconfig.setStatus("mandatory")


class _PdhPLCPLpbkTimeout_Type(Integer32):
    """Custom type pdhPLCPLpbkTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 604800),
    )


_PdhPLCPLpbkTimeout_Type.__name__ = "Integer32"
_PdhPLCPLpbkTimeout_Object = MibTableColumn
pdhPLCPLpbkTimeout = _PdhPLCPLpbkTimeout_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 14),
    _PdhPLCPLpbkTimeout_Type()
)
pdhPLCPLpbkTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhPLCPLpbkTimeout.setStatus("mandatory")


class _PdhPLCPChipType_Type(Integer32):
    """Custom type pdhPLCPChipType based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("plpp", 1),
          ("suni-pdh", 2),
          ("unknown", 3))
    )


_PdhPLCPChipType_Type.__name__ = "Integer32"
_PdhPLCPChipType_Object = MibTableColumn
pdhPLCPChipType = _PdhPLCPChipType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 32),
    _PdhPLCPChipType_Type()
)
pdhPLCPChipType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPChipType.setStatus("mandatory")


class _PdhPLCPTXclock_Type(Integer32):
    """Custom type pdhPLCPTXclock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_PdhPLCPTXclock_Type.__name__ = "Integer32"
_PdhPLCPTXclock_Object = MibTableColumn
pdhPLCPTXclock = _PdhPLCPTXclock_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 33),
    _PdhPLCPTXclock_Type()
)
pdhPLCPTXclock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPTXclock.setStatus("mandatory")


class _PdhPLCPRXclock_Type(Integer32):
    """Custom type pdhPLCPRXclock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_PdhPLCPRXclock_Type.__name__ = "Integer32"
_PdhPLCPRXclock_Object = MibTableColumn
pdhPLCPRXclock = _PdhPLCPRXclock_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 34),
    _PdhPLCPRXclock_Type()
)
pdhPLCPRXclock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPRXclock.setStatus("mandatory")
_PdhPLCPTXCells_Type = Counter32
_PdhPLCPTXCells_Object = MibTableColumn
pdhPLCPTXCells = _PdhPLCPTXCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 35),
    _PdhPLCPTXCells_Type()
)
pdhPLCPTXCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPTXCells.setStatus("mandatory")
_PdhPLCPRXCells_Type = Counter32
_PdhPLCPRXCells_Object = MibTableColumn
pdhPLCPRXCells = _PdhPLCPRXCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 36),
    _PdhPLCPRXCells_Type()
)
pdhPLCPRXCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPRXCells.setStatus("mandatory")
_PdhPLCPHCSErrs_Type = Counter32
_PdhPLCPHCSErrs_Object = MibTableColumn
pdhPLCPHCSErrs = _PdhPLCPHCSErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 37),
    _PdhPLCPHCSErrs_Type()
)
pdhPLCPHCSErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPHCSErrs.setStatus("mandatory")


class _PdhPLCPLOCDDefect_Type(Integer32):
    """Custom type pdhPLCPLOCDDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhPLCPLOCDDefect_Type.__name__ = "Integer32"
_PdhPLCPLOCDDefect_Object = MibTableColumn
pdhPLCPLOCDDefect = _PdhPLCPLOCDDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 43),
    _PdhPLCPLOCDDefect_Type()
)
pdhPLCPLOCDDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPLOCDDefect.setStatus("mandatory")


class _PdhPLCPYellowDefect_Type(Integer32):
    """Custom type pdhPLCPYellowDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhPLCPYellowDefect_Type.__name__ = "Integer32"
_PdhPLCPYellowDefect_Object = MibTableColumn
pdhPLCPYellowDefect = _PdhPLCPYellowDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 44),
    _PdhPLCPYellowDefect_Type()
)
pdhPLCPYellowDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPYellowDefect.setStatus("mandatory")


class _PdhPLCPLOFDefect_Type(Integer32):
    """Custom type pdhPLCPLOFDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhPLCPLOFDefect_Type.__name__ = "Integer32"
_PdhPLCPLOFDefect_Object = MibTableColumn
pdhPLCPLOFDefect = _PdhPLCPLOFDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 45),
    _PdhPLCPLOFDefect_Type()
)
pdhPLCPLOFDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPLOFDefect.setStatus("mandatory")


class _PdhPLCPLOCDAlarm_Type(Integer32):
    """Custom type pdhPLCPLOCDAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhPLCPLOCDAlarm_Type.__name__ = "Integer32"
_PdhPLCPLOCDAlarm_Object = MibTableColumn
pdhPLCPLOCDAlarm = _PdhPLCPLOCDAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 49),
    _PdhPLCPLOCDAlarm_Type()
)
pdhPLCPLOCDAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPLOCDAlarm.setStatus("mandatory")


class _PdhPLCPYellowAlarm_Type(Integer32):
    """Custom type pdhPLCPYellowAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhPLCPYellowAlarm_Type.__name__ = "Integer32"
_PdhPLCPYellowAlarm_Object = MibTableColumn
pdhPLCPYellowAlarm = _PdhPLCPYellowAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 50),
    _PdhPLCPYellowAlarm_Type()
)
pdhPLCPYellowAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPYellowAlarm.setStatus("mandatory")


class _PdhPLCPLOFAlarm_Type(Integer32):
    """Custom type pdhPLCPLOFAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhPLCPLOFAlarm_Type.__name__ = "Integer32"
_PdhPLCPLOFAlarm_Object = MibTableColumn
pdhPLCPLOFAlarm = _PdhPLCPLOFAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 51),
    _PdhPLCPLOFAlarm_Type()
)
pdhPLCPLOFAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPLOFAlarm.setStatus("mandatory")
_PdhPLCPFrameErrs_Type = Counter32
_PdhPLCPFrameErrs_Object = MibTableColumn
pdhPLCPFrameErrs = _PdhPLCPFrameErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 56),
    _PdhPLCPFrameErrs_Type()
)
pdhPLCPFrameErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPFrameErrs.setStatus("mandatory")
_PdhPLCPBIP8Errs_Type = Counter32
_PdhPLCPBIP8Errs_Object = MibTableColumn
pdhPLCPBIP8Errs = _PdhPLCPBIP8Errs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 57),
    _PdhPLCPBIP8Errs_Type()
)
pdhPLCPBIP8Errs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPBIP8Errs.setStatus("mandatory")
_PdhPLCPFEBEErrs_Type = Counter32
_PdhPLCPFEBEErrs_Object = MibTableColumn
pdhPLCPFEBEErrs = _PdhPLCPFEBEErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 58),
    _PdhPLCPFEBEErrs_Type()
)
pdhPLCPFEBEErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPFEBEErrs.setStatus("mandatory")
_PdhPLCPES_Type = Counter32
_PdhPLCPES_Object = MibTableColumn
pdhPLCPES = _PdhPLCPES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 63),
    _PdhPLCPES_Type()
)
pdhPLCPES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPES.setStatus("mandatory")
_PdhPLCPSES_Type = Counter32
_PdhPLCPSES_Object = MibTableColumn
pdhPLCPSES = _PdhPLCPSES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 64),
    _PdhPLCPSES_Type()
)
pdhPLCPSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPSES.setStatus("mandatory")
_PdhPLCPUAS_Type = Counter32
_PdhPLCPUAS_Object = MibTableColumn
pdhPLCPUAS = _PdhPLCPUAS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 65),
    _PdhPLCPUAS_Type()
)
pdhPLCPUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPUAS.setStatus("mandatory")
_PdhPLCPFEES_Type = Counter32
_PdhPLCPFEES_Object = MibTableColumn
pdhPLCPFEES = _PdhPLCPFEES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 66),
    _PdhPLCPFEES_Type()
)
pdhPLCPFEES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPFEES.setStatus("mandatory")
_PdhPLCPFESES_Type = Counter32
_PdhPLCPFESES_Object = MibTableColumn
pdhPLCPFESES = _PdhPLCPFESES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 67),
    _PdhPLCPFESES_Type()
)
pdhPLCPFESES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPFESES.setStatus("mandatory")
_PdhPLCPFEUAS_Type = Counter32
_PdhPLCPFEUAS_Object = MibTableColumn
pdhPLCPFEUAS = _PdhPLCPFEUAS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 1, 1, 68),
    _PdhPLCPFEUAS_Type()
)
pdhPLCPFEUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhPLCPFEUAS.setStatus("mandatory")
_PdhDS3Table_Object = MibTable
pdhDS3Table = _PdhDS3Table_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2)
)
if mibBuilder.loadTexts:
    pdhDS3Table.setStatus("mandatory")
_PdhDS3Entry_Object = MibTableRow
pdhDS3Entry = _PdhDS3Entry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1)
)
pdhDS3Entry.setIndexNames(
    (0, "DV2-MIB", "pdhDS3LinkNo"),
)
if mibBuilder.loadTexts:
    pdhDS3Entry.setStatus("mandatory")


class _PdhDS3TableValid_Type(Integer32):
    """Custom type pdhDS3TableValid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhDS3TableValid_Type.__name__ = "Integer32"
_PdhDS3TableValid_Object = MibTableColumn
pdhDS3TableValid = _PdhDS3TableValid_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 1),
    _PdhDS3TableValid_Type()
)
pdhDS3TableValid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3TableValid.setStatus("mandatory")


class _PdhDS3LinkNo_Type(Integer32):
    """Custom type pdhDS3LinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_PdhDS3LinkNo_Type.__name__ = "Integer32"
_PdhDS3LinkNo_Object = MibTableColumn
pdhDS3LinkNo = _PdhDS3LinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 2),
    _PdhDS3LinkNo_Type()
)
pdhDS3LinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3LinkNo.setStatus("mandatory")


class _PdhDS3Framer_Type(Integer32):
    """Custom type pdhDS3Framer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("c-bit", 1),
          ("m23", 2))
    )


_PdhDS3Framer_Type.__name__ = "Integer32"
_PdhDS3Framer_Object = MibTableColumn
pdhDS3Framer = _PdhDS3Framer_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 3),
    _PdhDS3Framer_Type()
)
pdhDS3Framer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhDS3Framer.setStatus("mandatory")


class _PdhDS3TxAIS_Type(Integer32):
    """Custom type pdhDS3TxAIS based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhDS3TxAIS_Type.__name__ = "Integer32"
_PdhDS3TxAIS_Object = MibTableColumn
pdhDS3TxAIS = _PdhDS3TxAIS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 4),
    _PdhDS3TxAIS_Type()
)
pdhDS3TxAIS.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhDS3TxAIS.setStatus("mandatory")


class _PdhDS3Clear_Type(Integer32):
    """Custom type pdhDS3Clear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhDS3Clear_Type.__name__ = "Integer32"
_PdhDS3Clear_Object = MibTableColumn
pdhDS3Clear = _PdhDS3Clear_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 5),
    _PdhDS3Clear_Type()
)
pdhDS3Clear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhDS3Clear.setStatus("mandatory")


class _PdhDS3Reconfig_Type(Integer32):
    """Custom type pdhDS3Reconfig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhDS3Reconfig_Type.__name__ = "Integer32"
_PdhDS3Reconfig_Object = MibTableColumn
pdhDS3Reconfig = _PdhDS3Reconfig_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 6),
    _PdhDS3Reconfig_Type()
)
pdhDS3Reconfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhDS3Reconfig.setStatus("mandatory")


class _PdhDS3RxFrmFmt_Type(Integer32):
    """Custom type pdhDS3RxFrmFmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("c-bit", 1),
          ("clear-channel", 2))
    )


_PdhDS3RxFrmFmt_Type.__name__ = "Integer32"
_PdhDS3RxFrmFmt_Object = MibTableColumn
pdhDS3RxFrmFmt = _PdhDS3RxFrmFmt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 26),
    _PdhDS3RxFrmFmt_Type()
)
pdhDS3RxFrmFmt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3RxFrmFmt.setStatus("mandatory")


class _PdhDS3RxIDL_Type(Integer32):
    """Custom type pdhDS3RxIDL based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhDS3RxIDL_Type.__name__ = "Integer32"
_PdhDS3RxIDL_Object = MibTableColumn
pdhDS3RxIDL = _PdhDS3RxIDL_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 27),
    _PdhDS3RxIDL_Type()
)
pdhDS3RxIDL.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3RxIDL.setStatus("mandatory")


class _PdhDS3FEACTxmt_Type(Integer32):
    """Custom type pdhDS3FEACTxmt based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("ds3-ais", 3),
          ("ds3-idl", 4),
          ("ds3-los", 1),
          ("ds3-oof", 2),
          ("line-loopback-active", 6),
          ("line-loopback-deactive", 5),
          ("none", 7))
    )


_PdhDS3FEACTxmt_Type.__name__ = "Integer32"
_PdhDS3FEACTxmt_Object = MibTableColumn
pdhDS3FEACTxmt = _PdhDS3FEACTxmt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 28),
    _PdhDS3FEACTxmt_Type()
)
pdhDS3FEACTxmt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3FEACTxmt.setStatus("mandatory")
_PdhDS3Lcvs_Type = Counter32
_PdhDS3Lcvs_Object = MibTableColumn
pdhDS3Lcvs = _PdhDS3Lcvs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 33),
    _PdhDS3Lcvs_Type()
)
pdhDS3Lcvs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3Lcvs.setStatus("mandatory")
_PdhDS3FrameErrs_Type = Counter32
_PdhDS3FrameErrs_Object = MibTableColumn
pdhDS3FrameErrs = _PdhDS3FrameErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 34),
    _PdhDS3FrameErrs_Type()
)
pdhDS3FrameErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3FrameErrs.setStatus("mandatory")
_PdhDS3ParityErrs_Type = Counter32
_PdhDS3ParityErrs_Object = MibTableColumn
pdhDS3ParityErrs = _PdhDS3ParityErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 35),
    _PdhDS3ParityErrs_Type()
)
pdhDS3ParityErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3ParityErrs.setStatus("mandatory")
_PdhDS3CbitPrtyErrs_Type = Counter32
_PdhDS3CbitPrtyErrs_Object = MibTableColumn
pdhDS3CbitPrtyErrs = _PdhDS3CbitPrtyErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 36),
    _PdhDS3CbitPrtyErrs_Type()
)
pdhDS3CbitPrtyErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3CbitPrtyErrs.setStatus("mandatory")
_PdhDS3FEBEErrs_Type = Counter32
_PdhDS3FEBEErrs_Object = MibTableColumn
pdhDS3FEBEErrs = _PdhDS3FEBEErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 37),
    _PdhDS3FEBEErrs_Type()
)
pdhDS3FEBEErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3FEBEErrs.setStatus("mandatory")


class _PdhDS3LOSDefect_Type(Integer32):
    """Custom type pdhDS3LOSDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhDS3LOSDefect_Type.__name__ = "Integer32"
_PdhDS3LOSDefect_Object = MibTableColumn
pdhDS3LOSDefect = _PdhDS3LOSDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 43),
    _PdhDS3LOSDefect_Type()
)
pdhDS3LOSDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3LOSDefect.setStatus("mandatory")


class _PdhDS3OOFDefect_Type(Integer32):
    """Custom type pdhDS3OOFDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhDS3OOFDefect_Type.__name__ = "Integer32"
_PdhDS3OOFDefect_Object = MibTableColumn
pdhDS3OOFDefect = _PdhDS3OOFDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 44),
    _PdhDS3OOFDefect_Type()
)
pdhDS3OOFDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3OOFDefect.setStatus("mandatory")


class _PdhDS3AISDefect_Type(Integer32):
    """Custom type pdhDS3AISDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhDS3AISDefect_Type.__name__ = "Integer32"
_PdhDS3AISDefect_Object = MibTableColumn
pdhDS3AISDefect = _PdhDS3AISDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 45),
    _PdhDS3AISDefect_Type()
)
pdhDS3AISDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3AISDefect.setStatus("mandatory")


class _PdhDS3YellowDefect_Type(Integer32):
    """Custom type pdhDS3YellowDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhDS3YellowDefect_Type.__name__ = "Integer32"
_PdhDS3YellowDefect_Object = MibTableColumn
pdhDS3YellowDefect = _PdhDS3YellowDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 46),
    _PdhDS3YellowDefect_Type()
)
pdhDS3YellowDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3YellowDefect.setStatus("mandatory")


class _PdhDS3ExBERDefect_Type(Integer32):
    """Custom type pdhDS3ExBERDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhDS3ExBERDefect_Type.__name__ = "Integer32"
_PdhDS3ExBERDefect_Object = MibTableColumn
pdhDS3ExBERDefect = _PdhDS3ExBERDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 47),
    _PdhDS3ExBERDefect_Type()
)
pdhDS3ExBERDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3ExBERDefect.setStatus("mandatory")


class _PdhDS3LOSAlarm_Type(Integer32):
    """Custom type pdhDS3LOSAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhDS3LOSAlarm_Type.__name__ = "Integer32"
_PdhDS3LOSAlarm_Object = MibTableColumn
pdhDS3LOSAlarm = _PdhDS3LOSAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 53),
    _PdhDS3LOSAlarm_Type()
)
pdhDS3LOSAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3LOSAlarm.setStatus("mandatory")


class _PdhDS3LOFAlarm_Type(Integer32):
    """Custom type pdhDS3LOFAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhDS3LOFAlarm_Type.__name__ = "Integer32"
_PdhDS3LOFAlarm_Object = MibTableColumn
pdhDS3LOFAlarm = _PdhDS3LOFAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 54),
    _PdhDS3LOFAlarm_Type()
)
pdhDS3LOFAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3LOFAlarm.setStatus("mandatory")


class _PdhDS3AISAlarm_Type(Integer32):
    """Custom type pdhDS3AISAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhDS3AISAlarm_Type.__name__ = "Integer32"
_PdhDS3AISAlarm_Object = MibTableColumn
pdhDS3AISAlarm = _PdhDS3AISAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 55),
    _PdhDS3AISAlarm_Type()
)
pdhDS3AISAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3AISAlarm.setStatus("mandatory")


class _PdhDS3YellowAlarm_Type(Integer32):
    """Custom type pdhDS3YellowAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhDS3YellowAlarm_Type.__name__ = "Integer32"
_PdhDS3YellowAlarm_Object = MibTableColumn
pdhDS3YellowAlarm = _PdhDS3YellowAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 56),
    _PdhDS3YellowAlarm_Type()
)
pdhDS3YellowAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3YellowAlarm.setStatus("mandatory")


class _PdhDS3ExBERAlarm_Type(Integer32):
    """Custom type pdhDS3ExBERAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhDS3ExBERAlarm_Type.__name__ = "Integer32"
_PdhDS3ExBERAlarm_Object = MibTableColumn
pdhDS3ExBERAlarm = _PdhDS3ExBERAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 57),
    _PdhDS3ExBERAlarm_Type()
)
pdhDS3ExBERAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3ExBERAlarm.setStatus("mandatory")
_PdhDS3LES_Type = Counter32
_PdhDS3LES_Object = MibTableColumn
pdhDS3LES = _PdhDS3LES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 63),
    _PdhDS3LES_Type()
)
pdhDS3LES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3LES.setStatus("mandatory")
_PdhDS3LSES_Type = Counter32
_PdhDS3LSES_Object = MibTableColumn
pdhDS3LSES = _PdhDS3LSES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 64),
    _PdhDS3LSES_Type()
)
pdhDS3LSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3LSES.setStatus("mandatory")
_PdhDS3ES_Type = Counter32
_PdhDS3ES_Object = MibTableColumn
pdhDS3ES = _PdhDS3ES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 65),
    _PdhDS3ES_Type()
)
pdhDS3ES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3ES.setStatus("mandatory")
_PdhDS3ES2_Type = Counter32
_PdhDS3ES2_Object = MibTableColumn
pdhDS3ES2 = _PdhDS3ES2_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 66),
    _PdhDS3ES2_Type()
)
pdhDS3ES2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3ES2.setStatus("mandatory")
_PdhDS3SES_Type = Counter32
_PdhDS3SES_Object = MibTableColumn
pdhDS3SES = _PdhDS3SES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 67),
    _PdhDS3SES_Type()
)
pdhDS3SES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3SES.setStatus("mandatory")
_PdhDS3SES2_Type = Counter32
_PdhDS3SES2_Object = MibTableColumn
pdhDS3SES2 = _PdhDS3SES2_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 68),
    _PdhDS3SES2_Type()
)
pdhDS3SES2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3SES2.setStatus("mandatory")
_PdhDS3AISS_Type = Counter32
_PdhDS3AISS_Object = MibTableColumn
pdhDS3AISS = _PdhDS3AISS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 69),
    _PdhDS3AISS_Type()
)
pdhDS3AISS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3AISS.setStatus("mandatory")
_PdhDS3UAS_Type = Counter32
_PdhDS3UAS_Object = MibTableColumn
pdhDS3UAS = _PdhDS3UAS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 70),
    _PdhDS3UAS_Type()
)
pdhDS3UAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3UAS.setStatus("mandatory")
_PdhDS3FarEndES_Type = Counter32
_PdhDS3FarEndES_Object = MibTableColumn
pdhDS3FarEndES = _PdhDS3FarEndES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 71),
    _PdhDS3FarEndES_Type()
)
pdhDS3FarEndES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3FarEndES.setStatus("mandatory")
_PdhDS3FarEndSES_Type = Counter32
_PdhDS3FarEndSES_Object = MibTableColumn
pdhDS3FarEndSES = _PdhDS3FarEndSES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 72),
    _PdhDS3FarEndSES_Type()
)
pdhDS3FarEndSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3FarEndSES.setStatus("mandatory")
_PdhDS3FarEndUAS_Type = Counter32
_PdhDS3FarEndUAS_Object = MibTableColumn
pdhDS3FarEndUAS = _PdhDS3FarEndUAS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 2, 1, 73),
    _PdhDS3FarEndUAS_Type()
)
pdhDS3FarEndUAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhDS3FarEndUAS.setStatus("mandatory")
_PdhE3Table_Object = MibTable
pdhE3Table = _PdhE3Table_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3)
)
if mibBuilder.loadTexts:
    pdhE3Table.setStatus("mandatory")
_PdhE3Entry_Object = MibTableRow
pdhE3Entry = _PdhE3Entry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1)
)
pdhE3Entry.setIndexNames(
    (0, "DV2-MIB", "pdhE3LinkNo"),
)
if mibBuilder.loadTexts:
    pdhE3Entry.setStatus("mandatory")


class _PdhE3TableValid_Type(Integer32):
    """Custom type pdhE3TableValid based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhE3TableValid_Type.__name__ = "Integer32"
_PdhE3TableValid_Object = MibTableColumn
pdhE3TableValid = _PdhE3TableValid_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 1),
    _PdhE3TableValid_Type()
)
pdhE3TableValid.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3TableValid.setStatus("mandatory")


class _PdhE3LinkNo_Type(Integer32):
    """Custom type pdhE3LinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_PdhE3LinkNo_Type.__name__ = "Integer32"
_PdhE3LinkNo_Object = MibTableColumn
pdhE3LinkNo = _PdhE3LinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 2),
    _PdhE3LinkNo_Type()
)
pdhE3LinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3LinkNo.setStatus("mandatory")


class _PdhE3Framer_Type(Integer32):
    """Custom type pdhE3Framer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("g751", 1),
          ("g832", 2))
    )


_PdhE3Framer_Type.__name__ = "Integer32"
_PdhE3Framer_Object = MibTableColumn
pdhE3Framer = _PdhE3Framer_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 3),
    _PdhE3Framer_Type()
)
pdhE3Framer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhE3Framer.setStatus("mandatory")


class _PdhE3Clear_Type(Integer32):
    """Custom type pdhE3Clear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhE3Clear_Type.__name__ = "Integer32"
_PdhE3Clear_Object = MibTableColumn
pdhE3Clear = _PdhE3Clear_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 4),
    _PdhE3Clear_Type()
)
pdhE3Clear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhE3Clear.setStatus("mandatory")


class _PdhE3Reconfig_Type(Integer32):
    """Custom type pdhE3Reconfig based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhE3Reconfig_Type.__name__ = "Integer32"
_PdhE3Reconfig_Object = MibTableColumn
pdhE3Reconfig = _PdhE3Reconfig_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 5),
    _PdhE3Reconfig_Type()
)
pdhE3Reconfig.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhE3Reconfig.setStatus("mandatory")


class _PdhE3TxmtTimMk_Type(Integer32):
    """Custom type pdhE3TxmtTimMk based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhE3TxmtTimMk_Type.__name__ = "Integer32"
_PdhE3TxmtTimMk_Object = MibTableColumn
pdhE3TxmtTimMk = _PdhE3TxmtTimMk_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 6),
    _PdhE3TxmtTimMk_Type()
)
pdhE3TxmtTimMk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhE3TxmtTimMk.setStatus("mandatory")


class _PdhE3PloadTypeLab_Type(Integer32):
    """Custom type pdhE3PloadTypeLab based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            2
        )
    )
    namedValues = NamedValues(
        ("atm", 2)
    )


_PdhE3PloadTypeLab_Type.__name__ = "Integer32"
_PdhE3PloadTypeLab_Object = MibTableColumn
pdhE3PloadTypeLab = _PdhE3PloadTypeLab_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 7),
    _PdhE3PloadTypeLab_Type()
)
pdhE3PloadTypeLab.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhE3PloadTypeLab.setStatus("mandatory")


class _PdhE3TxTrlTrcIdLen_Type(Integer32):
    """Custom type pdhE3TxTrlTrcIdLen based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            16
        )
    )
    namedValues = NamedValues(
        ("length-16", 16)
    )


_PdhE3TxTrlTrcIdLen_Type.__name__ = "Integer32"
_PdhE3TxTrlTrcIdLen_Object = MibTableColumn
pdhE3TxTrlTrcIdLen = _PdhE3TxTrlTrcIdLen_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 8),
    _PdhE3TxTrlTrcIdLen_Type()
)
pdhE3TxTrlTrcIdLen.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhE3TxTrlTrcIdLen.setStatus("mandatory")
_PdhE3TxTrcIdUH_Type = PhysAddress
_PdhE3TxTrcIdUH_Object = MibTableColumn
pdhE3TxTrcIdUH = _PdhE3TxTrcIdUH_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 9),
    _PdhE3TxTrcIdUH_Type()
)
pdhE3TxTrcIdUH.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhE3TxTrcIdUH.setStatus("mandatory")
_PdhE3TxTrcIdLH_Type = PhysAddress
_PdhE3TxTrcIdLH_Object = MibTableColumn
pdhE3TxTrcIdLH = _PdhE3TxTrcIdLH_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 10),
    _PdhE3TxTrcIdLH_Type()
)
pdhE3TxTrcIdLH.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhE3TxTrcIdLH.setStatus("mandatory")
_PdhE3RxExTrcIdUH_Type = PhysAddress
_PdhE3RxExTrcIdUH_Object = MibTableColumn
pdhE3RxExTrcIdUH = _PdhE3RxExTrcIdUH_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 11),
    _PdhE3RxExTrcIdUH_Type()
)
pdhE3RxExTrcIdUH.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhE3RxExTrcIdUH.setStatus("mandatory")
_PdhE3RxExTrcIdLH_Type = PhysAddress
_PdhE3RxExTrcIdLH_Object = MibTableColumn
pdhE3RxExTrcIdLH = _PdhE3RxExTrcIdLH_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 12),
    _PdhE3RxExTrcIdLH_Type()
)
pdhE3RxExTrcIdLH.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    pdhE3RxExTrcIdLH.setStatus("mandatory")
_PdhE3FrameErrs_Type = Counter32
_PdhE3FrameErrs_Object = MibTableColumn
pdhE3FrameErrs = _PdhE3FrameErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 32),
    _PdhE3FrameErrs_Type()
)
pdhE3FrameErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3FrameErrs.setStatus("mandatory")
_PdhE3Lcvs_Type = Counter32
_PdhE3Lcvs_Object = MibTableColumn
pdhE3Lcvs = _PdhE3Lcvs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 33),
    _PdhE3Lcvs_Type()
)
pdhE3Lcvs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3Lcvs.setStatus("mandatory")
_PdhE3ParityErrs_Type = Counter32
_PdhE3ParityErrs_Object = MibTableColumn
pdhE3ParityErrs = _PdhE3ParityErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 34),
    _PdhE3ParityErrs_Type()
)
pdhE3ParityErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3ParityErrs.setStatus("mandatory")
_PdhE3FEBEErrs_Type = Counter32
_PdhE3FEBEErrs_Object = MibTableColumn
pdhE3FEBEErrs = _PdhE3FEBEErrs_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 35),
    _PdhE3FEBEErrs_Type()
)
pdhE3FEBEErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3FEBEErrs.setStatus("mandatory")


class _PdhE3LOSDefect_Type(Integer32):
    """Custom type pdhE3LOSDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhE3LOSDefect_Type.__name__ = "Integer32"
_PdhE3LOSDefect_Object = MibTableColumn
pdhE3LOSDefect = _PdhE3LOSDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 41),
    _PdhE3LOSDefect_Type()
)
pdhE3LOSDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3LOSDefect.setStatus("mandatory")


class _PdhE3OOFDefect_Type(Integer32):
    """Custom type pdhE3OOFDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhE3OOFDefect_Type.__name__ = "Integer32"
_PdhE3OOFDefect_Object = MibTableColumn
pdhE3OOFDefect = _PdhE3OOFDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 42),
    _PdhE3OOFDefect_Type()
)
pdhE3OOFDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3OOFDefect.setStatus("mandatory")


class _PdhE3AISDefect_Type(Integer32):
    """Custom type pdhE3AISDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhE3AISDefect_Type.__name__ = "Integer32"
_PdhE3AISDefect_Object = MibTableColumn
pdhE3AISDefect = _PdhE3AISDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 43),
    _PdhE3AISDefect_Type()
)
pdhE3AISDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3AISDefect.setStatus("mandatory")


class _PdhE3FERFDefect_Type(Integer32):
    """Custom type pdhE3FERFDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhE3FERFDefect_Type.__name__ = "Integer32"
_PdhE3FERFDefect_Object = MibTableColumn
pdhE3FERFDefect = _PdhE3FERFDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 44),
    _PdhE3FERFDefect_Type()
)
pdhE3FERFDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3FERFDefect.setStatus("mandatory")


class _PdhE3ExBERDefect_Type(Integer32):
    """Custom type pdhE3ExBERDefect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhE3ExBERDefect_Type.__name__ = "Integer32"
_PdhE3ExBERDefect_Object = MibTableColumn
pdhE3ExBERDefect = _PdhE3ExBERDefect_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 45),
    _PdhE3ExBERDefect_Type()
)
pdhE3ExBERDefect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3ExBERDefect.setStatus("mandatory")


class _PdhE3LOSAlarm_Type(Integer32):
    """Custom type pdhE3LOSAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhE3LOSAlarm_Type.__name__ = "Integer32"
_PdhE3LOSAlarm_Object = MibTableColumn
pdhE3LOSAlarm = _PdhE3LOSAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 51),
    _PdhE3LOSAlarm_Type()
)
pdhE3LOSAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3LOSAlarm.setStatus("mandatory")


class _PdhE3LOFAlarm_Type(Integer32):
    """Custom type pdhE3LOFAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhE3LOFAlarm_Type.__name__ = "Integer32"
_PdhE3LOFAlarm_Object = MibTableColumn
pdhE3LOFAlarm = _PdhE3LOFAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 52),
    _PdhE3LOFAlarm_Type()
)
pdhE3LOFAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3LOFAlarm.setStatus("mandatory")


class _PdhE3AISAlarm_Type(Integer32):
    """Custom type pdhE3AISAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhE3AISAlarm_Type.__name__ = "Integer32"
_PdhE3AISAlarm_Object = MibTableColumn
pdhE3AISAlarm = _PdhE3AISAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 53),
    _PdhE3AISAlarm_Type()
)
pdhE3AISAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3AISAlarm.setStatus("mandatory")


class _PdhE3FERFAlarm_Type(Integer32):
    """Custom type pdhE3FERFAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhE3FERFAlarm_Type.__name__ = "Integer32"
_PdhE3FERFAlarm_Object = MibTableColumn
pdhE3FERFAlarm = _PdhE3FERFAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 54),
    _PdhE3FERFAlarm_Type()
)
pdhE3FERFAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3FERFAlarm.setStatus("mandatory")


class _PdhE3ExBERAlarm_Type(Integer32):
    """Custom type pdhE3ExBERAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhE3ExBERAlarm_Type.__name__ = "Integer32"
_PdhE3ExBERAlarm_Object = MibTableColumn
pdhE3ExBERAlarm = _PdhE3ExBERAlarm_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 55),
    _PdhE3ExBERAlarm_Type()
)
pdhE3ExBERAlarm.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3ExBERAlarm.setStatus("mandatory")
_PdhE3LES_Type = Counter32
_PdhE3LES_Object = MibTableColumn
pdhE3LES = _PdhE3LES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 61),
    _PdhE3LES_Type()
)
pdhE3LES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3LES.setStatus("mandatory")
_PdhE3LSES_Type = Counter32
_PdhE3LSES_Object = MibTableColumn
pdhE3LSES = _PdhE3LSES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 62),
    _PdhE3LSES_Type()
)
pdhE3LSES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3LSES.setStatus("mandatory")
_PdhE3ES_Type = Counter32
_PdhE3ES_Object = MibTableColumn
pdhE3ES = _PdhE3ES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 63),
    _PdhE3ES_Type()
)
pdhE3ES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3ES.setStatus("mandatory")
_PdhE3SES_Type = Counter32
_PdhE3SES_Object = MibTableColumn
pdhE3SES = _PdhE3SES_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 64),
    _PdhE3SES_Type()
)
pdhE3SES.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3SES.setStatus("mandatory")
_PdhE3AISS_Type = Counter32
_PdhE3AISS_Object = MibTableColumn
pdhE3AISS = _PdhE3AISS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 65),
    _PdhE3AISS_Type()
)
pdhE3AISS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3AISS.setStatus("mandatory")
_PdhE3UAS_Type = Counter32
_PdhE3UAS_Object = MibTableColumn
pdhE3UAS = _PdhE3UAS_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 66),
    _PdhE3UAS_Type()
)
pdhE3UAS.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3UAS.setStatus("mandatory")


class _PdhE3RxTrlTrc_Type(PhysAddress):
    """Custom type pdhE3RxTrlTrc based on PhysAddress"""
    subtypeSpec = PhysAddress.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(16, 16),
    )


_PdhE3RxTrlTrc_Type.__name__ = "PhysAddress"
_PdhE3RxTrlTrc_Object = MibTableColumn
pdhE3RxTrlTrc = _PdhE3RxTrlTrc_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 76),
    _PdhE3RxTrlTrc_Type()
)
pdhE3RxTrlTrc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3RxTrlTrc.setStatus("mandatory")


class _PdhE3RxTrIdMis_Type(Integer32):
    """Custom type pdhE3RxTrIdMis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhE3RxTrIdMis_Type.__name__ = "Integer32"
_PdhE3RxTrIdMis_Object = MibTableColumn
pdhE3RxTrIdMis = _PdhE3RxTrIdMis_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 77),
    _PdhE3RxTrIdMis_Type()
)
pdhE3RxTrIdMis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3RxTrIdMis.setStatus("mandatory")


class _PdhE3RxTrIdUnst_Type(Integer32):
    """Custom type pdhE3RxTrIdUnst based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhE3RxTrIdUnst_Type.__name__ = "Integer32"
_PdhE3RxTrIdUnst_Object = MibTableColumn
pdhE3RxTrIdUnst = _PdhE3RxTrIdUnst_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 78),
    _PdhE3RxTrIdUnst_Type()
)
pdhE3RxTrIdUnst.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3RxTrIdUnst.setStatus("mandatory")


class _PdhE3RxPloadTypeLabMis_Type(Integer32):
    """Custom type pdhE3RxPloadTypeLabMis based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhE3RxPloadTypeLabMis_Type.__name__ = "Integer32"
_PdhE3RxPloadTypeLabMis_Object = MibTableColumn
pdhE3RxPloadTypeLabMis = _PdhE3RxPloadTypeLabMis_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 79),
    _PdhE3RxPloadTypeLabMis_Type()
)
pdhE3RxPloadTypeLabMis.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3RxPloadTypeLabMis.setStatus("mandatory")


class _PdhE3RxPloadTypeLabUnst_Type(Integer32):
    """Custom type pdhE3RxPloadTypeLabUnst based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_PdhE3RxPloadTypeLabUnst_Type.__name__ = "Integer32"
_PdhE3RxPloadTypeLabUnst_Object = MibTableColumn
pdhE3RxPloadTypeLabUnst = _PdhE3RxPloadTypeLabUnst_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 35, 3, 1, 80),
    _PdhE3RxPloadTypeLabUnst_Type()
)
pdhE3RxPloadTypeLabUnst.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    pdhE3RxPloadTypeLabUnst.setStatus("mandatory")
_Dv2Oam_ObjectIdentity = ObjectIdentity
dv2Oam = _Dv2Oam_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36)
)
_OamTable_Object = MibTable
oamTable = _OamTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1)
)
if mibBuilder.loadTexts:
    oamTable.setStatus("mandatory")
_OamEntry_Object = MibTableRow
oamEntry = _OamEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1)
)
oamEntry.setIndexNames(
    (0, "DV2-MIB", "oamLinkNo"),
)
if mibBuilder.loadTexts:
    oamEntry.setStatus("mandatory")


class _OamLinkNo_Type(Integer32):
    """Custom type oamLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_OamLinkNo_Type.__name__ = "Integer32"
_OamLinkNo_Object = MibTableColumn
oamLinkNo = _OamLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 1),
    _OamLinkNo_Type()
)
oamLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamLinkNo.setStatus("mandatory")


class _OamSegEndPoint_Type(Integer32):
    """Custom type oamSegEndPoint based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_OamSegEndPoint_Type.__name__ = "Integer32"
_OamSegEndPoint_Object = MibTableColumn
oamSegEndPoint = _OamSegEndPoint_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 2),
    _OamSegEndPoint_Type()
)
oamSegEndPoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamSegEndPoint.setStatus("mandatory")


class _OamVcEndPoint_Type(Integer32):
    """Custom type oamVcEndPoint based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_OamVcEndPoint_Type.__name__ = "Integer32"
_OamVcEndPoint_Object = MibTableColumn
oamVcEndPoint = _OamVcEndPoint_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 3),
    _OamVcEndPoint_Type()
)
oamVcEndPoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamVcEndPoint.setStatus("mandatory")


class _OamAisRdiGeneration_Type(Integer32):
    """Custom type oamAisRdiGeneration based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_OamAisRdiGeneration_Type.__name__ = "Integer32"
_OamAisRdiGeneration_Object = MibTableColumn
oamAisRdiGeneration = _OamAisRdiGeneration_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 4),
    _OamAisRdiGeneration_Type()
)
oamAisRdiGeneration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamAisRdiGeneration.setStatus("mandatory")


class _OamLastRxType_Type(Integer32):
    """Custom type oamLastRxType based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              10)
        )
    )
    namedValues = NamedValues(
        *(("ais", 1),
          ("continuity-check", 4),
          ("loopback", 3),
          ("none", 10),
          ("performance-monitoring", 5),
          ("rdi", 2),
          ("unsupported", 6))
    )


_OamLastRxType_Type.__name__ = "Integer32"
_OamLastRxType_Object = MibTableColumn
oamLastRxType = _OamLastRxType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 5),
    _OamLastRxType_Type()
)
oamLastRxType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamLastRxType.setStatus("mandatory")
_OamLastRxVpi_Type = VirtualPathIdentifier
_OamLastRxVpi_Object = MibTableColumn
oamLastRxVpi = _OamLastRxVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 6),
    _OamLastRxVpi_Type()
)
oamLastRxVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamLastRxVpi.setStatus("mandatory")
_OamLastRxVci_Type = VirtualCircuitIdentifier
_OamLastRxVci_Object = MibTableColumn
oamLastRxVci = _OamLastRxVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 7),
    _OamLastRxVci_Type()
)
oamLastRxVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamLastRxVci.setStatus("mandatory")
_OamRxCount_Type = Counter32
_OamRxCount_Object = MibTableColumn
oamRxCount = _OamRxCount_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 8),
    _OamRxCount_Type()
)
oamRxCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamRxCount.setStatus("mandatory")


class _OamLastTxType_Type(Integer32):
    """Custom type oamLastTxType based on Integer32"""
    defaultValue = 10

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              10)
        )
    )
    namedValues = NamedValues(
        *(("ais", 1),
          ("continuity-check", 4),
          ("loopback", 3),
          ("none", 10),
          ("performance-monitoring", 5),
          ("rdi", 2),
          ("unsupported", 6))
    )


_OamLastTxType_Type.__name__ = "Integer32"
_OamLastTxType_Object = MibTableColumn
oamLastTxType = _OamLastTxType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 9),
    _OamLastTxType_Type()
)
oamLastTxType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamLastTxType.setStatus("mandatory")
_OamLastTxVpi_Type = VirtualPathIdentifier
_OamLastTxVpi_Object = MibTableColumn
oamLastTxVpi = _OamLastTxVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 10),
    _OamLastTxVpi_Type()
)
oamLastTxVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamLastTxVpi.setStatus("mandatory")
_OamLastTxVci_Type = VirtualCircuitIdentifier
_OamLastTxVci_Object = MibTableColumn
oamLastTxVci = _OamLastTxVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 11),
    _OamLastTxVci_Type()
)
oamLastTxVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamLastTxVci.setStatus("mandatory")
_OamTxCount_Type = Counter32
_OamTxCount_Object = MibTableColumn
oamTxCount = _OamTxCount_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 12),
    _OamTxCount_Type()
)
oamTxCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamTxCount.setStatus("mandatory")


class _OamClearStats_Type(Integer32):
    """Custom type oamClearStats based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_OamClearStats_Type.__name__ = "Integer32"
_OamClearStats_Object = MibTableColumn
oamClearStats = _OamClearStats_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 1, 1, 13),
    _OamClearStats_Type()
)
oamClearStats.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamClearStats.setStatus("mandatory")
_OamLoopbackTable_Object = MibTable
oamLoopbackTable = _OamLoopbackTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2)
)
if mibBuilder.loadTexts:
    oamLoopbackTable.setStatus("mandatory")
_OamLoopbackEntry_Object = MibTableRow
oamLoopbackEntry = _OamLoopbackEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1)
)
oamLoopbackEntry.setIndexNames(
    (0, "DV2-MIB", "oamLoopbackLinkNo"),
)
if mibBuilder.loadTexts:
    oamLoopbackEntry.setStatus("mandatory")


class _OamLoopbackLinkNo_Type(Integer32):
    """Custom type oamLoopbackLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_OamLoopbackLinkNo_Type.__name__ = "Integer32"
_OamLoopbackLinkNo_Object = MibTableColumn
oamLoopbackLinkNo = _OamLoopbackLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 1),
    _OamLoopbackLinkNo_Type()
)
oamLoopbackLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamLoopbackLinkNo.setStatus("mandatory")


class _OamLoopbackVpi_Type(VirtualPathIdentifier):
    """Custom type oamLoopbackVpi based on VirtualPathIdentifier"""
    defaultValue = 0


_OamLoopbackVpi_Object = MibTableColumn
oamLoopbackVpi = _OamLoopbackVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 2),
    _OamLoopbackVpi_Type()
)
oamLoopbackVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamLoopbackVpi.setStatus("mandatory")


class _OamLoopbackVci_Type(VirtualCircuitIdentifier):
    """Custom type oamLoopbackVci based on VirtualCircuitIdentifier"""
    defaultValue = 5


_OamLoopbackVci_Object = MibTableColumn
oamLoopbackVci = _OamLoopbackVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 3),
    _OamLoopbackVci_Type()
)
oamLoopbackVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamLoopbackVci.setStatus("mandatory")


class _OamLoopbackSpan_Type(Integer32):
    """Custom type oamLoopbackSpan based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("end-to-end", 5),
          ("location-id", 6),
          ("segment", 4))
    )


_OamLoopbackSpan_Type.__name__ = "Integer32"
_OamLoopbackSpan_Object = MibTableColumn
oamLoopbackSpan = _OamLoopbackSpan_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 4),
    _OamLoopbackSpan_Type()
)
oamLoopbackSpan.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamLoopbackSpan.setStatus("mandatory")


class _OamLoopbackMaxNumCells_Type(Integer32):
    """Custom type oamLoopbackMaxNumCells based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_OamLoopbackMaxNumCells_Type.__name__ = "Integer32"
_OamLoopbackMaxNumCells_Object = MibTableColumn
oamLoopbackMaxNumCells = _OamLoopbackMaxNumCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 5),
    _OamLoopbackMaxNumCells_Type()
)
oamLoopbackMaxNumCells.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamLoopbackMaxNumCells.setStatus("mandatory")


class _OamLoopbackNumCellsSent_Type(Integer32):
    """Custom type oamLoopbackNumCellsSent based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_OamLoopbackNumCellsSent_Type.__name__ = "Integer32"
_OamLoopbackNumCellsSent_Object = MibTableColumn
oamLoopbackNumCellsSent = _OamLoopbackNumCellsSent_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 6),
    _OamLoopbackNumCellsSent_Type()
)
oamLoopbackNumCellsSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamLoopbackNumCellsSent.setStatus("mandatory")


class _OamLoopbackTimeOut_Type(Integer32):
    """Custom type oamLoopbackTimeOut based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_OamLoopbackTimeOut_Type.__name__ = "Integer32"
_OamLoopbackTimeOut_Object = MibTableColumn
oamLoopbackTimeOut = _OamLoopbackTimeOut_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 7),
    _OamLoopbackTimeOut_Type()
)
oamLoopbackTimeOut.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamLoopbackTimeOut.setStatus("mandatory")


class _OamLoopbackActive_Type(Integer32):
    """Custom type oamLoopbackActive based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("complete", 2),
          ("idle", 3),
          ("start-test", 1),
          ("under-test", 4))
    )


_OamLoopbackActive_Type.__name__ = "Integer32"
_OamLoopbackActive_Object = MibTableColumn
oamLoopbackActive = _OamLoopbackActive_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 8),
    _OamLoopbackActive_Type()
)
oamLoopbackActive.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamLoopbackActive.setStatus("mandatory")


class _OamLoopbackResult_Type(Integer32):
    """Custom type oamLoopbackResult based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("fail", 2),
          ("pass", 1),
          ("physical-loopback-detected", 3),
          ("unknown", 4),
          ("vcc-not-established", 10),
          ("vci-and-span-mismatch", 8),
          ("vci-range-error", 7),
          ("vp-is-invalid", 6),
          ("vpc-not-established", 9),
          ("vpi-range-error", 5))
    )


_OamLoopbackResult_Type.__name__ = "Integer32"
_OamLoopbackResult_Object = MibTableColumn
oamLoopbackResult = _OamLoopbackResult_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 9),
    _OamLoopbackResult_Type()
)
oamLoopbackResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamLoopbackResult.setStatus("mandatory")


class _OamLoopbackLocId_Type(Integer32):
    """Custom type oamLoopbackLocId based on Integer32"""
    defaultValue = 0

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_OamLoopbackLocId_Type.__name__ = "Integer32"
_OamLoopbackLocId_Object = MibTableColumn
oamLoopbackLocId = _OamLoopbackLocId_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 2, 1, 10),
    _OamLoopbackLocId_Type()
)
oamLoopbackLocId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamLoopbackLocId.setStatus("mandatory")


class _OamDisable_Type(Integer32):
    """Custom type oamDisable based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_OamDisable_Type.__name__ = "Integer32"
_OamDisable_Object = MibScalar
oamDisable = _OamDisable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 3),
    _OamDisable_Type()
)
oamDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamDisable.setStatus("mandatory")
_OamVcaTable_Object = MibTable
oamVcaTable = _OamVcaTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4)
)
if mibBuilder.loadTexts:
    oamVcaTable.setStatus("mandatory")
_OamVcaEntry_Object = MibTableRow
oamVcaEntry = _OamVcaEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1)
)
oamVcaEntry.setIndexNames(
    (0, "DV2-MIB", "oamVcaVpi"),
    (0, "DV2-MIB", "oamVcaVci"),
)
if mibBuilder.loadTexts:
    oamVcaEntry.setStatus("mandatory")
_OamVcaVpi_Type = VirtualPathIdentifier
_OamVcaVpi_Object = MibTableColumn
oamVcaVpi = _OamVcaVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 1),
    _OamVcaVpi_Type()
)
oamVcaVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcaVpi.setStatus("mandatory")
_OamVcaVci_Type = VirtualCircuitIdentifier
_OamVcaVci_Object = MibTableColumn
oamVcaVci = _OamVcaVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 2),
    _OamVcaVci_Type()
)
oamVcaVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcaVci.setStatus("mandatory")


class _OamVcaConnectionType_Type(Integer32):
    """Custom type oamVcaConnectionType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("connection-point", 1),
          ("end-to-end-endpoint", 3),
          ("pass-thru", 4),
          ("segment-endpoint", 2))
    )


_OamVcaConnectionType_Type.__name__ = "Integer32"
_OamVcaConnectionType_Object = MibTableColumn
oamVcaConnectionType = _OamVcaConnectionType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 3),
    _OamVcaConnectionType_Type()
)
oamVcaConnectionType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamVcaConnectionType.setStatus("mandatory")


class _OamVcaVpcEndPoint_Type(Integer32):
    """Custom type oamVcaVpcEndPoint based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_OamVcaVpcEndPoint_Type.__name__ = "Integer32"
_OamVcaVpcEndPoint_Object = MibTableColumn
oamVcaVpcEndPoint = _OamVcaVpcEndPoint_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 4),
    _OamVcaVpcEndPoint_Type()
)
oamVcaVpcEndPoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamVcaVpcEndPoint.setStatus("mandatory")


class _OamVcaAisRdiGeneration_Type(Integer32):
    """Custom type oamVcaAisRdiGeneration based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_OamVcaAisRdiGeneration_Type.__name__ = "Integer32"
_OamVcaAisRdiGeneration_Object = MibTableColumn
oamVcaAisRdiGeneration = _OamVcaAisRdiGeneration_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 5),
    _OamVcaAisRdiGeneration_Type()
)
oamVcaAisRdiGeneration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamVcaAisRdiGeneration.setStatus("mandatory")


class _OamVcaAisRdiState_Type(Integer32):
    """Custom type oamVcaAisRdiState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ais", 2),
          ("none", 1),
          ("rdi", 3))
    )


_OamVcaAisRdiState_Type.__name__ = "Integer32"
_OamVcaAisRdiState_Object = MibTableColumn
oamVcaAisRdiState = _OamVcaAisRdiState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 6),
    _OamVcaAisRdiState_Type()
)
oamVcaAisRdiState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcaAisRdiState.setStatus("mandatory")


class _OamVcaDefectType_Type(Integer32):
    """Custom type oamVcaDefectType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("link-down", 2),
          ("loss-of-continuity", 3),
          ("none", 1),
          ("unknown", 4))
    )


_OamVcaDefectType_Type.__name__ = "Integer32"
_OamVcaDefectType_Object = MibTableColumn
oamVcaDefectType = _OamVcaDefectType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 7),
    _OamVcaDefectType_Type()
)
oamVcaDefectType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcaDefectType.setStatus("mandatory")


class _OamVcaDefectNode_Type(Integer32):
    """Custom type oamVcaDefectNode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_OamVcaDefectNode_Type.__name__ = "Integer32"
_OamVcaDefectNode_Object = MibTableColumn
oamVcaDefectNode = _OamVcaDefectNode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 8),
    _OamVcaDefectNode_Type()
)
oamVcaDefectNode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcaDefectNode.setStatus("mandatory")


class _OamVcaDefectSlot_Type(Integer32):
    """Custom type oamVcaDefectSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_OamVcaDefectSlot_Type.__name__ = "Integer32"
_OamVcaDefectSlot_Object = MibTableColumn
oamVcaDefectSlot = _OamVcaDefectSlot_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 9),
    _OamVcaDefectSlot_Type()
)
oamVcaDefectSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcaDefectSlot.setStatus("mandatory")


class _OamVcaDefectLink_Type(Integer32):
    """Custom type oamVcaDefectLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_OamVcaDefectLink_Type.__name__ = "Integer32"
_OamVcaDefectLink_Object = MibTableColumn
oamVcaDefectLink = _OamVcaDefectLink_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 10),
    _OamVcaDefectLink_Type()
)
oamVcaDefectLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcaDefectLink.setStatus("mandatory")


class _OamVcaTrapEnable_Type(Integer32):
    """Custom type oamVcaTrapEnable based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_OamVcaTrapEnable_Type.__name__ = "Integer32"
_OamVcaTrapEnable_Object = MibTableColumn
oamVcaTrapEnable = _OamVcaTrapEnable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 11),
    _OamVcaTrapEnable_Type()
)
oamVcaTrapEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamVcaTrapEnable.setStatus("mandatory")


class _OamVcaCC_Type(Integer32):
    """Custom type oamVcaCC based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("act-bidir-ee-cell", 7),
          ("act-bidir-ee-manual", 13),
          ("act-bidir-seg-cell", 6),
          ("act-bidir-seg-manual", 12),
          ("act-sink-ee-cell", 5),
          ("act-sink-ee-manual", 11),
          ("act-sink-seg-cell", 4),
          ("act-sink-seg-manual", 10),
          ("act-source-ee-cell", 3),
          ("act-source-ee-manual", 9),
          ("act-source-seg-cell", 2),
          ("act-source-seg-manual", 8),
          ("none", 1))
    )


_OamVcaCC_Type.__name__ = "Integer32"
_OamVcaCC_Object = MibTableColumn
oamVcaCC = _OamVcaCC_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 12),
    _OamVcaCC_Type()
)
oamVcaCC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamVcaCC.setStatus("mandatory")


class _OamVcaCCState_Type(Integer32):
    """Custom type oamVcaCCState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("active-cell", 6),
          ("active-manual", 7),
          ("not-supported", 1),
          ("ready", 2),
          ("wait-act-con", 3),
          ("wait-act-res", 4),
          ("wait-deact-con", 5))
    )


_OamVcaCCState_Type.__name__ = "Integer32"
_OamVcaCCState_Object = MibTableColumn
oamVcaCCState = _OamVcaCCState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 13),
    _OamVcaCCState_Type()
)
oamVcaCCState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcaCCState.setStatus("mandatory")


class _OamVcaPM_Type(Integer32):
    """Custom type oamVcaPM based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("act-sink-ee-cell", 5),
          ("act-sink-ee-manual", 9),
          ("act-sink-seg-cell", 4),
          ("act-sink-seg-manual", 8),
          ("act-source-ee-cell", 3),
          ("act-source-ee-manual", 7),
          ("act-source-seg-cell", 2),
          ("act-source-seg-manual", 6),
          ("none", 1))
    )


_OamVcaPM_Type.__name__ = "Integer32"
_OamVcaPM_Object = MibTableColumn
oamVcaPM = _OamVcaPM_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 14),
    _OamVcaPM_Type()
)
oamVcaPM.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamVcaPM.setStatus("mandatory")


class _OamVcaPMBlockSize_Type(Integer32):
    """Custom type oamVcaPMBlockSize based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("size1024", 4),
          ("size128", 1),
          ("size256", 2),
          ("size512", 3))
    )


_OamVcaPMBlockSize_Type.__name__ = "Integer32"
_OamVcaPMBlockSize_Object = MibTableColumn
oamVcaPMBlockSize = _OamVcaPMBlockSize_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 15),
    _OamVcaPMBlockSize_Type()
)
oamVcaPMBlockSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamVcaPMBlockSize.setStatus("mandatory")


class _OamVcaPMState_Type(Integer32):
    """Custom type oamVcaPMState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("active-cell", 6),
          ("active-manual", 7),
          ("not-supported", 1),
          ("ready", 2),
          ("wait-act-con", 3),
          ("wait-act-res", 4),
          ("wait-deact-con", 5))
    )


_OamVcaPMState_Type.__name__ = "Integer32"
_OamVcaPMState_Object = MibTableColumn
oamVcaPMState = _OamVcaPMState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 16),
    _OamVcaPMState_Type()
)
oamVcaPMState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcaPMState.setStatus("mandatory")
_OamVcaBkwRptLosCells_Type = Integer32
_OamVcaBkwRptLosCells_Object = MibTableColumn
oamVcaBkwRptLosCells = _OamVcaBkwRptLosCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 17),
    _OamVcaBkwRptLosCells_Type()
)
oamVcaBkwRptLosCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcaBkwRptLosCells.setStatus("mandatory")
_OamVcaBkwRptMisCells_Type = Integer32
_OamVcaBkwRptMisCells_Object = MibTableColumn
oamVcaBkwRptMisCells = _OamVcaBkwRptMisCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 18),
    _OamVcaBkwRptMisCells_Type()
)
oamVcaBkwRptMisCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcaBkwRptMisCells.setStatus("mandatory")
_OamVcaBkwRptBip16_Type = Integer32
_OamVcaBkwRptBip16_Object = MibTableColumn
oamVcaBkwRptBip16 = _OamVcaBkwRptBip16_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 19),
    _OamVcaBkwRptBip16_Type()
)
oamVcaBkwRptBip16.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcaBkwRptBip16.setStatus("mandatory")
_OamVcaBkwRptSevErr_Type = Integer32
_OamVcaBkwRptSevErr_Object = MibTableColumn
oamVcaBkwRptSevErr = _OamVcaBkwRptSevErr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 4, 1, 20),
    _OamVcaBkwRptSevErr_Type()
)
oamVcaBkwRptSevErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcaBkwRptSevErr.setStatus("mandatory")
_OamVcbTable_Object = MibTable
oamVcbTable = _OamVcbTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5)
)
if mibBuilder.loadTexts:
    oamVcbTable.setStatus("mandatory")
_OamVcbEntry_Object = MibTableRow
oamVcbEntry = _OamVcbEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1)
)
oamVcbEntry.setIndexNames(
    (0, "DV2-MIB", "oamVcbVpi"),
    (0, "DV2-MIB", "oamVcbVci"),
)
if mibBuilder.loadTexts:
    oamVcbEntry.setStatus("mandatory")
_OamVcbVpi_Type = VirtualPathIdentifier
_OamVcbVpi_Object = MibTableColumn
oamVcbVpi = _OamVcbVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 1),
    _OamVcbVpi_Type()
)
oamVcbVpi.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcbVpi.setStatus("mandatory")
_OamVcbVci_Type = VirtualCircuitIdentifier
_OamVcbVci_Object = MibTableColumn
oamVcbVci = _OamVcbVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 2),
    _OamVcbVci_Type()
)
oamVcbVci.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcbVci.setStatus("mandatory")


class _OamVcbConnectionType_Type(Integer32):
    """Custom type oamVcbConnectionType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("connection-point", 1),
          ("end-to-end-endpoint", 3),
          ("pass-thru", 4),
          ("segment-endpoint", 2))
    )


_OamVcbConnectionType_Type.__name__ = "Integer32"
_OamVcbConnectionType_Object = MibTableColumn
oamVcbConnectionType = _OamVcbConnectionType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 3),
    _OamVcbConnectionType_Type()
)
oamVcbConnectionType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamVcbConnectionType.setStatus("mandatory")


class _OamVcbVpcEndPoint_Type(Integer32):
    """Custom type oamVcbVpcEndPoint based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_OamVcbVpcEndPoint_Type.__name__ = "Integer32"
_OamVcbVpcEndPoint_Object = MibTableColumn
oamVcbVpcEndPoint = _OamVcbVpcEndPoint_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 4),
    _OamVcbVpcEndPoint_Type()
)
oamVcbVpcEndPoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamVcbVpcEndPoint.setStatus("mandatory")


class _OamVcbAisRdiGeneration_Type(Integer32):
    """Custom type oamVcbAisRdiGeneration based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_OamVcbAisRdiGeneration_Type.__name__ = "Integer32"
_OamVcbAisRdiGeneration_Object = MibTableColumn
oamVcbAisRdiGeneration = _OamVcbAisRdiGeneration_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 5),
    _OamVcbAisRdiGeneration_Type()
)
oamVcbAisRdiGeneration.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamVcbAisRdiGeneration.setStatus("mandatory")


class _OamVcbAisRdiState_Type(Integer32):
    """Custom type oamVcbAisRdiState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ais", 2),
          ("none", 1),
          ("rdi", 3))
    )


_OamVcbAisRdiState_Type.__name__ = "Integer32"
_OamVcbAisRdiState_Object = MibTableColumn
oamVcbAisRdiState = _OamVcbAisRdiState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 6),
    _OamVcbAisRdiState_Type()
)
oamVcbAisRdiState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcbAisRdiState.setStatus("mandatory")


class _OamVcbDefectType_Type(Integer32):
    """Custom type oamVcbDefectType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("link-down", 2),
          ("loss-of-continuity", 3),
          ("none", 1),
          ("unknown", 4))
    )


_OamVcbDefectType_Type.__name__ = "Integer32"
_OamVcbDefectType_Object = MibTableColumn
oamVcbDefectType = _OamVcbDefectType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 7),
    _OamVcbDefectType_Type()
)
oamVcbDefectType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcbDefectType.setStatus("mandatory")


class _OamVcbDefectNode_Type(Integer32):
    """Custom type oamVcbDefectNode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_OamVcbDefectNode_Type.__name__ = "Integer32"
_OamVcbDefectNode_Object = MibTableColumn
oamVcbDefectNode = _OamVcbDefectNode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 8),
    _OamVcbDefectNode_Type()
)
oamVcbDefectNode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcbDefectNode.setStatus("mandatory")


class _OamVcbDefectSlot_Type(Integer32):
    """Custom type oamVcbDefectSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_OamVcbDefectSlot_Type.__name__ = "Integer32"
_OamVcbDefectSlot_Object = MibTableColumn
oamVcbDefectSlot = _OamVcbDefectSlot_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 9),
    _OamVcbDefectSlot_Type()
)
oamVcbDefectSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcbDefectSlot.setStatus("mandatory")


class _OamVcbDefectLink_Type(Integer32):
    """Custom type oamVcbDefectLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 31),
    )


_OamVcbDefectLink_Type.__name__ = "Integer32"
_OamVcbDefectLink_Object = MibTableColumn
oamVcbDefectLink = _OamVcbDefectLink_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 10),
    _OamVcbDefectLink_Type()
)
oamVcbDefectLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcbDefectLink.setStatus("mandatory")


class _OamVcbTrapEnable_Type(Integer32):
    """Custom type oamVcbTrapEnable based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_OamVcbTrapEnable_Type.__name__ = "Integer32"
_OamVcbTrapEnable_Object = MibTableColumn
oamVcbTrapEnable = _OamVcbTrapEnable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 11),
    _OamVcbTrapEnable_Type()
)
oamVcbTrapEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamVcbTrapEnable.setStatus("mandatory")


class _OamVcbCC_Type(Integer32):
    """Custom type oamVcbCC based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13)
        )
    )
    namedValues = NamedValues(
        *(("act-bidir-ee-cell", 7),
          ("act-bidir-ee-manual", 13),
          ("act-bidir-seg-cell", 6),
          ("act-bidir-seg-manual", 12),
          ("act-sink-ee-cell", 5),
          ("act-sink-ee-manual", 11),
          ("act-sink-seg-cell", 4),
          ("act-sink-seg-manual", 10),
          ("act-source-ee-cell", 3),
          ("act-source-ee-manual", 9),
          ("act-source-seg-cell", 2),
          ("act-source-seg-manual", 8),
          ("none", 1))
    )


_OamVcbCC_Type.__name__ = "Integer32"
_OamVcbCC_Object = MibTableColumn
oamVcbCC = _OamVcbCC_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 12),
    _OamVcbCC_Type()
)
oamVcbCC.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamVcbCC.setStatus("mandatory")


class _OamVcbCCState_Type(Integer32):
    """Custom type oamVcbCCState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("active-cell", 6),
          ("active-manual", 7),
          ("not-supported", 1),
          ("ready", 2),
          ("wait-act-con", 3),
          ("wait-act-res", 4),
          ("wait-deact-con", 5))
    )


_OamVcbCCState_Type.__name__ = "Integer32"
_OamVcbCCState_Object = MibTableColumn
oamVcbCCState = _OamVcbCCState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 13),
    _OamVcbCCState_Type()
)
oamVcbCCState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcbCCState.setStatus("mandatory")


class _OamVcbPM_Type(Integer32):
    """Custom type oamVcbPM based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("act-sink-ee-cell", 5),
          ("act-sink-ee-manual", 9),
          ("act-sink-seg-cell", 4),
          ("act-sink-seg-manual", 8),
          ("act-source-ee-cell", 3),
          ("act-source-ee-manual", 7),
          ("act-source-seg-cell", 2),
          ("act-source-seg-manual", 6),
          ("none", 1))
    )


_OamVcbPM_Type.__name__ = "Integer32"
_OamVcbPM_Object = MibTableColumn
oamVcbPM = _OamVcbPM_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 14),
    _OamVcbPM_Type()
)
oamVcbPM.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamVcbPM.setStatus("mandatory")


class _OamVcbPMBlockSize_Type(Integer32):
    """Custom type oamVcbPMBlockSize based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("size1024", 4),
          ("size128", 1),
          ("size256", 2),
          ("size512", 3))
    )


_OamVcbPMBlockSize_Type.__name__ = "Integer32"
_OamVcbPMBlockSize_Object = MibTableColumn
oamVcbPMBlockSize = _OamVcbPMBlockSize_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 15),
    _OamVcbPMBlockSize_Type()
)
oamVcbPMBlockSize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oamVcbPMBlockSize.setStatus("mandatory")


class _OamVcbPMState_Type(Integer32):
    """Custom type oamVcbPMState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("active-cell", 6),
          ("active-manual", 7),
          ("not-supported", 1),
          ("ready", 2),
          ("wait-act-con", 3),
          ("wait-act-res", 4),
          ("wait-deact-con", 5))
    )


_OamVcbPMState_Type.__name__ = "Integer32"
_OamVcbPMState_Object = MibTableColumn
oamVcbPMState = _OamVcbPMState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 16),
    _OamVcbPMState_Type()
)
oamVcbPMState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcbPMState.setStatus("mandatory")
_OamVcbBkwRptLosCells_Type = Integer32
_OamVcbBkwRptLosCells_Object = MibTableColumn
oamVcbBkwRptLosCells = _OamVcbBkwRptLosCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 17),
    _OamVcbBkwRptLosCells_Type()
)
oamVcbBkwRptLosCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcbBkwRptLosCells.setStatus("mandatory")
_OamVcbBkwRptMisCells_Type = Integer32
_OamVcbBkwRptMisCells_Object = MibTableColumn
oamVcbBkwRptMisCells = _OamVcbBkwRptMisCells_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 18),
    _OamVcbBkwRptMisCells_Type()
)
oamVcbBkwRptMisCells.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcbBkwRptMisCells.setStatus("mandatory")
_OamVcbBkwRptBip16_Type = Integer32
_OamVcbBkwRptBip16_Object = MibTableColumn
oamVcbBkwRptBip16 = _OamVcbBkwRptBip16_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 19),
    _OamVcbBkwRptBip16_Type()
)
oamVcbBkwRptBip16.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcbBkwRptBip16.setStatus("mandatory")
_OamVcbBkwRptSevErr_Type = Integer32
_OamVcbBkwRptSevErr_Object = MibTableColumn
oamVcbBkwRptSevErr = _OamVcbBkwRptSevErr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 36, 5, 1, 20),
    _OamVcbBkwRptSevErr_Type()
)
oamVcbBkwRptSevErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oamVcbBkwRptSevErr.setStatus("mandatory")
_Dv2Lmi_ObjectIdentity = ObjectIdentity
dv2Lmi = _Dv2Lmi_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37)
)
_LmiTable_Object = MibTable
lmiTable = _LmiTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1)
)
if mibBuilder.loadTexts:
    lmiTable.setStatus("mandatory")
_LmiEntry_Object = MibTableRow
lmiEntry = _LmiEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1)
)
lmiEntry.setIndexNames(
    (0, "DV2-MIB", "lmiLinkNo"),
)
if mibBuilder.loadTexts:
    lmiEntry.setStatus("mandatory")


class _LmiLinkNo_Type(Integer32):
    """Custom type lmiLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_LmiLinkNo_Type.__name__ = "Integer32"
_LmiLinkNo_Object = MibTableColumn
lmiLinkNo = _LmiLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 1),
    _LmiLinkNo_Type()
)
lmiLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lmiLinkNo.setStatus("mandatory")


class _LmiVpi_Type(VirtualPathIdentifier):
    """Custom type lmiVpi based on VirtualPathIdentifier"""
    defaultValue = 0


_LmiVpi_Object = MibTableColumn
lmiVpi = _LmiVpi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 2),
    _LmiVpi_Type()
)
lmiVpi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lmiVpi.setStatus("mandatory")


class _LmiVci_Type(VirtualCircuitIdentifier):
    """Custom type lmiVci based on VirtualCircuitIdentifier"""
    defaultValue = 16


_LmiVci_Object = MibTableColumn
lmiVci = _LmiVci_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 3),
    _LmiVci_Type()
)
lmiVci.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lmiVci.setStatus("mandatory")


class _LmiType_Type(Integer32):
    """Custom type lmiType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("network-side", 1),
          ("user-side", 2))
    )


_LmiType_Type.__name__ = "Integer32"
_LmiType_Object = MibTableColumn
lmiType = _LmiType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 4),
    _LmiType_Type()
)
lmiType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lmiType.setStatus("mandatory")


class _LmiState_Type(Integer32):
    """Custom type lmiState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("connecting", 2),
          ("deregistering", 5),
          ("disconnecting", 7),
          ("initialized", 1),
          ("polling", 6),
          ("registered", 3),
          ("registering", 4))
    )


_LmiState_Type.__name__ = "Integer32"
_LmiState_Object = MibTableColumn
lmiState = _LmiState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 5),
    _LmiState_Type()
)
lmiState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lmiState.setStatus("mandatory")


class _LmiFormat_Type(Integer32):
    """Custom type lmiFormat based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("non-nsap-e-164", 4),
          ("nsap-dcc", 2),
          ("nsap-e-164", 1),
          ("nsap-icd", 3))
    )


_LmiFormat_Type.__name__ = "Integer32"
_LmiFormat_Object = MibTableColumn
lmiFormat = _LmiFormat_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 6),
    _LmiFormat_Type()
)
lmiFormat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lmiFormat.setStatus("mandatory")
_LmiPrefix_Type = E164SUB
_LmiPrefix_Object = MibTableColumn
lmiPrefix = _LmiPrefix_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 7),
    _LmiPrefix_Type()
)
lmiPrefix.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lmiPrefix.setStatus("mandatory")


class _LmiOnOff_Type(Integer32):
    """Custom type lmiOnOff based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2),
          ("re-register", 3))
    )


_LmiOnOff_Type.__name__ = "Integer32"
_LmiOnOff_Object = MibTableColumn
lmiOnOff = _LmiOnOff_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 8),
    _LmiOnOff_Type()
)
lmiOnOff.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lmiOnOff.setStatus("mandatory")


class _LmiPollPeriod_Type(Integer32):
    """Custom type lmiPollPeriod based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(3, 10),
    )


_LmiPollPeriod_Type.__name__ = "Integer32"
_LmiPollPeriod_Object = MibTableColumn
lmiPollPeriod = _LmiPollPeriod_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 9),
    _LmiPollPeriod_Type()
)
lmiPollPeriod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lmiPollPeriod.setStatus("mandatory")


class _LmiNoRspDown_Type(Integer32):
    """Custom type lmiNoRspDown based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(2, 10),
    )


_LmiNoRspDown_Type.__name__ = "Integer32"
_LmiNoRspDown_Object = MibTableColumn
lmiNoRspDown = _LmiNoRspDown_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 10),
    _LmiNoRspDown_Type()
)
lmiNoRspDown.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lmiNoRspDown.setStatus("mandatory")


class _LmiLinkMgmt_Type(Integer32):
    """Custom type lmiLinkMgmt based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_LmiLinkMgmt_Type.__name__ = "Integer32"
_LmiLinkMgmt_Object = MibTableColumn
lmiLinkMgmt = _LmiLinkMgmt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 11),
    _LmiLinkMgmt_Type()
)
lmiLinkMgmt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lmiLinkMgmt.setStatus("mandatory")


class _LmiConnectivity_Type(Integer32):
    """Custom type lmiConnectivity based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("unknown", 3),
          ("up", 1))
    )


_LmiConnectivity_Type.__name__ = "Integer32"
_LmiConnectivity_Object = MibTableColumn
lmiConnectivity = _LmiConnectivity_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 12),
    _LmiConnectivity_Type()
)
lmiConnectivity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lmiConnectivity.setStatus("mandatory")
_LmiPrefixMod_Type = E164
_LmiPrefixMod_Object = MibTableColumn
lmiPrefixMod = _LmiPrefixMod_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 13),
    _LmiPrefixMod_Type()
)
lmiPrefixMod.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lmiPrefixMod.setStatus("mandatory")
_LmiEsi_Type = E164
_LmiEsi_Object = MibTableColumn
lmiEsi = _LmiEsi_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 1, 1, 14),
    _LmiEsi_Type()
)
lmiEsi.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    lmiEsi.setStatus("mandatory")
_LmiNetSideTable_Object = MibTable
lmiNetSideTable = _LmiNetSideTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 2)
)
if mibBuilder.loadTexts:
    lmiNetSideTable.setStatus("mandatory")
_LmiNetSideEntry_Object = MibTableRow
lmiNetSideEntry = _LmiNetSideEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 2, 1)
)
lmiNetSideEntry.setIndexNames(
    (0, "DV2-MIB", "lmiNetSideLinkNo"),
    (0, "DV2-MIB", "lmiNetSidePrefixId"),
)
if mibBuilder.loadTexts:
    lmiNetSideEntry.setStatus("mandatory")


class _LmiNetSideLinkNo_Type(Integer32):
    """Custom type lmiNetSideLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_LmiNetSideLinkNo_Type.__name__ = "Integer32"
_LmiNetSideLinkNo_Object = MibTableColumn
lmiNetSideLinkNo = _LmiNetSideLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 2, 1, 1),
    _LmiNetSideLinkNo_Type()
)
lmiNetSideLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lmiNetSideLinkNo.setStatus("mandatory")


class _LmiNetSidePrefixId_Type(Integer32):
    """Custom type lmiNetSidePrefixId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 5),
    )


_LmiNetSidePrefixId_Type.__name__ = "Integer32"
_LmiNetSidePrefixId_Object = MibTableColumn
lmiNetSidePrefixId = _LmiNetSidePrefixId_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 2, 1, 2),
    _LmiNetSidePrefixId_Type()
)
lmiNetSidePrefixId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lmiNetSidePrefixId.setStatus("mandatory")
_LmiNetSidePrefix_Type = E164SUB
_LmiNetSidePrefix_Object = MibTableColumn
lmiNetSidePrefix = _LmiNetSidePrefix_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 2, 1, 3),
    _LmiNetSidePrefix_Type()
)
lmiNetSidePrefix.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lmiNetSidePrefix.setStatus("mandatory")


class _LmiNetSidePrefixStatus_Type(Integer32):
    """Custom type lmiNetSidePrefixStatus based on Integer32"""
    defaultValue = 8

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("deregistered", 6),
          ("invalid", 4),
          ("not-allowed", 9),
          ("registered", 5),
          ("rejected", 10),
          ("start-deregistration", 2),
          ("start-registration", 1),
          ("time-out-failure", 7),
          ("unknown", 8),
          ("valid", 3))
    )


_LmiNetSidePrefixStatus_Type.__name__ = "Integer32"
_LmiNetSidePrefixStatus_Object = MibTableColumn
lmiNetSidePrefixStatus = _LmiNetSidePrefixStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 2, 1, 4),
    _LmiNetSidePrefixStatus_Type()
)
lmiNetSidePrefixStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lmiNetSidePrefixStatus.setStatus("mandatory")
_LmiUserSideTable_Object = MibTable
lmiUserSideTable = _LmiUserSideTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 3)
)
if mibBuilder.loadTexts:
    lmiUserSideTable.setStatus("mandatory")
_LmiUserSideEntry_Object = MibTableRow
lmiUserSideEntry = _LmiUserSideEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 3, 1)
)
lmiUserSideEntry.setIndexNames(
    (0, "DV2-MIB", "lmiUserSideLinkNo"),
    (0, "DV2-MIB", "lmiUserSideAddressId"),
)
if mibBuilder.loadTexts:
    lmiUserSideEntry.setStatus("mandatory")


class _LmiUserSideLinkNo_Type(Integer32):
    """Custom type lmiUserSideLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_LmiUserSideLinkNo_Type.__name__ = "Integer32"
_LmiUserSideLinkNo_Object = MibTableColumn
lmiUserSideLinkNo = _LmiUserSideLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 3, 1, 1),
    _LmiUserSideLinkNo_Type()
)
lmiUserSideLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lmiUserSideLinkNo.setStatus("mandatory")


class _LmiUserSideAddressId_Type(Integer32):
    """Custom type lmiUserSideAddressId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_LmiUserSideAddressId_Type.__name__ = "Integer32"
_LmiUserSideAddressId_Object = MibTableColumn
lmiUserSideAddressId = _LmiUserSideAddressId_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 3, 1, 2),
    _LmiUserSideAddressId_Type()
)
lmiUserSideAddressId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lmiUserSideAddressId.setStatus("mandatory")
_LmiUserSideAddress_Type = E164SUB
_LmiUserSideAddress_Object = MibTableColumn
lmiUserSideAddress = _LmiUserSideAddress_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 3, 1, 3),
    _LmiUserSideAddress_Type()
)
lmiUserSideAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lmiUserSideAddress.setStatus("mandatory")


class _LmiUserSideAddressStatus_Type(Integer32):
    """Custom type lmiUserSideAddressStatus based on Integer32"""
    defaultValue = 8

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("deregistered", 6),
          ("invalid", 4),
          ("not-allowed", 9),
          ("registered", 5),
          ("rejected", 10),
          ("start-deregistration", 2),
          ("start-registration", 1),
          ("time-out-failure", 7),
          ("unknown", 8),
          ("valid", 3))
    )


_LmiUserSideAddressStatus_Type.__name__ = "Integer32"
_LmiUserSideAddressStatus_Object = MibTableColumn
lmiUserSideAddressStatus = _LmiUserSideAddressStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 37, 3, 1, 4),
    _LmiUserSideAddressStatus_Type()
)
lmiUserSideAddressStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    lmiUserSideAddressStatus.setStatus("mandatory")
_Dv2AlarmHandler_ObjectIdentity = ObjectIdentity
dv2AlarmHandler = _Dv2AlarmHandler_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38)
)


class _AlarmNodeCrit_Type(Integer32):
    """Custom type alarmNodeCrit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clr", 1),
          ("crit", 2),
          ("crit-aco", 3))
    )


_AlarmNodeCrit_Type.__name__ = "Integer32"
_AlarmNodeCrit_Object = MibScalar
alarmNodeCrit = _AlarmNodeCrit_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 1),
    _AlarmNodeCrit_Type()
)
alarmNodeCrit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmNodeCrit.setStatus("mandatory")


class _AlarmNodeMajor_Type(Integer32):
    """Custom type alarmNodeMajor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clr", 1),
          ("maj", 2),
          ("maj-aco", 3))
    )


_AlarmNodeMajor_Type.__name__ = "Integer32"
_AlarmNodeMajor_Object = MibScalar
alarmNodeMajor = _AlarmNodeMajor_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 2),
    _AlarmNodeMajor_Type()
)
alarmNodeMajor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmNodeMajor.setStatus("mandatory")


class _AlarmNodeMinor_Type(Integer32):
    """Custom type alarmNodeMinor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clr", 1),
          ("min", 2),
          ("min-aco", 3))
    )


_AlarmNodeMinor_Type.__name__ = "Integer32"
_AlarmNodeMinor_Object = MibScalar
alarmNodeMinor = _AlarmNodeMinor_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 3),
    _AlarmNodeMinor_Type()
)
alarmNodeMinor.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmNodeMinor.setStatus("mandatory")
_AlarmStatTable_Object = MibTable
alarmStatTable = _AlarmStatTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4)
)
if mibBuilder.loadTexts:
    alarmStatTable.setStatus("mandatory")
_AlarmStatEntry_Object = MibTableRow
alarmStatEntry = _AlarmStatEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1)
)
alarmStatEntry.setIndexNames(
    (0, "DV2-MIB", "alrStatSlotNo"),
)
if mibBuilder.loadTexts:
    alarmStatEntry.setStatus("mandatory")


class _AlrStatSlotNo_Type(Integer32):
    """Custom type alrStatSlotNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_AlrStatSlotNo_Type.__name__ = "Integer32"
_AlrStatSlotNo_Object = MibTableColumn
alrStatSlotNo = _AlrStatSlotNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 1),
    _AlrStatSlotNo_Type()
)
alrStatSlotNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alrStatSlotNo.setStatus("mandatory")


class _SlotCritStatus_Type(Integer32):
    """Custom type slotCritStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clr", 1),
          ("crit", 2),
          ("crit-aco", 3))
    )


_SlotCritStatus_Type.__name__ = "Integer32"
_SlotCritStatus_Object = MibTableColumn
slotCritStatus = _SlotCritStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 2),
    _SlotCritStatus_Type()
)
slotCritStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotCritStatus.setStatus("mandatory")


class _SlotMajorStatus_Type(Integer32):
    """Custom type slotMajorStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clr", 1),
          ("maj", 2),
          ("maj-aco", 3))
    )


_SlotMajorStatus_Type.__name__ = "Integer32"
_SlotMajorStatus_Object = MibTableColumn
slotMajorStatus = _SlotMajorStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 3),
    _SlotMajorStatus_Type()
)
slotMajorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotMajorStatus.setStatus("mandatory")


class _SlotMinorStatus_Type(Integer32):
    """Custom type slotMinorStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clr", 1),
          ("min", 2),
          ("min-aco", 3))
    )


_SlotMinorStatus_Type.__name__ = "Integer32"
_SlotMinorStatus_Object = MibTableColumn
slotMinorStatus = _SlotMinorStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 4),
    _SlotMinorStatus_Type()
)
slotMinorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    slotMinorStatus.setStatus("mandatory")


class _Link0CritStatus_Type(Integer32):
    """Custom type link0CritStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clr", 1),
          ("crit", 2),
          ("crit-aco", 3))
    )


_Link0CritStatus_Type.__name__ = "Integer32"
_Link0CritStatus_Object = MibTableColumn
link0CritStatus = _Link0CritStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 5),
    _Link0CritStatus_Type()
)
link0CritStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    link0CritStatus.setStatus("mandatory")


class _Link0MajorStatus_Type(Integer32):
    """Custom type link0MajorStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clr", 1),
          ("maj", 2),
          ("maj-aco", 3))
    )


_Link0MajorStatus_Type.__name__ = "Integer32"
_Link0MajorStatus_Object = MibTableColumn
link0MajorStatus = _Link0MajorStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 6),
    _Link0MajorStatus_Type()
)
link0MajorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    link0MajorStatus.setStatus("mandatory")


class _Link0MinorStatus_Type(Integer32):
    """Custom type link0MinorStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clr", 1),
          ("min", 2),
          ("min-aco", 3))
    )


_Link0MinorStatus_Type.__name__ = "Integer32"
_Link0MinorStatus_Object = MibTableColumn
link0MinorStatus = _Link0MinorStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 7),
    _Link0MinorStatus_Type()
)
link0MinorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    link0MinorStatus.setStatus("mandatory")


class _Link1CritStatus_Type(Integer32):
    """Custom type link1CritStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clr", 1),
          ("crit", 2),
          ("crit-aco", 3))
    )


_Link1CritStatus_Type.__name__ = "Integer32"
_Link1CritStatus_Object = MibTableColumn
link1CritStatus = _Link1CritStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 8),
    _Link1CritStatus_Type()
)
link1CritStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    link1CritStatus.setStatus("mandatory")


class _Link1MajorStatus_Type(Integer32):
    """Custom type link1MajorStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clr", 1),
          ("maj", 2),
          ("maj-aco", 3))
    )


_Link1MajorStatus_Type.__name__ = "Integer32"
_Link1MajorStatus_Object = MibTableColumn
link1MajorStatus = _Link1MajorStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 9),
    _Link1MajorStatus_Type()
)
link1MajorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    link1MajorStatus.setStatus("mandatory")


class _Link1MinorStatus_Type(Integer32):
    """Custom type link1MinorStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clr", 1),
          ("min", 2),
          ("min-aco", 3))
    )


_Link1MinorStatus_Type.__name__ = "Integer32"
_Link1MinorStatus_Object = MibTableColumn
link1MinorStatus = _Link1MinorStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 10),
    _Link1MinorStatus_Type()
)
link1MinorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    link1MinorStatus.setStatus("mandatory")


class _Link2CritStatus_Type(Integer32):
    """Custom type link2CritStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clr", 1),
          ("crit", 2),
          ("crit-aco", 3))
    )


_Link2CritStatus_Type.__name__ = "Integer32"
_Link2CritStatus_Object = MibTableColumn
link2CritStatus = _Link2CritStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 11),
    _Link2CritStatus_Type()
)
link2CritStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    link2CritStatus.setStatus("mandatory")


class _Link2MajorStatus_Type(Integer32):
    """Custom type link2MajorStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clr", 1),
          ("maj", 2),
          ("maj-aco", 3))
    )


_Link2MajorStatus_Type.__name__ = "Integer32"
_Link2MajorStatus_Object = MibTableColumn
link2MajorStatus = _Link2MajorStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 12),
    _Link2MajorStatus_Type()
)
link2MajorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    link2MajorStatus.setStatus("mandatory")


class _Link2MinorStatus_Type(Integer32):
    """Custom type link2MinorStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clr", 1),
          ("min", 2),
          ("min-aco", 3))
    )


_Link2MinorStatus_Type.__name__ = "Integer32"
_Link2MinorStatus_Object = MibTableColumn
link2MinorStatus = _Link2MinorStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 13),
    _Link2MinorStatus_Type()
)
link2MinorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    link2MinorStatus.setStatus("mandatory")


class _Link3CritStatus_Type(Integer32):
    """Custom type link3CritStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clr", 1),
          ("crit", 2),
          ("crit-aco", 3))
    )


_Link3CritStatus_Type.__name__ = "Integer32"
_Link3CritStatus_Object = MibTableColumn
link3CritStatus = _Link3CritStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 14),
    _Link3CritStatus_Type()
)
link3CritStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    link3CritStatus.setStatus("mandatory")


class _Link3MajorStatus_Type(Integer32):
    """Custom type link3MajorStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clr", 1),
          ("maj", 2),
          ("maj-aco", 3))
    )


_Link3MajorStatus_Type.__name__ = "Integer32"
_Link3MajorStatus_Object = MibTableColumn
link3MajorStatus = _Link3MajorStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 15),
    _Link3MajorStatus_Type()
)
link3MajorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    link3MajorStatus.setStatus("mandatory")


class _Link3MinorStatus_Type(Integer32):
    """Custom type link3MinorStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("clr", 1),
          ("min", 2),
          ("min-aco", 3))
    )


_Link3MinorStatus_Type.__name__ = "Integer32"
_Link3MinorStatus_Object = MibTableColumn
link3MinorStatus = _Link3MinorStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 4, 1, 16),
    _Link3MinorStatus_Type()
)
link3MinorStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    link3MinorStatus.setStatus("mandatory")


class _AlarmNodeACO_Type(Integer32):
    """Custom type alarmNodeACO based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_AlarmNodeACO_Type.__name__ = "Integer32"
_AlarmNodeACO_Object = MibScalar
alarmNodeACO = _AlarmNodeACO_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 5),
    _AlarmNodeACO_Type()
)
alarmNodeACO.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alarmNodeACO.setStatus("mandatory")
_AlarmACOTable_Object = MibTable
alarmACOTable = _AlarmACOTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6)
)
if mibBuilder.loadTexts:
    alarmACOTable.setStatus("mandatory")
_AlarmACOEntry_Object = MibTableRow
alarmACOEntry = _AlarmACOEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6, 1)
)
alarmACOEntry.setIndexNames(
    (0, "DV2-MIB", "alrACOslotNo"),
)
if mibBuilder.loadTexts:
    alarmACOEntry.setStatus("mandatory")


class _AlrACOslotNo_Type(Integer32):
    """Custom type alrACOslotNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 15),
    )


_AlrACOslotNo_Type.__name__ = "Integer32"
_AlrACOslotNo_Object = MibTableColumn
alrACOslotNo = _AlrACOslotNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6, 1, 1),
    _AlrACOslotNo_Type()
)
alrACOslotNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alrACOslotNo.setStatus("mandatory")


class _AlrACOslotACO_Type(Integer32):
    """Custom type alrACOslotACO based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_AlrACOslotACO_Type.__name__ = "Integer32"
_AlrACOslotACO_Object = MibTableColumn
alrACOslotACO = _AlrACOslotACO_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6, 1, 2),
    _AlrACOslotACO_Type()
)
alrACOslotACO.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alrACOslotACO.setStatus("mandatory")


class _AlrACOlink0ACO_Type(Integer32):
    """Custom type alrACOlink0ACO based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_AlrACOlink0ACO_Type.__name__ = "Integer32"
_AlrACOlink0ACO_Object = MibTableColumn
alrACOlink0ACO = _AlrACOlink0ACO_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6, 1, 3),
    _AlrACOlink0ACO_Type()
)
alrACOlink0ACO.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alrACOlink0ACO.setStatus("mandatory")


class _AlrACOlink1ACO_Type(Integer32):
    """Custom type alrACOlink1ACO based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_AlrACOlink1ACO_Type.__name__ = "Integer32"
_AlrACOlink1ACO_Object = MibTableColumn
alrACOlink1ACO = _AlrACOlink1ACO_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6, 1, 4),
    _AlrACOlink1ACO_Type()
)
alrACOlink1ACO.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alrACOlink1ACO.setStatus("mandatory")


class _AlrACOlink2ACO_Type(Integer32):
    """Custom type alrACOlink2ACO based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_AlrACOlink2ACO_Type.__name__ = "Integer32"
_AlrACOlink2ACO_Object = MibTableColumn
alrACOlink2ACO = _AlrACOlink2ACO_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6, 1, 5),
    _AlrACOlink2ACO_Type()
)
alrACOlink2ACO.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alrACOlink2ACO.setStatus("mandatory")


class _AlrACOlink3ACO_Type(Integer32):
    """Custom type alrACOlink3ACO based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_AlrACOlink3ACO_Type.__name__ = "Integer32"
_AlrACOlink3ACO_Object = MibTableColumn
alrACOlink3ACO = _AlrACOlink3ACO_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 6, 1, 6),
    _AlrACOlink3ACO_Type()
)
alrACOlink3ACO.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alrACOlink3ACO.setStatus("mandatory")
_UserStatusTable_Object = MibTable
userStatusTable = _UserStatusTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7)
)
if mibBuilder.loadTexts:
    userStatusTable.setStatus("mandatory")
_UserStatusEntry_Object = MibTableRow
userStatusEntry = _UserStatusEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1)
)
userStatusEntry.setIndexNames(
    (0, "DV2-MIB", "userInputNo"),
)
if mibBuilder.loadTexts:
    userStatusEntry.setStatus("mandatory")


class _UserInputNo_Type(Integer32):
    """Custom type userInputNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_UserInputNo_Type.__name__ = "Integer32"
_UserInputNo_Object = MibTableColumn
userInputNo = _UserInputNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1, 1),
    _UserInputNo_Type()
)
userInputNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    userInputNo.setStatus("mandatory")


class _UserInputEnable_Type(Integer32):
    """Custom type userInputEnable based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1),
          ("not-applicable", 3))
    )


_UserInputEnable_Type.__name__ = "Integer32"
_UserInputEnable_Object = MibTableColumn
userInputEnable = _UserInputEnable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1, 2),
    _UserInputEnable_Type()
)
userInputEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    userInputEnable.setStatus("mandatory")


class _UserInputTrapEnable_Type(Integer32):
    """Custom type userInputTrapEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_UserInputTrapEnable_Type.__name__ = "Integer32"
_UserInputTrapEnable_Object = MibTableColumn
userInputTrapEnable = _UserInputTrapEnable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1, 3),
    _UserInputTrapEnable_Type()
)
userInputTrapEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    userInputTrapEnable.setStatus("mandatory")
_UserInputTrapDesc_Type = DisplayString
_UserInputTrapDesc_Object = MibTableColumn
userInputTrapDesc = _UserInputTrapDesc_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1, 4),
    _UserInputTrapDesc_Type()
)
userInputTrapDesc.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    userInputTrapDesc.setStatus("mandatory")


class _UserInputActiveState_Type(Integer32):
    """Custom type userInputActiveState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active-closed", 1),
          ("active-open", 2))
    )


_UserInputActiveState_Type.__name__ = "Integer32"
_UserInputActiveState_Object = MibTableColumn
userInputActiveState = _UserInputActiveState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1, 5),
    _UserInputActiveState_Type()
)
userInputActiveState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    userInputActiveState.setStatus("mandatory")


class _UserInputAlrClass_Type(Integer32):
    """Custom type userInputAlrClass based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("critical", 1),
          ("informational", 4),
          ("major", 2),
          ("minor", 3))
    )


_UserInputAlrClass_Type.__name__ = "Integer32"
_UserInputAlrClass_Object = MibTableColumn
userInputAlrClass = _UserInputAlrClass_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1, 10),
    _UserInputAlrClass_Type()
)
userInputAlrClass.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    userInputAlrClass.setStatus("mandatory")


class _UserInputStatus_Type(Integer32):
    """Custom type userInputStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("clear", 1))
    )


_UserInputStatus_Type.__name__ = "Integer32"
_UserInputStatus_Object = MibTableColumn
userInputStatus = _UserInputStatus_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 7, 1, 11),
    _UserInputStatus_Type()
)
userInputStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    userInputStatus.setStatus("mandatory")


class _AlarmScanFile_Type(Integer32):
    """Custom type alarmScanFile based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_AlarmScanFile_Type.__name__ = "Integer32"
_AlarmScanFile_Object = MibScalar
alarmScanFile = _AlarmScanFile_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 38, 8),
    _AlarmScanFile_Type()
)
alarmScanFile.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alarmScanFile.setStatus("mandatory")
_Dv2Cac_ObjectIdentity = ObjectIdentity
dv2Cac = _Dv2Cac_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39)
)


class _CacCurrentEbtId_Type(Integer32):
    """Custom type cacCurrentEbtId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_CacCurrentEbtId_Type.__name__ = "Integer32"
_CacCurrentEbtId_Object = MibScalar
cacCurrentEbtId = _CacCurrentEbtId_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 1),
    _CacCurrentEbtId_Type()
)
cacCurrentEbtId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cacCurrentEbtId.setStatus("mandatory")


class _CacEbtCommand_Type(Integer32):
    """Custom type cacEbtCommand based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("delete-EBT", 4),
          ("dump-EBT", 3),
          ("load-EBT", 2),
          ("none", 1))
    )


_CacEbtCommand_Type.__name__ = "Integer32"
_CacEbtCommand_Object = MibScalar
cacEbtCommand = _CacEbtCommand_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 2),
    _CacEbtCommand_Type()
)
cacEbtCommand.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cacEbtCommand.setStatus("mandatory")


class _CacCommandEbtId_Type(Integer32):
    """Custom type cacCommandEbtId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_CacCommandEbtId_Type.__name__ = "Integer32"
_CacCommandEbtId_Object = MibScalar
cacCommandEbtId = _CacCommandEbtId_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 3),
    _CacCommandEbtId_Type()
)
cacCommandEbtId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cacCommandEbtId.setStatus("mandatory")


class _CacEbtState_Type(Integer32):
    """Custom type cacEbtState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("initializing", 2),
          ("loading", 3),
          ("ready", 4),
          ("uninitialized", 1),
          ("unusable", 5))
    )


_CacEbtState_Type.__name__ = "Integer32"
_CacEbtState_Object = MibScalar
cacEbtState = _CacEbtState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 4),
    _CacEbtState_Type()
)
cacEbtState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cacEbtState.setStatus("mandatory")


class _CacErrorCode_Type(Integer32):
    """Custom type cacErrorCode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19)
        )
    )
    namedValues = NamedValues(
        *(("bad-ebt-command", 17),
          ("bad-file-length", 3),
          ("class-not-found", 15),
          ("copy-corrupted", 4),
          ("delete-fs-error", 18),
          ("dump-fs-error", 16),
          ("ebt-id-invalid", 19),
          ("ebt-not-loaded", 14),
          ("link-not-configuring", 13),
          ("link-not-ready", 12),
          ("nebtid-uninit-cstays", 7),
          ("ninvalid-cebtid-uninit", 9),
          ("ninvalid-cinvalid", 10),
          ("ninvalid-cnoerror", 11),
          ("ninvalid-cstays", 8),
          ("no-error", 1),
          ("nonexistent-file", 2),
          ("nunused-cbtdwoebtid", 5),
          ("nunused-cinvalid", 6))
    )


_CacErrorCode_Type.__name__ = "Integer32"
_CacErrorCode_Object = MibScalar
cacErrorCode = _CacErrorCode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 5),
    _CacErrorCode_Type()
)
cacErrorCode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cacErrorCode.setStatus("mandatory")
_CacPerLinkTable_Object = MibTable
cacPerLinkTable = _CacPerLinkTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6)
)
if mibBuilder.loadTexts:
    cacPerLinkTable.setStatus("mandatory")
_CacPerLinkEntry_Object = MibTableRow
cacPerLinkEntry = _CacPerLinkEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1)
)
cacPerLinkEntry.setIndexNames(
    (0, "DV2-MIB", "cacLinkNo"),
)
if mibBuilder.loadTexts:
    cacPerLinkEntry.setStatus("mandatory")


class _CacLinkNo_Type(Integer32):
    """Custom type cacLinkNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 3),
    )


_CacLinkNo_Type.__name__ = "Integer32"
_CacLinkNo_Object = MibTableColumn
cacLinkNo = _CacLinkNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 1),
    _CacLinkNo_Type()
)
cacLinkNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cacLinkNo.setStatus("mandatory")
_CacLinkSumE10_Type = Gauge32
_CacLinkSumE10_Object = MibTableColumn
cacLinkSumE10 = _CacLinkSumE10_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 2),
    _CacLinkSumE10_Type()
)
cacLinkSumE10.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cacLinkSumE10.setStatus("mandatory")
_CacLinkSumE1T_Type = Gauge32
_CacLinkSumE1T_Object = MibTableColumn
cacLinkSumE1T = _CacLinkSumE1T_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 3),
    _CacLinkSumE1T_Type()
)
cacLinkSumE1T.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cacLinkSumE1T.setStatus("mandatory")


class _CacLinkObfPvc1_Type(Integer32):
    """Custom type cacLinkObfPvc1 based on Integer32"""
    defaultValue = 100


_CacLinkObfPvc1_Object = MibTableColumn
cacLinkObfPvc1 = _CacLinkObfPvc1_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 4),
    _CacLinkObfPvc1_Type()
)
cacLinkObfPvc1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cacLinkObfPvc1.setStatus("mandatory")


class _CacLinkObfSvc1_Type(Integer32):
    """Custom type cacLinkObfSvc1 based on Integer32"""
    defaultValue = 100


_CacLinkObfSvc1_Object = MibTableColumn
cacLinkObfSvc1 = _CacLinkObfSvc1_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 5),
    _CacLinkObfSvc1_Type()
)
cacLinkObfSvc1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cacLinkObfSvc1.setStatus("mandatory")
_CacLinkSumE20_Type = Gauge32
_CacLinkSumE20_Object = MibTableColumn
cacLinkSumE20 = _CacLinkSumE20_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 6),
    _CacLinkSumE20_Type()
)
cacLinkSumE20.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cacLinkSumE20.setStatus("mandatory")
_CacLinkSumE2T_Type = Gauge32
_CacLinkSumE2T_Object = MibTableColumn
cacLinkSumE2T = _CacLinkSumE2T_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 7),
    _CacLinkSumE2T_Type()
)
cacLinkSumE2T.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cacLinkSumE2T.setStatus("mandatory")


class _CacLinkObfPvc2_Type(Integer32):
    """Custom type cacLinkObfPvc2 based on Integer32"""
    defaultValue = 100


_CacLinkObfPvc2_Object = MibTableColumn
cacLinkObfPvc2 = _CacLinkObfPvc2_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 8),
    _CacLinkObfPvc2_Type()
)
cacLinkObfPvc2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cacLinkObfPvc2.setStatus("mandatory")


class _CacLinkObfSvc2_Type(Integer32):
    """Custom type cacLinkObfSvc2 based on Integer32"""
    defaultValue = 100


_CacLinkObfSvc2_Object = MibTableColumn
cacLinkObfSvc2 = _CacLinkObfSvc2_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 9),
    _CacLinkObfSvc2_Type()
)
cacLinkObfSvc2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cacLinkObfSvc2.setStatus("mandatory")
_CacLinkTotalBwScrPcr_Type = Integer32
_CacLinkTotalBwScrPcr_Object = MibTableColumn
cacLinkTotalBwScrPcr = _CacLinkTotalBwScrPcr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 10),
    _CacLinkTotalBwScrPcr_Type()
)
cacLinkTotalBwScrPcr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cacLinkTotalBwScrPcr.setStatus("mandatory")
_CacCurrentLinkUsage_Type = Integer32
_CacCurrentLinkUsage_Object = MibTableColumn
cacCurrentLinkUsage = _CacCurrentLinkUsage_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 11),
    _CacCurrentLinkUsage_Type()
)
cacCurrentLinkUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cacCurrentLinkUsage.setStatus("mandatory")
_CacMaxLinkUsage_Type = Integer32
_CacMaxLinkUsage_Object = MibTableColumn
cacMaxLinkUsage = _CacMaxLinkUsage_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 12),
    _CacMaxLinkUsage_Type()
)
cacMaxLinkUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cacMaxLinkUsage.setStatus("mandatory")


class _CacLinkReset_Type(Integer32):
    """Custom type cacLinkReset based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_CacLinkReset_Type.__name__ = "Integer32"
_CacLinkReset_Object = MibTableColumn
cacLinkReset = _CacLinkReset_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 13),
    _CacLinkReset_Type()
)
cacLinkReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cacLinkReset.setStatus("mandatory")


class _CacLinkVersion_Type(Integer32):
    """Custom type cacLinkVersion based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ebt", 1),
          ("scr-pcr", 2))
    )


_CacLinkVersion_Type.__name__ = "Integer32"
_CacLinkVersion_Object = MibTableColumn
cacLinkVersion = _CacLinkVersion_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 14),
    _CacLinkVersion_Type()
)
cacLinkVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cacLinkVersion.setStatus("mandatory")


class _CacLinkEnable_Type(Integer32):
    """Custom type cacLinkEnable based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_CacLinkEnable_Type.__name__ = "Integer32"
_CacLinkEnable_Object = MibTableColumn
cacLinkEnable = _CacLinkEnable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 15),
    _CacLinkEnable_Type()
)
cacLinkEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cacLinkEnable.setStatus("mandatory")


class _CacLinkSignalMode_Type(Integer32):
    """Custom type cacLinkSignalMode based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("multi-channel", 2),
          ("single-channel", 1))
    )


_CacLinkSignalMode_Type.__name__ = "Integer32"
_CacLinkSignalMode_Object = MibTableColumn
cacLinkSignalMode = _CacLinkSignalMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 16),
    _CacLinkSignalMode_Type()
)
cacLinkSignalMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cacLinkSignalMode.setStatus("mandatory")


class _CacLinkState_Type(Integer32):
    """Custom type cacLinkState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("configuring", 2),
          ("ready", 4),
          ("recalculating", 3),
          ("uninitialized", 1))
    )


_CacLinkState_Type.__name__ = "Integer32"
_CacLinkState_Object = MibTableColumn
cacLinkState = _CacLinkState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 6, 1, 17),
    _CacLinkState_Type()
)
cacLinkState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cacLinkState.setStatus("mandatory")
_CacPerSapTable_Object = MibTable
cacPerSapTable = _CacPerSapTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7)
)
if mibBuilder.loadTexts:
    cacPerSapTable.setStatus("mandatory")
_CacPerSapEntry_Object = MibTableRow
cacPerSapEntry = _CacPerSapEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1)
)
cacPerSapEntry.setIndexNames(
    (0, "DV2-MIB", "cacSapNo"),
)
if mibBuilder.loadTexts:
    cacPerSapEntry.setStatus("mandatory")


class _CacSapNo_Type(Integer32):
    """Custom type cacSapNo based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(20, 31),
    )


_CacSapNo_Type.__name__ = "Integer32"
_CacSapNo_Object = MibTableColumn
cacSapNo = _CacSapNo_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1, 1),
    _CacSapNo_Type()
)
cacSapNo.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cacSapNo.setStatus("mandatory")
_CacSapSumE1T_Type = Gauge32
_CacSapSumE1T_Object = MibTableColumn
cacSapSumE1T = _CacSapSumE1T_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1, 2),
    _CacSapSumE1T_Type()
)
cacSapSumE1T.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cacSapSumE1T.setStatus("mandatory")
_CacSapSumE2T_Type = Gauge32
_CacSapSumE2T_Object = MibTableColumn
cacSapSumE2T = _CacSapSumE2T_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1, 3),
    _CacSapSumE2T_Type()
)
cacSapSumE2T.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cacSapSumE2T.setStatus("mandatory")
_CacSapTotalBwScrPcr_Type = Integer32
_CacSapTotalBwScrPcr_Object = MibTableColumn
cacSapTotalBwScrPcr = _CacSapTotalBwScrPcr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1, 4),
    _CacSapTotalBwScrPcr_Type()
)
cacSapTotalBwScrPcr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cacSapTotalBwScrPcr.setStatus("mandatory")
_CacCurrentSapUsage_Type = Integer32
_CacCurrentSapUsage_Object = MibTableColumn
cacCurrentSapUsage = _CacCurrentSapUsage_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1, 5),
    _CacCurrentSapUsage_Type()
)
cacCurrentSapUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cacCurrentSapUsage.setStatus("mandatory")
_CacMaxSapUsage_Type = Integer32
_CacMaxSapUsage_Object = MibTableColumn
cacMaxSapUsage = _CacMaxSapUsage_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1, 6),
    _CacMaxSapUsage_Type()
)
cacMaxSapUsage.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cacMaxSapUsage.setStatus("mandatory")


class _CacSapReset_Type(Integer32):
    """Custom type cacSapReset based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_CacSapReset_Type.__name__ = "Integer32"
_CacSapReset_Object = MibTableColumn
cacSapReset = _CacSapReset_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 39, 7, 1, 7),
    _CacSapReset_Type()
)
cacSapReset.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cacSapReset.setStatus("mandatory")
_Dv2MS2FRAC_ObjectIdentity = ObjectIdentity
dv2MS2FRAC = _Dv2MS2FRAC_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 40)
)
_Dv2aal5_ObjectIdentity = ObjectIdentity
dv2aal5 = _Dv2aal5_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 41)
)
_Vhsystem_ObjectIdentity = ObjectIdentity
vhsystem = _Vhsystem_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 42)
)


class _LimHostRev_Type(DisplayString):
    """Custom type limHostRev based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_LimHostRev_Type.__name__ = "DisplayString"
_LimHostRev_Object = MibScalar
limHostRev = _LimHostRev_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 1),
    _LimHostRev_Type()
)
limHostRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    limHostRev.setStatus("mandatory")


class _LimBootRev_Type(DisplayString):
    """Custom type limBootRev based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_LimBootRev_Type.__name__ = "DisplayString"
_LimBootRev_Object = MibScalar
limBootRev = _LimBootRev_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 2),
    _LimBootRev_Type()
)
limBootRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    limBootRev.setStatus("mandatory")


class _LimHwRev_Type(DisplayString):
    """Custom type limHwRev based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_LimHwRev_Type.__name__ = "DisplayString"
_LimHwRev_Object = MibScalar
limHwRev = _LimHwRev_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 3),
    _LimHwRev_Type()
)
limHwRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    limHwRev.setStatus("mandatory")


class _LimAction_Type(Integer32):
    """Custom type limAction based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("mtce", 4),
          ("none", 1),
          ("reset", 2),
          ("test", 3))
    )


_LimAction_Type.__name__ = "Integer32"
_LimAction_Object = MibScalar
limAction = _LimAction_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 4),
    _LimAction_Type()
)
limAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    limAction.setStatus("mandatory")


class _LimState_Type(Integer32):
    """Custom type limState based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("await-framing", 10),
          ("fault", 7),
          ("idle", 3),
          ("init", 1),
          ("loading", 9),
          ("mtce", 8),
          ("start", 4),
          ("terminate", 6),
          ("testing", 2),
          ("working", 5))
    )


_LimState_Type.__name__ = "Integer32"
_LimState_Object = MibScalar
limState = _LimState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 5),
    _LimState_Type()
)
limState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    limState.setStatus("mandatory")


class _LimFault_Type(Integer32):
    """Custom type limFault based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_LimFault_Type.__name__ = "Integer32"
_LimFault_Object = MibScalar
limFault = _LimFault_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 6),
    _LimFault_Type()
)
limFault.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    limFault.setStatus("mandatory")


class _LimFaultReason_Type(Integer32):
    """Custom type limFaultReason based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("bad-rev", 2),
          ("codec-section", 6),
          ("fileio", 5),
          ("hw-fault", 3),
          ("memory", 4),
          ("none", 1),
          ("sw-error", 7))
    )


_LimFaultReason_Type.__name__ = "Integer32"
_LimFaultReason_Object = MibScalar
limFaultReason = _LimFaultReason_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 7),
    _LimFaultReason_Type()
)
limFaultReason.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    limFaultReason.setStatus("mandatory")


class _LimCodec0_Type(Integer32):
    """Custom type limCodec0 based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_LimCodec0_Type.__name__ = "Integer32"
_LimCodec0_Object = MibScalar
limCodec0 = _LimCodec0_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 8),
    _LimCodec0_Type()
)
limCodec0.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    limCodec0.setStatus("mandatory")


class _LimCodec1_Type(Integer32):
    """Custom type limCodec1 based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_LimCodec1_Type.__name__ = "Integer32"
_LimCodec1_Object = MibScalar
limCodec1 = _LimCodec1_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 9),
    _LimCodec1_Type()
)
limCodec1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    limCodec1.setStatus("mandatory")


class _LimSCmgmt_Type(Integer32):
    """Custom type limSCmgmt based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_LimSCmgmt_Type.__name__ = "Integer32"
_LimSCmgmt_Object = MibScalar
limSCmgmt = _LimSCmgmt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 10),
    _LimSCmgmt_Type()
)
limSCmgmt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    limSCmgmt.setStatus("mandatory")


class _LimSCmgmtData_Type(Integer32):
    """Custom type limSCmgmtData based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("aborted", 6),
          ("ack", 5),
          ("continue", 3),
          ("end", 4),
          ("error", 7),
          ("idle", 1),
          ("start", 2))
    )


_LimSCmgmtData_Type.__name__ = "Integer32"
_LimSCmgmtData_Object = MibScalar
limSCmgmtData = _LimSCmgmtData_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 11),
    _LimSCmgmtData_Type()
)
limSCmgmtData.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    limSCmgmtData.setStatus("mandatory")


class _LimSCfileXferReq_Type(Integer32):
    """Custom type limSCfileXferReq based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("vh320-cod", 2),
          ("vhdev-cod", 3))
    )


_LimSCfileXferReq_Type.__name__ = "Integer32"
_LimSCfileXferReq_Object = MibScalar
limSCfileXferReq = _LimSCfileXferReq_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 12),
    _LimSCfileXferReq_Type()
)
limSCfileXferReq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    limSCfileXferReq.setStatus("mandatory")


class _LimSCfileXferStat_Type(Integer32):
    """Custom type limSCfileXferStat based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("aborted", 6),
          ("ack", 5),
          ("continue", 3),
          ("end", 4),
          ("error", 7),
          ("idle", 1),
          ("start", 2))
    )


_LimSCfileXferStat_Type.__name__ = "Integer32"
_LimSCfileXferStat_Object = MibScalar
limSCfileXferStat = _LimSCfileXferStat_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 13),
    _LimSCfileXferStat_Type()
)
limSCfileXferStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    limSCfileXferStat.setStatus("mandatory")
_LimSCbytes_Type = Integer32
_LimSCbytes_Object = MibScalar
limSCbytes = _LimSCbytes_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 42, 14),
    _LimSCbytes_Type()
)
limSCbytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    limSCbytes.setStatus("mandatory")
_Vhcontrol_ObjectIdentity = ObjectIdentity
vhcontrol = _Vhcontrol_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43)
)
_CtrlTable_Object = MibTable
ctrlTable = _CtrlTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1)
)
if mibBuilder.loadTexts:
    ctrlTable.setStatus("mandatory")
_CtrlEntry_Object = MibTableRow
ctrlEntry = _CtrlEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1)
)
ctrlEntry.setIndexNames(
    (0, "DV2-MIB", "ctrlIndex"),
)
if mibBuilder.loadTexts:
    ctrlEntry.setStatus("mandatory")


class _CtrlIndex_Type(Integer32):
    """Custom type ctrlIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_CtrlIndex_Type.__name__ = "Integer32"
_CtrlIndex_Object = MibTableColumn
ctrlIndex = _CtrlIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 1),
    _CtrlIndex_Type()
)
ctrlIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ctrlIndex.setStatus("mandatory")


class _CtrlCodecType_Type(Integer32):
    """Custom type ctrlCodecType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("h320", 1)
    )


_CtrlCodecType_Type.__name__ = "Integer32"
_CtrlCodecType_Object = MibTableColumn
ctrlCodecType = _CtrlCodecType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 2),
    _CtrlCodecType_Type()
)
ctrlCodecType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ctrlCodecType.setStatus("mandatory")


class _CtrlCodecAction_Type(Integer32):
    """Custom type ctrlCodecAction based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("mtce", 4),
          ("none", 1),
          ("reset", 2),
          ("test", 3))
    )


_CtrlCodecAction_Type.__name__ = "Integer32"
_CtrlCodecAction_Object = MibTableColumn
ctrlCodecAction = _CtrlCodecAction_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 3),
    _CtrlCodecAction_Type()
)
ctrlCodecAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ctrlCodecAction.setStatus("mandatory")


class _CtrlCodecReq_Type(Integer32):
    """Custom type ctrlCodecReq based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("connect", 1),
          ("disconnect", 2))
    )


_CtrlCodecReq_Type.__name__ = "Integer32"
_CtrlCodecReq_Object = MibTableColumn
ctrlCodecReq = _CtrlCodecReq_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 4),
    _CtrlCodecReq_Type()
)
ctrlCodecReq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ctrlCodecReq.setStatus("mandatory")


class _CtrlCallType_Type(Integer32):
    """Custom type ctrlCallType based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("h0", 1)
    )


_CtrlCallType_Type.__name__ = "Integer32"
_CtrlCallType_Object = MibTableColumn
ctrlCallType = _CtrlCallType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 5),
    _CtrlCallType_Type()
)
ctrlCallType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ctrlCallType.setStatus("mandatory")


class _CtrlCodecSta_Type(Integer32):
    """Custom type ctrlCodecSta based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("await-framing", 10),
          ("fault", 7),
          ("idle", 3),
          ("init", 1),
          ("loading", 9),
          ("mtce", 8),
          ("start", 4),
          ("terminate", 6),
          ("testing", 2),
          ("working", 5))
    )


_CtrlCodecSta_Type.__name__ = "Integer32"
_CtrlCodecSta_Object = MibTableColumn
ctrlCodecSta = _CtrlCodecSta_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 6),
    _CtrlCodecSta_Type()
)
ctrlCodecSta.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ctrlCodecSta.setStatus("mandatory")


class _CtrlChnlLpbk_Type(Integer32):
    """Custom type ctrlChnlLpbk based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("none", 1),
          ("to-other", 2),
          ("to-self", 3))
    )


_CtrlChnlLpbk_Type.__name__ = "Integer32"
_CtrlChnlLpbk_Object = MibTableColumn
ctrlChnlLpbk = _CtrlChnlLpbk_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 7),
    _CtrlChnlLpbk_Type()
)
ctrlChnlLpbk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ctrlChnlLpbk.setStatus("mandatory")


class _CtrlFraming_Type(Integer32):
    """Custom type ctrlFraming based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_CtrlFraming_Type.__name__ = "Integer32"
_CtrlFraming_Object = MibTableColumn
ctrlFraming = _CtrlFraming_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 8),
    _CtrlFraming_Type()
)
ctrlFraming.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ctrlFraming.setStatus("mandatory")


class _CtrlChnlStat_Type(Integer32):
    """Custom type ctrlChnlStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("down", 1),
          ("idle", 2),
          ("loopback", 4),
          ("up", 3))
    )


_CtrlChnlStat_Type.__name__ = "Integer32"
_CtrlChnlStat_Object = MibTableColumn
ctrlChnlStat = _CtrlChnlStat_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 9),
    _CtrlChnlStat_Type()
)
ctrlChnlStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ctrlChnlStat.setStatus("mandatory")


class _CtrlFaultReason_Type(Integer32):
    """Custom type ctrlFaultReason based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("audio", 4),
          ("data", 5),
          ("fileio", 6),
          ("h221", 8),
          ("h242", 9),
          ("host", 2),
          ("mem", 7),
          ("none", 1),
          ("tdm", 10),
          ("video", 3))
    )


_CtrlFaultReason_Type.__name__ = "Integer32"
_CtrlFaultReason_Object = MibTableColumn
ctrlFaultReason = _CtrlFaultReason_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 1, 1, 10),
    _CtrlFaultReason_Type()
)
ctrlFaultReason.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ctrlFaultReason.setStatus("mandatory")
_VidTable_Object = MibTable
vidTable = _VidTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2)
)
if mibBuilder.loadTexts:
    vidTable.setStatus("mandatory")
_VidEntry_Object = MibTableRow
vidEntry = _VidEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1)
)
vidEntry.setIndexNames(
    (0, "DV2-MIB", "vidIndex"),
)
if mibBuilder.loadTexts:
    vidEntry.setStatus("mandatory")


class _VidIndex_Type(Integer32):
    """Custom type vidIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_VidIndex_Type.__name__ = "Integer32"
_VidIndex_Object = MibTableColumn
vidIndex = _VidIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 1),
    _VidIndex_Type()
)
vidIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidIndex.setStatus("mandatory")


class _VidStandard_Type(Integer32):
    """Custom type vidStandard based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("ntsc", 1),
          ("pal", 2))
    )


_VidStandard_Type.__name__ = "Integer32"
_VidStandard_Object = MibTableColumn
vidStandard = _VidStandard_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 2),
    _VidStandard_Type()
)
vidStandard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidStandard.setStatus("mandatory")


class _VidTxVidReq_Type(Integer32):
    """Custom type vidTxVidReq based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("freeze", 2),
          ("mute", 3),
          ("normal", 1))
    )


_VidTxVidReq_Type.__name__ = "Integer32"
_VidTxVidReq_Object = MibTableColumn
vidTxVidReq = _VidTxVidReq_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 3),
    _VidTxVidReq_Type()
)
vidTxVidReq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidTxVidReq.setStatus("mandatory")


class _VidRxVidReq_Type(Integer32):
    """Custom type vidRxVidReq based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("freeze", 2),
          ("mute", 3),
          ("normal", 1))
    )


_VidRxVidReq_Type.__name__ = "Integer32"
_VidRxVidReq_Object = MibTableColumn
vidRxVidReq = _VidRxVidReq_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 4),
    _VidRxVidReq_Type()
)
vidRxVidReq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidRxVidReq.setStatus("mandatory")


class _VidViewPip_Type(Integer32):
    """Custom type vidViewPip based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_VidViewPip_Type.__name__ = "Integer32"
_VidViewPip_Object = MibTableColumn
vidViewPip = _VidViewPip_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 5),
    _VidViewPip_Type()
)
vidViewPip.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidViewPip.setStatus("mandatory")


class _VidCompQual_Type(Integer32):
    """Custom type vidCompQual based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("best-motion", 2),
          ("best-picture", 1))
    )


_VidCompQual_Type.__name__ = "Integer32"
_VidCompQual_Object = MibTableColumn
vidCompQual = _VidCompQual_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 6),
    _VidCompQual_Type()
)
vidCompQual.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidCompQual.setStatus("mandatory")


class _VidDigLpbk_Type(Integer32):
    """Custom type vidDigLpbk based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_VidDigLpbk_Type.__name__ = "Integer32"
_VidDigLpbk_Object = MibTableColumn
vidDigLpbk = _VidDigLpbk_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 7),
    _VidDigLpbk_Type()
)
vidDigLpbk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    vidDigLpbk.setStatus("mandatory")
_VidEncFrameCount_Type = Counter32
_VidEncFrameCount_Object = MibTableColumn
vidEncFrameCount = _VidEncFrameCount_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 8),
    _VidEncFrameCount_Type()
)
vidEncFrameCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidEncFrameCount.setStatus("mandatory")
_VidDecFrameCount_Type = Counter32
_VidDecFrameCount_Object = MibTableColumn
vidDecFrameCount = _VidDecFrameCount_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 9),
    _VidDecFrameCount_Type()
)
vidDecFrameCount.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidDecFrameCount.setStatus("mandatory")


class _VidState_Type(Integer32):
    """Custom type vidState based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("diag", 2),
          ("fault", 7),
          ("idle", 3),
          ("init", 1),
          ("start", 4),
          ("terminate", 6),
          ("working", 5))
    )


_VidState_Type.__name__ = "Integer32"
_VidState_Object = MibTableColumn
vidState = _VidState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 10),
    _VidState_Type()
)
vidState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidState.setStatus("mandatory")


class _VidInPresent_Type(Integer32):
    """Custom type vidInPresent based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_VidInPresent_Type.__name__ = "Integer32"
_VidInPresent_Object = MibTableColumn
vidInPresent = _VidInPresent_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 11),
    _VidInPresent_Type()
)
vidInPresent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidInPresent.setStatus("mandatory")
_VidEncBitRate_Type = Integer32
_VidEncBitRate_Object = MibTableColumn
vidEncBitRate = _VidEncBitRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 2, 1, 12),
    _VidEncBitRate_Type()
)
vidEncBitRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    vidEncBitRate.setStatus("mandatory")
_AudTable_Object = MibTable
audTable = _AudTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3)
)
if mibBuilder.loadTexts:
    audTable.setStatus("mandatory")
_AudEntry_Object = MibTableRow
audEntry = _AudEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1)
)
audEntry.setIndexNames(
    (0, "DV2-MIB", "audIndex"),
)
if mibBuilder.loadTexts:
    audEntry.setStatus("mandatory")


class _AudIndex_Type(Integer32):
    """Custom type audIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_AudIndex_Type.__name__ = "Integer32"
_AudIndex_Object = MibTableColumn
audIndex = _AudIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 1),
    _AudIndex_Type()
)
audIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    audIndex.setStatus("mandatory")


class _AudState_Type(Integer32):
    """Custom type audState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("await-framing", 10),
          ("fault", 7),
          ("idle", 3),
          ("init", 1),
          ("loading", 9),
          ("mtce", 8),
          ("start", 4),
          ("terminate", 6),
          ("testing", 2),
          ("working", 5))
    )


_AudState_Type.__name__ = "Integer32"
_AudState_Object = MibTableColumn
audState = _AudState_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 2),
    _AudState_Type()
)
audState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    audState.setStatus("mandatory")


class _AudPrefMode_Type(Integer32):
    """Custom type audPrefMode based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("a-law", 2),
          ("g722", 3),
          ("g728", 4),
          ("u-law", 1))
    )


_AudPrefMode_Type.__name__ = "Integer32"
_AudPrefMode_Object = MibTableColumn
audPrefMode = _AudPrefMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 3),
    _AudPrefMode_Type()
)
audPrefMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    audPrefMode.setStatus("mandatory")


class _AudCommMode_Type(Integer32):
    """Custom type audCommMode based on Integer32"""
    defaultValue = 3

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("a-law", 2),
          ("g722", 3),
          ("g728", 4),
          ("u-law", 1))
    )


_AudCommMode_Type.__name__ = "Integer32"
_AudCommMode_Object = MibTableColumn
audCommMode = _AudCommMode_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 4),
    _AudCommMode_Type()
)
audCommMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    audCommMode.setStatus("mandatory")
_AudBitRate_Type = Integer32
_AudBitRate_Object = MibTableColumn
audBitRate = _AudBitRate_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 5),
    _AudBitRate_Type()
)
audBitRate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    audBitRate.setStatus("mandatory")


class _AudMuteInReq_Type(Integer32):
    """Custom type audMuteInReq based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_AudMuteInReq_Type.__name__ = "Integer32"
_AudMuteInReq_Object = MibTableColumn
audMuteInReq = _AudMuteInReq_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 6),
    _AudMuteInReq_Type()
)
audMuteInReq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    audMuteInReq.setStatus("mandatory")


class _AudMuteOutReq_Type(Integer32):
    """Custom type audMuteOutReq based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 1),
          ("on", 2))
    )


_AudMuteOutReq_Type.__name__ = "Integer32"
_AudMuteOutReq_Object = MibTableColumn
audMuteOutReq = _AudMuteOutReq_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 7),
    _AudMuteOutReq_Type()
)
audMuteOutReq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    audMuteOutReq.setStatus("mandatory")


class _AudMuteOutStat_Type(Integer32):
    """Custom type audMuteOutStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 3),
          ("off", 1),
          ("on", 2))
    )


_AudMuteOutStat_Type.__name__ = "Integer32"
_AudMuteOutStat_Object = MibTableColumn
audMuteOutStat = _AudMuteOutStat_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 8),
    _AudMuteOutStat_Type()
)
audMuteOutStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    audMuteOutStat.setStatus("mandatory")


class _AudLpbk_Type(Integer32):
    """Custom type audLpbk based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7)
        )
    )
    namedValues = NamedValues(
        *(("analog-in", 2),
          ("analog-out", 5),
          ("compress-in", 4),
          ("compress-out", 7),
          ("digital-in", 3),
          ("digital-out", 6),
          ("none", 1))
    )


_AudLpbk_Type.__name__ = "Integer32"
_AudLpbk_Object = MibTableColumn
audLpbk = _AudLpbk_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 9),
    _AudLpbk_Type()
)
audLpbk.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    audLpbk.setStatus("mandatory")


class _AudInVol_Type(Integer32):
    """Custom type audInVol based on Integer32"""
    defaultValue = 64

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_AudInVol_Type.__name__ = "Integer32"
_AudInVol_Object = MibTableColumn
audInVol = _AudInVol_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 10),
    _AudInVol_Type()
)
audInVol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    audInVol.setStatus("mandatory")


class _AudOutVol_Type(Integer32):
    """Custom type audOutVol based on Integer32"""
    defaultValue = 255

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_AudOutVol_Type.__name__ = "Integer32"
_AudOutVol_Object = MibTableColumn
audOutVol = _AudOutVol_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 11),
    _AudOutVol_Type()
)
audOutVol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    audOutVol.setStatus("mandatory")


class _AudInDelay_Type(Integer32):
    """Custom type audInDelay based on Integer32"""
    defaultValue = 150

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 200),
    )


_AudInDelay_Type.__name__ = "Integer32"
_AudInDelay_Object = MibTableColumn
audInDelay = _AudInDelay_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 12),
    _AudInDelay_Type()
)
audInDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    audInDelay.setStatus("mandatory")


class _AudOutDelay_Type(Integer32):
    """Custom type audOutDelay based on Integer32"""
    defaultValue = 150

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 200),
    )


_AudOutDelay_Type.__name__ = "Integer32"
_AudOutDelay_Object = MibTableColumn
audOutDelay = _AudOutDelay_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 13),
    _AudOutDelay_Type()
)
audOutDelay.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    audOutDelay.setStatus("mandatory")


class _AudFaultReason_Type(Integer32):
    """Custom type audFaultReason based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("download", 4),
          ("dsp", 6),
          ("loopback", 5),
          ("mem", 2),
          ("none", 1),
          ("self-test", 3))
    )


_AudFaultReason_Type.__name__ = "Integer32"
_AudFaultReason_Object = MibTableColumn
audFaultReason = _AudFaultReason_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 3, 1, 14),
    _AudFaultReason_Type()
)
audFaultReason.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    audFaultReason.setStatus("mandatory")
_DataTable_Object = MibTable
dataTable = _DataTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4)
)
if mibBuilder.loadTexts:
    dataTable.setStatus("mandatory")
_DataEntry_Object = MibTableRow
dataEntry = _DataEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1)
)
dataEntry.setIndexNames(
    (0, "DV2-MIB", "dataIndex"),
)
if mibBuilder.loadTexts:
    dataEntry.setStatus("mandatory")


class _DataIndex_Type(Integer32):
    """Custom type dataIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_DataIndex_Type.__name__ = "Integer32"
_DataIndex_Object = MibTableColumn
dataIndex = _DataIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 1),
    _DataIndex_Type()
)
dataIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dataIndex.setStatus("mandatory")


class _DataChnlType_Type(Integer32):
    """Custom type dataChnlType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("hmlp", 4),
          ("hsd", 2),
          ("lsd", 1),
          ("mlp", 3),
          ("none", 5))
    )


_DataChnlType_Type.__name__ = "Integer32"
_DataChnlType_Object = MibTableColumn
dataChnlType = _DataChnlType_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 2),
    _DataChnlType_Type()
)
dataChnlType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dataChnlType.setStatus("mandatory")


class _DataPortSpeed_Type(Integer32):
    """Custom type dataPortSpeed based on Integer32"""
    defaultValue = 4

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("baud-19200", 3),
          ("baud-2400", 1),
          ("baud-38400", 4),
          ("baud-9600", 2))
    )


_DataPortSpeed_Type.__name__ = "Integer32"
_DataPortSpeed_Object = MibTableColumn
dataPortSpeed = _DataPortSpeed_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 3),
    _DataPortSpeed_Type()
)
dataPortSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dataPortSpeed.setStatus("mandatory")


class _DataPortProt_Type(Integer32):
    """Custom type dataPortProt based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("async", 1),
          ("hdlc", 2))
    )


_DataPortProt_Type.__name__ = "Integer32"
_DataPortProt_Object = MibTableColumn
dataPortProt = _DataPortProt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 4),
    _DataPortProt_Type()
)
dataPortProt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dataPortProt.setStatus("mandatory")


class _DataHDLCcheck_Type(Integer32):
    """Custom type dataHDLCcheck based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_DataHDLCcheck_Type.__name__ = "Integer32"
_DataHDLCcheck_Object = MibTableColumn
dataHDLCcheck = _DataHDLCcheck_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 5),
    _DataHDLCcheck_Type()
)
dataHDLCcheck.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dataHDLCcheck.setStatus("mandatory")


class _DataChnlStat_Type(Integer32):
    """Custom type dataChnlStat based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_DataChnlStat_Type.__name__ = "Integer32"
_DataChnlStat_Object = MibTableColumn
dataChnlStat = _DataChnlStat_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 6),
    _DataChnlStat_Type()
)
dataChnlStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dataChnlStat.setStatus("mandatory")
_DataBytesRcvd_Type = Counter32
_DataBytesRcvd_Object = MibTableColumn
dataBytesRcvd = _DataBytesRcvd_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 7),
    _DataBytesRcvd_Type()
)
dataBytesRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dataBytesRcvd.setStatus("mandatory")
_DataBytesSent_Type = Counter32
_DataBytesSent_Object = MibTableColumn
dataBytesSent = _DataBytesSent_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 8),
    _DataBytesSent_Type()
)
dataBytesSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dataBytesSent.setStatus("mandatory")


class _DataResetStat_Type(Integer32):
    """Custom type dataResetStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_DataResetStat_Type.__name__ = "Integer32"
_DataResetStat_Object = MibTableColumn
dataResetStat = _DataResetStat_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 43, 4, 1, 9),
    _DataResetStat_Type()
)
dataResetStat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dataResetStat.setStatus("mandatory")
_Vhmgmt_ObjectIdentity = ObjectIdentity
vhmgmt = _Vhmgmt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 44)
)
_MgmtTable_Object = MibTable
mgmtTable = _MgmtTable_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1)
)
if mibBuilder.loadTexts:
    mgmtTable.setStatus("mandatory")
_MgmtEntry_Object = MibTableRow
mgmtEntry = _MgmtEntry_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1)
)
mgmtEntry.setIndexNames(
    (0, "DV2-MIB", "mgmtIndex"),
)
if mibBuilder.loadTexts:
    mgmtEntry.setStatus("mandatory")


class _MgmtIndex_Type(Integer32):
    """Custom type mgmtIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1),
    )


_MgmtIndex_Type.__name__ = "Integer32"
_MgmtIndex_Object = MibTableColumn
mgmtIndex = _MgmtIndex_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 1),
    _MgmtIndex_Type()
)
mgmtIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mgmtIndex.setStatus("mandatory")
_MgmtDescr_Type = DisplayString
_MgmtDescr_Object = MibTableColumn
mgmtDescr = _MgmtDescr_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 2),
    _MgmtDescr_Type()
)
mgmtDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mgmtDescr.setStatus("mandatory")


class _MgmtPortProt_Type(Integer32):
    """Custom type mgmtPortProt based on Integer32"""
    defaultValue = 1

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("async", 1),
          ("slip", 2))
    )


_MgmtPortProt_Type.__name__ = "Integer32"
_MgmtPortProt_Object = MibTableColumn
mgmtPortProt = _MgmtPortProt_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 3),
    _MgmtPortProt_Type()
)
mgmtPortProt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mgmtPortProt.setStatus("mandatory")


class _MgmtPortSpeed_Type(Integer32):
    """Custom type mgmtPortSpeed based on Integer32"""
    defaultValue = 5

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("baud-19200", 4),
          ("baud-2400", 2),
          ("baud-38400", 5),
          ("baud-9600", 3),
          ("serial-200", 1))
    )


_MgmtPortSpeed_Type.__name__ = "Integer32"
_MgmtPortSpeed_Object = MibTableColumn
mgmtPortSpeed = _MgmtPortSpeed_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 4),
    _MgmtPortSpeed_Type()
)
mgmtPortSpeed.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mgmtPortSpeed.setStatus("mandatory")
_MgmtPortAddress_Type = IpAddress
_MgmtPortAddress_Object = MibTableColumn
mgmtPortAddress = _MgmtPortAddress_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 5),
    _MgmtPortAddress_Type()
)
mgmtPortAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mgmtPortAddress.setStatus("mandatory")
_MgmtAddressMask_Type = IpAddress
_MgmtAddressMask_Object = MibTableColumn
mgmtAddressMask = _MgmtAddressMask_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 6),
    _MgmtAddressMask_Type()
)
mgmtAddressMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mgmtAddressMask.setStatus("mandatory")
_MgmtRemoteAddress_Type = IpAddress
_MgmtRemoteAddress_Object = MibTableColumn
mgmtRemoteAddress = _MgmtRemoteAddress_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 7),
    _MgmtRemoteAddress_Type()
)
mgmtRemoteAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mgmtRemoteAddress.setStatus("mandatory")


class _MgmtPortStat_Type(Integer32):
    """Custom type mgmtPortStat based on Integer32"""
    defaultValue = 2

    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("down", 2),
          ("up", 1))
    )


_MgmtPortStat_Type.__name__ = "Integer32"
_MgmtPortStat_Object = MibTableColumn
mgmtPortStat = _MgmtPortStat_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 8),
    _MgmtPortStat_Type()
)
mgmtPortStat.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mgmtPortStat.setStatus("mandatory")
_MgmtBytesRcvd_Type = Counter32
_MgmtBytesRcvd_Object = MibTableColumn
mgmtBytesRcvd = _MgmtBytesRcvd_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 9),
    _MgmtBytesRcvd_Type()
)
mgmtBytesRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mgmtBytesRcvd.setStatus("mandatory")
_MgmtBytesSent_Type = Counter32
_MgmtBytesSent_Object = MibTableColumn
mgmtBytesSent = _MgmtBytesSent_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 10),
    _MgmtBytesSent_Type()
)
mgmtBytesSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mgmtBytesSent.setStatus("mandatory")


class _MgmtResetStat_Type(Integer32):
    """Custom type mgmtResetStat based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 1),
          ("yes", 2))
    )


_MgmtResetStat_Type.__name__ = "Integer32"
_MgmtResetStat_Object = MibTableColumn
mgmtResetStat = _MgmtResetStat_Object(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 44, 1, 1, 11),
    _MgmtResetStat_Type()
)
mgmtResetStat.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mgmtResetStat.setStatus("mandatory")

# Managed Objects groups


# Notification objects

dv2Message = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 1)
)
dv2Message.setObjects(
    ("DV2-MIB", "sysLastTrapMessage")
)
if mibBuilder.loadTexts:
    dv2Message.setStatus(
        ""
    )

slotChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 2)
)
slotChanged.setObjects(
      *(("DV2-MIB", "slot0PhySlotNo"),
        ("DV2-MIB", "slot0PhyState"))
)
if mibBuilder.loadTexts:
    slotChanged.setStatus(
        ""
    )

linkChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 3)
)
linkChanged.setObjects(
      *(("DV2-MIB", "slot0PhySlotNo"),
        ("DV2-MIB", "slot0PhyLink0State"),
        ("DV2-MIB", "slot0PhyLink1State"),
        ("DV2-MIB", "slot0PhyLink2State"),
        ("DV2-MIB", "slot0PhyLink3State"),
        ("DV2-MIB", "slot0PhyLstChngLnkNum"),
        ("DV2-MIB", "slot0PhyLstChngPrevLnkStat"))
)
if mibBuilder.loadTexts:
    linkChanged.setStatus(
        ""
    )

psuChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 4)
)
psuChanged.setObjects(
      *(("DV2-MIB", "slot0PsuIndex"),
        ("DV2-MIB", "slot0PsuFault"))
)
if mibBuilder.loadTexts:
    psuChanged.setStatus(
        ""
    )

configChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 5)
)
configChanged.setObjects(
      *(("DV2-MIB", "sysConfigChanged"),
        ("DV2-MIB", "slotNumber"))
)
if mibBuilder.loadTexts:
    configChanged.setStatus(
        ""
    )

reset040 = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 22)
)
reset040.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"))
)
if mibBuilder.loadTexts:
    reset040.setStatus(
        ""
    )

badPassword = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 23)
)
badPassword.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"))
)
if mibBuilder.loadTexts:
    badPassword.setStatus(
        ""
    )

billingRecFail = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 26)
)
billingRecFail.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"))
)
if mibBuilder.loadTexts:
    billingRecFail.setStatus(
        ""
    )

clockAlarm = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 27)
)
clockAlarm.setObjects(
      *(("DV2-MIB", "alarmStatus"),
        ("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "sysClkAlarmErr"),
        ("DV2-MIB", "pSlotNumber"),
        ("DV2-MIB", "pSysRefSelect"),
        ("DV2-MIB", "sSlotNumber"),
        ("DV2-MIB", "sSysRefSelect"),
        ("DV2-MIB", "inService"))
)
if mibBuilder.loadTexts:
    clockAlarm.setStatus(
        ""
    )

spvcInit = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 28)
)
spvcInit.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "sPvcId"),
        ("DV2-MIB", "slotNumber"))
)
if mibBuilder.loadTexts:
    spvcInit.setStatus(
        ""
    )

spvcFail = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 29)
)
spvcFail.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "sPvcId"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sPvcCauseDiagCode"))
)
if mibBuilder.loadTexts:
    spvcFail.setStatus(
        ""
    )

spvcCallClr = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 30)
)
spvcCallClr.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "sPvcId"),
        ("DV2-MIB", "slotNumber"))
)
if mibBuilder.loadTexts:
    spvcCallClr.setStatus(
        ""
    )

spvcCallReset = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 31)
)
spvcCallReset.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "sPvcId"),
        ("DV2-MIB", "slotNumber"))
)
if mibBuilder.loadTexts:
    spvcCallReset.setStatus(
        ""
    )

spvcRetryExceeded = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 33)
)
spvcRetryExceeded.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "sPvcId"),
        ("DV2-MIB", "slotNumber"))
)
if mibBuilder.loadTexts:
    spvcRetryExceeded.setStatus(
        ""
    )

mainInServ = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 76)
)
mainInServ.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slot0InUse"))
)
if mibBuilder.loadTexts:
    mainInServ.setStatus(
        ""
    )

standbyInServ = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 77)
)
standbyInServ.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slot0InUse"))
)
if mibBuilder.loadTexts:
    standbyInServ.setStatus(
        ""
    )

bill25pstfull = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 78)
)
bill25pstfull.setObjects(
    ("DV2-MIB", "billAvailable")
)
if mibBuilder.loadTexts:
    bill25pstfull.setStatus(
        ""
    )

bill75pstfull = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 79)
)
bill75pstfull.setObjects(
    ("DV2-MIB", "billAvailable")
)
if mibBuilder.loadTexts:
    bill75pstfull.setStatus(
        ""
    )

restart040 = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 80)
)
restart040.setObjects(
    ("DV2-MIB", "slotNumber")
)
if mibBuilder.loadTexts:
    restart040.setStatus(
        ""
    )

alcTxError = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 81)
)
alcTxError.setObjects(
    ("DV2-MIB", "slotNumber")
)
if mibBuilder.loadTexts:
    alcTxError.setStatus(
        ""
    )

lim_fault = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 91)
)
lim_fault.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "limTypeStatus"))
)
if mibBuilder.loadTexts:
    lim_fault.setStatus(
        ""
    )

lim_oper = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 92)
)
lim_oper.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "limTypeStatus"))
)
if mibBuilder.loadTexts:
    lim_oper.setStatus(
        ""
    )

psuAbsent = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 93)
)
psuAbsent.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slot0PsuIndex"))
)
if mibBuilder.loadTexts:
    psuAbsent.setStatus(
        ""
    )

psuPresent = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 94)
)
psuPresent.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slot0PsuIndex"))
)
if mibBuilder.loadTexts:
    psuPresent.setStatus(
        ""
    )

switchFabricSwap = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 95)
)
switchFabricSwap.setObjects(
    ("DV2-MIB", "sysLastTrapMessage")
)
if mibBuilder.loadTexts:
    switchFabricSwap.setStatus(
        ""
    )

internalReset = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 106)
)
internalReset.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"))
)
if mibBuilder.loadTexts:
    internalReset.setStatus(
        ""
    )

aal1Fault = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 107)
)
aal1Fault.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"))
)
if mibBuilder.loadTexts:
    aal1Fault.setStatus(
        ""
    )

aal1Clear = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 108)
)
aal1Clear.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"))
)
if mibBuilder.loadTexts:
    aal1Clear.setStatus(
        ""
    )

ds1LOS = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 109)
)
ds1LOS.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "ds1LOSAlarm"))
)
if mibBuilder.loadTexts:
    ds1LOS.setStatus(
        ""
    )

ds1LOF = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 110)
)
ds1LOF.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "ds1LOFAlarm"))
)
if mibBuilder.loadTexts:
    ds1LOF.setStatus(
        ""
    )

ds1AIS = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 111)
)
ds1AIS.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "ds1AISAlarm"))
)
if mibBuilder.loadTexts:
    ds1AIS.setStatus(
        ""
    )

ds1Yellow = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 112)
)
ds1Yellow.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "ds1YellowAlarm"))
)
if mibBuilder.loadTexts:
    ds1Yellow.setStatus(
        ""
    )

ds1ExBER = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 113)
)
ds1ExBER.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "ds1ExBERAlarm"))
)
if mibBuilder.loadTexts:
    ds1ExBER.setStatus(
        ""
    )

ds1v2LOS = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 114)
)
ds1v2LOS.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "ds1V2LOSAlarm"))
)
if mibBuilder.loadTexts:
    ds1v2LOS.setStatus(
        ""
    )

ds1v2LOF = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 115)
)
ds1v2LOF.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "ds1V2LOFAlarm"))
)
if mibBuilder.loadTexts:
    ds1v2LOF.setStatus(
        ""
    )

ds1v2AIS = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 116)
)
ds1v2AIS.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "ds1V2AISAlarm"))
)
if mibBuilder.loadTexts:
    ds1v2AIS.setStatus(
        ""
    )

ds1v2Yellow = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 117)
)
ds1v2Yellow.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "ds1V2FerfAlarm"))
)
if mibBuilder.loadTexts:
    ds1v2Yellow.setStatus(
        ""
    )

ds1v2ExBER = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 118)
)
ds1v2ExBER.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "ds1V2BERAlarm"))
)
if mibBuilder.loadTexts:
    ds1v2ExBER.setStatus(
        ""
    )

ds3LOS = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 119)
)
ds3LOS.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "ds3LOSAlarm"))
)
if mibBuilder.loadTexts:
    ds3LOS.setStatus(
        ""
    )

ds3V2LOS = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 120)
)
ds3V2LOS.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "ds3V2LOSAlarm"))
)
if mibBuilder.loadTexts:
    ds3V2LOS.setStatus(
        ""
    )

ds3LOF = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 121)
)
ds3LOF.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "pdhDS3LOFAlarm"))
)
if mibBuilder.loadTexts:
    ds3LOF.setStatus(
        ""
    )

ds3AIS = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 122)
)
ds3AIS.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "pdhDS3AISAlarm"))
)
if mibBuilder.loadTexts:
    ds3AIS.setStatus(
        ""
    )

ds3Yellow = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 123)
)
ds3Yellow.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "pdhDS3YellowAlarm"))
)
if mibBuilder.loadTexts:
    ds3Yellow.setStatus(
        ""
    )

ds3ExBER = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 124)
)
ds3ExBER.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "pdhDS3ExBERAlarm"))
)
if mibBuilder.loadTexts:
    ds3ExBER.setStatus(
        ""
    )

ds3FEFrmrDif = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 125)
)
ds3FEFrmrDif.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "pdhDS3RxFrmFmt"))
)
if mibBuilder.loadTexts:
    ds3FEFrmrDif.setStatus(
        ""
    )

e1LOS = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 126)
)
e1LOS.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "e1LOSAlarm"))
)
if mibBuilder.loadTexts:
    e1LOS.setStatus(
        ""
    )

e1LOF = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 127)
)
e1LOF.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "e1LOFAlarm"))
)
if mibBuilder.loadTexts:
    e1LOF.setStatus(
        ""
    )

e1AIS = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 128)
)
e1AIS.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "e1AISAlarm"))
)
if mibBuilder.loadTexts:
    e1AIS.setStatus(
        ""
    )

e1Yellow = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 129)
)
e1Yellow.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "e1FerfAlarm"))
)
if mibBuilder.loadTexts:
    e1Yellow.setStatus(
        ""
    )

e1ExBER = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 130)
)
e1ExBER.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "e1ExBERAlarm"))
)
if mibBuilder.loadTexts:
    e1ExBER.setStatus(
        ""
    )

e3LOS = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 131)
)
e3LOS.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "e3LOSAlarm"))
)
if mibBuilder.loadTexts:
    e3LOS.setStatus(
        ""
    )

e3LOF = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 132)
)
e3LOF.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "pdhE3LOFAlarm"))
)
if mibBuilder.loadTexts:
    e3LOF.setStatus(
        ""
    )

e3AIS = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 133)
)
e3AIS.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "pdhE3AISAlarm"))
)
if mibBuilder.loadTexts:
    e3AIS.setStatus(
        ""
    )

e3Yellow = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 134)
)
e3Yellow.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "pdhE3FERFAlarm"))
)
if mibBuilder.loadTexts:
    e3Yellow.setStatus(
        ""
    )

e3ExBER = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 135)
)
e3ExBER.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "pdhE3ExBERAlarm"))
)
if mibBuilder.loadTexts:
    e3ExBER.setStatus(
        ""
    )

locd = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 136)
)
locd.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "pdhPLCPLOCDAlarm"))
)
if mibBuilder.loadTexts:
    locd.setStatus(
        ""
    )

plcpYellow = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 137)
)
plcpYellow.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "pdhPLCPYellowAlarm"))
)
if mibBuilder.loadTexts:
    plcpYellow.setStatus(
        ""
    )

plcpLOF = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 138)
)
plcpLOF.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "pdhPLCPLOFAlarm"))
)
if mibBuilder.loadTexts:
    plcpLOF.setStatus(
        ""
    )

sdhLOS = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 139)
)
sdhLOS.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "sdhSAlarmLOS"))
)
if mibBuilder.loadTexts:
    sdhLOS.setStatus(
        ""
    )

sdhLOF = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 140)
)
sdhLOF.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "sdhSAlarmLOF"))
)
if mibBuilder.loadTexts:
    sdhLOF.setStatus(
        ""
    )

sdhLineAIS = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 141)
)
sdhLineAIS.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "sdhSAlarmLineAIS"))
)
if mibBuilder.loadTexts:
    sdhLineAIS.setStatus(
        ""
    )

sdhPathAIS = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 142)
)
sdhPathAIS.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "sdhSAlarmPathAIS"))
)
if mibBuilder.loadTexts:
    sdhPathAIS.setStatus(
        ""
    )

sdhLOP = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 143)
)
sdhLOP.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "sdhSAlarmLOP"))
)
if mibBuilder.loadTexts:
    sdhLOP.setStatus(
        ""
    )

sdhPLM = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 144)
)
sdhPLM.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "sdhSAlarmPLM"))
)
if mibBuilder.loadTexts:
    sdhPLM.setStatus(
        ""
    )

sdhLineYellow = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 145)
)
sdhLineYellow.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "sdhSAlarmLineRFI"))
)
if mibBuilder.loadTexts:
    sdhLineYellow.setStatus(
        ""
    )

sdhPathYellow = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 146)
)
sdhPathYellow.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "sdhSAlarmPathRFI"))
)
if mibBuilder.loadTexts:
    sdhPathYellow.setStatus(
        ""
    )

sdhExBER = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 147)
)
sdhExBER.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "sdhSExBERAlarm"))
)
if mibBuilder.loadTexts:
    sdhExBER.setStatus(
        ""
    )

clockActiveRef = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 148)
)
clockActiveRef.setObjects(
    ("DV2-MIB", "inService")
)
if mibBuilder.loadTexts:
    clockActiveRef.setStatus(
        ""
    )

outOfResource = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 149)
)
outOfResource.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"))
)
if mibBuilder.loadTexts:
    outOfResource.setStatus(
        ""
    )

hssiLOS = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 150)
)
hssiLOS.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "hssiLOSAlarm"))
)
if mibBuilder.loadTexts:
    hssiLOS.setStatus(
        ""
    )

hssiDTEReady = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 151)
)
hssiDTEReady.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"))
)
if mibBuilder.loadTexts:
    hssiDTEReady.setStatus(
        ""
    )

hssiDCEReady = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 152)
)
hssiDCEReady.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"))
)
if mibBuilder.loadTexts:
    hssiDCEReady.setStatus(
        ""
    )

hssiDTENotReady = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 153)
)
hssiDTENotReady.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"))
)
if mibBuilder.loadTexts:
    hssiDTENotReady.setStatus(
        ""
    )

hssiDCENotReady = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 154)
)
hssiDCENotReady.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"))
)
if mibBuilder.loadTexts:
    hssiDCENotReady.setStatus(
        ""
    )

userstatus1 = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 155)
)
userstatus1.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "userInputStatus"))
)
if mibBuilder.loadTexts:
    userstatus1.setStatus(
        ""
    )

userstatus2 = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 156)
)
userstatus2.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "userInputStatus"))
)
if mibBuilder.loadTexts:
    userstatus2.setStatus(
        ""
    )

pntmoper = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 157)
)
pntmoper.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "pscatmode"))
)
if mibBuilder.loadTexts:
    pntmoper.setStatus(
        ""
    )

sntmoper = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 158)
)
sntmoper.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "sscatmode"))
)
if mibBuilder.loadTexts:
    sntmoper.setStatus(
        ""
    )

pntmoscstatus = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 159)
)
pntmoscstatus.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "pcatstr3oscstatus"))
)
if mibBuilder.loadTexts:
    pntmoscstatus.setStatus(
        ""
    )

sntmoscstatus = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 160)
)
sntmoscstatus.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "scatstr3oscstatus"))
)
if mibBuilder.loadTexts:
    sntmoscstatus.setStatus(
        ""
    )

pbitslineok = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 161)
)
pbitslineok.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "pbslineok"))
)
if mibBuilder.loadTexts:
    pbitslineok.setStatus(
        ""
    )

sbitslineok = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 162)
)
sbitslineok.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "sbslineok"))
)
if mibBuilder.loadTexts:
    sbitslineok.setStatus(
        ""
    )

svcHalfConnect = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 163)
)
svcHalfConnect.setObjects(
      *(("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "svcHalfConCnt"))
)
if mibBuilder.loadTexts:
    svcHalfConnect.setStatus(
        ""
    )

duplicateIpAddr = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 164)
)
duplicateIpAddr.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "qeDocMacAddress"))
)
if mibBuilder.loadTexts:
    duplicateIpAddr.setStatus(
        ""
    )

svcQsaalReset = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 165)
)
svcQsaalReset.setObjects(
    ("DV2-MIB", "slotNumber")
)
if mibBuilder.loadTexts:
    svcQsaalReset.setStatus(
        ""
    )

svcQsaalUpDown = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 166)
)
svcQsaalUpDown.setObjects(
    ("DV2-MIB", "slotNumber")
)
if mibBuilder.loadTexts:
    svcQsaalUpDown.setStatus(
        ""
    )

svcT309Expiry = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 167)
)
svcT309Expiry.setObjects(
    ("DV2-MIB", "slotNumber")
)
if mibBuilder.loadTexts:
    svcT309Expiry.setStatus(
        ""
    )

j2LOS = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 168)
)
j2LOS.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "j2LOSAlarm"))
)
if mibBuilder.loadTexts:
    j2LOS.setStatus(
        ""
    )

j2LOF = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 169)
)
j2LOF.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "j2LOFAlarm"))
)
if mibBuilder.loadTexts:
    j2LOF.setStatus(
        ""
    )

j2AIS = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 170)
)
j2AIS.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "j2AISAlarm"))
)
if mibBuilder.loadTexts:
    j2AIS.setStatus(
        ""
    )

j2RAI = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 171)
)
j2RAI.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "j2RAlmAlarm"))
)
if mibBuilder.loadTexts:
    j2RAI.setStatus(
        ""
    )

scfLOS = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 172)
)
scfLOS.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slotNumber"),
        ("DV2-MIB", "sysLkLinkNo"),
        ("DV2-MIB", "scfLOSAlarm"))
)
if mibBuilder.loadTexts:
    scfLOS.setStatus(
        ""
    )

routeLoadFail = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 173)
)
routeLoadFail.setObjects(
    ("DV2-MIB", "slotNumber")
)
if mibBuilder.loadTexts:
    routeLoadFail.setStatus(
        ""
    )

dTLLoadFail = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 174)
)
dTLLoadFail.setObjects(
    ("DV2-MIB", "slotNumber")
)
if mibBuilder.loadTexts:
    dTLLoadFail.setStatus(
        ""
    )

redunNotAvail = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 175)
)
redunNotAvail.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slot0IsStandbySlot0"))
)
if mibBuilder.loadTexts:
    redunNotAvail.setStatus(
        ""
    )

redunAvail = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 176)
)
redunAvail.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "slot0IsStandbySlot0"))
)
if mibBuilder.loadTexts:
    redunAvail.setStatus(
        ""
    )

dQ7_error = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 177)
)
dQ7_error.setObjects(
    ("DV2-MIB", "slotNumber")
)
if mibBuilder.loadTexts:
    dQ7_error.setStatus(
        ""
    )

oamVcaRcvAIS_RDI = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 178)
)
oamVcaRcvAIS_RDI.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "oamVcaVpi"),
        ("DV2-MIB", "oamVcaVci"),
        ("DV2-MIB", "oamVcaAisRdiState"))
)
if mibBuilder.loadTexts:
    oamVcaRcvAIS_RDI.setStatus(
        ""
    )

oamVcbRcvAIS_RDI = NotificationType(
    (1, 3, 6, 1, 4, 1, 251, 1, 1, 0, 179)
)
oamVcbRcvAIS_RDI.setObjects(
      *(("DV2-MIB", "sysLastTrapMessage"),
        ("DV2-MIB", "oamVcbVpi"),
        ("DV2-MIB", "oamVcbVci"),
        ("DV2-MIB", "oamVcbAisRdiState"))
)
if mibBuilder.loadTexts:
    oamVcbRcvAIS_RDI.setStatus(
        ""
    )


# Notifications groups


# Agent capabilities


# Module compliance


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "DV2-MIB",
    **{"VirtualCircuitIdentifier": VirtualCircuitIdentifier,
       "VirtualPathIdentifier": VirtualPathIdentifier,
       "E164": E164,
       "E164SUB": E164SUB,
       "Q93bCauseDiag": Q93bCauseDiag,
       "Hex": Hex,
       "DateTimeString": DateTimeString,
       "DateAndTime": DateAndTime,
       "netcomm": netcomm,
       "products": products,
       "dv2": dv2,
       "dv2Message": dv2Message,
       "slotChanged": slotChanged,
       "linkChanged": linkChanged,
       "psuChanged": psuChanged,
       "configChanged": configChanged,
       "reset040": reset040,
       "badPassword": badPassword,
       "billingRecFail": billingRecFail,
       "clockAlarm": clockAlarm,
       "spvcInit": spvcInit,
       "spvcFail": spvcFail,
       "spvcCallClr": spvcCallClr,
       "spvcCallReset": spvcCallReset,
       "spvcRetryExceeded": spvcRetryExceeded,
       "mainInServ": mainInServ,
       "standbyInServ": standbyInServ,
       "bill25pstfull": bill25pstfull,
       "bill75pstfull": bill75pstfull,
       "restart040": restart040,
       "alcTxError": alcTxError,
       "lim-fault": lim_fault,
       "lim-oper": lim_oper,
       "psuAbsent": psuAbsent,
       "psuPresent": psuPresent,
       "switchFabricSwap": switchFabricSwap,
       "internalReset": internalReset,
       "aal1Fault": aal1Fault,
       "aal1Clear": aal1Clear,
       "ds1LOS": ds1LOS,
       "ds1LOF": ds1LOF,
       "ds1AIS": ds1AIS,
       "ds1Yellow": ds1Yellow,
       "ds1ExBER": ds1ExBER,
       "ds1v2LOS": ds1v2LOS,
       "ds1v2LOF": ds1v2LOF,
       "ds1v2AIS": ds1v2AIS,
       "ds1v2Yellow": ds1v2Yellow,
       "ds1v2ExBER": ds1v2ExBER,
       "ds3LOS": ds3LOS,
       "ds3V2LOS": ds3V2LOS,
       "ds3LOF": ds3LOF,
       "ds3AIS": ds3AIS,
       "ds3Yellow": ds3Yellow,
       "ds3ExBER": ds3ExBER,
       "ds3FEFrmrDif": ds3FEFrmrDif,
       "e1LOS": e1LOS,
       "e1LOF": e1LOF,
       "e1AIS": e1AIS,
       "e1Yellow": e1Yellow,
       "e1ExBER": e1ExBER,
       "e3LOS": e3LOS,
       "e3LOF": e3LOF,
       "e3AIS": e3AIS,
       "e3Yellow": e3Yellow,
       "e3ExBER": e3ExBER,
       "locd": locd,
       "plcpYellow": plcpYellow,
       "plcpLOF": plcpLOF,
       "sdhLOS": sdhLOS,
       "sdhLOF": sdhLOF,
       "sdhLineAIS": sdhLineAIS,
       "sdhPathAIS": sdhPathAIS,
       "sdhLOP": sdhLOP,
       "sdhPLM": sdhPLM,
       "sdhLineYellow": sdhLineYellow,
       "sdhPathYellow": sdhPathYellow,
       "sdhExBER": sdhExBER,
       "clockActiveRef": clockActiveRef,
       "outOfResource": outOfResource,
       "hssiLOS": hssiLOS,
       "hssiDTEReady": hssiDTEReady,
       "hssiDCEReady": hssiDCEReady,
       "hssiDTENotReady": hssiDTENotReady,
       "hssiDCENotReady": hssiDCENotReady,
       "userstatus1": userstatus1,
       "userstatus2": userstatus2,
       "pntmoper": pntmoper,
       "sntmoper": sntmoper,
       "pntmoscstatus": pntmoscstatus,
       "sntmoscstatus": sntmoscstatus,
       "pbitslineok": pbitslineok,
       "sbitslineok": sbitslineok,
       "svcHalfConnect": svcHalfConnect,
       "duplicateIpAddr": duplicateIpAddr,
       "svcQsaalReset": svcQsaalReset,
       "svcQsaalUpDown": svcQsaalUpDown,
       "svcT309Expiry": svcT309Expiry,
       "j2LOS": j2LOS,
       "j2LOF": j2LOF,
       "j2AIS": j2AIS,
       "j2RAI": j2RAI,
       "scfLOS": scfLOS,
       "routeLoadFail": routeLoadFail,
       "dTLLoadFail": dTLLoadFail,
       "redunNotAvail": redunNotAvail,
       "redunAvail": redunAvail,
       "dQ7-error": dQ7_error,
       "oamVcaRcvAIS-RDI": oamVcaRcvAIS_RDI,
       "oamVcbRcvAIS-RDI": oamVcbRcvAIS_RDI,
       "dv2System": dv2System,
       "sysMemEnd": sysMemEnd,
       "sysInitialMemB": sysInitialMemB,
       "sysCurrentMemB": sysCurrentMemB,
       "sysInitialSema": sysInitialSema,
       "sysCurrentSema": sysCurrentSema,
       "sysInitialQItems": sysInitialQItems,
       "sysCurrentQItems": sysCurrentQItems,
       "sysInitialQs": sysInitialQs,
       "sysCurrentQs": sysCurrentQs,
       "sysInitialPorts": sysInitialPorts,
       "sysCurrentPorts": sysCurrentPorts,
       "sysDefaultCellMode": sysDefaultCellMode,
       "sysLinkTable": sysLinkTable,
       "sysLinkEntry": sysLinkEntry,
       "sysLkLinkNo": sysLkLinkNo,
       "sysLkKillLink": sysLkKillLink,
       "sysLkState": sysLkState,
       "sysLkTxCells": sysLkTxCells,
       "sysLkRxCells": sysLkRxCells,
       "sysLkTxRate": sysLkTxRate,
       "sysLkRxRate": sysLkRxRate,
       "sysLkTxMaxRate": sysLkTxMaxRate,
       "sysLkRxMaxRate": sysLkRxMaxRate,
       "sysLkResetStats": sysLkResetStats,
       "sysLkClockSrc": sysLkClockSrc,
       "sysLkResetResrc": sysLkResetResrc,
       "sysLKEgCLPThreshold": sysLKEgCLPThreshold,
       "sysLKIgCLPThreshold": sysLKIgCLPThreshold,
       "sysLKEgEFCIThreshold": sysLKEgEFCIThreshold,
       "sysLKIgEFCIThreshold": sysLKIgEFCIThreshold,
       "sysLKEgLogBuffer": sysLKEgLogBuffer,
       "sysLKIgLogBuffer": sysLKIgLogBuffer,
       "sysLKEgFIFODepth": sysLKEgFIFODepth,
       "sysLKIgFIFODepth": sysLKIgFIFODepth,
       "sysLKEgMemBlockId": sysLKEgMemBlockId,
       "sysLKIgMemBlockId": sysLKIgMemBlockId,
       "sysDbTable": sysDbTable,
       "sysDbEntry": sysDbEntry,
       "sysDbIndex": sysDbIndex,
       "sysDbSize": sysDbSize,
       "sysDbInitial": sysDbInitial,
       "sysDbCurrent": sysDbCurrent,
       "sysAuthenticateTable": sysAuthenticateTable,
       "sysAuthenticateEntry": sysAuthenticateEntry,
       "sysAuIndex": sysAuIndex,
       "sysAuIpaddress": sysAuIpaddress,
       "sysAuCommunity": sysAuCommunity,
       "sysAuAccess": sysAuAccess,
       "sysAuSendTraps": sysAuSendTraps,
       "sysAuValidity": sysAuValidity,
       "sysLastTrapMessage": sysLastTrapMessage,
       "sysConfigChanged": sysConfigChanged,
       "sysConfigFile": sysConfigFile,
       "sysCompileTime": sysCompileTime,
       "slotNumber": slotNumber,
       "sysLastResetTimeM2": sysLastResetTimeM2,
       "sysCurrentTimeM2": sysCurrentTimeM2,
       "limTypeStatus": limTypeStatus,
       "dv2Slot0": dv2Slot0,
       "slot0IntIp": slot0IntIp,
       "slot0XpInUse": slot0XpInUse,
       "slot0XpToUse": slot0XpToUse,
       "slot0StandbyXp": slot0StandbyXp,
       "slot0PsuTable": slot0PsuTable,
       "slot0PsuEntry": slot0PsuEntry,
       "slot0PsuIndex": slot0PsuIndex,
       "slot0PsuFault": slot0PsuFault,
       "slot0PsuTestFault": slot0PsuTestFault,
       "slot0PsuVoltage": slot0PsuVoltage,
       "slot0PsuTemp": slot0PsuTemp,
       "slot0PsuFanASpeed": slot0PsuFanASpeed,
       "slot0PsuFanBSpeed": slot0PsuFanBSpeed,
       "slot0PsuFanCSpeed": slot0PsuFanCSpeed,
       "slot0PsuReset": slot0PsuReset,
       "slot0PsuType": slot0PsuType,
       "slot0PsuFanFail": slot0PsuFanFail,
       "slot0PsuTooHot": slot0PsuTooHot,
       "slot0PsuFrontTooHot": slot0PsuFrontTooHot,
       "slot0PhyTable": slot0PhyTable,
       "slot0PhyEntry": slot0PhyEntry,
       "slot0PhySlotNo": slot0PhySlotNo,
       "slot0PhyName": slot0PhyName,
       "slot0PhyType": slot0PhyType,
       "slot0PhyDlim": slot0PhyDlim,
       "slot0PhySwVer": slot0PhySwVer,
       "slot0PhyState": slot0PhyState,
       "slot0PhyReset": slot0PhyReset,
       "slot0PhyReqState": slot0PhyReqState,
       "slot0PhyStateChange": slot0PhyStateChange,
       "slot0PhyLinkedSlot": slot0PhyLinkedSlot,
       "slot0PhyLink0State": slot0PhyLink0State,
       "slot0PhyLink1State": slot0PhyLink1State,
       "slot0PhyLink2State": slot0PhyLink2State,
       "slot0PhyLink3State": slot0PhyLink3State,
       "slot0PhySlotSerNo": slot0PhySlotSerNo,
       "slot0PhySlotHwVerNo": slot0PhySlotHwVerNo,
       "slot0PhyDocSerNo": slot0PhyDocSerNo,
       "slot0PhyDocHwVerNo": slot0PhyDocHwVerNo,
       "slot0PhyMacAddress": slot0PhyMacAddress,
       "slot0PhyChangeTimeM2": slot0PhyChangeTimeM2,
       "slot0PhyLstChngLnkNum": slot0PhyLstChngLnkNum,
       "slot0PhyLstChngPrevLnkStat": slot0PhyLstChngPrevLnkStat,
       "slot0MaxUpSlots": slot0MaxUpSlots,
       "slot0CurrentUpSlots": slot0CurrentUpSlots,
       "slot0IsStandbySlot0": slot0IsStandbySlot0,
       "slot0TftpToStandby": slot0TftpToStandby,
       "slot0MibBroadcast": slot0MibBroadcast,
       "slot0Address": slot0Address,
       "slot0InUse": slot0InUse,
       "slot0ToUse": slot0ToUse,
       "slot0redmode": slot0redmode,
       "slot0IntIPMask": slot0IntIPMask,
       "slot0SwitchId": slot0SwitchId,
       "ntms0doc": ntms0doc,
       "slot0LecsPrefix": slot0LecsPrefix,
       "slot0LecsESI": slot0LecsESI,
       "dv2Trace": dv2Trace,
       "traceIp": traceIp,
       "traceUdp": traceUdp,
       "traceTcp": traceTcp,
       "traceSnmp": traceSnmp,
       "traceCat": traceCat,
       "dv2SlipLine": dv2SlipLine,
       "slipIp": slipIp,
       "slipMask": slipMask,
       "slipRemoteIp": slipRemoteIp,
       "slipSpeed": slipSpeed,
       "dv2StaticRoute": dv2StaticRoute,
       "dv2Clocks": dv2Clocks,
       "clksTxTimingRef": clksTxTimingRef,
       "clksSysRefSlotNum": clksSysRefSlotNum,
       "clksSysRefLinkNum": clksSysRefLinkNum,
       "clksSysRefError": clksSysRefError,
       "dv2VcDoc": dv2VcDoc,
       "vcDocTable": vcDocTable,
       "vcDocEntry": vcDocEntry,
       "vcDocLinkNo": vcDocLinkNo,
       "vcDocEnable": vcDocEnable,
       "vcDocVpi": vcDocVpi,
       "vcDocVci": vcDocVci,
       "vcDocLinkSpeed": vcDocLinkSpeed,
       "vcDocCLines": vcDocCLines,
       "vcDocFifoSize": vcDocFifoSize,
       "vcDocLowWater": vcDocLowWater,
       "vcDocHighWater": vcDocHighWater,
       "vcDocTestMode": vcDocTestMode,
       "vcDocTestVal": vcDocTestVal,
       "vcDocPriority": vcDocPriority,
       "vcDocSuba": vcDocSuba,
       "vcDocSaddr": vcDocSaddr,
       "vcDocClockFix": vcDocClockFix,
       "vcStatTable": vcStatTable,
       "vcStatEntry": vcStatEntry,
       "vcStatPortNo": vcStatPortNo,
       "vcStatRxState": vcStatRxState,
       "vcStatTxState": vcStatTxState,
       "vcStatFifoCount": vcStatFifoCount,
       "vcStatOFlow": vcStatOFlow,
       "vcStatUFlow": vcStatUFlow,
       "vcStatReSync": vcStatReSync,
       "vcStatInvented": vcStatInvented,
       "vcStatRxCells": vcStatRxCells,
       "vcStatTxCells": vcStatTxCells,
       "vcStatRxSeqNo": vcStatRxSeqNo,
       "vcStatTxSeqNo": vcStatTxSeqNo,
       "vcStatLastError": vcStatLastError,
       "vcStatLastCompare": vcStatLastCompare,
       "vcStatTestErrors": vcStatTestErrors,
       "dv2FrRelay": dv2FrRelay,
       "fRelayStatTable": fRelayStatTable,
       "fRelayStatEntry": fRelayStatEntry,
       "fRelStatLinkNo": fRelStatLinkNo,
       "fRelStatLocSeq": fRelStatLocSeq,
       "fRelStatLocAck": fRelStatLocAck,
       "fRelStatLocState": fRelStatLocState,
       "fRelStatLocStartT": fRelStatLocStartT,
       "fRelStatLocErrThr": fRelStatLocErrThr,
       "fRelStatLocMec": fRelStatLocMec,
       "fRelStatLocPoll": fRelStatLocPoll,
       "fRelStatRemSeq": fRelStatRemSeq,
       "fRelStatRemAck": fRelStatRemAck,
       "fRelStatRemState": fRelStatRemState,
       "fRelStatRemStartT": fRelStatRemStartT,
       "fRelStatRemErrThr": fRelStatRemErrThr,
       "fRelStatRemMec": fRelStatRemMec,
       "fRelStatRemPoll": fRelStatRemPoll,
       "fRelayConfTable": fRelayConfTable,
       "fRelayConfEntry": fRelayConfEntry,
       "fRelConfLinkNo": fRelConfLinkNo,
       "fRelConfLinkEnab": fRelConfLinkEnab,
       "fRelConfLinkMode": fRelConfLinkMode,
       "fRelConfLinkSpeed": fRelConfLinkSpeed,
       "fRelConfLinkCline": fRelConfLinkCline,
       "fRelConfLinkType": fRelConfLinkType,
       "fRelConfN391": fRelConfN391,
       "fRelConfN392": fRelConfN392,
       "fRelConfN393": fRelConfN393,
       "fRelConfT391": fRelConfT391,
       "fRelConfT392": fRelConfT392,
       "fraPStatTable": fraPStatTable,
       "fraPStatEntry": fraPStatEntry,
       "fraPStatDlci": fraPStatDlci,
       "fraPStatRxBCnt": fraPStatRxBCnt,
       "fraPStatTxBCnt": fraPStatTxBCnt,
       "fraPStatRxFCnt": fraPStatRxFCnt,
       "fraPStatTxFCnt": fraPStatTxFCnt,
       "fraPStatRxBRate": fraPStatRxBRate,
       "fraPStatTxBRate": fraPStatTxBRate,
       "fraPStatRxFRate": fraPStatRxFRate,
       "fraPStatTxFRate": fraPStatTxFRate,
       "fraPStatDERxF": fraPStatDERxF,
       "fraPStatDisRxF": fraPStatDisRxF,
       "fraPStatPvcStat": fraPStatPvcStat,
       "fraPStatLinkState": fraPStatLinkState,
       "fraPStatLocSeq": fraPStatLocSeq,
       "fraPStatLocAck": fraPStatLocAck,
       "fraPStatLocStat": fraPStatLocStat,
       "fraPStatLocStartT": fraPStatLocStartT,
       "fraPStatLocErrThr": fraPStatLocErrThr,
       "fraPStatLocMec": fraPStatLocMec,
       "fraPStatLocPoll": fraPStatLocPoll,
       "fraPStatRemSeq": fraPStatRemSeq,
       "fraPStatRemAck": fraPStatRemAck,
       "fraPStatRemStat": fraPStatRemStat,
       "fraPStatRemStartT": fraPStatRemStartT,
       "fraPStatRemErrThr": fraPStatRemErrThr,
       "fraPStatRemMec": fraPStatRemMec,
       "fraPStatRemPoll": fraPStatRemPoll,
       "fraPStatLastChangeM2": fraPStatLastChangeM2,
       "fraPConfigTable": fraPConfigTable,
       "fraPConfigEntry": fraPConfigEntry,
       "fraPConfigDlci": fraPConfigDlci,
       "fraPConfigCir": fraPConfigCir,
       "fraPConfigCommitB": fraPConfigCommitB,
       "fraPConfigExcessB": fraPConfigExcessB,
       "fraVpi": fraVpi,
       "fraVci": fraVci,
       "fraPConfigPriority": fraPConfigPriority,
       "fraPConfigSuba": fraPConfigSuba,
       "fraPConfigSaddr": fraPConfigSaddr,
       "fraPConfigValidity": fraPConfigValidity,
       "fraPConfigDxivpi": fraPConfigDxivpi,
       "fraPConfigDxivci": fraPConfigDxivci,
       "fraPConfigDximode": fraPConfigDximode,
       "frbPStatTable": frbPStatTable,
       "frbPStatEntry": frbPStatEntry,
       "frbPStatDlci": frbPStatDlci,
       "frbPStatRxBCnt": frbPStatRxBCnt,
       "frbPStatTxBCnt": frbPStatTxBCnt,
       "frbPStatRxFCnt": frbPStatRxFCnt,
       "frbPStatTxFCnt": frbPStatTxFCnt,
       "frbPStatRxBRate": frbPStatRxBRate,
       "frbPStatTxBRate": frbPStatTxBRate,
       "frbPStatRxFRate": frbPStatRxFRate,
       "frbPStatTxFRate": frbPStatTxFRate,
       "frbPStatDERxF": frbPStatDERxF,
       "frbPStatDisRxF": frbPStatDisRxF,
       "frbPStatPvcStat": frbPStatPvcStat,
       "frbPStatLinkState": frbPStatLinkState,
       "frbPStatLocSeq": frbPStatLocSeq,
       "frbPStatLocAck": frbPStatLocAck,
       "frbPStatLocStat": frbPStatLocStat,
       "frbPStatLocStartT": frbPStatLocStartT,
       "frbPStatLocErrThr": frbPStatLocErrThr,
       "frbPStatLocMec": frbPStatLocMec,
       "frbPStatLocPoll": frbPStatLocPoll,
       "frbPStatRemSeq": frbPStatRemSeq,
       "frbPStatRemAck": frbPStatRemAck,
       "frbPStatRemStat": frbPStatRemStat,
       "frbPStatRemStartT": frbPStatRemStartT,
       "frbPStatRemErrThr": frbPStatRemErrThr,
       "frbPStatRemMec": frbPStatRemMec,
       "frbPStatRemPoll": frbPStatRemPoll,
       "frbPStatLastChangeM2": frbPStatLastChangeM2,
       "frbPConfigTable": frbPConfigTable,
       "frbPConfigEntry": frbPConfigEntry,
       "frbPConfigDlci": frbPConfigDlci,
       "frbPConfigCir": frbPConfigCir,
       "frbPConfigCommitB": frbPConfigCommitB,
       "frbPConfigExcessB": frbPConfigExcessB,
       "frbVpi": frbVpi,
       "frbVci": frbVci,
       "frbPConfigPriority": frbPConfigPriority,
       "frbPConfigSuba": frbPConfigSuba,
       "frbPConfigSaddr": frbPConfigSaddr,
       "frbPConfigValidity": frbPConfigValidity,
       "frbPConfigDxivpi": frbPConfigDxivpi,
       "frbPConfigDxivci": frbPConfigDxivci,
       "frbPConfigDximode": frbPConfigDximode,
       "dv2VcStatus": dv2VcStatus,
       "vcaTable": vcaTable,
       "vcaEntry": vcaEntry,
       "vcaVpi": vcaVpi,
       "vcaVci": vcaVci,
       "vcaTxGCells": vcaTxGCells,
       "vcaTxGCellsClp1": vcaTxGCellsClp1,
       "vcaRxGCells": vcaRxGCells,
       "vcaExcessCells": vcaExcessCells,
       "vcaPeakExceeds": vcaPeakExceeds,
       "vcaCellHead": vcaCellHead,
       "vcaCellMask": vcaCellMask,
       "vcaCellSwitchHead": vcaCellSwitchHead,
       "vcaStartTime": vcaStartTime,
       "vcaBucketControl": vcaBucketControl,
       "vcaBucket0CV": vcaBucket0CV,
       "vcaBucket0Max": vcaBucket0Max,
       "vcaBucket0Inc": vcaBucket0Inc,
       "vcaBucket1CV": vcaBucket1CV,
       "vcaBucket1Max": vcaBucket1Max,
       "vcaBucket1Inc": vcaBucket1Inc,
       "vcaBucket2CV": vcaBucket2CV,
       "vcaBucket2Max": vcaBucket2Max,
       "vcaBucket2Inc": vcaBucket2Inc,
       "vcaBucket3CV": vcaBucket3CV,
       "vcaBucket3Max": vcaBucket3Max,
       "vcaBucket3Inc": vcaBucket3Inc,
       "vcaType": vcaType,
       "vcaDstSlot": vcaDstSlot,
       "vcaDstLink": vcaDstLink,
       "vcaDstVpi": vcaDstVpi,
       "vcaDstVci": vcaDstVci,
       "vcaInternalVpi": vcaInternalVpi,
       "vcaInternalVci": vcaInternalVci,
       "vcbTable": vcbTable,
       "vcbEntry": vcbEntry,
       "vcbVpi": vcbVpi,
       "vcbVci": vcbVci,
       "vcbTxGCells": vcbTxGCells,
       "vcbTxGCellsClp1": vcbTxGCellsClp1,
       "vcbRxGCells": vcbRxGCells,
       "vcbExcessCells": vcbExcessCells,
       "vcbPeakExceeds": vcbPeakExceeds,
       "vcbCellHead": vcbCellHead,
       "vcbCellMask": vcbCellMask,
       "vcbCellSwitchHead": vcbCellSwitchHead,
       "vcbStartTime": vcbStartTime,
       "vcbBucketControl": vcbBucketControl,
       "vcbBucket0CV": vcbBucket0CV,
       "vcbBucket0Max": vcbBucket0Max,
       "vcbBucket0Inc": vcbBucket0Inc,
       "vcbBucket1CV": vcbBucket1CV,
       "vcbBucket1Max": vcbBucket1Max,
       "vcbBucket1Inc": vcbBucket1Inc,
       "vcbBucket2CV": vcbBucket2CV,
       "vcbBucket2Max": vcbBucket2Max,
       "vcbBucket2Inc": vcbBucket2Inc,
       "vcbBucket3CV": vcbBucket3CV,
       "vcbBucket3Max": vcbBucket3Max,
       "vcbBucket3Inc": vcbBucket3Inc,
       "vcbType": vcbType,
       "vcbDstSlot": vcbDstSlot,
       "vcbDstLink": vcbDstLink,
       "vcbDstVpi": vcbDstVpi,
       "vcbDstVci": vcbDstVci,
       "vcbInternalVpi": vcbInternalVpi,
       "vcbInternalVci": vcbInternalVci,
       "xpStatTable": xpStatTable,
       "xpStatEntry": xpStatEntry,
       "xpIFace": xpIFace,
       "xpRXCells": xpRXCells,
       "xpTXCells": xpTXCells,
       "xpBadVpiVci": xpBadVpiVci,
       "xpRxOverflow": xpRxOverflow,
       "xpTxHighPrOver": xpTxHighPrOver,
       "xpTxLowPrOver": xpTxLowPrOver,
       "xpInputOverflow": xpInputOverflow,
       "xpDocErrors": xpDocErrors,
       "xpLowPriorityFifo": xpLowPriorityFifo,
       "xpEgDiscCells": xpEgDiscCells,
       "xpIgDiscCells": xpIgDiscCells,
       "dv2PLPP": dv2PLPP,
       "plppCTable": plppCTable,
       "plppCEntry": plppCEntry,
       "plppCLinkNo": plppCLinkNo,
       "plppCLinkEnab": plppCLinkEnab,
       "plppCCPLCPMode": plppCCPLCPMode,
       "plppCDS3Framer": plppCDS3Framer,
       "plppCScrambler": plppCScrambler,
       "plppC0x55": plppC0x55,
       "plppCCLine": plppCCLine,
       "plppCLoopback": plppCLoopback,
       "plppCSmdsMode": plppCSmdsMode,
       "plppCPloadTypeLab": plppCPloadTypeLab,
       "plppCTxTrlTrcIdLen": plppCTxTrlTrcIdLen,
       "plppCTxTrcId": plppCTxTrcId,
       "plppCRxExTrcId": plppCRxExTrcId,
       "plppSTable": plppSTable,
       "plppSEntry": plppSEntry,
       "plppSLinkNo": plppSLinkNo,
       "plppSCLines": plppSCLines,
       "plppSTXclock": plppSTXclock,
       "plppSRXclock": plppSRXclock,
       "plppSTXCells": plppSTXCells,
       "plppSRXCells": plppSRXCells,
       "plppSHCSErrs": plppSHCSErrs,
       "plppSFrameErrs": plppSFrameErrs,
       "plppSBIP8Errs": plppSBIP8Errs,
       "plppSFEBEErrs": plppSFEBEErrs,
       "plppSSPLRStatus": plppSSPLRStatus,
       "plppSDs3Lcvs": plppSDs3Lcvs,
       "plppSDs3FrameErrs": plppSDs3FrameErrs,
       "plppSDs3ParityErrs": plppSDs3ParityErrs,
       "plppSDs3CbitPrtyErrs": plppSDs3CbitPrtyErrs,
       "plppSDs3FEBEErrs": plppSDs3FEBEErrs,
       "plppSDs3RxAIS": plppSDs3RxAIS,
       "plppSDs3RxRedAlarm": plppSDs3RxRedAlarm,
       "plppSDs3RxYellowAlarm": plppSDs3RxYellowAlarm,
       "plppSPLCPRxYellowAlarm": plppSPLCPRxYellowAlarm,
       "plppsRxTrIdMis": plppsRxTrIdMis,
       "plppsRxTrIdUnst": plppsRxTrIdUnst,
       "plppsRxPloadTypeLabMis": plppsRxPloadTypeLabMis,
       "plppsRxPloadTypeLabUnst": plppsRxPloadTypeLabUnst,
       "plppsRxTrlTrc": plppsRxTrlTrc,
       "plppV2CTable": plppV2CTable,
       "plppV2CEntry": plppV2CEntry,
       "plppV2CLinkNo": plppV2CLinkNo,
       "plppV2CLinkEnab": plppV2CLinkEnab,
       "plppV2CCPLCPMode": plppV2CCPLCPMode,
       "plppV2CDS3Framer": plppV2CDS3Framer,
       "plppV2CScrambler": plppV2CScrambler,
       "plppV2C0x55": plppV2C0x55,
       "plppV2CLoopback": plppV2CLoopback,
       "plppV2CSmdsMode": plppV2CSmdsMode,
       "plppV2CFrmFmt": plppV2CFrmFmt,
       "plppV2CTxAIS": plppV2CTxAIS,
       "plppV2STable": plppV2STable,
       "plppV2SEntry": plppV2SEntry,
       "plppV2SLinkNo": plppV2SLinkNo,
       "plppV2STXclock": plppV2STXclock,
       "plppV2SRXclock": plppV2SRXclock,
       "plppV2STXCells": plppV2STXCells,
       "plppV2SRXCells": plppV2SRXCells,
       "plppV2SHCSErrs": plppV2SHCSErrs,
       "plppV2SFrameErrs": plppV2SFrameErrs,
       "plppV2SBIP8Errs": plppV2SBIP8Errs,
       "plppV2SFEBEErrs": plppV2SFEBEErrs,
       "plppV2SSPLRStatus": plppV2SSPLRStatus,
       "plppV2SDs3FrmFmt": plppV2SDs3FrmFmt,
       "plppV2SDs3Lcvs": plppV2SDs3Lcvs,
       "plppV2SDs3FrameErrs": plppV2SDs3FrameErrs,
       "plppV2SDs3ParityErrs": plppV2SDs3ParityErrs,
       "plppV2SDs3CbitPrtyErrs": plppV2SDs3CbitPrtyErrs,
       "plppV2SDs3FEBEErrs": plppV2SDs3FEBEErrs,
       "plppV2SDs3RxAIS": plppV2SDs3RxAIS,
       "plppV2SDs3RxRedAlarm": plppV2SDs3RxRedAlarm,
       "plppV2SDs3RxYellowAlarm": plppV2SDs3RxYellowAlarm,
       "plppV2SPLCPRxYellowAlarm": plppV2SPLCPRxYellowAlarm,
       "plppV2SDs3FEACTxmt": plppV2SDs3FEACTxmt,
       "plppV2SRxIDL": plppV2SRxIDL,
       "plppV2SLOC": plppV2SLOC,
       "plppV2SDs3LPBK": plppV2SDs3LPBK,
       "plppE1CTable": plppE1CTable,
       "plppE1CEntry": plppE1CEntry,
       "plppE1CLinkNo": plppE1CLinkNo,
       "plppE1CLinkEnab": plppE1CLinkEnab,
       "plppE1CScrambler": plppE1CScrambler,
       "plppE1C0x55": plppE1C0x55,
       "plppE1CSmdsMode": plppE1CSmdsMode,
       "plppE1CLpbk": plppE1CLpbk,
       "plppE1STable": plppE1STable,
       "plppE1SEntry": plppE1SEntry,
       "plppE1SLinkNo": plppE1SLinkNo,
       "plppE1STXclock": plppE1STXclock,
       "plppE1SRXclock": plppE1SRXclock,
       "plppE1STXCells": plppE1STXCells,
       "plppE1SRXCells": plppE1SRXCells,
       "plppE1SHCSErrs": plppE1SHCSErrs,
       "plppE1SCRCErrs": plppE1SCRCErrs,
       "plppE1SFrameErrs": plppE1SFrameErrs,
       "plppE1SFEBEErrs": plppE1SFEBEErrs,
       "plppE1SLcvs": plppE1SLcvs,
       "plppE1SRxAIS": plppE1SRxAIS,
       "plppE1SRxOOF": plppE1SRxOOF,
       "plppE1SRxLOS": plppE1SRxLOS,
       "plppE1SRxLOF": plppE1SRxLOF,
       "plppE1SFerf": plppE1SFerf,
       "plppE3CTable": plppE3CTable,
       "plppE3CEntry": plppE3CEntry,
       "plppE3CLinkNo": plppE3CLinkNo,
       "plppE3CLinkEnab": plppE3CLinkEnab,
       "plppE3CFramer": plppE3CFramer,
       "plppE3CPLCPMode": plppE3CPLCPMode,
       "plppE3CScrambler": plppE3CScrambler,
       "plppE3C0x55": plppE3C0x55,
       "plppE3CLoopback": plppE3CLoopback,
       "plppE3CSmdsMode": plppE3CSmdsMode,
       "plppE3CTxmtTimMk": plppE3CTxmtTimMk,
       "plppE3CPloadTypeLab": plppE3CPloadTypeLab,
       "plppE3CTxTrlTrcIdLen": plppE3CTxTrlTrcIdLen,
       "plppE3CTxTrcIdUH": plppE3CTxTrcIdUH,
       "plppE3CTxTrcIdLH": plppE3CTxTrcIdLH,
       "plppE3CRxExTrcIdUH": plppE3CRxExTrcIdUH,
       "plppE3CRxExTrcIdLH": plppE3CRxExTrcIdLH,
       "plppE3STable": plppE3STable,
       "plppE3SEntry": plppE3SEntry,
       "plppE3SLinkNo": plppE3SLinkNo,
       "plppE3STXclock": plppE3STXclock,
       "plppE3SRXclock": plppE3SRXclock,
       "plppE3STXCells": plppE3STXCells,
       "plppE3SRXCells": plppE3SRXCells,
       "plppE3SHCSErrs": plppE3SHCSErrs,
       "plppE3SE3FrameErrs": plppE3SE3FrameErrs,
       "plppE3SPLCPFrameErrs": plppE3SPLCPFrameErrs,
       "plppE3SBIP8Errs": plppE3SBIP8Errs,
       "plppE3SFEBEErrs": plppE3SFEBEErrs,
       "plppE3SLcvs": plppE3SLcvs,
       "plppE3SLcd": plppE3SLcd,
       "plppE3SRxTrlTrc": plppE3SRxTrlTrc,
       "plppE3SRxAIS": plppE3SRxAIS,
       "plppE3SRxOOF": plppE3SRxOOF,
       "plppE3SRxLOS": plppE3SRxLOS,
       "plppE3SRxLOF": plppE3SRxLOF,
       "plppE3SRxFERF": plppE3SRxFERF,
       "plppE3SPLCPRxLof": plppE3SPLCPRxLof,
       "plppE3SPLCPRxYellowAlarm": plppE3SPLCPRxYellowAlarm,
       "plppE3SRxTrIdMis": plppE3SRxTrIdMis,
       "plppE3SRxTrIdUnst": plppE3SRxTrIdUnst,
       "plppE3SRxPloadTypeLabMis": plppE3SRxPloadTypeLabMis,
       "plppE3SRxPloadTypeLabUnst": plppE3SRxPloadTypeLabUnst,
       "dv2LocalFibre": dv2LocalFibre,
       "lFibreConfTable": lFibreConfTable,
       "lFibreConfEntry": lFibreConfEntry,
       "lFibreConfLinkNo": lFibreConfLinkNo,
       "lFibreConfLinkEnab": lFibreConfLinkEnab,
       "lFibreConfCLine": lFibreConfCLine,
       "lFibreConfLoopback": lFibreConfLoopback,
       "lFibreStatTable": lFibreStatTable,
       "lFibreStatEntry": lFibreStatEntry,
       "lFibreStatLinkNo": lFibreStatLinkNo,
       "lFibreStatCLines": lFibreStatCLines,
       "lFibreStatHCSErrs": lFibreStatHCSErrs,
       "dv2DS": dv2DS,
       "ds1Table": ds1Table,
       "ds1Entry": ds1Entry,
       "ds1LinkNo": ds1LinkNo,
       "ds1LineLength": ds1LineLength,
       "ds1Framing": ds1Framing,
       "ds1Coding": ds1Coding,
       "ds1Tr": ds1Tr,
       "ds1Rt": ds1Rt,
       "ds1LOSDefect": ds1LOSDefect,
       "ds1AISDefect": ds1AISDefect,
       "ds1OOFDefect": ds1OOFDefect,
       "ds1YellowDefect": ds1YellowDefect,
       "ds1LOSAlarm": ds1LOSAlarm,
       "ds1AISAlarm": ds1AISAlarm,
       "ds1LOFAlarm": ds1LOFAlarm,
       "ds1YellowAlarm": ds1YellowAlarm,
       "ds1PdvCount": ds1PdvCount,
       "ds1Z16Count": ds1Z16Count,
       "ds1LcvCount": ds1LcvCount,
       "ds1BeeCount": ds1BeeCount,
       "ds1FerCount": ds1FerCount,
       "ds1OofCount": ds1OofCount,
       "ds1ClrStats": ds1ClrStats,
       "ds1Reconfig": ds1Reconfig,
       "ds1LineES": ds1LineES,
       "ds1LineSES": ds1LineSES,
       "ds1ES": ds1ES,
       "ds1SES": ds1SES,
       "ds1AISS": ds1AISS,
       "ds1UAS": ds1UAS,
       "ds1TxClkSel": ds1TxClkSel,
       "ds1ExBERDefect": ds1ExBERDefect,
       "ds1ExBERAlarm": ds1ExBERAlarm,
       "ds3Table": ds3Table,
       "ds3Entry": ds3Entry,
       "ds3LinkNo": ds3LinkNo,
       "ds3Lb": ds3Lb,
       "ds3Err": ds3Err,
       "ds3RXLos": ds3RXLos,
       "ds3TXLoc": ds3TXLoc,
       "ds3RXErr": ds3RXErr,
       "ds3RXAis": ds3RXAis,
       "ds3TXAis": ds3TXAis,
       "ds3TXLev": ds3TXLev,
       "ds3Tr": ds3Tr,
       "ds3Rt": ds3Rt,
       "ds3Equal": ds3Equal,
       "ds3LOSAlarm": ds3LOSAlarm,
       "ds3Reconfig": ds3Reconfig,
       "e1Table": e1Table,
       "e1Entry": e1Entry,
       "e1LinkNo": e1LinkNo,
       "e1LimType": e1LimType,
       "e1Lb": e1Lb,
       "e1FRMRMode": e1FRMRMode,
       "e1TxClkSel": e1TxClkSel,
       "e1TS16PayLd": e1TS16PayLd,
       "e1TxAIS": e1TxAIS,
       "e1GappedClk": e1GappedClk,
       "e1IntrfType": e1IntrfType,
       "e1ClrStats": e1ClrStats,
       "e1Reconfig": e1Reconfig,
       "se1SA4": se1SA4,
       "se1SA5": se1SA5,
       "se1SA6": se1SA6,
       "se1SA7": se1SA7,
       "se1SA8": se1SA8,
       "se1SI0": se1SI0,
       "se1SI1": se1SI1,
       "e1LOSDefect": e1LOSDefect,
       "e1OOFDefect": e1OOFDefect,
       "e1AISDefect": e1AISDefect,
       "e1FerfDefect": e1FerfDefect,
       "e1ExBERDefect": e1ExBERDefect,
       "e1LOSAlarm": e1LOSAlarm,
       "e1LOFAlarm": e1LOFAlarm,
       "e1AISAlarm": e1AISAlarm,
       "e1FerfAlarm": e1FerfAlarm,
       "e1ExBERAlarm": e1ExBERAlarm,
       "e1SCRCErrs": e1SCRCErrs,
       "e1SFrameErrs": e1SFrameErrs,
       "e1SFEBEErrs": e1SFEBEErrs,
       "e1SLcvs": e1SLcvs,
       "e1LineES": e1LineES,
       "e1LineSES": e1LineSES,
       "e1ES": e1ES,
       "e1SES": e1SES,
       "e1AISS": e1AISS,
       "e1UAS": e1UAS,
       "soTable": soTable,
       "soEntry": soEntry,
       "soLinkNo": soLinkNo,
       "soLimType": soLimType,
       "soTimingRef": soTimingRef,
       "soTxEn0": soTxEn0,
       "soTxEn1": soTxEn1,
       "soLimDesc": soLimDesc,
       "soReconfig": soReconfig,
       "ds1V2Table": ds1V2Table,
       "ds1V2Entry": ds1V2Entry,
       "ds1V2LinkNo": ds1V2LinkNo,
       "ds1V2LimType": ds1V2LimType,
       "ds1V2TxLineLn": ds1V2TxLineLn,
       "ds1V2FRMRMode": ds1V2FRMRMode,
       "ds1V2Coding": ds1V2Coding,
       "ds1V2Lb": ds1V2Lb,
       "ds1V2TxAIS": ds1V2TxAIS,
       "ds1V2GappedClk": ds1V2GappedClk,
       "ds1V2TxClkSel": ds1V2TxClkSel,
       "ds1V2ClrStats": ds1V2ClrStats,
       "ds1V2Reconfig": ds1V2Reconfig,
       "ds1V2LOSDefect": ds1V2LOSDefect,
       "ds1V2OOFDefect": ds1V2OOFDefect,
       "ds1V2AISDefect": ds1V2AISDefect,
       "ds1V2FerfDefect": ds1V2FerfDefect,
       "ds1V2BERDefect": ds1V2BERDefect,
       "ds1V2LOSAlarm": ds1V2LOSAlarm,
       "ds1V2LOFAlarm": ds1V2LOFAlarm,
       "ds1V2AISAlarm": ds1V2AISAlarm,
       "ds1V2FerfAlarm": ds1V2FerfAlarm,
       "ds1V2BERAlarm": ds1V2BERAlarm,
       "ds1V2FerCount": ds1V2FerCount,
       "ds1V2BeeCount": ds1V2BeeCount,
       "ds1V2OCfCount": ds1V2OCfCount,
       "ds1V2LcvCount": ds1V2LcvCount,
       "ds1V2LineES": ds1V2LineES,
       "ds1V2LineSES": ds1V2LineSES,
       "ds1V2ES": ds1V2ES,
       "ds1V2SES": ds1V2SES,
       "ds1V2AISS": ds1V2AISS,
       "ds1V2UAS": ds1V2UAS,
       "ds1V2ExBER": ds1V2ExBER,
       "dlimLpbkTimeout": dlimLpbkTimeout,
       "ds3V2Table": ds3V2Table,
       "ds3V2Entry": ds3V2Entry,
       "ds3V2LinkNo": ds3V2LinkNo,
       "ds3V2Lb": ds3V2Lb,
       "ds3V2LimType": ds3V2LimType,
       "ds3V2LimOK": ds3V2LimOK,
       "ds3V2TxLBO": ds3V2TxLBO,
       "ds3V2TxClkSel": ds3V2TxClkSel,
       "ds3V2LOSDefect": ds3V2LOSDefect,
       "ds3V2LOSAlarm": ds3V2LOSAlarm,
       "ds3V2Reconfig": ds3V2Reconfig,
       "e3Table": e3Table,
       "e3Entry": e3Entry,
       "e3LinkNo": e3LinkNo,
       "e3LimType": e3LimType,
       "e3LimOK": e3LimOK,
       "e3EQSelect": e3EQSelect,
       "e3Loopback": e3Loopback,
       "e3TxAIS": e3TxAIS,
       "e3TxClkSel": e3TxClkSel,
       "e3LOSDefect": e3LOSDefect,
       "e3LOSAlarm": e3LOSAlarm,
       "e3Reconfig": e3Reconfig,
       "hssiTable": hssiTable,
       "hssiEntry": hssiEntry,
       "hssiLinkNo": hssiLinkNo,
       "hssiLocalLoopback": hssiLocalLoopback,
       "hssiRemoteLoopback": hssiRemoteLoopback,
       "hssiReconfig": hssiReconfig,
       "hssiType": hssiType,
       "hssiLimType": hssiLimType,
       "hssiClockSrc": hssiClockSrc,
       "hssiCtrTestMode": hssiCtrTestMode,
       "hssiLinkReady": hssiLinkReady,
       "hssiRemoteReady": hssiRemoteReady,
       "hssiLOSDefect": hssiLOSDefect,
       "hssiLOSAlarm": hssiLOSAlarm,
       "j2Table": j2Table,
       "j2Entry": j2Entry,
       "j2LinkNo": j2LinkNo,
       "j2FirmwareRev": j2FirmwareRev,
       "j2TxEq": j2TxEq,
       "j2Lb": j2Lb,
       "j2TxAIS": j2TxAIS,
       "j2TxClkSel": j2TxClkSel,
       "j2ClrStats": j2ClrStats,
       "j2Reconfig": j2Reconfig,
       "j2TS97TS98": j2TS97TS98,
       "j2QualClock": j2QualClock,
       "j2LOSDefect": j2LOSDefect,
       "j2OOFDefect": j2OOFDefect,
       "j2AISDefect": j2AISDefect,
       "j2RAlmDefect": j2RAlmDefect,
       "j2LOSAlarm": j2LOSAlarm,
       "j2LOFAlarm": j2LOFAlarm,
       "j2AISAlarm": j2AISAlarm,
       "j2RAlmAlarm": j2RAlmAlarm,
       "j2FerCount": j2FerCount,
       "j2RAlmCount": j2RAlmCount,
       "j2LcvCount": j2LcvCount,
       "j2CrcCount": j2CrcCount,
       "j2LineES": j2LineES,
       "j2LineSES": j2LineSES,
       "j2ES": j2ES,
       "j2SES": j2SES,
       "j2AISS": j2AISS,
       "j2UAS": j2UAS,
       "scfTable": scfTable,
       "scfEntry": scfEntry,
       "scfLinkNo": scfLinkNo,
       "scfLimType": scfLimType,
       "scfFirmwareRev": scfFirmwareRev,
       "scfQualClock": scfQualClock,
       "scfContr": scfContr,
       "scfDCEDTE": scfDCEDTE,
       "scfLb": scfLb,
       "scfLineTiming": scfLineTiming,
       "scfDataRate": scfDataRate,
       "scfClkSel": scfClkSel,
       "scfInterfaceType": scfInterfaceType,
       "scfReconfig": scfReconfig,
       "scfLOSDefect": scfLOSDefect,
       "scfLOSAlarm": scfLOSAlarm,
       "dv2Billing": dv2Billing,
       "billAvailable": billAvailable,
       "billingTable": billingTable,
       "billingEntry": billingEntry,
       "billSeq": billSeq,
       "billSvpi": billSvpi,
       "billSvci": billSvci,
       "billDvpi": billDvpi,
       "billDvci": billDvci,
       "billSslot": billSslot,
       "billSlink": billSlink,
       "billDslot": billDslot,
       "billDlink": billDlink,
       "billCalled": billCalled,
       "billCalledSub": billCalledSub,
       "billCalling": billCalling,
       "billCallingSub": billCallingSub,
       "billCellInC": billCellInC,
       "billCellIn": billCellIn,
       "billFrameIn": billFrameIn,
       "billByteInC": billByteInC,
       "billByteIn": billByteIn,
       "billCellOutC": billCellOutC,
       "billCellOut": billCellOut,
       "billFrameOut": billFrameOut,
       "billByteOutC": billByteOutC,
       "billByteOut": billByteOut,
       "billCause": billCause,
       "billValid": billValid,
       "billCLP1OutC": billCLP1OutC,
       "billCLP1Out": billCLP1Out,
       "billTag": billTag,
       "billStartM2": billStartM2,
       "billEndM2": billEndM2,
       "billFwdPCR": billFwdPCR,
       "billBwdPCR": billBwdPCR,
       "billFwdSCR": billFwdSCR,
       "billBwdSCR": billBwdSCR,
       "billFwdMBS": billFwdMBS,
       "billBwdMBS": billBwdMBS,
       "billFwdQOS": billFwdQOS,
       "billBwdQOS": billBwdQOS,
       "billingControl": billingControl,
       "billLost": billLost,
       "billLinks": billLinks,
       "billTrapControl": billTrapControl,
       "billDirControl": billDirControl,
       "billingInterval": billingInterval,
       "dv2QeDoc": dv2QeDoc,
       "qeDocMacAddress": qeDocMacAddress,
       "qeDocTunRetryPeriod": qeDocTunRetryPeriod,
       "qeDocTunIdlePeriod": qeDocTunIdlePeriod,
       "qeDocBridgeTable": qeDocBridgeTable,
       "qeDocBridgeEntry": qeDocBridgeEntry,
       "qeDocBridgeLinkNo": qeDocBridgeLinkNo,
       "qeDocBridgeEnable": qeDocBridgeEnable,
       "qeDocBridgeLink0Eligible": qeDocBridgeLink0Eligible,
       "qeDocBridgeLink1Eligible": qeDocBridgeLink1Eligible,
       "qeDocBridgeLink2Eligible": qeDocBridgeLink2Eligible,
       "qeDocBridgeLink3Eligible": qeDocBridgeLink3Eligible,
       "qeDocTunTable": qeDocTunTable,
       "qeDocTunEntry": qeDocTunEntry,
       "qeDocTunIndex": qeDocTunIndex,
       "qeDocTunName": qeDocTunName,
       "qeDocTunType": qeDocTunType,
       "qeDocTunState": qeDocTunState,
       "qeDocTunCallState": qeDocTunCallState,
       "qeDocTunInFrames": qeDocTunInFrames,
       "qeDocTunOutFrames": qeDocTunOutFrames,
       "qeDocTunVPI": qeDocTunVPI,
       "qeDocTunVCI": qeDocTunVCI,
       "qeDocTunPriority": qeDocTunPriority,
       "qeDocTunSlot": qeDocTunSlot,
       "qeDocTunLink": qeDocTunLink,
       "qeDocTunRemNet": qeDocTunRemNet,
       "qeDocTunRemMask": qeDocTunRemMask,
       "qeDocTunLocNet": qeDocTunLocNet,
       "qeDocTunLocMask": qeDocTunLocMask,
       "qeDocTunRemStartSkt": qeDocTunRemStartSkt,
       "qeDocTunRemEndSkt": qeDocTunRemEndSkt,
       "qeDocTunLocStartSkt": qeDocTunLocStartSkt,
       "qeDocTunLocEndSkt": qeDocTunLocEndSkt,
       "qeDocTunSktType": qeDocTunSktType,
       "qeDocTunDestAddress": qeDocTunDestAddress,
       "qeDocTunDestSubAddress": qeDocTunDestSubAddress,
       "qeDocTunLink0Eligible": qeDocTunLink0Eligible,
       "qeDocTunLink1Eligible": qeDocTunLink1Eligible,
       "qeDocTunLink2Eligible": qeDocTunLink2Eligible,
       "qeDocTunLink3Eligible": qeDocTunLink3Eligible,
       "qeDocTunValidity": qeDocTunValidity,
       "qeDocTunRfc1483Encap": qeDocTunRfc1483Encap,
       "qeDocTunClp": qeDocTunClp,
       "qeDocIpAddress": qeDocIpAddress,
       "qeDocIpMask": qeDocIpMask,
       "qeDocIpBCast": qeDocIpBCast,
       "dv2SDH": dv2SDH,
       "sdhCTable": sdhCTable,
       "sdhCEntry": sdhCEntry,
       "sdhCLinkNo": sdhCLinkNo,
       "sdhCLinkEnab": sdhCLinkEnab,
       "sdhCLoopTimer": sdhCLoopTimer,
       "sdhCLoopDiag": sdhCLoopDiag,
       "sdhCLoopLine": sdhCLoopLine,
       "sdhCScrambler": sdhCScrambler,
       "sdhC0x55": sdhC0x55,
       "sdhSonetSdh": sdhSonetSdh,
       "sdhClearCounts": sdhClearCounts,
       "sdhReconfig": sdhReconfig,
       "sdhCLpbkTimeout": sdhCLpbkTimeout,
       "sdhStmSts": sdhStmSts,
       "sdhAPSOnOff": sdhAPSOnOff,
       "sdhCIdleCell": sdhCIdleCell,
       "sdhSTable": sdhSTable,
       "sdhSEntry": sdhSEntry,
       "sdhSLinkNo": sdhSLinkNo,
       "sdhSTXclock": sdhSTXclock,
       "sdhSRXclock": sdhSRXclock,
       "sdhSSectLOS": sdhSSectLOS,
       "sdhSSectOOF": sdhSSectOOF,
       "sdhSSectLOF": sdhSSectLOF,
       "sdhSLineAIS": sdhSLineAIS,
       "sdhSLineFERF": sdhSLineFERF,
       "sdhSPathAIS": sdhSPathAIS,
       "sdhSPathYellow": sdhSPathYellow,
       "sdhSPathFERF": sdhSPathFERF,
       "sdhSPathLOP": sdhSPathLOP,
       "sdhSPathLabelMM": sdhSPathLabelMM,
       "sdhSExBERDefect": sdhSExBERDefect,
       "sdhSPathLabel": sdhSPathLabel,
       "sdhSCellDelState": sdhSCellDelState,
       "sdhSAlarmLOS": sdhSAlarmLOS,
       "sdhSAlarmLOF": sdhSAlarmLOF,
       "sdhSAlarmLineAIS": sdhSAlarmLineAIS,
       "sdhSAlarmLineRFI": sdhSAlarmLineRFI,
       "sdhSAlarmPathAIS": sdhSAlarmPathAIS,
       "sdhSAlarmPathRFI": sdhSAlarmPathRFI,
       "sdhSAlarmLOP": sdhSAlarmLOP,
       "sdhSAlarmPLM": sdhSAlarmPLM,
       "sdhSExBERAlarm": sdhSExBERAlarm,
       "sdhSCorrHCS": sdhSCorrHCS,
       "sdhSUnCorrHCS": sdhSUnCorrHCS,
       "sdhS2Table": sdhS2Table,
       "sdhS2Entry": sdhS2Entry,
       "sdhS2LinkNo": sdhS2LinkNo,
       "sdhSSectBIP8": sdhSSectBIP8,
       "sdhSSectES": sdhSSectES,
       "sdhSSectSES": sdhSSectSES,
       "sdhSLineBIP24": sdhSLineBIP24,
       "sdhSLineES": sdhSLineES,
       "sdhSLineSES": sdhSLineSES,
       "sdhSLineUAS": sdhSLineUAS,
       "sdhSLineFC": sdhSLineFC,
       "sdhSPathBIP8": sdhSPathBIP8,
       "sdhSPathES": sdhSPathES,
       "sdhSPathSES": sdhSPathSES,
       "sdhSPathUAS": sdhSPathUAS,
       "sdhSPathFC": sdhSPathFC,
       "sdhSLineFEBE": sdhSLineFEBE,
       "sdhSLineFarEndES": sdhSLineFarEndES,
       "sdhSLineFarEndSES": sdhSLineFarEndSES,
       "sdhSLineFarEndUAS": sdhSLineFarEndUAS,
       "sdhSLineFarEndFC": sdhSLineFarEndFC,
       "sdhSPathFEBE": sdhSPathFEBE,
       "sdhSPathFarEndES": sdhSPathFarEndES,
       "sdhSPathFarEndSES": sdhSPathFarEndSES,
       "sdhSPathFarEndUAS": sdhSPathFarEndUAS,
       "sdhSPathFarEndFC": sdhSPathFarEndFC,
       "dv2Pvc": dv2Pvc,
       "pvcResourceTable": pvcResourceTable,
       "pvcResourceEntry": pvcResourceEntry,
       "pvcSlot": pvcSlot,
       "pvcLink": pvcLink,
       "pvcVciStart": pvcVciStart,
       "pvcVciEnd": pvcVciEnd,
       "pvcVpiStart": pvcVpiStart,
       "pvcVpiEnd": pvcVpiEnd,
       "pvcVpStart": pvcVpStart,
       "pvcVpEnd": pvcVpEnd,
       "pvcBackwardCellRateTotal": pvcBackwardCellRateTotal,
       "pvcLinkQoS": pvcLinkQoS,
       "pvcMolnVpi": pvcMolnVpi,
       "pvcMolnVci": pvcMolnVci,
       "pvcLowPriOverbookFactor": pvcLowPriOverbookFactor,
       "pvcTable": pvcTable,
       "pvcEntry": pvcEntry,
       "pvcDSlot": pvcDSlot,
       "pvcDLink": pvcDLink,
       "pvcDvci": pvcDvci,
       "pvcDvpi": pvcDvpi,
       "pvcSSlot": pvcSSlot,
       "pvcSLink": pvcSLink,
       "pvcSvci": pvcSvci,
       "pvcSvpi": pvcSvpi,
       "pvcForwardPeakCellRate": pvcForwardPeakCellRate,
       "pvcForwardPeakSize": pvcForwardPeakSize,
       "pvcForwardPeakMode": pvcForwardPeakMode,
       "pvcBackwardPeakCellRate": pvcBackwardPeakCellRate,
       "pvcBackwardPeakSize": pvcBackwardPeakSize,
       "pvcBackwardPeakMode": pvcBackwardPeakMode,
       "pvcForwardSustainedCellRate": pvcForwardSustainedCellRate,
       "pvcForwardSustainedSize": pvcForwardSustainedSize,
       "pvcForwardSustainedMode": pvcForwardSustainedMode,
       "pvcBackwardSustainedCellRate": pvcBackwardSustainedCellRate,
       "pvcBackwardSustainedSize": pvcBackwardSustainedSize,
       "pvcBackwardSustainedMode": pvcBackwardSustainedMode,
       "pvcAuxForwardPeakCellRate": pvcAuxForwardPeakCellRate,
       "pvcAuxForwardPeakSize": pvcAuxForwardPeakSize,
       "pvcAuxForwardPeakMode": pvcAuxForwardPeakMode,
       "pvcAuxBackwardPeakCellRate": pvcAuxBackwardPeakCellRate,
       "pvcAuxBackwardPeakSize": pvcAuxBackwardPeakSize,
       "pvcAuxBackwardPeakMode": pvcAuxBackwardPeakMode,
       "pvcAuxForwardSustainedCellRate": pvcAuxForwardSustainedCellRate,
       "pvcAuxForwardSustainedSize": pvcAuxForwardSustainedSize,
       "pvcAuxForwardSustainedMode": pvcAuxForwardSustainedMode,
       "pvcAuxBackwardSustainedCellRate": pvcAuxBackwardSustainedCellRate,
       "pvcAuxBackwardSustainedSize": pvcAuxBackwardSustainedSize,
       "pvcAuxBackwardSustainedMode": pvcAuxBackwardSustainedMode,
       "pvcQoSClass": pvcQoSClass,
       "pvcStatus": pvcStatus,
       "pvcMulticast": pvcMulticast,
       "pvcInternalVpi": pvcInternalVpi,
       "pvcInternalVci": pvcInternalVci,
       "pvcNumLeaves": pvcNumLeaves,
       "pvcDirection": pvcDirection,
       "dv2Svc": dv2Svc,
       "svcMaxPtPtConnections": svcMaxPtPtConnections,
       "svcMaxPtMptConnections": svcMaxPtMptConnections,
       "svcMaxPtMptParties": svcMaxPtMptParties,
       "svcResourceTable": svcResourceTable,
       "svcResourceEntry": svcResourceEntry,
       "svcSAP": svcSAP,
       "svcHiLo": svcHiLo,
       "svcVciStart": svcVciStart,
       "svcVciEnd": svcVciEnd,
       "svcVpiStart": svcVpiStart,
       "svcVpiEnd": svcVpiEnd,
       "svcVpStart": svcVpStart,
       "svcVpEnd": svcVpEnd,
       "svcBackwardCellRateTotal": svcBackwardCellRateTotal,
       "svcBackwardCellRateAvailable": svcBackwardCellRateAvailable,
       "svcSigVci": svcSigVci,
       "svcSigVpi": svcSigVpi,
       "svcSAPStatus": svcSAPStatus,
       "svcCDVTSize": svcCDVTSize,
       "svcIntType": svcIntType,
       "svcPolicing": svcPolicing,
       "svcLowPriOverbookFactor": svcLowPriOverbookFactor,
       "svcMaxSapConn": svcMaxSapConn,
       "svcCurSapConn": svcCurSapConn,
       "svcLinkNo": svcLinkNo,
       "svcVpiMapping": svcVpiMapping,
       "svcQosRoute": svcQosRoute,
       "svcSwtch": svcSwtch,
       "svcRestart": svcRestart,
       "svcE164Addr": svcE164Addr,
       "svcAutoSapOff": svcAutoSapOff,
       "svcTable": svcTable,
       "svcEntry": svcEntry,
       "svcId": svcId,
       "svcDSlot": svcDSlot,
       "svcDLink": svcDLink,
       "svcDvci": svcDvci,
       "svcDvpi": svcDvpi,
       "svcDE164": svcDE164,
       "svcDE164Sub": svcDE164Sub,
       "svcSSlot": svcSSlot,
       "svcSLink": svcSLink,
       "svcSvci": svcSvci,
       "svcSvpi": svcSvpi,
       "svcSE164": svcSE164,
       "svcSE164Sub": svcSE164Sub,
       "svcForwardPeakCellRate": svcForwardPeakCellRate,
       "svcForwardPeakMode": svcForwardPeakMode,
       "svcBackwardPeakCellRate": svcBackwardPeakCellRate,
       "svcBackwardPeakMode": svcBackwardPeakMode,
       "svcForwardSustainableCellRate": svcForwardSustainableCellRate,
       "svcForwardMaxBurstSize": svcForwardMaxBurstSize,
       "svcForwardSustainableMode": svcForwardSustainableMode,
       "svcBackwardSustainableCellRate": svcBackwardSustainableCellRate,
       "svcBackwardMaxBurstSize": svcBackwardMaxBurstSize,
       "svcBackwardSustainableMode": svcBackwardSustainableMode,
       "svcQoSClass": svcQoSClass,
       "svcBillTag": svcBillTag,
       "svcDuration": svcDuration,
       "svcType": svcType,
       "svcStatus": svcStatus,
       "svcNumLeaves": svcNumLeaves,
       "svcInternalVpi": svcInternalVpi,
       "svcInternalVci": svcInternalVci,
       "sPvcTable": sPvcTable,
       "sPvcEntry": sPvcEntry,
       "sPvcId": sPvcId,
       "sPvcCallId": sPvcCallId,
       "sPvcLink": sPvcLink,
       "sPvcAddress": sPvcAddress,
       "sPvcForwardPeakCellRate": sPvcForwardPeakCellRate,
       "sPvcForwardPeakMode": sPvcForwardPeakMode,
       "sPvcBackwardPeakCellRate": sPvcBackwardPeakCellRate,
       "sPvcBackwardPeakMode": sPvcBackwardPeakMode,
       "sPvcForwardSustainableCellRate": sPvcForwardSustainableCellRate,
       "sPvcForwardMaxBurstSize": sPvcForwardMaxBurstSize,
       "sPvcForwardSustainableMode": sPvcForwardSustainableMode,
       "sPvcBackwardSustainableCellRate": sPvcBackwardSustainableCellRate,
       "sPvcBackwardMaxBurstSize": sPvcBackwardMaxBurstSize,
       "sPvcBackwardSustainableMode": sPvcBackwardSustainableMode,
       "sPvcQoSClass": sPvcQoSClass,
       "sPvcSourceVci": sPvcSourceVci,
       "sPvcSourceVpi": sPvcSourceVpi,
       "sPvcTargetVci": sPvcTargetVci,
       "sPvcTargetVpi": sPvcTargetVpi,
       "sPvcRetry": sPvcRetry,
       "sPvcConnectTime": sPvcConnectTime,
       "sPvcNumberRetries": sPvcNumberRetries,
       "sPvcFailures": sPvcFailures,
       "sPvcAlertFailures": sPvcAlertFailures,
       "sPvcCauseDiag": sPvcCauseDiag,
       "sPvcType": sPvcType,
       "sPvcCallState": sPvcCallState,
       "sPvcStatus": sPvcStatus,
       "sPvcCauseDiagCode": sPvcCauseDiagCode,
       "sPvcMulticast": sPvcMulticast,
       "svcQ93bStatTable": svcQ93bStatTable,
       "svcQ93bStatEntry": svcQ93bStatEntry,
       "svcQ93bStatSAP": svcQ93bStatSAP,
       "svcQ93bStatActive": svcQ93bStatActive,
       "svcQ93bStatAccumalative": svcQ93bStatAccumalative,
       "svcQ93bStatCallProcTx": svcQ93bStatCallProcTx,
       "svcQ93bStatConnTx": svcQ93bStatConnTx,
       "svcQ93bStatConnAckTx": svcQ93bStatConnAckTx,
       "svcQ93bStatSetupTx": svcQ93bStatSetupTx,
       "svcQ93bStatRelTx": svcQ93bStatRelTx,
       "svcQ93bStatRelCmpltTx": svcQ93bStatRelCmpltTx,
       "svcQ93bStatRstTx": svcQ93bStatRstTx,
       "svcQ93bStatRstAckTx": svcQ93bStatRstAckTx,
       "svcQ93bStatStatTx": svcQ93bStatStatTx,
       "svcQ93bStatStatEnqTx": svcQ93bStatStatEnqTx,
       "svcQ93bStatAddPtyTx": svcQ93bStatAddPtyTx,
       "svcQ93bStatAddPtyAckTx": svcQ93bStatAddPtyAckTx,
       "svcQ93bStatAddPtyRejTx": svcQ93bStatAddPtyRejTx,
       "svcQ93bStatDropPtyTx": svcQ93bStatDropPtyTx,
       "svcQ93bStatDropPtyAckTx": svcQ93bStatDropPtyAckTx,
       "svcQ93bStatLstCauseTx": svcQ93bStatLstCauseTx,
       "svcQ93bStatLstDiagTx": svcQ93bStatLstDiagTx,
       "svcQ93bStatCallProcRx": svcQ93bStatCallProcRx,
       "svcQ93bStatConnRx": svcQ93bStatConnRx,
       "svcQ93bStatConnAckRx": svcQ93bStatConnAckRx,
       "svcQ93bStatSetupRx": svcQ93bStatSetupRx,
       "svcQ93bStatRelRx": svcQ93bStatRelRx,
       "svcQ93bStatRelCmpltRx": svcQ93bStatRelCmpltRx,
       "svcQ93bStatRstRx": svcQ93bStatRstRx,
       "svcQ93bStatRstAckRx": svcQ93bStatRstAckRx,
       "svcQ93bStatStatRx": svcQ93bStatStatRx,
       "svcQ93bStatStatEnqRx": svcQ93bStatStatEnqRx,
       "svcQ93bStatAddPtyRx": svcQ93bStatAddPtyRx,
       "svcQ93bStatAddPtyAckRx": svcQ93bStatAddPtyAckRx,
       "svcQ93bStatAddPtyRejRx": svcQ93bStatAddPtyRejRx,
       "svcQ93bStatDropPtyRx": svcQ93bStatDropPtyRx,
       "svcQ93bStatDropPtyAckRx": svcQ93bStatDropPtyAckRx,
       "svcQ93bStatLstCauseRx": svcQ93bStatLstCauseRx,
       "svcQ93bStatLstDiagRx": svcQ93bStatLstDiagRx,
       "svcQ93bStatClr": svcQ93bStatClr,
       "svcQ93bStatDiagTx": svcQ93bStatDiagTx,
       "svcQ93bStatDiagRx": svcQ93bStatDiagRx,
       "svcQsaalStatTable": svcQsaalStatTable,
       "svcQsaalStatEntry": svcQsaalStatEntry,
       "svcQsaalStatSAP": svcQsaalStatSAP,
       "svcQsaalStatOutSduDisc": svcQsaalStatOutSduDisc,
       "svcQsaalStatInPduErr": svcQsaalStatInPduErr,
       "svcQsaalStatInPduDisc": svcQsaalStatInPduDisc,
       "svcQsaalStatOutPduErr": svcQsaalStatOutPduErr,
       "svcQsaalStatOutPduDisc": svcQsaalStatOutPduDisc,
       "svcQsaalStatBgnTx": svcQsaalStatBgnTx,
       "svcQsaalStatBgakTx": svcQsaalStatBgakTx,
       "svcQsaalStatBgrejTx": svcQsaalStatBgrejTx,
       "svcQsaalStatEndTx": svcQsaalStatEndTx,
       "svcQsaalStatRsTx": svcQsaalStatRsTx,
       "svcQsaalStatRsakTx": svcQsaalStatRsakTx,
       "svcQsaalStatSdTx": svcQsaalStatSdTx,
       "svcQsaalStatSdpTx": svcQsaalStatSdpTx,
       "svcQsaalStatPollTx": svcQsaalStatPollTx,
       "svcQsaalStatStatTx": svcQsaalStatStatTx,
       "svcQsaalStatUstatTx": svcQsaalStatUstatTx,
       "svcQsaalStatUdTx": svcQsaalStatUdTx,
       "svcQsaalStatMdTx": svcQsaalStatMdTx,
       "svcQsaalStatBgnRx": svcQsaalStatBgnRx,
       "svcQsaalStatBgakRx": svcQsaalStatBgakRx,
       "svcQsaalStatBgrejRx": svcQsaalStatBgrejRx,
       "svcQsaalStatEndRx": svcQsaalStatEndRx,
       "svcQsaalStatRsRx": svcQsaalStatRsRx,
       "svcQsaalStatRsakRx": svcQsaalStatRsakRx,
       "svcQsaalStatSdRx": svcQsaalStatSdRx,
       "svcQsaalStatSdpRx": svcQsaalStatSdpRx,
       "svcQsaalStatPollRx": svcQsaalStatPollRx,
       "svcQsaalStatStatRx": svcQsaalStatStatRx,
       "svcQsaalStatUstatRx": svcQsaalStatUstatRx,
       "svcQsaalStatUdRx": svcQsaalStatUdRx,
       "svcQsaalStatMdRx": svcQsaalStatMdRx,
       "svcQsaalStatClr": svcQsaalStatClr,
       "svcQsaalTmrPoll": svcQsaalTmrPoll,
       "svcQsaalTmrKeepAlive": svcQsaalTmrKeepAlive,
       "svcQsaalTmrNoResponse": svcQsaalTmrNoResponse,
       "svcQsaalTmrCC": svcQsaalTmrCC,
       "svcQsaalMaxPD": svcQsaalMaxPD,
       "svcQ93bTmrT303": svcQ93bTmrT303,
       "svcQ93bTmrT310": svcQ93bTmrT310,
       "svcQ93bTmrT308": svcQ93bTmrT308,
       "svcQ93bTmrT309": svcQ93bTmrT309,
       "maxOutstanding": maxOutstanding,
       "svcLoadRoute": svcLoadRoute,
       "svcHalfConTimer": svcHalfConTimer,
       "svcHalfConCnt": svcHalfConCnt,
       "svcQ93bTmrT398": svcQ93bTmrT398,
       "svcQ93bTmrT399": svcQ93bTmrT399,
       "svcRetryPeriod": svcRetryPeriod,
       "svcCellRateTable": svcCellRateTable,
       "svcCellRateEntry": svcCellRateEntry,
       "svcCRLinkNo": svcCRLinkNo,
       "svcPCRCLP01Max": svcPCRCLP01Max,
       "svcSCRMax": svcSCRMax,
       "svcMBSMax": svcMBSMax,
       "svcTrafficTable": svcTrafficTable,
       "svcTrafficEntry": svcTrafficEntry,
       "svcTLinkNo": svcTLinkNo,
       "svcCBRallowed": svcCBRallowed,
       "svcVBRHallowed": svcVBRHallowed,
       "svcVBRMallowed": svcVBRMallowed,
       "svcVBRLUBRallowed": svcVBRLUBRallowed,
       "svcVBRLUBRsubtractpercent": svcVBRLUBRsubtractpercent,
       "dv2CE": dv2CE,
       "ceTable": ceTable,
       "ceEntry": ceEntry,
       "ceLinkNo": ceLinkNo,
       "ceEnable": ceEnable,
       "ceMode": ceMode,
       "cePriority": cePriority,
       "cePvcValid": cePvcValid,
       "ceDstSlot": ceDstSlot,
       "ceDstLink": ceDstLink,
       "ceDstVpi": ceDstVpi,
       "ceDstVci": ceDstVci,
       "ceCDV": ceCDV,
       "ceCDVMax": ceCDVMax,
       "ceMulticast": ceMulticast,
       "ceXhInt": ceXhInt,
       "ceStatTable": ceStatTable,
       "ceStatEntry": ceStatEntry,
       "ceStatPortNo": ceStatPortNo,
       "ceStatReset": ceStatReset,
       "ceStatTxState": ceStatTxState,
       "ceStatRxState": ceStatRxState,
       "ceTxCnt": ceTxCnt,
       "ceRxCnt": ceRxCnt,
       "ceOflCnt": ceOflCnt,
       "ceUflCnt": ceUflCnt,
       "ceDisCnt": ceDisCnt,
       "ceInvCnt": ceInvCnt,
       "ceResCnt": ceResCnt,
       "ceFifoLvlCnt": ceFifoLvlCnt,
       "cePriVal": cePriVal,
       "ceSecVal": ceSecVal,
       "ceClkSel": ceClkSel,
       "ceClkInp": ceClkInp,
       "ceStr3": ceStr3,
       "dv2VE": dv2VE,
       "veTable": veTable,
       "veEntry": veEntry,
       "veLinkNo": veLinkNo,
       "veEnable": veEnable,
       "veMode": veMode,
       "vePriority": vePriority,
       "vePvcValid": vePvcValid,
       "veDstSlot": veDstSlot,
       "veDstLink": veDstLink,
       "veDstVpi": veDstVpi,
       "veDstVci": veDstVci,
       "veCDV": veCDV,
       "veCDVMax": veCDVMax,
       "veMulticast": veMulticast,
       "veXhInt": veXhInt,
       "veStatTable": veStatTable,
       "veStatEntry": veStatEntry,
       "veStatPortNo": veStatPortNo,
       "veStatReset": veStatReset,
       "veStatTxState": veStatTxState,
       "veStatRxState": veStatRxState,
       "veTxCnt": veTxCnt,
       "veRxCnt": veRxCnt,
       "veOflCnt": veOflCnt,
       "veUflCnt": veUflCnt,
       "veDisCnt": veDisCnt,
       "veInvCnt": veInvCnt,
       "veResCnt": veResCnt,
       "veFifoLvlCnt": veFifoLvlCnt,
       "dv2SystemClocks": dv2SystemClocks,
       "autoRevert": autoRevert,
       "revertTimer": revertTimer,
       "forceRevert": forceRevert,
       "forceSecondary": forceSecondary,
       "alarmStatus": alarmStatus,
       "inService": inService,
       "primaryClockTable": primaryClockTable,
       "primaryEntry": primaryEntry,
       "pIndex": pIndex,
       "pValidSource": pValidSource,
       "pOnOffLine": pOnOffLine,
       "pSlotNumber": pSlotNumber,
       "pSysRefSelect": pSysRefSelect,
       "pActiveTimingSource": pActiveTimingSource,
       "pInputLineOk": pInputLineOk,
       "pSysRefTimingOk": pSysRefTimingOk,
       "secondaryClockTable": secondaryClockTable,
       "secondaryEntry": secondaryEntry,
       "sIndex": sIndex,
       "sValidSource": sValidSource,
       "sOnOffLine": sOnOffLine,
       "sSlotNumber": sSlotNumber,
       "sSysRefSelect": sSysRefSelect,
       "sActiveTimingSource": sActiveTimingSource,
       "sInputLineOk": sInputLineOk,
       "sSysRefTimingOk": sSysRefTimingOk,
       "str3Configured": str3Configured,
       "pCATcontrolTable": pCATcontrolTable,
       "pCATcontrolEntry": pCATcontrolEntry,
       "pccIndex": pccIndex,
       "pccatlimtype": pccatlimtype,
       "pccatsendcode": pccatsendcode,
       "pccatactivate": pccatactivate,
       "pccatsendconfig": pccatsendconfig,
       "pccatbytestransferred": pccatbytestransferred,
       "pccatfilexferstat": pccatfilexferstat,
       "pcatforcesecext": pcatforcesecext,
       "pcatforcesecstr3": pcatforcesecstr3,
       "pcatcommand": pcatcommand,
       "pcatplaceholder1": pcatplaceholder1,
       "pcatplaceholder2": pcatplaceholder2,
       "pcconoffline": pcconoffline,
       "sCATcontrolTable": sCATcontrolTable,
       "sCATcontrolEntry": sCATcontrolEntry,
       "sccIndex": sccIndex,
       "sccatlimtype": sccatlimtype,
       "sccatsendcode": sccatsendcode,
       "sccatactivate": sccatactivate,
       "sccatsendconfig": sccatsendconfig,
       "sccatbytestransferred": sccatbytestransferred,
       "sccatfilexferstat": sccatfilexferstat,
       "scatcommand": scatcommand,
       "scatplaceholder1": scatplaceholder1,
       "scatplaceholder2": scatplaceholder2,
       "scconoffline": scconoffline,
       "pCATstatusTable": pCATstatusTable,
       "pCATstatusEntry": pCATstatusEntry,
       "pscIndex": pscIndex,
       "pscatlimtype": pscatlimtype,
       "psCATFFrevision": psCATFFrevision,
       "psCATBootrevision": psCATBootrevision,
       "pscatfilestatus": pscatfilestatus,
       "psCATfilerevision": psCATfilerevision,
       "psCATHWrevision": psCATHWrevision,
       "pscatmode": pscatmode,
       "pscaterrorcode": pscaterrorcode,
       "pscatplaceholder1": pscatplaceholder1,
       "pscatplaceholder2": pscatplaceholder2,
       "sCATstatusTable": sCATstatusTable,
       "sCATstatusEntry": sCATstatusEntry,
       "sscIndex": sscIndex,
       "sscatlimtype": sscatlimtype,
       "ssCATFFrevision": ssCATFFrevision,
       "ssCATBootrevision": ssCATBootrevision,
       "sscatfilestatus": sscatfilestatus,
       "ssCATfilerevision": ssCATfilerevision,
       "ssCATHWrevision": ssCATHWrevision,
       "sscatmode": sscatmode,
       "sscaterrorcode": sscaterrorcode,
       "sscatplaceholder1": sscatplaceholder1,
       "sscatplaceholder2": sscatplaceholder2,
       "pCATStratum3ConfigTable": pCATStratum3ConfigTable,
       "pCATStratum3ConfigEntry": pCATStratum3ConfigEntry,
       "ps3cIndex": ps3cIndex,
       "pcatstr3listener": pcatstr3listener,
       "pcatstr3oscillator": pcatstr3oscillator,
       "pcatstr3forcesecondary": pcatstr3forcesecondary,
       "pcatstr3reconfigure": pcatstr3reconfigure,
       "sCATStratum3ConfigTable": sCATStratum3ConfigTable,
       "sCATStratum3ConfigEntry": sCATStratum3ConfigEntry,
       "ss3cIndex": ss3cIndex,
       "scatstr3listener": scatstr3listener,
       "scatstr3oscillator": scatstr3oscillator,
       "scatstr3reconfigure": scatstr3reconfigure,
       "pCATStratum3StatusTable": pCATStratum3StatusTable,
       "pCATStratum3StatusEntry": pCATStratum3StatusEntry,
       "ps3sIndex": ps3sIndex,
       "pcatstr3listenerstatus": pcatstr3listenerstatus,
       "pcatstr3driverstatus": pcatstr3driverstatus,
       "pcatstr3oscstatus": pcatstr3oscstatus,
       "sCATStratum3StatusTable": sCATStratum3StatusTable,
       "sCATStratum3StatusEntry": sCATStratum3StatusEntry,
       "ss3sIndex": ss3sIndex,
       "scatstr3listenerstatus": scatstr3listenerstatus,
       "scatstr3driverstatus": scatstr3driverstatus,
       "scatstr3oscstatus": scatstr3oscstatus,
       "pCATBitsConfigTable": pCATBitsConfigTable,
       "pCATBitsConfigEntry": pCATBitsConfigEntry,
       "pbcIndex": pbcIndex,
       "pbcds1V2TxLineLn": pbcds1V2TxLineLn,
       "pbcplaceholder1": pbcplaceholder1,
       "pbcV2FRMRMode": pbcV2FRMRMode,
       "pbcds1V2Coding": pbcds1V2Coding,
       "pbcV2Lb": pbcV2Lb,
       "pbcclrperf": pbcclrperf,
       "pbcreconfigure": pbcreconfigure,
       "sCATBitsConfigTable": sCATBitsConfigTable,
       "sCATBitsConfigEntry": sCATBitsConfigEntry,
       "sbcIndex": sbcIndex,
       "sbcds1V2TxLineLn": sbcds1V2TxLineLn,
       "sbcplaceholder1": sbcplaceholder1,
       "sbcV2FRMRMode": sbcV2FRMRMode,
       "sbcds1V2Coding": sbcds1V2Coding,
       "sbcV2Lb": sbcV2Lb,
       "sbcclrperf": sbcclrperf,
       "sbcreconfigure": sbcreconfigure,
       "pCATBitsStatusTable": pCATBitsStatusTable,
       "pCATBitsStatusEntry": pCATBitsStatusEntry,
       "pbsIndex": pbsIndex,
       "pbslineok": pbslineok,
       "pbsV2RxAIS": pbsV2RxAIS,
       "pbsV2RxLOS": pbsV2RxLOS,
       "pbsV2RxOOF": pbsV2RxOOF,
       "pbsV2RxBER": pbsV2RxBER,
       "pbsV2RxOOFCnt": pbsV2RxOOFCnt,
       "pbsV2RxBERCnt": pbsV2RxBERCnt,
       "pbsV2RxLOSCnt": pbsV2RxLOSCnt,
       "pbsV2LCVCnt": pbsV2LCVCnt,
       "sCATBitsStatusTable": sCATBitsStatusTable,
       "sCATBitsStatusEntry": sCATBitsStatusEntry,
       "sbsIndex": sbsIndex,
       "sbslineok": sbslineok,
       "sbsV2RxAIS": sbsV2RxAIS,
       "sbsV2RxLOS": sbsV2RxLOS,
       "sbsV2RxOOF": sbsV2RxOOF,
       "sbsV2RxBER": sbsV2RxBER,
       "sbsV2RxOOFCnt": sbsV2RxOOFCnt,
       "sbsV2RxBERCnt": sbsV2RxBERCnt,
       "sbsV2RxLOSCnt": sbsV2RxLOSCnt,
       "sbsV2LCVCnt": sbsV2LCVCnt,
       "pCATDerConfigTable": pCATDerConfigTable,
       "pCATDerConfigEntry": pCATDerConfigEntry,
       "pdcIndex": pdcIndex,
       "pdcds1V2TxLineLn": pdcds1V2TxLineLn,
       "pdcplaceholder1": pdcplaceholder1,
       "pdcV2FRMRMode": pdcV2FRMRMode,
       "pdcds1V2Coding": pdcds1V2Coding,
       "pdcV2Lb": pdcV2Lb,
       "pdcclrperf": pdcclrperf,
       "pdcreconfigure": pdcreconfigure,
       "sCATDerConfigTable": sCATDerConfigTable,
       "sCATDerConfigEntry": sCATDerConfigEntry,
       "sdcIndex": sdcIndex,
       "sdcds1V2TxLineLn": sdcds1V2TxLineLn,
       "sdcplaceholder1": sdcplaceholder1,
       "sdcV2FRMRMode": sdcV2FRMRMode,
       "sdcds1V2Coding": sdcds1V2Coding,
       "sdcV2Lb": sdcV2Lb,
       "sdcclrperf": sdcclrperf,
       "sdcreconfigure": sdcreconfigure,
       "pCATDerStatusTable": pCATDerStatusTable,
       "pCATDerStatusEntry": pCATDerStatusEntry,
       "pdsIndex": pdsIndex,
       "pdslineok": pdslineok,
       "pdsV2TxReference": pdsV2TxReference,
       "pdsV2RxAIS": pdsV2RxAIS,
       "pdsV2RxLOS": pdsV2RxLOS,
       "pdsV2RxOOF": pdsV2RxOOF,
       "pdsV2RxBER": pdsV2RxBER,
       "pdsV2RxOOFCnt": pdsV2RxOOFCnt,
       "pdsV2RxBERCnt": pdsV2RxBERCnt,
       "pdsV2RxLOSCnt": pdsV2RxLOSCnt,
       "pdsV2LCVCnt": pdsV2LCVCnt,
       "sCATDerStatusTable": sCATDerStatusTable,
       "sCATDerStatusEntry": sCATDerStatusEntry,
       "sdsIndex": sdsIndex,
       "sdslineok": sdslineok,
       "sdsV2TxReference": sdsV2TxReference,
       "sdsV2RxAIS": sdsV2RxAIS,
       "sdsV2RxLOS": sdsV2RxLOS,
       "sdsV2RxOOF": sdsV2RxOOF,
       "sdsV2RxBER": sdsV2RxBER,
       "sdsV2RxOOFCnt": sdsV2RxOOFCnt,
       "sdsV2RxBERCnt": sdsV2RxBERCnt,
       "sdsV2RxLOSCnt": sdsV2RxLOSCnt,
       "sdsV2LCVCnt": sdsV2LCVCnt,
       "sysClkAlarmErr": sysClkAlarmErr,
       "mjlimSlipLine": mjlimSlipLine,
       "jpegSlipIp": jpegSlipIp,
       "jpegSlipMask": jpegSlipMask,
       "jpegSlipRemoteIp": jpegSlipRemoteIp,
       "jpegSlipSpeed": jpegSlipSpeed,
       "mjlimSystem": mjlimSystem,
       "limSysState": limSysState,
       "limSysFault": limSysFault,
       "limSysCompErr": limSysCompErr,
       "limSysDecompErr": limSysDecompErr,
       "limSysVideoIn": limSysVideoIn,
       "limSysVideoOut": limSysVideoOut,
       "limSysStartMode": limSysStartMode,
       "vidInCfg": vidInCfg,
       "vidInJpeg": vidInJpeg,
       "vidInRate": vidInRate,
       "vidInProvMode": vidInProvMode,
       "vidInFrameRate": vidInFrameRate,
       "vidInWindowSize": vidInWindowSize,
       "vidInQuanFactor": vidInQuanFactor,
       "vidInTransMode": vidInTransMode,
       "vidInStand": vidInStand,
       "vidInVcrMode": vidInVcrMode,
       "vidInAnLpbk": vidInAnLpbk,
       "vidInTest": vidInTest,
       "vidOutCfg": vidOutCfg,
       "vidOutJpeg": vidOutJpeg,
       "vidOutStand": vidOutStand,
       "vidOutSource": vidOutSource,
       "vidOutUnLpb": vidOutUnLpb,
       "vidOutIdleSrc": vidOutIdleSrc,
       "vidOutChnlLpbk": vidOutChnlLpbk,
       "vidInSta": vidInSta,
       "vidInState": vidInState,
       "vidInPres": vidInPres,
       "vidInCurQFactor": vidInCurQFactor,
       "vidInCurFrameRate": vidInCurFrameRate,
       "vidInAvgBitRate": vidInAvgBitRate,
       "vidInPeakBitRate": vidInPeakBitRate,
       "vidInSubSample": vidInSubSample,
       "vidInCompCnt": vidInCompCnt,
       "vidInSkipCnt": vidInSkipCnt,
       "vidInBuffOvf": vidInBuffOvf,
       "vidInImageErr": vidInImageErr,
       "vidInFldSynErr": vidInFldSynErr,
       "vidInCompErr": vidInCompErr,
       "vidInBufLevel": vidInBufLevel,
       "vidInFailReason": vidInFailReason,
       "vidOutSta": vidOutSta,
       "vidOutState": vidOutState,
       "vidOutRate": vidOutRate,
       "vidOutFrameRate": vidOutFrameRate,
       "vidOutWindowWidth": vidOutWindowWidth,
       "vidOutWindowHeight": vidOutWindowHeight,
       "vidOutChnlLock": vidOutChnlLock,
       "vidOutPackets": vidOutPackets,
       "vidOutPlayed": vidOutPlayed,
       "vidOutSkipped": vidOutSkipped,
       "vidOutChnlErr": vidOutChnlErr,
       "vidOutBuffOvf": vidOutBuffOvf,
       "vidOutImageErr": vidOutImageErr,
       "vidOutSeqnoErr": vidOutSeqnoErr,
       "vidOutCurrQFactor": vidOutCurrQFactor,
       "vidOutStdStat": vidOutStdStat,
       "vidOutBuffLevel": vidOutBuffLevel,
       "vidOutPktsInBuff": vidOutPktsInBuff,
       "vidOutFailReason": vidOutFailReason,
       "vidOutSrcSts": vidOutSrcSts,
       "audInCfg": audInCfg,
       "audInLoopBack": audInLoopBack,
       "audOutCfg": audOutCfg,
       "audOutMute": audOutMute,
       "audOutDigLpbk": audOutDigLpbk,
       "audInSta": audInSta,
       "audOutSta": audOutSta,
       "audOutLock": audOutLock,
       "audOutMuteStat": audOutMuteStat,
       "dataCfg": dataCfg,
       "dataIp": dataIp,
       "dataMask": dataMask,
       "dataRemoteIp": dataRemoteIp,
       "dataSta": dataSta,
       "mjlimControl": mjlimControl,
       "sendFileSel": sendFileSel,
       "jpegCurrentFile": jpegCurrentFile,
       "sendFileStat": sendFileStat,
       "sendFileBytes": sendFileBytes,
       "jpegReset": jpegReset,
       "jpegSaveCfg": jpegSaveCfg,
       "jpegLoadCfg": jpegLoadCfg,
       "jpegSWRev": jpegSWRev,
       "dv2PDH": dv2PDH,
       "pdhPLCPTable": pdhPLCPTable,
       "pdhPLCPEntry": pdhPLCPEntry,
       "pdhPLCPLinkNo": pdhPLCPLinkNo,
       "pdhPLCPLinkEnable": pdhPLCPLinkEnable,
       "pdhPLCPLinkStatusAffect": pdhPLCPLinkStatusAffect,
       "pdhPLCPLinkState": pdhPLCPLinkState,
       "pdhPLCPPhyMode": pdhPLCPPhyMode,
       "pdhPLCPMode": pdhPLCPMode,
       "pdhPLCPScrambler": pdhPLCPScrambler,
       "pdhPLCP0x55": pdhPLCP0x55,
       "pdhPLCPSmdsMode": pdhPLCPSmdsMode,
       "pdhPLCPIdleCell": pdhPLCPIdleCell,
       "pdhPLCPLoopback": pdhPLCPLoopback,
       "pdhPLCPClear": pdhPLCPClear,
       "pdhPLCPReconfig": pdhPLCPReconfig,
       "pdhPLCPLpbkTimeout": pdhPLCPLpbkTimeout,
       "pdhPLCPChipType": pdhPLCPChipType,
       "pdhPLCPTXclock": pdhPLCPTXclock,
       "pdhPLCPRXclock": pdhPLCPRXclock,
       "pdhPLCPTXCells": pdhPLCPTXCells,
       "pdhPLCPRXCells": pdhPLCPRXCells,
       "pdhPLCPHCSErrs": pdhPLCPHCSErrs,
       "pdhPLCPLOCDDefect": pdhPLCPLOCDDefect,
       "pdhPLCPYellowDefect": pdhPLCPYellowDefect,
       "pdhPLCPLOFDefect": pdhPLCPLOFDefect,
       "pdhPLCPLOCDAlarm": pdhPLCPLOCDAlarm,
       "pdhPLCPYellowAlarm": pdhPLCPYellowAlarm,
       "pdhPLCPLOFAlarm": pdhPLCPLOFAlarm,
       "pdhPLCPFrameErrs": pdhPLCPFrameErrs,
       "pdhPLCPBIP8Errs": pdhPLCPBIP8Errs,
       "pdhPLCPFEBEErrs": pdhPLCPFEBEErrs,
       "pdhPLCPES": pdhPLCPES,
       "pdhPLCPSES": pdhPLCPSES,
       "pdhPLCPUAS": pdhPLCPUAS,
       "pdhPLCPFEES": pdhPLCPFEES,
       "pdhPLCPFESES": pdhPLCPFESES,
       "pdhPLCPFEUAS": pdhPLCPFEUAS,
       "pdhDS3Table": pdhDS3Table,
       "pdhDS3Entry": pdhDS3Entry,
       "pdhDS3TableValid": pdhDS3TableValid,
       "pdhDS3LinkNo": pdhDS3LinkNo,
       "pdhDS3Framer": pdhDS3Framer,
       "pdhDS3TxAIS": pdhDS3TxAIS,
       "pdhDS3Clear": pdhDS3Clear,
       "pdhDS3Reconfig": pdhDS3Reconfig,
       "pdhDS3RxFrmFmt": pdhDS3RxFrmFmt,
       "pdhDS3RxIDL": pdhDS3RxIDL,
       "pdhDS3FEACTxmt": pdhDS3FEACTxmt,
       "pdhDS3Lcvs": pdhDS3Lcvs,
       "pdhDS3FrameErrs": pdhDS3FrameErrs,
       "pdhDS3ParityErrs": pdhDS3ParityErrs,
       "pdhDS3CbitPrtyErrs": pdhDS3CbitPrtyErrs,
       "pdhDS3FEBEErrs": pdhDS3FEBEErrs,
       "pdhDS3LOSDefect": pdhDS3LOSDefect,
       "pdhDS3OOFDefect": pdhDS3OOFDefect,
       "pdhDS3AISDefect": pdhDS3AISDefect,
       "pdhDS3YellowDefect": pdhDS3YellowDefect,
       "pdhDS3ExBERDefect": pdhDS3ExBERDefect,
       "pdhDS3LOSAlarm": pdhDS3LOSAlarm,
       "pdhDS3LOFAlarm": pdhDS3LOFAlarm,
       "pdhDS3AISAlarm": pdhDS3AISAlarm,
       "pdhDS3YellowAlarm": pdhDS3YellowAlarm,
       "pdhDS3ExBERAlarm": pdhDS3ExBERAlarm,
       "pdhDS3LES": pdhDS3LES,
       "pdhDS3LSES": pdhDS3LSES,
       "pdhDS3ES": pdhDS3ES,
       "pdhDS3ES2": pdhDS3ES2,
       "pdhDS3SES": pdhDS3SES,
       "pdhDS3SES2": pdhDS3SES2,
       "pdhDS3AISS": pdhDS3AISS,
       "pdhDS3UAS": pdhDS3UAS,
       "pdhDS3FarEndES": pdhDS3FarEndES,
       "pdhDS3FarEndSES": pdhDS3FarEndSES,
       "pdhDS3FarEndUAS": pdhDS3FarEndUAS,
       "pdhE3Table": pdhE3Table,
       "pdhE3Entry": pdhE3Entry,
       "pdhE3TableValid": pdhE3TableValid,
       "pdhE3LinkNo": pdhE3LinkNo,
       "pdhE3Framer": pdhE3Framer,
       "pdhE3Clear": pdhE3Clear,
       "pdhE3Reconfig": pdhE3Reconfig,
       "pdhE3TxmtTimMk": pdhE3TxmtTimMk,
       "pdhE3PloadTypeLab": pdhE3PloadTypeLab,
       "pdhE3TxTrlTrcIdLen": pdhE3TxTrlTrcIdLen,
       "pdhE3TxTrcIdUH": pdhE3TxTrcIdUH,
       "pdhE3TxTrcIdLH": pdhE3TxTrcIdLH,
       "pdhE3RxExTrcIdUH": pdhE3RxExTrcIdUH,
       "pdhE3RxExTrcIdLH": pdhE3RxExTrcIdLH,
       "pdhE3FrameErrs": pdhE3FrameErrs,
       "pdhE3Lcvs": pdhE3Lcvs,
       "pdhE3ParityErrs": pdhE3ParityErrs,
       "pdhE3FEBEErrs": pdhE3FEBEErrs,
       "pdhE3LOSDefect": pdhE3LOSDefect,
       "pdhE3OOFDefect": pdhE3OOFDefect,
       "pdhE3AISDefect": pdhE3AISDefect,
       "pdhE3FERFDefect": pdhE3FERFDefect,
       "pdhE3ExBERDefect": pdhE3ExBERDefect,
       "pdhE3LOSAlarm": pdhE3LOSAlarm,
       "pdhE3LOFAlarm": pdhE3LOFAlarm,
       "pdhE3AISAlarm": pdhE3AISAlarm,
       "pdhE3FERFAlarm": pdhE3FERFAlarm,
       "pdhE3ExBERAlarm": pdhE3ExBERAlarm,
       "pdhE3LES": pdhE3LES,
       "pdhE3LSES": pdhE3LSES,
       "pdhE3ES": pdhE3ES,
       "pdhE3SES": pdhE3SES,
       "pdhE3AISS": pdhE3AISS,
       "pdhE3UAS": pdhE3UAS,
       "pdhE3RxTrlTrc": pdhE3RxTrlTrc,
       "pdhE3RxTrIdMis": pdhE3RxTrIdMis,
       "pdhE3RxTrIdUnst": pdhE3RxTrIdUnst,
       "pdhE3RxPloadTypeLabMis": pdhE3RxPloadTypeLabMis,
       "pdhE3RxPloadTypeLabUnst": pdhE3RxPloadTypeLabUnst,
       "dv2Oam": dv2Oam,
       "oamTable": oamTable,
       "oamEntry": oamEntry,
       "oamLinkNo": oamLinkNo,
       "oamSegEndPoint": oamSegEndPoint,
       "oamVcEndPoint": oamVcEndPoint,
       "oamAisRdiGeneration": oamAisRdiGeneration,
       "oamLastRxType": oamLastRxType,
       "oamLastRxVpi": oamLastRxVpi,
       "oamLastRxVci": oamLastRxVci,
       "oamRxCount": oamRxCount,
       "oamLastTxType": oamLastTxType,
       "oamLastTxVpi": oamLastTxVpi,
       "oamLastTxVci": oamLastTxVci,
       "oamTxCount": oamTxCount,
       "oamClearStats": oamClearStats,
       "oamLoopbackTable": oamLoopbackTable,
       "oamLoopbackEntry": oamLoopbackEntry,
       "oamLoopbackLinkNo": oamLoopbackLinkNo,
       "oamLoopbackVpi": oamLoopbackVpi,
       "oamLoopbackVci": oamLoopbackVci,
       "oamLoopbackSpan": oamLoopbackSpan,
       "oamLoopbackMaxNumCells": oamLoopbackMaxNumCells,
       "oamLoopbackNumCellsSent": oamLoopbackNumCellsSent,
       "oamLoopbackTimeOut": oamLoopbackTimeOut,
       "oamLoopbackActive": oamLoopbackActive,
       "oamLoopbackResult": oamLoopbackResult,
       "oamLoopbackLocId": oamLoopbackLocId,
       "oamDisable": oamDisable,
       "oamVcaTable": oamVcaTable,
       "oamVcaEntry": oamVcaEntry,
       "oamVcaVpi": oamVcaVpi,
       "oamVcaVci": oamVcaVci,
       "oamVcaConnectionType": oamVcaConnectionType,
       "oamVcaVpcEndPoint": oamVcaVpcEndPoint,
       "oamVcaAisRdiGeneration": oamVcaAisRdiGeneration,
       "oamVcaAisRdiState": oamVcaAisRdiState,
       "oamVcaDefectType": oamVcaDefectType,
       "oamVcaDefectNode": oamVcaDefectNode,
       "oamVcaDefectSlot": oamVcaDefectSlot,
       "oamVcaDefectLink": oamVcaDefectLink,
       "oamVcaTrapEnable": oamVcaTrapEnable,
       "oamVcaCC": oamVcaCC,
       "oamVcaCCState": oamVcaCCState,
       "oamVcaPM": oamVcaPM,
       "oamVcaPMBlockSize": oamVcaPMBlockSize,
       "oamVcaPMState": oamVcaPMState,
       "oamVcaBkwRptLosCells": oamVcaBkwRptLosCells,
       "oamVcaBkwRptMisCells": oamVcaBkwRptMisCells,
       "oamVcaBkwRptBip16": oamVcaBkwRptBip16,
       "oamVcaBkwRptSevErr": oamVcaBkwRptSevErr,
       "oamVcbTable": oamVcbTable,
       "oamVcbEntry": oamVcbEntry,
       "oamVcbVpi": oamVcbVpi,
       "oamVcbVci": oamVcbVci,
       "oamVcbConnectionType": oamVcbConnectionType,
       "oamVcbVpcEndPoint": oamVcbVpcEndPoint,
       "oamVcbAisRdiGeneration": oamVcbAisRdiGeneration,
       "oamVcbAisRdiState": oamVcbAisRdiState,
       "oamVcbDefectType": oamVcbDefectType,
       "oamVcbDefectNode": oamVcbDefectNode,
       "oamVcbDefectSlot": oamVcbDefectSlot,
       "oamVcbDefectLink": oamVcbDefectLink,
       "oamVcbTrapEnable": oamVcbTrapEnable,
       "oamVcbCC": oamVcbCC,
       "oamVcbCCState": oamVcbCCState,
       "oamVcbPM": oamVcbPM,
       "oamVcbPMBlockSize": oamVcbPMBlockSize,
       "oamVcbPMState": oamVcbPMState,
       "oamVcbBkwRptLosCells": oamVcbBkwRptLosCells,
       "oamVcbBkwRptMisCells": oamVcbBkwRptMisCells,
       "oamVcbBkwRptBip16": oamVcbBkwRptBip16,
       "oamVcbBkwRptSevErr": oamVcbBkwRptSevErr,
       "dv2Lmi": dv2Lmi,
       "lmiTable": lmiTable,
       "lmiEntry": lmiEntry,
       "lmiLinkNo": lmiLinkNo,
       "lmiVpi": lmiVpi,
       "lmiVci": lmiVci,
       "lmiType": lmiType,
       "lmiState": lmiState,
       "lmiFormat": lmiFormat,
       "lmiPrefix": lmiPrefix,
       "lmiOnOff": lmiOnOff,
       "lmiPollPeriod": lmiPollPeriod,
       "lmiNoRspDown": lmiNoRspDown,
       "lmiLinkMgmt": lmiLinkMgmt,
       "lmiConnectivity": lmiConnectivity,
       "lmiPrefixMod": lmiPrefixMod,
       "lmiEsi": lmiEsi,
       "lmiNetSideTable": lmiNetSideTable,
       "lmiNetSideEntry": lmiNetSideEntry,
       "lmiNetSideLinkNo": lmiNetSideLinkNo,
       "lmiNetSidePrefixId": lmiNetSidePrefixId,
       "lmiNetSidePrefix": lmiNetSidePrefix,
       "lmiNetSidePrefixStatus": lmiNetSidePrefixStatus,
       "lmiUserSideTable": lmiUserSideTable,
       "lmiUserSideEntry": lmiUserSideEntry,
       "lmiUserSideLinkNo": lmiUserSideLinkNo,
       "lmiUserSideAddressId": lmiUserSideAddressId,
       "lmiUserSideAddress": lmiUserSideAddress,
       "lmiUserSideAddressStatus": lmiUserSideAddressStatus,
       "dv2AlarmHandler": dv2AlarmHandler,
       "alarmNodeCrit": alarmNodeCrit,
       "alarmNodeMajor": alarmNodeMajor,
       "alarmNodeMinor": alarmNodeMinor,
       "alarmStatTable": alarmStatTable,
       "alarmStatEntry": alarmStatEntry,
       "alrStatSlotNo": alrStatSlotNo,
       "slotCritStatus": slotCritStatus,
       "slotMajorStatus": slotMajorStatus,
       "slotMinorStatus": slotMinorStatus,
       "link0CritStatus": link0CritStatus,
       "link0MajorStatus": link0MajorStatus,
       "link0MinorStatus": link0MinorStatus,
       "link1CritStatus": link1CritStatus,
       "link1MajorStatus": link1MajorStatus,
       "link1MinorStatus": link1MinorStatus,
       "link2CritStatus": link2CritStatus,
       "link2MajorStatus": link2MajorStatus,
       "link2MinorStatus": link2MinorStatus,
       "link3CritStatus": link3CritStatus,
       "link3MajorStatus": link3MajorStatus,
       "link3MinorStatus": link3MinorStatus,
       "alarmNodeACO": alarmNodeACO,
       "alarmACOTable": alarmACOTable,
       "alarmACOEntry": alarmACOEntry,
       "alrACOslotNo": alrACOslotNo,
       "alrACOslotACO": alrACOslotACO,
       "alrACOlink0ACO": alrACOlink0ACO,
       "alrACOlink1ACO": alrACOlink1ACO,
       "alrACOlink2ACO": alrACOlink2ACO,
       "alrACOlink3ACO": alrACOlink3ACO,
       "userStatusTable": userStatusTable,
       "userStatusEntry": userStatusEntry,
       "userInputNo": userInputNo,
       "userInputEnable": userInputEnable,
       "userInputTrapEnable": userInputTrapEnable,
       "userInputTrapDesc": userInputTrapDesc,
       "userInputActiveState": userInputActiveState,
       "userInputAlrClass": userInputAlrClass,
       "userInputStatus": userInputStatus,
       "alarmScanFile": alarmScanFile,
       "dv2Cac": dv2Cac,
       "cacCurrentEbtId": cacCurrentEbtId,
       "cacEbtCommand": cacEbtCommand,
       "cacCommandEbtId": cacCommandEbtId,
       "cacEbtState": cacEbtState,
       "cacErrorCode": cacErrorCode,
       "cacPerLinkTable": cacPerLinkTable,
       "cacPerLinkEntry": cacPerLinkEntry,
       "cacLinkNo": cacLinkNo,
       "cacLinkSumE10": cacLinkSumE10,
       "cacLinkSumE1T": cacLinkSumE1T,
       "cacLinkObfPvc1": cacLinkObfPvc1,
       "cacLinkObfSvc1": cacLinkObfSvc1,
       "cacLinkSumE20": cacLinkSumE20,
       "cacLinkSumE2T": cacLinkSumE2T,
       "cacLinkObfPvc2": cacLinkObfPvc2,
       "cacLinkObfSvc2": cacLinkObfSvc2,
       "cacLinkTotalBwScrPcr": cacLinkTotalBwScrPcr,
       "cacCurrentLinkUsage": cacCurrentLinkUsage,
       "cacMaxLinkUsage": cacMaxLinkUsage,
       "cacLinkReset": cacLinkReset,
       "cacLinkVersion": cacLinkVersion,
       "cacLinkEnable": cacLinkEnable,
       "cacLinkSignalMode": cacLinkSignalMode,
       "cacLinkState": cacLinkState,
       "cacPerSapTable": cacPerSapTable,
       "cacPerSapEntry": cacPerSapEntry,
       "cacSapNo": cacSapNo,
       "cacSapSumE1T": cacSapSumE1T,
       "cacSapSumE2T": cacSapSumE2T,
       "cacSapTotalBwScrPcr": cacSapTotalBwScrPcr,
       "cacCurrentSapUsage": cacCurrentSapUsage,
       "cacMaxSapUsage": cacMaxSapUsage,
       "cacSapReset": cacSapReset,
       "dv2MS2FRAC": dv2MS2FRAC,
       "dv2aal5": dv2aal5,
       "vhsystem": vhsystem,
       "limHostRev": limHostRev,
       "limBootRev": limBootRev,
       "limHwRev": limHwRev,
       "limAction": limAction,
       "limState": limState,
       "limFault": limFault,
       "limFaultReason": limFaultReason,
       "limCodec0": limCodec0,
       "limCodec1": limCodec1,
       "limSCmgmt": limSCmgmt,
       "limSCmgmtData": limSCmgmtData,
       "limSCfileXferReq": limSCfileXferReq,
       "limSCfileXferStat": limSCfileXferStat,
       "limSCbytes": limSCbytes,
       "vhcontrol": vhcontrol,
       "ctrlTable": ctrlTable,
       "ctrlEntry": ctrlEntry,
       "ctrlIndex": ctrlIndex,
       "ctrlCodecType": ctrlCodecType,
       "ctrlCodecAction": ctrlCodecAction,
       "ctrlCodecReq": ctrlCodecReq,
       "ctrlCallType": ctrlCallType,
       "ctrlCodecSta": ctrlCodecSta,
       "ctrlChnlLpbk": ctrlChnlLpbk,
       "ctrlFraming": ctrlFraming,
       "ctrlChnlStat": ctrlChnlStat,
       "ctrlFaultReason": ctrlFaultReason,
       "vidTable": vidTable,
       "vidEntry": vidEntry,
       "vidIndex": vidIndex,
       "vidStandard": vidStandard,
       "vidTxVidReq": vidTxVidReq,
       "vidRxVidReq": vidRxVidReq,
       "vidViewPip": vidViewPip,
       "vidCompQual": vidCompQual,
       "vidDigLpbk": vidDigLpbk,
       "vidEncFrameCount": vidEncFrameCount,
       "vidDecFrameCount": vidDecFrameCount,
       "vidState": vidState,
       "vidInPresent": vidInPresent,
       "vidEncBitRate": vidEncBitRate,
       "audTable": audTable,
       "audEntry": audEntry,
       "audIndex": audIndex,
       "audState": audState,
       "audPrefMode": audPrefMode,
       "audCommMode": audCommMode,
       "audBitRate": audBitRate,
       "audMuteInReq": audMuteInReq,
       "audMuteOutReq": audMuteOutReq,
       "audMuteOutStat": audMuteOutStat,
       "audLpbk": audLpbk,
       "audInVol": audInVol,
       "audOutVol": audOutVol,
       "audInDelay": audInDelay,
       "audOutDelay": audOutDelay,
       "audFaultReason": audFaultReason,
       "dataTable": dataTable,
       "dataEntry": dataEntry,
       "dataIndex": dataIndex,
       "dataChnlType": dataChnlType,
       "dataPortSpeed": dataPortSpeed,
       "dataPortProt": dataPortProt,
       "dataHDLCcheck": dataHDLCcheck,
       "dataChnlStat": dataChnlStat,
       "dataBytesRcvd": dataBytesRcvd,
       "dataBytesSent": dataBytesSent,
       "dataResetStat": dataResetStat,
       "vhmgmt": vhmgmt,
       "mgmtTable": mgmtTable,
       "mgmtEntry": mgmtEntry,
       "mgmtIndex": mgmtIndex,
       "mgmtDescr": mgmtDescr,
       "mgmtPortProt": mgmtPortProt,
       "mgmtPortSpeed": mgmtPortSpeed,
       "mgmtPortAddress": mgmtPortAddress,
       "mgmtAddressMask": mgmtAddressMask,
       "mgmtRemoteAddress": mgmtRemoteAddress,
       "mgmtPortStat": mgmtPortStat,
       "mgmtBytesRcvd": mgmtBytesRcvd,
       "mgmtBytesSent": mgmtBytesSent,
       "mgmtResetStat": mgmtResetStat}
)

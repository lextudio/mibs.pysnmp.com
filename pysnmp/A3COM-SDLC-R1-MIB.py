#
# PySNMP MIB module A3COM-SDLC-R1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/tin/Dev/mibs.snmplabs.com/asn1/A3COM-SDLC-R1-MIB
# Produced by pysmi-0.3.4 at Fri Jan 31 21:30:48 2020
# On host bier platform Linux version 5.4.0-3-amd64 by user tin
# Using Python version 3.7.6 (default, Jan 19 2020, 22:34:52) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ifAdminStatus, ifOperStatus, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifAdminStatus", "ifOperStatus", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Unsigned32, IpAddress, NotificationType, Gauge32, iso, ObjectIdentity, enterprises, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, Bits, ModuleIdentity, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "IpAddress", "NotificationType", "Gauge32", "iso", "ObjectIdentity", "enterprises", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "Bits", "ModuleIdentity", "MibIdentifier", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
a3com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
brouterMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2))
sdlc = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 25))
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

sdlcPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 25, 1))
sdlcLSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 25, 2))
sdlcMapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 25, 3))
sdlcPortAdminTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 1), )
if mibBuilder.loadTexts: sdlcPortAdminTable.setStatus('mandatory')
sdlcPortAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sdlcPortAdminEntry.setStatus('mandatory')
sdlcPortAdminName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortAdminName.setStatus('mandatory')
sdlcPortAdminRole = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("negotiable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcPortAdminRole.setStatus('mandatory')
sdlcPortAdminType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leased", 1), ("switched", 2))).clone('leased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcPortAdminType.setStatus('mandatory')
sdlcPortAdminTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pointToPoint", 1), ("multipoint", 2))).clone('pointToPoint')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcPortAdminTopology.setStatus('mandatory')
sdlcPortAdminACTIVTO = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcPortAdminACTIVTO.setStatus('mandatory')
sdlcPortAdminPAUSE = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 1, 1, 6), TimeTicks().clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcPortAdminPAUSE.setStatus('mandatory')
sdlcPortAdminSlowPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 1, 1, 7), TimeTicks().clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcPortAdminSlowPollTimer.setStatus('mandatory')
sdlcPortOperTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2), )
if mibBuilder.loadTexts: sdlcPortOperTable.setStatus('mandatory')
sdlcPortOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sdlcPortOperEntry.setStatus('mandatory')
sdlcPortOperName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortOperName.setStatus('mandatory')
sdlcPortOperRole = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("undefined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortOperRole.setStatus('mandatory')
sdlcPortOperType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leased", 1), ("switched", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortOperType.setStatus('mandatory')
sdlcPortOperTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pointToPoint", 1), ("multipoint", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortOperTopology.setStatus('mandatory')
sdlcPortOperACTIVTO = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortOperACTIVTO.setStatus('mandatory')
sdlcPortOperPAUSE = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortOperPAUSE.setStatus('mandatory')
sdlcPortOperSlowPollMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("servlim", 1), ("pollpause", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortOperSlowPollMethod.setStatus('mandatory')
sdlcPortOperSlowPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortOperSlowPollTimer.setStatus('mandatory')
sdlcPortOperLastFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortOperLastFailTime.setStatus('mandatory')
sdlcPortOperLastFailCause = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("undefined", 1), ("physical", 2))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortOperLastFailCause.setStatus('mandatory')
sdlcPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 3), )
if mibBuilder.loadTexts: sdlcPortStatsTable.setStatus('mandatory')
sdlcPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sdlcPortStatsEntry.setStatus('mandatory')
sdlcPortStatsPhysicalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortStatsPhysicalFailures.setStatus('mandatory')
sdlcPortStatsInvalidAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortStatsInvalidAddresses.setStatus('mandatory')
sdlcPortStatsDwarfFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortStatsDwarfFrames.setStatus('mandatory')
sdlcLSAdminTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1), )
if mibBuilder.loadTexts: sdlcLSAdminTable.setStatus('mandatory')
sdlcLSAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-SDLC-R1-MIB", "sdlcLSAddress"))
if mibBuilder.loadTexts: sdlcLSAdminEntry.setStatus('mandatory')
sdlcLSAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcLSAddress.setStatus('mandatory')
sdlcLSAdminName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcLSAdminName.setStatus('mandatory')
sdlcLSAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcLSAdminState.setStatus('mandatory')
sdlcLSAdminMAXDATA = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSAdminMAXDATA.setStatus('mandatory')
sdlcLSAdminREPLYTO = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 5), TimeTicks().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcLSAdminREPLYTO.setStatus('mandatory')
sdlcLSAdminMAXIN = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSAdminMAXIN.setStatus('mandatory')
sdlcLSAdminMAXOUT = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcLSAdminMAXOUT.setStatus('mandatory')
sdlcLSAdminMODULO = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 128))).clone(namedValues=NamedValues(("eight", 8), ("onetwentyeight", 128))).clone('eight')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSAdminMODULO.setStatus('mandatory')
sdlcLSAdminRETRIESm = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)).clone(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSAdminRETRIESm.setStatus('mandatory')
sdlcLSAdminRETRIESt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 10), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcLSAdminRETRIESt.setStatus('mandatory')
sdlcLSAdminRETRIESn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcLSAdminRETRIESn.setStatus('mandatory')
sdlcLSAdminRNRLIMIT = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 12), TimeTicks().clone(18000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcLSAdminRNRLIMIT.setStatus('mandatory')
sdlcLSAdminDATMODE = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2))).clone('half')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSAdminDATMODE.setStatus('mandatory')
sdlcLSAdminGPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcLSAdminGPoll.setStatus('mandatory')
sdlcLSAdminSimRim = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSAdminSimRim.setStatus('mandatory')
sdlcLSOperTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2), )
if mibBuilder.loadTexts: sdlcLSOperTable.setStatus('mandatory')
sdlcLSOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-SDLC-R1-MIB", "sdlcLSAddress"))
if mibBuilder.loadTexts: sdlcLSOperEntry.setStatus('mandatory')
sdlcLSOperName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperName.setStatus('mandatory')
sdlcLSOperRole = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("undefined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperRole.setStatus('mandatory')
sdlcLSOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("discontacted", 1), ("contactPending", 2), ("contacted", 3), ("discontactPending", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperState.setStatus('mandatory')
sdlcLSOperMAXDATA = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperMAXDATA.setStatus('mandatory')
sdlcLSOperREPLYTO = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperREPLYTO.setStatus('mandatory')
sdlcLSOperMAXIN = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperMAXIN.setStatus('mandatory')
sdlcLSOperMAXOUT = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperMAXOUT.setStatus('mandatory')
sdlcLSOperMODULO = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 128))).clone(namedValues=NamedValues(("eight", 8), ("onetwentyeight", 128))).clone('eight')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperMODULO.setStatus('mandatory')
sdlcLSOperRETRIESm = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperRETRIESm.setStatus('mandatory')
sdlcLSOperRETRIESt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperRETRIESt.setStatus('mandatory')
sdlcLSOperRETRIESn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperRETRIESn.setStatus('mandatory')
sdlcLSOperRNRLIMIT = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperRNRLIMIT.setStatus('mandatory')
sdlcLSOperDATMODE = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperDATMODE.setStatus('mandatory')
sdlcLSOperLastFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperLastFailTime.setStatus('mandatory')
sdlcLSOperLastFailCause = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("undefined", 1), ("rxFRMR", 2), ("txFRMR", 3), ("noResponse", 4), ("protocolErr", 5), ("noActivity", 6), ("rnrLimit", 7), ("retriesExpired", 8))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperLastFailCause.setStatus('mandatory')
sdlcLSOperLastFailCtrlIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperLastFailCtrlIn.setStatus('mandatory')
sdlcLSOperLastFailCtrlOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperLastFailCtrlOut.setStatus('mandatory')
sdlcLSOperLastFailFRMRInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperLastFailFRMRInfo.setStatus('mandatory')
sdlcLSOperLastFailREPLYTOs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperLastFailREPLYTOs.setStatus('mandatory')
sdlcLSOperGPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperGPoll.setStatus('mandatory')
sdlcLSOperSimRim = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperSimRim.setStatus('mandatory')
sdlcLSStatsTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3), )
if mibBuilder.loadTexts: sdlcLSStatsTable.setStatus('mandatory')
sdlcLSStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-SDLC-R1-MIB", "sdlcLSAddress"))
if mibBuilder.loadTexts: sdlcLSStatsEntry.setStatus('mandatory')
sdlcLSStatsBLUsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsBLUsIn.setStatus('mandatory')
sdlcLSStatsBLUsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsBLUsOut.setStatus('mandatory')
sdlcLSStatsOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsOctetsIn.setStatus('mandatory')
sdlcLSStatsOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsOctetsOut.setStatus('mandatory')
sdlcLSStatsPollsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsPollsOut.setStatus('mandatory')
sdlcLSStatsPollRspsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsPollRspsOut.setStatus('mandatory')
sdlcLSStatsLocalBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsLocalBusies.setStatus('mandatory')
sdlcLSStatsRemoteBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsRemoteBusies.setStatus('mandatory')
sdlcLSStatsIFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsIFramesIn.setStatus('mandatory')
sdlcLSStatsIFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsIFramesOut.setStatus('mandatory')
sdlcLSStatsRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsRetransmits.setStatus('mandatory')
sdlcLSStatsIOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsIOctetsIn.setStatus('mandatory')
sdlcLSStatsIOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsIOctetsOut.setStatus('mandatory')
sdlcLSStatsUIFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsUIFramesIn.setStatus('mandatory')
sdlcLSStatsUIFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsUIFramesOut.setStatus('mandatory')
sdlcLSStatsXIDsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsXIDsIn.setStatus('mandatory')
sdlcLSStatsXIDsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsXIDsOut.setStatus('mandatory')
sdlcLSStatsTESTsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsTESTsIn.setStatus('mandatory')
sdlcLSStatsTESTsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsTESTsOut.setStatus('mandatory')
sdlcLSStatsREJsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsREJsIn.setStatus('mandatory')
sdlcLSStatsREJsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsREJsOut.setStatus('mandatory')
sdlcLSStatsFRMRsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsFRMRsIn.setStatus('mandatory')
sdlcLSStatsFRMRsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsFRMRsOut.setStatus('mandatory')
sdlcLSStatsSIMsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsSIMsIn.setStatus('mandatory')
sdlcLSStatsSIMsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsSIMsOut.setStatus('mandatory')
sdlcLSStatsRIMsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsRIMsIn.setStatus('mandatory')
sdlcLSStatsRIMsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsRIMsOut.setStatus('mandatory')
sdlcLSStatsProtocolErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsProtocolErrs.setStatus('mandatory')
sdlcLSStatsActivityTOs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsActivityTOs.setStatus('mandatory')
sdlcLSStatsRNRLIMITs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsRNRLIMITs.setStatus('mandatory')
sdlcLSStatsRetriesExps = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsRetriesExps.setStatus('mandatory')
sdlcMapTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 25, 3, 1), )
if mibBuilder.loadTexts: sdlcMapTable.setStatus('mandatory')
pysmiFakeCol1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 3, 1, 1) + (1000, ), Integer32())
sdlcMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 25, 3, 1, 1), ).setIndexNames((0, "A3COM-SDLC-R1-MIB", "pysmiFakeCol1000"))
if mibBuilder.loadTexts: sdlcMapEntry.setStatus('mandatory')
sdlcMapPollAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcMapPollAddress.setStatus('mandatory')
sdlcMapLocalMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 3, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcMapLocalMacAddress.setStatus('mandatory')
sdlcMapLocalSap = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcMapLocalSap.setStatus('mandatory')
sdlcMapRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 3, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcMapRemoteMacAddress.setStatus('mandatory')
sdlcMapRemoteSap = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcMapRemoteSap.setStatus('mandatory')
sdlcMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcMapName.setStatus('mandatory')
sdlcMapPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcMapPortState.setStatus('mandatory')
sdlcMapLSState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcMapLSState.setStatus('mandatory')
sdlcPortStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 43, 2, 25) + (0,1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"), ("A3COM-SDLC-R1-MIB", "sdlcPortOperLastFailTime"), ("A3COM-SDLC-R1-MIB", "sdlcPortOperLastFailCause"))
sdlcLSStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 43, 2, 25) + (0,2)).setObjects(("IF-MIB", "ifIndex"), ("A3COM-SDLC-R1-MIB", "sdlcLSAddress"), ("A3COM-SDLC-R1-MIB", "sdlcLSOperState"), ("A3COM-SDLC-R1-MIB", "sdlcLSAdminState"), ("A3COM-SDLC-R1-MIB", "sdlcLSOperLastFailTime"), ("A3COM-SDLC-R1-MIB", "sdlcLSOperLastFailCause"), ("A3COM-SDLC-R1-MIB", "sdlcLSOperLastFailFRMRInfo"), ("A3COM-SDLC-R1-MIB", "sdlcLSOperLastFailCtrlIn"), ("A3COM-SDLC-R1-MIB", "sdlcLSOperLastFailCtrlOut"), ("A3COM-SDLC-R1-MIB", "sdlcLSOperLastFailREPLYTOs"))
mibBuilder.exportSymbols("A3COM-SDLC-R1-MIB", sdlcLSAdminName=sdlcLSAdminName, sdlcMapPortState=sdlcMapPortState, sdlcLSGroup=sdlcLSGroup, sdlcPortOperType=sdlcPortOperType, sdlcLSAdminRETRIESn=sdlcLSAdminRETRIESn, sdlcLSAdminSimRim=sdlcLSAdminSimRim, sdlcMapLSState=sdlcMapLSState, sdlcPortStatsInvalidAddresses=sdlcPortStatsInvalidAddresses, sdlcLSStatsFRMRsOut=sdlcLSStatsFRMRsOut, sdlcPortAdminRole=sdlcPortAdminRole, sdlcLSStatsProtocolErrs=sdlcLSStatsProtocolErrs, sdlcPortAdminTable=sdlcPortAdminTable, sdlcLSOperMAXDATA=sdlcLSOperMAXDATA, sdlcLSStatsEntry=sdlcLSStatsEntry, sdlcPortAdminTopology=sdlcPortAdminTopology, sdlcLSOperSimRim=sdlcLSOperSimRim, sdlcLSStatsREJsIn=sdlcLSStatsREJsIn, sdlcLSStatsSIMsOut=sdlcLSStatsSIMsOut, pysmiFakeCol1000=pysmiFakeCol1000, sdlcMapName=sdlcMapName, sdlcLSStatsRetransmits=sdlcLSStatsRetransmits, sdlcLSOperRETRIESn=sdlcLSOperRETRIESn, sdlcLSStatsRIMsIn=sdlcLSStatsRIMsIn, sdlcLSStatsActivityTOs=sdlcLSStatsActivityTOs, sdlcLSStatsRemoteBusies=sdlcLSStatsRemoteBusies, sdlcPortOperEntry=sdlcPortOperEntry, sdlcLSOperTable=sdlcLSOperTable, MacAddress=MacAddress, sdlcPortOperRole=sdlcPortOperRole, sdlcLSStatsUIFramesOut=sdlcLSStatsUIFramesOut, sdlcLSOperLastFailCause=sdlcLSOperLastFailCause, sdlcLSAdminGPoll=sdlcLSAdminGPoll, sdlcPortAdminPAUSE=sdlcPortAdminPAUSE, sdlcPortGroup=sdlcPortGroup, sdlcLSStatsBLUsOut=sdlcLSStatsBLUsOut, sdlcLSStatsFRMRsIn=sdlcLSStatsFRMRsIn, sdlcPortStatsEntry=sdlcPortStatsEntry, sdlcLSOperName=sdlcLSOperName, sdlcPortStatusChange=sdlcPortStatusChange, sdlcLSAdminMAXDATA=sdlcLSAdminMAXDATA, sdlcLSStatsBLUsIn=sdlcLSStatsBLUsIn, sdlcMapLocalMacAddress=sdlcMapLocalMacAddress, sdlcLSStatsRNRLIMITs=sdlcLSStatsRNRLIMITs, sdlcLSStatsREJsOut=sdlcLSStatsREJsOut, sdlcLSStatsXIDsOut=sdlcLSStatsXIDsOut, sdlcLSOperMODULO=sdlcLSOperMODULO, sdlcLSOperLastFailCtrlOut=sdlcLSOperLastFailCtrlOut, sdlc=sdlc, sdlcLSStatsLocalBusies=sdlcLSStatsLocalBusies, sdlcLSOperMAXOUT=sdlcLSOperMAXOUT, sdlcLSOperRETRIESm=sdlcLSOperRETRIESm, sdlcMapPollAddress=sdlcMapPollAddress, sdlcLSOperGPoll=sdlcLSOperGPoll, sdlcLSStatsIOctetsOut=sdlcLSStatsIOctetsOut, a3com=a3com, sdlcLSStatsPollsOut=sdlcLSStatsPollsOut, sdlcLSOperRNRLIMIT=sdlcLSOperRNRLIMIT, brouterMIB=brouterMIB, sdlcLSAdminRNRLIMIT=sdlcLSAdminRNRLIMIT, sdlcLSOperLastFailCtrlIn=sdlcLSOperLastFailCtrlIn, sdlcPortOperLastFailTime=sdlcPortOperLastFailTime, sdlcLSOperRETRIESt=sdlcLSOperRETRIESt, sdlcLSStatsSIMsIn=sdlcLSStatsSIMsIn, sdlcLSStatsIFramesIn=sdlcLSStatsIFramesIn, sdlcMapEntry=sdlcMapEntry, sdlcLSStatsIOctetsIn=sdlcLSStatsIOctetsIn, sdlcPortOperName=sdlcPortOperName, sdlcLSAdminState=sdlcLSAdminState, sdlcMapTable=sdlcMapTable, sdlcLSStatsRetriesExps=sdlcLSStatsRetriesExps, sdlcLSStatsIFramesOut=sdlcLSStatsIFramesOut, sdlcLSStatsTESTsOut=sdlcLSStatsTESTsOut, sdlcLSStatsUIFramesIn=sdlcLSStatsUIFramesIn, sdlcPortOperSlowPollTimer=sdlcPortOperSlowPollTimer, sdlcLSStatusChange=sdlcLSStatusChange, sdlcLSStatsRIMsOut=sdlcLSStatsRIMsOut, sdlcLSAdminMAXOUT=sdlcLSAdminMAXOUT, sdlcLSOperREPLYTO=sdlcLSOperREPLYTO, sdlcLSStatsXIDsIn=sdlcLSStatsXIDsIn, sdlcPortStatsPhysicalFailures=sdlcPortStatsPhysicalFailures, sdlcPortStatsDwarfFrames=sdlcPortStatsDwarfFrames, sdlcPortAdminType=sdlcPortAdminType, sdlcMapGroup=sdlcMapGroup, sdlcLSAdminRETRIESt=sdlcLSAdminRETRIESt, sdlcLSOperLastFailREPLYTOs=sdlcLSOperLastFailREPLYTOs, sdlcLSOperDATMODE=sdlcLSOperDATMODE, sdlcPortAdminSlowPollTimer=sdlcPortAdminSlowPollTimer, sdlcLSAdminMODULO=sdlcLSAdminMODULO, sdlcLSAdminRETRIESm=sdlcLSAdminRETRIESm, sdlcLSOperEntry=sdlcLSOperEntry, sdlcLSStatsOctetsOut=sdlcLSStatsOctetsOut, sdlcLSOperState=sdlcLSOperState, sdlcLSAdminMAXIN=sdlcLSAdminMAXIN, sdlcPortOperSlowPollMethod=sdlcPortOperSlowPollMethod, sdlcMapLocalSap=sdlcMapLocalSap, sdlcPortAdminName=sdlcPortAdminName, sdlcLSAdminEntry=sdlcLSAdminEntry, sdlcLSAdminTable=sdlcLSAdminTable, sdlcLSAdminREPLYTO=sdlcLSAdminREPLYTO, sdlcLSStatsPollRspsOut=sdlcLSStatsPollRspsOut, sdlcMapRemoteSap=sdlcMapRemoteSap, sdlcLSAddress=sdlcLSAddress, sdlcLSOperLastFailTime=sdlcLSOperLastFailTime, sdlcLSOperMAXIN=sdlcLSOperMAXIN, sdlcPortOperTable=sdlcPortOperTable, sdlcPortOperLastFailCause=sdlcPortOperLastFailCause, sdlcLSStatsTESTsIn=sdlcLSStatsTESTsIn, sdlcLSStatsOctetsIn=sdlcLSStatsOctetsIn, sdlcLSOperRole=sdlcLSOperRole, sdlcPortAdminACTIVTO=sdlcPortAdminACTIVTO, sdlcPortOperPAUSE=sdlcPortOperPAUSE, sdlcMapRemoteMacAddress=sdlcMapRemoteMacAddress, sdlcPortAdminEntry=sdlcPortAdminEntry, sdlcLSOperLastFailFRMRInfo=sdlcLSOperLastFailFRMRInfo, sdlcLSAdminDATMODE=sdlcLSAdminDATMODE, sdlcPortStatsTable=sdlcPortStatsTable, sdlcPortOperTopology=sdlcPortOperTopology, sdlcPortOperACTIVTO=sdlcPortOperACTIVTO, sdlcLSStatsTable=sdlcLSStatsTable)

# SNMP MIB module (LUXN-MIB) expressed in pysnmp data model.
#
# This Python module is designed to be imported and executed by the
# pysnmp library.
#
# See https://www.pysnmp.com/pysnmp for further information.
#
# Notes
# -----
# ASN.1 source file:///Users/lextm/pysnmp.com/mibs.pysnmp.com/asn1/LUXN-MIB
# Produced by pysmi-1.5.4 at Mon Oct 14 22:19:35 2024
# On host MacBook-Pro.local platform Darwin version 24.0.0 by user lextm
# Using Python version 3.12.0 (main, Nov 14 2023, 23:52:11) [Clang 15.0.0 (clang-1500.0.40.1)]

if 'mibBuilder' not in globals():
    import sys

    sys.stderr.write(__doc__)
    sys.exit(1)

# Import base ASN.1 objects even if this MIB does not use it

(Integer,
 OctetString,
 ObjectIdentifier) = mibBuilder.importSymbols(
    "ASN1",
    "Integer",
    "OctetString",
    "ObjectIdentifier")

(NamedValues,) = mibBuilder.importSymbols(
    "ASN1-ENUMERATION",
    "NamedValues")
(ConstraintsIntersection,
 SingleValueConstraint,
 ValueRangeConstraint,
 ValueSizeConstraint,
 ConstraintsUnion) = mibBuilder.importSymbols(
    "ASN1-REFINEMENT",
    "ConstraintsIntersection",
    "SingleValueConstraint",
    "ValueRangeConstraint",
    "ValueSizeConstraint",
    "ConstraintsUnion")

# Import SMI symbols from the MIBs this MIB depends on

(ModuleCompliance,
 NotificationGroup) = mibBuilder.importSymbols(
    "SNMPv2-CONF",
    "ModuleCompliance",
    "NotificationGroup")

(Bits,
 Counter32,
 Counter64,
 Gauge32,
 Integer32,
 IpAddress,
 ModuleIdentity,
 MibIdentifier,
 NotificationType,
 ObjectIdentity,
 MibScalar,
 MibTable,
 MibTableRow,
 MibTableColumn,
 NotificationType,
 TimeTicks,
 Unsigned32,
 enterprises,
 iso) = mibBuilder.importSymbols(
    "SNMPv2-SMI",
    "Bits",
    "Counter32",
    "Counter64",
    "Gauge32",
    "Integer32",
    "IpAddress",
    "ModuleIdentity",
    "MibIdentifier",
    "NotificationType",
    "ObjectIdentity",
    "MibScalar",
    "MibTable",
    "MibTableRow",
    "MibTableColumn",
    "NotificationType",
    "TimeTicks",
    "Unsigned32",
    "enterprises",
    "iso")

(DisplayString,
 TextualConvention) = mibBuilder.importSymbols(
    "SNMPv2-TC",
    "DisplayString",
    "TextualConvention")


# MODULE-IDENTITY


# Types definitions



class FlagType(Integer32):
    """Custom type FlagType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )





class ResetType(Integer32):
    """Custom type ResetType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("reset", 2))
    )





class RebootType(Integer32):
    """Custom type RebootType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("warmboot", 2))
    )





class Boolean(Integer32):
    """Custom type Boolean based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("false", 2),
          ("true", 1))
    )





class ChassisType(Integer32):
    """Custom type ChassisType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("gm1602", 4),
          ("gm1608", 5),
          ("gm3217", 3),
          ("gm3234", 2),
          ("gmx128", 6),
          ("wavstation1", 1))
    )





class CardLocation(Integer32):
    """Custom type CardLocation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("local", 1),
          ("remote1", 2),
          ("remote2", 3))
    )





class CardShelf(Integer32):
    """Custom type CardShelf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )





class CardSlot(Integer32):
    """Custom type CardSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 17),
    )





class ShelfInput(Integer32):
    """Custom type ShelfInput based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )





class SlotInput(Integer32):
    """Custom type SlotInput based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 17),
    )





class CardName(DisplayString):
    """Custom type CardName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )





class LinkName(DisplayString):
    """Custom type LinkName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 40),
    )





class CardType(Integer32):
    """Custom type CardType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              13,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              29,
              30,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56)
        )
    )
    namedValues = NamedValues(
        *(("bd-4", 42),
          ("bp-10", 43),
          ("bp-5", 46),
          ("cwdm_bd4", 56),
          ("dmm", 45),
          ("empty", 0),
          ("fadm", 6),
          ("fc8g", 54),
          ("mcme1", 35),
          ("mcmesc", 33),
          ("mcmt1", 8),
          ("md100-1", 36),
          ("md100-10", 40),
          ("md100-40", 37),
          ("md100-5", 39),
          ("md100p", 55),
          ("mpm", 1),
          ("mpm2", 47),
          ("oci", 25),
          ("ocm10g", 27),
          ("ocm10gf", 50),
          ("ocm10glr", 41),
          ("ocm2", 49),
          ("ocm2-4g", 51),
          ("ocme", 24),
          ("ocmi", 3),
          ("ocmu", 2),
          ("oet", 52),
          ("ofcd", 5),
          ("ofcm", 4),
          ("oli", 9),
          ("oppm", 7),
          ("osam", 20),
          ("osamhp", 30),
          ("osamlp", 29),
          ("osc", 48),
          ("oxc", 26),
          ("rsm", 22),
          ("tap", 38),
          ("unknown", 44),
          ("uob", 53),
          ("upsm", 23),
          ("w2cmd", 13),
          ("w4cd", 10),
          ("w4cm", 21),
          ("wfadm", 34))
    )





class CardStatus(Integer32):
    """Custom type CardStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("acknowledged", 5),
          ("critical", 1),
          ("major", 2),
          ("minor", 3),
          ("normal", 4))
    )





class CardState(Integer32):
    """Custom type CardState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("diag", 5),
          ("empty", 1),
          ("loopback", 4),
          ("offline", 3),
          ("online", 2))
    )





class RedundancyMode(Integer32):
    """Custom type RedundancyMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("standby", 2))
    )





class NodeName(DisplayString):
    """Custom type NodeName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )





class PortIndex(Integer32):
    """Custom type PortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )





class CardCycleMode(Integer32):
    """Custom type CardCycleMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("coldboot", 1),
          ("diag", 6),
          ("loopback", 5),
          ("offline", 3),
          ("online", 4),
          ("warmboot", 2))
    )





class TrapStatus(Integer32):
    """Custom type TrapStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("clear", 5),
          ("critical", 1),
          ("major", 2),
          ("minor", 3),
          ("normal", 4))
    )





class HistoryMode(Integer32):
    """Custom type HistoryMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("daily", 1),
          ("longterm", 2))
    )





class EventBuffer(Integer32):
    """Custom type EventBuffer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1000),
    )





class UserBuffer(Integer32):
    """Custom type UserBuffer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 100),
    )





class LogonID(DisplayString):
    """Custom type LogonID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )





class HashedPasswd(OctetString):
    """Custom type HashedPasswd based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 20),
    )





class EncryptedCommunity(DisplayString):
    """Custom type EncryptedCommunity based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )





class FileName(DisplayString):
    """Custom type FileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )





class EntityName(DisplayString):
    """Custom type EntityName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )





class DateAndTime(DisplayString):
    """Custom type DateAndTime based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )





class VersionString(DisplayString):
    """Custom type VersionString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 12),
    )





class SerialString(DisplayString):
    """Custom type SerialString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 17),
    )





class SfpSerialString(DisplayString):
    """Custom type SfpSerialString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 24),
    )





class ModelString(DisplayString):
    """Custom type ModelString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )





class ModelNum(DisplayString):
    """Custom type ModelNum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )





class FtpMode(Integer32):
    """Custom type FtpMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("passive", 2))
    )





class DownloadType(DisplayString):
    """Custom type DownloadType based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )





class DownloadLocation(Integer32):
    """Custom type DownloadLocation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("local", 1),
          ("remote", 2),
          ("remote2", 3))
    )





class DownloadShelf(Integer32):
    """Custom type DownloadShelf based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 2),
    )





class DownloadSlot(Integer32):
    """Custom type DownloadSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 17),
    )





class OSMode(DisplayString):
    """Custom type OSMode based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )





class ReleaseDate(DisplayString):
    """Custom type ReleaseDate based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )





class OSState(Integer32):
    """Custom type OSState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("backup", 2),
          ("operating", 1))
    )





class UpdateOSMode(Integer32):
    """Custom type UpdateOSMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("revert", 2),
          ("toggle", 1))
    )





class DownloadStatus(Integer32):
    """Custom type DownloadStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ftp-inprogress", 2),
          ("idle", 1),
          ("mod-inprogress", 3))
    )





class RingIdName(DisplayString):
    """Custom type RingIdName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )





class PathIdName(DisplayString):
    """Custom type PathIdName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )





class Timezone(Integer32):
    """Custom type Timezone based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              46,
              47,
              48,
              49,
              50,
              51,
              52)
        )
    )
    namedValues = NamedValues(
        *(("act", 45),
          ("adt", 18),
          ("ahst", 3),
          ("ast", 17),
          ("at", 19),
          ("bst", 25),
          ("bt", 36),
          ("cat", 4),
          ("cct", 42),
          ("cdt", 14),
          ("cet", 26),
          ("cst", 13),
          ("eadt", 48),
          ("east", 46),
          ("edt", 16),
          ("eet", 35),
          ("est", 15),
          ("fst", 34),
          ("fwt", 27),
          ("gmt", 21),
          ("gst", 47),
          ("hdt", 6),
          ("hst", 5),
          ("idle", 49),
          ("idlw", 1),
          ("jst", 44),
          ("mdt", 12),
          ("mest", 31),
          ("mesz", 32),
          ("met", 28),
          ("mewt", 29),
          ("mst", 11),
          ("nt", 2),
          ("nzdt", 52),
          ("nzst", 50),
          ("nzt", 51),
          ("pdt", 10),
          ("pst", 9),
          ("sst", 33),
          ("swt", 30),
          ("ut", 22),
          ("utc", 23),
          ("wadt", 43),
          ("wast", 41),
          ("wat", 20),
          ("wet", 24),
          ("ydt", 8),
          ("yst", 7),
          ("zp4", 37),
          ("zp5", 38),
          ("zp6", 39),
          ("zp7", 40))
    )





class AlarmType(Integer32):
    """Custom type AlarmType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33,
              34,
              35,
              36,
              37)
        )
    )
    namedValues = NamedValues(
        *(("aircompr", 1),
          ("aircond", 2),
          ("airdryr", 3),
          ("batdschrg", 4),
          ("battery", 5),
          ("clfan", 7),
          ("cpmajor", 27),
          ("cpminor", 28),
          ("engine", 8),
          ("engoprg", 9),
          ("explgs", 10),
          ("firdetr", 12),
          ("fire", 11),
          ("flood", 13),
          ("fuse", 14),
          ("gen", 15),
          ("hiair", 16),
          ("hihum", 17),
          ("hitemp", 18),
          ("hiwtr", 19),
          ("intruder", 20),
          ("lwbatvg", 22),
          ("lwfuel", 24),
          ("lwhum", 21),
          ("lwpres", 23),
          ("lwtemp", 25),
          ("lwwtr", 26),
          ("na", 37),
          ("opendr", 29),
          ("power", 6),
          ("pump", 30),
          ("rect", 31),
          ("recthi", 32),
          ("rectlo", 33),
          ("smoke", 34),
          ("toxicgas", 35),
          ("ventn", 36))
    )





class ZmsAdminString(DisplayString):
    """Custom type ZmsAdminString based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )





class ZmsFileName(DisplayString):
    """Custom type ZmsFileName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 64),
    )




# TEXTUAL-CONVENTIONS



# MIB Managed Objects in the order of their OIDs

_LuxN_ObjectIdentity = ObjectIdentity
luxN = _LuxN_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253)
)
_Configuration_ObjectIdentity = ObjectIdentity
configuration = _Configuration_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1)
)
_Manufacturing_ObjectIdentity = ObjectIdentity
manufacturing = _Manufacturing_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 1)
)


class _MfgName_Type(DisplayString):
    """Custom type mfgName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 30),
    )


_MfgName_Type.__name__ = "DisplayString"
_MfgName_Object = MibScalar
mfgName = _MfgName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 1, 1),
    _MfgName_Type()
)
mfgName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mfgName.setStatus("mandatory")
_MfgDate_Type = DateAndTime
_MfgDate_Object = MibScalar
mfgDate = _MfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 1, 2),
    _MfgDate_Type()
)
mfgDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mfgDate.setStatus("mandatory")
_MfgSerialNum_Type = SerialString
_MfgSerialNum_Object = MibScalar
mfgSerialNum = _MfgSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 1, 3),
    _MfgSerialNum_Type()
)
mfgSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mfgSerialNum.setStatus("mandatory")
_MfgModelType_Type = ModelString
_MfgModelType_Object = MibScalar
mfgModelType = _MfgModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 1, 4),
    _MfgModelType_Type()
)
mfgModelType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mfgModelType.setStatus("mandatory")
_MfgDefaultID_Type = LogonID
_MfgDefaultID_Object = MibScalar
mfgDefaultID = _MfgDefaultID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 1, 5),
    _MfgDefaultID_Type()
)
mfgDefaultID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mfgDefaultID.setStatus("mandatory")
_MfgDfltPasswd_Type = HashedPasswd
_MfgDfltPasswd_Object = MibScalar
mfgDfltPasswd = _MfgDfltPasswd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 1, 6),
    _MfgDfltPasswd_Type()
)
mfgDfltPasswd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mfgDfltPasswd.setStatus("mandatory")
_MfgNumShelves_Type = CardShelf
_MfgNumShelves_Object = MibScalar
mfgNumShelves = _MfgNumShelves_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 1, 9),
    _MfgNumShelves_Type()
)
mfgNumShelves.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mfgNumShelves.setStatus("mandatory")
_MfgShelfTable_Object = MibTable
mfgShelfTable = _MfgShelfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 1, 10)
)
if mibBuilder.loadTexts:
    mfgShelfTable.setStatus("mandatory")
_MfgShelfEntry_Object = MibTableRow
mfgShelfEntry = _MfgShelfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 1, 10, 1)
)
mfgShelfEntry.setIndexNames(
    (0, "LUXN-MIB", "mfgShelfID"),
)
if mibBuilder.loadTexts:
    mfgShelfEntry.setStatus("mandatory")
_MfgShelfID_Type = CardShelf
_MfgShelfID_Object = MibTableColumn
mfgShelfID = _MfgShelfID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 1, 10, 1, 1),
    _MfgShelfID_Type()
)
mfgShelfID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mfgShelfID.setStatus("mandatory")
_MfgNumSlots_Type = CardSlot
_MfgNumSlots_Object = MibTableColumn
mfgNumSlots = _MfgNumSlots_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 1, 10, 1, 2),
    _MfgNumSlots_Type()
)
mfgNumSlots.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mfgNumSlots.setStatus("mandatory")


class _MfgCRCChecksum_Type(DisplayString):
    """Custom type mfgCRCChecksum based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_MfgCRCChecksum_Type.__name__ = "DisplayString"
_MfgCRCChecksum_Object = MibScalar
mfgCRCChecksum = _MfgCRCChecksum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 1, 11),
    _MfgCRCChecksum_Type()
)
mfgCRCChecksum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mfgCRCChecksum.setStatus("mandatory")
_MfgChassisType_Type = ChassisType
_MfgChassisType_Object = MibScalar
mfgChassisType = _MfgChassisType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 1, 12),
    _MfgChassisType_Type()
)
mfgChassisType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mfgChassisType.setStatus("mandatory")


class _MfgPsType_Type(Integer32):
    """Custom type mfgPsType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("acOnly", 2),
          ("dcOny", 1),
          ("mixedDcAc", 3),
          ("unknown", 4))
    )


_MfgPsType_Type.__name__ = "Integer32"
_MfgPsType_Object = MibScalar
mfgPsType = _MfgPsType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 1, 13),
    _MfgPsType_Type()
)
mfgPsType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mfgPsType.setStatus("mandatory")
_MfgCleiNum_Type = DisplayString
_MfgCleiNum_Object = MibScalar
mfgCleiNum = _MfgCleiNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 1, 14),
    _MfgCleiNum_Type()
)
mfgCleiNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mfgCleiNum.setStatus("mandatory")
_Cp_ObjectIdentity = ObjectIdentity
cp = _Cp_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2)
)
_CpIpAddress_Type = IpAddress
_CpIpAddress_Object = MibScalar
cpIpAddress = _CpIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 1),
    _CpIpAddress_Type()
)
cpIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpIpAddress.setStatus("mandatory")
_CpNetMask_Type = IpAddress
_CpNetMask_Object = MibScalar
cpNetMask = _CpNetMask_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 2),
    _CpNetMask_Type()
)
cpNetMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpNetMask.setStatus("mandatory")
_CpMIBVersion_Type = VersionString
_CpMIBVersion_Object = MibScalar
cpMIBVersion = _CpMIBVersion_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 3),
    _CpMIBVersion_Type()
)
cpMIBVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpMIBVersion.setStatus("mandatory")
_CpBootPromVer_Type = VersionString
_CpBootPromVer_Object = MibScalar
cpBootPromVer = _CpBootPromVer_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 4),
    _CpBootPromVer_Type()
)
cpBootPromVer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpBootPromVer.setStatus("mandatory")


class _CpROMSize_Type(Integer32):
    """Custom type cpROMSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16384),
    )


_CpROMSize_Type.__name__ = "Integer32"
_CpROMSize_Object = MibScalar
cpROMSize = _CpROMSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 5),
    _CpROMSize_Type()
)
cpROMSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpROMSize.setStatus("mandatory")


class _CpNumSubDiv_Type(Integer32):
    """Custom type cpNumSubDiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_CpNumSubDiv_Type.__name__ = "Integer32"
_CpNumSubDiv_Object = MibScalar
cpNumSubDiv = _CpNumSubDiv_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 6),
    _CpNumSubDiv_Type()
)
cpNumSubDiv.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpNumSubDiv.setStatus("mandatory")
_CpSubDivTable_Object = MibTable
cpSubDivTable = _CpSubDivTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 7)
)
if mibBuilder.loadTexts:
    cpSubDivTable.setStatus("mandatory")
_CpSubDivEntry_Object = MibTableRow
cpSubDivEntry = _CpSubDivEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 7, 1)
)
cpSubDivEntry.setIndexNames(
    (0, "LUXN-MIB", "cpSubDivIndex"),
)
if mibBuilder.loadTexts:
    cpSubDivEntry.setStatus("mandatory")


class _CpSubDivIndex_Type(Integer32):
    """Custom type cpSubDivIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_CpSubDivIndex_Type.__name__ = "Integer32"
_CpSubDivIndex_Object = MibTableColumn
cpSubDivIndex = _CpSubDivIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 7, 1, 1),
    _CpSubDivIndex_Type()
)
cpSubDivIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpSubDivIndex.setStatus("mandatory")


class _CpSubDivDescr_Type(DisplayString):
    """Custom type cpSubDivDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_CpSubDivDescr_Type.__name__ = "DisplayString"
_CpSubDivDescr_Object = MibTableColumn
cpSubDivDescr = _CpSubDivDescr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 7, 1, 2),
    _CpSubDivDescr_Type()
)
cpSubDivDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpSubDivDescr.setStatus("mandatory")


class _CpSubDivSize_Type(Integer32):
    """Custom type cpSubDivSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 3145728),
    )


_CpSubDivSize_Type.__name__ = "Integer32"
_CpSubDivSize_Object = MibTableColumn
cpSubDivSize = _CpSubDivSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 7, 1, 3),
    _CpSubDivSize_Type()
)
cpSubDivSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpSubDivSize.setStatus("mandatory")


class _CpSubDivOffset_Type(OctetString):
    """Custom type cpSubDivOffset based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_CpSubDivOffset_Type.__name__ = "OctetString"
_CpSubDivOffset_Object = MibTableColumn
cpSubDivOffset = _CpSubDivOffset_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 7, 1, 4),
    _CpSubDivOffset_Type()
)
cpSubDivOffset.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpSubDivOffset.setStatus("mandatory")
_CpSubDivImgVersion_Type = DisplayString
_CpSubDivImgVersion_Object = MibTableColumn
cpSubDivImgVersion = _CpSubDivImgVersion_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 7, 1, 5),
    _CpSubDivImgVersion_Type()
)
cpSubDivImgVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpSubDivImgVersion.setStatus("mandatory")
_CpSubDivImgDBVersion_Type = DisplayString
_CpSubDivImgDBVersion_Object = MibTableColumn
cpSubDivImgDBVersion = _CpSubDivImgDBVersion_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 7, 1, 6),
    _CpSubDivImgDBVersion_Type()
)
cpSubDivImgDBVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpSubDivImgDBVersion.setStatus("mandatory")
_CpTable_Object = MibTable
cpTable = _CpTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 8)
)
if mibBuilder.loadTexts:
    cpTable.setStatus("mandatory")
_CpEntry_Object = MibTableRow
cpEntry = _CpEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1)
)
cpEntry.setIndexNames(
    (0, "LUXN-MIB", "cpCardShelf"),
    (0, "LUXN-MIB", "cpCardSlot"),
)
if mibBuilder.loadTexts:
    cpEntry.setStatus("mandatory")
_CpCardShelf_Type = CardShelf
_CpCardShelf_Object = MibTableColumn
cpCardShelf = _CpCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 1),
    _CpCardShelf_Type()
)
cpCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpCardShelf.setStatus("mandatory")
_CpCardSlot_Type = CardSlot
_CpCardSlot_Object = MibTableColumn
cpCardSlot = _CpCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 2),
    _CpCardSlot_Type()
)
cpCardSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpCardSlot.setStatus("mandatory")
_CpMode_Type = RedundancyMode
_CpMode_Object = MibTableColumn
cpMode = _CpMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 3),
    _CpMode_Type()
)
cpMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpMode.setStatus("mandatory")
_CpDsgntdMode_Type = RedundancyMode
_CpDsgntdMode_Object = MibTableColumn
cpDsgntdMode = _CpDsgntdMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 4),
    _CpDsgntdMode_Type()
)
cpDsgntdMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpDsgntdMode.setStatus("mandatory")
_CpState_Type = CardState
_CpState_Object = MibTableColumn
cpState = _CpState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 5),
    _CpState_Type()
)
cpState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpState.setStatus("mandatory")


class _CpMacAddr_Type(OctetString):
    """Custom type cpMacAddr based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 6),
    )


_CpMacAddr_Type.__name__ = "OctetString"
_CpMacAddr_Object = MibTableColumn
cpMacAddr = _CpMacAddr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 6),
    _CpMacAddr_Type()
)
cpMacAddr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpMacAddr.setStatus("mandatory")


class _CpName_Type(DisplayString):
    """Custom type cpName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_CpName_Type.__name__ = "DisplayString"
_CpName_Object = MibTableColumn
cpName = _CpName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 7),
    _CpName_Type()
)
cpName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpName.setStatus("mandatory")
_CpMfgDate_Type = DateAndTime
_CpMfgDate_Object = MibTableColumn
cpMfgDate = _CpMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 8),
    _CpMfgDate_Type()
)
cpMfgDate.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpMfgDate.setStatus("mandatory")
_CpSerialNum_Type = SerialString
_CpSerialNum_Object = MibTableColumn
cpSerialNum = _CpSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 9),
    _CpSerialNum_Type()
)
cpSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpSerialNum.setStatus("mandatory")
_CpModelType_Type = CardType
_CpModelType_Object = MibTableColumn
cpModelType = _CpModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 10),
    _CpModelType_Type()
)
cpModelType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpModelType.setStatus("mandatory")
_CpFWVersionID_Type = VersionString
_CpFWVersionID_Object = MibTableColumn
cpFWVersionID = _CpFWVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 11),
    _CpFWVersionID_Type()
)
cpFWVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpFWVersionID.setStatus("mandatory")
_CpSetState_Type = RebootType
_CpSetState_Object = MibTableColumn
cpSetState = _CpSetState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 12),
    _CpSetState_Type()
)
cpSetState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSetState.setStatus("mandatory")


class _CpHWName_Type(DisplayString):
    """Custom type cpHWName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_CpHWName_Type.__name__ = "DisplayString"
_CpHWName_Object = MibTableColumn
cpHWName = _CpHWName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 13),
    _CpHWName_Type()
)
cpHWName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHWName.setStatus("mandatory")
_CpCleiNum_Type = DisplayString
_CpCleiNum_Object = MibTableColumn
cpCleiNum = _CpCleiNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 14),
    _CpCleiNum_Type()
)
cpCleiNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpCleiNum.setStatus("mandatory")
_CpModelNum_Type = DisplayString
_CpModelNum_Object = MibTableColumn
cpModelNum = _CpModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 15),
    _CpModelNum_Type()
)
cpModelNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpModelNum.setStatus("mandatory")
_CpSetMode_Type = RedundancyMode
_CpSetMode_Object = MibScalar
cpSetMode = _CpSetMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 9),
    _CpSetMode_Type()
)
cpSetMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSetMode.setStatus("mandatory")
_CpSNMPTrapHost1_Type = IpAddress
_CpSNMPTrapHost1_Object = MibScalar
cpSNMPTrapHost1 = _CpSNMPTrapHost1_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 10),
    _CpSNMPTrapHost1_Type()
)
cpSNMPTrapHost1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSNMPTrapHost1.setStatus("mandatory")
_CpSNMPTrapHost2_Type = IpAddress
_CpSNMPTrapHost2_Object = MibScalar
cpSNMPTrapHost2 = _CpSNMPTrapHost2_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 11),
    _CpSNMPTrapHost2_Type()
)
cpSNMPTrapHost2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSNMPTrapHost2.setStatus("mandatory")
_CpSNMPTrapHost3_Type = IpAddress
_CpSNMPTrapHost3_Object = MibScalar
cpSNMPTrapHost3 = _CpSNMPTrapHost3_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 12),
    _CpSNMPTrapHost3_Type()
)
cpSNMPTrapHost3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSNMPTrapHost3.setStatus("mandatory")
_CpSNMPSendTrap_Type = Boolean
_CpSNMPSendTrap_Object = MibScalar
cpSNMPSendTrap = _CpSNMPSendTrap_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 13),
    _CpSNMPSendTrap_Type()
)
cpSNMPSendTrap.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSNMPSendTrap.setStatus("mandatory")
_CpGateway_Type = IpAddress
_CpGateway_Object = MibScalar
cpGateway = _CpGateway_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 14),
    _CpGateway_Type()
)
cpGateway.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpGateway.setStatus("mandatory")


class _CpMaxSessions_Type(Integer32):
    """Custom type cpMaxSessions based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6),
    )


_CpMaxSessions_Type.__name__ = "Integer32"
_CpMaxSessions_Object = MibScalar
cpMaxSessions = _CpMaxSessions_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 15),
    _CpMaxSessions_Type()
)
cpMaxSessions.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpMaxSessions.setStatus("mandatory")
_CpSessionTimeout_Type = Integer32
_CpSessionTimeout_Object = MibScalar
cpSessionTimeout = _CpSessionTimeout_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 16),
    _CpSessionTimeout_Type()
)
cpSessionTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSessionTimeout.setStatus("mandatory")
_CpDate_Type = DateAndTime
_CpDate_Object = MibScalar
cpDate = _CpDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 17),
    _CpDate_Type()
)
cpDate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpDate.setStatus("mandatory")
_CpTime_Type = DateAndTime
_CpTime_Object = MibScalar
cpTime = _CpTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 18),
    _CpTime_Type()
)
cpTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpTime.setStatus("mandatory")
_CpGetCommunity_Type = EncryptedCommunity
_CpGetCommunity_Object = MibScalar
cpGetCommunity = _CpGetCommunity_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 19),
    _CpGetCommunity_Type()
)
cpGetCommunity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpGetCommunity.setStatus("mandatory")
_CpSetCommunity_Type = EncryptedCommunity
_CpSetCommunity_Object = MibScalar
cpSetCommunity = _CpSetCommunity_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 20),
    _CpSetCommunity_Type()
)
cpSetCommunity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSetCommunity.setStatus("mandatory")


class _CpSystemName_Type(DisplayString):
    """Custom type cpSystemName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 59),
    )


_CpSystemName_Type.__name__ = "DisplayString"
_CpSystemName_Object = MibScalar
cpSystemName = _CpSystemName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 21),
    _CpSystemName_Type()
)
cpSystemName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSystemName.setStatus("mandatory")
_CpSNMPTrapCommunity1_Type = EncryptedCommunity
_CpSNMPTrapCommunity1_Object = MibScalar
cpSNMPTrapCommunity1 = _CpSNMPTrapCommunity1_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 22),
    _CpSNMPTrapCommunity1_Type()
)
cpSNMPTrapCommunity1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSNMPTrapCommunity1.setStatus("mandatory")
_CpSNMPTrapCommunity2_Type = EncryptedCommunity
_CpSNMPTrapCommunity2_Object = MibScalar
cpSNMPTrapCommunity2 = _CpSNMPTrapCommunity2_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 23),
    _CpSNMPTrapCommunity2_Type()
)
cpSNMPTrapCommunity2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSNMPTrapCommunity2.setStatus("mandatory")
_CpSNMPTrapCommunity3_Type = EncryptedCommunity
_CpSNMPTrapCommunity3_Object = MibScalar
cpSNMPTrapCommunity3 = _CpSNMPTrapCommunity3_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 24),
    _CpSNMPTrapCommunity3_Type()
)
cpSNMPTrapCommunity3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSNMPTrapCommunity3.setStatus("mandatory")


class _CpHttp_Type(Integer32):
    """Custom type cpHttp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_CpHttp_Type.__name__ = "Integer32"
_CpHttp_Object = MibScalar
cpHttp = _CpHttp_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 25),
    _CpHttp_Type()
)
cpHttp.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpHttp.setStatus("mandatory")
_CpIMNIpAddress_Type = IpAddress
_CpIMNIpAddress_Object = MibScalar
cpIMNIpAddress = _CpIMNIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 26),
    _CpIMNIpAddress_Type()
)
cpIMNIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpIMNIpAddress.setStatus("mandatory")


class _CpUpsrMode_Type(Integer32):
    """Custom type cpUpsrMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_CpUpsrMode_Type.__name__ = "Integer32"
_CpUpsrMode_Object = MibScalar
cpUpsrMode = _CpUpsrMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 27),
    _CpUpsrMode_Type()
)
cpUpsrMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpUpsrMode.setStatus("mandatory")


class _CpAutoModuleUpdate_Type(Integer32):
    """Custom type cpAutoModuleUpdate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_CpAutoModuleUpdate_Type.__name__ = "Integer32"
_CpAutoModuleUpdate_Object = MibScalar
cpAutoModuleUpdate = _CpAutoModuleUpdate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 28),
    _CpAutoModuleUpdate_Type()
)
cpAutoModuleUpdate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpAutoModuleUpdate.setStatus("mandatory")
_CpSNMPTrapHost4_Type = IpAddress
_CpSNMPTrapHost4_Object = MibScalar
cpSNMPTrapHost4 = _CpSNMPTrapHost4_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 29),
    _CpSNMPTrapHost4_Type()
)
cpSNMPTrapHost4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSNMPTrapHost4.setStatus("mandatory")
_CpSNMPTrapHost5_Type = IpAddress
_CpSNMPTrapHost5_Object = MibScalar
cpSNMPTrapHost5 = _CpSNMPTrapHost5_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 30),
    _CpSNMPTrapHost5_Type()
)
cpSNMPTrapHost5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSNMPTrapHost5.setStatus("mandatory")
_CpSNMPTrapCommunity4_Type = EncryptedCommunity
_CpSNMPTrapCommunity4_Object = MibScalar
cpSNMPTrapCommunity4 = _CpSNMPTrapCommunity4_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 31),
    _CpSNMPTrapCommunity4_Type()
)
cpSNMPTrapCommunity4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSNMPTrapCommunity4.setStatus("mandatory")
_CpSNMPTrapCommunity5_Type = EncryptedCommunity
_CpSNMPTrapCommunity5_Object = MibScalar
cpSNMPTrapCommunity5 = _CpSNMPTrapCommunity5_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 32),
    _CpSNMPTrapCommunity5_Type()
)
cpSNMPTrapCommunity5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSNMPTrapCommunity5.setStatus("mandatory")


class _CpSNMPTrapHostPort1_Type(Integer32):
    """Custom type cpSNMPTrapHostPort1 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65534),
    )


_CpSNMPTrapHostPort1_Type.__name__ = "Integer32"
_CpSNMPTrapHostPort1_Object = MibScalar
cpSNMPTrapHostPort1 = _CpSNMPTrapHostPort1_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 33),
    _CpSNMPTrapHostPort1_Type()
)
cpSNMPTrapHostPort1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSNMPTrapHostPort1.setStatus("mandatory")


class _CpSNMPTrapHostPort2_Type(Integer32):
    """Custom type cpSNMPTrapHostPort2 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65534),
    )


_CpSNMPTrapHostPort2_Type.__name__ = "Integer32"
_CpSNMPTrapHostPort2_Object = MibScalar
cpSNMPTrapHostPort2 = _CpSNMPTrapHostPort2_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 34),
    _CpSNMPTrapHostPort2_Type()
)
cpSNMPTrapHostPort2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSNMPTrapHostPort2.setStatus("mandatory")


class _CpSNMPTrapHostPort3_Type(Integer32):
    """Custom type cpSNMPTrapHostPort3 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65534),
    )


_CpSNMPTrapHostPort3_Type.__name__ = "Integer32"
_CpSNMPTrapHostPort3_Object = MibScalar
cpSNMPTrapHostPort3 = _CpSNMPTrapHostPort3_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 35),
    _CpSNMPTrapHostPort3_Type()
)
cpSNMPTrapHostPort3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSNMPTrapHostPort3.setStatus("mandatory")


class _CpSNMPTrapHostPort4_Type(Integer32):
    """Custom type cpSNMPTrapHostPort4 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65534),
    )


_CpSNMPTrapHostPort4_Type.__name__ = "Integer32"
_CpSNMPTrapHostPort4_Object = MibScalar
cpSNMPTrapHostPort4 = _CpSNMPTrapHostPort4_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 36),
    _CpSNMPTrapHostPort4_Type()
)
cpSNMPTrapHostPort4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSNMPTrapHostPort4.setStatus("mandatory")


class _CpSNMPTrapHostPort5_Type(Integer32):
    """Custom type cpSNMPTrapHostPort5 based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65534),
    )


_CpSNMPTrapHostPort5_Type.__name__ = "Integer32"
_CpSNMPTrapHostPort5_Object = MibScalar
cpSNMPTrapHostPort5 = _CpSNMPTrapHostPort5_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 37),
    _CpSNMPTrapHostPort5_Type()
)
cpSNMPTrapHostPort5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpSNMPTrapHostPort5.setStatus("mandatory")
_CpRedunSubDivTable_Object = MibTable
cpRedunSubDivTable = _CpRedunSubDivTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 38)
)
if mibBuilder.loadTexts:
    cpRedunSubDivTable.setStatus("mandatory")
_CpRedunSubDivEntry_Object = MibTableRow
cpRedunSubDivEntry = _CpRedunSubDivEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 38, 1)
)
cpRedunSubDivEntry.setIndexNames(
    (0, "LUXN-MIB", "cpRedunSubDivIndex"),
)
if mibBuilder.loadTexts:
    cpRedunSubDivEntry.setStatus("mandatory")


class _CpRedunSubDivIndex_Type(Integer32):
    """Custom type cpRedunSubDivIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_CpRedunSubDivIndex_Type.__name__ = "Integer32"
_CpRedunSubDivIndex_Object = MibTableColumn
cpRedunSubDivIndex = _CpRedunSubDivIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 38, 1, 1),
    _CpRedunSubDivIndex_Type()
)
cpRedunSubDivIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpRedunSubDivIndex.setStatus("mandatory")


class _CpRedunSubDivDescr_Type(DisplayString):
    """Custom type cpRedunSubDivDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_CpRedunSubDivDescr_Type.__name__ = "DisplayString"
_CpRedunSubDivDescr_Object = MibTableColumn
cpRedunSubDivDescr = _CpRedunSubDivDescr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 38, 1, 2),
    _CpRedunSubDivDescr_Type()
)
cpRedunSubDivDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpRedunSubDivDescr.setStatus("mandatory")
_CpRedunSubDivImgVersion_Type = DisplayString
_CpRedunSubDivImgVersion_Object = MibTableColumn
cpRedunSubDivImgVersion = _CpRedunSubDivImgVersion_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 38, 1, 3),
    _CpRedunSubDivImgVersion_Type()
)
cpRedunSubDivImgVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpRedunSubDivImgVersion.setStatus("mandatory")
_CpRedunSubDivImgDBVersion_Type = DisplayString
_CpRedunSubDivImgDBVersion_Object = MibTableColumn
cpRedunSubDivImgDBVersion = _CpRedunSubDivImgDBVersion_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 38, 1, 4),
    _CpRedunSubDivImgDBVersion_Type()
)
cpRedunSubDivImgDBVersion.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpRedunSubDivImgDBVersion.setStatus("mandatory")
_CpTimezone_Type = Timezone
_CpTimezone_Object = MibScalar
cpTimezone = _CpTimezone_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 39),
    _CpTimezone_Type()
)
cpTimezone.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpTimezone.setStatus("mandatory")


class _CpNtpState_Type(Integer32):
    """Custom type cpNtpState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_CpNtpState_Type.__name__ = "Integer32"
_CpNtpState_Object = MibScalar
cpNtpState = _CpNtpState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 40),
    _CpNtpState_Type()
)
cpNtpState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpNtpState.setStatus("mandatory")
_CpNtpTimeserver_Type = IpAddress
_CpNtpTimeserver_Object = MibScalar
cpNtpTimeserver = _CpNtpTimeserver_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 41),
    _CpNtpTimeserver_Type()
)
cpNtpTimeserver.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpNtpTimeserver.setStatus("mandatory")


class _CpNtpUpdateInterval_Type(Integer32):
    """Custom type cpNtpUpdateInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 1440),
    )


_CpNtpUpdateInterval_Type.__name__ = "Integer32"
_CpNtpUpdateInterval_Object = MibScalar
cpNtpUpdateInterval = _CpNtpUpdateInterval_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 42),
    _CpNtpUpdateInterval_Type()
)
cpNtpUpdateInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpNtpUpdateInterval.setStatus("mandatory")


class _CpTelnetClient_Type(Integer32):
    """Custom type cpTelnetClient based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_CpTelnetClient_Type.__name__ = "Integer32"
_CpTelnetClient_Object = MibScalar
cpTelnetClient = _CpTelnetClient_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 43),
    _CpTelnetClient_Type()
)
cpTelnetClient.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpTelnetClient.setStatus("mandatory")


class _CpLogMask_Type(Integer32):
    """Custom type cpLogMask based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9)
        )
    )
    namedValues = NamedValues(
        *(("alert", 3),
          ("crit", 4),
          ("debug", 9),
          ("disabled", 1),
          ("emerg", 2),
          ("err", 5),
          ("info", 8),
          ("notice", 7),
          ("warn", 6))
    )


_CpLogMask_Type.__name__ = "Integer32"
_CpLogMask_Object = MibScalar
cpLogMask = _CpLogMask_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 44),
    _CpLogMask_Type()
)
cpLogMask.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpLogMask.setStatus("mandatory")
_CpLogServer1_Type = IpAddress
_CpLogServer1_Object = MibScalar
cpLogServer1 = _CpLogServer1_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 45),
    _CpLogServer1_Type()
)
cpLogServer1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpLogServer1.setStatus("mandatory")
_CpLogServer2_Type = IpAddress
_CpLogServer2_Object = MibScalar
cpLogServer2 = _CpLogServer2_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 46),
    _CpLogServer2_Type()
)
cpLogServer2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpLogServer2.setStatus("mandatory")
_CpLogServer3_Type = IpAddress
_CpLogServer3_Object = MibScalar
cpLogServer3 = _CpLogServer3_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 47),
    _CpLogServer3_Type()
)
cpLogServer3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpLogServer3.setStatus("mandatory")
_CpLogServer4_Type = IpAddress
_CpLogServer4_Object = MibScalar
cpLogServer4 = _CpLogServer4_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 48),
    _CpLogServer4_Type()
)
cpLogServer4.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpLogServer4.setStatus("mandatory")
_CpLogServer5_Type = IpAddress
_CpLogServer5_Object = MibScalar
cpLogServer5 = _CpLogServer5_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 2, 49),
    _CpLogServer5_Type()
)
cpLogServer5.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpLogServer5.setStatus("mandatory")
_Cc_ObjectIdentity = ObjectIdentity
cc = _Cc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3)
)
_CcBootPromVer_Type = VersionString
_CcBootPromVer_Object = MibScalar
ccBootPromVer = _CcBootPromVer_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 1),
    _CcBootPromVer_Type()
)
ccBootPromVer.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccBootPromVer.setStatus("mandatory")


class _CcROMSize_Type(Integer32):
    """Custom type ccROMSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_CcROMSize_Type.__name__ = "Integer32"
_CcROMSize_Object = MibScalar
ccROMSize = _CcROMSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 2),
    _CcROMSize_Type()
)
ccROMSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccROMSize.setStatus("mandatory")


class _CcNumSubDiv_Type(Integer32):
    """Custom type ccNumSubDiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_CcNumSubDiv_Type.__name__ = "Integer32"
_CcNumSubDiv_Object = MibScalar
ccNumSubDiv = _CcNumSubDiv_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 3),
    _CcNumSubDiv_Type()
)
ccNumSubDiv.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccNumSubDiv.setStatus("mandatory")
_CcSubDivTable_Object = MibTable
ccSubDivTable = _CcSubDivTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 4)
)
if mibBuilder.loadTexts:
    ccSubDivTable.setStatus("mandatory")
_CcSubDivEntry_Object = MibTableRow
ccSubDivEntry = _CcSubDivEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 4, 1)
)
ccSubDivEntry.setIndexNames(
    (0, "LUXN-MIB", "ccSubDivIndex"),
)
if mibBuilder.loadTexts:
    ccSubDivEntry.setStatus("mandatory")


class _CcSubDivIndex_Type(Integer32):
    """Custom type ccSubDivIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_CcSubDivIndex_Type.__name__ = "Integer32"
_CcSubDivIndex_Object = MibTableColumn
ccSubDivIndex = _CcSubDivIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 4, 1, 1),
    _CcSubDivIndex_Type()
)
ccSubDivIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccSubDivIndex.setStatus("mandatory")


class _CcSubDivDescr_Type(DisplayString):
    """Custom type ccSubDivDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_CcSubDivDescr_Type.__name__ = "DisplayString"
_CcSubDivDescr_Object = MibTableColumn
ccSubDivDescr = _CcSubDivDescr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 4, 1, 2),
    _CcSubDivDescr_Type()
)
ccSubDivDescr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccSubDivDescr.setStatus("mandatory")


class _CcSubDivSize_Type(Integer32):
    """Custom type ccSubDivSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1024),
    )


_CcSubDivSize_Type.__name__ = "Integer32"
_CcSubDivSize_Object = MibTableColumn
ccSubDivSize = _CcSubDivSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 4, 1, 3),
    _CcSubDivSize_Type()
)
ccSubDivSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccSubDivSize.setStatus("mandatory")


class _CcSubDivOffset_Type(OctetString):
    """Custom type ccSubDivOffset based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_CcSubDivOffset_Type.__name__ = "OctetString"
_CcSubDivOffset_Object = MibTableColumn
ccSubDivOffset = _CcSubDivOffset_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 4, 1, 4),
    _CcSubDivOffset_Type()
)
ccSubDivOffset.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccSubDivOffset.setStatus("mandatory")
_CcNumber_Type = Integer32
_CcNumber_Object = MibScalar
ccNumber = _CcNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 5),
    _CcNumber_Type()
)
ccNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccNumber.setStatus("mandatory")
_CcTable_Object = MibTable
ccTable = _CcTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6)
)
if mibBuilder.loadTexts:
    ccTable.setStatus("mandatory")
_CcEntry_Object = MibTableRow
ccEntry = _CcEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1)
)
ccEntry.setIndexNames(
    (0, "LUXN-MIB", "ccCardLocation"),
    (0, "LUXN-MIB", "ccCardShelf"),
    (0, "LUXN-MIB", "ccCardSlot"),
)
if mibBuilder.loadTexts:
    ccEntry.setStatus("mandatory")
_CcCardLocation_Type = CardLocation
_CcCardLocation_Object = MibTableColumn
ccCardLocation = _CcCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 1),
    _CcCardLocation_Type()
)
ccCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccCardLocation.setStatus("mandatory")
_CcCardShelf_Type = CardShelf
_CcCardShelf_Object = MibTableColumn
ccCardShelf = _CcCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 2),
    _CcCardShelf_Type()
)
ccCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccCardShelf.setStatus("mandatory")
_CcCardSlot_Type = SlotInput
_CcCardSlot_Object = MibTableColumn
ccCardSlot = _CcCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 3),
    _CcCardSlot_Type()
)
ccCardSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ccCardSlot.setStatus("mandatory")
_CcMfgDate_Type = DateAndTime
_CcMfgDate_Object = MibTableColumn
ccMfgDate = _CcMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 4),
    _CcMfgDate_Type()
)
ccMfgDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccMfgDate.setStatus("mandatory")
_CcSerialNum_Type = SerialString
_CcSerialNum_Object = MibTableColumn
ccSerialNum = _CcSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 5),
    _CcSerialNum_Type()
)
ccSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccSerialNum.setStatus("mandatory")
_CcModelType_Type = CardType
_CcModelType_Object = MibTableColumn
ccModelType = _CcModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 6),
    _CcModelType_Type()
)
ccModelType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccModelType.setStatus("mandatory")
_CcName_Type = CardName
_CcName_Object = MibTableColumn
ccName = _CcName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 7),
    _CcName_Type()
)
ccName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ccName.setStatus("mandatory")
_CcFWVersionID_Type = VersionString
_CcFWVersionID_Object = MibTableColumn
ccFWVersionID = _CcFWVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 8),
    _CcFWVersionID_Type()
)
ccFWVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccFWVersionID.setStatus("mandatory")
_CcMfgBiasCurrent_Type = Integer32
_CcMfgBiasCurrent_Object = MibTableColumn
ccMfgBiasCurrent = _CcMfgBiasCurrent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 9),
    _CcMfgBiasCurrent_Type()
)
ccMfgBiasCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccMfgBiasCurrent.setStatus("mandatory")
_CcMfgModulation_Type = Integer32
_CcMfgModulation_Object = MibTableColumn
ccMfgModulation = _CcMfgModulation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 10),
    _CcMfgModulation_Type()
)
ccMfgModulation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccMfgModulation.setStatus("mandatory")
_CcMfgApc_Type = Integer32
_CcMfgApc_Object = MibTableColumn
ccMfgApc = _CcMfgApc_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 11),
    _CcMfgApc_Type()
)
ccMfgApc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccMfgApc.setStatus("mandatory")
_CcMfgIwmModulation_Type = Integer32
_CcMfgIwmModulation_Object = MibTableColumn
ccMfgIwmModulation = _CcMfgIwmModulation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 12),
    _CcMfgIwmModulation_Type()
)
ccMfgIwmModulation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccMfgIwmModulation.setStatus("mandatory")


class _CcMfgRefClock_Type(Integer32):
    """Custom type ccMfgRefClock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("en1660", 1),
          ("en1944", 2),
          ("en1953", 3))
    )


_CcMfgRefClock_Type.__name__ = "Integer32"
_CcMfgRefClock_Object = MibTableColumn
ccMfgRefClock = _CcMfgRefClock_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 13),
    _CcMfgRefClock_Type()
)
ccMfgRefClock.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccMfgRefClock.setStatus("mandatory")


class _CcMfgClockDiv_Type(Integer32):
    """Custom type ccMfgClockDiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dout-1250", 1),
          ("dout-155", 3),
          ("dout-622", 2))
    )


_CcMfgClockDiv_Type.__name__ = "Integer32"
_CcMfgClockDiv_Object = MibTableColumn
ccMfgClockDiv = _CcMfgClockDiv_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 14),
    _CcMfgClockDiv_Type()
)
ccMfgClockDiv.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccMfgClockDiv.setStatus("mandatory")


class _CcBandwidth_Type(Integer32):
    """Custom type ccBandwidth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              9,
              10)
        )
    )
    namedValues = NamedValues(
        *(("fibreChannel", 5),
          ("fibreChannelX2", 10),
          ("gbE10", 9),
          ("gbEthernet", 4),
          ("oc12", 2),
          ("oc192", 6),
          ("oc3", 1),
          ("oc48", 3))
    )


_CcBandwidth_Type.__name__ = "Integer32"
_CcBandwidth_Object = MibTableColumn
ccBandwidth = _CcBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 15),
    _CcBandwidth_Type()
)
ccBandwidth.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ccBandwidth.setStatus("mandatory")


class _CcSetState_Type(Integer32):
    """Custom type ccSetState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("disableLoopback", 4),
          ("enableLoopback", 3),
          ("other", 1),
          ("warmboot", 2))
    )


_CcSetState_Type.__name__ = "Integer32"
_CcSetState_Object = MibTableColumn
ccSetState = _CcSetState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 16),
    _CcSetState_Type()
)
ccSetState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ccSetState.setStatus("mandatory")
_ConnMuxChassis_Type = Integer32
_ConnMuxChassis_Object = MibTableColumn
connMuxChassis = _ConnMuxChassis_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 17),
    _ConnMuxChassis_Type()
)
connMuxChassis.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    connMuxChassis.setStatus("mandatory")
_ConnMuxShelf_Type = ShelfInput
_ConnMuxShelf_Object = MibTableColumn
connMuxShelf = _ConnMuxShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 18),
    _ConnMuxShelf_Type()
)
connMuxShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connMuxShelf.setStatus("mandatory")
_ConnMuxSlot_Type = SlotInput
_ConnMuxSlot_Object = MibTableColumn
connMuxSlot = _ConnMuxSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 19),
    _ConnMuxSlot_Type()
)
connMuxSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connMuxSlot.setStatus("mandatory")
_ConnMuxPort_Type = Integer32
_ConnMuxPort_Object = MibTableColumn
connMuxPort = _ConnMuxPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 20),
    _ConnMuxPort_Type()
)
connMuxPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connMuxPort.setStatus("mandatory")
_ConnDemuxChassis_Type = Integer32
_ConnDemuxChassis_Object = MibTableColumn
connDemuxChassis = _ConnDemuxChassis_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 21),
    _ConnDemuxChassis_Type()
)
connDemuxChassis.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    connDemuxChassis.setStatus("mandatory")
_ConnDemuxShelf_Type = ShelfInput
_ConnDemuxShelf_Object = MibTableColumn
connDemuxShelf = _ConnDemuxShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 22),
    _ConnDemuxShelf_Type()
)
connDemuxShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connDemuxShelf.setStatus("mandatory")
_ConnDemuxSlot_Type = SlotInput
_ConnDemuxSlot_Object = MibTableColumn
connDemuxSlot = _ConnDemuxSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 23),
    _ConnDemuxSlot_Type()
)
connDemuxSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connDemuxSlot.setStatus("mandatory")
_ConnDemuxPort_Type = Integer32
_ConnDemuxPort_Object = MibTableColumn
connDemuxPort = _ConnDemuxPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 24),
    _ConnDemuxPort_Type()
)
connDemuxPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connDemuxPort.setStatus("mandatory")
_CcModelNum_Type = DisplayString
_CcModelNum_Object = MibTableColumn
ccModelNum = _CcModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 25),
    _CcModelNum_Type()
)
ccModelNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccModelNum.setStatus("mandatory")
_CcLinkITUNum_Type = DisplayString
_CcLinkITUNum_Object = MibTableColumn
ccLinkITUNum = _CcLinkITUNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 26),
    _CcLinkITUNum_Type()
)
ccLinkITUNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccLinkITUNum.setStatus("mandatory")


class _CcLinkWavelength_Type(DisplayString):
    """Custom type ccLinkWavelength based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_CcLinkWavelength_Type.__name__ = "DisplayString"
_CcLinkWavelength_Object = MibTableColumn
ccLinkWavelength = _CcLinkWavelength_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 27),
    _CcLinkWavelength_Type()
)
ccLinkWavelength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccLinkWavelength.setStatus("mandatory")


class _CcLaserType_Type(Integer32):
    """Custom type ccLaserType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("cooled", 2),
          ("uncooled", 1))
    )


_CcLaserType_Type.__name__ = "Integer32"
_CcLaserType_Object = MibTableColumn
ccLaserType = _CcLaserType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 28),
    _CcLaserType_Type()
)
ccLaserType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccLaserType.setStatus("mandatory")


class _CcRecvDiode_Type(Integer32):
    """Custom type ccRecvDiode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("apd", 1),
          ("pin", 2))
    )


_CcRecvDiode_Type.__name__ = "Integer32"
_CcRecvDiode_Object = MibTableColumn
ccRecvDiode = _CcRecvDiode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 29),
    _CcRecvDiode_Type()
)
ccRecvDiode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccRecvDiode.setStatus("mandatory")


class _CcLinkAutoDisable_Type(Integer32):
    """Custom type ccLinkAutoDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1),
          ("enableCpeRxPassThru", 3))
    )


_CcLinkAutoDisable_Type.__name__ = "Integer32"
_CcLinkAutoDisable_Object = MibTableColumn
ccLinkAutoDisable = _CcLinkAutoDisable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 30),
    _CcLinkAutoDisable_Type()
)
ccLinkAutoDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ccLinkAutoDisable.setStatus("mandatory")
_CcLinkName_Type = LinkName
_CcLinkName_Object = MibTableColumn
ccLinkName = _CcLinkName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 31),
    _CcLinkName_Type()
)
ccLinkName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ccLinkName.setStatus("mandatory")


class _CcCsimModule_Type(Integer32):
    """Custom type ccCsimModule based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("installed", 1),
          ("notinstalled", 2),
          ("preconfigured", 3))
    )


_CcCsimModule_Type.__name__ = "Integer32"
_CcCsimModule_Object = MibTableColumn
ccCsimModule = _CcCsimModule_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 32),
    _CcCsimModule_Type()
)
ccCsimModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccCsimModule.setStatus("mandatory")
_CcHWName_Type = CardName
_CcHWName_Object = MibTableColumn
ccHWName = _CcHWName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 33),
    _CcHWName_Type()
)
ccHWName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHWName.setStatus("mandatory")


class _CcBackpackModule_Type(Integer32):
    """Custom type ccBackpackModule based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("installed", 1),
          ("notInstalled", 2))
    )


_CcBackpackModule_Type.__name__ = "Integer32"
_CcBackpackModule_Object = MibTableColumn
ccBackpackModule = _CcBackpackModule_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 34),
    _CcBackpackModule_Type()
)
ccBackpackModule.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccBackpackModule.setStatus("mandatory")
_CcBackpackRxITUNumber_Type = DisplayString
_CcBackpackRxITUNumber_Object = MibTableColumn
ccBackpackRxITUNumber = _CcBackpackRxITUNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 35),
    _CcBackpackRxITUNumber_Type()
)
ccBackpackRxITUNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccBackpackRxITUNumber.setStatus("mandatory")
_CcBackpackTxITUNumber_Type = DisplayString
_CcBackpackTxITUNumber_Object = MibTableColumn
ccBackpackTxITUNumber = _CcBackpackTxITUNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 36),
    _CcBackpackTxITUNumber_Type()
)
ccBackpackTxITUNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccBackpackTxITUNumber.setStatus("mandatory")
_CcBackpackRxInsertionLoss_Type = DisplayString
_CcBackpackRxInsertionLoss_Object = MibTableColumn
ccBackpackRxInsertionLoss = _CcBackpackRxInsertionLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 37),
    _CcBackpackRxInsertionLoss_Type()
)
ccBackpackRxInsertionLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccBackpackRxInsertionLoss.setStatus("mandatory")
_CcBackpackTxInsertionLoss_Type = DisplayString
_CcBackpackTxInsertionLoss_Object = MibTableColumn
ccBackpackTxInsertionLoss = _CcBackpackTxInsertionLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 38),
    _CcBackpackTxInsertionLoss_Type()
)
ccBackpackTxInsertionLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccBackpackTxInsertionLoss.setStatus("mandatory")
_CcBackpackRxExpressLoss_Type = DisplayString
_CcBackpackRxExpressLoss_Object = MibTableColumn
ccBackpackRxExpressLoss = _CcBackpackRxExpressLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 39),
    _CcBackpackRxExpressLoss_Type()
)
ccBackpackRxExpressLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccBackpackRxExpressLoss.setStatus("mandatory")
_CcBackpackTxExpressLoss_Type = DisplayString
_CcBackpackTxExpressLoss_Object = MibTableColumn
ccBackpackTxExpressLoss = _CcBackpackTxExpressLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 40),
    _CcBackpackTxExpressLoss_Type()
)
ccBackpackTxExpressLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccBackpackTxExpressLoss.setStatus("mandatory")


class _CcSwitchByShelfSlot_Type(DisplayString):
    """Custom type ccSwitchByShelfSlot based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_CcSwitchByShelfSlot_Type.__name__ = "DisplayString"
_CcSwitchByShelfSlot_Object = MibTableColumn
ccSwitchByShelfSlot = _CcSwitchByShelfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 41),
    _CcSwitchByShelfSlot_Type()
)
ccSwitchByShelfSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ccSwitchByShelfSlot.setStatus("mandatory")
_CcPathID_Type = PathIdName
_CcPathID_Object = MibTableColumn
ccPathID = _CcPathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 42),
    _CcPathID_Type()
)
ccPathID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ccPathID.setStatus("mandatory")
_CcCpeDisableThreshold_Type = Integer32
_CcCpeDisableThreshold_Object = MibTableColumn
ccCpeDisableThreshold = _CcCpeDisableThreshold_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 43),
    _CcCpeDisableThreshold_Type()
)
ccCpeDisableThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ccCpeDisableThreshold.setStatus("mandatory")
_CcCpeReEnableThreshold_Type = Integer32
_CcCpeReEnableThreshold_Object = MibTableColumn
ccCpeReEnableThreshold = _CcCpeReEnableThreshold_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 44),
    _CcCpeReEnableThreshold_Type()
)
ccCpeReEnableThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ccCpeReEnableThreshold.setStatus("mandatory")
_ConnTxNonMuxDmuxCardType_Type = CardType
_ConnTxNonMuxDmuxCardType_Object = MibTableColumn
connTxNonMuxDmuxCardType = _ConnTxNonMuxDmuxCardType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 45),
    _ConnTxNonMuxDmuxCardType_Type()
)
connTxNonMuxDmuxCardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connTxNonMuxDmuxCardType.setStatus("mandatory")
_ConnTxNonMuxDmuxPort_Type = Integer32
_ConnTxNonMuxDmuxPort_Object = MibTableColumn
connTxNonMuxDmuxPort = _ConnTxNonMuxDmuxPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 46),
    _ConnTxNonMuxDmuxPort_Type()
)
connTxNonMuxDmuxPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connTxNonMuxDmuxPort.setStatus("mandatory")
_ConnTxNonMuxDmuxShelf_Type = ShelfInput
_ConnTxNonMuxDmuxShelf_Object = MibTableColumn
connTxNonMuxDmuxShelf = _ConnTxNonMuxDmuxShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 47),
    _ConnTxNonMuxDmuxShelf_Type()
)
connTxNonMuxDmuxShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connTxNonMuxDmuxShelf.setStatus("mandatory")
_ConnTxNonMuxDmuxSlot_Type = SlotInput
_ConnTxNonMuxDmuxSlot_Object = MibTableColumn
connTxNonMuxDmuxSlot = _ConnTxNonMuxDmuxSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 48),
    _ConnTxNonMuxDmuxSlot_Type()
)
connTxNonMuxDmuxSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connTxNonMuxDmuxSlot.setStatus("mandatory")
_ConnRxNonMuxDmuxCardType_Type = CardType
_ConnRxNonMuxDmuxCardType_Object = MibTableColumn
connRxNonMuxDmuxCardType = _ConnRxNonMuxDmuxCardType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 49),
    _ConnRxNonMuxDmuxCardType_Type()
)
connRxNonMuxDmuxCardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connRxNonMuxDmuxCardType.setStatus("mandatory")
_ConnRxNonMuxDmuxPort_Type = Integer32
_ConnRxNonMuxDmuxPort_Object = MibTableColumn
connRxNonMuxDmuxPort = _ConnRxNonMuxDmuxPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 50),
    _ConnRxNonMuxDmuxPort_Type()
)
connRxNonMuxDmuxPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connRxNonMuxDmuxPort.setStatus("mandatory")
_ConnRxNonMuxDmuxShelf_Type = ShelfInput
_ConnRxNonMuxDmuxShelf_Object = MibTableColumn
connRxNonMuxDmuxShelf = _ConnRxNonMuxDmuxShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 51),
    _ConnRxNonMuxDmuxShelf_Type()
)
connRxNonMuxDmuxShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connRxNonMuxDmuxShelf.setStatus("mandatory")
_ConnRxNonMuxDmuxSlot_Type = SlotInput
_ConnRxNonMuxDmuxSlot_Object = MibTableColumn
connRxNonMuxDmuxSlot = _ConnRxNonMuxDmuxSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 52),
    _ConnRxNonMuxDmuxSlot_Type()
)
connRxNonMuxDmuxSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connRxNonMuxDmuxSlot.setStatus("mandatory")


class _CcUpsrMode_Type(Integer32):
    """Custom type ccUpsrMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("backup", 2),
          ("na", 3),
          ("primary", 1))
    )


_CcUpsrMode_Type.__name__ = "Integer32"
_CcUpsrMode_Object = MibTableColumn
ccUpsrMode = _CcUpsrMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 53),
    _CcUpsrMode_Type()
)
ccUpsrMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ccUpsrMode.setStatus("mandatory")
_CcPairShelf_Type = Integer32
_CcPairShelf_Object = MibTableColumn
ccPairShelf = _CcPairShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 54),
    _CcPairShelf_Type()
)
ccPairShelf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ccPairShelf.setStatus("mandatory")
_CcPairSlot_Type = Integer32
_CcPairSlot_Object = MibTableColumn
ccPairSlot = _CcPairSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 55),
    _CcPairSlot_Type()
)
ccPairSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ccPairSlot.setStatus("mandatory")


class _CcAdminState_Type(Integer32):
    """Custom type ccAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("na", 3))
    )


_CcAdminState_Type.__name__ = "Integer32"
_CcAdminState_Object = MibTableColumn
ccAdminState = _CcAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 56),
    _CcAdminState_Type()
)
ccAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ccAdminState.setStatus("mandatory")
_CcRegenPairShelf_Type = Integer32
_CcRegenPairShelf_Object = MibTableColumn
ccRegenPairShelf = _CcRegenPairShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 57),
    _CcRegenPairShelf_Type()
)
ccRegenPairShelf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ccRegenPairShelf.setStatus("mandatory")
_CcRegenPairSlot_Type = Integer32
_CcRegenPairSlot_Object = MibTableColumn
ccRegenPairSlot = _CcRegenPairSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 58),
    _CcRegenPairSlot_Type()
)
ccRegenPairSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ccRegenPairSlot.setStatus("mandatory")
_CcCleiNum_Type = DisplayString
_CcCleiNum_Object = MibTableColumn
ccCleiNum = _CcCleiNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 59),
    _CcCleiNum_Type()
)
ccCleiNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccCleiNum.setStatus("mandatory")
_ConnCpeTxMcmescShelf_Type = ShelfInput
_ConnCpeTxMcmescShelf_Object = MibTableColumn
connCpeTxMcmescShelf = _ConnCpeTxMcmescShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 60),
    _ConnCpeTxMcmescShelf_Type()
)
connCpeTxMcmescShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connCpeTxMcmescShelf.setStatus("mandatory")
_ConnCpeTxMcmescSlot_Type = SlotInput
_ConnCpeTxMcmescSlot_Object = MibTableColumn
connCpeTxMcmescSlot = _ConnCpeTxMcmescSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 61),
    _ConnCpeTxMcmescSlot_Type()
)
connCpeTxMcmescSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connCpeTxMcmescSlot.setStatus("mandatory")


class _ConnCpeTxMcmescPort_Type(Integer32):
    """Custom type connCpeTxMcmescPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("linkrx", 2),
          ("linktx", 1))
    )


_ConnCpeTxMcmescPort_Type.__name__ = "Integer32"
_ConnCpeTxMcmescPort_Object = MibTableColumn
connCpeTxMcmescPort = _ConnCpeTxMcmescPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 62),
    _ConnCpeTxMcmescPort_Type()
)
connCpeTxMcmescPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connCpeTxMcmescPort.setStatus("mandatory")
_ConnCpeRxMcmescShelf_Type = ShelfInput
_ConnCpeRxMcmescShelf_Object = MibTableColumn
connCpeRxMcmescShelf = _ConnCpeRxMcmescShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 63),
    _ConnCpeRxMcmescShelf_Type()
)
connCpeRxMcmescShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connCpeRxMcmescShelf.setStatus("mandatory")
_ConnCpeRxMcmescSlot_Type = SlotInput
_ConnCpeRxMcmescSlot_Object = MibTableColumn
connCpeRxMcmescSlot = _ConnCpeRxMcmescSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 64),
    _ConnCpeRxMcmescSlot_Type()
)
connCpeRxMcmescSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connCpeRxMcmescSlot.setStatus("mandatory")


class _ConnCpeRxMcmescPort_Type(Integer32):
    """Custom type connCpeRxMcmescPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("linkrx", 2),
          ("linktx", 1))
    )


_ConnCpeRxMcmescPort_Type.__name__ = "Integer32"
_ConnCpeRxMcmescPort_Object = MibTableColumn
connCpeRxMcmescPort = _ConnCpeRxMcmescPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 65),
    _ConnCpeRxMcmescPort_Type()
)
connCpeRxMcmescPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    connCpeRxMcmescPort.setStatus("mandatory")
_CcNumPorts_Type = Integer32
_CcNumPorts_Object = MibTableColumn
ccNumPorts = _CcNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 66),
    _CcNumPorts_Type()
)
ccNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccNumPorts.setStatus("mandatory")
_Mux_ObjectIdentity = ObjectIdentity
mux = _Mux_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4)
)
_MuxBootPromVer_Type = VersionString
_MuxBootPromVer_Object = MibScalar
muxBootPromVer = _MuxBootPromVer_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 1),
    _MuxBootPromVer_Type()
)
muxBootPromVer.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    muxBootPromVer.setStatus("mandatory")


class _MuxROMSize_Type(Integer32):
    """Custom type muxROMSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_MuxROMSize_Type.__name__ = "Integer32"
_MuxROMSize_Object = MibScalar
muxROMSize = _MuxROMSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 2),
    _MuxROMSize_Type()
)
muxROMSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    muxROMSize.setStatus("mandatory")


class _MuxNumSubDiv_Type(Integer32):
    """Custom type muxNumSubDiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_MuxNumSubDiv_Type.__name__ = "Integer32"
_MuxNumSubDiv_Object = MibScalar
muxNumSubDiv = _MuxNumSubDiv_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 3),
    _MuxNumSubDiv_Type()
)
muxNumSubDiv.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    muxNumSubDiv.setStatus("mandatory")
_MuxSubDivTable_Object = MibTable
muxSubDivTable = _MuxSubDivTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 4)
)
if mibBuilder.loadTexts:
    muxSubDivTable.setStatus("mandatory")
_MuxSubDivEntry_Object = MibTableRow
muxSubDivEntry = _MuxSubDivEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 4, 1)
)
muxSubDivEntry.setIndexNames(
    (0, "LUXN-MIB", "muxSubDivIndex"),
)
if mibBuilder.loadTexts:
    muxSubDivEntry.setStatus("mandatory")


class _MuxSubDivIndex_Type(Integer32):
    """Custom type muxSubDivIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_MuxSubDivIndex_Type.__name__ = "Integer32"
_MuxSubDivIndex_Object = MibTableColumn
muxSubDivIndex = _MuxSubDivIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 4, 1, 1),
    _MuxSubDivIndex_Type()
)
muxSubDivIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    muxSubDivIndex.setStatus("mandatory")


class _MuxSubDivDescr_Type(DisplayString):
    """Custom type muxSubDivDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_MuxSubDivDescr_Type.__name__ = "DisplayString"
_MuxSubDivDescr_Object = MibTableColumn
muxSubDivDescr = _MuxSubDivDescr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 4, 1, 2),
    _MuxSubDivDescr_Type()
)
muxSubDivDescr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    muxSubDivDescr.setStatus("mandatory")


class _MuxSubDivSize_Type(Integer32):
    """Custom type muxSubDivSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_MuxSubDivSize_Type.__name__ = "Integer32"
_MuxSubDivSize_Object = MibTableColumn
muxSubDivSize = _MuxSubDivSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 4, 1, 3),
    _MuxSubDivSize_Type()
)
muxSubDivSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    muxSubDivSize.setStatus("mandatory")


class _MuxSubDivOffset_Type(OctetString):
    """Custom type muxSubDivOffset based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_MuxSubDivOffset_Type.__name__ = "OctetString"
_MuxSubDivOffset_Object = MibTableColumn
muxSubDivOffset = _MuxSubDivOffset_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 4, 1, 4),
    _MuxSubDivOffset_Type()
)
muxSubDivOffset.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    muxSubDivOffset.setStatus("mandatory")
_MuxNumber_Type = Integer32
_MuxNumber_Object = MibScalar
muxNumber = _MuxNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 5),
    _MuxNumber_Type()
)
muxNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxNumber.setStatus("mandatory")
_MuxTable_Object = MibTable
muxTable = _MuxTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6)
)
if mibBuilder.loadTexts:
    muxTable.setStatus("mandatory")
_MuxEntry_Object = MibTableRow
muxEntry = _MuxEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1)
)
muxEntry.setIndexNames(
    (0, "LUXN-MIB", "muxCardLocation"),
    (0, "LUXN-MIB", "muxCardShelf"),
    (0, "LUXN-MIB", "muxCardSlot"),
)
if mibBuilder.loadTexts:
    muxEntry.setStatus("mandatory")
_MuxCardLocation_Type = CardLocation
_MuxCardLocation_Object = MibTableColumn
muxCardLocation = _MuxCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 1),
    _MuxCardLocation_Type()
)
muxCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxCardLocation.setStatus("mandatory")
_MuxCardShelf_Type = CardShelf
_MuxCardShelf_Object = MibTableColumn
muxCardShelf = _MuxCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 2),
    _MuxCardShelf_Type()
)
muxCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxCardShelf.setStatus("mandatory")
_MuxCardSlot_Type = SlotInput
_MuxCardSlot_Object = MibTableColumn
muxCardSlot = _MuxCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 3),
    _MuxCardSlot_Type()
)
muxCardSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    muxCardSlot.setStatus("mandatory")
_MuxModelNum_Type = DisplayString
_MuxModelNum_Object = MibTableColumn
muxModelNum = _MuxModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 4),
    _MuxModelNum_Type()
)
muxModelNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxModelNum.setStatus("mandatory")
_MuxMfgDate_Type = DateAndTime
_MuxMfgDate_Object = MibTableColumn
muxMfgDate = _MuxMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 5),
    _MuxMfgDate_Type()
)
muxMfgDate.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    muxMfgDate.setStatus("mandatory")
_MuxSerialNum_Type = SerialString
_MuxSerialNum_Object = MibTableColumn
muxSerialNum = _MuxSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 6),
    _MuxSerialNum_Type()
)
muxSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxSerialNum.setStatus("mandatory")
_MuxModelType_Type = CardType
_MuxModelType_Object = MibTableColumn
muxModelType = _MuxModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 7),
    _MuxModelType_Type()
)
muxModelType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxModelType.setStatus("mandatory")
_MuxName_Type = CardName
_MuxName_Object = MibTableColumn
muxName = _MuxName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 8),
    _MuxName_Type()
)
muxName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    muxName.setStatus("mandatory")
_MuxFWVersionID_Type = VersionString
_MuxFWVersionID_Object = MibTableColumn
muxFWVersionID = _MuxFWVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 9),
    _MuxFWVersionID_Type()
)
muxFWVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxFWVersionID.setStatus("mandatory")
_MuxSetState_Type = RebootType
_MuxSetState_Object = MibTableColumn
muxSetState = _MuxSetState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 10),
    _MuxSetState_Type()
)
muxSetState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    muxSetState.setStatus("mandatory")
_MuxNumPorts_Type = Integer32
_MuxNumPorts_Object = MibTableColumn
muxNumPorts = _MuxNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 11),
    _MuxNumPorts_Type()
)
muxNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxNumPorts.setStatus("mandatory")


class _MuxUpgradeFlag_Type(Integer32):
    """Custom type muxUpgradeFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notUpgradable", 2),
          ("upgradable", 1))
    )


_MuxUpgradeFlag_Type.__name__ = "Integer32"
_MuxUpgradeFlag_Object = MibTableColumn
muxUpgradeFlag = _MuxUpgradeFlag_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 12),
    _MuxUpgradeFlag_Type()
)
muxUpgradeFlag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxUpgradeFlag.setStatus("mandatory")
_MuxHWName_Type = CardName
_MuxHWName_Object = MibTableColumn
muxHWName = _MuxHWName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 13),
    _MuxHWName_Type()
)
muxHWName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxHWName.setStatus("mandatory")
_MuxPathID_Type = PathIdName
_MuxPathID_Object = MibTableColumn
muxPathID = _MuxPathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 14),
    _MuxPathID_Type()
)
muxPathID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    muxPathID.setStatus("mandatory")


class _MuxAdminState_Type(Integer32):
    """Custom type muxAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("na", 3))
    )


_MuxAdminState_Type.__name__ = "Integer32"
_MuxAdminState_Object = MibTableColumn
muxAdminState = _MuxAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 15),
    _MuxAdminState_Type()
)
muxAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    muxAdminState.setStatus("mandatory")
_MuxCleiNum_Type = DisplayString
_MuxCleiNum_Object = MibTableColumn
muxCleiNum = _MuxCleiNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 16),
    _MuxCleiNum_Type()
)
muxCleiNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxCleiNum.setStatus("mandatory")
_MuxChannelSpacing_Type = Integer32
_MuxChannelSpacing_Object = MibTableColumn
muxChannelSpacing = _MuxChannelSpacing_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 17),
    _MuxChannelSpacing_Type()
)
muxChannelSpacing.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxChannelSpacing.setStatus("mandatory")
_MuxStartItu_Type = Integer32
_MuxStartItu_Object = MibTableColumn
muxStartItu = _MuxStartItu_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 18),
    _MuxStartItu_Type()
)
muxStartItu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxStartItu.setStatus("mandatory")
_MuxEndItu_Type = Integer32
_MuxEndItu_Object = MibTableColumn
muxEndItu = _MuxEndItu_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 19),
    _MuxEndItu_Type()
)
muxEndItu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxEndItu.setStatus("mandatory")
_MuxChannelsPerBand_Type = Integer32
_MuxChannelsPerBand_Object = MibTableColumn
muxChannelsPerBand = _MuxChannelsPerBand_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 20),
    _MuxChannelsPerBand_Type()
)
muxChannelsPerBand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxChannelsPerBand.setStatus("mandatory")
_MuxBands_Type = Integer32
_MuxBands_Object = MibTableColumn
muxBands = _MuxBands_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 21),
    _MuxBands_Type()
)
muxBands.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxBands.setStatus("mandatory")
_MuxPortNumber_Type = Integer32
_MuxPortNumber_Object = MibScalar
muxPortNumber = _MuxPortNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 7),
    _MuxPortNumber_Type()
)
muxPortNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxPortNumber.setStatus("mandatory")
_MuxPortTable_Object = MibTable
muxPortTable = _MuxPortTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 8)
)
if mibBuilder.loadTexts:
    muxPortTable.setStatus("mandatory")
_MuxPortEntry_Object = MibTableRow
muxPortEntry = _MuxPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1)
)
muxPortEntry.setIndexNames(
    (0, "LUXN-MIB", "muxPortCardLocation"),
    (0, "LUXN-MIB", "muxPortCardShelf"),
    (0, "LUXN-MIB", "muxPortCardSlot"),
    (0, "LUXN-MIB", "muxPortIndex"),
)
if mibBuilder.loadTexts:
    muxPortEntry.setStatus("mandatory")
_MuxPortCardLocation_Type = CardLocation
_MuxPortCardLocation_Object = MibTableColumn
muxPortCardLocation = _MuxPortCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 1),
    _MuxPortCardLocation_Type()
)
muxPortCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxPortCardLocation.setStatus("mandatory")
_MuxPortCardShelf_Type = CardShelf
_MuxPortCardShelf_Object = MibTableColumn
muxPortCardShelf = _MuxPortCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 2),
    _MuxPortCardShelf_Type()
)
muxPortCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxPortCardShelf.setStatus("mandatory")
_MuxPortCardSlot_Type = SlotInput
_MuxPortCardSlot_Object = MibTableColumn
muxPortCardSlot = _MuxPortCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 3),
    _MuxPortCardSlot_Type()
)
muxPortCardSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxPortCardSlot.setStatus("mandatory")
_MuxPortIndex_Type = Integer32
_MuxPortIndex_Object = MibTableColumn
muxPortIndex = _MuxPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 4),
    _MuxPortIndex_Type()
)
muxPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxPortIndex.setStatus("mandatory")
_MuxWavelength_Type = Integer32
_MuxWavelength_Object = MibTableColumn
muxWavelength = _MuxWavelength_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 5),
    _MuxWavelength_Type()
)
muxWavelength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxWavelength.setStatus("mandatory")
_MuxInsertLoss_Type = DisplayString
_MuxInsertLoss_Object = MibTableColumn
muxInsertLoss = _MuxInsertLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 6),
    _MuxInsertLoss_Type()
)
muxInsertLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxInsertLoss.setStatus("mandatory")
_MuxConnCardType_Type = CardType
_MuxConnCardType_Object = MibTableColumn
muxConnCardType = _MuxConnCardType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 7),
    _MuxConnCardType_Type()
)
muxConnCardType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    muxConnCardType.setStatus("mandatory")
_MuxConnLocation_Type = CardLocation
_MuxConnLocation_Object = MibTableColumn
muxConnLocation = _MuxConnLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 8),
    _MuxConnLocation_Type()
)
muxConnLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    muxConnLocation.setStatus("mandatory")
_MuxConnShelf_Type = ShelfInput
_MuxConnShelf_Object = MibTableColumn
muxConnShelf = _MuxConnShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 9),
    _MuxConnShelf_Type()
)
muxConnShelf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    muxConnShelf.setStatus("mandatory")
_MuxConnSlot_Type = SlotInput
_MuxConnSlot_Object = MibTableColumn
muxConnSlot = _MuxConnSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 10),
    _MuxConnSlot_Type()
)
muxConnSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    muxConnSlot.setStatus("mandatory")
_MuxConnPort_Type = Integer32
_MuxConnPort_Object = MibTableColumn
muxConnPort = _MuxConnPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 11),
    _MuxConnPort_Type()
)
muxConnPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    muxConnPort.setStatus("mandatory")


class _MuxPortType_Type(Integer32):
    """Custom type muxPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("demux", 2),
          ("mux", 1))
    )


_MuxPortType_Type.__name__ = "Integer32"
_MuxPortType_Object = MibTableColumn
muxPortType = _MuxPortType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 12),
    _MuxPortType_Type()
)
muxPortType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxPortType.setStatus("mandatory")


class _MuxConnChassisID_Type(DisplayString):
    """Custom type muxConnChassisID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_MuxConnChassisID_Type.__name__ = "DisplayString"
_MuxConnChassisID_Object = MibTableColumn
muxConnChassisID = _MuxConnChassisID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 13),
    _MuxConnChassisID_Type()
)
muxConnChassisID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    muxConnChassisID.setStatus("mandatory")


class _MuxConnSystemName_Type(DisplayString):
    """Custom type muxConnSystemName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_MuxConnSystemName_Type.__name__ = "DisplayString"
_MuxConnSystemName_Object = MibTableColumn
muxConnSystemName = _MuxConnSystemName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 14),
    _MuxConnSystemName_Type()
)
muxConnSystemName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    muxConnSystemName.setStatus("mandatory")
_MuxConnIpAddress_Type = IpAddress
_MuxConnIpAddress_Object = MibTableColumn
muxConnIpAddress = _MuxConnIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 15),
    _MuxConnIpAddress_Type()
)
muxConnIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    muxConnIpAddress.setStatus("mandatory")
_MuxPortAvgInsertionLoss_Type = DisplayString
_MuxPortAvgInsertionLoss_Object = MibTableColumn
muxPortAvgInsertionLoss = _MuxPortAvgInsertionLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 16),
    _MuxPortAvgInsertionLoss_Type()
)
muxPortAvgInsertionLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxPortAvgInsertionLoss.setStatus("mandatory")
_MuxPortMaxInsertionLoss_Type = DisplayString
_MuxPortMaxInsertionLoss_Object = MibTableColumn
muxPortMaxInsertionLoss = _MuxPortMaxInsertionLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 17),
    _MuxPortMaxInsertionLoss_Type()
)
muxPortMaxInsertionLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxPortMaxInsertionLoss.setStatus("mandatory")
_MuxPortTapRatio_Type = DisplayString
_MuxPortTapRatio_Object = MibTableColumn
muxPortTapRatio = _MuxPortTapRatio_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 18),
    _MuxPortTapRatio_Type()
)
muxPortTapRatio.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxPortTapRatio.setStatus("mandatory")
_Ps_ObjectIdentity = ObjectIdentity
ps = _Ps_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 5)
)
_PsNumber_Type = Integer32
_PsNumber_Object = MibScalar
psNumber = _PsNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 5, 1),
    _PsNumber_Type()
)
psNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psNumber.setStatus("mandatory")
_PsTable_Object = MibTable
psTable = _PsTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 5, 2)
)
if mibBuilder.loadTexts:
    psTable.setStatus("mandatory")
_PsEntry_Object = MibTableRow
psEntry = _PsEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 5, 2, 1)
)
psEntry.setIndexNames(
    (0, "LUXN-MIB", "psID"),
)
if mibBuilder.loadTexts:
    psEntry.setStatus("mandatory")


class _PsID_Type(Integer32):
    """Custom type psID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_PsID_Type.__name__ = "Integer32"
_PsID_Object = MibTableColumn
psID = _PsID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 5, 2, 1, 1),
    _PsID_Type()
)
psID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    psID.setStatus("mandatory")
_PsMode_Type = RedundancyMode
_PsMode_Object = MibTableColumn
psMode = _PsMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 5, 2, 1, 2),
    _PsMode_Type()
)
psMode.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    psMode.setStatus("mandatory")
_PsMfgDate_Type = DateAndTime
_PsMfgDate_Object = MibTableColumn
psMfgDate = _PsMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 5, 2, 1, 3),
    _PsMfgDate_Type()
)
psMfgDate.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    psMfgDate.setStatus("mandatory")
_PsSerialNum_Type = SerialString
_PsSerialNum_Object = MibTableColumn
psSerialNum = _PsSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 5, 2, 1, 4),
    _PsSerialNum_Type()
)
psSerialNum.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    psSerialNum.setStatus("mandatory")
_PsModelType_Type = ModelString
_PsModelType_Object = MibTableColumn
psModelType = _PsModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 5, 2, 1, 5),
    _PsModelType_Type()
)
psModelType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    psModelType.setStatus("mandatory")
_Download_ObjectIdentity = ObjectIdentity
download = _Download_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6)
)
_DlFtpTable_Object = MibTable
dlFtpTable = _DlFtpTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 1)
)
if mibBuilder.loadTexts:
    dlFtpTable.setStatus("mandatory")
_DlFtpEntry_Object = MibTableRow
dlFtpEntry = _DlFtpEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 1, 1)
)
dlFtpEntry.setIndexNames(
    (0, "LUXN-MIB", "dlFtpIp"),
)
if mibBuilder.loadTexts:
    dlFtpEntry.setStatus("mandatory")
_DlFtpIp_Type = IpAddress
_DlFtpIp_Object = MibTableColumn
dlFtpIp = _DlFtpIp_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 1, 1, 1),
    _DlFtpIp_Type()
)
dlFtpIp.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dlFtpIp.setStatus("mandatory")
_DlFtpLogonID_Type = LogonID
_DlFtpLogonID_Object = MibTableColumn
dlFtpLogonID = _DlFtpLogonID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 1, 1, 2),
    _DlFtpLogonID_Type()
)
dlFtpLogonID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dlFtpLogonID.setStatus("mandatory")


class _DlFtpPasswd_Type(DisplayString):
    """Custom type dlFtpPasswd based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_DlFtpPasswd_Type.__name__ = "DisplayString"
_DlFtpPasswd_Object = MibTableColumn
dlFtpPasswd = _DlFtpPasswd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 1, 1, 3),
    _DlFtpPasswd_Type()
)
dlFtpPasswd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dlFtpPasswd.setStatus("mandatory")
_DlFtpMode_Type = FtpMode
_DlFtpMode_Object = MibTableColumn
dlFtpMode = _DlFtpMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 1, 1, 4),
    _DlFtpMode_Type()
)
dlFtpMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dlFtpMode.setStatus("mandatory")


class _DlFtpPort_Type(Integer32):
    """Custom type dlFtpPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 65535),
    )


_DlFtpPort_Type.__name__ = "Integer32"
_DlFtpPort_Object = MibTableColumn
dlFtpPort = _DlFtpPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 1, 1, 5),
    _DlFtpPort_Type()
)
dlFtpPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dlFtpPort.setStatus("mandatory")
_DlPreQualTable_Object = MibTable
dlPreQualTable = _DlPreQualTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 2)
)
if mibBuilder.loadTexts:
    dlPreQualTable.setStatus("mandatory")
_DlPreQualEntry_Object = MibTableRow
dlPreQualEntry = _DlPreQualEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 2, 1)
)
dlPreQualEntry.setIndexNames(
    (0, "LUXN-MIB", "dlPreQualTypeVersion"),
)
if mibBuilder.loadTexts:
    dlPreQualEntry.setStatus("mandatory")


class _DlPreQualTypeVersion_Type(DisplayString):
    """Custom type dlPreQualTypeVersion based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 42),
    )


_DlPreQualTypeVersion_Type.__name__ = "DisplayString"
_DlPreQualTypeVersion_Object = MibTableColumn
dlPreQualTypeVersion = _DlPreQualTypeVersion_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 2, 1, 1),
    _DlPreQualTypeVersion_Type()
)
dlPreQualTypeVersion.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dlPreQualTypeVersion.setStatus("mandatory")


class _DlPreQualResult_Type(Integer32):
    """Custom type dlPreQualResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("compatible", 1),
          ("incompatible", 2),
          ("unknown-version", 3))
    )


_DlPreQualResult_Type.__name__ = "Integer32"
_DlPreQualResult_Object = MibTableColumn
dlPreQualResult = _DlPreQualResult_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 2, 1, 2),
    _DlPreQualResult_Type()
)
dlPreQualResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dlPreQualResult.setStatus("mandatory")
_DlDownloadTable_Object = MibTable
dlDownloadTable = _DlDownloadTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 3)
)
if mibBuilder.loadTexts:
    dlDownloadTable.setStatus("mandatory")
_DlDownloadEntry_Object = MibTableRow
dlDownloadEntry = _DlDownloadEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 3, 1)
)
dlDownloadEntry.setIndexNames(
    (0, "LUXN-MIB", "dlType"),
    (0, "LUXN-MIB", "dlLocation"),
    (0, "LUXN-MIB", "dlShelf"),
    (0, "LUXN-MIB", "dlSlot"),
)
if mibBuilder.loadTexts:
    dlDownloadEntry.setStatus("mandatory")
_DlType_Type = DownloadType
_DlType_Object = MibTableColumn
dlType = _DlType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 3, 1, 1),
    _DlType_Type()
)
dlType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dlType.setStatus("mandatory")
_DlLocation_Type = DownloadLocation
_DlLocation_Object = MibTableColumn
dlLocation = _DlLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 3, 1, 2),
    _DlLocation_Type()
)
dlLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dlLocation.setStatus("mandatory")
_DlShelf_Type = DownloadShelf
_DlShelf_Object = MibTableColumn
dlShelf = _DlShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 3, 1, 3),
    _DlShelf_Type()
)
dlShelf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dlShelf.setStatus("mandatory")
_DlSlot_Type = DownloadSlot
_DlSlot_Object = MibTableColumn
dlSlot = _DlSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 3, 1, 4),
    _DlSlot_Type()
)
dlSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dlSlot.setStatus("mandatory")


class _DlFilename_Type(DisplayString):
    """Custom type dlFilename based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 255),
    )


_DlFilename_Type.__name__ = "DisplayString"
_DlFilename_Object = MibTableColumn
dlFilename = _DlFilename_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 3, 1, 5),
    _DlFilename_Type()
)
dlFilename.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dlFilename.setStatus("mandatory")


class _DlActivate_Type(Integer32):
    """Custom type dlActivate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("activateBackupFPGA", 3),
          ("activateBackupFirmware", 2),
          ("activateBackupFirmwareAndFPGA", 4),
          ("activateForAllLineCards", 5),
          ("no", 1))
    )


_DlActivate_Type.__name__ = "Integer32"
_DlActivate_Object = MibTableColumn
dlActivate = _DlActivate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 3, 1, 6),
    _DlActivate_Type()
)
dlActivate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dlActivate.setStatus("mandatory")


class _DlExportType_Type(Integer32):
    """Custom type dlExportType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("export", 2),
          ("import", 1))
    )


_DlExportType_Type.__name__ = "Integer32"
_DlExportType_Object = MibTableColumn
dlExportType = _DlExportType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 3, 1, 7),
    _DlExportType_Type()
)
dlExportType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dlExportType.setStatus("mandatory")
_DlOSTable_Object = MibTable
dlOSTable = _DlOSTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 4)
)
if mibBuilder.loadTexts:
    dlOSTable.setStatus("mandatory")
_DlOSEntry_Object = MibTableRow
dlOSEntry = _DlOSEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 4, 1)
)
dlOSEntry.setIndexNames(
    (0, "LUXN-MIB", "dlOSIndex"),
)
if mibBuilder.loadTexts:
    dlOSEntry.setStatus("mandatory")


class _DlOSIndex_Type(Integer32):
    """Custom type dlOSIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 2),
    )


_DlOSIndex_Type.__name__ = "Integer32"
_DlOSIndex_Object = MibTableColumn
dlOSIndex = _DlOSIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 4, 1, 1),
    _DlOSIndex_Type()
)
dlOSIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dlOSIndex.setStatus("mandatory")
_DlOSVersion_Type = VersionString
_DlOSVersion_Object = MibTableColumn
dlOSVersion = _DlOSVersion_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 4, 1, 2),
    _DlOSVersion_Type()
)
dlOSVersion.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dlOSVersion.setStatus("mandatory")
_DlOSState_Type = OSState
_DlOSState_Object = MibTableColumn
dlOSState = _DlOSState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 4, 1, 3),
    _DlOSState_Type()
)
dlOSState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dlOSState.setStatus("mandatory")
_DlOSRelDate_Type = ReleaseDate
_DlOSRelDate_Object = MibTableColumn
dlOSRelDate = _DlOSRelDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 4, 1, 4),
    _DlOSRelDate_Type()
)
dlOSRelDate.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dlOSRelDate.setStatus("mandatory")
_DlUpdateOS_Type = UpdateOSMode
_DlUpdateOS_Object = MibScalar
dlUpdateOS = _DlUpdateOS_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 6, 5),
    _DlUpdateOS_Type()
)
dlUpdateOS.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dlUpdateOS.setStatus("mandatory")
_Fadm_ObjectIdentity = ObjectIdentity
fadm = _Fadm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7)
)
_FadmBootPromVer_Type = VersionString
_FadmBootPromVer_Object = MibScalar
fadmBootPromVer = _FadmBootPromVer_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 1),
    _FadmBootPromVer_Type()
)
fadmBootPromVer.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fadmBootPromVer.setStatus("mandatory")


class _FadmROMSize_Type(Integer32):
    """Custom type fadmROMSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1024),
    )


_FadmROMSize_Type.__name__ = "Integer32"
_FadmROMSize_Object = MibScalar
fadmROMSize = _FadmROMSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 2),
    _FadmROMSize_Type()
)
fadmROMSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fadmROMSize.setStatus("mandatory")


class _FadmNumSubDiv_Type(Integer32):
    """Custom type fadmNumSubDiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_FadmNumSubDiv_Type.__name__ = "Integer32"
_FadmNumSubDiv_Object = MibScalar
fadmNumSubDiv = _FadmNumSubDiv_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 3),
    _FadmNumSubDiv_Type()
)
fadmNumSubDiv.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fadmNumSubDiv.setStatus("mandatory")
_FadmSubDivTable_Object = MibTable
fadmSubDivTable = _FadmSubDivTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 4)
)
if mibBuilder.loadTexts:
    fadmSubDivTable.setStatus("mandatory")
_FadmSubDivEntry_Object = MibTableRow
fadmSubDivEntry = _FadmSubDivEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 4, 1)
)
fadmSubDivEntry.setIndexNames(
    (0, "LUXN-MIB", "fadmSubDivIndex"),
)
if mibBuilder.loadTexts:
    fadmSubDivEntry.setStatus("mandatory")


class _FadmSubDivIndex_Type(Integer32):
    """Custom type fadmSubDivIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 20),
    )


_FadmSubDivIndex_Type.__name__ = "Integer32"
_FadmSubDivIndex_Object = MibTableColumn
fadmSubDivIndex = _FadmSubDivIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 4, 1, 1),
    _FadmSubDivIndex_Type()
)
fadmSubDivIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fadmSubDivIndex.setStatus("mandatory")


class _FadmSubDivDescr_Type(DisplayString):
    """Custom type fadmSubDivDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_FadmSubDivDescr_Type.__name__ = "DisplayString"
_FadmSubDivDescr_Object = MibTableColumn
fadmSubDivDescr = _FadmSubDivDescr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 4, 1, 2),
    _FadmSubDivDescr_Type()
)
fadmSubDivDescr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fadmSubDivDescr.setStatus("mandatory")


class _FadmSubDivSize_Type(Integer32):
    """Custom type fadmSubDivSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1024),
    )


_FadmSubDivSize_Type.__name__ = "Integer32"
_FadmSubDivSize_Object = MibTableColumn
fadmSubDivSize = _FadmSubDivSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 4, 1, 3),
    _FadmSubDivSize_Type()
)
fadmSubDivSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fadmSubDivSize.setStatus("mandatory")


class _FadmSubDivOffset_Type(OctetString):
    """Custom type fadmSubDivOffset based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_FadmSubDivOffset_Type.__name__ = "OctetString"
_FadmSubDivOffset_Object = MibTableColumn
fadmSubDivOffset = _FadmSubDivOffset_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 4, 1, 4),
    _FadmSubDivOffset_Type()
)
fadmSubDivOffset.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fadmSubDivOffset.setStatus("mandatory")
_FadmNumber_Type = Integer32
_FadmNumber_Object = MibScalar
fadmNumber = _FadmNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 5),
    _FadmNumber_Type()
)
fadmNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmNumber.setStatus("mandatory")
_FadmTable_Object = MibTable
fadmTable = _FadmTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6)
)
if mibBuilder.loadTexts:
    fadmTable.setStatus("mandatory")
_FadmEntry_Object = MibTableRow
fadmEntry = _FadmEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1)
)
fadmEntry.setIndexNames(
    (0, "LUXN-MIB", "fadmCardLocation"),
    (0, "LUXN-MIB", "fadmCardShelf"),
    (0, "LUXN-MIB", "fadmCardSlot"),
)
if mibBuilder.loadTexts:
    fadmEntry.setStatus("mandatory")
_FadmCardLocation_Type = CardLocation
_FadmCardLocation_Object = MibTableColumn
fadmCardLocation = _FadmCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 1),
    _FadmCardLocation_Type()
)
fadmCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmCardLocation.setStatus("mandatory")
_FadmCardShelf_Type = CardShelf
_FadmCardShelf_Object = MibTableColumn
fadmCardShelf = _FadmCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 2),
    _FadmCardShelf_Type()
)
fadmCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmCardShelf.setStatus("mandatory")
_FadmCardSlot_Type = SlotInput
_FadmCardSlot_Object = MibTableColumn
fadmCardSlot = _FadmCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 3),
    _FadmCardSlot_Type()
)
fadmCardSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fadmCardSlot.setStatus("mandatory")
_FadmMfgDate_Type = DateAndTime
_FadmMfgDate_Object = MibTableColumn
fadmMfgDate = _FadmMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 4),
    _FadmMfgDate_Type()
)
fadmMfgDate.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fadmMfgDate.setStatus("mandatory")
_FadmSerialNum_Type = SerialString
_FadmSerialNum_Object = MibTableColumn
fadmSerialNum = _FadmSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 5),
    _FadmSerialNum_Type()
)
fadmSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmSerialNum.setStatus("mandatory")
_FadmModelType_Type = CardType
_FadmModelType_Object = MibTableColumn
fadmModelType = _FadmModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 6),
    _FadmModelType_Type()
)
fadmModelType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmModelType.setStatus("mandatory")
_FadmName_Type = CardName
_FadmName_Object = MibTableColumn
fadmName = _FadmName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 7),
    _FadmName_Type()
)
fadmName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fadmName.setStatus("mandatory")
_FadmFWVersionID_Type = VersionString
_FadmFWVersionID_Object = MibTableColumn
fadmFWVersionID = _FadmFWVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 8),
    _FadmFWVersionID_Type()
)
fadmFWVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmFWVersionID.setStatus("mandatory")
_FadmSetState_Type = RebootType
_FadmSetState_Object = MibTableColumn
fadmSetState = _FadmSetState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 9),
    _FadmSetState_Type()
)
fadmSetState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fadmSetState.setStatus("mandatory")
_FadmNumPorts_Type = Integer32
_FadmNumPorts_Object = MibTableColumn
fadmNumPorts = _FadmNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 10),
    _FadmNumPorts_Type()
)
fadmNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmNumPorts.setStatus("mandatory")


class _FadmUpgradeFlag_Type(Integer32):
    """Custom type fadmUpgradeFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notUpgradeable", 2),
          ("upgradeable", 1))
    )


_FadmUpgradeFlag_Type.__name__ = "Integer32"
_FadmUpgradeFlag_Object = MibTableColumn
fadmUpgradeFlag = _FadmUpgradeFlag_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 11),
    _FadmUpgradeFlag_Type()
)
fadmUpgradeFlag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmUpgradeFlag.setStatus("mandatory")
_FadmModelNum_Type = DisplayString
_FadmModelNum_Object = MibTableColumn
fadmModelNum = _FadmModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 12),
    _FadmModelNum_Type()
)
fadmModelNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmModelNum.setStatus("mandatory")
_FadmITUNumber1_Type = Integer32
_FadmITUNumber1_Object = MibTableColumn
fadmITUNumber1 = _FadmITUNumber1_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 13),
    _FadmITUNumber1_Type()
)
fadmITUNumber1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmITUNumber1.setStatus("mandatory")
_FadmITUNumber2_Type = Integer32
_FadmITUNumber2_Object = MibTableColumn
fadmITUNumber2 = _FadmITUNumber2_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 14),
    _FadmITUNumber2_Type()
)
fadmITUNumber2.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmITUNumber2.setStatus("mandatory")
_FadmInsertionLoss1_Type = DisplayString
_FadmInsertionLoss1_Object = MibTableColumn
fadmInsertionLoss1 = _FadmInsertionLoss1_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 15),
    _FadmInsertionLoss1_Type()
)
fadmInsertionLoss1.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmInsertionLoss1.setStatus("mandatory")
_FadmInsertionLoss2_Type = DisplayString
_FadmInsertionLoss2_Object = MibTableColumn
fadmInsertionLoss2 = _FadmInsertionLoss2_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 16),
    _FadmInsertionLoss2_Type()
)
fadmInsertionLoss2.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fadmInsertionLoss2.setStatus("mandatory")
_FadmExpressLoss_Type = DisplayString
_FadmExpressLoss_Object = MibTableColumn
fadmExpressLoss = _FadmExpressLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 17),
    _FadmExpressLoss_Type()
)
fadmExpressLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmExpressLoss.setStatus("mandatory")
_FadmHWName_Type = CardName
_FadmHWName_Object = MibTableColumn
fadmHWName = _FadmHWName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 18),
    _FadmHWName_Type()
)
fadmHWName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmHWName.setStatus("mandatory")
_FadmPathID_Type = PathIdName
_FadmPathID_Object = MibTableColumn
fadmPathID = _FadmPathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 19),
    _FadmPathID_Type()
)
fadmPathID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fadmPathID.setStatus("mandatory")


class _FadmAdminState_Type(Integer32):
    """Custom type fadmAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("na", 3))
    )


_FadmAdminState_Type.__name__ = "Integer32"
_FadmAdminState_Object = MibTableColumn
fadmAdminState = _FadmAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 20),
    _FadmAdminState_Type()
)
fadmAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fadmAdminState.setStatus("mandatory")
_FadmCleiNum_Type = DisplayString
_FadmCleiNum_Object = MibTableColumn
fadmCleiNum = _FadmCleiNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 21),
    _FadmCleiNum_Type()
)
fadmCleiNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmCleiNum.setStatus("mandatory")
_FadmBand_Type = DisplayString
_FadmBand_Object = MibTableColumn
fadmBand = _FadmBand_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 22),
    _FadmBand_Type()
)
fadmBand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmBand.setStatus("mandatory")
_FadmChannelsPerBand_Type = Integer32
_FadmChannelsPerBand_Object = MibTableColumn
fadmChannelsPerBand = _FadmChannelsPerBand_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 23),
    _FadmChannelsPerBand_Type()
)
fadmChannelsPerBand.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmChannelsPerBand.setStatus("mandatory")
_FadmStartItu_Type = Integer32
_FadmStartItu_Object = MibTableColumn
fadmStartItu = _FadmStartItu_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 24),
    _FadmStartItu_Type()
)
fadmStartItu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmStartItu.setStatus("mandatory")
_FadmEndItu_Type = Integer32
_FadmEndItu_Object = MibTableColumn
fadmEndItu = _FadmEndItu_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 25),
    _FadmEndItu_Type()
)
fadmEndItu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmEndItu.setStatus("mandatory")
_FadmPortTable_Object = MibTable
fadmPortTable = _FadmPortTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 7)
)
if mibBuilder.loadTexts:
    fadmPortTable.setStatus("mandatory")
_FadmPortEntry_Object = MibTableRow
fadmPortEntry = _FadmPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1)
)
fadmPortEntry.setIndexNames(
    (0, "LUXN-MIB", "fadmPortCardShelf"),
    (0, "LUXN-MIB", "fadmPortCardSlot"),
    (0, "LUXN-MIB", "fadmPortType"),
)
if mibBuilder.loadTexts:
    fadmPortEntry.setStatus("mandatory")
_FadmPortCardShelf_Type = CardShelf
_FadmPortCardShelf_Object = MibTableColumn
fadmPortCardShelf = _FadmPortCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1, 1),
    _FadmPortCardShelf_Type()
)
fadmPortCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmPortCardShelf.setStatus("mandatory")
_FadmPortCardSlot_Type = SlotInput
_FadmPortCardSlot_Object = MibTableColumn
fadmPortCardSlot = _FadmPortCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1, 2),
    _FadmPortCardSlot_Type()
)
fadmPortCardSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmPortCardSlot.setStatus("mandatory")


class _FadmPortType_Type(Integer32):
    """Custom type fadmPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("connARx-EXP", 2),
          ("connATx-AToD", 1),
          ("connBRx", 6),
          ("connBTx", 5),
          ("localRx-Rx", 4),
          ("localTx-Local", 3))
    )


_FadmPortType_Type.__name__ = "Integer32"
_FadmPortType_Object = MibTableColumn
fadmPortType = _FadmPortType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1, 3),
    _FadmPortType_Type()
)
fadmPortType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmPortType.setStatus("mandatory")
_FadmConnLocation_Type = CardLocation
_FadmConnLocation_Object = MibTableColumn
fadmConnLocation = _FadmConnLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1, 4),
    _FadmConnLocation_Type()
)
fadmConnLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fadmConnLocation.setStatus("mandatory")
_FadmConnIpAddress_Type = IpAddress
_FadmConnIpAddress_Object = MibTableColumn
fadmConnIpAddress = _FadmConnIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1, 5),
    _FadmConnIpAddress_Type()
)
fadmConnIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fadmConnIpAddress.setStatus("mandatory")


class _FadmConnChassisID_Type(DisplayString):
    """Custom type fadmConnChassisID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_FadmConnChassisID_Type.__name__ = "DisplayString"
_FadmConnChassisID_Object = MibTableColumn
fadmConnChassisID = _FadmConnChassisID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1, 6),
    _FadmConnChassisID_Type()
)
fadmConnChassisID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fadmConnChassisID.setStatus("mandatory")


class _FadmConnSystemName_Type(DisplayString):
    """Custom type fadmConnSystemName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_FadmConnSystemName_Type.__name__ = "DisplayString"
_FadmConnSystemName_Object = MibTableColumn
fadmConnSystemName = _FadmConnSystemName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1, 7),
    _FadmConnSystemName_Type()
)
fadmConnSystemName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fadmConnSystemName.setStatus("mandatory")
_FadmConnCardType_Type = CardType
_FadmConnCardType_Object = MibTableColumn
fadmConnCardType = _FadmConnCardType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1, 8),
    _FadmConnCardType_Type()
)
fadmConnCardType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fadmConnCardType.setStatus("mandatory")
_FadmConnPort_Type = Integer32
_FadmConnPort_Object = MibTableColumn
fadmConnPort = _FadmConnPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1, 9),
    _FadmConnPort_Type()
)
fadmConnPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fadmConnPort.setStatus("mandatory")
_FadmConnShelf_Type = ShelfInput
_FadmConnShelf_Object = MibTableColumn
fadmConnShelf = _FadmConnShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1, 10),
    _FadmConnShelf_Type()
)
fadmConnShelf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fadmConnShelf.setStatus("mandatory")
_FadmConnSlot_Type = SlotInput
_FadmConnSlot_Object = MibTableColumn
fadmConnSlot = _FadmConnSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1, 11),
    _FadmConnSlot_Type()
)
fadmConnSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fadmConnSlot.setStatus("mandatory")
_Oppm_ObjectIdentity = ObjectIdentity
oppm = _Oppm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8)
)
_OppmBootPromVer_Type = VersionString
_OppmBootPromVer_Object = MibScalar
oppmBootPromVer = _OppmBootPromVer_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 1),
    _OppmBootPromVer_Type()
)
oppmBootPromVer.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmBootPromVer.setStatus("mandatory")


class _OppmROMSize_Type(Integer32):
    """Custom type oppmROMSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_OppmROMSize_Type.__name__ = "Integer32"
_OppmROMSize_Object = MibScalar
oppmROMSize = _OppmROMSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 2),
    _OppmROMSize_Type()
)
oppmROMSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmROMSize.setStatus("mandatory")


class _OppmNumSubDiv_Type(Integer32):
    """Custom type oppmNumSubDiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_OppmNumSubDiv_Type.__name__ = "Integer32"
_OppmNumSubDiv_Object = MibScalar
oppmNumSubDiv = _OppmNumSubDiv_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 3),
    _OppmNumSubDiv_Type()
)
oppmNumSubDiv.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmNumSubDiv.setStatus("mandatory")
_OppmSubDivTable_Object = MibTable
oppmSubDivTable = _OppmSubDivTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 4)
)
if mibBuilder.loadTexts:
    oppmSubDivTable.setStatus("mandatory")
_OppmSubDivEntry_Object = MibTableRow
oppmSubDivEntry = _OppmSubDivEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 4, 1)
)
oppmSubDivEntry.setIndexNames(
    (0, "LUXN-MIB", "oppmSubDivIndex"),
)
if mibBuilder.loadTexts:
    oppmSubDivEntry.setStatus("mandatory")


class _OppmSubDivIndex_Type(Integer32):
    """Custom type oppmSubDivIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_OppmSubDivIndex_Type.__name__ = "Integer32"
_OppmSubDivIndex_Object = MibTableColumn
oppmSubDivIndex = _OppmSubDivIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 4, 1, 1),
    _OppmSubDivIndex_Type()
)
oppmSubDivIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmSubDivIndex.setStatus("mandatory")


class _OppmSubDivDescr_Type(DisplayString):
    """Custom type oppmSubDivDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_OppmSubDivDescr_Type.__name__ = "DisplayString"
_OppmSubDivDescr_Object = MibTableColumn
oppmSubDivDescr = _OppmSubDivDescr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 4, 1, 2),
    _OppmSubDivDescr_Type()
)
oppmSubDivDescr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmSubDivDescr.setStatus("mandatory")


class _OppmSubDivSize_Type(Integer32):
    """Custom type oppmSubDivSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_OppmSubDivSize_Type.__name__ = "Integer32"
_OppmSubDivSize_Object = MibTableColumn
oppmSubDivSize = _OppmSubDivSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 4, 1, 3),
    _OppmSubDivSize_Type()
)
oppmSubDivSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmSubDivSize.setStatus("mandatory")


class _OppmSubDivOffset_Type(OctetString):
    """Custom type oppmSubDivOffset based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_OppmSubDivOffset_Type.__name__ = "OctetString"
_OppmSubDivOffset_Object = MibTableColumn
oppmSubDivOffset = _OppmSubDivOffset_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 4, 1, 4),
    _OppmSubDivOffset_Type()
)
oppmSubDivOffset.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmSubDivOffset.setStatus("mandatory")
_OppmNumber_Type = Integer32
_OppmNumber_Object = MibScalar
oppmNumber = _OppmNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 5),
    _OppmNumber_Type()
)
oppmNumber.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmNumber.setStatus("mandatory")
_OppmTable_Object = MibTable
oppmTable = _OppmTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6)
)
if mibBuilder.loadTexts:
    oppmTable.setStatus("mandatory")
_OppmEntry_Object = MibTableRow
oppmEntry = _OppmEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1)
)
oppmEntry.setIndexNames(
    (0, "LUXN-MIB", "oppmCardLocation"),
    (0, "LUXN-MIB", "oppmCardShelf"),
    (0, "LUXN-MIB", "oppmCardSlot"),
)
if mibBuilder.loadTexts:
    oppmEntry.setStatus("mandatory")
_OppmCardLocation_Type = CardLocation
_OppmCardLocation_Object = MibTableColumn
oppmCardLocation = _OppmCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 1),
    _OppmCardLocation_Type()
)
oppmCardLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmCardLocation.setStatus("mandatory")
_OppmCardShelf_Type = CardShelf
_OppmCardShelf_Object = MibTableColumn
oppmCardShelf = _OppmCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 2),
    _OppmCardShelf_Type()
)
oppmCardShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmCardShelf.setStatus("mandatory")
_OppmCardSlot_Type = SlotInput
_OppmCardSlot_Object = MibTableColumn
oppmCardSlot = _OppmCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 3),
    _OppmCardSlot_Type()
)
oppmCardSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmCardSlot.setStatus("mandatory")
_OppmModelNum_Type = DisplayString
_OppmModelNum_Object = MibTableColumn
oppmModelNum = _OppmModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 4),
    _OppmModelNum_Type()
)
oppmModelNum.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmModelNum.setStatus("mandatory")
_OppmMfgDate_Type = DateAndTime
_OppmMfgDate_Object = MibTableColumn
oppmMfgDate = _OppmMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 5),
    _OppmMfgDate_Type()
)
oppmMfgDate.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmMfgDate.setStatus("mandatory")
_OppmSerialNum_Type = SerialString
_OppmSerialNum_Object = MibTableColumn
oppmSerialNum = _OppmSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 6),
    _OppmSerialNum_Type()
)
oppmSerialNum.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmSerialNum.setStatus("mandatory")
_OppmModelType_Type = CardType
_OppmModelType_Object = MibTableColumn
oppmModelType = _OppmModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 7),
    _OppmModelType_Type()
)
oppmModelType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmModelType.setStatus("mandatory")
_OppmName_Type = CardName
_OppmName_Object = MibTableColumn
oppmName = _OppmName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 8),
    _OppmName_Type()
)
oppmName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmName.setStatus("mandatory")
_OppmFWVersionID_Type = VersionString
_OppmFWVersionID_Object = MibTableColumn
oppmFWVersionID = _OppmFWVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 9),
    _OppmFWVersionID_Type()
)
oppmFWVersionID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmFWVersionID.setStatus("mandatory")
_OppmSetState_Type = RebootType
_OppmSetState_Object = MibTableColumn
oppmSetState = _OppmSetState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 10),
    _OppmSetState_Type()
)
oppmSetState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmSetState.setStatus("mandatory")
_OppmTxInsertLoss_Type = DisplayString
_OppmTxInsertLoss_Object = MibTableColumn
oppmTxInsertLoss = _OppmTxInsertLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 12),
    _OppmTxInsertLoss_Type()
)
oppmTxInsertLoss.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmTxInsertLoss.setStatus("mandatory")
_OppmRxInsertLoss_Type = DisplayString
_OppmRxInsertLoss_Object = MibTableColumn
oppmRxInsertLoss = _OppmRxInsertLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 13),
    _OppmRxInsertLoss_Type()
)
oppmRxInsertLoss.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmRxInsertLoss.setStatus("mandatory")


class _OppmUpgradeFlag_Type(Integer32):
    """Custom type oppmUpgradeFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notUpgradable", 2),
          ("upgradable", 1))
    )


_OppmUpgradeFlag_Type.__name__ = "Integer32"
_OppmUpgradeFlag_Object = MibTableColumn
oppmUpgradeFlag = _OppmUpgradeFlag_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 14),
    _OppmUpgradeFlag_Type()
)
oppmUpgradeFlag.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmUpgradeFlag.setStatus("mandatory")


class _OppmSwitch_Type(Integer32):
    """Custom type oppmSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              6)
        )
    )
    namedValues = NamedValues(
        *(("enableAutoSwitch", 6),
          ("other", 1),
          ("switchToLinkA", 2),
          ("switchToLinkB", 3),
          ("toggle", 4))
    )


_OppmSwitch_Type.__name__ = "Integer32"
_OppmSwitch_Object = MibTableColumn
oppmSwitch = _OppmSwitch_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 15),
    _OppmSwitch_Type()
)
oppmSwitch.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmSwitch.setStatus("mandatory")


class _OppmMarginForSwitch_Type(Integer32):
    """Custom type oppmMarginForSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 15),
    )


_OppmMarginForSwitch_Type.__name__ = "Integer32"
_OppmMarginForSwitch_Object = MibTableColumn
oppmMarginForSwitch = _OppmMarginForSwitch_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 16),
    _OppmMarginForSwitch_Type()
)
oppmMarginForSwitch.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmMarginForSwitch.setStatus("mandatory")
_OppmHighAlarmMargin_Type = Integer32
_OppmHighAlarmMargin_Object = MibTableColumn
oppmHighAlarmMargin = _OppmHighAlarmMargin_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 17),
    _OppmHighAlarmMargin_Type()
)
oppmHighAlarmMargin.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmHighAlarmMargin.setStatus("mandatory")


class _OppmConfigCommit_Type(Integer32):
    """Custom type oppmConfigCommit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("save", 2))
    )


_OppmConfigCommit_Type.__name__ = "Integer32"
_OppmConfigCommit_Object = MibTableColumn
oppmConfigCommit = _OppmConfigCommit_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 18),
    _OppmConfigCommit_Type()
)
oppmConfigCommit.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmConfigCommit.setStatus("mandatory")
_OppmHWName_Type = CardName
_OppmHWName_Object = MibTableColumn
oppmHWName = _OppmHWName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 19),
    _OppmHWName_Type()
)
oppmHWName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmHWName.setStatus("mandatory")
_OppmLinkAPathID_Type = PathIdName
_OppmLinkAPathID_Object = MibTableColumn
oppmLinkAPathID = _OppmLinkAPathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 20),
    _OppmLinkAPathID_Type()
)
oppmLinkAPathID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmLinkAPathID.setStatus("mandatory")
_OppmLinkBPathID_Type = PathIdName
_OppmLinkBPathID_Object = MibTableColumn
oppmLinkBPathID = _OppmLinkBPathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 21),
    _OppmLinkBPathID_Type()
)
oppmLinkBPathID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmLinkBPathID.setStatus("mandatory")


class _OppmAdminState_Type(Integer32):
    """Custom type oppmAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("na", 3))
    )


_OppmAdminState_Type.__name__ = "Integer32"
_OppmAdminState_Object = MibTableColumn
oppmAdminState = _OppmAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 22),
    _OppmAdminState_Type()
)
oppmAdminState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmAdminState.setStatus("mandatory")
_OppmCleiNum_Type = DisplayString
_OppmCleiNum_Object = MibTableColumn
oppmCleiNum = _OppmCleiNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 23),
    _OppmCleiNum_Type()
)
oppmCleiNum.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmCleiNum.setStatus("mandatory")


class _OppmSwitchState_Type(Integer32):
    """Custom type oppmSwitchState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("forced", 2))
    )


_OppmSwitchState_Type.__name__ = "Integer32"
_OppmSwitchState_Object = MibTableColumn
oppmSwitchState = _OppmSwitchState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 24),
    _OppmSwitchState_Type()
)
oppmSwitchState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmSwitchState.setStatus("mandatory")
_OppmPortTable_Object = MibTable
oppmPortTable = _OppmPortTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 7)
)
if mibBuilder.loadTexts:
    oppmPortTable.setStatus("mandatory")
_OppmPortEntry_Object = MibTableRow
oppmPortEntry = _OppmPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1)
)
oppmPortEntry.setIndexNames(
    (0, "LUXN-MIB", "oppmPortCardShelf"),
    (0, "LUXN-MIB", "oppmPortCardSlot"),
    (0, "LUXN-MIB", "oppmPortType"),
)
if mibBuilder.loadTexts:
    oppmPortEntry.setStatus("mandatory")
_OppmPortCardShelf_Type = CardShelf
_OppmPortCardShelf_Object = MibTableColumn
oppmPortCardShelf = _OppmPortCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1, 1),
    _OppmPortCardShelf_Type()
)
oppmPortCardShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmPortCardShelf.setStatus("mandatory")
_OppmPortCardSlot_Type = SlotInput
_OppmPortCardSlot_Object = MibTableColumn
oppmPortCardSlot = _OppmPortCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1, 2),
    _OppmPortCardSlot_Type()
)
oppmPortCardSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmPortCardSlot.setStatus("mandatory")


class _OppmPortType_Type(Integer32):
    """Custom type oppmPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("linkARx", 2),
          ("linkATx", 1),
          ("linkBRx", 4),
          ("linkBTx", 3),
          ("localRx", 6),
          ("localTx", 5))
    )


_OppmPortType_Type.__name__ = "Integer32"
_OppmPortType_Object = MibTableColumn
oppmPortType = _OppmPortType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1, 3),
    _OppmPortType_Type()
)
oppmPortType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oppmPortType.setStatus("mandatory")
_OppmConnLocation_Type = CardLocation
_OppmConnLocation_Object = MibTableColumn
oppmConnLocation = _OppmConnLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1, 4),
    _OppmConnLocation_Type()
)
oppmConnLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmConnLocation.setStatus("mandatory")
_OppmConnIpAddress_Type = IpAddress
_OppmConnIpAddress_Object = MibTableColumn
oppmConnIpAddress = _OppmConnIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1, 5),
    _OppmConnIpAddress_Type()
)
oppmConnIpAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmConnIpAddress.setStatus("mandatory")


class _OppmConnChassisID_Type(DisplayString):
    """Custom type oppmConnChassisID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_OppmConnChassisID_Type.__name__ = "DisplayString"
_OppmConnChassisID_Object = MibTableColumn
oppmConnChassisID = _OppmConnChassisID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1, 6),
    _OppmConnChassisID_Type()
)
oppmConnChassisID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmConnChassisID.setStatus("mandatory")


class _OppmConnSystemName_Type(DisplayString):
    """Custom type oppmConnSystemName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_OppmConnSystemName_Type.__name__ = "DisplayString"
_OppmConnSystemName_Object = MibTableColumn
oppmConnSystemName = _OppmConnSystemName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1, 7),
    _OppmConnSystemName_Type()
)
oppmConnSystemName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmConnSystemName.setStatus("mandatory")
_OppmConnCardType_Type = CardType
_OppmConnCardType_Object = MibTableColumn
oppmConnCardType = _OppmConnCardType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1, 8),
    _OppmConnCardType_Type()
)
oppmConnCardType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmConnCardType.setStatus("mandatory")
_OppmConnPort_Type = Integer32
_OppmConnPort_Object = MibTableColumn
oppmConnPort = _OppmConnPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1, 9),
    _OppmConnPort_Type()
)
oppmConnPort.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmConnPort.setStatus("mandatory")
_OppmConnShelf_Type = ShelfInput
_OppmConnShelf_Object = MibTableColumn
oppmConnShelf = _OppmConnShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1, 10),
    _OppmConnShelf_Type()
)
oppmConnShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmConnShelf.setStatus("mandatory")
_OppmConnSlot_Type = SlotInput
_OppmConnSlot_Object = MibTableColumn
oppmConnSlot = _OppmConnSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1, 11),
    _OppmConnSlot_Type()
)
oppmConnSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmConnSlot.setStatus("mandatory")
_Mcm_ObjectIdentity = ObjectIdentity
mcm = _Mcm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9)
)
_McmBootPromVer_Type = VersionString
_McmBootPromVer_Object = MibScalar
mcmBootPromVer = _McmBootPromVer_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 1),
    _McmBootPromVer_Type()
)
mcmBootPromVer.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmBootPromVer.setStatus("mandatory")


class _McmROMSize_Type(Integer32):
    """Custom type mcmROMSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_McmROMSize_Type.__name__ = "Integer32"
_McmROMSize_Object = MibScalar
mcmROMSize = _McmROMSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 2),
    _McmROMSize_Type()
)
mcmROMSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmROMSize.setStatus("mandatory")


class _McmNumSubDiv_Type(Integer32):
    """Custom type mcmNumSubDiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_McmNumSubDiv_Type.__name__ = "Integer32"
_McmNumSubDiv_Object = MibScalar
mcmNumSubDiv = _McmNumSubDiv_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 3),
    _McmNumSubDiv_Type()
)
mcmNumSubDiv.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmNumSubDiv.setStatus("mandatory")
_McmSubDivTable_Object = MibTable
mcmSubDivTable = _McmSubDivTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 4)
)
if mibBuilder.loadTexts:
    mcmSubDivTable.setStatus("mandatory")
_McmSubDivEntry_Object = MibTableRow
mcmSubDivEntry = _McmSubDivEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 4, 1)
)
mcmSubDivEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmSubDivIndex"),
)
if mibBuilder.loadTexts:
    mcmSubDivEntry.setStatus("mandatory")


class _McmSubDivIndex_Type(Integer32):
    """Custom type mcmSubDivIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_McmSubDivIndex_Type.__name__ = "Integer32"
_McmSubDivIndex_Object = MibTableColumn
mcmSubDivIndex = _McmSubDivIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 4, 1, 1),
    _McmSubDivIndex_Type()
)
mcmSubDivIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmSubDivIndex.setStatus("mandatory")


class _McmSubDivDescr_Type(DisplayString):
    """Custom type mcmSubDivDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_McmSubDivDescr_Type.__name__ = "DisplayString"
_McmSubDivDescr_Object = MibTableColumn
mcmSubDivDescr = _McmSubDivDescr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 4, 1, 2),
    _McmSubDivDescr_Type()
)
mcmSubDivDescr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmSubDivDescr.setStatus("mandatory")


class _McmSubDivSize_Type(Integer32):
    """Custom type mcmSubDivSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_McmSubDivSize_Type.__name__ = "Integer32"
_McmSubDivSize_Object = MibTableColumn
mcmSubDivSize = _McmSubDivSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 4, 1, 3),
    _McmSubDivSize_Type()
)
mcmSubDivSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmSubDivSize.setStatus("mandatory")


class _McmSubDivOffset_Type(OctetString):
    """Custom type mcmSubDivOffset based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_McmSubDivOffset_Type.__name__ = "OctetString"
_McmSubDivOffset_Object = MibTableColumn
mcmSubDivOffset = _McmSubDivOffset_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 4, 1, 4),
    _McmSubDivOffset_Type()
)
mcmSubDivOffset.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmSubDivOffset.setStatus("mandatory")
_McmNumber_Type = Integer32
_McmNumber_Object = MibScalar
mcmNumber = _McmNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 5),
    _McmNumber_Type()
)
mcmNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmNumber.setStatus("mandatory")
_McmTable_Object = MibTable
mcmTable = _McmTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6)
)
if mibBuilder.loadTexts:
    mcmTable.setStatus("mandatory")
_McmEntry_Object = MibTableRow
mcmEntry = _McmEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1)
)
mcmEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmCardLocation"),
    (0, "LUXN-MIB", "mcmCardShelf"),
    (0, "LUXN-MIB", "mcmCardSlot"),
)
if mibBuilder.loadTexts:
    mcmEntry.setStatus("mandatory")
_McmCardLocation_Type = CardLocation
_McmCardLocation_Object = MibTableColumn
mcmCardLocation = _McmCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 1),
    _McmCardLocation_Type()
)
mcmCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmCardLocation.setStatus("mandatory")
_McmCardShelf_Type = CardShelf
_McmCardShelf_Object = MibTableColumn
mcmCardShelf = _McmCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 2),
    _McmCardShelf_Type()
)
mcmCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmCardShelf.setStatus("mandatory")
_McmCardSlot_Type = SlotInput
_McmCardSlot_Object = MibTableColumn
mcmCardSlot = _McmCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 3),
    _McmCardSlot_Type()
)
mcmCardSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmCardSlot.setStatus("mandatory")
_McmMfgDate_Type = DateAndTime
_McmMfgDate_Object = MibTableColumn
mcmMfgDate = _McmMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 4),
    _McmMfgDate_Type()
)
mcmMfgDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmMfgDate.setStatus("mandatory")
_McmSerialNum_Type = SerialString
_McmSerialNum_Object = MibTableColumn
mcmSerialNum = _McmSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 5),
    _McmSerialNum_Type()
)
mcmSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmSerialNum.setStatus("mandatory")
_McmModelType_Type = CardType
_McmModelType_Object = MibTableColumn
mcmModelType = _McmModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 6),
    _McmModelType_Type()
)
mcmModelType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmModelType.setStatus("mandatory")
_McmName_Type = CardName
_McmName_Object = MibTableColumn
mcmName = _McmName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 7),
    _McmName_Type()
)
mcmName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmName.setStatus("mandatory")
_McmFWVersionID_Type = VersionString
_McmFWVersionID_Object = MibTableColumn
mcmFWVersionID = _McmFWVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 8),
    _McmFWVersionID_Type()
)
mcmFWVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmFWVersionID.setStatus("mandatory")


class _McmAdminState_Type(Integer32):
    """Custom type mcmAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("na", 3))
    )


_McmAdminState_Type.__name__ = "Integer32"
_McmAdminState_Object = MibTableColumn
mcmAdminState = _McmAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 9),
    _McmAdminState_Type()
)
mcmAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmAdminState.setStatus("mandatory")
_McmLaserTemperature_Type = Integer32
_McmLaserTemperature_Object = MibTableColumn
mcmLaserTemperature = _McmLaserTemperature_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 10),
    _McmLaserTemperature_Type()
)
mcmLaserTemperature.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmLaserTemperature.setStatus("mandatory")


class _McmBandwidth_Type(Integer32):
    """Custom type mcmBandwidth based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("fibreChannel", 6),
          ("gbEthernet", 5),
          ("oc12", 3),
          ("oc3", 2),
          ("oc48", 4),
          ("other", 1))
    )


_McmBandwidth_Type.__name__ = "Integer32"
_McmBandwidth_Object = MibTableColumn
mcmBandwidth = _McmBandwidth_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 11),
    _McmBandwidth_Type()
)
mcmBandwidth.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmBandwidth.setStatus("mandatory")


class _McmSetState_Type(Integer32):
    """Custom type mcmSetState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14)
        )
    )
    namedValues = NamedValues(
        *(("disableLoopback", 14),
          ("nearEndCardLoopback", 4),
          ("nearEndPort1Loopback", 6),
          ("nearEndPort2Loopback", 7),
          ("nearEndPort3Loopback", 8),
          ("nearEndPort4Loopback", 9),
          ("networkCardLoopback", 5),
          ("networkPort1Loopback", 10),
          ("networkPort2Loopback", 11),
          ("networkPort3Loopback", 12),
          ("networkPort4Loopback", 13),
          ("other", 1),
          ("resetWithCurrentConfiguration", 2),
          ("resetWithFactoryDefault", 3))
    )


_McmSetState_Type.__name__ = "Integer32"
_McmSetState_Object = MibTableColumn
mcmSetState = _McmSetState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 12),
    _McmSetState_Type()
)
mcmSetState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmSetState.setStatus("mandatory")
_McmNumPorts_Type = Integer32
_McmNumPorts_Object = MibTableColumn
mcmNumPorts = _McmNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 13),
    _McmNumPorts_Type()
)
mcmNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmNumPorts.setStatus("mandatory")


class _McmUpgradeFlag_Type(Integer32):
    """Custom type mcmUpgradeFlag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("notUpgradable", 2),
          ("upgradable", 1))
    )


_McmUpgradeFlag_Type.__name__ = "Integer32"
_McmUpgradeFlag_Object = MibTableColumn
mcmUpgradeFlag = _McmUpgradeFlag_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 14),
    _McmUpgradeFlag_Type()
)
mcmUpgradeFlag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmUpgradeFlag.setStatus("mandatory")


class _McmEthernetStatus_Type(Integer32):
    """Custom type mcmEthernetStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_McmEthernetStatus_Type.__name__ = "Integer32"
_McmEthernetStatus_Object = MibTableColumn
mcmEthernetStatus = _McmEthernetStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 15),
    _McmEthernetStatus_Type()
)
mcmEthernetStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmEthernetStatus.setStatus("mandatory")


class _McmTimingPort_Type(Integer32):
    """Custom type mcmTimingPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("internal", 1),
          ("link", 2),
          ("t1Port1", 3),
          ("t1Port2", 4),
          ("t1Port3", 5),
          ("t1Port4", 6))
    )


_McmTimingPort_Type.__name__ = "Integer32"
_McmTimingPort_Object = MibTableColumn
mcmTimingPort = _McmTimingPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 16),
    _McmTimingPort_Type()
)
mcmTimingPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmTimingPort.setStatus("mandatory")
_McmModelNum_Type = DisplayString
_McmModelNum_Object = MibTableColumn
mcmModelNum = _McmModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 17),
    _McmModelNum_Type()
)
mcmModelNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmModelNum.setStatus("mandatory")
_McmMfgBiasCurrent_Type = Integer32
_McmMfgBiasCurrent_Object = MibTableColumn
mcmMfgBiasCurrent = _McmMfgBiasCurrent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 18),
    _McmMfgBiasCurrent_Type()
)
mcmMfgBiasCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmMfgBiasCurrent.setStatus("mandatory")
_McmMfgModulation_Type = Integer32
_McmMfgModulation_Object = MibTableColumn
mcmMfgModulation = _McmMfgModulation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 19),
    _McmMfgModulation_Type()
)
mcmMfgModulation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmMfgModulation.setStatus("mandatory")
_McmMfgApc_Type = Integer32
_McmMfgApc_Object = MibTableColumn
mcmMfgApc = _McmMfgApc_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 20),
    _McmMfgApc_Type()
)
mcmMfgApc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmMfgApc.setStatus("mandatory")
_McmMfgIwmModulation_Type = Integer32
_McmMfgIwmModulation_Object = MibTableColumn
mcmMfgIwmModulation = _McmMfgIwmModulation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 21),
    _McmMfgIwmModulation_Type()
)
mcmMfgIwmModulation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmMfgIwmModulation.setStatus("mandatory")
_McmconnMuxShelf_Type = ShelfInput
_McmconnMuxShelf_Object = MibTableColumn
mcmconnMuxShelf = _McmconnMuxShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 22),
    _McmconnMuxShelf_Type()
)
mcmconnMuxShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmconnMuxShelf.setStatus("mandatory")
_McmconnMuxSlot_Type = SlotInput
_McmconnMuxSlot_Object = MibTableColumn
mcmconnMuxSlot = _McmconnMuxSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 23),
    _McmconnMuxSlot_Type()
)
mcmconnMuxSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmconnMuxSlot.setStatus("mandatory")
_McmconnMuxPort_Type = Integer32
_McmconnMuxPort_Object = MibTableColumn
mcmconnMuxPort = _McmconnMuxPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 24),
    _McmconnMuxPort_Type()
)
mcmconnMuxPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmconnMuxPort.setStatus("mandatory")
_McmconnDemuxShelf_Type = ShelfInput
_McmconnDemuxShelf_Object = MibTableColumn
mcmconnDemuxShelf = _McmconnDemuxShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 25),
    _McmconnDemuxShelf_Type()
)
mcmconnDemuxShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmconnDemuxShelf.setStatus("mandatory")
_McmconnDemuxSlot_Type = SlotInput
_McmconnDemuxSlot_Object = MibTableColumn
mcmconnDemuxSlot = _McmconnDemuxSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 26),
    _McmconnDemuxSlot_Type()
)
mcmconnDemuxSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmconnDemuxSlot.setStatus("mandatory")
_McmconnDemuxPort_Type = Integer32
_McmconnDemuxPort_Object = MibTableColumn
mcmconnDemuxPort = _McmconnDemuxPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 27),
    _McmconnDemuxPort_Type()
)
mcmconnDemuxPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmconnDemuxPort.setStatus("mandatory")


class _McmTimingPriority_Type(DisplayString):
    """Custom type mcmTimingPriority based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 12),
    )


_McmTimingPriority_Type.__name__ = "DisplayString"
_McmTimingPriority_Object = MibTableColumn
mcmTimingPriority = _McmTimingPriority_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 28),
    _McmTimingPriority_Type()
)
mcmTimingPriority.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmTimingPriority.setStatus("mandatory")
_McmLinkName_Type = LinkName
_McmLinkName_Object = MibTableColumn
mcmLinkName = _McmLinkName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 29),
    _McmLinkName_Type()
)
mcmLinkName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmLinkName.setStatus("mandatory")


class _McmEthernetMode_Type(Integer32):
    """Custom type mcmEthernetMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("forced100M", 3),
          ("forced10M", 2))
    )


_McmEthernetMode_Type.__name__ = "Integer32"
_McmEthernetMode_Object = MibTableColumn
mcmEthernetMode = _McmEthernetMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 30),
    _McmEthernetMode_Type()
)
mcmEthernetMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmEthernetMode.setStatus("mandatory")
_McmHWName_Type = CardName
_McmHWName_Object = MibTableColumn
mcmHWName = _McmHWName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 31),
    _McmHWName_Type()
)
mcmHWName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmHWName.setStatus("mandatory")


class _McmLinkWaveLength_Type(DisplayString):
    """Custom type mcmLinkWaveLength based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 15),
    )


_McmLinkWaveLength_Type.__name__ = "DisplayString"
_McmLinkWaveLength_Object = MibTableColumn
mcmLinkWaveLength = _McmLinkWaveLength_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 32),
    _McmLinkWaveLength_Type()
)
mcmLinkWaveLength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmLinkWaveLength.setStatus("mandatory")
_McmFpgaVersionID_Type = VersionString
_McmFpgaVersionID_Object = MibTableColumn
mcmFpgaVersionID = _McmFpgaVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 33),
    _McmFpgaVersionID_Type()
)
mcmFpgaVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmFpgaVersionID.setStatus("mandatory")
_McmPathID_Type = PathIdName
_McmPathID_Object = MibTableColumn
mcmPathID = _McmPathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 34),
    _McmPathID_Type()
)
mcmPathID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmPathID.setStatus("mandatory")
_McmCleiNum_Type = DisplayString
_McmCleiNum_Object = MibTableColumn
mcmCleiNum = _McmCleiNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 35),
    _McmCleiNum_Type()
)
mcmCleiNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmCleiNum.setStatus("mandatory")
_McmItuNum_Type = DisplayString
_McmItuNum_Object = MibTableColumn
mcmItuNum = _McmItuNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 36),
    _McmItuNum_Type()
)
mcmItuNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmItuNum.setStatus("mandatory")
_McmPortNumber_Type = Integer32
_McmPortNumber_Object = MibScalar
mcmPortNumber = _McmPortNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 7),
    _McmPortNumber_Type()
)
mcmPortNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortNumber.setStatus("mandatory")
_McmPortTable_Object = MibTable
mcmPortTable = _McmPortTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 8)
)
if mibBuilder.loadTexts:
    mcmPortTable.setStatus("mandatory")
_McmPortEntry_Object = MibTableRow
mcmPortEntry = _McmPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 8, 1)
)
mcmPortEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmPortCardLocation"),
    (0, "LUXN-MIB", "mcmPortCardShelf"),
    (0, "LUXN-MIB", "mcmPortCardSlot"),
    (0, "LUXN-MIB", "mcmPortIndex"),
)
if mibBuilder.loadTexts:
    mcmPortEntry.setStatus("mandatory")
_McmPortCardLocation_Type = CardLocation
_McmPortCardLocation_Object = MibTableColumn
mcmPortCardLocation = _McmPortCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 8, 1, 1),
    _McmPortCardLocation_Type()
)
mcmPortCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortCardLocation.setStatus("mandatory")
_McmPortCardShelf_Type = CardShelf
_McmPortCardShelf_Object = MibTableColumn
mcmPortCardShelf = _McmPortCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 8, 1, 2),
    _McmPortCardShelf_Type()
)
mcmPortCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortCardShelf.setStatus("mandatory")
_McmPortCardSlot_Type = SlotInput
_McmPortCardSlot_Object = MibTableColumn
mcmPortCardSlot = _McmPortCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 8, 1, 3),
    _McmPortCardSlot_Type()
)
mcmPortCardSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortCardSlot.setStatus("mandatory")
_McmPortIndex_Type = Integer32
_McmPortIndex_Object = MibTableColumn
mcmPortIndex = _McmPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 8, 1, 4),
    _McmPortIndex_Type()
)
mcmPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortIndex.setStatus("mandatory")


class _McmPortConnection_Type(Integer32):
    """Custom type mcmPortConnection based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_McmPortConnection_Type.__name__ = "Integer32"
_McmPortConnection_Object = MibTableColumn
mcmPortConnection = _McmPortConnection_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 8, 1, 5),
    _McmPortConnection_Type()
)
mcmPortConnection.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmPortConnection.setStatus("mandatory")


class _McmPortFraming_Type(Integer32):
    """Custom type mcmPortFraming based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("crc4", 3),
          ("d4", 2),
          ("esf", 1))
    )


_McmPortFraming_Type.__name__ = "Integer32"
_McmPortFraming_Object = MibTableColumn
mcmPortFraming = _McmPortFraming_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 8, 1, 6),
    _McmPortFraming_Type()
)
mcmPortFraming.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmPortFraming.setStatus("mandatory")


class _McmPortLineCoding_Type(Integer32):
    """Custom type mcmPortLineCoding based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ami", 2),
          ("b8zs", 1),
          ("hdb3", 3))
    )


_McmPortLineCoding_Type.__name__ = "Integer32"
_McmPortLineCoding_Object = MibTableColumn
mcmPortLineCoding = _McmPortLineCoding_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 8, 1, 7),
    _McmPortLineCoding_Type()
)
mcmPortLineCoding.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmPortLineCoding.setStatus("mandatory")


class _McmPortLineEqualizer_Type(Integer32):
    """Custom type mcmPortLineEqualizer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("ft0to133", 1),
          ("ft133to266", 2),
          ("ft266to399", 3),
          ("ft399to533", 4),
          ("ft533to655", 5),
          ("minus43dB", 6))
    )


_McmPortLineEqualizer_Type.__name__ = "Integer32"
_McmPortLineEqualizer_Object = MibTableColumn
mcmPortLineEqualizer = _McmPortLineEqualizer_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 8, 1, 8),
    _McmPortLineEqualizer_Type()
)
mcmPortLineEqualizer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmPortLineEqualizer.setStatus("mandatory")


class _McmPortImpedance_Type(Integer32):
    """Custom type mcmPortImpedance based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("ohms-100", 1),
          ("ohms-120", 3),
          ("ohms-75", 2))
    )


_McmPortImpedance_Type.__name__ = "Integer32"
_McmPortImpedance_Object = MibTableColumn
mcmPortImpedance = _McmPortImpedance_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 9, 8, 1, 9),
    _McmPortImpedance_Type()
)
mcmPortImpedance.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortImpedance.setStatus("mandatory")
_Fn_ObjectIdentity = ObjectIdentity
fn = _Fn_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 10)
)
_FnNumber_Type = Integer32
_FnNumber_Object = MibScalar
fnNumber = _FnNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 10, 1),
    _FnNumber_Type()
)
fnNumber.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fnNumber.setStatus("mandatory")
_FnTable_Object = MibTable
fnTable = _FnTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 10, 2)
)
if mibBuilder.loadTexts:
    fnTable.setStatus("mandatory")
_FnEntry_Object = MibTableRow
fnEntry = _FnEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 10, 2, 1)
)
fnEntry.setIndexNames(
    (0, "LUXN-MIB", "fnID"),
)
if mibBuilder.loadTexts:
    fnEntry.setStatus("mandatory")


class _FnID_Type(Integer32):
    """Custom type fnID based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 4),
    )


_FnID_Type.__name__ = "Integer32"
_FnID_Object = MibTableColumn
fnID = _FnID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 10, 2, 1, 1),
    _FnID_Type()
)
fnID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fnID.setStatus("mandatory")
_FnMfgDate_Type = DateAndTime
_FnMfgDate_Object = MibTableColumn
fnMfgDate = _FnMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 10, 2, 1, 2),
    _FnMfgDate_Type()
)
fnMfgDate.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fnMfgDate.setStatus("mandatory")
_FnSerialNum_Type = SerialString
_FnSerialNum_Object = MibTableColumn
fnSerialNum = _FnSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 10, 2, 1, 3),
    _FnSerialNum_Type()
)
fnSerialNum.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fnSerialNum.setStatus("mandatory")
_FnModelType_Type = ModelString
_FnModelType_Object = MibTableColumn
fnModelType = _FnModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 10, 2, 1, 4),
    _FnModelType_Type()
)
fnModelType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fnModelType.setStatus("mandatory")
_Csim_ObjectIdentity = ObjectIdentity
csim = _Csim_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 11)
)


class _CsimSysMode_Type(Integer32):
    """Custom type csimSysMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1),
          ("other", 3))
    )


_CsimSysMode_Type.__name__ = "Integer32"
_CsimSysMode_Object = MibScalar
csimSysMode = _CsimSysMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 11, 1),
    _CsimSysMode_Type()
)
csimSysMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    csimSysMode.setStatus("mandatory")
_CsimTable_Object = MibTable
csimTable = _CsimTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 11, 2)
)
if mibBuilder.loadTexts:
    csimTable.setStatus("mandatory")
_CsimEntry_Object = MibTableRow
csimEntry = _CsimEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 11, 2, 1)
)
csimEntry.setIndexNames(
    (0, "LUXN-MIB", "csimLocation"),
    (0, "LUXN-MIB", "csimShelf"),
    (0, "LUXN-MIB", "csimSlot"),
)
if mibBuilder.loadTexts:
    csimEntry.setStatus("mandatory")
_CsimLocation_Type = CardLocation
_CsimLocation_Object = MibTableColumn
csimLocation = _CsimLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 11, 2, 1, 1),
    _CsimLocation_Type()
)
csimLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimLocation.setStatus("mandatory")
_CsimShelf_Type = CardShelf
_CsimShelf_Object = MibTableColumn
csimShelf = _CsimShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 11, 2, 1, 2),
    _CsimShelf_Type()
)
csimShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimShelf.setStatus("mandatory")
_CsimSlot_Type = SlotInput
_CsimSlot_Object = MibTableColumn
csimSlot = _CsimSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 11, 2, 1, 3),
    _CsimSlot_Type()
)
csimSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimSlot.setStatus("mandatory")


class _CsimMode_Type(Integer32):
    """Custom type csimMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_CsimMode_Type.__name__ = "Integer32"
_CsimMode_Object = MibTableColumn
csimMode = _CsimMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 11, 2, 1, 4),
    _CsimMode_Type()
)
csimMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    csimMode.setStatus("mandatory")


class _CsimDCMode_Type(Integer32):
    """Custom type csimDCMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("continuous", 2),
          ("standard", 1))
    )


_CsimDCMode_Type.__name__ = "Integer32"
_CsimDCMode_Object = MibTableColumn
csimDCMode = _CsimDCMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 11, 2, 1, 5),
    _CsimDCMode_Type()
)
csimDCMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    csimDCMode.setStatus("mandatory")


class _CsimGatingIntvl_Type(Integer32):
    """Custom type csimGatingIntvl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_CsimGatingIntvl_Type.__name__ = "Integer32"
_CsimGatingIntvl_Object = MibTableColumn
csimGatingIntvl = _CsimGatingIntvl_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 11, 2, 1, 6),
    _CsimGatingIntvl_Type()
)
csimGatingIntvl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    csimGatingIntvl.setStatus("mandatory")


class _CsimUpdtIntvl_Type(Integer32):
    """Custom type csimUpdtIntvl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 65535),
    )


_CsimUpdtIntvl_Type.__name__ = "Integer32"
_CsimUpdtIntvl_Object = MibTableColumn
csimUpdtIntvl = _CsimUpdtIntvl_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 11, 2, 1, 7),
    _CsimUpdtIntvl_Type()
)
csimUpdtIntvl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    csimUpdtIntvl.setStatus("mandatory")
_CsimSEIThreshold_Type = DisplayString
_CsimSEIThreshold_Object = MibTableColumn
csimSEIThreshold = _CsimSEIThreshold_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 11, 2, 1, 8),
    _CsimSEIThreshold_Type()
)
csimSEIThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    csimSEIThreshold.setStatus("mandatory")
_Rpsm_ObjectIdentity = ObjectIdentity
rpsm = _Rpsm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12)
)
_RpsmBootPromVer_Type = VersionString
_RpsmBootPromVer_Object = MibScalar
rpsmBootPromVer = _RpsmBootPromVer_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 1),
    _RpsmBootPromVer_Type()
)
rpsmBootPromVer.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmBootPromVer.setStatus("mandatory")


class _RpsmROMSize_Type(Integer32):
    """Custom type rpsmROMSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_RpsmROMSize_Type.__name__ = "Integer32"
_RpsmROMSize_Object = MibScalar
rpsmROMSize = _RpsmROMSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 2),
    _RpsmROMSize_Type()
)
rpsmROMSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmROMSize.setStatus("mandatory")


class _RpsmNumSubDiv_Type(Integer32):
    """Custom type rpsmNumSubDiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_RpsmNumSubDiv_Type.__name__ = "Integer32"
_RpsmNumSubDiv_Object = MibScalar
rpsmNumSubDiv = _RpsmNumSubDiv_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 3),
    _RpsmNumSubDiv_Type()
)
rpsmNumSubDiv.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmNumSubDiv.setStatus("mandatory")
_RpsmSubDivTable_Object = MibTable
rpsmSubDivTable = _RpsmSubDivTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 4)
)
if mibBuilder.loadTexts:
    rpsmSubDivTable.setStatus("mandatory")
_RpsmSubDivEntry_Object = MibTableRow
rpsmSubDivEntry = _RpsmSubDivEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 4, 1)
)
rpsmSubDivEntry.setIndexNames(
    (0, "LUXN-MIB", "rpsmSubDivIndex"),
)
if mibBuilder.loadTexts:
    rpsmSubDivEntry.setStatus("mandatory")


class _RpsmSubDivIndex_Type(Integer32):
    """Custom type rpsmSubDivIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_RpsmSubDivIndex_Type.__name__ = "Integer32"
_RpsmSubDivIndex_Object = MibTableColumn
rpsmSubDivIndex = _RpsmSubDivIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 4, 1, 1),
    _RpsmSubDivIndex_Type()
)
rpsmSubDivIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmSubDivIndex.setStatus("mandatory")


class _RpsmSubDivDescr_Type(DisplayString):
    """Custom type rpsmSubDivDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RpsmSubDivDescr_Type.__name__ = "DisplayString"
_RpsmSubDivDescr_Object = MibTableColumn
rpsmSubDivDescr = _RpsmSubDivDescr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 4, 1, 2),
    _RpsmSubDivDescr_Type()
)
rpsmSubDivDescr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmSubDivDescr.setStatus("mandatory")


class _RpsmSubDivSize_Type(Integer32):
    """Custom type rpsmSubDivSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_RpsmSubDivSize_Type.__name__ = "Integer32"
_RpsmSubDivSize_Object = MibTableColumn
rpsmSubDivSize = _RpsmSubDivSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 4, 1, 3),
    _RpsmSubDivSize_Type()
)
rpsmSubDivSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmSubDivSize.setStatus("mandatory")


class _RpsmSubDivOffset_Type(OctetString):
    """Custom type rpsmSubDivOffset based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_RpsmSubDivOffset_Type.__name__ = "OctetString"
_RpsmSubDivOffset_Object = MibTableColumn
rpsmSubDivOffset = _RpsmSubDivOffset_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 4, 1, 4),
    _RpsmSubDivOffset_Type()
)
rpsmSubDivOffset.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmSubDivOffset.setStatus("mandatory")
_RpsmNumber_Type = Integer32
_RpsmNumber_Object = MibScalar
rpsmNumber = _RpsmNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 5),
    _RpsmNumber_Type()
)
rpsmNumber.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmNumber.setStatus("mandatory")
_RpsmTable_Object = MibTable
rpsmTable = _RpsmTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6)
)
if mibBuilder.loadTexts:
    rpsmTable.setStatus("mandatory")
_RpsmEntry_Object = MibTableRow
rpsmEntry = _RpsmEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1)
)
rpsmEntry.setIndexNames(
    (0, "LUXN-MIB", "rpsmCardLocation"),
    (0, "LUXN-MIB", "rpsmCardShelf"),
    (0, "LUXN-MIB", "rpsmCardSlot"),
)
if mibBuilder.loadTexts:
    rpsmEntry.setStatus("mandatory")
_RpsmCardLocation_Type = CardLocation
_RpsmCardLocation_Object = MibTableColumn
rpsmCardLocation = _RpsmCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 1),
    _RpsmCardLocation_Type()
)
rpsmCardLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmCardLocation.setStatus("mandatory")
_RpsmCardShelf_Type = CardShelf
_RpsmCardShelf_Object = MibTableColumn
rpsmCardShelf = _RpsmCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 2),
    _RpsmCardShelf_Type()
)
rpsmCardShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmCardShelf.setStatus("mandatory")
_RpsmCardSlot_Type = SlotInput
_RpsmCardSlot_Object = MibTableColumn
rpsmCardSlot = _RpsmCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 3),
    _RpsmCardSlot_Type()
)
rpsmCardSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmCardSlot.setStatus("mandatory")
_RpsmModelNum_Type = DisplayString
_RpsmModelNum_Object = MibTableColumn
rpsmModelNum = _RpsmModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 4),
    _RpsmModelNum_Type()
)
rpsmModelNum.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmModelNum.setStatus("mandatory")
_RpsmOpticsMfgDate_Type = DateAndTime
_RpsmOpticsMfgDate_Object = MibTableColumn
rpsmOpticsMfgDate = _RpsmOpticsMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 5),
    _RpsmOpticsMfgDate_Type()
)
rpsmOpticsMfgDate.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmOpticsMfgDate.setStatus("mandatory")
_RpsmSerialNum_Type = SerialString
_RpsmSerialNum_Object = MibTableColumn
rpsmSerialNum = _RpsmSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 6),
    _RpsmSerialNum_Type()
)
rpsmSerialNum.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmSerialNum.setStatus("mandatory")


class _RpsmModelType_Type(Integer32):
    """Custom type rpsmModelType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            17
        )
    )
    namedValues = NamedValues(
        ("rpsm", 17)
    )


_RpsmModelType_Type.__name__ = "Integer32"
_RpsmModelType_Object = MibTableColumn
rpsmModelType = _RpsmModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 7),
    _RpsmModelType_Type()
)
rpsmModelType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmModelType.setStatus("mandatory")
_RpsmHWName_Type = CardName
_RpsmHWName_Object = MibTableColumn
rpsmHWName = _RpsmHWName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 8),
    _RpsmHWName_Type()
)
rpsmHWName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmHWName.setStatus("mandatory")
_RpsmFWVersionID_Type = VersionString
_RpsmFWVersionID_Object = MibTableColumn
rpsmFWVersionID = _RpsmFWVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 9),
    _RpsmFWVersionID_Type()
)
rpsmFWVersionID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmFWVersionID.setStatus("mandatory")
_RpsmCardName_Type = CardName
_RpsmCardName_Object = MibTableColumn
rpsmCardName = _RpsmCardName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 10),
    _RpsmCardName_Type()
)
rpsmCardName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmCardName.setStatus("mandatory")
_RpsmFWName_Type = DisplayString
_RpsmFWName_Object = MibTableColumn
rpsmFWName = _RpsmFWName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 11),
    _RpsmFWName_Type()
)
rpsmFWName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmFWName.setStatus("mandatory")
_RpsmFWDate_Type = DateAndTime
_RpsmFWDate_Object = MibTableColumn
rpsmFWDate = _RpsmFWDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 12),
    _RpsmFWDate_Type()
)
rpsmFWDate.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmFWDate.setStatus("mandatory")
_RpsmHWVersionID_Type = VersionString
_RpsmHWVersionID_Object = MibTableColumn
rpsmHWVersionID = _RpsmHWVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 13),
    _RpsmHWVersionID_Type()
)
rpsmHWVersionID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmHWVersionID.setStatus("mandatory")
_RpsmHWDate_Type = DateAndTime
_RpsmHWDate_Object = MibTableColumn
rpsmHWDate = _RpsmHWDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 14),
    _RpsmHWDate_Type()
)
rpsmHWDate.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmHWDate.setStatus("mandatory")
_RpsmSetState_Type = RebootType
_RpsmSetState_Object = MibTableColumn
rpsmSetState = _RpsmSetState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 15),
    _RpsmSetState_Type()
)
rpsmSetState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmSetState.setStatus("mandatory")
_RpsmExpressLoss_Type = DisplayString
_RpsmExpressLoss_Object = MibTableColumn
rpsmExpressLoss = _RpsmExpressLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 16),
    _RpsmExpressLoss_Type()
)
rpsmExpressLoss.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmExpressLoss.setStatus("mandatory")


class _RpsmMarginForSwitch_Type(Integer32):
    """Custom type rpsmMarginForSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-40, 0),
    )


_RpsmMarginForSwitch_Type.__name__ = "Integer32"
_RpsmMarginForSwitch_Object = MibTableColumn
rpsmMarginForSwitch = _RpsmMarginForSwitch_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 17),
    _RpsmMarginForSwitch_Type()
)
rpsmMarginForSwitch.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmMarginForSwitch.setStatus("mandatory")


class _RpsmMinProtPowerForSwitch_Type(Integer32):
    """Custom type rpsmMinProtPowerForSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-40, 0),
    )


_RpsmMinProtPowerForSwitch_Type.__name__ = "Integer32"
_RpsmMinProtPowerForSwitch_Object = MibTableColumn
rpsmMinProtPowerForSwitch = _RpsmMinProtPowerForSwitch_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 18),
    _RpsmMinProtPowerForSwitch_Type()
)
rpsmMinProtPowerForSwitch.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmMinProtPowerForSwitch.setStatus("mandatory")
_RpsmDeBounce_Type = Integer32
_RpsmDeBounce_Object = MibTableColumn
rpsmDeBounce = _RpsmDeBounce_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 19),
    _RpsmDeBounce_Type()
)
rpsmDeBounce.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmDeBounce.setStatus("mandatory")
_RpsmBlackOutTime_Type = Integer32
_RpsmBlackOutTime_Object = MibTableColumn
rpsmBlackOutTime = _RpsmBlackOutTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 20),
    _RpsmBlackOutTime_Type()
)
rpsmBlackOutTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmBlackOutTime.setStatus("mandatory")


class _RpsmSwitch_Type(Integer32):
    """Custom type rpsmSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              6)
        )
    )
    namedValues = NamedValues(
        *(("enableAutoSwitch", 6),
          ("other", 1),
          ("switchToLinkA", 2),
          ("switchToLinkB", 3),
          ("toggle", 4))
    )


_RpsmSwitch_Type.__name__ = "Integer32"
_RpsmSwitch_Object = MibTableColumn
rpsmSwitch = _RpsmSwitch_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 21),
    _RpsmSwitch_Type()
)
rpsmSwitch.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmSwitch.setStatus("mandatory")
_RpsmAddDropLoss_Type = DisplayString
_RpsmAddDropLoss_Object = MibTableColumn
rpsmAddDropLoss = _RpsmAddDropLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 22),
    _RpsmAddDropLoss_Type()
)
rpsmAddDropLoss.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmAddDropLoss.setStatus("mandatory")
_RpsmPathID_Type = PathIdName
_RpsmPathID_Object = MibTableColumn
rpsmPathID = _RpsmPathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 23),
    _RpsmPathID_Type()
)
rpsmPathID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmPathID.setStatus("mandatory")


class _RpsmAdminState_Type(Integer32):
    """Custom type rpsmAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("na", 3))
    )


_RpsmAdminState_Type.__name__ = "Integer32"
_RpsmAdminState_Object = MibTableColumn
rpsmAdminState = _RpsmAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 24),
    _RpsmAdminState_Type()
)
rpsmAdminState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmAdminState.setStatus("mandatory")
_RpsmPortTable_Object = MibTable
rpsmPortTable = _RpsmPortTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 7)
)
if mibBuilder.loadTexts:
    rpsmPortTable.setStatus("mandatory")
_RpsmPortEntry_Object = MibTableRow
rpsmPortEntry = _RpsmPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 7, 1)
)
rpsmPortEntry.setIndexNames(
    (0, "LUXN-MIB", "rpsmPortCardShelf"),
    (0, "LUXN-MIB", "rpsmPortCardSlot"),
    (0, "LUXN-MIB", "rpsmPortType"),
)
if mibBuilder.loadTexts:
    rpsmPortEntry.setStatus("mandatory")
_RpsmPortCardShelf_Type = CardShelf
_RpsmPortCardShelf_Object = MibTableColumn
rpsmPortCardShelf = _RpsmPortCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 7, 1, 1),
    _RpsmPortCardShelf_Type()
)
rpsmPortCardShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmPortCardShelf.setStatus("mandatory")
_RpsmPortCardSlot_Type = SlotInput
_RpsmPortCardSlot_Object = MibTableColumn
rpsmPortCardSlot = _RpsmPortCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 7, 1, 2),
    _RpsmPortCardSlot_Type()
)
rpsmPortCardSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmPortCardSlot.setStatus("mandatory")


class _RpsmPortType_Type(Integer32):
    """Custom type rpsmPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("aTOd", 5),
          ("exp", 6),
          ("in", 3),
          ("linkEast", 1),
          ("linkWest", 2),
          ("out", 4))
    )


_RpsmPortType_Type.__name__ = "Integer32"
_RpsmPortType_Object = MibTableColumn
rpsmPortType = _RpsmPortType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 7, 1, 3),
    _RpsmPortType_Type()
)
rpsmPortType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmPortType.setStatus("mandatory")


class _RpsmConnCardType_Type(Integer32):
    """Custom type rpsmConnCardType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30),
    )


_RpsmConnCardType_Type.__name__ = "Integer32"
_RpsmConnCardType_Object = MibTableColumn
rpsmConnCardType = _RpsmConnCardType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 7, 1, 4),
    _RpsmConnCardType_Type()
)
rpsmConnCardType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmConnCardType.setStatus("mandatory")
_RpsmConnPort_Type = Integer32
_RpsmConnPort_Object = MibTableColumn
rpsmConnPort = _RpsmConnPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 7, 1, 5),
    _RpsmConnPort_Type()
)
rpsmConnPort.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmConnPort.setStatus("mandatory")
_RpsmConnShelf_Type = ShelfInput
_RpsmConnShelf_Object = MibTableColumn
rpsmConnShelf = _RpsmConnShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 7, 1, 6),
    _RpsmConnShelf_Type()
)
rpsmConnShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmConnShelf.setStatus("mandatory")
_RpsmConnSlot_Type = SlotInput
_RpsmConnSlot_Object = MibTableColumn
rpsmConnSlot = _RpsmConnSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 12, 7, 1, 7),
    _RpsmConnSlot_Type()
)
rpsmConnSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmConnSlot.setStatus("mandatory")
_Rsdm_ObjectIdentity = ObjectIdentity
rsdm = _Rsdm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13)
)
_RsdmBootPromVer_Type = VersionString
_RsdmBootPromVer_Object = MibScalar
rsdmBootPromVer = _RsdmBootPromVer_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 1),
    _RsdmBootPromVer_Type()
)
rsdmBootPromVer.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmBootPromVer.setStatus("mandatory")


class _RsdmROMSize_Type(Integer32):
    """Custom type rsdmROMSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_RsdmROMSize_Type.__name__ = "Integer32"
_RsdmROMSize_Object = MibScalar
rsdmROMSize = _RsdmROMSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 2),
    _RsdmROMSize_Type()
)
rsdmROMSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmROMSize.setStatus("mandatory")


class _RsdmNumSubDiv_Type(Integer32):
    """Custom type rsdmNumSubDiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_RsdmNumSubDiv_Type.__name__ = "Integer32"
_RsdmNumSubDiv_Object = MibScalar
rsdmNumSubDiv = _RsdmNumSubDiv_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 3),
    _RsdmNumSubDiv_Type()
)
rsdmNumSubDiv.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmNumSubDiv.setStatus("mandatory")
_RsdmSubDivTable_Object = MibTable
rsdmSubDivTable = _RsdmSubDivTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 4)
)
if mibBuilder.loadTexts:
    rsdmSubDivTable.setStatus("mandatory")
_RsdmSubDivEntry_Object = MibTableRow
rsdmSubDivEntry = _RsdmSubDivEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 4, 1)
)
rsdmSubDivEntry.setIndexNames(
    (0, "LUXN-MIB", "rsdmSubDivIndex"),
)
if mibBuilder.loadTexts:
    rsdmSubDivEntry.setStatus("mandatory")


class _RsdmSubDivIndex_Type(Integer32):
    """Custom type rsdmSubDivIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_RsdmSubDivIndex_Type.__name__ = "Integer32"
_RsdmSubDivIndex_Object = MibTableColumn
rsdmSubDivIndex = _RsdmSubDivIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 4, 1, 1),
    _RsdmSubDivIndex_Type()
)
rsdmSubDivIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmSubDivIndex.setStatus("mandatory")


class _RsdmSubDivDescr_Type(DisplayString):
    """Custom type rsdmSubDivDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RsdmSubDivDescr_Type.__name__ = "DisplayString"
_RsdmSubDivDescr_Object = MibTableColumn
rsdmSubDivDescr = _RsdmSubDivDescr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 4, 1, 2),
    _RsdmSubDivDescr_Type()
)
rsdmSubDivDescr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmSubDivDescr.setStatus("mandatory")


class _RsdmSubDivSize_Type(Integer32):
    """Custom type rsdmSubDivSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_RsdmSubDivSize_Type.__name__ = "Integer32"
_RsdmSubDivSize_Object = MibTableColumn
rsdmSubDivSize = _RsdmSubDivSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 4, 1, 3),
    _RsdmSubDivSize_Type()
)
rsdmSubDivSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmSubDivSize.setStatus("mandatory")


class _RsdmSubDivOffset_Type(OctetString):
    """Custom type rsdmSubDivOffset based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_RsdmSubDivOffset_Type.__name__ = "OctetString"
_RsdmSubDivOffset_Object = MibTableColumn
rsdmSubDivOffset = _RsdmSubDivOffset_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 4, 1, 4),
    _RsdmSubDivOffset_Type()
)
rsdmSubDivOffset.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmSubDivOffset.setStatus("mandatory")
_RsdmNumber_Type = Integer32
_RsdmNumber_Object = MibScalar
rsdmNumber = _RsdmNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 5),
    _RsdmNumber_Type()
)
rsdmNumber.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmNumber.setStatus("mandatory")
_RsdmTable_Object = MibTable
rsdmTable = _RsdmTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6)
)
if mibBuilder.loadTexts:
    rsdmTable.setStatus("mandatory")
_RsdmEntry_Object = MibTableRow
rsdmEntry = _RsdmEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1)
)
rsdmEntry.setIndexNames(
    (0, "LUXN-MIB", "rsdmCardLocation"),
    (0, "LUXN-MIB", "rsdmCardShelf"),
    (0, "LUXN-MIB", "rsdmCardSlot"),
)
if mibBuilder.loadTexts:
    rsdmEntry.setStatus("mandatory")
_RsdmCardLocation_Type = CardLocation
_RsdmCardLocation_Object = MibTableColumn
rsdmCardLocation = _RsdmCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 1),
    _RsdmCardLocation_Type()
)
rsdmCardLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmCardLocation.setStatus("mandatory")
_RsdmCardShelf_Type = CardShelf
_RsdmCardShelf_Object = MibTableColumn
rsdmCardShelf = _RsdmCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 2),
    _RsdmCardShelf_Type()
)
rsdmCardShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmCardShelf.setStatus("mandatory")
_RsdmCardSlot_Type = SlotInput
_RsdmCardSlot_Object = MibTableColumn
rsdmCardSlot = _RsdmCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 3),
    _RsdmCardSlot_Type()
)
rsdmCardSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmCardSlot.setStatus("mandatory")
_RsdmModelNum_Type = DisplayString
_RsdmModelNum_Object = MibTableColumn
rsdmModelNum = _RsdmModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 4),
    _RsdmModelNum_Type()
)
rsdmModelNum.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmModelNum.setStatus("mandatory")
_RsdmOpticsMfgDate_Type = DateAndTime
_RsdmOpticsMfgDate_Object = MibTableColumn
rsdmOpticsMfgDate = _RsdmOpticsMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 5),
    _RsdmOpticsMfgDate_Type()
)
rsdmOpticsMfgDate.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmOpticsMfgDate.setStatus("mandatory")
_RsdmSerialNum_Type = SerialString
_RsdmSerialNum_Object = MibTableColumn
rsdmSerialNum = _RsdmSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 6),
    _RsdmSerialNum_Type()
)
rsdmSerialNum.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmSerialNum.setStatus("mandatory")


class _RsdmModelType_Type(Integer32):
    """Custom type rsdmModelType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            16
        )
    )
    namedValues = NamedValues(
        ("rsdm", 16)
    )


_RsdmModelType_Type.__name__ = "Integer32"
_RsdmModelType_Object = MibTableColumn
rsdmModelType = _RsdmModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 7),
    _RsdmModelType_Type()
)
rsdmModelType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmModelType.setStatus("mandatory")
_RsdmHWName_Type = CardName
_RsdmHWName_Object = MibTableColumn
rsdmHWName = _RsdmHWName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 8),
    _RsdmHWName_Type()
)
rsdmHWName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmHWName.setStatus("mandatory")
_RsdmCardName_Type = CardName
_RsdmCardName_Object = MibTableColumn
rsdmCardName = _RsdmCardName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 9),
    _RsdmCardName_Type()
)
rsdmCardName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmCardName.setStatus("mandatory")
_RsdmFWVersionID_Type = VersionString
_RsdmFWVersionID_Object = MibTableColumn
rsdmFWVersionID = _RsdmFWVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 10),
    _RsdmFWVersionID_Type()
)
rsdmFWVersionID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmFWVersionID.setStatus("mandatory")
_RsdmFWName_Type = DisplayString
_RsdmFWName_Object = MibTableColumn
rsdmFWName = _RsdmFWName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 11),
    _RsdmFWName_Type()
)
rsdmFWName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmFWName.setStatus("mandatory")
_RsdmFWDate_Type = DateAndTime
_RsdmFWDate_Object = MibTableColumn
rsdmFWDate = _RsdmFWDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 12),
    _RsdmFWDate_Type()
)
rsdmFWDate.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmFWDate.setStatus("mandatory")
_RsdmHWVersionID_Type = VersionString
_RsdmHWVersionID_Object = MibTableColumn
rsdmHWVersionID = _RsdmHWVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 13),
    _RsdmHWVersionID_Type()
)
rsdmHWVersionID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmHWVersionID.setStatus("mandatory")
_RsdmHWDate_Type = DateAndTime
_RsdmHWDate_Object = MibTableColumn
rsdmHWDate = _RsdmHWDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 14),
    _RsdmHWDate_Type()
)
rsdmHWDate.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmHWDate.setStatus("mandatory")
_RsdmSetState_Type = RebootType
_RsdmSetState_Object = MibTableColumn
rsdmSetState = _RsdmSetState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 15),
    _RsdmSetState_Type()
)
rsdmSetState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmSetState.setStatus("mandatory")
_RsdmRxITUNumber_Type = Integer32
_RsdmRxITUNumber_Object = MibTableColumn
rsdmRxITUNumber = _RsdmRxITUNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 16),
    _RsdmRxITUNumber_Type()
)
rsdmRxITUNumber.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmRxITUNumber.setStatus("mandatory")
_RsdmTxITUNumber_Type = Integer32
_RsdmTxITUNumber_Object = MibTableColumn
rsdmTxITUNumber = _RsdmTxITUNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 17),
    _RsdmTxITUNumber_Type()
)
rsdmTxITUNumber.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmTxITUNumber.setStatus("mandatory")
_RsdmRxInsertionLoss_Type = DisplayString
_RsdmRxInsertionLoss_Object = MibTableColumn
rsdmRxInsertionLoss = _RsdmRxInsertionLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 18),
    _RsdmRxInsertionLoss_Type()
)
rsdmRxInsertionLoss.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmRxInsertionLoss.setStatus("mandatory")
_RsdmTxInsertionLoss_Type = DisplayString
_RsdmTxInsertionLoss_Object = MibTableColumn
rsdmTxInsertionLoss = _RsdmTxInsertionLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 19),
    _RsdmTxInsertionLoss_Type()
)
rsdmTxInsertionLoss.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmTxInsertionLoss.setStatus("mandatory")
_RsdmExpressLoss_Type = DisplayString
_RsdmExpressLoss_Object = MibTableColumn
rsdmExpressLoss = _RsdmExpressLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 20),
    _RsdmExpressLoss_Type()
)
rsdmExpressLoss.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmExpressLoss.setStatus("mandatory")


class _RsdmMarginForSwitch_Type(Integer32):
    """Custom type rsdmMarginForSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-40, 0),
    )


_RsdmMarginForSwitch_Type.__name__ = "Integer32"
_RsdmMarginForSwitch_Object = MibTableColumn
rsdmMarginForSwitch = _RsdmMarginForSwitch_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 21),
    _RsdmMarginForSwitch_Type()
)
rsdmMarginForSwitch.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmMarginForSwitch.setStatus("mandatory")


class _RsdmMinProtPowerForSwitch_Type(Integer32):
    """Custom type rsdmMinProtPowerForSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-40, 0),
    )


_RsdmMinProtPowerForSwitch_Type.__name__ = "Integer32"
_RsdmMinProtPowerForSwitch_Object = MibTableColumn
rsdmMinProtPowerForSwitch = _RsdmMinProtPowerForSwitch_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 22),
    _RsdmMinProtPowerForSwitch_Type()
)
rsdmMinProtPowerForSwitch.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmMinProtPowerForSwitch.setStatus("mandatory")
_RsdmDeBounce_Type = Integer32
_RsdmDeBounce_Object = MibTableColumn
rsdmDeBounce = _RsdmDeBounce_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 23),
    _RsdmDeBounce_Type()
)
rsdmDeBounce.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmDeBounce.setStatus("mandatory")
_RsdmBlackOutTime_Type = Integer32
_RsdmBlackOutTime_Object = MibTableColumn
rsdmBlackOutTime = _RsdmBlackOutTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 24),
    _RsdmBlackOutTime_Type()
)
rsdmBlackOutTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmBlackOutTime.setStatus("mandatory")


class _RsdmSwitch_Type(Integer32):
    """Custom type rsdmSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              6)
        )
    )
    namedValues = NamedValues(
        *(("enableAutoSwitch", 6),
          ("other", 1),
          ("switchToLinkA", 2),
          ("switchToLinkB", 3),
          ("toggle", 4))
    )


_RsdmSwitch_Type.__name__ = "Integer32"
_RsdmSwitch_Object = MibTableColumn
rsdmSwitch = _RsdmSwitch_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 25),
    _RsdmSwitch_Type()
)
rsdmSwitch.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmSwitch.setStatus("mandatory")
_RsdmPathID_Type = PathIdName
_RsdmPathID_Object = MibTableColumn
rsdmPathID = _RsdmPathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 26),
    _RsdmPathID_Type()
)
rsdmPathID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmPathID.setStatus("mandatory")


class _RsdmAdminState_Type(Integer32):
    """Custom type rsdmAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("na", 3))
    )


_RsdmAdminState_Type.__name__ = "Integer32"
_RsdmAdminState_Object = MibTableColumn
rsdmAdminState = _RsdmAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 27),
    _RsdmAdminState_Type()
)
rsdmAdminState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmAdminState.setStatus("mandatory")
_RsdmPortTable_Object = MibTable
rsdmPortTable = _RsdmPortTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 7)
)
if mibBuilder.loadTexts:
    rsdmPortTable.setStatus("mandatory")
_RsdmPortEntry_Object = MibTableRow
rsdmPortEntry = _RsdmPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 7, 1)
)
rsdmPortEntry.setIndexNames(
    (0, "LUXN-MIB", "rsdmPortCardShelf"),
    (0, "LUXN-MIB", "rsdmPortCardSlot"),
    (0, "LUXN-MIB", "rsdmPortType"),
)
if mibBuilder.loadTexts:
    rsdmPortEntry.setStatus("mandatory")
_RsdmPortCardShelf_Type = CardShelf
_RsdmPortCardShelf_Object = MibTableColumn
rsdmPortCardShelf = _RsdmPortCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 7, 1, 1),
    _RsdmPortCardShelf_Type()
)
rsdmPortCardShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmPortCardShelf.setStatus("mandatory")
_RsdmPortCardSlot_Type = SlotInput
_RsdmPortCardSlot_Object = MibTableColumn
rsdmPortCardSlot = _RsdmPortCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 7, 1, 2),
    _RsdmPortCardSlot_Type()
)
rsdmPortCardSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmPortCardSlot.setStatus("mandatory")


class _RsdmPortType_Type(Integer32):
    """Custom type rsdmPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("linkEast", 1),
          ("linkRx", 3),
          ("linkTx", 4),
          ("linkWest", 2))
    )


_RsdmPortType_Type.__name__ = "Integer32"
_RsdmPortType_Object = MibTableColumn
rsdmPortType = _RsdmPortType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 7, 1, 3),
    _RsdmPortType_Type()
)
rsdmPortType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmPortType.setStatus("mandatory")
_RsdmConnCardType_Type = CardType
_RsdmConnCardType_Object = MibTableColumn
rsdmConnCardType = _RsdmConnCardType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 7, 1, 4),
    _RsdmConnCardType_Type()
)
rsdmConnCardType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmConnCardType.setStatus("mandatory")
_RsdmConnPort_Type = Integer32
_RsdmConnPort_Object = MibTableColumn
rsdmConnPort = _RsdmConnPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 7, 1, 5),
    _RsdmConnPort_Type()
)
rsdmConnPort.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmConnPort.setStatus("mandatory")
_RsdmConnShelf_Type = ShelfInput
_RsdmConnShelf_Object = MibTableColumn
rsdmConnShelf = _RsdmConnShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 7, 1, 6),
    _RsdmConnShelf_Type()
)
rsdmConnShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmConnShelf.setStatus("mandatory")
_RsdmConnSlot_Type = SlotInput
_RsdmConnSlot_Object = MibTableColumn
rsdmConnSlot = _RsdmConnSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 13, 7, 1, 7),
    _RsdmConnSlot_Type()
)
rsdmConnSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmConnSlot.setStatus("mandatory")
_Rtdm_ObjectIdentity = ObjectIdentity
rtdm = _Rtdm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14)
)
_RtdmBootPromVer_Type = VersionString
_RtdmBootPromVer_Object = MibScalar
rtdmBootPromVer = _RtdmBootPromVer_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 1),
    _RtdmBootPromVer_Type()
)
rtdmBootPromVer.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmBootPromVer.setStatus("mandatory")


class _RtdmROMSize_Type(Integer32):
    """Custom type rtdmROMSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_RtdmROMSize_Type.__name__ = "Integer32"
_RtdmROMSize_Object = MibScalar
rtdmROMSize = _RtdmROMSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 2),
    _RtdmROMSize_Type()
)
rtdmROMSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmROMSize.setStatus("mandatory")


class _RtdmNumSubDiv_Type(Integer32):
    """Custom type rtdmNumSubDiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_RtdmNumSubDiv_Type.__name__ = "Integer32"
_RtdmNumSubDiv_Object = MibScalar
rtdmNumSubDiv = _RtdmNumSubDiv_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 3),
    _RtdmNumSubDiv_Type()
)
rtdmNumSubDiv.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmNumSubDiv.setStatus("mandatory")
_RtdmSubDivTable_Object = MibTable
rtdmSubDivTable = _RtdmSubDivTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 4)
)
if mibBuilder.loadTexts:
    rtdmSubDivTable.setStatus("mandatory")
_RtdmSubDivEntry_Object = MibTableRow
rtdmSubDivEntry = _RtdmSubDivEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 4, 1)
)
rtdmSubDivEntry.setIndexNames(
    (0, "LUXN-MIB", "rtdmSubDivIndex"),
)
if mibBuilder.loadTexts:
    rtdmSubDivEntry.setStatus("mandatory")


class _RtdmSubDivIndex_Type(Integer32):
    """Custom type rtdmSubDivIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_RtdmSubDivIndex_Type.__name__ = "Integer32"
_RtdmSubDivIndex_Object = MibTableColumn
rtdmSubDivIndex = _RtdmSubDivIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 4, 1, 1),
    _RtdmSubDivIndex_Type()
)
rtdmSubDivIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmSubDivIndex.setStatus("mandatory")


class _RtdmSubDivDescr_Type(DisplayString):
    """Custom type rtdmSubDivDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RtdmSubDivDescr_Type.__name__ = "DisplayString"
_RtdmSubDivDescr_Object = MibTableColumn
rtdmSubDivDescr = _RtdmSubDivDescr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 4, 1, 2),
    _RtdmSubDivDescr_Type()
)
rtdmSubDivDescr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmSubDivDescr.setStatus("mandatory")


class _RtdmSubDivSize_Type(Integer32):
    """Custom type rtdmSubDivSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_RtdmSubDivSize_Type.__name__ = "Integer32"
_RtdmSubDivSize_Object = MibTableColumn
rtdmSubDivSize = _RtdmSubDivSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 4, 1, 3),
    _RtdmSubDivSize_Type()
)
rtdmSubDivSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmSubDivSize.setStatus("mandatory")


class _RtdmSubDivOffset_Type(OctetString):
    """Custom type rtdmSubDivOffset based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_RtdmSubDivOffset_Type.__name__ = "OctetString"
_RtdmSubDivOffset_Object = MibTableColumn
rtdmSubDivOffset = _RtdmSubDivOffset_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 4, 1, 4),
    _RtdmSubDivOffset_Type()
)
rtdmSubDivOffset.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmSubDivOffset.setStatus("mandatory")
_RtdmNumber_Type = Integer32
_RtdmNumber_Object = MibScalar
rtdmNumber = _RtdmNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 5),
    _RtdmNumber_Type()
)
rtdmNumber.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmNumber.setStatus("mandatory")
_RtdmTable_Object = MibTable
rtdmTable = _RtdmTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6)
)
if mibBuilder.loadTexts:
    rtdmTable.setStatus("mandatory")
_RtdmEntry_Object = MibTableRow
rtdmEntry = _RtdmEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1)
)
rtdmEntry.setIndexNames(
    (0, "LUXN-MIB", "rtdmCardLocation"),
    (0, "LUXN-MIB", "rtdmCardShelf"),
    (0, "LUXN-MIB", "rtdmCardSlot"),
)
if mibBuilder.loadTexts:
    rtdmEntry.setStatus("mandatory")
_RtdmCardLocation_Type = CardLocation
_RtdmCardLocation_Object = MibTableColumn
rtdmCardLocation = _RtdmCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 1),
    _RtdmCardLocation_Type()
)
rtdmCardLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmCardLocation.setStatus("mandatory")
_RtdmCardShelf_Type = CardShelf
_RtdmCardShelf_Object = MibTableColumn
rtdmCardShelf = _RtdmCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 2),
    _RtdmCardShelf_Type()
)
rtdmCardShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmCardShelf.setStatus("mandatory")
_RtdmCardSlot_Type = SlotInput
_RtdmCardSlot_Object = MibTableColumn
rtdmCardSlot = _RtdmCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 3),
    _RtdmCardSlot_Type()
)
rtdmCardSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmCardSlot.setStatus("mandatory")
_RtdmModelNum_Type = DisplayString
_RtdmModelNum_Object = MibTableColumn
rtdmModelNum = _RtdmModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 4),
    _RtdmModelNum_Type()
)
rtdmModelNum.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmModelNum.setStatus("mandatory")
_RtdmOpticsMfgDate_Type = DateAndTime
_RtdmOpticsMfgDate_Object = MibTableColumn
rtdmOpticsMfgDate = _RtdmOpticsMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 5),
    _RtdmOpticsMfgDate_Type()
)
rtdmOpticsMfgDate.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmOpticsMfgDate.setStatus("mandatory")
_RtdmSerialNum_Type = SerialString
_RtdmSerialNum_Object = MibTableColumn
rtdmSerialNum = _RtdmSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 6),
    _RtdmSerialNum_Type()
)
rtdmSerialNum.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmSerialNum.setStatus("mandatory")


class _RtdmModelType_Type(Integer32):
    """Custom type rtdmModelType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            18
        )
    )
    namedValues = NamedValues(
        ("rtdm", 18)
    )


_RtdmModelType_Type.__name__ = "Integer32"
_RtdmModelType_Object = MibTableColumn
rtdmModelType = _RtdmModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 7),
    _RtdmModelType_Type()
)
rtdmModelType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmModelType.setStatus("mandatory")
_RtdmHWName_Type = CardName
_RtdmHWName_Object = MibTableColumn
rtdmHWName = _RtdmHWName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 8),
    _RtdmHWName_Type()
)
rtdmHWName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmHWName.setStatus("mandatory")
_RtdmFWVersionID_Type = VersionString
_RtdmFWVersionID_Object = MibTableColumn
rtdmFWVersionID = _RtdmFWVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 9),
    _RtdmFWVersionID_Type()
)
rtdmFWVersionID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmFWVersionID.setStatus("mandatory")
_RtdmCardName_Type = CardName
_RtdmCardName_Object = MibTableColumn
rtdmCardName = _RtdmCardName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 10),
    _RtdmCardName_Type()
)
rtdmCardName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmCardName.setStatus("mandatory")
_RtdmFWName_Type = DisplayString
_RtdmFWName_Object = MibTableColumn
rtdmFWName = _RtdmFWName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 11),
    _RtdmFWName_Type()
)
rtdmFWName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmFWName.setStatus("mandatory")
_RtdmFWDate_Type = DateAndTime
_RtdmFWDate_Object = MibTableColumn
rtdmFWDate = _RtdmFWDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 12),
    _RtdmFWDate_Type()
)
rtdmFWDate.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmFWDate.setStatus("mandatory")
_RtdmHWVersionID_Type = VersionString
_RtdmHWVersionID_Object = MibTableColumn
rtdmHWVersionID = _RtdmHWVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 13),
    _RtdmHWVersionID_Type()
)
rtdmHWVersionID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmHWVersionID.setStatus("mandatory")
_RtdmHWDate_Type = DateAndTime
_RtdmHWDate_Object = MibTableColumn
rtdmHWDate = _RtdmHWDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 14),
    _RtdmHWDate_Type()
)
rtdmHWDate.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmHWDate.setStatus("mandatory")
_RtdmSetState_Type = RebootType
_RtdmSetState_Object = MibTableColumn
rtdmSetState = _RtdmSetState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 15),
    _RtdmSetState_Type()
)
rtdmSetState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmSetState.setStatus("mandatory")
_RtdmCommonEInsertionLoss_Type = DisplayString
_RtdmCommonEInsertionLoss_Object = MibTableColumn
rtdmCommonEInsertionLoss = _RtdmCommonEInsertionLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 16),
    _RtdmCommonEInsertionLoss_Type()
)
rtdmCommonEInsertionLoss.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmCommonEInsertionLoss.setStatus("mandatory")
_RtdmCommonWInsertionLoss_Type = DisplayString
_RtdmCommonWInsertionLoss_Object = MibTableColumn
rtdmCommonWInsertionLoss = _RtdmCommonWInsertionLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 17),
    _RtdmCommonWInsertionLoss_Type()
)
rtdmCommonWInsertionLoss.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmCommonWInsertionLoss.setStatus("mandatory")
_RtdmMonEastInsertionLoss_Type = DisplayString
_RtdmMonEastInsertionLoss_Object = MibTableColumn
rtdmMonEastInsertionLoss = _RtdmMonEastInsertionLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 18),
    _RtdmMonEastInsertionLoss_Type()
)
rtdmMonEastInsertionLoss.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmMonEastInsertionLoss.setStatus("mandatory")
_RtdmMonWestInsertionLoss_Type = DisplayString
_RtdmMonWestInsertionLoss_Object = MibTableColumn
rtdmMonWestInsertionLoss = _RtdmMonWestInsertionLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 19),
    _RtdmMonWestInsertionLoss_Type()
)
rtdmMonWestInsertionLoss.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmMonWestInsertionLoss.setStatus("mandatory")
_RtdmPathID_Type = PathIdName
_RtdmPathID_Object = MibTableColumn
rtdmPathID = _RtdmPathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 20),
    _RtdmPathID_Type()
)
rtdmPathID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmPathID.setStatus("mandatory")


class _RtdmAdminState_Type(Integer32):
    """Custom type rtdmAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("na", 3))
    )


_RtdmAdminState_Type.__name__ = "Integer32"
_RtdmAdminState_Object = MibTableColumn
rtdmAdminState = _RtdmAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 21),
    _RtdmAdminState_Type()
)
rtdmAdminState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmAdminState.setStatus("mandatory")
_RtdmPortTable_Object = MibTable
rtdmPortTable = _RtdmPortTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 7)
)
if mibBuilder.loadTexts:
    rtdmPortTable.setStatus("mandatory")
_RtdmPortEntry_Object = MibTableRow
rtdmPortEntry = _RtdmPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 7, 1)
)
rtdmPortEntry.setIndexNames(
    (0, "LUXN-MIB", "rtdmPortCardShelf"),
    (0, "LUXN-MIB", "rtdmPortCardSlot"),
    (0, "LUXN-MIB", "rtdmPortType"),
)
if mibBuilder.loadTexts:
    rtdmPortEntry.setStatus("mandatory")
_RtdmPortCardShelf_Type = CardShelf
_RtdmPortCardShelf_Object = MibTableColumn
rtdmPortCardShelf = _RtdmPortCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 7, 1, 1),
    _RtdmPortCardShelf_Type()
)
rtdmPortCardShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmPortCardShelf.setStatus("mandatory")
_RtdmPortCardSlot_Type = SlotInput
_RtdmPortCardSlot_Object = MibTableColumn
rtdmPortCardSlot = _RtdmPortCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 7, 1, 2),
    _RtdmPortCardSlot_Type()
)
rtdmPortCardSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmPortCardSlot.setStatus("mandatory")


class _RtdmPortType_Type(Integer32):
    """Custom type rtdmPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("localRx", 1)
    )


_RtdmPortType_Type.__name__ = "Integer32"
_RtdmPortType_Object = MibTableColumn
rtdmPortType = _RtdmPortType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 7, 1, 3),
    _RtdmPortType_Type()
)
rtdmPortType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmPortType.setStatus("mandatory")


class _RtdmConnCardType_Type(Integer32):
    """Custom type rtdmConnCardType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30),
    )


_RtdmConnCardType_Type.__name__ = "Integer32"
_RtdmConnCardType_Object = MibTableColumn
rtdmConnCardType = _RtdmConnCardType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 7, 1, 4),
    _RtdmConnCardType_Type()
)
rtdmConnCardType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmConnCardType.setStatus("mandatory")
_RtdmConnPort_Type = Integer32
_RtdmConnPort_Object = MibTableColumn
rtdmConnPort = _RtdmConnPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 7, 1, 5),
    _RtdmConnPort_Type()
)
rtdmConnPort.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmConnPort.setStatus("mandatory")
_RtdmConnShelf_Type = ShelfInput
_RtdmConnShelf_Object = MibTableColumn
rtdmConnShelf = _RtdmConnShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 7, 1, 6),
    _RtdmConnShelf_Type()
)
rtdmConnShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmConnShelf.setStatus("mandatory")
_RtdmConnSlot_Type = SlotInput
_RtdmConnSlot_Object = MibTableColumn
rtdmConnSlot = _RtdmConnSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 14, 7, 1, 7),
    _RtdmConnSlot_Type()
)
rtdmConnSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmConnSlot.setStatus("mandatory")
_Osam_ObjectIdentity = ObjectIdentity
osam = _Osam_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15)
)
_OsamBootPromVer_Type = VersionString
_OsamBootPromVer_Object = MibScalar
osamBootPromVer = _OsamBootPromVer_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 1),
    _OsamBootPromVer_Type()
)
osamBootPromVer.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    osamBootPromVer.setStatus("mandatory")


class _OsamROMSize_Type(Integer32):
    """Custom type osamROMSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_OsamROMSize_Type.__name__ = "Integer32"
_OsamROMSize_Object = MibScalar
osamROMSize = _OsamROMSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 2),
    _OsamROMSize_Type()
)
osamROMSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    osamROMSize.setStatus("mandatory")


class _OsamNumSubDiv_Type(Integer32):
    """Custom type osamNumSubDiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_OsamNumSubDiv_Type.__name__ = "Integer32"
_OsamNumSubDiv_Object = MibScalar
osamNumSubDiv = _OsamNumSubDiv_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 3),
    _OsamNumSubDiv_Type()
)
osamNumSubDiv.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    osamNumSubDiv.setStatus("mandatory")
_OsamSubDivTable_Object = MibTable
osamSubDivTable = _OsamSubDivTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 4)
)
if mibBuilder.loadTexts:
    osamSubDivTable.setStatus("mandatory")
_OsamSubDivEntry_Object = MibTableRow
osamSubDivEntry = _OsamSubDivEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 4, 1)
)
osamSubDivEntry.setIndexNames(
    (0, "LUXN-MIB", "osamSubDivIndex"),
)
if mibBuilder.loadTexts:
    osamSubDivEntry.setStatus("mandatory")


class _OsamSubDivIndex_Type(Integer32):
    """Custom type osamSubDivIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_OsamSubDivIndex_Type.__name__ = "Integer32"
_OsamSubDivIndex_Object = MibTableColumn
osamSubDivIndex = _OsamSubDivIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 4, 1, 1),
    _OsamSubDivIndex_Type()
)
osamSubDivIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    osamSubDivIndex.setStatus("mandatory")


class _OsamSubDivDescr_Type(DisplayString):
    """Custom type osamSubDivDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_OsamSubDivDescr_Type.__name__ = "DisplayString"
_OsamSubDivDescr_Object = MibTableColumn
osamSubDivDescr = _OsamSubDivDescr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 4, 1, 2),
    _OsamSubDivDescr_Type()
)
osamSubDivDescr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    osamSubDivDescr.setStatus("mandatory")


class _OsamSubDivSize_Type(Integer32):
    """Custom type osamSubDivSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_OsamSubDivSize_Type.__name__ = "Integer32"
_OsamSubDivSize_Object = MibTableColumn
osamSubDivSize = _OsamSubDivSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 4, 1, 3),
    _OsamSubDivSize_Type()
)
osamSubDivSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    osamSubDivSize.setStatus("mandatory")


class _OsamSubDivOffset_Type(OctetString):
    """Custom type osamSubDivOffset based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_OsamSubDivOffset_Type.__name__ = "OctetString"
_OsamSubDivOffset_Object = MibTableColumn
osamSubDivOffset = _OsamSubDivOffset_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 4, 1, 4),
    _OsamSubDivOffset_Type()
)
osamSubDivOffset.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    osamSubDivOffset.setStatus("mandatory")


class _OsamNumber_Type(Integer32):
    """Custom type osamNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 32),
    )


_OsamNumber_Type.__name__ = "Integer32"
_OsamNumber_Object = MibScalar
osamNumber = _OsamNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 5),
    _OsamNumber_Type()
)
osamNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamNumber.setStatus("mandatory")
_OsamTable_Object = MibTable
osamTable = _OsamTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6)
)
if mibBuilder.loadTexts:
    osamTable.setStatus("mandatory")
_OsamEntry_Object = MibTableRow
osamEntry = _OsamEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1)
)
osamEntry.setIndexNames(
    (0, "LUXN-MIB", "osamCardLocation"),
    (0, "LUXN-MIB", "osamCardShelf"),
    (0, "LUXN-MIB", "osamCardSlot"),
)
if mibBuilder.loadTexts:
    osamEntry.setStatus("mandatory")
_OsamCardLocation_Type = CardLocation
_OsamCardLocation_Object = MibTableColumn
osamCardLocation = _OsamCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 1),
    _OsamCardLocation_Type()
)
osamCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamCardLocation.setStatus("mandatory")
_OsamCardShelf_Type = CardShelf
_OsamCardShelf_Object = MibTableColumn
osamCardShelf = _OsamCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 2),
    _OsamCardShelf_Type()
)
osamCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamCardShelf.setStatus("mandatory")


class _OsamCardSlot_Type(Integer32):
    """Custom type osamCardSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 16),
    )


_OsamCardSlot_Type.__name__ = "Integer32"
_OsamCardSlot_Object = MibTableColumn
osamCardSlot = _OsamCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 3),
    _OsamCardSlot_Type()
)
osamCardSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    osamCardSlot.setStatus("mandatory")
_OsamModelNum_Type = ModelNum
_OsamModelNum_Object = MibTableColumn
osamModelNum = _OsamModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 4),
    _OsamModelNum_Type()
)
osamModelNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamModelNum.setStatus("mandatory")
_OsamSerialNum_Type = SerialString
_OsamSerialNum_Object = MibTableColumn
osamSerialNum = _OsamSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 5),
    _OsamSerialNum_Type()
)
osamSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamSerialNum.setStatus("mandatory")
_OsamModelType_Type = CardType
_OsamModelType_Object = MibTableColumn
osamModelType = _OsamModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 6),
    _OsamModelType_Type()
)
osamModelType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamModelType.setStatus("mandatory")
_OsamHWName_Type = CardName
_OsamHWName_Object = MibTableColumn
osamHWName = _OsamHWName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 7),
    _OsamHWName_Type()
)
osamHWName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamHWName.setStatus("mandatory")
_OsamHWVersionID_Type = VersionString
_OsamHWVersionID_Object = MibTableColumn
osamHWVersionID = _OsamHWVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 8),
    _OsamHWVersionID_Type()
)
osamHWVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamHWVersionID.setStatus("mandatory")
_OsamHWDate_Type = DateAndTime
_OsamHWDate_Object = MibTableColumn
osamHWDate = _OsamHWDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 9),
    _OsamHWDate_Type()
)
osamHWDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamHWDate.setStatus("mandatory")
_OsamFWName_Type = CardName
_OsamFWName_Object = MibTableColumn
osamFWName = _OsamFWName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 10),
    _OsamFWName_Type()
)
osamFWName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamFWName.setStatus("mandatory")
_OsamFWVersionID_Type = VersionString
_OsamFWVersionID_Object = MibTableColumn
osamFWVersionID = _OsamFWVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 11),
    _OsamFWVersionID_Type()
)
osamFWVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamFWVersionID.setStatus("mandatory")
_OsamFWDate_Type = DateAndTime
_OsamFWDate_Object = MibTableColumn
osamFWDate = _OsamFWDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 12),
    _OsamFWDate_Type()
)
osamFWDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamFWDate.setStatus("mandatory")
_OsamCardName_Type = CardName
_OsamCardName_Object = MibTableColumn
osamCardName = _OsamCardName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 13),
    _OsamCardName_Type()
)
osamCardName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    osamCardName.setStatus("mandatory")
_OsamSetState_Type = RebootType
_OsamSetState_Object = MibTableColumn
osamSetState = _OsamSetState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 14),
    _OsamSetState_Type()
)
osamSetState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    osamSetState.setStatus("mandatory")
_OsamLaserState_Type = FlagType
_OsamLaserState_Object = MibTableColumn
osamLaserState = _OsamLaserState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 15),
    _OsamLaserState_Type()
)
osamLaserState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamLaserState.setStatus("mandatory")


class _OsamOperationMode_Type(Integer32):
    """Custom type osamOperationMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("currentControlled", 1),
          ("gainControlled", 2),
          ("powerControlled", 3))
    )


_OsamOperationMode_Type.__name__ = "Integer32"
_OsamOperationMode_Object = MibTableColumn
osamOperationMode = _OsamOperationMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 16),
    _OsamOperationMode_Type()
)
osamOperationMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    osamOperationMode.setStatus("mandatory")


class _OsamLaserBiasCurrent_Type(Integer32):
    """Custom type osamLaserBiasCurrent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(40, 200),
    )


_OsamLaserBiasCurrent_Type.__name__ = "Integer32"
_OsamLaserBiasCurrent_Object = MibTableColumn
osamLaserBiasCurrent = _OsamLaserBiasCurrent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 17),
    _OsamLaserBiasCurrent_Type()
)
osamLaserBiasCurrent.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    osamLaserBiasCurrent.setStatus("mandatory")


class _OsamAmplifierGain_Type(Integer32):
    """Custom type osamAmplifierGain based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 30),
    )


_OsamAmplifierGain_Type.__name__ = "Integer32"
_OsamAmplifierGain_Object = MibTableColumn
osamAmplifierGain = _OsamAmplifierGain_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 18),
    _OsamAmplifierGain_Type()
)
osamAmplifierGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    osamAmplifierGain.setStatus("mandatory")


class _OsamConfigCommit_Type(Integer32):
    """Custom type osamConfigCommit based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("save", 2))
    )


_OsamConfigCommit_Type.__name__ = "Integer32"
_OsamConfigCommit_Object = MibTableColumn
osamConfigCommit = _OsamConfigCommit_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 19),
    _OsamConfigCommit_Type()
)
osamConfigCommit.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    osamConfigCommit.setStatus("mandatory")


class _OsamNoiseFigure_Type(Integer32):
    """Custom type osamNoiseFigure based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 10),
    )


_OsamNoiseFigure_Type.__name__ = "Integer32"
_OsamNoiseFigure_Object = MibTableColumn
osamNoiseFigure = _OsamNoiseFigure_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 20),
    _OsamNoiseFigure_Type()
)
osamNoiseFigure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamNoiseFigure.setStatus("mandatory")
_OsamPathID_Type = PathIdName
_OsamPathID_Object = MibTableColumn
osamPathID = _OsamPathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 21),
    _OsamPathID_Type()
)
osamPathID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    osamPathID.setStatus("mandatory")


class _OsamAdminState_Type(Integer32):
    """Custom type osamAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("na", 3))
    )


_OsamAdminState_Type.__name__ = "Integer32"
_OsamAdminState_Object = MibTableColumn
osamAdminState = _OsamAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 22),
    _OsamAdminState_Type()
)
osamAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    osamAdminState.setStatus("mandatory")
_Osam2NoiseFigure_Type = DisplayString
_Osam2NoiseFigure_Object = MibTableColumn
osam2NoiseFigure = _Osam2NoiseFigure_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 23),
    _Osam2NoiseFigure_Type()
)
osam2NoiseFigure.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osam2NoiseFigure.setStatus("mandatory")
_Osam2GainReq_Type = DisplayString
_Osam2GainReq_Object = MibTableColumn
osam2GainReq = _Osam2GainReq_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 24),
    _Osam2GainReq_Type()
)
osam2GainReq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    osam2GainReq.setStatus("mandatory")
_Osam2OpPowerReq_Type = DisplayString
_Osam2OpPowerReq_Object = MibTableColumn
osam2OpPowerReq = _Osam2OpPowerReq_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 25),
    _Osam2OpPowerReq_Type()
)
osam2OpPowerReq.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    osam2OpPowerReq.setStatus("mandatory")
_OsamCleiNum_Type = DisplayString
_OsamCleiNum_Object = MibTableColumn
osamCleiNum = _OsamCleiNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 26),
    _OsamCleiNum_Type()
)
osamCleiNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamCleiNum.setStatus("mandatory")
_OsamNumPorts_Type = Integer32
_OsamNumPorts_Object = MibTableColumn
osamNumPorts = _OsamNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 27),
    _OsamNumPorts_Type()
)
osamNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamNumPorts.setStatus("mandatory")
_OsamPortTable_Object = MibTable
osamPortTable = _OsamPortTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 7)
)
if mibBuilder.loadTexts:
    osamPortTable.setStatus("mandatory")
_OsamPortEntry_Object = MibTableRow
osamPortEntry = _OsamPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1)
)
osamPortEntry.setIndexNames(
    (0, "LUXN-MIB", "osamPortCardShelf"),
    (0, "LUXN-MIB", "osamPortCardSlot"),
    (0, "LUXN-MIB", "osamPortType"),
)
if mibBuilder.loadTexts:
    osamPortEntry.setStatus("mandatory")
_OsamPortCardShelf_Type = CardShelf
_OsamPortCardShelf_Object = MibTableColumn
osamPortCardShelf = _OsamPortCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 1),
    _OsamPortCardShelf_Type()
)
osamPortCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamPortCardShelf.setStatus("mandatory")
_OsamPortCardSlot_Type = SlotInput
_OsamPortCardSlot_Object = MibTableColumn
osamPortCardSlot = _OsamPortCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 2),
    _OsamPortCardSlot_Type()
)
osamPortCardSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamPortCardSlot.setStatus("mandatory")


class _OsamPortType_Type(Integer32):
    """Custom type osamPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("in", 1),
          ("out", 2))
    )


_OsamPortType_Type.__name__ = "Integer32"
_OsamPortType_Object = MibTableColumn
osamPortType = _OsamPortType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 3),
    _OsamPortType_Type()
)
osamPortType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    osamPortType.setStatus("mandatory")
_OsamConnCardType_Type = CardType
_OsamConnCardType_Object = MibTableColumn
osamConnCardType = _OsamConnCardType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 4),
    _OsamConnCardType_Type()
)
osamConnCardType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    osamConnCardType.setStatus("mandatory")
_OsamConnPort_Type = Integer32
_OsamConnPort_Object = MibTableColumn
osamConnPort = _OsamConnPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 5),
    _OsamConnPort_Type()
)
osamConnPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    osamConnPort.setStatus("mandatory")
_OsamConnShelf_Type = ShelfInput
_OsamConnShelf_Object = MibTableColumn
osamConnShelf = _OsamConnShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 6),
    _OsamConnShelf_Type()
)
osamConnShelf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    osamConnShelf.setStatus("mandatory")
_OsamConnSlot_Type = SlotInput
_OsamConnSlot_Object = MibTableColumn
osamConnSlot = _OsamConnSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 7),
    _OsamConnSlot_Type()
)
osamConnSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    osamConnSlot.setStatus("mandatory")
_OsamPortCardType_Type = CardType
_OsamPortCardType_Object = MibTableColumn
osamPortCardType = _OsamPortCardType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 8),
    _OsamPortCardType_Type()
)
osamPortCardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamPortCardType.setStatus("mandatory")
_OsamConnLocation_Type = CardLocation
_OsamConnLocation_Object = MibTableColumn
osamConnLocation = _OsamConnLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 9),
    _OsamConnLocation_Type()
)
osamConnLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamConnLocation.setStatus("mandatory")
_OsamConnChassisID_Type = DisplayString
_OsamConnChassisID_Object = MibTableColumn
osamConnChassisID = _OsamConnChassisID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 10),
    _OsamConnChassisID_Type()
)
osamConnChassisID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamConnChassisID.setStatus("mandatory")
_OsamConnSystemName_Type = DisplayString
_OsamConnSystemName_Object = MibTableColumn
osamConnSystemName = _OsamConnSystemName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 11),
    _OsamConnSystemName_Type()
)
osamConnSystemName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamConnSystemName.setStatus("mandatory")
_OsamConnIpAddress_Type = IpAddress
_OsamConnIpAddress_Object = MibTableColumn
osamConnIpAddress = _OsamConnIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 12),
    _OsamConnIpAddress_Type()
)
osamConnIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamConnIpAddress.setStatus("mandatory")
_Rsm_ObjectIdentity = ObjectIdentity
rsm = _Rsm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16)
)
_RsmBootPromVer_Type = VersionString
_RsmBootPromVer_Object = MibScalar
rsmBootPromVer = _RsmBootPromVer_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 1),
    _RsmBootPromVer_Type()
)
rsmBootPromVer.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsmBootPromVer.setStatus("mandatory")


class _RsmROMSize_Type(Integer32):
    """Custom type rsmROMSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_RsmROMSize_Type.__name__ = "Integer32"
_RsmROMSize_Object = MibScalar
rsmROMSize = _RsmROMSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 2),
    _RsmROMSize_Type()
)
rsmROMSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsmROMSize.setStatus("mandatory")


class _RsmNumSubDiv_Type(Integer32):
    """Custom type rsmNumSubDiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_RsmNumSubDiv_Type.__name__ = "Integer32"
_RsmNumSubDiv_Object = MibScalar
rsmNumSubDiv = _RsmNumSubDiv_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 3),
    _RsmNumSubDiv_Type()
)
rsmNumSubDiv.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsmNumSubDiv.setStatus("mandatory")
_RsmSubDivTable_Object = MibTable
rsmSubDivTable = _RsmSubDivTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 4)
)
if mibBuilder.loadTexts:
    rsmSubDivTable.setStatus("mandatory")
_RsmSubDivEntry_Object = MibTableRow
rsmSubDivEntry = _RsmSubDivEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 4, 1)
)
rsmSubDivEntry.setIndexNames(
    (0, "LUXN-MIB", "rsmSubDivIndex"),
)
if mibBuilder.loadTexts:
    rsmSubDivEntry.setStatus("mandatory")


class _RsmSubDivIndex_Type(Integer32):
    """Custom type rsmSubDivIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_RsmSubDivIndex_Type.__name__ = "Integer32"
_RsmSubDivIndex_Object = MibTableColumn
rsmSubDivIndex = _RsmSubDivIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 4, 1, 1),
    _RsmSubDivIndex_Type()
)
rsmSubDivIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsmSubDivIndex.setStatus("mandatory")


class _RsmSubDivDescr_Type(DisplayString):
    """Custom type rsmSubDivDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_RsmSubDivDescr_Type.__name__ = "DisplayString"
_RsmSubDivDescr_Object = MibTableColumn
rsmSubDivDescr = _RsmSubDivDescr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 4, 1, 2),
    _RsmSubDivDescr_Type()
)
rsmSubDivDescr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsmSubDivDescr.setStatus("mandatory")


class _RsmSubDivSize_Type(Integer32):
    """Custom type rsmSubDivSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_RsmSubDivSize_Type.__name__ = "Integer32"
_RsmSubDivSize_Object = MibTableColumn
rsmSubDivSize = _RsmSubDivSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 4, 1, 3),
    _RsmSubDivSize_Type()
)
rsmSubDivSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsmSubDivSize.setStatus("mandatory")


class _RsmSubDivOffset_Type(OctetString):
    """Custom type rsmSubDivOffset based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_RsmSubDivOffset_Type.__name__ = "OctetString"
_RsmSubDivOffset_Object = MibTableColumn
rsmSubDivOffset = _RsmSubDivOffset_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 4, 1, 4),
    _RsmSubDivOffset_Type()
)
rsmSubDivOffset.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsmSubDivOffset.setStatus("mandatory")
_RsmNumber_Type = Integer32
_RsmNumber_Object = MibScalar
rsmNumber = _RsmNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 5),
    _RsmNumber_Type()
)
rsmNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmNumber.setStatus("mandatory")
_RsmTable_Object = MibTable
rsmTable = _RsmTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6)
)
if mibBuilder.loadTexts:
    rsmTable.setStatus("mandatory")
_RsmEntry_Object = MibTableRow
rsmEntry = _RsmEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1)
)
rsmEntry.setIndexNames(
    (0, "LUXN-MIB", "rsmCardLocation"),
    (0, "LUXN-MIB", "rsmCardShelf"),
    (0, "LUXN-MIB", "rsmCardSlot"),
)
if mibBuilder.loadTexts:
    rsmEntry.setStatus("mandatory")
_RsmCardLocation_Type = CardLocation
_RsmCardLocation_Object = MibTableColumn
rsmCardLocation = _RsmCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 1),
    _RsmCardLocation_Type()
)
rsmCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmCardLocation.setStatus("mandatory")
_RsmCardShelf_Type = CardShelf
_RsmCardShelf_Object = MibTableColumn
rsmCardShelf = _RsmCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 2),
    _RsmCardShelf_Type()
)
rsmCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmCardShelf.setStatus("mandatory")
_RsmCardSlot_Type = SlotInput
_RsmCardSlot_Object = MibTableColumn
rsmCardSlot = _RsmCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 3),
    _RsmCardSlot_Type()
)
rsmCardSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rsmCardSlot.setStatus("mandatory")
_RsmModelNum_Type = DisplayString
_RsmModelNum_Object = MibTableColumn
rsmModelNum = _RsmModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 4),
    _RsmModelNum_Type()
)
rsmModelNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmModelNum.setStatus("mandatory")
_RsmOpticsMfgDate_Type = DateAndTime
_RsmOpticsMfgDate_Object = MibTableColumn
rsmOpticsMfgDate = _RsmOpticsMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 5),
    _RsmOpticsMfgDate_Type()
)
rsmOpticsMfgDate.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsmOpticsMfgDate.setStatus("mandatory")
_RsmSerialNum_Type = SerialString
_RsmSerialNum_Object = MibTableColumn
rsmSerialNum = _RsmSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 6),
    _RsmSerialNum_Type()
)
rsmSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmSerialNum.setStatus("mandatory")
_RsmModelType_Type = CardType
_RsmModelType_Object = MibTableColumn
rsmModelType = _RsmModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 7),
    _RsmModelType_Type()
)
rsmModelType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmModelType.setStatus("mandatory")
_RsmHWName_Type = CardName
_RsmHWName_Object = MibTableColumn
rsmHWName = _RsmHWName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 8),
    _RsmHWName_Type()
)
rsmHWName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmHWName.setStatus("mandatory")
_RsmCardName_Type = CardName
_RsmCardName_Object = MibTableColumn
rsmCardName = _RsmCardName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 9),
    _RsmCardName_Type()
)
rsmCardName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rsmCardName.setStatus("mandatory")
_RsmFWName_Type = DisplayString
_RsmFWName_Object = MibTableColumn
rsmFWName = _RsmFWName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 10),
    _RsmFWName_Type()
)
rsmFWName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmFWName.setStatus("mandatory")
_RsmFWVersionID_Type = VersionString
_RsmFWVersionID_Object = MibTableColumn
rsmFWVersionID = _RsmFWVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 11),
    _RsmFWVersionID_Type()
)
rsmFWVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmFWVersionID.setStatus("mandatory")
_RsmFWDate_Type = DateAndTime
_RsmFWDate_Object = MibTableColumn
rsmFWDate = _RsmFWDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 12),
    _RsmFWDate_Type()
)
rsmFWDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmFWDate.setStatus("mandatory")
_RsmSetState_Type = RebootType
_RsmSetState_Object = MibTableColumn
rsmSetState = _RsmSetState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 13),
    _RsmSetState_Type()
)
rsmSetState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rsmSetState.setStatus("mandatory")
_RsmRxInsertionLoss_Type = DisplayString
_RsmRxInsertionLoss_Object = MibTableColumn
rsmRxInsertionLoss = _RsmRxInsertionLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 14),
    _RsmRxInsertionLoss_Type()
)
rsmRxInsertionLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmRxInsertionLoss.setStatus("mandatory")
_RsmRxComInsertionLoss_Type = DisplayString
_RsmRxComInsertionLoss_Object = MibTableColumn
rsmRxComInsertionLoss = _RsmRxComInsertionLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 15),
    _RsmRxComInsertionLoss_Type()
)
rsmRxComInsertionLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmRxComInsertionLoss.setStatus("mandatory")
_RsmWorkingWavelength_Type = Integer32
_RsmWorkingWavelength_Object = MibTableColumn
rsmWorkingWavelength = _RsmWorkingWavelength_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 16),
    _RsmWorkingWavelength_Type()
)
rsmWorkingWavelength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmWorkingWavelength.setStatus("mandatory")
_RsmLinkAPathID_Type = PathIdName
_RsmLinkAPathID_Object = MibTableColumn
rsmLinkAPathID = _RsmLinkAPathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 17),
    _RsmLinkAPathID_Type()
)
rsmLinkAPathID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rsmLinkAPathID.setStatus("mandatory")
_RsmLinkBPathID_Type = PathIdName
_RsmLinkBPathID_Object = MibTableColumn
rsmLinkBPathID = _RsmLinkBPathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 18),
    _RsmLinkBPathID_Type()
)
rsmLinkBPathID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rsmLinkBPathID.setStatus("mandatory")


class _RsmAdminState_Type(Integer32):
    """Custom type rsmAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("na", 3))
    )


_RsmAdminState_Type.__name__ = "Integer32"
_RsmAdminState_Object = MibTableColumn
rsmAdminState = _RsmAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 19),
    _RsmAdminState_Type()
)
rsmAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rsmAdminState.setStatus("mandatory")
_RsmCleiNum_Type = DisplayString
_RsmCleiNum_Object = MibTableColumn
rsmCleiNum = _RsmCleiNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 20),
    _RsmCleiNum_Type()
)
rsmCleiNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmCleiNum.setStatus("mandatory")
_RsmNumPorts_Type = Integer32
_RsmNumPorts_Object = MibTableColumn
rsmNumPorts = _RsmNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 21),
    _RsmNumPorts_Type()
)
rsmNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmNumPorts.setStatus("mandatory")
_RsmPortTable_Object = MibTable
rsmPortTable = _RsmPortTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 7)
)
if mibBuilder.loadTexts:
    rsmPortTable.setStatus("mandatory")
_RsmPortEntry_Object = MibTableRow
rsmPortEntry = _RsmPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 7, 1)
)
rsmPortEntry.setIndexNames(
    (0, "LUXN-MIB", "rsmPortCardShelf"),
    (0, "LUXN-MIB", "rsmPortCardSlot"),
    (0, "LUXN-MIB", "rsmPortType"),
)
if mibBuilder.loadTexts:
    rsmPortEntry.setStatus("mandatory")
_RsmPortCardShelf_Type = CardShelf
_RsmPortCardShelf_Object = MibTableColumn
rsmPortCardShelf = _RsmPortCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 7, 1, 1),
    _RsmPortCardShelf_Type()
)
rsmPortCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmPortCardShelf.setStatus("mandatory")
_RsmPortCardSlot_Type = SlotInput
_RsmPortCardSlot_Object = MibTableColumn
rsmPortCardSlot = _RsmPortCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 7, 1, 2),
    _RsmPortCardSlot_Type()
)
rsmPortCardSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmPortCardSlot.setStatus("mandatory")


class _RsmPortType_Type(Integer32):
    """Custom type rsmPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("localARx", 1),
          ("localATx", 2),
          ("localBRx", 3),
          ("localBTx", 4))
    )


_RsmPortType_Type.__name__ = "Integer32"
_RsmPortType_Object = MibTableColumn
rsmPortType = _RsmPortType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 7, 1, 3),
    _RsmPortType_Type()
)
rsmPortType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmPortType.setStatus("mandatory")
_RsmConnCardType_Type = CardType
_RsmConnCardType_Object = MibTableColumn
rsmConnCardType = _RsmConnCardType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 7, 1, 4),
    _RsmConnCardType_Type()
)
rsmConnCardType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rsmConnCardType.setStatus("mandatory")
_RsmConnShelf_Type = ShelfInput
_RsmConnShelf_Object = MibTableColumn
rsmConnShelf = _RsmConnShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 7, 1, 5),
    _RsmConnShelf_Type()
)
rsmConnShelf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rsmConnShelf.setStatus("mandatory")
_RsmConnSlot_Type = SlotInput
_RsmConnSlot_Object = MibTableColumn
rsmConnSlot = _RsmConnSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 7, 1, 6),
    _RsmConnSlot_Type()
)
rsmConnSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rsmConnSlot.setStatus("mandatory")
_RsmConnPort_Type = Integer32
_RsmConnPort_Object = MibTableColumn
rsmConnPort = _RsmConnPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 16, 7, 1, 7),
    _RsmConnPort_Type()
)
rsmConnPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    rsmConnPort.setStatus("mandatory")
_Upsm_ObjectIdentity = ObjectIdentity
upsm = _Upsm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17)
)
_UpsmBootPromVer_Type = VersionString
_UpsmBootPromVer_Object = MibScalar
upsmBootPromVer = _UpsmBootPromVer_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 1),
    _UpsmBootPromVer_Type()
)
upsmBootPromVer.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    upsmBootPromVer.setStatus("mandatory")


class _UpsmROMSize_Type(Integer32):
    """Custom type upsmROMSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_UpsmROMSize_Type.__name__ = "Integer32"
_UpsmROMSize_Object = MibScalar
upsmROMSize = _UpsmROMSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 2),
    _UpsmROMSize_Type()
)
upsmROMSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    upsmROMSize.setStatus("mandatory")


class _UpsmNumSubDiv_Type(Integer32):
    """Custom type upsmNumSubDiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_UpsmNumSubDiv_Type.__name__ = "Integer32"
_UpsmNumSubDiv_Object = MibScalar
upsmNumSubDiv = _UpsmNumSubDiv_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 3),
    _UpsmNumSubDiv_Type()
)
upsmNumSubDiv.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    upsmNumSubDiv.setStatus("mandatory")
_UpsmSubDivTable_Object = MibTable
upsmSubDivTable = _UpsmSubDivTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 4)
)
if mibBuilder.loadTexts:
    upsmSubDivTable.setStatus("mandatory")
_UpsmSubDivEntry_Object = MibTableRow
upsmSubDivEntry = _UpsmSubDivEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 4, 1)
)
upsmSubDivEntry.setIndexNames(
    (0, "LUXN-MIB", "upsmSubDivIndex"),
)
if mibBuilder.loadTexts:
    upsmSubDivEntry.setStatus("mandatory")


class _UpsmSubDivIndex_Type(Integer32):
    """Custom type upsmSubDivIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_UpsmSubDivIndex_Type.__name__ = "Integer32"
_UpsmSubDivIndex_Object = MibTableColumn
upsmSubDivIndex = _UpsmSubDivIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 4, 1, 1),
    _UpsmSubDivIndex_Type()
)
upsmSubDivIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    upsmSubDivIndex.setStatus("mandatory")


class _UpsmSubDivDescr_Type(DisplayString):
    """Custom type upsmSubDivDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_UpsmSubDivDescr_Type.__name__ = "DisplayString"
_UpsmSubDivDescr_Object = MibTableColumn
upsmSubDivDescr = _UpsmSubDivDescr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 4, 1, 2),
    _UpsmSubDivDescr_Type()
)
upsmSubDivDescr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    upsmSubDivDescr.setStatus("mandatory")


class _UpsmSubDivSize_Type(Integer32):
    """Custom type upsmSubDivSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_UpsmSubDivSize_Type.__name__ = "Integer32"
_UpsmSubDivSize_Object = MibTableColumn
upsmSubDivSize = _UpsmSubDivSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 4, 1, 3),
    _UpsmSubDivSize_Type()
)
upsmSubDivSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    upsmSubDivSize.setStatus("mandatory")


class _UpsmSubDivOffset_Type(OctetString):
    """Custom type upsmSubDivOffset based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_UpsmSubDivOffset_Type.__name__ = "OctetString"
_UpsmSubDivOffset_Object = MibTableColumn
upsmSubDivOffset = _UpsmSubDivOffset_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 4, 1, 4),
    _UpsmSubDivOffset_Type()
)
upsmSubDivOffset.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    upsmSubDivOffset.setStatus("mandatory")
_UpsmNumber_Type = Integer32
_UpsmNumber_Object = MibScalar
upsmNumber = _UpsmNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 5),
    _UpsmNumber_Type()
)
upsmNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmNumber.setStatus("mandatory")
_UpsmTable_Object = MibTable
upsmTable = _UpsmTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6)
)
if mibBuilder.loadTexts:
    upsmTable.setStatus("mandatory")
_UpsmEntry_Object = MibTableRow
upsmEntry = _UpsmEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1)
)
upsmEntry.setIndexNames(
    (0, "LUXN-MIB", "upsmCardLocation"),
    (0, "LUXN-MIB", "upsmCardShelf"),
    (0, "LUXN-MIB", "upsmCardSlot"),
)
if mibBuilder.loadTexts:
    upsmEntry.setStatus("mandatory")
_UpsmCardLocation_Type = CardLocation
_UpsmCardLocation_Object = MibTableColumn
upsmCardLocation = _UpsmCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 1),
    _UpsmCardLocation_Type()
)
upsmCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmCardLocation.setStatus("mandatory")
_UpsmCardShelf_Type = Integer32
_UpsmCardShelf_Object = MibTableColumn
upsmCardShelf = _UpsmCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 2),
    _UpsmCardShelf_Type()
)
upsmCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmCardShelf.setStatus("mandatory")
_UpsmCardSlot_Type = Integer32
_UpsmCardSlot_Object = MibTableColumn
upsmCardSlot = _UpsmCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 3),
    _UpsmCardSlot_Type()
)
upsmCardSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsmCardSlot.setStatus("mandatory")
_UpsmModelNum_Type = DisplayString
_UpsmModelNum_Object = MibTableColumn
upsmModelNum = _UpsmModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 4),
    _UpsmModelNum_Type()
)
upsmModelNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmModelNum.setStatus("mandatory")
_UpsmOpticsMfgDate_Type = DateAndTime
_UpsmOpticsMfgDate_Object = MibTableColumn
upsmOpticsMfgDate = _UpsmOpticsMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 5),
    _UpsmOpticsMfgDate_Type()
)
upsmOpticsMfgDate.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    upsmOpticsMfgDate.setStatus("mandatory")
_UpsmSerialNum_Type = SerialString
_UpsmSerialNum_Object = MibTableColumn
upsmSerialNum = _UpsmSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 6),
    _UpsmSerialNum_Type()
)
upsmSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmSerialNum.setStatus("mandatory")
_UpsmModelType_Type = CardType
_UpsmModelType_Object = MibTableColumn
upsmModelType = _UpsmModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 7),
    _UpsmModelType_Type()
)
upsmModelType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmModelType.setStatus("mandatory")
_UpsmHWName_Type = CardName
_UpsmHWName_Object = MibTableColumn
upsmHWName = _UpsmHWName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 8),
    _UpsmHWName_Type()
)
upsmHWName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmHWName.setStatus("mandatory")
_UpsmCardName_Type = CardName
_UpsmCardName_Object = MibTableColumn
upsmCardName = _UpsmCardName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 9),
    _UpsmCardName_Type()
)
upsmCardName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsmCardName.setStatus("mandatory")
_UpsmFWName_Type = DisplayString
_UpsmFWName_Object = MibTableColumn
upsmFWName = _UpsmFWName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 10),
    _UpsmFWName_Type()
)
upsmFWName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmFWName.setStatus("mandatory")
_UpsmFWVersionID_Type = VersionString
_UpsmFWVersionID_Object = MibTableColumn
upsmFWVersionID = _UpsmFWVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 11),
    _UpsmFWVersionID_Type()
)
upsmFWVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmFWVersionID.setStatus("mandatory")
_UpsmFWDate_Type = DateAndTime
_UpsmFWDate_Object = MibTableColumn
upsmFWDate = _UpsmFWDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 12),
    _UpsmFWDate_Type()
)
upsmFWDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmFWDate.setStatus("mandatory")
_UpsmSetState_Type = RebootType
_UpsmSetState_Object = MibTableColumn
upsmSetState = _UpsmSetState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 13),
    _UpsmSetState_Type()
)
upsmSetState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsmSetState.setStatus("mandatory")
_UpsmRxInsertionLoss_Type = DisplayString
_UpsmRxInsertionLoss_Object = MibTableColumn
upsmRxInsertionLoss = _UpsmRxInsertionLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 14),
    _UpsmRxInsertionLoss_Type()
)
upsmRxInsertionLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmRxInsertionLoss.setStatus("mandatory")
_UpsmTxInsertionLoss_Type = DisplayString
_UpsmTxInsertionLoss_Object = MibTableColumn
upsmTxInsertionLoss = _UpsmTxInsertionLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 15),
    _UpsmTxInsertionLoss_Type()
)
upsmTxInsertionLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmTxInsertionLoss.setStatus("mandatory")


class _UpsmMarginForSwitch_Type(Integer32):
    """Custom type upsmMarginForSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-32, -6),
    )


_UpsmMarginForSwitch_Type.__name__ = "Integer32"
_UpsmMarginForSwitch_Object = MibTableColumn
upsmMarginForSwitch = _UpsmMarginForSwitch_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 16),
    _UpsmMarginForSwitch_Type()
)
upsmMarginForSwitch.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsmMarginForSwitch.setStatus("mandatory")


class _UpsmMinProtPowerForSwitch_Type(Integer32):
    """Custom type upsmMinProtPowerForSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-30, -5),
    )


_UpsmMinProtPowerForSwitch_Type.__name__ = "Integer32"
_UpsmMinProtPowerForSwitch_Object = MibTableColumn
upsmMinProtPowerForSwitch = _UpsmMinProtPowerForSwitch_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 17),
    _UpsmMinProtPowerForSwitch_Type()
)
upsmMinProtPowerForSwitch.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsmMinProtPowerForSwitch.setStatus("mandatory")
_UpsmDebounce_Type = Integer32
_UpsmDebounce_Object = MibTableColumn
upsmDebounce = _UpsmDebounce_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 18),
    _UpsmDebounce_Type()
)
upsmDebounce.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmDebounce.setStatus("mandatory")
_UpsmBlackOutTime_Type = Integer32
_UpsmBlackOutTime_Object = MibTableColumn
upsmBlackOutTime = _UpsmBlackOutTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 19),
    _UpsmBlackOutTime_Type()
)
upsmBlackOutTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmBlackOutTime.setStatus("mandatory")


class _UpsmSwitch_Type(Integer32):
    """Custom type upsmSwitch based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("enableAutoSwitch", 6),
          ("enableSwitchtoLinkA", 7),
          ("enableSwitchtoLinkB", 8),
          ("other", 1),
          ("switchToLinkA", 2),
          ("switchToLinkB", 3),
          ("toggle", 4))
    )


_UpsmSwitch_Type.__name__ = "Integer32"
_UpsmSwitch_Object = MibTableColumn
upsmSwitch = _UpsmSwitch_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 20),
    _UpsmSwitch_Type()
)
upsmSwitch.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsmSwitch.setStatus("mandatory")
_UpsmLinkAPathID_Type = PathIdName
_UpsmLinkAPathID_Object = MibTableColumn
upsmLinkAPathID = _UpsmLinkAPathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 21),
    _UpsmLinkAPathID_Type()
)
upsmLinkAPathID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsmLinkAPathID.setStatus("mandatory")
_UpsmLinkBPathID_Type = PathIdName
_UpsmLinkBPathID_Object = MibTableColumn
upsmLinkBPathID = _UpsmLinkBPathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 22),
    _UpsmLinkBPathID_Type()
)
upsmLinkBPathID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsmLinkBPathID.setStatus("mandatory")


class _UpsmAdminState_Type(Integer32):
    """Custom type upsmAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("na", 3))
    )


_UpsmAdminState_Type.__name__ = "Integer32"
_UpsmAdminState_Object = MibTableColumn
upsmAdminState = _UpsmAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 23),
    _UpsmAdminState_Type()
)
upsmAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsmAdminState.setStatus("mandatory")
_UpsmCleiNum_Type = DisplayString
_UpsmCleiNum_Object = MibTableColumn
upsmCleiNum = _UpsmCleiNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 24),
    _UpsmCleiNum_Type()
)
upsmCleiNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmCleiNum.setStatus("mandatory")


class _UpsmSwitchState_Type(Integer32):
    """Custom type upsmSwitchState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("auto", 1),
          ("forced", 2))
    )


_UpsmSwitchState_Type.__name__ = "Integer32"
_UpsmSwitchState_Object = MibTableColumn
upsmSwitchState = _UpsmSwitchState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 25),
    _UpsmSwitchState_Type()
)
upsmSwitchState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmSwitchState.setStatus("mandatory")
_UpsmNumPorts_Type = Integer32
_UpsmNumPorts_Object = MibTableColumn
upsmNumPorts = _UpsmNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 26),
    _UpsmNumPorts_Type()
)
upsmNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmNumPorts.setStatus("mandatory")
_UpsmPortTable_Object = MibTable
upsmPortTable = _UpsmPortTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 7)
)
if mibBuilder.loadTexts:
    upsmPortTable.setStatus("mandatory")
_UpsmPortEntry_Object = MibTableRow
upsmPortEntry = _UpsmPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1)
)
upsmPortEntry.setIndexNames(
    (0, "LUXN-MIB", "upsmPortCardShelf"),
    (0, "LUXN-MIB", "upsmPortCardSlot"),
    (0, "LUXN-MIB", "upsmPortType"),
)
if mibBuilder.loadTexts:
    upsmPortEntry.setStatus("mandatory")
_UpsmPortCardShelf_Type = CardShelf
_UpsmPortCardShelf_Object = MibTableColumn
upsmPortCardShelf = _UpsmPortCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1, 1),
    _UpsmPortCardShelf_Type()
)
upsmPortCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmPortCardShelf.setStatus("mandatory")
_UpsmPortCardSlot_Type = SlotInput
_UpsmPortCardSlot_Object = MibTableColumn
upsmPortCardSlot = _UpsmPortCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1, 2),
    _UpsmPortCardSlot_Type()
)
upsmPortCardSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmPortCardSlot.setStatus("mandatory")


class _UpsmPortType_Type(Integer32):
    """Custom type upsmPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("linkARx", 2),
          ("linkATx", 1),
          ("linkBRx", 4),
          ("linkBTx", 3),
          ("localRx", 6),
          ("localTx", 5))
    )


_UpsmPortType_Type.__name__ = "Integer32"
_UpsmPortType_Object = MibTableColumn
upsmPortType = _UpsmPortType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1, 3),
    _UpsmPortType_Type()
)
upsmPortType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmPortType.setStatus("mandatory")
_UpsmConnLocation_Type = CardLocation
_UpsmConnLocation_Object = MibTableColumn
upsmConnLocation = _UpsmConnLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1, 4),
    _UpsmConnLocation_Type()
)
upsmConnLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsmConnLocation.setStatus("mandatory")
_UpsmConnIpAddress_Type = IpAddress
_UpsmConnIpAddress_Object = MibTableColumn
upsmConnIpAddress = _UpsmConnIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1, 5),
    _UpsmConnIpAddress_Type()
)
upsmConnIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsmConnIpAddress.setStatus("mandatory")


class _UpsmConnChassisID_Type(DisplayString):
    """Custom type upsmConnChassisID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_UpsmConnChassisID_Type.__name__ = "DisplayString"
_UpsmConnChassisID_Object = MibTableColumn
upsmConnChassisID = _UpsmConnChassisID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1, 6),
    _UpsmConnChassisID_Type()
)
upsmConnChassisID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsmConnChassisID.setStatus("mandatory")


class _UpsmConnSystemName_Type(DisplayString):
    """Custom type upsmConnSystemName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_UpsmConnSystemName_Type.__name__ = "DisplayString"
_UpsmConnSystemName_Object = MibTableColumn
upsmConnSystemName = _UpsmConnSystemName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1, 7),
    _UpsmConnSystemName_Type()
)
upsmConnSystemName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsmConnSystemName.setStatus("mandatory")
_UpsmConnCardType_Type = CardType
_UpsmConnCardType_Object = MibTableColumn
upsmConnCardType = _UpsmConnCardType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1, 8),
    _UpsmConnCardType_Type()
)
upsmConnCardType.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsmConnCardType.setStatus("mandatory")
_UpsmConnPort_Type = Integer32
_UpsmConnPort_Object = MibTableColumn
upsmConnPort = _UpsmConnPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1, 9),
    _UpsmConnPort_Type()
)
upsmConnPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsmConnPort.setStatus("mandatory")
_UpsmConnShelf_Type = ShelfInput
_UpsmConnShelf_Object = MibTableColumn
upsmConnShelf = _UpsmConnShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1, 10),
    _UpsmConnShelf_Type()
)
upsmConnShelf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsmConnShelf.setStatus("mandatory")
_UpsmConnSlot_Type = SlotInput
_UpsmConnSlot_Object = MibTableColumn
upsmConnSlot = _UpsmConnSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1, 11),
    _UpsmConnSlot_Type()
)
upsmConnSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    upsmConnSlot.setStatus("mandatory")
_Mcmesc_ObjectIdentity = ObjectIdentity
mcmesc = _Mcmesc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18)
)
_McmescBootPromVer_Type = VersionString
_McmescBootPromVer_Object = MibScalar
mcmescBootPromVer = _McmescBootPromVer_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 1),
    _McmescBootPromVer_Type()
)
mcmescBootPromVer.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmescBootPromVer.setStatus("mandatory")


class _McmescROMSize_Type(Integer32):
    """Custom type mcmescROMSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_McmescROMSize_Type.__name__ = "Integer32"
_McmescROMSize_Object = MibScalar
mcmescROMSize = _McmescROMSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 2),
    _McmescROMSize_Type()
)
mcmescROMSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmescROMSize.setStatus("mandatory")


class _McmescNumSubDiv_Type(Integer32):
    """Custom type mcmescNumSubDiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_McmescNumSubDiv_Type.__name__ = "Integer32"
_McmescNumSubDiv_Object = MibScalar
mcmescNumSubDiv = _McmescNumSubDiv_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 3),
    _McmescNumSubDiv_Type()
)
mcmescNumSubDiv.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmescNumSubDiv.setStatus("mandatory")
_McmescSubDivTable_Object = MibTable
mcmescSubDivTable = _McmescSubDivTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 4)
)
if mibBuilder.loadTexts:
    mcmescSubDivTable.setStatus("mandatory")
_McmescSubDivEntry_Object = MibTableRow
mcmescSubDivEntry = _McmescSubDivEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 4, 1)
)
mcmescSubDivEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmescSubDivIndex"),
)
if mibBuilder.loadTexts:
    mcmescSubDivEntry.setStatus("mandatory")


class _McmescSubDivIndex_Type(Integer32):
    """Custom type mcmescSubDivIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_McmescSubDivIndex_Type.__name__ = "Integer32"
_McmescSubDivIndex_Object = MibTableColumn
mcmescSubDivIndex = _McmescSubDivIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 4, 1, 1),
    _McmescSubDivIndex_Type()
)
mcmescSubDivIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmescSubDivIndex.setStatus("mandatory")


class _McmescSubDivDescr_Type(DisplayString):
    """Custom type mcmescSubDivDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_McmescSubDivDescr_Type.__name__ = "DisplayString"
_McmescSubDivDescr_Object = MibTableColumn
mcmescSubDivDescr = _McmescSubDivDescr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 4, 1, 2),
    _McmescSubDivDescr_Type()
)
mcmescSubDivDescr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmescSubDivDescr.setStatus("mandatory")


class _McmescSubDivSize_Type(Integer32):
    """Custom type mcmescSubDivSize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1024),
    )


_McmescSubDivSize_Type.__name__ = "Integer32"
_McmescSubDivSize_Object = MibTableColumn
mcmescSubDivSize = _McmescSubDivSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 4, 1, 3),
    _McmescSubDivSize_Type()
)
mcmescSubDivSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmescSubDivSize.setStatus("mandatory")


class _McmescSubDivOffset_Type(OctetString):
    """Custom type mcmescSubDivOffset based on OctetString"""
    subtypeSpec = OctetString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 8),
    )


_McmescSubDivOffset_Type.__name__ = "OctetString"
_McmescSubDivOffset_Object = MibTableColumn
mcmescSubDivOffset = _McmescSubDivOffset_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 4, 1, 4),
    _McmescSubDivOffset_Type()
)
mcmescSubDivOffset.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmescSubDivOffset.setStatus("mandatory")
_McmescNumber_Type = Integer32
_McmescNumber_Object = MibScalar
mcmescNumber = _McmescNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 5),
    _McmescNumber_Type()
)
mcmescNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescNumber.setStatus("mandatory")
_McmescTable_Object = MibTable
mcmescTable = _McmescTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6)
)
if mibBuilder.loadTexts:
    mcmescTable.setStatus("mandatory")
_McmescEntry_Object = MibTableRow
mcmescEntry = _McmescEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1)
)
mcmescEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmescCardLocation"),
    (0, "LUXN-MIB", "mcmescCardShelf"),
    (0, "LUXN-MIB", "mcmescCardSlot"),
)
if mibBuilder.loadTexts:
    mcmescEntry.setStatus("mandatory")
_McmescCardLocation_Type = CardLocation
_McmescCardLocation_Object = MibTableColumn
mcmescCardLocation = _McmescCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 1),
    _McmescCardLocation_Type()
)
mcmescCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescCardLocation.setStatus("mandatory")
_McmescCardShelf_Type = CardShelf
_McmescCardShelf_Object = MibTableColumn
mcmescCardShelf = _McmescCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 2),
    _McmescCardShelf_Type()
)
mcmescCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescCardShelf.setStatus("mandatory")
_McmescCardSlot_Type = SlotInput
_McmescCardSlot_Object = MibTableColumn
mcmescCardSlot = _McmescCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 3),
    _McmescCardSlot_Type()
)
mcmescCardSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescCardSlot.setStatus("mandatory")
_McmescMfgDate_Type = DateAndTime
_McmescMfgDate_Object = MibTableColumn
mcmescMfgDate = _McmescMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 4),
    _McmescMfgDate_Type()
)
mcmescMfgDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescMfgDate.setStatus("mandatory")
_McmescSerialNum_Type = SerialString
_McmescSerialNum_Object = MibTableColumn
mcmescSerialNum = _McmescSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 5),
    _McmescSerialNum_Type()
)
mcmescSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescSerialNum.setStatus("mandatory")
_McmescModelType_Type = CardType
_McmescModelType_Object = MibTableColumn
mcmescModelType = _McmescModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 6),
    _McmescModelType_Type()
)
mcmescModelType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescModelType.setStatus("mandatory")
_McmescModelNum_Type = DisplayString
_McmescModelNum_Object = MibTableColumn
mcmescModelNum = _McmescModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 7),
    _McmescModelNum_Type()
)
mcmescModelNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescModelNum.setStatus("mandatory")
_McmescName_Type = CardName
_McmescName_Object = MibTableColumn
mcmescName = _McmescName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 8),
    _McmescName_Type()
)
mcmescName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescName.setStatus("mandatory")
_McmescHWName_Type = CardName
_McmescHWName_Object = MibTableColumn
mcmescHWName = _McmescHWName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 9),
    _McmescHWName_Type()
)
mcmescHWName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescHWName.setStatus("mandatory")
_McmescNumPorts_Type = Integer32
_McmescNumPorts_Object = MibTableColumn
mcmescNumPorts = _McmescNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 10),
    _McmescNumPorts_Type()
)
mcmescNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescNumPorts.setStatus("mandatory")
_McmescFWVersionID_Type = VersionString
_McmescFWVersionID_Object = MibTableColumn
mcmescFWVersionID = _McmescFWVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 11),
    _McmescFWVersionID_Type()
)
mcmescFWVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescFWVersionID.setStatus("mandatory")
_Mcmesc2ndFWVersionID_Type = VersionString
_Mcmesc2ndFWVersionID_Object = MibTableColumn
mcmesc2ndFWVersionID = _Mcmesc2ndFWVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 12),
    _Mcmesc2ndFWVersionID_Type()
)
mcmesc2ndFWVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmesc2ndFWVersionID.setStatus("mandatory")
_McmescFPGAVersionID_Type = VersionString
_McmescFPGAVersionID_Object = MibTableColumn
mcmescFPGAVersionID = _McmescFPGAVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 13),
    _McmescFPGAVersionID_Type()
)
mcmescFPGAVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescFPGAVersionID.setStatus("mandatory")
_Mcmesc2ndFPGAVersionID_Type = VersionString
_Mcmesc2ndFPGAVersionID_Object = MibTableColumn
mcmesc2ndFPGAVersionID = _Mcmesc2ndFPGAVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 14),
    _Mcmesc2ndFPGAVersionID_Type()
)
mcmesc2ndFPGAVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmesc2ndFPGAVersionID.setStatus("mandatory")
_McmescBoardSerialNum_Type = SerialString
_McmescBoardSerialNum_Object = MibTableColumn
mcmescBoardSerialNum = _McmescBoardSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 15),
    _McmescBoardSerialNum_Type()
)
mcmescBoardSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescBoardSerialNum.setStatus("mandatory")
_McmescBoardVersionID_Type = VersionString
_McmescBoardVersionID_Object = MibTableColumn
mcmescBoardVersionID = _McmescBoardVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 16),
    _McmescBoardVersionID_Type()
)
mcmescBoardVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescBoardVersionID.setStatus("mandatory")
_McmescDaughterBoard1SerialNum_Type = SerialString
_McmescDaughterBoard1SerialNum_Object = MibTableColumn
mcmescDaughterBoard1SerialNum = _McmescDaughterBoard1SerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 17),
    _McmescDaughterBoard1SerialNum_Type()
)
mcmescDaughterBoard1SerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescDaughterBoard1SerialNum.setStatus("mandatory")
_McmescDaughterBoard1VersionID_Type = VersionString
_McmescDaughterBoard1VersionID_Object = MibTableColumn
mcmescDaughterBoard1VersionID = _McmescDaughterBoard1VersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 18),
    _McmescDaughterBoard1VersionID_Type()
)
mcmescDaughterBoard1VersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescDaughterBoard1VersionID.setStatus("mandatory")
_McmescDaughterBoard2SerialNum_Type = SerialString
_McmescDaughterBoard2SerialNum_Object = MibTableColumn
mcmescDaughterBoard2SerialNum = _McmescDaughterBoard2SerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 19),
    _McmescDaughterBoard2SerialNum_Type()
)
mcmescDaughterBoard2SerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescDaughterBoard2SerialNum.setStatus("mandatory")
_McmescDaughterBoard2VersionID_Type = VersionString
_McmescDaughterBoard2VersionID_Object = MibTableColumn
mcmescDaughterBoard2VersionID = _McmescDaughterBoard2VersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 20),
    _McmescDaughterBoard2VersionID_Type()
)
mcmescDaughterBoard2VersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescDaughterBoard2VersionID.setStatus("mandatory")
_McmescCleiNum_Type = DisplayString
_McmescCleiNum_Object = MibTableColumn
mcmescCleiNum = _McmescCleiNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 21),
    _McmescCleiNum_Type()
)
mcmescCleiNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescCleiNum.setStatus("mandatory")
_McmescLinkWavelength_Type = DisplayString
_McmescLinkWavelength_Object = MibTableColumn
mcmescLinkWavelength = _McmescLinkWavelength_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 22),
    _McmescLinkWavelength_Type()
)
mcmescLinkWavelength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkWavelength.setStatus("mandatory")
_McmescLinkSfpSerialNum_Type = SfpSerialString
_McmescLinkSfpSerialNum_Object = MibTableColumn
mcmescLinkSfpSerialNum = _McmescLinkSfpSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 23),
    _McmescLinkSfpSerialNum_Type()
)
mcmescLinkSfpSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkSfpSerialNum.setStatus("mandatory")


class _McmescAdminState_Type(Integer32):
    """Custom type mcmescAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("na", 3))
    )


_McmescAdminState_Type.__name__ = "Integer32"
_McmescAdminState_Object = MibTableColumn
mcmescAdminState = _McmescAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 24),
    _McmescAdminState_Type()
)
mcmescAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescAdminState.setStatus("mandatory")
_McmescLinkName_Type = LinkName
_McmescLinkName_Object = MibTableColumn
mcmescLinkName = _McmescLinkName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 25),
    _McmescLinkName_Type()
)
mcmescLinkName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescLinkName.setStatus("mandatory")
_McmescPathID_Type = PathIdName
_McmescPathID_Object = MibTableColumn
mcmescPathID = _McmescPathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 26),
    _McmescPathID_Type()
)
mcmescPathID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescPathID.setStatus("mandatory")


class _McmescOverride_Type(Integer32):
    """Custom type mcmescOverride based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 3),
          ("no", 2),
          ("yes", 1))
    )


_McmescOverride_Type.__name__ = "Integer32"
_McmescOverride_Object = MibTableColumn
mcmescOverride = _McmescOverride_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 27),
    _McmescOverride_Type()
)
mcmescOverride.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescOverride.setStatus("mandatory")


class _McmescPerfInterval_Type(Integer32):
    """Custom type mcmescPerfInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(60, 3600),
    )


_McmescPerfInterval_Type.__name__ = "Integer32"
_McmescPerfInterval_Object = MibTableColumn
mcmescPerfInterval = _McmescPerfInterval_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 28),
    _McmescPerfInterval_Type()
)
mcmescPerfInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescPerfInterval.setStatus("mandatory")


class _McmescCpeRxSigLowThreshold_Type(Integer32):
    """Custom type mcmescCpeRxSigLowThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-29, -7),
    )


_McmescCpeRxSigLowThreshold_Type.__name__ = "Integer32"
_McmescCpeRxSigLowThreshold_Object = MibTableColumn
mcmescCpeRxSigLowThreshold = _McmescCpeRxSigLowThreshold_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 29),
    _McmescCpeRxSigLowThreshold_Type()
)
mcmescCpeRxSigLowThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescCpeRxSigLowThreshold.setStatus("mandatory")


class _McmescLinkRxSigLowThreshold_Type(Integer32):
    """Custom type mcmescLinkRxSigLowThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(-29, -7),
    )


_McmescLinkRxSigLowThreshold_Type.__name__ = "Integer32"
_McmescLinkRxSigLowThreshold_Object = MibTableColumn
mcmescLinkRxSigLowThreshold = _McmescLinkRxSigLowThreshold_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 30),
    _McmescLinkRxSigLowThreshold_Type()
)
mcmescLinkRxSigLowThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescLinkRxSigLowThreshold.setStatus("mandatory")


class _McmescCpeErrEventThreshold_Type(Integer32):
    """Custom type mcmescCpeErrEventThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 15),
    )


_McmescCpeErrEventThreshold_Type.__name__ = "Integer32"
_McmescCpeErrEventThreshold_Object = MibTableColumn
mcmescCpeErrEventThreshold = _McmescCpeErrEventThreshold_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 31),
    _McmescCpeErrEventThreshold_Type()
)
mcmescCpeErrEventThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescCpeErrEventThreshold.setStatus("mandatory")


class _McmescCpeErrAlarmThreshold_Type(Integer32):
    """Custom type mcmescCpeErrAlarmThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 14),
    )


_McmescCpeErrAlarmThreshold_Type.__name__ = "Integer32"
_McmescCpeErrAlarmThreshold_Object = MibTableColumn
mcmescCpeErrAlarmThreshold = _McmescCpeErrAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 32),
    _McmescCpeErrAlarmThreshold_Type()
)
mcmescCpeErrAlarmThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescCpeErrAlarmThreshold.setStatus("mandatory")


class _McmescLinkErrEventThreshold_Type(Integer32):
    """Custom type mcmescLinkErrEventThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(5, 15),
    )


_McmescLinkErrEventThreshold_Type.__name__ = "Integer32"
_McmescLinkErrEventThreshold_Object = MibTableColumn
mcmescLinkErrEventThreshold = _McmescLinkErrEventThreshold_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 33),
    _McmescLinkErrEventThreshold_Type()
)
mcmescLinkErrEventThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescLinkErrEventThreshold.setStatus("mandatory")


class _McmescLinkErrAlarmThreshold_Type(Integer32):
    """Custom type mcmescLinkErrAlarmThreshold based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(4, 14),
    )


_McmescLinkErrAlarmThreshold_Type.__name__ = "Integer32"
_McmescLinkErrAlarmThreshold_Object = MibTableColumn
mcmescLinkErrAlarmThreshold = _McmescLinkErrAlarmThreshold_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 34),
    _McmescLinkErrAlarmThreshold_Type()
)
mcmescLinkErrAlarmThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescLinkErrAlarmThreshold.setStatus("mandatory")
_McmescTestSequence_Type = FlagType
_McmescTestSequence_Object = MibTableColumn
mcmescTestSequence = _McmescTestSequence_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 35),
    _McmescTestSequence_Type()
)
mcmescTestSequence.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescTestSequence.setStatus("mandatory")
_McmescConnMuxShelf_Type = ShelfInput
_McmescConnMuxShelf_Object = MibTableColumn
mcmescConnMuxShelf = _McmescConnMuxShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 36),
    _McmescConnMuxShelf_Type()
)
mcmescConnMuxShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescConnMuxShelf.setStatus("mandatory")
_McmescConnMuxSlot_Type = SlotInput
_McmescConnMuxSlot_Object = MibTableColumn
mcmescConnMuxSlot = _McmescConnMuxSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 37),
    _McmescConnMuxSlot_Type()
)
mcmescConnMuxSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescConnMuxSlot.setStatus("mandatory")
_McmescConnMuxPort_Type = Integer32
_McmescConnMuxPort_Object = MibTableColumn
mcmescConnMuxPort = _McmescConnMuxPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 38),
    _McmescConnMuxPort_Type()
)
mcmescConnMuxPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescConnMuxPort.setStatus("mandatory")
_McmescConnDemuxShelf_Type = ShelfInput
_McmescConnDemuxShelf_Object = MibTableColumn
mcmescConnDemuxShelf = _McmescConnDemuxShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 39),
    _McmescConnDemuxShelf_Type()
)
mcmescConnDemuxShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescConnDemuxShelf.setStatus("mandatory")
_McmescConnDemuxSlot_Type = SlotInput
_McmescConnDemuxSlot_Object = MibTableColumn
mcmescConnDemuxSlot = _McmescConnDemuxSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 40),
    _McmescConnDemuxSlot_Type()
)
mcmescConnDemuxSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescConnDemuxSlot.setStatus("mandatory")
_McmescConnDemuxPort_Type = Integer32
_McmescConnDemuxPort_Object = MibTableColumn
mcmescConnDemuxPort = _McmescConnDemuxPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 41),
    _McmescConnDemuxPort_Type()
)
mcmescConnDemuxPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescConnDemuxPort.setStatus("mandatory")
_McmescConnTxOcmShelf_Type = ShelfInput
_McmescConnTxOcmShelf_Object = MibTableColumn
mcmescConnTxOcmShelf = _McmescConnTxOcmShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 42),
    _McmescConnTxOcmShelf_Type()
)
mcmescConnTxOcmShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescConnTxOcmShelf.setStatus("mandatory")
_McmescConnTxOcmSlot_Type = SlotInput
_McmescConnTxOcmSlot_Object = MibTableColumn
mcmescConnTxOcmSlot = _McmescConnTxOcmSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 43),
    _McmescConnTxOcmSlot_Type()
)
mcmescConnTxOcmSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescConnTxOcmSlot.setStatus("mandatory")


class _McmescConnTxOcmPort_Type(Integer32):
    """Custom type mcmescConnTxOcmPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("cperx", 4),
          ("cpetx", 3))
    )


_McmescConnTxOcmPort_Type.__name__ = "Integer32"
_McmescConnTxOcmPort_Object = MibTableColumn
mcmescConnTxOcmPort = _McmescConnTxOcmPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 44),
    _McmescConnTxOcmPort_Type()
)
mcmescConnTxOcmPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescConnTxOcmPort.setStatus("mandatory")


class _McmescConnTxOcmShelfSlot_Type(DisplayString):
    """Custom type mcmescConnTxOcmShelfSlot based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_McmescConnTxOcmShelfSlot_Type.__name__ = "DisplayString"
_McmescConnTxOcmShelfSlot_Object = MibTableColumn
mcmescConnTxOcmShelfSlot = _McmescConnTxOcmShelfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 45),
    _McmescConnTxOcmShelfSlot_Type()
)
mcmescConnTxOcmShelfSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescConnTxOcmShelfSlot.setStatus("mandatory")


class _McmescConnTxOcmDelete_Type(Integer32):
    """Custom type mcmescConnTxOcmDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("yes", 2))
    )


_McmescConnTxOcmDelete_Type.__name__ = "Integer32"
_McmescConnTxOcmDelete_Object = MibTableColumn
mcmescConnTxOcmDelete = _McmescConnTxOcmDelete_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 46),
    _McmescConnTxOcmDelete_Type()
)
mcmescConnTxOcmDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescConnTxOcmDelete.setStatus("mandatory")
_McmescConnRxOcmShelf_Type = ShelfInput
_McmescConnRxOcmShelf_Object = MibTableColumn
mcmescConnRxOcmShelf = _McmescConnRxOcmShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 47),
    _McmescConnRxOcmShelf_Type()
)
mcmescConnRxOcmShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescConnRxOcmShelf.setStatus("mandatory")
_McmescConnRxOcmSlot_Type = SlotInput
_McmescConnRxOcmSlot_Object = MibTableColumn
mcmescConnRxOcmSlot = _McmescConnRxOcmSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 48),
    _McmescConnRxOcmSlot_Type()
)
mcmescConnRxOcmSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescConnRxOcmSlot.setStatus("mandatory")


class _McmescConnRxOcmPort_Type(Integer32):
    """Custom type mcmescConnRxOcmPort based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("cperx", 4),
          ("cpetx", 3))
    )


_McmescConnRxOcmPort_Type.__name__ = "Integer32"
_McmescConnRxOcmPort_Object = MibTableColumn
mcmescConnRxOcmPort = _McmescConnRxOcmPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 49),
    _McmescConnRxOcmPort_Type()
)
mcmescConnRxOcmPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescConnRxOcmPort.setStatus("mandatory")


class _McmescConnRxOcmShelfSlot_Type(DisplayString):
    """Custom type mcmescConnRxOcmShelfSlot based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_McmescConnRxOcmShelfSlot_Type.__name__ = "DisplayString"
_McmescConnRxOcmShelfSlot_Object = MibTableColumn
mcmescConnRxOcmShelfSlot = _McmescConnRxOcmShelfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 50),
    _McmescConnRxOcmShelfSlot_Type()
)
mcmescConnRxOcmShelfSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescConnRxOcmShelfSlot.setStatus("mandatory")


class _McmescConnRxOcmDelete_Type(Integer32):
    """Custom type mcmescConnRxOcmDelete based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("yes", 2))
    )


_McmescConnRxOcmDelete_Type.__name__ = "Integer32"
_McmescConnRxOcmDelete_Object = MibTableColumn
mcmescConnRxOcmDelete = _McmescConnRxOcmDelete_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 51),
    _McmescConnRxOcmDelete_Type()
)
mcmescConnRxOcmDelete.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescConnRxOcmDelete.setStatus("mandatory")


class _McmescSetState_Type(Integer32):
    """Custom type mcmescSetState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29)
        )
    )
    namedValues = NamedValues(
        *(("disableLoopback", 29),
          ("nearEndCardLoopback", 3),
          ("nearEndPort10Loopback", 14),
          ("nearEndPort11Loopback", 15),
          ("nearEndPort12Loopback", 16),
          ("nearEndPort1Loopback", 5),
          ("nearEndPort2Loopback", 6),
          ("nearEndPort3Loopback", 7),
          ("nearEndPort4Loopback", 8),
          ("nearEndPort5Loopback", 9),
          ("nearEndPort6Loopback", 10),
          ("nearEndPort7Loopback", 11),
          ("nearEndPort8Loopback", 12),
          ("nearEndPort9Loopback", 13),
          ("networkCardLoopback", 4),
          ("networkPort10Loopback", 26),
          ("networkPort11Loopback", 27),
          ("networkPort12Loopback", 28),
          ("networkPort1Loopback", 17),
          ("networkPort2Loopback", 18),
          ("networkPort3Loopback", 19),
          ("networkPort4Loopback", 20),
          ("networkPort5Loopback", 21),
          ("networkPort6Loopback", 22),
          ("networkPort7Loopback", 23),
          ("networkPort8Loopback", 24),
          ("networkPort9Loopback", 25),
          ("other", 1),
          ("resetWithCurrentConfiguration", 2))
    )


_McmescSetState_Type.__name__ = "Integer32"
_McmescSetState_Object = MibTableColumn
mcmescSetState = _McmescSetState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 52),
    _McmescSetState_Type()
)
mcmescSetState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescSetState.setStatus("mandatory")


class _McmescLinkClrErrCount_Type(Integer32):
    """Custom type mcmescLinkClrErrCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clearErrCount", 2),
          ("other", 1))
    )


_McmescLinkClrErrCount_Type.__name__ = "Integer32"
_McmescLinkClrErrCount_Object = MibTableColumn
mcmescLinkClrErrCount = _McmescLinkClrErrCount_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 53),
    _McmescLinkClrErrCount_Type()
)
mcmescLinkClrErrCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescLinkClrErrCount.setStatus("mandatory")
_McmescPortNumber_Type = Integer32
_McmescPortNumber_Object = MibScalar
mcmescPortNumber = _McmescPortNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 7),
    _McmescPortNumber_Type()
)
mcmescPortNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortNumber.setStatus("mandatory")
_McmescPortTable_Object = MibTable
mcmescPortTable = _McmescPortTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 8)
)
if mibBuilder.loadTexts:
    mcmescPortTable.setStatus("mandatory")
_McmescPortEntry_Object = MibTableRow
mcmescPortEntry = _McmescPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 8, 1)
)
mcmescPortEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmescPortCardLocation"),
    (0, "LUXN-MIB", "mcmescPortCardShelf"),
    (0, "LUXN-MIB", "mcmescPortCardSlot"),
    (0, "LUXN-MIB", "mcmescPortIndex"),
)
if mibBuilder.loadTexts:
    mcmescPortEntry.setStatus("mandatory")
_McmescPortCardLocation_Type = CardLocation
_McmescPortCardLocation_Object = MibTableColumn
mcmescPortCardLocation = _McmescPortCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 8, 1, 1),
    _McmescPortCardLocation_Type()
)
mcmescPortCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortCardLocation.setStatus("mandatory")
_McmescPortCardShelf_Type = CardShelf
_McmescPortCardShelf_Object = MibTableColumn
mcmescPortCardShelf = _McmescPortCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 8, 1, 2),
    _McmescPortCardShelf_Type()
)
mcmescPortCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortCardShelf.setStatus("mandatory")
_McmescPortCardSlot_Type = SlotInput
_McmescPortCardSlot_Object = MibTableColumn
mcmescPortCardSlot = _McmescPortCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 8, 1, 3),
    _McmescPortCardSlot_Type()
)
mcmescPortCardSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortCardSlot.setStatus("mandatory")
_McmescPortIndex_Type = Integer32
_McmescPortIndex_Object = MibTableColumn
mcmescPortIndex = _McmescPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 8, 1, 4),
    _McmescPortIndex_Type()
)
mcmescPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortIndex.setStatus("mandatory")
_McmescPortSfpSerialNum_Type = SfpSerialString
_McmescPortSfpSerialNum_Object = MibTableColumn
mcmescPortSfpSerialNum = _McmescPortSfpSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 8, 1, 5),
    _McmescPortSfpSerialNum_Type()
)
mcmescPortSfpSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortSfpSerialNum.setStatus("mandatory")


class _McmescPortConnectionState_Type(Integer32):
    """Custom type mcmescPortConnectionState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2))
    )


_McmescPortConnectionState_Type.__name__ = "Integer32"
_McmescPortConnectionState_Object = MibTableColumn
mcmescPortConnectionState = _McmescPortConnectionState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 8, 1, 6),
    _McmescPortConnectionState_Type()
)
mcmescPortConnectionState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescPortConnectionState.setStatus("mandatory")


class _McmescPortClrErrCount_Type(Integer32):
    """Custom type mcmescPortClrErrCount based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clearErrCount", 2),
          ("other", 1))
    )


_McmescPortClrErrCount_Type.__name__ = "Integer32"
_McmescPortClrErrCount_Object = MibTableColumn
mcmescPortClrErrCount = _McmescPortClrErrCount_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 18, 8, 1, 7),
    _McmescPortClrErrCount_Type()
)
mcmescPortClrErrCount.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescPortClrErrCount.setStatus("mandatory")
_SystemConfig_ObjectIdentity = ObjectIdentity
systemConfig = _SystemConfig_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21)
)


class _SysAddCard_Type(DisplayString):
    """Custom type sysAddCard based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_SysAddCard_Type.__name__ = "DisplayString"
_SysAddCard_Object = MibScalar
sysAddCard = _SysAddCard_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 1),
    _SysAddCard_Type()
)
sysAddCard.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysAddCard.setStatus("mandatory")


class _SysAlarmCtrl_Type(Integer32):
    """Custom type sysAlarmCtrl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_SysAlarmCtrl_Type.__name__ = "Integer32"
_SysAlarmCtrl_Object = MibScalar
sysAlarmCtrl = _SysAlarmCtrl_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 2),
    _SysAlarmCtrl_Type()
)
sysAlarmCtrl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysAlarmCtrl.setStatus("mandatory")


class _SysAlarmCritical_Type(Integer32):
    """Custom type sysAlarmCritical based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_SysAlarmCritical_Type.__name__ = "Integer32"
_SysAlarmCritical_Object = MibScalar
sysAlarmCritical = _SysAlarmCritical_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 3),
    _SysAlarmCritical_Type()
)
sysAlarmCritical.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysAlarmCritical.setStatus("mandatory")


class _SysAlarmMajor_Type(Integer32):
    """Custom type sysAlarmMajor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_SysAlarmMajor_Type.__name__ = "Integer32"
_SysAlarmMajor_Object = MibScalar
sysAlarmMajor = _SysAlarmMajor_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 4),
    _SysAlarmMajor_Type()
)
sysAlarmMajor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysAlarmMajor.setStatus("mandatory")


class _SysAlarmSerial_Type(Integer32):
    """Custom type sysAlarmSerial based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_SysAlarmSerial_Type.__name__ = "Integer32"
_SysAlarmSerial_Object = MibScalar
sysAlarmSerial = _SysAlarmSerial_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 5),
    _SysAlarmSerial_Type()
)
sysAlarmSerial.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysAlarmSerial.setStatus("mandatory")


class _SysAlarmAutoCutoff_Type(Integer32):
    """Custom type sysAlarmAutoCutoff based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_SysAlarmAutoCutoff_Type.__name__ = "Integer32"
_SysAlarmAutoCutoff_Object = MibScalar
sysAlarmAutoCutoff = _SysAlarmAutoCutoff_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 6),
    _SysAlarmAutoCutoff_Type()
)
sysAlarmAutoCutoff.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysAlarmAutoCutoff.setStatus("mandatory")


class _SysAddRoute_Type(DisplayString):
    """Custom type sysAddRoute based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_SysAddRoute_Type.__name__ = "DisplayString"
_SysAddRoute_Object = MibScalar
sysAddRoute = _SysAddRoute_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 7),
    _SysAddRoute_Type()
)
sysAddRoute.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    sysAddRoute.setStatus("mandatory")


class _SysDeleteRoute_Type(DisplayString):
    """Custom type sysDeleteRoute based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_SysDeleteRoute_Type.__name__ = "DisplayString"
_SysDeleteRoute_Object = MibScalar
sysDeleteRoute = _SysDeleteRoute_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 8),
    _SysDeleteRoute_Type()
)
sysDeleteRoute.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    sysDeleteRoute.setStatus("mandatory")
_SysSwitchByPathId_Type = PathIdName
_SysSwitchByPathId_Object = MibScalar
sysSwitchByPathId = _SysSwitchByPathId_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 9),
    _SysSwitchByPathId_Type()
)
sysSwitchByPathId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSwitchByPathId.setStatus("mandatory")


class _SysSwitchAll_Type(Integer32):
    """Custom type sysSwitchAll based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_SysSwitchAll_Type.__name__ = "Integer32"
_SysSwitchAll_Object = MibScalar
sysSwitchAll = _SysSwitchAll_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 10),
    _SysSwitchAll_Type()
)
sysSwitchAll.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSwitchAll.setStatus("mandatory")


class _SysAlarmMinor_Type(Integer32):
    """Custom type sysAlarmMinor based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_SysAlarmMinor_Type.__name__ = "Integer32"
_SysAlarmMinor_Object = MibScalar
sysAlarmMinor = _SysAlarmMinor_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 11),
    _SysAlarmMinor_Type()
)
sysAlarmMinor.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysAlarmMinor.setStatus("mandatory")


class _SysDelCfgDb_Type(Integer32):
    """Custom type sysDelCfgDb based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("delete", 2),
          ("other", 1))
    )


_SysDelCfgDb_Type.__name__ = "Integer32"
_SysDelCfgDb_Object = MibScalar
sysDelCfgDb = _SysDelCfgDb_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 12),
    _SysDelCfgDb_Type()
)
sysDelCfgDb.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysDelCfgDb.setStatus("mandatory")


class _SysImnAddRoute_Type(DisplayString):
    """Custom type sysImnAddRoute based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_SysImnAddRoute_Type.__name__ = "DisplayString"
_SysImnAddRoute_Object = MibScalar
sysImnAddRoute = _SysImnAddRoute_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 13),
    _SysImnAddRoute_Type()
)
sysImnAddRoute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysImnAddRoute.setStatus("mandatory")


class _SysImnDeleteRoute_Type(DisplayString):
    """Custom type sysImnDeleteRoute based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_SysImnDeleteRoute_Type.__name__ = "DisplayString"
_SysImnDeleteRoute_Object = MibScalar
sysImnDeleteRoute = _SysImnDeleteRoute_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 14),
    _SysImnDeleteRoute_Type()
)
sysImnDeleteRoute.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysImnDeleteRoute.setStatus("mandatory")
_SysExtAlarmInputTable_Object = MibTable
sysExtAlarmInputTable = _SysExtAlarmInputTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 17)
)
if mibBuilder.loadTexts:
    sysExtAlarmInputTable.setStatus("mandatory")
_SysExtAlarmInputEntry_Object = MibTableRow
sysExtAlarmInputEntry = _SysExtAlarmInputEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 17, 1)
)
sysExtAlarmInputEntry.setIndexNames(
    (0, "LUXN-MIB", "sysExtAlarmInputId"),
)
if mibBuilder.loadTexts:
    sysExtAlarmInputEntry.setStatus("mandatory")
_SysExtAlarmInputId_Type = Integer32
_SysExtAlarmInputId_Object = MibTableColumn
sysExtAlarmInputId = _SysExtAlarmInputId_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 17, 1, 1),
    _SysExtAlarmInputId_Type()
)
sysExtAlarmInputId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysExtAlarmInputId.setStatus("mandatory")


class _SysExtAlarmInput_Type(Integer32):
    """Custom type sysExtAlarmInput based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("critical", 4),
          ("major", 3),
          ("minor", 2),
          ("na", 5),
          ("off", 1))
    )


_SysExtAlarmInput_Type.__name__ = "Integer32"
_SysExtAlarmInput_Object = MibTableColumn
sysExtAlarmInput = _SysExtAlarmInput_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 17, 1, 2),
    _SysExtAlarmInput_Type()
)
sysExtAlarmInput.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysExtAlarmInput.setStatus("mandatory")
_SysExtAlarmInputName_Type = AlarmType
_SysExtAlarmInputName_Object = MibTableColumn
sysExtAlarmInputName = _SysExtAlarmInputName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 17, 1, 3),
    _SysExtAlarmInputName_Type()
)
sysExtAlarmInputName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysExtAlarmInputName.setStatus("mandatory")


class _SysAudioAlarm_Type(Integer32):
    """Custom type sysAudioAlarm based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("brief", 1),
          ("continous", 3),
          ("na", 5),
          ("off", 4),
          ("test", 2))
    )


_SysAudioAlarm_Type.__name__ = "Integer32"
_SysAudioAlarm_Object = MibScalar
sysAudioAlarm = _SysAudioAlarm_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 18),
    _SysAudioAlarm_Type()
)
sysAudioAlarm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysAudioAlarm.setStatus("mandatory")


class _SysAudioAlarmSeverity_Type(Integer32):
    """Custom type sysAudioAlarmSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("critical", 2),
          ("major", 1),
          ("minor", 3),
          ("na", 4))
    )


_SysAudioAlarmSeverity_Type.__name__ = "Integer32"
_SysAudioAlarmSeverity_Object = MibScalar
sysAudioAlarmSeverity = _SysAudioAlarmSeverity_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 19),
    _SysAudioAlarmSeverity_Type()
)
sysAudioAlarmSeverity.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysAudioAlarmSeverity.setStatus("mandatory")


class _SysRdbcopy_Type(Integer32):
    """Custom type sysRdbcopy based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("copydb", 2),
          ("other", 1))
    )


_SysRdbcopy_Type.__name__ = "Integer32"
_SysRdbcopy_Object = MibScalar
sysRdbcopy = _SysRdbcopy_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 20),
    _SysRdbcopy_Type()
)
sysRdbcopy.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysRdbcopy.setStatus("mandatory")
_SysRdbcopyStatus_Type = Integer32
_SysRdbcopyStatus_Object = MibScalar
sysRdbcopyStatus = _SysRdbcopyStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 21),
    _SysRdbcopyStatus_Type()
)
sysRdbcopyStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysRdbcopyStatus.setStatus("mandatory")
_SysSDMRequestsQueued_Type = Integer32
_SysSDMRequestsQueued_Object = MibScalar
sysSDMRequestsQueued = _SysSDMRequestsQueued_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 22),
    _SysSDMRequestsQueued_Type()
)
sysSDMRequestsQueued.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysSDMRequestsQueued.setStatus("mandatory")
_SysModuleupdateJobsWaiting_Type = Integer32
_SysModuleupdateJobsWaiting_Object = MibScalar
sysModuleupdateJobsWaiting = _SysModuleupdateJobsWaiting_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 23),
    _SysModuleupdateJobsWaiting_Type()
)
sysModuleupdateJobsWaiting.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysModuleupdateJobsWaiting.setStatus("mandatory")
_SysModuleupdateJobsTable_Object = MibTable
sysModuleupdateJobsTable = _SysModuleupdateJobsTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 24)
)
if mibBuilder.loadTexts:
    sysModuleupdateJobsTable.setStatus("mandatory")
_SysModuleupdateJobsEntry_Object = MibTableRow
sysModuleupdateJobsEntry = _SysModuleupdateJobsEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 24, 1)
)
sysModuleupdateJobsEntry.setIndexNames(
    (0, "LUXN-MIB", "sysModupdShelf"),
    (0, "LUXN-MIB", "sysModupdSlot"),
    (0, "LUXN-MIB", "sysModupdLocation"),
    (0, "LUXN-MIB", "sysModupdRmtStation"),
)
if mibBuilder.loadTexts:
    sysModuleupdateJobsEntry.setStatus("mandatory")
_SysModupdShelf_Type = Integer32
_SysModupdShelf_Object = MibTableColumn
sysModupdShelf = _SysModupdShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 24, 1, 1),
    _SysModupdShelf_Type()
)
sysModupdShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysModupdShelf.setStatus("mandatory")
_SysModupdSlot_Type = Integer32
_SysModupdSlot_Object = MibTableColumn
sysModupdSlot = _SysModupdSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 24, 1, 2),
    _SysModupdSlot_Type()
)
sysModupdSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysModupdSlot.setStatus("mandatory")
_SysModupdLocation_Type = CardLocation
_SysModupdLocation_Object = MibTableColumn
sysModupdLocation = _SysModupdLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 24, 1, 3),
    _SysModupdLocation_Type()
)
sysModupdLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysModupdLocation.setStatus("mandatory")
_SysModupdRmtStation_Type = Integer32
_SysModupdRmtStation_Object = MibTableColumn
sysModupdRmtStation = _SysModupdRmtStation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 24, 1, 4),
    _SysModupdRmtStation_Type()
)
sysModupdRmtStation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysModupdRmtStation.setStatus("mandatory")
_SysModupdCardtype_Type = CardType
_SysModupdCardtype_Object = MibTableColumn
sysModupdCardtype = _SysModupdCardtype_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 24, 1, 5),
    _SysModupdCardtype_Type()
)
sysModupdCardtype.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysModupdCardtype.setStatus("mandatory")
_SysModupdPercentDone_Type = Integer32
_SysModupdPercentDone_Object = MibTableColumn
sysModupdPercentDone = _SysModupdPercentDone_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 24, 1, 6),
    _SysModupdPercentDone_Type()
)
sysModupdPercentDone.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysModupdPercentDone.setStatus("mandatory")


class _SysSNMPKeepaliveEnable_Type(Integer32):
    """Custom type sysSNMPKeepaliveEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_SysSNMPKeepaliveEnable_Type.__name__ = "Integer32"
_SysSNMPKeepaliveEnable_Object = MibScalar
sysSNMPKeepaliveEnable = _SysSNMPKeepaliveEnable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 25),
    _SysSNMPKeepaliveEnable_Type()
)
sysSNMPKeepaliveEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSNMPKeepaliveEnable.setStatus("mandatory")


class _SysSNMPKeepaliveInterval_Type(Integer32):
    """Custom type sysSNMPKeepaliveInterval based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 1440),
    )


_SysSNMPKeepaliveInterval_Type.__name__ = "Integer32"
_SysSNMPKeepaliveInterval_Object = MibScalar
sysSNMPKeepaliveInterval = _SysSNMPKeepaliveInterval_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 21, 26),
    _SysSNMPKeepaliveInterval_Type()
)
sysSNMPKeepaliveInterval.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysSNMPKeepaliveInterval.setStatus("mandatory")
_Topology_ObjectIdentity = ObjectIdentity
topology = _Topology_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 22)
)
_TopologyTable_Object = MibTable
topologyTable = _TopologyTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 22, 1)
)
if mibBuilder.loadTexts:
    topologyTable.setStatus("mandatory")
_TopologyEntry_Object = MibTableRow
topologyEntry = _TopologyEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1)
)
topologyEntry.setIndexNames(
    (0, "LUXN-MIB", "topologyNearEndCardShelf"),
    (0, "LUXN-MIB", "topologyNearEndCardSlot"),
    (0, "LUXN-MIB", "topologyNearEndCardPortIndex"),
    (0, "LUXN-MIB", "topologyFarEndNodeCardShelf"),
    (0, "LUXN-MIB", "topologyFarEndNodeCardSlot"),
    (0, "LUXN-MIB", "topologyFarEndNodeCardPortIndex"),
)
if mibBuilder.loadTexts:
    topologyEntry.setStatus("mandatory")
_TopologyNearEndCardShelf_Type = CardShelf
_TopologyNearEndCardShelf_Object = MibTableColumn
topologyNearEndCardShelf = _TopologyNearEndCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 1),
    _TopologyNearEndCardShelf_Type()
)
topologyNearEndCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    topologyNearEndCardShelf.setStatus("mandatory")
_TopologyNearEndCardSlot_Type = CardSlot
_TopologyNearEndCardSlot_Object = MibTableColumn
topologyNearEndCardSlot = _TopologyNearEndCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 2),
    _TopologyNearEndCardSlot_Type()
)
topologyNearEndCardSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    topologyNearEndCardSlot.setStatus("mandatory")
_TopologyNearEndCardPortIndex_Type = PortIndex
_TopologyNearEndCardPortIndex_Object = MibTableColumn
topologyNearEndCardPortIndex = _TopologyNearEndCardPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 3),
    _TopologyNearEndCardPortIndex_Type()
)
topologyNearEndCardPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    topologyNearEndCardPortIndex.setStatus("mandatory")
_TopologyNearEndCardType_Type = CardType
_TopologyNearEndCardType_Object = MibTableColumn
topologyNearEndCardType = _TopologyNearEndCardType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 4),
    _TopologyNearEndCardType_Type()
)
topologyNearEndCardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    topologyNearEndCardType.setStatus("mandatory")
_TopologyFarEndChassisID_Type = NodeName
_TopologyFarEndChassisID_Object = MibTableColumn
topologyFarEndChassisID = _TopologyFarEndChassisID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 5),
    _TopologyFarEndChassisID_Type()
)
topologyFarEndChassisID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    topologyFarEndChassisID.setStatus("mandatory")
_TopologyFarEndSystemName_Type = NodeName
_TopologyFarEndSystemName_Object = MibTableColumn
topologyFarEndSystemName = _TopologyFarEndSystemName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 6),
    _TopologyFarEndSystemName_Type()
)
topologyFarEndSystemName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    topologyFarEndSystemName.setStatus("mandatory")
_TopologyFarEndNodeIpAddress_Type = IpAddress
_TopologyFarEndNodeIpAddress_Object = MibTableColumn
topologyFarEndNodeIpAddress = _TopologyFarEndNodeIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 7),
    _TopologyFarEndNodeIpAddress_Type()
)
topologyFarEndNodeIpAddress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    topologyFarEndNodeIpAddress.setStatus("mandatory")
_TopologyFarEndNodeCardShelf_Type = CardShelf
_TopologyFarEndNodeCardShelf_Object = MibTableColumn
topologyFarEndNodeCardShelf = _TopologyFarEndNodeCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 8),
    _TopologyFarEndNodeCardShelf_Type()
)
topologyFarEndNodeCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    topologyFarEndNodeCardShelf.setStatus("mandatory")
_TopologyFarEndNodeCardSlot_Type = CardSlot
_TopologyFarEndNodeCardSlot_Object = MibTableColumn
topologyFarEndNodeCardSlot = _TopologyFarEndNodeCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 9),
    _TopologyFarEndNodeCardSlot_Type()
)
topologyFarEndNodeCardSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    topologyFarEndNodeCardSlot.setStatus("mandatory")
_TopologyFarEndNodeCardPortIndex_Type = PortIndex
_TopologyFarEndNodeCardPortIndex_Object = MibTableColumn
topologyFarEndNodeCardPortIndex = _TopologyFarEndNodeCardPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 10),
    _TopologyFarEndNodeCardPortIndex_Type()
)
topologyFarEndNodeCardPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    topologyFarEndNodeCardPortIndex.setStatus("mandatory")


class _TopologyLinkStatus_Type(Integer32):
    """Custom type topologyLinkStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 2),
          ("down", 1),
          ("standby", 3))
    )


_TopologyLinkStatus_Type.__name__ = "Integer32"
_TopologyLinkStatus_Object = MibTableColumn
topologyLinkStatus = _TopologyLinkStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 11),
    _TopologyLinkStatus_Type()
)
topologyLinkStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    topologyLinkStatus.setStatus("mandatory")
_TopologyFarEndNodeCardType_Type = CardType
_TopologyFarEndNodeCardType_Object = MibTableColumn
topologyFarEndNodeCardType = _TopologyFarEndNodeCardType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 12),
    _TopologyFarEndNodeCardType_Type()
)
topologyFarEndNodeCardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    topologyFarEndNodeCardType.setStatus("mandatory")


class _TopologyDiscover_Type(Integer32):
    """Custom type topologyDiscover based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("discoverTopology", 2),
          ("other", 1))
    )


_TopologyDiscover_Type.__name__ = "Integer32"
_TopologyDiscover_Object = MibScalar
topologyDiscover = _TopologyDiscover_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 22, 2),
    _TopologyDiscover_Type()
)
topologyDiscover.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    topologyDiscover.setStatus("mandatory")
_Routing_ObjectIdentity = ObjectIdentity
routing = _Routing_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23)
)
_RoutingTable_Object = MibTable
routingTable = _RoutingTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 1)
)
if mibBuilder.loadTexts:
    routingTable.setStatus("mandatory")
_RoutingEntry_Object = MibTableRow
routingEntry = _RoutingEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 1, 1)
)
routingEntry.setIndexNames(
    (0, "LUXN-MIB", "routeIpDestAddress"),
    (0, "LUXN-MIB", "routeLocalCCShelf"),
    (0, "LUXN-MIB", "routeLocalCCSlot"),
)
if mibBuilder.loadTexts:
    routingEntry.setStatus("mandatory")
_RouteLocalCCShelf_Type = CardShelf
_RouteLocalCCShelf_Object = MibTableColumn
routeLocalCCShelf = _RouteLocalCCShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 1, 1, 1),
    _RouteLocalCCShelf_Type()
)
routeLocalCCShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    routeLocalCCShelf.setStatus("mandatory")
_RouteLocalCCSlot_Type = CardSlot
_RouteLocalCCSlot_Object = MibTableColumn
routeLocalCCSlot = _RouteLocalCCSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 1, 1, 2),
    _RouteLocalCCSlot_Type()
)
routeLocalCCSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    routeLocalCCSlot.setStatus("mandatory")
_RouteIpDestAddress_Type = IpAddress
_RouteIpDestAddress_Object = MibTableColumn
routeIpDestAddress = _RouteIpDestAddress_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 1, 1, 3),
    _RouteIpDestAddress_Type()
)
routeIpDestAddress.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    routeIpDestAddress.setStatus("mandatory")


class _RouteDestType_Type(Integer32):
    """Custom type routeDestType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("externalRoute", 1),
          ("internalRoute", 2))
    )


_RouteDestType_Type.__name__ = "Integer32"
_RouteDestType_Object = MibTableColumn
routeDestType = _RouteDestType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 1, 1, 4),
    _RouteDestType_Type()
)
routeDestType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    routeDestType.setStatus("mandatory")


class _RouteMode_Type(Integer32):
    """Custom type routeMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("dynamic", 2),
          ("static", 1))
    )


_RouteMode_Type.__name__ = "Integer32"
_RouteMode_Object = MibTableColumn
routeMode = _RouteMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 1, 1, 5),
    _RouteMode_Type()
)
routeMode.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    routeMode.setStatus("mandatory")
_ImnDynamicRoutingTable_Object = MibTable
imnDynamicRoutingTable = _ImnDynamicRoutingTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 2)
)
if mibBuilder.loadTexts:
    imnDynamicRoutingTable.setStatus("mandatory")
_ImnDynamicRoutingEntry_Object = MibTableRow
imnDynamicRoutingEntry = _ImnDynamicRoutingEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 2, 1)
)
imnDynamicRoutingEntry.setIndexNames(
    (0, "LUXN-MIB", "imnDynamicRouteIpDest"),
)
if mibBuilder.loadTexts:
    imnDynamicRoutingEntry.setStatus("mandatory")
_ImnDynamicRouteIpDest_Type = IpAddress
_ImnDynamicRouteIpDest_Object = MibTableColumn
imnDynamicRouteIpDest = _ImnDynamicRouteIpDest_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 2, 1, 1),
    _ImnDynamicRouteIpDest_Type()
)
imnDynamicRouteIpDest.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imnDynamicRouteIpDest.setStatus("mandatory")
_ImnDynamicRouteIpMask_Type = IpAddress
_ImnDynamicRouteIpMask_Object = MibTableColumn
imnDynamicRouteIpMask = _ImnDynamicRouteIpMask_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 2, 1, 2),
    _ImnDynamicRouteIpMask_Type()
)
imnDynamicRouteIpMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imnDynamicRouteIpMask.setStatus("mandatory")


class _ImnDynamicRouteMetric_Type(Integer32):
    """Custom type imnDynamicRouteMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_ImnDynamicRouteMetric_Type.__name__ = "Integer32"
_ImnDynamicRouteMetric_Object = MibTableColumn
imnDynamicRouteMetric = _ImnDynamicRouteMetric_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 2, 1, 3),
    _ImnDynamicRouteMetric_Type()
)
imnDynamicRouteMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imnDynamicRouteMetric.setStatus("mandatory")
_ImnDynamicRouteNextHop_Type = IpAddress
_ImnDynamicRouteNextHop_Object = MibTableColumn
imnDynamicRouteNextHop = _ImnDynamicRouteNextHop_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 2, 1, 4),
    _ImnDynamicRouteNextHop_Type()
)
imnDynamicRouteNextHop.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imnDynamicRouteNextHop.setStatus("mandatory")


class _ImnDynamicRouteSysName_Type(DisplayString):
    """Custom type imnDynamicRouteSysName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 20),
    )


_ImnDynamicRouteSysName_Type.__name__ = "DisplayString"
_ImnDynamicRouteSysName_Object = MibTableColumn
imnDynamicRouteSysName = _ImnDynamicRouteSysName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 2, 1, 5),
    _ImnDynamicRouteSysName_Type()
)
imnDynamicRouteSysName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imnDynamicRouteSysName.setStatus("mandatory")


class _ImnRouteUpdateTimer_Type(Integer32):
    """Custom type imnRouteUpdateTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 254),
    )


_ImnRouteUpdateTimer_Type.__name__ = "Integer32"
_ImnRouteUpdateTimer_Object = MibScalar
imnRouteUpdateTimer = _ImnRouteUpdateTimer_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 3),
    _ImnRouteUpdateTimer_Type()
)
imnRouteUpdateTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imnRouteUpdateTimer.setStatus("mandatory")


class _ImnRouteKeepAliveTimer_Type(Integer32):
    """Custom type imnRouteKeepAliveTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_ImnRouteKeepAliveTimer_Type.__name__ = "Integer32"
_ImnRouteKeepAliveTimer_Object = MibScalar
imnRouteKeepAliveTimer = _ImnRouteKeepAliveTimer_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 4),
    _ImnRouteKeepAliveTimer_Type()
)
imnRouteKeepAliveTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imnRouteKeepAliveTimer.setStatus("mandatory")


class _ImnRouteUnReachableTimer_Type(Integer32):
    """Custom type imnRouteUnReachableTimer based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 255),
    )


_ImnRouteUnReachableTimer_Type.__name__ = "Integer32"
_ImnRouteUnReachableTimer_Object = MibScalar
imnRouteUnReachableTimer = _ImnRouteUnReachableTimer_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 5),
    _ImnRouteUnReachableTimer_Type()
)
imnRouteUnReachableTimer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imnRouteUnReachableTimer.setStatus("mandatory")


class _ImnRouteMode_Type(Integer32):
    """Custom type imnRouteMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enable", 2))
    )


_ImnRouteMode_Type.__name__ = "Integer32"
_ImnRouteMode_Object = MibScalar
imnRouteMode = _ImnRouteMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 6),
    _ImnRouteMode_Type()
)
imnRouteMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imnRouteMode.setStatus("mandatory")
_ImnStaticRoutingTable_Object = MibTable
imnStaticRoutingTable = _ImnStaticRoutingTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 7)
)
if mibBuilder.loadTexts:
    imnStaticRoutingTable.setStatus("mandatory")
_ImnStaticRoutingEntry_Object = MibTableRow
imnStaticRoutingEntry = _ImnStaticRoutingEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 7, 1)
)
imnStaticRoutingEntry.setIndexNames(
    (0, "LUXN-MIB", "imnStaticRouteIpDest"),
)
if mibBuilder.loadTexts:
    imnStaticRoutingEntry.setStatus("mandatory")
_ImnStaticRouteIpDest_Type = IpAddress
_ImnStaticRouteIpDest_Object = MibTableColumn
imnStaticRouteIpDest = _ImnStaticRouteIpDest_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 7, 1, 1),
    _ImnStaticRouteIpDest_Type()
)
imnStaticRouteIpDest.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imnStaticRouteIpDest.setStatus("mandatory")
_ImnStaticRouteIpMask_Type = IpAddress
_ImnStaticRouteIpMask_Object = MibTableColumn
imnStaticRouteIpMask = _ImnStaticRouteIpMask_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 7, 1, 2),
    _ImnStaticRouteIpMask_Type()
)
imnStaticRouteIpMask.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imnStaticRouteIpMask.setStatus("mandatory")


class _ImnStaticRouteMetric_Type(Integer32):
    """Custom type imnStaticRouteMetric based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 15),
    )


_ImnStaticRouteMetric_Type.__name__ = "Integer32"
_ImnStaticRouteMetric_Object = MibTableColumn
imnStaticRouteMetric = _ImnStaticRouteMetric_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 7, 1, 3),
    _ImnStaticRouteMetric_Type()
)
imnStaticRouteMetric.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imnStaticRouteMetric.setStatus("mandatory")
_ImnRouteMaxMetric_Type = Integer32
_ImnRouteMaxMetric_Object = MibScalar
imnRouteMaxMetric = _ImnRouteMaxMetric_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 23, 8),
    _ImnRouteMaxMetric_Type()
)
imnRouteMaxMetric.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    imnRouteMaxMetric.setStatus("mandatory")
_Ring_ObjectIdentity = ObjectIdentity
ring = _Ring_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 24)
)
_RingNum_Type = Integer32
_RingNum_Object = MibScalar
ringNum = _RingNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 24, 1),
    _RingNum_Type()
)
ringNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ringNum.setStatus("mandatory")
_RingTable_Object = MibTable
ringTable = _RingTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 24, 2)
)
if mibBuilder.loadTexts:
    ringTable.setStatus("mandatory")
_RingEntry_Object = MibTableRow
ringEntry = _RingEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 24, 2, 1)
)
ringEntry.setIndexNames(
    (0, "LUXN-MIB", "ringIndex"),
)
if mibBuilder.loadTexts:
    ringEntry.setStatus("mandatory")
_RingIndex_Type = Integer32
_RingIndex_Object = MibTableColumn
ringIndex = _RingIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 24, 2, 1, 1),
    _RingIndex_Type()
)
ringIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ringIndex.setStatus("mandatory")
_RingID_Type = RingIdName
_RingID_Object = MibTableColumn
ringID = _RingID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 24, 2, 1, 2),
    _RingID_Type()
)
ringID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ringID.setStatus("mandatory")
_RingPathID1_Type = PathIdName
_RingPathID1_Object = MibTableColumn
ringPathID1 = _RingPathID1_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 24, 2, 1, 3),
    _RingPathID1_Type()
)
ringPathID1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ringPathID1.setStatus("mandatory")
_RingPathID2_Type = PathIdName
_RingPathID2_Object = MibTableColumn
ringPathID2 = _RingPathID2_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 24, 2, 1, 4),
    _RingPathID2_Type()
)
ringPathID2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ringPathID2.setStatus("mandatory")
_RingPath1RemoteIP_Type = IpAddress
_RingPath1RemoteIP_Object = MibTableColumn
ringPath1RemoteIP = _RingPath1RemoteIP_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 24, 2, 1, 5),
    _RingPath1RemoteIP_Type()
)
ringPath1RemoteIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ringPath1RemoteIP.setStatus("mandatory")


class _RingPath1RemoteChassisId_Type(DisplayString):
    """Custom type ringPath1RemoteChassisId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RingPath1RemoteChassisId_Type.__name__ = "DisplayString"
_RingPath1RemoteChassisId_Object = MibTableColumn
ringPath1RemoteChassisId = _RingPath1RemoteChassisId_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 24, 2, 1, 6),
    _RingPath1RemoteChassisId_Type()
)
ringPath1RemoteChassisId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ringPath1RemoteChassisId.setStatus("mandatory")
_RingPath2RemoteIP_Type = IpAddress
_RingPath2RemoteIP_Object = MibTableColumn
ringPath2RemoteIP = _RingPath2RemoteIP_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 24, 2, 1, 7),
    _RingPath2RemoteIP_Type()
)
ringPath2RemoteIP.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ringPath2RemoteIP.setStatus("mandatory")


class _RingPath2RemoteChassisId_Type(DisplayString):
    """Custom type ringPath2RemoteChassisId based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 16),
    )


_RingPath2RemoteChassisId_Type.__name__ = "DisplayString"
_RingPath2RemoteChassisId_Object = MibTableColumn
ringPath2RemoteChassisId = _RingPath2RemoteChassisId_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 24, 2, 1, 8),
    _RingPath2RemoteChassisId_Type()
)
ringPath2RemoteChassisId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ringPath2RemoteChassisId.setStatus("mandatory")
_Tap_ObjectIdentity = ObjectIdentity
tap = _Tap_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 25)
)
_TapNumber_Type = Integer32
_TapNumber_Object = MibScalar
tapNumber = _TapNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 25, 1),
    _TapNumber_Type()
)
tapNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapNumber.setStatus("mandatory")
_TapTable_Object = MibTable
tapTable = _TapTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 25, 2)
)
if mibBuilder.loadTexts:
    tapTable.setStatus("mandatory")
_TapEntry_Object = MibTableRow
tapEntry = _TapEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1)
)
tapEntry.setIndexNames(
    (0, "LUXN-MIB", "tapCardLocation"),
    (0, "LUXN-MIB", "tapCardShelf"),
    (0, "LUXN-MIB", "tapCardSlot"),
)
if mibBuilder.loadTexts:
    tapEntry.setStatus("mandatory")
_TapCardLocation_Type = CardLocation
_TapCardLocation_Object = MibTableColumn
tapCardLocation = _TapCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 1),
    _TapCardLocation_Type()
)
tapCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapCardLocation.setStatus("mandatory")
_TapCardShelf_Type = CardShelf
_TapCardShelf_Object = MibTableColumn
tapCardShelf = _TapCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 2),
    _TapCardShelf_Type()
)
tapCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapCardShelf.setStatus("mandatory")
_TapCardSlot_Type = SlotInput
_TapCardSlot_Object = MibTableColumn
tapCardSlot = _TapCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 3),
    _TapCardSlot_Type()
)
tapCardSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tapCardSlot.setStatus("mandatory")
_TapModelNum_Type = DisplayString
_TapModelNum_Object = MibTableColumn
tapModelNum = _TapModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 4),
    _TapModelNum_Type()
)
tapModelNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapModelNum.setStatus("mandatory")
_TapMfgDate_Type = DateAndTime
_TapMfgDate_Object = MibTableColumn
tapMfgDate = _TapMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 5),
    _TapMfgDate_Type()
)
tapMfgDate.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    tapMfgDate.setStatus("mandatory")
_TapSerialNum_Type = SerialString
_TapSerialNum_Object = MibTableColumn
tapSerialNum = _TapSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 6),
    _TapSerialNum_Type()
)
tapSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapSerialNum.setStatus("mandatory")
_TapModelType_Type = CardType
_TapModelType_Object = MibTableColumn
tapModelType = _TapModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 7),
    _TapModelType_Type()
)
tapModelType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapModelType.setStatus("mandatory")
_TapName_Type = CardName
_TapName_Object = MibTableColumn
tapName = _TapName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 8),
    _TapName_Type()
)
tapName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tapName.setStatus("mandatory")
_TapFWVersionID_Type = VersionString
_TapFWVersionID_Object = MibTableColumn
tapFWVersionID = _TapFWVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 9),
    _TapFWVersionID_Type()
)
tapFWVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapFWVersionID.setStatus("mandatory")
_TapHWName_Type = CardName
_TapHWName_Object = MibTableColumn
tapHWName = _TapHWName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 10),
    _TapHWName_Type()
)
tapHWName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHWName.setStatus("mandatory")
_TapPathID_Type = PathIdName
_TapPathID_Object = MibTableColumn
tapPathID = _TapPathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 11),
    _TapPathID_Type()
)
tapPathID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tapPathID.setStatus("mandatory")


class _TapAdminState_Type(Integer32):
    """Custom type tapAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("na", 3))
    )


_TapAdminState_Type.__name__ = "Integer32"
_TapAdminState_Object = MibTableColumn
tapAdminState = _TapAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 12),
    _TapAdminState_Type()
)
tapAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    tapAdminState.setStatus("mandatory")
_TapCleiNum_Type = DisplayString
_TapCleiNum_Object = MibTableColumn
tapCleiNum = _TapCleiNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 13),
    _TapCleiNum_Type()
)
tapCleiNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapCleiNum.setStatus("mandatory")
_TapNumPorts_Type = Integer32
_TapNumPorts_Object = MibTableColumn
tapNumPorts = _TapNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 14),
    _TapNumPorts_Type()
)
tapNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapNumPorts.setStatus("mandatory")
_Voadm_ObjectIdentity = ObjectIdentity
voadm = _Voadm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26)
)
_VoadmNumber_Type = Integer32
_VoadmNumber_Object = MibScalar
voadmNumber = _VoadmNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 1),
    _VoadmNumber_Type()
)
voadmNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmNumber.setStatus("mandatory")
_VoadmTable_Object = MibTable
voadmTable = _VoadmTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2)
)
if mibBuilder.loadTexts:
    voadmTable.setStatus("mandatory")
_VoadmEntry_Object = MibTableRow
voadmEntry = _VoadmEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1)
)
voadmEntry.setIndexNames(
    (0, "LUXN-MIB", "voadmCardLocation"),
    (0, "LUXN-MIB", "voadmCardShelf"),
    (0, "LUXN-MIB", "voadmCardSlot"),
)
if mibBuilder.loadTexts:
    voadmEntry.setStatus("mandatory")
_VoadmCardLocation_Type = CardLocation
_VoadmCardLocation_Object = MibTableColumn
voadmCardLocation = _VoadmCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 1),
    _VoadmCardLocation_Type()
)
voadmCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmCardLocation.setStatus("mandatory")
_VoadmCardShelf_Type = CardShelf
_VoadmCardShelf_Object = MibTableColumn
voadmCardShelf = _VoadmCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 2),
    _VoadmCardShelf_Type()
)
voadmCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmCardShelf.setStatus("mandatory")
_VoadmCardSlot_Type = SlotInput
_VoadmCardSlot_Object = MibTableColumn
voadmCardSlot = _VoadmCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 3),
    _VoadmCardSlot_Type()
)
voadmCardSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voadmCardSlot.setStatus("mandatory")
_VoadmSerialNum_Type = SerialString
_VoadmSerialNum_Object = MibTableColumn
voadmSerialNum = _VoadmSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 4),
    _VoadmSerialNum_Type()
)
voadmSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmSerialNum.setStatus("mandatory")
_VoadmModelNum_Type = DisplayString
_VoadmModelNum_Object = MibTableColumn
voadmModelNum = _VoadmModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 5),
    _VoadmModelNum_Type()
)
voadmModelNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmModelNum.setStatus("mandatory")
_VoadmHwName_Type = DisplayString
_VoadmHwName_Object = MibTableColumn
voadmHwName = _VoadmHwName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 6),
    _VoadmHwName_Type()
)
voadmHwName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmHwName.setStatus("mandatory")
_VoadmHwVersionID_Type = VersionString
_VoadmHwVersionID_Object = MibTableColumn
voadmHwVersionID = _VoadmHwVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 7),
    _VoadmHwVersionID_Type()
)
voadmHwVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmHwVersionID.setStatus("mandatory")
_VoadmMfgDate_Type = DateAndTime
_VoadmMfgDate_Object = MibTableColumn
voadmMfgDate = _VoadmMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 8),
    _VoadmMfgDate_Type()
)
voadmMfgDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmMfgDate.setStatus("mandatory")
_VoadmFwName_Type = CardName
_VoadmFwName_Object = MibTableColumn
voadmFwName = _VoadmFwName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 9),
    _VoadmFwName_Type()
)
voadmFwName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmFwName.setStatus("mandatory")
_VoadmFwVersionID_Type = VersionString
_VoadmFwVersionID_Object = MibTableColumn
voadmFwVersionID = _VoadmFwVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 10),
    _VoadmFwVersionID_Type()
)
voadmFwVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmFwVersionID.setStatus("mandatory")
_VoadmFwDate_Type = DateAndTime
_VoadmFwDate_Object = MibTableColumn
voadmFwDate = _VoadmFwDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 11),
    _VoadmFwDate_Type()
)
voadmFwDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmFwDate.setStatus("mandatory")


class _VoadmAdminState_Type(Integer32):
    """Custom type voadmAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("na", 3))
    )


_VoadmAdminState_Type.__name__ = "Integer32"
_VoadmAdminState_Object = MibTableColumn
voadmAdminState = _VoadmAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 12),
    _VoadmAdminState_Type()
)
voadmAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voadmAdminState.setStatus("mandatory")
_VoadmModelType_Type = CardType
_VoadmModelType_Object = MibTableColumn
voadmModelType = _VoadmModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 13),
    _VoadmModelType_Type()
)
voadmModelType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmModelType.setStatus("mandatory")
_VoadmName_Type = CardName
_VoadmName_Object = MibTableColumn
voadmName = _VoadmName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 14),
    _VoadmName_Type()
)
voadmName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voadmName.setStatus("mandatory")
_VoadmSetState_Type = RebootType
_VoadmSetState_Object = MibTableColumn
voadmSetState = _VoadmSetState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 15),
    _VoadmSetState_Type()
)
voadmSetState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voadmSetState.setStatus("mandatory")
_VoadmPathID_Type = PathIdName
_VoadmPathID_Object = MibTableColumn
voadmPathID = _VoadmPathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 16),
    _VoadmPathID_Type()
)
voadmPathID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voadmPathID.setStatus("mandatory")
_VoadmCleiNum_Type = DisplayString
_VoadmCleiNum_Object = MibTableColumn
voadmCleiNum = _VoadmCleiNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 17),
    _VoadmCleiNum_Type()
)
voadmCleiNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmCleiNum.setStatus("mandatory")
_VoadmActiveChannels_Type = Integer32
_VoadmActiveChannels_Object = MibTableColumn
voadmActiveChannels = _VoadmActiveChannels_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 18),
    _VoadmActiveChannels_Type()
)
voadmActiveChannels.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voadmActiveChannels.setStatus("mandatory")
_VoadmStartItu_Type = Integer32
_VoadmStartItu_Object = MibTableColumn
voadmStartItu = _VoadmStartItu_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 19),
    _VoadmStartItu_Type()
)
voadmStartItu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmStartItu.setStatus("mandatory")
_VoadmEndItu_Type = Integer32
_VoadmEndItu_Object = MibTableColumn
voadmEndItu = _VoadmEndItu_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 20),
    _VoadmEndItu_Type()
)
voadmEndItu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmEndItu.setStatus("mandatory")
_VoadmNumPorts_Type = Integer32
_VoadmNumPorts_Object = MibTableColumn
voadmNumPorts = _VoadmNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 21),
    _VoadmNumPorts_Type()
)
voadmNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmNumPorts.setStatus("mandatory")
_VoadmPortTable_Object = MibTable
voadmPortTable = _VoadmPortTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 3)
)
if mibBuilder.loadTexts:
    voadmPortTable.setStatus("mandatory")
_VoadmPortEntry_Object = MibTableRow
voadmPortEntry = _VoadmPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1)
)
voadmPortEntry.setIndexNames(
    (0, "LUXN-MIB", "voadmPortCardLocation"),
    (0, "LUXN-MIB", "voadmPortCardShelf"),
    (0, "LUXN-MIB", "voadmPortCardSlot"),
    (0, "LUXN-MIB", "voadmPortType"),
)
if mibBuilder.loadTexts:
    voadmPortEntry.setStatus("mandatory")
_VoadmPortCardLocation_Type = CardLocation
_VoadmPortCardLocation_Object = MibTableColumn
voadmPortCardLocation = _VoadmPortCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 1),
    _VoadmPortCardLocation_Type()
)
voadmPortCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmPortCardLocation.setStatus("mandatory")
_VoadmPortCardShelf_Type = CardShelf
_VoadmPortCardShelf_Object = MibTableColumn
voadmPortCardShelf = _VoadmPortCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 2),
    _VoadmPortCardShelf_Type()
)
voadmPortCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmPortCardShelf.setStatus("mandatory")
_VoadmPortCardSlot_Type = SlotInput
_VoadmPortCardSlot_Object = MibTableColumn
voadmPortCardSlot = _VoadmPortCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 3),
    _VoadmPortCardSlot_Type()
)
voadmPortCardSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmPortCardSlot.setStatus("mandatory")


class _VoadmPortType_Type(Integer32):
    """Custom type voadmPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("demux", 2),
          ("mux", 1))
    )


_VoadmPortType_Type.__name__ = "Integer32"
_VoadmPortType_Object = MibTableColumn
voadmPortType = _VoadmPortType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 4),
    _VoadmPortType_Type()
)
voadmPortType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmPortType.setStatus("mandatory")


class _VoadmPortMode_Type(Integer32):
    """Custom type voadmPortMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fixed-attentuation", 1),
          ("fixed-power", 2))
    )


_VoadmPortMode_Type.__name__ = "Integer32"
_VoadmPortMode_Object = MibTableColumn
voadmPortMode = _VoadmPortMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 5),
    _VoadmPortMode_Type()
)
voadmPortMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voadmPortMode.setStatus("mandatory")
_VoadmPortSetPoint_Type = DisplayString
_VoadmPortSetPoint_Object = MibTableColumn
voadmPortSetPoint = _VoadmPortSetPoint_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 6),
    _VoadmPortSetPoint_Type()
)
voadmPortSetPoint.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voadmPortSetPoint.setStatus("mandatory")
_VoadmPortMinChanInputPower_Type = DisplayString
_VoadmPortMinChanInputPower_Object = MibTableColumn
voadmPortMinChanInputPower = _VoadmPortMinChanInputPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 7),
    _VoadmPortMinChanInputPower_Type()
)
voadmPortMinChanInputPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voadmPortMinChanInputPower.setStatus("mandatory")
_VoadmPortMinChanOutputPower_Type = DisplayString
_VoadmPortMinChanOutputPower_Object = MibTableColumn
voadmPortMinChanOutputPower = _VoadmPortMinChanOutputPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 8),
    _VoadmPortMinChanOutputPower_Type()
)
voadmPortMinChanOutputPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voadmPortMinChanOutputPower.setStatus("mandatory")
_VoadmPortMaxChanOutputPower_Type = DisplayString
_VoadmPortMaxChanOutputPower_Object = MibTableColumn
voadmPortMaxChanOutputPower = _VoadmPortMaxChanOutputPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 9),
    _VoadmPortMaxChanOutputPower_Type()
)
voadmPortMaxChanOutputPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voadmPortMaxChanOutputPower.setStatus("mandatory")
_VoadmPortToleranceUpperBound_Type = DisplayString
_VoadmPortToleranceUpperBound_Object = MibTableColumn
voadmPortToleranceUpperBound = _VoadmPortToleranceUpperBound_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 10),
    _VoadmPortToleranceUpperBound_Type()
)
voadmPortToleranceUpperBound.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voadmPortToleranceUpperBound.setStatus("mandatory")
_VoadmPortToleranceLowerBound_Type = DisplayString
_VoadmPortToleranceLowerBound_Object = MibTableColumn
voadmPortToleranceLowerBound = _VoadmPortToleranceLowerBound_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 11),
    _VoadmPortToleranceLowerBound_Type()
)
voadmPortToleranceLowerBound.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    voadmPortToleranceLowerBound.setStatus("mandatory")
_VoadmPortTotalInputPower_Type = DisplayString
_VoadmPortTotalInputPower_Object = MibTableColumn
voadmPortTotalInputPower = _VoadmPortTotalInputPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 12),
    _VoadmPortTotalInputPower_Type()
)
voadmPortTotalInputPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmPortTotalInputPower.setStatus("mandatory")
_VoadmPortPerChanInputPower_Type = DisplayString
_VoadmPortPerChanInputPower_Object = MibTableColumn
voadmPortPerChanInputPower = _VoadmPortPerChanInputPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 13),
    _VoadmPortPerChanInputPower_Type()
)
voadmPortPerChanInputPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmPortPerChanInputPower.setStatus("mandatory")
_VoadmPortTotalOutputPower_Type = DisplayString
_VoadmPortTotalOutputPower_Object = MibTableColumn
voadmPortTotalOutputPower = _VoadmPortTotalOutputPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 14),
    _VoadmPortTotalOutputPower_Type()
)
voadmPortTotalOutputPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmPortTotalOutputPower.setStatus("mandatory")
_VoadmPortPerChanOutputPower_Type = DisplayString
_VoadmPortPerChanOutputPower_Object = MibTableColumn
voadmPortPerChanOutputPower = _VoadmPortPerChanOutputPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 15),
    _VoadmPortPerChanOutputPower_Type()
)
voadmPortPerChanOutputPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmPortPerChanOutputPower.setStatus("mandatory")
_VoadmPortMeasuredAtten_Type = DisplayString
_VoadmPortMeasuredAtten_Object = MibTableColumn
voadmPortMeasuredAtten = _VoadmPortMeasuredAtten_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 16),
    _VoadmPortMeasuredAtten_Type()
)
voadmPortMeasuredAtten.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmPortMeasuredAtten.setStatus("mandatory")
_VoadmPortAvgInsertLoss_Type = DisplayString
_VoadmPortAvgInsertLoss_Object = MibTableColumn
voadmPortAvgInsertLoss = _VoadmPortAvgInsertLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 17),
    _VoadmPortAvgInsertLoss_Type()
)
voadmPortAvgInsertLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmPortAvgInsertLoss.setStatus("mandatory")
_VoadmPortAvgExpressLoss_Type = DisplayString
_VoadmPortAvgExpressLoss_Object = MibTableColumn
voadmPortAvgExpressLoss = _VoadmPortAvgExpressLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 18),
    _VoadmPortAvgExpressLoss_Type()
)
voadmPortAvgExpressLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmPortAvgExpressLoss.setStatus("mandatory")
_ZmsConfigSync_ObjectIdentity = ObjectIdentity
zmsConfigSync = _ZmsConfigSync_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 27)
)
_ZmsConfigSyncExists_Type = Boolean
_ZmsConfigSyncExists_Object = MibScalar
zmsConfigSyncExists = _ZmsConfigSyncExists_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 27, 1),
    _ZmsConfigSyncExists_Type()
)
zmsConfigSyncExists.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    zmsConfigSyncExists.setStatus("current")
_ZmsConfigSyncOverflow_Type = Boolean
_ZmsConfigSyncOverflow_Object = MibScalar
zmsConfigSyncOverflow = _ZmsConfigSyncOverflow_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 27, 2),
    _ZmsConfigSyncOverflow_Type()
)
zmsConfigSyncOverflow.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    zmsConfigSyncOverflow.setStatus("current")


class _ZmsConfigSyncPriority_Type(Integer32):
    """Custom type zmsConfigSyncPriority based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("high", 4),
          ("low", 2),
          ("medium", 3),
          ("none", 1))
    )


_ZmsConfigSyncPriority_Type.__name__ = "Integer32"
_ZmsConfigSyncPriority_Object = MibScalar
zmsConfigSyncPriority = _ZmsConfigSyncPriority_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 27, 3),
    _ZmsConfigSyncPriority_Type()
)
zmsConfigSyncPriority.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    zmsConfigSyncPriority.setStatus("current")


class _ZmsConfigSyncAction_Type(Integer32):
    """Custom type zmsConfigSyncAction based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("createAlarmsList", 5),
          ("createFullList", 3),
          ("createFullListWithAlarms", 4),
          ("createList", 2),
          ("noAction", 1))
    )


_ZmsConfigSyncAction_Type.__name__ = "Integer32"
_ZmsConfigSyncAction_Object = MibScalar
zmsConfigSyncAction = _ZmsConfigSyncAction_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 27, 4),
    _ZmsConfigSyncAction_Type()
)
zmsConfigSyncAction.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    zmsConfigSyncAction.setStatus("current")
_ZmsConfigSyncFileName_Type = ZmsFileName
_ZmsConfigSyncFileName_Object = MibScalar
zmsConfigSyncFileName = _ZmsConfigSyncFileName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 27, 5),
    _ZmsConfigSyncFileName_Type()
)
zmsConfigSyncFileName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    zmsConfigSyncFileName.setStatus("current")


class _ZmsConfigSyncStatus_Type(Integer32):
    """Custom type zmsConfigSyncStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("syncComplete", 1),
          ("syncError", 3),
          ("syncInitializing", 4),
          ("syncPending", 2))
    )


_ZmsConfigSyncStatus_Type.__name__ = "Integer32"
_ZmsConfigSyncStatus_Object = MibScalar
zmsConfigSyncStatus = _ZmsConfigSyncStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 27, 6),
    _ZmsConfigSyncStatus_Type()
)
zmsConfigSyncStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    zmsConfigSyncStatus.setStatus("current")
_ZmsConfigSyncUserName_Type = ZmsAdminString
_ZmsConfigSyncUserName_Object = MibScalar
zmsConfigSyncUserName = _ZmsConfigSyncUserName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 27, 7),
    _ZmsConfigSyncUserName_Type()
)
zmsConfigSyncUserName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    zmsConfigSyncUserName.setStatus("current")
_ZmsConfigSyncUserPassword_Type = ZmsAdminString
_ZmsConfigSyncUserPassword_Object = MibScalar
zmsConfigSyncUserPassword = _ZmsConfigSyncUserPassword_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 27, 8),
    _ZmsConfigSyncUserPassword_Type()
)
zmsConfigSyncUserPassword.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    zmsConfigSyncUserPassword.setStatus("current")
_ZmsIpAddress_Type = IpAddress
_ZmsIpAddress_Object = MibScalar
zmsIpAddress = _ZmsIpAddress_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 27, 9),
    _ZmsIpAddress_Type()
)
zmsIpAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    zmsIpAddress.setStatus("current")
_Dmm_ObjectIdentity = ObjectIdentity
dmm = _Dmm_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28)
)
_DmmNumber_Type = Integer32
_DmmNumber_Object = MibScalar
dmmNumber = _DmmNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 1),
    _DmmNumber_Type()
)
dmmNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmNumber.setStatus("mandatory")
_DmmTable_Object = MibTable
dmmTable = _DmmTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 2)
)
if mibBuilder.loadTexts:
    dmmTable.setStatus("mandatory")
_DmmEntry_Object = MibTableRow
dmmEntry = _DmmEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1)
)
dmmEntry.setIndexNames(
    (0, "LUXN-MIB", "dmmCardLocation"),
    (0, "LUXN-MIB", "dmmCardShelf"),
    (0, "LUXN-MIB", "dmmCardSlot"),
)
if mibBuilder.loadTexts:
    dmmEntry.setStatus("mandatory")
_DmmCardLocation_Type = CardLocation
_DmmCardLocation_Object = MibTableColumn
dmmCardLocation = _DmmCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 1),
    _DmmCardLocation_Type()
)
dmmCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmCardLocation.setStatus("mandatory")
_DmmCardShelf_Type = CardShelf
_DmmCardShelf_Object = MibTableColumn
dmmCardShelf = _DmmCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 2),
    _DmmCardShelf_Type()
)
dmmCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmCardShelf.setStatus("mandatory")
_DmmCardSlot_Type = SlotInput
_DmmCardSlot_Object = MibTableColumn
dmmCardSlot = _DmmCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 3),
    _DmmCardSlot_Type()
)
dmmCardSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dmmCardSlot.setStatus("mandatory")
_DmmSerialNum_Type = SerialString
_DmmSerialNum_Object = MibTableColumn
dmmSerialNum = _DmmSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 4),
    _DmmSerialNum_Type()
)
dmmSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmSerialNum.setStatus("mandatory")
_DmmModelNum_Type = DisplayString
_DmmModelNum_Object = MibTableColumn
dmmModelNum = _DmmModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 5),
    _DmmModelNum_Type()
)
dmmModelNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmModelNum.setStatus("mandatory")
_DmmHwName_Type = DisplayString
_DmmHwName_Object = MibTableColumn
dmmHwName = _DmmHwName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 6),
    _DmmHwName_Type()
)
dmmHwName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmHwName.setStatus("mandatory")
_DmmHwVersionID_Type = VersionString
_DmmHwVersionID_Object = MibTableColumn
dmmHwVersionID = _DmmHwVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 7),
    _DmmHwVersionID_Type()
)
dmmHwVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmHwVersionID.setStatus("mandatory")
_DmmMfgDate_Type = DateAndTime
_DmmMfgDate_Object = MibTableColumn
dmmMfgDate = _DmmMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 8),
    _DmmMfgDate_Type()
)
dmmMfgDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmMfgDate.setStatus("mandatory")
_DmmFwName_Type = CardName
_DmmFwName_Object = MibTableColumn
dmmFwName = _DmmFwName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 9),
    _DmmFwName_Type()
)
dmmFwName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmFwName.setStatus("mandatory")
_DmmFwVersionID_Type = VersionString
_DmmFwVersionID_Object = MibTableColumn
dmmFwVersionID = _DmmFwVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 10),
    _DmmFwVersionID_Type()
)
dmmFwVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmFwVersionID.setStatus("mandatory")
_DmmFwDate_Type = DateAndTime
_DmmFwDate_Object = MibTableColumn
dmmFwDate = _DmmFwDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 11),
    _DmmFwDate_Type()
)
dmmFwDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmFwDate.setStatus("mandatory")


class _DmmAdminState_Type(Integer32):
    """Custom type dmmAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("na", 3))
    )


_DmmAdminState_Type.__name__ = "Integer32"
_DmmAdminState_Object = MibTableColumn
dmmAdminState = _DmmAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 12),
    _DmmAdminState_Type()
)
dmmAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dmmAdminState.setStatus("mandatory")
_DmmModelType_Type = CardType
_DmmModelType_Object = MibTableColumn
dmmModelType = _DmmModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 13),
    _DmmModelType_Type()
)
dmmModelType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmModelType.setStatus("mandatory")
_DmmName_Type = CardName
_DmmName_Object = MibTableColumn
dmmName = _DmmName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 14),
    _DmmName_Type()
)
dmmName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dmmName.setStatus("mandatory")


class _DmmSetState_Type(Integer32):
    """Custom type dmmSetState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("disableloopback", 6),
          ("enableLinkLoopback", 3),
          ("enablePort1Loopback", 4),
          ("enablePort2Loopback", 5),
          ("other", 1),
          ("warmboot", 2))
    )


_DmmSetState_Type.__name__ = "Integer32"
_DmmSetState_Object = MibTableColumn
dmmSetState = _DmmSetState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 15),
    _DmmSetState_Type()
)
dmmSetState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dmmSetState.setStatus("mandatory")
_DmmPathID_Type = PathIdName
_DmmPathID_Object = MibTableColumn
dmmPathID = _DmmPathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 16),
    _DmmPathID_Type()
)
dmmPathID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dmmPathID.setStatus("mandatory")
_DmmLinkName_Type = LinkName
_DmmLinkName_Object = MibTableColumn
dmmLinkName = _DmmLinkName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 17),
    _DmmLinkName_Type()
)
dmmLinkName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dmmLinkName.setStatus("mandatory")
_DmmCleiNum_Type = DisplayString
_DmmCleiNum_Object = MibTableColumn
dmmCleiNum = _DmmCleiNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 18),
    _DmmCleiNum_Type()
)
dmmCleiNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmCleiNum.setStatus("mandatory")
_DmmNumPorts_Type = Integer32
_DmmNumPorts_Object = MibTableColumn
dmmNumPorts = _DmmNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 19),
    _DmmNumPorts_Type()
)
dmmNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmNumPorts.setStatus("mandatory")
_DmmFpgaRev_Type = Integer32
_DmmFpgaRev_Object = MibTableColumn
dmmFpgaRev = _DmmFpgaRev_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 20),
    _DmmFpgaRev_Type()
)
dmmFpgaRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmFpgaRev.setStatus("mandatory")
_DmmPortTable_Object = MibTable
dmmPortTable = _DmmPortTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 3)
)
if mibBuilder.loadTexts:
    dmmPortTable.setStatus("mandatory")
_DmmPortEntry_Object = MibTableRow
dmmPortEntry = _DmmPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1)
)
dmmPortEntry.setIndexNames(
    (0, "LUXN-MIB", "dmmPortLocation"),
    (0, "LUXN-MIB", "dmmPortShelf"),
    (0, "LUXN-MIB", "dmmPortSlot"),
    (0, "LUXN-MIB", "dmmPortIndex"),
)
if mibBuilder.loadTexts:
    dmmPortEntry.setStatus("mandatory")
_DmmPortLocation_Type = CardLocation
_DmmPortLocation_Object = MibTableColumn
dmmPortLocation = _DmmPortLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 1),
    _DmmPortLocation_Type()
)
dmmPortLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPortLocation.setStatus("mandatory")
_DmmPortShelf_Type = CardShelf
_DmmPortShelf_Object = MibTableColumn
dmmPortShelf = _DmmPortShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 2),
    _DmmPortShelf_Type()
)
dmmPortShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPortShelf.setStatus("mandatory")
_DmmPortSlot_Type = SlotInput
_DmmPortSlot_Object = MibTableColumn
dmmPortSlot = _DmmPortSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 3),
    _DmmPortSlot_Type()
)
dmmPortSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPortSlot.setStatus("mandatory")


class _DmmPortIndex_Type(Integer32):
    """Custom type dmmPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("link", 1),
          ("port1", 2),
          ("port2", 3))
    )


_DmmPortIndex_Type.__name__ = "Integer32"
_DmmPortIndex_Object = MibTableColumn
dmmPortIndex = _DmmPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 4),
    _DmmPortIndex_Type()
)
dmmPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPortIndex.setStatus("mandatory")


class _DmmPortLineRate_Type(Integer32):
    """Custom type dmmPortLineRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              4,
              5,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 255),
          ("fibreChannel", 5),
          ("gbEthernet", 4),
          ("notapplicable", 0))
    )


_DmmPortLineRate_Type.__name__ = "Integer32"
_DmmPortLineRate_Object = MibTableColumn
dmmPortLineRate = _DmmPortLineRate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 5),
    _DmmPortLineRate_Type()
)
dmmPortLineRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dmmPortLineRate.setStatus("mandatory")


class _DmmPortAutoDisable_Type(Integer32):
    """Custom type dmmPortAutoDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1),
          ("farEndEnable", 3),
          ("notapplicable", 0))
    )


_DmmPortAutoDisable_Type.__name__ = "Integer32"
_DmmPortAutoDisable_Object = MibTableColumn
dmmPortAutoDisable = _DmmPortAutoDisable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 6),
    _DmmPortAutoDisable_Type()
)
dmmPortAutoDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dmmPortAutoDisable.setStatus("mandatory")


class _DmmPortMode_Type(Integer32):
    """Custom type dmmPortMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2),
          ("loopback", 3))
    )


_DmmPortMode_Type.__name__ = "Integer32"
_DmmPortMode_Object = MibTableColumn
dmmPortMode = _DmmPortMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 7),
    _DmmPortMode_Type()
)
dmmPortMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPortMode.setStatus("mandatory")
_DmmPortItu_Type = Integer32
_DmmPortItu_Object = MibTableColumn
dmmPortItu = _DmmPortItu_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 8),
    _DmmPortItu_Type()
)
dmmPortItu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPortItu.setStatus("mandatory")
_DmmPortWavelength_Type = DisplayString
_DmmPortWavelength_Object = MibTableColumn
dmmPortWavelength = _DmmPortWavelength_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 9),
    _DmmPortWavelength_Type()
)
dmmPortWavelength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPortWavelength.setStatus("mandatory")
_DmmPortRxPower_Type = DisplayString
_DmmPortRxPower_Object = MibTableColumn
dmmPortRxPower = _DmmPortRxPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 10),
    _DmmPortRxPower_Type()
)
dmmPortRxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPortRxPower.setStatus("mandatory")


class _DmmPortTxState_Type(Integer32):
    """Custom type dmmPortTxState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_DmmPortTxState_Type.__name__ = "Integer32"
_DmmPortTxState_Object = MibTableColumn
dmmPortTxState = _DmmPortTxState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 11),
    _DmmPortTxState_Type()
)
dmmPortTxState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPortTxState.setStatus("mandatory")
_DmmPortTxReach_Type = Integer32
_DmmPortTxReach_Object = MibTableColumn
dmmPortTxReach = _DmmPortTxReach_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 12),
    _DmmPortTxReach_Type()
)
dmmPortTxReach.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPortTxReach.setStatus("mandatory")
_DmmPortSfpSerialNumber_Type = DisplayString
_DmmPortSfpSerialNumber_Object = MibTableColumn
dmmPortSfpSerialNumber = _DmmPortSfpSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 13),
    _DmmPortSfpSerialNumber_Type()
)
dmmPortSfpSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPortSfpSerialNumber.setStatus("mandatory")


class _DmmPortSfpConnectorType_Type(Integer32):
    """Custom type dmmPortSfpConnectorType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              33,
              34)
        )
    )
    namedValues = NamedValues(
        *(("bnc", 5),
          ("copper", 34),
          ("fc_capper2", 4),
          ("fc_coaxial", 6),
          ("fc_copper1", 3),
          ("fiberjack", 7),
          ("hssdcii", 33),
          ("lc", 8),
          ("mtrj", 9),
          ("mu", 10),
          ("na", 0),
          ("optpigtail", 12),
          ("sc", 2),
          ("sg", 11),
          ("unknown", 1))
    )


_DmmPortSfpConnectorType_Type.__name__ = "Integer32"
_DmmPortSfpConnectorType_Object = MibTableColumn
dmmPortSfpConnectorType = _DmmPortSfpConnectorType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 14),
    _DmmPortSfpConnectorType_Type()
)
dmmPortSfpConnectorType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPortSfpConnectorType.setStatus("mandatory")
_DmmConnTable_Object = MibTable
dmmConnTable = _DmmConnTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 4)
)
if mibBuilder.loadTexts:
    dmmConnTable.setStatus("mandatory")
_DmmConnEntry_Object = MibTableRow
dmmConnEntry = _DmmConnEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 4, 1)
)
dmmConnEntry.setIndexNames(
    (0, "LUXN-MIB", "dmmConnCardLocation"),
    (0, "LUXN-MIB", "dmmConnCardShelf"),
    (0, "LUXN-MIB", "dmmConnCardSlot"),
    (0, "LUXN-MIB", "dmmConnCardPortType"),
)
if mibBuilder.loadTexts:
    dmmConnEntry.setStatus("mandatory")
_DmmConnCardLocation_Type = CardLocation
_DmmConnCardLocation_Object = MibTableColumn
dmmConnCardLocation = _DmmConnCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 4, 1, 1),
    _DmmConnCardLocation_Type()
)
dmmConnCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmConnCardLocation.setStatus("mandatory")
_DmmConnCardShelf_Type = CardShelf
_DmmConnCardShelf_Object = MibTableColumn
dmmConnCardShelf = _DmmConnCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 4, 1, 2),
    _DmmConnCardShelf_Type()
)
dmmConnCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmConnCardShelf.setStatus("mandatory")
_DmmConnCardSlot_Type = SlotInput
_DmmConnCardSlot_Object = MibTableColumn
dmmConnCardSlot = _DmmConnCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 4, 1, 3),
    _DmmConnCardSlot_Type()
)
dmmConnCardSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmConnCardSlot.setStatus("mandatory")


class _DmmConnCardPortType_Type(Integer32):
    """Custom type dmmConnCardPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("linkrx", 6),
          ("linktx", 5),
          ("port1rx", 2),
          ("port1tx", 1),
          ("port2rx", 4),
          ("port2tx", 3))
    )


_DmmConnCardPortType_Type.__name__ = "Integer32"
_DmmConnCardPortType_Object = MibTableColumn
dmmConnCardPortType = _DmmConnCardPortType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 4, 1, 4),
    _DmmConnCardPortType_Type()
)
dmmConnCardPortType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmConnCardPortType.setStatus("mandatory")
_DmmConnCardType_Type = CardType
_DmmConnCardType_Object = MibTableColumn
dmmConnCardType = _DmmConnCardType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 4, 1, 5),
    _DmmConnCardType_Type()
)
dmmConnCardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmConnCardType.setStatus("mandatory")
_DmmConnLocation_Type = CardLocation
_DmmConnLocation_Object = MibTableColumn
dmmConnLocation = _DmmConnLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 4, 1, 6),
    _DmmConnLocation_Type()
)
dmmConnLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmConnLocation.setStatus("mandatory")
_DmmConnShelf_Type = ShelfInput
_DmmConnShelf_Object = MibTableColumn
dmmConnShelf = _DmmConnShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 4, 1, 7),
    _DmmConnShelf_Type()
)
dmmConnShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmConnShelf.setStatus("mandatory")
_DmmConnSlot_Type = SlotInput
_DmmConnSlot_Object = MibTableColumn
dmmConnSlot = _DmmConnSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 4, 1, 8),
    _DmmConnSlot_Type()
)
dmmConnSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmConnSlot.setStatus("mandatory")
_DmmConnPort_Type = Integer32
_DmmConnPort_Object = MibTableColumn
dmmConnPort = _DmmConnPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 28, 4, 1, 9),
    _DmmConnPort_Type()
)
dmmConnPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmConnPort.setStatus("mandatory")
_Ocm10gf_ObjectIdentity = ObjectIdentity
ocm10gf = _Ocm10gf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29)
)
_Ocm10gfNumber_Type = Integer32
_Ocm10gfNumber_Object = MibScalar
ocm10gfNumber = _Ocm10gfNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 1),
    _Ocm10gfNumber_Type()
)
ocm10gfNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfNumber.setStatus("mandatory")
_Ocm10gfTable_Object = MibTable
ocm10gfTable = _Ocm10gfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2)
)
if mibBuilder.loadTexts:
    ocm10gfTable.setStatus("mandatory")
_Ocm10gfEntry_Object = MibTableRow
ocm10gfEntry = _Ocm10gfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1)
)
ocm10gfEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm10gfCardLocation"),
    (0, "LUXN-MIB", "ocm10gfCardShelf"),
    (0, "LUXN-MIB", "ocm10gfCardSlot"),
)
if mibBuilder.loadTexts:
    ocm10gfEntry.setStatus("mandatory")
_Ocm10gfCardLocation_Type = CardLocation
_Ocm10gfCardLocation_Object = MibTableColumn
ocm10gfCardLocation = _Ocm10gfCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 1),
    _Ocm10gfCardLocation_Type()
)
ocm10gfCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfCardLocation.setStatus("mandatory")
_Ocm10gfCardShelf_Type = CardShelf
_Ocm10gfCardShelf_Object = MibTableColumn
ocm10gfCardShelf = _Ocm10gfCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 2),
    _Ocm10gfCardShelf_Type()
)
ocm10gfCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfCardShelf.setStatus("mandatory")
_Ocm10gfCardSlot_Type = SlotInput
_Ocm10gfCardSlot_Object = MibTableColumn
ocm10gfCardSlot = _Ocm10gfCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 3),
    _Ocm10gfCardSlot_Type()
)
ocm10gfCardSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm10gfCardSlot.setStatus("mandatory")
_Ocm10gfSerialNum_Type = SerialString
_Ocm10gfSerialNum_Object = MibTableColumn
ocm10gfSerialNum = _Ocm10gfSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 4),
    _Ocm10gfSerialNum_Type()
)
ocm10gfSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfSerialNum.setStatus("mandatory")
_Ocm10gfModelNum_Type = DisplayString
_Ocm10gfModelNum_Object = MibTableColumn
ocm10gfModelNum = _Ocm10gfModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 5),
    _Ocm10gfModelNum_Type()
)
ocm10gfModelNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfModelNum.setStatus("mandatory")
_Ocm10gfHwName_Type = DisplayString
_Ocm10gfHwName_Object = MibTableColumn
ocm10gfHwName = _Ocm10gfHwName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 6),
    _Ocm10gfHwName_Type()
)
ocm10gfHwName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfHwName.setStatus("mandatory")
_Ocm10gfHwVersionID_Type = VersionString
_Ocm10gfHwVersionID_Object = MibTableColumn
ocm10gfHwVersionID = _Ocm10gfHwVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 7),
    _Ocm10gfHwVersionID_Type()
)
ocm10gfHwVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfHwVersionID.setStatus("mandatory")
_Ocm10gfMfgDate_Type = DateAndTime
_Ocm10gfMfgDate_Object = MibTableColumn
ocm10gfMfgDate = _Ocm10gfMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 8),
    _Ocm10gfMfgDate_Type()
)
ocm10gfMfgDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfMfgDate.setStatus("mandatory")
_Ocm10gfFwName_Type = CardName
_Ocm10gfFwName_Object = MibTableColumn
ocm10gfFwName = _Ocm10gfFwName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 9),
    _Ocm10gfFwName_Type()
)
ocm10gfFwName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfFwName.setStatus("mandatory")
_Ocm10gfFwVersionID_Type = VersionString
_Ocm10gfFwVersionID_Object = MibTableColumn
ocm10gfFwVersionID = _Ocm10gfFwVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 10),
    _Ocm10gfFwVersionID_Type()
)
ocm10gfFwVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfFwVersionID.setStatus("mandatory")
_Ocm10gfFwDate_Type = DateAndTime
_Ocm10gfFwDate_Object = MibTableColumn
ocm10gfFwDate = _Ocm10gfFwDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 11),
    _Ocm10gfFwDate_Type()
)
ocm10gfFwDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfFwDate.setStatus("mandatory")
_Ocm10gfModelType_Type = CardType
_Ocm10gfModelType_Object = MibTableColumn
ocm10gfModelType = _Ocm10gfModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 12),
    _Ocm10gfModelType_Type()
)
ocm10gfModelType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfModelType.setStatus("mandatory")
_Ocm10gfName_Type = CardName
_Ocm10gfName_Object = MibTableColumn
ocm10gfName = _Ocm10gfName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 13),
    _Ocm10gfName_Type()
)
ocm10gfName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm10gfName.setStatus("mandatory")


class _Ocm10gfLineRate_Type(Integer32):
    """Custom type ocm10gfLineRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(9,
              11,
              12,
              13,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 255),
          ("fc10", 11),
          ("gbE10", 9),
          ("oc192nt", 12),
          ("oc192tr", 13))
    )


_Ocm10gfLineRate_Type.__name__ = "Integer32"
_Ocm10gfLineRate_Object = MibTableColumn
ocm10gfLineRate = _Ocm10gfLineRate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 14),
    _Ocm10gfLineRate_Type()
)
ocm10gfLineRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm10gfLineRate.setStatus("mandatory")


class _Ocm10gfAutoDisable_Type(Integer32):
    """Custom type ocm10gfAutoDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_Ocm10gfAutoDisable_Type.__name__ = "Integer32"
_Ocm10gfAutoDisable_Object = MibTableColumn
ocm10gfAutoDisable = _Ocm10gfAutoDisable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 15),
    _Ocm10gfAutoDisable_Type()
)
ocm10gfAutoDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm10gfAutoDisable.setStatus("mandatory")
_Ocm10gfLinkName_Type = LinkName
_Ocm10gfLinkName_Object = MibTableColumn
ocm10gfLinkName = _Ocm10gfLinkName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 16),
    _Ocm10gfLinkName_Type()
)
ocm10gfLinkName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm10gfLinkName.setStatus("mandatory")
_Ocm10gfPathID_Type = PathIdName
_Ocm10gfPathID_Object = MibTableColumn
ocm10gfPathID = _Ocm10gfPathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 17),
    _Ocm10gfPathID_Type()
)
ocm10gfPathID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm10gfPathID.setStatus("mandatory")


class _Ocm10gfAdminState_Type(Integer32):
    """Custom type ocm10gfAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("na", 3))
    )


_Ocm10gfAdminState_Type.__name__ = "Integer32"
_Ocm10gfAdminState_Object = MibTableColumn
ocm10gfAdminState = _Ocm10gfAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 18),
    _Ocm10gfAdminState_Type()
)
ocm10gfAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm10gfAdminState.setStatus("mandatory")


class _Ocm10gfSetState_Type(Integer32):
    """Custom type ocm10gfSetState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("disableloopback", 5),
          ("enableCpeLoopback", 4),
          ("enableLinkLoopback", 3),
          ("other", 1),
          ("warmboot", 2))
    )


_Ocm10gfSetState_Type.__name__ = "Integer32"
_Ocm10gfSetState_Object = MibTableColumn
ocm10gfSetState = _Ocm10gfSetState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 19),
    _Ocm10gfSetState_Type()
)
ocm10gfSetState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm10gfSetState.setStatus("mandatory")
_Ocm10gfCleiNum_Type = DisplayString
_Ocm10gfCleiNum_Object = MibTableColumn
ocm10gfCleiNum = _Ocm10gfCleiNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 20),
    _Ocm10gfCleiNum_Type()
)
ocm10gfCleiNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfCleiNum.setStatus("mandatory")
_Ocm10gfNumPorts_Type = Integer32
_Ocm10gfNumPorts_Object = MibTableColumn
ocm10gfNumPorts = _Ocm10gfNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 21),
    _Ocm10gfNumPorts_Type()
)
ocm10gfNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfNumPorts.setStatus("mandatory")
_Ocm10gfFpgaRev_Type = Integer32
_Ocm10gfFpgaRev_Object = MibTableColumn
ocm10gfFpgaRev = _Ocm10gfFpgaRev_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 22),
    _Ocm10gfFpgaRev_Type()
)
ocm10gfFpgaRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfFpgaRev.setStatus("mandatory")
_Ocm10gfPortTable_Object = MibTable
ocm10gfPortTable = _Ocm10gfPortTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 3)
)
if mibBuilder.loadTexts:
    ocm10gfPortTable.setStatus("mandatory")
_Ocm10gfPortEntry_Object = MibTableRow
ocm10gfPortEntry = _Ocm10gfPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 3, 1)
)
ocm10gfPortEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm10gfPortLocation"),
    (0, "LUXN-MIB", "ocm10gfPortShelf"),
    (0, "LUXN-MIB", "ocm10gfPortSlot"),
    (0, "LUXN-MIB", "ocm10gfPortIndex"),
)
if mibBuilder.loadTexts:
    ocm10gfPortEntry.setStatus("mandatory")
_Ocm10gfPortLocation_Type = CardLocation
_Ocm10gfPortLocation_Object = MibTableColumn
ocm10gfPortLocation = _Ocm10gfPortLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 3, 1, 1),
    _Ocm10gfPortLocation_Type()
)
ocm10gfPortLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPortLocation.setStatus("mandatory")
_Ocm10gfPortShelf_Type = CardShelf
_Ocm10gfPortShelf_Object = MibTableColumn
ocm10gfPortShelf = _Ocm10gfPortShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 3, 1, 2),
    _Ocm10gfPortShelf_Type()
)
ocm10gfPortShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPortShelf.setStatus("mandatory")
_Ocm10gfPortSlot_Type = SlotInput
_Ocm10gfPortSlot_Object = MibTableColumn
ocm10gfPortSlot = _Ocm10gfPortSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 3, 1, 3),
    _Ocm10gfPortSlot_Type()
)
ocm10gfPortSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPortSlot.setStatus("mandatory")


class _Ocm10gfPortIndex_Type(Integer32):
    """Custom type ocm10gfPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("cpe", 2),
          ("link", 1))
    )


_Ocm10gfPortIndex_Type.__name__ = "Integer32"
_Ocm10gfPortIndex_Object = MibTableColumn
ocm10gfPortIndex = _Ocm10gfPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 3, 1, 4),
    _Ocm10gfPortIndex_Type()
)
ocm10gfPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPortIndex.setStatus("mandatory")


class _Ocm10gfPortMode_Type(Integer32):
    """Custom type ocm10gfPortMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2),
          ("loopback", 3))
    )


_Ocm10gfPortMode_Type.__name__ = "Integer32"
_Ocm10gfPortMode_Object = MibTableColumn
ocm10gfPortMode = _Ocm10gfPortMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 3, 1, 5),
    _Ocm10gfPortMode_Type()
)
ocm10gfPortMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPortMode.setStatus("mandatory")
_Ocm10gfPortWavelength_Type = DisplayString
_Ocm10gfPortWavelength_Object = MibTableColumn
ocm10gfPortWavelength = _Ocm10gfPortWavelength_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 3, 1, 6),
    _Ocm10gfPortWavelength_Type()
)
ocm10gfPortWavelength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPortWavelength.setStatus("mandatory")
_Ocm10gfPortRxPower_Type = DisplayString
_Ocm10gfPortRxPower_Object = MibTableColumn
ocm10gfPortRxPower = _Ocm10gfPortRxPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 3, 1, 7),
    _Ocm10gfPortRxPower_Type()
)
ocm10gfPortRxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPortRxPower.setStatus("mandatory")


class _Ocm10gfPortTxState_Type(Integer32):
    """Custom type ocm10gfPortTxState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("na", 0),
          ("off", 2),
          ("on", 1))
    )


_Ocm10gfPortTxState_Type.__name__ = "Integer32"
_Ocm10gfPortTxState_Object = MibTableColumn
ocm10gfPortTxState = _Ocm10gfPortTxState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 3, 1, 8),
    _Ocm10gfPortTxState_Type()
)
ocm10gfPortTxState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPortTxState.setStatus("mandatory")
_Ocm10gfPortTxReach_Type = Integer32
_Ocm10gfPortTxReach_Object = MibTableColumn
ocm10gfPortTxReach = _Ocm10gfPortTxReach_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 3, 1, 9),
    _Ocm10gfPortTxReach_Type()
)
ocm10gfPortTxReach.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPortTxReach.setStatus("mandatory")
_Ocm10gfPortXfpSerialNumber_Type = DisplayString
_Ocm10gfPortXfpSerialNumber_Object = MibTableColumn
ocm10gfPortXfpSerialNumber = _Ocm10gfPortXfpSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 3, 1, 10),
    _Ocm10gfPortXfpSerialNumber_Type()
)
ocm10gfPortXfpSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPortXfpSerialNumber.setStatus("mandatory")
_Ocm10gfConnTable_Object = MibTable
ocm10gfConnTable = _Ocm10gfConnTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 4)
)
if mibBuilder.loadTexts:
    ocm10gfConnTable.setStatus("mandatory")
_Ocm10gfConnEntry_Object = MibTableRow
ocm10gfConnEntry = _Ocm10gfConnEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 4, 1)
)
ocm10gfConnEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm10gfConnCardLocation"),
    (0, "LUXN-MIB", "ocm10gfConnCardShelf"),
    (0, "LUXN-MIB", "ocm10gfConnCardSlot"),
    (0, "LUXN-MIB", "ocm10gfConnCardPortType"),
)
if mibBuilder.loadTexts:
    ocm10gfConnEntry.setStatus("mandatory")
_Ocm10gfConnCardLocation_Type = CardLocation
_Ocm10gfConnCardLocation_Object = MibTableColumn
ocm10gfConnCardLocation = _Ocm10gfConnCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 4, 1, 1),
    _Ocm10gfConnCardLocation_Type()
)
ocm10gfConnCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfConnCardLocation.setStatus("mandatory")
_Ocm10gfConnCardShelf_Type = CardShelf
_Ocm10gfConnCardShelf_Object = MibTableColumn
ocm10gfConnCardShelf = _Ocm10gfConnCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 4, 1, 2),
    _Ocm10gfConnCardShelf_Type()
)
ocm10gfConnCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfConnCardShelf.setStatus("mandatory")
_Ocm10gfConnCardSlot_Type = SlotInput
_Ocm10gfConnCardSlot_Object = MibTableColumn
ocm10gfConnCardSlot = _Ocm10gfConnCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 4, 1, 3),
    _Ocm10gfConnCardSlot_Type()
)
ocm10gfConnCardSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfConnCardSlot.setStatus("mandatory")


class _Ocm10gfConnCardPortType_Type(Integer32):
    """Custom type ocm10gfConnCardPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("cperx", 4),
          ("cpetx", 3),
          ("linkrx", 2),
          ("linktx", 1))
    )


_Ocm10gfConnCardPortType_Type.__name__ = "Integer32"
_Ocm10gfConnCardPortType_Object = MibTableColumn
ocm10gfConnCardPortType = _Ocm10gfConnCardPortType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 4, 1, 4),
    _Ocm10gfConnCardPortType_Type()
)
ocm10gfConnCardPortType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfConnCardPortType.setStatus("mandatory")
_Ocm10gfConnCardType_Type = CardType
_Ocm10gfConnCardType_Object = MibTableColumn
ocm10gfConnCardType = _Ocm10gfConnCardType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 4, 1, 5),
    _Ocm10gfConnCardType_Type()
)
ocm10gfConnCardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfConnCardType.setStatus("mandatory")
_Ocm10gfConnLocation_Type = CardLocation
_Ocm10gfConnLocation_Object = MibTableColumn
ocm10gfConnLocation = _Ocm10gfConnLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 4, 1, 6),
    _Ocm10gfConnLocation_Type()
)
ocm10gfConnLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfConnLocation.setStatus("mandatory")
_Ocm10gfConnShelf_Type = ShelfInput
_Ocm10gfConnShelf_Object = MibTableColumn
ocm10gfConnShelf = _Ocm10gfConnShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 4, 1, 7),
    _Ocm10gfConnShelf_Type()
)
ocm10gfConnShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfConnShelf.setStatus("mandatory")
_Ocm10gfConnSlot_Type = SlotInput
_Ocm10gfConnSlot_Object = MibTableColumn
ocm10gfConnSlot = _Ocm10gfConnSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 4, 1, 8),
    _Ocm10gfConnSlot_Type()
)
ocm10gfConnSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfConnSlot.setStatus("mandatory")
_Ocm10gfConnPort_Type = Integer32
_Ocm10gfConnPort_Object = MibTableColumn
ocm10gfConnPort = _Ocm10gfConnPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 29, 4, 1, 9),
    _Ocm10gfConnPort_Type()
)
ocm10gfConnPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfConnPort.setStatus("mandatory")
_Ocm2_ObjectIdentity = ObjectIdentity
ocm2 = _Ocm2_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30)
)
_Ocm2Number_Type = Integer32
_Ocm2Number_Object = MibScalar
ocm2Number = _Ocm2Number_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 1),
    _Ocm2Number_Type()
)
ocm2Number.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2Number.setStatus("mandatory")
_Ocm2Table_Object = MibTable
ocm2Table = _Ocm2Table_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2)
)
if mibBuilder.loadTexts:
    ocm2Table.setStatus("mandatory")
_Ocm2Entry_Object = MibTableRow
ocm2Entry = _Ocm2Entry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1)
)
ocm2Entry.setIndexNames(
    (0, "LUXN-MIB", "ocm2CardLocation"),
    (0, "LUXN-MIB", "ocm2CardShelf"),
    (0, "LUXN-MIB", "ocm2CardSlot"),
)
if mibBuilder.loadTexts:
    ocm2Entry.setStatus("mandatory")
_Ocm2CardLocation_Type = CardLocation
_Ocm2CardLocation_Object = MibTableColumn
ocm2CardLocation = _Ocm2CardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 1),
    _Ocm2CardLocation_Type()
)
ocm2CardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2CardLocation.setStatus("mandatory")
_Ocm2CardShelf_Type = CardShelf
_Ocm2CardShelf_Object = MibTableColumn
ocm2CardShelf = _Ocm2CardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 2),
    _Ocm2CardShelf_Type()
)
ocm2CardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2CardShelf.setStatus("mandatory")
_Ocm2CardSlot_Type = SlotInput
_Ocm2CardSlot_Object = MibTableColumn
ocm2CardSlot = _Ocm2CardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 3),
    _Ocm2CardSlot_Type()
)
ocm2CardSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm2CardSlot.setStatus("mandatory")
_Ocm2SerialNum_Type = SerialString
_Ocm2SerialNum_Object = MibTableColumn
ocm2SerialNum = _Ocm2SerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 4),
    _Ocm2SerialNum_Type()
)
ocm2SerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2SerialNum.setStatus("mandatory")
_Ocm2ModelNum_Type = DisplayString
_Ocm2ModelNum_Object = MibTableColumn
ocm2ModelNum = _Ocm2ModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 5),
    _Ocm2ModelNum_Type()
)
ocm2ModelNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2ModelNum.setStatus("mandatory")
_Ocm2HwName_Type = DisplayString
_Ocm2HwName_Object = MibTableColumn
ocm2HwName = _Ocm2HwName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 6),
    _Ocm2HwName_Type()
)
ocm2HwName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2HwName.setStatus("mandatory")
_Ocm2HwVersionID_Type = VersionString
_Ocm2HwVersionID_Object = MibTableColumn
ocm2HwVersionID = _Ocm2HwVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 7),
    _Ocm2HwVersionID_Type()
)
ocm2HwVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2HwVersionID.setStatus("mandatory")
_Ocm2MfgDate_Type = DateAndTime
_Ocm2MfgDate_Object = MibTableColumn
ocm2MfgDate = _Ocm2MfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 8),
    _Ocm2MfgDate_Type()
)
ocm2MfgDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2MfgDate.setStatus("mandatory")
_Ocm2FwName_Type = CardName
_Ocm2FwName_Object = MibTableColumn
ocm2FwName = _Ocm2FwName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 9),
    _Ocm2FwName_Type()
)
ocm2FwName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2FwName.setStatus("mandatory")
_Ocm2FwVersionID_Type = VersionString
_Ocm2FwVersionID_Object = MibTableColumn
ocm2FwVersionID = _Ocm2FwVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 10),
    _Ocm2FwVersionID_Type()
)
ocm2FwVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2FwVersionID.setStatus("mandatory")
_Ocm2FwDate_Type = DateAndTime
_Ocm2FwDate_Object = MibTableColumn
ocm2FwDate = _Ocm2FwDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 11),
    _Ocm2FwDate_Type()
)
ocm2FwDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2FwDate.setStatus("mandatory")
_Ocm2ModelType_Type = CardType
_Ocm2ModelType_Object = MibTableColumn
ocm2ModelType = _Ocm2ModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 12),
    _Ocm2ModelType_Type()
)
ocm2ModelType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2ModelType.setStatus("mandatory")
_Ocm2Name_Type = CardName
_Ocm2Name_Object = MibTableColumn
ocm2Name = _Ocm2Name_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 13),
    _Ocm2Name_Type()
)
ocm2Name.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm2Name.setStatus("mandatory")


class _Ocm2Link1LineRate_Type(Integer32):
    """Custom type ocm2Link1LineRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              8,
              10,
              14,
              15,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 255),
          ("escon", 8),
          ("fc", 5),
          ("fc2", 10),
          ("gbe", 4),
          ("hlf_fc", 14),
          ("infiniband", 15),
          ("na", 0),
          ("oc12", 2),
          ("oc3", 1),
          ("oc48", 3))
    )


_Ocm2Link1LineRate_Type.__name__ = "Integer32"
_Ocm2Link1LineRate_Object = MibTableColumn
ocm2Link1LineRate = _Ocm2Link1LineRate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 14),
    _Ocm2Link1LineRate_Type()
)
ocm2Link1LineRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm2Link1LineRate.setStatus("mandatory")


class _Ocm2Link1AutoDisable_Type(Integer32):
    """Custom type ocm2Link1AutoDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1),
          ("na", 0))
    )


_Ocm2Link1AutoDisable_Type.__name__ = "Integer32"
_Ocm2Link1AutoDisable_Object = MibTableColumn
ocm2Link1AutoDisable = _Ocm2Link1AutoDisable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 15),
    _Ocm2Link1AutoDisable_Type()
)
ocm2Link1AutoDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm2Link1AutoDisable.setStatus("mandatory")
_Ocm2Link1LinkName_Type = LinkName
_Ocm2Link1LinkName_Object = MibTableColumn
ocm2Link1LinkName = _Ocm2Link1LinkName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 16),
    _Ocm2Link1LinkName_Type()
)
ocm2Link1LinkName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm2Link1LinkName.setStatus("mandatory")
_Ocm2Link1PathID_Type = PathIdName
_Ocm2Link1PathID_Object = MibTableColumn
ocm2Link1PathID = _Ocm2Link1PathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 17),
    _Ocm2Link1PathID_Type()
)
ocm2Link1PathID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm2Link1PathID.setStatus("mandatory")


class _Ocm2Link2LineRate_Type(Integer32):
    """Custom type ocm2Link2LineRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              8,
              10,
              14,
              15,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 255),
          ("escon", 8),
          ("fc", 5),
          ("fc2", 10),
          ("gbe", 4),
          ("hlf_fc", 14),
          ("infiniband", 15),
          ("na", 0),
          ("oc12", 2),
          ("oc3", 1),
          ("oc48", 3))
    )


_Ocm2Link2LineRate_Type.__name__ = "Integer32"
_Ocm2Link2LineRate_Object = MibTableColumn
ocm2Link2LineRate = _Ocm2Link2LineRate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 18),
    _Ocm2Link2LineRate_Type()
)
ocm2Link2LineRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm2Link2LineRate.setStatus("mandatory")


class _Ocm2Link2AutoDisable_Type(Integer32):
    """Custom type ocm2Link2AutoDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1),
          ("na", 0))
    )


_Ocm2Link2AutoDisable_Type.__name__ = "Integer32"
_Ocm2Link2AutoDisable_Object = MibTableColumn
ocm2Link2AutoDisable = _Ocm2Link2AutoDisable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 19),
    _Ocm2Link2AutoDisable_Type()
)
ocm2Link2AutoDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm2Link2AutoDisable.setStatus("mandatory")
_Ocm2Link2LinkName_Type = LinkName
_Ocm2Link2LinkName_Object = MibTableColumn
ocm2Link2LinkName = _Ocm2Link2LinkName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 20),
    _Ocm2Link2LinkName_Type()
)
ocm2Link2LinkName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm2Link2LinkName.setStatus("mandatory")
_Ocm2Link2PathID_Type = PathIdName
_Ocm2Link2PathID_Object = MibTableColumn
ocm2Link2PathID = _Ocm2Link2PathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 21),
    _Ocm2Link2PathID_Type()
)
ocm2Link2PathID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm2Link2PathID.setStatus("mandatory")


class _Ocm2AdminState_Type(Integer32):
    """Custom type ocm2AdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("na", 3))
    )


_Ocm2AdminState_Type.__name__ = "Integer32"
_Ocm2AdminState_Object = MibTableColumn
ocm2AdminState = _Ocm2AdminState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 22),
    _Ocm2AdminState_Type()
)
ocm2AdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm2AdminState.setStatus("mandatory")


class _Ocm2SetState_Type(Integer32):
    """Custom type ocm2SetState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("disableLink1loopback", 5),
          ("disableLink2loopback", 6),
          ("enableLink1Loopback", 3),
          ("enableLink2Loopback", 4),
          ("other", 1),
          ("warmboot", 2))
    )


_Ocm2SetState_Type.__name__ = "Integer32"
_Ocm2SetState_Object = MibTableColumn
ocm2SetState = _Ocm2SetState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 23),
    _Ocm2SetState_Type()
)
ocm2SetState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm2SetState.setStatus("mandatory")
_Ocm2CleiNum_Type = DisplayString
_Ocm2CleiNum_Object = MibTableColumn
ocm2CleiNum = _Ocm2CleiNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 24),
    _Ocm2CleiNum_Type()
)
ocm2CleiNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2CleiNum.setStatus("mandatory")
_Ocm2NumPorts_Type = Integer32
_Ocm2NumPorts_Object = MibTableColumn
ocm2NumPorts = _Ocm2NumPorts_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 25),
    _Ocm2NumPorts_Type()
)
ocm2NumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2NumPorts.setStatus("mandatory")


class _Ocm2RegenMode_Type(Integer32):
    """Custom type ocm2RegenMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_Ocm2RegenMode_Type.__name__ = "Integer32"
_Ocm2RegenMode_Object = MibTableColumn
ocm2RegenMode = _Ocm2RegenMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 26),
    _Ocm2RegenMode_Type()
)
ocm2RegenMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm2RegenMode.setStatus("mandatory")
_Ocm2FpgaRev_Type = Integer32
_Ocm2FpgaRev_Object = MibTableColumn
ocm2FpgaRev = _Ocm2FpgaRev_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 27),
    _Ocm2FpgaRev_Type()
)
ocm2FpgaRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2FpgaRev.setStatus("mandatory")
_Ocm2PortTable_Object = MibTable
ocm2PortTable = _Ocm2PortTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 3)
)
if mibBuilder.loadTexts:
    ocm2PortTable.setStatus("mandatory")
_Ocm2PortEntry_Object = MibTableRow
ocm2PortEntry = _Ocm2PortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1)
)
ocm2PortEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm2PortLocation"),
    (0, "LUXN-MIB", "ocm2PortShelf"),
    (0, "LUXN-MIB", "ocm2PortSlot"),
    (0, "LUXN-MIB", "ocm2PortIndex"),
)
if mibBuilder.loadTexts:
    ocm2PortEntry.setStatus("mandatory")
_Ocm2PortLocation_Type = CardLocation
_Ocm2PortLocation_Object = MibTableColumn
ocm2PortLocation = _Ocm2PortLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1, 1),
    _Ocm2PortLocation_Type()
)
ocm2PortLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PortLocation.setStatus("mandatory")
_Ocm2PortShelf_Type = CardShelf
_Ocm2PortShelf_Object = MibTableColumn
ocm2PortShelf = _Ocm2PortShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1, 2),
    _Ocm2PortShelf_Type()
)
ocm2PortShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PortShelf.setStatus("mandatory")
_Ocm2PortSlot_Type = SlotInput
_Ocm2PortSlot_Object = MibTableColumn
ocm2PortSlot = _Ocm2PortSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1, 3),
    _Ocm2PortSlot_Type()
)
ocm2PortSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PortSlot.setStatus("mandatory")


class _Ocm2PortIndex_Type(Integer32):
    """Custom type ocm2PortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("cpe1", 2),
          ("cpe2", 4),
          ("link1", 1),
          ("link2", 3))
    )


_Ocm2PortIndex_Type.__name__ = "Integer32"
_Ocm2PortIndex_Object = MibTableColumn
ocm2PortIndex = _Ocm2PortIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1, 4),
    _Ocm2PortIndex_Type()
)
ocm2PortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PortIndex.setStatus("mandatory")


class _Ocm2PortMode_Type(Integer32):
    """Custom type ocm2PortMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2),
          ("loopback", 3),
          ("na", 0))
    )


_Ocm2PortMode_Type.__name__ = "Integer32"
_Ocm2PortMode_Object = MibTableColumn
ocm2PortMode = _Ocm2PortMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1, 5),
    _Ocm2PortMode_Type()
)
ocm2PortMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PortMode.setStatus("mandatory")
_Ocm2PortItu_Type = Integer32
_Ocm2PortItu_Object = MibTableColumn
ocm2PortItu = _Ocm2PortItu_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1, 6),
    _Ocm2PortItu_Type()
)
ocm2PortItu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PortItu.setStatus("mandatory")
_Ocm2PortWavelength_Type = DisplayString
_Ocm2PortWavelength_Object = MibTableColumn
ocm2PortWavelength = _Ocm2PortWavelength_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1, 7),
    _Ocm2PortWavelength_Type()
)
ocm2PortWavelength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PortWavelength.setStatus("mandatory")
_Ocm2PortRxPower_Type = DisplayString
_Ocm2PortRxPower_Object = MibTableColumn
ocm2PortRxPower = _Ocm2PortRxPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1, 8),
    _Ocm2PortRxPower_Type()
)
ocm2PortRxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PortRxPower.setStatus("mandatory")


class _Ocm2PortTxState_Type(Integer32):
    """Custom type ocm2PortTxState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("na", 0),
          ("off", 2),
          ("on", 1))
    )


_Ocm2PortTxState_Type.__name__ = "Integer32"
_Ocm2PortTxState_Object = MibTableColumn
ocm2PortTxState = _Ocm2PortTxState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1, 9),
    _Ocm2PortTxState_Type()
)
ocm2PortTxState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PortTxState.setStatus("mandatory")
_Ocm2PortTxReach_Type = Integer32
_Ocm2PortTxReach_Object = MibTableColumn
ocm2PortTxReach = _Ocm2PortTxReach_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1, 10),
    _Ocm2PortTxReach_Type()
)
ocm2PortTxReach.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PortTxReach.setStatus("mandatory")
_Ocm2PortSfpSerialNumber_Type = DisplayString
_Ocm2PortSfpSerialNumber_Object = MibTableColumn
ocm2PortSfpSerialNumber = _Ocm2PortSfpSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1, 11),
    _Ocm2PortSfpSerialNumber_Type()
)
ocm2PortSfpSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PortSfpSerialNumber.setStatus("mandatory")
_Ocm2ConnTable_Object = MibTable
ocm2ConnTable = _Ocm2ConnTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 4)
)
if mibBuilder.loadTexts:
    ocm2ConnTable.setStatus("mandatory")
_Ocm2ConnEntry_Object = MibTableRow
ocm2ConnEntry = _Ocm2ConnEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 4, 1)
)
ocm2ConnEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm2ConnCardLocation"),
    (0, "LUXN-MIB", "ocm2ConnCardShelf"),
    (0, "LUXN-MIB", "ocm2ConnCardSlot"),
    (0, "LUXN-MIB", "ocm2ConnCardPortType"),
)
if mibBuilder.loadTexts:
    ocm2ConnEntry.setStatus("mandatory")
_Ocm2ConnCardLocation_Type = CardLocation
_Ocm2ConnCardLocation_Object = MibTableColumn
ocm2ConnCardLocation = _Ocm2ConnCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 4, 1, 1),
    _Ocm2ConnCardLocation_Type()
)
ocm2ConnCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2ConnCardLocation.setStatus("mandatory")
_Ocm2ConnCardShelf_Type = CardShelf
_Ocm2ConnCardShelf_Object = MibTableColumn
ocm2ConnCardShelf = _Ocm2ConnCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 4, 1, 2),
    _Ocm2ConnCardShelf_Type()
)
ocm2ConnCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2ConnCardShelf.setStatus("mandatory")
_Ocm2ConnCardSlot_Type = SlotInput
_Ocm2ConnCardSlot_Object = MibTableColumn
ocm2ConnCardSlot = _Ocm2ConnCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 4, 1, 3),
    _Ocm2ConnCardSlot_Type()
)
ocm2ConnCardSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2ConnCardSlot.setStatus("mandatory")


class _Ocm2ConnCardPortType_Type(Integer32):
    """Custom type ocm2ConnCardPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("cpe1rx", 6),
          ("cpe1tx", 5),
          ("cpe2rx", 8),
          ("cpe2tx", 7),
          ("link1rx", 2),
          ("link1tx", 1),
          ("link2rx", 4),
          ("link2tx", 3))
    )


_Ocm2ConnCardPortType_Type.__name__ = "Integer32"
_Ocm2ConnCardPortType_Object = MibTableColumn
ocm2ConnCardPortType = _Ocm2ConnCardPortType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 4, 1, 4),
    _Ocm2ConnCardPortType_Type()
)
ocm2ConnCardPortType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2ConnCardPortType.setStatus("mandatory")
_Ocm2ConnCardType_Type = CardType
_Ocm2ConnCardType_Object = MibTableColumn
ocm2ConnCardType = _Ocm2ConnCardType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 4, 1, 5),
    _Ocm2ConnCardType_Type()
)
ocm2ConnCardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2ConnCardType.setStatus("mandatory")
_Ocm2ConnLocation_Type = CardLocation
_Ocm2ConnLocation_Object = MibTableColumn
ocm2ConnLocation = _Ocm2ConnLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 4, 1, 6),
    _Ocm2ConnLocation_Type()
)
ocm2ConnLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2ConnLocation.setStatus("mandatory")
_Ocm2ConnShelf_Type = ShelfInput
_Ocm2ConnShelf_Object = MibTableColumn
ocm2ConnShelf = _Ocm2ConnShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 4, 1, 7),
    _Ocm2ConnShelf_Type()
)
ocm2ConnShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2ConnShelf.setStatus("mandatory")
_Ocm2ConnSlot_Type = SlotInput
_Ocm2ConnSlot_Object = MibTableColumn
ocm2ConnSlot = _Ocm2ConnSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 4, 1, 8),
    _Ocm2ConnSlot_Type()
)
ocm2ConnSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2ConnSlot.setStatus("mandatory")
_Ocm2ConnPort_Type = Integer32
_Ocm2ConnPort_Object = MibTableColumn
ocm2ConnPort = _Ocm2ConnPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 30, 4, 1, 9),
    _Ocm2ConnPort_Type()
)
ocm2ConnPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2ConnPort.setStatus("mandatory")
_Osc_ObjectIdentity = ObjectIdentity
osc = _Osc_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31)
)
_OscNumber_Type = Integer32
_OscNumber_Object = MibScalar
oscNumber = _OscNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 1),
    _OscNumber_Type()
)
oscNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscNumber.setStatus("mandatory")
_OscTable_Object = MibTable
oscTable = _OscTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 2)
)
if mibBuilder.loadTexts:
    oscTable.setStatus("mandatory")
_OscEntry_Object = MibTableRow
oscEntry = _OscEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1)
)
oscEntry.setIndexNames(
    (0, "LUXN-MIB", "oscCardLocation"),
    (0, "LUXN-MIB", "oscCardShelf"),
    (0, "LUXN-MIB", "oscCardSlot"),
)
if mibBuilder.loadTexts:
    oscEntry.setStatus("mandatory")
_OscCardLocation_Type = CardLocation
_OscCardLocation_Object = MibTableColumn
oscCardLocation = _OscCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 1),
    _OscCardLocation_Type()
)
oscCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscCardLocation.setStatus("mandatory")
_OscCardShelf_Type = CardShelf
_OscCardShelf_Object = MibTableColumn
oscCardShelf = _OscCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 2),
    _OscCardShelf_Type()
)
oscCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscCardShelf.setStatus("mandatory")
_OscCardSlot_Type = SlotInput
_OscCardSlot_Object = MibTableColumn
oscCardSlot = _OscCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 3),
    _OscCardSlot_Type()
)
oscCardSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oscCardSlot.setStatus("mandatory")
_OscSerialNum_Type = SerialString
_OscSerialNum_Object = MibTableColumn
oscSerialNum = _OscSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 4),
    _OscSerialNum_Type()
)
oscSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscSerialNum.setStatus("mandatory")
_OscModelNum_Type = DisplayString
_OscModelNum_Object = MibTableColumn
oscModelNum = _OscModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 5),
    _OscModelNum_Type()
)
oscModelNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscModelNum.setStatus("mandatory")
_OscHwName_Type = DisplayString
_OscHwName_Object = MibTableColumn
oscHwName = _OscHwName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 6),
    _OscHwName_Type()
)
oscHwName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscHwName.setStatus("mandatory")
_OscHwVersionID_Type = VersionString
_OscHwVersionID_Object = MibTableColumn
oscHwVersionID = _OscHwVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 7),
    _OscHwVersionID_Type()
)
oscHwVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscHwVersionID.setStatus("mandatory")
_OscMfgDate_Type = DateAndTime
_OscMfgDate_Object = MibTableColumn
oscMfgDate = _OscMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 8),
    _OscMfgDate_Type()
)
oscMfgDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscMfgDate.setStatus("mandatory")
_OscFwName_Type = CardName
_OscFwName_Object = MibTableColumn
oscFwName = _OscFwName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 9),
    _OscFwName_Type()
)
oscFwName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscFwName.setStatus("mandatory")
_OscFwVersionID_Type = VersionString
_OscFwVersionID_Object = MibTableColumn
oscFwVersionID = _OscFwVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 10),
    _OscFwVersionID_Type()
)
oscFwVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscFwVersionID.setStatus("mandatory")
_OscFwDate_Type = DateAndTime
_OscFwDate_Object = MibTableColumn
oscFwDate = _OscFwDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 11),
    _OscFwDate_Type()
)
oscFwDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscFwDate.setStatus("mandatory")


class _OscAdminState_Type(Integer32):
    """Custom type oscAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("na", 3))
    )


_OscAdminState_Type.__name__ = "Integer32"
_OscAdminState_Object = MibTableColumn
oscAdminState = _OscAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 12),
    _OscAdminState_Type()
)
oscAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oscAdminState.setStatus("mandatory")
_OscModelType_Type = CardType
_OscModelType_Object = MibTableColumn
oscModelType = _OscModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 13),
    _OscModelType_Type()
)
oscModelType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscModelType.setStatus("mandatory")
_OscName_Type = CardName
_OscName_Object = MibTableColumn
oscName = _OscName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 14),
    _OscName_Type()
)
oscName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oscName.setStatus("mandatory")
_OscPathID_Type = PathIdName
_OscPathID_Object = MibTableColumn
oscPathID = _OscPathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 15),
    _OscPathID_Type()
)
oscPathID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oscPathID.setStatus("mandatory")


class _OscSetState_Type(Integer32):
    """Custom type oscSetState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("warmboot", 2))
    )


_OscSetState_Type.__name__ = "Integer32"
_OscSetState_Object = MibTableColumn
oscSetState = _OscSetState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 16),
    _OscSetState_Type()
)
oscSetState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oscSetState.setStatus("mandatory")
_OscCleiNum_Type = DisplayString
_OscCleiNum_Object = MibTableColumn
oscCleiNum = _OscCleiNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 17),
    _OscCleiNum_Type()
)
oscCleiNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscCleiNum.setStatus("mandatory")
_OscNumPorts_Type = Integer32
_OscNumPorts_Object = MibTableColumn
oscNumPorts = _OscNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 18),
    _OscNumPorts_Type()
)
oscNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscNumPorts.setStatus("mandatory")
_OscFpgaRev_Type = Integer32
_OscFpgaRev_Object = MibTableColumn
oscFpgaRev = _OscFpgaRev_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 19),
    _OscFpgaRev_Type()
)
oscFpgaRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscFpgaRev.setStatus("mandatory")
_OscPortTable_Object = MibTable
oscPortTable = _OscPortTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 3)
)
if mibBuilder.loadTexts:
    oscPortTable.setStatus("mandatory")
_OscPortEntry_Object = MibTableRow
oscPortEntry = _OscPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 3, 1)
)
oscPortEntry.setIndexNames(
    (0, "LUXN-MIB", "oscPortLocation"),
    (0, "LUXN-MIB", "oscPortShelf"),
    (0, "LUXN-MIB", "oscPortSlot"),
    (0, "LUXN-MIB", "oscPortIndex"),
)
if mibBuilder.loadTexts:
    oscPortEntry.setStatus("mandatory")
_OscPortLocation_Type = CardLocation
_OscPortLocation_Object = MibTableColumn
oscPortLocation = _OscPortLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 3, 1, 1),
    _OscPortLocation_Type()
)
oscPortLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscPortLocation.setStatus("mandatory")
_OscPortShelf_Type = CardShelf
_OscPortShelf_Object = MibTableColumn
oscPortShelf = _OscPortShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 3, 1, 2),
    _OscPortShelf_Type()
)
oscPortShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscPortShelf.setStatus("mandatory")
_OscPortSlot_Type = SlotInput
_OscPortSlot_Object = MibTableColumn
oscPortSlot = _OscPortSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 3, 1, 3),
    _OscPortSlot_Type()
)
oscPortSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscPortSlot.setStatus("mandatory")


class _OscPortIndex_Type(Integer32):
    """Custom type oscPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("link", 1)
    )


_OscPortIndex_Type.__name__ = "Integer32"
_OscPortIndex_Object = MibTableColumn
oscPortIndex = _OscPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 3, 1, 4),
    _OscPortIndex_Type()
)
oscPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscPortIndex.setStatus("mandatory")
_OscPortItu_Type = Integer32
_OscPortItu_Object = MibTableColumn
oscPortItu = _OscPortItu_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 3, 1, 5),
    _OscPortItu_Type()
)
oscPortItu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscPortItu.setStatus("mandatory")
_OscPortWavelength_Type = DisplayString
_OscPortWavelength_Object = MibTableColumn
oscPortWavelength = _OscPortWavelength_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 3, 1, 6),
    _OscPortWavelength_Type()
)
oscPortWavelength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscPortWavelength.setStatus("mandatory")
_OscPortRxPower_Type = DisplayString
_OscPortRxPower_Object = MibTableColumn
oscPortRxPower = _OscPortRxPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 3, 1, 7),
    _OscPortRxPower_Type()
)
oscPortRxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscPortRxPower.setStatus("mandatory")


class _OscPortTxState_Type(Integer32):
    """Custom type oscPortTxState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("na", 0),
          ("off", 2),
          ("on", 1))
    )


_OscPortTxState_Type.__name__ = "Integer32"
_OscPortTxState_Object = MibTableColumn
oscPortTxState = _OscPortTxState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 3, 1, 8),
    _OscPortTxState_Type()
)
oscPortTxState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscPortTxState.setStatus("mandatory")
_OscPortTxReach_Type = Integer32
_OscPortTxReach_Object = MibTableColumn
oscPortTxReach = _OscPortTxReach_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 3, 1, 9),
    _OscPortTxReach_Type()
)
oscPortTxReach.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscPortTxReach.setStatus("mandatory")
_OscPortSfpSerialNumber_Type = DisplayString
_OscPortSfpSerialNumber_Object = MibTableColumn
oscPortSfpSerialNumber = _OscPortSfpSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 31, 3, 1, 10),
    _OscPortSfpSerialNumber_Type()
)
oscPortSfpSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscPortSfpSerialNumber.setStatus("mandatory")
_Ocm4g_ObjectIdentity = ObjectIdentity
ocm4g = _Ocm4g_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32)
)
_Ocm4gNumber_Type = Integer32
_Ocm4gNumber_Object = MibScalar
ocm4gNumber = _Ocm4gNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 1),
    _Ocm4gNumber_Type()
)
ocm4gNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gNumber.setStatus("mandatory")
_Ocm4gTable_Object = MibTable
ocm4gTable = _Ocm4gTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2)
)
if mibBuilder.loadTexts:
    ocm4gTable.setStatus("mandatory")
_Ocm4gEntry_Object = MibTableRow
ocm4gEntry = _Ocm4gEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1)
)
ocm4gEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm4gCardLocation"),
    (0, "LUXN-MIB", "ocm4gCardShelf"),
    (0, "LUXN-MIB", "ocm4gCardSlot"),
)
if mibBuilder.loadTexts:
    ocm4gEntry.setStatus("mandatory")


class _Ocm4gCardLocation_Type(Integer32):
    """Custom type ocm4gCardLocation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("local", 1)
    )


_Ocm4gCardLocation_Type.__name__ = "Integer32"
_Ocm4gCardLocation_Object = MibTableColumn
ocm4gCardLocation = _Ocm4gCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 1),
    _Ocm4gCardLocation_Type()
)
ocm4gCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gCardLocation.setStatus("mandatory")
_Ocm4gCardShelf_Type = CardShelf
_Ocm4gCardShelf_Object = MibTableColumn
ocm4gCardShelf = _Ocm4gCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 2),
    _Ocm4gCardShelf_Type()
)
ocm4gCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gCardShelf.setStatus("mandatory")
_Ocm4gCardSlot_Type = SlotInput
_Ocm4gCardSlot_Object = MibTableColumn
ocm4gCardSlot = _Ocm4gCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 3),
    _Ocm4gCardSlot_Type()
)
ocm4gCardSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm4gCardSlot.setStatus("mandatory")
_Ocm4gSerialNum_Type = SerialString
_Ocm4gSerialNum_Object = MibTableColumn
ocm4gSerialNum = _Ocm4gSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 4),
    _Ocm4gSerialNum_Type()
)
ocm4gSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gSerialNum.setStatus("mandatory")
_Ocm4gModelNum_Type = DisplayString
_Ocm4gModelNum_Object = MibTableColumn
ocm4gModelNum = _Ocm4gModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 5),
    _Ocm4gModelNum_Type()
)
ocm4gModelNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gModelNum.setStatus("mandatory")
_Ocm4gHwName_Type = DisplayString
_Ocm4gHwName_Object = MibTableColumn
ocm4gHwName = _Ocm4gHwName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 6),
    _Ocm4gHwName_Type()
)
ocm4gHwName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gHwName.setStatus("mandatory")
_Ocm4gHwVersionID_Type = VersionString
_Ocm4gHwVersionID_Object = MibTableColumn
ocm4gHwVersionID = _Ocm4gHwVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 7),
    _Ocm4gHwVersionID_Type()
)
ocm4gHwVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gHwVersionID.setStatus("mandatory")
_Ocm4gMfgDate_Type = DateAndTime
_Ocm4gMfgDate_Object = MibTableColumn
ocm4gMfgDate = _Ocm4gMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 8),
    _Ocm4gMfgDate_Type()
)
ocm4gMfgDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gMfgDate.setStatus("mandatory")
_Ocm4gFwName_Type = CardName
_Ocm4gFwName_Object = MibTableColumn
ocm4gFwName = _Ocm4gFwName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 9),
    _Ocm4gFwName_Type()
)
ocm4gFwName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gFwName.setStatus("mandatory")
_Ocm4gFwVersionID_Type = VersionString
_Ocm4gFwVersionID_Object = MibTableColumn
ocm4gFwVersionID = _Ocm4gFwVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 10),
    _Ocm4gFwVersionID_Type()
)
ocm4gFwVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gFwVersionID.setStatus("mandatory")
_Ocm4gFwDate_Type = DateAndTime
_Ocm4gFwDate_Object = MibTableColumn
ocm4gFwDate = _Ocm4gFwDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 11),
    _Ocm4gFwDate_Type()
)
ocm4gFwDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gFwDate.setStatus("mandatory")
_Ocm4gModelType_Type = CardType
_Ocm4gModelType_Object = MibTableColumn
ocm4gModelType = _Ocm4gModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 12),
    _Ocm4gModelType_Type()
)
ocm4gModelType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gModelType.setStatus("mandatory")
_Ocm4gName_Type = CardName
_Ocm4gName_Object = MibTableColumn
ocm4gName = _Ocm4gName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 13),
    _Ocm4gName_Type()
)
ocm4gName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm4gName.setStatus("mandatory")


class _Ocm4gLink1LineRate_Type(Integer32):
    """Custom type ocm4gLink1LineRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              8,
              10,
              14,
              15,
              16,
              17,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 255),
          ("escon", 8),
          ("fc", 5),
          ("fc2", 10),
          ("fourG", 16),
          ("gbe", 4),
          ("hlf_fc", 14),
          ("infiniband", 15),
          ("na", 0),
          ("oc12", 2),
          ("oc3", 1),
          ("oc48", 3),
          ("twoR", 17))
    )


_Ocm4gLink1LineRate_Type.__name__ = "Integer32"
_Ocm4gLink1LineRate_Object = MibTableColumn
ocm4gLink1LineRate = _Ocm4gLink1LineRate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 14),
    _Ocm4gLink1LineRate_Type()
)
ocm4gLink1LineRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm4gLink1LineRate.setStatus("mandatory")


class _Ocm4gLink1AutoDisable_Type(Integer32):
    """Custom type ocm4gLink1AutoDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1),
          ("na", 0))
    )


_Ocm4gLink1AutoDisable_Type.__name__ = "Integer32"
_Ocm4gLink1AutoDisable_Object = MibTableColumn
ocm4gLink1AutoDisable = _Ocm4gLink1AutoDisable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 15),
    _Ocm4gLink1AutoDisable_Type()
)
ocm4gLink1AutoDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm4gLink1AutoDisable.setStatus("mandatory")
_Ocm4gLink1LinkName_Type = LinkName
_Ocm4gLink1LinkName_Object = MibTableColumn
ocm4gLink1LinkName = _Ocm4gLink1LinkName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 16),
    _Ocm4gLink1LinkName_Type()
)
ocm4gLink1LinkName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm4gLink1LinkName.setStatus("mandatory")
_Ocm4gLink1PathID_Type = PathIdName
_Ocm4gLink1PathID_Object = MibTableColumn
ocm4gLink1PathID = _Ocm4gLink1PathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 17),
    _Ocm4gLink1PathID_Type()
)
ocm4gLink1PathID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm4gLink1PathID.setStatus("mandatory")


class _Ocm4gLink2LineRate_Type(Integer32):
    """Custom type ocm4gLink2LineRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3,
              4,
              5,
              8,
              10,
              14,
              15,
              16,
              17,
              255)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 255),
          ("escon", 8),
          ("fc", 5),
          ("fc2", 10),
          ("fourG", 16),
          ("gbe", 4),
          ("hlf_fc", 14),
          ("infiniband", 15),
          ("na", 0),
          ("oc12", 2),
          ("oc3", 1),
          ("oc48", 3),
          ("twoR", 17))
    )


_Ocm4gLink2LineRate_Type.__name__ = "Integer32"
_Ocm4gLink2LineRate_Object = MibTableColumn
ocm4gLink2LineRate = _Ocm4gLink2LineRate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 18),
    _Ocm4gLink2LineRate_Type()
)
ocm4gLink2LineRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm4gLink2LineRate.setStatus("mandatory")


class _Ocm4gLink2AutoDisable_Type(Integer32):
    """Custom type ocm4gLink2AutoDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1),
          ("na", 0))
    )


_Ocm4gLink2AutoDisable_Type.__name__ = "Integer32"
_Ocm4gLink2AutoDisable_Object = MibTableColumn
ocm4gLink2AutoDisable = _Ocm4gLink2AutoDisable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 19),
    _Ocm4gLink2AutoDisable_Type()
)
ocm4gLink2AutoDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm4gLink2AutoDisable.setStatus("mandatory")
_Ocm4gLink2LinkName_Type = LinkName
_Ocm4gLink2LinkName_Object = MibTableColumn
ocm4gLink2LinkName = _Ocm4gLink2LinkName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 20),
    _Ocm4gLink2LinkName_Type()
)
ocm4gLink2LinkName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm4gLink2LinkName.setStatus("mandatory")
_Ocm4gLink2PathID_Type = PathIdName
_Ocm4gLink2PathID_Object = MibTableColumn
ocm4gLink2PathID = _Ocm4gLink2PathID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 21),
    _Ocm4gLink2PathID_Type()
)
ocm4gLink2PathID.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm4gLink2PathID.setStatus("mandatory")


class _Ocm4gAdminState_Type(Integer32):
    """Custom type ocm4gAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("na", 3))
    )


_Ocm4gAdminState_Type.__name__ = "Integer32"
_Ocm4gAdminState_Object = MibTableColumn
ocm4gAdminState = _Ocm4gAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 22),
    _Ocm4gAdminState_Type()
)
ocm4gAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm4gAdminState.setStatus("mandatory")


class _Ocm4gSetState_Type(Integer32):
    """Custom type ocm4gSetState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6)
        )
    )
    namedValues = NamedValues(
        *(("disableLink1loopback", 5),
          ("disableLink2loopback", 6),
          ("enableLink1Loopback", 3),
          ("enableLink2Loopback", 4),
          ("other", 1),
          ("warmboot", 2))
    )


_Ocm4gSetState_Type.__name__ = "Integer32"
_Ocm4gSetState_Object = MibTableColumn
ocm4gSetState = _Ocm4gSetState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 23),
    _Ocm4gSetState_Type()
)
ocm4gSetState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm4gSetState.setStatus("mandatory")
_Ocm4gCleiNum_Type = DisplayString
_Ocm4gCleiNum_Object = MibTableColumn
ocm4gCleiNum = _Ocm4gCleiNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 24),
    _Ocm4gCleiNum_Type()
)
ocm4gCleiNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gCleiNum.setStatus("mandatory")
_Ocm4gNumPorts_Type = Integer32
_Ocm4gNumPorts_Object = MibTableColumn
ocm4gNumPorts = _Ocm4gNumPorts_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 25),
    _Ocm4gNumPorts_Type()
)
ocm4gNumPorts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gNumPorts.setStatus("mandatory")
_Ocm4gFpgaRev_Type = Integer32
_Ocm4gFpgaRev_Object = MibTableColumn
ocm4gFpgaRev = _Ocm4gFpgaRev_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 26),
    _Ocm4gFpgaRev_Type()
)
ocm4gFpgaRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gFpgaRev.setStatus("mandatory")
_Ocm4gPortTable_Object = MibTable
ocm4gPortTable = _Ocm4gPortTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 3)
)
if mibBuilder.loadTexts:
    ocm4gPortTable.setStatus("mandatory")
_Ocm4gPortEntry_Object = MibTableRow
ocm4gPortEntry = _Ocm4gPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1)
)
ocm4gPortEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm4gPortLocation"),
    (0, "LUXN-MIB", "ocm4gPortShelf"),
    (0, "LUXN-MIB", "ocm4gPortSlot"),
    (0, "LUXN-MIB", "ocm4gPortIndex"),
)
if mibBuilder.loadTexts:
    ocm4gPortEntry.setStatus("mandatory")


class _Ocm4gPortLocation_Type(Integer32):
    """Custom type ocm4gPortLocation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("local", 1)
    )


_Ocm4gPortLocation_Type.__name__ = "Integer32"
_Ocm4gPortLocation_Object = MibTableColumn
ocm4gPortLocation = _Ocm4gPortLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1, 1),
    _Ocm4gPortLocation_Type()
)
ocm4gPortLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPortLocation.setStatus("mandatory")
_Ocm4gPortShelf_Type = CardShelf
_Ocm4gPortShelf_Object = MibTableColumn
ocm4gPortShelf = _Ocm4gPortShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1, 2),
    _Ocm4gPortShelf_Type()
)
ocm4gPortShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPortShelf.setStatus("mandatory")
_Ocm4gPortSlot_Type = SlotInput
_Ocm4gPortSlot_Object = MibTableColumn
ocm4gPortSlot = _Ocm4gPortSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1, 3),
    _Ocm4gPortSlot_Type()
)
ocm4gPortSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPortSlot.setStatus("mandatory")


class _Ocm4gPortIndex_Type(Integer32):
    """Custom type ocm4gPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("cpe1", 2),
          ("cpe2", 4),
          ("link1", 1),
          ("link2", 3))
    )


_Ocm4gPortIndex_Type.__name__ = "Integer32"
_Ocm4gPortIndex_Object = MibTableColumn
ocm4gPortIndex = _Ocm4gPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1, 4),
    _Ocm4gPortIndex_Type()
)
ocm4gPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPortIndex.setStatus("mandatory")


class _Ocm4gPortMode_Type(Integer32):
    """Custom type ocm4gPortMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2),
          ("loopback", 3),
          ("na", 0))
    )


_Ocm4gPortMode_Type.__name__ = "Integer32"
_Ocm4gPortMode_Object = MibTableColumn
ocm4gPortMode = _Ocm4gPortMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1, 5),
    _Ocm4gPortMode_Type()
)
ocm4gPortMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPortMode.setStatus("mandatory")
_Ocm4gPortItu_Type = Integer32
_Ocm4gPortItu_Object = MibTableColumn
ocm4gPortItu = _Ocm4gPortItu_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1, 6),
    _Ocm4gPortItu_Type()
)
ocm4gPortItu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPortItu.setStatus("mandatory")
_Ocm4gPortWavelength_Type = DisplayString
_Ocm4gPortWavelength_Object = MibTableColumn
ocm4gPortWavelength = _Ocm4gPortWavelength_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1, 7),
    _Ocm4gPortWavelength_Type()
)
ocm4gPortWavelength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPortWavelength.setStatus("mandatory")
_Ocm4gPortRxPower_Type = DisplayString
_Ocm4gPortRxPower_Object = MibTableColumn
ocm4gPortRxPower = _Ocm4gPortRxPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1, 8),
    _Ocm4gPortRxPower_Type()
)
ocm4gPortRxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPortRxPower.setStatus("mandatory")


class _Ocm4gPortTxState_Type(Integer32):
    """Custom type ocm4gPortTxState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("na", 0),
          ("off", 2),
          ("on", 1))
    )


_Ocm4gPortTxState_Type.__name__ = "Integer32"
_Ocm4gPortTxState_Object = MibTableColumn
ocm4gPortTxState = _Ocm4gPortTxState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1, 9),
    _Ocm4gPortTxState_Type()
)
ocm4gPortTxState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPortTxState.setStatus("mandatory")
_Ocm4gPortTxReach_Type = Integer32
_Ocm4gPortTxReach_Object = MibTableColumn
ocm4gPortTxReach = _Ocm4gPortTxReach_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1, 10),
    _Ocm4gPortTxReach_Type()
)
ocm4gPortTxReach.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPortTxReach.setStatus("mandatory")
_Ocm4gPortSfpSerialNumber_Type = DisplayString
_Ocm4gPortSfpSerialNumber_Object = MibTableColumn
ocm4gPortSfpSerialNumber = _Ocm4gPortSfpSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1, 11),
    _Ocm4gPortSfpSerialNumber_Type()
)
ocm4gPortSfpSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPortSfpSerialNumber.setStatus("mandatory")
_Ocm4gConnTable_Object = MibTable
ocm4gConnTable = _Ocm4gConnTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 4)
)
if mibBuilder.loadTexts:
    ocm4gConnTable.setStatus("mandatory")
_Ocm4gConnEntry_Object = MibTableRow
ocm4gConnEntry = _Ocm4gConnEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 4, 1)
)
ocm4gConnEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm4gConnCardLocation"),
    (0, "LUXN-MIB", "ocm4gConnCardShelf"),
    (0, "LUXN-MIB", "ocm4gConnCardSlot"),
    (0, "LUXN-MIB", "ocm4gConnCardPortType"),
)
if mibBuilder.loadTexts:
    ocm4gConnEntry.setStatus("mandatory")


class _Ocm4gConnCardLocation_Type(Integer32):
    """Custom type ocm4gConnCardLocation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("local", 1)
    )


_Ocm4gConnCardLocation_Type.__name__ = "Integer32"
_Ocm4gConnCardLocation_Object = MibTableColumn
ocm4gConnCardLocation = _Ocm4gConnCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 4, 1, 1),
    _Ocm4gConnCardLocation_Type()
)
ocm4gConnCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gConnCardLocation.setStatus("mandatory")
_Ocm4gConnCardShelf_Type = CardShelf
_Ocm4gConnCardShelf_Object = MibTableColumn
ocm4gConnCardShelf = _Ocm4gConnCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 4, 1, 2),
    _Ocm4gConnCardShelf_Type()
)
ocm4gConnCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gConnCardShelf.setStatus("mandatory")
_Ocm4gConnCardSlot_Type = SlotInput
_Ocm4gConnCardSlot_Object = MibTableColumn
ocm4gConnCardSlot = _Ocm4gConnCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 4, 1, 3),
    _Ocm4gConnCardSlot_Type()
)
ocm4gConnCardSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gConnCardSlot.setStatus("mandatory")


class _Ocm4gConnCardPortType_Type(Integer32):
    """Custom type ocm4gConnCardPortType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("cpe1rx", 6),
          ("cpe1tx", 5),
          ("cpe2rx", 8),
          ("cpe2tx", 7),
          ("link1rx", 2),
          ("link1tx", 1),
          ("link2rx", 4),
          ("link2tx", 3))
    )


_Ocm4gConnCardPortType_Type.__name__ = "Integer32"
_Ocm4gConnCardPortType_Object = MibTableColumn
ocm4gConnCardPortType = _Ocm4gConnCardPortType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 4, 1, 4),
    _Ocm4gConnCardPortType_Type()
)
ocm4gConnCardPortType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gConnCardPortType.setStatus("mandatory")
_Ocm4gConnCardType_Type = CardType
_Ocm4gConnCardType_Object = MibTableColumn
ocm4gConnCardType = _Ocm4gConnCardType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 4, 1, 5),
    _Ocm4gConnCardType_Type()
)
ocm4gConnCardType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gConnCardType.setStatus("mandatory")


class _Ocm4gConnLocation_Type(Integer32):
    """Custom type ocm4gConnLocation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("local", 1)
    )


_Ocm4gConnLocation_Type.__name__ = "Integer32"
_Ocm4gConnLocation_Object = MibTableColumn
ocm4gConnLocation = _Ocm4gConnLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 4, 1, 6),
    _Ocm4gConnLocation_Type()
)
ocm4gConnLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gConnLocation.setStatus("mandatory")
_Ocm4gConnShelf_Type = ShelfInput
_Ocm4gConnShelf_Object = MibTableColumn
ocm4gConnShelf = _Ocm4gConnShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 4, 1, 7),
    _Ocm4gConnShelf_Type()
)
ocm4gConnShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gConnShelf.setStatus("mandatory")
_Ocm4gConnSlot_Type = SlotInput
_Ocm4gConnSlot_Object = MibTableColumn
ocm4gConnSlot = _Ocm4gConnSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 4, 1, 8),
    _Ocm4gConnSlot_Type()
)
ocm4gConnSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gConnSlot.setStatus("mandatory")
_Ocm4gConnPort_Type = Integer32
_Ocm4gConnPort_Object = MibTableColumn
ocm4gConnPort = _Ocm4gConnPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 32, 4, 1, 9),
    _Ocm4gConnPort_Type()
)
ocm4gConnPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gConnPort.setStatus("mandatory")
_Oet_ObjectIdentity = ObjectIdentity
oet = _Oet_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33)
)
_OetNumber_Type = Integer32
_OetNumber_Object = MibScalar
oetNumber = _OetNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 1),
    _OetNumber_Type()
)
oetNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetNumber.setStatus("mandatory")
_OetTable_Object = MibTable
oetTable = _OetTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2)
)
if mibBuilder.loadTexts:
    oetTable.setStatus("mandatory")
_OetEntry_Object = MibTableRow
oetEntry = _OetEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1)
)
oetEntry.setIndexNames(
    (0, "LUXN-MIB", "oetCardLocation"),
    (0, "LUXN-MIB", "oetCardShelf"),
    (0, "LUXN-MIB", "oetCardSlot"),
)
if mibBuilder.loadTexts:
    oetEntry.setStatus("mandatory")
_OetCardLocation_Type = CardLocation
_OetCardLocation_Object = MibTableColumn
oetCardLocation = _OetCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 1),
    _OetCardLocation_Type()
)
oetCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetCardLocation.setStatus("mandatory")
_OetCardShelf_Type = CardShelf
_OetCardShelf_Object = MibTableColumn
oetCardShelf = _OetCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 2),
    _OetCardShelf_Type()
)
oetCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetCardShelf.setStatus("mandatory")
_OetCardSlot_Type = SlotInput
_OetCardSlot_Object = MibTableColumn
oetCardSlot = _OetCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 3),
    _OetCardSlot_Type()
)
oetCardSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oetCardSlot.setStatus("mandatory")
_OetSerialNum_Type = SerialString
_OetSerialNum_Object = MibTableColumn
oetSerialNum = _OetSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 4),
    _OetSerialNum_Type()
)
oetSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetSerialNum.setStatus("mandatory")
_OetModelNum_Type = DisplayString
_OetModelNum_Object = MibTableColumn
oetModelNum = _OetModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 5),
    _OetModelNum_Type()
)
oetModelNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetModelNum.setStatus("mandatory")
_OetHwName_Type = DisplayString
_OetHwName_Object = MibTableColumn
oetHwName = _OetHwName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 6),
    _OetHwName_Type()
)
oetHwName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetHwName.setStatus("mandatory")
_OetHwVersionID_Type = VersionString
_OetHwVersionID_Object = MibTableColumn
oetHwVersionID = _OetHwVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 7),
    _OetHwVersionID_Type()
)
oetHwVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetHwVersionID.setStatus("mandatory")
_OetMfgDate_Type = DateAndTime
_OetMfgDate_Object = MibTableColumn
oetMfgDate = _OetMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 8),
    _OetMfgDate_Type()
)
oetMfgDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetMfgDate.setStatus("mandatory")
_OetFwName_Type = CardName
_OetFwName_Object = MibTableColumn
oetFwName = _OetFwName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 9),
    _OetFwName_Type()
)
oetFwName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetFwName.setStatus("mandatory")
_OetFwVersionID_Type = VersionString
_OetFwVersionID_Object = MibTableColumn
oetFwVersionID = _OetFwVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 10),
    _OetFwVersionID_Type()
)
oetFwVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetFwVersionID.setStatus("mandatory")
_OetFwDate_Type = DateAndTime
_OetFwDate_Object = MibTableColumn
oetFwDate = _OetFwDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 11),
    _OetFwDate_Type()
)
oetFwDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetFwDate.setStatus("mandatory")
_OetModelType_Type = CardType
_OetModelType_Object = MibTableColumn
oetModelType = _OetModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 12),
    _OetModelType_Type()
)
oetModelType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetModelType.setStatus("mandatory")
_OetName_Type = CardName
_OetName_Object = MibTableColumn
oetName = _OetName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 13),
    _OetName_Type()
)
oetName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oetName.setStatus("mandatory")
_OetCleiNum_Type = DisplayString
_OetCleiNum_Object = MibTableColumn
oetCleiNum = _OetCleiNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 14),
    _OetCleiNum_Type()
)
oetCleiNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetCleiNum.setStatus("mandatory")
_OetFpgaRevMB_Type = Integer32
_OetFpgaRevMB_Object = MibTableColumn
oetFpgaRevMB = _OetFpgaRevMB_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 15),
    _OetFpgaRevMB_Type()
)
oetFpgaRevMB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetFpgaRevMB.setStatus("mandatory")
_OetFpgaRevDB_Type = Integer32
_OetFpgaRevDB_Object = MibTableColumn
oetFpgaRevDB = _OetFpgaRevDB_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 16),
    _OetFpgaRevDB_Type()
)
oetFpgaRevDB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetFpgaRevDB.setStatus("mandatory")
_OetCpldRev_Type = Integer32
_OetCpldRev_Object = MibTableColumn
oetCpldRev = _OetCpldRev_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 17),
    _OetCpldRev_Type()
)
oetCpldRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetCpldRev.setStatus("mandatory")


class _OetOpMode_Type(Integer32):
    """Custom type oetOpMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("mux", 1),
          ("switch", 2))
    )


_OetOpMode_Type.__name__ = "Integer32"
_OetOpMode_Object = MibTableColumn
oetOpMode = _OetOpMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 18),
    _OetOpMode_Type()
)
oetOpMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oetOpMode.setStatus("mandatory")


class _OetProtMode_Type(Integer32):
    """Custom type oetProtMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("off", 2),
          ("on", 1))
    )


_OetProtMode_Type.__name__ = "Integer32"
_OetProtMode_Object = MibTableColumn
oetProtMode = _OetProtMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 19),
    _OetProtMode_Type()
)
oetProtMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oetProtMode.setStatus("mandatory")


class _OetEAPSMode_Type(Integer32):
    """Custom type oetEAPSMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("linearEndpoint", 2),
          ("linearNode", 3),
          ("ringMaster", 4),
          ("ringNode", 5))
    )


_OetEAPSMode_Type.__name__ = "Integer32"
_OetEAPSMode_Object = MibTableColumn
oetEAPSMode = _OetEAPSMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 20),
    _OetEAPSMode_Type()
)
oetEAPSMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oetEAPSMode.setStatus("mandatory")


class _OetAdminState_Type(Integer32):
    """Custom type oetAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("na", 3))
    )


_OetAdminState_Type.__name__ = "Integer32"
_OetAdminState_Object = MibTableColumn
oetAdminState = _OetAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 21),
    _OetAdminState_Type()
)
oetAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oetAdminState.setStatus("mandatory")


class _OetSetState_Type(Integer32):
    """Custom type oetSetState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("warmboot", 2))
    )


_OetSetState_Type.__name__ = "Integer32"
_OetSetState_Object = MibTableColumn
oetSetState = _OetSetState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 22),
    _OetSetState_Type()
)
oetSetState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oetSetState.setStatus("mandatory")


class _OetConfigInProgress_Type(Integer32):
    """Custom type oetConfigInProgress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 2),
          ("yes", 1))
    )


_OetConfigInProgress_Type.__name__ = "Integer32"
_OetConfigInProgress_Object = MibTableColumn
oetConfigInProgress = _OetConfigInProgress_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 23),
    _OetConfigInProgress_Type()
)
oetConfigInProgress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetConfigInProgress.setStatus("mandatory")


class _OetApplyChanges_Type(Integer32):
    """Custom type oetApplyChanges based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("apply", 2),
          ("clear", 1),
          ("na", 3))
    )


_OetApplyChanges_Type.__name__ = "Integer32"
_OetApplyChanges_Object = MibTableColumn
oetApplyChanges = _OetApplyChanges_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 24),
    _OetApplyChanges_Type()
)
oetApplyChanges.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oetApplyChanges.setStatus("mandatory")
_OetLinkTable_Object = MibTable
oetLinkTable = _OetLinkTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 3)
)
if mibBuilder.loadTexts:
    oetLinkTable.setStatus("mandatory")
_OetLinkEntry_Object = MibTableRow
oetLinkEntry = _OetLinkEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1)
)
oetLinkEntry.setIndexNames(
    (0, "LUXN-MIB", "oetLinkLocation"),
    (0, "LUXN-MIB", "oetLinkShelf"),
    (0, "LUXN-MIB", "oetLinkSlot"),
    (0, "LUXN-MIB", "oetLinkIndex"),
)
if mibBuilder.loadTexts:
    oetLinkEntry.setStatus("mandatory")
_OetLinkLocation_Type = CardLocation
_OetLinkLocation_Object = MibTableColumn
oetLinkLocation = _OetLinkLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 1),
    _OetLinkLocation_Type()
)
oetLinkLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetLinkLocation.setStatus("mandatory")
_OetLinkShelf_Type = CardShelf
_OetLinkShelf_Object = MibTableColumn
oetLinkShelf = _OetLinkShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 2),
    _OetLinkShelf_Type()
)
oetLinkShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetLinkShelf.setStatus("mandatory")
_OetLinkSlot_Type = SlotInput
_OetLinkSlot_Object = MibTableColumn
oetLinkSlot = _OetLinkSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 3),
    _OetLinkSlot_Type()
)
oetLinkSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetLinkSlot.setStatus("mandatory")


class _OetLinkIndex_Type(Integer32):
    """Custom type oetLinkIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("linkA", 11),
          ("linkB", 12))
    )


_OetLinkIndex_Type.__name__ = "Integer32"
_OetLinkIndex_Object = MibTableColumn
oetLinkIndex = _OetLinkIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 4),
    _OetLinkIndex_Type()
)
oetLinkIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetLinkIndex.setStatus("mandatory")


class _OetLinkEnable_Type(Integer32):
    """Custom type oetLinkEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_OetLinkEnable_Type.__name__ = "Integer32"
_OetLinkEnable_Object = MibTableColumn
oetLinkEnable = _OetLinkEnable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 5),
    _OetLinkEnable_Type()
)
oetLinkEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oetLinkEnable.setStatus("mandatory")


class _OetLinkProtocol_Type(Integer32):
    """Custom type oetLinkProtocol based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("lan", 2),
          ("otu", 1))
    )


_OetLinkProtocol_Type.__name__ = "Integer32"
_OetLinkProtocol_Object = MibTableColumn
oetLinkProtocol = _OetLinkProtocol_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 6),
    _OetLinkProtocol_Type()
)
oetLinkProtocol.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oetLinkProtocol.setStatus("mandatory")
_OetLinkName_Type = CardName
_OetLinkName_Object = MibTableColumn
oetLinkName = _OetLinkName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 7),
    _OetLinkName_Type()
)
oetLinkName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oetLinkName.setStatus("mandatory")


class _OetLinkVlanIds_Type(DisplayString):
    """Custom type oetLinkVlanIds based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 80),
    )


_OetLinkVlanIds_Type.__name__ = "DisplayString"
_OetLinkVlanIds_Object = MibTableColumn
oetLinkVlanIds = _OetLinkVlanIds_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 8),
    _OetLinkVlanIds_Type()
)
oetLinkVlanIds.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oetLinkVlanIds.setStatus("mandatory")


class _OetLinkConfigInProgress_Type(Integer32):
    """Custom type oetLinkConfigInProgress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 2),
          ("yes", 1))
    )


_OetLinkConfigInProgress_Type.__name__ = "Integer32"
_OetLinkConfigInProgress_Object = MibTableColumn
oetLinkConfigInProgress = _OetLinkConfigInProgress_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 9),
    _OetLinkConfigInProgress_Type()
)
oetLinkConfigInProgress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetLinkConfigInProgress.setStatus("mandatory")


class _OetLinkApplyChanges_Type(Integer32):
    """Custom type oetLinkApplyChanges based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("apply", 2),
          ("clear", 1),
          ("na", 3))
    )


_OetLinkApplyChanges_Type.__name__ = "Integer32"
_OetLinkApplyChanges_Object = MibTableColumn
oetLinkApplyChanges = _OetLinkApplyChanges_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 10),
    _OetLinkApplyChanges_Type()
)
oetLinkApplyChanges.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oetLinkApplyChanges.setStatus("mandatory")


class _OetLinkMode_Type(Integer32):
    """Custom type oetLinkMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2),
          ("loopback", 3),
          ("na", 0))
    )


_OetLinkMode_Type.__name__ = "Integer32"
_OetLinkMode_Object = MibTableColumn
oetLinkMode = _OetLinkMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 11),
    _OetLinkMode_Type()
)
oetLinkMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetLinkMode.setStatus("mandatory")
_OetLinkItu_Type = Integer32
_OetLinkItu_Object = MibTableColumn
oetLinkItu = _OetLinkItu_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 12),
    _OetLinkItu_Type()
)
oetLinkItu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetLinkItu.setStatus("mandatory")
_OetLinkWavelength_Type = DisplayString
_OetLinkWavelength_Object = MibTableColumn
oetLinkWavelength = _OetLinkWavelength_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 13),
    _OetLinkWavelength_Type()
)
oetLinkWavelength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetLinkWavelength.setStatus("mandatory")
_OetLinkRxPower_Type = DisplayString
_OetLinkRxPower_Object = MibTableColumn
oetLinkRxPower = _OetLinkRxPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 14),
    _OetLinkRxPower_Type()
)
oetLinkRxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetLinkRxPower.setStatus("mandatory")


class _OetLinkTxState_Type(Integer32):
    """Custom type oetLinkTxState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("na", 0),
          ("off", 2),
          ("on", 1))
    )


_OetLinkTxState_Type.__name__ = "Integer32"
_OetLinkTxState_Object = MibTableColumn
oetLinkTxState = _OetLinkTxState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 15),
    _OetLinkTxState_Type()
)
oetLinkTxState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetLinkTxState.setStatus("mandatory")
_OetLinkTxReach_Type = Integer32
_OetLinkTxReach_Object = MibTableColumn
oetLinkTxReach = _OetLinkTxReach_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 16),
    _OetLinkTxReach_Type()
)
oetLinkTxReach.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetLinkTxReach.setStatus("mandatory")
_OetLinkXfpSerialNumber_Type = DisplayString
_OetLinkXfpSerialNumber_Object = MibTableColumn
oetLinkXfpSerialNumber = _OetLinkXfpSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 17),
    _OetLinkXfpSerialNumber_Type()
)
oetLinkXfpSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetLinkXfpSerialNumber.setStatus("mandatory")
_OetPortTable_Object = MibTable
oetPortTable = _OetPortTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 4)
)
if mibBuilder.loadTexts:
    oetPortTable.setStatus("mandatory")
_OetPortEntry_Object = MibTableRow
oetPortEntry = _OetPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1)
)
oetPortEntry.setIndexNames(
    (0, "LUXN-MIB", "oetPortLocation"),
    (0, "LUXN-MIB", "oetPortShelf"),
    (0, "LUXN-MIB", "oetPortSlot"),
    (0, "LUXN-MIB", "oetPortIndex"),
)
if mibBuilder.loadTexts:
    oetPortEntry.setStatus("mandatory")
_OetPortLocation_Type = CardLocation
_OetPortLocation_Object = MibTableColumn
oetPortLocation = _OetPortLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 1),
    _OetPortLocation_Type()
)
oetPortLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPortLocation.setStatus("mandatory")
_OetPortShelf_Type = CardShelf
_OetPortShelf_Object = MibTableColumn
oetPortShelf = _OetPortShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 2),
    _OetPortShelf_Type()
)
oetPortShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPortShelf.setStatus("mandatory")
_OetPortSlot_Type = SlotInput
_OetPortSlot_Object = MibTableColumn
oetPortSlot = _OetPortSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 3),
    _OetPortSlot_Type()
)
oetPortSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPortSlot.setStatus("mandatory")


class _OetPortIndex_Type(Integer32):
    """Custom type oetPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            10
        )
    )
    namedValues = NamedValues(
        ("cpe", 10)
    )


_OetPortIndex_Type.__name__ = "Integer32"
_OetPortIndex_Object = MibTableColumn
oetPortIndex = _OetPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 4),
    _OetPortIndex_Type()
)
oetPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPortIndex.setStatus("mandatory")


class _OetPortEnable_Type(Integer32):
    """Custom type oetPortEnable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_OetPortEnable_Type.__name__ = "Integer32"
_OetPortEnable_Object = MibTableColumn
oetPortEnable = _OetPortEnable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 5),
    _OetPortEnable_Type()
)
oetPortEnable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oetPortEnable.setStatus("mandatory")


class _OetPortALSD_Type(Integer32):
    """Custom type oetPortALSD based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("local", 2),
          ("remote", 3))
    )


_OetPortALSD_Type.__name__ = "Integer32"
_OetPortALSD_Object = MibTableColumn
oetPortALSD = _OetPortALSD_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 6),
    _OetPortALSD_Type()
)
oetPortALSD.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oetPortALSD.setStatus("mandatory")


class _OetPortFlowControl_Type(Integer32):
    """Custom type oetPortFlowControl based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_OetPortFlowControl_Type.__name__ = "Integer32"
_OetPortFlowControl_Object = MibTableColumn
oetPortFlowControl = _OetPortFlowControl_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 7),
    _OetPortFlowControl_Type()
)
oetPortFlowControl.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oetPortFlowControl.setStatus("mandatory")


class _OetPortVlanId_Type(Integer32):
    """Custom type oetPortVlanId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 200),
    )


_OetPortVlanId_Type.__name__ = "Integer32"
_OetPortVlanId_Object = MibTableColumn
oetPortVlanId = _OetPortVlanId_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 8),
    _OetPortVlanId_Type()
)
oetPortVlanId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oetPortVlanId.setStatus("mandatory")
_OetPortName_Type = CardName
_OetPortName_Object = MibTableColumn
oetPortName = _OetPortName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 9),
    _OetPortName_Type()
)
oetPortName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oetPortName.setStatus("mandatory")


class _OetPortConfigInProgress_Type(Integer32):
    """Custom type oetPortConfigInProgress based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("on", 2),
          ("yes", 1))
    )


_OetPortConfigInProgress_Type.__name__ = "Integer32"
_OetPortConfigInProgress_Object = MibTableColumn
oetPortConfigInProgress = _OetPortConfigInProgress_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 10),
    _OetPortConfigInProgress_Type()
)
oetPortConfigInProgress.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPortConfigInProgress.setStatus("mandatory")


class _OetPortApplyChanges_Type(Integer32):
    """Custom type oetPortApplyChanges based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("apply", 2),
          ("clear", 1),
          ("na", 3))
    )


_OetPortApplyChanges_Type.__name__ = "Integer32"
_OetPortApplyChanges_Object = MibTableColumn
oetPortApplyChanges = _OetPortApplyChanges_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 11),
    _OetPortApplyChanges_Type()
)
oetPortApplyChanges.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oetPortApplyChanges.setStatus("mandatory")


class _OetPortMode_Type(Integer32):
    """Custom type oetPortMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 1),
          ("enabled", 2),
          ("loopback", 3),
          ("na", 0))
    )


_OetPortMode_Type.__name__ = "Integer32"
_OetPortMode_Object = MibTableColumn
oetPortMode = _OetPortMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 12),
    _OetPortMode_Type()
)
oetPortMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPortMode.setStatus("mandatory")
_OetPortItu_Type = Integer32
_OetPortItu_Object = MibTableColumn
oetPortItu = _OetPortItu_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 13),
    _OetPortItu_Type()
)
oetPortItu.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPortItu.setStatus("mandatory")
_OetPortWavelength_Type = DisplayString
_OetPortWavelength_Object = MibTableColumn
oetPortWavelength = _OetPortWavelength_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 14),
    _OetPortWavelength_Type()
)
oetPortWavelength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPortWavelength.setStatus("mandatory")
_OetPortRxPower_Type = DisplayString
_OetPortRxPower_Object = MibTableColumn
oetPortRxPower = _OetPortRxPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 15),
    _OetPortRxPower_Type()
)
oetPortRxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPortRxPower.setStatus("mandatory")


class _OetPortTxState_Type(Integer32):
    """Custom type oetPortTxState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("na", 0),
          ("off", 2),
          ("on", 1))
    )


_OetPortTxState_Type.__name__ = "Integer32"
_OetPortTxState_Object = MibTableColumn
oetPortTxState = _OetPortTxState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 16),
    _OetPortTxState_Type()
)
oetPortTxState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPortTxState.setStatus("mandatory")
_OetPortTxReach_Type = Integer32
_OetPortTxReach_Object = MibTableColumn
oetPortTxReach = _OetPortTxReach_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 17),
    _OetPortTxReach_Type()
)
oetPortTxReach.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPortTxReach.setStatus("mandatory")
_OetPortSfpSerialNumber_Type = DisplayString
_OetPortSfpSerialNumber_Object = MibTableColumn
oetPortSfpSerialNumber = _OetPortSfpSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 18),
    _OetPortSfpSerialNumber_Type()
)
oetPortSfpSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPortSfpSerialNumber.setStatus("mandatory")
_Uob_ObjectIdentity = ObjectIdentity
uob = _Uob_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34)
)
_UobNumber_Type = Integer32
_UobNumber_Object = MibScalar
uobNumber = _UobNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 1),
    _UobNumber_Type()
)
uobNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobNumber.setStatus("mandatory")
_UobTable_Object = MibTable
uobTable = _UobTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2)
)
if mibBuilder.loadTexts:
    uobTable.setStatus("mandatory")
_UobEntry_Object = MibTableRow
uobEntry = _UobEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1)
)
uobEntry.setIndexNames(
    (0, "LUXN-MIB", "uobCardLocation"),
    (0, "LUXN-MIB", "uobCardShelf"),
    (0, "LUXN-MIB", "uobCardSlot"),
)
if mibBuilder.loadTexts:
    uobEntry.setStatus("mandatory")
_UobCardLocation_Type = CardLocation
_UobCardLocation_Object = MibTableColumn
uobCardLocation = _UobCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 1),
    _UobCardLocation_Type()
)
uobCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobCardLocation.setStatus("mandatory")
_UobCardShelf_Type = CardShelf
_UobCardShelf_Object = MibTableColumn
uobCardShelf = _UobCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 2),
    _UobCardShelf_Type()
)
uobCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobCardShelf.setStatus("mandatory")
_UobCardSlot_Type = SlotInput
_UobCardSlot_Object = MibTableColumn
uobCardSlot = _UobCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 3),
    _UobCardSlot_Type()
)
uobCardSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    uobCardSlot.setStatus("mandatory")
_UobSerialNum_Type = SerialString
_UobSerialNum_Object = MibTableColumn
uobSerialNum = _UobSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 4),
    _UobSerialNum_Type()
)
uobSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobSerialNum.setStatus("mandatory")
_UobModelNum_Type = DisplayString
_UobModelNum_Object = MibTableColumn
uobModelNum = _UobModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 5),
    _UobModelNum_Type()
)
uobModelNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobModelNum.setStatus("mandatory")
_UobHwName_Type = DisplayString
_UobHwName_Object = MibTableColumn
uobHwName = _UobHwName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 6),
    _UobHwName_Type()
)
uobHwName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobHwName.setStatus("mandatory")
_UobHwVersionID_Type = VersionString
_UobHwVersionID_Object = MibTableColumn
uobHwVersionID = _UobHwVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 7),
    _UobHwVersionID_Type()
)
uobHwVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobHwVersionID.setStatus("mandatory")
_UobMfgDate_Type = DateAndTime
_UobMfgDate_Object = MibTableColumn
uobMfgDate = _UobMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 8),
    _UobMfgDate_Type()
)
uobMfgDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobMfgDate.setStatus("mandatory")
_UobFwName_Type = CardName
_UobFwName_Object = MibTableColumn
uobFwName = _UobFwName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 9),
    _UobFwName_Type()
)
uobFwName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobFwName.setStatus("mandatory")
_UobFwVersionID_Type = VersionString
_UobFwVersionID_Object = MibTableColumn
uobFwVersionID = _UobFwVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 10),
    _UobFwVersionID_Type()
)
uobFwVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobFwVersionID.setStatus("mandatory")
_UobFwDate_Type = DateAndTime
_UobFwDate_Object = MibTableColumn
uobFwDate = _UobFwDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 11),
    _UobFwDate_Type()
)
uobFwDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobFwDate.setStatus("mandatory")
_UobModelType_Type = CardType
_UobModelType_Object = MibTableColumn
uobModelType = _UobModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 12),
    _UobModelType_Type()
)
uobModelType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobModelType.setStatus("mandatory")
_UobCfgName_Type = CardName
_UobCfgName_Object = MibTableColumn
uobCfgName = _UobCfgName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 13),
    _UobCfgName_Type()
)
uobCfgName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    uobCfgName.setStatus("mandatory")
_UobModuleName_Type = DisplayString
_UobModuleName_Object = MibTableColumn
uobModuleName = _UobModuleName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 14),
    _UobModuleName_Type()
)
uobModuleName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobModuleName.setStatus("mandatory")


class _UobAdminState_Type(Integer32):
    """Custom type uobAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2),
          ("na", 3))
    )


_UobAdminState_Type.__name__ = "Integer32"
_UobAdminState_Object = MibTableColumn
uobAdminState = _UobAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 15),
    _UobAdminState_Type()
)
uobAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    uobAdminState.setStatus("mandatory")


class _UobSetState_Type(Integer32):
    """Custom type uobSetState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("warmboot", 2))
    )


_UobSetState_Type.__name__ = "Integer32"
_UobSetState_Object = MibTableColumn
uobSetState = _UobSetState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 16),
    _UobSetState_Type()
)
uobSetState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    uobSetState.setStatus("mandatory")
_UobCleiNum_Type = DisplayString
_UobCleiNum_Object = MibTableColumn
uobCleiNum = _UobCleiNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 17),
    _UobCleiNum_Type()
)
uobCleiNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobCleiNum.setStatus("mandatory")
_UobFpgaRev_Type = Integer32
_UobFpgaRev_Object = MibTableColumn
uobFpgaRev = _UobFpgaRev_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 18),
    _UobFpgaRev_Type()
)
uobFpgaRev.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobFpgaRev.setStatus("mandatory")


class _UobOperationMode_Type(Integer32):
    """Custom type uobOperationMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("constainPower", 1),
          ("constantGain", 2),
          ("disabled", 3),
          ("invalid", 0))
    )


_UobOperationMode_Type.__name__ = "Integer32"
_UobOperationMode_Object = MibTableColumn
uobOperationMode = _UobOperationMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 19),
    _UobOperationMode_Type()
)
uobOperationMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    uobOperationMode.setStatus("mandatory")
_UobOutPower_Type = DisplayString
_UobOutPower_Object = MibTableColumn
uobOutPower = _UobOutPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 20),
    _UobOutPower_Type()
)
uobOutPower.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    uobOutPower.setStatus("mandatory")
_UobGain_Type = DisplayString
_UobGain_Object = MibTableColumn
uobGain = _UobGain_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 21),
    _UobGain_Type()
)
uobGain.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    uobGain.setStatus("mandatory")
_UobGainTilt_Type = DisplayString
_UobGainTilt_Object = MibTableColumn
uobGainTilt = _UobGainTilt_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 22),
    _UobGainTilt_Type()
)
uobGainTilt.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    uobGainTilt.setStatus("mandatory")


class _UobLosMode_Type(Integer32):
    """Custom type uobLosMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("disabledInAll", 2),
          ("disabledInPower", 3),
          ("noEffect", 1))
    )


_UobLosMode_Type.__name__ = "Integer32"
_UobLosMode_Object = MibTableColumn
uobLosMode = _UobLosMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 23),
    _UobLosMode_Type()
)
uobLosMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    uobLosMode.setStatus("mandatory")
_UobLosThreshold_Type = DisplayString
_UobLosThreshold_Object = MibTableColumn
uobLosThreshold = _UobLosThreshold_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 24),
    _UobLosThreshold_Type()
)
uobLosThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    uobLosThreshold.setStatus("mandatory")
_UobRflThreshold_Type = DisplayString
_UobRflThreshold_Object = MibTableColumn
uobRflThreshold = _UobRflThreshold_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 25),
    _UobRflThreshold_Type()
)
uobRflThreshold.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    uobRflThreshold.setStatus("mandatory")
_Fc8g_ObjectIdentity = ObjectIdentity
fc8g = _Fc8g_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35)
)
_Fc8gNumber_Type = Integer32
_Fc8gNumber_Object = MibScalar
fc8gNumber = _Fc8gNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 1),
    _Fc8gNumber_Type()
)
fc8gNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gNumber.setStatus("mandatory")
_Fc8gTable_Object = MibTable
fc8gTable = _Fc8gTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2)
)
if mibBuilder.loadTexts:
    fc8gTable.setStatus("mandatory")
_Fc8gEntry_Object = MibTableRow
fc8gEntry = _Fc8gEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1)
)
fc8gEntry.setIndexNames(
    (0, "LUXN-MIB", "fc8gCardLocation"),
    (0, "LUXN-MIB", "fc8gCardShelf"),
    (0, "LUXN-MIB", "fc8gCardSlot"),
)
if mibBuilder.loadTexts:
    fc8gEntry.setStatus("mandatory")


class _Fc8gCardLocation_Type(Integer32):
    """Custom type fc8gCardLocation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("local", 1)
    )


_Fc8gCardLocation_Type.__name__ = "Integer32"
_Fc8gCardLocation_Object = MibTableColumn
fc8gCardLocation = _Fc8gCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 1),
    _Fc8gCardLocation_Type()
)
fc8gCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gCardLocation.setStatus("mandatory")
_Fc8gCardShelf_Type = CardShelf
_Fc8gCardShelf_Object = MibTableColumn
fc8gCardShelf = _Fc8gCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 2),
    _Fc8gCardShelf_Type()
)
fc8gCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gCardShelf.setStatus("mandatory")
_Fc8gCardSlot_Type = SlotInput
_Fc8gCardSlot_Object = MibTableColumn
fc8gCardSlot = _Fc8gCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 3),
    _Fc8gCardSlot_Type()
)
fc8gCardSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fc8gCardSlot.setStatus("mandatory")
_Fc8gSerialNum_Type = SerialString
_Fc8gSerialNum_Object = MibTableColumn
fc8gSerialNum = _Fc8gSerialNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 4),
    _Fc8gSerialNum_Type()
)
fc8gSerialNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gSerialNum.setStatus("mandatory")
_Fc8gModelNum_Type = DisplayString
_Fc8gModelNum_Object = MibTableColumn
fc8gModelNum = _Fc8gModelNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 5),
    _Fc8gModelNum_Type()
)
fc8gModelNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gModelNum.setStatus("mandatory")
_Fc8gHwName_Type = DisplayString
_Fc8gHwName_Object = MibTableColumn
fc8gHwName = _Fc8gHwName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 6),
    _Fc8gHwName_Type()
)
fc8gHwName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gHwName.setStatus("mandatory")
_Fc8gHwVersionID_Type = VersionString
_Fc8gHwVersionID_Object = MibTableColumn
fc8gHwVersionID = _Fc8gHwVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 7),
    _Fc8gHwVersionID_Type()
)
fc8gHwVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gHwVersionID.setStatus("mandatory")
_Fc8gMfgDate_Type = DateAndTime
_Fc8gMfgDate_Object = MibTableColumn
fc8gMfgDate = _Fc8gMfgDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 8),
    _Fc8gMfgDate_Type()
)
fc8gMfgDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gMfgDate.setStatus("mandatory")
_Fc8gFwName_Type = CardName
_Fc8gFwName_Object = MibTableColumn
fc8gFwName = _Fc8gFwName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 9),
    _Fc8gFwName_Type()
)
fc8gFwName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gFwName.setStatus("mandatory")
_Fc8gFwVersionID_Type = VersionString
_Fc8gFwVersionID_Object = MibTableColumn
fc8gFwVersionID = _Fc8gFwVersionID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 10),
    _Fc8gFwVersionID_Type()
)
fc8gFwVersionID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gFwVersionID.setStatus("mandatory")
_Fc8gFwDate_Type = DateAndTime
_Fc8gFwDate_Object = MibTableColumn
fc8gFwDate = _Fc8gFwDate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 11),
    _Fc8gFwDate_Type()
)
fc8gFwDate.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gFwDate.setStatus("mandatory")
_Fc8gModelType_Type = CardType
_Fc8gModelType_Object = MibTableColumn
fc8gModelType = _Fc8gModelType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 12),
    _Fc8gModelType_Type()
)
fc8gModelType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gModelType.setStatus("mandatory")
_Fc8gName_Type = CardName
_Fc8gName_Object = MibTableColumn
fc8gName = _Fc8gName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 13),
    _Fc8gName_Type()
)
fc8gName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fc8gName.setStatus("mandatory")


class _Fc8gLink1DataRate_Type(Integer32):
    """Custom type fc8gLink1DataRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dr1G", 4),
          ("dr2G", 3),
          ("dr4G", 2),
          ("dr8G", 1))
    )


_Fc8gLink1DataRate_Type.__name__ = "Integer32"
_Fc8gLink1DataRate_Object = MibTableColumn
fc8gLink1DataRate = _Fc8gLink1DataRate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 14),
    _Fc8gLink1DataRate_Type()
)
fc8gLink1DataRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fc8gLink1DataRate.setStatus("mandatory")


class _Fc8gCpe1AutoDisable_Type(Integer32):
    """Custom type fc8gCpe1AutoDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_Fc8gCpe1AutoDisable_Type.__name__ = "Integer32"
_Fc8gCpe1AutoDisable_Object = MibTableColumn
fc8gCpe1AutoDisable = _Fc8gCpe1AutoDisable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 15),
    _Fc8gCpe1AutoDisable_Type()
)
fc8gCpe1AutoDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fc8gCpe1AutoDisable.setStatus("mandatory")


class _Fc8gCpe1LaserEnabled_Type(Integer32):
    """Custom type fc8gCpe1LaserEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_Fc8gCpe1LaserEnabled_Type.__name__ = "Integer32"
_Fc8gCpe1LaserEnabled_Object = MibTableColumn
fc8gCpe1LaserEnabled = _Fc8gCpe1LaserEnabled_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 16),
    _Fc8gCpe1LaserEnabled_Type()
)
fc8gCpe1LaserEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fc8gCpe1LaserEnabled.setStatus("mandatory")


class _Fc8gLink1LaserEnabled_Type(Integer32):
    """Custom type fc8gLink1LaserEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_Fc8gLink1LaserEnabled_Type.__name__ = "Integer32"
_Fc8gLink1LaserEnabled_Object = MibTableColumn
fc8gLink1LaserEnabled = _Fc8gLink1LaserEnabled_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 17),
    _Fc8gLink1LaserEnabled_Type()
)
fc8gLink1LaserEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fc8gLink1LaserEnabled.setStatus("mandatory")


class _Fc8gLink2DataRate_Type(Integer32):
    """Custom type fc8gLink2DataRate based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("dr1G", 4),
          ("dr2G", 3),
          ("dr4G", 2),
          ("dr8G", 1))
    )


_Fc8gLink2DataRate_Type.__name__ = "Integer32"
_Fc8gLink2DataRate_Object = MibTableColumn
fc8gLink2DataRate = _Fc8gLink2DataRate_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 18),
    _Fc8gLink2DataRate_Type()
)
fc8gLink2DataRate.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fc8gLink2DataRate.setStatus("mandatory")


class _Fc8gCpe2AutoDisable_Type(Integer32):
    """Custom type fc8gCpe2AutoDisable based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_Fc8gCpe2AutoDisable_Type.__name__ = "Integer32"
_Fc8gCpe2AutoDisable_Object = MibTableColumn
fc8gCpe2AutoDisable = _Fc8gCpe2AutoDisable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 19),
    _Fc8gCpe2AutoDisable_Type()
)
fc8gCpe2AutoDisable.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fc8gCpe2AutoDisable.setStatus("mandatory")


class _Fc8gCpe2LaserEnabled_Type(Integer32):
    """Custom type fc8gCpe2LaserEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_Fc8gCpe2LaserEnabled_Type.__name__ = "Integer32"
_Fc8gCpe2LaserEnabled_Object = MibTableColumn
fc8gCpe2LaserEnabled = _Fc8gCpe2LaserEnabled_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 20),
    _Fc8gCpe2LaserEnabled_Type()
)
fc8gCpe2LaserEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fc8gCpe2LaserEnabled.setStatus("mandatory")


class _Fc8gLink2LaserEnabled_Type(Integer32):
    """Custom type fc8gLink2LaserEnabled based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 2),
          ("enable", 1))
    )


_Fc8gLink2LaserEnabled_Type.__name__ = "Integer32"
_Fc8gLink2LaserEnabled_Object = MibTableColumn
fc8gLink2LaserEnabled = _Fc8gLink2LaserEnabled_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 21),
    _Fc8gLink2LaserEnabled_Type()
)
fc8gLink2LaserEnabled.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fc8gLink2LaserEnabled.setStatus("mandatory")


class _Fc8gAdminState_Type(Integer32):
    """Custom type fc8gAdminState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disable", 1),
          ("enable", 2))
    )


_Fc8gAdminState_Type.__name__ = "Integer32"
_Fc8gAdminState_Object = MibTableColumn
fc8gAdminState = _Fc8gAdminState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 22),
    _Fc8gAdminState_Type()
)
fc8gAdminState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fc8gAdminState.setStatus("mandatory")


class _Fc8gSetState_Type(Integer32):
    """Custom type fc8gSetState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5,
              6,
              7,
              8)
        )
    )
    namedValues = NamedValues(
        *(("disableChannel1loopback", 7),
          ("disableChannel2loopback", 8),
          ("enableChannel1CpeLoopback", 4),
          ("enableChannel1LinkLoopback", 3),
          ("enableChannel2CpeLoopback", 6),
          ("enableChannel2LinkLoopback", 5),
          ("other", 1),
          ("warmboot", 2))
    )


_Fc8gSetState_Type.__name__ = "Integer32"
_Fc8gSetState_Object = MibTableColumn
fc8gSetState = _Fc8gSetState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 23),
    _Fc8gSetState_Type()
)
fc8gSetState.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    fc8gSetState.setStatus("mandatory")
_Fc8gPortTable_Object = MibTable
fc8gPortTable = _Fc8gPortTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 3)
)
if mibBuilder.loadTexts:
    fc8gPortTable.setStatus("mandatory")
_Fc8gPortEntry_Object = MibTableRow
fc8gPortEntry = _Fc8gPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1)
)
fc8gPortEntry.setIndexNames(
    (0, "LUXN-MIB", "fc8gPortLocation"),
    (0, "LUXN-MIB", "fc8gPortShelf"),
    (0, "LUXN-MIB", "fc8gPortSlot"),
    (0, "LUXN-MIB", "fc8gPortIndex"),
)
if mibBuilder.loadTexts:
    fc8gPortEntry.setStatus("mandatory")
_Fc8gPortLocation_Type = CardLocation
_Fc8gPortLocation_Object = MibTableColumn
fc8gPortLocation = _Fc8gPortLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1, 1),
    _Fc8gPortLocation_Type()
)
fc8gPortLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gPortLocation.setStatus("mandatory")
_Fc8gPortShelf_Type = CardShelf
_Fc8gPortShelf_Object = MibTableColumn
fc8gPortShelf = _Fc8gPortShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1, 2),
    _Fc8gPortShelf_Type()
)
fc8gPortShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gPortShelf.setStatus("mandatory")
_Fc8gPortSlot_Type = SlotInput
_Fc8gPortSlot_Object = MibTableColumn
fc8gPortSlot = _Fc8gPortSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1, 3),
    _Fc8gPortSlot_Type()
)
fc8gPortSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gPortSlot.setStatus("mandatory")


class _Fc8gPortIndex_Type(Integer32):
    """Custom type fc8gPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("cpe1", 2),
          ("cpe2", 4),
          ("link1", 1),
          ("link2", 3))
    )


_Fc8gPortIndex_Type.__name__ = "Integer32"
_Fc8gPortIndex_Object = MibTableColumn
fc8gPortIndex = _Fc8gPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1, 4),
    _Fc8gPortIndex_Type()
)
fc8gPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gPortIndex.setStatus("mandatory")
_Fc8gPortName_Type = CardName
_Fc8gPortName_Object = MibTableColumn
fc8gPortName = _Fc8gPortName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1, 5),
    _Fc8gPortName_Type()
)
fc8gPortName.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gPortName.setStatus("mandatory")


class _Fc8gPortMode_Type(Integer32):
    """Custom type fc8gPortMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("enabled", 1),
          ("loopback", 2))
    )


_Fc8gPortMode_Type.__name__ = "Integer32"
_Fc8gPortMode_Object = MibTableColumn
fc8gPortMode = _Fc8gPortMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1, 6),
    _Fc8gPortMode_Type()
)
fc8gPortMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gPortMode.setStatus("mandatory")
_Fc8gPortWavelength_Type = DisplayString
_Fc8gPortWavelength_Object = MibTableColumn
fc8gPortWavelength = _Fc8gPortWavelength_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1, 7),
    _Fc8gPortWavelength_Type()
)
fc8gPortWavelength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gPortWavelength.setStatus("mandatory")
_Fc8gPortRxPower_Type = DisplayString
_Fc8gPortRxPower_Object = MibTableColumn
fc8gPortRxPower = _Fc8gPortRxPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1, 8),
    _Fc8gPortRxPower_Type()
)
fc8gPortRxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gPortRxPower.setStatus("mandatory")


class _Fc8gPortTxState_Type(Integer32):
    """Custom type fc8gPortTxState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(0,
              1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("na", 0),
          ("off", 2),
          ("on", 1))
    )


_Fc8gPortTxState_Type.__name__ = "Integer32"
_Fc8gPortTxState_Object = MibTableColumn
fc8gPortTxState = _Fc8gPortTxState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1, 9),
    _Fc8gPortTxState_Type()
)
fc8gPortTxState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gPortTxState.setStatus("mandatory")
_Fc8gPortTxReach_Type = Integer32
_Fc8gPortTxReach_Object = MibTableColumn
fc8gPortTxReach = _Fc8gPortTxReach_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1, 10),
    _Fc8gPortTxReach_Type()
)
fc8gPortTxReach.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gPortTxReach.setStatus("mandatory")
_Fc8gPortSfpXfpSerialNumber_Type = DisplayString
_Fc8gPortSfpXfpSerialNumber_Object = MibTableColumn
fc8gPortSfpXfpSerialNumber = _Fc8gPortSfpXfpSerialNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1, 11),
    _Fc8gPortSfpXfpSerialNumber_Type()
)
fc8gPortSfpXfpSerialNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gPortSfpXfpSerialNumber.setStatus("mandatory")
_Performance_ObjectIdentity = ObjectIdentity
performance = _Performance_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2)
)
_Current1_ObjectIdentity = ObjectIdentity
current1 = _Current1_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1)
)
_SystemPerf_ObjectIdentity = ObjectIdentity
systemPerf = _SystemPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 1)
)
_SysStatus_Type = CardStatus
_SysStatus_Object = MibScalar
sysStatus = _SysStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 1, 1),
    _SysStatus_Type()
)
sysStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysStatus.setStatus("mandatory")
_SysClearStatus_Type = ResetType
_SysClearStatus_Object = MibScalar
sysClearStatus = _SysClearStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 1, 2),
    _SysClearStatus_Type()
)
sysClearStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    sysClearStatus.setStatus("mandatory")
_SysClearCounters_Type = ResetType
_SysClearCounters_Object = MibScalar
sysClearCounters = _SysClearCounters_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 1, 3),
    _SysClearCounters_Type()
)
sysClearCounters.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sysClearCounters.setStatus("mandatory")
_SysLastBootTime_Type = DateAndTime
_SysLastBootTime_Object = MibScalar
sysLastBootTime = _SysLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 1, 4),
    _SysLastBootTime_Type()
)
sysLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysLastBootTime.setStatus("mandatory")
_SysAvailTime_Type = Counter32
_SysAvailTime_Object = MibScalar
sysAvailTime = _SysAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 1, 5),
    _SysAvailTime_Type()
)
sysAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysAvailTime.setStatus("mandatory")
_SysErrFreeSecs_Type = Counter32
_SysErrFreeSecs_Object = MibScalar
sysErrFreeSecs = _SysErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 1, 6),
    _SysErrFreeSecs_Type()
)
sysErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysErrFreeSecs.setStatus("mandatory")
_SysExhaustTemperature_Type = Integer32
_SysExhaustTemperature_Object = MibScalar
sysExhaustTemperature = _SysExhaustTemperature_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 1, 7),
    _SysExhaustTemperature_Type()
)
sysExhaustTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysExhaustTemperature.setStatus("mandatory")
_DownloadPerf_ObjectIdentity = ObjectIdentity
downloadPerf = _DownloadPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 2)
)
_DlStatus_Type = DownloadStatus
_DlStatus_Object = MibScalar
dlStatus = _DlStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 2, 1),
    _DlStatus_Type()
)
dlStatus.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dlStatus.setStatus("mandatory")
_DlOkDownloads_Type = Counter32
_DlOkDownloads_Object = MibScalar
dlOkDownloads = _DlOkDownloads_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 2, 2),
    _DlOkDownloads_Type()
)
dlOkDownloads.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dlOkDownloads.setStatus("mandatory")
_DlBadDownloads_Type = Counter32
_DlBadDownloads_Object = MibScalar
dlBadDownloads = _DlBadDownloads_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 2, 3),
    _DlBadDownloads_Type()
)
dlBadDownloads.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dlBadDownloads.setStatus("mandatory")
_DlLongestTime_Type = Gauge32
_DlLongestTime_Object = MibScalar
dlLongestTime = _DlLongestTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 2, 4),
    _DlLongestTime_Type()
)
dlLongestTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dlLongestTime.setStatus("mandatory")
_DlLongestSize_Type = Gauge32
_DlLongestSize_Object = MibScalar
dlLongestSize = _DlLongestSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 2, 5),
    _DlLongestSize_Type()
)
dlLongestSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dlLongestSize.setStatus("mandatory")
_CpPerf_ObjectIdentity = ObjectIdentity
cpPerf = _CpPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3)
)
_CpNumEvents_Type = Counter32
_CpNumEvents_Object = MibScalar
cpNumEvents = _CpNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 1),
    _CpNumEvents_Type()
)
cpNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpNumEvents.setStatus("mandatory")
_CpTrapsSent_Type = Counter32
_CpTrapsSent_Object = MibScalar
cpTrapsSent = _CpTrapsSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 2),
    _CpTrapsSent_Type()
)
cpTrapsSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpTrapsSent.setStatus("mandatory")
_CpSNMPCmdsRcvd_Type = Counter32
_CpSNMPCmdsRcvd_Object = MibScalar
cpSNMPCmdsRcvd = _CpSNMPCmdsRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 3),
    _CpSNMPCmdsRcvd_Type()
)
cpSNMPCmdsRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpSNMPCmdsRcvd.setStatus("mandatory")
_CpCounterFlag_Type = FlagType
_CpCounterFlag_Object = MibScalar
cpCounterFlag = _CpCounterFlag_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 4),
    _CpCounterFlag_Type()
)
cpCounterFlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpCounterFlag.setStatus("mandatory")
_CpCntrTable_Object = MibTable
cpCntrTable = _CpCntrTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5)
)
if mibBuilder.loadTexts:
    cpCntrTable.setStatus("mandatory")
_CpCntrEntry_Object = MibTableRow
cpCntrEntry = _CpCntrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1)
)
cpCntrEntry.setIndexNames(
    (0, "LUXN-MIB", "cpCntrShelf"),
    (0, "LUXN-MIB", "cpCntrSlot"),
    (0, "LUXN-MIB", "cpCntrType"),
)
if mibBuilder.loadTexts:
    cpCntrEntry.setStatus("mandatory")
_CpCntrShelf_Type = CardShelf
_CpCntrShelf_Object = MibTableColumn
cpCntrShelf = _CpCntrShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 1),
    _CpCntrShelf_Type()
)
cpCntrShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpCntrShelf.setStatus("mandatory")
_CpCntrSlot_Type = CardSlot
_CpCntrSlot_Object = MibTableColumn
cpCntrSlot = _CpCntrSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 2),
    _CpCntrSlot_Type()
)
cpCntrSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpCntrSlot.setStatus("mandatory")


class _CpCntrType_Type(Integer32):
    """Custom type cpCntrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("spi", 1)
    )


_CpCntrType_Type.__name__ = "Integer32"
_CpCntrType_Object = MibTableColumn
cpCntrType = _CpCntrType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 3),
    _CpCntrType_Type()
)
cpCntrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpCntrType.setStatus("mandatory")
_CpTotPktSent_Type = Counter32
_CpTotPktSent_Object = MibTableColumn
cpTotPktSent = _CpTotPktSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 4),
    _CpTotPktSent_Type()
)
cpTotPktSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpTotPktSent.setStatus("mandatory")
_CpTotPktRcvd_Type = Counter32
_CpTotPktRcvd_Object = MibTableColumn
cpTotPktRcvd = _CpTotPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 5),
    _CpTotPktRcvd_Type()
)
cpTotPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpTotPktRcvd.setStatus("mandatory")
_CpBadPktRcvd_Type = Counter32
_CpBadPktRcvd_Object = MibTableColumn
cpBadPktRcvd = _CpBadPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 6),
    _CpBadPktRcvd_Type()
)
cpBadPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpBadPktRcvd.setStatus("mandatory")
_CpTotBadTrans_Type = Counter32
_CpTotBadTrans_Object = MibTableColumn
cpTotBadTrans = _CpTotBadTrans_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 7),
    _CpTotBadTrans_Type()
)
cpTotBadTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpTotBadTrans.setStatus("mandatory")
_CpBytesSent_Type = Counter32
_CpBytesSent_Object = MibTableColumn
cpBytesSent = _CpBytesSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 8),
    _CpBytesSent_Type()
)
cpBytesSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpBytesSent.setStatus("mandatory")
_CpBytesRcvd_Type = Counter32
_CpBytesRcvd_Object = MibTableColumn
cpBytesRcvd = _CpBytesRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 9),
    _CpBytesRcvd_Type()
)
cpBytesRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpBytesRcvd.setStatus("mandatory")
_CpMsgsDlvrd_Type = Counter32
_CpMsgsDlvrd_Object = MibTableColumn
cpMsgsDlvrd = _CpMsgsDlvrd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 10),
    _CpMsgsDlvrd_Type()
)
cpMsgsDlvrd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpMsgsDlvrd.setStatus("mandatory")
_CpBufAllocFail_Type = Counter32
_CpBufAllocFail_Object = MibTableColumn
cpBufAllocFail = _CpBufAllocFail_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 11),
    _CpBufAllocFail_Type()
)
cpBufAllocFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpBufAllocFail.setStatus("mandatory")
_CpEcbAllocFail_Type = Counter32
_CpEcbAllocFail_Object = MibTableColumn
cpEcbAllocFail = _CpEcbAllocFail_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 12),
    _CpEcbAllocFail_Type()
)
cpEcbAllocFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpEcbAllocFail.setStatus("mandatory")
_CpClearCntrs_Type = ResetType
_CpClearCntrs_Object = MibTableColumn
cpClearCntrs = _CpClearCntrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 13),
    _CpClearCntrs_Type()
)
cpClearCntrs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    cpClearCntrs.setStatus("mandatory")
_CpPerfTable_Object = MibTable
cpPerfTable = _CpPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 6)
)
if mibBuilder.loadTexts:
    cpPerfTable.setStatus("mandatory")
_CpPerfEntry_Object = MibTableRow
cpPerfEntry = _CpPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 6, 1)
)
cpPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "cpPerfShelf"),
    (0, "LUXN-MIB", "cpPerfSlot"),
)
if mibBuilder.loadTexts:
    cpPerfEntry.setStatus("mandatory")
_CpPerfShelf_Type = CardShelf
_CpPerfShelf_Object = MibTableColumn
cpPerfShelf = _CpPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 6, 1, 1),
    _CpPerfShelf_Type()
)
cpPerfShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpPerfShelf.setStatus("mandatory")
_CpPerfSlot_Type = CardSlot
_CpPerfSlot_Object = MibTableColumn
cpPerfSlot = _CpPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 6, 1, 2),
    _CpPerfSlot_Type()
)
cpPerfSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpPerfSlot.setStatus("mandatory")
_CpPerfMode_Type = RedundancyMode
_CpPerfMode_Object = MibTableColumn
cpPerfMode = _CpPerfMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 6, 1, 3),
    _CpPerfMode_Type()
)
cpPerfMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpPerfMode.setStatus("mandatory")
_CpPerfState_Type = CardState
_CpPerfState_Object = MibTableColumn
cpPerfState = _CpPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 6, 1, 4),
    _CpPerfState_Type()
)
cpPerfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpPerfState.setStatus("mandatory")
_CpPerfStatus_Type = CardStatus
_CpPerfStatus_Object = MibTableColumn
cpPerfStatus = _CpPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 6, 1, 5),
    _CpPerfStatus_Type()
)
cpPerfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpPerfStatus.setStatus("mandatory")
_CpLastBootTime_Type = DateAndTime
_CpLastBootTime_Object = MibTableColumn
cpLastBootTime = _CpLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 6, 1, 6),
    _CpLastBootTime_Type()
)
cpLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpLastBootTime.setStatus("mandatory")
_CpAvailTime_Type = Counter32
_CpAvailTime_Object = MibTableColumn
cpAvailTime = _CpAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 6, 1, 7),
    _CpAvailTime_Type()
)
cpAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpAvailTime.setStatus("mandatory")
_CpErrFreeSecs_Type = Counter32
_CpErrFreeSecs_Object = MibTableColumn
cpErrFreeSecs = _CpErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 6, 1, 8),
    _CpErrFreeSecs_Type()
)
cpErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpErrFreeSecs.setStatus("mandatory")
_CcPerf_ObjectIdentity = ObjectIdentity
ccPerf = _CcPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4)
)
_CcNumEvents_Type = Counter32
_CcNumEvents_Object = MibScalar
ccNumEvents = _CcNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 1),
    _CcNumEvents_Type()
)
ccNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccNumEvents.setStatus("mandatory")
_CcCntrTable_Object = MibTable
ccCntrTable = _CcCntrTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2)
)
if mibBuilder.loadTexts:
    ccCntrTable.setStatus("mandatory")
_CcCntrEntry_Object = MibTableRow
ccCntrEntry = _CcCntrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1)
)
ccCntrEntry.setIndexNames(
    (0, "LUXN-MIB", "ccCntrLocation"),
    (0, "LUXN-MIB", "ccCntrShelf"),
    (0, "LUXN-MIB", "ccCntrSlot"),
    (0, "LUXN-MIB", "ccCntrType"),
)
if mibBuilder.loadTexts:
    ccCntrEntry.setStatus("mandatory")
_CcCntrLocation_Type = CardLocation
_CcCntrLocation_Object = MibTableColumn
ccCntrLocation = _CcCntrLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 1),
    _CcCntrLocation_Type()
)
ccCntrLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccCntrLocation.setStatus("mandatory")
_CcCntrShelf_Type = CardShelf
_CcCntrShelf_Object = MibTableColumn
ccCntrShelf = _CcCntrShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 2),
    _CcCntrShelf_Type()
)
ccCntrShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccCntrShelf.setStatus("mandatory")
_CcCntrSlot_Type = CardSlot
_CcCntrSlot_Object = MibTableColumn
ccCntrSlot = _CcCntrSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 3),
    _CcCntrSlot_Type()
)
ccCntrSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccCntrSlot.setStatus("mandatory")


class _CcCntrType_Type(Integer32):
    """Custom type ccCntrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("iwm", 2),
          ("spi", 1))
    )


_CcCntrType_Type.__name__ = "Integer32"
_CcCntrType_Object = MibTableColumn
ccCntrType = _CcCntrType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 4),
    _CcCntrType_Type()
)
ccCntrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccCntrType.setStatus("mandatory")
_CcCounterFlag_Type = FlagType
_CcCounterFlag_Object = MibTableColumn
ccCounterFlag = _CcCounterFlag_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 5),
    _CcCounterFlag_Type()
)
ccCounterFlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ccCounterFlag.setStatus("mandatory")
_CcTotPktSent_Type = Counter32
_CcTotPktSent_Object = MibTableColumn
ccTotPktSent = _CcTotPktSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 6),
    _CcTotPktSent_Type()
)
ccTotPktSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccTotPktSent.setStatus("mandatory")
_CcTotPktRcvd_Type = Counter32
_CcTotPktRcvd_Object = MibTableColumn
ccTotPktRcvd = _CcTotPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 7),
    _CcTotPktRcvd_Type()
)
ccTotPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccTotPktRcvd.setStatus("mandatory")
_CcBadPktRcvd_Type = Counter32
_CcBadPktRcvd_Object = MibTableColumn
ccBadPktRcvd = _CcBadPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 8),
    _CcBadPktRcvd_Type()
)
ccBadPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccBadPktRcvd.setStatus("mandatory")
_CcTotBadTrans_Type = Counter32
_CcTotBadTrans_Object = MibTableColumn
ccTotBadTrans = _CcTotBadTrans_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 9),
    _CcTotBadTrans_Type()
)
ccTotBadTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccTotBadTrans.setStatus("mandatory")
_CcBytesSent_Type = Counter32
_CcBytesSent_Object = MibTableColumn
ccBytesSent = _CcBytesSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 10),
    _CcBytesSent_Type()
)
ccBytesSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccBytesSent.setStatus("mandatory")
_CcBytesRcvd_Type = Counter32
_CcBytesRcvd_Object = MibTableColumn
ccBytesRcvd = _CcBytesRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 11),
    _CcBytesRcvd_Type()
)
ccBytesRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccBytesRcvd.setStatus("mandatory")
_CcMsgsDlvrd_Type = Counter32
_CcMsgsDlvrd_Object = MibTableColumn
ccMsgsDlvrd = _CcMsgsDlvrd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 12),
    _CcMsgsDlvrd_Type()
)
ccMsgsDlvrd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccMsgsDlvrd.setStatus("mandatory")
_CcBufAllocFail_Type = Counter32
_CcBufAllocFail_Object = MibTableColumn
ccBufAllocFail = _CcBufAllocFail_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 13),
    _CcBufAllocFail_Type()
)
ccBufAllocFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccBufAllocFail.setStatus("mandatory")
_CcEcbAllocFail_Type = Counter32
_CcEcbAllocFail_Object = MibTableColumn
ccEcbAllocFail = _CcEcbAllocFail_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 14),
    _CcEcbAllocFail_Type()
)
ccEcbAllocFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccEcbAllocFail.setStatus("mandatory")
_CcClearCntrs_Type = ResetType
_CcClearCntrs_Object = MibTableColumn
ccClearCntrs = _CcClearCntrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 15),
    _CcClearCntrs_Type()
)
ccClearCntrs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ccClearCntrs.setStatus("mandatory")
_CcPerfTable_Object = MibTable
ccPerfTable = _CcPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3)
)
if mibBuilder.loadTexts:
    ccPerfTable.setStatus("mandatory")
_CcPerfEntry_Object = MibTableRow
ccPerfEntry = _CcPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1)
)
ccPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "ccPerfLocation"),
    (0, "LUXN-MIB", "ccPerfShelf"),
    (0, "LUXN-MIB", "ccPerfSlot"),
)
if mibBuilder.loadTexts:
    ccPerfEntry.setStatus("mandatory")
_CcPerfLocation_Type = CardLocation
_CcPerfLocation_Object = MibTableColumn
ccPerfLocation = _CcPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 1),
    _CcPerfLocation_Type()
)
ccPerfLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccPerfLocation.setStatus("mandatory")
_CcPerfShelf_Type = CardShelf
_CcPerfShelf_Object = MibTableColumn
ccPerfShelf = _CcPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 2),
    _CcPerfShelf_Type()
)
ccPerfShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccPerfShelf.setStatus("mandatory")
_CcPerfSlot_Type = CardSlot
_CcPerfSlot_Object = MibTableColumn
ccPerfSlot = _CcPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 3),
    _CcPerfSlot_Type()
)
ccPerfSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccPerfSlot.setStatus("mandatory")
_CcPerfState_Type = CardState
_CcPerfState_Object = MibTableColumn
ccPerfState = _CcPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 4),
    _CcPerfState_Type()
)
ccPerfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccPerfState.setStatus("mandatory")
_CcPerfStatus_Type = CardStatus
_CcPerfStatus_Object = MibTableColumn
ccPerfStatus = _CcPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 5),
    _CcPerfStatus_Type()
)
ccPerfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccPerfStatus.setStatus("mandatory")
_CcLastBootTime_Type = DateAndTime
_CcLastBootTime_Object = MibTableColumn
ccLastBootTime = _CcLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 6),
    _CcLastBootTime_Type()
)
ccLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccLastBootTime.setStatus("mandatory")
_CcAvailTime_Type = Counter32
_CcAvailTime_Object = MibTableColumn
ccAvailTime = _CcAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 7),
    _CcAvailTime_Type()
)
ccAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccAvailTime.setStatus("mandatory")
_CcErrFreeSecs_Type = Counter32
_CcErrFreeSecs_Object = MibTableColumn
ccErrFreeSecs = _CcErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 8),
    _CcErrFreeSecs_Type()
)
ccErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccErrFreeSecs.setStatus("mandatory")
_CcBiasCurrent_Type = Integer32
_CcBiasCurrent_Object = MibTableColumn
ccBiasCurrent = _CcBiasCurrent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 9),
    _CcBiasCurrent_Type()
)
ccBiasCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccBiasCurrent.setStatus("mandatory")
_CcModulation_Type = Integer32
_CcModulation_Object = MibTableColumn
ccModulation = _CcModulation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 10),
    _CcModulation_Type()
)
ccModulation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccModulation.setStatus("mandatory")
_CcApc_Type = Integer32
_CcApc_Object = MibTableColumn
ccApc = _CcApc_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 11),
    _CcApc_Type()
)
ccApc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccApc.setStatus("mandatory")
_CcIwmModulation_Type = Integer32
_CcIwmModulation_Object = MibTableColumn
ccIwmModulation = _CcIwmModulation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 12),
    _CcIwmModulation_Type()
)
ccIwmModulation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccIwmModulation.setStatus("mandatory")
_CcLaserOnOff_Type = FlagType
_CcLaserOnOff_Object = MibTableColumn
ccLaserOnOff = _CcLaserOnOff_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 13),
    _CcLaserOnOff_Type()
)
ccLaserOnOff.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccLaserOnOff.setStatus("mandatory")
_CcTemperature_Type = Gauge32
_CcTemperature_Object = MibTableColumn
ccTemperature = _CcTemperature_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 14),
    _CcTemperature_Type()
)
ccTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccTemperature.setStatus("mandatory")
_CcIntensity_Type = Gauge32
_CcIntensity_Object = MibTableColumn
ccIntensity = _CcIntensity_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 15),
    _CcIntensity_Type()
)
ccIntensity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccIntensity.setStatus("mandatory")
_CcSignalStrength_Type = Gauge32
_CcSignalStrength_Object = MibTableColumn
ccSignalStrength = _CcSignalStrength_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 16),
    _CcSignalStrength_Type()
)
ccSignalStrength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccSignalStrength.setStatus("mandatory")
_CcLossOfLight_Type = Boolean
_CcLossOfLight_Object = MibTableColumn
ccLossOfLight = _CcLossOfLight_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 17),
    _CcLossOfLight_Type()
)
ccLossOfLight.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccLossOfLight.setStatus("mandatory")
_CcSignalDetect_Type = Boolean
_CcSignalDetect_Object = MibTableColumn
ccSignalDetect = _CcSignalDetect_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 18),
    _CcSignalDetect_Type()
)
ccSignalDetect.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccSignalDetect.setStatus("mandatory")


class _CcRefClock_Type(Integer32):
    """Custom type ccRefClock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("en1660", 1),
          ("en1944", 2),
          ("en1953", 3))
    )


_CcRefClock_Type.__name__ = "Integer32"
_CcRefClock_Object = MibTableColumn
ccRefClock = _CcRefClock_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 19),
    _CcRefClock_Type()
)
ccRefClock.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccRefClock.setStatus("mandatory")


class _CcClockDiv_Type(Integer32):
    """Custom type ccClockDiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dout-1250", 1),
          ("dout-155", 3),
          ("dout-622", 2))
    )


_CcClockDiv_Type.__name__ = "Integer32"
_CcClockDiv_Object = MibTableColumn
ccClockDiv = _CcClockDiv_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 20),
    _CcClockDiv_Type()
)
ccClockDiv.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccClockDiv.setStatus("mandatory")


class _CcLinkTxPwrStatus_Type(Integer32):
    """Custom type ccLinkTxPwrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fault", 2),
          ("ok", 1))
    )


_CcLinkTxPwrStatus_Type.__name__ = "Integer32"
_CcLinkTxPwrStatus_Object = MibTableColumn
ccLinkTxPwrStatus = _CcLinkTxPwrStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 21),
    _CcLinkTxPwrStatus_Type()
)
ccLinkTxPwrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccLinkTxPwrStatus.setStatus("mandatory")


class _CcLinkRxSigStrStatus_Type(Integer32):
    """Custom type ccLinkRxSigStrStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("fault", 2),
          ("ok", 1))
    )


_CcLinkRxSigStrStatus_Type.__name__ = "Integer32"
_CcLinkRxSigStrStatus_Object = MibTableColumn
ccLinkRxSigStrStatus = _CcLinkRxSigStrStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 22),
    _CcLinkRxSigStrStatus_Type()
)
ccLinkRxSigStrStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccLinkRxSigStrStatus.setStatus("mandatory")


class _CcCpeRxSigDetect_Type(Integer32):
    """Custom type ccCpeRxSigDetect based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("no", 2),
          ("yes", 1))
    )


_CcCpeRxSigDetect_Type.__name__ = "Integer32"
_CcCpeRxSigDetect_Object = MibTableColumn
ccCpeRxSigDetect = _CcCpeRxSigDetect_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 23),
    _CcCpeRxSigDetect_Type()
)
ccCpeRxSigDetect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccCpeRxSigDetect.setStatus("mandatory")


class _CcLinkIWMStatus_Type(Integer32):
    """Custom type ccLinkIWMStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("error", 2),
          ("notApplicable", 3),
          ("ok", 1))
    )


_CcLinkIWMStatus_Type.__name__ = "Integer32"
_CcLinkIWMStatus_Object = MibTableColumn
ccLinkIWMStatus = _CcLinkIWMStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 24),
    _CcLinkIWMStatus_Type()
)
ccLinkIWMStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccLinkIWMStatus.setStatus("mandatory")


class _CcLinkSummaryStatus_Type(Integer32):
    """Custom type ccLinkSummaryStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("fault", 2),
          ("notApplicable", 3),
          ("ok", 1))
    )


_CcLinkSummaryStatus_Type.__name__ = "Integer32"
_CcLinkSummaryStatus_Object = MibTableColumn
ccLinkSummaryStatus = _CcLinkSummaryStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 25),
    _CcLinkSummaryStatus_Type()
)
ccLinkSummaryStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccLinkSummaryStatus.setStatus("mandatory")


class _CcProtectionMode_Type(Integer32):
    """Custom type ccProtectionMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("na", 3),
          ("protection", 2),
          ("working", 1))
    )


_CcProtectionMode_Type.__name__ = "Integer32"
_CcProtectionMode_Object = MibTableColumn
ccProtectionMode = _CcProtectionMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 26),
    _CcProtectionMode_Type()
)
ccProtectionMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccProtectionMode.setStatus("mandatory")
_CcLinkRxSigStr_Type = DisplayString
_CcLinkRxSigStr_Object = MibTableColumn
ccLinkRxSigStr = _CcLinkRxSigStr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 27),
    _CcLinkRxSigStr_Type()
)
ccLinkRxSigStr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccLinkRxSigStr.setStatus("mandatory")
_MuxPerf_ObjectIdentity = ObjectIdentity
muxPerf = _MuxPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 5)
)
_MuxNumEvents_Type = Counter32
_MuxNumEvents_Object = MibScalar
muxNumEvents = _MuxNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 1),
    _MuxNumEvents_Type()
)
muxNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxNumEvents.setStatus("mandatory")
_MuxPerfTable_Object = MibTable
muxPerfTable = _MuxPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 2)
)
if mibBuilder.loadTexts:
    muxPerfTable.setStatus("mandatory")
_MuxPerfEntry_Object = MibTableRow
muxPerfEntry = _MuxPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 2, 1)
)
muxPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "muxPerfLocation"),
    (0, "LUXN-MIB", "muxPerfShelf"),
    (0, "LUXN-MIB", "muxPerfSlot"),
)
if mibBuilder.loadTexts:
    muxPerfEntry.setStatus("mandatory")
_MuxPerfLocation_Type = CardLocation
_MuxPerfLocation_Object = MibTableColumn
muxPerfLocation = _MuxPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 2, 1, 1),
    _MuxPerfLocation_Type()
)
muxPerfLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxPerfLocation.setStatus("mandatory")
_MuxPerfShelf_Type = CardShelf
_MuxPerfShelf_Object = MibTableColumn
muxPerfShelf = _MuxPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 2, 1, 2),
    _MuxPerfShelf_Type()
)
muxPerfShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxPerfShelf.setStatus("mandatory")
_MuxPerfSlot_Type = CardSlot
_MuxPerfSlot_Object = MibTableColumn
muxPerfSlot = _MuxPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 2, 1, 3),
    _MuxPerfSlot_Type()
)
muxPerfSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxPerfSlot.setStatus("mandatory")
_MuxType_Type = CardType
_MuxType_Object = MibTableColumn
muxType = _MuxType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 2, 1, 4),
    _MuxType_Type()
)
muxType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxType.setStatus("mandatory")
_MuxPerfState_Type = CardState
_MuxPerfState_Object = MibTableColumn
muxPerfState = _MuxPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 2, 1, 5),
    _MuxPerfState_Type()
)
muxPerfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxPerfState.setStatus("mandatory")
_MuxPerfStatus_Type = CardStatus
_MuxPerfStatus_Object = MibTableColumn
muxPerfStatus = _MuxPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 2, 1, 6),
    _MuxPerfStatus_Type()
)
muxPerfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxPerfStatus.setStatus("mandatory")
_MuxLastBootTime_Type = DateAndTime
_MuxLastBootTime_Object = MibTableColumn
muxLastBootTime = _MuxLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 2, 1, 7),
    _MuxLastBootTime_Type()
)
muxLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxLastBootTime.setStatus("mandatory")
_MuxAvailTime_Type = Counter32
_MuxAvailTime_Object = MibTableColumn
muxAvailTime = _MuxAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 2, 1, 8),
    _MuxAvailTime_Type()
)
muxAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxAvailTime.setStatus("mandatory")
_MuxErrFreeSecs_Type = Counter32
_MuxErrFreeSecs_Object = MibTableColumn
muxErrFreeSecs = _MuxErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 2, 1, 9),
    _MuxErrFreeSecs_Type()
)
muxErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxErrFreeSecs.setStatus("mandatory")
_PsPerf_ObjectIdentity = ObjectIdentity
psPerf = _PsPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 6)
)
_PsNumEvents_Type = Counter32
_PsNumEvents_Object = MibScalar
psNumEvents = _PsNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 1),
    _PsNumEvents_Type()
)
psNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psNumEvents.setStatus("mandatory")


class _PsVoltageLevel3pt4Volt_Type(DisplayString):
    """Custom type psVoltageLevel3pt4Volt based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_PsVoltageLevel3pt4Volt_Type.__name__ = "DisplayString"
_PsVoltageLevel3pt4Volt_Object = MibScalar
psVoltageLevel3pt4Volt = _PsVoltageLevel3pt4Volt_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 2),
    _PsVoltageLevel3pt4Volt_Type()
)
psVoltageLevel3pt4Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psVoltageLevel3pt4Volt.setStatus("mandatory")


class _PsVoltageLevel5pt1Volt_Type(DisplayString):
    """Custom type psVoltageLevel5pt1Volt based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_PsVoltageLevel5pt1Volt_Type.__name__ = "DisplayString"
_PsVoltageLevel5pt1Volt_Object = MibScalar
psVoltageLevel5pt1Volt = _PsVoltageLevel5pt1Volt_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 3),
    _PsVoltageLevel5pt1Volt_Type()
)
psVoltageLevel5pt1Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psVoltageLevel5pt1Volt.setStatus("mandatory")


class _PsVoltageLevel12Volt_Type(DisplayString):
    """Custom type psVoltageLevel12Volt based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_PsVoltageLevel12Volt_Type.__name__ = "DisplayString"
_PsVoltageLevel12Volt_Object = MibScalar
psVoltageLevel12Volt = _PsVoltageLevel12Volt_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 4),
    _PsVoltageLevel12Volt_Type()
)
psVoltageLevel12Volt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psVoltageLevel12Volt.setStatus("mandatory")
_PsPerfTable_Object = MibTable
psPerfTable = _PsPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 5)
)
if mibBuilder.loadTexts:
    psPerfTable.setStatus("mandatory")
_PsPerfEntry_Object = MibTableRow
psPerfEntry = _PsPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 5, 1)
)
psPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "psPerfID"),
)
if mibBuilder.loadTexts:
    psPerfEntry.setStatus("mandatory")
_PsPerfID_Type = Integer32
_PsPerfID_Object = MibTableColumn
psPerfID = _PsPerfID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 5, 1, 1),
    _PsPerfID_Type()
)
psPerfID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psPerfID.setStatus("mandatory")


class _PsPerfType_Type(Integer32):
    """Custom type psPerfType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("psAC", 2),
          ("psDC", 1),
          ("unknown", 3))
    )


_PsPerfType_Type.__name__ = "Integer32"
_PsPerfType_Object = MibTableColumn
psPerfType = _PsPerfType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 5, 1, 2),
    _PsPerfType_Type()
)
psPerfType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psPerfType.setStatus("mandatory")


class _PsPerfState_Type(Integer32):
    """Custom type psPerfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("psDegrade", 4),
          ("psEmpty", 1),
          ("psFailed", 3),
          ("psOK", 2))
    )


_PsPerfState_Type.__name__ = "Integer32"
_PsPerfState_Object = MibTableColumn
psPerfState = _PsPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 5, 1, 3),
    _PsPerfState_Type()
)
psPerfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psPerfState.setStatus("mandatory")
_PsPerfStatus_Type = CardStatus
_PsPerfStatus_Object = MibTableColumn
psPerfStatus = _PsPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 5, 1, 4),
    _PsPerfStatus_Type()
)
psPerfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psPerfStatus.setStatus("mandatory")


class _PsVoltageLevelFeedA_Type(DisplayString):
    """Custom type psVoltageLevelFeedA based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_PsVoltageLevelFeedA_Type.__name__ = "DisplayString"
_PsVoltageLevelFeedA_Object = MibScalar
psVoltageLevelFeedA = _PsVoltageLevelFeedA_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 6),
    _PsVoltageLevelFeedA_Type()
)
psVoltageLevelFeedA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psVoltageLevelFeedA.setStatus("mandatory")


class _PsVoltageLevelFeedB_Type(DisplayString):
    """Custom type psVoltageLevelFeedB based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_PsVoltageLevelFeedB_Type.__name__ = "DisplayString"
_PsVoltageLevelFeedB_Object = MibScalar
psVoltageLevelFeedB = _PsVoltageLevelFeedB_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 7),
    _PsVoltageLevelFeedB_Type()
)
psVoltageLevelFeedB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psVoltageLevelFeedB.setStatus("mandatory")


class _PsBreakerConditionFeedA_Type(Integer32):
    """Custom type psBreakerConditionFeedA based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("na", 3),
          ("open", 1))
    )


_PsBreakerConditionFeedA_Type.__name__ = "Integer32"
_PsBreakerConditionFeedA_Object = MibScalar
psBreakerConditionFeedA = _PsBreakerConditionFeedA_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 8),
    _PsBreakerConditionFeedA_Type()
)
psBreakerConditionFeedA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psBreakerConditionFeedA.setStatus("mandatory")


class _PsPerfStatusFeedA_Type(Integer32):
    """Custom type psPerfStatusFeedA based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("feedFAILED", 2),
          ("feedOK", 1),
          ("feedUNKNOWN", 3),
          ("na", 4))
    )


_PsPerfStatusFeedA_Type.__name__ = "Integer32"
_PsPerfStatusFeedA_Object = MibScalar
psPerfStatusFeedA = _PsPerfStatusFeedA_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 9),
    _PsPerfStatusFeedA_Type()
)
psPerfStatusFeedA.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psPerfStatusFeedA.setStatus("mandatory")


class _PsBreakerConditionFeedB_Type(Integer32):
    """Custom type psBreakerConditionFeedB based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("closed", 2),
          ("na", 3),
          ("open", 1))
    )


_PsBreakerConditionFeedB_Type.__name__ = "Integer32"
_PsBreakerConditionFeedB_Object = MibScalar
psBreakerConditionFeedB = _PsBreakerConditionFeedB_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 10),
    _PsBreakerConditionFeedB_Type()
)
psBreakerConditionFeedB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psBreakerConditionFeedB.setStatus("mandatory")


class _PsPerfStatusFeedB_Type(Integer32):
    """Custom type psPerfStatusFeedB based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("feedFAILED", 2),
          ("feedOK", 1),
          ("feedUNKNOWN", 3),
          ("na", 4))
    )


_PsPerfStatusFeedB_Type.__name__ = "Integer32"
_PsPerfStatusFeedB_Object = MibScalar
psPerfStatusFeedB = _PsPerfStatusFeedB_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 11),
    _PsPerfStatusFeedB_Type()
)
psPerfStatusFeedB.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    psPerfStatusFeedB.setStatus("mandatory")
_FadmPerf_ObjectIdentity = ObjectIdentity
fadmPerf = _FadmPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 7)
)
_FadmNumEvents_Type = Counter32
_FadmNumEvents_Object = MibScalar
fadmNumEvents = _FadmNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 7, 1),
    _FadmNumEvents_Type()
)
fadmNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmNumEvents.setStatus("mandatory")
_FadmPerfTable_Object = MibTable
fadmPerfTable = _FadmPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 7, 2)
)
if mibBuilder.loadTexts:
    fadmPerfTable.setStatus("mandatory")
_FadmPerfEntry_Object = MibTableRow
fadmPerfEntry = _FadmPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 7, 2, 1)
)
fadmPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "fadmPerfLocation"),
    (0, "LUXN-MIB", "fadmPerfShelf"),
    (0, "LUXN-MIB", "fadmPerfSlot"),
)
if mibBuilder.loadTexts:
    fadmPerfEntry.setStatus("mandatory")
_FadmPerfLocation_Type = CardLocation
_FadmPerfLocation_Object = MibTableColumn
fadmPerfLocation = _FadmPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 7, 2, 1, 1),
    _FadmPerfLocation_Type()
)
fadmPerfLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmPerfLocation.setStatus("mandatory")
_FadmPerfShelf_Type = CardShelf
_FadmPerfShelf_Object = MibTableColumn
fadmPerfShelf = _FadmPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 7, 2, 1, 2),
    _FadmPerfShelf_Type()
)
fadmPerfShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmPerfShelf.setStatus("mandatory")
_FadmPerfSlot_Type = CardSlot
_FadmPerfSlot_Object = MibTableColumn
fadmPerfSlot = _FadmPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 7, 2, 1, 3),
    _FadmPerfSlot_Type()
)
fadmPerfSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmPerfSlot.setStatus("mandatory")
_FadmPerfState_Type = CardState
_FadmPerfState_Object = MibTableColumn
fadmPerfState = _FadmPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 7, 2, 1, 4),
    _FadmPerfState_Type()
)
fadmPerfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmPerfState.setStatus("mandatory")
_FadmPerfStatus_Type = CardStatus
_FadmPerfStatus_Object = MibTableColumn
fadmPerfStatus = _FadmPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 7, 2, 1, 5),
    _FadmPerfStatus_Type()
)
fadmPerfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmPerfStatus.setStatus("mandatory")
_FadmLastBootTime_Type = DateAndTime
_FadmLastBootTime_Object = MibTableColumn
fadmLastBootTime = _FadmLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 7, 2, 1, 6),
    _FadmLastBootTime_Type()
)
fadmLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmLastBootTime.setStatus("mandatory")
_FadmAvailTime_Type = Counter32
_FadmAvailTime_Object = MibTableColumn
fadmAvailTime = _FadmAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 7, 2, 1, 7),
    _FadmAvailTime_Type()
)
fadmAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmAvailTime.setStatus("mandatory")
_FadmErrFreeSecs_Type = Counter32
_FadmErrFreeSecs_Object = MibTableColumn
fadmErrFreeSecs = _FadmErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 7, 2, 1, 8),
    _FadmErrFreeSecs_Type()
)
fadmErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmErrFreeSecs.setStatus("mandatory")
_OppmPerf_ObjectIdentity = ObjectIdentity
oppmPerf = _OppmPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 8)
)
_OppmNumEvents_Type = Counter32
_OppmNumEvents_Object = MibScalar
oppmNumEvents = _OppmNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 1),
    _OppmNumEvents_Type()
)
oppmNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmNumEvents.setStatus("mandatory")
_OppmPerfTable_Object = MibTable
oppmPerfTable = _OppmPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2)
)
if mibBuilder.loadTexts:
    oppmPerfTable.setStatus("mandatory")
_OppmPerfEntry_Object = MibTableRow
oppmPerfEntry = _OppmPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1)
)
oppmPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "oppmPerfLocation"),
    (0, "LUXN-MIB", "oppmPerfShelf"),
    (0, "LUXN-MIB", "oppmPerfSlot"),
)
if mibBuilder.loadTexts:
    oppmPerfEntry.setStatus("mandatory")
_OppmPerfLocation_Type = CardLocation
_OppmPerfLocation_Object = MibTableColumn
oppmPerfLocation = _OppmPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 1),
    _OppmPerfLocation_Type()
)
oppmPerfLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmPerfLocation.setStatus("mandatory")
_OppmPerfShelf_Type = CardShelf
_OppmPerfShelf_Object = MibTableColumn
oppmPerfShelf = _OppmPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 2),
    _OppmPerfShelf_Type()
)
oppmPerfShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmPerfShelf.setStatus("mandatory")
_OppmPerfSlot_Type = CardSlot
_OppmPerfSlot_Object = MibTableColumn
oppmPerfSlot = _OppmPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 3),
    _OppmPerfSlot_Type()
)
oppmPerfSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmPerfSlot.setStatus("mandatory")
_OppmPerfState_Type = CardState
_OppmPerfState_Object = MibTableColumn
oppmPerfState = _OppmPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 4),
    _OppmPerfState_Type()
)
oppmPerfState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmPerfState.setStatus("mandatory")
_OppmPerfStatus_Type = CardStatus
_OppmPerfStatus_Object = MibTableColumn
oppmPerfStatus = _OppmPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 5),
    _OppmPerfStatus_Type()
)
oppmPerfStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmPerfStatus.setStatus("mandatory")


class _OppmLinkAState_Type(Integer32):
    """Custom type oppmLinkAState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("linked", 1),
          ("notLinked", 2),
          ("unknown", 3))
    )


_OppmLinkAState_Type.__name__ = "Integer32"
_OppmLinkAState_Object = MibTableColumn
oppmLinkAState = _OppmLinkAState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 6),
    _OppmLinkAState_Type()
)
oppmLinkAState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmLinkAState.setStatus("mandatory")


class _OppmLinkAStatus_Type(Integer32):
    """Custom type oppmLinkAStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("hibernation", 3),
          ("standby", 2))
    )


_OppmLinkAStatus_Type.__name__ = "Integer32"
_OppmLinkAStatus_Object = MibTableColumn
oppmLinkAStatus = _OppmLinkAStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 7),
    _OppmLinkAStatus_Type()
)
oppmLinkAStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmLinkAStatus.setStatus("mandatory")


class _OppmLinkBState_Type(Integer32):
    """Custom type oppmLinkBState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("linked", 1),
          ("notLinked", 2),
          ("unknown", 3))
    )


_OppmLinkBState_Type.__name__ = "Integer32"
_OppmLinkBState_Object = MibTableColumn
oppmLinkBState = _OppmLinkBState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 8),
    _OppmLinkBState_Type()
)
oppmLinkBState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmLinkBState.setStatus("mandatory")


class _OppmLinkBStatus_Type(Integer32):
    """Custom type oppmLinkBStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("hibernation", 3),
          ("standby", 2))
    )


_OppmLinkBStatus_Type.__name__ = "Integer32"
_OppmLinkBStatus_Object = MibTableColumn
oppmLinkBStatus = _OppmLinkBStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 9),
    _OppmLinkBStatus_Type()
)
oppmLinkBStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmLinkBStatus.setStatus("mandatory")
_OppmLastBootTime_Type = DateAndTime
_OppmLastBootTime_Object = MibTableColumn
oppmLastBootTime = _OppmLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 10),
    _OppmLastBootTime_Type()
)
oppmLastBootTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmLastBootTime.setStatus("mandatory")
_OppmAvailTime_Type = Counter32
_OppmAvailTime_Object = MibTableColumn
oppmAvailTime = _OppmAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 11),
    _OppmAvailTime_Type()
)
oppmAvailTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmAvailTime.setStatus("mandatory")
_OppmErrFreeSecs_Type = Counter32
_OppmErrFreeSecs_Object = MibTableColumn
oppmErrFreeSecs = _OppmErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 12),
    _OppmErrFreeSecs_Type()
)
oppmErrFreeSecs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmErrFreeSecs.setStatus("mandatory")
_OppmWorkingPower_Type = Integer32
_OppmWorkingPower_Object = MibTableColumn
oppmWorkingPower = _OppmWorkingPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 13),
    _OppmWorkingPower_Type()
)
oppmWorkingPower.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmWorkingPower.setStatus("mandatory")
_OppmProtectPower_Type = Integer32
_OppmProtectPower_Object = MibTableColumn
oppmProtectPower = _OppmProtectPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 14),
    _OppmProtectPower_Type()
)
oppmProtectPower.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmProtectPower.setStatus("mandatory")
_McmPerf_ObjectIdentity = ObjectIdentity
mcmPerf = _McmPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9)
)
_McmNumEvents_Type = Counter32
_McmNumEvents_Object = MibScalar
mcmNumEvents = _McmNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 1),
    _McmNumEvents_Type()
)
mcmNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmNumEvents.setStatus("mandatory")
_McmCntrTable_Object = MibTable
mcmCntrTable = _McmCntrTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2)
)
if mibBuilder.loadTexts:
    mcmCntrTable.setStatus("mandatory")
_McmCntrEntry_Object = MibTableRow
mcmCntrEntry = _McmCntrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1)
)
mcmCntrEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmCntrLocation"),
    (0, "LUXN-MIB", "mcmCntrShelf"),
    (0, "LUXN-MIB", "mcmCntrSlot"),
    (0, "LUXN-MIB", "mcmCntrType"),
)
if mibBuilder.loadTexts:
    mcmCntrEntry.setStatus("mandatory")
_McmCntrLocation_Type = CardLocation
_McmCntrLocation_Object = MibTableColumn
mcmCntrLocation = _McmCntrLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 1),
    _McmCntrLocation_Type()
)
mcmCntrLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmCntrLocation.setStatus("mandatory")
_McmCntrShelf_Type = CardShelf
_McmCntrShelf_Object = MibTableColumn
mcmCntrShelf = _McmCntrShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 2),
    _McmCntrShelf_Type()
)
mcmCntrShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmCntrShelf.setStatus("mandatory")
_McmCntrSlot_Type = CardSlot
_McmCntrSlot_Object = MibTableColumn
mcmCntrSlot = _McmCntrSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 3),
    _McmCntrSlot_Type()
)
mcmCntrSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmCntrSlot.setStatus("mandatory")


class _McmCntrType_Type(Integer32):
    """Custom type mcmCntrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("iwm", 2),
          ("spi", 1))
    )


_McmCntrType_Type.__name__ = "Integer32"
_McmCntrType_Object = MibTableColumn
mcmCntrType = _McmCntrType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 4),
    _McmCntrType_Type()
)
mcmCntrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmCntrType.setStatus("mandatory")
_McmCounterFlag_Type = FlagType
_McmCounterFlag_Object = MibTableColumn
mcmCounterFlag = _McmCounterFlag_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 5),
    _McmCounterFlag_Type()
)
mcmCounterFlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmCounterFlag.setStatus("mandatory")
_McmTotPktSent_Type = Counter32
_McmTotPktSent_Object = MibTableColumn
mcmTotPktSent = _McmTotPktSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 6),
    _McmTotPktSent_Type()
)
mcmTotPktSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmTotPktSent.setStatus("mandatory")
_McmTotPktRcvd_Type = Counter32
_McmTotPktRcvd_Object = MibTableColumn
mcmTotPktRcvd = _McmTotPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 7),
    _McmTotPktRcvd_Type()
)
mcmTotPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmTotPktRcvd.setStatus("mandatory")
_McmBadPktRcvd_Type = Counter32
_McmBadPktRcvd_Object = MibTableColumn
mcmBadPktRcvd = _McmBadPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 8),
    _McmBadPktRcvd_Type()
)
mcmBadPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmBadPktRcvd.setStatus("mandatory")
_McmTotBadTrans_Type = Counter32
_McmTotBadTrans_Object = MibTableColumn
mcmTotBadTrans = _McmTotBadTrans_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 9),
    _McmTotBadTrans_Type()
)
mcmTotBadTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmTotBadTrans.setStatus("mandatory")
_McmBytesSent_Type = Counter32
_McmBytesSent_Object = MibTableColumn
mcmBytesSent = _McmBytesSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 10),
    _McmBytesSent_Type()
)
mcmBytesSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmBytesSent.setStatus("mandatory")
_McmBytesRcvd_Type = Counter32
_McmBytesRcvd_Object = MibTableColumn
mcmBytesRcvd = _McmBytesRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 11),
    _McmBytesRcvd_Type()
)
mcmBytesRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmBytesRcvd.setStatus("mandatory")
_McmMsgsDlvrd_Type = Counter32
_McmMsgsDlvrd_Object = MibTableColumn
mcmMsgsDlvrd = _McmMsgsDlvrd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 12),
    _McmMsgsDlvrd_Type()
)
mcmMsgsDlvrd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmMsgsDlvrd.setStatus("mandatory")
_McmBufAllocFail_Type = Counter32
_McmBufAllocFail_Object = MibTableColumn
mcmBufAllocFail = _McmBufAllocFail_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 13),
    _McmBufAllocFail_Type()
)
mcmBufAllocFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmBufAllocFail.setStatus("mandatory")
_McmEcbAllocFail_Type = Counter32
_McmEcbAllocFail_Object = MibTableColumn
mcmEcbAllocFail = _McmEcbAllocFail_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 14),
    _McmEcbAllocFail_Type()
)
mcmEcbAllocFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmEcbAllocFail.setStatus("mandatory")
_McmClearCntrs_Type = ResetType
_McmClearCntrs_Object = MibTableColumn
mcmClearCntrs = _McmClearCntrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 15),
    _McmClearCntrs_Type()
)
mcmClearCntrs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmClearCntrs.setStatus("mandatory")
_McmPerfTable_Object = MibTable
mcmPerfTable = _McmPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3)
)
if mibBuilder.loadTexts:
    mcmPerfTable.setStatus("mandatory")
_McmPerfEntry_Object = MibTableRow
mcmPerfEntry = _McmPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1)
)
mcmPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmPerfLocation"),
    (0, "LUXN-MIB", "mcmPerfShelf"),
    (0, "LUXN-MIB", "mcmPerfSlot"),
)
if mibBuilder.loadTexts:
    mcmPerfEntry.setStatus("mandatory")
_McmPerfLocation_Type = CardLocation
_McmPerfLocation_Object = MibTableColumn
mcmPerfLocation = _McmPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 1),
    _McmPerfLocation_Type()
)
mcmPerfLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPerfLocation.setStatus("mandatory")
_McmPerfShelf_Type = CardShelf
_McmPerfShelf_Object = MibTableColumn
mcmPerfShelf = _McmPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 2),
    _McmPerfShelf_Type()
)
mcmPerfShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPerfShelf.setStatus("mandatory")
_McmPerfSlot_Type = CardSlot
_McmPerfSlot_Object = MibTableColumn
mcmPerfSlot = _McmPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 3),
    _McmPerfSlot_Type()
)
mcmPerfSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPerfSlot.setStatus("mandatory")
_McmPerfState_Type = CardState
_McmPerfState_Object = MibTableColumn
mcmPerfState = _McmPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 4),
    _McmPerfState_Type()
)
mcmPerfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPerfState.setStatus("mandatory")
_McmPerfStatus_Type = CardStatus
_McmPerfStatus_Object = MibTableColumn
mcmPerfStatus = _McmPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 5),
    _McmPerfStatus_Type()
)
mcmPerfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPerfStatus.setStatus("mandatory")
_McmLastBootTime_Type = DateAndTime
_McmLastBootTime_Object = MibTableColumn
mcmLastBootTime = _McmLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 6),
    _McmLastBootTime_Type()
)
mcmLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmLastBootTime.setStatus("mandatory")
_McmAvailTime_Type = Counter32
_McmAvailTime_Object = MibTableColumn
mcmAvailTime = _McmAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 7),
    _McmAvailTime_Type()
)
mcmAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmAvailTime.setStatus("mandatory")
_McmErrFreeSecs_Type = Counter32
_McmErrFreeSecs_Object = MibTableColumn
mcmErrFreeSecs = _McmErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 8),
    _McmErrFreeSecs_Type()
)
mcmErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmErrFreeSecs.setStatus("mandatory")
_McmBiasCurrent_Type = Integer32
_McmBiasCurrent_Object = MibTableColumn
mcmBiasCurrent = _McmBiasCurrent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 9),
    _McmBiasCurrent_Type()
)
mcmBiasCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmBiasCurrent.setStatus("mandatory")
_McmModulation_Type = Integer32
_McmModulation_Object = MibTableColumn
mcmModulation = _McmModulation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 10),
    _McmModulation_Type()
)
mcmModulation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmModulation.setStatus("mandatory")
_McmApc_Type = Integer32
_McmApc_Object = MibTableColumn
mcmApc = _McmApc_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 11),
    _McmApc_Type()
)
mcmApc.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmApc.setStatus("mandatory")
_McmIwmModulation_Type = Integer32
_McmIwmModulation_Object = MibTableColumn
mcmIwmModulation = _McmIwmModulation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 12),
    _McmIwmModulation_Type()
)
mcmIwmModulation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmIwmModulation.setStatus("mandatory")
_McmLaserOnOff_Type = FlagType
_McmLaserOnOff_Object = MibTableColumn
mcmLaserOnOff = _McmLaserOnOff_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 13),
    _McmLaserOnOff_Type()
)
mcmLaserOnOff.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmLaserOnOff.setStatus("mandatory")
_McmTemperature_Type = Gauge32
_McmTemperature_Object = MibTableColumn
mcmTemperature = _McmTemperature_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 14),
    _McmTemperature_Type()
)
mcmTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmTemperature.setStatus("mandatory")
_McmIntensity_Type = Gauge32
_McmIntensity_Object = MibTableColumn
mcmIntensity = _McmIntensity_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 15),
    _McmIntensity_Type()
)
mcmIntensity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmIntensity.setStatus("mandatory")
_McmSignalStrength_Type = Gauge32
_McmSignalStrength_Object = MibTableColumn
mcmSignalStrength = _McmSignalStrength_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 16),
    _McmSignalStrength_Type()
)
mcmSignalStrength.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmSignalStrength.setStatus("mandatory")
_McmLossOfLight_Type = Boolean
_McmLossOfLight_Object = MibTableColumn
mcmLossOfLight = _McmLossOfLight_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 17),
    _McmLossOfLight_Type()
)
mcmLossOfLight.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmLossOfLight.setStatus("mandatory")
_McmSignalDetect_Type = Boolean
_McmSignalDetect_Object = MibTableColumn
mcmSignalDetect = _McmSignalDetect_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 18),
    _McmSignalDetect_Type()
)
mcmSignalDetect.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmSignalDetect.setStatus("mandatory")
_McmPortCurrTable_Object = MibTable
mcmPortCurrTable = _McmPortCurrTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4)
)
if mibBuilder.loadTexts:
    mcmPortCurrTable.setStatus("mandatory")
_McmPortCurrEntry_Object = MibTableRow
mcmPortCurrEntry = _McmPortCurrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1)
)
mcmPortCurrEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmPortCurrCardLocation"),
    (0, "LUXN-MIB", "mcmPortCurrCardShelf"),
    (0, "LUXN-MIB", "mcmPortCurrCardSlot"),
    (0, "LUXN-MIB", "mcmPortCurrIndex"),
)
if mibBuilder.loadTexts:
    mcmPortCurrEntry.setStatus("mandatory")
_McmPortCurrCardLocation_Type = CardLocation
_McmPortCurrCardLocation_Object = MibTableColumn
mcmPortCurrCardLocation = _McmPortCurrCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 1),
    _McmPortCurrCardLocation_Type()
)
mcmPortCurrCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortCurrCardLocation.setStatus("mandatory")
_McmPortCurrCardShelf_Type = CardShelf
_McmPortCurrCardShelf_Object = MibTableColumn
mcmPortCurrCardShelf = _McmPortCurrCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 2),
    _McmPortCurrCardShelf_Type()
)
mcmPortCurrCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortCurrCardShelf.setStatus("mandatory")
_McmPortCurrCardSlot_Type = CardSlot
_McmPortCurrCardSlot_Object = MibTableColumn
mcmPortCurrCardSlot = _McmPortCurrCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 3),
    _McmPortCurrCardSlot_Type()
)
mcmPortCurrCardSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortCurrCardSlot.setStatus("mandatory")
_McmPortCurrIndex_Type = Integer32
_McmPortCurrIndex_Object = MibTableColumn
mcmPortCurrIndex = _McmPortCurrIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 4),
    _McmPortCurrIndex_Type()
)
mcmPortCurrIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortCurrIndex.setStatus("mandatory")
_McmPortCurrASs_Type = Counter32
_McmPortCurrASs_Object = MibTableColumn
mcmPortCurrASs = _McmPortCurrASs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 5),
    _McmPortCurrASs_Type()
)
mcmPortCurrASs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortCurrASs.setStatus("mandatory")
_McmPortCurrFrameASs_Type = Counter32
_McmPortCurrFrameASs_Object = MibTableColumn
mcmPortCurrFrameASs = _McmPortCurrFrameASs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 6),
    _McmPortCurrFrameASs_Type()
)
mcmPortCurrFrameASs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmPortCurrFrameASs.setStatus("mandatory")
_McmPortCurrFEs_Type = Counter32
_McmPortCurrFEs_Object = MibTableColumn
mcmPortCurrFEs = _McmPortCurrFEs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 7),
    _McmPortCurrFEs_Type()
)
mcmPortCurrFEs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortCurrFEs.setStatus("mandatory")
_McmPortCurrCRCErrs_Type = Counter32
_McmPortCurrCRCErrs_Object = MibTableColumn
mcmPortCurrCRCErrs = _McmPortCurrCRCErrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 8),
    _McmPortCurrCRCErrs_Type()
)
mcmPortCurrCRCErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortCurrCRCErrs.setStatus("mandatory")
_McmPortCurrSESs_Type = Counter32
_McmPortCurrSESs_Object = MibTableColumn
mcmPortCurrSESs = _McmPortCurrSESs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 9),
    _McmPortCurrSESs_Type()
)
mcmPortCurrSESs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortCurrSESs.setStatus("mandatory")
_McmPortCurrSEFSs_Type = Counter32
_McmPortCurrSEFSs_Object = MibTableColumn
mcmPortCurrSEFSs = _McmPortCurrSEFSs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 10),
    _McmPortCurrSEFSs_Type()
)
mcmPortCurrSEFSs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortCurrSEFSs.setStatus("mandatory")
_McmPortCurrUASs_Type = Counter32
_McmPortCurrUASs_Object = MibTableColumn
mcmPortCurrUASs = _McmPortCurrUASs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 11),
    _McmPortCurrUASs_Type()
)
mcmPortCurrUASs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortCurrUASs.setStatus("mandatory")
_McmPortCurrLESs_Type = Counter32
_McmPortCurrLESs_Object = MibTableColumn
mcmPortCurrLESs = _McmPortCurrLESs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 12),
    _McmPortCurrLESs_Type()
)
mcmPortCurrLESs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortCurrLESs.setStatus("mandatory")
_McmPortCurrBESs_Type = Counter32
_McmPortCurrBESs_Object = MibTableColumn
mcmPortCurrBESs = _McmPortCurrBESs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 13),
    _McmPortCurrBESs_Type()
)
mcmPortCurrBESs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortCurrBESs.setStatus("mandatory")
_McmPortCurrDMs_Type = Counter32
_McmPortCurrDMs_Object = MibTableColumn
mcmPortCurrDMs = _McmPortCurrDMs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 14),
    _McmPortCurrDMs_Type()
)
mcmPortCurrDMs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortCurrDMs.setStatus("mandatory")
_McmPortCurrLCVs_Type = Counter32
_McmPortCurrLCVs_Object = MibTableColumn
mcmPortCurrLCVs = _McmPortCurrLCVs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 15),
    _McmPortCurrLCVs_Type()
)
mcmPortCurrLCVs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortCurrLCVs.setStatus("mandatory")
_FnPerf_ObjectIdentity = ObjectIdentity
fnPerf = _FnPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 10)
)
_FnNumEvents_Type = Counter32
_FnNumEvents_Object = MibScalar
fnNumEvents = _FnNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 10, 1),
    _FnNumEvents_Type()
)
fnNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fnNumEvents.setStatus("mandatory")
_FnPerfTable_Object = MibTable
fnPerfTable = _FnPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 10, 2)
)
if mibBuilder.loadTexts:
    fnPerfTable.setStatus("mandatory")
_FnPerfEntry_Object = MibTableRow
fnPerfEntry = _FnPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 10, 2, 1)
)
fnPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "fnPerfID"),
)
if mibBuilder.loadTexts:
    fnPerfEntry.setStatus("mandatory")
_FnPerfID_Type = Integer32
_FnPerfID_Object = MibTableColumn
fnPerfID = _FnPerfID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 10, 2, 1, 1),
    _FnPerfID_Type()
)
fnPerfID.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fnPerfID.setStatus("mandatory")


class _FnPerfState_Type(Integer32):
    """Custom type fnPerfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("fnDegrade", 4),
          ("fnEmpty", 1),
          ("fnFailed", 3),
          ("fnOK", 2))
    )


_FnPerfState_Type.__name__ = "Integer32"
_FnPerfState_Object = MibTableColumn
fnPerfState = _FnPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 10, 2, 1, 2),
    _FnPerfState_Type()
)
fnPerfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fnPerfState.setStatus("mandatory")
_FnPerfStatus_Type = CardStatus
_FnPerfStatus_Object = MibTableColumn
fnPerfStatus = _FnPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 10, 2, 1, 3),
    _FnPerfStatus_Type()
)
fnPerfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fnPerfStatus.setStatus("mandatory")
_CsimPerf_ObjectIdentity = ObjectIdentity
csimPerf = _CsimPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 11)
)
_CsimNumEvents_Type = Counter32
_CsimNumEvents_Object = MibScalar
csimNumEvents = _CsimNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 1),
    _CsimNumEvents_Type()
)
csimNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    csimNumEvents.setStatus("mandatory")
_CsimCurrentTable_Object = MibTable
csimCurrentTable = _CsimCurrentTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2)
)
if mibBuilder.loadTexts:
    csimCurrentTable.setStatus("mandatory")
_CsimCurrentEntry_Object = MibTableRow
csimCurrentEntry = _CsimCurrentEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2, 1)
)
csimCurrentEntry.setIndexNames(
    (0, "LUXN-MIB", "csimCurrentLocation"),
    (0, "LUXN-MIB", "csimCurrentShelf"),
    (0, "LUXN-MIB", "csimCurrentSlot"),
)
if mibBuilder.loadTexts:
    csimCurrentEntry.setStatus("mandatory")
_CsimCurrentLocation_Type = CardLocation
_CsimCurrentLocation_Object = MibTableColumn
csimCurrentLocation = _CsimCurrentLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2, 1, 1),
    _CsimCurrentLocation_Type()
)
csimCurrentLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimCurrentLocation.setStatus("mandatory")
_CsimCurrentShelf_Type = CardShelf
_CsimCurrentShelf_Object = MibTableColumn
csimCurrentShelf = _CsimCurrentShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2, 1, 2),
    _CsimCurrentShelf_Type()
)
csimCurrentShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimCurrentShelf.setStatus("mandatory")
_CsimCurrentSlot_Type = CardSlot
_CsimCurrentSlot_Object = MibTableColumn
csimCurrentSlot = _CsimCurrentSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2, 1, 3),
    _CsimCurrentSlot_Type()
)
csimCurrentSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimCurrentSlot.setStatus("mandatory")
_CsimCurrentEFIs_Type = Integer32
_CsimCurrentEFIs_Object = MibTableColumn
csimCurrentEFIs = _CsimCurrentEFIs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2, 1, 4),
    _CsimCurrentEFIs_Type()
)
csimCurrentEFIs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimCurrentEFIs.setStatus("mandatory")
_CsimCurrentEIs_Type = Integer32
_CsimCurrentEIs_Object = MibTableColumn
csimCurrentEIs = _CsimCurrentEIs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2, 1, 5),
    _CsimCurrentEIs_Type()
)
csimCurrentEIs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimCurrentEIs.setStatus("mandatory")
_CsimCurrentSEIs_Type = Integer32
_CsimCurrentSEIs_Object = MibTableColumn
csimCurrentSEIs = _CsimCurrentSEIs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2, 1, 6),
    _CsimCurrentSEIs_Type()
)
csimCurrentSEIs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimCurrentSEIs.setStatus("mandatory")
_CsimCurrentBERs_Type = DisplayString
_CsimCurrentBERs_Object = MibTableColumn
csimCurrentBERs = _CsimCurrentBERs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2, 1, 7),
    _CsimCurrentBERs_Type()
)
csimCurrentBERs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimCurrentBERs.setStatus("mandatory")
_CsimCurrentUAIs_Type = Integer32
_CsimCurrentUAIs_Object = MibTableColumn
csimCurrentUAIs = _CsimCurrentUAIs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2, 1, 8),
    _CsimCurrentUAIs_Type()
)
csimCurrentUAIs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimCurrentUAIs.setStatus("mandatory")
_CsimCurrentGIs_Type = Integer32
_CsimCurrentGIs_Object = MibTableColumn
csimCurrentGIs = _CsimCurrentGIs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2, 1, 9),
    _CsimCurrentGIs_Type()
)
csimCurrentGIs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimCurrentGIs.setStatus("mandatory")
_CsimCurrentDateTime_Type = Integer32
_CsimCurrentDateTime_Object = MibTableColumn
csimCurrentDateTime = _CsimCurrentDateTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2, 1, 10),
    _CsimCurrentDateTime_Type()
)
csimCurrentDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimCurrentDateTime.setStatus("mandatory")
_RpsmPerf_ObjectIdentity = ObjectIdentity
rpsmPerf = _RpsmPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 12)
)
_RpsmNumEvents_Type = Counter32
_RpsmNumEvents_Object = MibScalar
rpsmNumEvents = _RpsmNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 1),
    _RpsmNumEvents_Type()
)
rpsmNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmNumEvents.setStatus("mandatory")
_RpsmPerfTable_Object = MibTable
rpsmPerfTable = _RpsmPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2)
)
if mibBuilder.loadTexts:
    rpsmPerfTable.setStatus("mandatory")
_RpsmPerfEntry_Object = MibTableRow
rpsmPerfEntry = _RpsmPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1)
)
rpsmPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "rpsmPerfLocation"),
    (0, "LUXN-MIB", "rpsmPerfShelf"),
    (0, "LUXN-MIB", "rpsmPerfSlot"),
)
if mibBuilder.loadTexts:
    rpsmPerfEntry.setStatus("mandatory")
_RpsmPerfLocation_Type = CardLocation
_RpsmPerfLocation_Object = MibTableColumn
rpsmPerfLocation = _RpsmPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 1),
    _RpsmPerfLocation_Type()
)
rpsmPerfLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmPerfLocation.setStatus("mandatory")
_RpsmPerfShelf_Type = CardShelf
_RpsmPerfShelf_Object = MibTableColumn
rpsmPerfShelf = _RpsmPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 2),
    _RpsmPerfShelf_Type()
)
rpsmPerfShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmPerfShelf.setStatus("mandatory")
_RpsmPerfSlot_Type = CardSlot
_RpsmPerfSlot_Object = MibTableColumn
rpsmPerfSlot = _RpsmPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 3),
    _RpsmPerfSlot_Type()
)
rpsmPerfSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmPerfSlot.setStatus("mandatory")
_RpsmPerfState_Type = CardState
_RpsmPerfState_Object = MibTableColumn
rpsmPerfState = _RpsmPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 4),
    _RpsmPerfState_Type()
)
rpsmPerfState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmPerfState.setStatus("mandatory")
_RpsmPerfStatus_Type = CardStatus
_RpsmPerfStatus_Object = MibTableColumn
rpsmPerfStatus = _RpsmPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 5),
    _RpsmPerfStatus_Type()
)
rpsmPerfStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmPerfStatus.setStatus("mandatory")


class _RpsmLinkEastState_Type(Integer32):
    """Custom type rpsmLinkEastState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("linked", 1),
          ("notLinked", 2),
          ("unknown", 3))
    )


_RpsmLinkEastState_Type.__name__ = "Integer32"
_RpsmLinkEastState_Object = MibTableColumn
rpsmLinkEastState = _RpsmLinkEastState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 6),
    _RpsmLinkEastState_Type()
)
rpsmLinkEastState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmLinkEastState.setStatus("mandatory")


class _RpsmLinkEastStatus_Type(Integer32):
    """Custom type rpsmLinkEastStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("hibernation", 3),
          ("standby", 2))
    )


_RpsmLinkEastStatus_Type.__name__ = "Integer32"
_RpsmLinkEastStatus_Object = MibTableColumn
rpsmLinkEastStatus = _RpsmLinkEastStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 7),
    _RpsmLinkEastStatus_Type()
)
rpsmLinkEastStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmLinkEastStatus.setStatus("mandatory")


class _RpsmLinkWestState_Type(Integer32):
    """Custom type rpsmLinkWestState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("linked", 1),
          ("notLinked", 2),
          ("unknown", 3))
    )


_RpsmLinkWestState_Type.__name__ = "Integer32"
_RpsmLinkWestState_Object = MibTableColumn
rpsmLinkWestState = _RpsmLinkWestState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 8),
    _RpsmLinkWestState_Type()
)
rpsmLinkWestState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmLinkWestState.setStatus("mandatory")


class _RpsmLinkWestStatus_Type(Integer32):
    """Custom type rpsmLinkWestStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("hibernation", 3),
          ("standby", 2))
    )


_RpsmLinkWestStatus_Type.__name__ = "Integer32"
_RpsmLinkWestStatus_Object = MibTableColumn
rpsmLinkWestStatus = _RpsmLinkWestStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 9),
    _RpsmLinkWestStatus_Type()
)
rpsmLinkWestStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmLinkWestStatus.setStatus("mandatory")
_RpsmLastBootTime_Type = DateAndTime
_RpsmLastBootTime_Object = MibTableColumn
rpsmLastBootTime = _RpsmLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 10),
    _RpsmLastBootTime_Type()
)
rpsmLastBootTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmLastBootTime.setStatus("mandatory")
_RpsmAvailTime_Type = Counter32
_RpsmAvailTime_Object = MibTableColumn
rpsmAvailTime = _RpsmAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 11),
    _RpsmAvailTime_Type()
)
rpsmAvailTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmAvailTime.setStatus("mandatory")
_RpsmErrFreeSecs_Type = Counter32
_RpsmErrFreeSecs_Object = MibTableColumn
rpsmErrFreeSecs = _RpsmErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 12),
    _RpsmErrFreeSecs_Type()
)
rpsmErrFreeSecs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmErrFreeSecs.setStatus("mandatory")
_RpsmWorkingPower_Type = Integer32
_RpsmWorkingPower_Object = MibTableColumn
rpsmWorkingPower = _RpsmWorkingPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 13),
    _RpsmWorkingPower_Type()
)
rpsmWorkingPower.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmWorkingPower.setStatus("mandatory")
_RpsmProtectionPower_Type = Integer32
_RpsmProtectionPower_Object = MibTableColumn
rpsmProtectionPower = _RpsmProtectionPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 14),
    _RpsmProtectionPower_Type()
)
rpsmProtectionPower.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmProtectionPower.setStatus("mandatory")
_RsdmPerf_ObjectIdentity = ObjectIdentity
rsdmPerf = _RsdmPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 13)
)
_RsdmNumEvents_Type = Counter32
_RsdmNumEvents_Object = MibScalar
rsdmNumEvents = _RsdmNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 1),
    _RsdmNumEvents_Type()
)
rsdmNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmNumEvents.setStatus("mandatory")
_RsdmPerfTable_Object = MibTable
rsdmPerfTable = _RsdmPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2)
)
if mibBuilder.loadTexts:
    rsdmPerfTable.setStatus("mandatory")
_RsdmPerfEntry_Object = MibTableRow
rsdmPerfEntry = _RsdmPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1)
)
rsdmPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "rsdmPerfLocation"),
    (0, "LUXN-MIB", "rsdmPerfShelf"),
    (0, "LUXN-MIB", "rsdmPerfSlot"),
)
if mibBuilder.loadTexts:
    rsdmPerfEntry.setStatus("mandatory")
_RsdmPerfLocation_Type = CardLocation
_RsdmPerfLocation_Object = MibTableColumn
rsdmPerfLocation = _RsdmPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 1),
    _RsdmPerfLocation_Type()
)
rsdmPerfLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmPerfLocation.setStatus("mandatory")
_RsdmPerfShelf_Type = CardShelf
_RsdmPerfShelf_Object = MibTableColumn
rsdmPerfShelf = _RsdmPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 2),
    _RsdmPerfShelf_Type()
)
rsdmPerfShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmPerfShelf.setStatus("mandatory")
_RsdmPerfSlot_Type = CardSlot
_RsdmPerfSlot_Object = MibTableColumn
rsdmPerfSlot = _RsdmPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 3),
    _RsdmPerfSlot_Type()
)
rsdmPerfSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmPerfSlot.setStatus("mandatory")
_RsdmPerfState_Type = CardState
_RsdmPerfState_Object = MibTableColumn
rsdmPerfState = _RsdmPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 4),
    _RsdmPerfState_Type()
)
rsdmPerfState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmPerfState.setStatus("mandatory")
_RsdmPerfStatus_Type = CardStatus
_RsdmPerfStatus_Object = MibTableColumn
rsdmPerfStatus = _RsdmPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 5),
    _RsdmPerfStatus_Type()
)
rsdmPerfStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmPerfStatus.setStatus("mandatory")


class _RsdmLinkEastState_Type(Integer32):
    """Custom type rsdmLinkEastState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("linked", 1),
          ("notLinked", 2),
          ("unknown", 3))
    )


_RsdmLinkEastState_Type.__name__ = "Integer32"
_RsdmLinkEastState_Object = MibTableColumn
rsdmLinkEastState = _RsdmLinkEastState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 6),
    _RsdmLinkEastState_Type()
)
rsdmLinkEastState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmLinkEastState.setStatus("mandatory")


class _RsdmLinkEastStatus_Type(Integer32):
    """Custom type rsdmLinkEastStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("hibernation", 3),
          ("standby", 2))
    )


_RsdmLinkEastStatus_Type.__name__ = "Integer32"
_RsdmLinkEastStatus_Object = MibTableColumn
rsdmLinkEastStatus = _RsdmLinkEastStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 7),
    _RsdmLinkEastStatus_Type()
)
rsdmLinkEastStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmLinkEastStatus.setStatus("mandatory")


class _RsdmLinkWestState_Type(Integer32):
    """Custom type rsdmLinkWestState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("linked", 1),
          ("notLinked", 2),
          ("unknown", 3))
    )


_RsdmLinkWestState_Type.__name__ = "Integer32"
_RsdmLinkWestState_Object = MibTableColumn
rsdmLinkWestState = _RsdmLinkWestState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 8),
    _RsdmLinkWestState_Type()
)
rsdmLinkWestState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmLinkWestState.setStatus("mandatory")


class _RsdmLinkWestStatus_Type(Integer32):
    """Custom type rsdmLinkWestStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("hibernation", 3),
          ("standby", 2))
    )


_RsdmLinkWestStatus_Type.__name__ = "Integer32"
_RsdmLinkWestStatus_Object = MibTableColumn
rsdmLinkWestStatus = _RsdmLinkWestStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 9),
    _RsdmLinkWestStatus_Type()
)
rsdmLinkWestStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmLinkWestStatus.setStatus("mandatory")
_RsdmLastBootTime_Type = DateAndTime
_RsdmLastBootTime_Object = MibTableColumn
rsdmLastBootTime = _RsdmLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 10),
    _RsdmLastBootTime_Type()
)
rsdmLastBootTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmLastBootTime.setStatus("mandatory")
_RsdmAvailTime_Type = Counter32
_RsdmAvailTime_Object = MibTableColumn
rsdmAvailTime = _RsdmAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 11),
    _RsdmAvailTime_Type()
)
rsdmAvailTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmAvailTime.setStatus("mandatory")
_RsdmErrFreeSecs_Type = Counter32
_RsdmErrFreeSecs_Object = MibTableColumn
rsdmErrFreeSecs = _RsdmErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 12),
    _RsdmErrFreeSecs_Type()
)
rsdmErrFreeSecs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmErrFreeSecs.setStatus("mandatory")
_RsdmWorkingPower_Type = Integer32
_RsdmWorkingPower_Object = MibTableColumn
rsdmWorkingPower = _RsdmWorkingPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 13),
    _RsdmWorkingPower_Type()
)
rsdmWorkingPower.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmWorkingPower.setStatus("mandatory")
_RsdmProtectionPower_Type = Integer32
_RsdmProtectionPower_Object = MibTableColumn
rsdmProtectionPower = _RsdmProtectionPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 14),
    _RsdmProtectionPower_Type()
)
rsdmProtectionPower.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmProtectionPower.setStatus("mandatory")
_RtdmPerf_ObjectIdentity = ObjectIdentity
rtdmPerf = _RtdmPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 14)
)
_RtdmNumEvents_Type = Counter32
_RtdmNumEvents_Object = MibScalar
rtdmNumEvents = _RtdmNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 14, 1),
    _RtdmNumEvents_Type()
)
rtdmNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmNumEvents.setStatus("mandatory")
_RtdmPerfTable_Object = MibTable
rtdmPerfTable = _RtdmPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 14, 2)
)
if mibBuilder.loadTexts:
    rtdmPerfTable.setStatus("mandatory")
_RtdmPerfEntry_Object = MibTableRow
rtdmPerfEntry = _RtdmPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 14, 2, 1)
)
rtdmPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "rtdmPerfLocation"),
    (0, "LUXN-MIB", "rtdmPerfShelf"),
    (0, "LUXN-MIB", "rtdmPerfSlot"),
)
if mibBuilder.loadTexts:
    rtdmPerfEntry.setStatus("mandatory")
_RtdmPerfLocation_Type = CardLocation
_RtdmPerfLocation_Object = MibTableColumn
rtdmPerfLocation = _RtdmPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 14, 2, 1, 1),
    _RtdmPerfLocation_Type()
)
rtdmPerfLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmPerfLocation.setStatus("mandatory")
_RtdmPerfShelf_Type = CardShelf
_RtdmPerfShelf_Object = MibTableColumn
rtdmPerfShelf = _RtdmPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 14, 2, 1, 2),
    _RtdmPerfShelf_Type()
)
rtdmPerfShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmPerfShelf.setStatus("mandatory")
_RtdmPerfSlot_Type = CardSlot
_RtdmPerfSlot_Object = MibTableColumn
rtdmPerfSlot = _RtdmPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 14, 2, 1, 3),
    _RtdmPerfSlot_Type()
)
rtdmPerfSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmPerfSlot.setStatus("mandatory")
_RtdmPerfState_Type = CardState
_RtdmPerfState_Object = MibTableColumn
rtdmPerfState = _RtdmPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 14, 2, 1, 4),
    _RtdmPerfState_Type()
)
rtdmPerfState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmPerfState.setStatus("mandatory")
_RtdmPerfStatus_Type = CardStatus
_RtdmPerfStatus_Object = MibTableColumn
rtdmPerfStatus = _RtdmPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 14, 2, 1, 5),
    _RtdmPerfStatus_Type()
)
rtdmPerfStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmPerfStatus.setStatus("mandatory")
_RtdmLastBootTime_Type = DateAndTime
_RtdmLastBootTime_Object = MibTableColumn
rtdmLastBootTime = _RtdmLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 14, 2, 1, 6),
    _RtdmLastBootTime_Type()
)
rtdmLastBootTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmLastBootTime.setStatus("mandatory")
_RtdmAvailTime_Type = Counter32
_RtdmAvailTime_Object = MibTableColumn
rtdmAvailTime = _RtdmAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 14, 2, 1, 7),
    _RtdmAvailTime_Type()
)
rtdmAvailTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmAvailTime.setStatus("mandatory")
_RtdmErrFreeSecs_Type = Counter32
_RtdmErrFreeSecs_Object = MibTableColumn
rtdmErrFreeSecs = _RtdmErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 14, 2, 1, 8),
    _RtdmErrFreeSecs_Type()
)
rtdmErrFreeSecs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmErrFreeSecs.setStatus("mandatory")
_OsamPerf_ObjectIdentity = ObjectIdentity
osamPerf = _OsamPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15)
)
_OsamNumEvents_Type = Counter32
_OsamNumEvents_Object = MibScalar
osamNumEvents = _OsamNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 1),
    _OsamNumEvents_Type()
)
osamNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamNumEvents.setStatus("mandatory")
_OsamCntrTable_Object = MibTable
osamCntrTable = _OsamCntrTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 2)
)
if mibBuilder.loadTexts:
    osamCntrTable.setStatus("mandatory")
_OsamCntrEntry_Object = MibTableRow
osamCntrEntry = _OsamCntrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 2, 1)
)
osamCntrEntry.setIndexNames(
    (0, "LUXN-MIB", "osamCntrLocation"),
    (0, "LUXN-MIB", "osamCntrShelf"),
    (0, "LUXN-MIB", "osamCntrSlot"),
)
if mibBuilder.loadTexts:
    osamCntrEntry.setStatus("mandatory")
_OsamCntrLocation_Type = CardLocation
_OsamCntrLocation_Object = MibTableColumn
osamCntrLocation = _OsamCntrLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 2, 1, 1),
    _OsamCntrLocation_Type()
)
osamCntrLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamCntrLocation.setStatus("mandatory")
_OsamCntrShelf_Type = CardShelf
_OsamCntrShelf_Object = MibTableColumn
osamCntrShelf = _OsamCntrShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 2, 1, 2),
    _OsamCntrShelf_Type()
)
osamCntrShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamCntrShelf.setStatus("mandatory")


class _OsamCntrSlot_Type(Integer32):
    """Custom type osamCntrSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_OsamCntrSlot_Type.__name__ = "Integer32"
_OsamCntrSlot_Object = MibTableColumn
osamCntrSlot = _OsamCntrSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 2, 1, 3),
    _OsamCntrSlot_Type()
)
osamCntrSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamCntrSlot.setStatus("mandatory")
_OsamCntrKeepAlivePktSent_Type = Counter32
_OsamCntrKeepAlivePktSent_Object = MibTableColumn
osamCntrKeepAlivePktSent = _OsamCntrKeepAlivePktSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 2, 1, 4),
    _OsamCntrKeepAlivePktSent_Type()
)
osamCntrKeepAlivePktSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamCntrKeepAlivePktSent.setStatus("mandatory")
_OsamCntrKeepAlivePktRcvd_Type = Counter32
_OsamCntrKeepAlivePktRcvd_Object = MibTableColumn
osamCntrKeepAlivePktRcvd = _OsamCntrKeepAlivePktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 2, 1, 5),
    _OsamCntrKeepAlivePktRcvd_Type()
)
osamCntrKeepAlivePktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamCntrKeepAlivePktRcvd.setStatus("mandatory")
_OsamCntrKeepAliveBadPktRcvd_Type = Counter32
_OsamCntrKeepAliveBadPktRcvd_Object = MibTableColumn
osamCntrKeepAliveBadPktRcvd = _OsamCntrKeepAliveBadPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 2, 1, 6),
    _OsamCntrKeepAliveBadPktRcvd_Type()
)
osamCntrKeepAliveBadPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamCntrKeepAliveBadPktRcvd.setStatus("mandatory")
_OsamPerfTable_Object = MibTable
osamPerfTable = _OsamPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3)
)
if mibBuilder.loadTexts:
    osamPerfTable.setStatus("mandatory")
_OsamPerfEntry_Object = MibTableRow
osamPerfEntry = _OsamPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1)
)
osamPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "osamPerfLocation"),
    (0, "LUXN-MIB", "osamPerfShelf"),
    (0, "LUXN-MIB", "osamPerfSlot"),
)
if mibBuilder.loadTexts:
    osamPerfEntry.setStatus("mandatory")
_OsamPerfLocation_Type = CardLocation
_OsamPerfLocation_Object = MibTableColumn
osamPerfLocation = _OsamPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 1),
    _OsamPerfLocation_Type()
)
osamPerfLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamPerfLocation.setStatus("mandatory")
_OsamPerfShelf_Type = CardShelf
_OsamPerfShelf_Object = MibTableColumn
osamPerfShelf = _OsamPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 2),
    _OsamPerfShelf_Type()
)
osamPerfShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamPerfShelf.setStatus("mandatory")


class _OsamPerfSlot_Type(Integer32):
    """Custom type osamPerfSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_OsamPerfSlot_Type.__name__ = "Integer32"
_OsamPerfSlot_Object = MibTableColumn
osamPerfSlot = _OsamPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 3),
    _OsamPerfSlot_Type()
)
osamPerfSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamPerfSlot.setStatus("mandatory")
_OsamPerfState_Type = CardState
_OsamPerfState_Object = MibTableColumn
osamPerfState = _OsamPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 4),
    _OsamPerfState_Type()
)
osamPerfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamPerfState.setStatus("mandatory")
_OsamPerfStatus_Type = CardStatus
_OsamPerfStatus_Object = MibTableColumn
osamPerfStatus = _OsamPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 5),
    _OsamPerfStatus_Type()
)
osamPerfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamPerfStatus.setStatus("mandatory")
_OsamPerfLastBootTime_Type = DateAndTime
_OsamPerfLastBootTime_Object = MibTableColumn
osamPerfLastBootTime = _OsamPerfLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 6),
    _OsamPerfLastBootTime_Type()
)
osamPerfLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamPerfLastBootTime.setStatus("mandatory")
_OsamPerfAvailTime_Type = Counter32
_OsamPerfAvailTime_Object = MibTableColumn
osamPerfAvailTime = _OsamPerfAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 7),
    _OsamPerfAvailTime_Type()
)
osamPerfAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamPerfAvailTime.setStatus("mandatory")
_OsamPerfErrFreeSecs_Type = Counter32
_OsamPerfErrFreeSecs_Object = MibTableColumn
osamPerfErrFreeSecs = _OsamPerfErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 8),
    _OsamPerfErrFreeSecs_Type()
)
osamPerfErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamPerfErrFreeSecs.setStatus("mandatory")
_OsamPerfAprStatus_Type = FlagType
_OsamPerfAprStatus_Object = MibTableColumn
osamPerfAprStatus = _OsamPerfAprStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 9),
    _OsamPerfAprStatus_Type()
)
osamPerfAprStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamPerfAprStatus.setStatus("mandatory")
_OsamPerfInputPower_Type = DisplayString
_OsamPerfInputPower_Object = MibTableColumn
osamPerfInputPower = _OsamPerfInputPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 10),
    _OsamPerfInputPower_Type()
)
osamPerfInputPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamPerfInputPower.setStatus("mandatory")
_OsamPerfBFDPower_Type = DisplayString
_OsamPerfBFDPower_Object = MibTableColumn
osamPerfBFDPower = _OsamPerfBFDPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 11),
    _OsamPerfBFDPower_Type()
)
osamPerfBFDPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamPerfBFDPower.setStatus("mandatory")
_OsamPerfOutputPower_Type = DisplayString
_OsamPerfOutputPower_Object = MibTableColumn
osamPerfOutputPower = _OsamPerfOutputPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 12),
    _OsamPerfOutputPower_Type()
)
osamPerfOutputPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamPerfOutputPower.setStatus("mandatory")
_OsamPerfAPRDetector1Power_Type = DisplayString
_OsamPerfAPRDetector1Power_Object = MibTableColumn
osamPerfAPRDetector1Power = _OsamPerfAPRDetector1Power_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 13),
    _OsamPerfAPRDetector1Power_Type()
)
osamPerfAPRDetector1Power.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamPerfAPRDetector1Power.setStatus("mandatory")
_OsamPerfAPRDetector2Power_Type = DisplayString
_OsamPerfAPRDetector2Power_Object = MibTableColumn
osamPerfAPRDetector2Power = _OsamPerfAPRDetector2Power_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 14),
    _OsamPerfAPRDetector2Power_Type()
)
osamPerfAPRDetector2Power.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamPerfAPRDetector2Power.setStatus("mandatory")


class _OsamPerfLaserTemperature_Type(Integer32):
    """Custom type osamPerfLaserTemperature based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(15, 35),
    )


_OsamPerfLaserTemperature_Type.__name__ = "Integer32"
_OsamPerfLaserTemperature_Object = MibTableColumn
osamPerfLaserTemperature = _OsamPerfLaserTemperature_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 15),
    _OsamPerfLaserTemperature_Type()
)
osamPerfLaserTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamPerfLaserTemperature.setStatus("mandatory")


class _OsamPerfTecCurrent_Type(Integer32):
    """Custom type osamPerfTecCurrent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 1500),
    )


_OsamPerfTecCurrent_Type.__name__ = "Integer32"
_OsamPerfTecCurrent_Object = MibTableColumn
osamPerfTecCurrent = _OsamPerfTecCurrent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 16),
    _OsamPerfTecCurrent_Type()
)
osamPerfTecCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamPerfTecCurrent.setStatus("mandatory")


class _OsamPerfBiasCurrent_Type(Integer32):
    """Custom type osamPerfBiasCurrent based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 255),
    )


_OsamPerfBiasCurrent_Type.__name__ = "Integer32"
_OsamPerfBiasCurrent_Object = MibTableColumn
osamPerfBiasCurrent = _OsamPerfBiasCurrent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 17),
    _OsamPerfBiasCurrent_Type()
)
osamPerfBiasCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamPerfBiasCurrent.setStatus("mandatory")
_OsamPerfAmplifierGain_Type = DisplayString
_OsamPerfAmplifierGain_Object = MibTableColumn
osamPerfAmplifierGain = _OsamPerfAmplifierGain_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 18),
    _OsamPerfAmplifierGain_Type()
)
osamPerfAmplifierGain.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamPerfAmplifierGain.setStatus("mandatory")


class _OsamPerfPCBTemperature_Type(Integer32):
    """Custom type osamPerfPCBTemperature based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 75),
    )


_OsamPerfPCBTemperature_Type.__name__ = "Integer32"
_OsamPerfPCBTemperature_Object = MibTableColumn
osamPerfPCBTemperature = _OsamPerfPCBTemperature_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 19),
    _OsamPerfPCBTemperature_Type()
)
osamPerfPCBTemperature.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamPerfPCBTemperature.setStatus("mandatory")
_Osam2PerfPump1BFDPower_Type = Integer32
_Osam2PerfPump1BFDPower_Object = MibTableColumn
osam2PerfPump1BFDPower = _Osam2PerfPump1BFDPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 20),
    _Osam2PerfPump1BFDPower_Type()
)
osam2PerfPump1BFDPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osam2PerfPump1BFDPower.setStatus("mandatory")
_Osam2PerfPump2BFDPower_Type = Integer32
_Osam2PerfPump2BFDPower_Object = MibTableColumn
osam2PerfPump2BFDPower = _Osam2PerfPump2BFDPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 21),
    _Osam2PerfPump2BFDPower_Type()
)
osam2PerfPump2BFDPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osam2PerfPump2BFDPower.setStatus("mandatory")
_Osam2PerfPump1IBias_Type = Integer32
_Osam2PerfPump1IBias_Object = MibTableColumn
osam2PerfPump1IBias = _Osam2PerfPump1IBias_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 22),
    _Osam2PerfPump1IBias_Type()
)
osam2PerfPump1IBias.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osam2PerfPump1IBias.setStatus("mandatory")
_Osam2PerfPump2IBias_Type = Integer32
_Osam2PerfPump2IBias_Object = MibTableColumn
osam2PerfPump2IBias = _Osam2PerfPump2IBias_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 23),
    _Osam2PerfPump2IBias_Type()
)
osam2PerfPump2IBias.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osam2PerfPump2IBias.setStatus("mandatory")
_Osam2PerfPump1ITEC_Type = Integer32
_Osam2PerfPump1ITEC_Object = MibTableColumn
osam2PerfPump1ITEC = _Osam2PerfPump1ITEC_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 24),
    _Osam2PerfPump1ITEC_Type()
)
osam2PerfPump1ITEC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osam2PerfPump1ITEC.setStatus("mandatory")
_Osam2PerfPump2ITEC_Type = Integer32
_Osam2PerfPump2ITEC_Object = MibTableColumn
osam2PerfPump2ITEC = _Osam2PerfPump2ITEC_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 25),
    _Osam2PerfPump2ITEC_Type()
)
osam2PerfPump2ITEC.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osam2PerfPump2ITEC.setStatus("mandatory")
_Osam2PerfPump1Temp_Type = DisplayString
_Osam2PerfPump1Temp_Object = MibTableColumn
osam2PerfPump1Temp = _Osam2PerfPump1Temp_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 26),
    _Osam2PerfPump1Temp_Type()
)
osam2PerfPump1Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osam2PerfPump1Temp.setStatus("mandatory")
_Osam2PerfPump2Temp_Type = DisplayString
_Osam2PerfPump2Temp_Object = MibTableColumn
osam2PerfPump2Temp = _Osam2PerfPump2Temp_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 27),
    _Osam2PerfPump2Temp_Type()
)
osam2PerfPump2Temp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osam2PerfPump2Temp.setStatus("mandatory")
_Osam2PerfGBInputPower_Type = DisplayString
_Osam2PerfGBInputPower_Object = MibTableColumn
osam2PerfGBInputPower = _Osam2PerfGBInputPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 28),
    _Osam2PerfGBInputPower_Type()
)
osam2PerfGBInputPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osam2PerfGBInputPower.setStatus("mandatory")
_Osam2PerfGBOutputPower_Type = DisplayString
_Osam2PerfGBOutputPower_Object = MibTableColumn
osam2PerfGBOutputPower = _Osam2PerfGBOutputPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 29),
    _Osam2PerfGBOutputPower_Type()
)
osam2PerfGBOutputPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osam2PerfGBOutputPower.setStatus("mandatory")
_Osam2PerfAttenuation_Type = DisplayString
_Osam2PerfAttenuation_Object = MibTableColumn
osam2PerfAttenuation = _Osam2PerfAttenuation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 30),
    _Osam2PerfAttenuation_Type()
)
osam2PerfAttenuation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osam2PerfAttenuation.setStatus("mandatory")
_RsmPerf_ObjectIdentity = ObjectIdentity
rsmPerf = _RsmPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 16)
)
_RsmNumEvents_Type = Counter32
_RsmNumEvents_Object = MibScalar
rsmNumEvents = _RsmNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 1),
    _RsmNumEvents_Type()
)
rsmNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmNumEvents.setStatus("mandatory")
_RsmPerfTable_Object = MibTable
rsmPerfTable = _RsmPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2)
)
if mibBuilder.loadTexts:
    rsmPerfTable.setStatus("mandatory")
_RsmPerfEntry_Object = MibTableRow
rsmPerfEntry = _RsmPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1)
)
rsmPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "rsmPerfLocation"),
    (0, "LUXN-MIB", "rsmPerfShelf"),
    (0, "LUXN-MIB", "rsmPerfSlot"),
)
if mibBuilder.loadTexts:
    rsmPerfEntry.setStatus("mandatory")
_RsmPerfLocation_Type = CardLocation
_RsmPerfLocation_Object = MibTableColumn
rsmPerfLocation = _RsmPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 1),
    _RsmPerfLocation_Type()
)
rsmPerfLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmPerfLocation.setStatus("mandatory")
_RsmPerfShelf_Type = CardShelf
_RsmPerfShelf_Object = MibTableColumn
rsmPerfShelf = _RsmPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 2),
    _RsmPerfShelf_Type()
)
rsmPerfShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmPerfShelf.setStatus("mandatory")
_RsmPerfSlot_Type = CardSlot
_RsmPerfSlot_Object = MibTableColumn
rsmPerfSlot = _RsmPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 3),
    _RsmPerfSlot_Type()
)
rsmPerfSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmPerfSlot.setStatus("mandatory")
_RsmPerfState_Type = CardState
_RsmPerfState_Object = MibTableColumn
rsmPerfState = _RsmPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 4),
    _RsmPerfState_Type()
)
rsmPerfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmPerfState.setStatus("mandatory")
_RsmPerfStatus_Type = CardStatus
_RsmPerfStatus_Object = MibTableColumn
rsmPerfStatus = _RsmPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 5),
    _RsmPerfStatus_Type()
)
rsmPerfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmPerfStatus.setStatus("mandatory")


class _RsmLinkAState_Type(Integer32):
    """Custom type rsmLinkAState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("linked", 1),
          ("notLinked", 2),
          ("unknown", 3))
    )


_RsmLinkAState_Type.__name__ = "Integer32"
_RsmLinkAState_Object = MibTableColumn
rsmLinkAState = _RsmLinkAState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 6),
    _RsmLinkAState_Type()
)
rsmLinkAState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmLinkAState.setStatus("mandatory")


class _RsmLinkAStatus_Type(Integer32):
    """Custom type rsmLinkAStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("na", 3),
          ("standby", 2))
    )


_RsmLinkAStatus_Type.__name__ = "Integer32"
_RsmLinkAStatus_Object = MibTableColumn
rsmLinkAStatus = _RsmLinkAStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 7),
    _RsmLinkAStatus_Type()
)
rsmLinkAStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmLinkAStatus.setStatus("mandatory")


class _RsmLinkBState_Type(Integer32):
    """Custom type rsmLinkBState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("linked", 1),
          ("notLinked", 2),
          ("unknown", 3))
    )


_RsmLinkBState_Type.__name__ = "Integer32"
_RsmLinkBState_Object = MibTableColumn
rsmLinkBState = _RsmLinkBState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 8),
    _RsmLinkBState_Type()
)
rsmLinkBState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmLinkBState.setStatus("mandatory")


class _RsmLinkBStatus_Type(Integer32):
    """Custom type rsmLinkBStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("na", 3),
          ("standby", 2))
    )


_RsmLinkBStatus_Type.__name__ = "Integer32"
_RsmLinkBStatus_Object = MibTableColumn
rsmLinkBStatus = _RsmLinkBStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 9),
    _RsmLinkBStatus_Type()
)
rsmLinkBStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmLinkBStatus.setStatus("mandatory")
_RsmLastBootTime_Type = DateAndTime
_RsmLastBootTime_Object = MibTableColumn
rsmLastBootTime = _RsmLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 10),
    _RsmLastBootTime_Type()
)
rsmLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmLastBootTime.setStatus("mandatory")
_RsmAvailTime_Type = Counter32
_RsmAvailTime_Object = MibTableColumn
rsmAvailTime = _RsmAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 11),
    _RsmAvailTime_Type()
)
rsmAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmAvailTime.setStatus("mandatory")
_RsmErrFreeSecs_Type = Counter32
_RsmErrFreeSecs_Object = MibTableColumn
rsmErrFreeSecs = _RsmErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 12),
    _RsmErrFreeSecs_Type()
)
rsmErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmErrFreeSecs.setStatus("mandatory")
_RsmWorkingPower_Type = Integer32
_RsmWorkingPower_Object = MibTableColumn
rsmWorkingPower = _RsmWorkingPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 13),
    _RsmWorkingPower_Type()
)
rsmWorkingPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmWorkingPower.setStatus("mandatory")
_RsmProtectionPower_Type = Integer32
_RsmProtectionPower_Object = MibTableColumn
rsmProtectionPower = _RsmProtectionPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 14),
    _RsmProtectionPower_Type()
)
rsmProtectionPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmProtectionPower.setStatus("mandatory")
_UpsmPerf_ObjectIdentity = ObjectIdentity
upsmPerf = _UpsmPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 17)
)
_UpsmNumEvents_Type = Counter32
_UpsmNumEvents_Object = MibScalar
upsmNumEvents = _UpsmNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 1),
    _UpsmNumEvents_Type()
)
upsmNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmNumEvents.setStatus("mandatory")
_UpsmPerfTable_Object = MibTable
upsmPerfTable = _UpsmPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2)
)
if mibBuilder.loadTexts:
    upsmPerfTable.setStatus("mandatory")
_UpsmPerfEntry_Object = MibTableRow
upsmPerfEntry = _UpsmPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1)
)
upsmPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "upsmPerfLocation"),
    (0, "LUXN-MIB", "upsmPerfShelf"),
    (0, "LUXN-MIB", "upsmPerfSlot"),
)
if mibBuilder.loadTexts:
    upsmPerfEntry.setStatus("mandatory")
_UpsmPerfLocation_Type = CardLocation
_UpsmPerfLocation_Object = MibTableColumn
upsmPerfLocation = _UpsmPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 1),
    _UpsmPerfLocation_Type()
)
upsmPerfLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmPerfLocation.setStatus("mandatory")
_UpsmPerfShelf_Type = CardShelf
_UpsmPerfShelf_Object = MibTableColumn
upsmPerfShelf = _UpsmPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 2),
    _UpsmPerfShelf_Type()
)
upsmPerfShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmPerfShelf.setStatus("mandatory")
_UpsmPerfSlot_Type = CardSlot
_UpsmPerfSlot_Object = MibTableColumn
upsmPerfSlot = _UpsmPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 3),
    _UpsmPerfSlot_Type()
)
upsmPerfSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmPerfSlot.setStatus("mandatory")
_UpsmPerfState_Type = CardState
_UpsmPerfState_Object = MibTableColumn
upsmPerfState = _UpsmPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 4),
    _UpsmPerfState_Type()
)
upsmPerfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmPerfState.setStatus("mandatory")
_UpsmPerfStatus_Type = CardStatus
_UpsmPerfStatus_Object = MibTableColumn
upsmPerfStatus = _UpsmPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 5),
    _UpsmPerfStatus_Type()
)
upsmPerfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmPerfStatus.setStatus("mandatory")


class _UpsmLinkAState_Type(Integer32):
    """Custom type upsmLinkAState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("linked", 1),
          ("notLinked", 2),
          ("unknown", 3))
    )


_UpsmLinkAState_Type.__name__ = "Integer32"
_UpsmLinkAState_Object = MibTableColumn
upsmLinkAState = _UpsmLinkAState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 6),
    _UpsmLinkAState_Type()
)
upsmLinkAState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmLinkAState.setStatus("mandatory")


class _UpsmLinkAStatus_Type(Integer32):
    """Custom type upsmLinkAStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("hibernation", 3),
          ("standby", 2))
    )


_UpsmLinkAStatus_Type.__name__ = "Integer32"
_UpsmLinkAStatus_Object = MibTableColumn
upsmLinkAStatus = _UpsmLinkAStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 7),
    _UpsmLinkAStatus_Type()
)
upsmLinkAStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmLinkAStatus.setStatus("mandatory")


class _UpsmLinkBState_Type(Integer32):
    """Custom type upsmLinkBState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("linked", 1),
          ("notLinked", 2),
          ("unknown", 3))
    )


_UpsmLinkBState_Type.__name__ = "Integer32"
_UpsmLinkBState_Object = MibTableColumn
upsmLinkBState = _UpsmLinkBState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 8),
    _UpsmLinkBState_Type()
)
upsmLinkBState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmLinkBState.setStatus("mandatory")


class _UpsmLinkBStatus_Type(Integer32):
    """Custom type upsmLinkBStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("hibernation", 3),
          ("standby", 2))
    )


_UpsmLinkBStatus_Type.__name__ = "Integer32"
_UpsmLinkBStatus_Object = MibTableColumn
upsmLinkBStatus = _UpsmLinkBStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 9),
    _UpsmLinkBStatus_Type()
)
upsmLinkBStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmLinkBStatus.setStatus("mandatory")
_UpsmLastBootTime_Type = DateAndTime
_UpsmLastBootTime_Object = MibTableColumn
upsmLastBootTime = _UpsmLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 10),
    _UpsmLastBootTime_Type()
)
upsmLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmLastBootTime.setStatus("mandatory")
_UpsmAvailTime_Type = Counter32
_UpsmAvailTime_Object = MibTableColumn
upsmAvailTime = _UpsmAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 11),
    _UpsmAvailTime_Type()
)
upsmAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmAvailTime.setStatus("mandatory")
_UpsmErrFreeSecs_Type = Counter32
_UpsmErrFreeSecs_Object = MibTableColumn
upsmErrFreeSecs = _UpsmErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 12),
    _UpsmErrFreeSecs_Type()
)
upsmErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmErrFreeSecs.setStatus("mandatory")
_UpsmWorkingPower_Type = Integer32
_UpsmWorkingPower_Object = MibTableColumn
upsmWorkingPower = _UpsmWorkingPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 13),
    _UpsmWorkingPower_Type()
)
upsmWorkingPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmWorkingPower.setStatus("mandatory")
_UpsmProtectionPower_Type = Integer32
_UpsmProtectionPower_Object = MibTableColumn
upsmProtectionPower = _UpsmProtectionPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 14),
    _UpsmProtectionPower_Type()
)
upsmProtectionPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmProtectionPower.setStatus("mandatory")
_McmescPerf_ObjectIdentity = ObjectIdentity
mcmescPerf = _McmescPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18)
)
_McmescNumEvents_Type = Counter32
_McmescNumEvents_Object = MibScalar
mcmescNumEvents = _McmescNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 1),
    _McmescNumEvents_Type()
)
mcmescNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescNumEvents.setStatus("mandatory")
_McmescCntrTable_Object = MibTable
mcmescCntrTable = _McmescCntrTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2)
)
if mibBuilder.loadTexts:
    mcmescCntrTable.setStatus("mandatory")
_McmescCntrEntry_Object = MibTableRow
mcmescCntrEntry = _McmescCntrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1)
)
mcmescCntrEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmescCntrLocation"),
    (0, "LUXN-MIB", "mcmescCntrShelf"),
    (0, "LUXN-MIB", "mcmescCntrSlot"),
    (0, "LUXN-MIB", "mcmescCntrType"),
)
if mibBuilder.loadTexts:
    mcmescCntrEntry.setStatus("mandatory")
_McmescCntrLocation_Type = CardLocation
_McmescCntrLocation_Object = MibTableColumn
mcmescCntrLocation = _McmescCntrLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 1),
    _McmescCntrLocation_Type()
)
mcmescCntrLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescCntrLocation.setStatus("mandatory")
_McmescCntrShelf_Type = CardShelf
_McmescCntrShelf_Object = MibTableColumn
mcmescCntrShelf = _McmescCntrShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 2),
    _McmescCntrShelf_Type()
)
mcmescCntrShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescCntrShelf.setStatus("mandatory")
_McmescCntrSlot_Type = CardSlot
_McmescCntrSlot_Object = MibTableColumn
mcmescCntrSlot = _McmescCntrSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 3),
    _McmescCntrSlot_Type()
)
mcmescCntrSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescCntrSlot.setStatus("mandatory")


class _McmescCntrType_Type(Integer32):
    """Custom type mcmescCntrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("iwm", 2),
          ("spi", 1))
    )


_McmescCntrType_Type.__name__ = "Integer32"
_McmescCntrType_Object = MibTableColumn
mcmescCntrType = _McmescCntrType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 4),
    _McmescCntrType_Type()
)
mcmescCntrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescCntrType.setStatus("mandatory")
_McmescCounterFlag_Type = FlagType
_McmescCounterFlag_Object = MibTableColumn
mcmescCounterFlag = _McmescCounterFlag_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 5),
    _McmescCounterFlag_Type()
)
mcmescCounterFlag.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescCounterFlag.setStatus("mandatory")
_McmescTotPktSent_Type = Counter32
_McmescTotPktSent_Object = MibTableColumn
mcmescTotPktSent = _McmescTotPktSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 6),
    _McmescTotPktSent_Type()
)
mcmescTotPktSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescTotPktSent.setStatus("mandatory")
_McmescTotPktRcvd_Type = Counter32
_McmescTotPktRcvd_Object = MibTableColumn
mcmescTotPktRcvd = _McmescTotPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 7),
    _McmescTotPktRcvd_Type()
)
mcmescTotPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescTotPktRcvd.setStatus("mandatory")
_McmescBadPktRcvd_Type = Counter32
_McmescBadPktRcvd_Object = MibTableColumn
mcmescBadPktRcvd = _McmescBadPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 8),
    _McmescBadPktRcvd_Type()
)
mcmescBadPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescBadPktRcvd.setStatus("mandatory")
_McmescTotBadTrans_Type = Counter32
_McmescTotBadTrans_Object = MibTableColumn
mcmescTotBadTrans = _McmescTotBadTrans_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 9),
    _McmescTotBadTrans_Type()
)
mcmescTotBadTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescTotBadTrans.setStatus("mandatory")
_McmescBytesSent_Type = Counter32
_McmescBytesSent_Object = MibTableColumn
mcmescBytesSent = _McmescBytesSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 10),
    _McmescBytesSent_Type()
)
mcmescBytesSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescBytesSent.setStatus("mandatory")
_McmescBytesRcvd_Type = Counter32
_McmescBytesRcvd_Object = MibTableColumn
mcmescBytesRcvd = _McmescBytesRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 11),
    _McmescBytesRcvd_Type()
)
mcmescBytesRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescBytesRcvd.setStatus("mandatory")
_McmescMsgsDlvrd_Type = Counter32
_McmescMsgsDlvrd_Object = MibTableColumn
mcmescMsgsDlvrd = _McmescMsgsDlvrd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 12),
    _McmescMsgsDlvrd_Type()
)
mcmescMsgsDlvrd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescMsgsDlvrd.setStatus("mandatory")
_McmescClearCntrs_Type = ResetType
_McmescClearCntrs_Object = MibTableColumn
mcmescClearCntrs = _McmescClearCntrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 13),
    _McmescClearCntrs_Type()
)
mcmescClearCntrs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescClearCntrs.setStatus("mandatory")
_McmescPerfTable_Object = MibTable
mcmescPerfTable = _McmescPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 3)
)
if mibBuilder.loadTexts:
    mcmescPerfTable.setStatus("mandatory")
_McmescPerfEntry_Object = MibTableRow
mcmescPerfEntry = _McmescPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 3, 1)
)
mcmescPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmescPerfLocation"),
    (0, "LUXN-MIB", "mcmescPerfShelf"),
    (0, "LUXN-MIB", "mcmescPerfSlot"),
)
if mibBuilder.loadTexts:
    mcmescPerfEntry.setStatus("mandatory")
_McmescPerfLocation_Type = CardLocation
_McmescPerfLocation_Object = MibTableColumn
mcmescPerfLocation = _McmescPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 3, 1, 1),
    _McmescPerfLocation_Type()
)
mcmescPerfLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPerfLocation.setStatus("mandatory")
_McmescPerfShelf_Type = CardShelf
_McmescPerfShelf_Object = MibTableColumn
mcmescPerfShelf = _McmescPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 3, 1, 2),
    _McmescPerfShelf_Type()
)
mcmescPerfShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPerfShelf.setStatus("mandatory")
_McmescPerfSlot_Type = CardSlot
_McmescPerfSlot_Object = MibTableColumn
mcmescPerfSlot = _McmescPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 3, 1, 3),
    _McmescPerfSlot_Type()
)
mcmescPerfSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPerfSlot.setStatus("mandatory")
_McmescPerfState_Type = CardState
_McmescPerfState_Object = MibTableColumn
mcmescPerfState = _McmescPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 3, 1, 4),
    _McmescPerfState_Type()
)
mcmescPerfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPerfState.setStatus("mandatory")
_McmescPerfStatus_Type = CardStatus
_McmescPerfStatus_Object = MibTableColumn
mcmescPerfStatus = _McmescPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 3, 1, 5),
    _McmescPerfStatus_Type()
)
mcmescPerfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPerfStatus.setStatus("mandatory")
_McmescLastBootTime_Type = DateAndTime
_McmescLastBootTime_Object = MibTableColumn
mcmescLastBootTime = _McmescLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 3, 1, 6),
    _McmescLastBootTime_Type()
)
mcmescLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLastBootTime.setStatus("mandatory")
_McmescAvailTime_Type = Counter32
_McmescAvailTime_Object = MibTableColumn
mcmescAvailTime = _McmescAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 3, 1, 7),
    _McmescAvailTime_Type()
)
mcmescAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescAvailTime.setStatus("mandatory")
_McmescPortCurrTable_Object = MibTable
mcmescPortCurrTable = _McmescPortCurrTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4)
)
if mibBuilder.loadTexts:
    mcmescPortCurrTable.setStatus("mandatory")
_McmescPortCurrEntry_Object = MibTableRow
mcmescPortCurrEntry = _McmescPortCurrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1)
)
mcmescPortCurrEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmescPortCurrCardLocation"),
    (0, "LUXN-MIB", "mcmescPortCurrCardShelf"),
    (0, "LUXN-MIB", "mcmescPortCurrCardSlot"),
    (0, "LUXN-MIB", "mcmescPortCurrPort"),
)
if mibBuilder.loadTexts:
    mcmescPortCurrEntry.setStatus("mandatory")
_McmescPortCurrCardLocation_Type = CardLocation
_McmescPortCurrCardLocation_Object = MibTableColumn
mcmescPortCurrCardLocation = _McmescPortCurrCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 1),
    _McmescPortCurrCardLocation_Type()
)
mcmescPortCurrCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortCurrCardLocation.setStatus("mandatory")
_McmescPortCurrCardShelf_Type = CardShelf
_McmescPortCurrCardShelf_Object = MibTableColumn
mcmescPortCurrCardShelf = _McmescPortCurrCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 2),
    _McmescPortCurrCardShelf_Type()
)
mcmescPortCurrCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortCurrCardShelf.setStatus("mandatory")
_McmescPortCurrCardSlot_Type = CardSlot
_McmescPortCurrCardSlot_Object = MibTableColumn
mcmescPortCurrCardSlot = _McmescPortCurrCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 3),
    _McmescPortCurrCardSlot_Type()
)
mcmescPortCurrCardSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortCurrCardSlot.setStatus("mandatory")
_McmescPortCurrPort_Type = Integer32
_McmescPortCurrPort_Object = MibTableColumn
mcmescPortCurrPort = _McmescPortCurrPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 4),
    _McmescPortCurrPort_Type()
)
mcmescPortCurrPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortCurrPort.setStatus("mandatory")


class _McmescPortCurrRxSig_Type(DisplayString):
    """Custom type mcmescPortCurrRxSig based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_McmescPortCurrRxSig_Type.__name__ = "DisplayString"
_McmescPortCurrRxSig_Object = MibTableColumn
mcmescPortCurrRxSig = _McmescPortCurrRxSig_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 5),
    _McmescPortCurrRxSig_Type()
)
mcmescPortCurrRxSig.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortCurrRxSig.setStatus("mandatory")
_McmescPortCurrDuration_Type = DisplayString
_McmescPortCurrDuration_Object = MibTableColumn
mcmescPortCurrDuration = _McmescPortCurrDuration_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 6),
    _McmescPortCurrDuration_Type()
)
mcmescPortCurrDuration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortCurrDuration.setStatus("mandatory")
_McmescPortCurrEns_Type = DisplayString
_McmescPortCurrEns_Object = MibTableColumn
mcmescPortCurrEns = _McmescPortCurrEns_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 7),
    _McmescPortCurrEns_Type()
)
mcmescPortCurrEns.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortCurrEns.setStatus("mandatory")
_McmescPortCurrLoss_Type = DisplayString
_McmescPortCurrLoss_Object = MibTableColumn
mcmescPortCurrLoss = _McmescPortCurrLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 8),
    _McmescPortCurrLoss_Type()
)
mcmescPortCurrLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortCurrLoss.setStatus("mandatory")
_McmescPortCurrCrcErr_Type = DisplayString
_McmescPortCurrCrcErr_Object = MibTableColumn
mcmescPortCurrCrcErr = _McmescPortCurrCrcErr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 9),
    _McmescPortCurrCrcErr_Type()
)
mcmescPortCurrCrcErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortCurrCrcErr.setStatus("mandatory")
_McmescPortCurrOobErr_Type = DisplayString
_McmescPortCurrOobErr_Object = MibTableColumn
mcmescPortCurrOobErr = _McmescPortCurrOobErr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 10),
    _McmescPortCurrOobErr_Type()
)
mcmescPortCurrOobErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortCurrOobErr.setStatus("mandatory")
_McmescPortCurrRdpErr_Type = DisplayString
_McmescPortCurrRdpErr_Object = MibTableColumn
mcmescPortCurrRdpErr = _McmescPortCurrRdpErr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 11),
    _McmescPortCurrRdpErr_Type()
)
mcmescPortCurrRdpErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortCurrRdpErr.setStatus("mandatory")
_McmescPortCurrBer_Type = DisplayString
_McmescPortCurrBer_Object = MibTableColumn
mcmescPortCurrBer = _McmescPortCurrBer_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 12),
    _McmescPortCurrBer_Type()
)
mcmescPortCurrBer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortCurrBer.setStatus("mandatory")
_McmescLinkCurrTable_Object = MibTable
mcmescLinkCurrTable = _McmescLinkCurrTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5)
)
if mibBuilder.loadTexts:
    mcmescLinkCurrTable.setStatus("mandatory")
_McmescLinkCurrEntry_Object = MibTableRow
mcmescLinkCurrEntry = _McmescLinkCurrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1)
)
mcmescLinkCurrEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmescLinkCurrCardLocation"),
    (0, "LUXN-MIB", "mcmescLinkCurrCardShelf"),
    (0, "LUXN-MIB", "mcmescLinkCurrCardSlot"),
)
if mibBuilder.loadTexts:
    mcmescLinkCurrEntry.setStatus("mandatory")
_McmescLinkCurrCardLocation_Type = CardLocation
_McmescLinkCurrCardLocation_Object = MibTableColumn
mcmescLinkCurrCardLocation = _McmescLinkCurrCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1, 1),
    _McmescLinkCurrCardLocation_Type()
)
mcmescLinkCurrCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkCurrCardLocation.setStatus("mandatory")
_McmescLinkCurrCardShelf_Type = CardShelf
_McmescLinkCurrCardShelf_Object = MibTableColumn
mcmescLinkCurrCardShelf = _McmescLinkCurrCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1, 2),
    _McmescLinkCurrCardShelf_Type()
)
mcmescLinkCurrCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkCurrCardShelf.setStatus("mandatory")
_McmescLinkCurrCardSlot_Type = CardSlot
_McmescLinkCurrCardSlot_Object = MibTableColumn
mcmescLinkCurrCardSlot = _McmescLinkCurrCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1, 3),
    _McmescLinkCurrCardSlot_Type()
)
mcmescLinkCurrCardSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkCurrCardSlot.setStatus("mandatory")


class _McmescLinkCurrRxSig_Type(DisplayString):
    """Custom type mcmescLinkCurrRxSig based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 10),
    )


_McmescLinkCurrRxSig_Type.__name__ = "DisplayString"
_McmescLinkCurrRxSig_Object = MibTableColumn
mcmescLinkCurrRxSig = _McmescLinkCurrRxSig_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1, 4),
    _McmescLinkCurrRxSig_Type()
)
mcmescLinkCurrRxSig.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkCurrRxSig.setStatus("mandatory")
_McmescLinkCurrDuration_Type = DisplayString
_McmescLinkCurrDuration_Object = MibTableColumn
mcmescLinkCurrDuration = _McmescLinkCurrDuration_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1, 5),
    _McmescLinkCurrDuration_Type()
)
mcmescLinkCurrDuration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkCurrDuration.setStatus("mandatory")
_McmescLinkCurrTsos_Type = DisplayString
_McmescLinkCurrTsos_Object = MibTableColumn
mcmescLinkCurrTsos = _McmescLinkCurrTsos_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1, 6),
    _McmescLinkCurrTsos_Type()
)
mcmescLinkCurrTsos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkCurrTsos.setStatus("mandatory")
_McmescLinkCurrLoss_Type = DisplayString
_McmescLinkCurrLoss_Object = MibTableColumn
mcmescLinkCurrLoss = _McmescLinkCurrLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1, 7),
    _McmescLinkCurrLoss_Type()
)
mcmescLinkCurrLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkCurrLoss.setStatus("mandatory")
_McmescLinkCurrCrcErr_Type = DisplayString
_McmescLinkCurrCrcErr_Object = MibTableColumn
mcmescLinkCurrCrcErr = _McmescLinkCurrCrcErr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1, 8),
    _McmescLinkCurrCrcErr_Type()
)
mcmescLinkCurrCrcErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkCurrCrcErr.setStatus("mandatory")
_McmescLinkCurrOobErr_Type = DisplayString
_McmescLinkCurrOobErr_Object = MibTableColumn
mcmescLinkCurrOobErr = _McmescLinkCurrOobErr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1, 9),
    _McmescLinkCurrOobErr_Type()
)
mcmescLinkCurrOobErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkCurrOobErr.setStatus("mandatory")
_McmescLinkCurrRdpErr_Type = DisplayString
_McmescLinkCurrRdpErr_Object = MibTableColumn
mcmescLinkCurrRdpErr = _McmescLinkCurrRdpErr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1, 10),
    _McmescLinkCurrRdpErr_Type()
)
mcmescLinkCurrRdpErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkCurrRdpErr.setStatus("mandatory")
_McmescLinkCurrBer_Type = DisplayString
_McmescLinkCurrBer_Object = MibTableColumn
mcmescLinkCurrBer = _McmescLinkCurrBer_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1, 11),
    _McmescLinkCurrBer_Type()
)
mcmescLinkCurrBer.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkCurrBer.setStatus("mandatory")
_RoutingPerf_ObjectIdentity = ObjectIdentity
routingPerf = _RoutingPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 21)
)
_ImnRoutingPerfTable_Object = MibTable
imnRoutingPerfTable = _ImnRoutingPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 21, 1)
)
if mibBuilder.loadTexts:
    imnRoutingPerfTable.setStatus("mandatory")
_ImnRoutingPerfEntry_Object = MibTableRow
imnRoutingPerfEntry = _ImnRoutingPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 21, 1, 1)
)
imnRoutingPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "imnRoutePerfIpDest"),
)
if mibBuilder.loadTexts:
    imnRoutingPerfEntry.setStatus("mandatory")
_ImnRoutePerfIpDest_Type = IpAddress
_ImnRoutePerfIpDest_Object = MibTableColumn
imnRoutePerfIpDest = _ImnRoutePerfIpDest_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 21, 1, 1, 1),
    _ImnRoutePerfIpDest_Type()
)
imnRoutePerfIpDest.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imnRoutePerfIpDest.setStatus("mandatory")


class _ImnRoutePerfStatus_Type(Integer32):
    """Custom type imnRoutePerfStatus based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 3),
          ("comatose", 2),
          ("dead", 1))
    )


_ImnRoutePerfStatus_Type.__name__ = "Integer32"
_ImnRoutePerfStatus_Object = MibTableColumn
imnRoutePerfStatus = _ImnRoutePerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 21, 1, 1, 2),
    _ImnRoutePerfStatus_Type()
)
imnRoutePerfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    imnRoutePerfStatus.setStatus("mandatory")
_TapPerf_ObjectIdentity = ObjectIdentity
tapPerf = _TapPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 22)
)
_TapNumEvents_Type = Counter32
_TapNumEvents_Object = MibScalar
tapNumEvents = _TapNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 1),
    _TapNumEvents_Type()
)
tapNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapNumEvents.setStatus("mandatory")
_TapPerfTable_Object = MibTable
tapPerfTable = _TapPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 2)
)
if mibBuilder.loadTexts:
    tapPerfTable.setStatus("mandatory")
_TapPerfEntry_Object = MibTableRow
tapPerfEntry = _TapPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 2, 1)
)
tapPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "tapPerfLocation"),
    (0, "LUXN-MIB", "tapPerfShelf"),
    (0, "LUXN-MIB", "tapPerfSlot"),
)
if mibBuilder.loadTexts:
    tapPerfEntry.setStatus("mandatory")
_TapPerfLocation_Type = CardLocation
_TapPerfLocation_Object = MibTableColumn
tapPerfLocation = _TapPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 2, 1, 1),
    _TapPerfLocation_Type()
)
tapPerfLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapPerfLocation.setStatus("mandatory")
_TapPerfShelf_Type = CardShelf
_TapPerfShelf_Object = MibTableColumn
tapPerfShelf = _TapPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 2, 1, 2),
    _TapPerfShelf_Type()
)
tapPerfShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapPerfShelf.setStatus("mandatory")
_TapPerfSlot_Type = CardSlot
_TapPerfSlot_Object = MibTableColumn
tapPerfSlot = _TapPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 2, 1, 3),
    _TapPerfSlot_Type()
)
tapPerfSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapPerfSlot.setStatus("mandatory")
_TapType_Type = CardType
_TapType_Object = MibTableColumn
tapType = _TapType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 2, 1, 4),
    _TapType_Type()
)
tapType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapType.setStatus("mandatory")
_TapPerfState_Type = CardState
_TapPerfState_Object = MibTableColumn
tapPerfState = _TapPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 2, 1, 5),
    _TapPerfState_Type()
)
tapPerfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapPerfState.setStatus("mandatory")
_TapPerfStatus_Type = CardStatus
_TapPerfStatus_Object = MibTableColumn
tapPerfStatus = _TapPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 2, 1, 6),
    _TapPerfStatus_Type()
)
tapPerfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapPerfStatus.setStatus("mandatory")
_TapLastBootTime_Type = DateAndTime
_TapLastBootTime_Object = MibTableColumn
tapLastBootTime = _TapLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 2, 1, 7),
    _TapLastBootTime_Type()
)
tapLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapLastBootTime.setStatus("mandatory")
_TapAvailTime_Type = Counter32
_TapAvailTime_Object = MibTableColumn
tapAvailTime = _TapAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 2, 1, 8),
    _TapAvailTime_Type()
)
tapAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapAvailTime.setStatus("mandatory")
_TapErrFreeSecs_Type = Counter32
_TapErrFreeSecs_Object = MibTableColumn
tapErrFreeSecs = _TapErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 2, 1, 9),
    _TapErrFreeSecs_Type()
)
tapErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapErrFreeSecs.setStatus("mandatory")
_VoadmPerf_ObjectIdentity = ObjectIdentity
voadmPerf = _VoadmPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 23)
)
_VoadmNumEvents_Type = Counter32
_VoadmNumEvents_Object = MibScalar
voadmNumEvents = _VoadmNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 1),
    _VoadmNumEvents_Type()
)
voadmNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmNumEvents.setStatus("mandatory")
_VoadmPerfTable_Object = MibTable
voadmPerfTable = _VoadmPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 2)
)
if mibBuilder.loadTexts:
    voadmPerfTable.setStatus("mandatory")
_VoadmPerfEntry_Object = MibTableRow
voadmPerfEntry = _VoadmPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 2, 1)
)
voadmPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "voadmPerfLocation"),
    (0, "LUXN-MIB", "voadmPerfShelf"),
    (0, "LUXN-MIB", "voadmPerfSlot"),
)
if mibBuilder.loadTexts:
    voadmPerfEntry.setStatus("mandatory")
_VoadmPerfLocation_Type = CardLocation
_VoadmPerfLocation_Object = MibTableColumn
voadmPerfLocation = _VoadmPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 2, 1, 1),
    _VoadmPerfLocation_Type()
)
voadmPerfLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmPerfLocation.setStatus("mandatory")
_VoadmPerfShelf_Type = CardShelf
_VoadmPerfShelf_Object = MibTableColumn
voadmPerfShelf = _VoadmPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 2, 1, 2),
    _VoadmPerfShelf_Type()
)
voadmPerfShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmPerfShelf.setStatus("mandatory")
_VoadmPerfSlot_Type = CardSlot
_VoadmPerfSlot_Object = MibTableColumn
voadmPerfSlot = _VoadmPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 2, 1, 3),
    _VoadmPerfSlot_Type()
)
voadmPerfSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmPerfSlot.setStatus("mandatory")
_VoadmType_Type = CardType
_VoadmType_Object = MibTableColumn
voadmType = _VoadmType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 2, 1, 4),
    _VoadmType_Type()
)
voadmType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmType.setStatus("mandatory")
_VoadmPerfState_Type = CardState
_VoadmPerfState_Object = MibTableColumn
voadmPerfState = _VoadmPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 2, 1, 5),
    _VoadmPerfState_Type()
)
voadmPerfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmPerfState.setStatus("mandatory")
_VoadmPerfStatus_Type = CardStatus
_VoadmPerfStatus_Object = MibTableColumn
voadmPerfStatus = _VoadmPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 2, 1, 6),
    _VoadmPerfStatus_Type()
)
voadmPerfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmPerfStatus.setStatus("mandatory")
_VoadmLastBootTime_Type = DateAndTime
_VoadmLastBootTime_Object = MibTableColumn
voadmLastBootTime = _VoadmLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 2, 1, 7),
    _VoadmLastBootTime_Type()
)
voadmLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmLastBootTime.setStatus("mandatory")
_VoadmAvailTime_Type = Counter32
_VoadmAvailTime_Object = MibTableColumn
voadmAvailTime = _VoadmAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 2, 1, 8),
    _VoadmAvailTime_Type()
)
voadmAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmAvailTime.setStatus("mandatory")
_VoadmErrFreeSecs_Type = Counter32
_VoadmErrFreeSecs_Object = MibTableColumn
voadmErrFreeSecs = _VoadmErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 2, 1, 9),
    _VoadmErrFreeSecs_Type()
)
voadmErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmErrFreeSecs.setStatus("mandatory")
_DmmPerf_ObjectIdentity = ObjectIdentity
dmmPerf = _DmmPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24)
)
_DmmNumEvents_Type = Counter32
_DmmNumEvents_Object = MibScalar
dmmNumEvents = _DmmNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 1),
    _DmmNumEvents_Type()
)
dmmNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmNumEvents.setStatus("mandatory")
_DmmPerfTable_Object = MibTable
dmmPerfTable = _DmmPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 2)
)
if mibBuilder.loadTexts:
    dmmPerfTable.setStatus("mandatory")
_DmmPerfEntry_Object = MibTableRow
dmmPerfEntry = _DmmPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 2, 1)
)
dmmPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "dmmPerfLocation"),
    (0, "LUXN-MIB", "dmmPerfShelf"),
    (0, "LUXN-MIB", "dmmPerfSlot"),
)
if mibBuilder.loadTexts:
    dmmPerfEntry.setStatus("mandatory")
_DmmPerfLocation_Type = CardLocation
_DmmPerfLocation_Object = MibTableColumn
dmmPerfLocation = _DmmPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 2, 1, 1),
    _DmmPerfLocation_Type()
)
dmmPerfLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPerfLocation.setStatus("mandatory")
_DmmPerfShelf_Type = CardShelf
_DmmPerfShelf_Object = MibTableColumn
dmmPerfShelf = _DmmPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 2, 1, 2),
    _DmmPerfShelf_Type()
)
dmmPerfShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPerfShelf.setStatus("mandatory")
_DmmPerfSlot_Type = CardSlot
_DmmPerfSlot_Object = MibTableColumn
dmmPerfSlot = _DmmPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 2, 1, 3),
    _DmmPerfSlot_Type()
)
dmmPerfSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPerfSlot.setStatus("mandatory")
_DmmPerfState_Type = CardState
_DmmPerfState_Object = MibTableColumn
dmmPerfState = _DmmPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 2, 1, 4),
    _DmmPerfState_Type()
)
dmmPerfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPerfState.setStatus("mandatory")
_DmmPerfStatus_Type = CardStatus
_DmmPerfStatus_Object = MibTableColumn
dmmPerfStatus = _DmmPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 2, 1, 5),
    _DmmPerfStatus_Type()
)
dmmPerfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPerfStatus.setStatus("mandatory")
_DmmLastBootTime_Type = DateAndTime
_DmmLastBootTime_Object = MibTableColumn
dmmLastBootTime = _DmmLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 2, 1, 6),
    _DmmLastBootTime_Type()
)
dmmLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmLastBootTime.setStatus("mandatory")
_DmmAvailTime_Type = Counter32
_DmmAvailTime_Object = MibTableColumn
dmmAvailTime = _DmmAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 2, 1, 7),
    _DmmAvailTime_Type()
)
dmmAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmAvailTime.setStatus("mandatory")
_DmmErrFreeSecs_Type = Counter32
_DmmErrFreeSecs_Object = MibTableColumn
dmmErrFreeSecs = _DmmErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 2, 1, 8),
    _DmmErrFreeSecs_Type()
)
dmmErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmErrFreeSecs.setStatus("mandatory")
_DmmCntrTable_Object = MibTable
dmmCntrTable = _DmmCntrTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3)
)
if mibBuilder.loadTexts:
    dmmCntrTable.setStatus("mandatory")
_DmmCntrEntry_Object = MibTableRow
dmmCntrEntry = _DmmCntrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1)
)
dmmCntrEntry.setIndexNames(
    (0, "LUXN-MIB", "dmmCntrLocation"),
    (0, "LUXN-MIB", "dmmCntrShelf"),
    (0, "LUXN-MIB", "dmmCntrSlot"),
    (0, "LUXN-MIB", "dmmCntrType"),
)
if mibBuilder.loadTexts:
    dmmCntrEntry.setStatus("mandatory")
_DmmCntrLocation_Type = CardLocation
_DmmCntrLocation_Object = MibTableColumn
dmmCntrLocation = _DmmCntrLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 1),
    _DmmCntrLocation_Type()
)
dmmCntrLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmCntrLocation.setStatus("mandatory")
_DmmCntrShelf_Type = CardShelf
_DmmCntrShelf_Object = MibTableColumn
dmmCntrShelf = _DmmCntrShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 2),
    _DmmCntrShelf_Type()
)
dmmCntrShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmCntrShelf.setStatus("mandatory")
_DmmCntrSlot_Type = CardSlot
_DmmCntrSlot_Object = MibTableColumn
dmmCntrSlot = _DmmCntrSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 3),
    _DmmCntrSlot_Type()
)
dmmCntrSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmCntrSlot.setStatus("mandatory")


class _DmmCntrType_Type(Integer32):
    """Custom type dmmCntrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("hdlc", 3),
          ("ibm", 2),
          ("spi", 1))
    )


_DmmCntrType_Type.__name__ = "Integer32"
_DmmCntrType_Object = MibTableColumn
dmmCntrType = _DmmCntrType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 4),
    _DmmCntrType_Type()
)
dmmCntrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmCntrType.setStatus("mandatory")
_DmmTotPktSent_Type = Counter32
_DmmTotPktSent_Object = MibTableColumn
dmmTotPktSent = _DmmTotPktSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 5),
    _DmmTotPktSent_Type()
)
dmmTotPktSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmTotPktSent.setStatus("mandatory")
_DmmTotPktRcvd_Type = Counter32
_DmmTotPktRcvd_Object = MibTableColumn
dmmTotPktRcvd = _DmmTotPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 6),
    _DmmTotPktRcvd_Type()
)
dmmTotPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmTotPktRcvd.setStatus("mandatory")
_DmmTotBadTrans_Type = Counter32
_DmmTotBadTrans_Object = MibTableColumn
dmmTotBadTrans = _DmmTotBadTrans_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 7),
    _DmmTotBadTrans_Type()
)
dmmTotBadTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmTotBadTrans.setStatus("mandatory")
_DmmBadPktRcvd_Type = Counter32
_DmmBadPktRcvd_Object = MibTableColumn
dmmBadPktRcvd = _DmmBadPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 8),
    _DmmBadPktRcvd_Type()
)
dmmBadPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmBadPktRcvd.setStatus("mandatory")
_DmmBytesSent_Type = Counter32
_DmmBytesSent_Object = MibTableColumn
dmmBytesSent = _DmmBytesSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 9),
    _DmmBytesSent_Type()
)
dmmBytesSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmBytesSent.setStatus("mandatory")
_DmmBytesRcvd_Type = Counter32
_DmmBytesRcvd_Object = MibTableColumn
dmmBytesRcvd = _DmmBytesRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 10),
    _DmmBytesRcvd_Type()
)
dmmBytesRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmBytesRcvd.setStatus("mandatory")
_DmmMsgsDlvrd_Type = Counter32
_DmmMsgsDlvrd_Object = MibTableColumn
dmmMsgsDlvrd = _DmmMsgsDlvrd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 11),
    _DmmMsgsDlvrd_Type()
)
dmmMsgsDlvrd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmMsgsDlvrd.setStatus("mandatory")
_DmmClearCntrs_Type = ResetType
_DmmClearCntrs_Object = MibTableColumn
dmmClearCntrs = _DmmClearCntrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 12),
    _DmmClearCntrs_Type()
)
dmmClearCntrs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dmmClearCntrs.setStatus("mandatory")
_DmmPmTable_Object = MibTable
dmmPmTable = _DmmPmTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4)
)
if mibBuilder.loadTexts:
    dmmPmTable.setStatus("mandatory")
_DmmPmEntry_Object = MibTableRow
dmmPmEntry = _DmmPmEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4, 1)
)
dmmPmEntry.setIndexNames(
    (0, "LUXN-MIB", "dmmPmLocation"),
    (0, "LUXN-MIB", "dmmPmShelf"),
    (0, "LUXN-MIB", "dmmPmSlot"),
    (0, "LUXN-MIB", "dmmPmType"),
)
if mibBuilder.loadTexts:
    dmmPmEntry.setStatus("mandatory")
_DmmPmLocation_Type = CardLocation
_DmmPmLocation_Object = MibTableColumn
dmmPmLocation = _DmmPmLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4, 1, 1),
    _DmmPmLocation_Type()
)
dmmPmLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPmLocation.setStatus("mandatory")
_DmmPmShelf_Type = CardShelf
_DmmPmShelf_Object = MibTableColumn
dmmPmShelf = _DmmPmShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4, 1, 2),
    _DmmPmShelf_Type()
)
dmmPmShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPmShelf.setStatus("mandatory")
_DmmPmSlot_Type = CardSlot
_DmmPmSlot_Object = MibTableColumn
dmmPmSlot = _DmmPmSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4, 1, 3),
    _DmmPmSlot_Type()
)
dmmPmSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPmSlot.setStatus("mandatory")


class _DmmPmType_Type(Integer32):
    """Custom type dmmPmType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("link", 1),
          ("port1", 2),
          ("port2", 3))
    )


_DmmPmType_Type.__name__ = "Integer32"
_DmmPmType_Object = MibTableColumn
dmmPmType = _DmmPmType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4, 1, 4),
    _DmmPmType_Type()
)
dmmPmType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPmType.setStatus("mandatory")
_DmmPmErrors_Type = Counter32
_DmmPmErrors_Object = MibTableColumn
dmmPmErrors = _DmmPmErrors_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4, 1, 5),
    _DmmPmErrors_Type()
)
dmmPmErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPmErrors.setStatus("mandatory")
_DmmPmErredSecs_Type = Counter32
_DmmPmErredSecs_Object = MibTableColumn
dmmPmErredSecs = _DmmPmErredSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4, 1, 6),
    _DmmPmErredSecs_Type()
)
dmmPmErredSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPmErredSecs.setStatus("mandatory")
_DmmStartTime_Type = DateAndTime
_DmmStartTime_Object = MibTableColumn
dmmStartTime = _DmmStartTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4, 1, 7),
    _DmmStartTime_Type()
)
dmmStartTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmStartTime.setStatus("mandatory")
_DmmClearPmCntrs_Type = ResetType
_DmmClearPmCntrs_Object = MibTableColumn
dmmClearPmCntrs = _DmmClearPmCntrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4, 1, 8),
    _DmmClearPmCntrs_Type()
)
dmmClearPmCntrs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    dmmClearPmCntrs.setStatus("mandatory")
_DmmPmRxPower_Type = DisplayString
_DmmPmRxPower_Object = MibTableColumn
dmmPmRxPower = _DmmPmRxPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4, 1, 9),
    _DmmPmRxPower_Type()
)
dmmPmRxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPmRxPower.setStatus("mandatory")
_DmmPmTxPower_Type = DisplayString
_DmmPmTxPower_Object = MibTableColumn
dmmPmTxPower = _DmmPmTxPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4, 1, 10),
    _DmmPmTxPower_Type()
)
dmmPmTxPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmPmTxPower.setStatus("mandatory")
_Ocm10gfPerf_ObjectIdentity = ObjectIdentity
ocm10gfPerf = _Ocm10gfPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25)
)
_Ocm10gfNumEvents_Type = Counter32
_Ocm10gfNumEvents_Object = MibScalar
ocm10gfNumEvents = _Ocm10gfNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 1),
    _Ocm10gfNumEvents_Type()
)
ocm10gfNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfNumEvents.setStatus("mandatory")
_Ocm10gfPerfTable_Object = MibTable
ocm10gfPerfTable = _Ocm10gfPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 2)
)
if mibBuilder.loadTexts:
    ocm10gfPerfTable.setStatus("mandatory")
_Ocm10gfPerfEntry_Object = MibTableRow
ocm10gfPerfEntry = _Ocm10gfPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 2, 1)
)
ocm10gfPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm10gfPerfLocation"),
    (0, "LUXN-MIB", "ocm10gfPerfShelf"),
    (0, "LUXN-MIB", "ocm10gfPerfSlot"),
)
if mibBuilder.loadTexts:
    ocm10gfPerfEntry.setStatus("mandatory")
_Ocm10gfPerfLocation_Type = CardLocation
_Ocm10gfPerfLocation_Object = MibTableColumn
ocm10gfPerfLocation = _Ocm10gfPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 2, 1, 1),
    _Ocm10gfPerfLocation_Type()
)
ocm10gfPerfLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPerfLocation.setStatus("mandatory")
_Ocm10gfPerfShelf_Type = CardShelf
_Ocm10gfPerfShelf_Object = MibTableColumn
ocm10gfPerfShelf = _Ocm10gfPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 2, 1, 2),
    _Ocm10gfPerfShelf_Type()
)
ocm10gfPerfShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPerfShelf.setStatus("mandatory")
_Ocm10gfPerfSlot_Type = CardSlot
_Ocm10gfPerfSlot_Object = MibTableColumn
ocm10gfPerfSlot = _Ocm10gfPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 2, 1, 3),
    _Ocm10gfPerfSlot_Type()
)
ocm10gfPerfSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPerfSlot.setStatus("mandatory")
_Ocm10gfPerfState_Type = CardState
_Ocm10gfPerfState_Object = MibTableColumn
ocm10gfPerfState = _Ocm10gfPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 2, 1, 4),
    _Ocm10gfPerfState_Type()
)
ocm10gfPerfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPerfState.setStatus("mandatory")
_Ocm10gfPerfStatus_Type = CardStatus
_Ocm10gfPerfStatus_Object = MibTableColumn
ocm10gfPerfStatus = _Ocm10gfPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 2, 1, 5),
    _Ocm10gfPerfStatus_Type()
)
ocm10gfPerfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPerfStatus.setStatus("mandatory")
_Ocm10gfLastBootTime_Type = DateAndTime
_Ocm10gfLastBootTime_Object = MibTableColumn
ocm10gfLastBootTime = _Ocm10gfLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 2, 1, 6),
    _Ocm10gfLastBootTime_Type()
)
ocm10gfLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfLastBootTime.setStatus("mandatory")
_Ocm10gfAvailTime_Type = Counter32
_Ocm10gfAvailTime_Object = MibTableColumn
ocm10gfAvailTime = _Ocm10gfAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 2, 1, 7),
    _Ocm10gfAvailTime_Type()
)
ocm10gfAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfAvailTime.setStatus("mandatory")
_Ocm10gfErrFreeSecs_Type = Counter32
_Ocm10gfErrFreeSecs_Object = MibTableColumn
ocm10gfErrFreeSecs = _Ocm10gfErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 2, 1, 8),
    _Ocm10gfErrFreeSecs_Type()
)
ocm10gfErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfErrFreeSecs.setStatus("mandatory")
_Ocm10gfCntrTable_Object = MibTable
ocm10gfCntrTable = _Ocm10gfCntrTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3)
)
if mibBuilder.loadTexts:
    ocm10gfCntrTable.setStatus("mandatory")
_Ocm10gfCntrEntry_Object = MibTableRow
ocm10gfCntrEntry = _Ocm10gfCntrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1)
)
ocm10gfCntrEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm10gfCntrLocation"),
    (0, "LUXN-MIB", "ocm10gfCntrShelf"),
    (0, "LUXN-MIB", "ocm10gfCntrSlot"),
    (0, "LUXN-MIB", "ocm10gfCntrType"),
)
if mibBuilder.loadTexts:
    ocm10gfCntrEntry.setStatus("mandatory")
_Ocm10gfCntrLocation_Type = CardLocation
_Ocm10gfCntrLocation_Object = MibTableColumn
ocm10gfCntrLocation = _Ocm10gfCntrLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 1),
    _Ocm10gfCntrLocation_Type()
)
ocm10gfCntrLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfCntrLocation.setStatus("mandatory")
_Ocm10gfCntrShelf_Type = CardShelf
_Ocm10gfCntrShelf_Object = MibTableColumn
ocm10gfCntrShelf = _Ocm10gfCntrShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 2),
    _Ocm10gfCntrShelf_Type()
)
ocm10gfCntrShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfCntrShelf.setStatus("mandatory")
_Ocm10gfCntrSlot_Type = CardSlot
_Ocm10gfCntrSlot_Object = MibTableColumn
ocm10gfCntrSlot = _Ocm10gfCntrSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 3),
    _Ocm10gfCntrSlot_Type()
)
ocm10gfCntrSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfCntrSlot.setStatus("mandatory")


class _Ocm10gfCntrType_Type(Integer32):
    """Custom type ocm10gfCntrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("hdlc", 3),
          ("ibm", 2),
          ("spi", 1))
    )


_Ocm10gfCntrType_Type.__name__ = "Integer32"
_Ocm10gfCntrType_Object = MibTableColumn
ocm10gfCntrType = _Ocm10gfCntrType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 4),
    _Ocm10gfCntrType_Type()
)
ocm10gfCntrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfCntrType.setStatus("mandatory")
_Ocm10gfTotPktSent_Type = Counter32
_Ocm10gfTotPktSent_Object = MibTableColumn
ocm10gfTotPktSent = _Ocm10gfTotPktSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 5),
    _Ocm10gfTotPktSent_Type()
)
ocm10gfTotPktSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfTotPktSent.setStatus("mandatory")
_Ocm10gfTotPktRcvd_Type = Counter32
_Ocm10gfTotPktRcvd_Object = MibTableColumn
ocm10gfTotPktRcvd = _Ocm10gfTotPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 6),
    _Ocm10gfTotPktRcvd_Type()
)
ocm10gfTotPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfTotPktRcvd.setStatus("mandatory")
_Ocm10gfTotBadTrans_Type = Counter32
_Ocm10gfTotBadTrans_Object = MibTableColumn
ocm10gfTotBadTrans = _Ocm10gfTotBadTrans_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 7),
    _Ocm10gfTotBadTrans_Type()
)
ocm10gfTotBadTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfTotBadTrans.setStatus("mandatory")
_Ocm10gfBadPktRcvd_Type = Counter32
_Ocm10gfBadPktRcvd_Object = MibTableColumn
ocm10gfBadPktRcvd = _Ocm10gfBadPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 8),
    _Ocm10gfBadPktRcvd_Type()
)
ocm10gfBadPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfBadPktRcvd.setStatus("mandatory")
_Ocm10gfBytesSent_Type = Counter32
_Ocm10gfBytesSent_Object = MibTableColumn
ocm10gfBytesSent = _Ocm10gfBytesSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 9),
    _Ocm10gfBytesSent_Type()
)
ocm10gfBytesSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfBytesSent.setStatus("mandatory")
_Ocm10gfBytesRcvd_Type = Counter32
_Ocm10gfBytesRcvd_Object = MibTableColumn
ocm10gfBytesRcvd = _Ocm10gfBytesRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 10),
    _Ocm10gfBytesRcvd_Type()
)
ocm10gfBytesRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfBytesRcvd.setStatus("mandatory")
_Ocm10gfMsgsDlvrd_Type = Counter32
_Ocm10gfMsgsDlvrd_Object = MibTableColumn
ocm10gfMsgsDlvrd = _Ocm10gfMsgsDlvrd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 11),
    _Ocm10gfMsgsDlvrd_Type()
)
ocm10gfMsgsDlvrd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfMsgsDlvrd.setStatus("mandatory")
_Ocm10gfClearCntrs_Type = ResetType
_Ocm10gfClearCntrs_Object = MibTableColumn
ocm10gfClearCntrs = _Ocm10gfClearCntrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 12),
    _Ocm10gfClearCntrs_Type()
)
ocm10gfClearCntrs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm10gfClearCntrs.setStatus("mandatory")
_Ocm10gfPmTable_Object = MibTable
ocm10gfPmTable = _Ocm10gfPmTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4)
)
if mibBuilder.loadTexts:
    ocm10gfPmTable.setStatus("mandatory")
_Ocm10gfPmEntry_Object = MibTableRow
ocm10gfPmEntry = _Ocm10gfPmEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1)
)
ocm10gfPmEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm10gfPmLocation"),
    (0, "LUXN-MIB", "ocm10gfPmShelf"),
    (0, "LUXN-MIB", "ocm10gfPmSlot"),
)
if mibBuilder.loadTexts:
    ocm10gfPmEntry.setStatus("mandatory")
_Ocm10gfPmLocation_Type = CardLocation
_Ocm10gfPmLocation_Object = MibTableColumn
ocm10gfPmLocation = _Ocm10gfPmLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 1),
    _Ocm10gfPmLocation_Type()
)
ocm10gfPmLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPmLocation.setStatus("mandatory")
_Ocm10gfPmShelf_Type = CardShelf
_Ocm10gfPmShelf_Object = MibTableColumn
ocm10gfPmShelf = _Ocm10gfPmShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 2),
    _Ocm10gfPmShelf_Type()
)
ocm10gfPmShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPmShelf.setStatus("mandatory")
_Ocm10gfPmSlot_Type = CardSlot
_Ocm10gfPmSlot_Object = MibTableColumn
ocm10gfPmSlot = _Ocm10gfPmSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 3),
    _Ocm10gfPmSlot_Type()
)
ocm10gfPmSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPmSlot.setStatus("mandatory")
_Ocm10gfPmNumIntervals_Type = Integer32
_Ocm10gfPmNumIntervals_Object = MibTableColumn
ocm10gfPmNumIntervals = _Ocm10gfPmNumIntervals_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 4),
    _Ocm10gfPmNumIntervals_Type()
)
ocm10gfPmNumIntervals.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPmNumIntervals.setStatus("mandatory")
_Ocm10gfPmLinkRxPwr_Type = DisplayString
_Ocm10gfPmLinkRxPwr_Object = MibTableColumn
ocm10gfPmLinkRxPwr = _Ocm10gfPmLinkRxPwr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 5),
    _Ocm10gfPmLinkRxPwr_Type()
)
ocm10gfPmLinkRxPwr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPmLinkRxPwr.setStatus("mandatory")
_Ocm10gfPmLinkTxPwr_Type = DisplayString
_Ocm10gfPmLinkTxPwr_Object = MibTableColumn
ocm10gfPmLinkTxPwr = _Ocm10gfPmLinkTxPwr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 6),
    _Ocm10gfPmLinkTxPwr_Type()
)
ocm10gfPmLinkTxPwr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPmLinkTxPwr.setStatus("mandatory")
_Ocm10gfPmLinkFecErrors_Type = DisplayString
_Ocm10gfPmLinkFecErrors_Object = MibTableColumn
ocm10gfPmLinkFecErrors = _Ocm10gfPmLinkFecErrors_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 7),
    _Ocm10gfPmLinkFecErrors_Type()
)
ocm10gfPmLinkFecErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPmLinkFecErrors.setStatus("mandatory")
_Ocm10gfPmLinkUncorrectedFecErrs_Type = Counter32
_Ocm10gfPmLinkUncorrectedFecErrs_Object = MibTableColumn
ocm10gfPmLinkUncorrectedFecErrs = _Ocm10gfPmLinkUncorrectedFecErrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 8),
    _Ocm10gfPmLinkUncorrectedFecErrs_Type()
)
ocm10gfPmLinkUncorrectedFecErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPmLinkUncorrectedFecErrs.setStatus("mandatory")
_Ocm10gfPmLinkCorrectedFecErrs_Type = DisplayString
_Ocm10gfPmLinkCorrectedFecErrs_Object = MibTableColumn
ocm10gfPmLinkCorrectedFecErrs = _Ocm10gfPmLinkCorrectedFecErrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 9),
    _Ocm10gfPmLinkCorrectedFecErrs_Type()
)
ocm10gfPmLinkCorrectedFecErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPmLinkCorrectedFecErrs.setStatus("mandatory")
_Ocm10gfPmLinkCorrectedOnesErr_Type = DisplayString
_Ocm10gfPmLinkCorrectedOnesErr_Object = MibTableColumn
ocm10gfPmLinkCorrectedOnesErr = _Ocm10gfPmLinkCorrectedOnesErr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 10),
    _Ocm10gfPmLinkCorrectedOnesErr_Type()
)
ocm10gfPmLinkCorrectedOnesErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPmLinkCorrectedOnesErr.setStatus("mandatory")
_Ocm10gfPmLinkErredSeconds_Type = Counter32
_Ocm10gfPmLinkErredSeconds_Object = MibTableColumn
ocm10gfPmLinkErredSeconds = _Ocm10gfPmLinkErredSeconds_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 11),
    _Ocm10gfPmLinkErredSeconds_Type()
)
ocm10gfPmLinkErredSeconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPmLinkErredSeconds.setStatus("mandatory")
_Ocm10gfPmCpeRxPwr_Type = DisplayString
_Ocm10gfPmCpeRxPwr_Object = MibTableColumn
ocm10gfPmCpeRxPwr = _Ocm10gfPmCpeRxPwr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 12),
    _Ocm10gfPmCpeRxPwr_Type()
)
ocm10gfPmCpeRxPwr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPmCpeRxPwr.setStatus("mandatory")
_Ocm10gfPmCpeTxPwr_Type = DisplayString
_Ocm10gfPmCpeTxPwr_Object = MibTableColumn
ocm10gfPmCpeTxPwr = _Ocm10gfPmCpeTxPwr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 13),
    _Ocm10gfPmCpeTxPwr_Type()
)
ocm10gfPmCpeTxPwr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPmCpeTxPwr.setStatus("mandatory")
_Ocm10gfPmCpeSonetRxB2Errs_Type = DisplayString
_Ocm10gfPmCpeSonetRxB2Errs_Object = MibTableColumn
ocm10gfPmCpeSonetRxB2Errs = _Ocm10gfPmCpeSonetRxB2Errs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 14),
    _Ocm10gfPmCpeSonetRxB2Errs_Type()
)
ocm10gfPmCpeSonetRxB2Errs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPmCpeSonetRxB2Errs.setStatus("mandatory")
_Ocm10gfPmCpeSonetTxB2Errs_Type = DisplayString
_Ocm10gfPmCpeSonetTxB2Errs_Object = MibTableColumn
ocm10gfPmCpeSonetTxB2Errs = _Ocm10gfPmCpeSonetTxB2Errs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 15),
    _Ocm10gfPmCpeSonetTxB2Errs_Type()
)
ocm10gfPmCpeSonetTxB2Errs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPmCpeSonetTxB2Errs.setStatus("mandatory")
_Ocm10gfPmCpe10GbeRxTotalPkts_Type = DisplayString
_Ocm10gfPmCpe10GbeRxTotalPkts_Object = MibTableColumn
ocm10gfPmCpe10GbeRxTotalPkts = _Ocm10gfPmCpe10GbeRxTotalPkts_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 16),
    _Ocm10gfPmCpe10GbeRxTotalPkts_Type()
)
ocm10gfPmCpe10GbeRxTotalPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPmCpe10GbeRxTotalPkts.setStatus("mandatory")
_Ocm10gfPmCpe10GbeRxErredPkts_Type = DisplayString
_Ocm10gfPmCpe10GbeRxErredPkts_Object = MibTableColumn
ocm10gfPmCpe10GbeRxErredPkts = _Ocm10gfPmCpe10GbeRxErredPkts_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 17),
    _Ocm10gfPmCpe10GbeRxErredPkts_Type()
)
ocm10gfPmCpe10GbeRxErredPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPmCpe10GbeRxErredPkts.setStatus("mandatory")
_Ocm10gfPmCpe10GbeTxTotalPkts_Type = DisplayString
_Ocm10gfPmCpe10GbeTxTotalPkts_Object = MibTableColumn
ocm10gfPmCpe10GbeTxTotalPkts = _Ocm10gfPmCpe10GbeTxTotalPkts_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 18),
    _Ocm10gfPmCpe10GbeTxTotalPkts_Type()
)
ocm10gfPmCpe10GbeTxTotalPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPmCpe10GbeTxTotalPkts.setStatus("mandatory")
_Ocm10gfPmCpe10gbeTxErredPkts_Type = DisplayString
_Ocm10gfPmCpe10gbeTxErredPkts_Object = MibTableColumn
ocm10gfPmCpe10gbeTxErredPkts = _Ocm10gfPmCpe10gbeTxErredPkts_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 19),
    _Ocm10gfPmCpe10gbeTxErredPkts_Type()
)
ocm10gfPmCpe10gbeTxErredPkts.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPmCpe10gbeTxErredPkts.setStatus("mandatory")
_Ocm10gfPmCpeErredSeconds_Type = Counter32
_Ocm10gfPmCpeErredSeconds_Object = MibTableColumn
ocm10gfPmCpeErredSeconds = _Ocm10gfPmCpeErredSeconds_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 20),
    _Ocm10gfPmCpeErredSeconds_Type()
)
ocm10gfPmCpeErredSeconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfPmCpeErredSeconds.setStatus("mandatory")
_Ocm10gfClearPmCntrs_Type = ResetType
_Ocm10gfClearPmCntrs_Object = MibTableColumn
ocm10gfClearPmCntrs = _Ocm10gfClearPmCntrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 21),
    _Ocm10gfClearPmCntrs_Type()
)
ocm10gfClearPmCntrs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm10gfClearPmCntrs.setStatus("mandatory")
_Ocm2Perf_ObjectIdentity = ObjectIdentity
ocm2Perf = _Ocm2Perf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26)
)
_Ocm2NumEvents_Type = Counter32
_Ocm2NumEvents_Object = MibScalar
ocm2NumEvents = _Ocm2NumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 1),
    _Ocm2NumEvents_Type()
)
ocm2NumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2NumEvents.setStatus("mandatory")
_Ocm2PerfTable_Object = MibTable
ocm2PerfTable = _Ocm2PerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 2)
)
if mibBuilder.loadTexts:
    ocm2PerfTable.setStatus("mandatory")
_Ocm2PerfEntry_Object = MibTableRow
ocm2PerfEntry = _Ocm2PerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 2, 1)
)
ocm2PerfEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm2PerfLocation"),
    (0, "LUXN-MIB", "ocm2PerfShelf"),
    (0, "LUXN-MIB", "ocm2PerfSlot"),
)
if mibBuilder.loadTexts:
    ocm2PerfEntry.setStatus("mandatory")
_Ocm2PerfLocation_Type = CardLocation
_Ocm2PerfLocation_Object = MibTableColumn
ocm2PerfLocation = _Ocm2PerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 2, 1, 1),
    _Ocm2PerfLocation_Type()
)
ocm2PerfLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PerfLocation.setStatus("mandatory")
_Ocm2PerfShelf_Type = CardShelf
_Ocm2PerfShelf_Object = MibTableColumn
ocm2PerfShelf = _Ocm2PerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 2, 1, 2),
    _Ocm2PerfShelf_Type()
)
ocm2PerfShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PerfShelf.setStatus("mandatory")
_Ocm2PerfSlot_Type = CardSlot
_Ocm2PerfSlot_Object = MibTableColumn
ocm2PerfSlot = _Ocm2PerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 2, 1, 3),
    _Ocm2PerfSlot_Type()
)
ocm2PerfSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PerfSlot.setStatus("mandatory")
_Ocm2PerfState_Type = CardState
_Ocm2PerfState_Object = MibTableColumn
ocm2PerfState = _Ocm2PerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 2, 1, 4),
    _Ocm2PerfState_Type()
)
ocm2PerfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PerfState.setStatus("mandatory")
_Ocm2PerfStatus_Type = CardStatus
_Ocm2PerfStatus_Object = MibTableColumn
ocm2PerfStatus = _Ocm2PerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 2, 1, 5),
    _Ocm2PerfStatus_Type()
)
ocm2PerfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PerfStatus.setStatus("mandatory")
_Ocm2LastBootTime_Type = DateAndTime
_Ocm2LastBootTime_Object = MibTableColumn
ocm2LastBootTime = _Ocm2LastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 2, 1, 6),
    _Ocm2LastBootTime_Type()
)
ocm2LastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2LastBootTime.setStatus("mandatory")
_Ocm2AvailTime_Type = Counter32
_Ocm2AvailTime_Object = MibTableColumn
ocm2AvailTime = _Ocm2AvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 2, 1, 7),
    _Ocm2AvailTime_Type()
)
ocm2AvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2AvailTime.setStatus("mandatory")
_Ocm2ErrFreeSecs_Type = Counter32
_Ocm2ErrFreeSecs_Object = MibTableColumn
ocm2ErrFreeSecs = _Ocm2ErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 2, 1, 8),
    _Ocm2ErrFreeSecs_Type()
)
ocm2ErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2ErrFreeSecs.setStatus("mandatory")
_Ocm2CntrTable_Object = MibTable
ocm2CntrTable = _Ocm2CntrTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3)
)
if mibBuilder.loadTexts:
    ocm2CntrTable.setStatus("mandatory")
_Ocm2CntrEntry_Object = MibTableRow
ocm2CntrEntry = _Ocm2CntrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1)
)
ocm2CntrEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm2CntrLocation"),
    (0, "LUXN-MIB", "ocm2CntrShelf"),
    (0, "LUXN-MIB", "ocm2CntrSlot"),
    (0, "LUXN-MIB", "ocm2CntrType"),
)
if mibBuilder.loadTexts:
    ocm2CntrEntry.setStatus("mandatory")
_Ocm2CntrLocation_Type = CardLocation
_Ocm2CntrLocation_Object = MibTableColumn
ocm2CntrLocation = _Ocm2CntrLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 1),
    _Ocm2CntrLocation_Type()
)
ocm2CntrLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2CntrLocation.setStatus("mandatory")
_Ocm2CntrShelf_Type = CardShelf
_Ocm2CntrShelf_Object = MibTableColumn
ocm2CntrShelf = _Ocm2CntrShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 2),
    _Ocm2CntrShelf_Type()
)
ocm2CntrShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2CntrShelf.setStatus("mandatory")
_Ocm2CntrSlot_Type = CardSlot
_Ocm2CntrSlot_Object = MibTableColumn
ocm2CntrSlot = _Ocm2CntrSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 3),
    _Ocm2CntrSlot_Type()
)
ocm2CntrSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2CntrSlot.setStatus("mandatory")


class _Ocm2CntrType_Type(Integer32):
    """Custom type ocm2CntrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("hdlc", 4),
          ("ibm1", 2),
          ("ibm2", 3),
          ("spi", 1))
    )


_Ocm2CntrType_Type.__name__ = "Integer32"
_Ocm2CntrType_Object = MibTableColumn
ocm2CntrType = _Ocm2CntrType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 4),
    _Ocm2CntrType_Type()
)
ocm2CntrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2CntrType.setStatus("mandatory")
_Ocm2TotPktSent_Type = Counter32
_Ocm2TotPktSent_Object = MibTableColumn
ocm2TotPktSent = _Ocm2TotPktSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 5),
    _Ocm2TotPktSent_Type()
)
ocm2TotPktSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2TotPktSent.setStatus("mandatory")
_Ocm2TotPktRcvd_Type = Counter32
_Ocm2TotPktRcvd_Object = MibTableColumn
ocm2TotPktRcvd = _Ocm2TotPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 6),
    _Ocm2TotPktRcvd_Type()
)
ocm2TotPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2TotPktRcvd.setStatus("mandatory")
_Ocm2TotBadTrans_Type = Counter32
_Ocm2TotBadTrans_Object = MibTableColumn
ocm2TotBadTrans = _Ocm2TotBadTrans_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 7),
    _Ocm2TotBadTrans_Type()
)
ocm2TotBadTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2TotBadTrans.setStatus("mandatory")
_Ocm2BadPktRcvd_Type = Counter32
_Ocm2BadPktRcvd_Object = MibTableColumn
ocm2BadPktRcvd = _Ocm2BadPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 8),
    _Ocm2BadPktRcvd_Type()
)
ocm2BadPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2BadPktRcvd.setStatus("mandatory")
_Ocm2BytesSent_Type = Counter32
_Ocm2BytesSent_Object = MibTableColumn
ocm2BytesSent = _Ocm2BytesSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 9),
    _Ocm2BytesSent_Type()
)
ocm2BytesSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2BytesSent.setStatus("mandatory")
_Ocm2BytesRcvd_Type = Counter32
_Ocm2BytesRcvd_Object = MibTableColumn
ocm2BytesRcvd = _Ocm2BytesRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 10),
    _Ocm2BytesRcvd_Type()
)
ocm2BytesRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2BytesRcvd.setStatus("mandatory")
_Ocm2MsgsDlvrd_Type = Counter32
_Ocm2MsgsDlvrd_Object = MibTableColumn
ocm2MsgsDlvrd = _Ocm2MsgsDlvrd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 11),
    _Ocm2MsgsDlvrd_Type()
)
ocm2MsgsDlvrd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2MsgsDlvrd.setStatus("mandatory")
_Ocm2ClearCntrs_Type = ResetType
_Ocm2ClearCntrs_Object = MibTableColumn
ocm2ClearCntrs = _Ocm2ClearCntrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 12),
    _Ocm2ClearCntrs_Type()
)
ocm2ClearCntrs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm2ClearCntrs.setStatus("mandatory")
_Ocm2PmTable_Object = MibTable
ocm2PmTable = _Ocm2PmTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4)
)
if mibBuilder.loadTexts:
    ocm2PmTable.setStatus("mandatory")
_Ocm2PmEntry_Object = MibTableRow
ocm2PmEntry = _Ocm2PmEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1)
)
ocm2PmEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm2PmLocation"),
    (0, "LUXN-MIB", "ocm2PmShelf"),
    (0, "LUXN-MIB", "ocm2PmSlot"),
    (0, "LUXN-MIB", "ocm2PmLink"),
)
if mibBuilder.loadTexts:
    ocm2PmEntry.setStatus("mandatory")
_Ocm2PmLocation_Type = CardLocation
_Ocm2PmLocation_Object = MibTableColumn
ocm2PmLocation = _Ocm2PmLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 1),
    _Ocm2PmLocation_Type()
)
ocm2PmLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PmLocation.setStatus("mandatory")
_Ocm2PmShelf_Type = CardShelf
_Ocm2PmShelf_Object = MibTableColumn
ocm2PmShelf = _Ocm2PmShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 2),
    _Ocm2PmShelf_Type()
)
ocm2PmShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PmShelf.setStatus("mandatory")
_Ocm2PmSlot_Type = CardSlot
_Ocm2PmSlot_Object = MibTableColumn
ocm2PmSlot = _Ocm2PmSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 3),
    _Ocm2PmSlot_Type()
)
ocm2PmSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PmSlot.setStatus("mandatory")


class _Ocm2PmLink_Type(Integer32):
    """Custom type ocm2PmLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("link1", 1),
          ("link2", 2))
    )


_Ocm2PmLink_Type.__name__ = "Integer32"
_Ocm2PmLink_Object = MibTableColumn
ocm2PmLink = _Ocm2PmLink_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 4),
    _Ocm2PmLink_Type()
)
ocm2PmLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PmLink.setStatus("mandatory")
_Ocm2PmLinkRxPwr_Type = DisplayString
_Ocm2PmLinkRxPwr_Object = MibTableColumn
ocm2PmLinkRxPwr = _Ocm2PmLinkRxPwr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 5),
    _Ocm2PmLinkRxPwr_Type()
)
ocm2PmLinkRxPwr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PmLinkRxPwr.setStatus("mandatory")
_Ocm2PmLinkTxPwr_Type = DisplayString
_Ocm2PmLinkTxPwr_Object = MibTableColumn
ocm2PmLinkTxPwr = _Ocm2PmLinkTxPwr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 6),
    _Ocm2PmLinkTxPwr_Type()
)
ocm2PmLinkTxPwr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PmLinkTxPwr.setStatus("mandatory")
_Ocm2PmCpeRxPwr_Type = DisplayString
_Ocm2PmCpeRxPwr_Object = MibTableColumn
ocm2PmCpeRxPwr = _Ocm2PmCpeRxPwr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 7),
    _Ocm2PmCpeRxPwr_Type()
)
ocm2PmCpeRxPwr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PmCpeRxPwr.setStatus("mandatory")
_Ocm2PmCpeTxPwr_Type = DisplayString
_Ocm2PmCpeTxPwr_Object = MibTableColumn
ocm2PmCpeTxPwr = _Ocm2PmCpeTxPwr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 8),
    _Ocm2PmCpeTxPwr_Type()
)
ocm2PmCpeTxPwr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PmCpeTxPwr.setStatus("mandatory")
_Ocm2PmNumLinkRxIntervals_Type = Integer32
_Ocm2PmNumLinkRxIntervals_Object = MibTableColumn
ocm2PmNumLinkRxIntervals = _Ocm2PmNumLinkRxIntervals_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 9),
    _Ocm2PmNumLinkRxIntervals_Type()
)
ocm2PmNumLinkRxIntervals.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PmNumLinkRxIntervals.setStatus("mandatory")
_Ocm2PmLinkRxErrors_Type = DisplayString
_Ocm2PmLinkRxErrors_Object = MibTableColumn
ocm2PmLinkRxErrors = _Ocm2PmLinkRxErrors_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 10),
    _Ocm2PmLinkRxErrors_Type()
)
ocm2PmLinkRxErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PmLinkRxErrors.setStatus("mandatory")
_Ocm2PmLinkRxErredSeconds_Type = Counter32
_Ocm2PmLinkRxErredSeconds_Object = MibTableColumn
ocm2PmLinkRxErredSeconds = _Ocm2PmLinkRxErredSeconds_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 11),
    _Ocm2PmLinkRxErredSeconds_Type()
)
ocm2PmLinkRxErredSeconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PmLinkRxErredSeconds.setStatus("mandatory")
_Ocm2PmNumCpeRxIntervals_Type = Integer32
_Ocm2PmNumCpeRxIntervals_Object = MibTableColumn
ocm2PmNumCpeRxIntervals = _Ocm2PmNumCpeRxIntervals_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 12),
    _Ocm2PmNumCpeRxIntervals_Type()
)
ocm2PmNumCpeRxIntervals.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PmNumCpeRxIntervals.setStatus("mandatory")
_Ocm2PmCpeRxErrors_Type = DisplayString
_Ocm2PmCpeRxErrors_Object = MibTableColumn
ocm2PmCpeRxErrors = _Ocm2PmCpeRxErrors_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 13),
    _Ocm2PmCpeRxErrors_Type()
)
ocm2PmCpeRxErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PmCpeRxErrors.setStatus("mandatory")
_Ocm2PmCpeRxErredSeconds_Type = Counter32
_Ocm2PmCpeRxErredSeconds_Object = MibTableColumn
ocm2PmCpeRxErredSeconds = _Ocm2PmCpeRxErredSeconds_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 14),
    _Ocm2PmCpeRxErredSeconds_Type()
)
ocm2PmCpeRxErredSeconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PmCpeRxErredSeconds.setStatus("mandatory")
_Ocm2PmNumCpeTxIntervals_Type = Integer32
_Ocm2PmNumCpeTxIntervals_Object = MibTableColumn
ocm2PmNumCpeTxIntervals = _Ocm2PmNumCpeTxIntervals_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 15),
    _Ocm2PmNumCpeTxIntervals_Type()
)
ocm2PmNumCpeTxIntervals.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PmNumCpeTxIntervals.setStatus("mandatory")
_Ocm2PmCpeTxErrors_Type = DisplayString
_Ocm2PmCpeTxErrors_Object = MibTableColumn
ocm2PmCpeTxErrors = _Ocm2PmCpeTxErrors_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 16),
    _Ocm2PmCpeTxErrors_Type()
)
ocm2PmCpeTxErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PmCpeTxErrors.setStatus("mandatory")
_Ocm2PmCpeTxErredSeconds_Type = Counter32
_Ocm2PmCpeTxErredSeconds_Object = MibTableColumn
ocm2PmCpeTxErredSeconds = _Ocm2PmCpeTxErredSeconds_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 17),
    _Ocm2PmCpeTxErredSeconds_Type()
)
ocm2PmCpeTxErredSeconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2PmCpeTxErredSeconds.setStatus("mandatory")
_Ocm2ClearPmCntrs_Type = ResetType
_Ocm2ClearPmCntrs_Object = MibTableColumn
ocm2ClearPmCntrs = _Ocm2ClearPmCntrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 18),
    _Ocm2ClearPmCntrs_Type()
)
ocm2ClearPmCntrs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm2ClearPmCntrs.setStatus("mandatory")
_OscPerf_ObjectIdentity = ObjectIdentity
oscPerf = _OscPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27)
)
_OscNumEvents_Type = Counter32
_OscNumEvents_Object = MibScalar
oscNumEvents = _OscNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 1),
    _OscNumEvents_Type()
)
oscNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscNumEvents.setStatus("mandatory")
_OscPerfTable_Object = MibTable
oscPerfTable = _OscPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 2)
)
if mibBuilder.loadTexts:
    oscPerfTable.setStatus("mandatory")
_OscPerfEntry_Object = MibTableRow
oscPerfEntry = _OscPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 2, 1)
)
oscPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "oscPerfLocation"),
    (0, "LUXN-MIB", "oscPerfShelf"),
    (0, "LUXN-MIB", "oscPerfSlot"),
)
if mibBuilder.loadTexts:
    oscPerfEntry.setStatus("mandatory")
_OscPerfLocation_Type = CardLocation
_OscPerfLocation_Object = MibTableColumn
oscPerfLocation = _OscPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 2, 1, 1),
    _OscPerfLocation_Type()
)
oscPerfLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscPerfLocation.setStatus("mandatory")
_OscPerfShelf_Type = CardShelf
_OscPerfShelf_Object = MibTableColumn
oscPerfShelf = _OscPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 2, 1, 2),
    _OscPerfShelf_Type()
)
oscPerfShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscPerfShelf.setStatus("mandatory")
_OscPerfSlot_Type = CardSlot
_OscPerfSlot_Object = MibTableColumn
oscPerfSlot = _OscPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 2, 1, 3),
    _OscPerfSlot_Type()
)
oscPerfSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscPerfSlot.setStatus("mandatory")
_OscPerfState_Type = CardState
_OscPerfState_Object = MibTableColumn
oscPerfState = _OscPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 2, 1, 4),
    _OscPerfState_Type()
)
oscPerfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscPerfState.setStatus("mandatory")
_OscPerfStatus_Type = CardStatus
_OscPerfStatus_Object = MibTableColumn
oscPerfStatus = _OscPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 2, 1, 5),
    _OscPerfStatus_Type()
)
oscPerfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscPerfStatus.setStatus("mandatory")
_OscLastBootTime_Type = DateAndTime
_OscLastBootTime_Object = MibTableColumn
oscLastBootTime = _OscLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 2, 1, 6),
    _OscLastBootTime_Type()
)
oscLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscLastBootTime.setStatus("mandatory")
_OscAvailTime_Type = Counter32
_OscAvailTime_Object = MibTableColumn
oscAvailTime = _OscAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 2, 1, 7),
    _OscAvailTime_Type()
)
oscAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscAvailTime.setStatus("mandatory")
_OscErrFreeSecs_Type = Counter32
_OscErrFreeSecs_Object = MibTableColumn
oscErrFreeSecs = _OscErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 2, 1, 8),
    _OscErrFreeSecs_Type()
)
oscErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscErrFreeSecs.setStatus("mandatory")
_OscCntrTable_Object = MibTable
oscCntrTable = _OscCntrTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3)
)
if mibBuilder.loadTexts:
    oscCntrTable.setStatus("mandatory")
_OscCntrEntry_Object = MibTableRow
oscCntrEntry = _OscCntrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1)
)
oscCntrEntry.setIndexNames(
    (0, "LUXN-MIB", "oscCntrLocation"),
    (0, "LUXN-MIB", "oscCntrShelf"),
    (0, "LUXN-MIB", "oscCntrSlot"),
    (0, "LUXN-MIB", "oscCntrType"),
)
if mibBuilder.loadTexts:
    oscCntrEntry.setStatus("mandatory")
_OscCntrLocation_Type = CardLocation
_OscCntrLocation_Object = MibTableColumn
oscCntrLocation = _OscCntrLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 1),
    _OscCntrLocation_Type()
)
oscCntrLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscCntrLocation.setStatus("mandatory")
_OscCntrShelf_Type = CardShelf
_OscCntrShelf_Object = MibTableColumn
oscCntrShelf = _OscCntrShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 2),
    _OscCntrShelf_Type()
)
oscCntrShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscCntrShelf.setStatus("mandatory")
_OscCntrSlot_Type = CardSlot
_OscCntrSlot_Object = MibTableColumn
oscCntrSlot = _OscCntrSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 3),
    _OscCntrSlot_Type()
)
oscCntrSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscCntrSlot.setStatus("mandatory")


class _OscCntrType_Type(Integer32):
    """Custom type oscCntrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("hdlc", 3),
          ("ibm", 2),
          ("spi", 1))
    )


_OscCntrType_Type.__name__ = "Integer32"
_OscCntrType_Object = MibTableColumn
oscCntrType = _OscCntrType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 4),
    _OscCntrType_Type()
)
oscCntrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscCntrType.setStatus("mandatory")
_OscTotPktSent_Type = Counter32
_OscTotPktSent_Object = MibTableColumn
oscTotPktSent = _OscTotPktSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 5),
    _OscTotPktSent_Type()
)
oscTotPktSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscTotPktSent.setStatus("mandatory")
_OscTotPktRcvd_Type = Counter32
_OscTotPktRcvd_Object = MibTableColumn
oscTotPktRcvd = _OscTotPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 6),
    _OscTotPktRcvd_Type()
)
oscTotPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscTotPktRcvd.setStatus("mandatory")
_OscTotBadTrans_Type = Counter32
_OscTotBadTrans_Object = MibTableColumn
oscTotBadTrans = _OscTotBadTrans_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 7),
    _OscTotBadTrans_Type()
)
oscTotBadTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscTotBadTrans.setStatus("mandatory")
_OscBadPktRcvd_Type = Counter32
_OscBadPktRcvd_Object = MibTableColumn
oscBadPktRcvd = _OscBadPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 8),
    _OscBadPktRcvd_Type()
)
oscBadPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscBadPktRcvd.setStatus("mandatory")
_OscBytesSent_Type = Counter32
_OscBytesSent_Object = MibTableColumn
oscBytesSent = _OscBytesSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 9),
    _OscBytesSent_Type()
)
oscBytesSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscBytesSent.setStatus("mandatory")
_OscBytesRcvd_Type = Counter32
_OscBytesRcvd_Object = MibTableColumn
oscBytesRcvd = _OscBytesRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 10),
    _OscBytesRcvd_Type()
)
oscBytesRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscBytesRcvd.setStatus("mandatory")
_OscMsgsDlvrd_Type = Counter32
_OscMsgsDlvrd_Object = MibTableColumn
oscMsgsDlvrd = _OscMsgsDlvrd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 11),
    _OscMsgsDlvrd_Type()
)
oscMsgsDlvrd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscMsgsDlvrd.setStatus("mandatory")
_OscClearCntrs_Type = ResetType
_OscClearCntrs_Object = MibTableColumn
oscClearCntrs = _OscClearCntrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 12),
    _OscClearCntrs_Type()
)
oscClearCntrs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oscClearCntrs.setStatus("mandatory")
_OscPmTable_Object = MibTable
oscPmTable = _OscPmTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 4)
)
if mibBuilder.loadTexts:
    oscPmTable.setStatus("mandatory")
_OscPmEntry_Object = MibTableRow
oscPmEntry = _OscPmEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 4, 1)
)
oscPmEntry.setIndexNames(
    (0, "LUXN-MIB", "oscPmLocation"),
    (0, "LUXN-MIB", "oscPmShelf"),
    (0, "LUXN-MIB", "oscPmSlot"),
)
if mibBuilder.loadTexts:
    oscPmEntry.setStatus("mandatory")
_OscPmLocation_Type = CardLocation
_OscPmLocation_Object = MibTableColumn
oscPmLocation = _OscPmLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 4, 1, 1),
    _OscPmLocation_Type()
)
oscPmLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscPmLocation.setStatus("mandatory")
_OscPmShelf_Type = CardShelf
_OscPmShelf_Object = MibTableColumn
oscPmShelf = _OscPmShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 4, 1, 2),
    _OscPmShelf_Type()
)
oscPmShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscPmShelf.setStatus("mandatory")
_OscPmSlot_Type = CardSlot
_OscPmSlot_Object = MibTableColumn
oscPmSlot = _OscPmSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 4, 1, 3),
    _OscPmSlot_Type()
)
oscPmSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscPmSlot.setStatus("mandatory")
_OscPmErrors_Type = Counter32
_OscPmErrors_Object = MibTableColumn
oscPmErrors = _OscPmErrors_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 4, 1, 4),
    _OscPmErrors_Type()
)
oscPmErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscPmErrors.setStatus("mandatory")
_OscPmErredSecs_Type = Counter32
_OscPmErredSecs_Object = MibTableColumn
oscPmErredSecs = _OscPmErredSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 4, 1, 5),
    _OscPmErredSecs_Type()
)
oscPmErredSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscPmErredSecs.setStatus("mandatory")
_OscStartTime_Type = DateAndTime
_OscStartTime_Object = MibTableColumn
oscStartTime = _OscStartTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 4, 1, 6),
    _OscStartTime_Type()
)
oscStartTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscStartTime.setStatus("mandatory")
_OscClearPmCntrs_Type = ResetType
_OscClearPmCntrs_Object = MibTableColumn
oscClearPmCntrs = _OscClearPmCntrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 4, 1, 7),
    _OscClearPmCntrs_Type()
)
oscClearPmCntrs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    oscClearPmCntrs.setStatus("mandatory")
_Ocm4gPerf_ObjectIdentity = ObjectIdentity
ocm4gPerf = _Ocm4gPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28)
)
_Ocm4gNumEvents_Type = Counter32
_Ocm4gNumEvents_Object = MibScalar
ocm4gNumEvents = _Ocm4gNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 1),
    _Ocm4gNumEvents_Type()
)
ocm4gNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gNumEvents.setStatus("mandatory")
_Ocm4gPerfTable_Object = MibTable
ocm4gPerfTable = _Ocm4gPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 2)
)
if mibBuilder.loadTexts:
    ocm4gPerfTable.setStatus("mandatory")
_Ocm4gPerfEntry_Object = MibTableRow
ocm4gPerfEntry = _Ocm4gPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 2, 1)
)
ocm4gPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm4gPerfLocation"),
    (0, "LUXN-MIB", "ocm4gPerfShelf"),
    (0, "LUXN-MIB", "ocm4gPerfSlot"),
)
if mibBuilder.loadTexts:
    ocm4gPerfEntry.setStatus("mandatory")


class _Ocm4gPerfLocation_Type(Integer32):
    """Custom type ocm4gPerfLocation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("local", 1)
    )


_Ocm4gPerfLocation_Type.__name__ = "Integer32"
_Ocm4gPerfLocation_Object = MibTableColumn
ocm4gPerfLocation = _Ocm4gPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 2, 1, 1),
    _Ocm4gPerfLocation_Type()
)
ocm4gPerfLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPerfLocation.setStatus("mandatory")
_Ocm4gPerfShelf_Type = CardShelf
_Ocm4gPerfShelf_Object = MibTableColumn
ocm4gPerfShelf = _Ocm4gPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 2, 1, 2),
    _Ocm4gPerfShelf_Type()
)
ocm4gPerfShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPerfShelf.setStatus("mandatory")
_Ocm4gPerfSlot_Type = CardSlot
_Ocm4gPerfSlot_Object = MibTableColumn
ocm4gPerfSlot = _Ocm4gPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 2, 1, 3),
    _Ocm4gPerfSlot_Type()
)
ocm4gPerfSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPerfSlot.setStatus("mandatory")
_Ocm4gPerfState_Type = CardState
_Ocm4gPerfState_Object = MibTableColumn
ocm4gPerfState = _Ocm4gPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 2, 1, 4),
    _Ocm4gPerfState_Type()
)
ocm4gPerfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPerfState.setStatus("mandatory")
_Ocm4gPerfStatus_Type = CardStatus
_Ocm4gPerfStatus_Object = MibTableColumn
ocm4gPerfStatus = _Ocm4gPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 2, 1, 5),
    _Ocm4gPerfStatus_Type()
)
ocm4gPerfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPerfStatus.setStatus("mandatory")
_Ocm4gLastBootTime_Type = DateAndTime
_Ocm4gLastBootTime_Object = MibTableColumn
ocm4gLastBootTime = _Ocm4gLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 2, 1, 6),
    _Ocm4gLastBootTime_Type()
)
ocm4gLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gLastBootTime.setStatus("mandatory")
_Ocm4gAvailTime_Type = Counter32
_Ocm4gAvailTime_Object = MibTableColumn
ocm4gAvailTime = _Ocm4gAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 2, 1, 7),
    _Ocm4gAvailTime_Type()
)
ocm4gAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gAvailTime.setStatus("mandatory")
_Ocm4gErrFreeSecs_Type = Counter32
_Ocm4gErrFreeSecs_Object = MibTableColumn
ocm4gErrFreeSecs = _Ocm4gErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 2, 1, 8),
    _Ocm4gErrFreeSecs_Type()
)
ocm4gErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gErrFreeSecs.setStatus("mandatory")
_Ocm4gCntrTable_Object = MibTable
ocm4gCntrTable = _Ocm4gCntrTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3)
)
if mibBuilder.loadTexts:
    ocm4gCntrTable.setStatus("mandatory")
_Ocm4gCntrEntry_Object = MibTableRow
ocm4gCntrEntry = _Ocm4gCntrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1)
)
ocm4gCntrEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm4gCntrLocation"),
    (0, "LUXN-MIB", "ocm4gCntrShelf"),
    (0, "LUXN-MIB", "ocm4gCntrSlot"),
    (0, "LUXN-MIB", "ocm4gCntrType"),
)
if mibBuilder.loadTexts:
    ocm4gCntrEntry.setStatus("mandatory")


class _Ocm4gCntrLocation_Type(Integer32):
    """Custom type ocm4gCntrLocation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("local", 1)
    )


_Ocm4gCntrLocation_Type.__name__ = "Integer32"
_Ocm4gCntrLocation_Object = MibTableColumn
ocm4gCntrLocation = _Ocm4gCntrLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 1),
    _Ocm4gCntrLocation_Type()
)
ocm4gCntrLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gCntrLocation.setStatus("mandatory")
_Ocm4gCntrShelf_Type = CardShelf
_Ocm4gCntrShelf_Object = MibTableColumn
ocm4gCntrShelf = _Ocm4gCntrShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 2),
    _Ocm4gCntrShelf_Type()
)
ocm4gCntrShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gCntrShelf.setStatus("mandatory")
_Ocm4gCntrSlot_Type = CardSlot
_Ocm4gCntrSlot_Object = MibTableColumn
ocm4gCntrSlot = _Ocm4gCntrSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 3),
    _Ocm4gCntrSlot_Type()
)
ocm4gCntrSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gCntrSlot.setStatus("mandatory")


class _Ocm4gCntrType_Type(Integer32):
    """Custom type ocm4gCntrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("hdlc", 4),
          ("ibm1", 2),
          ("ibm2", 3),
          ("spi", 1))
    )


_Ocm4gCntrType_Type.__name__ = "Integer32"
_Ocm4gCntrType_Object = MibTableColumn
ocm4gCntrType = _Ocm4gCntrType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 4),
    _Ocm4gCntrType_Type()
)
ocm4gCntrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gCntrType.setStatus("mandatory")
_Ocm4gTotPktSent_Type = Counter32
_Ocm4gTotPktSent_Object = MibTableColumn
ocm4gTotPktSent = _Ocm4gTotPktSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 5),
    _Ocm4gTotPktSent_Type()
)
ocm4gTotPktSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gTotPktSent.setStatus("mandatory")
_Ocm4gTotPktRcvd_Type = Counter32
_Ocm4gTotPktRcvd_Object = MibTableColumn
ocm4gTotPktRcvd = _Ocm4gTotPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 6),
    _Ocm4gTotPktRcvd_Type()
)
ocm4gTotPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gTotPktRcvd.setStatus("mandatory")
_Ocm4gTotBadTrans_Type = Counter32
_Ocm4gTotBadTrans_Object = MibTableColumn
ocm4gTotBadTrans = _Ocm4gTotBadTrans_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 7),
    _Ocm4gTotBadTrans_Type()
)
ocm4gTotBadTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gTotBadTrans.setStatus("mandatory")
_Ocm4gBadPktRcvd_Type = Counter32
_Ocm4gBadPktRcvd_Object = MibTableColumn
ocm4gBadPktRcvd = _Ocm4gBadPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 8),
    _Ocm4gBadPktRcvd_Type()
)
ocm4gBadPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gBadPktRcvd.setStatus("mandatory")
_Ocm4gBytesSent_Type = Counter32
_Ocm4gBytesSent_Object = MibTableColumn
ocm4gBytesSent = _Ocm4gBytesSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 9),
    _Ocm4gBytesSent_Type()
)
ocm4gBytesSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gBytesSent.setStatus("mandatory")
_Ocm4gBytesRcvd_Type = Counter32
_Ocm4gBytesRcvd_Object = MibTableColumn
ocm4gBytesRcvd = _Ocm4gBytesRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 10),
    _Ocm4gBytesRcvd_Type()
)
ocm4gBytesRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gBytesRcvd.setStatus("mandatory")
_Ocm4gMsgsDlvrd_Type = Counter32
_Ocm4gMsgsDlvrd_Object = MibTableColumn
ocm4gMsgsDlvrd = _Ocm4gMsgsDlvrd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 11),
    _Ocm4gMsgsDlvrd_Type()
)
ocm4gMsgsDlvrd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gMsgsDlvrd.setStatus("mandatory")
_Ocm4gClearCntrs_Type = ResetType
_Ocm4gClearCntrs_Object = MibTableColumn
ocm4gClearCntrs = _Ocm4gClearCntrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 12),
    _Ocm4gClearCntrs_Type()
)
ocm4gClearCntrs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm4gClearCntrs.setStatus("mandatory")
_Ocm4gPmTable_Object = MibTable
ocm4gPmTable = _Ocm4gPmTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4)
)
if mibBuilder.loadTexts:
    ocm4gPmTable.setStatus("mandatory")
_Ocm4gPmEntry_Object = MibTableRow
ocm4gPmEntry = _Ocm4gPmEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1)
)
ocm4gPmEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm4gPmLocation"),
    (0, "LUXN-MIB", "ocm4gPmShelf"),
    (0, "LUXN-MIB", "ocm4gPmSlot"),
    (0, "LUXN-MIB", "ocm4gPmLink"),
)
if mibBuilder.loadTexts:
    ocm4gPmEntry.setStatus("mandatory")


class _Ocm4gPmLocation_Type(Integer32):
    """Custom type ocm4gPmLocation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("local", 1)
    )


_Ocm4gPmLocation_Type.__name__ = "Integer32"
_Ocm4gPmLocation_Object = MibTableColumn
ocm4gPmLocation = _Ocm4gPmLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 1),
    _Ocm4gPmLocation_Type()
)
ocm4gPmLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPmLocation.setStatus("mandatory")
_Ocm4gPmShelf_Type = CardShelf
_Ocm4gPmShelf_Object = MibTableColumn
ocm4gPmShelf = _Ocm4gPmShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 2),
    _Ocm4gPmShelf_Type()
)
ocm4gPmShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPmShelf.setStatus("mandatory")
_Ocm4gPmSlot_Type = CardSlot
_Ocm4gPmSlot_Object = MibTableColumn
ocm4gPmSlot = _Ocm4gPmSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 3),
    _Ocm4gPmSlot_Type()
)
ocm4gPmSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPmSlot.setStatus("mandatory")


class _Ocm4gPmLink_Type(Integer32):
    """Custom type ocm4gPmLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("link1", 1),
          ("link2", 2))
    )


_Ocm4gPmLink_Type.__name__ = "Integer32"
_Ocm4gPmLink_Object = MibTableColumn
ocm4gPmLink = _Ocm4gPmLink_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 4),
    _Ocm4gPmLink_Type()
)
ocm4gPmLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPmLink.setStatus("mandatory")
_Ocm4gPmLinkRxPwr_Type = DisplayString
_Ocm4gPmLinkRxPwr_Object = MibTableColumn
ocm4gPmLinkRxPwr = _Ocm4gPmLinkRxPwr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 5),
    _Ocm4gPmLinkRxPwr_Type()
)
ocm4gPmLinkRxPwr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPmLinkRxPwr.setStatus("mandatory")
_Ocm4gPmLinkTxPwr_Type = DisplayString
_Ocm4gPmLinkTxPwr_Object = MibTableColumn
ocm4gPmLinkTxPwr = _Ocm4gPmLinkTxPwr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 6),
    _Ocm4gPmLinkTxPwr_Type()
)
ocm4gPmLinkTxPwr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPmLinkTxPwr.setStatus("mandatory")
_Ocm4gPmCpeRxPwr_Type = DisplayString
_Ocm4gPmCpeRxPwr_Object = MibTableColumn
ocm4gPmCpeRxPwr = _Ocm4gPmCpeRxPwr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 7),
    _Ocm4gPmCpeRxPwr_Type()
)
ocm4gPmCpeRxPwr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPmCpeRxPwr.setStatus("mandatory")
_Ocm4gPmCpeTxPwr_Type = DisplayString
_Ocm4gPmCpeTxPwr_Object = MibTableColumn
ocm4gPmCpeTxPwr = _Ocm4gPmCpeTxPwr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 8),
    _Ocm4gPmCpeTxPwr_Type()
)
ocm4gPmCpeTxPwr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPmCpeTxPwr.setStatus("mandatory")
_Ocm4gPmNumLinkRxIntervals_Type = Integer32
_Ocm4gPmNumLinkRxIntervals_Object = MibTableColumn
ocm4gPmNumLinkRxIntervals = _Ocm4gPmNumLinkRxIntervals_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 9),
    _Ocm4gPmNumLinkRxIntervals_Type()
)
ocm4gPmNumLinkRxIntervals.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPmNumLinkRxIntervals.setStatus("mandatory")
_Ocm4gPmLinkRxErrors_Type = DisplayString
_Ocm4gPmLinkRxErrors_Object = MibTableColumn
ocm4gPmLinkRxErrors = _Ocm4gPmLinkRxErrors_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 10),
    _Ocm4gPmLinkRxErrors_Type()
)
ocm4gPmLinkRxErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPmLinkRxErrors.setStatus("mandatory")
_Ocm4gPmLinkRxErredSeconds_Type = Counter32
_Ocm4gPmLinkRxErredSeconds_Object = MibTableColumn
ocm4gPmLinkRxErredSeconds = _Ocm4gPmLinkRxErredSeconds_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 11),
    _Ocm4gPmLinkRxErredSeconds_Type()
)
ocm4gPmLinkRxErredSeconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPmLinkRxErredSeconds.setStatus("mandatory")
_Ocm4gPmNumCpeRxIntervals_Type = Integer32
_Ocm4gPmNumCpeRxIntervals_Object = MibTableColumn
ocm4gPmNumCpeRxIntervals = _Ocm4gPmNumCpeRxIntervals_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 12),
    _Ocm4gPmNumCpeRxIntervals_Type()
)
ocm4gPmNumCpeRxIntervals.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPmNumCpeRxIntervals.setStatus("mandatory")
_Ocm4gPmCpeRxErrors_Type = DisplayString
_Ocm4gPmCpeRxErrors_Object = MibTableColumn
ocm4gPmCpeRxErrors = _Ocm4gPmCpeRxErrors_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 13),
    _Ocm4gPmCpeRxErrors_Type()
)
ocm4gPmCpeRxErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPmCpeRxErrors.setStatus("mandatory")
_Ocm4gPmCpeRxErredSeconds_Type = Counter32
_Ocm4gPmCpeRxErredSeconds_Object = MibTableColumn
ocm4gPmCpeRxErredSeconds = _Ocm4gPmCpeRxErredSeconds_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 14),
    _Ocm4gPmCpeRxErredSeconds_Type()
)
ocm4gPmCpeRxErredSeconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPmCpeRxErredSeconds.setStatus("mandatory")
_Ocm4gPmNumCpeTxIntervals_Type = Integer32
_Ocm4gPmNumCpeTxIntervals_Object = MibTableColumn
ocm4gPmNumCpeTxIntervals = _Ocm4gPmNumCpeTxIntervals_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 15),
    _Ocm4gPmNumCpeTxIntervals_Type()
)
ocm4gPmNumCpeTxIntervals.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPmNumCpeTxIntervals.setStatus("mandatory")
_Ocm4gPmCpeTxErrors_Type = DisplayString
_Ocm4gPmCpeTxErrors_Object = MibTableColumn
ocm4gPmCpeTxErrors = _Ocm4gPmCpeTxErrors_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 16),
    _Ocm4gPmCpeTxErrors_Type()
)
ocm4gPmCpeTxErrors.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPmCpeTxErrors.setStatus("mandatory")
_Ocm4gPmCpeTxErredSeconds_Type = Counter32
_Ocm4gPmCpeTxErredSeconds_Object = MibTableColumn
ocm4gPmCpeTxErredSeconds = _Ocm4gPmCpeTxErredSeconds_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 17),
    _Ocm4gPmCpeTxErredSeconds_Type()
)
ocm4gPmCpeTxErredSeconds.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gPmCpeTxErredSeconds.setStatus("mandatory")
_Ocm4gClearPmCntrs_Type = ResetType
_Ocm4gClearPmCntrs_Object = MibTableColumn
ocm4gClearPmCntrs = _Ocm4gClearPmCntrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 18),
    _Ocm4gClearPmCntrs_Type()
)
ocm4gClearPmCntrs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    ocm4gClearPmCntrs.setStatus("mandatory")
_OetPerf_ObjectIdentity = ObjectIdentity
oetPerf = _OetPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29)
)
_OetNumEvents_Type = Counter32
_OetNumEvents_Object = MibScalar
oetNumEvents = _OetNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 1),
    _OetNumEvents_Type()
)
oetNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetNumEvents.setStatus("mandatory")
_OetPerfTable_Object = MibTable
oetPerfTable = _OetPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 2)
)
if mibBuilder.loadTexts:
    oetPerfTable.setStatus("mandatory")
_OetPerfEntry_Object = MibTableRow
oetPerfEntry = _OetPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 2, 1)
)
oetPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "oetPerfLocation"),
    (0, "LUXN-MIB", "oetPerfShelf"),
    (0, "LUXN-MIB", "oetPerfSlot"),
)
if mibBuilder.loadTexts:
    oetPerfEntry.setStatus("mandatory")
_OetPerfLocation_Type = CardLocation
_OetPerfLocation_Object = MibTableColumn
oetPerfLocation = _OetPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 2, 1, 1),
    _OetPerfLocation_Type()
)
oetPerfLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPerfLocation.setStatus("mandatory")
_OetPerfShelf_Type = CardShelf
_OetPerfShelf_Object = MibTableColumn
oetPerfShelf = _OetPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 2, 1, 2),
    _OetPerfShelf_Type()
)
oetPerfShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPerfShelf.setStatus("mandatory")
_OetPerfSlot_Type = CardSlot
_OetPerfSlot_Object = MibTableColumn
oetPerfSlot = _OetPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 2, 1, 3),
    _OetPerfSlot_Type()
)
oetPerfSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPerfSlot.setStatus("mandatory")
_OetPerfState_Type = CardState
_OetPerfState_Object = MibTableColumn
oetPerfState = _OetPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 2, 1, 4),
    _OetPerfState_Type()
)
oetPerfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPerfState.setStatus("mandatory")
_OetPerfStatus_Type = CardStatus
_OetPerfStatus_Object = MibTableColumn
oetPerfStatus = _OetPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 2, 1, 5),
    _OetPerfStatus_Type()
)
oetPerfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPerfStatus.setStatus("mandatory")
_OetLastBootTime_Type = DateAndTime
_OetLastBootTime_Object = MibTableColumn
oetLastBootTime = _OetLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 2, 1, 6),
    _OetLastBootTime_Type()
)
oetLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetLastBootTime.setStatus("mandatory")
_OetAvailTime_Type = Counter32
_OetAvailTime_Object = MibTableColumn
oetAvailTime = _OetAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 2, 1, 7),
    _OetAvailTime_Type()
)
oetAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetAvailTime.setStatus("mandatory")
_OetErrFreeSecs_Type = Counter32
_OetErrFreeSecs_Object = MibTableColumn
oetErrFreeSecs = _OetErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 2, 1, 8),
    _OetErrFreeSecs_Type()
)
oetErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetErrFreeSecs.setStatus("mandatory")
_OetPmLinkTable_Object = MibTable
oetPmLinkTable = _OetPmLinkTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3)
)
if mibBuilder.loadTexts:
    oetPmLinkTable.setStatus("mandatory")
_OetPmLinkEntry_Object = MibTableRow
oetPmLinkEntry = _OetPmLinkEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1)
)
oetPmLinkEntry.setIndexNames(
    (0, "LUXN-MIB", "oetPmLinkLocation"),
    (0, "LUXN-MIB", "oetPmLinkShelf"),
    (0, "LUXN-MIB", "oetPmLinkSlot"),
    (0, "LUXN-MIB", "oetPmLink"),
)
if mibBuilder.loadTexts:
    oetPmLinkEntry.setStatus("mandatory")
_OetPmLinkLocation_Type = CardLocation
_OetPmLinkLocation_Object = MibTableColumn
oetPmLinkLocation = _OetPmLinkLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 1),
    _OetPmLinkLocation_Type()
)
oetPmLinkLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmLinkLocation.setStatus("mandatory")
_OetPmLinkShelf_Type = CardShelf
_OetPmLinkShelf_Object = MibTableColumn
oetPmLinkShelf = _OetPmLinkShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 2),
    _OetPmLinkShelf_Type()
)
oetPmLinkShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmLinkShelf.setStatus("mandatory")
_OetPmLinkSlot_Type = CardSlot
_OetPmLinkSlot_Object = MibTableColumn
oetPmLinkSlot = _OetPmLinkSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 3),
    _OetPmLinkSlot_Type()
)
oetPmLinkSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmLinkSlot.setStatus("mandatory")


class _OetPmLink_Type(Integer32):
    """Custom type oetPmLink based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(11,
              12)
        )
    )
    namedValues = NamedValues(
        *(("linkA", 11),
          ("linkB", 12))
    )


_OetPmLink_Type.__name__ = "Integer32"
_OetPmLink_Object = MibTableColumn
oetPmLink = _OetPmLink_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 4),
    _OetPmLink_Type()
)
oetPmLink.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmLink.setStatus("mandatory")
_OetPmLinkNumIntervals_Type = Integer32
_OetPmLinkNumIntervals_Object = MibTableColumn
oetPmLinkNumIntervals = _OetPmLinkNumIntervals_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 5),
    _OetPmLinkNumIntervals_Type()
)
oetPmLinkNumIntervals.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmLinkNumIntervals.setStatus("mandatory")
_OetPmLinkRxPwr_Type = DisplayString
_OetPmLinkRxPwr_Object = MibTableColumn
oetPmLinkRxPwr = _OetPmLinkRxPwr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 6),
    _OetPmLinkRxPwr_Type()
)
oetPmLinkRxPwr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmLinkRxPwr.setStatus("mandatory")
_OetPmLinkRxBytes_Type = DisplayString
_OetPmLinkRxBytes_Object = MibTableColumn
oetPmLinkRxBytes = _OetPmLinkRxBytes_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 7),
    _OetPmLinkRxBytes_Type()
)
oetPmLinkRxBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmLinkRxBytes.setStatus("mandatory")
_OetPmLinkRxFcsErrs_Type = DisplayString
_OetPmLinkRxFcsErrs_Object = MibTableColumn
oetPmLinkRxFcsErrs = _OetPmLinkRxFcsErrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 8),
    _OetPmLinkRxFcsErrs_Type()
)
oetPmLinkRxFcsErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmLinkRxFcsErrs.setStatus("mandatory")
_OetPmLinkTxPwr_Type = DisplayString
_OetPmLinkTxPwr_Object = MibTableColumn
oetPmLinkTxPwr = _OetPmLinkTxPwr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 9),
    _OetPmLinkTxPwr_Type()
)
oetPmLinkTxPwr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmLinkTxPwr.setStatus("mandatory")
_OetPmLinkTxTemp_Type = DisplayString
_OetPmLinkTxTemp_Object = MibTableColumn
oetPmLinkTxTemp = _OetPmLinkTxTemp_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 10),
    _OetPmLinkTxTemp_Type()
)
oetPmLinkTxTemp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmLinkTxTemp.setStatus("mandatory")
_OetPmLinkTxBytes_Type = DisplayString
_OetPmLinkTxBytes_Object = MibTableColumn
oetPmLinkTxBytes = _OetPmLinkTxBytes_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 11),
    _OetPmLinkTxBytes_Type()
)
oetPmLinkTxBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmLinkTxBytes.setStatus("mandatory")
_OetPmLinkFecTx_Type = DisplayString
_OetPmLinkFecTx_Object = MibTableColumn
oetPmLinkFecTx = _OetPmLinkFecTx_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 12),
    _OetPmLinkFecTx_Type()
)
oetPmLinkFecTx.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmLinkFecTx.setStatus("mandatory")
_OetPmLinkFecCorrected1s_Type = Integer32
_OetPmLinkFecCorrected1s_Object = MibTableColumn
oetPmLinkFecCorrected1s = _OetPmLinkFecCorrected1s_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 13),
    _OetPmLinkFecCorrected1s_Type()
)
oetPmLinkFecCorrected1s.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmLinkFecCorrected1s.setStatus("mandatory")
_OetPmLinkFecCorrected0s_Type = Integer32
_OetPmLinkFecCorrected0s_Object = MibTableColumn
oetPmLinkFecCorrected0s = _OetPmLinkFecCorrected0s_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 14),
    _OetPmLinkFecCorrected0s_Type()
)
oetPmLinkFecCorrected0s.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmLinkFecCorrected0s.setStatus("mandatory")
_OetPmLinkFecCorrectedBit_Type = Integer32
_OetPmLinkFecCorrectedBit_Object = MibTableColumn
oetPmLinkFecCorrectedBit = _OetPmLinkFecCorrectedBit_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 15),
    _OetPmLinkFecCorrectedBit_Type()
)
oetPmLinkFecCorrectedBit.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmLinkFecCorrectedBit.setStatus("mandatory")
_OetPmLinkFecCorrectedByte_Type = Integer32
_OetPmLinkFecCorrectedByte_Object = MibTableColumn
oetPmLinkFecCorrectedByte = _OetPmLinkFecCorrectedByte_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 16),
    _OetPmLinkFecCorrectedByte_Type()
)
oetPmLinkFecCorrectedByte.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmLinkFecCorrectedByte.setStatus("mandatory")
_OetPmLinkFecUncorrectedByte_Type = Integer32
_OetPmLinkFecUncorrectedByte_Object = MibTableColumn
oetPmLinkFecUncorrectedByte = _OetPmLinkFecUncorrectedByte_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 17),
    _OetPmLinkFecUncorrectedByte_Type()
)
oetPmLinkFecUncorrectedByte.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmLinkFecUncorrectedByte.setStatus("mandatory")
_OetPmLinkFecBlock_Type = Integer32
_OetPmLinkFecBlock_Object = MibTableColumn
oetPmLinkFecBlock = _OetPmLinkFecBlock_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 18),
    _OetPmLinkFecBlock_Type()
)
oetPmLinkFecBlock.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmLinkFecBlock.setStatus("mandatory")
_OetPmPortTable_Object = MibTable
oetPmPortTable = _OetPmPortTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4)
)
if mibBuilder.loadTexts:
    oetPmPortTable.setStatus("mandatory")
_OetPmPortEntry_Object = MibTableRow
oetPmPortEntry = _OetPmPortEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1)
)
oetPmPortEntry.setIndexNames(
    (0, "LUXN-MIB", "oetPmPortLocation"),
    (0, "LUXN-MIB", "oetPmPortShelf"),
    (0, "LUXN-MIB", "oetPmPortSlot"),
    (0, "LUXN-MIB", "oetPmPortIndex"),
)
if mibBuilder.loadTexts:
    oetPmPortEntry.setStatus("mandatory")
_OetPmPortLocation_Type = CardLocation
_OetPmPortLocation_Object = MibTableColumn
oetPmPortLocation = _OetPmPortLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1, 1),
    _OetPmPortLocation_Type()
)
oetPmPortLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmPortLocation.setStatus("mandatory")
_OetPmPortShelf_Type = CardShelf
_OetPmPortShelf_Object = MibTableColumn
oetPmPortShelf = _OetPmPortShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1, 2),
    _OetPmPortShelf_Type()
)
oetPmPortShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmPortShelf.setStatus("mandatory")
_OetPmPortSlot_Type = CardSlot
_OetPmPortSlot_Object = MibTableColumn
oetPmPortSlot = _OetPmPortSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1, 3),
    _OetPmPortSlot_Type()
)
oetPmPortSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmPortSlot.setStatus("mandatory")


class _OetPmPortIndex_Type(Integer32):
    """Custom type oetPmPortIndex based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            10
        )
    )
    namedValues = NamedValues(
        ("cpe", 10)
    )


_OetPmPortIndex_Type.__name__ = "Integer32"
_OetPmPortIndex_Object = MibTableColumn
oetPmPortIndex = _OetPmPortIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1, 4),
    _OetPmPortIndex_Type()
)
oetPmPortIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmPortIndex.setStatus("mandatory")
_OetPmPortNumIntervals_Type = Integer32
_OetPmPortNumIntervals_Object = MibTableColumn
oetPmPortNumIntervals = _OetPmPortNumIntervals_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1, 5),
    _OetPmPortNumIntervals_Type()
)
oetPmPortNumIntervals.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmPortNumIntervals.setStatus("mandatory")
_OetPmPortRxPwr_Type = DisplayString
_OetPmPortRxPwr_Object = MibTableColumn
oetPmPortRxPwr = _OetPmPortRxPwr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1, 6),
    _OetPmPortRxPwr_Type()
)
oetPmPortRxPwr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmPortRxPwr.setStatus("mandatory")
_OetPmPortRxBytes_Type = DisplayString
_OetPmPortRxBytes_Object = MibTableColumn
oetPmPortRxBytes = _OetPmPortRxBytes_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1, 7),
    _OetPmPortRxBytes_Type()
)
oetPmPortRxBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmPortRxBytes.setStatus("mandatory")
_OetPmPortRxFcsErrs_Type = DisplayString
_OetPmPortRxFcsErrs_Object = MibTableColumn
oetPmPortRxFcsErrs = _OetPmPortRxFcsErrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1, 8),
    _OetPmPortRxFcsErrs_Type()
)
oetPmPortRxFcsErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmPortRxFcsErrs.setStatus("mandatory")
_OetPmPortTxPwr_Type = DisplayString
_OetPmPortTxPwr_Object = MibTableColumn
oetPmPortTxPwr = _OetPmPortTxPwr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1, 9),
    _OetPmPortTxPwr_Type()
)
oetPmPortTxPwr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmPortTxPwr.setStatus("mandatory")
_OetPmPortTxTemp_Type = DisplayString
_OetPmPortTxTemp_Object = MibTableColumn
oetPmPortTxTemp = _OetPmPortTxTemp_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1, 10),
    _OetPmPortTxTemp_Type()
)
oetPmPortTxTemp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmPortTxTemp.setStatus("mandatory")
_OetPmPortTxBytes_Type = DisplayString
_OetPmPortTxBytes_Object = MibTableColumn
oetPmPortTxBytes = _OetPmPortTxBytes_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1, 11),
    _OetPmPortTxBytes_Type()
)
oetPmPortTxBytes.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oetPmPortTxBytes.setStatus("mandatory")
_UobPerf_ObjectIdentity = ObjectIdentity
uobPerf = _UobPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30)
)
_UobNumEvents_Type = Counter32
_UobNumEvents_Object = MibScalar
uobNumEvents = _UobNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 1),
    _UobNumEvents_Type()
)
uobNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobNumEvents.setStatus("mandatory")
_UobPerfTable_Object = MibTable
uobPerfTable = _UobPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 2)
)
if mibBuilder.loadTexts:
    uobPerfTable.setStatus("mandatory")
_UobPerfEntry_Object = MibTableRow
uobPerfEntry = _UobPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 2, 1)
)
uobPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "uobPerfLocation"),
    (0, "LUXN-MIB", "uobPerfShelf"),
    (0, "LUXN-MIB", "uobPerfSlot"),
)
if mibBuilder.loadTexts:
    uobPerfEntry.setStatus("mandatory")
_UobPerfLocation_Type = CardLocation
_UobPerfLocation_Object = MibTableColumn
uobPerfLocation = _UobPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 2, 1, 1),
    _UobPerfLocation_Type()
)
uobPerfLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobPerfLocation.setStatus("mandatory")
_UobPerfShelf_Type = CardShelf
_UobPerfShelf_Object = MibTableColumn
uobPerfShelf = _UobPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 2, 1, 2),
    _UobPerfShelf_Type()
)
uobPerfShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobPerfShelf.setStatus("mandatory")
_UobPerfSlot_Type = CardSlot
_UobPerfSlot_Object = MibTableColumn
uobPerfSlot = _UobPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 2, 1, 3),
    _UobPerfSlot_Type()
)
uobPerfSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobPerfSlot.setStatus("mandatory")
_UobPerfState_Type = CardState
_UobPerfState_Object = MibTableColumn
uobPerfState = _UobPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 2, 1, 4),
    _UobPerfState_Type()
)
uobPerfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobPerfState.setStatus("mandatory")
_UobPerfStatus_Type = CardStatus
_UobPerfStatus_Object = MibTableColumn
uobPerfStatus = _UobPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 2, 1, 5),
    _UobPerfStatus_Type()
)
uobPerfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobPerfStatus.setStatus("mandatory")
_UobLastBootTime_Type = DateAndTime
_UobLastBootTime_Object = MibTableColumn
uobLastBootTime = _UobLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 2, 1, 6),
    _UobLastBootTime_Type()
)
uobLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobLastBootTime.setStatus("mandatory")
_UobAvailTime_Type = Counter32
_UobAvailTime_Object = MibTableColumn
uobAvailTime = _UobAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 2, 1, 7),
    _UobAvailTime_Type()
)
uobAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobAvailTime.setStatus("mandatory")
_UobErrFreeSecs_Type = Counter32
_UobErrFreeSecs_Object = MibTableColumn
uobErrFreeSecs = _UobErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 2, 1, 8),
    _UobErrFreeSecs_Type()
)
uobErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobErrFreeSecs.setStatus("mandatory")
_UobPmTable_Object = MibTable
uobPmTable = _UobPmTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3)
)
if mibBuilder.loadTexts:
    uobPmTable.setStatus("mandatory")
_UobPmEntry_Object = MibTableRow
uobPmEntry = _UobPmEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3, 1)
)
uobPmEntry.setIndexNames(
    (0, "LUXN-MIB", "uobPmLocation"),
    (0, "LUXN-MIB", "uobPmShelf"),
    (0, "LUXN-MIB", "uobPmSlot"),
)
if mibBuilder.loadTexts:
    uobPmEntry.setStatus("mandatory")
_UobPmLocation_Type = CardLocation
_UobPmLocation_Object = MibTableColumn
uobPmLocation = _UobPmLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3, 1, 1),
    _UobPmLocation_Type()
)
uobPmLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobPmLocation.setStatus("mandatory")
_UobPmShelf_Type = CardShelf
_UobPmShelf_Object = MibTableColumn
uobPmShelf = _UobPmShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3, 1, 2),
    _UobPmShelf_Type()
)
uobPmShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobPmShelf.setStatus("mandatory")
_UobPmSlot_Type = CardSlot
_UobPmSlot_Object = MibTableColumn
uobPmSlot = _UobPmSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3, 1, 3),
    _UobPmSlot_Type()
)
uobPmSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobPmSlot.setStatus("mandatory")
_UobPmSystemStatus_Type = DisplayString
_UobPmSystemStatus_Object = MibTableColumn
uobPmSystemStatus = _UobPmSystemStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3, 1, 4),
    _UobPmSystemStatus_Type()
)
uobPmSystemStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobPmSystemStatus.setStatus("mandatory")
_UobPmPumpCurrent_Type = DisplayString
_UobPmPumpCurrent_Object = MibTableColumn
uobPmPumpCurrent = _UobPmPumpCurrent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3, 1, 5),
    _UobPmPumpCurrent_Type()
)
uobPmPumpCurrent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobPmPumpCurrent.setStatus("mandatory")
_UobPmPumpTemp_Type = DisplayString
_UobPmPumpTemp_Object = MibTableColumn
uobPmPumpTemp = _UobPmPumpTemp_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3, 1, 6),
    _UobPmPumpTemp_Type()
)
uobPmPumpTemp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobPmPumpTemp.setStatus("mandatory")
_UobPmInputPower_Type = DisplayString
_UobPmInputPower_Object = MibTableColumn
uobPmInputPower = _UobPmInputPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3, 1, 7),
    _UobPmInputPower_Type()
)
uobPmInputPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobPmInputPower.setStatus("mandatory")
_UobPmOutPower_Type = DisplayString
_UobPmOutPower_Object = MibTableColumn
uobPmOutPower = _UobPmOutPower_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3, 1, 8),
    _UobPmOutPower_Type()
)
uobPmOutPower.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobPmOutPower.setStatus("mandatory")
_UobPmTotalGain_Type = DisplayString
_UobPmTotalGain_Object = MibTableColumn
uobPmTotalGain = _UobPmTotalGain_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3, 1, 9),
    _UobPmTotalGain_Type()
)
uobPmTotalGain.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobPmTotalGain.setStatus("mandatory")
_UobPmReflection_Type = DisplayString
_UobPmReflection_Object = MibTableColumn
uobPmReflection = _UobPmReflection_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3, 1, 10),
    _UobPmReflection_Type()
)
uobPmReflection.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobPmReflection.setStatus("mandatory")
_Fc8gPerf_ObjectIdentity = ObjectIdentity
fc8gPerf = _Fc8gPerf_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 31)
)
_Fc8gNumEvents_Type = Counter32
_Fc8gNumEvents_Object = MibScalar
fc8gNumEvents = _Fc8gNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 31, 1),
    _Fc8gNumEvents_Type()
)
fc8gNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gNumEvents.setStatus("mandatory")
_Fc8gPerfTable_Object = MibTable
fc8gPerfTable = _Fc8gPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 31, 2)
)
if mibBuilder.loadTexts:
    fc8gPerfTable.setStatus("mandatory")
_Fc8gPerfEntry_Object = MibTableRow
fc8gPerfEntry = _Fc8gPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 31, 2, 1)
)
fc8gPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "fc8gPerfLocation"),
    (0, "LUXN-MIB", "fc8gPerfShelf"),
    (0, "LUXN-MIB", "fc8gPerfSlot"),
)
if mibBuilder.loadTexts:
    fc8gPerfEntry.setStatus("mandatory")
_Fc8gPerfLocation_Type = CardLocation
_Fc8gPerfLocation_Object = MibTableColumn
fc8gPerfLocation = _Fc8gPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 31, 2, 1, 1),
    _Fc8gPerfLocation_Type()
)
fc8gPerfLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gPerfLocation.setStatus("mandatory")
_Fc8gPerfShelf_Type = CardShelf
_Fc8gPerfShelf_Object = MibTableColumn
fc8gPerfShelf = _Fc8gPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 31, 2, 1, 2),
    _Fc8gPerfShelf_Type()
)
fc8gPerfShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gPerfShelf.setStatus("mandatory")
_Fc8gPerfSlot_Type = CardSlot
_Fc8gPerfSlot_Object = MibTableColumn
fc8gPerfSlot = _Fc8gPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 31, 2, 1, 3),
    _Fc8gPerfSlot_Type()
)
fc8gPerfSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gPerfSlot.setStatus("mandatory")
_Fc8gPerfState_Type = CardState
_Fc8gPerfState_Object = MibTableColumn
fc8gPerfState = _Fc8gPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 31, 2, 1, 4),
    _Fc8gPerfState_Type()
)
fc8gPerfState.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gPerfState.setStatus("mandatory")
_Fc8gPerfStatus_Type = CardStatus
_Fc8gPerfStatus_Object = MibTableColumn
fc8gPerfStatus = _Fc8gPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 31, 2, 1, 5),
    _Fc8gPerfStatus_Type()
)
fc8gPerfStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gPerfStatus.setStatus("mandatory")
_Fc8gLastBootTime_Type = DateAndTime
_Fc8gLastBootTime_Object = MibTableColumn
fc8gLastBootTime = _Fc8gLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 31, 2, 1, 6),
    _Fc8gLastBootTime_Type()
)
fc8gLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gLastBootTime.setStatus("mandatory")
_Fc8gAvailTime_Type = Counter32
_Fc8gAvailTime_Object = MibTableColumn
fc8gAvailTime = _Fc8gAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 31, 2, 1, 7),
    _Fc8gAvailTime_Type()
)
fc8gAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gAvailTime.setStatus("mandatory")
_Fc8gErrFreeSecs_Type = Counter32
_Fc8gErrFreeSecs_Object = MibTableColumn
fc8gErrFreeSecs = _Fc8gErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 1, 31, 2, 1, 8),
    _Fc8gErrFreeSecs_Type()
)
fc8gErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fc8gErrFreeSecs.setStatus("mandatory")
_Historical_ObjectIdentity = ObjectIdentity
historical = _Historical_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2)
)
_SystemHist_ObjectIdentity = ObjectIdentity
systemHist = _SystemHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 1)
)
_SysHistTable_Object = MibTable
sysHistTable = _SysHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 1, 1)
)
if mibBuilder.loadTexts:
    sysHistTable.setStatus("mandatory")
_SysHistEntry_Object = MibTableRow
sysHistEntry = _SysHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 1, 1, 1)
)
sysHistEntry.setIndexNames(
    (0, "LUXN-MIB", "sysHMode"),
)
if mibBuilder.loadTexts:
    sysHistEntry.setStatus("mandatory")
_SysHMode_Type = HistoryMode
_SysHMode_Object = MibTableColumn
sysHMode = _SysHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 1, 1, 1, 1),
    _SysHMode_Type()
)
sysHMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysHMode.setStatus("mandatory")
_SysHLastBootTime_Type = DateAndTime
_SysHLastBootTime_Object = MibTableColumn
sysHLastBootTime = _SysHLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 1, 1, 1, 2),
    _SysHLastBootTime_Type()
)
sysHLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysHLastBootTime.setStatus("mandatory")
_SysHAvailTime_Type = Counter32
_SysHAvailTime_Object = MibTableColumn
sysHAvailTime = _SysHAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 1, 1, 1, 3),
    _SysHAvailTime_Type()
)
sysHAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysHAvailTime.setStatus("mandatory")
_SysHErrFreeSecs_Type = Counter32
_SysHErrFreeSecs_Object = MibTableColumn
sysHErrFreeSecs = _SysHErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 1, 1, 1, 4),
    _SysHErrFreeSecs_Type()
)
sysHErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    sysHErrFreeSecs.setStatus("mandatory")
_DownloadHist_ObjectIdentity = ObjectIdentity
downloadHist = _DownloadHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 2)
)
_DlHistTable_Object = MibTable
dlHistTable = _DlHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 2, 1)
)
if mibBuilder.loadTexts:
    dlHistTable.setStatus("mandatory")
_DlHistEntry_Object = MibTableRow
dlHistEntry = _DlHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 2, 1, 1)
)
dlHistEntry.setIndexNames(
    (0, "LUXN-MIB", "dlHMode"),
)
if mibBuilder.loadTexts:
    dlHistEntry.setStatus("mandatory")
_DlHMode_Type = HistoryMode
_DlHMode_Object = MibTableColumn
dlHMode = _DlHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 2, 1, 1, 1),
    _DlHMode_Type()
)
dlHMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dlHMode.setStatus("mandatory")
_DlHOkDownloads_Type = Counter32
_DlHOkDownloads_Object = MibTableColumn
dlHOkDownloads = _DlHOkDownloads_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 2, 1, 1, 2),
    _DlHOkDownloads_Type()
)
dlHOkDownloads.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dlHOkDownloads.setStatus("mandatory")
_DlHBadDownloads_Type = Counter32
_DlHBadDownloads_Object = MibTableColumn
dlHBadDownloads = _DlHBadDownloads_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 2, 1, 1, 3),
    _DlHBadDownloads_Type()
)
dlHBadDownloads.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dlHBadDownloads.setStatus("mandatory")
_DlHLongestTime_Type = Gauge32
_DlHLongestTime_Object = MibTableColumn
dlHLongestTime = _DlHLongestTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 2, 1, 1, 4),
    _DlHLongestTime_Type()
)
dlHLongestTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dlHLongestTime.setStatus("mandatory")
_DlHLongestSize_Type = Gauge32
_DlHLongestSize_Object = MibTableColumn
dlHLongestSize = _DlHLongestSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 2, 1, 1, 5),
    _DlHLongestSize_Type()
)
dlHLongestSize.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dlHLongestSize.setStatus("mandatory")
_CpHist_ObjectIdentity = ObjectIdentity
cpHist = _CpHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3)
)
_CpHistTable_Object = MibTable
cpHistTable = _CpHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 1)
)
if mibBuilder.loadTexts:
    cpHistTable.setStatus("mandatory")
_CpHistEntry_Object = MibTableRow
cpHistEntry = _CpHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 1, 1)
)
cpHistEntry.setIndexNames(
    (0, "LUXN-MIB", "cpHMode"),
)
if mibBuilder.loadTexts:
    cpHistEntry.setStatus("mandatory")
_CpHMode_Type = HistoryMode
_CpHMode_Object = MibTableColumn
cpHMode = _CpHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 1, 1, 1),
    _CpHMode_Type()
)
cpHMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHMode.setStatus("mandatory")
_CpHNumEvents_Type = Counter32
_CpHNumEvents_Object = MibTableColumn
cpHNumEvents = _CpHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 1, 1, 2),
    _CpHNumEvents_Type()
)
cpHNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHNumEvents.setStatus("mandatory")
_CpHTrapsSent_Type = Counter32
_CpHTrapsSent_Object = MibTableColumn
cpHTrapsSent = _CpHTrapsSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 1, 1, 3),
    _CpHTrapsSent_Type()
)
cpHTrapsSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHTrapsSent.setStatus("mandatory")
_CpHSNMPCmdsRcvd_Type = Counter32
_CpHSNMPCmdsRcvd_Object = MibTableColumn
cpHSNMPCmdsRcvd = _CpHSNMPCmdsRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 1, 1, 4),
    _CpHSNMPCmdsRcvd_Type()
)
cpHSNMPCmdsRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHSNMPCmdsRcvd.setStatus("mandatory")
_CpHCntrTable_Object = MibTable
cpHCntrTable = _CpHCntrTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2)
)
if mibBuilder.loadTexts:
    cpHCntrTable.setStatus("mandatory")
_CpHCntrEntry_Object = MibTableRow
cpHCntrEntry = _CpHCntrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1)
)
cpHCntrEntry.setIndexNames(
    (0, "LUXN-MIB", "cpHCntrMode"),
    (0, "LUXN-MIB", "cpCntrShelf"),
    (0, "LUXN-MIB", "cpCntrSlot"),
    (0, "LUXN-MIB", "cpCntrType"),
)
if mibBuilder.loadTexts:
    cpHCntrEntry.setStatus("mandatory")
_CpHCntrMode_Type = HistoryMode
_CpHCntrMode_Object = MibTableColumn
cpHCntrMode = _CpHCntrMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 1),
    _CpHCntrMode_Type()
)
cpHCntrMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHCntrMode.setStatus("mandatory")
_CpHCntrShelf_Type = CardShelf
_CpHCntrShelf_Object = MibTableColumn
cpHCntrShelf = _CpHCntrShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 2),
    _CpHCntrShelf_Type()
)
cpHCntrShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHCntrShelf.setStatus("mandatory")
_CpHCntrSlot_Type = CardSlot
_CpHCntrSlot_Object = MibTableColumn
cpHCntrSlot = _CpHCntrSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 3),
    _CpHCntrSlot_Type()
)
cpHCntrSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHCntrSlot.setStatus("mandatory")


class _CpHCntrType_Type(Integer32):
    """Custom type cpHCntrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("spi", 1)
    )


_CpHCntrType_Type.__name__ = "Integer32"
_CpHCntrType_Object = MibTableColumn
cpHCntrType = _CpHCntrType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 4),
    _CpHCntrType_Type()
)
cpHCntrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHCntrType.setStatus("mandatory")
_CpHTotPktSent_Type = Counter32
_CpHTotPktSent_Object = MibTableColumn
cpHTotPktSent = _CpHTotPktSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 5),
    _CpHTotPktSent_Type()
)
cpHTotPktSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHTotPktSent.setStatus("mandatory")
_CpHTotPktRcvd_Type = Counter32
_CpHTotPktRcvd_Object = MibTableColumn
cpHTotPktRcvd = _CpHTotPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 6),
    _CpHTotPktRcvd_Type()
)
cpHTotPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHTotPktRcvd.setStatus("mandatory")
_CpHBadPktRcvd_Type = Counter32
_CpHBadPktRcvd_Object = MibTableColumn
cpHBadPktRcvd = _CpHBadPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 7),
    _CpHBadPktRcvd_Type()
)
cpHBadPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHBadPktRcvd.setStatus("mandatory")
_CpHTotBadTrans_Type = Counter32
_CpHTotBadTrans_Object = MibTableColumn
cpHTotBadTrans = _CpHTotBadTrans_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 8),
    _CpHTotBadTrans_Type()
)
cpHTotBadTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHTotBadTrans.setStatus("mandatory")
_CpHBytesSent_Type = Counter32
_CpHBytesSent_Object = MibTableColumn
cpHBytesSent = _CpHBytesSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 9),
    _CpHBytesSent_Type()
)
cpHBytesSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHBytesSent.setStatus("mandatory")
_CpHBytesRcvd_Type = Counter32
_CpHBytesRcvd_Object = MibTableColumn
cpHBytesRcvd = _CpHBytesRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 10),
    _CpHBytesRcvd_Type()
)
cpHBytesRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHBytesRcvd.setStatus("mandatory")
_CpHMsgsDlvrd_Type = Counter32
_CpHMsgsDlvrd_Object = MibTableColumn
cpHMsgsDlvrd = _CpHMsgsDlvrd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 11),
    _CpHMsgsDlvrd_Type()
)
cpHMsgsDlvrd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHMsgsDlvrd.setStatus("mandatory")
_CpHBufAllocFail_Type = Counter32
_CpHBufAllocFail_Object = MibTableColumn
cpHBufAllocFail = _CpHBufAllocFail_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 12),
    _CpHBufAllocFail_Type()
)
cpHBufAllocFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHBufAllocFail.setStatus("mandatory")
_CpHEcbAllocFail_Type = Counter32
_CpHEcbAllocFail_Object = MibTableColumn
cpHEcbAllocFail = _CpHEcbAllocFail_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 13),
    _CpHEcbAllocFail_Type()
)
cpHEcbAllocFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHEcbAllocFail.setStatus("mandatory")
_CpHHistTable_Object = MibTable
cpHHistTable = _CpHHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 3)
)
if mibBuilder.loadTexts:
    cpHHistTable.setStatus("mandatory")
_CpHHistEntry_Object = MibTableRow
cpHHistEntry = _CpHHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 3, 1)
)
cpHHistEntry.setIndexNames(
    (0, "LUXN-MIB", "cpHHistMode"),
    (0, "LUXN-MIB", "cpHHistShelf"),
    (0, "LUXN-MIB", "cpHHistSlot"),
)
if mibBuilder.loadTexts:
    cpHHistEntry.setStatus("mandatory")
_CpHHistMode_Type = HistoryMode
_CpHHistMode_Object = MibTableColumn
cpHHistMode = _CpHHistMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 3, 1, 1),
    _CpHHistMode_Type()
)
cpHHistMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHHistMode.setStatus("mandatory")
_CpHHistShelf_Type = CardShelf
_CpHHistShelf_Object = MibTableColumn
cpHHistShelf = _CpHHistShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 3, 1, 2),
    _CpHHistShelf_Type()
)
cpHHistShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHHistShelf.setStatus("mandatory")
_CpHHistSlot_Type = CardSlot
_CpHHistSlot_Object = MibTableColumn
cpHHistSlot = _CpHHistSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 3, 1, 3),
    _CpHHistSlot_Type()
)
cpHHistSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHHistSlot.setStatus("mandatory")
_CpHLastBootTime_Type = DateAndTime
_CpHLastBootTime_Object = MibTableColumn
cpHLastBootTime = _CpHLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 3, 1, 4),
    _CpHLastBootTime_Type()
)
cpHLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHLastBootTime.setStatus("mandatory")
_CpHAvailTime_Type = Counter32
_CpHAvailTime_Object = MibTableColumn
cpHAvailTime = _CpHAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 3, 1, 5),
    _CpHAvailTime_Type()
)
cpHAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHAvailTime.setStatus("mandatory")
_CpHErrFreeSecs_Type = Counter32
_CpHErrFreeSecs_Object = MibTableColumn
cpHErrFreeSecs = _CpHErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 3, 1, 6),
    _CpHErrFreeSecs_Type()
)
cpHErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    cpHErrFreeSecs.setStatus("mandatory")
_CcHist_ObjectIdentity = ObjectIdentity
ccHist = _CcHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4)
)
_CcHistTable_Object = MibTable
ccHistTable = _CcHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 1)
)
if mibBuilder.loadTexts:
    ccHistTable.setStatus("mandatory")
_CcHistEntry_Object = MibTableRow
ccHistEntry = _CcHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 1, 1)
)
ccHistEntry.setIndexNames(
    (0, "LUXN-MIB", "ccHMode"),
)
if mibBuilder.loadTexts:
    ccHistEntry.setStatus("mandatory")
_CcHMode_Type = HistoryMode
_CcHMode_Object = MibTableColumn
ccHMode = _CcHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 1, 1, 1),
    _CcHMode_Type()
)
ccHMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHMode.setStatus("mandatory")
_CcHNumEvents_Type = Counter32
_CcHNumEvents_Object = MibTableColumn
ccHNumEvents = _CcHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 1, 1, 2),
    _CcHNumEvents_Type()
)
ccHNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHNumEvents.setStatus("mandatory")
_CcHCntrTable_Object = MibTable
ccHCntrTable = _CcHCntrTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2)
)
if mibBuilder.loadTexts:
    ccHCntrTable.setStatus("mandatory")
_CcHCntrEntry_Object = MibTableRow
ccHCntrEntry = _CcHCntrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1)
)
ccHCntrEntry.setIndexNames(
    (0, "LUXN-MIB", "ccHCntrMode"),
    (0, "LUXN-MIB", "ccHCntrLocation"),
    (0, "LUXN-MIB", "ccHCntrShelf"),
    (0, "LUXN-MIB", "ccHCntrSlot"),
    (0, "LUXN-MIB", "ccHCntrType"),
)
if mibBuilder.loadTexts:
    ccHCntrEntry.setStatus("mandatory")
_CcHCntrMode_Type = HistoryMode
_CcHCntrMode_Object = MibTableColumn
ccHCntrMode = _CcHCntrMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 1),
    _CcHCntrMode_Type()
)
ccHCntrMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHCntrMode.setStatus("mandatory")
_CcHCntrLocation_Type = CardLocation
_CcHCntrLocation_Object = MibTableColumn
ccHCntrLocation = _CcHCntrLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 2),
    _CcHCntrLocation_Type()
)
ccHCntrLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHCntrLocation.setStatus("mandatory")
_CcHCntrShelf_Type = CardShelf
_CcHCntrShelf_Object = MibTableColumn
ccHCntrShelf = _CcHCntrShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 3),
    _CcHCntrShelf_Type()
)
ccHCntrShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHCntrShelf.setStatus("mandatory")
_CcHCntrSlot_Type = CardSlot
_CcHCntrSlot_Object = MibTableColumn
ccHCntrSlot = _CcHCntrSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 4),
    _CcHCntrSlot_Type()
)
ccHCntrSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHCntrSlot.setStatus("mandatory")


class _CcHCntrType_Type(Integer32):
    """Custom type ccHCntrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("iwm", 2),
          ("spi", 1))
    )


_CcHCntrType_Type.__name__ = "Integer32"
_CcHCntrType_Object = MibTableColumn
ccHCntrType = _CcHCntrType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 5),
    _CcHCntrType_Type()
)
ccHCntrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHCntrType.setStatus("mandatory")
_CcHTotPktSent_Type = Counter32
_CcHTotPktSent_Object = MibTableColumn
ccHTotPktSent = _CcHTotPktSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 6),
    _CcHTotPktSent_Type()
)
ccHTotPktSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHTotPktSent.setStatus("mandatory")
_CcHTotPktRcvd_Type = Counter32
_CcHTotPktRcvd_Object = MibTableColumn
ccHTotPktRcvd = _CcHTotPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 7),
    _CcHTotPktRcvd_Type()
)
ccHTotPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHTotPktRcvd.setStatus("mandatory")
_CcHBadPktRcvd_Type = Counter32
_CcHBadPktRcvd_Object = MibTableColumn
ccHBadPktRcvd = _CcHBadPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 8),
    _CcHBadPktRcvd_Type()
)
ccHBadPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHBadPktRcvd.setStatus("mandatory")
_CcHTotBadTrans_Type = Counter32
_CcHTotBadTrans_Object = MibTableColumn
ccHTotBadTrans = _CcHTotBadTrans_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 9),
    _CcHTotBadTrans_Type()
)
ccHTotBadTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHTotBadTrans.setStatus("mandatory")
_CcHBytesSent_Type = Counter32
_CcHBytesSent_Object = MibTableColumn
ccHBytesSent = _CcHBytesSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 10),
    _CcHBytesSent_Type()
)
ccHBytesSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHBytesSent.setStatus("mandatory")
_CcHBytesRcvd_Type = Counter32
_CcHBytesRcvd_Object = MibTableColumn
ccHBytesRcvd = _CcHBytesRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 11),
    _CcHBytesRcvd_Type()
)
ccHBytesRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHBytesRcvd.setStatus("mandatory")
_CcHMsgsDlvrd_Type = Counter32
_CcHMsgsDlvrd_Object = MibTableColumn
ccHMsgsDlvrd = _CcHMsgsDlvrd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 12),
    _CcHMsgsDlvrd_Type()
)
ccHMsgsDlvrd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHMsgsDlvrd.setStatus("mandatory")
_CcHBufAllocFail_Type = Counter32
_CcHBufAllocFail_Object = MibTableColumn
ccHBufAllocFail = _CcHBufAllocFail_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 13),
    _CcHBufAllocFail_Type()
)
ccHBufAllocFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHBufAllocFail.setStatus("mandatory")
_CcHEcbAllocFail_Type = Counter32
_CcHEcbAllocFail_Object = MibTableColumn
ccHEcbAllocFail = _CcHEcbAllocFail_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 14),
    _CcHEcbAllocFail_Type()
)
ccHEcbAllocFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHEcbAllocFail.setStatus("mandatory")
_CcHHistTable_Object = MibTable
ccHHistTable = _CcHHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 3)
)
if mibBuilder.loadTexts:
    ccHHistTable.setStatus("mandatory")
_CcHHistEntry_Object = MibTableRow
ccHHistEntry = _CcHHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 3, 1)
)
ccHHistEntry.setIndexNames(
    (0, "LUXN-MIB", "ccHHistMode"),
    (0, "LUXN-MIB", "ccHHistLocation"),
    (0, "LUXN-MIB", "ccHHistShelf"),
    (0, "LUXN-MIB", "ccHHistSlot"),
)
if mibBuilder.loadTexts:
    ccHHistEntry.setStatus("mandatory")
_CcHHistMode_Type = HistoryMode
_CcHHistMode_Object = MibTableColumn
ccHHistMode = _CcHHistMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 3, 1, 1),
    _CcHHistMode_Type()
)
ccHHistMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHHistMode.setStatus("mandatory")
_CcHHistLocation_Type = CardLocation
_CcHHistLocation_Object = MibTableColumn
ccHHistLocation = _CcHHistLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 3, 1, 2),
    _CcHHistLocation_Type()
)
ccHHistLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHHistLocation.setStatus("mandatory")
_CcHHistShelf_Type = CardShelf
_CcHHistShelf_Object = MibTableColumn
ccHHistShelf = _CcHHistShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 3, 1, 3),
    _CcHHistShelf_Type()
)
ccHHistShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHHistShelf.setStatus("mandatory")
_CcHHistSlot_Type = CardSlot
_CcHHistSlot_Object = MibTableColumn
ccHHistSlot = _CcHHistSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 3, 1, 4),
    _CcHHistSlot_Type()
)
ccHHistSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHHistSlot.setStatus("mandatory")
_CcHLastBootTime_Type = DateAndTime
_CcHLastBootTime_Object = MibTableColumn
ccHLastBootTime = _CcHLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 3, 1, 5),
    _CcHLastBootTime_Type()
)
ccHLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHLastBootTime.setStatus("mandatory")
_CcHAvailTime_Type = Counter32
_CcHAvailTime_Object = MibTableColumn
ccHAvailTime = _CcHAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 3, 1, 6),
    _CcHAvailTime_Type()
)
ccHAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHAvailTime.setStatus("mandatory")
_CcHErrFreeSecs_Type = Counter32
_CcHErrFreeSecs_Object = MibTableColumn
ccHErrFreeSecs = _CcHErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 3, 1, 7),
    _CcHErrFreeSecs_Type()
)
ccHErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ccHErrFreeSecs.setStatus("mandatory")
_MuxHist_ObjectIdentity = ObjectIdentity
muxHist = _MuxHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 5)
)
_MuxHistTable_Object = MibTable
muxHistTable = _MuxHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 1)
)
if mibBuilder.loadTexts:
    muxHistTable.setStatus("mandatory")
_MuxHistEntry_Object = MibTableRow
muxHistEntry = _MuxHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 1, 1)
)
muxHistEntry.setIndexNames(
    (0, "LUXN-MIB", "muxHMode"),
)
if mibBuilder.loadTexts:
    muxHistEntry.setStatus("mandatory")
_MuxHMode_Type = HistoryMode
_MuxHMode_Object = MibTableColumn
muxHMode = _MuxHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 1, 1, 1),
    _MuxHMode_Type()
)
muxHMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxHMode.setStatus("mandatory")
_MuxHNumEvents_Type = Counter32
_MuxHNumEvents_Object = MibTableColumn
muxHNumEvents = _MuxHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 1, 1, 2),
    _MuxHNumEvents_Type()
)
muxHNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxHNumEvents.setStatus("mandatory")
_MuxHHistTable_Object = MibTable
muxHHistTable = _MuxHHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 2)
)
if mibBuilder.loadTexts:
    muxHHistTable.setStatus("mandatory")
_MuxHHistEntry_Object = MibTableRow
muxHHistEntry = _MuxHHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 2, 1)
)
muxHHistEntry.setIndexNames(
    (0, "LUXN-MIB", "muxHHistMode"),
    (0, "LUXN-MIB", "muxHHistLocation"),
    (0, "LUXN-MIB", "muxHHistShelf"),
    (0, "LUXN-MIB", "muxHHistSlot"),
)
if mibBuilder.loadTexts:
    muxHHistEntry.setStatus("mandatory")
_MuxHHistMode_Type = HistoryMode
_MuxHHistMode_Object = MibTableColumn
muxHHistMode = _MuxHHistMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 2, 1, 1),
    _MuxHHistMode_Type()
)
muxHHistMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxHHistMode.setStatus("mandatory")
_MuxHHistLocation_Type = CardLocation
_MuxHHistLocation_Object = MibTableColumn
muxHHistLocation = _MuxHHistLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 2, 1, 2),
    _MuxHHistLocation_Type()
)
muxHHistLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxHHistLocation.setStatus("mandatory")
_MuxHHistShelf_Type = CardShelf
_MuxHHistShelf_Object = MibTableColumn
muxHHistShelf = _MuxHHistShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 2, 1, 3),
    _MuxHHistShelf_Type()
)
muxHHistShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxHHistShelf.setStatus("mandatory")
_MuxHHistSlot_Type = CardSlot
_MuxHHistSlot_Object = MibTableColumn
muxHHistSlot = _MuxHHistSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 2, 1, 4),
    _MuxHHistSlot_Type()
)
muxHHistSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxHHistSlot.setStatus("mandatory")


class _MuxHHistType_Type(Integer32):
    """Custom type muxHHistType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              10,
              13,
              21)
        )
    )
    namedValues = NamedValues(
        *(("demux", 5),
          ("mux", 4),
          ("w2cmd", 13),
          ("w4cd", 10),
          ("w4cm", 21))
    )


_MuxHHistType_Type.__name__ = "Integer32"
_MuxHHistType_Object = MibTableColumn
muxHHistType = _MuxHHistType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 2, 1, 5),
    _MuxHHistType_Type()
)
muxHHistType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxHHistType.setStatus("mandatory")
_MuxHLastBootTime_Type = DateAndTime
_MuxHLastBootTime_Object = MibTableColumn
muxHLastBootTime = _MuxHLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 2, 1, 6),
    _MuxHLastBootTime_Type()
)
muxHLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxHLastBootTime.setStatus("mandatory")
_MuxHAvailTime_Type = Counter32
_MuxHAvailTime_Object = MibTableColumn
muxHAvailTime = _MuxHAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 2, 1, 7),
    _MuxHAvailTime_Type()
)
muxHAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxHAvailTime.setStatus("mandatory")
_MuxHErrFreeSecs_Type = Counter32
_MuxHErrFreeSecs_Object = MibTableColumn
muxHErrFreeSecs = _MuxHErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 2, 1, 8),
    _MuxHErrFreeSecs_Type()
)
muxHErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    muxHErrFreeSecs.setStatus("mandatory")
_PsHist_ObjectIdentity = ObjectIdentity
psHist = _PsHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 6)
)
_PsHistTable_Object = MibTable
psHistTable = _PsHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 6, 1)
)
if mibBuilder.loadTexts:
    psHistTable.setStatus("mandatory")
_PsHistEntry_Object = MibTableRow
psHistEntry = _PsHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 6, 1, 1)
)
psHistEntry.setIndexNames(
    (0, "LUXN-MIB", "psHMode"),
)
if mibBuilder.loadTexts:
    psHistEntry.setStatus("mandatory")
_PsHMode_Type = HistoryMode
_PsHMode_Object = MibTableColumn
psHMode = _PsHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 6, 1, 1, 1),
    _PsHMode_Type()
)
psHMode.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    psHMode.setStatus("mandatory")
_PsHNumEvents_Type = Counter32
_PsHNumEvents_Object = MibTableColumn
psHNumEvents = _PsHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 6, 1, 1, 2),
    _PsHNumEvents_Type()
)
psHNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    psHNumEvents.setStatus("mandatory")
_FadmHist_ObjectIdentity = ObjectIdentity
fadmHist = _FadmHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 7)
)
_FadmHistTable_Object = MibTable
fadmHistTable = _FadmHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 1)
)
if mibBuilder.loadTexts:
    fadmHistTable.setStatus("mandatory")
_FadmHistEntry_Object = MibTableRow
fadmHistEntry = _FadmHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 1, 1)
)
fadmHistEntry.setIndexNames(
    (0, "LUXN-MIB", "fadmHMode"),
)
if mibBuilder.loadTexts:
    fadmHistEntry.setStatus("mandatory")
_FadmHMode_Type = HistoryMode
_FadmHMode_Object = MibTableColumn
fadmHMode = _FadmHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 1, 1, 1),
    _FadmHMode_Type()
)
fadmHMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmHMode.setStatus("mandatory")
_FadmHNumEvents_Type = Counter32
_FadmHNumEvents_Object = MibTableColumn
fadmHNumEvents = _FadmHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 1, 1, 2),
    _FadmHNumEvents_Type()
)
fadmHNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmHNumEvents.setStatus("mandatory")
_FadmHHistTable_Object = MibTable
fadmHHistTable = _FadmHHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 2)
)
if mibBuilder.loadTexts:
    fadmHHistTable.setStatus("mandatory")
_FadmHHistEntry_Object = MibTableRow
fadmHHistEntry = _FadmHHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 2, 1)
)
fadmHHistEntry.setIndexNames(
    (0, "LUXN-MIB", "fadmHHistMode"),
    (0, "LUXN-MIB", "fadmHHistLocation"),
    (0, "LUXN-MIB", "fadmHHistShelf"),
    (0, "LUXN-MIB", "fadmHHistSlot"),
)
if mibBuilder.loadTexts:
    fadmHHistEntry.setStatus("mandatory")
_FadmHHistMode_Type = HistoryMode
_FadmHHistMode_Object = MibTableColumn
fadmHHistMode = _FadmHHistMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 2, 1, 1),
    _FadmHHistMode_Type()
)
fadmHHistMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmHHistMode.setStatus("mandatory")
_FadmHHistLocation_Type = CardLocation
_FadmHHistLocation_Object = MibTableColumn
fadmHHistLocation = _FadmHHistLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 2, 1, 2),
    _FadmHHistLocation_Type()
)
fadmHHistLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmHHistLocation.setStatus("mandatory")
_FadmHHistShelf_Type = CardShelf
_FadmHHistShelf_Object = MibTableColumn
fadmHHistShelf = _FadmHHistShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 2, 1, 3),
    _FadmHHistShelf_Type()
)
fadmHHistShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmHHistShelf.setStatus("mandatory")
_FadmHHistSlot_Type = CardSlot
_FadmHHistSlot_Object = MibTableColumn
fadmHHistSlot = _FadmHHistSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 2, 1, 4),
    _FadmHHistSlot_Type()
)
fadmHHistSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmHHistSlot.setStatus("mandatory")
_FadmHLastBootTime_Type = DateAndTime
_FadmHLastBootTime_Object = MibTableColumn
fadmHLastBootTime = _FadmHLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 2, 1, 6),
    _FadmHLastBootTime_Type()
)
fadmHLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmHLastBootTime.setStatus("mandatory")
_FadmHAvailTime_Type = Counter32
_FadmHAvailTime_Object = MibTableColumn
fadmHAvailTime = _FadmHAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 2, 1, 7),
    _FadmHAvailTime_Type()
)
fadmHAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmHAvailTime.setStatus("mandatory")
_FadmHErrFreeSecs_Type = Counter32
_FadmHErrFreeSecs_Object = MibTableColumn
fadmHErrFreeSecs = _FadmHErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 2, 1, 8),
    _FadmHErrFreeSecs_Type()
)
fadmHErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    fadmHErrFreeSecs.setStatus("mandatory")
_OppmHist_ObjectIdentity = ObjectIdentity
oppmHist = _OppmHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 8)
)
_OppmHistTable_Object = MibTable
oppmHistTable = _OppmHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 1)
)
if mibBuilder.loadTexts:
    oppmHistTable.setStatus("mandatory")
_OppmHistEntry_Object = MibTableRow
oppmHistEntry = _OppmHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 1, 1)
)
oppmHistEntry.setIndexNames(
    (0, "LUXN-MIB", "oppmHMode"),
)
if mibBuilder.loadTexts:
    oppmHistEntry.setStatus("mandatory")
_OppmHMode_Type = HistoryMode
_OppmHMode_Object = MibTableColumn
oppmHMode = _OppmHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 1, 1, 1),
    _OppmHMode_Type()
)
oppmHMode.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmHMode.setStatus("mandatory")
_OppmHNumEvents_Type = Counter32
_OppmHNumEvents_Object = MibTableColumn
oppmHNumEvents = _OppmHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 1, 1, 2),
    _OppmHNumEvents_Type()
)
oppmHNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmHNumEvents.setStatus("mandatory")
_OppmHHistTable_Object = MibTable
oppmHHistTable = _OppmHHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 2)
)
if mibBuilder.loadTexts:
    oppmHHistTable.setStatus("mandatory")
_OppmHHistEntry_Object = MibTableRow
oppmHHistEntry = _OppmHHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 2, 1)
)
oppmHHistEntry.setIndexNames(
    (0, "LUXN-MIB", "oppmHHistMode"),
    (0, "LUXN-MIB", "oppmHHistLocation"),
    (0, "LUXN-MIB", "oppmHHistShelf"),
    (0, "LUXN-MIB", "oppmHHistSlot"),
)
if mibBuilder.loadTexts:
    oppmHHistEntry.setStatus("mandatory")
_OppmHHistMode_Type = HistoryMode
_OppmHHistMode_Object = MibTableColumn
oppmHHistMode = _OppmHHistMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 2, 1, 1),
    _OppmHHistMode_Type()
)
oppmHHistMode.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmHHistMode.setStatus("mandatory")
_OppmHHistLocation_Type = CardLocation
_OppmHHistLocation_Object = MibTableColumn
oppmHHistLocation = _OppmHHistLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 2, 1, 2),
    _OppmHHistLocation_Type()
)
oppmHHistLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmHHistLocation.setStatus("mandatory")
_OppmHHistShelf_Type = CardShelf
_OppmHHistShelf_Object = MibTableColumn
oppmHHistShelf = _OppmHHistShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 2, 1, 3),
    _OppmHHistShelf_Type()
)
oppmHHistShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmHHistShelf.setStatus("mandatory")
_OppmHHistSlot_Type = CardSlot
_OppmHHistSlot_Object = MibTableColumn
oppmHHistSlot = _OppmHHistSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 2, 1, 4),
    _OppmHHistSlot_Type()
)
oppmHHistSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmHHistSlot.setStatus("mandatory")
_OppmHLastBootTime_Type = DateAndTime
_OppmHLastBootTime_Object = MibTableColumn
oppmHLastBootTime = _OppmHLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 2, 1, 6),
    _OppmHLastBootTime_Type()
)
oppmHLastBootTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmHLastBootTime.setStatus("mandatory")
_OppmHAvailTime_Type = Counter32
_OppmHAvailTime_Object = MibTableColumn
oppmHAvailTime = _OppmHAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 2, 1, 7),
    _OppmHAvailTime_Type()
)
oppmHAvailTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmHAvailTime.setStatus("mandatory")
_OppmHErrFreeSecs_Type = Counter32
_OppmHErrFreeSecs_Object = MibTableColumn
oppmHErrFreeSecs = _OppmHErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 2, 1, 8),
    _OppmHErrFreeSecs_Type()
)
oppmHErrFreeSecs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmHErrFreeSecs.setStatus("mandatory")
_McmHist_ObjectIdentity = ObjectIdentity
mcmHist = _McmHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9)
)
_McmHistTable_Object = MibTable
mcmHistTable = _McmHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 1)
)
if mibBuilder.loadTexts:
    mcmHistTable.setStatus("mandatory")
_McmHistEntry_Object = MibTableRow
mcmHistEntry = _McmHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 1, 1)
)
mcmHistEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmHMode"),
)
if mibBuilder.loadTexts:
    mcmHistEntry.setStatus("mandatory")
_McmHMode_Type = HistoryMode
_McmHMode_Object = MibTableColumn
mcmHMode = _McmHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 1, 1, 1),
    _McmHMode_Type()
)
mcmHMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmHMode.setStatus("mandatory")
_McmHNumEvents_Type = Counter32
_McmHNumEvents_Object = MibTableColumn
mcmHNumEvents = _McmHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 1, 1, 2),
    _McmHNumEvents_Type()
)
mcmHNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmHNumEvents.setStatus("mandatory")
_McmHCntrTable_Object = MibTable
mcmHCntrTable = _McmHCntrTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2)
)
if mibBuilder.loadTexts:
    mcmHCntrTable.setStatus("mandatory")
_McmHCntrEntry_Object = MibTableRow
mcmHCntrEntry = _McmHCntrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1)
)
mcmHCntrEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmHCntrMode"),
    (0, "LUXN-MIB", "mcmHCntrLocation"),
    (0, "LUXN-MIB", "mcmHCntrShelf"),
    (0, "LUXN-MIB", "mcmHCntrSlot"),
    (0, "LUXN-MIB", "mcmHCntrType"),
)
if mibBuilder.loadTexts:
    mcmHCntrEntry.setStatus("mandatory")
_McmHCntrMode_Type = HistoryMode
_McmHCntrMode_Object = MibTableColumn
mcmHCntrMode = _McmHCntrMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 1),
    _McmHCntrMode_Type()
)
mcmHCntrMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmHCntrMode.setStatus("mandatory")
_McmHCntrLocation_Type = CardLocation
_McmHCntrLocation_Object = MibTableColumn
mcmHCntrLocation = _McmHCntrLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 2),
    _McmHCntrLocation_Type()
)
mcmHCntrLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmHCntrLocation.setStatus("mandatory")
_McmHCntrShelf_Type = CardShelf
_McmHCntrShelf_Object = MibTableColumn
mcmHCntrShelf = _McmHCntrShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 3),
    _McmHCntrShelf_Type()
)
mcmHCntrShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmHCntrShelf.setStatus("mandatory")
_McmHCntrSlot_Type = CardSlot
_McmHCntrSlot_Object = MibTableColumn
mcmHCntrSlot = _McmHCntrSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 4),
    _McmHCntrSlot_Type()
)
mcmHCntrSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmHCntrSlot.setStatus("mandatory")


class _McmHCntrType_Type(Integer32):
    """Custom type mcmHCntrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("iwm", 2),
          ("spi", 1))
    )


_McmHCntrType_Type.__name__ = "Integer32"
_McmHCntrType_Object = MibTableColumn
mcmHCntrType = _McmHCntrType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 5),
    _McmHCntrType_Type()
)
mcmHCntrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmHCntrType.setStatus("mandatory")
_McmHTotPktSent_Type = Counter32
_McmHTotPktSent_Object = MibTableColumn
mcmHTotPktSent = _McmHTotPktSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 6),
    _McmHTotPktSent_Type()
)
mcmHTotPktSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmHTotPktSent.setStatus("mandatory")
_McmHTotPktRcvd_Type = Counter32
_McmHTotPktRcvd_Object = MibTableColumn
mcmHTotPktRcvd = _McmHTotPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 7),
    _McmHTotPktRcvd_Type()
)
mcmHTotPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmHTotPktRcvd.setStatus("mandatory")
_McmHBadPktRcvd_Type = Counter32
_McmHBadPktRcvd_Object = MibTableColumn
mcmHBadPktRcvd = _McmHBadPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 8),
    _McmHBadPktRcvd_Type()
)
mcmHBadPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmHBadPktRcvd.setStatus("mandatory")
_McmHTotBadTrans_Type = Counter32
_McmHTotBadTrans_Object = MibTableColumn
mcmHTotBadTrans = _McmHTotBadTrans_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 9),
    _McmHTotBadTrans_Type()
)
mcmHTotBadTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmHTotBadTrans.setStatus("mandatory")
_McmHBytesSent_Type = Counter32
_McmHBytesSent_Object = MibTableColumn
mcmHBytesSent = _McmHBytesSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 10),
    _McmHBytesSent_Type()
)
mcmHBytesSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmHBytesSent.setStatus("mandatory")
_McmHBytesRcvd_Type = Counter32
_McmHBytesRcvd_Object = MibTableColumn
mcmHBytesRcvd = _McmHBytesRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 11),
    _McmHBytesRcvd_Type()
)
mcmHBytesRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmHBytesRcvd.setStatus("mandatory")
_McmHMsgsDlvrd_Type = Counter32
_McmHMsgsDlvrd_Object = MibTableColumn
mcmHMsgsDlvrd = _McmHMsgsDlvrd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 12),
    _McmHMsgsDlvrd_Type()
)
mcmHMsgsDlvrd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmHMsgsDlvrd.setStatus("mandatory")
_McmHBufAllocFail_Type = Counter32
_McmHBufAllocFail_Object = MibTableColumn
mcmHBufAllocFail = _McmHBufAllocFail_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 13),
    _McmHBufAllocFail_Type()
)
mcmHBufAllocFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmHBufAllocFail.setStatus("mandatory")
_McmHEcbAllocFail_Type = Counter32
_McmHEcbAllocFail_Object = MibTableColumn
mcmHEcbAllocFail = _McmHEcbAllocFail_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 14),
    _McmHEcbAllocFail_Type()
)
mcmHEcbAllocFail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmHEcbAllocFail.setStatus("mandatory")
_McmPortHIntervalTable_Object = MibTable
mcmPortHIntervalTable = _McmPortHIntervalTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3)
)
if mibBuilder.loadTexts:
    mcmPortHIntervalTable.setStatus("mandatory")
_McmPortHIntervalEntry_Object = MibTableRow
mcmPortHIntervalEntry = _McmPortHIntervalEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1)
)
mcmPortHIntervalEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmPortHIntervalLocation"),
    (0, "LUXN-MIB", "mcmPortHIntervalShelf"),
    (0, "LUXN-MIB", "mcmPortHIntervalSlot"),
    (0, "LUXN-MIB", "mcmPortHIntervalPort"),
    (0, "LUXN-MIB", "mcmPortHIntervalNumber"),
)
if mibBuilder.loadTexts:
    mcmPortHIntervalEntry.setStatus("mandatory")
_McmPortHIntervalLocation_Type = CardLocation
_McmPortHIntervalLocation_Object = MibTableColumn
mcmPortHIntervalLocation = _McmPortHIntervalLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 1),
    _McmPortHIntervalLocation_Type()
)
mcmPortHIntervalLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHIntervalLocation.setStatus("mandatory")
_McmPortHIntervalShelf_Type = CardShelf
_McmPortHIntervalShelf_Object = MibTableColumn
mcmPortHIntervalShelf = _McmPortHIntervalShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 2),
    _McmPortHIntervalShelf_Type()
)
mcmPortHIntervalShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHIntervalShelf.setStatus("mandatory")
_McmPortHIntervalSlot_Type = CardSlot
_McmPortHIntervalSlot_Object = MibTableColumn
mcmPortHIntervalSlot = _McmPortHIntervalSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 3),
    _McmPortHIntervalSlot_Type()
)
mcmPortHIntervalSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHIntervalSlot.setStatus("mandatory")
_McmPortHIntervalPort_Type = Integer32
_McmPortHIntervalPort_Object = MibTableColumn
mcmPortHIntervalPort = _McmPortHIntervalPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 4),
    _McmPortHIntervalPort_Type()
)
mcmPortHIntervalPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHIntervalPort.setStatus("mandatory")
_McmPortHIntervalNumber_Type = Integer32
_McmPortHIntervalNumber_Object = MibTableColumn
mcmPortHIntervalNumber = _McmPortHIntervalNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 5),
    _McmPortHIntervalNumber_Type()
)
mcmPortHIntervalNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHIntervalNumber.setStatus("mandatory")
_McmPortHIntervalASs_Type = Counter32
_McmPortHIntervalASs_Object = MibTableColumn
mcmPortHIntervalASs = _McmPortHIntervalASs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 6),
    _McmPortHIntervalASs_Type()
)
mcmPortHIntervalASs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHIntervalASs.setStatus("mandatory")
_McmPortHIntervalFrameASs_Type = Counter32
_McmPortHIntervalFrameASs_Object = MibTableColumn
mcmPortHIntervalFrameASs = _McmPortHIntervalFrameASs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 7),
    _McmPortHIntervalFrameASs_Type()
)
mcmPortHIntervalFrameASs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmPortHIntervalFrameASs.setStatus("mandatory")
_McmPortHIntervalFEs_Type = Counter32
_McmPortHIntervalFEs_Object = MibTableColumn
mcmPortHIntervalFEs = _McmPortHIntervalFEs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 8),
    _McmPortHIntervalFEs_Type()
)
mcmPortHIntervalFEs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHIntervalFEs.setStatus("mandatory")
_McmPortHIntervalCRCErrs_Type = Counter32
_McmPortHIntervalCRCErrs_Object = MibTableColumn
mcmPortHIntervalCRCErrs = _McmPortHIntervalCRCErrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 9),
    _McmPortHIntervalCRCErrs_Type()
)
mcmPortHIntervalCRCErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHIntervalCRCErrs.setStatus("mandatory")
_McmPortHIntervalSESs_Type = Counter32
_McmPortHIntervalSESs_Object = MibTableColumn
mcmPortHIntervalSESs = _McmPortHIntervalSESs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 10),
    _McmPortHIntervalSESs_Type()
)
mcmPortHIntervalSESs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHIntervalSESs.setStatus("mandatory")
_McmPortHIntervalSEFSs_Type = Counter32
_McmPortHIntervalSEFSs_Object = MibTableColumn
mcmPortHIntervalSEFSs = _McmPortHIntervalSEFSs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 11),
    _McmPortHIntervalSEFSs_Type()
)
mcmPortHIntervalSEFSs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHIntervalSEFSs.setStatus("mandatory")
_McmPortHIntervalUASs_Type = Counter32
_McmPortHIntervalUASs_Object = MibTableColumn
mcmPortHIntervalUASs = _McmPortHIntervalUASs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 12),
    _McmPortHIntervalUASs_Type()
)
mcmPortHIntervalUASs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHIntervalUASs.setStatus("mandatory")
_McmPortHIntervalLESs_Type = Counter32
_McmPortHIntervalLESs_Object = MibTableColumn
mcmPortHIntervalLESs = _McmPortHIntervalLESs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 13),
    _McmPortHIntervalLESs_Type()
)
mcmPortHIntervalLESs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHIntervalLESs.setStatus("mandatory")
_McmPortHIntervalBESs_Type = Counter32
_McmPortHIntervalBESs_Object = MibTableColumn
mcmPortHIntervalBESs = _McmPortHIntervalBESs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 14),
    _McmPortHIntervalBESs_Type()
)
mcmPortHIntervalBESs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHIntervalBESs.setStatus("mandatory")
_McmPortHIntervalDMs_Type = Counter32
_McmPortHIntervalDMs_Object = MibTableColumn
mcmPortHIntervalDMs = _McmPortHIntervalDMs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 15),
    _McmPortHIntervalDMs_Type()
)
mcmPortHIntervalDMs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHIntervalDMs.setStatus("mandatory")
_McmPortHIntervalLCVs_Type = Counter32
_McmPortHIntervalLCVs_Object = MibTableColumn
mcmPortHIntervalLCVs = _McmPortHIntervalLCVs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 16),
    _McmPortHIntervalLCVs_Type()
)
mcmPortHIntervalLCVs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHIntervalLCVs.setStatus("mandatory")
_McmPortHTotalTable_Object = MibTable
mcmPortHTotalTable = _McmPortHTotalTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4)
)
if mibBuilder.loadTexts:
    mcmPortHTotalTable.setStatus("mandatory")
_McmPortHTotalEntry_Object = MibTableRow
mcmPortHTotalEntry = _McmPortHTotalEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1)
)
mcmPortHTotalEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmPortHTotalLocation"),
    (0, "LUXN-MIB", "mcmPortHTotalShelf"),
    (0, "LUXN-MIB", "mcmPortHTotalSlot"),
    (0, "LUXN-MIB", "mcmPortHTotalPort"),
)
if mibBuilder.loadTexts:
    mcmPortHTotalEntry.setStatus("mandatory")
_McmPortHTotalLocation_Type = CardLocation
_McmPortHTotalLocation_Object = MibTableColumn
mcmPortHTotalLocation = _McmPortHTotalLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 1),
    _McmPortHTotalLocation_Type()
)
mcmPortHTotalLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHTotalLocation.setStatus("mandatory")
_McmPortHTotalShelf_Type = CardShelf
_McmPortHTotalShelf_Object = MibTableColumn
mcmPortHTotalShelf = _McmPortHTotalShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 2),
    _McmPortHTotalShelf_Type()
)
mcmPortHTotalShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHTotalShelf.setStatus("mandatory")
_McmPortHTotalSlot_Type = CardSlot
_McmPortHTotalSlot_Object = MibTableColumn
mcmPortHTotalSlot = _McmPortHTotalSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 3),
    _McmPortHTotalSlot_Type()
)
mcmPortHTotalSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHTotalSlot.setStatus("mandatory")
_McmPortHTotalPort_Type = Integer32
_McmPortHTotalPort_Object = MibTableColumn
mcmPortHTotalPort = _McmPortHTotalPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 4),
    _McmPortHTotalPort_Type()
)
mcmPortHTotalPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHTotalPort.setStatus("mandatory")
_McmPortHTotalASs_Type = Counter32
_McmPortHTotalASs_Object = MibTableColumn
mcmPortHTotalASs = _McmPortHTotalASs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 5),
    _McmPortHTotalASs_Type()
)
mcmPortHTotalASs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHTotalASs.setStatus("mandatory")
_McmPortHTotalFrameASs_Type = Counter32
_McmPortHTotalFrameASs_Object = MibTableColumn
mcmPortHTotalFrameASs = _McmPortHTotalFrameASs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 6),
    _McmPortHTotalFrameASs_Type()
)
mcmPortHTotalFrameASs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmPortHTotalFrameASs.setStatus("mandatory")
_McmPortHTotalFEs_Type = Counter32
_McmPortHTotalFEs_Object = MibTableColumn
mcmPortHTotalFEs = _McmPortHTotalFEs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 7),
    _McmPortHTotalFEs_Type()
)
mcmPortHTotalFEs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHTotalFEs.setStatus("mandatory")
_McmPortHTotalCRCErrs_Type = Counter32
_McmPortHTotalCRCErrs_Object = MibTableColumn
mcmPortHTotalCRCErrs = _McmPortHTotalCRCErrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 8),
    _McmPortHTotalCRCErrs_Type()
)
mcmPortHTotalCRCErrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHTotalCRCErrs.setStatus("mandatory")
_McmPortHTotalSESs_Type = Counter32
_McmPortHTotalSESs_Object = MibTableColumn
mcmPortHTotalSESs = _McmPortHTotalSESs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 9),
    _McmPortHTotalSESs_Type()
)
mcmPortHTotalSESs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHTotalSESs.setStatus("mandatory")
_McmPortHTotalSEFSs_Type = Counter32
_McmPortHTotalSEFSs_Object = MibTableColumn
mcmPortHTotalSEFSs = _McmPortHTotalSEFSs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 10),
    _McmPortHTotalSEFSs_Type()
)
mcmPortHTotalSEFSs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHTotalSEFSs.setStatus("mandatory")
_McmPortHTotalUASs_Type = Counter32
_McmPortHTotalUASs_Object = MibTableColumn
mcmPortHTotalUASs = _McmPortHTotalUASs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 11),
    _McmPortHTotalUASs_Type()
)
mcmPortHTotalUASs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHTotalUASs.setStatus("mandatory")
_McmPortHTotalLESs_Type = Counter32
_McmPortHTotalLESs_Object = MibTableColumn
mcmPortHTotalLESs = _McmPortHTotalLESs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 12),
    _McmPortHTotalLESs_Type()
)
mcmPortHTotalLESs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHTotalLESs.setStatus("mandatory")
_McmPortHTotalBESs_Type = Counter32
_McmPortHTotalBESs_Object = MibTableColumn
mcmPortHTotalBESs = _McmPortHTotalBESs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 13),
    _McmPortHTotalBESs_Type()
)
mcmPortHTotalBESs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHTotalBESs.setStatus("mandatory")
_McmPortHTotalDMs_Type = Counter32
_McmPortHTotalDMs_Object = MibTableColumn
mcmPortHTotalDMs = _McmPortHTotalDMs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 14),
    _McmPortHTotalDMs_Type()
)
mcmPortHTotalDMs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHTotalDMs.setStatus("mandatory")
_McmPortHTotalLCVs_Type = Counter32
_McmPortHTotalLCVs_Object = MibTableColumn
mcmPortHTotalLCVs = _McmPortHTotalLCVs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 15),
    _McmPortHTotalLCVs_Type()
)
mcmPortHTotalLCVs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmPortHTotalLCVs.setStatus("mandatory")
_FnHist_ObjectIdentity = ObjectIdentity
fnHist = _FnHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 10)
)
_FnHistTable_Object = MibTable
fnHistTable = _FnHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 10, 1)
)
if mibBuilder.loadTexts:
    fnHistTable.setStatus("mandatory")
_FnHistEntry_Object = MibTableRow
fnHistEntry = _FnHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 10, 1, 1)
)
fnHistEntry.setIndexNames(
    (0, "LUXN-MIB", "fnHMode"),
)
if mibBuilder.loadTexts:
    fnHistEntry.setStatus("mandatory")
_FnHMode_Type = HistoryMode
_FnHMode_Object = MibTableColumn
fnHMode = _FnHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 10, 1, 1, 1),
    _FnHMode_Type()
)
fnHMode.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fnHMode.setStatus("mandatory")
_FnHNumEvents_Type = Counter32
_FnHNumEvents_Object = MibTableColumn
fnHNumEvents = _FnHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 10, 1, 1, 2),
    _FnHNumEvents_Type()
)
fnHNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fnHNumEvents.setStatus("mandatory")
_CsimHist_ObjectIdentity = ObjectIdentity
csimHist = _CsimHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 11)
)
_CsimHistTable_Object = MibTable
csimHistTable = _CsimHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 1)
)
if mibBuilder.loadTexts:
    csimHistTable.setStatus("mandatory")
_CsimHistEntry_Object = MibTableRow
csimHistEntry = _CsimHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 1, 1)
)
csimHistEntry.setIndexNames(
    (0, "LUXN-MIB", "csimHMode"),
)
if mibBuilder.loadTexts:
    csimHistEntry.setStatus("mandatory")
_CsimHMode_Type = HistoryMode
_CsimHMode_Object = MibTableColumn
csimHMode = _CsimHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 1, 1, 1),
    _CsimHMode_Type()
)
csimHMode.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    csimHMode.setStatus("mandatory")
_CsimHNumEvents_Type = Counter32
_CsimHNumEvents_Object = MibTableColumn
csimHNumEvents = _CsimHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 1, 1, 2),
    _CsimHNumEvents_Type()
)
csimHNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    csimHNumEvents.setStatus("mandatory")
_CsimHistIntervalTable_Object = MibTable
csimHistIntervalTable = _CsimHistIntervalTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2)
)
if mibBuilder.loadTexts:
    csimHistIntervalTable.setStatus("mandatory")
_CsimHistIntervalEntry_Object = MibTableRow
csimHistIntervalEntry = _CsimHistIntervalEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1)
)
csimHistIntervalEntry.setIndexNames(
    (0, "LUXN-MIB", "csimIntervalLocation"),
    (0, "LUXN-MIB", "csimIntervalShelf"),
    (0, "LUXN-MIB", "csimIntervalSlot"),
    (0, "LUXN-MIB", "csimIntervalNumber"),
)
if mibBuilder.loadTexts:
    csimHistIntervalEntry.setStatus("mandatory")
_CsimIntervalLocation_Type = CardLocation
_CsimIntervalLocation_Object = MibTableColumn
csimIntervalLocation = _CsimIntervalLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1, 1),
    _CsimIntervalLocation_Type()
)
csimIntervalLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimIntervalLocation.setStatus("mandatory")
_CsimIntervalShelf_Type = CardShelf
_CsimIntervalShelf_Object = MibTableColumn
csimIntervalShelf = _CsimIntervalShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1, 2),
    _CsimIntervalShelf_Type()
)
csimIntervalShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimIntervalShelf.setStatus("mandatory")
_CsimIntervalSlot_Type = CardSlot
_CsimIntervalSlot_Object = MibTableColumn
csimIntervalSlot = _CsimIntervalSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1, 3),
    _CsimIntervalSlot_Type()
)
csimIntervalSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimIntervalSlot.setStatus("mandatory")


class _CsimIntervalNumber_Type(Integer32):
    """Custom type csimIntervalNumber based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 96),
    )


_CsimIntervalNumber_Type.__name__ = "Integer32"
_CsimIntervalNumber_Object = MibTableColumn
csimIntervalNumber = _CsimIntervalNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1, 4),
    _CsimIntervalNumber_Type()
)
csimIntervalNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimIntervalNumber.setStatus("mandatory")
_CsimIntervalEFIs_Type = Integer32
_CsimIntervalEFIs_Object = MibTableColumn
csimIntervalEFIs = _CsimIntervalEFIs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1, 5),
    _CsimIntervalEFIs_Type()
)
csimIntervalEFIs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimIntervalEFIs.setStatus("mandatory")
_CsimIntervalEIs_Type = Integer32
_CsimIntervalEIs_Object = MibTableColumn
csimIntervalEIs = _CsimIntervalEIs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1, 6),
    _CsimIntervalEIs_Type()
)
csimIntervalEIs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimIntervalEIs.setStatus("mandatory")
_CsimIntervalSEIs_Type = Integer32
_CsimIntervalSEIs_Object = MibTableColumn
csimIntervalSEIs = _CsimIntervalSEIs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1, 7),
    _CsimIntervalSEIs_Type()
)
csimIntervalSEIs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimIntervalSEIs.setStatus("mandatory")
_CsimIntervalBERs_Type = DisplayString
_CsimIntervalBERs_Object = MibTableColumn
csimIntervalBERs = _CsimIntervalBERs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1, 8),
    _CsimIntervalBERs_Type()
)
csimIntervalBERs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimIntervalBERs.setStatus("mandatory")
_CsimIntervalUAIs_Type = Integer32
_CsimIntervalUAIs_Object = MibTableColumn
csimIntervalUAIs = _CsimIntervalUAIs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1, 9),
    _CsimIntervalUAIs_Type()
)
csimIntervalUAIs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimIntervalUAIs.setStatus("mandatory")
_CsimIntervalValidData_Type = Boolean
_CsimIntervalValidData_Object = MibTableColumn
csimIntervalValidData = _CsimIntervalValidData_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1, 10),
    _CsimIntervalValidData_Type()
)
csimIntervalValidData.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    csimIntervalValidData.setStatus("mandatory")
_CsimIntervalDateTime_Type = Integer32
_CsimIntervalDateTime_Object = MibTableColumn
csimIntervalDateTime = _CsimIntervalDateTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1, 11),
    _CsimIntervalDateTime_Type()
)
csimIntervalDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    csimIntervalDateTime.setStatus("mandatory")
_RpsmHist_ObjectIdentity = ObjectIdentity
rpsmHist = _RpsmHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 12)
)
_RpsmHistTable_Object = MibTable
rpsmHistTable = _RpsmHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 1)
)
if mibBuilder.loadTexts:
    rpsmHistTable.setStatus("mandatory")
_RpsmHistEntry_Object = MibTableRow
rpsmHistEntry = _RpsmHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 1, 1)
)
rpsmHistEntry.setIndexNames(
    (0, "LUXN-MIB", "oppmHMode"),
)
if mibBuilder.loadTexts:
    rpsmHistEntry.setStatus("mandatory")
_RpsmHMode_Type = HistoryMode
_RpsmHMode_Object = MibTableColumn
rpsmHMode = _RpsmHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 1, 1, 1),
    _RpsmHMode_Type()
)
rpsmHMode.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmHMode.setStatus("mandatory")
_RpsmHNumEvents_Type = Counter32
_RpsmHNumEvents_Object = MibTableColumn
rpsmHNumEvents = _RpsmHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 1, 1, 2),
    _RpsmHNumEvents_Type()
)
rpsmHNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmHNumEvents.setStatus("mandatory")
_RpsmHHistTable_Object = MibTable
rpsmHHistTable = _RpsmHHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 2)
)
if mibBuilder.loadTexts:
    rpsmHHistTable.setStatus("mandatory")
_RpsmHHistEntry_Object = MibTableRow
rpsmHHistEntry = _RpsmHHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 2, 1)
)
rpsmHHistEntry.setIndexNames(
    (0, "LUXN-MIB", "rpsmHHistMode"),
    (0, "LUXN-MIB", "rpsmHHistLocation"),
    (0, "LUXN-MIB", "rpsmHHistShelf"),
    (0, "LUXN-MIB", "rpsmHHistSlot"),
)
if mibBuilder.loadTexts:
    rpsmHHistEntry.setStatus("mandatory")
_RpsmHHistMode_Type = HistoryMode
_RpsmHHistMode_Object = MibTableColumn
rpsmHHistMode = _RpsmHHistMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 2, 1, 1),
    _RpsmHHistMode_Type()
)
rpsmHHistMode.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmHHistMode.setStatus("mandatory")
_RpsmHHistLocation_Type = CardLocation
_RpsmHHistLocation_Object = MibTableColumn
rpsmHHistLocation = _RpsmHHistLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 2, 1, 2),
    _RpsmHHistLocation_Type()
)
rpsmHHistLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmHHistLocation.setStatus("mandatory")
_RpsmHHistShelf_Type = CardShelf
_RpsmHHistShelf_Object = MibTableColumn
rpsmHHistShelf = _RpsmHHistShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 2, 1, 3),
    _RpsmHHistShelf_Type()
)
rpsmHHistShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmHHistShelf.setStatus("mandatory")
_RpsmHHistSlot_Type = CardSlot
_RpsmHHistSlot_Object = MibTableColumn
rpsmHHistSlot = _RpsmHHistSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 2, 1, 4),
    _RpsmHHistSlot_Type()
)
rpsmHHistSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmHHistSlot.setStatus("mandatory")
_RpsmHLastBootTime_Type = DateAndTime
_RpsmHLastBootTime_Object = MibTableColumn
rpsmHLastBootTime = _RpsmHLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 2, 1, 6),
    _RpsmHLastBootTime_Type()
)
rpsmHLastBootTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmHLastBootTime.setStatus("mandatory")
_RpsmHAvailTime_Type = Counter32
_RpsmHAvailTime_Object = MibTableColumn
rpsmHAvailTime = _RpsmHAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 2, 1, 7),
    _RpsmHAvailTime_Type()
)
rpsmHAvailTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmHAvailTime.setStatus("mandatory")
_RpsmHErrFreeSecs_Type = Counter32
_RpsmHErrFreeSecs_Object = MibTableColumn
rpsmHErrFreeSecs = _RpsmHErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 2, 1, 8),
    _RpsmHErrFreeSecs_Type()
)
rpsmHErrFreeSecs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmHErrFreeSecs.setStatus("mandatory")
_RsdmHist_ObjectIdentity = ObjectIdentity
rsdmHist = _RsdmHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 13)
)
_RsdmHistTable_Object = MibTable
rsdmHistTable = _RsdmHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 1)
)
if mibBuilder.loadTexts:
    rsdmHistTable.setStatus("mandatory")
_RsdmHistEntry_Object = MibTableRow
rsdmHistEntry = _RsdmHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 1, 1)
)
rsdmHistEntry.setIndexNames(
    (0, "LUXN-MIB", "rsdmHMode"),
)
if mibBuilder.loadTexts:
    rsdmHistEntry.setStatus("mandatory")
_RsdmHMode_Type = HistoryMode
_RsdmHMode_Object = MibTableColumn
rsdmHMode = _RsdmHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 1, 1, 1),
    _RsdmHMode_Type()
)
rsdmHMode.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmHMode.setStatus("mandatory")
_RsdmHNumEvents_Type = Counter32
_RsdmHNumEvents_Object = MibTableColumn
rsdmHNumEvents = _RsdmHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 1, 1, 2),
    _RsdmHNumEvents_Type()
)
rsdmHNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmHNumEvents.setStatus("mandatory")
_RsdmHHistTable_Object = MibTable
rsdmHHistTable = _RsdmHHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 2)
)
if mibBuilder.loadTexts:
    rsdmHHistTable.setStatus("mandatory")
_RsdmHHistEntry_Object = MibTableRow
rsdmHHistEntry = _RsdmHHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 2, 1)
)
rsdmHHistEntry.setIndexNames(
    (0, "LUXN-MIB", "rsdmHHistMode"),
    (0, "LUXN-MIB", "rsdmHHistLocation"),
    (0, "LUXN-MIB", "rsdmHHistShelf"),
    (0, "LUXN-MIB", "rsdmHHistSlot"),
)
if mibBuilder.loadTexts:
    rsdmHHistEntry.setStatus("mandatory")
_RsdmHHistMode_Type = HistoryMode
_RsdmHHistMode_Object = MibTableColumn
rsdmHHistMode = _RsdmHHistMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 2, 1, 1),
    _RsdmHHistMode_Type()
)
rsdmHHistMode.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmHHistMode.setStatus("mandatory")
_RsdmHHistLocation_Type = CardLocation
_RsdmHHistLocation_Object = MibTableColumn
rsdmHHistLocation = _RsdmHHistLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 2, 1, 2),
    _RsdmHHistLocation_Type()
)
rsdmHHistLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmHHistLocation.setStatus("mandatory")
_RsdmHHistShelf_Type = CardShelf
_RsdmHHistShelf_Object = MibTableColumn
rsdmHHistShelf = _RsdmHHistShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 2, 1, 3),
    _RsdmHHistShelf_Type()
)
rsdmHHistShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmHHistShelf.setStatus("mandatory")
_RsdmHHistSlot_Type = CardSlot
_RsdmHHistSlot_Object = MibTableColumn
rsdmHHistSlot = _RsdmHHistSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 2, 1, 4),
    _RsdmHHistSlot_Type()
)
rsdmHHistSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmHHistSlot.setStatus("mandatory")
_RsdmHLastBootTime_Type = DateAndTime
_RsdmHLastBootTime_Object = MibTableColumn
rsdmHLastBootTime = _RsdmHLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 2, 1, 6),
    _RsdmHLastBootTime_Type()
)
rsdmHLastBootTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmHLastBootTime.setStatus("mandatory")
_RsdmHAvailTime_Type = Counter32
_RsdmHAvailTime_Object = MibTableColumn
rsdmHAvailTime = _RsdmHAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 2, 1, 7),
    _RsdmHAvailTime_Type()
)
rsdmHAvailTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmHAvailTime.setStatus("mandatory")
_RsdmHErrFreeSecs_Type = Counter32
_RsdmHErrFreeSecs_Object = MibTableColumn
rsdmHErrFreeSecs = _RsdmHErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 2, 1, 8),
    _RsdmHErrFreeSecs_Type()
)
rsdmHErrFreeSecs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmHErrFreeSecs.setStatus("mandatory")
_RtdmHist_ObjectIdentity = ObjectIdentity
rtdmHist = _RtdmHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 14)
)
_RtdmHistTable_Object = MibTable
rtdmHistTable = _RtdmHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 1)
)
if mibBuilder.loadTexts:
    rtdmHistTable.setStatus("mandatory")
_RtdmHistEntry_Object = MibTableRow
rtdmHistEntry = _RtdmHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 1, 1)
)
rtdmHistEntry.setIndexNames(
    (0, "LUXN-MIB", "rtdmHMode"),
)
if mibBuilder.loadTexts:
    rtdmHistEntry.setStatus("mandatory")
_RtdmHMode_Type = HistoryMode
_RtdmHMode_Object = MibTableColumn
rtdmHMode = _RtdmHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 1, 1, 1),
    _RtdmHMode_Type()
)
rtdmHMode.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmHMode.setStatus("mandatory")
_RtdmHNumEvents_Type = Counter32
_RtdmHNumEvents_Object = MibTableColumn
rtdmHNumEvents = _RtdmHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 1, 1, 2),
    _RtdmHNumEvents_Type()
)
rtdmHNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmHNumEvents.setStatus("mandatory")
_RtdmHHistTable_Object = MibTable
rtdmHHistTable = _RtdmHHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 2)
)
if mibBuilder.loadTexts:
    rtdmHHistTable.setStatus("mandatory")
_RtdmHHistEntry_Object = MibTableRow
rtdmHHistEntry = _RtdmHHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 2, 1)
)
rtdmHHistEntry.setIndexNames(
    (0, "LUXN-MIB", "rtdmHHistMode"),
    (0, "LUXN-MIB", "rtdmHHistLocation"),
    (0, "LUXN-MIB", "rtdmHHistShelf"),
    (0, "LUXN-MIB", "rtdmHHistSlot"),
)
if mibBuilder.loadTexts:
    rtdmHHistEntry.setStatus("mandatory")
_RtdmHHistMode_Type = HistoryMode
_RtdmHHistMode_Object = MibTableColumn
rtdmHHistMode = _RtdmHHistMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 2, 1, 1),
    _RtdmHHistMode_Type()
)
rtdmHHistMode.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmHHistMode.setStatus("mandatory")
_RtdmHHistLocation_Type = CardLocation
_RtdmHHistLocation_Object = MibTableColumn
rtdmHHistLocation = _RtdmHHistLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 2, 1, 2),
    _RtdmHHistLocation_Type()
)
rtdmHHistLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmHHistLocation.setStatus("mandatory")
_RtdmHHistShelf_Type = CardShelf
_RtdmHHistShelf_Object = MibTableColumn
rtdmHHistShelf = _RtdmHHistShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 2, 1, 3),
    _RtdmHHistShelf_Type()
)
rtdmHHistShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmHHistShelf.setStatus("mandatory")
_RtdmHHistSlot_Type = CardSlot
_RtdmHHistSlot_Object = MibTableColumn
rtdmHHistSlot = _RtdmHHistSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 2, 1, 4),
    _RtdmHHistSlot_Type()
)
rtdmHHistSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmHHistSlot.setStatus("mandatory")
_RtdmHLastBootTime_Type = DateAndTime
_RtdmHLastBootTime_Object = MibTableColumn
rtdmHLastBootTime = _RtdmHLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 2, 1, 5),
    _RtdmHLastBootTime_Type()
)
rtdmHLastBootTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmHLastBootTime.setStatus("mandatory")
_RtdmHAvailTime_Type = Counter32
_RtdmHAvailTime_Object = MibTableColumn
rtdmHAvailTime = _RtdmHAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 2, 1, 6),
    _RtdmHAvailTime_Type()
)
rtdmHAvailTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmHAvailTime.setStatus("mandatory")
_RtdmHErrFreeSecs_Type = Counter32
_RtdmHErrFreeSecs_Object = MibTableColumn
rtdmHErrFreeSecs = _RtdmHErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 2, 1, 7),
    _RtdmHErrFreeSecs_Type()
)
rtdmHErrFreeSecs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmHErrFreeSecs.setStatus("mandatory")
_OsamHist_ObjectIdentity = ObjectIdentity
osamHist = _OsamHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 15)
)
_OsamHistTable_Object = MibTable
osamHistTable = _OsamHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 1)
)
if mibBuilder.loadTexts:
    osamHistTable.setStatus("mandatory")
_OsamHistEntry_Object = MibTableRow
osamHistEntry = _OsamHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 1, 1)
)
osamHistEntry.setIndexNames(
    (0, "LUXN-MIB", "osamHMode"),
)
if mibBuilder.loadTexts:
    osamHistEntry.setStatus("mandatory")
_OsamHMode_Type = HistoryMode
_OsamHMode_Object = MibTableColumn
osamHMode = _OsamHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 1, 1, 1),
    _OsamHMode_Type()
)
osamHMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamHMode.setStatus("mandatory")
_OsamHNumEvents_Type = Counter32
_OsamHNumEvents_Object = MibTableColumn
osamHNumEvents = _OsamHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 1, 1, 2),
    _OsamHNumEvents_Type()
)
osamHNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamHNumEvents.setStatus("mandatory")
_OsamHHistTable_Object = MibTable
osamHHistTable = _OsamHHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 2)
)
if mibBuilder.loadTexts:
    osamHHistTable.setStatus("mandatory")
_OsamHHistEntry_Object = MibTableRow
osamHHistEntry = _OsamHHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 2, 1)
)
osamHHistEntry.setIndexNames(
    (0, "LUXN-MIB", "osamHHistMode"),
    (0, "LUXN-MIB", "osamHHistLocation"),
    (0, "LUXN-MIB", "osamHHistShelf"),
    (0, "LUXN-MIB", "osamHHistSlot"),
)
if mibBuilder.loadTexts:
    osamHHistEntry.setStatus("mandatory")
_OsamHHistMode_Type = HistoryMode
_OsamHHistMode_Object = MibTableColumn
osamHHistMode = _OsamHHistMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 2, 1, 1),
    _OsamHHistMode_Type()
)
osamHHistMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamHHistMode.setStatus("mandatory")
_OsamHHistLocation_Type = CardLocation
_OsamHHistLocation_Object = MibTableColumn
osamHHistLocation = _OsamHHistLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 2, 1, 2),
    _OsamHHistLocation_Type()
)
osamHHistLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamHHistLocation.setStatus("mandatory")
_OsamHHistShelf_Type = CardShelf
_OsamHHistShelf_Object = MibTableColumn
osamHHistShelf = _OsamHHistShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 2, 1, 3),
    _OsamHHistShelf_Type()
)
osamHHistShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamHHistShelf.setStatus("mandatory")


class _OsamHHistSlot_Type(Integer32):
    """Custom type osamHHistSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_OsamHHistSlot_Type.__name__ = "Integer32"
_OsamHHistSlot_Object = MibTableColumn
osamHHistSlot = _OsamHHistSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 2, 1, 4),
    _OsamHHistSlot_Type()
)
osamHHistSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamHHistSlot.setStatus("mandatory")
_OsamHHistLastBootTime_Type = DateAndTime
_OsamHHistLastBootTime_Object = MibTableColumn
osamHHistLastBootTime = _OsamHHistLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 2, 1, 5),
    _OsamHHistLastBootTime_Type()
)
osamHHistLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamHHistLastBootTime.setStatus("mandatory")
_OsamHHistAvailTime_Type = Counter32
_OsamHHistAvailTime_Object = MibTableColumn
osamHHistAvailTime = _OsamHHistAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 2, 1, 6),
    _OsamHHistAvailTime_Type()
)
osamHHistAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamHHistAvailTime.setStatus("mandatory")
_OsamHHistErrFreeSecs_Type = Counter32
_OsamHHistErrFreeSecs_Object = MibTableColumn
osamHHistErrFreeSecs = _OsamHHistErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 2, 1, 7),
    _OsamHHistErrFreeSecs_Type()
)
osamHHistErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    osamHHistErrFreeSecs.setStatus("mandatory")
_RsmHist_ObjectIdentity = ObjectIdentity
rsmHist = _RsmHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 16)
)
_RsmHistTable_Object = MibTable
rsmHistTable = _RsmHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 1)
)
if mibBuilder.loadTexts:
    rsmHistTable.setStatus("mandatory")
_RsmHistEntry_Object = MibTableRow
rsmHistEntry = _RsmHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 1, 1)
)
rsmHistEntry.setIndexNames(
    (0, "LUXN-MIB", "rsmHMode"),
)
if mibBuilder.loadTexts:
    rsmHistEntry.setStatus("mandatory")
_RsmHMode_Type = HistoryMode
_RsmHMode_Object = MibTableColumn
rsmHMode = _RsmHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 1, 1, 1),
    _RsmHMode_Type()
)
rsmHMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmHMode.setStatus("mandatory")
_RsmHNumEvents_Type = Counter32
_RsmHNumEvents_Object = MibTableColumn
rsmHNumEvents = _RsmHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 1, 1, 2),
    _RsmHNumEvents_Type()
)
rsmHNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmHNumEvents.setStatus("mandatory")
_RsmHHistTable_Object = MibTable
rsmHHistTable = _RsmHHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 2)
)
if mibBuilder.loadTexts:
    rsmHHistTable.setStatus("mandatory")
_RsmHHistEntry_Object = MibTableRow
rsmHHistEntry = _RsmHHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 2, 1)
)
rsmHHistEntry.setIndexNames(
    (0, "LUXN-MIB", "rsmHHistMode"),
    (0, "LUXN-MIB", "rsmHHistLocation"),
    (0, "LUXN-MIB", "rsmHHistShelf"),
    (0, "LUXN-MIB", "rsmHHistSlot"),
)
if mibBuilder.loadTexts:
    rsmHHistEntry.setStatus("mandatory")
_RsmHHistMode_Type = HistoryMode
_RsmHHistMode_Object = MibTableColumn
rsmHHistMode = _RsmHHistMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 2, 1, 1),
    _RsmHHistMode_Type()
)
rsmHHistMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmHHistMode.setStatus("mandatory")
_RsmHHistLocation_Type = CardLocation
_RsmHHistLocation_Object = MibTableColumn
rsmHHistLocation = _RsmHHistLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 2, 1, 2),
    _RsmHHistLocation_Type()
)
rsmHHistLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmHHistLocation.setStatus("mandatory")
_RsmHHistShelf_Type = CardShelf
_RsmHHistShelf_Object = MibTableColumn
rsmHHistShelf = _RsmHHistShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 2, 1, 3),
    _RsmHHistShelf_Type()
)
rsmHHistShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmHHistShelf.setStatus("mandatory")
_RsmHHistSlot_Type = CardSlot
_RsmHHistSlot_Object = MibTableColumn
rsmHHistSlot = _RsmHHistSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 2, 1, 4),
    _RsmHHistSlot_Type()
)
rsmHHistSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmHHistSlot.setStatus("mandatory")
_RsmHLastBootTime_Type = DateAndTime
_RsmHLastBootTime_Object = MibTableColumn
rsmHLastBootTime = _RsmHLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 2, 1, 6),
    _RsmHLastBootTime_Type()
)
rsmHLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmHLastBootTime.setStatus("mandatory")
_RsmHAvailTime_Type = Counter32
_RsmHAvailTime_Object = MibTableColumn
rsmHAvailTime = _RsmHAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 2, 1, 7),
    _RsmHAvailTime_Type()
)
rsmHAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmHAvailTime.setStatus("mandatory")
_RsmHErrFreeSecs_Type = Counter32
_RsmHErrFreeSecs_Object = MibTableColumn
rsmHErrFreeSecs = _RsmHErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 2, 1, 8),
    _RsmHErrFreeSecs_Type()
)
rsmHErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    rsmHErrFreeSecs.setStatus("mandatory")
_UpsmHist_ObjectIdentity = ObjectIdentity
upsmHist = _UpsmHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 17)
)
_UpsmHistTable_Object = MibTable
upsmHistTable = _UpsmHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 1)
)
if mibBuilder.loadTexts:
    upsmHistTable.setStatus("mandatory")
_UpsmHistEntry_Object = MibTableRow
upsmHistEntry = _UpsmHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 1, 1)
)
upsmHistEntry.setIndexNames(
    (0, "LUXN-MIB", "upsmHMode"),
)
if mibBuilder.loadTexts:
    upsmHistEntry.setStatus("mandatory")
_UpsmHMode_Type = HistoryMode
_UpsmHMode_Object = MibTableColumn
upsmHMode = _UpsmHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 1, 1, 1),
    _UpsmHMode_Type()
)
upsmHMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmHMode.setStatus("mandatory")
_UpsmHNumEvents_Type = Counter32
_UpsmHNumEvents_Object = MibTableColumn
upsmHNumEvents = _UpsmHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 1, 1, 2),
    _UpsmHNumEvents_Type()
)
upsmHNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmHNumEvents.setStatus("mandatory")
_UpsmHHistTable_Object = MibTable
upsmHHistTable = _UpsmHHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 2)
)
if mibBuilder.loadTexts:
    upsmHHistTable.setStatus("mandatory")
_UpsmHHistEntry_Object = MibTableRow
upsmHHistEntry = _UpsmHHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 2, 1)
)
upsmHHistEntry.setIndexNames(
    (0, "LUXN-MIB", "upsmHHistMode"),
    (0, "LUXN-MIB", "upsmHHistLocation"),
    (0, "LUXN-MIB", "upsmHHistShelf"),
    (0, "LUXN-MIB", "upsmHHistSlot"),
)
if mibBuilder.loadTexts:
    upsmHHistEntry.setStatus("mandatory")
_UpsmHHistMode_Type = HistoryMode
_UpsmHHistMode_Object = MibTableColumn
upsmHHistMode = _UpsmHHistMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 2, 1, 1),
    _UpsmHHistMode_Type()
)
upsmHHistMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmHHistMode.setStatus("mandatory")
_UpsmHHistLocation_Type = CardLocation
_UpsmHHistLocation_Object = MibTableColumn
upsmHHistLocation = _UpsmHHistLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 2, 1, 2),
    _UpsmHHistLocation_Type()
)
upsmHHistLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmHHistLocation.setStatus("mandatory")
_UpsmHHistShelf_Type = CardShelf
_UpsmHHistShelf_Object = MibTableColumn
upsmHHistShelf = _UpsmHHistShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 2, 1, 3),
    _UpsmHHistShelf_Type()
)
upsmHHistShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmHHistShelf.setStatus("mandatory")
_UpsmHHistSlot_Type = CardSlot
_UpsmHHistSlot_Object = MibTableColumn
upsmHHistSlot = _UpsmHHistSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 2, 1, 4),
    _UpsmHHistSlot_Type()
)
upsmHHistSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmHHistSlot.setStatus("mandatory")
_UpsmHLastBootTime_Type = DateAndTime
_UpsmHLastBootTime_Object = MibTableColumn
upsmHLastBootTime = _UpsmHLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 2, 1, 6),
    _UpsmHLastBootTime_Type()
)
upsmHLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmHLastBootTime.setStatus("mandatory")
_UpsmHAvailTime_Type = Counter32
_UpsmHAvailTime_Object = MibTableColumn
upsmHAvailTime = _UpsmHAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 2, 1, 7),
    _UpsmHAvailTime_Type()
)
upsmHAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmHAvailTime.setStatus("mandatory")
_UpsmHErrFreeSecs_Type = Counter32
_UpsmHErrFreeSecs_Object = MibTableColumn
upsmHErrFreeSecs = _UpsmHErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 2, 1, 8),
    _UpsmHErrFreeSecs_Type()
)
upsmHErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    upsmHErrFreeSecs.setStatus("mandatory")
_McmescHist_ObjectIdentity = ObjectIdentity
mcmescHist = _McmescHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18)
)
_McmescHistTable_Object = MibTable
mcmescHistTable = _McmescHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 1)
)
if mibBuilder.loadTexts:
    mcmescHistTable.setStatus("mandatory")
_McmescHistEntry_Object = MibTableRow
mcmescHistEntry = _McmescHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 1, 1)
)
mcmescHistEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmescHMode"),
)
if mibBuilder.loadTexts:
    mcmescHistEntry.setStatus("mandatory")
_McmescHMode_Type = HistoryMode
_McmescHMode_Object = MibTableColumn
mcmescHMode = _McmescHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 1, 1, 1),
    _McmescHMode_Type()
)
mcmescHMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescHMode.setStatus("mandatory")
_McmescHNumEvents_Type = Counter32
_McmescHNumEvents_Object = MibTableColumn
mcmescHNumEvents = _McmescHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 1, 1, 2),
    _McmescHNumEvents_Type()
)
mcmescHNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescHNumEvents.setStatus("mandatory")
_McmescHCntrTable_Object = MibTable
mcmescHCntrTable = _McmescHCntrTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2)
)
if mibBuilder.loadTexts:
    mcmescHCntrTable.setStatus("mandatory")
_McmescHCntrEntry_Object = MibTableRow
mcmescHCntrEntry = _McmescHCntrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1)
)
mcmescHCntrEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmescHCntrMode"),
    (0, "LUXN-MIB", "mcmescHCntrLocation"),
    (0, "LUXN-MIB", "mcmescHCntrShelf"),
    (0, "LUXN-MIB", "mcmescHCntrSlot"),
    (0, "LUXN-MIB", "mcmescHCntrType"),
)
if mibBuilder.loadTexts:
    mcmescHCntrEntry.setStatus("mandatory")
_McmescHCntrMode_Type = HistoryMode
_McmescHCntrMode_Object = MibTableColumn
mcmescHCntrMode = _McmescHCntrMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 1),
    _McmescHCntrMode_Type()
)
mcmescHCntrMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescHCntrMode.setStatus("mandatory")
_McmescHCntrLocation_Type = CardLocation
_McmescHCntrLocation_Object = MibTableColumn
mcmescHCntrLocation = _McmescHCntrLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 2),
    _McmescHCntrLocation_Type()
)
mcmescHCntrLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescHCntrLocation.setStatus("mandatory")
_McmescHCntrShelf_Type = CardShelf
_McmescHCntrShelf_Object = MibTableColumn
mcmescHCntrShelf = _McmescHCntrShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 3),
    _McmescHCntrShelf_Type()
)
mcmescHCntrShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescHCntrShelf.setStatus("mandatory")
_McmescHCntrSlot_Type = CardSlot
_McmescHCntrSlot_Object = MibTableColumn
mcmescHCntrSlot = _McmescHCntrSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 4),
    _McmescHCntrSlot_Type()
)
mcmescHCntrSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescHCntrSlot.setStatus("mandatory")


class _McmescHCntrType_Type(Integer32):
    """Custom type mcmescHCntrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("iwm", 2),
          ("spi", 1))
    )


_McmescHCntrType_Type.__name__ = "Integer32"
_McmescHCntrType_Object = MibTableColumn
mcmescHCntrType = _McmescHCntrType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 5),
    _McmescHCntrType_Type()
)
mcmescHCntrType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescHCntrType.setStatus("mandatory")
_McmescHTotPktSent_Type = Counter32
_McmescHTotPktSent_Object = MibTableColumn
mcmescHTotPktSent = _McmescHTotPktSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 6),
    _McmescHTotPktSent_Type()
)
mcmescHTotPktSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescHTotPktSent.setStatus("mandatory")
_McmescHTotPktRcvd_Type = Counter32
_McmescHTotPktRcvd_Object = MibTableColumn
mcmescHTotPktRcvd = _McmescHTotPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 7),
    _McmescHTotPktRcvd_Type()
)
mcmescHTotPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescHTotPktRcvd.setStatus("mandatory")
_McmescHBadPktRcvd_Type = Counter32
_McmescHBadPktRcvd_Object = MibTableColumn
mcmescHBadPktRcvd = _McmescHBadPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 8),
    _McmescHBadPktRcvd_Type()
)
mcmescHBadPktRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescHBadPktRcvd.setStatus("mandatory")
_McmescHTotBadTrans_Type = Counter32
_McmescHTotBadTrans_Object = MibTableColumn
mcmescHTotBadTrans = _McmescHTotBadTrans_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 9),
    _McmescHTotBadTrans_Type()
)
mcmescHTotBadTrans.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescHTotBadTrans.setStatus("mandatory")
_McmescHBytesSent_Type = Counter32
_McmescHBytesSent_Object = MibTableColumn
mcmescHBytesSent = _McmescHBytesSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 10),
    _McmescHBytesSent_Type()
)
mcmescHBytesSent.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescHBytesSent.setStatus("mandatory")
_McmescHBytesRcvd_Type = Counter32
_McmescHBytesRcvd_Object = MibTableColumn
mcmescHBytesRcvd = _McmescHBytesRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 11),
    _McmescHBytesRcvd_Type()
)
mcmescHBytesRcvd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescHBytesRcvd.setStatus("mandatory")
_McmescHMsgsDlvrd_Type = Counter32
_McmescHMsgsDlvrd_Object = MibTableColumn
mcmescHMsgsDlvrd = _McmescHMsgsDlvrd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 12),
    _McmescHMsgsDlvrd_Type()
)
mcmescHMsgsDlvrd.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescHMsgsDlvrd.setStatus("mandatory")
_McmescPortHIntervalTable_Object = MibTable
mcmescPortHIntervalTable = _McmescPortHIntervalTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3)
)
if mibBuilder.loadTexts:
    mcmescPortHIntervalTable.setStatus("mandatory")
_McmescPortHIntervalEntry_Object = MibTableRow
mcmescPortHIntervalEntry = _McmescPortHIntervalEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1)
)
mcmescPortHIntervalEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmescPortHIntervalLocation"),
    (0, "LUXN-MIB", "mcmescPortHIntervalShelf"),
    (0, "LUXN-MIB", "mcmescPortHIntervalSlot"),
    (0, "LUXN-MIB", "mcmescPortHIntervalPort"),
    (0, "LUXN-MIB", "mcmescPortHIntervalNumber"),
)
if mibBuilder.loadTexts:
    mcmescPortHIntervalEntry.setStatus("mandatory")
_McmescPortHIntervalLocation_Type = CardLocation
_McmescPortHIntervalLocation_Object = MibTableColumn
mcmescPortHIntervalLocation = _McmescPortHIntervalLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1, 1),
    _McmescPortHIntervalLocation_Type()
)
mcmescPortHIntervalLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortHIntervalLocation.setStatus("mandatory")
_McmescPortHIntervalShelf_Type = CardShelf
_McmescPortHIntervalShelf_Object = MibTableColumn
mcmescPortHIntervalShelf = _McmescPortHIntervalShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1, 2),
    _McmescPortHIntervalShelf_Type()
)
mcmescPortHIntervalShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortHIntervalShelf.setStatus("mandatory")
_McmescPortHIntervalSlot_Type = CardSlot
_McmescPortHIntervalSlot_Object = MibTableColumn
mcmescPortHIntervalSlot = _McmescPortHIntervalSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1, 3),
    _McmescPortHIntervalSlot_Type()
)
mcmescPortHIntervalSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortHIntervalSlot.setStatus("mandatory")
_McmescPortHIntervalPort_Type = Integer32
_McmescPortHIntervalPort_Object = MibTableColumn
mcmescPortHIntervalPort = _McmescPortHIntervalPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1, 4),
    _McmescPortHIntervalPort_Type()
)
mcmescPortHIntervalPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortHIntervalPort.setStatus("mandatory")
_McmescPortHIntervalNumber_Type = Integer32
_McmescPortHIntervalNumber_Object = MibTableColumn
mcmescPortHIntervalNumber = _McmescPortHIntervalNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1, 5),
    _McmescPortHIntervalNumber_Type()
)
mcmescPortHIntervalNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortHIntervalNumber.setStatus("mandatory")
_McmescPortHIntervalDuration_Type = DisplayString
_McmescPortHIntervalDuration_Object = MibTableColumn
mcmescPortHIntervalDuration = _McmescPortHIntervalDuration_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1, 6),
    _McmescPortHIntervalDuration_Type()
)
mcmescPortHIntervalDuration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortHIntervalDuration.setStatus("mandatory")
_McmescPortHIntervalEns_Type = DisplayString
_McmescPortHIntervalEns_Object = MibTableColumn
mcmescPortHIntervalEns = _McmescPortHIntervalEns_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1, 7),
    _McmescPortHIntervalEns_Type()
)
mcmescPortHIntervalEns.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortHIntervalEns.setStatus("mandatory")
_McmescPortHIntervalLoss_Type = DisplayString
_McmescPortHIntervalLoss_Object = MibTableColumn
mcmescPortHIntervalLoss = _McmescPortHIntervalLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1, 8),
    _McmescPortHIntervalLoss_Type()
)
mcmescPortHIntervalLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortHIntervalLoss.setStatus("mandatory")
_McmescPortHIntervalCrcErr_Type = DisplayString
_McmescPortHIntervalCrcErr_Object = MibTableColumn
mcmescPortHIntervalCrcErr = _McmescPortHIntervalCrcErr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1, 9),
    _McmescPortHIntervalCrcErr_Type()
)
mcmescPortHIntervalCrcErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortHIntervalCrcErr.setStatus("mandatory")
_McmescPortHIntervalOobErr_Type = DisplayString
_McmescPortHIntervalOobErr_Object = MibTableColumn
mcmescPortHIntervalOobErr = _McmescPortHIntervalOobErr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1, 10),
    _McmescPortHIntervalOobErr_Type()
)
mcmescPortHIntervalOobErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortHIntervalOobErr.setStatus("mandatory")
_McmescPortHIntervalRdpErr_Type = DisplayString
_McmescPortHIntervalRdpErr_Object = MibTableColumn
mcmescPortHIntervalRdpErr = _McmescPortHIntervalRdpErr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1, 11),
    _McmescPortHIntervalRdpErr_Type()
)
mcmescPortHIntervalRdpErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortHIntervalRdpErr.setStatus("mandatory")
_McmescLinkHIntervalTable_Object = MibTable
mcmescLinkHIntervalTable = _McmescLinkHIntervalTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4)
)
if mibBuilder.loadTexts:
    mcmescLinkHIntervalTable.setStatus("mandatory")
_McmescLinkHIntervalEntry_Object = MibTableRow
mcmescLinkHIntervalEntry = _McmescLinkHIntervalEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4, 1)
)
mcmescLinkHIntervalEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmescLinkHIntervalLocation"),
    (0, "LUXN-MIB", "mcmescLinkHIntervalShelf"),
    (0, "LUXN-MIB", "mcmescLinkHIntervalSlot"),
    (0, "LUXN-MIB", "mcmescLinkHIntervalNumber"),
)
if mibBuilder.loadTexts:
    mcmescLinkHIntervalEntry.setStatus("mandatory")
_McmescLinkHIntervalLocation_Type = CardLocation
_McmescLinkHIntervalLocation_Object = MibTableColumn
mcmescLinkHIntervalLocation = _McmescLinkHIntervalLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4, 1, 1),
    _McmescLinkHIntervalLocation_Type()
)
mcmescLinkHIntervalLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkHIntervalLocation.setStatus("mandatory")
_McmescLinkHIntervalShelf_Type = CardShelf
_McmescLinkHIntervalShelf_Object = MibTableColumn
mcmescLinkHIntervalShelf = _McmescLinkHIntervalShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4, 1, 2),
    _McmescLinkHIntervalShelf_Type()
)
mcmescLinkHIntervalShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkHIntervalShelf.setStatus("mandatory")
_McmescLinkHIntervalSlot_Type = CardSlot
_McmescLinkHIntervalSlot_Object = MibTableColumn
mcmescLinkHIntervalSlot = _McmescLinkHIntervalSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4, 1, 3),
    _McmescLinkHIntervalSlot_Type()
)
mcmescLinkHIntervalSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkHIntervalSlot.setStatus("mandatory")
_McmescLinkHIntervalNumber_Type = Integer32
_McmescLinkHIntervalNumber_Object = MibTableColumn
mcmescLinkHIntervalNumber = _McmescLinkHIntervalNumber_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4, 1, 4),
    _McmescLinkHIntervalNumber_Type()
)
mcmescLinkHIntervalNumber.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkHIntervalNumber.setStatus("mandatory")
_McmescLinkHIntervalDuration_Type = DisplayString
_McmescLinkHIntervalDuration_Object = MibTableColumn
mcmescLinkHIntervalDuration = _McmescLinkHIntervalDuration_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4, 1, 5),
    _McmescLinkHIntervalDuration_Type()
)
mcmescLinkHIntervalDuration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkHIntervalDuration.setStatus("mandatory")
_McmescLinkHIntervalTsos_Type = DisplayString
_McmescLinkHIntervalTsos_Object = MibTableColumn
mcmescLinkHIntervalTsos = _McmescLinkHIntervalTsos_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4, 1, 6),
    _McmescLinkHIntervalTsos_Type()
)
mcmescLinkHIntervalTsos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkHIntervalTsos.setStatus("mandatory")
_McmescLinkHIntervalLoss_Type = DisplayString
_McmescLinkHIntervalLoss_Object = MibTableColumn
mcmescLinkHIntervalLoss = _McmescLinkHIntervalLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4, 1, 7),
    _McmescLinkHIntervalLoss_Type()
)
mcmescLinkHIntervalLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkHIntervalLoss.setStatus("mandatory")
_McmescLinkHIntervalCrcErr_Type = DisplayString
_McmescLinkHIntervalCrcErr_Object = MibTableColumn
mcmescLinkHIntervalCrcErr = _McmescLinkHIntervalCrcErr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4, 1, 8),
    _McmescLinkHIntervalCrcErr_Type()
)
mcmescLinkHIntervalCrcErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkHIntervalCrcErr.setStatus("mandatory")
_McmescLinkHIntervalOobErr_Type = DisplayString
_McmescLinkHIntervalOobErr_Object = MibTableColumn
mcmescLinkHIntervalOobErr = _McmescLinkHIntervalOobErr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4, 1, 9),
    _McmescLinkHIntervalOobErr_Type()
)
mcmescLinkHIntervalOobErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkHIntervalOobErr.setStatus("mandatory")
_McmescLinkHIntervalRdpErr_Type = DisplayString
_McmescLinkHIntervalRdpErr_Object = MibTableColumn
mcmescLinkHIntervalRdpErr = _McmescLinkHIntervalRdpErr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4, 1, 10),
    _McmescLinkHIntervalRdpErr_Type()
)
mcmescLinkHIntervalRdpErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkHIntervalRdpErr.setStatus("mandatory")
_McmescPortHTotalTable_Object = MibTable
mcmescPortHTotalTable = _McmescPortHTotalTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5)
)
if mibBuilder.loadTexts:
    mcmescPortHTotalTable.setStatus("mandatory")
_McmescPortHTotalEntry_Object = MibTableRow
mcmescPortHTotalEntry = _McmescPortHTotalEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5, 1)
)
mcmescPortHTotalEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmescPortHTotalCardLocation"),
    (0, "LUXN-MIB", "mcmescPortHTotalCardShelf"),
    (0, "LUXN-MIB", "mcmescPortHTotalCardSlot"),
    (0, "LUXN-MIB", "mcmescPortHTotalPort"),
)
if mibBuilder.loadTexts:
    mcmescPortHTotalEntry.setStatus("mandatory")
_McmescPortHTotalCardLocation_Type = CardLocation
_McmescPortHTotalCardLocation_Object = MibTableColumn
mcmescPortHTotalCardLocation = _McmescPortHTotalCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5, 1, 1),
    _McmescPortHTotalCardLocation_Type()
)
mcmescPortHTotalCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortHTotalCardLocation.setStatus("mandatory")
_McmescPortHTotalCardShelf_Type = CardShelf
_McmescPortHTotalCardShelf_Object = MibTableColumn
mcmescPortHTotalCardShelf = _McmescPortHTotalCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5, 1, 2),
    _McmescPortHTotalCardShelf_Type()
)
mcmescPortHTotalCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortHTotalCardShelf.setStatus("mandatory")
_McmescPortHTotalCardSlot_Type = CardSlot
_McmescPortHTotalCardSlot_Object = MibTableColumn
mcmescPortHTotalCardSlot = _McmescPortHTotalCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5, 1, 3),
    _McmescPortHTotalCardSlot_Type()
)
mcmescPortHTotalCardSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortHTotalCardSlot.setStatus("mandatory")
_McmescPortHTotalPort_Type = Integer32
_McmescPortHTotalPort_Object = MibTableColumn
mcmescPortHTotalPort = _McmescPortHTotalPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5, 1, 4),
    _McmescPortHTotalPort_Type()
)
mcmescPortHTotalPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortHTotalPort.setStatus("mandatory")
_McmescPortHTotalDuration_Type = Counter32
_McmescPortHTotalDuration_Object = MibTableColumn
mcmescPortHTotalDuration = _McmescPortHTotalDuration_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5, 1, 5),
    _McmescPortHTotalDuration_Type()
)
mcmescPortHTotalDuration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortHTotalDuration.setStatus("mandatory")
_McmescPortHTotalEns_Type = Counter32
_McmescPortHTotalEns_Object = MibTableColumn
mcmescPortHTotalEns = _McmescPortHTotalEns_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5, 1, 6),
    _McmescPortHTotalEns_Type()
)
mcmescPortHTotalEns.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortHTotalEns.setStatus("mandatory")
_McmescPortHTotalLoss_Type = Counter32
_McmescPortHTotalLoss_Object = MibTableColumn
mcmescPortHTotalLoss = _McmescPortHTotalLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5, 1, 7),
    _McmescPortHTotalLoss_Type()
)
mcmescPortHTotalLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortHTotalLoss.setStatus("mandatory")
_McmescPortHTotalCrcErr_Type = DisplayString
_McmescPortHTotalCrcErr_Object = MibTableColumn
mcmescPortHTotalCrcErr = _McmescPortHTotalCrcErr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5, 1, 8),
    _McmescPortHTotalCrcErr_Type()
)
mcmescPortHTotalCrcErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortHTotalCrcErr.setStatus("mandatory")
_McmescPortHTotalOobErr_Type = DisplayString
_McmescPortHTotalOobErr_Object = MibTableColumn
mcmescPortHTotalOobErr = _McmescPortHTotalOobErr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5, 1, 9),
    _McmescPortHTotalOobErr_Type()
)
mcmescPortHTotalOobErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortHTotalOobErr.setStatus("mandatory")
_McmescPortHTotalRdpErr_Type = DisplayString
_McmescPortHTotalRdpErr_Object = MibTableColumn
mcmescPortHTotalRdpErr = _McmescPortHTotalRdpErr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5, 1, 10),
    _McmescPortHTotalRdpErr_Type()
)
mcmescPortHTotalRdpErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortHTotalRdpErr.setStatus("mandatory")
_McmescLinkHTotalTable_Object = MibTable
mcmescLinkHTotalTable = _McmescLinkHTotalTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 6)
)
if mibBuilder.loadTexts:
    mcmescLinkHTotalTable.setStatus("mandatory")
_McmescLinkHTotalEntry_Object = MibTableRow
mcmescLinkHTotalEntry = _McmescLinkHTotalEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 6, 1)
)
mcmescLinkHTotalEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmescLinkHTotalCardLocation"),
    (0, "LUXN-MIB", "mcmescLinkHTotalCardShelf"),
    (0, "LUXN-MIB", "mcmescLinkHTotalCardSlot"),
)
if mibBuilder.loadTexts:
    mcmescLinkHTotalEntry.setStatus("mandatory")
_McmescLinkHTotalCardLocation_Type = CardLocation
_McmescLinkHTotalCardLocation_Object = MibTableColumn
mcmescLinkHTotalCardLocation = _McmescLinkHTotalCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 6, 1, 1),
    _McmescLinkHTotalCardLocation_Type()
)
mcmescLinkHTotalCardLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkHTotalCardLocation.setStatus("mandatory")
_McmescLinkHTotalCardShelf_Type = CardShelf
_McmescLinkHTotalCardShelf_Object = MibTableColumn
mcmescLinkHTotalCardShelf = _McmescLinkHTotalCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 6, 1, 2),
    _McmescLinkHTotalCardShelf_Type()
)
mcmescLinkHTotalCardShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkHTotalCardShelf.setStatus("mandatory")
_McmescLinkHTotalCardSlot_Type = CardSlot
_McmescLinkHTotalCardSlot_Object = MibTableColumn
mcmescLinkHTotalCardSlot = _McmescLinkHTotalCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 6, 1, 3),
    _McmescLinkHTotalCardSlot_Type()
)
mcmescLinkHTotalCardSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkHTotalCardSlot.setStatus("mandatory")
_McmescLinkHTotalDuration_Type = Counter32
_McmescLinkHTotalDuration_Object = MibTableColumn
mcmescLinkHTotalDuration = _McmescLinkHTotalDuration_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 6, 1, 4),
    _McmescLinkHTotalDuration_Type()
)
mcmescLinkHTotalDuration.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkHTotalDuration.setStatus("mandatory")
_McmescLinkHTotalTsos_Type = Counter32
_McmescLinkHTotalTsos_Object = MibTableColumn
mcmescLinkHTotalTsos = _McmescLinkHTotalTsos_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 6, 1, 5),
    _McmescLinkHTotalTsos_Type()
)
mcmescLinkHTotalTsos.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkHTotalTsos.setStatus("mandatory")
_McmescLinkHTotalLoss_Type = Counter32
_McmescLinkHTotalLoss_Object = MibTableColumn
mcmescLinkHTotalLoss = _McmescLinkHTotalLoss_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 6, 1, 6),
    _McmescLinkHTotalLoss_Type()
)
mcmescLinkHTotalLoss.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkHTotalLoss.setStatus("mandatory")
_McmescLinkHTotalCrcErr_Type = DisplayString
_McmescLinkHTotalCrcErr_Object = MibTableColumn
mcmescLinkHTotalCrcErr = _McmescLinkHTotalCrcErr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 6, 1, 7),
    _McmescLinkHTotalCrcErr_Type()
)
mcmescLinkHTotalCrcErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkHTotalCrcErr.setStatus("mandatory")
_McmescLinkHTotalOobErr_Type = DisplayString
_McmescLinkHTotalOobErr_Object = MibTableColumn
mcmescLinkHTotalOobErr = _McmescLinkHTotalOobErr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 6, 1, 8),
    _McmescLinkHTotalOobErr_Type()
)
mcmescLinkHTotalOobErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkHTotalOobErr.setStatus("mandatory")
_McmescLinkHTotalRdpErr_Type = DisplayString
_McmescLinkHTotalRdpErr_Object = MibTableColumn
mcmescLinkHTotalRdpErr = _McmescLinkHTotalRdpErr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 6, 1, 9),
    _McmescLinkHTotalRdpErr_Type()
)
mcmescLinkHTotalRdpErr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkHTotalRdpErr.setStatus("mandatory")
_TapHist_ObjectIdentity = ObjectIdentity
tapHist = _TapHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 19)
)
_TapHistTable_Object = MibTable
tapHistTable = _TapHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 1)
)
if mibBuilder.loadTexts:
    tapHistTable.setStatus("mandatory")
_TapHistEntry_Object = MibTableRow
tapHistEntry = _TapHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 1, 1)
)
tapHistEntry.setIndexNames(
    (0, "LUXN-MIB", "tapHMode"),
)
if mibBuilder.loadTexts:
    tapHistEntry.setStatus("mandatory")
_TapHMode_Type = HistoryMode
_TapHMode_Object = MibTableColumn
tapHMode = _TapHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 1, 1, 1),
    _TapHMode_Type()
)
tapHMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHMode.setStatus("mandatory")
_TapHNumEvents_Type = Counter32
_TapHNumEvents_Object = MibTableColumn
tapHNumEvents = _TapHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 1, 1, 2),
    _TapHNumEvents_Type()
)
tapHNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHNumEvents.setStatus("mandatory")
_TapHHistTable_Object = MibTable
tapHHistTable = _TapHHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 2)
)
if mibBuilder.loadTexts:
    tapHHistTable.setStatus("mandatory")
_TapHHistEntry_Object = MibTableRow
tapHHistEntry = _TapHHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 2, 1)
)
tapHHistEntry.setIndexNames(
    (0, "LUXN-MIB", "tapHHistMode"),
    (0, "LUXN-MIB", "tapHHistLocation"),
    (0, "LUXN-MIB", "tapHHistShelf"),
    (0, "LUXN-MIB", "tapHHistSlot"),
)
if mibBuilder.loadTexts:
    tapHHistEntry.setStatus("mandatory")
_TapHHistMode_Type = HistoryMode
_TapHHistMode_Object = MibTableColumn
tapHHistMode = _TapHHistMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 2, 1, 1),
    _TapHHistMode_Type()
)
tapHHistMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHHistMode.setStatus("mandatory")
_TapHHistLocation_Type = CardLocation
_TapHHistLocation_Object = MibTableColumn
tapHHistLocation = _TapHHistLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 2, 1, 2),
    _TapHHistLocation_Type()
)
tapHHistLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHHistLocation.setStatus("mandatory")
_TapHHistShelf_Type = CardShelf
_TapHHistShelf_Object = MibTableColumn
tapHHistShelf = _TapHHistShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 2, 1, 3),
    _TapHHistShelf_Type()
)
tapHHistShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHHistShelf.setStatus("mandatory")
_TapHHistSlot_Type = CardSlot
_TapHHistSlot_Object = MibTableColumn
tapHHistSlot = _TapHHistSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 2, 1, 4),
    _TapHHistSlot_Type()
)
tapHHistSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHHistSlot.setStatus("mandatory")
_TapHHistType_Type = CardType
_TapHHistType_Object = MibTableColumn
tapHHistType = _TapHHistType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 2, 1, 5),
    _TapHHistType_Type()
)
tapHHistType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHHistType.setStatus("mandatory")
_TapHLastBootTime_Type = DateAndTime
_TapHLastBootTime_Object = MibTableColumn
tapHLastBootTime = _TapHLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 2, 1, 6),
    _TapHLastBootTime_Type()
)
tapHLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHLastBootTime.setStatus("mandatory")
_TapHAvailTime_Type = Counter32
_TapHAvailTime_Object = MibTableColumn
tapHAvailTime = _TapHAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 2, 1, 7),
    _TapHAvailTime_Type()
)
tapHAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHAvailTime.setStatus("mandatory")
_TapHErrFreeSecs_Type = Counter32
_TapHErrFreeSecs_Object = MibTableColumn
tapHErrFreeSecs = _TapHErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 2, 1, 8),
    _TapHErrFreeSecs_Type()
)
tapHErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    tapHErrFreeSecs.setStatus("mandatory")
_VoadmHist_ObjectIdentity = ObjectIdentity
voadmHist = _VoadmHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 20)
)
_VoadmHistTable_Object = MibTable
voadmHistTable = _VoadmHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 1)
)
if mibBuilder.loadTexts:
    voadmHistTable.setStatus("mandatory")
_VoadmHistEntry_Object = MibTableRow
voadmHistEntry = _VoadmHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 1, 1)
)
voadmHistEntry.setIndexNames(
    (0, "LUXN-MIB", "voadmHMode"),
)
if mibBuilder.loadTexts:
    voadmHistEntry.setStatus("mandatory")
_VoadmHMode_Type = HistoryMode
_VoadmHMode_Object = MibTableColumn
voadmHMode = _VoadmHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 1, 1, 1),
    _VoadmHMode_Type()
)
voadmHMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmHMode.setStatus("mandatory")
_VoadmHNumEvents_Type = Counter32
_VoadmHNumEvents_Object = MibTableColumn
voadmHNumEvents = _VoadmHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 1, 1, 2),
    _VoadmHNumEvents_Type()
)
voadmHNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmHNumEvents.setStatus("mandatory")
_VoadmHHistTable_Object = MibTable
voadmHHistTable = _VoadmHHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 2)
)
if mibBuilder.loadTexts:
    voadmHHistTable.setStatus("mandatory")
_VoadmHHistEntry_Object = MibTableRow
voadmHHistEntry = _VoadmHHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 2, 1)
)
voadmHHistEntry.setIndexNames(
    (0, "LUXN-MIB", "voadmHHistMode"),
    (0, "LUXN-MIB", "voadmHHistLocation"),
    (0, "LUXN-MIB", "voadmHHistShelf"),
    (0, "LUXN-MIB", "voadmHHistSlot"),
)
if mibBuilder.loadTexts:
    voadmHHistEntry.setStatus("mandatory")
_VoadmHHistMode_Type = HistoryMode
_VoadmHHistMode_Object = MibTableColumn
voadmHHistMode = _VoadmHHistMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 2, 1, 1),
    _VoadmHHistMode_Type()
)
voadmHHistMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmHHistMode.setStatus("mandatory")
_VoadmHHistLocation_Type = CardLocation
_VoadmHHistLocation_Object = MibTableColumn
voadmHHistLocation = _VoadmHHistLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 2, 1, 2),
    _VoadmHHistLocation_Type()
)
voadmHHistLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmHHistLocation.setStatus("mandatory")
_VoadmHHistShelf_Type = CardShelf
_VoadmHHistShelf_Object = MibTableColumn
voadmHHistShelf = _VoadmHHistShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 2, 1, 3),
    _VoadmHHistShelf_Type()
)
voadmHHistShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmHHistShelf.setStatus("mandatory")
_VoadmHHistSlot_Type = CardSlot
_VoadmHHistSlot_Object = MibTableColumn
voadmHHistSlot = _VoadmHHistSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 2, 1, 4),
    _VoadmHHistSlot_Type()
)
voadmHHistSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmHHistSlot.setStatus("mandatory")
_VoadmHHistType_Type = CardType
_VoadmHHistType_Object = MibTableColumn
voadmHHistType = _VoadmHHistType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 2, 1, 5),
    _VoadmHHistType_Type()
)
voadmHHistType.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmHHistType.setStatus("mandatory")
_VoadmHLastBootTime_Type = DateAndTime
_VoadmHLastBootTime_Object = MibTableColumn
voadmHLastBootTime = _VoadmHLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 2, 1, 6),
    _VoadmHLastBootTime_Type()
)
voadmHLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmHLastBootTime.setStatus("mandatory")
_VoadmHAvailTime_Type = Counter32
_VoadmHAvailTime_Object = MibTableColumn
voadmHAvailTime = _VoadmHAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 2, 1, 7),
    _VoadmHAvailTime_Type()
)
voadmHAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmHAvailTime.setStatus("mandatory")
_VoadmHErrFreeSecs_Type = Counter32
_VoadmHErrFreeSecs_Object = MibTableColumn
voadmHErrFreeSecs = _VoadmHErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 2, 1, 8),
    _VoadmHErrFreeSecs_Type()
)
voadmHErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    voadmHErrFreeSecs.setStatus("mandatory")
_DmmHist_ObjectIdentity = ObjectIdentity
dmmHist = _DmmHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 21)
)
_DmmHistTable_Object = MibTable
dmmHistTable = _DmmHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 1)
)
if mibBuilder.loadTexts:
    dmmHistTable.setStatus("mandatory")
_DmmHistEntry_Object = MibTableRow
dmmHistEntry = _DmmHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 1, 1)
)
dmmHistEntry.setIndexNames(
    (0, "LUXN-MIB", "dmmHMode"),
)
if mibBuilder.loadTexts:
    dmmHistEntry.setStatus("mandatory")
_DmmHMode_Type = HistoryMode
_DmmHMode_Object = MibTableColumn
dmmHMode = _DmmHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 1, 1, 1),
    _DmmHMode_Type()
)
dmmHMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmHMode.setStatus("mandatory")
_DmmHNumEvents_Type = Counter32
_DmmHNumEvents_Object = MibTableColumn
dmmHNumEvents = _DmmHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 1, 1, 2),
    _DmmHNumEvents_Type()
)
dmmHNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmHNumEvents.setStatus("mandatory")
_DmmHHistTable_Object = MibTable
dmmHHistTable = _DmmHHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 2)
)
if mibBuilder.loadTexts:
    dmmHHistTable.setStatus("mandatory")
_DmmHHistEntry_Object = MibTableRow
dmmHHistEntry = _DmmHHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 2, 1)
)
dmmHHistEntry.setIndexNames(
    (0, "LUXN-MIB", "dmmHHistMode"),
    (0, "LUXN-MIB", "dmmHHistLocation"),
    (0, "LUXN-MIB", "dmmHHistShelf"),
    (0, "LUXN-MIB", "dmmHHistSlot"),
)
if mibBuilder.loadTexts:
    dmmHHistEntry.setStatus("mandatory")
_DmmHHistMode_Type = HistoryMode
_DmmHHistMode_Object = MibTableColumn
dmmHHistMode = _DmmHHistMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 2, 1, 1),
    _DmmHHistMode_Type()
)
dmmHHistMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmHHistMode.setStatus("mandatory")
_DmmHHistLocation_Type = CardLocation
_DmmHHistLocation_Object = MibTableColumn
dmmHHistLocation = _DmmHHistLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 2, 1, 2),
    _DmmHHistLocation_Type()
)
dmmHHistLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmHHistLocation.setStatus("mandatory")
_DmmHHistShelf_Type = CardShelf
_DmmHHistShelf_Object = MibTableColumn
dmmHHistShelf = _DmmHHistShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 2, 1, 3),
    _DmmHHistShelf_Type()
)
dmmHHistShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmHHistShelf.setStatus("mandatory")
_DmmHHistSlot_Type = CardSlot
_DmmHHistSlot_Object = MibTableColumn
dmmHHistSlot = _DmmHHistSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 2, 1, 4),
    _DmmHHistSlot_Type()
)
dmmHHistSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmHHistSlot.setStatus("mandatory")
_DmmHLastBootTime_Type = DateAndTime
_DmmHLastBootTime_Object = MibTableColumn
dmmHLastBootTime = _DmmHLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 2, 1, 5),
    _DmmHLastBootTime_Type()
)
dmmHLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmHLastBootTime.setStatus("mandatory")
_DmmHAvailTime_Type = Counter32
_DmmHAvailTime_Object = MibTableColumn
dmmHAvailTime = _DmmHAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 2, 1, 6),
    _DmmHAvailTime_Type()
)
dmmHAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmHAvailTime.setStatus("mandatory")
_DmmHErrFreeSecs_Type = Counter32
_DmmHErrFreeSecs_Object = MibTableColumn
dmmHErrFreeSecs = _DmmHErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 2, 1, 7),
    _DmmHErrFreeSecs_Type()
)
dmmHErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    dmmHErrFreeSecs.setStatus("mandatory")
_Ocm10gfHist_ObjectIdentity = ObjectIdentity
ocm10gfHist = _Ocm10gfHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 22)
)
_Ocm10gfHistTable_Object = MibTable
ocm10gfHistTable = _Ocm10gfHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 1)
)
if mibBuilder.loadTexts:
    ocm10gfHistTable.setStatus("mandatory")
_Ocm10gfHistEntry_Object = MibTableRow
ocm10gfHistEntry = _Ocm10gfHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 1, 1)
)
ocm10gfHistEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm10gfHMode"),
)
if mibBuilder.loadTexts:
    ocm10gfHistEntry.setStatus("mandatory")
_Ocm10gfHMode_Type = HistoryMode
_Ocm10gfHMode_Object = MibTableColumn
ocm10gfHMode = _Ocm10gfHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 1, 1, 1),
    _Ocm10gfHMode_Type()
)
ocm10gfHMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfHMode.setStatus("mandatory")
_Ocm10gfHNumEvents_Type = Counter32
_Ocm10gfHNumEvents_Object = MibTableColumn
ocm10gfHNumEvents = _Ocm10gfHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 1, 1, 2),
    _Ocm10gfHNumEvents_Type()
)
ocm10gfHNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfHNumEvents.setStatus("mandatory")
_Ocm10gfHHistTable_Object = MibTable
ocm10gfHHistTable = _Ocm10gfHHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 2)
)
if mibBuilder.loadTexts:
    ocm10gfHHistTable.setStatus("mandatory")
_Ocm10gfHHistEntry_Object = MibTableRow
ocm10gfHHistEntry = _Ocm10gfHHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 2, 1)
)
ocm10gfHHistEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm10gfHHistMode"),
    (0, "LUXN-MIB", "ocm10gfHHistLocation"),
    (0, "LUXN-MIB", "ocm10gfHHistShelf"),
    (0, "LUXN-MIB", "ocm10gfHHistSlot"),
)
if mibBuilder.loadTexts:
    ocm10gfHHistEntry.setStatus("mandatory")
_Ocm10gfHHistMode_Type = HistoryMode
_Ocm10gfHHistMode_Object = MibTableColumn
ocm10gfHHistMode = _Ocm10gfHHistMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 2, 1, 1),
    _Ocm10gfHHistMode_Type()
)
ocm10gfHHistMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfHHistMode.setStatus("mandatory")
_Ocm10gfHHistLocation_Type = CardLocation
_Ocm10gfHHistLocation_Object = MibTableColumn
ocm10gfHHistLocation = _Ocm10gfHHistLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 2, 1, 2),
    _Ocm10gfHHistLocation_Type()
)
ocm10gfHHistLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfHHistLocation.setStatus("mandatory")
_Ocm10gfHHistShelf_Type = CardShelf
_Ocm10gfHHistShelf_Object = MibTableColumn
ocm10gfHHistShelf = _Ocm10gfHHistShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 2, 1, 3),
    _Ocm10gfHHistShelf_Type()
)
ocm10gfHHistShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfHHistShelf.setStatus("mandatory")
_Ocm10gfHHistSlot_Type = CardSlot
_Ocm10gfHHistSlot_Object = MibTableColumn
ocm10gfHHistSlot = _Ocm10gfHHistSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 2, 1, 4),
    _Ocm10gfHHistSlot_Type()
)
ocm10gfHHistSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfHHistSlot.setStatus("mandatory")
_Ocm10gfHLastBootTime_Type = DateAndTime
_Ocm10gfHLastBootTime_Object = MibTableColumn
ocm10gfHLastBootTime = _Ocm10gfHLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 2, 1, 5),
    _Ocm10gfHLastBootTime_Type()
)
ocm10gfHLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfHLastBootTime.setStatus("mandatory")
_Ocm10gfHAvailTime_Type = Counter32
_Ocm10gfHAvailTime_Object = MibTableColumn
ocm10gfHAvailTime = _Ocm10gfHAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 2, 1, 6),
    _Ocm10gfHAvailTime_Type()
)
ocm10gfHAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfHAvailTime.setStatus("mandatory")
_Ocm10gfHErrFreeSecs_Type = Counter32
_Ocm10gfHErrFreeSecs_Object = MibTableColumn
ocm10gfHErrFreeSecs = _Ocm10gfHErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 2, 1, 7),
    _Ocm10gfHErrFreeSecs_Type()
)
ocm10gfHErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm10gfHErrFreeSecs.setStatus("mandatory")
_Ocm2Hist_ObjectIdentity = ObjectIdentity
ocm2Hist = _Ocm2Hist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 23)
)
_Ocm2HistTable_Object = MibTable
ocm2HistTable = _Ocm2HistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 1)
)
if mibBuilder.loadTexts:
    ocm2HistTable.setStatus("mandatory")
_Ocm2HistEntry_Object = MibTableRow
ocm2HistEntry = _Ocm2HistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 1, 1)
)
ocm2HistEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm2HMode"),
)
if mibBuilder.loadTexts:
    ocm2HistEntry.setStatus("mandatory")
_Ocm2HMode_Type = HistoryMode
_Ocm2HMode_Object = MibTableColumn
ocm2HMode = _Ocm2HMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 1, 1, 1),
    _Ocm2HMode_Type()
)
ocm2HMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2HMode.setStatus("mandatory")
_Ocm2HNumEvents_Type = Counter32
_Ocm2HNumEvents_Object = MibTableColumn
ocm2HNumEvents = _Ocm2HNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 1, 1, 2),
    _Ocm2HNumEvents_Type()
)
ocm2HNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2HNumEvents.setStatus("mandatory")
_Ocm2HHistTable_Object = MibTable
ocm2HHistTable = _Ocm2HHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 2)
)
if mibBuilder.loadTexts:
    ocm2HHistTable.setStatus("mandatory")
_Ocm2HHistEntry_Object = MibTableRow
ocm2HHistEntry = _Ocm2HHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 2, 1)
)
ocm2HHistEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm2HHistMode"),
    (0, "LUXN-MIB", "ocm2HHistLocation"),
    (0, "LUXN-MIB", "ocm2HHistShelf"),
    (0, "LUXN-MIB", "ocm2HHistSlot"),
)
if mibBuilder.loadTexts:
    ocm2HHistEntry.setStatus("mandatory")
_Ocm2HHistMode_Type = HistoryMode
_Ocm2HHistMode_Object = MibTableColumn
ocm2HHistMode = _Ocm2HHistMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 2, 1, 1),
    _Ocm2HHistMode_Type()
)
ocm2HHistMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2HHistMode.setStatus("mandatory")
_Ocm2HHistLocation_Type = CardLocation
_Ocm2HHistLocation_Object = MibTableColumn
ocm2HHistLocation = _Ocm2HHistLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 2, 1, 2),
    _Ocm2HHistLocation_Type()
)
ocm2HHistLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2HHistLocation.setStatus("mandatory")
_Ocm2HHistShelf_Type = CardShelf
_Ocm2HHistShelf_Object = MibTableColumn
ocm2HHistShelf = _Ocm2HHistShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 2, 1, 3),
    _Ocm2HHistShelf_Type()
)
ocm2HHistShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2HHistShelf.setStatus("mandatory")
_Ocm2HHistSlot_Type = CardSlot
_Ocm2HHistSlot_Object = MibTableColumn
ocm2HHistSlot = _Ocm2HHistSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 2, 1, 4),
    _Ocm2HHistSlot_Type()
)
ocm2HHistSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2HHistSlot.setStatus("mandatory")
_Ocm2HLastBootTime_Type = DateAndTime
_Ocm2HLastBootTime_Object = MibTableColumn
ocm2HLastBootTime = _Ocm2HLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 2, 1, 5),
    _Ocm2HLastBootTime_Type()
)
ocm2HLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2HLastBootTime.setStatus("mandatory")
_Ocm2HAvailTime_Type = Counter32
_Ocm2HAvailTime_Object = MibTableColumn
ocm2HAvailTime = _Ocm2HAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 2, 1, 6),
    _Ocm2HAvailTime_Type()
)
ocm2HAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2HAvailTime.setStatus("mandatory")
_Ocm2HErrFreeSecs_Type = Counter32
_Ocm2HErrFreeSecs_Object = MibTableColumn
ocm2HErrFreeSecs = _Ocm2HErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 2, 1, 7),
    _Ocm2HErrFreeSecs_Type()
)
ocm2HErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm2HErrFreeSecs.setStatus("mandatory")
_OscHist_ObjectIdentity = ObjectIdentity
oscHist = _OscHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 24)
)
_OscHistTable_Object = MibTable
oscHistTable = _OscHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 1)
)
if mibBuilder.loadTexts:
    oscHistTable.setStatus("mandatory")
_OscHistEntry_Object = MibTableRow
oscHistEntry = _OscHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 1, 1)
)
oscHistEntry.setIndexNames(
    (0, "LUXN-MIB", "oscHMode"),
)
if mibBuilder.loadTexts:
    oscHistEntry.setStatus("mandatory")
_OscHMode_Type = HistoryMode
_OscHMode_Object = MibTableColumn
oscHMode = _OscHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 1, 1, 1),
    _OscHMode_Type()
)
oscHMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscHMode.setStatus("mandatory")
_OscHNumEvents_Type = Counter32
_OscHNumEvents_Object = MibTableColumn
oscHNumEvents = _OscHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 1, 1, 2),
    _OscHNumEvents_Type()
)
oscHNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscHNumEvents.setStatus("mandatory")
_OscHHistTable_Object = MibTable
oscHHistTable = _OscHHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 2)
)
if mibBuilder.loadTexts:
    oscHHistTable.setStatus("mandatory")
_OscHHistEntry_Object = MibTableRow
oscHHistEntry = _OscHHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 2, 1)
)
oscHHistEntry.setIndexNames(
    (0, "LUXN-MIB", "oscHHistMode"),
    (0, "LUXN-MIB", "oscHHistLocation"),
    (0, "LUXN-MIB", "oscHHistShelf"),
    (0, "LUXN-MIB", "oscHHistSlot"),
)
if mibBuilder.loadTexts:
    oscHHistEntry.setStatus("mandatory")
_OscHHistMode_Type = HistoryMode
_OscHHistMode_Object = MibTableColumn
oscHHistMode = _OscHHistMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 2, 1, 1),
    _OscHHistMode_Type()
)
oscHHistMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscHHistMode.setStatus("mandatory")
_OscHHistLocation_Type = CardLocation
_OscHHistLocation_Object = MibTableColumn
oscHHistLocation = _OscHHistLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 2, 1, 2),
    _OscHHistLocation_Type()
)
oscHHistLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscHHistLocation.setStatus("mandatory")
_OscHHistShelf_Type = CardShelf
_OscHHistShelf_Object = MibTableColumn
oscHHistShelf = _OscHHistShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 2, 1, 3),
    _OscHHistShelf_Type()
)
oscHHistShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscHHistShelf.setStatus("mandatory")
_OscHHistSlot_Type = CardSlot
_OscHHistSlot_Object = MibTableColumn
oscHHistSlot = _OscHHistSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 2, 1, 4),
    _OscHHistSlot_Type()
)
oscHHistSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscHHistSlot.setStatus("mandatory")
_OscHLastBootTime_Type = DateAndTime
_OscHLastBootTime_Object = MibTableColumn
oscHLastBootTime = _OscHLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 2, 1, 5),
    _OscHLastBootTime_Type()
)
oscHLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscHLastBootTime.setStatus("mandatory")
_OscHAvailTime_Type = Counter32
_OscHAvailTime_Object = MibTableColumn
oscHAvailTime = _OscHAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 2, 1, 6),
    _OscHAvailTime_Type()
)
oscHAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscHAvailTime.setStatus("mandatory")
_OscHErrFreeSecs_Type = Counter32
_OscHErrFreeSecs_Object = MibTableColumn
oscHErrFreeSecs = _OscHErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 2, 1, 7),
    _OscHErrFreeSecs_Type()
)
oscHErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    oscHErrFreeSecs.setStatus("mandatory")
_Ocm4gHist_ObjectIdentity = ObjectIdentity
ocm4gHist = _Ocm4gHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 25)
)
_Ocm4gHistTable_Object = MibTable
ocm4gHistTable = _Ocm4gHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 1)
)
if mibBuilder.loadTexts:
    ocm4gHistTable.setStatus("mandatory")
_Ocm4gHistEntry_Object = MibTableRow
ocm4gHistEntry = _Ocm4gHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 1, 1)
)
ocm4gHistEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm4gHMode"),
)
if mibBuilder.loadTexts:
    ocm4gHistEntry.setStatus("mandatory")
_Ocm4gHMode_Type = HistoryMode
_Ocm4gHMode_Object = MibTableColumn
ocm4gHMode = _Ocm4gHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 1, 1, 1),
    _Ocm4gHMode_Type()
)
ocm4gHMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gHMode.setStatus("mandatory")
_Ocm4gHNumEvents_Type = Counter32
_Ocm4gHNumEvents_Object = MibTableColumn
ocm4gHNumEvents = _Ocm4gHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 1, 1, 2),
    _Ocm4gHNumEvents_Type()
)
ocm4gHNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gHNumEvents.setStatus("mandatory")
_Ocm4gHHistTable_Object = MibTable
ocm4gHHistTable = _Ocm4gHHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 2)
)
if mibBuilder.loadTexts:
    ocm4gHHistTable.setStatus("mandatory")
_Ocm4gHHistEntry_Object = MibTableRow
ocm4gHHistEntry = _Ocm4gHHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 2, 1)
)
ocm4gHHistEntry.setIndexNames(
    (0, "LUXN-MIB", "ocm4gHHistMode"),
    (0, "LUXN-MIB", "ocm4gHHistLocation"),
    (0, "LUXN-MIB", "ocm4gHHistShelf"),
    (0, "LUXN-MIB", "ocm4gHHistSlot"),
)
if mibBuilder.loadTexts:
    ocm4gHHistEntry.setStatus("mandatory")
_Ocm4gHHistMode_Type = HistoryMode
_Ocm4gHHistMode_Object = MibTableColumn
ocm4gHHistMode = _Ocm4gHHistMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 2, 1, 1),
    _Ocm4gHHistMode_Type()
)
ocm4gHHistMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gHHistMode.setStatus("mandatory")


class _Ocm4gHHistLocation_Type(Integer32):
    """Custom type ocm4gHHistLocation based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("local", 1)
    )


_Ocm4gHHistLocation_Type.__name__ = "Integer32"
_Ocm4gHHistLocation_Object = MibTableColumn
ocm4gHHistLocation = _Ocm4gHHistLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 2, 1, 2),
    _Ocm4gHHistLocation_Type()
)
ocm4gHHistLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gHHistLocation.setStatus("mandatory")
_Ocm4gHHistShelf_Type = CardShelf
_Ocm4gHHistShelf_Object = MibTableColumn
ocm4gHHistShelf = _Ocm4gHHistShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 2, 1, 3),
    _Ocm4gHHistShelf_Type()
)
ocm4gHHistShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gHHistShelf.setStatus("mandatory")
_Ocm4gHHistSlot_Type = CardSlot
_Ocm4gHHistSlot_Object = MibTableColumn
ocm4gHHistSlot = _Ocm4gHHistSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 2, 1, 4),
    _Ocm4gHHistSlot_Type()
)
ocm4gHHistSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gHHistSlot.setStatus("mandatory")
_Ocm4gHLastBootTime_Type = DateAndTime
_Ocm4gHLastBootTime_Object = MibTableColumn
ocm4gHLastBootTime = _Ocm4gHLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 2, 1, 5),
    _Ocm4gHLastBootTime_Type()
)
ocm4gHLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gHLastBootTime.setStatus("mandatory")
_Ocm4gHAvailTime_Type = Counter32
_Ocm4gHAvailTime_Object = MibTableColumn
ocm4gHAvailTime = _Ocm4gHAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 2, 1, 6),
    _Ocm4gHAvailTime_Type()
)
ocm4gHAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gHAvailTime.setStatus("mandatory")
_Ocm4gHErrFreeSecs_Type = Counter32
_Ocm4gHErrFreeSecs_Object = MibTableColumn
ocm4gHErrFreeSecs = _Ocm4gHErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 2, 1, 7),
    _Ocm4gHErrFreeSecs_Type()
)
ocm4gHErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    ocm4gHErrFreeSecs.setStatus("mandatory")
_OetHist_ObjectIdentity = ObjectIdentity
oetHist = _OetHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 26)
)
_UobHist_ObjectIdentity = ObjectIdentity
uobHist = _UobHist_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 27)
)
_UobHistTable_Object = MibTable
uobHistTable = _UobHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 1)
)
if mibBuilder.loadTexts:
    uobHistTable.setStatus("mandatory")
_UobHistEntry_Object = MibTableRow
uobHistEntry = _UobHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 1, 1)
)
uobHistEntry.setIndexNames(
    (0, "LUXN-MIB", "uobHMode"),
)
if mibBuilder.loadTexts:
    uobHistEntry.setStatus("mandatory")
_UobHMode_Type = HistoryMode
_UobHMode_Object = MibTableColumn
uobHMode = _UobHMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 1, 1, 1),
    _UobHMode_Type()
)
uobHMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobHMode.setStatus("mandatory")
_UobHNumEvents_Type = Counter32
_UobHNumEvents_Object = MibTableColumn
uobHNumEvents = _UobHNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 1, 1, 2),
    _UobHNumEvents_Type()
)
uobHNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobHNumEvents.setStatus("mandatory")
_UobHHistTable_Object = MibTable
uobHHistTable = _UobHHistTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 2)
)
if mibBuilder.loadTexts:
    uobHHistTable.setStatus("mandatory")
_UobHHistEntry_Object = MibTableRow
uobHHistEntry = _UobHHistEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 2, 1)
)
uobHHistEntry.setIndexNames(
    (0, "LUXN-MIB", "uobHHistMode"),
    (0, "LUXN-MIB", "uobHHistLocation"),
    (0, "LUXN-MIB", "uobHHistShelf"),
    (0, "LUXN-MIB", "uobHHistSlot"),
)
if mibBuilder.loadTexts:
    uobHHistEntry.setStatus("mandatory")
_UobHHistMode_Type = HistoryMode
_UobHHistMode_Object = MibTableColumn
uobHHistMode = _UobHHistMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 2, 1, 1),
    _UobHHistMode_Type()
)
uobHHistMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobHHistMode.setStatus("mandatory")
_UobHHistLocation_Type = CardLocation
_UobHHistLocation_Object = MibTableColumn
uobHHistLocation = _UobHHistLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 2, 1, 2),
    _UobHHistLocation_Type()
)
uobHHistLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobHHistLocation.setStatus("mandatory")
_UobHHistShelf_Type = CardShelf
_UobHHistShelf_Object = MibTableColumn
uobHHistShelf = _UobHHistShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 2, 1, 3),
    _UobHHistShelf_Type()
)
uobHHistShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobHHistShelf.setStatus("mandatory")
_UobHHistSlot_Type = CardSlot
_UobHHistSlot_Object = MibTableColumn
uobHHistSlot = _UobHHistSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 2, 1, 4),
    _UobHHistSlot_Type()
)
uobHHistSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobHHistSlot.setStatus("mandatory")
_UobHLastBootTime_Type = DateAndTime
_UobHLastBootTime_Object = MibTableColumn
uobHLastBootTime = _UobHLastBootTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 2, 1, 5),
    _UobHLastBootTime_Type()
)
uobHLastBootTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobHLastBootTime.setStatus("mandatory")
_UobHAvailTime_Type = Counter32
_UobHAvailTime_Object = MibTableColumn
uobHAvailTime = _UobHAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 2, 1, 6),
    _UobHAvailTime_Type()
)
uobHAvailTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobHAvailTime.setStatus("mandatory")
_UobHErrFreeSecs_Type = Counter32
_UobHErrFreeSecs_Object = MibTableColumn
uobHErrFreeSecs = _UobHErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 2, 1, 7),
    _UobHErrFreeSecs_Type()
)
uobHErrFreeSecs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    uobHErrFreeSecs.setStatus("mandatory")
_SpecialConditions_ObjectIdentity = ObjectIdentity
specialConditions = _SpecialConditions_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3)
)
_SystemCond_ObjectIdentity = ObjectIdentity
systemCond = _SystemCond_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 1)
)
_SysCStatus_Type = CardStatus
_SysCStatus_Object = MibScalar
sysCStatus = _SysCStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 1, 1),
    _SysCStatus_Type()
)
sysCStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    sysCStatus.setStatus("mandatory")
_SysCSetMode_Type = FlagType
_SysCSetMode_Object = MibScalar
sysCSetMode = _SysCSetMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 1, 2),
    _SysCSetMode_Type()
)
sysCSetMode.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    sysCSetMode.setStatus("mandatory")
_SysCAvailTime_Type = Counter32
_SysCAvailTime_Object = MibScalar
sysCAvailTime = _SysCAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 1, 3),
    _SysCAvailTime_Type()
)
sysCAvailTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    sysCAvailTime.setStatus("mandatory")
_SysCErrFreeSecs_Type = Counter32
_SysCErrFreeSecs_Object = MibScalar
sysCErrFreeSecs = _SysCErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 1, 4),
    _SysCErrFreeSecs_Type()
)
sysCErrFreeSecs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    sysCErrFreeSecs.setStatus("mandatory")
_DownloadCond_ObjectIdentity = ObjectIdentity
downloadCond = _DownloadCond_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 2)
)
_DlCStatus_Type = DownloadStatus
_DlCStatus_Object = MibScalar
dlCStatus = _DlCStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 2, 1),
    _DlCStatus_Type()
)
dlCStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dlCStatus.setStatus("mandatory")
_DlCOkDownloads_Type = Counter32
_DlCOkDownloads_Object = MibScalar
dlCOkDownloads = _DlCOkDownloads_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 2, 2),
    _DlCOkDownloads_Type()
)
dlCOkDownloads.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dlCOkDownloads.setStatus("mandatory")
_DlCBadDownloads_Type = Counter32
_DlCBadDownloads_Object = MibScalar
dlCBadDownloads = _DlCBadDownloads_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 2, 3),
    _DlCBadDownloads_Type()
)
dlCBadDownloads.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dlCBadDownloads.setStatus("mandatory")
_DlCLongestTime_Type = Gauge32
_DlCLongestTime_Object = MibScalar
dlCLongestTime = _DlCLongestTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 2, 4),
    _DlCLongestTime_Type()
)
dlCLongestTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dlCLongestTime.setStatus("mandatory")
_DlCLongestSize_Type = Gauge32
_DlCLongestSize_Object = MibScalar
dlCLongestSize = _DlCLongestSize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 2, 5),
    _DlCLongestSize_Type()
)
dlCLongestSize.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dlCLongestSize.setStatus("mandatory")
_DlCCounterFlag_Type = FlagType
_DlCCounterFlag_Object = MibScalar
dlCCounterFlag = _DlCCounterFlag_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 2, 6),
    _DlCCounterFlag_Type()
)
dlCCounterFlag.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    dlCCounterFlag.setStatus("mandatory")
_CpCond_ObjectIdentity = ObjectIdentity
cpCond = _CpCond_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3)
)
_CpCNumEvents_Type = Counter32
_CpCNumEvents_Object = MibScalar
cpCNumEvents = _CpCNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 1),
    _CpCNumEvents_Type()
)
cpCNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCNumEvents.setStatus("mandatory")
_CpCTrapsSent_Type = Counter32
_CpCTrapsSent_Object = MibScalar
cpCTrapsSent = _CpCTrapsSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 2),
    _CpCTrapsSent_Type()
)
cpCTrapsSent.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCTrapsSent.setStatus("mandatory")
_CpCSNMPCmdsRcvd_Type = Counter32
_CpCSNMPCmdsRcvd_Object = MibScalar
cpCSNMPCmdsRcvd = _CpCSNMPCmdsRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 3),
    _CpCSNMPCmdsRcvd_Type()
)
cpCSNMPCmdsRcvd.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCSNMPCmdsRcvd.setStatus("mandatory")
_CpCCounterFlag_Type = FlagType
_CpCCounterFlag_Object = MibScalar
cpCCounterFlag = _CpCCounterFlag_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 4),
    _CpCCounterFlag_Type()
)
cpCCounterFlag.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCCounterFlag.setStatus("mandatory")
_CpCCntrTable_Object = MibTable
cpCCntrTable = _CpCCntrTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5)
)
if mibBuilder.loadTexts:
    cpCCntrTable.setStatus("mandatory")
_CpCCntrEntry_Object = MibTableRow
cpCCntrEntry = _CpCCntrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1)
)
cpCCntrEntry.setIndexNames(
    (0, "LUXN-MIB", "cpCCntrShelf"),
    (0, "LUXN-MIB", "cpCCntrSlot"),
    (0, "LUXN-MIB", "cpCCntrType"),
)
if mibBuilder.loadTexts:
    cpCCntrEntry.setStatus("mandatory")
_CpCCntrShelf_Type = CardShelf
_CpCCntrShelf_Object = MibTableColumn
cpCCntrShelf = _CpCCntrShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 1),
    _CpCCntrShelf_Type()
)
cpCCntrShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCCntrShelf.setStatus("mandatory")
_CpCCntrSlot_Type = CardSlot
_CpCCntrSlot_Object = MibTableColumn
cpCCntrSlot = _CpCCntrSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 2),
    _CpCCntrSlot_Type()
)
cpCCntrSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCCntrSlot.setStatus("mandatory")


class _CpCCntrType_Type(Integer32):
    """Custom type cpCCntrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            1
        )
    )
    namedValues = NamedValues(
        ("spi", 1)
    )


_CpCCntrType_Type.__name__ = "Integer32"
_CpCCntrType_Object = MibTableColumn
cpCCntrType = _CpCCntrType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 3),
    _CpCCntrType_Type()
)
cpCCntrType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCCntrType.setStatus("mandatory")
_CpCTotPktSent_Type = Counter32
_CpCTotPktSent_Object = MibTableColumn
cpCTotPktSent = _CpCTotPktSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 4),
    _CpCTotPktSent_Type()
)
cpCTotPktSent.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCTotPktSent.setStatus("mandatory")
_CpCTotPktRcvd_Type = Counter32
_CpCTotPktRcvd_Object = MibTableColumn
cpCTotPktRcvd = _CpCTotPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 5),
    _CpCTotPktRcvd_Type()
)
cpCTotPktRcvd.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCTotPktRcvd.setStatus("mandatory")
_CpCBadPktRcvd_Type = Counter32
_CpCBadPktRcvd_Object = MibTableColumn
cpCBadPktRcvd = _CpCBadPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 6),
    _CpCBadPktRcvd_Type()
)
cpCBadPktRcvd.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCBadPktRcvd.setStatus("mandatory")
_CpCTotBadTrans_Type = Counter32
_CpCTotBadTrans_Object = MibTableColumn
cpCTotBadTrans = _CpCTotBadTrans_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 7),
    _CpCTotBadTrans_Type()
)
cpCTotBadTrans.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCTotBadTrans.setStatus("mandatory")
_CpCBytesSent_Type = Counter32
_CpCBytesSent_Object = MibTableColumn
cpCBytesSent = _CpCBytesSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 8),
    _CpCBytesSent_Type()
)
cpCBytesSent.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCBytesSent.setStatus("mandatory")
_CpCBytesRcvd_Type = Counter32
_CpCBytesRcvd_Object = MibTableColumn
cpCBytesRcvd = _CpCBytesRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 9),
    _CpCBytesRcvd_Type()
)
cpCBytesRcvd.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCBytesRcvd.setStatus("mandatory")
_CpCMsgsDlvrd_Type = Counter32
_CpCMsgsDlvrd_Object = MibTableColumn
cpCMsgsDlvrd = _CpCMsgsDlvrd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 10),
    _CpCMsgsDlvrd_Type()
)
cpCMsgsDlvrd.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCMsgsDlvrd.setStatus("mandatory")
_CpCBufAllocFail_Type = Counter32
_CpCBufAllocFail_Object = MibTableColumn
cpCBufAllocFail = _CpCBufAllocFail_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 11),
    _CpCBufAllocFail_Type()
)
cpCBufAllocFail.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCBufAllocFail.setStatus("mandatory")
_CpCEcbAllocFail_Type = Counter32
_CpCEcbAllocFail_Object = MibTableColumn
cpCEcbAllocFail = _CpCEcbAllocFail_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 12),
    _CpCEcbAllocFail_Type()
)
cpCEcbAllocFail.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCEcbAllocFail.setStatus("mandatory")
_CpCPerfTable_Object = MibTable
cpCPerfTable = _CpCPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 6)
)
if mibBuilder.loadTexts:
    cpCPerfTable.setStatus("mandatory")
_CpCPerfEntry_Object = MibTableRow
cpCPerfEntry = _CpCPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 6, 1)
)
cpCPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "cpCPerfShelf"),
    (0, "LUXN-MIB", "cpCPerfSlot"),
)
if mibBuilder.loadTexts:
    cpCPerfEntry.setStatus("mandatory")
_CpCPerfShelf_Type = CardShelf
_CpCPerfShelf_Object = MibTableColumn
cpCPerfShelf = _CpCPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 6, 1, 1),
    _CpCPerfShelf_Type()
)
cpCPerfShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCPerfShelf.setStatus("mandatory")
_CpCPerfSlot_Type = CardSlot
_CpCPerfSlot_Object = MibTableColumn
cpCPerfSlot = _CpCPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 6, 1, 2),
    _CpCPerfSlot_Type()
)
cpCPerfSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCPerfSlot.setStatus("mandatory")
_CpCPerfMode_Type = RedundancyMode
_CpCPerfMode_Object = MibTableColumn
cpCPerfMode = _CpCPerfMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 6, 1, 3),
    _CpCPerfMode_Type()
)
cpCPerfMode.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCPerfMode.setStatus("mandatory")
_CpCPerfState_Type = CardState
_CpCPerfState_Object = MibTableColumn
cpCPerfState = _CpCPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 6, 1, 4),
    _CpCPerfState_Type()
)
cpCPerfState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCPerfState.setStatus("mandatory")
_CpCPerfStatus_Type = CardStatus
_CpCPerfStatus_Object = MibTableColumn
cpCPerfStatus = _CpCPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 6, 1, 5),
    _CpCPerfStatus_Type()
)
cpCPerfStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCPerfStatus.setStatus("mandatory")
_CpCAvailTime_Type = Counter32
_CpCAvailTime_Object = MibTableColumn
cpCAvailTime = _CpCAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 6, 1, 7),
    _CpCAvailTime_Type()
)
cpCAvailTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCAvailTime.setStatus("mandatory")
_CpCErrFreeSecs_Type = Counter32
_CpCErrFreeSecs_Object = MibTableColumn
cpCErrFreeSecs = _CpCErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 6, 1, 8),
    _CpCErrFreeSecs_Type()
)
cpCErrFreeSecs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    cpCErrFreeSecs.setStatus("mandatory")
_CcCond_ObjectIdentity = ObjectIdentity
ccCond = _CcCond_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4)
)
_CcCNumEvents_Type = Counter32
_CcCNumEvents_Object = MibScalar
ccCNumEvents = _CcCNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 1),
    _CcCNumEvents_Type()
)
ccCNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCNumEvents.setStatus("mandatory")
_CcCCntrTable_Object = MibTable
ccCCntrTable = _CcCCntrTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2)
)
if mibBuilder.loadTexts:
    ccCCntrTable.setStatus("mandatory")
_CcCCntrEntry_Object = MibTableRow
ccCCntrEntry = _CcCCntrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1)
)
ccCCntrEntry.setIndexNames(
    (0, "LUXN-MIB", "ccCCntrLocation"),
    (0, "LUXN-MIB", "ccCCntrShelf"),
    (0, "LUXN-MIB", "ccCCntrSlot"),
    (0, "LUXN-MIB", "ccCCntrType"),
)
if mibBuilder.loadTexts:
    ccCCntrEntry.setStatus("mandatory")
_CcCCntrLocation_Type = CardLocation
_CcCCntrLocation_Object = MibTableColumn
ccCCntrLocation = _CcCCntrLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 1),
    _CcCCntrLocation_Type()
)
ccCCntrLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCCntrLocation.setStatus("mandatory")
_CcCCntrShelf_Type = CardShelf
_CcCCntrShelf_Object = MibTableColumn
ccCCntrShelf = _CcCCntrShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 2),
    _CcCCntrShelf_Type()
)
ccCCntrShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCCntrShelf.setStatus("mandatory")
_CcCCntrSlot_Type = CardSlot
_CcCCntrSlot_Object = MibTableColumn
ccCCntrSlot = _CcCCntrSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 3),
    _CcCCntrSlot_Type()
)
ccCCntrSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCCntrSlot.setStatus("mandatory")


class _CcCCntrType_Type(Integer32):
    """Custom type ccCCntrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("iwm", 2),
          ("spi", 1))
    )


_CcCCntrType_Type.__name__ = "Integer32"
_CcCCntrType_Object = MibTableColumn
ccCCntrType = _CcCCntrType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 4),
    _CcCCntrType_Type()
)
ccCCntrType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCCntrType.setStatus("mandatory")
_CcCCounterFlag_Type = FlagType
_CcCCounterFlag_Object = MibTableColumn
ccCCounterFlag = _CcCCounterFlag_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 5),
    _CcCCounterFlag_Type()
)
ccCCounterFlag.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCCounterFlag.setStatus("mandatory")
_CcCTotPktSent_Type = Counter32
_CcCTotPktSent_Object = MibTableColumn
ccCTotPktSent = _CcCTotPktSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 6),
    _CcCTotPktSent_Type()
)
ccCTotPktSent.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCTotPktSent.setStatus("mandatory")
_CcCTotPktRcvd_Type = Counter32
_CcCTotPktRcvd_Object = MibTableColumn
ccCTotPktRcvd = _CcCTotPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 7),
    _CcCTotPktRcvd_Type()
)
ccCTotPktRcvd.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCTotPktRcvd.setStatus("mandatory")
_CcCBadPktRcvd_Type = Counter32
_CcCBadPktRcvd_Object = MibTableColumn
ccCBadPktRcvd = _CcCBadPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 8),
    _CcCBadPktRcvd_Type()
)
ccCBadPktRcvd.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCBadPktRcvd.setStatus("mandatory")
_CcCTotBadTrans_Type = Counter32
_CcCTotBadTrans_Object = MibTableColumn
ccCTotBadTrans = _CcCTotBadTrans_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 9),
    _CcCTotBadTrans_Type()
)
ccCTotBadTrans.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCTotBadTrans.setStatus("mandatory")
_CcCBytesSent_Type = Counter32
_CcCBytesSent_Object = MibTableColumn
ccCBytesSent = _CcCBytesSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 10),
    _CcCBytesSent_Type()
)
ccCBytesSent.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCBytesSent.setStatus("mandatory")
_CcCBytesRcvd_Type = Counter32
_CcCBytesRcvd_Object = MibTableColumn
ccCBytesRcvd = _CcCBytesRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 11),
    _CcCBytesRcvd_Type()
)
ccCBytesRcvd.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCBytesRcvd.setStatus("mandatory")
_CcCMsgsDlvrd_Type = Counter32
_CcCMsgsDlvrd_Object = MibTableColumn
ccCMsgsDlvrd = _CcCMsgsDlvrd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 12),
    _CcCMsgsDlvrd_Type()
)
ccCMsgsDlvrd.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCMsgsDlvrd.setStatus("mandatory")
_CcCBufAllocFail_Type = Counter32
_CcCBufAllocFail_Object = MibTableColumn
ccCBufAllocFail = _CcCBufAllocFail_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 13),
    _CcCBufAllocFail_Type()
)
ccCBufAllocFail.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCBufAllocFail.setStatus("mandatory")
_CcCEcbAllocFail_Type = Counter32
_CcCEcbAllocFail_Object = MibTableColumn
ccCEcbAllocFail = _CcCEcbAllocFail_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 14),
    _CcCEcbAllocFail_Type()
)
ccCEcbAllocFail.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCEcbAllocFail.setStatus("mandatory")
_CcCClearCntrs_Type = ResetType
_CcCClearCntrs_Object = MibTableColumn
ccCClearCntrs = _CcCClearCntrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 15),
    _CcCClearCntrs_Type()
)
ccCClearCntrs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCClearCntrs.setStatus("mandatory")
_CcCPerfTable_Object = MibTable
ccCPerfTable = _CcCPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3)
)
if mibBuilder.loadTexts:
    ccCPerfTable.setStatus("mandatory")
_CcCPerfEntry_Object = MibTableRow
ccCPerfEntry = _CcCPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1)
)
ccCPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "ccCPerfLocation"),
    (0, "LUXN-MIB", "ccCPerfShelf"),
    (0, "LUXN-MIB", "ccCPerfSlot"),
)
if mibBuilder.loadTexts:
    ccCPerfEntry.setStatus("mandatory")
_CcCPerfLocation_Type = CardLocation
_CcCPerfLocation_Object = MibTableColumn
ccCPerfLocation = _CcCPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 1),
    _CcCPerfLocation_Type()
)
ccCPerfLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCPerfLocation.setStatus("mandatory")
_CcCPerfShelf_Type = CardShelf
_CcCPerfShelf_Object = MibTableColumn
ccCPerfShelf = _CcCPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 2),
    _CcCPerfShelf_Type()
)
ccCPerfShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCPerfShelf.setStatus("mandatory")
_CcCPerfSlot_Type = CardSlot
_CcCPerfSlot_Object = MibTableColumn
ccCPerfSlot = _CcCPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 3),
    _CcCPerfSlot_Type()
)
ccCPerfSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCPerfSlot.setStatus("mandatory")
_CcCPerfState_Type = CardState
_CcCPerfState_Object = MibTableColumn
ccCPerfState = _CcCPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 4),
    _CcCPerfState_Type()
)
ccCPerfState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCPerfState.setStatus("mandatory")
_CcCPerfStatus_Type = CardStatus
_CcCPerfStatus_Object = MibTableColumn
ccCPerfStatus = _CcCPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 5),
    _CcCPerfStatus_Type()
)
ccCPerfStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCPerfStatus.setStatus("mandatory")
_CcCAvailTime_Type = Counter32
_CcCAvailTime_Object = MibTableColumn
ccCAvailTime = _CcCAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 6),
    _CcCAvailTime_Type()
)
ccCAvailTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCAvailTime.setStatus("mandatory")
_CcCErrFreeSecs_Type = Counter32
_CcCErrFreeSecs_Object = MibTableColumn
ccCErrFreeSecs = _CcCErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 7),
    _CcCErrFreeSecs_Type()
)
ccCErrFreeSecs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCErrFreeSecs.setStatus("mandatory")
_CcCBiasCurrent_Type = Integer32
_CcCBiasCurrent_Object = MibTableColumn
ccCBiasCurrent = _CcCBiasCurrent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 8),
    _CcCBiasCurrent_Type()
)
ccCBiasCurrent.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCBiasCurrent.setStatus("mandatory")
_CcCModulation_Type = Integer32
_CcCModulation_Object = MibTableColumn
ccCModulation = _CcCModulation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 9),
    _CcCModulation_Type()
)
ccCModulation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCModulation.setStatus("mandatory")
_CcCApc_Type = Integer32
_CcCApc_Object = MibTableColumn
ccCApc = _CcCApc_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 10),
    _CcCApc_Type()
)
ccCApc.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCApc.setStatus("mandatory")
_CcCIwmModulation_Type = Integer32
_CcCIwmModulation_Object = MibTableColumn
ccCIwmModulation = _CcCIwmModulation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 11),
    _CcCIwmModulation_Type()
)
ccCIwmModulation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCIwmModulation.setStatus("mandatory")
_CcCLaserOnOff_Type = FlagType
_CcCLaserOnOff_Object = MibTableColumn
ccCLaserOnOff = _CcCLaserOnOff_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 12),
    _CcCLaserOnOff_Type()
)
ccCLaserOnOff.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCLaserOnOff.setStatus("mandatory")
_CcCTemperature_Type = Gauge32
_CcCTemperature_Object = MibTableColumn
ccCTemperature = _CcCTemperature_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 13),
    _CcCTemperature_Type()
)
ccCTemperature.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCTemperature.setStatus("mandatory")
_CcCIntensity_Type = Gauge32
_CcCIntensity_Object = MibTableColumn
ccCIntensity = _CcCIntensity_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 14),
    _CcCIntensity_Type()
)
ccCIntensity.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCIntensity.setStatus("mandatory")
_CcCSignalStrength_Type = Gauge32
_CcCSignalStrength_Object = MibTableColumn
ccCSignalStrength = _CcCSignalStrength_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 15),
    _CcCSignalStrength_Type()
)
ccCSignalStrength.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCSignalStrength.setStatus("mandatory")
_CcCLossOfLight_Type = Boolean
_CcCLossOfLight_Object = MibTableColumn
ccCLossOfLight = _CcCLossOfLight_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 16),
    _CcCLossOfLight_Type()
)
ccCLossOfLight.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCLossOfLight.setStatus("mandatory")
_CcCSignalDetect_Type = Boolean
_CcCSignalDetect_Object = MibTableColumn
ccCSignalDetect = _CcCSignalDetect_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 17),
    _CcCSignalDetect_Type()
)
ccCSignalDetect.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCSignalDetect.setStatus("mandatory")


class _CcCRefClock_Type(Integer32):
    """Custom type ccCRefClock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("en1660", 1),
          ("en1944", 2),
          ("en1953", 3))
    )


_CcCRefClock_Type.__name__ = "Integer32"
_CcCRefClock_Object = MibTableColumn
ccCRefClock = _CcCRefClock_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 18),
    _CcCRefClock_Type()
)
ccCRefClock.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCRefClock.setStatus("mandatory")


class _CcCClockDiv_Type(Integer32):
    """Custom type ccCClockDiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dout-1250", 1),
          ("dout-155", 3),
          ("dout-622", 2))
    )


_CcCClockDiv_Type.__name__ = "Integer32"
_CcCClockDiv_Object = MibTableColumn
ccCClockDiv = _CcCClockDiv_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 19),
    _CcCClockDiv_Type()
)
ccCClockDiv.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCClockDiv.setStatus("mandatory")


class _CcCProtectionMode_Type(Integer32):
    """Custom type ccCProtectionMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("active", 1),
          ("na", 3),
          ("standby", 2))
    )


_CcCProtectionMode_Type.__name__ = "Integer32"
_CcCProtectionMode_Object = MibTableColumn
ccCProtectionMode = _CcCProtectionMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 20),
    _CcCProtectionMode_Type()
)
ccCProtectionMode.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    ccCProtectionMode.setStatus("mandatory")
_MuxCond_ObjectIdentity = ObjectIdentity
muxCond = _MuxCond_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 5)
)
_MuxCNumEvents_Type = Counter32
_MuxCNumEvents_Object = MibScalar
muxCNumEvents = _MuxCNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 1),
    _MuxCNumEvents_Type()
)
muxCNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    muxCNumEvents.setStatus("mandatory")
_MuxCPerfTable_Object = MibTable
muxCPerfTable = _MuxCPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 2)
)
if mibBuilder.loadTexts:
    muxCPerfTable.setStatus("mandatory")
_MuxCPerfEntry_Object = MibTableRow
muxCPerfEntry = _MuxCPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 2, 1)
)
muxCPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "muxCPerfLocation"),
    (0, "LUXN-MIB", "muxCPerfShelf"),
    (0, "LUXN-MIB", "muxCPerfSlot"),
)
if mibBuilder.loadTexts:
    muxCPerfEntry.setStatus("mandatory")
_MuxCPerfLocation_Type = CardLocation
_MuxCPerfLocation_Object = MibTableColumn
muxCPerfLocation = _MuxCPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 2, 1, 1),
    _MuxCPerfLocation_Type()
)
muxCPerfLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    muxCPerfLocation.setStatus("mandatory")
_MuxCPerfShelf_Type = CardShelf
_MuxCPerfShelf_Object = MibTableColumn
muxCPerfShelf = _MuxCPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 2, 1, 2),
    _MuxCPerfShelf_Type()
)
muxCPerfShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    muxCPerfShelf.setStatus("mandatory")
_MuxCPerfSlot_Type = CardSlot
_MuxCPerfSlot_Object = MibTableColumn
muxCPerfSlot = _MuxCPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 2, 1, 3),
    _MuxCPerfSlot_Type()
)
muxCPerfSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    muxCPerfSlot.setStatus("mandatory")


class _MuxCType_Type(Integer32):
    """Custom type muxCType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(4,
              5,
              10,
              13,
              21)
        )
    )
    namedValues = NamedValues(
        *(("demux", 5),
          ("mux", 4),
          ("w2cmd", 13),
          ("w4cd", 10),
          ("w4cm", 21))
    )


_MuxCType_Type.__name__ = "Integer32"
_MuxCType_Object = MibTableColumn
muxCType = _MuxCType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 2, 1, 4),
    _MuxCType_Type()
)
muxCType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    muxCType.setStatus("mandatory")
_MuxCPerfState_Type = CardState
_MuxCPerfState_Object = MibTableColumn
muxCPerfState = _MuxCPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 2, 1, 5),
    _MuxCPerfState_Type()
)
muxCPerfState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    muxCPerfState.setStatus("mandatory")
_MuxCPerfStatus_Type = CardStatus
_MuxCPerfStatus_Object = MibTableColumn
muxCPerfStatus = _MuxCPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 2, 1, 6),
    _MuxCPerfStatus_Type()
)
muxCPerfStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    muxCPerfStatus.setStatus("mandatory")
_MuxCAvailTime_Type = Counter32
_MuxCAvailTime_Object = MibTableColumn
muxCAvailTime = _MuxCAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 2, 1, 7),
    _MuxCAvailTime_Type()
)
muxCAvailTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    muxCAvailTime.setStatus("mandatory")
_MuxCErrFreeSecs_Type = Counter32
_MuxCErrFreeSecs_Object = MibTableColumn
muxCErrFreeSecs = _MuxCErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 2, 1, 8),
    _MuxCErrFreeSecs_Type()
)
muxCErrFreeSecs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    muxCErrFreeSecs.setStatus("mandatory")
_MuxCCounterFlag_Type = FlagType
_MuxCCounterFlag_Object = MibScalar
muxCCounterFlag = _MuxCCounterFlag_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 3),
    _MuxCCounterFlag_Type()
)
muxCCounterFlag.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    muxCCounterFlag.setStatus("mandatory")
_PsCond_ObjectIdentity = ObjectIdentity
psCond = _PsCond_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 6)
)
_PsCNumEvents_Type = Counter32
_PsCNumEvents_Object = MibScalar
psCNumEvents = _PsCNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 6, 1),
    _PsCNumEvents_Type()
)
psCNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    psCNumEvents.setStatus("mandatory")
_PsCVoltageLevel3pt3Volt_Type = Integer32
_PsCVoltageLevel3pt3Volt_Object = MibScalar
psCVoltageLevel3pt3Volt = _PsCVoltageLevel3pt3Volt_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 6, 2),
    _PsCVoltageLevel3pt3Volt_Type()
)
psCVoltageLevel3pt3Volt.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    psCVoltageLevel3pt3Volt.setStatus("mandatory")
_PsCVoltageLevel5Volt_Type = Integer32
_PsCVoltageLevel5Volt_Object = MibScalar
psCVoltageLevel5Volt = _PsCVoltageLevel5Volt_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 6, 3),
    _PsCVoltageLevel5Volt_Type()
)
psCVoltageLevel5Volt.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    psCVoltageLevel5Volt.setStatus("mandatory")
_PsCVoltageLevel12Volt_Type = Integer32
_PsCVoltageLevel12Volt_Object = MibScalar
psCVoltageLevel12Volt = _PsCVoltageLevel12Volt_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 6, 4),
    _PsCVoltageLevel12Volt_Type()
)
psCVoltageLevel12Volt.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    psCVoltageLevel12Volt.setStatus("mandatory")
_PsCPerfTable_Object = MibTable
psCPerfTable = _PsCPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 6, 5)
)
if mibBuilder.loadTexts:
    psCPerfTable.setStatus("mandatory")
_PsCPerfEntry_Object = MibTableRow
psCPerfEntry = _PsCPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 6, 5, 1)
)
psCPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "psCPerfID"),
)
if mibBuilder.loadTexts:
    psCPerfEntry.setStatus("mandatory")
_PsCPerfID_Type = Integer32
_PsCPerfID_Object = MibTableColumn
psCPerfID = _PsCPerfID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 6, 5, 1, 1),
    _PsCPerfID_Type()
)
psCPerfID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    psCPerfID.setStatus("mandatory")
_PsCPerfType_Type = RedundancyMode
_PsCPerfType_Object = MibTableColumn
psCPerfType = _PsCPerfType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 6, 5, 1, 2),
    _PsCPerfType_Type()
)
psCPerfType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    psCPerfType.setStatus("mandatory")
_PsCPerfState_Type = CardState
_PsCPerfState_Object = MibTableColumn
psCPerfState = _PsCPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 6, 5, 1, 3),
    _PsCPerfState_Type()
)
psCPerfState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    psCPerfState.setStatus("mandatory")
_PsCPerfStatus_Type = CardStatus
_PsCPerfStatus_Object = MibTableColumn
psCPerfStatus = _PsCPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 6, 5, 1, 4),
    _PsCPerfStatus_Type()
)
psCPerfStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    psCPerfStatus.setStatus("mandatory")
_FadmCond_ObjectIdentity = ObjectIdentity
fadmCond = _FadmCond_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 7)
)
_FadmCNumEvents_Type = Counter32
_FadmCNumEvents_Object = MibScalar
fadmCNumEvents = _FadmCNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 7, 1),
    _FadmCNumEvents_Type()
)
fadmCNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fadmCNumEvents.setStatus("mandatory")
_FadmCCounterFlag_Type = FlagType
_FadmCCounterFlag_Object = MibScalar
fadmCCounterFlag = _FadmCCounterFlag_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 7, 2),
    _FadmCCounterFlag_Type()
)
fadmCCounterFlag.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fadmCCounterFlag.setStatus("mandatory")
_FadmCPerfTable_Object = MibTable
fadmCPerfTable = _FadmCPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 7, 3)
)
if mibBuilder.loadTexts:
    fadmCPerfTable.setStatus("mandatory")
_FadmCPerfEntry_Object = MibTableRow
fadmCPerfEntry = _FadmCPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 7, 3, 1)
)
fadmCPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "fadmCPerfLocation"),
    (0, "LUXN-MIB", "fadmCPerfShelf"),
    (0, "LUXN-MIB", "fadmCPerfSlot"),
)
if mibBuilder.loadTexts:
    fadmCPerfEntry.setStatus("mandatory")
_FadmCPerfLocation_Type = CardLocation
_FadmCPerfLocation_Object = MibTableColumn
fadmCPerfLocation = _FadmCPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 7, 3, 1, 1),
    _FadmCPerfLocation_Type()
)
fadmCPerfLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fadmCPerfLocation.setStatus("mandatory")
_FadmCPerfShelf_Type = CardShelf
_FadmCPerfShelf_Object = MibTableColumn
fadmCPerfShelf = _FadmCPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 7, 3, 1, 2),
    _FadmCPerfShelf_Type()
)
fadmCPerfShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fadmCPerfShelf.setStatus("mandatory")
_FadmCPerfSlot_Type = CardSlot
_FadmCPerfSlot_Object = MibTableColumn
fadmCPerfSlot = _FadmCPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 7, 3, 1, 3),
    _FadmCPerfSlot_Type()
)
fadmCPerfSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fadmCPerfSlot.setStatus("mandatory")
_FadmCPerfState_Type = CardState
_FadmCPerfState_Object = MibTableColumn
fadmCPerfState = _FadmCPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 7, 3, 1, 5),
    _FadmCPerfState_Type()
)
fadmCPerfState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fadmCPerfState.setStatus("mandatory")
_FadmCPerfStatus_Type = CardStatus
_FadmCPerfStatus_Object = MibTableColumn
fadmCPerfStatus = _FadmCPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 7, 3, 1, 6),
    _FadmCPerfStatus_Type()
)
fadmCPerfStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fadmCPerfStatus.setStatus("mandatory")
_FadmCAvailTime_Type = Counter32
_FadmCAvailTime_Object = MibTableColumn
fadmCAvailTime = _FadmCAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 7, 3, 1, 7),
    _FadmCAvailTime_Type()
)
fadmCAvailTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fadmCAvailTime.setStatus("mandatory")
_FadmCErrFreeSecs_Type = Counter32
_FadmCErrFreeSecs_Object = MibTableColumn
fadmCErrFreeSecs = _FadmCErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 7, 3, 1, 8),
    _FadmCErrFreeSecs_Type()
)
fadmCErrFreeSecs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fadmCErrFreeSecs.setStatus("mandatory")
_OppmCond_ObjectIdentity = ObjectIdentity
oppmCond = _OppmCond_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 8)
)
_OppmCNumEvents_Type = Counter32
_OppmCNumEvents_Object = MibScalar
oppmCNumEvents = _OppmCNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 8, 1),
    _OppmCNumEvents_Type()
)
oppmCNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmCNumEvents.setStatus("mandatory")
_OppmCPerfTable_Object = MibTable
oppmCPerfTable = _OppmCPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 8, 2)
)
if mibBuilder.loadTexts:
    oppmCPerfTable.setStatus("mandatory")
_OppmCPerfEntry_Object = MibTableRow
oppmCPerfEntry = _OppmCPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 8, 2, 1)
)
oppmCPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "oppmCPerfLocation"),
    (0, "LUXN-MIB", "oppmCPerfShelf"),
    (0, "LUXN-MIB", "oppmCPerfSlot"),
)
if mibBuilder.loadTexts:
    oppmCPerfEntry.setStatus("mandatory")
_OppmCPerfLocation_Type = CardLocation
_OppmCPerfLocation_Object = MibTableColumn
oppmCPerfLocation = _OppmCPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 8, 2, 1, 1),
    _OppmCPerfLocation_Type()
)
oppmCPerfLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmCPerfLocation.setStatus("mandatory")
_OppmCPerfShelf_Type = CardShelf
_OppmCPerfShelf_Object = MibTableColumn
oppmCPerfShelf = _OppmCPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 8, 2, 1, 2),
    _OppmCPerfShelf_Type()
)
oppmCPerfShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmCPerfShelf.setStatus("mandatory")
_OppmCPerfSlot_Type = CardSlot
_OppmCPerfSlot_Object = MibTableColumn
oppmCPerfSlot = _OppmCPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 8, 2, 1, 3),
    _OppmCPerfSlot_Type()
)
oppmCPerfSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmCPerfSlot.setStatus("mandatory")
_OppmCPerfState_Type = CardState
_OppmCPerfState_Object = MibTableColumn
oppmCPerfState = _OppmCPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 8, 2, 1, 4),
    _OppmCPerfState_Type()
)
oppmCPerfState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmCPerfState.setStatus("mandatory")
_OppmCPerfStatus_Type = CardStatus
_OppmCPerfStatus_Object = MibTableColumn
oppmCPerfStatus = _OppmCPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 8, 2, 1, 5),
    _OppmCPerfStatus_Type()
)
oppmCPerfStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmCPerfStatus.setStatus("mandatory")
_OppmCAvailTime_Type = Counter32
_OppmCAvailTime_Object = MibTableColumn
oppmCAvailTime = _OppmCAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 8, 2, 1, 6),
    _OppmCAvailTime_Type()
)
oppmCAvailTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmCAvailTime.setStatus("mandatory")
_OppmCErrFreeSecs_Type = Counter32
_OppmCErrFreeSecs_Object = MibTableColumn
oppmCErrFreeSecs = _OppmCErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 8, 2, 1, 7),
    _OppmCErrFreeSecs_Type()
)
oppmCErrFreeSecs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmCErrFreeSecs.setStatus("mandatory")
_OppmCCounterFlag_Type = FlagType
_OppmCCounterFlag_Object = MibScalar
oppmCCounterFlag = _OppmCCounterFlag_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 8, 3),
    _OppmCCounterFlag_Type()
)
oppmCCounterFlag.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    oppmCCounterFlag.setStatus("mandatory")
_McmCond_ObjectIdentity = ObjectIdentity
mcmCond = _McmCond_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9)
)
_McmCNumEvents_Type = Counter32
_McmCNumEvents_Object = MibScalar
mcmCNumEvents = _McmCNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 1),
    _McmCNumEvents_Type()
)
mcmCNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCNumEvents.setStatus("mandatory")
_McmCCntrTable_Object = MibTable
mcmCCntrTable = _McmCCntrTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2)
)
if mibBuilder.loadTexts:
    mcmCCntrTable.setStatus("mandatory")
_McmCCntrEntry_Object = MibTableRow
mcmCCntrEntry = _McmCCntrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1)
)
mcmCCntrEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmCCntrLocation"),
    (0, "LUXN-MIB", "mcmCCntrShelf"),
    (0, "LUXN-MIB", "mcmCCntrSlot"),
    (0, "LUXN-MIB", "mcmCCntrType"),
)
if mibBuilder.loadTexts:
    mcmCCntrEntry.setStatus("mandatory")
_McmCCntrLocation_Type = CardLocation
_McmCCntrLocation_Object = MibTableColumn
mcmCCntrLocation = _McmCCntrLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 1),
    _McmCCntrLocation_Type()
)
mcmCCntrLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCCntrLocation.setStatus("mandatory")
_McmCCntrShelf_Type = CardShelf
_McmCCntrShelf_Object = MibTableColumn
mcmCCntrShelf = _McmCCntrShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 2),
    _McmCCntrShelf_Type()
)
mcmCCntrShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCCntrShelf.setStatus("mandatory")
_McmCCntrSlot_Type = CardSlot
_McmCCntrSlot_Object = MibTableColumn
mcmCCntrSlot = _McmCCntrSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 3),
    _McmCCntrSlot_Type()
)
mcmCCntrSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCCntrSlot.setStatus("mandatory")


class _McmCCntrType_Type(Integer32):
    """Custom type mcmCCntrType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("iwm", 2),
          ("spi", 1))
    )


_McmCCntrType_Type.__name__ = "Integer32"
_McmCCntrType_Object = MibTableColumn
mcmCCntrType = _McmCCntrType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 4),
    _McmCCntrType_Type()
)
mcmCCntrType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCCntrType.setStatus("mandatory")
_McmCCounterFlag_Type = FlagType
_McmCCounterFlag_Object = MibTableColumn
mcmCCounterFlag = _McmCCounterFlag_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 5),
    _McmCCounterFlag_Type()
)
mcmCCounterFlag.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCCounterFlag.setStatus("mandatory")
_McmCTotPktSent_Type = Counter32
_McmCTotPktSent_Object = MibTableColumn
mcmCTotPktSent = _McmCTotPktSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 6),
    _McmCTotPktSent_Type()
)
mcmCTotPktSent.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCTotPktSent.setStatus("mandatory")
_McmCTotPktRcvd_Type = Counter32
_McmCTotPktRcvd_Object = MibTableColumn
mcmCTotPktRcvd = _McmCTotPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 7),
    _McmCTotPktRcvd_Type()
)
mcmCTotPktRcvd.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCTotPktRcvd.setStatus("mandatory")
_McmCBadPktRcvd_Type = Counter32
_McmCBadPktRcvd_Object = MibTableColumn
mcmCBadPktRcvd = _McmCBadPktRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 8),
    _McmCBadPktRcvd_Type()
)
mcmCBadPktRcvd.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCBadPktRcvd.setStatus("mandatory")
_McmCTotBadTrans_Type = Counter32
_McmCTotBadTrans_Object = MibTableColumn
mcmCTotBadTrans = _McmCTotBadTrans_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 9),
    _McmCTotBadTrans_Type()
)
mcmCTotBadTrans.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCTotBadTrans.setStatus("mandatory")
_McmCBytesSent_Type = Counter32
_McmCBytesSent_Object = MibTableColumn
mcmCBytesSent = _McmCBytesSent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 10),
    _McmCBytesSent_Type()
)
mcmCBytesSent.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCBytesSent.setStatus("mandatory")
_McmCBytesRcvd_Type = Counter32
_McmCBytesRcvd_Object = MibTableColumn
mcmCBytesRcvd = _McmCBytesRcvd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 11),
    _McmCBytesRcvd_Type()
)
mcmCBytesRcvd.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCBytesRcvd.setStatus("mandatory")
_McmCMsgsDlvrd_Type = Counter32
_McmCMsgsDlvrd_Object = MibTableColumn
mcmCMsgsDlvrd = _McmCMsgsDlvrd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 12),
    _McmCMsgsDlvrd_Type()
)
mcmCMsgsDlvrd.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCMsgsDlvrd.setStatus("mandatory")
_McmCBufAllocFail_Type = Counter32
_McmCBufAllocFail_Object = MibTableColumn
mcmCBufAllocFail = _McmCBufAllocFail_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 13),
    _McmCBufAllocFail_Type()
)
mcmCBufAllocFail.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCBufAllocFail.setStatus("mandatory")
_McmCEcbAllocFail_Type = Counter32
_McmCEcbAllocFail_Object = MibTableColumn
mcmCEcbAllocFail = _McmCEcbAllocFail_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 14),
    _McmCEcbAllocFail_Type()
)
mcmCEcbAllocFail.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCEcbAllocFail.setStatus("mandatory")
_McmCClearCntrs_Type = ResetType
_McmCClearCntrs_Object = MibTableColumn
mcmCClearCntrs = _McmCClearCntrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 15),
    _McmCClearCntrs_Type()
)
mcmCClearCntrs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCClearCntrs.setStatus("mandatory")
_McmCPerfTable_Object = MibTable
mcmCPerfTable = _McmCPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3)
)
if mibBuilder.loadTexts:
    mcmCPerfTable.setStatus("mandatory")
_McmCPerfEntry_Object = MibTableRow
mcmCPerfEntry = _McmCPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1)
)
mcmCPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmCPerfLocation"),
    (0, "LUXN-MIB", "mcmCPerfShelf"),
    (0, "LUXN-MIB", "mcmCPerfSlot"),
)
if mibBuilder.loadTexts:
    mcmCPerfEntry.setStatus("mandatory")
_McmCPerfLocation_Type = CardLocation
_McmCPerfLocation_Object = MibTableColumn
mcmCPerfLocation = _McmCPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 1),
    _McmCPerfLocation_Type()
)
mcmCPerfLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCPerfLocation.setStatus("mandatory")
_McmCPerfShelf_Type = CardShelf
_McmCPerfShelf_Object = MibTableColumn
mcmCPerfShelf = _McmCPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 2),
    _McmCPerfShelf_Type()
)
mcmCPerfShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCPerfShelf.setStatus("mandatory")
_McmCPerfSlot_Type = CardSlot
_McmCPerfSlot_Object = MibTableColumn
mcmCPerfSlot = _McmCPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 3),
    _McmCPerfSlot_Type()
)
mcmCPerfSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCPerfSlot.setStatus("mandatory")
_McmCPerfState_Type = CardState
_McmCPerfState_Object = MibTableColumn
mcmCPerfState = _McmCPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 4),
    _McmCPerfState_Type()
)
mcmCPerfState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCPerfState.setStatus("mandatory")
_McmCPerfStatus_Type = CardStatus
_McmCPerfStatus_Object = MibTableColumn
mcmCPerfStatus = _McmCPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 5),
    _McmCPerfStatus_Type()
)
mcmCPerfStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCPerfStatus.setStatus("mandatory")
_McmCAvailTime_Type = Counter32
_McmCAvailTime_Object = MibTableColumn
mcmCAvailTime = _McmCAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 6),
    _McmCAvailTime_Type()
)
mcmCAvailTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCAvailTime.setStatus("mandatory")
_McmCErrFreeSecs_Type = Counter32
_McmCErrFreeSecs_Object = MibTableColumn
mcmCErrFreeSecs = _McmCErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 7),
    _McmCErrFreeSecs_Type()
)
mcmCErrFreeSecs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCErrFreeSecs.setStatus("mandatory")
_McmCBiasCurrent_Type = Integer32
_McmCBiasCurrent_Object = MibTableColumn
mcmCBiasCurrent = _McmCBiasCurrent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 8),
    _McmCBiasCurrent_Type()
)
mcmCBiasCurrent.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCBiasCurrent.setStatus("mandatory")
_McmCModulation_Type = Integer32
_McmCModulation_Object = MibTableColumn
mcmCModulation = _McmCModulation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 9),
    _McmCModulation_Type()
)
mcmCModulation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCModulation.setStatus("mandatory")
_McmCApc_Type = Integer32
_McmCApc_Object = MibTableColumn
mcmCApc = _McmCApc_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 10),
    _McmCApc_Type()
)
mcmCApc.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCApc.setStatus("mandatory")
_McmCIwmModulation_Type = Integer32
_McmCIwmModulation_Object = MibTableColumn
mcmCIwmModulation = _McmCIwmModulation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 11),
    _McmCIwmModulation_Type()
)
mcmCIwmModulation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCIwmModulation.setStatus("mandatory")
_McmCLaserOnOff_Type = FlagType
_McmCLaserOnOff_Object = MibTableColumn
mcmCLaserOnOff = _McmCLaserOnOff_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 12),
    _McmCLaserOnOff_Type()
)
mcmCLaserOnOff.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCLaserOnOff.setStatus("mandatory")
_McmCTemperature_Type = Gauge32
_McmCTemperature_Object = MibTableColumn
mcmCTemperature = _McmCTemperature_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 13),
    _McmCTemperature_Type()
)
mcmCTemperature.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCTemperature.setStatus("mandatory")
_McmCIntensity_Type = Gauge32
_McmCIntensity_Object = MibTableColumn
mcmCIntensity = _McmCIntensity_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 14),
    _McmCIntensity_Type()
)
mcmCIntensity.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCIntensity.setStatus("mandatory")
_McmCSignalStrength_Type = Gauge32
_McmCSignalStrength_Object = MibTableColumn
mcmCSignalStrength = _McmCSignalStrength_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 15),
    _McmCSignalStrength_Type()
)
mcmCSignalStrength.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCSignalStrength.setStatus("mandatory")
_McmCLossOfLight_Type = Boolean
_McmCLossOfLight_Object = MibTableColumn
mcmCLossOfLight = _McmCLossOfLight_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 16),
    _McmCLossOfLight_Type()
)
mcmCLossOfLight.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCLossOfLight.setStatus("mandatory")
_McmCSignalDetect_Type = Boolean
_McmCSignalDetect_Object = MibTableColumn
mcmCSignalDetect = _McmCSignalDetect_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 17),
    _McmCSignalDetect_Type()
)
mcmCSignalDetect.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCSignalDetect.setStatus("mandatory")


class _McmCRefClock_Type(Integer32):
    """Custom type mcmCRefClock based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("en1660", 1),
          ("en1944", 2),
          ("en1953", 3))
    )


_McmCRefClock_Type.__name__ = "Integer32"
_McmCRefClock_Object = MibTableColumn
mcmCRefClock = _McmCRefClock_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 18),
    _McmCRefClock_Type()
)
mcmCRefClock.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCRefClock.setStatus("mandatory")


class _McmCClockDiv_Type(Integer32):
    """Custom type mcmCClockDiv based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("dout-1250", 1),
          ("dout-155", 3),
          ("dout-622", 2))
    )


_McmCClockDiv_Type.__name__ = "Integer32"
_McmCClockDiv_Object = MibTableColumn
mcmCClockDiv = _McmCClockDiv_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 19),
    _McmCClockDiv_Type()
)
mcmCClockDiv.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmCClockDiv.setStatus("mandatory")
_McmPortCCntrTable_Object = MibTable
mcmPortCCntrTable = _McmPortCCntrTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4)
)
if mibBuilder.loadTexts:
    mcmPortCCntrTable.setStatus("mandatory")
_McmPortCCntrEntry_Object = MibTableRow
mcmPortCCntrEntry = _McmPortCCntrEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1)
)
mcmPortCCntrEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmPortCCntrCardLocation"),
    (0, "LUXN-MIB", "mcmPortCCntrCardShelf"),
    (0, "LUXN-MIB", "mcmPortCCntrCardSlot"),
    (0, "LUXN-MIB", "mcmPortCCntrIndex"),
)
if mibBuilder.loadTexts:
    mcmPortCCntrEntry.setStatus("mandatory")
_McmPortCCntrCardLocation_Type = CardLocation
_McmPortCCntrCardLocation_Object = MibTableColumn
mcmPortCCntrCardLocation = _McmPortCCntrCardLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 1),
    _McmPortCCntrCardLocation_Type()
)
mcmPortCCntrCardLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmPortCCntrCardLocation.setStatus("mandatory")
_McmPortCCntrCardShelf_Type = CardShelf
_McmPortCCntrCardShelf_Object = MibTableColumn
mcmPortCCntrCardShelf = _McmPortCCntrCardShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 2),
    _McmPortCCntrCardShelf_Type()
)
mcmPortCCntrCardShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmPortCCntrCardShelf.setStatus("mandatory")
_McmPortCCntrCardSlot_Type = CardSlot
_McmPortCCntrCardSlot_Object = MibTableColumn
mcmPortCCntrCardSlot = _McmPortCCntrCardSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 3),
    _McmPortCCntrCardSlot_Type()
)
mcmPortCCntrCardSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmPortCCntrCardSlot.setStatus("mandatory")
_McmPortCCntrIndex_Type = Integer32
_McmPortCCntrIndex_Object = MibTableColumn
mcmPortCCntrIndex = _McmPortCCntrIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 4),
    _McmPortCCntrIndex_Type()
)
mcmPortCCntrIndex.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmPortCCntrIndex.setStatus("mandatory")
_McmPortCCntrASs_Type = Counter32
_McmPortCCntrASs_Object = MibTableColumn
mcmPortCCntrASs = _McmPortCCntrASs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 5),
    _McmPortCCntrASs_Type()
)
mcmPortCCntrASs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmPortCCntrASs.setStatus("mandatory")
_McmPortCCntrFEs_Type = Counter32
_McmPortCCntrFEs_Object = MibTableColumn
mcmPortCCntrFEs = _McmPortCCntrFEs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 7),
    _McmPortCCntrFEs_Type()
)
mcmPortCCntrFEs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmPortCCntrFEs.setStatus("mandatory")
_McmPortCCntrCRCErrs_Type = Counter32
_McmPortCCntrCRCErrs_Object = MibTableColumn
mcmPortCCntrCRCErrs = _McmPortCCntrCRCErrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 8),
    _McmPortCCntrCRCErrs_Type()
)
mcmPortCCntrCRCErrs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmPortCCntrCRCErrs.setStatus("mandatory")
_McmPortCCntrSESs_Type = Counter32
_McmPortCCntrSESs_Object = MibTableColumn
mcmPortCCntrSESs = _McmPortCCntrSESs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 9),
    _McmPortCCntrSESs_Type()
)
mcmPortCCntrSESs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmPortCCntrSESs.setStatus("mandatory")
_McmPortCCntrSEFSs_Type = Counter32
_McmPortCCntrSEFSs_Object = MibTableColumn
mcmPortCCntrSEFSs = _McmPortCCntrSEFSs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 10),
    _McmPortCCntrSEFSs_Type()
)
mcmPortCCntrSEFSs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmPortCCntrSEFSs.setStatus("mandatory")
_McmPortCCntrUASs_Type = Counter32
_McmPortCCntrUASs_Object = MibTableColumn
mcmPortCCntrUASs = _McmPortCCntrUASs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 11),
    _McmPortCCntrUASs_Type()
)
mcmPortCCntrUASs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmPortCCntrUASs.setStatus("mandatory")
_McmPortCCntrLESs_Type = Counter32
_McmPortCCntrLESs_Object = MibTableColumn
mcmPortCCntrLESs = _McmPortCCntrLESs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 12),
    _McmPortCCntrLESs_Type()
)
mcmPortCCntrLESs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmPortCCntrLESs.setStatus("mandatory")
_McmPortCCntrBESs_Type = Counter32
_McmPortCCntrBESs_Object = MibTableColumn
mcmPortCCntrBESs = _McmPortCCntrBESs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 13),
    _McmPortCCntrBESs_Type()
)
mcmPortCCntrBESs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmPortCCntrBESs.setStatus("mandatory")
_McmPortCCntrDMs_Type = Counter32
_McmPortCCntrDMs_Object = MibTableColumn
mcmPortCCntrDMs = _McmPortCCntrDMs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 14),
    _McmPortCCntrDMs_Type()
)
mcmPortCCntrDMs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmPortCCntrDMs.setStatus("mandatory")
_McmPortCCntrLCVs_Type = Counter32
_McmPortCCntrLCVs_Object = MibTableColumn
mcmPortCCntrLCVs = _McmPortCCntrLCVs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 15),
    _McmPortCCntrLCVs_Type()
)
mcmPortCCntrLCVs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    mcmPortCCntrLCVs.setStatus("mandatory")
_FnCond_ObjectIdentity = ObjectIdentity
fnCond = _FnCond_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 10)
)
_FnCNumEvents_Type = Counter32
_FnCNumEvents_Object = MibScalar
fnCNumEvents = _FnCNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 10, 1),
    _FnCNumEvents_Type()
)
fnCNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fnCNumEvents.setStatus("mandatory")
_FnCPerfTable_Object = MibTable
fnCPerfTable = _FnCPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 10, 2)
)
if mibBuilder.loadTexts:
    fnCPerfTable.setStatus("mandatory")
_FnCPerfEntry_Object = MibTableRow
fnCPerfEntry = _FnCPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 10, 2, 1)
)
fnCPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "fnCPerfID"),
)
if mibBuilder.loadTexts:
    fnCPerfEntry.setStatus("mandatory")
_FnCPerfID_Type = Integer32
_FnCPerfID_Object = MibTableColumn
fnCPerfID = _FnCPerfID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 10, 2, 1, 1),
    _FnCPerfID_Type()
)
fnCPerfID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fnCPerfID.setStatus("mandatory")


class _FnCPerfState_Type(Integer32):
    """Custom type fnCPerfState based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("fnDegrade", 2),
          ("fnEmpty", 4),
          ("fnFailed", 3),
          ("fnOK", 1))
    )


_FnCPerfState_Type.__name__ = "Integer32"
_FnCPerfState_Object = MibTableColumn
fnCPerfState = _FnCPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 10, 2, 1, 2),
    _FnCPerfState_Type()
)
fnCPerfState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fnCPerfState.setStatus("mandatory")
_FnCPerfStatus_Type = CardStatus
_FnCPerfStatus_Object = MibTableColumn
fnCPerfStatus = _FnCPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 10, 2, 1, 3),
    _FnCPerfStatus_Type()
)
fnCPerfStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    fnCPerfStatus.setStatus("mandatory")
_RpsmCond_ObjectIdentity = ObjectIdentity
rpsmCond = _RpsmCond_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 12)
)
_RpsmCNumEvents_Type = Counter32
_RpsmCNumEvents_Object = MibScalar
rpsmCNumEvents = _RpsmCNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 12, 1),
    _RpsmCNumEvents_Type()
)
rpsmCNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmCNumEvents.setStatus("mandatory")
_RpsmCPerfTable_Object = MibTable
rpsmCPerfTable = _RpsmCPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 12, 2)
)
if mibBuilder.loadTexts:
    rpsmCPerfTable.setStatus("mandatory")
_RpsmCPerfEntry_Object = MibTableRow
rpsmCPerfEntry = _RpsmCPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 12, 2, 1)
)
rpsmCPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "rpsmCPerfLocation"),
    (0, "LUXN-MIB", "rpsmCPerfShelf"),
    (0, "LUXN-MIB", "rpsmCPerfSlot"),
)
if mibBuilder.loadTexts:
    rpsmCPerfEntry.setStatus("mandatory")
_RpsmCPerfLocation_Type = CardLocation
_RpsmCPerfLocation_Object = MibTableColumn
rpsmCPerfLocation = _RpsmCPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 12, 2, 1, 1),
    _RpsmCPerfLocation_Type()
)
rpsmCPerfLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmCPerfLocation.setStatus("mandatory")
_RpsmCPerfShelf_Type = CardShelf
_RpsmCPerfShelf_Object = MibTableColumn
rpsmCPerfShelf = _RpsmCPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 12, 2, 1, 2),
    _RpsmCPerfShelf_Type()
)
rpsmCPerfShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmCPerfShelf.setStatus("mandatory")
_RpsmCPerfSlot_Type = CardSlot
_RpsmCPerfSlot_Object = MibTableColumn
rpsmCPerfSlot = _RpsmCPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 12, 2, 1, 3),
    _RpsmCPerfSlot_Type()
)
rpsmCPerfSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmCPerfSlot.setStatus("mandatory")
_RpsmCPerfState_Type = CardState
_RpsmCPerfState_Object = MibTableColumn
rpsmCPerfState = _RpsmCPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 12, 2, 1, 4),
    _RpsmCPerfState_Type()
)
rpsmCPerfState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmCPerfState.setStatus("mandatory")
_RpsmCPerfStatus_Type = CardStatus
_RpsmCPerfStatus_Object = MibTableColumn
rpsmCPerfStatus = _RpsmCPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 12, 2, 1, 5),
    _RpsmCPerfStatus_Type()
)
rpsmCPerfStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmCPerfStatus.setStatus("mandatory")
_RpsmCAvailTime_Type = Counter32
_RpsmCAvailTime_Object = MibTableColumn
rpsmCAvailTime = _RpsmCAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 12, 2, 1, 6),
    _RpsmCAvailTime_Type()
)
rpsmCAvailTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmCAvailTime.setStatus("mandatory")
_RpsmCErrFreeSecs_Type = Counter32
_RpsmCErrFreeSecs_Object = MibTableColumn
rpsmCErrFreeSecs = _RpsmCErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 12, 2, 1, 7),
    _RpsmCErrFreeSecs_Type()
)
rpsmCErrFreeSecs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmCErrFreeSecs.setStatus("mandatory")
_RpsmCCounterFlag_Type = FlagType
_RpsmCCounterFlag_Object = MibScalar
rpsmCCounterFlag = _RpsmCCounterFlag_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 12, 3),
    _RpsmCCounterFlag_Type()
)
rpsmCCounterFlag.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rpsmCCounterFlag.setStatus("mandatory")
_RsdmCond_ObjectIdentity = ObjectIdentity
rsdmCond = _RsdmCond_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 13)
)
_RsdmCNumEvents_Type = Counter32
_RsdmCNumEvents_Object = MibScalar
rsdmCNumEvents = _RsdmCNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 13, 1),
    _RsdmCNumEvents_Type()
)
rsdmCNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmCNumEvents.setStatus("mandatory")
_RsdmCPerfTable_Object = MibTable
rsdmCPerfTable = _RsdmCPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 13, 2)
)
if mibBuilder.loadTexts:
    rsdmCPerfTable.setStatus("mandatory")
_RsdmCPerfEntry_Object = MibTableRow
rsdmCPerfEntry = _RsdmCPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 13, 2, 1)
)
rsdmCPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "rsdmCPerfLocation"),
    (0, "LUXN-MIB", "rsdmCPerfShelf"),
    (0, "LUXN-MIB", "rsdmCPerfSlot"),
)
if mibBuilder.loadTexts:
    rsdmCPerfEntry.setStatus("mandatory")
_RsdmCPerfLocation_Type = CardLocation
_RsdmCPerfLocation_Object = MibTableColumn
rsdmCPerfLocation = _RsdmCPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 13, 2, 1, 1),
    _RsdmCPerfLocation_Type()
)
rsdmCPerfLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmCPerfLocation.setStatus("mandatory")
_RsdmCPerfShelf_Type = CardShelf
_RsdmCPerfShelf_Object = MibTableColumn
rsdmCPerfShelf = _RsdmCPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 13, 2, 1, 2),
    _RsdmCPerfShelf_Type()
)
rsdmCPerfShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmCPerfShelf.setStatus("mandatory")
_RsdmCPerfSlot_Type = CardSlot
_RsdmCPerfSlot_Object = MibTableColumn
rsdmCPerfSlot = _RsdmCPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 13, 2, 1, 3),
    _RsdmCPerfSlot_Type()
)
rsdmCPerfSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmCPerfSlot.setStatus("mandatory")
_RsdmCPerfState_Type = CardState
_RsdmCPerfState_Object = MibTableColumn
rsdmCPerfState = _RsdmCPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 13, 2, 1, 4),
    _RsdmCPerfState_Type()
)
rsdmCPerfState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmCPerfState.setStatus("mandatory")
_RsdmCPerfStatus_Type = CardStatus
_RsdmCPerfStatus_Object = MibTableColumn
rsdmCPerfStatus = _RsdmCPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 13, 2, 1, 5),
    _RsdmCPerfStatus_Type()
)
rsdmCPerfStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmCPerfStatus.setStatus("mandatory")
_RsdmCAvailTime_Type = Counter32
_RsdmCAvailTime_Object = MibTableColumn
rsdmCAvailTime = _RsdmCAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 13, 2, 1, 6),
    _RsdmCAvailTime_Type()
)
rsdmCAvailTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmCAvailTime.setStatus("mandatory")
_RsdmCErrFreeSecs_Type = Counter32
_RsdmCErrFreeSecs_Object = MibTableColumn
rsdmCErrFreeSecs = _RsdmCErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 13, 2, 1, 7),
    _RsdmCErrFreeSecs_Type()
)
rsdmCErrFreeSecs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmCErrFreeSecs.setStatus("mandatory")
_RsdmCCounterFlag_Type = FlagType
_RsdmCCounterFlag_Object = MibScalar
rsdmCCounterFlag = _RsdmCCounterFlag_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 13, 3),
    _RsdmCCounterFlag_Type()
)
rsdmCCounterFlag.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsdmCCounterFlag.setStatus("mandatory")
_RtdmCond_ObjectIdentity = ObjectIdentity
rtdmCond = _RtdmCond_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 14)
)
_RtdmCNumEvents_Type = Counter32
_RtdmCNumEvents_Object = MibScalar
rtdmCNumEvents = _RtdmCNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 14, 1),
    _RtdmCNumEvents_Type()
)
rtdmCNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmCNumEvents.setStatus("mandatory")
_RtdmCPerfTable_Object = MibTable
rtdmCPerfTable = _RtdmCPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 14, 2)
)
if mibBuilder.loadTexts:
    rtdmCPerfTable.setStatus("mandatory")
_RtdmCPerfEntry_Object = MibTableRow
rtdmCPerfEntry = _RtdmCPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 14, 2, 1)
)
rtdmCPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "rtdmCPerfLocation"),
    (0, "LUXN-MIB", "rtdmCPerfShelf"),
    (0, "LUXN-MIB", "rtdmCPerfSlot"),
)
if mibBuilder.loadTexts:
    rtdmCPerfEntry.setStatus("mandatory")
_RtdmCPerfLocation_Type = CardLocation
_RtdmCPerfLocation_Object = MibTableColumn
rtdmCPerfLocation = _RtdmCPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 14, 2, 1, 1),
    _RtdmCPerfLocation_Type()
)
rtdmCPerfLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmCPerfLocation.setStatus("mandatory")
_RtdmCPerfShelf_Type = CardShelf
_RtdmCPerfShelf_Object = MibTableColumn
rtdmCPerfShelf = _RtdmCPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 14, 2, 1, 2),
    _RtdmCPerfShelf_Type()
)
rtdmCPerfShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmCPerfShelf.setStatus("mandatory")
_RtdmCPerfSlot_Type = CardSlot
_RtdmCPerfSlot_Object = MibTableColumn
rtdmCPerfSlot = _RtdmCPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 14, 2, 1, 3),
    _RtdmCPerfSlot_Type()
)
rtdmCPerfSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmCPerfSlot.setStatus("mandatory")
_RtdmCPerfState_Type = CardState
_RtdmCPerfState_Object = MibTableColumn
rtdmCPerfState = _RtdmCPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 14, 2, 1, 4),
    _RtdmCPerfState_Type()
)
rtdmCPerfState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmCPerfState.setStatus("mandatory")
_RtdmCPerfStatus_Type = CardStatus
_RtdmCPerfStatus_Object = MibTableColumn
rtdmCPerfStatus = _RtdmCPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 14, 2, 1, 5),
    _RtdmCPerfStatus_Type()
)
rtdmCPerfStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmCPerfStatus.setStatus("mandatory")
_RtdmCAvailTime_Type = Counter32
_RtdmCAvailTime_Object = MibTableColumn
rtdmCAvailTime = _RtdmCAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 14, 2, 1, 6),
    _RtdmCAvailTime_Type()
)
rtdmCAvailTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmCAvailTime.setStatus("mandatory")
_RtdmCErrFreeSecs_Type = Counter32
_RtdmCErrFreeSecs_Object = MibTableColumn
rtdmCErrFreeSecs = _RtdmCErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 14, 2, 1, 7),
    _RtdmCErrFreeSecs_Type()
)
rtdmCErrFreeSecs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmCErrFreeSecs.setStatus("mandatory")
_RtdmCCounterFlag_Type = FlagType
_RtdmCCounterFlag_Object = MibScalar
rtdmCCounterFlag = _RtdmCCounterFlag_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 14, 3),
    _RtdmCCounterFlag_Type()
)
rtdmCCounterFlag.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rtdmCCounterFlag.setStatus("mandatory")
_OsamCond_ObjectIdentity = ObjectIdentity
osamCond = _OsamCond_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 15)
)
_OsamCNumEvents_Type = Counter32
_OsamCNumEvents_Object = MibScalar
osamCNumEvents = _OsamCNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 15, 1),
    _OsamCNumEvents_Type()
)
osamCNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    osamCNumEvents.setStatus("mandatory")
_OsamCPerfTable_Object = MibTable
osamCPerfTable = _OsamCPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 15, 2)
)
if mibBuilder.loadTexts:
    osamCPerfTable.setStatus("mandatory")
_OsamCPerfEntry_Object = MibTableRow
osamCPerfEntry = _OsamCPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 15, 2, 1)
)
osamCPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "osamCPerfLocation"),
    (0, "LUXN-MIB", "osamCPerfShelf"),
    (0, "LUXN-MIB", "osamCPerfSlot"),
)
if mibBuilder.loadTexts:
    osamCPerfEntry.setStatus("mandatory")
_OsamCPerfLocation_Type = CardLocation
_OsamCPerfLocation_Object = MibTableColumn
osamCPerfLocation = _OsamCPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 15, 2, 1, 1),
    _OsamCPerfLocation_Type()
)
osamCPerfLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    osamCPerfLocation.setStatus("mandatory")
_OsamCPerfShelf_Type = CardShelf
_OsamCPerfShelf_Object = MibTableColumn
osamCPerfShelf = _OsamCPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 15, 2, 1, 2),
    _OsamCPerfShelf_Type()
)
osamCPerfShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    osamCPerfShelf.setStatus("mandatory")


class _OsamCPerfSlot_Type(Integer32):
    """Custom type osamCPerfSlot based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 16),
    )


_OsamCPerfSlot_Type.__name__ = "Integer32"
_OsamCPerfSlot_Object = MibTableColumn
osamCPerfSlot = _OsamCPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 15, 2, 1, 3),
    _OsamCPerfSlot_Type()
)
osamCPerfSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    osamCPerfSlot.setStatus("mandatory")
_OsamCPerfState_Type = CardState
_OsamCPerfState_Object = MibTableColumn
osamCPerfState = _OsamCPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 15, 2, 1, 4),
    _OsamCPerfState_Type()
)
osamCPerfState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    osamCPerfState.setStatus("mandatory")
_OsamCPerfStatus_Type = CardStatus
_OsamCPerfStatus_Object = MibTableColumn
osamCPerfStatus = _OsamCPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 15, 2, 1, 5),
    _OsamCPerfStatus_Type()
)
osamCPerfStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    osamCPerfStatus.setStatus("mandatory")
_OsamCPerfAvailTime_Type = Counter32
_OsamCPerfAvailTime_Object = MibTableColumn
osamCPerfAvailTime = _OsamCPerfAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 15, 2, 1, 6),
    _OsamCPerfAvailTime_Type()
)
osamCPerfAvailTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    osamCPerfAvailTime.setStatus("mandatory")
_OsamCPerfErrFreeSecs_Type = Counter32
_OsamCPerfErrFreeSecs_Object = MibTableColumn
osamCPerfErrFreeSecs = _OsamCPerfErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 15, 2, 1, 7),
    _OsamCPerfErrFreeSecs_Type()
)
osamCPerfErrFreeSecs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    osamCPerfErrFreeSecs.setStatus("mandatory")
_OsamCPerfCounterFlag_Type = FlagType
_OsamCPerfCounterFlag_Object = MibScalar
osamCPerfCounterFlag = _OsamCPerfCounterFlag_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 15, 3),
    _OsamCPerfCounterFlag_Type()
)
osamCPerfCounterFlag.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    osamCPerfCounterFlag.setStatus("mandatory")
_RsmCond_ObjectIdentity = ObjectIdentity
rsmCond = _RsmCond_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 16)
)
_RsmCNumEvents_Type = Counter32
_RsmCNumEvents_Object = MibScalar
rsmCNumEvents = _RsmCNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 16, 1),
    _RsmCNumEvents_Type()
)
rsmCNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsmCNumEvents.setStatus("mandatory")
_RsmCPerfTable_Object = MibTable
rsmCPerfTable = _RsmCPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 16, 2)
)
if mibBuilder.loadTexts:
    rsmCPerfTable.setStatus("mandatory")
_RsmCPerfEntry_Object = MibTableRow
rsmCPerfEntry = _RsmCPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 16, 2, 1)
)
rsmCPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "rsmCPerfLocation"),
    (0, "LUXN-MIB", "rsmCPerfShelf"),
    (0, "LUXN-MIB", "rsmCPerfSlot"),
)
if mibBuilder.loadTexts:
    rsmCPerfEntry.setStatus("mandatory")
_RsmCPerfLocation_Type = CardLocation
_RsmCPerfLocation_Object = MibTableColumn
rsmCPerfLocation = _RsmCPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 16, 2, 1, 1),
    _RsmCPerfLocation_Type()
)
rsmCPerfLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsmCPerfLocation.setStatus("mandatory")
_RsmCPerfShelf_Type = CardShelf
_RsmCPerfShelf_Object = MibTableColumn
rsmCPerfShelf = _RsmCPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 16, 2, 1, 2),
    _RsmCPerfShelf_Type()
)
rsmCPerfShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsmCPerfShelf.setStatus("mandatory")
_RsmCPerfSlot_Type = CardSlot
_RsmCPerfSlot_Object = MibTableColumn
rsmCPerfSlot = _RsmCPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 16, 2, 1, 3),
    _RsmCPerfSlot_Type()
)
rsmCPerfSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsmCPerfSlot.setStatus("mandatory")
_RsmCPerfState_Type = CardState
_RsmCPerfState_Object = MibTableColumn
rsmCPerfState = _RsmCPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 16, 2, 1, 4),
    _RsmCPerfState_Type()
)
rsmCPerfState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsmCPerfState.setStatus("mandatory")
_RsmCPerfStatus_Type = CardStatus
_RsmCPerfStatus_Object = MibTableColumn
rsmCPerfStatus = _RsmCPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 16, 2, 1, 5),
    _RsmCPerfStatus_Type()
)
rsmCPerfStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsmCPerfStatus.setStatus("mandatory")
_RsmCAvailTime_Type = Counter32
_RsmCAvailTime_Object = MibTableColumn
rsmCAvailTime = _RsmCAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 16, 2, 1, 6),
    _RsmCAvailTime_Type()
)
rsmCAvailTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsmCAvailTime.setStatus("mandatory")
_RsmCErrFreeSecs_Type = Counter32
_RsmCErrFreeSecs_Object = MibTableColumn
rsmCErrFreeSecs = _RsmCErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 16, 2, 1, 7),
    _RsmCErrFreeSecs_Type()
)
rsmCErrFreeSecs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsmCErrFreeSecs.setStatus("mandatory")
_RsmCCounterFlag_Type = FlagType
_RsmCCounterFlag_Object = MibScalar
rsmCCounterFlag = _RsmCCounterFlag_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 16, 3),
    _RsmCCounterFlag_Type()
)
rsmCCounterFlag.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    rsmCCounterFlag.setStatus("mandatory")
_UpsmCond_ObjectIdentity = ObjectIdentity
upsmCond = _UpsmCond_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 17)
)
_UpsmCNumEvents_Type = Counter32
_UpsmCNumEvents_Object = MibScalar
upsmCNumEvents = _UpsmCNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 17, 1),
    _UpsmCNumEvents_Type()
)
upsmCNumEvents.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    upsmCNumEvents.setStatus("mandatory")
_UpsmCPerfTable_Object = MibTable
upsmCPerfTable = _UpsmCPerfTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 17, 2)
)
if mibBuilder.loadTexts:
    upsmCPerfTable.setStatus("mandatory")
_UpsmCPerfEntry_Object = MibTableRow
upsmCPerfEntry = _UpsmCPerfEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 17, 2, 1)
)
upsmCPerfEntry.setIndexNames(
    (0, "LUXN-MIB", "upsmCPerfLocation"),
    (0, "LUXN-MIB", "upsmCPerfShelf"),
    (0, "LUXN-MIB", "upsmCPerfSlot"),
)
if mibBuilder.loadTexts:
    upsmCPerfEntry.setStatus("mandatory")
_UpsmCPerfLocation_Type = CardLocation
_UpsmCPerfLocation_Object = MibTableColumn
upsmCPerfLocation = _UpsmCPerfLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 17, 2, 1, 1),
    _UpsmCPerfLocation_Type()
)
upsmCPerfLocation.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    upsmCPerfLocation.setStatus("mandatory")
_UpsmCPerfShelf_Type = CardShelf
_UpsmCPerfShelf_Object = MibTableColumn
upsmCPerfShelf = _UpsmCPerfShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 17, 2, 1, 2),
    _UpsmCPerfShelf_Type()
)
upsmCPerfShelf.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    upsmCPerfShelf.setStatus("mandatory")
_UpsmCPerfSlot_Type = CardSlot
_UpsmCPerfSlot_Object = MibTableColumn
upsmCPerfSlot = _UpsmCPerfSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 17, 2, 1, 3),
    _UpsmCPerfSlot_Type()
)
upsmCPerfSlot.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    upsmCPerfSlot.setStatus("mandatory")
_UpsmCPerfState_Type = CardState
_UpsmCPerfState_Object = MibTableColumn
upsmCPerfState = _UpsmCPerfState_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 17, 2, 1, 4),
    _UpsmCPerfState_Type()
)
upsmCPerfState.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    upsmCPerfState.setStatus("mandatory")
_UpsmCPerfStatus_Type = CardStatus
_UpsmCPerfStatus_Object = MibTableColumn
upsmCPerfStatus = _UpsmCPerfStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 17, 2, 1, 5),
    _UpsmCPerfStatus_Type()
)
upsmCPerfStatus.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    upsmCPerfStatus.setStatus("mandatory")
_UpsmCAvailTime_Type = Counter32
_UpsmCAvailTime_Object = MibTableColumn
upsmCAvailTime = _UpsmCAvailTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 17, 2, 1, 6),
    _UpsmCAvailTime_Type()
)
upsmCAvailTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    upsmCAvailTime.setStatus("mandatory")
_UpsmCErrFreeSecs_Type = Counter32
_UpsmCErrFreeSecs_Object = MibTableColumn
upsmCErrFreeSecs = _UpsmCErrFreeSecs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 17, 2, 1, 7),
    _UpsmCErrFreeSecs_Type()
)
upsmCErrFreeSecs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    upsmCErrFreeSecs.setStatus("mandatory")
_UpsmCCounterFlag_Type = FlagType
_UpsmCCounterFlag_Object = MibScalar
upsmCCounterFlag = _UpsmCCounterFlag_Object(
    (1, 3, 6, 1, 4, 1, 4253, 2, 3, 17, 3),
    _UpsmCCounterFlag_Type()
)
upsmCCounterFlag.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    upsmCCounterFlag.setStatus("mandatory")
_Faults_ObjectIdentity = ObjectIdentity
faults = _Faults_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 3)
)
_EventLog_ObjectIdentity = ObjectIdentity
eventLog = _EventLog_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1)
)
_EveTrapThreshold_Type = Integer32
_EveTrapThreshold_Object = MibScalar
eveTrapThreshold = _EveTrapThreshold_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 1),
    _EveTrapThreshold_Type()
)
eveTrapThreshold.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    eveTrapThreshold.setStatus("mandatory")
_EveNumEvents_Type = EventBuffer
_EveNumEvents_Object = MibScalar
eveNumEvents = _EveNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 2),
    _EveNumEvents_Type()
)
eveNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eveNumEvents.setStatus("mandatory")
_EveLogTable_Object = MibTable
eveLogTable = _EveLogTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 3)
)
if mibBuilder.loadTexts:
    eveLogTable.setStatus("mandatory")
_EveLogEntry_Object = MibTableRow
eveLogEntry = _EveLogEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 3, 1)
)
eveLogEntry.setIndexNames(
    (0, "LUXN-MIB", "eveDateTime"),
    (0, "LUXN-MIB", "eveSeqNum"),
)
if mibBuilder.loadTexts:
    eveLogEntry.setStatus("mandatory")
_EveDateTime_Type = DateAndTime
_EveDateTime_Object = MibTableColumn
eveDateTime = _EveDateTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 3, 1, 1),
    _EveDateTime_Type()
)
eveDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eveDateTime.setStatus("mandatory")


class _EveEventId_Type(Integer32):
    """Custom type eveEventId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9999),
    )


_EveEventId_Type.__name__ = "Integer32"
_EveEventId_Object = MibTableColumn
eveEventId = _EveEventId_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 3, 1, 2),
    _EveEventId_Type()
)
eveEventId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eveEventId.setStatus("mandatory")
_EveSeverity_Type = TrapStatus
_EveSeverity_Object = MibTableColumn
eveSeverity = _EveSeverity_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 3, 1, 3),
    _EveSeverity_Type()
)
eveSeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eveSeverity.setStatus("mandatory")
_EveSysStatus_Type = CardStatus
_EveSysStatus_Object = MibTableColumn
eveSysStatus = _EveSysStatus_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 3, 1, 4),
    _EveSysStatus_Type()
)
eveSysStatus.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eveSysStatus.setStatus("mandatory")


class _EveSource_Type(DisplayString):
    """Custom type eveSource based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 152),
    )


_EveSource_Type.__name__ = "DisplayString"
_EveSource_Object = MibTableColumn
eveSource = _EveSource_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 3, 1, 5),
    _EveSource_Type()
)
eveSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eveSource.setStatus("mandatory")


class _EveDescr_Type(DisplayString):
    """Custom type eveDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_EveDescr_Type.__name__ = "DisplayString"
_EveDescr_Object = MibTableColumn
eveDescr = _EveDescr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 3, 1, 6),
    _EveDescr_Type()
)
eveDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eveDescr.setStatus("mandatory")
_EveTrap_Type = Boolean
_EveTrap_Object = MibTableColumn
eveTrap = _EveTrap_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 3, 1, 7),
    _EveTrap_Type()
)
eveTrap.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eveTrap.setStatus("mandatory")


class _EveSeqNum_Type(Integer32):
    """Custom type eveSeqNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9999),
    )


_EveSeqNum_Type.__name__ = "Integer32"
_EveSeqNum_Object = MibTableColumn
eveSeqNum = _EveSeqNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 3, 1, 8),
    _EveSeqNum_Type()
)
eveSeqNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eveSeqNum.setStatus("mandatory")
_EveDeleteLog_Type = ResetType
_EveDeleteLog_Object = MibScalar
eveDeleteLog = _EveDeleteLog_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 4),
    _EveDeleteLog_Type()
)
eveDeleteLog.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    eveDeleteLog.setStatus("mandatory")
_EveLastEntryDateTime_Type = DateAndTime
_EveLastEntryDateTime_Object = MibScalar
eveLastEntryDateTime = _EveLastEntryDateTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 5),
    _EveLastEntryDateTime_Type()
)
eveLastEntryDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eveLastEntryDateTime.setStatus("mandatory")
_EveHundredthEntryDateTime_Type = DateAndTime
_EveHundredthEntryDateTime_Object = MibScalar
eveHundredthEntryDateTime = _EveHundredthEntryDateTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 6),
    _EveHundredthEntryDateTime_Type()
)
eveHundredthEntryDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eveHundredthEntryDateTime.setStatus("mandatory")
_EveTwoHundredthEntryDateTime_Type = DateAndTime
_EveTwoHundredthEntryDateTime_Object = MibScalar
eveTwoHundredthEntryDateTime = _EveTwoHundredthEntryDateTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 7),
    _EveTwoHundredthEntryDateTime_Type()
)
eveTwoHundredthEntryDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eveTwoHundredthEntryDateTime.setStatus("mandatory")
_EveThreeHundredthEntryDateTime_Type = DateAndTime
_EveThreeHundredthEntryDateTime_Object = MibScalar
eveThreeHundredthEntryDateTime = _EveThreeHundredthEntryDateTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 8),
    _EveThreeHundredthEntryDateTime_Type()
)
eveThreeHundredthEntryDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eveThreeHundredthEntryDateTime.setStatus("mandatory")
_EveFourHundredthEntryDateTime_Type = DateAndTime
_EveFourHundredthEntryDateTime_Object = MibScalar
eveFourHundredthEntryDateTime = _EveFourHundredthEntryDateTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 9),
    _EveFourHundredthEntryDateTime_Type()
)
eveFourHundredthEntryDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eveFourHundredthEntryDateTime.setStatus("mandatory")
_EveFiveHundredthEntryDateTime_Type = DateAndTime
_EveFiveHundredthEntryDateTime_Object = MibScalar
eveFiveHundredthEntryDateTime = _EveFiveHundredthEntryDateTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 10),
    _EveFiveHundredthEntryDateTime_Type()
)
eveFiveHundredthEntryDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eveFiveHundredthEntryDateTime.setStatus("mandatory")
_EveSixHundredthEntryDateTime_Type = DateAndTime
_EveSixHundredthEntryDateTime_Object = MibScalar
eveSixHundredthEntryDateTime = _EveSixHundredthEntryDateTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 11),
    _EveSixHundredthEntryDateTime_Type()
)
eveSixHundredthEntryDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eveSixHundredthEntryDateTime.setStatus("mandatory")
_EveSevenHundredthEntryDateTime_Type = DateAndTime
_EveSevenHundredthEntryDateTime_Object = MibScalar
eveSevenHundredthEntryDateTime = _EveSevenHundredthEntryDateTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 12),
    _EveSevenHundredthEntryDateTime_Type()
)
eveSevenHundredthEntryDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    eveSevenHundredthEntryDateTime.setStatus("mandatory")
_EveEightHundredthEntryDateTime_Type = DateAndTime
_EveEightHundredthEntryDateTime_Object = MibScalar
eveEightHundredthEntryDateTime = _EveEightHundredthEntryDateTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 13),
    _EveEightHundredthEntryDateTime_Type()
)
eveEightHundredthEntryDateTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    eveEightHundredthEntryDateTime.setStatus("mandatory")
_EveNineHundredthEntryDateTime_Type = DateAndTime
_EveNineHundredthEntryDateTime_Object = MibScalar
eveNineHundredthEntryDateTime = _EveNineHundredthEntryDateTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 1, 14),
    _EveNineHundredthEntryDateTime_Type()
)
eveNineHundredthEntryDateTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    eveNineHundredthEntryDateTime.setStatus("mandatory")
_UserLog_ObjectIdentity = ObjectIdentity
userLog = _UserLog_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 3, 2)
)
_UsrNumLogs_Type = UserBuffer
_UsrNumLogs_Object = MibScalar
usrNumLogs = _UsrNumLogs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 2, 1),
    _UsrNumLogs_Type()
)
usrNumLogs.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    usrNumLogs.setStatus("mandatory")
_UsrLogTable_Object = MibTable
usrLogTable = _UsrLogTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 2, 2)
)
if mibBuilder.loadTexts:
    usrLogTable.setStatus("mandatory")
_UsrLogEntry_Object = MibTableRow
usrLogEntry = _UsrLogEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 2, 2, 1)
)
usrLogEntry.setIndexNames(
    (0, "LUXN-MIB", "usrDateTime"),
    (0, "LUXN-MIB", "usrLogonId"),
)
if mibBuilder.loadTexts:
    usrLogEntry.setStatus("mandatory")
_UsrDateTime_Type = DateAndTime
_UsrDateTime_Object = MibTableColumn
usrDateTime = _UsrDateTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 2, 2, 1, 1),
    _UsrDateTime_Type()
)
usrDateTime.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    usrDateTime.setStatus("mandatory")
_UsrLogonId_Type = LogonID
_UsrLogonId_Object = MibTableColumn
usrLogonId = _UsrLogonId_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 2, 2, 1, 2),
    _UsrLogonId_Type()
)
usrLogonId.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    usrLogonId.setStatus("mandatory")


class _UsrTarget_Type(DisplayString):
    """Custom type usrTarget based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 30),
    )


_UsrTarget_Type.__name__ = "DisplayString"
_UsrTarget_Object = MibTableColumn
usrTarget = _UsrTarget_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 2, 2, 1, 3),
    _UsrTarget_Type()
)
usrTarget.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    usrTarget.setStatus("mandatory")


class _UsrLogDescr_Type(DisplayString):
    """Custom type usrLogDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_UsrLogDescr_Type.__name__ = "DisplayString"
_UsrLogDescr_Object = MibTableColumn
usrLogDescr = _UsrLogDescr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 2, 2, 1, 4),
    _UsrLogDescr_Type()
)
usrLogDescr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    usrLogDescr.setStatus("mandatory")
_UsrTrap_Type = Boolean
_UsrTrap_Object = MibTableColumn
usrTrap = _UsrTrap_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 2, 2, 1, 5),
    _UsrTrap_Type()
)
usrTrap.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    usrTrap.setStatus("mandatory")
_Diagnostics_ObjectIdentity = ObjectIdentity
diagnostics = _Diagnostics_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3)
)


class _DiagModeNum_Type(Integer32):
    """Custom type diagModeNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 128),
    )


_DiagModeNum_Type.__name__ = "Integer32"
_DiagModeNum_Object = MibScalar
diagModeNum = _DiagModeNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 1),
    _DiagModeNum_Type()
)
diagModeNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    diagModeNum.setStatus("mandatory")
_DiagModeTable_Object = MibTable
diagModeTable = _DiagModeTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 2)
)
if mibBuilder.loadTexts:
    diagModeTable.setStatus("mandatory")
_DiagModeEntry_Object = MibTableRow
diagModeEntry = _DiagModeEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 2, 1)
)
diagModeEntry.setIndexNames(
    (0, "LUXN-MIB", "diagLocation"),
    (0, "LUXN-MIB", "diagShelf"),
    (0, "LUXN-MIB", "diagSlot"),
)
if mibBuilder.loadTexts:
    diagModeEntry.setStatus("mandatory")
_DiagLocation_Type = CardLocation
_DiagLocation_Object = MibTableColumn
diagLocation = _DiagLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 2, 1, 1),
    _DiagLocation_Type()
)
diagLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    diagLocation.setStatus("mandatory")
_DiagShelf_Type = CardShelf
_DiagShelf_Object = MibTableColumn
diagShelf = _DiagShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 2, 1, 2),
    _DiagShelf_Type()
)
diagShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    diagShelf.setStatus("mandatory")
_DiagSlot_Type = CardSlot
_DiagSlot_Object = MibTableColumn
diagSlot = _DiagSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 2, 1, 3),
    _DiagSlot_Type()
)
diagSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    diagSlot.setStatus("mandatory")


class _DiagSetMode_Type(Integer32):
    """Custom type diagSetMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4,
              5)
        )
    )
    namedValues = NamedValues(
        *(("loopbackDisabled", 3),
          ("loopbackEnabled", 4),
          ("other", 1),
          ("selftest", 5),
          ("warmboot", 2))
    )


_DiagSetMode_Type.__name__ = "Integer32"
_DiagSetMode_Object = MibTableColumn
diagSetMode = _DiagSetMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 2, 1, 4),
    _DiagSetMode_Type()
)
diagSetMode.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    diagSetMode.setStatus("mandatory")


class _DiagTestNum_Type(Integer32):
    """Custom type diagTestNum based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 20),
    )


_DiagTestNum_Type.__name__ = "Integer32"
_DiagTestNum_Object = MibScalar
diagTestNum = _DiagTestNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 3),
    _DiagTestNum_Type()
)
diagTestNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    diagTestNum.setStatus("mandatory")
_DiagTestTable_Object = MibTable
diagTestTable = _DiagTestTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 4)
)
if mibBuilder.loadTexts:
    diagTestTable.setStatus("mandatory")
_DiagTestEntry_Object = MibTableRow
diagTestEntry = _DiagTestEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 4, 1)
)
diagTestEntry.setIndexNames(
    (0, "LUXN-MIB", "diagTestId"),
    (0, "LUXN-MIB", "diagTLocation"),
    (0, "LUXN-MIB", "diagTShelf"),
    (0, "LUXN-MIB", "diagTSlot"),
)
if mibBuilder.loadTexts:
    diagTestEntry.setStatus("mandatory")


class _DiagTestId_Type(Integer32):
    """Custom type diagTestId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("lLoopBack", 1),
          ("lNormal", 3),
          ("rLoopBack", 2),
          ("rNormal", 4))
    )


_DiagTestId_Type.__name__ = "Integer32"
_DiagTestId_Object = MibTableColumn
diagTestId = _DiagTestId_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 4, 1, 1),
    _DiagTestId_Type()
)
diagTestId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    diagTestId.setStatus("mandatory")
_DiagTLocation_Type = CardLocation
_DiagTLocation_Object = MibTableColumn
diagTLocation = _DiagTLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 4, 1, 2),
    _DiagTLocation_Type()
)
diagTLocation.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    diagTLocation.setStatus("mandatory")
_DiagTShelf_Type = CardShelf
_DiagTShelf_Object = MibTableColumn
diagTShelf = _DiagTShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 4, 1, 3),
    _DiagTShelf_Type()
)
diagTShelf.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    diagTShelf.setStatus("mandatory")
_DiagTSlot_Type = CardSlot
_DiagTSlot_Object = MibTableColumn
diagTSlot = _DiagTSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 4, 1, 4),
    _DiagTSlot_Type()
)
diagTSlot.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    diagTSlot.setStatus("mandatory")


class _DiagParam1_Type(DisplayString):
    """Custom type diagParam1 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 30),
    )


_DiagParam1_Type.__name__ = "DisplayString"
_DiagParam1_Object = MibTableColumn
diagParam1 = _DiagParam1_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 4, 1, 5),
    _DiagParam1_Type()
)
diagParam1.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    diagParam1.setStatus("mandatory")


class _DiagParam2_Type(DisplayString):
    """Custom type diagParam2 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 30),
    )


_DiagParam2_Type.__name__ = "DisplayString"
_DiagParam2_Object = MibTableColumn
diagParam2 = _DiagParam2_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 4, 1, 6),
    _DiagParam2_Type()
)
diagParam2.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    diagParam2.setStatus("mandatory")


class _DiagParam3_Type(DisplayString):
    """Custom type diagParam3 based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 30),
    )


_DiagParam3_Type.__name__ = "DisplayString"
_DiagParam3_Object = MibTableColumn
diagParam3 = _DiagParam3_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 4, 1, 7),
    _DiagParam3_Type()
)
diagParam3.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    diagParam3.setStatus("mandatory")
_DiagTSetMode_Type = FlagType
_DiagTSetMode_Object = MibTableColumn
diagTSetMode = _DiagTSetMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 4, 1, 8),
    _DiagTSetMode_Type()
)
diagTSetMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    diagTSetMode.setStatus("mandatory")
_DiagSelfTest_ObjectIdentity = ObjectIdentity
diagSelfTest = _DiagSelfTest_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5)
)
_McmescSelfTest_ObjectIdentity = ObjectIdentity
mcmescSelfTest = _McmescSelfTest_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1)
)
_McmescSelfTestTable_Object = MibTable
mcmescSelfTestTable = _McmescSelfTestTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 1)
)
if mibBuilder.loadTexts:
    mcmescSelfTestTable.setStatus("mandatory")
_McmescSelfTestEntry_Object = MibTableRow
mcmescSelfTestEntry = _McmescSelfTestEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 1, 1)
)
mcmescSelfTestEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmescSelfTestLocation"),
    (0, "LUXN-MIB", "mcmescSelfTestShelf"),
    (0, "LUXN-MIB", "mcmescSelfTestSlot"),
)
if mibBuilder.loadTexts:
    mcmescSelfTestEntry.setStatus("mandatory")
_McmescSelfTestLocation_Type = CardLocation
_McmescSelfTestLocation_Object = MibTableColumn
mcmescSelfTestLocation = _McmescSelfTestLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 1, 1, 1),
    _McmescSelfTestLocation_Type()
)
mcmescSelfTestLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescSelfTestLocation.setStatus("mandatory")
_McmescSelfTestShelf_Type = CardShelf
_McmescSelfTestShelf_Object = MibTableColumn
mcmescSelfTestShelf = _McmescSelfTestShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 1, 1, 2),
    _McmescSelfTestShelf_Type()
)
mcmescSelfTestShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescSelfTestShelf.setStatus("mandatory")
_McmescSelfTestSlot_Type = CardSlot
_McmescSelfTestSlot_Object = MibTableColumn
mcmescSelfTestSlot = _McmescSelfTestSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 1, 1, 3),
    _McmescSelfTestSlot_Type()
)
mcmescSelfTestSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescSelfTestSlot.setStatus("mandatory")


class _McmescSelfTestStart_Type(Integer32):
    """Custom type mcmescSelfTestStart based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("other", 1),
          ("yes", 2))
    )


_McmescSelfTestStart_Type.__name__ = "Integer32"
_McmescSelfTestStart_Object = MibTableColumn
mcmescSelfTestStart = _McmescSelfTestStart_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 1, 1, 4),
    _McmescSelfTestStart_Type()
)
mcmescSelfTestStart.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    mcmescSelfTestStart.setStatus("mandatory")


class _McmescSelfTestResult_Type(Integer32):
    """Custom type mcmescSelfTestResult based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("failed", 2),
          ("inprogress", 3),
          ("notreported", 4),
          ("passed", 1))
    )


_McmescSelfTestResult_Type.__name__ = "Integer32"
_McmescSelfTestResult_Object = MibTableColumn
mcmescSelfTestResult = _McmescSelfTestResult_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 1, 1, 5),
    _McmescSelfTestResult_Type()
)
mcmescSelfTestResult.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescSelfTestResult.setStatus("mandatory")
_McmescSelfTestSeqNum_Type = DisplayString
_McmescSelfTestSeqNum_Object = MibTableColumn
mcmescSelfTestSeqNum = _McmescSelfTestSeqNum_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 1, 1, 6),
    _McmescSelfTestSeqNum_Type()
)
mcmescSelfTestSeqNum.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescSelfTestSeqNum.setStatus("mandatory")
_McmescSelfTestTimeStamp_Type = DateAndTime
_McmescSelfTestTimeStamp_Object = MibTableColumn
mcmescSelfTestTimeStamp = _McmescSelfTestTimeStamp_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 1, 1, 7),
    _McmescSelfTestTimeStamp_Type()
)
mcmescSelfTestTimeStamp.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescSelfTestTimeStamp.setStatus("mandatory")
_McmescLinkSelfTestResultTable_Object = MibTable
mcmescLinkSelfTestResultTable = _McmescLinkSelfTestResultTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 2)
)
if mibBuilder.loadTexts:
    mcmescLinkSelfTestResultTable.setStatus("mandatory")
_McmescLinkSelfTestResultEntry_Object = MibTableRow
mcmescLinkSelfTestResultEntry = _McmescLinkSelfTestResultEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 2, 1)
)
mcmescLinkSelfTestResultEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmescLinkSelfTestLocation"),
    (0, "LUXN-MIB", "mcmescLinkSelfTestShelf"),
    (0, "LUXN-MIB", "mcmescLinkSelfTestSlot"),
)
if mibBuilder.loadTexts:
    mcmescLinkSelfTestResultEntry.setStatus("mandatory")
_McmescLinkSelfTestLocation_Type = CardLocation
_McmescLinkSelfTestLocation_Object = MibTableColumn
mcmescLinkSelfTestLocation = _McmescLinkSelfTestLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 2, 1, 1),
    _McmescLinkSelfTestLocation_Type()
)
mcmescLinkSelfTestLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkSelfTestLocation.setStatus("mandatory")
_McmescLinkSelfTestShelf_Type = CardShelf
_McmescLinkSelfTestShelf_Object = MibTableColumn
mcmescLinkSelfTestShelf = _McmescLinkSelfTestShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 2, 1, 2),
    _McmescLinkSelfTestShelf_Type()
)
mcmescLinkSelfTestShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkSelfTestShelf.setStatus("mandatory")
_McmescLinkSelfTestSlot_Type = CardSlot
_McmescLinkSelfTestSlot_Object = MibTableColumn
mcmescLinkSelfTestSlot = _McmescLinkSelfTestSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 2, 1, 3),
    _McmescLinkSelfTestSlot_Type()
)
mcmescLinkSelfTestSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkSelfTestSlot.setStatus("mandatory")


class _McmescLinkSelfTestTxI2c_Type(Integer32):
    """Custom type mcmescLinkSelfTestTxI2c based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("failed", 2),
          ("inprogress", 3),
          ("notreported", 4),
          ("passed", 1))
    )


_McmescLinkSelfTestTxI2c_Type.__name__ = "Integer32"
_McmescLinkSelfTestTxI2c_Object = MibTableColumn
mcmescLinkSelfTestTxI2c = _McmescLinkSelfTestTxI2c_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 2, 1, 4),
    _McmescLinkSelfTestTxI2c_Type()
)
mcmescLinkSelfTestTxI2c.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkSelfTestTxI2c.setStatus("mandatory")


class _McmescLinkSelfTestCdrI2c_Type(Integer32):
    """Custom type mcmescLinkSelfTestCdrI2c based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("failed", 2),
          ("inprogress", 3),
          ("notreported", 4),
          ("passed", 1))
    )


_McmescLinkSelfTestCdrI2c_Type.__name__ = "Integer32"
_McmescLinkSelfTestCdrI2c_Object = MibTableColumn
mcmescLinkSelfTestCdrI2c = _McmescLinkSelfTestCdrI2c_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 2, 1, 5),
    _McmescLinkSelfTestCdrI2c_Type()
)
mcmescLinkSelfTestCdrI2c.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkSelfTestCdrI2c.setStatus("mandatory")


class _McmescLinkSelfTestDataPath_Type(Integer32):
    """Custom type mcmescLinkSelfTestDataPath based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("failed", 2),
          ("inprogress", 3),
          ("notreported", 4),
          ("passed", 1))
    )


_McmescLinkSelfTestDataPath_Type.__name__ = "Integer32"
_McmescLinkSelfTestDataPath_Object = MibTableColumn
mcmescLinkSelfTestDataPath = _McmescLinkSelfTestDataPath_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 2, 1, 6),
    _McmescLinkSelfTestDataPath_Type()
)
mcmescLinkSelfTestDataPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescLinkSelfTestDataPath.setStatus("mandatory")
_McmescPortSelfTestResultTable_Object = MibTable
mcmescPortSelfTestResultTable = _McmescPortSelfTestResultTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 3)
)
if mibBuilder.loadTexts:
    mcmescPortSelfTestResultTable.setStatus("mandatory")
_McmescPortSelfTestResultEntry_Object = MibTableRow
mcmescPortSelfTestResultEntry = _McmescPortSelfTestResultEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 3, 1)
)
mcmescPortSelfTestResultEntry.setIndexNames(
    (0, "LUXN-MIB", "mcmescPortSelfTestLocation"),
    (0, "LUXN-MIB", "mcmescPortSelfTestShelf"),
    (0, "LUXN-MIB", "mcmescPortSelfTestSlot"),
    (0, "LUXN-MIB", "mcmescPortSelfTestPort"),
)
if mibBuilder.loadTexts:
    mcmescPortSelfTestResultEntry.setStatus("mandatory")
_McmescPortSelfTestLocation_Type = CardLocation
_McmescPortSelfTestLocation_Object = MibTableColumn
mcmescPortSelfTestLocation = _McmescPortSelfTestLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 3, 1, 1),
    _McmescPortSelfTestLocation_Type()
)
mcmescPortSelfTestLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortSelfTestLocation.setStatus("mandatory")
_McmescPortSelfTestShelf_Type = CardShelf
_McmescPortSelfTestShelf_Object = MibTableColumn
mcmescPortSelfTestShelf = _McmescPortSelfTestShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 3, 1, 2),
    _McmescPortSelfTestShelf_Type()
)
mcmescPortSelfTestShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortSelfTestShelf.setStatus("mandatory")
_McmescPortSelfTestSlot_Type = CardSlot
_McmescPortSelfTestSlot_Object = MibTableColumn
mcmescPortSelfTestSlot = _McmescPortSelfTestSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 3, 1, 3),
    _McmescPortSelfTestSlot_Type()
)
mcmescPortSelfTestSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortSelfTestSlot.setStatus("mandatory")
_McmescPortSelfTestPort_Type = Integer32
_McmescPortSelfTestPort_Object = MibTableColumn
mcmescPortSelfTestPort = _McmescPortSelfTestPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 3, 1, 4),
    _McmescPortSelfTestPort_Type()
)
mcmescPortSelfTestPort.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortSelfTestPort.setStatus("mandatory")


class _McmescPortSelfTestTxI2c_Type(Integer32):
    """Custom type mcmescPortSelfTestTxI2c based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("failed", 2),
          ("inprogress", 3),
          ("notreported", 4),
          ("passed", 1))
    )


_McmescPortSelfTestTxI2c_Type.__name__ = "Integer32"
_McmescPortSelfTestTxI2c_Object = MibTableColumn
mcmescPortSelfTestTxI2c = _McmescPortSelfTestTxI2c_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 3, 1, 5),
    _McmescPortSelfTestTxI2c_Type()
)
mcmescPortSelfTestTxI2c.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortSelfTestTxI2c.setStatus("mandatory")


class _McmescPortSelfTestCdrI2c_Type(Integer32):
    """Custom type mcmescPortSelfTestCdrI2c based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("failed", 2),
          ("inprogress", 3),
          ("notreported", 4),
          ("passed", 1))
    )


_McmescPortSelfTestCdrI2c_Type.__name__ = "Integer32"
_McmescPortSelfTestCdrI2c_Object = MibTableColumn
mcmescPortSelfTestCdrI2c = _McmescPortSelfTestCdrI2c_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 3, 1, 6),
    _McmescPortSelfTestCdrI2c_Type()
)
mcmescPortSelfTestCdrI2c.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortSelfTestCdrI2c.setStatus("mandatory")


class _McmescPortSelfTestTxDataPath_Type(Integer32):
    """Custom type mcmescPortSelfTestTxDataPath based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("failed", 2),
          ("inprogress", 3),
          ("notreported", 4),
          ("passed", 1))
    )


_McmescPortSelfTestTxDataPath_Type.__name__ = "Integer32"
_McmescPortSelfTestTxDataPath_Object = MibTableColumn
mcmescPortSelfTestTxDataPath = _McmescPortSelfTestTxDataPath_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 3, 1, 7),
    _McmescPortSelfTestTxDataPath_Type()
)
mcmescPortSelfTestTxDataPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortSelfTestTxDataPath.setStatus("mandatory")


class _McmescPortSelfTestRxDataPath_Type(Integer32):
    """Custom type mcmescPortSelfTestRxDataPath based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("failed", 2),
          ("inprogress", 3),
          ("notreported", 4),
          ("passed", 1))
    )


_McmescPortSelfTestRxDataPath_Type.__name__ = "Integer32"
_McmescPortSelfTestRxDataPath_Object = MibTableColumn
mcmescPortSelfTestRxDataPath = _McmescPortSelfTestRxDataPath_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 3, 1, 8),
    _McmescPortSelfTestRxDataPath_Type()
)
mcmescPortSelfTestRxDataPath.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    mcmescPortSelfTestRxDataPath.setStatus("mandatory")
_AlarmLog_ObjectIdentity = ObjectIdentity
alarmLog = _AlarmLog_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 3, 4)
)


class _AlarmNumEvents_Type(Integer32):
    """Custom type alarmNumEvents based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 300),
    )


_AlarmNumEvents_Type.__name__ = "Integer32"
_AlarmNumEvents_Object = MibScalar
alarmNumEvents = _AlarmNumEvents_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 4, 1),
    _AlarmNumEvents_Type()
)
alarmNumEvents.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmNumEvents.setStatus("mandatory")
_AlarmLogTable_Object = MibTable
alarmLogTable = _AlarmLogTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 4, 2)
)
if mibBuilder.loadTexts:
    alarmLogTable.setStatus("mandatory")
_AlarmLogEntry_Object = MibTableRow
alarmLogEntry = _AlarmLogEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 4, 2, 1)
)
alarmLogEntry.setIndexNames(
    (0, "LUXN-MIB", "alarmFirstDateTime"),
    (0, "LUXN-MIB", "alarmTag"),
)
if mibBuilder.loadTexts:
    alarmLogEntry.setStatus("mandatory")
_AlarmFirstDateTime_Type = DateAndTime
_AlarmFirstDateTime_Object = MibTableColumn
alarmFirstDateTime = _AlarmFirstDateTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 4, 2, 1, 1),
    _AlarmFirstDateTime_Type()
)
alarmFirstDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmFirstDateTime.setStatus("mandatory")


class _AlarmTag_Type(Integer32):
    """Custom type alarmTag based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 999),
    )


_AlarmTag_Type.__name__ = "Integer32"
_AlarmTag_Object = MibTableColumn
alarmTag = _AlarmTag_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 4, 2, 1, 2),
    _AlarmTag_Type()
)
alarmTag.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmTag.setStatus("mandatory")
_AlarmLastDateTime_Type = DateAndTime
_AlarmLastDateTime_Object = MibTableColumn
alarmLastDateTime = _AlarmLastDateTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 4, 2, 1, 3),
    _AlarmLastDateTime_Type()
)
alarmLastDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmLastDateTime.setStatus("mandatory")


class _AlarmEventId_Type(Integer32):
    """Custom type alarmEventId based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9999),
    )


_AlarmEventId_Type.__name__ = "Integer32"
_AlarmEventId_Object = MibTableColumn
alarmEventId = _AlarmEventId_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 4, 2, 1, 4),
    _AlarmEventId_Type()
)
alarmEventId.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmEventId.setStatus("mandatory")


class _AlarmSeverity_Type(Integer32):
    """Custom type alarmSeverity based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("critical", 1),
          ("major", 2),
          ("minor", 3))
    )


_AlarmSeverity_Type.__name__ = "Integer32"
_AlarmSeverity_Object = MibTableColumn
alarmSeverity = _AlarmSeverity_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 4, 2, 1, 5),
    _AlarmSeverity_Type()
)
alarmSeverity.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmSeverity.setStatus("mandatory")


class _AlarmSource_Type(DisplayString):
    """Custom type alarmSource based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 152),
    )


_AlarmSource_Type.__name__ = "DisplayString"
_AlarmSource_Object = MibTableColumn
alarmSource = _AlarmSource_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 4, 2, 1, 6),
    _AlarmSource_Type()
)
alarmSource.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmSource.setStatus("mandatory")


class _AlarmDescr_Type(DisplayString):
    """Custom type alarmDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 100),
    )


_AlarmDescr_Type.__name__ = "DisplayString"
_AlarmDescr_Object = MibTableColumn
alarmDescr = _AlarmDescr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 4, 2, 1, 7),
    _AlarmDescr_Type()
)
alarmDescr.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmDescr.setStatus("mandatory")
_AlarmCnt_Type = Integer32
_AlarmCnt_Object = MibTableColumn
alarmCnt = _AlarmCnt_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 4, 2, 1, 8),
    _AlarmCnt_Type()
)
alarmCnt.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmCnt.setStatus("mandatory")


class _AlarmAck_Type(Integer32):
    """Custom type alarmAck based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("acknowledged", 1),
          ("unacknowledged", 2))
    )


_AlarmAck_Type.__name__ = "Integer32"
_AlarmAck_Object = MibTableColumn
alarmAck = _AlarmAck_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 4, 2, 1, 9),
    _AlarmAck_Type()
)
alarmAck.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alarmAck.setStatus("mandatory")


class _AlarmClear_Type(Integer32):
    """Custom type alarmClear based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("clear", 2),
          ("other", 1))
    )


_AlarmClear_Type.__name__ = "Integer32"
_AlarmClear_Object = MibTableColumn
alarmClear = _AlarmClear_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 4, 2, 1, 10),
    _AlarmClear_Type()
)
alarmClear.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    alarmClear.setStatus("mandatory")
_AlarmLastChange_Type = Integer32
_AlarmLastChange_Object = MibScalar
alarmLastChange = _AlarmLastChange_Object(
    (1, 3, 6, 1, 4, 1, 4253, 3, 4, 3),
    _AlarmLastChange_Type()
)
alarmLastChange.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    alarmLastChange.setStatus("mandatory")
_Security_ObjectIdentity = ObjectIdentity
security = _Security_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 4)
)
_UserSecMgmt_ObjectIdentity = ObjectIdentity
userSecMgmt = _UserSecMgmt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 4, 1)
)


class _UsrNumUsers_Type(Integer32):
    """Custom type usrNumUsers based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 999),
    )


_UsrNumUsers_Type.__name__ = "Integer32"
_UsrNumUsers_Object = MibScalar
usrNumUsers = _UsrNumUsers_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 1, 1),
    _UsrNumUsers_Type()
)
usrNumUsers.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    usrNumUsers.setStatus("mandatory")
_UsrSecTable_Object = MibTable
usrSecTable = _UsrSecTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 1, 2)
)
if mibBuilder.loadTexts:
    usrSecTable.setStatus("mandatory")
_UsrSecEntry_Object = MibTableRow
usrSecEntry = _UsrSecEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 1, 2, 1)
)
usrSecEntry.setIndexNames(
    (0, "LUXN-MIB", "usrSecLogonId"),
)
if mibBuilder.loadTexts:
    usrSecEntry.setStatus("mandatory")
_UsrSecLogonId_Type = LogonID
_UsrSecLogonId_Object = MibTableColumn
usrSecLogonId = _UsrSecLogonId_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 1, 2, 1, 1),
    _UsrSecLogonId_Type()
)
usrSecLogonId.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    usrSecLogonId.setStatus("mandatory")
_UsrSecPasswd_Type = HashedPasswd
_UsrSecPasswd_Object = MibTableColumn
usrSecPasswd = _UsrSecPasswd_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 1, 2, 1, 2),
    _UsrSecPasswd_Type()
)
usrSecPasswd.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    usrSecPasswd.setStatus("mandatory")
_UsrSecRole_Type = Integer32
_UsrSecRole_Object = MibTableColumn
usrSecRole = _UsrSecRole_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 1, 2, 1, 3),
    _UsrSecRole_Type()
)
usrSecRole.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    usrSecRole.setStatus("mandatory")


class _UsrSecFullName_Type(DisplayString):
    """Custom type usrSecFullName based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 45),
    )


_UsrSecFullName_Type.__name__ = "DisplayString"
_UsrSecFullName_Object = MibTableColumn
usrSecFullName = _UsrSecFullName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 1, 2, 1, 4),
    _UsrSecFullName_Type()
)
usrSecFullName.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    usrSecFullName.setStatus("mandatory")
_UsrSecActDateTime_Type = DateAndTime
_UsrSecActDateTime_Object = MibTableColumn
usrSecActDateTime = _UsrSecActDateTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 1, 2, 1, 5),
    _UsrSecActDateTime_Type()
)
usrSecActDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    usrSecActDateTime.setStatus("mandatory")
_UsrSecLastDateTime_Type = DateAndTime
_UsrSecLastDateTime_Object = MibTableColumn
usrSecLastDateTime = _UsrSecLastDateTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 1, 2, 1, 6),
    _UsrSecLastDateTime_Type()
)
usrSecLastDateTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    usrSecLastDateTime.setStatus("mandatory")
_UsrSecSetLastDateTime_Type = ResetType
_UsrSecSetLastDateTime_Object = MibTableColumn
usrSecSetLastDateTime = _UsrSecSetLastDateTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 1, 2, 1, 7),
    _UsrSecSetLastDateTime_Type()
)
usrSecSetLastDateTime.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    usrSecSetLastDateTime.setStatus("mandatory")
_SystemSecMgmt_ObjectIdentity = ObjectIdentity
systemSecMgmt = _SystemSecMgmt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2)
)


class _SecNumRoles_Type(Integer32):
    """Custom type secNumRoles based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9999),
    )


_SecNumRoles_Type.__name__ = "Integer32"
_SecNumRoles_Object = MibScalar
secNumRoles = _SecNumRoles_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 1),
    _SecNumRoles_Type()
)
secNumRoles.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    secNumRoles.setStatus("mandatory")
_SecRoleTable_Object = MibTable
secRoleTable = _SecRoleTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 2)
)
if mibBuilder.loadTexts:
    secRoleTable.setStatus("mandatory")
_SecRoleEntry_Object = MibTableRow
secRoleEntry = _SecRoleEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 2, 1)
)
secRoleEntry.setIndexNames(
    (0, "LUXN-MIB", "secRole"),
)
if mibBuilder.loadTexts:
    secRoleEntry.setStatus("mandatory")
_SecRole_Type = EntityName
_SecRole_Object = MibTableColumn
secRole = _SecRole_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 2, 1, 1),
    _SecRole_Type()
)
secRole.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    secRole.setStatus("mandatory")


class _SecRoleDescr_Type(DisplayString):
    """Custom type secRoleDescr based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 60),
    )


_SecRoleDescr_Type.__name__ = "DisplayString"
_SecRoleDescr_Object = MibTableColumn
secRoleDescr = _SecRoleDescr_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 2, 1, 2),
    _SecRoleDescr_Type()
)
secRoleDescr.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    secRoleDescr.setStatus("mandatory")


class _SecNumGroups_Type(Integer32):
    """Custom type secNumGroups based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9999),
    )


_SecNumGroups_Type.__name__ = "Integer32"
_SecNumGroups_Object = MibScalar
secNumGroups = _SecNumGroups_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 3),
    _SecNumGroups_Type()
)
secNumGroups.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    secNumGroups.setStatus("mandatory")
_SecGroupTable_Object = MibTable
secGroupTable = _SecGroupTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 4)
)
if mibBuilder.loadTexts:
    secGroupTable.setStatus("mandatory")
_SecGroupEntry_Object = MibTableRow
secGroupEntry = _SecGroupEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 4, 1)
)
secGroupEntry.setIndexNames(
    (0, "LUXN-MIB", "secGroup"),
    (0, "LUXN-MIB", "secGroupRole"),
)
if mibBuilder.loadTexts:
    secGroupEntry.setStatus("mandatory")
_SecGroup_Type = EntityName
_SecGroup_Object = MibTableColumn
secGroup = _SecGroup_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 4, 1, 1),
    _SecGroup_Type()
)
secGroup.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    secGroup.setStatus("mandatory")
_SecGroupRole_Type = EntityName
_SecGroupRole_Object = MibTableColumn
secGroupRole = _SecGroupRole_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 4, 1, 2),
    _SecGroupRole_Type()
)
secGroupRole.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    secGroupRole.setStatus("mandatory")


class _SecNumElements_Type(Integer32):
    """Custom type secNumElements based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9999),
    )


_SecNumElements_Type.__name__ = "Integer32"
_SecNumElements_Object = MibScalar
secNumElements = _SecNumElements_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 5),
    _SecNumElements_Type()
)
secNumElements.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    secNumElements.setStatus("mandatory")
_SecElementTable_Object = MibTable
secElementTable = _SecElementTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 6)
)
if mibBuilder.loadTexts:
    secElementTable.setStatus("mandatory")
_SecElementEntry_Object = MibTableRow
secElementEntry = _SecElementEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 6, 1)
)
secElementEntry.setIndexNames(
    (0, "LUXN-MIB", "secElement"),
)
if mibBuilder.loadTexts:
    secElementEntry.setStatus("mandatory")
_SecElement_Type = EntityName
_SecElement_Object = MibTableColumn
secElement = _SecElement_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 6, 1, 1),
    _SecElement_Type()
)
secElement.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    secElement.setStatus("mandatory")


class _SecElementAccess_Type(Integer32):
    """Custom type secElementAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 4),
          ("read", 1),
          ("readWrite", 3),
          ("write", 2))
    )


_SecElementAccess_Type.__name__ = "Integer32"
_SecElementAccess_Object = MibTableColumn
secElementAccess = _SecElementAccess_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 6, 1, 2),
    _SecElementAccess_Type()
)
secElementAccess.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    secElementAccess.setStatus("mandatory")


class _SecElementOID_Type(DisplayString):
    """Custom type secElementOID based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 30),
    )


_SecElementOID_Type.__name__ = "DisplayString"
_SecElementOID_Object = MibTableColumn
secElementOID = _SecElementOID_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 6, 1, 3),
    _SecElementOID_Type()
)
secElementOID.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    secElementOID.setStatus("mandatory")


class _SecElementType_Type(Integer32):
    """Custom type secElementType based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3)
        )
    )
    namedValues = NamedValues(
        *(("element", 1),
          ("group", 2),
          ("table", 3))
    )


_SecElementType_Type.__name__ = "Integer32"
_SecElementType_Object = MibTableColumn
secElementType = _SecElementType_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 6, 1, 4),
    _SecElementType_Type()
)
secElementType.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    secElementType.setStatus("mandatory")
_SecElementParent_Type = EntityName
_SecElementParent_Object = MibTableColumn
secElementParent = _SecElementParent_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 6, 1, 5),
    _SecElementParent_Type()
)
secElementParent.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    secElementParent.setStatus("mandatory")


class _SecNumElmntGrp_Type(Integer32):
    """Custom type secNumElmntGrp based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(0, 9999),
    )


_SecNumElmntGrp_Type.__name__ = "Integer32"
_SecNumElmntGrp_Object = MibScalar
secNumElmntGrp = _SecNumElmntGrp_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 7),
    _SecNumElmntGrp_Type()
)
secNumElmntGrp.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    secNumElmntGrp.setStatus("mandatory")
_SecElmntGrpTable_Object = MibTable
secElmntGrpTable = _SecElmntGrpTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 8)
)
if mibBuilder.loadTexts:
    secElmntGrpTable.setStatus("mandatory")
_SecElmntGrpEntry_Object = MibTableRow
secElmntGrpEntry = _SecElmntGrpEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 8, 1)
)
secElmntGrpEntry.setIndexNames(
    (0, "LUXN-MIB", "elmntName"),
    (0, "LUXN-MIB", "grpName"),
)
if mibBuilder.loadTexts:
    secElmntGrpEntry.setStatus("mandatory")
_ElmntName_Type = EntityName
_ElmntName_Object = MibTableColumn
elmntName = _ElmntName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 8, 1, 1),
    _ElmntName_Type()
)
elmntName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    elmntName.setStatus("mandatory")
_GrpName_Type = EntityName
_GrpName_Object = MibTableColumn
grpName = _GrpName_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 8, 1, 2),
    _GrpName_Type()
)
grpName.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    grpName.setStatus("mandatory")


class _ElmntGrpAccess_Type(Integer32):
    """Custom type elmntGrpAccess based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("none", 4),
          ("read", 1),
          ("readWrite", 3),
          ("write", 2))
    )


_ElmntGrpAccess_Type.__name__ = "Integer32"
_ElmntGrpAccess_Object = MibTableColumn
elmntGrpAccess = _ElmntGrpAccess_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 2, 8, 1, 3),
    _ElmntGrpAccess_Type()
)
elmntGrpAccess.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    elmntGrpAccess.setStatus("mandatory")
_NetSecMgmt_ObjectIdentity = ObjectIdentity
netSecMgmt = _NetSecMgmt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 4, 3)
)
_RadiusSecMgmt_ObjectIdentity = ObjectIdentity
radiusSecMgmt = _RadiusSecMgmt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 4, 3, 1)
)


class _RadiusAuthOrder_Type(Integer32):
    """Custom type radiusAuthOrder based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2,
              3,
              4)
        )
    )
    namedValues = NamedValues(
        *(("local", 1),
          ("localRadius", 3),
          ("radius", 2),
          ("radiusLocal", 4))
    )


_RadiusAuthOrder_Type.__name__ = "Integer32"
_RadiusAuthOrder_Object = MibScalar
radiusAuthOrder = _RadiusAuthOrder_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 1),
    _RadiusAuthOrder_Type()
)
radiusAuthOrder.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAuthOrder.setStatus("mandatory")


class _RadiusNasIdentifier_Type(DisplayString):
    """Custom type radiusNasIdentifier based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RadiusNasIdentifier_Type.__name__ = "DisplayString"
_RadiusNasIdentifier_Object = MibScalar
radiusNasIdentifier = _RadiusNasIdentifier_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 2),
    _RadiusNasIdentifier_Type()
)
radiusNasIdentifier.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusNasIdentifier.setStatus("mandatory")


class _RadiusDefaultRealm_Type(DisplayString):
    """Custom type radiusDefaultRealm based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(0, 32),
    )


_RadiusDefaultRealm_Type.__name__ = "DisplayString"
_RadiusDefaultRealm_Object = MibScalar
radiusDefaultRealm = _RadiusDefaultRealm_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 3),
    _RadiusDefaultRealm_Type()
)
radiusDefaultRealm.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusDefaultRealm.setStatus("mandatory")


class _RadiusTimeout_Type(Integer32):
    """Custom type radiusTimeout based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 60),
    )


_RadiusTimeout_Type.__name__ = "Integer32"
_RadiusTimeout_Object = MibScalar
radiusTimeout = _RadiusTimeout_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 4),
    _RadiusTimeout_Type()
)
radiusTimeout.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusTimeout.setStatus("mandatory")


class _RadiusRetries_Type(Integer32):
    """Custom type radiusRetries based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 10),
    )


_RadiusRetries_Type.__name__ = "Integer32"
_RadiusRetries_Object = MibScalar
radiusRetries = _RadiusRetries_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 5),
    _RadiusRetries_Type()
)
radiusRetries.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusRetries.setStatus("mandatory")
_RadiusSecTable_Object = MibTable
radiusSecTable = _RadiusSecTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 6)
)
if mibBuilder.loadTexts:
    radiusSecTable.setStatus("mandatory")
_RadiusSecEntry_Object = MibTableRow
radiusSecEntry = _RadiusSecEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 6, 1)
)
radiusSecEntry.setIndexNames(
    (0, "LUXN-MIB", "radiusServerIndex"),
)
if mibBuilder.loadTexts:
    radiusSecEntry.setStatus("mandatory")
_RadiusServerIndex_Type = Integer32
_RadiusServerIndex_Object = MibTableColumn
radiusServerIndex = _RadiusServerIndex_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 6, 1, 1),
    _RadiusServerIndex_Type()
)
radiusServerIndex.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    radiusServerIndex.setStatus("mandatory")
_RadiusServerAddress_Type = IpAddress
_RadiusServerAddress_Object = MibTableColumn
radiusServerAddress = _RadiusServerAddress_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 6, 1, 2),
    _RadiusServerAddress_Type()
)
radiusServerAddress.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusServerAddress.setStatus("mandatory")
_RadiusServerPort_Type = Integer32
_RadiusServerPort_Object = MibTableColumn
radiusServerPort = _RadiusServerPort_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 6, 1, 3),
    _RadiusServerPort_Type()
)
radiusServerPort.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusServerPort.setStatus("mandatory")


class _RadiusServerSecret_Type(DisplayString):
    """Custom type radiusServerSecret based on DisplayString"""
    subtypeSpec = DisplayString.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueSizeConstraint(1, 48),
    )


_RadiusServerSecret_Type.__name__ = "DisplayString"
_RadiusServerSecret_Object = MibTableColumn
radiusServerSecret = _RadiusServerSecret_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 6, 1, 4),
    _RadiusServerSecret_Type()
)
radiusServerSecret.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusServerSecret.setStatus("mandatory")
_RadiusAddServer_Type = DisplayString
_RadiusAddServer_Object = MibScalar
radiusAddServer = _RadiusAddServer_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 7),
    _RadiusAddServer_Type()
)
radiusAddServer.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    radiusAddServer.setStatus("mandatory")
_SshSecMgmt_ObjectIdentity = ObjectIdentity
sshSecMgmt = _SshSecMgmt_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 4, 3, 2)
)


class _SshMode_Type(Integer32):
    """Custom type sshMode based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("disabled", 2),
          ("enabled", 1))
    )


_SshMode_Type.__name__ = "Integer32"
_SshMode_Object = MibScalar
sshMode = _SshMode_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 3, 2, 1),
    _SshMode_Type()
)
sshMode.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshMode.setStatus("mandatory")


class _SshKeySize_Type(Integer32):
    """Custom type sshKeySize based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(512, 1024),
    )


_SshKeySize_Type.__name__ = "Integer32"
_SshKeySize_Object = MibScalar
sshKeySize = _SshKeySize_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 3, 2, 2),
    _SshKeySize_Type()
)
sshKeySize.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshKeySize.setStatus("mandatory")


class _SshMaxSessions_Type(Integer32):
    """Custom type sshMaxSessions based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        ValueRangeConstraint(1, 6),
    )


_SshMaxSessions_Type.__name__ = "Integer32"
_SshMaxSessions_Object = MibScalar
sshMaxSessions = _SshMaxSessions_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 3, 2, 3),
    _SshMaxSessions_Type()
)
sshMaxSessions.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshMaxSessions.setStatus("mandatory")


class _SshGenKey_Type(Integer32):
    """Custom type sshGenKey based on Integer32"""
    subtypeSpec = Integer32.subtypeSpec
    subtypeSpec += ConstraintsUnion(
        SingleValueConstraint(
            *(1,
              2)
        )
    )
    namedValues = NamedValues(
        *(("genDssKey", 2),
          ("other", 1))
    )


_SshGenKey_Type.__name__ = "Integer32"
_SshGenKey_Object = MibScalar
sshGenKey = _SshGenKey_Object(
    (1, 3, 6, 1, 4, 1, 4253, 4, 3, 2, 4),
    _SshGenKey_Type()
)
sshGenKey.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    sshGenKey.setStatus("mandatory")
_Accounting_ObjectIdentity = ObjectIdentity
accounting = _Accounting_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 5)
)
_CpAcct_ObjectIdentity = ObjectIdentity
cpAcct = _CpAcct_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 5, 1)
)
_AcctCPTable_Object = MibTable
acctCPTable = _AcctCPTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 1, 1)
)
if mibBuilder.loadTexts:
    acctCPTable.setStatus("mandatory")
_AcctCPEntry_Object = MibTableRow
acctCPEntry = _AcctCPEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 1, 1, 1)
)
acctCPEntry.setIndexNames(
    (0, "LUXN-MIB", "acctCPShelf"),
    (0, "LUXN-MIB", "acctCPSlot"),
)
if mibBuilder.loadTexts:
    acctCPEntry.setStatus("mandatory")
_AcctCPShelf_Type = CardShelf
_AcctCPShelf_Object = MibTableColumn
acctCPShelf = _AcctCPShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 1, 1, 1, 1),
    _AcctCPShelf_Type()
)
acctCPShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acctCPShelf.setStatus("mandatory")
_AcctCPSlot_Type = CardSlot
_AcctCPSlot_Object = MibTableColumn
acctCPSlot = _AcctCPSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 1, 1, 1, 2),
    _AcctCPSlot_Type()
)
acctCPSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acctCPSlot.setStatus("mandatory")
_AcctCPDsgnAct_Type = Counter32
_AcctCPDsgnAct_Object = MibTableColumn
acctCPDsgnAct = _AcctCPDsgnAct_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 1, 1, 1, 3),
    _AcctCPDsgnAct_Type()
)
acctCPDsgnAct.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    acctCPDsgnAct.setStatus("mandatory")
_AcctCPDsgnStdby_Type = Counter32
_AcctCPDsgnStdby_Object = MibTableColumn
acctCPDsgnStdby = _AcctCPDsgnStdby_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 1, 1, 1, 4),
    _AcctCPDsgnStdby_Type()
)
acctCPDsgnStdby.setMaxAccess("not-accessible")
if mibBuilder.loadTexts:
    acctCPDsgnStdby.setStatus("mandatory")
_AcctCPActive_Type = Counter32
_AcctCPActive_Object = MibTableColumn
acctCPActive = _AcctCPActive_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 1, 1, 1, 5),
    _AcctCPActive_Type()
)
acctCPActive.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acctCPActive.setStatus("mandatory")
_AcctCPStandby_Type = Counter32
_AcctCPStandby_Object = MibTableColumn
acctCPStandby = _AcctCPStandby_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 1, 1, 1, 6),
    _AcctCPStandby_Type()
)
acctCPStandby.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acctCPStandby.setStatus("mandatory")
_AcctCPUpTime_Type = Counter32
_AcctCPUpTime_Object = MibTableColumn
acctCPUpTime = _AcctCPUpTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 1, 1, 1, 7),
    _AcctCPUpTime_Type()
)
acctCPUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acctCPUpTime.setStatus("mandatory")
_AcctCPUnAvail_Type = Counter32
_AcctCPUnAvail_Object = MibTableColumn
acctCPUnAvail = _AcctCPUnAvail_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 1, 1, 1, 8),
    _AcctCPUnAvail_Type()
)
acctCPUnAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acctCPUnAvail.setStatus("mandatory")
_AcctCPResetCntrs_Type = ResetType
_AcctCPResetCntrs_Object = MibTableColumn
acctCPResetCntrs = _AcctCPResetCntrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 1, 1, 1, 9),
    _AcctCPResetCntrs_Type()
)
acctCPResetCntrs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acctCPResetCntrs.setStatus("mandatory")
_CcAcct_ObjectIdentity = ObjectIdentity
ccAcct = _CcAcct_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 5, 2)
)
_AcctCCTable_Object = MibTable
acctCCTable = _AcctCCTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 2, 1)
)
if mibBuilder.loadTexts:
    acctCCTable.setStatus("mandatory")
_AcctCCEntry_Object = MibTableRow
acctCCEntry = _AcctCCEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 2, 1, 1)
)
acctCCEntry.setIndexNames(
    (0, "LUXN-MIB", "acctCCLocation"),
    (0, "LUXN-MIB", "acctCCShelf"),
    (0, "LUXN-MIB", "acctCCSlot"),
)
if mibBuilder.loadTexts:
    acctCCEntry.setStatus("mandatory")
_AcctCCLocation_Type = CardLocation
_AcctCCLocation_Object = MibTableColumn
acctCCLocation = _AcctCCLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 2, 1, 1, 1),
    _AcctCCLocation_Type()
)
acctCCLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acctCCLocation.setStatus("mandatory")
_AcctCCShelf_Type = CardShelf
_AcctCCShelf_Object = MibTableColumn
acctCCShelf = _AcctCCShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 2, 1, 1, 2),
    _AcctCCShelf_Type()
)
acctCCShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acctCCShelf.setStatus("mandatory")
_AcctCCSlot_Type = CardSlot
_AcctCCSlot_Object = MibTableColumn
acctCCSlot = _AcctCCSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 2, 1, 1, 3),
    _AcctCCSlot_Type()
)
acctCCSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acctCCSlot.setStatus("mandatory")
_AcctCCUpTime_Type = Counter32
_AcctCCUpTime_Object = MibTableColumn
acctCCUpTime = _AcctCCUpTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 2, 1, 1, 4),
    _AcctCCUpTime_Type()
)
acctCCUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acctCCUpTime.setStatus("mandatory")
_AcctCCUnAvail_Type = Counter32
_AcctCCUnAvail_Object = MibTableColumn
acctCCUnAvail = _AcctCCUnAvail_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 2, 1, 1, 5),
    _AcctCCUnAvail_Type()
)
acctCCUnAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acctCCUnAvail.setStatus("mandatory")
_AcctCCResetCntrs_Type = ResetType
_AcctCCResetCntrs_Object = MibTableColumn
acctCCResetCntrs = _AcctCCResetCntrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 2, 1, 1, 6),
    _AcctCCResetCntrs_Type()
)
acctCCResetCntrs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acctCCResetCntrs.setStatus("mandatory")
_McmAcct_ObjectIdentity = ObjectIdentity
mcmAcct = _McmAcct_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 5, 3)
)
_AcctmcmTable_Object = MibTable
acctmcmTable = _AcctmcmTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 3, 1)
)
if mibBuilder.loadTexts:
    acctmcmTable.setStatus("mandatory")
_AcctmcmEntry_Object = MibTableRow
acctmcmEntry = _AcctmcmEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 3, 1, 1)
)
acctmcmEntry.setIndexNames(
    (0, "LUXN-MIB", "acctmcmLocation"),
    (0, "LUXN-MIB", "acctmcmShelf"),
    (0, "LUXN-MIB", "acctmcmSlot"),
)
if mibBuilder.loadTexts:
    acctmcmEntry.setStatus("mandatory")
_AcctmcmLocation_Type = CardLocation
_AcctmcmLocation_Object = MibTableColumn
acctmcmLocation = _AcctmcmLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 3, 1, 1, 1),
    _AcctmcmLocation_Type()
)
acctmcmLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acctmcmLocation.setStatus("mandatory")
_AcctmcmShelf_Type = CardShelf
_AcctmcmShelf_Object = MibTableColumn
acctmcmShelf = _AcctmcmShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 3, 1, 1, 2),
    _AcctmcmShelf_Type()
)
acctmcmShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acctmcmShelf.setStatus("mandatory")
_AcctmcmSlot_Type = CardSlot
_AcctmcmSlot_Object = MibTableColumn
acctmcmSlot = _AcctmcmSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 3, 1, 1, 3),
    _AcctmcmSlot_Type()
)
acctmcmSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acctmcmSlot.setStatus("mandatory")
_AcctmcmUpTime_Type = Counter32
_AcctmcmUpTime_Object = MibTableColumn
acctmcmUpTime = _AcctmcmUpTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 3, 1, 1, 4),
    _AcctmcmUpTime_Type()
)
acctmcmUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acctmcmUpTime.setStatus("mandatory")
_AcctmcmUnAvail_Type = Counter32
_AcctmcmUnAvail_Object = MibTableColumn
acctmcmUnAvail = _AcctmcmUnAvail_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 3, 1, 1, 5),
    _AcctmcmUnAvail_Type()
)
acctmcmUnAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acctmcmUnAvail.setStatus("mandatory")
_AcctmcmResetCntrs_Type = ResetType
_AcctmcmResetCntrs_Object = MibTableColumn
acctmcmResetCntrs = _AcctmcmResetCntrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 3, 1, 1, 6),
    _AcctmcmResetCntrs_Type()
)
acctmcmResetCntrs.setMaxAccess("read-write")
if mibBuilder.loadTexts:
    acctmcmResetCntrs.setStatus("mandatory")
_McmescAcct_ObjectIdentity = ObjectIdentity
mcmescAcct = _McmescAcct_ObjectIdentity(
    (1, 3, 6, 1, 4, 1, 4253, 5, 4)
)
_AcctmcmescTable_Object = MibTable
acctmcmescTable = _AcctmcmescTable_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 4, 1)
)
if mibBuilder.loadTexts:
    acctmcmescTable.setStatus("mandatory")
_AcctmcmescEntry_Object = MibTableRow
acctmcmescEntry = _AcctmcmescEntry_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 4, 1, 1)
)
acctmcmescEntry.setIndexNames(
    (0, "LUXN-MIB", "acctmcmescLocation"),
    (0, "LUXN-MIB", "acctmcmescShelf"),
    (0, "LUXN-MIB", "acctmcmescSlot"),
)
if mibBuilder.loadTexts:
    acctmcmescEntry.setStatus("mandatory")
_AcctmcmescLocation_Type = CardLocation
_AcctmcmescLocation_Object = MibTableColumn
acctmcmescLocation = _AcctmcmescLocation_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 4, 1, 1, 1),
    _AcctmcmescLocation_Type()
)
acctmcmescLocation.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acctmcmescLocation.setStatus("mandatory")
_AcctmcmescShelf_Type = CardShelf
_AcctmcmescShelf_Object = MibTableColumn
acctmcmescShelf = _AcctmcmescShelf_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 4, 1, 1, 2),
    _AcctmcmescShelf_Type()
)
acctmcmescShelf.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acctmcmescShelf.setStatus("mandatory")
_AcctmcmescSlot_Type = CardSlot
_AcctmcmescSlot_Object = MibTableColumn
acctmcmescSlot = _AcctmcmescSlot_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 4, 1, 1, 3),
    _AcctmcmescSlot_Type()
)
acctmcmescSlot.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acctmcmescSlot.setStatus("mandatory")
_AcctmcmescUpTime_Type = Counter32
_AcctmcmescUpTime_Object = MibTableColumn
acctmcmescUpTime = _AcctmcmescUpTime_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 4, 1, 1, 4),
    _AcctmcmescUpTime_Type()
)
acctmcmescUpTime.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acctmcmescUpTime.setStatus("mandatory")
_AcctmcmescUnAvail_Type = Counter32
_AcctmcmescUnAvail_Object = MibTableColumn
acctmcmescUnAvail = _AcctmcmescUnAvail_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 4, 1, 1, 5),
    _AcctmcmescUnAvail_Type()
)
acctmcmescUnAvail.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acctmcmescUnAvail.setStatus("mandatory")
_AcctmcmescResetCntrs_Type = ResetType
_AcctmcmescResetCntrs_Object = MibTableColumn
acctmcmescResetCntrs = _AcctmcmescResetCntrs_Object(
    (1, 3, 6, 1, 4, 1, 4253, 5, 4, 1, 1, 6),
    _AcctmcmescResetCntrs_Type()
)
acctmcmescResetCntrs.setMaxAccess("read-only")
if mibBuilder.loadTexts:
    acctmcmescResetCntrs.setStatus("mandatory")

# Managed Objects groups


# Notification objects

luxNGenericTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 1)
)
luxNGenericTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNGenericTrap.setStatus(
        ""
    )

luxNVoadmDetectorFailureTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 1001)
)
luxNVoadmDetectorFailureTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNVoadmDetectorFailureTrap.setStatus(
        ""
    )

luxNVoadmDetectorFailureResolvedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 1002)
)
luxNVoadmDetectorFailureResolvedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNVoadmDetectorFailureResolvedTrap.setStatus(
        ""
    )

luxNVoadmOutofRangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 1003)
)
luxNVoadmOutofRangeTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNVoadmOutofRangeTrap.setStatus(
        ""
    )

luxNVoadmOutofRangeResolvedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 1004)
)
luxNVoadmOutofRangeResolvedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNVoadmOutofRangeResolvedTrap.setStatus(
        ""
    )

luxNsignalStrengthHighTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 1005)
)
luxNsignalStrengthHighTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNsignalStrengthHighTrap.setStatus(
        ""
    )

luxNsignalStrengthLowTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 1006)
)
luxNsignalStrengthLowTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNsignalStrengthLowTrap.setStatus(
        ""
    )

luxNsignalStrengthNormalTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 1007)
)
luxNsignalStrengthNormalTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNsignalStrengthNormalTrap.setStatus(
        ""
    )

luxNlaserPowerOutOfRangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 1008)
)
luxNlaserPowerOutOfRangeTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNlaserPowerOutOfRangeTrap.setStatus(
        ""
    )

luxNlaserPowerNormalTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 1009)
)
luxNlaserPowerNormalTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNlaserPowerNormalTrap.setStatus(
        ""
    )

luxNberHighThresholdExceeded = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 1010)
)
luxNberHighThresholdExceeded.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNberHighThresholdExceeded.setStatus(
        ""
    )

luxNberHighThresholdExceededNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 1011)
)
luxNberHighThresholdExceededNormal.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNberHighThresholdExceededNormal.setStatus(
        ""
    )

luxNberModerateThresholdExceeded = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 1012)
)
luxNberModerateThresholdExceeded.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNberModerateThresholdExceeded.setStatus(
        ""
    )

luxNberModerateThresholdExceededNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 1013)
)
luxNberModerateThresholdExceededNormal.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNberModerateThresholdExceededNormal.setStatus(
        ""
    )

luxNSNMPKeepalive = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2000)
)
luxNSNMPKeepalive.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNSNMPKeepalive.setStatus(
        ""
    )

luxNSNMPKeepalivesEnabled = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2001)
)
luxNSNMPKeepalivesEnabled.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNSNMPKeepalivesEnabled.setStatus(
        ""
    )

luxNSNMPKeepalivesDisabled = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2002)
)
luxNSNMPKeepalivesDisabled.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNSNMPKeepalivesDisabled.setStatus(
        ""
    )

luxNSNMPKeepaliveIntervalChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2003)
)
luxNSNMPKeepaliveIntervalChanged.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNSNMPKeepaliveIntervalChanged.setStatus(
        ""
    )

luxNTelnetClientEnabled = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2004)
)
luxNTelnetClientEnabled.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNTelnetClientEnabled.setStatus(
        ""
    )

luxNTelnetClientDisabled = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2005)
)
luxNTelnetClientDisabled.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNTelnetClientDisabled.setStatus(
        ""
    )

luxNsnmpAuthenticationFailureTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2017)
)
luxNsnmpAuthenticationFailureTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNsnmpAuthenticationFailureTrap.setStatus(
        ""
    )

luxNcoldStartTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2018)
)
luxNcoldStartTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNcoldStartTrap.setStatus(
        ""
    )

luxNwarmStartTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2019)
)
luxNwarmStartTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNwarmStartTrap.setStatus(
        ""
    )

luxNlossOfLightResolvedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2021)
)
luxNlossOfLightResolvedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNlossOfLightResolvedTrap.setStatus(
        ""
    )

luxNlossOfLightDetectedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2022)
)
luxNlossOfLightDetectedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNlossOfLightDetectedTrap.setStatus(
        ""
    )

luxNntpEnableTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2023)
)
luxNntpEnableTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNntpEnableTrap.setStatus(
        ""
    )

luxNntpDisableTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2024)
)
luxNntpDisableTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNntpDisableTrap.setStatus(
        ""
    )

luxNntpTimeServerChangedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2025)
)
luxNntpTimeServerChangedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNntpTimeServerChangedTrap.setStatus(
        ""
    )

luxNntpUpdateIntervalChangedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2026)
)
luxNntpUpdateIntervalChangedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNntpUpdateIntervalChangedTrap.setStatus(
        ""
    )

luxNtimeZoneChangedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2027)
)
luxNtimeZoneChangedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNtimeZoneChangedTrap.setStatus(
        ""
    )

luxNspiConnectionUpTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2030)
)
luxNspiConnectionUpTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNspiConnectionUpTrap.setStatus(
        ""
    )

luxNcardLostTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2031)
)
luxNcardLostTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNcardLostTrap.setStatus(
        ""
    )

luxNConfigChangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2034)
)
luxNConfigChangeTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNConfigChangeTrap.setStatus(
        ""
    )

luxNstatsPollFailedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2035)
)
luxNstatsPollFailedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNstatsPollFailedTrap.setStatus(
        ""
    )

luxNCardFoundTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2040)
)
luxNCardFoundTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNCardFoundTrap.setStatus(
        ""
    )

luxNlocalLoopbackEnabledTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2041)
)
luxNlocalLoopbackEnabledTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNlocalLoopbackEnabledTrap.setStatus(
        ""
    )

luxNremoteLoopbackEnabledTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2042)
)
luxNremoteLoopbackEnabledTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNremoteLoopbackEnabledTrap.setStatus(
        ""
    )

luxNlocalLoopbackDisabledTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2043)
)
luxNlocalLoopbackDisabledTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNlocalLoopbackDisabledTrap.setStatus(
        ""
    )

luxNremoteLoopbackDisabledTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2044)
)
luxNremoteLoopbackDisabledTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNremoteLoopbackDisabledTrap.setStatus(
        ""
    )

luxNftpSessionInitiatedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2047)
)
luxNftpSessionInitiatedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNftpSessionInitiatedTrap.setStatus(
        ""
    )

luxNuserResetStatusTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2050)
)
luxNuserResetStatusTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNuserResetStatusTrap.setStatus(
        ""
    )

luxNprotectionSwitchTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2051)
)
luxNprotectionSwitchTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNprotectionSwitchTrap.setStatus(
        ""
    )

luxNipAddressErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2052)
)
luxNipAddressErrorTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNipAddressErrorTrap.setStatus(
        ""
    )

luxNipNetmaskErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2053)
)
luxNipNetmaskErrorTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNipNetmaskErrorTrap.setStatus(
        ""
    )

luxNdefaultGatewayErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2054)
)
luxNdefaultGatewayErrorTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNdefaultGatewayErrorTrap.setStatus(
        ""
    )

luxNlossOfSignalTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2055)
)
luxNlossOfSignalTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNlossOfSignalTrap.setStatus(
        ""
    )

luxNlossOfSignalNormalTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2056)
)
luxNlossOfSignalNormalTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNlossOfSignalNormalTrap.setStatus(
        ""
    )

luxNlossOfFrameTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2057)
)
luxNlossOfFrameTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNlossOfFrameTrap.setStatus(
        ""
    )

luxNlossOfFrameNormalTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2058)
)
luxNlossOfFrameNormalTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNlossOfFrameNormalTrap.setStatus(
        ""
    )

luxNrecvAISTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2059)
)
luxNrecvAISTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNrecvAISTrap.setStatus(
        ""
    )

luxNrecvAISNormalTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2060)
)
luxNrecvAISNormalTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNrecvAISNormalTrap.setStatus(
        ""
    )

luxNrecvYellowAlarmTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2061)
)
luxNrecvYellowAlarmTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNrecvYellowAlarmTrap.setStatus(
        ""
    )

luxNrecvYellowAlarmNormalTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2062)
)
luxNrecvYellowAlarmNormalTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNrecvYellowAlarmNormalTrap.setStatus(
        ""
    )

luxNlineCodeViolationTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2063)
)
luxNlineCodeViolationTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNlineCodeViolationTrap.setStatus(
        ""
    )

luxNlineCodeViolationNormalTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2064)
)
luxNlineCodeViolationNormalTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNlineCodeViolationNormalTrap.setStatus(
        ""
    )

luxNframingAlarmTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2065)
)
luxNframingAlarmTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNframingAlarmTrap.setStatus(
        ""
    )

luxNframingAlarmNormalTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2066)
)
luxNframingAlarmNormalTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNframingAlarmNormalTrap.setStatus(
        ""
    )

luxNlossOfTimingTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2067)
)
luxNlossOfTimingTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNlossOfTimingTrap.setStatus(
        ""
    )

luxNlossOfTimingNormalTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2068)
)
luxNlossOfTimingNormalTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNlossOfTimingNormalTrap.setStatus(
        ""
    )

luxNselfTestFailTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2073)
)
luxNselfTestFailTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNselfTestFailTrap.setStatus(
        ""
    )

luxNselfTestPassTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2074)
)
luxNselfTestPassTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNselfTestPassTrap.setStatus(
        ""
    )

luxNIbmDownTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2075)
)
luxNIbmDownTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNIbmDownTrap.setStatus(
        ""
    )

luxNIbmNormalTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2076)
)
luxNIbmNormalTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNIbmNormalTrap.setStatus(
        ""
    )

luxNnearendCardLoopbackEnabledTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2077)
)
luxNnearendCardLoopbackEnabledTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNnearendCardLoopbackEnabledTrap.setStatus(
        ""
    )

luxNnearendCardLoopbackDisabledTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2078)
)
luxNnearendCardLoopbackDisabledTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNnearendCardLoopbackDisabledTrap.setStatus(
        ""
    )

luxNnetworkPortLoopbackEnabledTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2079)
)
luxNnetworkPortLoopbackEnabledTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNnetworkPortLoopbackEnabledTrap.setStatus(
        ""
    )

luxNnetworkPortLoopbackDisabledTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2080)
)
luxNnetworkPortLoopbackDisabledTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNnetworkPortLoopbackDisabledTrap.setStatus(
        ""
    )

luxNnetworkCardLoopbackEnabledTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2081)
)
luxNnetworkCardLoopbackEnabledTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNnetworkCardLoopbackEnabledTrap.setStatus(
        ""
    )

luxNnetworkCardLoopbackDisabledTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2082)
)
luxNnetworkCardLoopbackDisabledTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNnetworkCardLoopbackDisabledTrap.setStatus(
        ""
    )

luxNnearendPortLoopbackEnabledTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2083)
)
luxNnearendPortLoopbackEnabledTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNnearendPortLoopbackEnabledTrap.setStatus(
        ""
    )

luxNnearendPortLoopbackDisabledTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2084)
)
luxNnearendPortLoopbackDisabledTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNnearendPortLoopbackDisabledTrap.setStatus(
        ""
    )

luxNpowerSupplyNotPresentTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2085)
)
luxNpowerSupplyNotPresentTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNpowerSupplyNotPresentTrap.setStatus(
        ""
    )

luxNpowerSupplyOKTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2086)
)
luxNpowerSupplyOKTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNpowerSupplyOKTrap.setStatus(
        ""
    )

luxNpowerSupplyDegradedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2087)
)
luxNpowerSupplyDegradedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNpowerSupplyDegradedTrap.setStatus(
        ""
    )

luxNpowerSupplyFailureTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2088)
)
luxNpowerSupplyFailureTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNpowerSupplyFailureTrap.setStatus(
        ""
    )

luxNfanOKTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2089)
)
luxNfanOKTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNfanOKTrap.setStatus(
        ""
    )

luxNfanFailureTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2090)
)
luxNfanFailureTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNfanFailureTrap.setStatus(
        ""
    )

luxNcsimDataUnavailableTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2091)
)
luxNcsimDataUnavailableTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNcsimDataUnavailableTrap.setStatus(
        ""
    )

luxNcsimDataAvailableTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2092)
)
luxNcsimDataAvailableTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNcsimDataAvailableTrap.setStatus(
        ""
    )

luxNcsimModuleFailureTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2093)
)
luxNcsimModuleFailureTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNcsimModuleFailureTrap.setStatus(
        ""
    )

luxNethernetLossOfCarrierTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2094)
)
luxNethernetLossOfCarrierTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNethernetLossOfCarrierTrap.setStatus(
        ""
    )

luxNethernetCarrierDetectedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2095)
)
luxNethernetCarrierDetectedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNethernetCarrierDetectedTrap.setStatus(
        ""
    )

luxNtimingPriorityChangedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2096)
)
luxNtimingPriorityChangedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNtimingPriorityChangedTrap.setStatus(
        ""
    )

luxNopenFiberCPEAlarmTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2097)
)
luxNopenFiberCPEAlarmTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNopenFiberCPEAlarmTrap.setStatus(
        ""
    )

luxNopenFiberCPEAlarmResolvedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2098)
)
luxNopenFiberCPEAlarmResolvedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNopenFiberCPEAlarmResolvedTrap.setStatus(
        ""
    )

luxNstandbyMPMDetectedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2099)
)
luxNstandbyMPMDetectedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNstandbyMPMDetectedTrap.setStatus(
        ""
    )

luxNstandbyMPMLostTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2100)
)
luxNstandbyMPMLostTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNstandbyMPMLostTrap.setStatus(
        ""
    )

luxNprotectionLinkFailureTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2101)
)
luxNprotectionLinkFailureTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNprotectionLinkFailureTrap.setStatus(
        ""
    )

luxNprotectionLinkFailureResolvedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2102)
)
luxNprotectionLinkFailureResolvedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNprotectionLinkFailureResolvedTrap.setStatus(
        ""
    )

luxNtopologyDatabaseChangedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2103)
)
luxNtopologyDatabaseChangedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNtopologyDatabaseChangedTrap.setStatus(
        ""
    )

luxNredundantDatabaseCopyComplete = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2104)
)
luxNredundantDatabaseCopyComplete.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNredundantDatabaseCopyComplete.setStatus(
        ""
    )

luxNredundantDatabaseCopyFailed = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2105)
)
luxNredundantDatabaseCopyFailed.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNredundantDatabaseCopyFailed.setStatus(
        ""
    )

luxNimageExportInProgressTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2106)
)
luxNimageExportInProgressTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNimageExportInProgressTrap.setStatus(
        ""
    )

luxNimageExportSuccessTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2107)
)
luxNimageExportSuccessTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNimageExportSuccessTrap.setStatus(
        ""
    )

luxNimageExportFailedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2108)
)
luxNimageExportFailedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNimageExportFailedTrap.setStatus(
        ""
    )

luxNunknownCardTypeDetectedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2109)
)
luxNunknownCardTypeDetectedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNunknownCardTypeDetectedTrap.setStatus(
        ""
    )

luxNosamBiasCurrentOverLimitTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2110)
)
luxNosamBiasCurrentOverLimitTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamBiasCurrentOverLimitTrap.setStatus(
        ""
    )

luxNosamBiasCurrentNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2111)
)
luxNosamBiasCurrentNormal.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamBiasCurrentNormal.setStatus(
        ""
    )

luxNosamTecCurrentOverLimit = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2112)
)
luxNosamTecCurrentOverLimit.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamTecCurrentOverLimit.setStatus(
        ""
    )

luxNosamTecCurrentNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2113)
)
luxNosamTecCurrentNormal.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamTecCurrentNormal.setStatus(
        ""
    )

luxNosamLaserTemperatureDrift = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2114)
)
luxNosamLaserTemperatureDrift.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamLaserTemperatureDrift.setStatus(
        ""
    )

luxNosamLaserTemperatureStable = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2115)
)
luxNosamLaserTemperatureStable.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamLaserTemperatureStable.setStatus(
        ""
    )

luxNosamMaxInputPowerReached = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2116)
)
luxNosamMaxInputPowerReached.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamMaxInputPowerReached.setStatus(
        ""
    )

luxNosamInputPowerBackDownNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2117)
)
luxNosamInputPowerBackDownNormal.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamInputPowerBackDownNormal.setStatus(
        ""
    )

luxNosamMaxOutputPowerReached = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2118)
)
luxNosamMaxOutputPowerReached.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamMaxOutputPowerReached.setStatus(
        ""
    )

luxNosamOutputPowerNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2119)
)
luxNosamOutputPowerNormal.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamOutputPowerNormal.setStatus(
        ""
    )

luxNosamOpticalGainDeltaExceeded = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2120)
)
luxNosamOpticalGainDeltaExceeded.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamOpticalGainDeltaExceeded.setStatus(
        ""
    )

luxNosamOpticalGainDeltaNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2121)
)
luxNosamOpticalGainDeltaNormal.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamOpticalGainDeltaNormal.setStatus(
        ""
    )

luxNosamMinInputPowerBelowLimit = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2122)
)
luxNosamMinInputPowerBelowLimit.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamMinInputPowerBelowLimit.setStatus(
        ""
    )

luxNosamInputPowerBackUpNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2123)
)
luxNosamInputPowerBackUpNormal.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamInputPowerBackUpNormal.setStatus(
        ""
    )

luxNosamSingleAprSensorFailed = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2124)
)
luxNosamSingleAprSensorFailed.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamSingleAprSensorFailed.setStatus(
        ""
    )

luxNosamSingleAprSensorNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2125)
)
luxNosamSingleAprSensorNormal.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamSingleAprSensorNormal.setStatus(
        ""
    )

luxNosamDualAprSensorFailed = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2126)
)
luxNosamDualAprSensorFailed.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamDualAprSensorFailed.setStatus(
        ""
    )

luxNosamDualAprSensorNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2127)
)
luxNosamDualAprSensorNormal.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamDualAprSensorNormal.setStatus(
        ""
    )

luxNosamFiberDisconnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2128)
)
luxNosamFiberDisconnected.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamFiberDisconnected.setStatus(
        ""
    )

luxNosamFiberConnected = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2129)
)
luxNosamFiberConnected.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamFiberConnected.setStatus(
        ""
    )

luxNosamControlChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2130)
)
luxNosamControlChanged.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamControlChanged.setStatus(
        ""
    )

luxNosamLaserModuleOn = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2131)
)
luxNosamLaserModuleOn.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamLaserModuleOn.setStatus(
        ""
    )

luxNosamLaserModuleOff = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2132)
)
luxNosamLaserModuleOff.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNosamLaserModuleOff.setStatus(
        ""
    )

luxNipAuthenticationFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2133)
)
luxNipAuthenticationFailure.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNipAuthenticationFailure.setStatus(
        ""
    )

luxNftpCompletedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2134)
)
luxNftpCompletedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNftpCompletedTrap.setStatus(
        ""
    )

luxNftpHostFailedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2135)
)
luxNftpHostFailedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNftpHostFailedTrap.setStatus(
        ""
    )

luxNimageUpdateInProgressTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2136)
)
luxNimageUpdateInProgressTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNimageUpdateInProgressTrap.setStatus(
        ""
    )

luxNimageUpdateSuccessTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2137)
)
luxNimageUpdateSuccessTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNimageUpdateSuccessTrap.setStatus(
        ""
    )

luxNimageUpdateFailedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2138)
)
luxNimageUpdateFailedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNimageUpdateFailedTrap.setStatus(
        ""
    )

luxNmoduleUpdateInProgressTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2139)
)
luxNmoduleUpdateInProgressTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNmoduleUpdateInProgressTrap.setStatus(
        ""
    )

luxNmoduleUpdateSuccessTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2140)
)
luxNmoduleUpdateSuccessTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNmoduleUpdateSuccessTrap.setStatus(
        ""
    )

luxNmoduleUpdateFailedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2141)
)
luxNmoduleUpdateFailedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNmoduleUpdateFailedTrap.setStatus(
        ""
    )

luxNethernetLinkFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2142)
)
luxNethernetLinkFailure.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNethernetLinkFailure.setStatus(
        ""
    )

luxNethernetLinkFailureResolved = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2143)
)
luxNethernetLinkFailureResolved.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNethernetLinkFailureResolved.setStatus(
        ""
    )

luxNfanNotPresentTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2144)
)
luxNfanNotPresentTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNfanNotPresentTrap.setStatus(
        ""
    )

luxNcardMismatchTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2145)
)
luxNcardMismatchTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNcardMismatchTrap.setStatus(
        ""
    )

luxNpwrFeedLowVoltageTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2146)
)
luxNpwrFeedLowVoltageTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNpwrFeedLowVoltageTrap.setStatus(
        ""
    )

luxNpwrFeedLowVoltageRecoveryTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2147)
)
luxNpwrFeedLowVoltageRecoveryTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNpwrFeedLowVoltageRecoveryTrap.setStatus(
        ""
    )

luxNpwrFeedOKTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2148)
)
luxNpwrFeedOKTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNpwrFeedOKTrap.setStatus(
        ""
    )

luxNpwrFeedFailureTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2149)
)
luxNpwrFeedFailureTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNpwrFeedFailureTrap.setStatus(
        ""
    )

luxNpwrFeedBrkOpenTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2150)
)
luxNpwrFeedBrkOpenTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNpwrFeedBrkOpenTrap.setStatus(
        ""
    )

luxNextCritAlmInpTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2151)
)
luxNextCritAlmInpTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNextCritAlmInpTrap.setStatus(
        ""
    )

luxNextMajAlmInpTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2152)
)
luxNextMajAlmInpTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNextMajAlmInpTrap.setStatus(
        ""
    )

luxNextMinorAlmInpTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2153)
)
luxNextMinorAlmInpTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNextMinorAlmInpTrap.setStatus(
        ""
    )

luxNextClearAlmInpTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2154)
)
luxNextClearAlmInpTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNextClearAlmInpTrap.setStatus(
        ""
    )

luxNpwrFeedOverVoltageTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2155)
)
luxNpwrFeedOverVoltageTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNpwrFeedOverVoltageTrap.setStatus(
        ""
    )

luxNpwrFeedOverVoltageRecoveryTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2156)
)
luxNpwrFeedOverVoltageRecoveryTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNpwrFeedOverVoltageRecoveryTrap.setStatus(
        ""
    )

luxNstandbySWMismatchTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2157)
)
luxNstandbySWMismatchTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNstandbySWMismatchTrap.setStatus(
        ""
    )

luxNstandbyDBNotSupportedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2158)
)
luxNstandbyDBNotSupportedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNstandbyDBNotSupportedTrap.setStatus(
        ""
    )

luxNactiveStandbySWAlignedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2159)
)
luxNactiveStandbySWAlignedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNactiveStandbySWAlignedTrap.setStatus(
        ""
    )

luxNactiveStandbyDBAlignedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2160)
)
luxNactiveStandbyDBAlignedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNactiveStandbyDBAlignedTrap.setStatus(
        ""
    )

luxNmcmescTestSequenceOnTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2161)
)
luxNmcmescTestSequenceOnTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNmcmescTestSequenceOnTrap.setStatus(
        ""
    )

luxNmcmescTestSequenceOffTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2162)
)
luxNmcmescTestSequenceOffTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNmcmescTestSequenceOffTrap.setStatus(
        ""
    )

luxNselfTestStartedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2163)
)
luxNselfTestStartedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNselfTestStartedTrap.setStatus(
        ""
    )

luxNselfTestEndedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2164)
)
luxNselfTestEndedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNselfTestEndedTrap.setStatus(
        ""
    )

luxNvoadmMuxSetPointOutOfRange = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2165)
)
luxNvoadmMuxSetPointOutOfRange.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNvoadmMuxSetPointOutOfRange.setStatus(
        ""
    )

luxNvoadmDemuxForceConfig = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2166)
)
luxNvoadmDemuxForceConfig.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNvoadmDemuxForceConfig.setStatus(
        ""
    )

luxNSfpNotPresent = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2167)
)
luxNSfpNotPresent.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNSfpNotPresent.setStatus(
        ""
    )

luxNSfpPresent = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2168)
)
luxNSfpPresent.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNSfpPresent.setStatus(
        ""
    )

luxNSfpFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2169)
)
luxNSfpFailure.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNSfpFailure.setStatus(
        ""
    )

luxNSfpFailureResolved = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2170)
)
luxNSfpFailureResolved.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNSfpFailureResolved.setStatus(
        ""
    )

luxNSfpNotAuthorized = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2171)
)
luxNSfpNotAuthorized.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNSfpNotAuthorized.setStatus(
        ""
    )

luxNSfpAuthorized = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2172)
)
luxNSfpAuthorized.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNSfpAuthorized.setStatus(
        ""
    )

luxNSfpRateMismatch = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2173)
)
luxNSfpRateMismatch.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNSfpRateMismatch.setStatus(
        ""
    )

luxNSfpRateMismatchResolved = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2174)
)
luxNSfpRateMismatchResolved.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNSfpRateMismatchResolved.setStatus(
        ""
    )

luxNLinkRxSignalDegraded = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2175)
)
luxNLinkRxSignalDegraded.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNLinkRxSignalDegraded.setStatus(
        ""
    )

luxNLinkRxSignalDegradedResolved = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2176)
)
luxNLinkRxSignalDegradedResolved.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNLinkRxSignalDegradedResolved.setStatus(
        ""
    )

luxNLinkTxFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2177)
)
luxNLinkTxFault.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNLinkTxFault.setStatus(
        ""
    )

luxNLinkTxFaultResolved = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2178)
)
luxNLinkTxFaultResolved.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNLinkTxFaultResolved.setStatus(
        ""
    )

luxNPortTxFault = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2179)
)
luxNPortTxFault.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNPortTxFault.setStatus(
        ""
    )

luxNPortTxFaultResolved = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2180)
)
luxNPortTxFaultResolved.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNPortTxFaultResolved.setStatus(
        ""
    )

luxNXfpNotPresent = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2181)
)
luxNXfpNotPresent.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNXfpNotPresent.setStatus(
        ""
    )

luxNXfpPresent = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2182)
)
luxNXfpPresent.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNXfpPresent.setStatus(
        ""
    )

luxNXfpFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2183)
)
luxNXfpFailure.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNXfpFailure.setStatus(
        ""
    )

luxNXfpFailureResolved = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2184)
)
luxNXfpFailureResolved.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNXfpFailureResolved.setStatus(
        ""
    )

luxNXfpNotAuthorized = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2185)
)
luxNXfpNotAuthorized.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNXfpNotAuthorized.setStatus(
        ""
    )

luxNXfpAuthorized = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2186)
)
luxNXfpAuthorized.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNXfpAuthorized.setStatus(
        ""
    )

luxNXfpRateMismatch = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2187)
)
luxNXfpRateMismatch.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNXfpRateMismatch.setStatus(
        ""
    )

luxNXfpRateMismatchResolved = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2188)
)
luxNXfpRateMismatchResolved.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNXfpRateMismatchResolved.setStatus(
        ""
    )

luxNCpeXfpNotPresent = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2189)
)
luxNCpeXfpNotPresent.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNCpeXfpNotPresent.setStatus(
        ""
    )

luxNCpeXfpPresent = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2190)
)
luxNCpeXfpPresent.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNCpeXfpPresent.setStatus(
        ""
    )

luxNCpeXfpFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2191)
)
luxNCpeXfpFailure.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNCpeXfpFailure.setStatus(
        ""
    )

luxNCpeXfpFailureResolved = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2192)
)
luxNCpeXfpFailureResolved.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNCpeXfpFailureResolved.setStatus(
        ""
    )

luxNCpeXfpNotAuthorized = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2193)
)
luxNCpeXfpNotAuthorized.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNCpeXfpNotAuthorized.setStatus(
        ""
    )

luxNCpeXfpAuthorized = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2194)
)
luxNCpeXfpAuthorized.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNCpeXfpAuthorized.setStatus(
        ""
    )

luxNCpeXfpRateMismatch = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2195)
)
luxNCpeXfpRateMismatch.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNCpeXfpRateMismatch.setStatus(
        ""
    )

luxNCpeXfpRateMismatchResolved = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2196)
)
luxNCpeXfpRateMismatchResolved.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNCpeXfpRateMismatchResolved.setStatus(
        ""
    )

luxNOutOfFrame = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2197)
)
luxNOutOfFrame.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNOutOfFrame.setStatus(
        ""
    )

luxNOutOfFrameResolved = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2198)
)
luxNOutOfFrameResolved.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNOutOfFrameResolved.setStatus(
        ""
    )

luxNCpeLossOfFrame = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2199)
)
luxNCpeLossOfFrame.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNCpeLossOfFrame.setStatus(
        ""
    )

luxNCpeLossOfFrameResolved = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2200)
)
luxNCpeLossOfFrameResolved.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNCpeLossOfFrameResolved.setStatus(
        ""
    )

luxNCpeOutOfFrame = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2201)
)
luxNCpeOutOfFrame.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNCpeOutOfFrame.setStatus(
        ""
    )

luxNCpeOutOfFrameResolved = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2202)
)
luxNCpeOutOfFrameResolved.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNCpeOutOfFrameResolved.setStatus(
        ""
    )

luxNCdrFailure = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2203)
)
luxNCdrFailure.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNCdrFailure.setStatus(
        ""
    )

luxNCdrFailureResolved = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2204)
)
luxNCdrFailureResolved.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNCdrFailureResolved.setStatus(
        ""
    )

luxNBitError10Em3 = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2205)
)
luxNBitError10Em3.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNBitError10Em3.setStatus(
        ""
    )

luxNBitError10Em3Resolved = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2206)
)
luxNBitError10Em3Resolved.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNBitError10Em3Resolved.setStatus(
        ""
    )

luxNBitError10Em4 = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2207)
)
luxNBitError10Em4.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNBitError10Em4.setStatus(
        ""
    )

luxNBitError10Em4Resolved = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2208)
)
luxNBitError10Em4Resolved.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNBitError10Em4Resolved.setStatus(
        ""
    )

luxNBitError10Em6 = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2209)
)
luxNBitError10Em6.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNBitError10Em6.setStatus(
        ""
    )

luxNBitError10Em6Resolved = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2210)
)
luxNBitError10Em6Resolved.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNBitError10Em6Resolved.setStatus(
        ""
    )

luxNBitError10Em7 = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2211)
)
luxNBitError10Em7.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNBitError10Em7.setStatus(
        ""
    )

luxNBitError10Em7Resolved = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2212)
)
luxNBitError10Em7Resolved.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNBitError10Em7Resolved.setStatus(
        ""
    )

luxNAisReceived = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2213)
)
luxNAisReceived.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNAisReceived.setStatus(
        ""
    )

luxNAisReceivedResolved = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2214)
)
luxNAisReceivedResolved.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNAisReceivedResolved.setStatus(
        ""
    )

luxNAisTransmitted = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2215)
)
luxNAisTransmitted.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNAisTransmitted.setStatus(
        ""
    )

luxNAisTransmittedResolved = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2216)
)
luxNAisTransmittedResolved.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNAisTransmittedResolved.setStatus(
        ""
    )

luxNcaseTemperatureHiTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2225)
)
luxNcaseTemperatureHiTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNcaseTemperatureHiTrap.setStatus(
        ""
    )

luxNcaseTemperatureNormalTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2226)
)
luxNcaseTemperatureNormalTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNcaseTemperatureNormalTrap.setStatus(
        ""
    )

luxNcaseTemperatureLoTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2227)
)
luxNcaseTemperatureLoTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNcaseTemperatureLoTrap.setStatus(
        ""
    )

luxNcaseTemperatureLoNormalTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2228)
)
luxNcaseTemperatureLoNormalTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNcaseTemperatureLoNormalTrap.setStatus(
        ""
    )

luxNpumpTemperatureHiTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2229)
)
luxNpumpTemperatureHiTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNpumpTemperatureHiTrap.setStatus(
        ""
    )

luxNpumpTemperatureNormalTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2230)
)
luxNpumpTemperatureNormalTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNpumpTemperatureNormalTrap.setStatus(
        ""
    )

luxNcoilTemperatureHiTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2231)
)
luxNcoilTemperatureHiTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNcoilTemperatureHiTrap.setStatus(
        ""
    )

luxNcoilTemperatureNormalTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2232)
)
luxNcoilTemperatureNormalTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNcoilTemperatureNormalTrap.setStatus(
        ""
    )

luxNlossOutputPowerTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2233)
)
luxNlossOutputPowerTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNlossOutputPowerTrap.setStatus(
        ""
    )

luxNlossOutputPowerNormalTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2234)
)
luxNlossOutputPowerNormalTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNlossOutputPowerNormalTrap.setStatus(
        ""
    )

luxNreflectedOutputPowerHiTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2235)
)
luxNreflectedOutputPowerHiTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNreflectedOutputPowerHiTrap.setStatus(
        ""
    )

luxNreflectedOutputPowerNormalTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 2236)
)
luxNreflectedOutputPowerNormalTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNreflectedOutputPowerNormalTrap.setStatus(
        ""
    )

luxNlineRateNotSuppoted = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3001)
)
luxNlineRateNotSuppoted.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNlineRateNotSuppoted.setStatus(
        ""
    )

luxNmpmBootImageChangedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3002)
)
luxNmpmBootImageChangedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNmpmBootImageChangedTrap.setStatus(
        ""
    )

luxNdateTimeSetTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3003)
)
luxNdateTimeSetTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNdateTimeSetTrap.setStatus(
        ""
    )

luxNuserAddedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3004)
)
luxNuserAddedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNuserAddedTrap.setStatus(
        ""
    )

luxNuserDeletedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3005)
)
luxNuserDeletedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNuserDeletedTrap.setStatus(
        ""
    )

luxNuserPasswordChangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3006)
)
luxNuserPasswordChangeTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNuserPasswordChangeTrap.setStatus(
        ""
    )

luxNuserLevelModifiedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3007)
)
luxNuserLevelModifiedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNuserLevelModifiedTrap.setStatus(
        ""
    )

luxNsystemNameChangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3008)
)
luxNsystemNameChangeTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNsystemNameChangeTrap.setStatus(
        ""
    )

luxNcardAddedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3009)
)
luxNcardAddedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNcardAddedTrap.setStatus(
        ""
    )

luxNcardDeletedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3010)
)
luxNcardDeletedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNcardDeletedTrap.setStatus(
        ""
    )

luxNmpmRedundancySwitchOverTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3011)
)
luxNmpmRedundancySwitchOverTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNmpmRedundancySwitchOverTrap.setStatus(
        ""
    )

luxNconnectionAddedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3012)
)
luxNconnectionAddedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNconnectionAddedTrap.setStatus(
        ""
    )

luxNconnectionDeletedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3013)
)
luxNconnectionDeletedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNconnectionDeletedTrap.setStatus(
        ""
    )

luxNipAddressChangedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3014)
)
luxNipAddressChangedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNipAddressChangedTrap.setStatus(
        ""
    )

luxNipNetmaskChangedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3015)
)
luxNipNetmaskChangedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNipNetmaskChangedTrap.setStatus(
        ""
    )

luxNdefaultGatewayChangedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3016)
)
luxNdefaultGatewayChangedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNdefaultGatewayChangedTrap.setStatus(
        ""
    )

luxNGetCommunityChangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3017)
)
luxNGetCommunityChangeTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNGetCommunityChangeTrap.setStatus(
        ""
    )

luxNSetCommunityChangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3018)
)
luxNSetCommunityChangeTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNSetCommunityChangeTrap.setStatus(
        ""
    )

luxNModuleResetTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3019)
)
luxNModuleResetTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNModuleResetTrap.setStatus(
        ""
    )

luxNtopologyRediscoveredTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3020)
)
luxNtopologyRediscoveredTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNtopologyRediscoveredTrap.setStatus(
        ""
    )

luxNcolorsimEnabledTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3021)
)
luxNcolorsimEnabledTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNcolorsimEnabledTrap.setStatus(
        ""
    )

luxNcolorsimDisabledTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3022)
)
luxNcolorsimDisabledTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNcolorsimDisabledTrap.setStatus(
        ""
    )

luxNautoCutoffEnabledTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3023)
)
luxNautoCutoffEnabledTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNautoCutoffEnabledTrap.setStatus(
        ""
    )

luxNautoCutoffDisabledTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3024)
)
luxNautoCutoffDisabledTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNautoCutoffDisabledTrap.setStatus(
        ""
    )

luxNextAlarmsEnabledTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3025)
)
luxNextAlarmsEnabledTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNextAlarmsEnabledTrap.setStatus(
        ""
    )

luxNextAlarmsDisabledTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3026)
)
luxNextAlarmsDisabledTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNextAlarmsDisabledTrap.setStatus(
        ""
    )

luxNdlModuleActivatedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3027)
)
luxNdlModuleActivatedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNdlModuleActivatedTrap.setStatus(
        ""
    )

luxNhttpEnabledTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3032)
)
luxNhttpEnabledTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNhttpEnabledTrap.setStatus(
        ""
    )

luxNhttpDisabledTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3033)
)
luxNhttpDisabledTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNhttpDisabledTrap.setStatus(
        ""
    )

luxNstaticRouteAddedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3034)
)
luxNstaticRouteAddedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNstaticRouteAddedTrap.setStatus(
        ""
    )

luxNstaticRouteDeletedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3035)
)
luxNstaticRouteDeletedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNstaticRouteDeletedTrap.setStatus(
        ""
    )

luxNupsrProtectionSwitchOverSrc = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3036)
)
luxNupsrProtectionSwitchOverSrc.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNupsrProtectionSwitchOverSrc.setStatus(
        ""
    )

luxNupsrProtectionSwitchOverDest = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3037)
)
luxNupsrProtectionSwitchOverDest.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNupsrProtectionSwitchOverDest.setStatus(
        ""
    )

luxNimnIpAddressChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3038)
)
luxNimnIpAddressChanged.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNimnIpAddressChanged.setStatus(
        ""
    )

luxNupsrNormal = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3039)
)
luxNupsrNormal.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNupsrNormal.setStatus(
        ""
    )

luxNupsrDegraded = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3040)
)
luxNupsrDegraded.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNupsrDegraded.setStatus(
        ""
    )

luxNusrOneAlarmAction = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3041)
)
luxNusrOneAlarmAction.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNusrOneAlarmAction.setStatus(
        ""
    )

luxNusrAllAlarmAction = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3042)
)
luxNusrAllAlarmAction.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNusrAllAlarmAction.setStatus(
        ""
    )

luxNringConfigurationChanged = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3047)
)
luxNringConfigurationChanged.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNringConfigurationChanged.setStatus(
        ""
    )

luxNeventLogCleared = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3048)
)
luxNeventLogCleared.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNeventLogCleared.setStatus(
        ""
    )

luxNextAlarmInpTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3049)
)
luxNextAlarmInpTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNextAlarmInpTrap.setStatus(
        ""
    )

luxNextAudioAlarmTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3050)
)
luxNextAudioAlarmTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNextAudioAlarmTrap.setStatus(
        ""
    )

luxNTrapHostConfigChangeTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3051)
)
luxNTrapHostConfigChangeTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNTrapHostConfigChangeTrap.setStatus(
        ""
    )

luxNTrapHostImnRouteEnabled = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3052)
)
luxNTrapHostImnRouteEnabled.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNTrapHostImnRouteEnabled.setStatus(
        ""
    )

luxNTrapHostImnRouteDisabled = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3053)
)
luxNTrapHostImnRouteDisabled.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNTrapHostImnRouteDisabled.setStatus(
        ""
    )

luxNTrapHostAutoUpdateEnabled = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3054)
)
luxNTrapHostAutoUpdateEnabled.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNTrapHostAutoUpdateEnabled.setStatus(
        ""
    )

luxNTrapHostAutoUpdateDisabled = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3055)
)
luxNTrapHostAutoUpdateDisabled.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNTrapHostAutoUpdateDisabled.setStatus(
        ""
    )

luxNTrapPathAdded = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3056)
)
luxNTrapPathAdded.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNTrapPathAdded.setStatus(
        ""
    )

luxNTrapPathDeleted = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3057)
)
luxNTrapPathDeleted.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNTrapPathDeleted.setStatus(
        ""
    )

luxNdlModuleActivateFailedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3058)
)
luxNdlModuleActivateFailedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNdlModuleActivateFailedTrap.setStatus(
        ""
    )

luxNLogServerAddedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3059)
)
luxNLogServerAddedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNLogServerAddedTrap.setStatus(
        ""
    )

luxNLogServerDeletedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3060)
)
luxNLogServerDeletedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNLogServerDeletedTrap.setStatus(
        ""
    )

luxNLogMaskChangedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3061)
)
luxNLogMaskChangedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNLogMaskChangedTrap.setStatus(
        ""
    )

luxNRadiusAuthChangedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3062)
)
luxNRadiusAuthChangedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNRadiusAuthChangedTrap.setStatus(
        ""
    )

luxNRadiusDefaultRealmChangedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3063)
)
luxNRadiusDefaultRealmChangedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNRadiusDefaultRealmChangedTrap.setStatus(
        ""
    )

luxNRadiusNasIdChangedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3064)
)
luxNRadiusNasIdChangedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNRadiusNasIdChangedTrap.setStatus(
        ""
    )

luxNRadiusRetriesChangedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3065)
)
luxNRadiusRetriesChangedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNRadiusRetriesChangedTrap.setStatus(
        ""
    )

luxNRadiusServerAddedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3066)
)
luxNRadiusServerAddedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNRadiusServerAddedTrap.setStatus(
        ""
    )

luxNRadiusServerDeletedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3067)
)
luxNRadiusServerDeletedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNRadiusServerDeletedTrap.setStatus(
        ""
    )

luxNRadiusServerModifiedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3068)
)
luxNRadiusServerModifiedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNRadiusServerModifiedTrap.setStatus(
        ""
    )

luxNRadiusTimeoutChangedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3069)
)
luxNRadiusTimeoutChangedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNRadiusTimeoutChangedTrap.setStatus(
        ""
    )

luxNSshEnabledTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3070)
)
luxNSshEnabledTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNSshEnabledTrap.setStatus(
        ""
    )

luxNSshDisabledTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3071)
)
luxNSshDisabledTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNSshDisabledTrap.setStatus(
        ""
    )

luxNSshKeySizeSetTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3072)
)
luxNSshKeySizeSetTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNSshKeySizeSetTrap.setStatus(
        ""
    )

luxNSshMaxSessionsSetTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3073)
)
luxNSshMaxSessionsSetTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNSshMaxSessionsSetTrap.setStatus(
        ""
    )

luxNSshKeyGeneratedTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 3074)
)
luxNSshKeyGeneratedTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNSshKeyGeneratedTrap.setStatus(
        ""
    )

luxNlogonIntruderTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 4000)
)
luxNlogonIntruderTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNlogonIntruderTrap.setStatus(
        ""
    )

luxNlogonSessionStarted = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 4001)
)
luxNlogonSessionStarted.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNlogonSessionStarted.setStatus(
        ""
    )

luxNlogonSessionClosed = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 4002)
)
luxNlogonSessionClosed.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNlogonSessionClosed.setStatus(
        ""
    )

luxNcpAuthenticationErrorTrap = NotificationType(
    (1, 3, 6, 1, 4, 1, 4253, 0, 4003)
)
luxNcpAuthenticationErrorTrap.setObjects(
      *(("LUXN-MIB", "eveDateTime"),
        ("LUXN-MIB", "eveEventId"),
        ("LUXN-MIB", "eveDescr"),
        ("LUXN-MIB", "eveSeverity"),
        ("LUXN-MIB", "eveSysStatus"),
        ("LUXN-MIB", "eveSource"),
        ("LUXN-MIB", "cpIpAddress"),
        ("LUXN-MIB", "eveSeqNum"))
)
if mibBuilder.loadTexts:
    luxNcpAuthenticationErrorTrap.setStatus(
        ""
    )


# Notifications groups


# Agent capabilities


# Module compliance


# Export all MIB objects to the MIB builder

mibBuilder.exportSymbols(
    "LUXN-MIB",
    **{"FlagType": FlagType,
       "ResetType": ResetType,
       "RebootType": RebootType,
       "Boolean": Boolean,
       "ChassisType": ChassisType,
       "CardLocation": CardLocation,
       "CardShelf": CardShelf,
       "CardSlot": CardSlot,
       "ShelfInput": ShelfInput,
       "SlotInput": SlotInput,
       "CardName": CardName,
       "LinkName": LinkName,
       "CardType": CardType,
       "CardStatus": CardStatus,
       "CardState": CardState,
       "RedundancyMode": RedundancyMode,
       "NodeName": NodeName,
       "PortIndex": PortIndex,
       "CardCycleMode": CardCycleMode,
       "TrapStatus": TrapStatus,
       "HistoryMode": HistoryMode,
       "EventBuffer": EventBuffer,
       "UserBuffer": UserBuffer,
       "LogonID": LogonID,
       "HashedPasswd": HashedPasswd,
       "EncryptedCommunity": EncryptedCommunity,
       "FileName": FileName,
       "EntityName": EntityName,
       "DateAndTime": DateAndTime,
       "VersionString": VersionString,
       "SerialString": SerialString,
       "SfpSerialString": SfpSerialString,
       "ModelString": ModelString,
       "ModelNum": ModelNum,
       "FtpMode": FtpMode,
       "DownloadType": DownloadType,
       "DownloadLocation": DownloadLocation,
       "DownloadShelf": DownloadShelf,
       "DownloadSlot": DownloadSlot,
       "OSMode": OSMode,
       "ReleaseDate": ReleaseDate,
       "OSState": OSState,
       "UpdateOSMode": UpdateOSMode,
       "DownloadStatus": DownloadStatus,
       "RingIdName": RingIdName,
       "PathIdName": PathIdName,
       "Timezone": Timezone,
       "AlarmType": AlarmType,
       "ZmsAdminString": ZmsAdminString,
       "ZmsFileName": ZmsFileName,
       "luxN": luxN,
       "luxNGenericTrap": luxNGenericTrap,
       "luxNVoadmDetectorFailureTrap": luxNVoadmDetectorFailureTrap,
       "luxNVoadmDetectorFailureResolvedTrap": luxNVoadmDetectorFailureResolvedTrap,
       "luxNVoadmOutofRangeTrap": luxNVoadmOutofRangeTrap,
       "luxNVoadmOutofRangeResolvedTrap": luxNVoadmOutofRangeResolvedTrap,
       "luxNsignalStrengthHighTrap": luxNsignalStrengthHighTrap,
       "luxNsignalStrengthLowTrap": luxNsignalStrengthLowTrap,
       "luxNsignalStrengthNormalTrap": luxNsignalStrengthNormalTrap,
       "luxNlaserPowerOutOfRangeTrap": luxNlaserPowerOutOfRangeTrap,
       "luxNlaserPowerNormalTrap": luxNlaserPowerNormalTrap,
       "luxNberHighThresholdExceeded": luxNberHighThresholdExceeded,
       "luxNberHighThresholdExceededNormal": luxNberHighThresholdExceededNormal,
       "luxNberModerateThresholdExceeded": luxNberModerateThresholdExceeded,
       "luxNberModerateThresholdExceededNormal": luxNberModerateThresholdExceededNormal,
       "luxNSNMPKeepalive": luxNSNMPKeepalive,
       "luxNSNMPKeepalivesEnabled": luxNSNMPKeepalivesEnabled,
       "luxNSNMPKeepalivesDisabled": luxNSNMPKeepalivesDisabled,
       "luxNSNMPKeepaliveIntervalChanged": luxNSNMPKeepaliveIntervalChanged,
       "luxNTelnetClientEnabled": luxNTelnetClientEnabled,
       "luxNTelnetClientDisabled": luxNTelnetClientDisabled,
       "luxNsnmpAuthenticationFailureTrap": luxNsnmpAuthenticationFailureTrap,
       "luxNcoldStartTrap": luxNcoldStartTrap,
       "luxNwarmStartTrap": luxNwarmStartTrap,
       "luxNlossOfLightResolvedTrap": luxNlossOfLightResolvedTrap,
       "luxNlossOfLightDetectedTrap": luxNlossOfLightDetectedTrap,
       "luxNntpEnableTrap": luxNntpEnableTrap,
       "luxNntpDisableTrap": luxNntpDisableTrap,
       "luxNntpTimeServerChangedTrap": luxNntpTimeServerChangedTrap,
       "luxNntpUpdateIntervalChangedTrap": luxNntpUpdateIntervalChangedTrap,
       "luxNtimeZoneChangedTrap": luxNtimeZoneChangedTrap,
       "luxNspiConnectionUpTrap": luxNspiConnectionUpTrap,
       "luxNcardLostTrap": luxNcardLostTrap,
       "luxNConfigChangeTrap": luxNConfigChangeTrap,
       "luxNstatsPollFailedTrap": luxNstatsPollFailedTrap,
       "luxNCardFoundTrap": luxNCardFoundTrap,
       "luxNlocalLoopbackEnabledTrap": luxNlocalLoopbackEnabledTrap,
       "luxNremoteLoopbackEnabledTrap": luxNremoteLoopbackEnabledTrap,
       "luxNlocalLoopbackDisabledTrap": luxNlocalLoopbackDisabledTrap,
       "luxNremoteLoopbackDisabledTrap": luxNremoteLoopbackDisabledTrap,
       "luxNftpSessionInitiatedTrap": luxNftpSessionInitiatedTrap,
       "luxNuserResetStatusTrap": luxNuserResetStatusTrap,
       "luxNprotectionSwitchTrap": luxNprotectionSwitchTrap,
       "luxNipAddressErrorTrap": luxNipAddressErrorTrap,
       "luxNipNetmaskErrorTrap": luxNipNetmaskErrorTrap,
       "luxNdefaultGatewayErrorTrap": luxNdefaultGatewayErrorTrap,
       "luxNlossOfSignalTrap": luxNlossOfSignalTrap,
       "luxNlossOfSignalNormalTrap": luxNlossOfSignalNormalTrap,
       "luxNlossOfFrameTrap": luxNlossOfFrameTrap,
       "luxNlossOfFrameNormalTrap": luxNlossOfFrameNormalTrap,
       "luxNrecvAISTrap": luxNrecvAISTrap,
       "luxNrecvAISNormalTrap": luxNrecvAISNormalTrap,
       "luxNrecvYellowAlarmTrap": luxNrecvYellowAlarmTrap,
       "luxNrecvYellowAlarmNormalTrap": luxNrecvYellowAlarmNormalTrap,
       "luxNlineCodeViolationTrap": luxNlineCodeViolationTrap,
       "luxNlineCodeViolationNormalTrap": luxNlineCodeViolationNormalTrap,
       "luxNframingAlarmTrap": luxNframingAlarmTrap,
       "luxNframingAlarmNormalTrap": luxNframingAlarmNormalTrap,
       "luxNlossOfTimingTrap": luxNlossOfTimingTrap,
       "luxNlossOfTimingNormalTrap": luxNlossOfTimingNormalTrap,
       "luxNselfTestFailTrap": luxNselfTestFailTrap,
       "luxNselfTestPassTrap": luxNselfTestPassTrap,
       "luxNIbmDownTrap": luxNIbmDownTrap,
       "luxNIbmNormalTrap": luxNIbmNormalTrap,
       "luxNnearendCardLoopbackEnabledTrap": luxNnearendCardLoopbackEnabledTrap,
       "luxNnearendCardLoopbackDisabledTrap": luxNnearendCardLoopbackDisabledTrap,
       "luxNnetworkPortLoopbackEnabledTrap": luxNnetworkPortLoopbackEnabledTrap,
       "luxNnetworkPortLoopbackDisabledTrap": luxNnetworkPortLoopbackDisabledTrap,
       "luxNnetworkCardLoopbackEnabledTrap": luxNnetworkCardLoopbackEnabledTrap,
       "luxNnetworkCardLoopbackDisabledTrap": luxNnetworkCardLoopbackDisabledTrap,
       "luxNnearendPortLoopbackEnabledTrap": luxNnearendPortLoopbackEnabledTrap,
       "luxNnearendPortLoopbackDisabledTrap": luxNnearendPortLoopbackDisabledTrap,
       "luxNpowerSupplyNotPresentTrap": luxNpowerSupplyNotPresentTrap,
       "luxNpowerSupplyOKTrap": luxNpowerSupplyOKTrap,
       "luxNpowerSupplyDegradedTrap": luxNpowerSupplyDegradedTrap,
       "luxNpowerSupplyFailureTrap": luxNpowerSupplyFailureTrap,
       "luxNfanOKTrap": luxNfanOKTrap,
       "luxNfanFailureTrap": luxNfanFailureTrap,
       "luxNcsimDataUnavailableTrap": luxNcsimDataUnavailableTrap,
       "luxNcsimDataAvailableTrap": luxNcsimDataAvailableTrap,
       "luxNcsimModuleFailureTrap": luxNcsimModuleFailureTrap,
       "luxNethernetLossOfCarrierTrap": luxNethernetLossOfCarrierTrap,
       "luxNethernetCarrierDetectedTrap": luxNethernetCarrierDetectedTrap,
       "luxNtimingPriorityChangedTrap": luxNtimingPriorityChangedTrap,
       "luxNopenFiberCPEAlarmTrap": luxNopenFiberCPEAlarmTrap,
       "luxNopenFiberCPEAlarmResolvedTrap": luxNopenFiberCPEAlarmResolvedTrap,
       "luxNstandbyMPMDetectedTrap": luxNstandbyMPMDetectedTrap,
       "luxNstandbyMPMLostTrap": luxNstandbyMPMLostTrap,
       "luxNprotectionLinkFailureTrap": luxNprotectionLinkFailureTrap,
       "luxNprotectionLinkFailureResolvedTrap": luxNprotectionLinkFailureResolvedTrap,
       "luxNtopologyDatabaseChangedTrap": luxNtopologyDatabaseChangedTrap,
       "luxNredundantDatabaseCopyComplete": luxNredundantDatabaseCopyComplete,
       "luxNredundantDatabaseCopyFailed": luxNredundantDatabaseCopyFailed,
       "luxNimageExportInProgressTrap": luxNimageExportInProgressTrap,
       "luxNimageExportSuccessTrap": luxNimageExportSuccessTrap,
       "luxNimageExportFailedTrap": luxNimageExportFailedTrap,
       "luxNunknownCardTypeDetectedTrap": luxNunknownCardTypeDetectedTrap,
       "luxNosamBiasCurrentOverLimitTrap": luxNosamBiasCurrentOverLimitTrap,
       "luxNosamBiasCurrentNormal": luxNosamBiasCurrentNormal,
       "luxNosamTecCurrentOverLimit": luxNosamTecCurrentOverLimit,
       "luxNosamTecCurrentNormal": luxNosamTecCurrentNormal,
       "luxNosamLaserTemperatureDrift": luxNosamLaserTemperatureDrift,
       "luxNosamLaserTemperatureStable": luxNosamLaserTemperatureStable,
       "luxNosamMaxInputPowerReached": luxNosamMaxInputPowerReached,
       "luxNosamInputPowerBackDownNormal": luxNosamInputPowerBackDownNormal,
       "luxNosamMaxOutputPowerReached": luxNosamMaxOutputPowerReached,
       "luxNosamOutputPowerNormal": luxNosamOutputPowerNormal,
       "luxNosamOpticalGainDeltaExceeded": luxNosamOpticalGainDeltaExceeded,
       "luxNosamOpticalGainDeltaNormal": luxNosamOpticalGainDeltaNormal,
       "luxNosamMinInputPowerBelowLimit": luxNosamMinInputPowerBelowLimit,
       "luxNosamInputPowerBackUpNormal": luxNosamInputPowerBackUpNormal,
       "luxNosamSingleAprSensorFailed": luxNosamSingleAprSensorFailed,
       "luxNosamSingleAprSensorNormal": luxNosamSingleAprSensorNormal,
       "luxNosamDualAprSensorFailed": luxNosamDualAprSensorFailed,
       "luxNosamDualAprSensorNormal": luxNosamDualAprSensorNormal,
       "luxNosamFiberDisconnected": luxNosamFiberDisconnected,
       "luxNosamFiberConnected": luxNosamFiberConnected,
       "luxNosamControlChanged": luxNosamControlChanged,
       "luxNosamLaserModuleOn": luxNosamLaserModuleOn,
       "luxNosamLaserModuleOff": luxNosamLaserModuleOff,
       "luxNipAuthenticationFailure": luxNipAuthenticationFailure,
       "luxNftpCompletedTrap": luxNftpCompletedTrap,
       "luxNftpHostFailedTrap": luxNftpHostFailedTrap,
       "luxNimageUpdateInProgressTrap": luxNimageUpdateInProgressTrap,
       "luxNimageUpdateSuccessTrap": luxNimageUpdateSuccessTrap,
       "luxNimageUpdateFailedTrap": luxNimageUpdateFailedTrap,
       "luxNmoduleUpdateInProgressTrap": luxNmoduleUpdateInProgressTrap,
       "luxNmoduleUpdateSuccessTrap": luxNmoduleUpdateSuccessTrap,
       "luxNmoduleUpdateFailedTrap": luxNmoduleUpdateFailedTrap,
       "luxNethernetLinkFailure": luxNethernetLinkFailure,
       "luxNethernetLinkFailureResolved": luxNethernetLinkFailureResolved,
       "luxNfanNotPresentTrap": luxNfanNotPresentTrap,
       "luxNcardMismatchTrap": luxNcardMismatchTrap,
       "luxNpwrFeedLowVoltageTrap": luxNpwrFeedLowVoltageTrap,
       "luxNpwrFeedLowVoltageRecoveryTrap": luxNpwrFeedLowVoltageRecoveryTrap,
       "luxNpwrFeedOKTrap": luxNpwrFeedOKTrap,
       "luxNpwrFeedFailureTrap": luxNpwrFeedFailureTrap,
       "luxNpwrFeedBrkOpenTrap": luxNpwrFeedBrkOpenTrap,
       "luxNextCritAlmInpTrap": luxNextCritAlmInpTrap,
       "luxNextMajAlmInpTrap": luxNextMajAlmInpTrap,
       "luxNextMinorAlmInpTrap": luxNextMinorAlmInpTrap,
       "luxNextClearAlmInpTrap": luxNextClearAlmInpTrap,
       "luxNpwrFeedOverVoltageTrap": luxNpwrFeedOverVoltageTrap,
       "luxNpwrFeedOverVoltageRecoveryTrap": luxNpwrFeedOverVoltageRecoveryTrap,
       "luxNstandbySWMismatchTrap": luxNstandbySWMismatchTrap,
       "luxNstandbyDBNotSupportedTrap": luxNstandbyDBNotSupportedTrap,
       "luxNactiveStandbySWAlignedTrap": luxNactiveStandbySWAlignedTrap,
       "luxNactiveStandbyDBAlignedTrap": luxNactiveStandbyDBAlignedTrap,
       "luxNmcmescTestSequenceOnTrap": luxNmcmescTestSequenceOnTrap,
       "luxNmcmescTestSequenceOffTrap": luxNmcmescTestSequenceOffTrap,
       "luxNselfTestStartedTrap": luxNselfTestStartedTrap,
       "luxNselfTestEndedTrap": luxNselfTestEndedTrap,
       "luxNvoadmMuxSetPointOutOfRange": luxNvoadmMuxSetPointOutOfRange,
       "luxNvoadmDemuxForceConfig": luxNvoadmDemuxForceConfig,
       "luxNSfpNotPresent": luxNSfpNotPresent,
       "luxNSfpPresent": luxNSfpPresent,
       "luxNSfpFailure": luxNSfpFailure,
       "luxNSfpFailureResolved": luxNSfpFailureResolved,
       "luxNSfpNotAuthorized": luxNSfpNotAuthorized,
       "luxNSfpAuthorized": luxNSfpAuthorized,
       "luxNSfpRateMismatch": luxNSfpRateMismatch,
       "luxNSfpRateMismatchResolved": luxNSfpRateMismatchResolved,
       "luxNLinkRxSignalDegraded": luxNLinkRxSignalDegraded,
       "luxNLinkRxSignalDegradedResolved": luxNLinkRxSignalDegradedResolved,
       "luxNLinkTxFault": luxNLinkTxFault,
       "luxNLinkTxFaultResolved": luxNLinkTxFaultResolved,
       "luxNPortTxFault": luxNPortTxFault,
       "luxNPortTxFaultResolved": luxNPortTxFaultResolved,
       "luxNXfpNotPresent": luxNXfpNotPresent,
       "luxNXfpPresent": luxNXfpPresent,
       "luxNXfpFailure": luxNXfpFailure,
       "luxNXfpFailureResolved": luxNXfpFailureResolved,
       "luxNXfpNotAuthorized": luxNXfpNotAuthorized,
       "luxNXfpAuthorized": luxNXfpAuthorized,
       "luxNXfpRateMismatch": luxNXfpRateMismatch,
       "luxNXfpRateMismatchResolved": luxNXfpRateMismatchResolved,
       "luxNCpeXfpNotPresent": luxNCpeXfpNotPresent,
       "luxNCpeXfpPresent": luxNCpeXfpPresent,
       "luxNCpeXfpFailure": luxNCpeXfpFailure,
       "luxNCpeXfpFailureResolved": luxNCpeXfpFailureResolved,
       "luxNCpeXfpNotAuthorized": luxNCpeXfpNotAuthorized,
       "luxNCpeXfpAuthorized": luxNCpeXfpAuthorized,
       "luxNCpeXfpRateMismatch": luxNCpeXfpRateMismatch,
       "luxNCpeXfpRateMismatchResolved": luxNCpeXfpRateMismatchResolved,
       "luxNOutOfFrame": luxNOutOfFrame,
       "luxNOutOfFrameResolved": luxNOutOfFrameResolved,
       "luxNCpeLossOfFrame": luxNCpeLossOfFrame,
       "luxNCpeLossOfFrameResolved": luxNCpeLossOfFrameResolved,
       "luxNCpeOutOfFrame": luxNCpeOutOfFrame,
       "luxNCpeOutOfFrameResolved": luxNCpeOutOfFrameResolved,
       "luxNCdrFailure": luxNCdrFailure,
       "luxNCdrFailureResolved": luxNCdrFailureResolved,
       "luxNBitError10Em3": luxNBitError10Em3,
       "luxNBitError10Em3Resolved": luxNBitError10Em3Resolved,
       "luxNBitError10Em4": luxNBitError10Em4,
       "luxNBitError10Em4Resolved": luxNBitError10Em4Resolved,
       "luxNBitError10Em6": luxNBitError10Em6,
       "luxNBitError10Em6Resolved": luxNBitError10Em6Resolved,
       "luxNBitError10Em7": luxNBitError10Em7,
       "luxNBitError10Em7Resolved": luxNBitError10Em7Resolved,
       "luxNAisReceived": luxNAisReceived,
       "luxNAisReceivedResolved": luxNAisReceivedResolved,
       "luxNAisTransmitted": luxNAisTransmitted,
       "luxNAisTransmittedResolved": luxNAisTransmittedResolved,
       "luxNcaseTemperatureHiTrap": luxNcaseTemperatureHiTrap,
       "luxNcaseTemperatureNormalTrap": luxNcaseTemperatureNormalTrap,
       "luxNcaseTemperatureLoTrap": luxNcaseTemperatureLoTrap,
       "luxNcaseTemperatureLoNormalTrap": luxNcaseTemperatureLoNormalTrap,
       "luxNpumpTemperatureHiTrap": luxNpumpTemperatureHiTrap,
       "luxNpumpTemperatureNormalTrap": luxNpumpTemperatureNormalTrap,
       "luxNcoilTemperatureHiTrap": luxNcoilTemperatureHiTrap,
       "luxNcoilTemperatureNormalTrap": luxNcoilTemperatureNormalTrap,
       "luxNlossOutputPowerTrap": luxNlossOutputPowerTrap,
       "luxNlossOutputPowerNormalTrap": luxNlossOutputPowerNormalTrap,
       "luxNreflectedOutputPowerHiTrap": luxNreflectedOutputPowerHiTrap,
       "luxNreflectedOutputPowerNormalTrap": luxNreflectedOutputPowerNormalTrap,
       "luxNlineRateNotSuppoted": luxNlineRateNotSuppoted,
       "luxNmpmBootImageChangedTrap": luxNmpmBootImageChangedTrap,
       "luxNdateTimeSetTrap": luxNdateTimeSetTrap,
       "luxNuserAddedTrap": luxNuserAddedTrap,
       "luxNuserDeletedTrap": luxNuserDeletedTrap,
       "luxNuserPasswordChangeTrap": luxNuserPasswordChangeTrap,
       "luxNuserLevelModifiedTrap": luxNuserLevelModifiedTrap,
       "luxNsystemNameChangeTrap": luxNsystemNameChangeTrap,
       "luxNcardAddedTrap": luxNcardAddedTrap,
       "luxNcardDeletedTrap": luxNcardDeletedTrap,
       "luxNmpmRedundancySwitchOverTrap": luxNmpmRedundancySwitchOverTrap,
       "luxNconnectionAddedTrap": luxNconnectionAddedTrap,
       "luxNconnectionDeletedTrap": luxNconnectionDeletedTrap,
       "luxNipAddressChangedTrap": luxNipAddressChangedTrap,
       "luxNipNetmaskChangedTrap": luxNipNetmaskChangedTrap,
       "luxNdefaultGatewayChangedTrap": luxNdefaultGatewayChangedTrap,
       "luxNGetCommunityChangeTrap": luxNGetCommunityChangeTrap,
       "luxNSetCommunityChangeTrap": luxNSetCommunityChangeTrap,
       "luxNModuleResetTrap": luxNModuleResetTrap,
       "luxNtopologyRediscoveredTrap": luxNtopologyRediscoveredTrap,
       "luxNcolorsimEnabledTrap": luxNcolorsimEnabledTrap,
       "luxNcolorsimDisabledTrap": luxNcolorsimDisabledTrap,
       "luxNautoCutoffEnabledTrap": luxNautoCutoffEnabledTrap,
       "luxNautoCutoffDisabledTrap": luxNautoCutoffDisabledTrap,
       "luxNextAlarmsEnabledTrap": luxNextAlarmsEnabledTrap,
       "luxNextAlarmsDisabledTrap": luxNextAlarmsDisabledTrap,
       "luxNdlModuleActivatedTrap": luxNdlModuleActivatedTrap,
       "luxNhttpEnabledTrap": luxNhttpEnabledTrap,
       "luxNhttpDisabledTrap": luxNhttpDisabledTrap,
       "luxNstaticRouteAddedTrap": luxNstaticRouteAddedTrap,
       "luxNstaticRouteDeletedTrap": luxNstaticRouteDeletedTrap,
       "luxNupsrProtectionSwitchOverSrc": luxNupsrProtectionSwitchOverSrc,
       "luxNupsrProtectionSwitchOverDest": luxNupsrProtectionSwitchOverDest,
       "luxNimnIpAddressChanged": luxNimnIpAddressChanged,
       "luxNupsrNormal": luxNupsrNormal,
       "luxNupsrDegraded": luxNupsrDegraded,
       "luxNusrOneAlarmAction": luxNusrOneAlarmAction,
       "luxNusrAllAlarmAction": luxNusrAllAlarmAction,
       "luxNringConfigurationChanged": luxNringConfigurationChanged,
       "luxNeventLogCleared": luxNeventLogCleared,
       "luxNextAlarmInpTrap": luxNextAlarmInpTrap,
       "luxNextAudioAlarmTrap": luxNextAudioAlarmTrap,
       "luxNTrapHostConfigChangeTrap": luxNTrapHostConfigChangeTrap,
       "luxNTrapHostImnRouteEnabled": luxNTrapHostImnRouteEnabled,
       "luxNTrapHostImnRouteDisabled": luxNTrapHostImnRouteDisabled,
       "luxNTrapHostAutoUpdateEnabled": luxNTrapHostAutoUpdateEnabled,
       "luxNTrapHostAutoUpdateDisabled": luxNTrapHostAutoUpdateDisabled,
       "luxNTrapPathAdded": luxNTrapPathAdded,
       "luxNTrapPathDeleted": luxNTrapPathDeleted,
       "luxNdlModuleActivateFailedTrap": luxNdlModuleActivateFailedTrap,
       "luxNLogServerAddedTrap": luxNLogServerAddedTrap,
       "luxNLogServerDeletedTrap": luxNLogServerDeletedTrap,
       "luxNLogMaskChangedTrap": luxNLogMaskChangedTrap,
       "luxNRadiusAuthChangedTrap": luxNRadiusAuthChangedTrap,
       "luxNRadiusDefaultRealmChangedTrap": luxNRadiusDefaultRealmChangedTrap,
       "luxNRadiusNasIdChangedTrap": luxNRadiusNasIdChangedTrap,
       "luxNRadiusRetriesChangedTrap": luxNRadiusRetriesChangedTrap,
       "luxNRadiusServerAddedTrap": luxNRadiusServerAddedTrap,
       "luxNRadiusServerDeletedTrap": luxNRadiusServerDeletedTrap,
       "luxNRadiusServerModifiedTrap": luxNRadiusServerModifiedTrap,
       "luxNRadiusTimeoutChangedTrap": luxNRadiusTimeoutChangedTrap,
       "luxNSshEnabledTrap": luxNSshEnabledTrap,
       "luxNSshDisabledTrap": luxNSshDisabledTrap,
       "luxNSshKeySizeSetTrap": luxNSshKeySizeSetTrap,
       "luxNSshMaxSessionsSetTrap": luxNSshMaxSessionsSetTrap,
       "luxNSshKeyGeneratedTrap": luxNSshKeyGeneratedTrap,
       "luxNlogonIntruderTrap": luxNlogonIntruderTrap,
       "luxNlogonSessionStarted": luxNlogonSessionStarted,
       "luxNlogonSessionClosed": luxNlogonSessionClosed,
       "luxNcpAuthenticationErrorTrap": luxNcpAuthenticationErrorTrap,
       "configuration": configuration,
       "manufacturing": manufacturing,
       "mfgName": mfgName,
       "mfgDate": mfgDate,
       "mfgSerialNum": mfgSerialNum,
       "mfgModelType": mfgModelType,
       "mfgDefaultID": mfgDefaultID,
       "mfgDfltPasswd": mfgDfltPasswd,
       "mfgNumShelves": mfgNumShelves,
       "mfgShelfTable": mfgShelfTable,
       "mfgShelfEntry": mfgShelfEntry,
       "mfgShelfID": mfgShelfID,
       "mfgNumSlots": mfgNumSlots,
       "mfgCRCChecksum": mfgCRCChecksum,
       "mfgChassisType": mfgChassisType,
       "mfgPsType": mfgPsType,
       "mfgCleiNum": mfgCleiNum,
       "cp": cp,
       "cpIpAddress": cpIpAddress,
       "cpNetMask": cpNetMask,
       "cpMIBVersion": cpMIBVersion,
       "cpBootPromVer": cpBootPromVer,
       "cpROMSize": cpROMSize,
       "cpNumSubDiv": cpNumSubDiv,
       "cpSubDivTable": cpSubDivTable,
       "cpSubDivEntry": cpSubDivEntry,
       "cpSubDivIndex": cpSubDivIndex,
       "cpSubDivDescr": cpSubDivDescr,
       "cpSubDivSize": cpSubDivSize,
       "cpSubDivOffset": cpSubDivOffset,
       "cpSubDivImgVersion": cpSubDivImgVersion,
       "cpSubDivImgDBVersion": cpSubDivImgDBVersion,
       "cpTable": cpTable,
       "cpEntry": cpEntry,
       "cpCardShelf": cpCardShelf,
       "cpCardSlot": cpCardSlot,
       "cpMode": cpMode,
       "cpDsgntdMode": cpDsgntdMode,
       "cpState": cpState,
       "cpMacAddr": cpMacAddr,
       "cpName": cpName,
       "cpMfgDate": cpMfgDate,
       "cpSerialNum": cpSerialNum,
       "cpModelType": cpModelType,
       "cpFWVersionID": cpFWVersionID,
       "cpSetState": cpSetState,
       "cpHWName": cpHWName,
       "cpCleiNum": cpCleiNum,
       "cpModelNum": cpModelNum,
       "cpSetMode": cpSetMode,
       "cpSNMPTrapHost1": cpSNMPTrapHost1,
       "cpSNMPTrapHost2": cpSNMPTrapHost2,
       "cpSNMPTrapHost3": cpSNMPTrapHost3,
       "cpSNMPSendTrap": cpSNMPSendTrap,
       "cpGateway": cpGateway,
       "cpMaxSessions": cpMaxSessions,
       "cpSessionTimeout": cpSessionTimeout,
       "cpDate": cpDate,
       "cpTime": cpTime,
       "cpGetCommunity": cpGetCommunity,
       "cpSetCommunity": cpSetCommunity,
       "cpSystemName": cpSystemName,
       "cpSNMPTrapCommunity1": cpSNMPTrapCommunity1,
       "cpSNMPTrapCommunity2": cpSNMPTrapCommunity2,
       "cpSNMPTrapCommunity3": cpSNMPTrapCommunity3,
       "cpHttp": cpHttp,
       "cpIMNIpAddress": cpIMNIpAddress,
       "cpUpsrMode": cpUpsrMode,
       "cpAutoModuleUpdate": cpAutoModuleUpdate,
       "cpSNMPTrapHost4": cpSNMPTrapHost4,
       "cpSNMPTrapHost5": cpSNMPTrapHost5,
       "cpSNMPTrapCommunity4": cpSNMPTrapCommunity4,
       "cpSNMPTrapCommunity5": cpSNMPTrapCommunity5,
       "cpSNMPTrapHostPort1": cpSNMPTrapHostPort1,
       "cpSNMPTrapHostPort2": cpSNMPTrapHostPort2,
       "cpSNMPTrapHostPort3": cpSNMPTrapHostPort3,
       "cpSNMPTrapHostPort4": cpSNMPTrapHostPort4,
       "cpSNMPTrapHostPort5": cpSNMPTrapHostPort5,
       "cpRedunSubDivTable": cpRedunSubDivTable,
       "cpRedunSubDivEntry": cpRedunSubDivEntry,
       "cpRedunSubDivIndex": cpRedunSubDivIndex,
       "cpRedunSubDivDescr": cpRedunSubDivDescr,
       "cpRedunSubDivImgVersion": cpRedunSubDivImgVersion,
       "cpRedunSubDivImgDBVersion": cpRedunSubDivImgDBVersion,
       "cpTimezone": cpTimezone,
       "cpNtpState": cpNtpState,
       "cpNtpTimeserver": cpNtpTimeserver,
       "cpNtpUpdateInterval": cpNtpUpdateInterval,
       "cpTelnetClient": cpTelnetClient,
       "cpLogMask": cpLogMask,
       "cpLogServer1": cpLogServer1,
       "cpLogServer2": cpLogServer2,
       "cpLogServer3": cpLogServer3,
       "cpLogServer4": cpLogServer4,
       "cpLogServer5": cpLogServer5,
       "cc": cc,
       "ccBootPromVer": ccBootPromVer,
       "ccROMSize": ccROMSize,
       "ccNumSubDiv": ccNumSubDiv,
       "ccSubDivTable": ccSubDivTable,
       "ccSubDivEntry": ccSubDivEntry,
       "ccSubDivIndex": ccSubDivIndex,
       "ccSubDivDescr": ccSubDivDescr,
       "ccSubDivSize": ccSubDivSize,
       "ccSubDivOffset": ccSubDivOffset,
       "ccNumber": ccNumber,
       "ccTable": ccTable,
       "ccEntry": ccEntry,
       "ccCardLocation": ccCardLocation,
       "ccCardShelf": ccCardShelf,
       "ccCardSlot": ccCardSlot,
       "ccMfgDate": ccMfgDate,
       "ccSerialNum": ccSerialNum,
       "ccModelType": ccModelType,
       "ccName": ccName,
       "ccFWVersionID": ccFWVersionID,
       "ccMfgBiasCurrent": ccMfgBiasCurrent,
       "ccMfgModulation": ccMfgModulation,
       "ccMfgApc": ccMfgApc,
       "ccMfgIwmModulation": ccMfgIwmModulation,
       "ccMfgRefClock": ccMfgRefClock,
       "ccMfgClockDiv": ccMfgClockDiv,
       "ccBandwidth": ccBandwidth,
       "ccSetState": ccSetState,
       "connMuxChassis": connMuxChassis,
       "connMuxShelf": connMuxShelf,
       "connMuxSlot": connMuxSlot,
       "connMuxPort": connMuxPort,
       "connDemuxChassis": connDemuxChassis,
       "connDemuxShelf": connDemuxShelf,
       "connDemuxSlot": connDemuxSlot,
       "connDemuxPort": connDemuxPort,
       "ccModelNum": ccModelNum,
       "ccLinkITUNum": ccLinkITUNum,
       "ccLinkWavelength": ccLinkWavelength,
       "ccLaserType": ccLaserType,
       "ccRecvDiode": ccRecvDiode,
       "ccLinkAutoDisable": ccLinkAutoDisable,
       "ccLinkName": ccLinkName,
       "ccCsimModule": ccCsimModule,
       "ccHWName": ccHWName,
       "ccBackpackModule": ccBackpackModule,
       "ccBackpackRxITUNumber": ccBackpackRxITUNumber,
       "ccBackpackTxITUNumber": ccBackpackTxITUNumber,
       "ccBackpackRxInsertionLoss": ccBackpackRxInsertionLoss,
       "ccBackpackTxInsertionLoss": ccBackpackTxInsertionLoss,
       "ccBackpackRxExpressLoss": ccBackpackRxExpressLoss,
       "ccBackpackTxExpressLoss": ccBackpackTxExpressLoss,
       "ccSwitchByShelfSlot": ccSwitchByShelfSlot,
       "ccPathID": ccPathID,
       "ccCpeDisableThreshold": ccCpeDisableThreshold,
       "ccCpeReEnableThreshold": ccCpeReEnableThreshold,
       "connTxNonMuxDmuxCardType": connTxNonMuxDmuxCardType,
       "connTxNonMuxDmuxPort": connTxNonMuxDmuxPort,
       "connTxNonMuxDmuxShelf": connTxNonMuxDmuxShelf,
       "connTxNonMuxDmuxSlot": connTxNonMuxDmuxSlot,
       "connRxNonMuxDmuxCardType": connRxNonMuxDmuxCardType,
       "connRxNonMuxDmuxPort": connRxNonMuxDmuxPort,
       "connRxNonMuxDmuxShelf": connRxNonMuxDmuxShelf,
       "connRxNonMuxDmuxSlot": connRxNonMuxDmuxSlot,
       "ccUpsrMode": ccUpsrMode,
       "ccPairShelf": ccPairShelf,
       "ccPairSlot": ccPairSlot,
       "ccAdminState": ccAdminState,
       "ccRegenPairShelf": ccRegenPairShelf,
       "ccRegenPairSlot": ccRegenPairSlot,
       "ccCleiNum": ccCleiNum,
       "connCpeTxMcmescShelf": connCpeTxMcmescShelf,
       "connCpeTxMcmescSlot": connCpeTxMcmescSlot,
       "connCpeTxMcmescPort": connCpeTxMcmescPort,
       "connCpeRxMcmescShelf": connCpeRxMcmescShelf,
       "connCpeRxMcmescSlot": connCpeRxMcmescSlot,
       "connCpeRxMcmescPort": connCpeRxMcmescPort,
       "ccNumPorts": ccNumPorts,
       "mux": mux,
       "muxBootPromVer": muxBootPromVer,
       "muxROMSize": muxROMSize,
       "muxNumSubDiv": muxNumSubDiv,
       "muxSubDivTable": muxSubDivTable,
       "muxSubDivEntry": muxSubDivEntry,
       "muxSubDivIndex": muxSubDivIndex,
       "muxSubDivDescr": muxSubDivDescr,
       "muxSubDivSize": muxSubDivSize,
       "muxSubDivOffset": muxSubDivOffset,
       "muxNumber": muxNumber,
       "muxTable": muxTable,
       "muxEntry": muxEntry,
       "muxCardLocation": muxCardLocation,
       "muxCardShelf": muxCardShelf,
       "muxCardSlot": muxCardSlot,
       "muxModelNum": muxModelNum,
       "muxMfgDate": muxMfgDate,
       "muxSerialNum": muxSerialNum,
       "muxModelType": muxModelType,
       "muxName": muxName,
       "muxFWVersionID": muxFWVersionID,
       "muxSetState": muxSetState,
       "muxNumPorts": muxNumPorts,
       "muxUpgradeFlag": muxUpgradeFlag,
       "muxHWName": muxHWName,
       "muxPathID": muxPathID,
       "muxAdminState": muxAdminState,
       "muxCleiNum": muxCleiNum,
       "muxChannelSpacing": muxChannelSpacing,
       "muxStartItu": muxStartItu,
       "muxEndItu": muxEndItu,
       "muxChannelsPerBand": muxChannelsPerBand,
       "muxBands": muxBands,
       "muxPortNumber": muxPortNumber,
       "muxPortTable": muxPortTable,
       "muxPortEntry": muxPortEntry,
       "muxPortCardLocation": muxPortCardLocation,
       "muxPortCardShelf": muxPortCardShelf,
       "muxPortCardSlot": muxPortCardSlot,
       "muxPortIndex": muxPortIndex,
       "muxWavelength": muxWavelength,
       "muxInsertLoss": muxInsertLoss,
       "muxConnCardType": muxConnCardType,
       "muxConnLocation": muxConnLocation,
       "muxConnShelf": muxConnShelf,
       "muxConnSlot": muxConnSlot,
       "muxConnPort": muxConnPort,
       "muxPortType": muxPortType,
       "muxConnChassisID": muxConnChassisID,
       "muxConnSystemName": muxConnSystemName,
       "muxConnIpAddress": muxConnIpAddress,
       "muxPortAvgInsertionLoss": muxPortAvgInsertionLoss,
       "muxPortMaxInsertionLoss": muxPortMaxInsertionLoss,
       "muxPortTapRatio": muxPortTapRatio,
       "ps": ps,
       "psNumber": psNumber,
       "psTable": psTable,
       "psEntry": psEntry,
       "psID": psID,
       "psMode": psMode,
       "psMfgDate": psMfgDate,
       "psSerialNum": psSerialNum,
       "psModelType": psModelType,
       "download": download,
       "dlFtpTable": dlFtpTable,
       "dlFtpEntry": dlFtpEntry,
       "dlFtpIp": dlFtpIp,
       "dlFtpLogonID": dlFtpLogonID,
       "dlFtpPasswd": dlFtpPasswd,
       "dlFtpMode": dlFtpMode,
       "dlFtpPort": dlFtpPort,
       "dlPreQualTable": dlPreQualTable,
       "dlPreQualEntry": dlPreQualEntry,
       "dlPreQualTypeVersion": dlPreQualTypeVersion,
       "dlPreQualResult": dlPreQualResult,
       "dlDownloadTable": dlDownloadTable,
       "dlDownloadEntry": dlDownloadEntry,
       "dlType": dlType,
       "dlLocation": dlLocation,
       "dlShelf": dlShelf,
       "dlSlot": dlSlot,
       "dlFilename": dlFilename,
       "dlActivate": dlActivate,
       "dlExportType": dlExportType,
       "dlOSTable": dlOSTable,
       "dlOSEntry": dlOSEntry,
       "dlOSIndex": dlOSIndex,
       "dlOSVersion": dlOSVersion,
       "dlOSState": dlOSState,
       "dlOSRelDate": dlOSRelDate,
       "dlUpdateOS": dlUpdateOS,
       "fadm": fadm,
       "fadmBootPromVer": fadmBootPromVer,
       "fadmROMSize": fadmROMSize,
       "fadmNumSubDiv": fadmNumSubDiv,
       "fadmSubDivTable": fadmSubDivTable,
       "fadmSubDivEntry": fadmSubDivEntry,
       "fadmSubDivIndex": fadmSubDivIndex,
       "fadmSubDivDescr": fadmSubDivDescr,
       "fadmSubDivSize": fadmSubDivSize,
       "fadmSubDivOffset": fadmSubDivOffset,
       "fadmNumber": fadmNumber,
       "fadmTable": fadmTable,
       "fadmEntry": fadmEntry,
       "fadmCardLocation": fadmCardLocation,
       "fadmCardShelf": fadmCardShelf,
       "fadmCardSlot": fadmCardSlot,
       "fadmMfgDate": fadmMfgDate,
       "fadmSerialNum": fadmSerialNum,
       "fadmModelType": fadmModelType,
       "fadmName": fadmName,
       "fadmFWVersionID": fadmFWVersionID,
       "fadmSetState": fadmSetState,
       "fadmNumPorts": fadmNumPorts,
       "fadmUpgradeFlag": fadmUpgradeFlag,
       "fadmModelNum": fadmModelNum,
       "fadmITUNumber1": fadmITUNumber1,
       "fadmITUNumber2": fadmITUNumber2,
       "fadmInsertionLoss1": fadmInsertionLoss1,
       "fadmInsertionLoss2": fadmInsertionLoss2,
       "fadmExpressLoss": fadmExpressLoss,
       "fadmHWName": fadmHWName,
       "fadmPathID": fadmPathID,
       "fadmAdminState": fadmAdminState,
       "fadmCleiNum": fadmCleiNum,
       "fadmBand": fadmBand,
       "fadmChannelsPerBand": fadmChannelsPerBand,
       "fadmStartItu": fadmStartItu,
       "fadmEndItu": fadmEndItu,
       "fadmPortTable": fadmPortTable,
       "fadmPortEntry": fadmPortEntry,
       "fadmPortCardShelf": fadmPortCardShelf,
       "fadmPortCardSlot": fadmPortCardSlot,
       "fadmPortType": fadmPortType,
       "fadmConnLocation": fadmConnLocation,
       "fadmConnIpAddress": fadmConnIpAddress,
       "fadmConnChassisID": fadmConnChassisID,
       "fadmConnSystemName": fadmConnSystemName,
       "fadmConnCardType": fadmConnCardType,
       "fadmConnPort": fadmConnPort,
       "fadmConnShelf": fadmConnShelf,
       "fadmConnSlot": fadmConnSlot,
       "oppm": oppm,
       "oppmBootPromVer": oppmBootPromVer,
       "oppmROMSize": oppmROMSize,
       "oppmNumSubDiv": oppmNumSubDiv,
       "oppmSubDivTable": oppmSubDivTable,
       "oppmSubDivEntry": oppmSubDivEntry,
       "oppmSubDivIndex": oppmSubDivIndex,
       "oppmSubDivDescr": oppmSubDivDescr,
       "oppmSubDivSize": oppmSubDivSize,
       "oppmSubDivOffset": oppmSubDivOffset,
       "oppmNumber": oppmNumber,
       "oppmTable": oppmTable,
       "oppmEntry": oppmEntry,
       "oppmCardLocation": oppmCardLocation,
       "oppmCardShelf": oppmCardShelf,
       "oppmCardSlot": oppmCardSlot,
       "oppmModelNum": oppmModelNum,
       "oppmMfgDate": oppmMfgDate,
       "oppmSerialNum": oppmSerialNum,
       "oppmModelType": oppmModelType,
       "oppmName": oppmName,
       "oppmFWVersionID": oppmFWVersionID,
       "oppmSetState": oppmSetState,
       "oppmTxInsertLoss": oppmTxInsertLoss,
       "oppmRxInsertLoss": oppmRxInsertLoss,
       "oppmUpgradeFlag": oppmUpgradeFlag,
       "oppmSwitch": oppmSwitch,
       "oppmMarginForSwitch": oppmMarginForSwitch,
       "oppmHighAlarmMargin": oppmHighAlarmMargin,
       "oppmConfigCommit": oppmConfigCommit,
       "oppmHWName": oppmHWName,
       "oppmLinkAPathID": oppmLinkAPathID,
       "oppmLinkBPathID": oppmLinkBPathID,
       "oppmAdminState": oppmAdminState,
       "oppmCleiNum": oppmCleiNum,
       "oppmSwitchState": oppmSwitchState,
       "oppmPortTable": oppmPortTable,
       "oppmPortEntry": oppmPortEntry,
       "oppmPortCardShelf": oppmPortCardShelf,
       "oppmPortCardSlot": oppmPortCardSlot,
       "oppmPortType": oppmPortType,
       "oppmConnLocation": oppmConnLocation,
       "oppmConnIpAddress": oppmConnIpAddress,
       "oppmConnChassisID": oppmConnChassisID,
       "oppmConnSystemName": oppmConnSystemName,
       "oppmConnCardType": oppmConnCardType,
       "oppmConnPort": oppmConnPort,
       "oppmConnShelf": oppmConnShelf,
       "oppmConnSlot": oppmConnSlot,
       "mcm": mcm,
       "mcmBootPromVer": mcmBootPromVer,
       "mcmROMSize": mcmROMSize,
       "mcmNumSubDiv": mcmNumSubDiv,
       "mcmSubDivTable": mcmSubDivTable,
       "mcmSubDivEntry": mcmSubDivEntry,
       "mcmSubDivIndex": mcmSubDivIndex,
       "mcmSubDivDescr": mcmSubDivDescr,
       "mcmSubDivSize": mcmSubDivSize,
       "mcmSubDivOffset": mcmSubDivOffset,
       "mcmNumber": mcmNumber,
       "mcmTable": mcmTable,
       "mcmEntry": mcmEntry,
       "mcmCardLocation": mcmCardLocation,
       "mcmCardShelf": mcmCardShelf,
       "mcmCardSlot": mcmCardSlot,
       "mcmMfgDate": mcmMfgDate,
       "mcmSerialNum": mcmSerialNum,
       "mcmModelType": mcmModelType,
       "mcmName": mcmName,
       "mcmFWVersionID": mcmFWVersionID,
       "mcmAdminState": mcmAdminState,
       "mcmLaserTemperature": mcmLaserTemperature,
       "mcmBandwidth": mcmBandwidth,
       "mcmSetState": mcmSetState,
       "mcmNumPorts": mcmNumPorts,
       "mcmUpgradeFlag": mcmUpgradeFlag,
       "mcmEthernetStatus": mcmEthernetStatus,
       "mcmTimingPort": mcmTimingPort,
       "mcmModelNum": mcmModelNum,
       "mcmMfgBiasCurrent": mcmMfgBiasCurrent,
       "mcmMfgModulation": mcmMfgModulation,
       "mcmMfgApc": mcmMfgApc,
       "mcmMfgIwmModulation": mcmMfgIwmModulation,
       "mcmconnMuxShelf": mcmconnMuxShelf,
       "mcmconnMuxSlot": mcmconnMuxSlot,
       "mcmconnMuxPort": mcmconnMuxPort,
       "mcmconnDemuxShelf": mcmconnDemuxShelf,
       "mcmconnDemuxSlot": mcmconnDemuxSlot,
       "mcmconnDemuxPort": mcmconnDemuxPort,
       "mcmTimingPriority": mcmTimingPriority,
       "mcmLinkName": mcmLinkName,
       "mcmEthernetMode": mcmEthernetMode,
       "mcmHWName": mcmHWName,
       "mcmLinkWaveLength": mcmLinkWaveLength,
       "mcmFpgaVersionID": mcmFpgaVersionID,
       "mcmPathID": mcmPathID,
       "mcmCleiNum": mcmCleiNum,
       "mcmItuNum": mcmItuNum,
       "mcmPortNumber": mcmPortNumber,
       "mcmPortTable": mcmPortTable,
       "mcmPortEntry": mcmPortEntry,
       "mcmPortCardLocation": mcmPortCardLocation,
       "mcmPortCardShelf": mcmPortCardShelf,
       "mcmPortCardSlot": mcmPortCardSlot,
       "mcmPortIndex": mcmPortIndex,
       "mcmPortConnection": mcmPortConnection,
       "mcmPortFraming": mcmPortFraming,
       "mcmPortLineCoding": mcmPortLineCoding,
       "mcmPortLineEqualizer": mcmPortLineEqualizer,
       "mcmPortImpedance": mcmPortImpedance,
       "fn": fn,
       "fnNumber": fnNumber,
       "fnTable": fnTable,
       "fnEntry": fnEntry,
       "fnID": fnID,
       "fnMfgDate": fnMfgDate,
       "fnSerialNum": fnSerialNum,
       "fnModelType": fnModelType,
       "csim": csim,
       "csimSysMode": csimSysMode,
       "csimTable": csimTable,
       "csimEntry": csimEntry,
       "csimLocation": csimLocation,
       "csimShelf": csimShelf,
       "csimSlot": csimSlot,
       "csimMode": csimMode,
       "csimDCMode": csimDCMode,
       "csimGatingIntvl": csimGatingIntvl,
       "csimUpdtIntvl": csimUpdtIntvl,
       "csimSEIThreshold": csimSEIThreshold,
       "rpsm": rpsm,
       "rpsmBootPromVer": rpsmBootPromVer,
       "rpsmROMSize": rpsmROMSize,
       "rpsmNumSubDiv": rpsmNumSubDiv,
       "rpsmSubDivTable": rpsmSubDivTable,
       "rpsmSubDivEntry": rpsmSubDivEntry,
       "rpsmSubDivIndex": rpsmSubDivIndex,
       "rpsmSubDivDescr": rpsmSubDivDescr,
       "rpsmSubDivSize": rpsmSubDivSize,
       "rpsmSubDivOffset": rpsmSubDivOffset,
       "rpsmNumber": rpsmNumber,
       "rpsmTable": rpsmTable,
       "rpsmEntry": rpsmEntry,
       "rpsmCardLocation": rpsmCardLocation,
       "rpsmCardShelf": rpsmCardShelf,
       "rpsmCardSlot": rpsmCardSlot,
       "rpsmModelNum": rpsmModelNum,
       "rpsmOpticsMfgDate": rpsmOpticsMfgDate,
       "rpsmSerialNum": rpsmSerialNum,
       "rpsmModelType": rpsmModelType,
       "rpsmHWName": rpsmHWName,
       "rpsmFWVersionID": rpsmFWVersionID,
       "rpsmCardName": rpsmCardName,
       "rpsmFWName": rpsmFWName,
       "rpsmFWDate": rpsmFWDate,
       "rpsmHWVersionID": rpsmHWVersionID,
       "rpsmHWDate": rpsmHWDate,
       "rpsmSetState": rpsmSetState,
       "rpsmExpressLoss": rpsmExpressLoss,
       "rpsmMarginForSwitch": rpsmMarginForSwitch,
       "rpsmMinProtPowerForSwitch": rpsmMinProtPowerForSwitch,
       "rpsmDeBounce": rpsmDeBounce,
       "rpsmBlackOutTime": rpsmBlackOutTime,
       "rpsmSwitch": rpsmSwitch,
       "rpsmAddDropLoss": rpsmAddDropLoss,
       "rpsmPathID": rpsmPathID,
       "rpsmAdminState": rpsmAdminState,
       "rpsmPortTable": rpsmPortTable,
       "rpsmPortEntry": rpsmPortEntry,
       "rpsmPortCardShelf": rpsmPortCardShelf,
       "rpsmPortCardSlot": rpsmPortCardSlot,
       "rpsmPortType": rpsmPortType,
       "rpsmConnCardType": rpsmConnCardType,
       "rpsmConnPort": rpsmConnPort,
       "rpsmConnShelf": rpsmConnShelf,
       "rpsmConnSlot": rpsmConnSlot,
       "rsdm": rsdm,
       "rsdmBootPromVer": rsdmBootPromVer,
       "rsdmROMSize": rsdmROMSize,
       "rsdmNumSubDiv": rsdmNumSubDiv,
       "rsdmSubDivTable": rsdmSubDivTable,
       "rsdmSubDivEntry": rsdmSubDivEntry,
       "rsdmSubDivIndex": rsdmSubDivIndex,
       "rsdmSubDivDescr": rsdmSubDivDescr,
       "rsdmSubDivSize": rsdmSubDivSize,
       "rsdmSubDivOffset": rsdmSubDivOffset,
       "rsdmNumber": rsdmNumber,
       "rsdmTable": rsdmTable,
       "rsdmEntry": rsdmEntry,
       "rsdmCardLocation": rsdmCardLocation,
       "rsdmCardShelf": rsdmCardShelf,
       "rsdmCardSlot": rsdmCardSlot,
       "rsdmModelNum": rsdmModelNum,
       "rsdmOpticsMfgDate": rsdmOpticsMfgDate,
       "rsdmSerialNum": rsdmSerialNum,
       "rsdmModelType": rsdmModelType,
       "rsdmHWName": rsdmHWName,
       "rsdmCardName": rsdmCardName,
       "rsdmFWVersionID": rsdmFWVersionID,
       "rsdmFWName": rsdmFWName,
       "rsdmFWDate": rsdmFWDate,
       "rsdmHWVersionID": rsdmHWVersionID,
       "rsdmHWDate": rsdmHWDate,
       "rsdmSetState": rsdmSetState,
       "rsdmRxITUNumber": rsdmRxITUNumber,
       "rsdmTxITUNumber": rsdmTxITUNumber,
       "rsdmRxInsertionLoss": rsdmRxInsertionLoss,
       "rsdmTxInsertionLoss": rsdmTxInsertionLoss,
       "rsdmExpressLoss": rsdmExpressLoss,
       "rsdmMarginForSwitch": rsdmMarginForSwitch,
       "rsdmMinProtPowerForSwitch": rsdmMinProtPowerForSwitch,
       "rsdmDeBounce": rsdmDeBounce,
       "rsdmBlackOutTime": rsdmBlackOutTime,
       "rsdmSwitch": rsdmSwitch,
       "rsdmPathID": rsdmPathID,
       "rsdmAdminState": rsdmAdminState,
       "rsdmPortTable": rsdmPortTable,
       "rsdmPortEntry": rsdmPortEntry,
       "rsdmPortCardShelf": rsdmPortCardShelf,
       "rsdmPortCardSlot": rsdmPortCardSlot,
       "rsdmPortType": rsdmPortType,
       "rsdmConnCardType": rsdmConnCardType,
       "rsdmConnPort": rsdmConnPort,
       "rsdmConnShelf": rsdmConnShelf,
       "rsdmConnSlot": rsdmConnSlot,
       "rtdm": rtdm,
       "rtdmBootPromVer": rtdmBootPromVer,
       "rtdmROMSize": rtdmROMSize,
       "rtdmNumSubDiv": rtdmNumSubDiv,
       "rtdmSubDivTable": rtdmSubDivTable,
       "rtdmSubDivEntry": rtdmSubDivEntry,
       "rtdmSubDivIndex": rtdmSubDivIndex,
       "rtdmSubDivDescr": rtdmSubDivDescr,
       "rtdmSubDivSize": rtdmSubDivSize,
       "rtdmSubDivOffset": rtdmSubDivOffset,
       "rtdmNumber": rtdmNumber,
       "rtdmTable": rtdmTable,
       "rtdmEntry": rtdmEntry,
       "rtdmCardLocation": rtdmCardLocation,
       "rtdmCardShelf": rtdmCardShelf,
       "rtdmCardSlot": rtdmCardSlot,
       "rtdmModelNum": rtdmModelNum,
       "rtdmOpticsMfgDate": rtdmOpticsMfgDate,
       "rtdmSerialNum": rtdmSerialNum,
       "rtdmModelType": rtdmModelType,
       "rtdmHWName": rtdmHWName,
       "rtdmFWVersionID": rtdmFWVersionID,
       "rtdmCardName": rtdmCardName,
       "rtdmFWName": rtdmFWName,
       "rtdmFWDate": rtdmFWDate,
       "rtdmHWVersionID": rtdmHWVersionID,
       "rtdmHWDate": rtdmHWDate,
       "rtdmSetState": rtdmSetState,
       "rtdmCommonEInsertionLoss": rtdmCommonEInsertionLoss,
       "rtdmCommonWInsertionLoss": rtdmCommonWInsertionLoss,
       "rtdmMonEastInsertionLoss": rtdmMonEastInsertionLoss,
       "rtdmMonWestInsertionLoss": rtdmMonWestInsertionLoss,
       "rtdmPathID": rtdmPathID,
       "rtdmAdminState": rtdmAdminState,
       "rtdmPortTable": rtdmPortTable,
       "rtdmPortEntry": rtdmPortEntry,
       "rtdmPortCardShelf": rtdmPortCardShelf,
       "rtdmPortCardSlot": rtdmPortCardSlot,
       "rtdmPortType": rtdmPortType,
       "rtdmConnCardType": rtdmConnCardType,
       "rtdmConnPort": rtdmConnPort,
       "rtdmConnShelf": rtdmConnShelf,
       "rtdmConnSlot": rtdmConnSlot,
       "osam": osam,
       "osamBootPromVer": osamBootPromVer,
       "osamROMSize": osamROMSize,
       "osamNumSubDiv": osamNumSubDiv,
       "osamSubDivTable": osamSubDivTable,
       "osamSubDivEntry": osamSubDivEntry,
       "osamSubDivIndex": osamSubDivIndex,
       "osamSubDivDescr": osamSubDivDescr,
       "osamSubDivSize": osamSubDivSize,
       "osamSubDivOffset": osamSubDivOffset,
       "osamNumber": osamNumber,
       "osamTable": osamTable,
       "osamEntry": osamEntry,
       "osamCardLocation": osamCardLocation,
       "osamCardShelf": osamCardShelf,
       "osamCardSlot": osamCardSlot,
       "osamModelNum": osamModelNum,
       "osamSerialNum": osamSerialNum,
       "osamModelType": osamModelType,
       "osamHWName": osamHWName,
       "osamHWVersionID": osamHWVersionID,
       "osamHWDate": osamHWDate,
       "osamFWName": osamFWName,
       "osamFWVersionID": osamFWVersionID,
       "osamFWDate": osamFWDate,
       "osamCardName": osamCardName,
       "osamSetState": osamSetState,
       "osamLaserState": osamLaserState,
       "osamOperationMode": osamOperationMode,
       "osamLaserBiasCurrent": osamLaserBiasCurrent,
       "osamAmplifierGain": osamAmplifierGain,
       "osamConfigCommit": osamConfigCommit,
       "osamNoiseFigure": osamNoiseFigure,
       "osamPathID": osamPathID,
       "osamAdminState": osamAdminState,
       "osam2NoiseFigure": osam2NoiseFigure,
       "osam2GainReq": osam2GainReq,
       "osam2OpPowerReq": osam2OpPowerReq,
       "osamCleiNum": osamCleiNum,
       "osamNumPorts": osamNumPorts,
       "osamPortTable": osamPortTable,
       "osamPortEntry": osamPortEntry,
       "osamPortCardShelf": osamPortCardShelf,
       "osamPortCardSlot": osamPortCardSlot,
       "osamPortType": osamPortType,
       "osamConnCardType": osamConnCardType,
       "osamConnPort": osamConnPort,
       "osamConnShelf": osamConnShelf,
       "osamConnSlot": osamConnSlot,
       "osamPortCardType": osamPortCardType,
       "osamConnLocation": osamConnLocation,
       "osamConnChassisID": osamConnChassisID,
       "osamConnSystemName": osamConnSystemName,
       "osamConnIpAddress": osamConnIpAddress,
       "rsm": rsm,
       "rsmBootPromVer": rsmBootPromVer,
       "rsmROMSize": rsmROMSize,
       "rsmNumSubDiv": rsmNumSubDiv,
       "rsmSubDivTable": rsmSubDivTable,
       "rsmSubDivEntry": rsmSubDivEntry,
       "rsmSubDivIndex": rsmSubDivIndex,
       "rsmSubDivDescr": rsmSubDivDescr,
       "rsmSubDivSize": rsmSubDivSize,
       "rsmSubDivOffset": rsmSubDivOffset,
       "rsmNumber": rsmNumber,
       "rsmTable": rsmTable,
       "rsmEntry": rsmEntry,
       "rsmCardLocation": rsmCardLocation,
       "rsmCardShelf": rsmCardShelf,
       "rsmCardSlot": rsmCardSlot,
       "rsmModelNum": rsmModelNum,
       "rsmOpticsMfgDate": rsmOpticsMfgDate,
       "rsmSerialNum": rsmSerialNum,
       "rsmModelType": rsmModelType,
       "rsmHWName": rsmHWName,
       "rsmCardName": rsmCardName,
       "rsmFWName": rsmFWName,
       "rsmFWVersionID": rsmFWVersionID,
       "rsmFWDate": rsmFWDate,
       "rsmSetState": rsmSetState,
       "rsmRxInsertionLoss": rsmRxInsertionLoss,
       "rsmRxComInsertionLoss": rsmRxComInsertionLoss,
       "rsmWorkingWavelength": rsmWorkingWavelength,
       "rsmLinkAPathID": rsmLinkAPathID,
       "rsmLinkBPathID": rsmLinkBPathID,
       "rsmAdminState": rsmAdminState,
       "rsmCleiNum": rsmCleiNum,
       "rsmNumPorts": rsmNumPorts,
       "rsmPortTable": rsmPortTable,
       "rsmPortEntry": rsmPortEntry,
       "rsmPortCardShelf": rsmPortCardShelf,
       "rsmPortCardSlot": rsmPortCardSlot,
       "rsmPortType": rsmPortType,
       "rsmConnCardType": rsmConnCardType,
       "rsmConnShelf": rsmConnShelf,
       "rsmConnSlot": rsmConnSlot,
       "rsmConnPort": rsmConnPort,
       "upsm": upsm,
       "upsmBootPromVer": upsmBootPromVer,
       "upsmROMSize": upsmROMSize,
       "upsmNumSubDiv": upsmNumSubDiv,
       "upsmSubDivTable": upsmSubDivTable,
       "upsmSubDivEntry": upsmSubDivEntry,
       "upsmSubDivIndex": upsmSubDivIndex,
       "upsmSubDivDescr": upsmSubDivDescr,
       "upsmSubDivSize": upsmSubDivSize,
       "upsmSubDivOffset": upsmSubDivOffset,
       "upsmNumber": upsmNumber,
       "upsmTable": upsmTable,
       "upsmEntry": upsmEntry,
       "upsmCardLocation": upsmCardLocation,
       "upsmCardShelf": upsmCardShelf,
       "upsmCardSlot": upsmCardSlot,
       "upsmModelNum": upsmModelNum,
       "upsmOpticsMfgDate": upsmOpticsMfgDate,
       "upsmSerialNum": upsmSerialNum,
       "upsmModelType": upsmModelType,
       "upsmHWName": upsmHWName,
       "upsmCardName": upsmCardName,
       "upsmFWName": upsmFWName,
       "upsmFWVersionID": upsmFWVersionID,
       "upsmFWDate": upsmFWDate,
       "upsmSetState": upsmSetState,
       "upsmRxInsertionLoss": upsmRxInsertionLoss,
       "upsmTxInsertionLoss": upsmTxInsertionLoss,
       "upsmMarginForSwitch": upsmMarginForSwitch,
       "upsmMinProtPowerForSwitch": upsmMinProtPowerForSwitch,
       "upsmDebounce": upsmDebounce,
       "upsmBlackOutTime": upsmBlackOutTime,
       "upsmSwitch": upsmSwitch,
       "upsmLinkAPathID": upsmLinkAPathID,
       "upsmLinkBPathID": upsmLinkBPathID,
       "upsmAdminState": upsmAdminState,
       "upsmCleiNum": upsmCleiNum,
       "upsmSwitchState": upsmSwitchState,
       "upsmNumPorts": upsmNumPorts,
       "upsmPortTable": upsmPortTable,
       "upsmPortEntry": upsmPortEntry,
       "upsmPortCardShelf": upsmPortCardShelf,
       "upsmPortCardSlot": upsmPortCardSlot,
       "upsmPortType": upsmPortType,
       "upsmConnLocation": upsmConnLocation,
       "upsmConnIpAddress": upsmConnIpAddress,
       "upsmConnChassisID": upsmConnChassisID,
       "upsmConnSystemName": upsmConnSystemName,
       "upsmConnCardType": upsmConnCardType,
       "upsmConnPort": upsmConnPort,
       "upsmConnShelf": upsmConnShelf,
       "upsmConnSlot": upsmConnSlot,
       "mcmesc": mcmesc,
       "mcmescBootPromVer": mcmescBootPromVer,
       "mcmescROMSize": mcmescROMSize,
       "mcmescNumSubDiv": mcmescNumSubDiv,
       "mcmescSubDivTable": mcmescSubDivTable,
       "mcmescSubDivEntry": mcmescSubDivEntry,
       "mcmescSubDivIndex": mcmescSubDivIndex,
       "mcmescSubDivDescr": mcmescSubDivDescr,
       "mcmescSubDivSize": mcmescSubDivSize,
       "mcmescSubDivOffset": mcmescSubDivOffset,
       "mcmescNumber": mcmescNumber,
       "mcmescTable": mcmescTable,
       "mcmescEntry": mcmescEntry,
       "mcmescCardLocation": mcmescCardLocation,
       "mcmescCardShelf": mcmescCardShelf,
       "mcmescCardSlot": mcmescCardSlot,
       "mcmescMfgDate": mcmescMfgDate,
       "mcmescSerialNum": mcmescSerialNum,
       "mcmescModelType": mcmescModelType,
       "mcmescModelNum": mcmescModelNum,
       "mcmescName": mcmescName,
       "mcmescHWName": mcmescHWName,
       "mcmescNumPorts": mcmescNumPorts,
       "mcmescFWVersionID": mcmescFWVersionID,
       "mcmesc2ndFWVersionID": mcmesc2ndFWVersionID,
       "mcmescFPGAVersionID": mcmescFPGAVersionID,
       "mcmesc2ndFPGAVersionID": mcmesc2ndFPGAVersionID,
       "mcmescBoardSerialNum": mcmescBoardSerialNum,
       "mcmescBoardVersionID": mcmescBoardVersionID,
       "mcmescDaughterBoard1SerialNum": mcmescDaughterBoard1SerialNum,
       "mcmescDaughterBoard1VersionID": mcmescDaughterBoard1VersionID,
       "mcmescDaughterBoard2SerialNum": mcmescDaughterBoard2SerialNum,
       "mcmescDaughterBoard2VersionID": mcmescDaughterBoard2VersionID,
       "mcmescCleiNum": mcmescCleiNum,
       "mcmescLinkWavelength": mcmescLinkWavelength,
       "mcmescLinkSfpSerialNum": mcmescLinkSfpSerialNum,
       "mcmescAdminState": mcmescAdminState,
       "mcmescLinkName": mcmescLinkName,
       "mcmescPathID": mcmescPathID,
       "mcmescOverride": mcmescOverride,
       "mcmescPerfInterval": mcmescPerfInterval,
       "mcmescCpeRxSigLowThreshold": mcmescCpeRxSigLowThreshold,
       "mcmescLinkRxSigLowThreshold": mcmescLinkRxSigLowThreshold,
       "mcmescCpeErrEventThreshold": mcmescCpeErrEventThreshold,
       "mcmescCpeErrAlarmThreshold": mcmescCpeErrAlarmThreshold,
       "mcmescLinkErrEventThreshold": mcmescLinkErrEventThreshold,
       "mcmescLinkErrAlarmThreshold": mcmescLinkErrAlarmThreshold,
       "mcmescTestSequence": mcmescTestSequence,
       "mcmescConnMuxShelf": mcmescConnMuxShelf,
       "mcmescConnMuxSlot": mcmescConnMuxSlot,
       "mcmescConnMuxPort": mcmescConnMuxPort,
       "mcmescConnDemuxShelf": mcmescConnDemuxShelf,
       "mcmescConnDemuxSlot": mcmescConnDemuxSlot,
       "mcmescConnDemuxPort": mcmescConnDemuxPort,
       "mcmescConnTxOcmShelf": mcmescConnTxOcmShelf,
       "mcmescConnTxOcmSlot": mcmescConnTxOcmSlot,
       "mcmescConnTxOcmPort": mcmescConnTxOcmPort,
       "mcmescConnTxOcmShelfSlot": mcmescConnTxOcmShelfSlot,
       "mcmescConnTxOcmDelete": mcmescConnTxOcmDelete,
       "mcmescConnRxOcmShelf": mcmescConnRxOcmShelf,
       "mcmescConnRxOcmSlot": mcmescConnRxOcmSlot,
       "mcmescConnRxOcmPort": mcmescConnRxOcmPort,
       "mcmescConnRxOcmShelfSlot": mcmescConnRxOcmShelfSlot,
       "mcmescConnRxOcmDelete": mcmescConnRxOcmDelete,
       "mcmescSetState": mcmescSetState,
       "mcmescLinkClrErrCount": mcmescLinkClrErrCount,
       "mcmescPortNumber": mcmescPortNumber,
       "mcmescPortTable": mcmescPortTable,
       "mcmescPortEntry": mcmescPortEntry,
       "mcmescPortCardLocation": mcmescPortCardLocation,
       "mcmescPortCardShelf": mcmescPortCardShelf,
       "mcmescPortCardSlot": mcmescPortCardSlot,
       "mcmescPortIndex": mcmescPortIndex,
       "mcmescPortSfpSerialNum": mcmescPortSfpSerialNum,
       "mcmescPortConnectionState": mcmescPortConnectionState,
       "mcmescPortClrErrCount": mcmescPortClrErrCount,
       "systemConfig": systemConfig,
       "sysAddCard": sysAddCard,
       "sysAlarmCtrl": sysAlarmCtrl,
       "sysAlarmCritical": sysAlarmCritical,
       "sysAlarmMajor": sysAlarmMajor,
       "sysAlarmSerial": sysAlarmSerial,
       "sysAlarmAutoCutoff": sysAlarmAutoCutoff,
       "sysAddRoute": sysAddRoute,
       "sysDeleteRoute": sysDeleteRoute,
       "sysSwitchByPathId": sysSwitchByPathId,
       "sysSwitchAll": sysSwitchAll,
       "sysAlarmMinor": sysAlarmMinor,
       "sysDelCfgDb": sysDelCfgDb,
       "sysImnAddRoute": sysImnAddRoute,
       "sysImnDeleteRoute": sysImnDeleteRoute,
       "sysExtAlarmInputTable": sysExtAlarmInputTable,
       "sysExtAlarmInputEntry": sysExtAlarmInputEntry,
       "sysExtAlarmInputId": sysExtAlarmInputId,
       "sysExtAlarmInput": sysExtAlarmInput,
       "sysExtAlarmInputName": sysExtAlarmInputName,
       "sysAudioAlarm": sysAudioAlarm,
       "sysAudioAlarmSeverity": sysAudioAlarmSeverity,
       "sysRdbcopy": sysRdbcopy,
       "sysRdbcopyStatus": sysRdbcopyStatus,
       "sysSDMRequestsQueued": sysSDMRequestsQueued,
       "sysModuleupdateJobsWaiting": sysModuleupdateJobsWaiting,
       "sysModuleupdateJobsTable": sysModuleupdateJobsTable,
       "sysModuleupdateJobsEntry": sysModuleupdateJobsEntry,
       "sysModupdShelf": sysModupdShelf,
       "sysModupdSlot": sysModupdSlot,
       "sysModupdLocation": sysModupdLocation,
       "sysModupdRmtStation": sysModupdRmtStation,
       "sysModupdCardtype": sysModupdCardtype,
       "sysModupdPercentDone": sysModupdPercentDone,
       "sysSNMPKeepaliveEnable": sysSNMPKeepaliveEnable,
       "sysSNMPKeepaliveInterval": sysSNMPKeepaliveInterval,
       "topology": topology,
       "topologyTable": topologyTable,
       "topologyEntry": topologyEntry,
       "topologyNearEndCardShelf": topologyNearEndCardShelf,
       "topologyNearEndCardSlot": topologyNearEndCardSlot,
       "topologyNearEndCardPortIndex": topologyNearEndCardPortIndex,
       "topologyNearEndCardType": topologyNearEndCardType,
       "topologyFarEndChassisID": topologyFarEndChassisID,
       "topologyFarEndSystemName": topologyFarEndSystemName,
       "topologyFarEndNodeIpAddress": topologyFarEndNodeIpAddress,
       "topologyFarEndNodeCardShelf": topologyFarEndNodeCardShelf,
       "topologyFarEndNodeCardSlot": topologyFarEndNodeCardSlot,
       "topologyFarEndNodeCardPortIndex": topologyFarEndNodeCardPortIndex,
       "topologyLinkStatus": topologyLinkStatus,
       "topologyFarEndNodeCardType": topologyFarEndNodeCardType,
       "topologyDiscover": topologyDiscover,
       "routing": routing,
       "routingTable": routingTable,
       "routingEntry": routingEntry,
       "routeLocalCCShelf": routeLocalCCShelf,
       "routeLocalCCSlot": routeLocalCCSlot,
       "routeIpDestAddress": routeIpDestAddress,
       "routeDestType": routeDestType,
       "routeMode": routeMode,
       "imnDynamicRoutingTable": imnDynamicRoutingTable,
       "imnDynamicRoutingEntry": imnDynamicRoutingEntry,
       "imnDynamicRouteIpDest": imnDynamicRouteIpDest,
       "imnDynamicRouteIpMask": imnDynamicRouteIpMask,
       "imnDynamicRouteMetric": imnDynamicRouteMetric,
       "imnDynamicRouteNextHop": imnDynamicRouteNextHop,
       "imnDynamicRouteSysName": imnDynamicRouteSysName,
       "imnRouteUpdateTimer": imnRouteUpdateTimer,
       "imnRouteKeepAliveTimer": imnRouteKeepAliveTimer,
       "imnRouteUnReachableTimer": imnRouteUnReachableTimer,
       "imnRouteMode": imnRouteMode,
       "imnStaticRoutingTable": imnStaticRoutingTable,
       "imnStaticRoutingEntry": imnStaticRoutingEntry,
       "imnStaticRouteIpDest": imnStaticRouteIpDest,
       "imnStaticRouteIpMask": imnStaticRouteIpMask,
       "imnStaticRouteMetric": imnStaticRouteMetric,
       "imnRouteMaxMetric": imnRouteMaxMetric,
       "ring": ring,
       "ringNum": ringNum,
       "ringTable": ringTable,
       "ringEntry": ringEntry,
       "ringIndex": ringIndex,
       "ringID": ringID,
       "ringPathID1": ringPathID1,
       "ringPathID2": ringPathID2,
       "ringPath1RemoteIP": ringPath1RemoteIP,
       "ringPath1RemoteChassisId": ringPath1RemoteChassisId,
       "ringPath2RemoteIP": ringPath2RemoteIP,
       "ringPath2RemoteChassisId": ringPath2RemoteChassisId,
       "tap": tap,
       "tapNumber": tapNumber,
       "tapTable": tapTable,
       "tapEntry": tapEntry,
       "tapCardLocation": tapCardLocation,
       "tapCardShelf": tapCardShelf,
       "tapCardSlot": tapCardSlot,
       "tapModelNum": tapModelNum,
       "tapMfgDate": tapMfgDate,
       "tapSerialNum": tapSerialNum,
       "tapModelType": tapModelType,
       "tapName": tapName,
       "tapFWVersionID": tapFWVersionID,
       "tapHWName": tapHWName,
       "tapPathID": tapPathID,
       "tapAdminState": tapAdminState,
       "tapCleiNum": tapCleiNum,
       "tapNumPorts": tapNumPorts,
       "voadm": voadm,
       "voadmNumber": voadmNumber,
       "voadmTable": voadmTable,
       "voadmEntry": voadmEntry,
       "voadmCardLocation": voadmCardLocation,
       "voadmCardShelf": voadmCardShelf,
       "voadmCardSlot": voadmCardSlot,
       "voadmSerialNum": voadmSerialNum,
       "voadmModelNum": voadmModelNum,
       "voadmHwName": voadmHwName,
       "voadmHwVersionID": voadmHwVersionID,
       "voadmMfgDate": voadmMfgDate,
       "voadmFwName": voadmFwName,
       "voadmFwVersionID": voadmFwVersionID,
       "voadmFwDate": voadmFwDate,
       "voadmAdminState": voadmAdminState,
       "voadmModelType": voadmModelType,
       "voadmName": voadmName,
       "voadmSetState": voadmSetState,
       "voadmPathID": voadmPathID,
       "voadmCleiNum": voadmCleiNum,
       "voadmActiveChannels": voadmActiveChannels,
       "voadmStartItu": voadmStartItu,
       "voadmEndItu": voadmEndItu,
       "voadmNumPorts": voadmNumPorts,
       "voadmPortTable": voadmPortTable,
       "voadmPortEntry": voadmPortEntry,
       "voadmPortCardLocation": voadmPortCardLocation,
       "voadmPortCardShelf": voadmPortCardShelf,
       "voadmPortCardSlot": voadmPortCardSlot,
       "voadmPortType": voadmPortType,
       "voadmPortMode": voadmPortMode,
       "voadmPortSetPoint": voadmPortSetPoint,
       "voadmPortMinChanInputPower": voadmPortMinChanInputPower,
       "voadmPortMinChanOutputPower": voadmPortMinChanOutputPower,
       "voadmPortMaxChanOutputPower": voadmPortMaxChanOutputPower,
       "voadmPortToleranceUpperBound": voadmPortToleranceUpperBound,
       "voadmPortToleranceLowerBound": voadmPortToleranceLowerBound,
       "voadmPortTotalInputPower": voadmPortTotalInputPower,
       "voadmPortPerChanInputPower": voadmPortPerChanInputPower,
       "voadmPortTotalOutputPower": voadmPortTotalOutputPower,
       "voadmPortPerChanOutputPower": voadmPortPerChanOutputPower,
       "voadmPortMeasuredAtten": voadmPortMeasuredAtten,
       "voadmPortAvgInsertLoss": voadmPortAvgInsertLoss,
       "voadmPortAvgExpressLoss": voadmPortAvgExpressLoss,
       "zmsConfigSync": zmsConfigSync,
       "zmsConfigSyncExists": zmsConfigSyncExists,
       "zmsConfigSyncOverflow": zmsConfigSyncOverflow,
       "zmsConfigSyncPriority": zmsConfigSyncPriority,
       "zmsConfigSyncAction": zmsConfigSyncAction,
       "zmsConfigSyncFileName": zmsConfigSyncFileName,
       "zmsConfigSyncStatus": zmsConfigSyncStatus,
       "zmsConfigSyncUserName": zmsConfigSyncUserName,
       "zmsConfigSyncUserPassword": zmsConfigSyncUserPassword,
       "zmsIpAddress": zmsIpAddress,
       "dmm": dmm,
       "dmmNumber": dmmNumber,
       "dmmTable": dmmTable,
       "dmmEntry": dmmEntry,
       "dmmCardLocation": dmmCardLocation,
       "dmmCardShelf": dmmCardShelf,
       "dmmCardSlot": dmmCardSlot,
       "dmmSerialNum": dmmSerialNum,
       "dmmModelNum": dmmModelNum,
       "dmmHwName": dmmHwName,
       "dmmHwVersionID": dmmHwVersionID,
       "dmmMfgDate": dmmMfgDate,
       "dmmFwName": dmmFwName,
       "dmmFwVersionID": dmmFwVersionID,
       "dmmFwDate": dmmFwDate,
       "dmmAdminState": dmmAdminState,
       "dmmModelType": dmmModelType,
       "dmmName": dmmName,
       "dmmSetState": dmmSetState,
       "dmmPathID": dmmPathID,
       "dmmLinkName": dmmLinkName,
       "dmmCleiNum": dmmCleiNum,
       "dmmNumPorts": dmmNumPorts,
       "dmmFpgaRev": dmmFpgaRev,
       "dmmPortTable": dmmPortTable,
       "dmmPortEntry": dmmPortEntry,
       "dmmPortLocation": dmmPortLocation,
       "dmmPortShelf": dmmPortShelf,
       "dmmPortSlot": dmmPortSlot,
       "dmmPortIndex": dmmPortIndex,
       "dmmPortLineRate": dmmPortLineRate,
       "dmmPortAutoDisable": dmmPortAutoDisable,
       "dmmPortMode": dmmPortMode,
       "dmmPortItu": dmmPortItu,
       "dmmPortWavelength": dmmPortWavelength,
       "dmmPortRxPower": dmmPortRxPower,
       "dmmPortTxState": dmmPortTxState,
       "dmmPortTxReach": dmmPortTxReach,
       "dmmPortSfpSerialNumber": dmmPortSfpSerialNumber,
       "dmmPortSfpConnectorType": dmmPortSfpConnectorType,
       "dmmConnTable": dmmConnTable,
       "dmmConnEntry": dmmConnEntry,
       "dmmConnCardLocation": dmmConnCardLocation,
       "dmmConnCardShelf": dmmConnCardShelf,
       "dmmConnCardSlot": dmmConnCardSlot,
       "dmmConnCardPortType": dmmConnCardPortType,
       "dmmConnCardType": dmmConnCardType,
       "dmmConnLocation": dmmConnLocation,
       "dmmConnShelf": dmmConnShelf,
       "dmmConnSlot": dmmConnSlot,
       "dmmConnPort": dmmConnPort,
       "ocm10gf": ocm10gf,
       "ocm10gfNumber": ocm10gfNumber,
       "ocm10gfTable": ocm10gfTable,
       "ocm10gfEntry": ocm10gfEntry,
       "ocm10gfCardLocation": ocm10gfCardLocation,
       "ocm10gfCardShelf": ocm10gfCardShelf,
       "ocm10gfCardSlot": ocm10gfCardSlot,
       "ocm10gfSerialNum": ocm10gfSerialNum,
       "ocm10gfModelNum": ocm10gfModelNum,
       "ocm10gfHwName": ocm10gfHwName,
       "ocm10gfHwVersionID": ocm10gfHwVersionID,
       "ocm10gfMfgDate": ocm10gfMfgDate,
       "ocm10gfFwName": ocm10gfFwName,
       "ocm10gfFwVersionID": ocm10gfFwVersionID,
       "ocm10gfFwDate": ocm10gfFwDate,
       "ocm10gfModelType": ocm10gfModelType,
       "ocm10gfName": ocm10gfName,
       "ocm10gfLineRate": ocm10gfLineRate,
       "ocm10gfAutoDisable": ocm10gfAutoDisable,
       "ocm10gfLinkName": ocm10gfLinkName,
       "ocm10gfPathID": ocm10gfPathID,
       "ocm10gfAdminState": ocm10gfAdminState,
       "ocm10gfSetState": ocm10gfSetState,
       "ocm10gfCleiNum": ocm10gfCleiNum,
       "ocm10gfNumPorts": ocm10gfNumPorts,
       "ocm10gfFpgaRev": ocm10gfFpgaRev,
       "ocm10gfPortTable": ocm10gfPortTable,
       "ocm10gfPortEntry": ocm10gfPortEntry,
       "ocm10gfPortLocation": ocm10gfPortLocation,
       "ocm10gfPortShelf": ocm10gfPortShelf,
       "ocm10gfPortSlot": ocm10gfPortSlot,
       "ocm10gfPortIndex": ocm10gfPortIndex,
       "ocm10gfPortMode": ocm10gfPortMode,
       "ocm10gfPortWavelength": ocm10gfPortWavelength,
       "ocm10gfPortRxPower": ocm10gfPortRxPower,
       "ocm10gfPortTxState": ocm10gfPortTxState,
       "ocm10gfPortTxReach": ocm10gfPortTxReach,
       "ocm10gfPortXfpSerialNumber": ocm10gfPortXfpSerialNumber,
       "ocm10gfConnTable": ocm10gfConnTable,
       "ocm10gfConnEntry": ocm10gfConnEntry,
       "ocm10gfConnCardLocation": ocm10gfConnCardLocation,
       "ocm10gfConnCardShelf": ocm10gfConnCardShelf,
       "ocm10gfConnCardSlot": ocm10gfConnCardSlot,
       "ocm10gfConnCardPortType": ocm10gfConnCardPortType,
       "ocm10gfConnCardType": ocm10gfConnCardType,
       "ocm10gfConnLocation": ocm10gfConnLocation,
       "ocm10gfConnShelf": ocm10gfConnShelf,
       "ocm10gfConnSlot": ocm10gfConnSlot,
       "ocm10gfConnPort": ocm10gfConnPort,
       "ocm2": ocm2,
       "ocm2Number": ocm2Number,
       "ocm2Table": ocm2Table,
       "ocm2Entry": ocm2Entry,
       "ocm2CardLocation": ocm2CardLocation,
       "ocm2CardShelf": ocm2CardShelf,
       "ocm2CardSlot": ocm2CardSlot,
       "ocm2SerialNum": ocm2SerialNum,
       "ocm2ModelNum": ocm2ModelNum,
       "ocm2HwName": ocm2HwName,
       "ocm2HwVersionID": ocm2HwVersionID,
       "ocm2MfgDate": ocm2MfgDate,
       "ocm2FwName": ocm2FwName,
       "ocm2FwVersionID": ocm2FwVersionID,
       "ocm2FwDate": ocm2FwDate,
       "ocm2ModelType": ocm2ModelType,
       "ocm2Name": ocm2Name,
       "ocm2Link1LineRate": ocm2Link1LineRate,
       "ocm2Link1AutoDisable": ocm2Link1AutoDisable,
       "ocm2Link1LinkName": ocm2Link1LinkName,
       "ocm2Link1PathID": ocm2Link1PathID,
       "ocm2Link2LineRate": ocm2Link2LineRate,
       "ocm2Link2AutoDisable": ocm2Link2AutoDisable,
       "ocm2Link2LinkName": ocm2Link2LinkName,
       "ocm2Link2PathID": ocm2Link2PathID,
       "ocm2AdminState": ocm2AdminState,
       "ocm2SetState": ocm2SetState,
       "ocm2CleiNum": ocm2CleiNum,
       "ocm2NumPorts": ocm2NumPorts,
       "ocm2RegenMode": ocm2RegenMode,
       "ocm2FpgaRev": ocm2FpgaRev,
       "ocm2PortTable": ocm2PortTable,
       "ocm2PortEntry": ocm2PortEntry,
       "ocm2PortLocation": ocm2PortLocation,
       "ocm2PortShelf": ocm2PortShelf,
       "ocm2PortSlot": ocm2PortSlot,
       "ocm2PortIndex": ocm2PortIndex,
       "ocm2PortMode": ocm2PortMode,
       "ocm2PortItu": ocm2PortItu,
       "ocm2PortWavelength": ocm2PortWavelength,
       "ocm2PortRxPower": ocm2PortRxPower,
       "ocm2PortTxState": ocm2PortTxState,
       "ocm2PortTxReach": ocm2PortTxReach,
       "ocm2PortSfpSerialNumber": ocm2PortSfpSerialNumber,
       "ocm2ConnTable": ocm2ConnTable,
       "ocm2ConnEntry": ocm2ConnEntry,
       "ocm2ConnCardLocation": ocm2ConnCardLocation,
       "ocm2ConnCardShelf": ocm2ConnCardShelf,
       "ocm2ConnCardSlot": ocm2ConnCardSlot,
       "ocm2ConnCardPortType": ocm2ConnCardPortType,
       "ocm2ConnCardType": ocm2ConnCardType,
       "ocm2ConnLocation": ocm2ConnLocation,
       "ocm2ConnShelf": ocm2ConnShelf,
       "ocm2ConnSlot": ocm2ConnSlot,
       "ocm2ConnPort": ocm2ConnPort,
       "osc": osc,
       "oscNumber": oscNumber,
       "oscTable": oscTable,
       "oscEntry": oscEntry,
       "oscCardLocation": oscCardLocation,
       "oscCardShelf": oscCardShelf,
       "oscCardSlot": oscCardSlot,
       "oscSerialNum": oscSerialNum,
       "oscModelNum": oscModelNum,
       "oscHwName": oscHwName,
       "oscHwVersionID": oscHwVersionID,
       "oscMfgDate": oscMfgDate,
       "oscFwName": oscFwName,
       "oscFwVersionID": oscFwVersionID,
       "oscFwDate": oscFwDate,
       "oscAdminState": oscAdminState,
       "oscModelType": oscModelType,
       "oscName": oscName,
       "oscPathID": oscPathID,
       "oscSetState": oscSetState,
       "oscCleiNum": oscCleiNum,
       "oscNumPorts": oscNumPorts,
       "oscFpgaRev": oscFpgaRev,
       "oscPortTable": oscPortTable,
       "oscPortEntry": oscPortEntry,
       "oscPortLocation": oscPortLocation,
       "oscPortShelf": oscPortShelf,
       "oscPortSlot": oscPortSlot,
       "oscPortIndex": oscPortIndex,
       "oscPortItu": oscPortItu,
       "oscPortWavelength": oscPortWavelength,
       "oscPortRxPower": oscPortRxPower,
       "oscPortTxState": oscPortTxState,
       "oscPortTxReach": oscPortTxReach,
       "oscPortSfpSerialNumber": oscPortSfpSerialNumber,
       "ocm4g": ocm4g,
       "ocm4gNumber": ocm4gNumber,
       "ocm4gTable": ocm4gTable,
       "ocm4gEntry": ocm4gEntry,
       "ocm4gCardLocation": ocm4gCardLocation,
       "ocm4gCardShelf": ocm4gCardShelf,
       "ocm4gCardSlot": ocm4gCardSlot,
       "ocm4gSerialNum": ocm4gSerialNum,
       "ocm4gModelNum": ocm4gModelNum,
       "ocm4gHwName": ocm4gHwName,
       "ocm4gHwVersionID": ocm4gHwVersionID,
       "ocm4gMfgDate": ocm4gMfgDate,
       "ocm4gFwName": ocm4gFwName,
       "ocm4gFwVersionID": ocm4gFwVersionID,
       "ocm4gFwDate": ocm4gFwDate,
       "ocm4gModelType": ocm4gModelType,
       "ocm4gName": ocm4gName,
       "ocm4gLink1LineRate": ocm4gLink1LineRate,
       "ocm4gLink1AutoDisable": ocm4gLink1AutoDisable,
       "ocm4gLink1LinkName": ocm4gLink1LinkName,
       "ocm4gLink1PathID": ocm4gLink1PathID,
       "ocm4gLink2LineRate": ocm4gLink2LineRate,
       "ocm4gLink2AutoDisable": ocm4gLink2AutoDisable,
       "ocm4gLink2LinkName": ocm4gLink2LinkName,
       "ocm4gLink2PathID": ocm4gLink2PathID,
       "ocm4gAdminState": ocm4gAdminState,
       "ocm4gSetState": ocm4gSetState,
       "ocm4gCleiNum": ocm4gCleiNum,
       "ocm4gNumPorts": ocm4gNumPorts,
       "ocm4gFpgaRev": ocm4gFpgaRev,
       "ocm4gPortTable": ocm4gPortTable,
       "ocm4gPortEntry": ocm4gPortEntry,
       "ocm4gPortLocation": ocm4gPortLocation,
       "ocm4gPortShelf": ocm4gPortShelf,
       "ocm4gPortSlot": ocm4gPortSlot,
       "ocm4gPortIndex": ocm4gPortIndex,
       "ocm4gPortMode": ocm4gPortMode,
       "ocm4gPortItu": ocm4gPortItu,
       "ocm4gPortWavelength": ocm4gPortWavelength,
       "ocm4gPortRxPower": ocm4gPortRxPower,
       "ocm4gPortTxState": ocm4gPortTxState,
       "ocm4gPortTxReach": ocm4gPortTxReach,
       "ocm4gPortSfpSerialNumber": ocm4gPortSfpSerialNumber,
       "ocm4gConnTable": ocm4gConnTable,
       "ocm4gConnEntry": ocm4gConnEntry,
       "ocm4gConnCardLocation": ocm4gConnCardLocation,
       "ocm4gConnCardShelf": ocm4gConnCardShelf,
       "ocm4gConnCardSlot": ocm4gConnCardSlot,
       "ocm4gConnCardPortType": ocm4gConnCardPortType,
       "ocm4gConnCardType": ocm4gConnCardType,
       "ocm4gConnLocation": ocm4gConnLocation,
       "ocm4gConnShelf": ocm4gConnShelf,
       "ocm4gConnSlot": ocm4gConnSlot,
       "ocm4gConnPort": ocm4gConnPort,
       "oet": oet,
       "oetNumber": oetNumber,
       "oetTable": oetTable,
       "oetEntry": oetEntry,
       "oetCardLocation": oetCardLocation,
       "oetCardShelf": oetCardShelf,
       "oetCardSlot": oetCardSlot,
       "oetSerialNum": oetSerialNum,
       "oetModelNum": oetModelNum,
       "oetHwName": oetHwName,
       "oetHwVersionID": oetHwVersionID,
       "oetMfgDate": oetMfgDate,
       "oetFwName": oetFwName,
       "oetFwVersionID": oetFwVersionID,
       "oetFwDate": oetFwDate,
       "oetModelType": oetModelType,
       "oetName": oetName,
       "oetCleiNum": oetCleiNum,
       "oetFpgaRevMB": oetFpgaRevMB,
       "oetFpgaRevDB": oetFpgaRevDB,
       "oetCpldRev": oetCpldRev,
       "oetOpMode": oetOpMode,
       "oetProtMode": oetProtMode,
       "oetEAPSMode": oetEAPSMode,
       "oetAdminState": oetAdminState,
       "oetSetState": oetSetState,
       "oetConfigInProgress": oetConfigInProgress,
       "oetApplyChanges": oetApplyChanges,
       "oetLinkTable": oetLinkTable,
       "oetLinkEntry": oetLinkEntry,
       "oetLinkLocation": oetLinkLocation,
       "oetLinkShelf": oetLinkShelf,
       "oetLinkSlot": oetLinkSlot,
       "oetLinkIndex": oetLinkIndex,
       "oetLinkEnable": oetLinkEnable,
       "oetLinkProtocol": oetLinkProtocol,
       "oetLinkName": oetLinkName,
       "oetLinkVlanIds": oetLinkVlanIds,
       "oetLinkConfigInProgress": oetLinkConfigInProgress,
       "oetLinkApplyChanges": oetLinkApplyChanges,
       "oetLinkMode": oetLinkMode,
       "oetLinkItu": oetLinkItu,
       "oetLinkWavelength": oetLinkWavelength,
       "oetLinkRxPower": oetLinkRxPower,
       "oetLinkTxState": oetLinkTxState,
       "oetLinkTxReach": oetLinkTxReach,
       "oetLinkXfpSerialNumber": oetLinkXfpSerialNumber,
       "oetPortTable": oetPortTable,
       "oetPortEntry": oetPortEntry,
       "oetPortLocation": oetPortLocation,
       "oetPortShelf": oetPortShelf,
       "oetPortSlot": oetPortSlot,
       "oetPortIndex": oetPortIndex,
       "oetPortEnable": oetPortEnable,
       "oetPortALSD": oetPortALSD,
       "oetPortFlowControl": oetPortFlowControl,
       "oetPortVlanId": oetPortVlanId,
       "oetPortName": oetPortName,
       "oetPortConfigInProgress": oetPortConfigInProgress,
       "oetPortApplyChanges": oetPortApplyChanges,
       "oetPortMode": oetPortMode,
       "oetPortItu": oetPortItu,
       "oetPortWavelength": oetPortWavelength,
       "oetPortRxPower": oetPortRxPower,
       "oetPortTxState": oetPortTxState,
       "oetPortTxReach": oetPortTxReach,
       "oetPortSfpSerialNumber": oetPortSfpSerialNumber,
       "uob": uob,
       "uobNumber": uobNumber,
       "uobTable": uobTable,
       "uobEntry": uobEntry,
       "uobCardLocation": uobCardLocation,
       "uobCardShelf": uobCardShelf,
       "uobCardSlot": uobCardSlot,
       "uobSerialNum": uobSerialNum,
       "uobModelNum": uobModelNum,
       "uobHwName": uobHwName,
       "uobHwVersionID": uobHwVersionID,
       "uobMfgDate": uobMfgDate,
       "uobFwName": uobFwName,
       "uobFwVersionID": uobFwVersionID,
       "uobFwDate": uobFwDate,
       "uobModelType": uobModelType,
       "uobCfgName": uobCfgName,
       "uobModuleName": uobModuleName,
       "uobAdminState": uobAdminState,
       "uobSetState": uobSetState,
       "uobCleiNum": uobCleiNum,
       "uobFpgaRev": uobFpgaRev,
       "uobOperationMode": uobOperationMode,
       "uobOutPower": uobOutPower,
       "uobGain": uobGain,
       "uobGainTilt": uobGainTilt,
       "uobLosMode": uobLosMode,
       "uobLosThreshold": uobLosThreshold,
       "uobRflThreshold": uobRflThreshold,
       "fc8g": fc8g,
       "fc8gNumber": fc8gNumber,
       "fc8gTable": fc8gTable,
       "fc8gEntry": fc8gEntry,
       "fc8gCardLocation": fc8gCardLocation,
       "fc8gCardShelf": fc8gCardShelf,
       "fc8gCardSlot": fc8gCardSlot,
       "fc8gSerialNum": fc8gSerialNum,
       "fc8gModelNum": fc8gModelNum,
       "fc8gHwName": fc8gHwName,
       "fc8gHwVersionID": fc8gHwVersionID,
       "fc8gMfgDate": fc8gMfgDate,
       "fc8gFwName": fc8gFwName,
       "fc8gFwVersionID": fc8gFwVersionID,
       "fc8gFwDate": fc8gFwDate,
       "fc8gModelType": fc8gModelType,
       "fc8gName": fc8gName,
       "fc8gLink1DataRate": fc8gLink1DataRate,
       "fc8gCpe1AutoDisable": fc8gCpe1AutoDisable,
       "fc8gCpe1LaserEnabled": fc8gCpe1LaserEnabled,
       "fc8gLink1LaserEnabled": fc8gLink1LaserEnabled,
       "fc8gLink2DataRate": fc8gLink2DataRate,
       "fc8gCpe2AutoDisable": fc8gCpe2AutoDisable,
       "fc8gCpe2LaserEnabled": fc8gCpe2LaserEnabled,
       "fc8gLink2LaserEnabled": fc8gLink2LaserEnabled,
       "fc8gAdminState": fc8gAdminState,
       "fc8gSetState": fc8gSetState,
       "fc8gPortTable": fc8gPortTable,
       "fc8gPortEntry": fc8gPortEntry,
       "fc8gPortLocation": fc8gPortLocation,
       "fc8gPortShelf": fc8gPortShelf,
       "fc8gPortSlot": fc8gPortSlot,
       "fc8gPortIndex": fc8gPortIndex,
       "fc8gPortName": fc8gPortName,
       "fc8gPortMode": fc8gPortMode,
       "fc8gPortWavelength": fc8gPortWavelength,
       "fc8gPortRxPower": fc8gPortRxPower,
       "fc8gPortTxState": fc8gPortTxState,
       "fc8gPortTxReach": fc8gPortTxReach,
       "fc8gPortSfpXfpSerialNumber": fc8gPortSfpXfpSerialNumber,
       "performance": performance,
       "current1": current1,
       "systemPerf": systemPerf,
       "sysStatus": sysStatus,
       "sysClearStatus": sysClearStatus,
       "sysClearCounters": sysClearCounters,
       "sysLastBootTime": sysLastBootTime,
       "sysAvailTime": sysAvailTime,
       "sysErrFreeSecs": sysErrFreeSecs,
       "sysExhaustTemperature": sysExhaustTemperature,
       "downloadPerf": downloadPerf,
       "dlStatus": dlStatus,
       "dlOkDownloads": dlOkDownloads,
       "dlBadDownloads": dlBadDownloads,
       "dlLongestTime": dlLongestTime,
       "dlLongestSize": dlLongestSize,
       "cpPerf": cpPerf,
       "cpNumEvents": cpNumEvents,
       "cpTrapsSent": cpTrapsSent,
       "cpSNMPCmdsRcvd": cpSNMPCmdsRcvd,
       "cpCounterFlag": cpCounterFlag,
       "cpCntrTable": cpCntrTable,
       "cpCntrEntry": cpCntrEntry,
       "cpCntrShelf": cpCntrShelf,
       "cpCntrSlot": cpCntrSlot,
       "cpCntrType": cpCntrType,
       "cpTotPktSent": cpTotPktSent,
       "cpTotPktRcvd": cpTotPktRcvd,
       "cpBadPktRcvd": cpBadPktRcvd,
       "cpTotBadTrans": cpTotBadTrans,
       "cpBytesSent": cpBytesSent,
       "cpBytesRcvd": cpBytesRcvd,
       "cpMsgsDlvrd": cpMsgsDlvrd,
       "cpBufAllocFail": cpBufAllocFail,
       "cpEcbAllocFail": cpEcbAllocFail,
       "cpClearCntrs": cpClearCntrs,
       "cpPerfTable": cpPerfTable,
       "cpPerfEntry": cpPerfEntry,
       "cpPerfShelf": cpPerfShelf,
       "cpPerfSlot": cpPerfSlot,
       "cpPerfMode": cpPerfMode,
       "cpPerfState": cpPerfState,
       "cpPerfStatus": cpPerfStatus,
       "cpLastBootTime": cpLastBootTime,
       "cpAvailTime": cpAvailTime,
       "cpErrFreeSecs": cpErrFreeSecs,
       "ccPerf": ccPerf,
       "ccNumEvents": ccNumEvents,
       "ccCntrTable": ccCntrTable,
       "ccCntrEntry": ccCntrEntry,
       "ccCntrLocation": ccCntrLocation,
       "ccCntrShelf": ccCntrShelf,
       "ccCntrSlot": ccCntrSlot,
       "ccCntrType": ccCntrType,
       "ccCounterFlag": ccCounterFlag,
       "ccTotPktSent": ccTotPktSent,
       "ccTotPktRcvd": ccTotPktRcvd,
       "ccBadPktRcvd": ccBadPktRcvd,
       "ccTotBadTrans": ccTotBadTrans,
       "ccBytesSent": ccBytesSent,
       "ccBytesRcvd": ccBytesRcvd,
       "ccMsgsDlvrd": ccMsgsDlvrd,
       "ccBufAllocFail": ccBufAllocFail,
       "ccEcbAllocFail": ccEcbAllocFail,
       "ccClearCntrs": ccClearCntrs,
       "ccPerfTable": ccPerfTable,
       "ccPerfEntry": ccPerfEntry,
       "ccPerfLocation": ccPerfLocation,
       "ccPerfShelf": ccPerfShelf,
       "ccPerfSlot": ccPerfSlot,
       "ccPerfState": ccPerfState,
       "ccPerfStatus": ccPerfStatus,
       "ccLastBootTime": ccLastBootTime,
       "ccAvailTime": ccAvailTime,
       "ccErrFreeSecs": ccErrFreeSecs,
       "ccBiasCurrent": ccBiasCurrent,
       "ccModulation": ccModulation,
       "ccApc": ccApc,
       "ccIwmModulation": ccIwmModulation,
       "ccLaserOnOff": ccLaserOnOff,
       "ccTemperature": ccTemperature,
       "ccIntensity": ccIntensity,
       "ccSignalStrength": ccSignalStrength,
       "ccLossOfLight": ccLossOfLight,
       "ccSignalDetect": ccSignalDetect,
       "ccRefClock": ccRefClock,
       "ccClockDiv": ccClockDiv,
       "ccLinkTxPwrStatus": ccLinkTxPwrStatus,
       "ccLinkRxSigStrStatus": ccLinkRxSigStrStatus,
       "ccCpeRxSigDetect": ccCpeRxSigDetect,
       "ccLinkIWMStatus": ccLinkIWMStatus,
       "ccLinkSummaryStatus": ccLinkSummaryStatus,
       "ccProtectionMode": ccProtectionMode,
       "ccLinkRxSigStr": ccLinkRxSigStr,
       "muxPerf": muxPerf,
       "muxNumEvents": muxNumEvents,
       "muxPerfTable": muxPerfTable,
       "muxPerfEntry": muxPerfEntry,
       "muxPerfLocation": muxPerfLocation,
       "muxPerfShelf": muxPerfShelf,
       "muxPerfSlot": muxPerfSlot,
       "muxType": muxType,
       "muxPerfState": muxPerfState,
       "muxPerfStatus": muxPerfStatus,
       "muxLastBootTime": muxLastBootTime,
       "muxAvailTime": muxAvailTime,
       "muxErrFreeSecs": muxErrFreeSecs,
       "psPerf": psPerf,
       "psNumEvents": psNumEvents,
       "psVoltageLevel3pt4Volt": psVoltageLevel3pt4Volt,
       "psVoltageLevel5pt1Volt": psVoltageLevel5pt1Volt,
       "psVoltageLevel12Volt": psVoltageLevel12Volt,
       "psPerfTable": psPerfTable,
       "psPerfEntry": psPerfEntry,
       "psPerfID": psPerfID,
       "psPerfType": psPerfType,
       "psPerfState": psPerfState,
       "psPerfStatus": psPerfStatus,
       "psVoltageLevelFeedA": psVoltageLevelFeedA,
       "psVoltageLevelFeedB": psVoltageLevelFeedB,
       "psBreakerConditionFeedA": psBreakerConditionFeedA,
       "psPerfStatusFeedA": psPerfStatusFeedA,
       "psBreakerConditionFeedB": psBreakerConditionFeedB,
       "psPerfStatusFeedB": psPerfStatusFeedB,
       "fadmPerf": fadmPerf,
       "fadmNumEvents": fadmNumEvents,
       "fadmPerfTable": fadmPerfTable,
       "fadmPerfEntry": fadmPerfEntry,
       "fadmPerfLocation": fadmPerfLocation,
       "fadmPerfShelf": fadmPerfShelf,
       "fadmPerfSlot": fadmPerfSlot,
       "fadmPerfState": fadmPerfState,
       "fadmPerfStatus": fadmPerfStatus,
       "fadmLastBootTime": fadmLastBootTime,
       "fadmAvailTime": fadmAvailTime,
       "fadmErrFreeSecs": fadmErrFreeSecs,
       "oppmPerf": oppmPerf,
       "oppmNumEvents": oppmNumEvents,
       "oppmPerfTable": oppmPerfTable,
       "oppmPerfEntry": oppmPerfEntry,
       "oppmPerfLocation": oppmPerfLocation,
       "oppmPerfShelf": oppmPerfShelf,
       "oppmPerfSlot": oppmPerfSlot,
       "oppmPerfState": oppmPerfState,
       "oppmPerfStatus": oppmPerfStatus,
       "oppmLinkAState": oppmLinkAState,
       "oppmLinkAStatus": oppmLinkAStatus,
       "oppmLinkBState": oppmLinkBState,
       "oppmLinkBStatus": oppmLinkBStatus,
       "oppmLastBootTime": oppmLastBootTime,
       "oppmAvailTime": oppmAvailTime,
       "oppmErrFreeSecs": oppmErrFreeSecs,
       "oppmWorkingPower": oppmWorkingPower,
       "oppmProtectPower": oppmProtectPower,
       "mcmPerf": mcmPerf,
       "mcmNumEvents": mcmNumEvents,
       "mcmCntrTable": mcmCntrTable,
       "mcmCntrEntry": mcmCntrEntry,
       "mcmCntrLocation": mcmCntrLocation,
       "mcmCntrShelf": mcmCntrShelf,
       "mcmCntrSlot": mcmCntrSlot,
       "mcmCntrType": mcmCntrType,
       "mcmCounterFlag": mcmCounterFlag,
       "mcmTotPktSent": mcmTotPktSent,
       "mcmTotPktRcvd": mcmTotPktRcvd,
       "mcmBadPktRcvd": mcmBadPktRcvd,
       "mcmTotBadTrans": mcmTotBadTrans,
       "mcmBytesSent": mcmBytesSent,
       "mcmBytesRcvd": mcmBytesRcvd,
       "mcmMsgsDlvrd": mcmMsgsDlvrd,
       "mcmBufAllocFail": mcmBufAllocFail,
       "mcmEcbAllocFail": mcmEcbAllocFail,
       "mcmClearCntrs": mcmClearCntrs,
       "mcmPerfTable": mcmPerfTable,
       "mcmPerfEntry": mcmPerfEntry,
       "mcmPerfLocation": mcmPerfLocation,
       "mcmPerfShelf": mcmPerfShelf,
       "mcmPerfSlot": mcmPerfSlot,
       "mcmPerfState": mcmPerfState,
       "mcmPerfStatus": mcmPerfStatus,
       "mcmLastBootTime": mcmLastBootTime,
       "mcmAvailTime": mcmAvailTime,
       "mcmErrFreeSecs": mcmErrFreeSecs,
       "mcmBiasCurrent": mcmBiasCurrent,
       "mcmModulation": mcmModulation,
       "mcmApc": mcmApc,
       "mcmIwmModulation": mcmIwmModulation,
       "mcmLaserOnOff": mcmLaserOnOff,
       "mcmTemperature": mcmTemperature,
       "mcmIntensity": mcmIntensity,
       "mcmSignalStrength": mcmSignalStrength,
       "mcmLossOfLight": mcmLossOfLight,
       "mcmSignalDetect": mcmSignalDetect,
       "mcmPortCurrTable": mcmPortCurrTable,
       "mcmPortCurrEntry": mcmPortCurrEntry,
       "mcmPortCurrCardLocation": mcmPortCurrCardLocation,
       "mcmPortCurrCardShelf": mcmPortCurrCardShelf,
       "mcmPortCurrCardSlot": mcmPortCurrCardSlot,
       "mcmPortCurrIndex": mcmPortCurrIndex,
       "mcmPortCurrASs": mcmPortCurrASs,
       "mcmPortCurrFrameASs": mcmPortCurrFrameASs,
       "mcmPortCurrFEs": mcmPortCurrFEs,
       "mcmPortCurrCRCErrs": mcmPortCurrCRCErrs,
       "mcmPortCurrSESs": mcmPortCurrSESs,
       "mcmPortCurrSEFSs": mcmPortCurrSEFSs,
       "mcmPortCurrUASs": mcmPortCurrUASs,
       "mcmPortCurrLESs": mcmPortCurrLESs,
       "mcmPortCurrBESs": mcmPortCurrBESs,
       "mcmPortCurrDMs": mcmPortCurrDMs,
       "mcmPortCurrLCVs": mcmPortCurrLCVs,
       "fnPerf": fnPerf,
       "fnNumEvents": fnNumEvents,
       "fnPerfTable": fnPerfTable,
       "fnPerfEntry": fnPerfEntry,
       "fnPerfID": fnPerfID,
       "fnPerfState": fnPerfState,
       "fnPerfStatus": fnPerfStatus,
       "csimPerf": csimPerf,
       "csimNumEvents": csimNumEvents,
       "csimCurrentTable": csimCurrentTable,
       "csimCurrentEntry": csimCurrentEntry,
       "csimCurrentLocation": csimCurrentLocation,
       "csimCurrentShelf": csimCurrentShelf,
       "csimCurrentSlot": csimCurrentSlot,
       "csimCurrentEFIs": csimCurrentEFIs,
       "csimCurrentEIs": csimCurrentEIs,
       "csimCurrentSEIs": csimCurrentSEIs,
       "csimCurrentBERs": csimCurrentBERs,
       "csimCurrentUAIs": csimCurrentUAIs,
       "csimCurrentGIs": csimCurrentGIs,
       "csimCurrentDateTime": csimCurrentDateTime,
       "rpsmPerf": rpsmPerf,
       "rpsmNumEvents": rpsmNumEvents,
       "rpsmPerfTable": rpsmPerfTable,
       "rpsmPerfEntry": rpsmPerfEntry,
       "rpsmPerfLocation": rpsmPerfLocation,
       "rpsmPerfShelf": rpsmPerfShelf,
       "rpsmPerfSlot": rpsmPerfSlot,
       "rpsmPerfState": rpsmPerfState,
       "rpsmPerfStatus": rpsmPerfStatus,
       "rpsmLinkEastState": rpsmLinkEastState,
       "rpsmLinkEastStatus": rpsmLinkEastStatus,
       "rpsmLinkWestState": rpsmLinkWestState,
       "rpsmLinkWestStatus": rpsmLinkWestStatus,
       "rpsmLastBootTime": rpsmLastBootTime,
       "rpsmAvailTime": rpsmAvailTime,
       "rpsmErrFreeSecs": rpsmErrFreeSecs,
       "rpsmWorkingPower": rpsmWorkingPower,
       "rpsmProtectionPower": rpsmProtectionPower,
       "rsdmPerf": rsdmPerf,
       "rsdmNumEvents": rsdmNumEvents,
       "rsdmPerfTable": rsdmPerfTable,
       "rsdmPerfEntry": rsdmPerfEntry,
       "rsdmPerfLocation": rsdmPerfLocation,
       "rsdmPerfShelf": rsdmPerfShelf,
       "rsdmPerfSlot": rsdmPerfSlot,
       "rsdmPerfState": rsdmPerfState,
       "rsdmPerfStatus": rsdmPerfStatus,
       "rsdmLinkEastState": rsdmLinkEastState,
       "rsdmLinkEastStatus": rsdmLinkEastStatus,
       "rsdmLinkWestState": rsdmLinkWestState,
       "rsdmLinkWestStatus": rsdmLinkWestStatus,
       "rsdmLastBootTime": rsdmLastBootTime,
       "rsdmAvailTime": rsdmAvailTime,
       "rsdmErrFreeSecs": rsdmErrFreeSecs,
       "rsdmWorkingPower": rsdmWorkingPower,
       "rsdmProtectionPower": rsdmProtectionPower,
       "rtdmPerf": rtdmPerf,
       "rtdmNumEvents": rtdmNumEvents,
       "rtdmPerfTable": rtdmPerfTable,
       "rtdmPerfEntry": rtdmPerfEntry,
       "rtdmPerfLocation": rtdmPerfLocation,
       "rtdmPerfShelf": rtdmPerfShelf,
       "rtdmPerfSlot": rtdmPerfSlot,
       "rtdmPerfState": rtdmPerfState,
       "rtdmPerfStatus": rtdmPerfStatus,
       "rtdmLastBootTime": rtdmLastBootTime,
       "rtdmAvailTime": rtdmAvailTime,
       "rtdmErrFreeSecs": rtdmErrFreeSecs,
       "osamPerf": osamPerf,
       "osamNumEvents": osamNumEvents,
       "osamCntrTable": osamCntrTable,
       "osamCntrEntry": osamCntrEntry,
       "osamCntrLocation": osamCntrLocation,
       "osamCntrShelf": osamCntrShelf,
       "osamCntrSlot": osamCntrSlot,
       "osamCntrKeepAlivePktSent": osamCntrKeepAlivePktSent,
       "osamCntrKeepAlivePktRcvd": osamCntrKeepAlivePktRcvd,
       "osamCntrKeepAliveBadPktRcvd": osamCntrKeepAliveBadPktRcvd,
       "osamPerfTable": osamPerfTable,
       "osamPerfEntry": osamPerfEntry,
       "osamPerfLocation": osamPerfLocation,
       "osamPerfShelf": osamPerfShelf,
       "osamPerfSlot": osamPerfSlot,
       "osamPerfState": osamPerfState,
       "osamPerfStatus": osamPerfStatus,
       "osamPerfLastBootTime": osamPerfLastBootTime,
       "osamPerfAvailTime": osamPerfAvailTime,
       "osamPerfErrFreeSecs": osamPerfErrFreeSecs,
       "osamPerfAprStatus": osamPerfAprStatus,
       "osamPerfInputPower": osamPerfInputPower,
       "osamPerfBFDPower": osamPerfBFDPower,
       "osamPerfOutputPower": osamPerfOutputPower,
       "osamPerfAPRDetector1Power": osamPerfAPRDetector1Power,
       "osamPerfAPRDetector2Power": osamPerfAPRDetector2Power,
       "osamPerfLaserTemperature": osamPerfLaserTemperature,
       "osamPerfTecCurrent": osamPerfTecCurrent,
       "osamPerfBiasCurrent": osamPerfBiasCurrent,
       "osamPerfAmplifierGain": osamPerfAmplifierGain,
       "osamPerfPCBTemperature": osamPerfPCBTemperature,
       "osam2PerfPump1BFDPower": osam2PerfPump1BFDPower,
       "osam2PerfPump2BFDPower": osam2PerfPump2BFDPower,
       "osam2PerfPump1IBias": osam2PerfPump1IBias,
       "osam2PerfPump2IBias": osam2PerfPump2IBias,
       "osam2PerfPump1ITEC": osam2PerfPump1ITEC,
       "osam2PerfPump2ITEC": osam2PerfPump2ITEC,
       "osam2PerfPump1Temp": osam2PerfPump1Temp,
       "osam2PerfPump2Temp": osam2PerfPump2Temp,
       "osam2PerfGBInputPower": osam2PerfGBInputPower,
       "osam2PerfGBOutputPower": osam2PerfGBOutputPower,
       "osam2PerfAttenuation": osam2PerfAttenuation,
       "rsmPerf": rsmPerf,
       "rsmNumEvents": rsmNumEvents,
       "rsmPerfTable": rsmPerfTable,
       "rsmPerfEntry": rsmPerfEntry,
       "rsmPerfLocation": rsmPerfLocation,
       "rsmPerfShelf": rsmPerfShelf,
       "rsmPerfSlot": rsmPerfSlot,
       "rsmPerfState": rsmPerfState,
       "rsmPerfStatus": rsmPerfStatus,
       "rsmLinkAState": rsmLinkAState,
       "rsmLinkAStatus": rsmLinkAStatus,
       "rsmLinkBState": rsmLinkBState,
       "rsmLinkBStatus": rsmLinkBStatus,
       "rsmLastBootTime": rsmLastBootTime,
       "rsmAvailTime": rsmAvailTime,
       "rsmErrFreeSecs": rsmErrFreeSecs,
       "rsmWorkingPower": rsmWorkingPower,
       "rsmProtectionPower": rsmProtectionPower,
       "upsmPerf": upsmPerf,
       "upsmNumEvents": upsmNumEvents,
       "upsmPerfTable": upsmPerfTable,
       "upsmPerfEntry": upsmPerfEntry,
       "upsmPerfLocation": upsmPerfLocation,
       "upsmPerfShelf": upsmPerfShelf,
       "upsmPerfSlot": upsmPerfSlot,
       "upsmPerfState": upsmPerfState,
       "upsmPerfStatus": upsmPerfStatus,
       "upsmLinkAState": upsmLinkAState,
       "upsmLinkAStatus": upsmLinkAStatus,
       "upsmLinkBState": upsmLinkBState,
       "upsmLinkBStatus": upsmLinkBStatus,
       "upsmLastBootTime": upsmLastBootTime,
       "upsmAvailTime": upsmAvailTime,
       "upsmErrFreeSecs": upsmErrFreeSecs,
       "upsmWorkingPower": upsmWorkingPower,
       "upsmProtectionPower": upsmProtectionPower,
       "mcmescPerf": mcmescPerf,
       "mcmescNumEvents": mcmescNumEvents,
       "mcmescCntrTable": mcmescCntrTable,
       "mcmescCntrEntry": mcmescCntrEntry,
       "mcmescCntrLocation": mcmescCntrLocation,
       "mcmescCntrShelf": mcmescCntrShelf,
       "mcmescCntrSlot": mcmescCntrSlot,
       "mcmescCntrType": mcmescCntrType,
       "mcmescCounterFlag": mcmescCounterFlag,
       "mcmescTotPktSent": mcmescTotPktSent,
       "mcmescTotPktRcvd": mcmescTotPktRcvd,
       "mcmescBadPktRcvd": mcmescBadPktRcvd,
       "mcmescTotBadTrans": mcmescTotBadTrans,
       "mcmescBytesSent": mcmescBytesSent,
       "mcmescBytesRcvd": mcmescBytesRcvd,
       "mcmescMsgsDlvrd": mcmescMsgsDlvrd,
       "mcmescClearCntrs": mcmescClearCntrs,
       "mcmescPerfTable": mcmescPerfTable,
       "mcmescPerfEntry": mcmescPerfEntry,
       "mcmescPerfLocation": mcmescPerfLocation,
       "mcmescPerfShelf": mcmescPerfShelf,
       "mcmescPerfSlot": mcmescPerfSlot,
       "mcmescPerfState": mcmescPerfState,
       "mcmescPerfStatus": mcmescPerfStatus,
       "mcmescLastBootTime": mcmescLastBootTime,
       "mcmescAvailTime": mcmescAvailTime,
       "mcmescPortCurrTable": mcmescPortCurrTable,
       "mcmescPortCurrEntry": mcmescPortCurrEntry,
       "mcmescPortCurrCardLocation": mcmescPortCurrCardLocation,
       "mcmescPortCurrCardShelf": mcmescPortCurrCardShelf,
       "mcmescPortCurrCardSlot": mcmescPortCurrCardSlot,
       "mcmescPortCurrPort": mcmescPortCurrPort,
       "mcmescPortCurrRxSig": mcmescPortCurrRxSig,
       "mcmescPortCurrDuration": mcmescPortCurrDuration,
       "mcmescPortCurrEns": mcmescPortCurrEns,
       "mcmescPortCurrLoss": mcmescPortCurrLoss,
       "mcmescPortCurrCrcErr": mcmescPortCurrCrcErr,
       "mcmescPortCurrOobErr": mcmescPortCurrOobErr,
       "mcmescPortCurrRdpErr": mcmescPortCurrRdpErr,
       "mcmescPortCurrBer": mcmescPortCurrBer,
       "mcmescLinkCurrTable": mcmescLinkCurrTable,
       "mcmescLinkCurrEntry": mcmescLinkCurrEntry,
       "mcmescLinkCurrCardLocation": mcmescLinkCurrCardLocation,
       "mcmescLinkCurrCardShelf": mcmescLinkCurrCardShelf,
       "mcmescLinkCurrCardSlot": mcmescLinkCurrCardSlot,
       "mcmescLinkCurrRxSig": mcmescLinkCurrRxSig,
       "mcmescLinkCurrDuration": mcmescLinkCurrDuration,
       "mcmescLinkCurrTsos": mcmescLinkCurrTsos,
       "mcmescLinkCurrLoss": mcmescLinkCurrLoss,
       "mcmescLinkCurrCrcErr": mcmescLinkCurrCrcErr,
       "mcmescLinkCurrOobErr": mcmescLinkCurrOobErr,
       "mcmescLinkCurrRdpErr": mcmescLinkCurrRdpErr,
       "mcmescLinkCurrBer": mcmescLinkCurrBer,
       "routingPerf": routingPerf,
       "imnRoutingPerfTable": imnRoutingPerfTable,
       "imnRoutingPerfEntry": imnRoutingPerfEntry,
       "imnRoutePerfIpDest": imnRoutePerfIpDest,
       "imnRoutePerfStatus": imnRoutePerfStatus,
       "tapPerf": tapPerf,
       "tapNumEvents": tapNumEvents,
       "tapPerfTable": tapPerfTable,
       "tapPerfEntry": tapPerfEntry,
       "tapPerfLocation": tapPerfLocation,
       "tapPerfShelf": tapPerfShelf,
       "tapPerfSlot": tapPerfSlot,
       "tapType": tapType,
       "tapPerfState": tapPerfState,
       "tapPerfStatus": tapPerfStatus,
       "tapLastBootTime": tapLastBootTime,
       "tapAvailTime": tapAvailTime,
       "tapErrFreeSecs": tapErrFreeSecs,
       "voadmPerf": voadmPerf,
       "voadmNumEvents": voadmNumEvents,
       "voadmPerfTable": voadmPerfTable,
       "voadmPerfEntry": voadmPerfEntry,
       "voadmPerfLocation": voadmPerfLocation,
       "voadmPerfShelf": voadmPerfShelf,
       "voadmPerfSlot": voadmPerfSlot,
       "voadmType": voadmType,
       "voadmPerfState": voadmPerfState,
       "voadmPerfStatus": voadmPerfStatus,
       "voadmLastBootTime": voadmLastBootTime,
       "voadmAvailTime": voadmAvailTime,
       "voadmErrFreeSecs": voadmErrFreeSecs,
       "dmmPerf": dmmPerf,
       "dmmNumEvents": dmmNumEvents,
       "dmmPerfTable": dmmPerfTable,
       "dmmPerfEntry": dmmPerfEntry,
       "dmmPerfLocation": dmmPerfLocation,
       "dmmPerfShelf": dmmPerfShelf,
       "dmmPerfSlot": dmmPerfSlot,
       "dmmPerfState": dmmPerfState,
       "dmmPerfStatus": dmmPerfStatus,
       "dmmLastBootTime": dmmLastBootTime,
       "dmmAvailTime": dmmAvailTime,
       "dmmErrFreeSecs": dmmErrFreeSecs,
       "dmmCntrTable": dmmCntrTable,
       "dmmCntrEntry": dmmCntrEntry,
       "dmmCntrLocation": dmmCntrLocation,
       "dmmCntrShelf": dmmCntrShelf,
       "dmmCntrSlot": dmmCntrSlot,
       "dmmCntrType": dmmCntrType,
       "dmmTotPktSent": dmmTotPktSent,
       "dmmTotPktRcvd": dmmTotPktRcvd,
       "dmmTotBadTrans": dmmTotBadTrans,
       "dmmBadPktRcvd": dmmBadPktRcvd,
       "dmmBytesSent": dmmBytesSent,
       "dmmBytesRcvd": dmmBytesRcvd,
       "dmmMsgsDlvrd": dmmMsgsDlvrd,
       "dmmClearCntrs": dmmClearCntrs,
       "dmmPmTable": dmmPmTable,
       "dmmPmEntry": dmmPmEntry,
       "dmmPmLocation": dmmPmLocation,
       "dmmPmShelf": dmmPmShelf,
       "dmmPmSlot": dmmPmSlot,
       "dmmPmType": dmmPmType,
       "dmmPmErrors": dmmPmErrors,
       "dmmPmErredSecs": dmmPmErredSecs,
       "dmmStartTime": dmmStartTime,
       "dmmClearPmCntrs": dmmClearPmCntrs,
       "dmmPmRxPower": dmmPmRxPower,
       "dmmPmTxPower": dmmPmTxPower,
       "ocm10gfPerf": ocm10gfPerf,
       "ocm10gfNumEvents": ocm10gfNumEvents,
       "ocm10gfPerfTable": ocm10gfPerfTable,
       "ocm10gfPerfEntry": ocm10gfPerfEntry,
       "ocm10gfPerfLocation": ocm10gfPerfLocation,
       "ocm10gfPerfShelf": ocm10gfPerfShelf,
       "ocm10gfPerfSlot": ocm10gfPerfSlot,
       "ocm10gfPerfState": ocm10gfPerfState,
       "ocm10gfPerfStatus": ocm10gfPerfStatus,
       "ocm10gfLastBootTime": ocm10gfLastBootTime,
       "ocm10gfAvailTime": ocm10gfAvailTime,
       "ocm10gfErrFreeSecs": ocm10gfErrFreeSecs,
       "ocm10gfCntrTable": ocm10gfCntrTable,
       "ocm10gfCntrEntry": ocm10gfCntrEntry,
       "ocm10gfCntrLocation": ocm10gfCntrLocation,
       "ocm10gfCntrShelf": ocm10gfCntrShelf,
       "ocm10gfCntrSlot": ocm10gfCntrSlot,
       "ocm10gfCntrType": ocm10gfCntrType,
       "ocm10gfTotPktSent": ocm10gfTotPktSent,
       "ocm10gfTotPktRcvd": ocm10gfTotPktRcvd,
       "ocm10gfTotBadTrans": ocm10gfTotBadTrans,
       "ocm10gfBadPktRcvd": ocm10gfBadPktRcvd,
       "ocm10gfBytesSent": ocm10gfBytesSent,
       "ocm10gfBytesRcvd": ocm10gfBytesRcvd,
       "ocm10gfMsgsDlvrd": ocm10gfMsgsDlvrd,
       "ocm10gfClearCntrs": ocm10gfClearCntrs,
       "ocm10gfPmTable": ocm10gfPmTable,
       "ocm10gfPmEntry": ocm10gfPmEntry,
       "ocm10gfPmLocation": ocm10gfPmLocation,
       "ocm10gfPmShelf": ocm10gfPmShelf,
       "ocm10gfPmSlot": ocm10gfPmSlot,
       "ocm10gfPmNumIntervals": ocm10gfPmNumIntervals,
       "ocm10gfPmLinkRxPwr": ocm10gfPmLinkRxPwr,
       "ocm10gfPmLinkTxPwr": ocm10gfPmLinkTxPwr,
       "ocm10gfPmLinkFecErrors": ocm10gfPmLinkFecErrors,
       "ocm10gfPmLinkUncorrectedFecErrs": ocm10gfPmLinkUncorrectedFecErrs,
       "ocm10gfPmLinkCorrectedFecErrs": ocm10gfPmLinkCorrectedFecErrs,
       "ocm10gfPmLinkCorrectedOnesErr": ocm10gfPmLinkCorrectedOnesErr,
       "ocm10gfPmLinkErredSeconds": ocm10gfPmLinkErredSeconds,
       "ocm10gfPmCpeRxPwr": ocm10gfPmCpeRxPwr,
       "ocm10gfPmCpeTxPwr": ocm10gfPmCpeTxPwr,
       "ocm10gfPmCpeSonetRxB2Errs": ocm10gfPmCpeSonetRxB2Errs,
       "ocm10gfPmCpeSonetTxB2Errs": ocm10gfPmCpeSonetTxB2Errs,
       "ocm10gfPmCpe10GbeRxTotalPkts": ocm10gfPmCpe10GbeRxTotalPkts,
       "ocm10gfPmCpe10GbeRxErredPkts": ocm10gfPmCpe10GbeRxErredPkts,
       "ocm10gfPmCpe10GbeTxTotalPkts": ocm10gfPmCpe10GbeTxTotalPkts,
       "ocm10gfPmCpe10gbeTxErredPkts": ocm10gfPmCpe10gbeTxErredPkts,
       "ocm10gfPmCpeErredSeconds": ocm10gfPmCpeErredSeconds,
       "ocm10gfClearPmCntrs": ocm10gfClearPmCntrs,
       "ocm2Perf": ocm2Perf,
       "ocm2NumEvents": ocm2NumEvents,
       "ocm2PerfTable": ocm2PerfTable,
       "ocm2PerfEntry": ocm2PerfEntry,
       "ocm2PerfLocation": ocm2PerfLocation,
       "ocm2PerfShelf": ocm2PerfShelf,
       "ocm2PerfSlot": ocm2PerfSlot,
       "ocm2PerfState": ocm2PerfState,
       "ocm2PerfStatus": ocm2PerfStatus,
       "ocm2LastBootTime": ocm2LastBootTime,
       "ocm2AvailTime": ocm2AvailTime,
       "ocm2ErrFreeSecs": ocm2ErrFreeSecs,
       "ocm2CntrTable": ocm2CntrTable,
       "ocm2CntrEntry": ocm2CntrEntry,
       "ocm2CntrLocation": ocm2CntrLocation,
       "ocm2CntrShelf": ocm2CntrShelf,
       "ocm2CntrSlot": ocm2CntrSlot,
       "ocm2CntrType": ocm2CntrType,
       "ocm2TotPktSent": ocm2TotPktSent,
       "ocm2TotPktRcvd": ocm2TotPktRcvd,
       "ocm2TotBadTrans": ocm2TotBadTrans,
       "ocm2BadPktRcvd": ocm2BadPktRcvd,
       "ocm2BytesSent": ocm2BytesSent,
       "ocm2BytesRcvd": ocm2BytesRcvd,
       "ocm2MsgsDlvrd": ocm2MsgsDlvrd,
       "ocm2ClearCntrs": ocm2ClearCntrs,
       "ocm2PmTable": ocm2PmTable,
       "ocm2PmEntry": ocm2PmEntry,
       "ocm2PmLocation": ocm2PmLocation,
       "ocm2PmShelf": ocm2PmShelf,
       "ocm2PmSlot": ocm2PmSlot,
       "ocm2PmLink": ocm2PmLink,
       "ocm2PmLinkRxPwr": ocm2PmLinkRxPwr,
       "ocm2PmLinkTxPwr": ocm2PmLinkTxPwr,
       "ocm2PmCpeRxPwr": ocm2PmCpeRxPwr,
       "ocm2PmCpeTxPwr": ocm2PmCpeTxPwr,
       "ocm2PmNumLinkRxIntervals": ocm2PmNumLinkRxIntervals,
       "ocm2PmLinkRxErrors": ocm2PmLinkRxErrors,
       "ocm2PmLinkRxErredSeconds": ocm2PmLinkRxErredSeconds,
       "ocm2PmNumCpeRxIntervals": ocm2PmNumCpeRxIntervals,
       "ocm2PmCpeRxErrors": ocm2PmCpeRxErrors,
       "ocm2PmCpeRxErredSeconds": ocm2PmCpeRxErredSeconds,
       "ocm2PmNumCpeTxIntervals": ocm2PmNumCpeTxIntervals,
       "ocm2PmCpeTxErrors": ocm2PmCpeTxErrors,
       "ocm2PmCpeTxErredSeconds": ocm2PmCpeTxErredSeconds,
       "ocm2ClearPmCntrs": ocm2ClearPmCntrs,
       "oscPerf": oscPerf,
       "oscNumEvents": oscNumEvents,
       "oscPerfTable": oscPerfTable,
       "oscPerfEntry": oscPerfEntry,
       "oscPerfLocation": oscPerfLocation,
       "oscPerfShelf": oscPerfShelf,
       "oscPerfSlot": oscPerfSlot,
       "oscPerfState": oscPerfState,
       "oscPerfStatus": oscPerfStatus,
       "oscLastBootTime": oscLastBootTime,
       "oscAvailTime": oscAvailTime,
       "oscErrFreeSecs": oscErrFreeSecs,
       "oscCntrTable": oscCntrTable,
       "oscCntrEntry": oscCntrEntry,
       "oscCntrLocation": oscCntrLocation,
       "oscCntrShelf": oscCntrShelf,
       "oscCntrSlot": oscCntrSlot,
       "oscCntrType": oscCntrType,
       "oscTotPktSent": oscTotPktSent,
       "oscTotPktRcvd": oscTotPktRcvd,
       "oscTotBadTrans": oscTotBadTrans,
       "oscBadPktRcvd": oscBadPktRcvd,
       "oscBytesSent": oscBytesSent,
       "oscBytesRcvd": oscBytesRcvd,
       "oscMsgsDlvrd": oscMsgsDlvrd,
       "oscClearCntrs": oscClearCntrs,
       "oscPmTable": oscPmTable,
       "oscPmEntry": oscPmEntry,
       "oscPmLocation": oscPmLocation,
       "oscPmShelf": oscPmShelf,
       "oscPmSlot": oscPmSlot,
       "oscPmErrors": oscPmErrors,
       "oscPmErredSecs": oscPmErredSecs,
       "oscStartTime": oscStartTime,
       "oscClearPmCntrs": oscClearPmCntrs,
       "ocm4gPerf": ocm4gPerf,
       "ocm4gNumEvents": ocm4gNumEvents,
       "ocm4gPerfTable": ocm4gPerfTable,
       "ocm4gPerfEntry": ocm4gPerfEntry,
       "ocm4gPerfLocation": ocm4gPerfLocation,
       "ocm4gPerfShelf": ocm4gPerfShelf,
       "ocm4gPerfSlot": ocm4gPerfSlot,
       "ocm4gPerfState": ocm4gPerfState,
       "ocm4gPerfStatus": ocm4gPerfStatus,
       "ocm4gLastBootTime": ocm4gLastBootTime,
       "ocm4gAvailTime": ocm4gAvailTime,
       "ocm4gErrFreeSecs": ocm4gErrFreeSecs,
       "ocm4gCntrTable": ocm4gCntrTable,
       "ocm4gCntrEntry": ocm4gCntrEntry,
       "ocm4gCntrLocation": ocm4gCntrLocation,
       "ocm4gCntrShelf": ocm4gCntrShelf,
       "ocm4gCntrSlot": ocm4gCntrSlot,
       "ocm4gCntrType": ocm4gCntrType,
       "ocm4gTotPktSent": ocm4gTotPktSent,
       "ocm4gTotPktRcvd": ocm4gTotPktRcvd,
       "ocm4gTotBadTrans": ocm4gTotBadTrans,
       "ocm4gBadPktRcvd": ocm4gBadPktRcvd,
       "ocm4gBytesSent": ocm4gBytesSent,
       "ocm4gBytesRcvd": ocm4gBytesRcvd,
       "ocm4gMsgsDlvrd": ocm4gMsgsDlvrd,
       "ocm4gClearCntrs": ocm4gClearCntrs,
       "ocm4gPmTable": ocm4gPmTable,
       "ocm4gPmEntry": ocm4gPmEntry,
       "ocm4gPmLocation": ocm4gPmLocation,
       "ocm4gPmShelf": ocm4gPmShelf,
       "ocm4gPmSlot": ocm4gPmSlot,
       "ocm4gPmLink": ocm4gPmLink,
       "ocm4gPmLinkRxPwr": ocm4gPmLinkRxPwr,
       "ocm4gPmLinkTxPwr": ocm4gPmLinkTxPwr,
       "ocm4gPmCpeRxPwr": ocm4gPmCpeRxPwr,
       "ocm4gPmCpeTxPwr": ocm4gPmCpeTxPwr,
       "ocm4gPmNumLinkRxIntervals": ocm4gPmNumLinkRxIntervals,
       "ocm4gPmLinkRxErrors": ocm4gPmLinkRxErrors,
       "ocm4gPmLinkRxErredSeconds": ocm4gPmLinkRxErredSeconds,
       "ocm4gPmNumCpeRxIntervals": ocm4gPmNumCpeRxIntervals,
       "ocm4gPmCpeRxErrors": ocm4gPmCpeRxErrors,
       "ocm4gPmCpeRxErredSeconds": ocm4gPmCpeRxErredSeconds,
       "ocm4gPmNumCpeTxIntervals": ocm4gPmNumCpeTxIntervals,
       "ocm4gPmCpeTxErrors": ocm4gPmCpeTxErrors,
       "ocm4gPmCpeTxErredSeconds": ocm4gPmCpeTxErredSeconds,
       "ocm4gClearPmCntrs": ocm4gClearPmCntrs,
       "oetPerf": oetPerf,
       "oetNumEvents": oetNumEvents,
       "oetPerfTable": oetPerfTable,
       "oetPerfEntry": oetPerfEntry,
       "oetPerfLocation": oetPerfLocation,
       "oetPerfShelf": oetPerfShelf,
       "oetPerfSlot": oetPerfSlot,
       "oetPerfState": oetPerfState,
       "oetPerfStatus": oetPerfStatus,
       "oetLastBootTime": oetLastBootTime,
       "oetAvailTime": oetAvailTime,
       "oetErrFreeSecs": oetErrFreeSecs,
       "oetPmLinkTable": oetPmLinkTable,
       "oetPmLinkEntry": oetPmLinkEntry,
       "oetPmLinkLocation": oetPmLinkLocation,
       "oetPmLinkShelf": oetPmLinkShelf,
       "oetPmLinkSlot": oetPmLinkSlot,
       "oetPmLink": oetPmLink,
       "oetPmLinkNumIntervals": oetPmLinkNumIntervals,
       "oetPmLinkRxPwr": oetPmLinkRxPwr,
       "oetPmLinkRxBytes": oetPmLinkRxBytes,
       "oetPmLinkRxFcsErrs": oetPmLinkRxFcsErrs,
       "oetPmLinkTxPwr": oetPmLinkTxPwr,
       "oetPmLinkTxTemp": oetPmLinkTxTemp,
       "oetPmLinkTxBytes": oetPmLinkTxBytes,
       "oetPmLinkFecTx": oetPmLinkFecTx,
       "oetPmLinkFecCorrected1s": oetPmLinkFecCorrected1s,
       "oetPmLinkFecCorrected0s": oetPmLinkFecCorrected0s,
       "oetPmLinkFecCorrectedBit": oetPmLinkFecCorrectedBit,
       "oetPmLinkFecCorrectedByte": oetPmLinkFecCorrectedByte,
       "oetPmLinkFecUncorrectedByte": oetPmLinkFecUncorrectedByte,
       "oetPmLinkFecBlock": oetPmLinkFecBlock,
       "oetPmPortTable": oetPmPortTable,
       "oetPmPortEntry": oetPmPortEntry,
       "oetPmPortLocation": oetPmPortLocation,
       "oetPmPortShelf": oetPmPortShelf,
       "oetPmPortSlot": oetPmPortSlot,
       "oetPmPortIndex": oetPmPortIndex,
       "oetPmPortNumIntervals": oetPmPortNumIntervals,
       "oetPmPortRxPwr": oetPmPortRxPwr,
       "oetPmPortRxBytes": oetPmPortRxBytes,
       "oetPmPortRxFcsErrs": oetPmPortRxFcsErrs,
       "oetPmPortTxPwr": oetPmPortTxPwr,
       "oetPmPortTxTemp": oetPmPortTxTemp,
       "oetPmPortTxBytes": oetPmPortTxBytes,
       "uobPerf": uobPerf,
       "uobNumEvents": uobNumEvents,
       "uobPerfTable": uobPerfTable,
       "uobPerfEntry": uobPerfEntry,
       "uobPerfLocation": uobPerfLocation,
       "uobPerfShelf": uobPerfShelf,
       "uobPerfSlot": uobPerfSlot,
       "uobPerfState": uobPerfState,
       "uobPerfStatus": uobPerfStatus,
       "uobLastBootTime": uobLastBootTime,
       "uobAvailTime": uobAvailTime,
       "uobErrFreeSecs": uobErrFreeSecs,
       "uobPmTable": uobPmTable,
       "uobPmEntry": uobPmEntry,
       "uobPmLocation": uobPmLocation,
       "uobPmShelf": uobPmShelf,
       "uobPmSlot": uobPmSlot,
       "uobPmSystemStatus": uobPmSystemStatus,
       "uobPmPumpCurrent": uobPmPumpCurrent,
       "uobPmPumpTemp": uobPmPumpTemp,
       "uobPmInputPower": uobPmInputPower,
       "uobPmOutPower": uobPmOutPower,
       "uobPmTotalGain": uobPmTotalGain,
       "uobPmReflection": uobPmReflection,
       "fc8gPerf": fc8gPerf,
       "fc8gNumEvents": fc8gNumEvents,
       "fc8gPerfTable": fc8gPerfTable,
       "fc8gPerfEntry": fc8gPerfEntry,
       "fc8gPerfLocation": fc8gPerfLocation,
       "fc8gPerfShelf": fc8gPerfShelf,
       "fc8gPerfSlot": fc8gPerfSlot,
       "fc8gPerfState": fc8gPerfState,
       "fc8gPerfStatus": fc8gPerfStatus,
       "fc8gLastBootTime": fc8gLastBootTime,
       "fc8gAvailTime": fc8gAvailTime,
       "fc8gErrFreeSecs": fc8gErrFreeSecs,
       "historical": historical,
       "systemHist": systemHist,
       "sysHistTable": sysHistTable,
       "sysHistEntry": sysHistEntry,
       "sysHMode": sysHMode,
       "sysHLastBootTime": sysHLastBootTime,
       "sysHAvailTime": sysHAvailTime,
       "sysHErrFreeSecs": sysHErrFreeSecs,
       "downloadHist": downloadHist,
       "dlHistTable": dlHistTable,
       "dlHistEntry": dlHistEntry,
       "dlHMode": dlHMode,
       "dlHOkDownloads": dlHOkDownloads,
       "dlHBadDownloads": dlHBadDownloads,
       "dlHLongestTime": dlHLongestTime,
       "dlHLongestSize": dlHLongestSize,
       "cpHist": cpHist,
       "cpHistTable": cpHistTable,
       "cpHistEntry": cpHistEntry,
       "cpHMode": cpHMode,
       "cpHNumEvents": cpHNumEvents,
       "cpHTrapsSent": cpHTrapsSent,
       "cpHSNMPCmdsRcvd": cpHSNMPCmdsRcvd,
       "cpHCntrTable": cpHCntrTable,
       "cpHCntrEntry": cpHCntrEntry,
       "cpHCntrMode": cpHCntrMode,
       "cpHCntrShelf": cpHCntrShelf,
       "cpHCntrSlot": cpHCntrSlot,
       "cpHCntrType": cpHCntrType,
       "cpHTotPktSent": cpHTotPktSent,
       "cpHTotPktRcvd": cpHTotPktRcvd,
       "cpHBadPktRcvd": cpHBadPktRcvd,
       "cpHTotBadTrans": cpHTotBadTrans,
       "cpHBytesSent": cpHBytesSent,
       "cpHBytesRcvd": cpHBytesRcvd,
       "cpHMsgsDlvrd": cpHMsgsDlvrd,
       "cpHBufAllocFail": cpHBufAllocFail,
       "cpHEcbAllocFail": cpHEcbAllocFail,
       "cpHHistTable": cpHHistTable,
       "cpHHistEntry": cpHHistEntry,
       "cpHHistMode": cpHHistMode,
       "cpHHistShelf": cpHHistShelf,
       "cpHHistSlot": cpHHistSlot,
       "cpHLastBootTime": cpHLastBootTime,
       "cpHAvailTime": cpHAvailTime,
       "cpHErrFreeSecs": cpHErrFreeSecs,
       "ccHist": ccHist,
       "ccHistTable": ccHistTable,
       "ccHistEntry": ccHistEntry,
       "ccHMode": ccHMode,
       "ccHNumEvents": ccHNumEvents,
       "ccHCntrTable": ccHCntrTable,
       "ccHCntrEntry": ccHCntrEntry,
       "ccHCntrMode": ccHCntrMode,
       "ccHCntrLocation": ccHCntrLocation,
       "ccHCntrShelf": ccHCntrShelf,
       "ccHCntrSlot": ccHCntrSlot,
       "ccHCntrType": ccHCntrType,
       "ccHTotPktSent": ccHTotPktSent,
       "ccHTotPktRcvd": ccHTotPktRcvd,
       "ccHBadPktRcvd": ccHBadPktRcvd,
       "ccHTotBadTrans": ccHTotBadTrans,
       "ccHBytesSent": ccHBytesSent,
       "ccHBytesRcvd": ccHBytesRcvd,
       "ccHMsgsDlvrd": ccHMsgsDlvrd,
       "ccHBufAllocFail": ccHBufAllocFail,
       "ccHEcbAllocFail": ccHEcbAllocFail,
       "ccHHistTable": ccHHistTable,
       "ccHHistEntry": ccHHistEntry,
       "ccHHistMode": ccHHistMode,
       "ccHHistLocation": ccHHistLocation,
       "ccHHistShelf": ccHHistShelf,
       "ccHHistSlot": ccHHistSlot,
       "ccHLastBootTime": ccHLastBootTime,
       "ccHAvailTime": ccHAvailTime,
       "ccHErrFreeSecs": ccHErrFreeSecs,
       "muxHist": muxHist,
       "muxHistTable": muxHistTable,
       "muxHistEntry": muxHistEntry,
       "muxHMode": muxHMode,
       "muxHNumEvents": muxHNumEvents,
       "muxHHistTable": muxHHistTable,
       "muxHHistEntry": muxHHistEntry,
       "muxHHistMode": muxHHistMode,
       "muxHHistLocation": muxHHistLocation,
       "muxHHistShelf": muxHHistShelf,
       "muxHHistSlot": muxHHistSlot,
       "muxHHistType": muxHHistType,
       "muxHLastBootTime": muxHLastBootTime,
       "muxHAvailTime": muxHAvailTime,
       "muxHErrFreeSecs": muxHErrFreeSecs,
       "psHist": psHist,
       "psHistTable": psHistTable,
       "psHistEntry": psHistEntry,
       "psHMode": psHMode,
       "psHNumEvents": psHNumEvents,
       "fadmHist": fadmHist,
       "fadmHistTable": fadmHistTable,
       "fadmHistEntry": fadmHistEntry,
       "fadmHMode": fadmHMode,
       "fadmHNumEvents": fadmHNumEvents,
       "fadmHHistTable": fadmHHistTable,
       "fadmHHistEntry": fadmHHistEntry,
       "fadmHHistMode": fadmHHistMode,
       "fadmHHistLocation": fadmHHistLocation,
       "fadmHHistShelf": fadmHHistShelf,
       "fadmHHistSlot": fadmHHistSlot,
       "fadmHLastBootTime": fadmHLastBootTime,
       "fadmHAvailTime": fadmHAvailTime,
       "fadmHErrFreeSecs": fadmHErrFreeSecs,
       "oppmHist": oppmHist,
       "oppmHistTable": oppmHistTable,
       "oppmHistEntry": oppmHistEntry,
       "oppmHMode": oppmHMode,
       "oppmHNumEvents": oppmHNumEvents,
       "oppmHHistTable": oppmHHistTable,
       "oppmHHistEntry": oppmHHistEntry,
       "oppmHHistMode": oppmHHistMode,
       "oppmHHistLocation": oppmHHistLocation,
       "oppmHHistShelf": oppmHHistShelf,
       "oppmHHistSlot": oppmHHistSlot,
       "oppmHLastBootTime": oppmHLastBootTime,
       "oppmHAvailTime": oppmHAvailTime,
       "oppmHErrFreeSecs": oppmHErrFreeSecs,
       "mcmHist": mcmHist,
       "mcmHistTable": mcmHistTable,
       "mcmHistEntry": mcmHistEntry,
       "mcmHMode": mcmHMode,
       "mcmHNumEvents": mcmHNumEvents,
       "mcmHCntrTable": mcmHCntrTable,
       "mcmHCntrEntry": mcmHCntrEntry,
       "mcmHCntrMode": mcmHCntrMode,
       "mcmHCntrLocation": mcmHCntrLocation,
       "mcmHCntrShelf": mcmHCntrShelf,
       "mcmHCntrSlot": mcmHCntrSlot,
       "mcmHCntrType": mcmHCntrType,
       "mcmHTotPktSent": mcmHTotPktSent,
       "mcmHTotPktRcvd": mcmHTotPktRcvd,
       "mcmHBadPktRcvd": mcmHBadPktRcvd,
       "mcmHTotBadTrans": mcmHTotBadTrans,
       "mcmHBytesSent": mcmHBytesSent,
       "mcmHBytesRcvd": mcmHBytesRcvd,
       "mcmHMsgsDlvrd": mcmHMsgsDlvrd,
       "mcmHBufAllocFail": mcmHBufAllocFail,
       "mcmHEcbAllocFail": mcmHEcbAllocFail,
       "mcmPortHIntervalTable": mcmPortHIntervalTable,
       "mcmPortHIntervalEntry": mcmPortHIntervalEntry,
       "mcmPortHIntervalLocation": mcmPortHIntervalLocation,
       "mcmPortHIntervalShelf": mcmPortHIntervalShelf,
       "mcmPortHIntervalSlot": mcmPortHIntervalSlot,
       "mcmPortHIntervalPort": mcmPortHIntervalPort,
       "mcmPortHIntervalNumber": mcmPortHIntervalNumber,
       "mcmPortHIntervalASs": mcmPortHIntervalASs,
       "mcmPortHIntervalFrameASs": mcmPortHIntervalFrameASs,
       "mcmPortHIntervalFEs": mcmPortHIntervalFEs,
       "mcmPortHIntervalCRCErrs": mcmPortHIntervalCRCErrs,
       "mcmPortHIntervalSESs": mcmPortHIntervalSESs,
       "mcmPortHIntervalSEFSs": mcmPortHIntervalSEFSs,
       "mcmPortHIntervalUASs": mcmPortHIntervalUASs,
       "mcmPortHIntervalLESs": mcmPortHIntervalLESs,
       "mcmPortHIntervalBESs": mcmPortHIntervalBESs,
       "mcmPortHIntervalDMs": mcmPortHIntervalDMs,
       "mcmPortHIntervalLCVs": mcmPortHIntervalLCVs,
       "mcmPortHTotalTable": mcmPortHTotalTable,
       "mcmPortHTotalEntry": mcmPortHTotalEntry,
       "mcmPortHTotalLocation": mcmPortHTotalLocation,
       "mcmPortHTotalShelf": mcmPortHTotalShelf,
       "mcmPortHTotalSlot": mcmPortHTotalSlot,
       "mcmPortHTotalPort": mcmPortHTotalPort,
       "mcmPortHTotalASs": mcmPortHTotalASs,
       "mcmPortHTotalFrameASs": mcmPortHTotalFrameASs,
       "mcmPortHTotalFEs": mcmPortHTotalFEs,
       "mcmPortHTotalCRCErrs": mcmPortHTotalCRCErrs,
       "mcmPortHTotalSESs": mcmPortHTotalSESs,
       "mcmPortHTotalSEFSs": mcmPortHTotalSEFSs,
       "mcmPortHTotalUASs": mcmPortHTotalUASs,
       "mcmPortHTotalLESs": mcmPortHTotalLESs,
       "mcmPortHTotalBESs": mcmPortHTotalBESs,
       "mcmPortHTotalDMs": mcmPortHTotalDMs,
       "mcmPortHTotalLCVs": mcmPortHTotalLCVs,
       "fnHist": fnHist,
       "fnHistTable": fnHistTable,
       "fnHistEntry": fnHistEntry,
       "fnHMode": fnHMode,
       "fnHNumEvents": fnHNumEvents,
       "csimHist": csimHist,
       "csimHistTable": csimHistTable,
       "csimHistEntry": csimHistEntry,
       "csimHMode": csimHMode,
       "csimHNumEvents": csimHNumEvents,
       "csimHistIntervalTable": csimHistIntervalTable,
       "csimHistIntervalEntry": csimHistIntervalEntry,
       "csimIntervalLocation": csimIntervalLocation,
       "csimIntervalShelf": csimIntervalShelf,
       "csimIntervalSlot": csimIntervalSlot,
       "csimIntervalNumber": csimIntervalNumber,
       "csimIntervalEFIs": csimIntervalEFIs,
       "csimIntervalEIs": csimIntervalEIs,
       "csimIntervalSEIs": csimIntervalSEIs,
       "csimIntervalBERs": csimIntervalBERs,
       "csimIntervalUAIs": csimIntervalUAIs,
       "csimIntervalValidData": csimIntervalValidData,
       "csimIntervalDateTime": csimIntervalDateTime,
       "rpsmHist": rpsmHist,
       "rpsmHistTable": rpsmHistTable,
       "rpsmHistEntry": rpsmHistEntry,
       "rpsmHMode": rpsmHMode,
       "rpsmHNumEvents": rpsmHNumEvents,
       "rpsmHHistTable": rpsmHHistTable,
       "rpsmHHistEntry": rpsmHHistEntry,
       "rpsmHHistMode": rpsmHHistMode,
       "rpsmHHistLocation": rpsmHHistLocation,
       "rpsmHHistShelf": rpsmHHistShelf,
       "rpsmHHistSlot": rpsmHHistSlot,
       "rpsmHLastBootTime": rpsmHLastBootTime,
       "rpsmHAvailTime": rpsmHAvailTime,
       "rpsmHErrFreeSecs": rpsmHErrFreeSecs,
       "rsdmHist": rsdmHist,
       "rsdmHistTable": rsdmHistTable,
       "rsdmHistEntry": rsdmHistEntry,
       "rsdmHMode": rsdmHMode,
       "rsdmHNumEvents": rsdmHNumEvents,
       "rsdmHHistTable": rsdmHHistTable,
       "rsdmHHistEntry": rsdmHHistEntry,
       "rsdmHHistMode": rsdmHHistMode,
       "rsdmHHistLocation": rsdmHHistLocation,
       "rsdmHHistShelf": rsdmHHistShelf,
       "rsdmHHistSlot": rsdmHHistSlot,
       "rsdmHLastBootTime": rsdmHLastBootTime,
       "rsdmHAvailTime": rsdmHAvailTime,
       "rsdmHErrFreeSecs": rsdmHErrFreeSecs,
       "rtdmHist": rtdmHist,
       "rtdmHistTable": rtdmHistTable,
       "rtdmHistEntry": rtdmHistEntry,
       "rtdmHMode": rtdmHMode,
       "rtdmHNumEvents": rtdmHNumEvents,
       "rtdmHHistTable": rtdmHHistTable,
       "rtdmHHistEntry": rtdmHHistEntry,
       "rtdmHHistMode": rtdmHHistMode,
       "rtdmHHistLocation": rtdmHHistLocation,
       "rtdmHHistShelf": rtdmHHistShelf,
       "rtdmHHistSlot": rtdmHHistSlot,
       "rtdmHLastBootTime": rtdmHLastBootTime,
       "rtdmHAvailTime": rtdmHAvailTime,
       "rtdmHErrFreeSecs": rtdmHErrFreeSecs,
       "osamHist": osamHist,
       "osamHistTable": osamHistTable,
       "osamHistEntry": osamHistEntry,
       "osamHMode": osamHMode,
       "osamHNumEvents": osamHNumEvents,
       "osamHHistTable": osamHHistTable,
       "osamHHistEntry": osamHHistEntry,
       "osamHHistMode": osamHHistMode,
       "osamHHistLocation": osamHHistLocation,
       "osamHHistShelf": osamHHistShelf,
       "osamHHistSlot": osamHHistSlot,
       "osamHHistLastBootTime": osamHHistLastBootTime,
       "osamHHistAvailTime": osamHHistAvailTime,
       "osamHHistErrFreeSecs": osamHHistErrFreeSecs,
       "rsmHist": rsmHist,
       "rsmHistTable": rsmHistTable,
       "rsmHistEntry": rsmHistEntry,
       "rsmHMode": rsmHMode,
       "rsmHNumEvents": rsmHNumEvents,
       "rsmHHistTable": rsmHHistTable,
       "rsmHHistEntry": rsmHHistEntry,
       "rsmHHistMode": rsmHHistMode,
       "rsmHHistLocation": rsmHHistLocation,
       "rsmHHistShelf": rsmHHistShelf,
       "rsmHHistSlot": rsmHHistSlot,
       "rsmHLastBootTime": rsmHLastBootTime,
       "rsmHAvailTime": rsmHAvailTime,
       "rsmHErrFreeSecs": rsmHErrFreeSecs,
       "upsmHist": upsmHist,
       "upsmHistTable": upsmHistTable,
       "upsmHistEntry": upsmHistEntry,
       "upsmHMode": upsmHMode,
       "upsmHNumEvents": upsmHNumEvents,
       "upsmHHistTable": upsmHHistTable,
       "upsmHHistEntry": upsmHHistEntry,
       "upsmHHistMode": upsmHHistMode,
       "upsmHHistLocation": upsmHHistLocation,
       "upsmHHistShelf": upsmHHistShelf,
       "upsmHHistSlot": upsmHHistSlot,
       "upsmHLastBootTime": upsmHLastBootTime,
       "upsmHAvailTime": upsmHAvailTime,
       "upsmHErrFreeSecs": upsmHErrFreeSecs,
       "mcmescHist": mcmescHist,
       "mcmescHistTable": mcmescHistTable,
       "mcmescHistEntry": mcmescHistEntry,
       "mcmescHMode": mcmescHMode,
       "mcmescHNumEvents": mcmescHNumEvents,
       "mcmescHCntrTable": mcmescHCntrTable,
       "mcmescHCntrEntry": mcmescHCntrEntry,
       "mcmescHCntrMode": mcmescHCntrMode,
       "mcmescHCntrLocation": mcmescHCntrLocation,
       "mcmescHCntrShelf": mcmescHCntrShelf,
       "mcmescHCntrSlot": mcmescHCntrSlot,
       "mcmescHCntrType": mcmescHCntrType,
       "mcmescHTotPktSent": mcmescHTotPktSent,
       "mcmescHTotPktRcvd": mcmescHTotPktRcvd,
       "mcmescHBadPktRcvd": mcmescHBadPktRcvd,
       "mcmescHTotBadTrans": mcmescHTotBadTrans,
       "mcmescHBytesSent": mcmescHBytesSent,
       "mcmescHBytesRcvd": mcmescHBytesRcvd,
       "mcmescHMsgsDlvrd": mcmescHMsgsDlvrd,
       "mcmescPortHIntervalTable": mcmescPortHIntervalTable,
       "mcmescPortHIntervalEntry": mcmescPortHIntervalEntry,
       "mcmescPortHIntervalLocation": mcmescPortHIntervalLocation,
       "mcmescPortHIntervalShelf": mcmescPortHIntervalShelf,
       "mcmescPortHIntervalSlot": mcmescPortHIntervalSlot,
       "mcmescPortHIntervalPort": mcmescPortHIntervalPort,
       "mcmescPortHIntervalNumber": mcmescPortHIntervalNumber,
       "mcmescPortHIntervalDuration": mcmescPortHIntervalDuration,
       "mcmescPortHIntervalEns": mcmescPortHIntervalEns,
       "mcmescPortHIntervalLoss": mcmescPortHIntervalLoss,
       "mcmescPortHIntervalCrcErr": mcmescPortHIntervalCrcErr,
       "mcmescPortHIntervalOobErr": mcmescPortHIntervalOobErr,
       "mcmescPortHIntervalRdpErr": mcmescPortHIntervalRdpErr,
       "mcmescLinkHIntervalTable": mcmescLinkHIntervalTable,
       "mcmescLinkHIntervalEntry": mcmescLinkHIntervalEntry,
       "mcmescLinkHIntervalLocation": mcmescLinkHIntervalLocation,
       "mcmescLinkHIntervalShelf": mcmescLinkHIntervalShelf,
       "mcmescLinkHIntervalSlot": mcmescLinkHIntervalSlot,
       "mcmescLinkHIntervalNumber": mcmescLinkHIntervalNumber,
       "mcmescLinkHIntervalDuration": mcmescLinkHIntervalDuration,
       "mcmescLinkHIntervalTsos": mcmescLinkHIntervalTsos,
       "mcmescLinkHIntervalLoss": mcmescLinkHIntervalLoss,
       "mcmescLinkHIntervalCrcErr": mcmescLinkHIntervalCrcErr,
       "mcmescLinkHIntervalOobErr": mcmescLinkHIntervalOobErr,
       "mcmescLinkHIntervalRdpErr": mcmescLinkHIntervalRdpErr,
       "mcmescPortHTotalTable": mcmescPortHTotalTable,
       "mcmescPortHTotalEntry": mcmescPortHTotalEntry,
       "mcmescPortHTotalCardLocation": mcmescPortHTotalCardLocation,
       "mcmescPortHTotalCardShelf": mcmescPortHTotalCardShelf,
       "mcmescPortHTotalCardSlot": mcmescPortHTotalCardSlot,
       "mcmescPortHTotalPort": mcmescPortHTotalPort,
       "mcmescPortHTotalDuration": mcmescPortHTotalDuration,
       "mcmescPortHTotalEns": mcmescPortHTotalEns,
       "mcmescPortHTotalLoss": mcmescPortHTotalLoss,
       "mcmescPortHTotalCrcErr": mcmescPortHTotalCrcErr,
       "mcmescPortHTotalOobErr": mcmescPortHTotalOobErr,
       "mcmescPortHTotalRdpErr": mcmescPortHTotalRdpErr,
       "mcmescLinkHTotalTable": mcmescLinkHTotalTable,
       "mcmescLinkHTotalEntry": mcmescLinkHTotalEntry,
       "mcmescLinkHTotalCardLocation": mcmescLinkHTotalCardLocation,
       "mcmescLinkHTotalCardShelf": mcmescLinkHTotalCardShelf,
       "mcmescLinkHTotalCardSlot": mcmescLinkHTotalCardSlot,
       "mcmescLinkHTotalDuration": mcmescLinkHTotalDuration,
       "mcmescLinkHTotalTsos": mcmescLinkHTotalTsos,
       "mcmescLinkHTotalLoss": mcmescLinkHTotalLoss,
       "mcmescLinkHTotalCrcErr": mcmescLinkHTotalCrcErr,
       "mcmescLinkHTotalOobErr": mcmescLinkHTotalOobErr,
       "mcmescLinkHTotalRdpErr": mcmescLinkHTotalRdpErr,
       "tapHist": tapHist,
       "tapHistTable": tapHistTable,
       "tapHistEntry": tapHistEntry,
       "tapHMode": tapHMode,
       "tapHNumEvents": tapHNumEvents,
       "tapHHistTable": tapHHistTable,
       "tapHHistEntry": tapHHistEntry,
       "tapHHistMode": tapHHistMode,
       "tapHHistLocation": tapHHistLocation,
       "tapHHistShelf": tapHHistShelf,
       "tapHHistSlot": tapHHistSlot,
       "tapHHistType": tapHHistType,
       "tapHLastBootTime": tapHLastBootTime,
       "tapHAvailTime": tapHAvailTime,
       "tapHErrFreeSecs": tapHErrFreeSecs,
       "voadmHist": voadmHist,
       "voadmHistTable": voadmHistTable,
       "voadmHistEntry": voadmHistEntry,
       "voadmHMode": voadmHMode,
       "voadmHNumEvents": voadmHNumEvents,
       "voadmHHistTable": voadmHHistTable,
       "voadmHHistEntry": voadmHHistEntry,
       "voadmHHistMode": voadmHHistMode,
       "voadmHHistLocation": voadmHHistLocation,
       "voadmHHistShelf": voadmHHistShelf,
       "voadmHHistSlot": voadmHHistSlot,
       "voadmHHistType": voadmHHistType,
       "voadmHLastBootTime": voadmHLastBootTime,
       "voadmHAvailTime": voadmHAvailTime,
       "voadmHErrFreeSecs": voadmHErrFreeSecs,
       "dmmHist": dmmHist,
       "dmmHistTable": dmmHistTable,
       "dmmHistEntry": dmmHistEntry,
       "dmmHMode": dmmHMode,
       "dmmHNumEvents": dmmHNumEvents,
       "dmmHHistTable": dmmHHistTable,
       "dmmHHistEntry": dmmHHistEntry,
       "dmmHHistMode": dmmHHistMode,
       "dmmHHistLocation": dmmHHistLocation,
       "dmmHHistShelf": dmmHHistShelf,
       "dmmHHistSlot": dmmHHistSlot,
       "dmmHLastBootTime": dmmHLastBootTime,
       "dmmHAvailTime": dmmHAvailTime,
       "dmmHErrFreeSecs": dmmHErrFreeSecs,
       "ocm10gfHist": ocm10gfHist,
       "ocm10gfHistTable": ocm10gfHistTable,
       "ocm10gfHistEntry": ocm10gfHistEntry,
       "ocm10gfHMode": ocm10gfHMode,
       "ocm10gfHNumEvents": ocm10gfHNumEvents,
       "ocm10gfHHistTable": ocm10gfHHistTable,
       "ocm10gfHHistEntry": ocm10gfHHistEntry,
       "ocm10gfHHistMode": ocm10gfHHistMode,
       "ocm10gfHHistLocation": ocm10gfHHistLocation,
       "ocm10gfHHistShelf": ocm10gfHHistShelf,
       "ocm10gfHHistSlot": ocm10gfHHistSlot,
       "ocm10gfHLastBootTime": ocm10gfHLastBootTime,
       "ocm10gfHAvailTime": ocm10gfHAvailTime,
       "ocm10gfHErrFreeSecs": ocm10gfHErrFreeSecs,
       "ocm2Hist": ocm2Hist,
       "ocm2HistTable": ocm2HistTable,
       "ocm2HistEntry": ocm2HistEntry,
       "ocm2HMode": ocm2HMode,
       "ocm2HNumEvents": ocm2HNumEvents,
       "ocm2HHistTable": ocm2HHistTable,
       "ocm2HHistEntry": ocm2HHistEntry,
       "ocm2HHistMode": ocm2HHistMode,
       "ocm2HHistLocation": ocm2HHistLocation,
       "ocm2HHistShelf": ocm2HHistShelf,
       "ocm2HHistSlot": ocm2HHistSlot,
       "ocm2HLastBootTime": ocm2HLastBootTime,
       "ocm2HAvailTime": ocm2HAvailTime,
       "ocm2HErrFreeSecs": ocm2HErrFreeSecs,
       "oscHist": oscHist,
       "oscHistTable": oscHistTable,
       "oscHistEntry": oscHistEntry,
       "oscHMode": oscHMode,
       "oscHNumEvents": oscHNumEvents,
       "oscHHistTable": oscHHistTable,
       "oscHHistEntry": oscHHistEntry,
       "oscHHistMode": oscHHistMode,
       "oscHHistLocation": oscHHistLocation,
       "oscHHistShelf": oscHHistShelf,
       "oscHHistSlot": oscHHistSlot,
       "oscHLastBootTime": oscHLastBootTime,
       "oscHAvailTime": oscHAvailTime,
       "oscHErrFreeSecs": oscHErrFreeSecs,
       "ocm4gHist": ocm4gHist,
       "ocm4gHistTable": ocm4gHistTable,
       "ocm4gHistEntry": ocm4gHistEntry,
       "ocm4gHMode": ocm4gHMode,
       "ocm4gHNumEvents": ocm4gHNumEvents,
       "ocm4gHHistTable": ocm4gHHistTable,
       "ocm4gHHistEntry": ocm4gHHistEntry,
       "ocm4gHHistMode": ocm4gHHistMode,
       "ocm4gHHistLocation": ocm4gHHistLocation,
       "ocm4gHHistShelf": ocm4gHHistShelf,
       "ocm4gHHistSlot": ocm4gHHistSlot,
       "ocm4gHLastBootTime": ocm4gHLastBootTime,
       "ocm4gHAvailTime": ocm4gHAvailTime,
       "ocm4gHErrFreeSecs": ocm4gHErrFreeSecs,
       "oetHist": oetHist,
       "uobHist": uobHist,
       "uobHistTable": uobHistTable,
       "uobHistEntry": uobHistEntry,
       "uobHMode": uobHMode,
       "uobHNumEvents": uobHNumEvents,
       "uobHHistTable": uobHHistTable,
       "uobHHistEntry": uobHHistEntry,
       "uobHHistMode": uobHHistMode,
       "uobHHistLocation": uobHHistLocation,
       "uobHHistShelf": uobHHistShelf,
       "uobHHistSlot": uobHHistSlot,
       "uobHLastBootTime": uobHLastBootTime,
       "uobHAvailTime": uobHAvailTime,
       "uobHErrFreeSecs": uobHErrFreeSecs,
       "specialConditions": specialConditions,
       "systemCond": systemCond,
       "sysCStatus": sysCStatus,
       "sysCSetMode": sysCSetMode,
       "sysCAvailTime": sysCAvailTime,
       "sysCErrFreeSecs": sysCErrFreeSecs,
       "downloadCond": downloadCond,
       "dlCStatus": dlCStatus,
       "dlCOkDownloads": dlCOkDownloads,
       "dlCBadDownloads": dlCBadDownloads,
       "dlCLongestTime": dlCLongestTime,
       "dlCLongestSize": dlCLongestSize,
       "dlCCounterFlag": dlCCounterFlag,
       "cpCond": cpCond,
       "cpCNumEvents": cpCNumEvents,
       "cpCTrapsSent": cpCTrapsSent,
       "cpCSNMPCmdsRcvd": cpCSNMPCmdsRcvd,
       "cpCCounterFlag": cpCCounterFlag,
       "cpCCntrTable": cpCCntrTable,
       "cpCCntrEntry": cpCCntrEntry,
       "cpCCntrShelf": cpCCntrShelf,
       "cpCCntrSlot": cpCCntrSlot,
       "cpCCntrType": cpCCntrType,
       "cpCTotPktSent": cpCTotPktSent,
       "cpCTotPktRcvd": cpCTotPktRcvd,
       "cpCBadPktRcvd": cpCBadPktRcvd,
       "cpCTotBadTrans": cpCTotBadTrans,
       "cpCBytesSent": cpCBytesSent,
       "cpCBytesRcvd": cpCBytesRcvd,
       "cpCMsgsDlvrd": cpCMsgsDlvrd,
       "cpCBufAllocFail": cpCBufAllocFail,
       "cpCEcbAllocFail": cpCEcbAllocFail,
       "cpCPerfTable": cpCPerfTable,
       "cpCPerfEntry": cpCPerfEntry,
       "cpCPerfShelf": cpCPerfShelf,
       "cpCPerfSlot": cpCPerfSlot,
       "cpCPerfMode": cpCPerfMode,
       "cpCPerfState": cpCPerfState,
       "cpCPerfStatus": cpCPerfStatus,
       "cpCAvailTime": cpCAvailTime,
       "cpCErrFreeSecs": cpCErrFreeSecs,
       "ccCond": ccCond,
       "ccCNumEvents": ccCNumEvents,
       "ccCCntrTable": ccCCntrTable,
       "ccCCntrEntry": ccCCntrEntry,
       "ccCCntrLocation": ccCCntrLocation,
       "ccCCntrShelf": ccCCntrShelf,
       "ccCCntrSlot": ccCCntrSlot,
       "ccCCntrType": ccCCntrType,
       "ccCCounterFlag": ccCCounterFlag,
       "ccCTotPktSent": ccCTotPktSent,
       "ccCTotPktRcvd": ccCTotPktRcvd,
       "ccCBadPktRcvd": ccCBadPktRcvd,
       "ccCTotBadTrans": ccCTotBadTrans,
       "ccCBytesSent": ccCBytesSent,
       "ccCBytesRcvd": ccCBytesRcvd,
       "ccCMsgsDlvrd": ccCMsgsDlvrd,
       "ccCBufAllocFail": ccCBufAllocFail,
       "ccCEcbAllocFail": ccCEcbAllocFail,
       "ccCClearCntrs": ccCClearCntrs,
       "ccCPerfTable": ccCPerfTable,
       "ccCPerfEntry": ccCPerfEntry,
       "ccCPerfLocation": ccCPerfLocation,
       "ccCPerfShelf": ccCPerfShelf,
       "ccCPerfSlot": ccCPerfSlot,
       "ccCPerfState": ccCPerfState,
       "ccCPerfStatus": ccCPerfStatus,
       "ccCAvailTime": ccCAvailTime,
       "ccCErrFreeSecs": ccCErrFreeSecs,
       "ccCBiasCurrent": ccCBiasCurrent,
       "ccCModulation": ccCModulation,
       "ccCApc": ccCApc,
       "ccCIwmModulation": ccCIwmModulation,
       "ccCLaserOnOff": ccCLaserOnOff,
       "ccCTemperature": ccCTemperature,
       "ccCIntensity": ccCIntensity,
       "ccCSignalStrength": ccCSignalStrength,
       "ccCLossOfLight": ccCLossOfLight,
       "ccCSignalDetect": ccCSignalDetect,
       "ccCRefClock": ccCRefClock,
       "ccCClockDiv": ccCClockDiv,
       "ccCProtectionMode": ccCProtectionMode,
       "muxCond": muxCond,
       "muxCNumEvents": muxCNumEvents,
       "muxCPerfTable": muxCPerfTable,
       "muxCPerfEntry": muxCPerfEntry,
       "muxCPerfLocation": muxCPerfLocation,
       "muxCPerfShelf": muxCPerfShelf,
       "muxCPerfSlot": muxCPerfSlot,
       "muxCType": muxCType,
       "muxCPerfState": muxCPerfState,
       "muxCPerfStatus": muxCPerfStatus,
       "muxCAvailTime": muxCAvailTime,
       "muxCErrFreeSecs": muxCErrFreeSecs,
       "muxCCounterFlag": muxCCounterFlag,
       "psCond": psCond,
       "psCNumEvents": psCNumEvents,
       "psCVoltageLevel3pt3Volt": psCVoltageLevel3pt3Volt,
       "psCVoltageLevel5Volt": psCVoltageLevel5Volt,
       "psCVoltageLevel12Volt": psCVoltageLevel12Volt,
       "psCPerfTable": psCPerfTable,
       "psCPerfEntry": psCPerfEntry,
       "psCPerfID": psCPerfID,
       "psCPerfType": psCPerfType,
       "psCPerfState": psCPerfState,
       "psCPerfStatus": psCPerfStatus,
       "fadmCond": fadmCond,
       "fadmCNumEvents": fadmCNumEvents,
       "fadmCCounterFlag": fadmCCounterFlag,
       "fadmCPerfTable": fadmCPerfTable,
       "fadmCPerfEntry": fadmCPerfEntry,
       "fadmCPerfLocation": fadmCPerfLocation,
       "fadmCPerfShelf": fadmCPerfShelf,
       "fadmCPerfSlot": fadmCPerfSlot,
       "fadmCPerfState": fadmCPerfState,
       "fadmCPerfStatus": fadmCPerfStatus,
       "fadmCAvailTime": fadmCAvailTime,
       "fadmCErrFreeSecs": fadmCErrFreeSecs,
       "oppmCond": oppmCond,
       "oppmCNumEvents": oppmCNumEvents,
       "oppmCPerfTable": oppmCPerfTable,
       "oppmCPerfEntry": oppmCPerfEntry,
       "oppmCPerfLocation": oppmCPerfLocation,
       "oppmCPerfShelf": oppmCPerfShelf,
       "oppmCPerfSlot": oppmCPerfSlot,
       "oppmCPerfState": oppmCPerfState,
       "oppmCPerfStatus": oppmCPerfStatus,
       "oppmCAvailTime": oppmCAvailTime,
       "oppmCErrFreeSecs": oppmCErrFreeSecs,
       "oppmCCounterFlag": oppmCCounterFlag,
       "mcmCond": mcmCond,
       "mcmCNumEvents": mcmCNumEvents,
       "mcmCCntrTable": mcmCCntrTable,
       "mcmCCntrEntry": mcmCCntrEntry,
       "mcmCCntrLocation": mcmCCntrLocation,
       "mcmCCntrShelf": mcmCCntrShelf,
       "mcmCCntrSlot": mcmCCntrSlot,
       "mcmCCntrType": mcmCCntrType,
       "mcmCCounterFlag": mcmCCounterFlag,
       "mcmCTotPktSent": mcmCTotPktSent,
       "mcmCTotPktRcvd": mcmCTotPktRcvd,
       "mcmCBadPktRcvd": mcmCBadPktRcvd,
       "mcmCTotBadTrans": mcmCTotBadTrans,
       "mcmCBytesSent": mcmCBytesSent,
       "mcmCBytesRcvd": mcmCBytesRcvd,
       "mcmCMsgsDlvrd": mcmCMsgsDlvrd,
       "mcmCBufAllocFail": mcmCBufAllocFail,
       "mcmCEcbAllocFail": mcmCEcbAllocFail,
       "mcmCClearCntrs": mcmCClearCntrs,
       "mcmCPerfTable": mcmCPerfTable,
       "mcmCPerfEntry": mcmCPerfEntry,
       "mcmCPerfLocation": mcmCPerfLocation,
       "mcmCPerfShelf": mcmCPerfShelf,
       "mcmCPerfSlot": mcmCPerfSlot,
       "mcmCPerfState": mcmCPerfState,
       "mcmCPerfStatus": mcmCPerfStatus,
       "mcmCAvailTime": mcmCAvailTime,
       "mcmCErrFreeSecs": mcmCErrFreeSecs,
       "mcmCBiasCurrent": mcmCBiasCurrent,
       "mcmCModulation": mcmCModulation,
       "mcmCApc": mcmCApc,
       "mcmCIwmModulation": mcmCIwmModulation,
       "mcmCLaserOnOff": mcmCLaserOnOff,
       "mcmCTemperature": mcmCTemperature,
       "mcmCIntensity": mcmCIntensity,
       "mcmCSignalStrength": mcmCSignalStrength,
       "mcmCLossOfLight": mcmCLossOfLight,
       "mcmCSignalDetect": mcmCSignalDetect,
       "mcmCRefClock": mcmCRefClock,
       "mcmCClockDiv": mcmCClockDiv,
       "mcmPortCCntrTable": mcmPortCCntrTable,
       "mcmPortCCntrEntry": mcmPortCCntrEntry,
       "mcmPortCCntrCardLocation": mcmPortCCntrCardLocation,
       "mcmPortCCntrCardShelf": mcmPortCCntrCardShelf,
       "mcmPortCCntrCardSlot": mcmPortCCntrCardSlot,
       "mcmPortCCntrIndex": mcmPortCCntrIndex,
       "mcmPortCCntrASs": mcmPortCCntrASs,
       "mcmPortCCntrFEs": mcmPortCCntrFEs,
       "mcmPortCCntrCRCErrs": mcmPortCCntrCRCErrs,
       "mcmPortCCntrSESs": mcmPortCCntrSESs,
       "mcmPortCCntrSEFSs": mcmPortCCntrSEFSs,
       "mcmPortCCntrUASs": mcmPortCCntrUASs,
       "mcmPortCCntrLESs": mcmPortCCntrLESs,
       "mcmPortCCntrBESs": mcmPortCCntrBESs,
       "mcmPortCCntrDMs": mcmPortCCntrDMs,
       "mcmPortCCntrLCVs": mcmPortCCntrLCVs,
       "fnCond": fnCond,
       "fnCNumEvents": fnCNumEvents,
       "fnCPerfTable": fnCPerfTable,
       "fnCPerfEntry": fnCPerfEntry,
       "fnCPerfID": fnCPerfID,
       "fnCPerfState": fnCPerfState,
       "fnCPerfStatus": fnCPerfStatus,
       "rpsmCond": rpsmCond,
       "rpsmCNumEvents": rpsmCNumEvents,
       "rpsmCPerfTable": rpsmCPerfTable,
       "rpsmCPerfEntry": rpsmCPerfEntry,
       "rpsmCPerfLocation": rpsmCPerfLocation,
       "rpsmCPerfShelf": rpsmCPerfShelf,
       "rpsmCPerfSlot": rpsmCPerfSlot,
       "rpsmCPerfState": rpsmCPerfState,
       "rpsmCPerfStatus": rpsmCPerfStatus,
       "rpsmCAvailTime": rpsmCAvailTime,
       "rpsmCErrFreeSecs": rpsmCErrFreeSecs,
       "rpsmCCounterFlag": rpsmCCounterFlag,
       "rsdmCond": rsdmCond,
       "rsdmCNumEvents": rsdmCNumEvents,
       "rsdmCPerfTable": rsdmCPerfTable,
       "rsdmCPerfEntry": rsdmCPerfEntry,
       "rsdmCPerfLocation": rsdmCPerfLocation,
       "rsdmCPerfShelf": rsdmCPerfShelf,
       "rsdmCPerfSlot": rsdmCPerfSlot,
       "rsdmCPerfState": rsdmCPerfState,
       "rsdmCPerfStatus": rsdmCPerfStatus,
       "rsdmCAvailTime": rsdmCAvailTime,
       "rsdmCErrFreeSecs": rsdmCErrFreeSecs,
       "rsdmCCounterFlag": rsdmCCounterFlag,
       "rtdmCond": rtdmCond,
       "rtdmCNumEvents": rtdmCNumEvents,
       "rtdmCPerfTable": rtdmCPerfTable,
       "rtdmCPerfEntry": rtdmCPerfEntry,
       "rtdmCPerfLocation": rtdmCPerfLocation,
       "rtdmCPerfShelf": rtdmCPerfShelf,
       "rtdmCPerfSlot": rtdmCPerfSlot,
       "rtdmCPerfState": rtdmCPerfState,
       "rtdmCPerfStatus": rtdmCPerfStatus,
       "rtdmCAvailTime": rtdmCAvailTime,
       "rtdmCErrFreeSecs": rtdmCErrFreeSecs,
       "rtdmCCounterFlag": rtdmCCounterFlag,
       "osamCond": osamCond,
       "osamCNumEvents": osamCNumEvents,
       "osamCPerfTable": osamCPerfTable,
       "osamCPerfEntry": osamCPerfEntry,
       "osamCPerfLocation": osamCPerfLocation,
       "osamCPerfShelf": osamCPerfShelf,
       "osamCPerfSlot": osamCPerfSlot,
       "osamCPerfState": osamCPerfState,
       "osamCPerfStatus": osamCPerfStatus,
       "osamCPerfAvailTime": osamCPerfAvailTime,
       "osamCPerfErrFreeSecs": osamCPerfErrFreeSecs,
       "osamCPerfCounterFlag": osamCPerfCounterFlag,
       "rsmCond": rsmCond,
       "rsmCNumEvents": rsmCNumEvents,
       "rsmCPerfTable": rsmCPerfTable,
       "rsmCPerfEntry": rsmCPerfEntry,
       "rsmCPerfLocation": rsmCPerfLocation,
       "rsmCPerfShelf": rsmCPerfShelf,
       "rsmCPerfSlot": rsmCPerfSlot,
       "rsmCPerfState": rsmCPerfState,
       "rsmCPerfStatus": rsmCPerfStatus,
       "rsmCAvailTime": rsmCAvailTime,
       "rsmCErrFreeSecs": rsmCErrFreeSecs,
       "rsmCCounterFlag": rsmCCounterFlag,
       "upsmCond": upsmCond,
       "upsmCNumEvents": upsmCNumEvents,
       "upsmCPerfTable": upsmCPerfTable,
       "upsmCPerfEntry": upsmCPerfEntry,
       "upsmCPerfLocation": upsmCPerfLocation,
       "upsmCPerfShelf": upsmCPerfShelf,
       "upsmCPerfSlot": upsmCPerfSlot,
       "upsmCPerfState": upsmCPerfState,
       "upsmCPerfStatus": upsmCPerfStatus,
       "upsmCAvailTime": upsmCAvailTime,
       "upsmCErrFreeSecs": upsmCErrFreeSecs,
       "upsmCCounterFlag": upsmCCounterFlag,
       "faults": faults,
       "eventLog": eventLog,
       "eveTrapThreshold": eveTrapThreshold,
       "eveNumEvents": eveNumEvents,
       "eveLogTable": eveLogTable,
       "eveLogEntry": eveLogEntry,
       "eveDateTime": eveDateTime,
       "eveEventId": eveEventId,
       "eveSeverity": eveSeverity,
       "eveSysStatus": eveSysStatus,
       "eveSource": eveSource,
       "eveDescr": eveDescr,
       "eveTrap": eveTrap,
       "eveSeqNum": eveSeqNum,
       "eveDeleteLog": eveDeleteLog,
       "eveLastEntryDateTime": eveLastEntryDateTime,
       "eveHundredthEntryDateTime": eveHundredthEntryDateTime,
       "eveTwoHundredthEntryDateTime": eveTwoHundredthEntryDateTime,
       "eveThreeHundredthEntryDateTime": eveThreeHundredthEntryDateTime,
       "eveFourHundredthEntryDateTime": eveFourHundredthEntryDateTime,
       "eveFiveHundredthEntryDateTime": eveFiveHundredthEntryDateTime,
       "eveSixHundredthEntryDateTime": eveSixHundredthEntryDateTime,
       "eveSevenHundredthEntryDateTime": eveSevenHundredthEntryDateTime,
       "eveEightHundredthEntryDateTime": eveEightHundredthEntryDateTime,
       "eveNineHundredthEntryDateTime": eveNineHundredthEntryDateTime,
       "userLog": userLog,
       "usrNumLogs": usrNumLogs,
       "usrLogTable": usrLogTable,
       "usrLogEntry": usrLogEntry,
       "usrDateTime": usrDateTime,
       "usrLogonId": usrLogonId,
       "usrTarget": usrTarget,
       "usrLogDescr": usrLogDescr,
       "usrTrap": usrTrap,
       "diagnostics": diagnostics,
       "diagModeNum": diagModeNum,
       "diagModeTable": diagModeTable,
       "diagModeEntry": diagModeEntry,
       "diagLocation": diagLocation,
       "diagShelf": diagShelf,
       "diagSlot": diagSlot,
       "diagSetMode": diagSetMode,
       "diagTestNum": diagTestNum,
       "diagTestTable": diagTestTable,
       "diagTestEntry": diagTestEntry,
       "diagTestId": diagTestId,
       "diagTLocation": diagTLocation,
       "diagTShelf": diagTShelf,
       "diagTSlot": diagTSlot,
       "diagParam1": diagParam1,
       "diagParam2": diagParam2,
       "diagParam3": diagParam3,
       "diagTSetMode": diagTSetMode,
       "diagSelfTest": diagSelfTest,
       "mcmescSelfTest": mcmescSelfTest,
       "mcmescSelfTestTable": mcmescSelfTestTable,
       "mcmescSelfTestEntry": mcmescSelfTestEntry,
       "mcmescSelfTestLocation": mcmescSelfTestLocation,
       "mcmescSelfTestShelf": mcmescSelfTestShelf,
       "mcmescSelfTestSlot": mcmescSelfTestSlot,
       "mcmescSelfTestStart": mcmescSelfTestStart,
       "mcmescSelfTestResult": mcmescSelfTestResult,
       "mcmescSelfTestSeqNum": mcmescSelfTestSeqNum,
       "mcmescSelfTestTimeStamp": mcmescSelfTestTimeStamp,
       "mcmescLinkSelfTestResultTable": mcmescLinkSelfTestResultTable,
       "mcmescLinkSelfTestResultEntry": mcmescLinkSelfTestResultEntry,
       "mcmescLinkSelfTestLocation": mcmescLinkSelfTestLocation,
       "mcmescLinkSelfTestShelf": mcmescLinkSelfTestShelf,
       "mcmescLinkSelfTestSlot": mcmescLinkSelfTestSlot,
       "mcmescLinkSelfTestTxI2c": mcmescLinkSelfTestTxI2c,
       "mcmescLinkSelfTestCdrI2c": mcmescLinkSelfTestCdrI2c,
       "mcmescLinkSelfTestDataPath": mcmescLinkSelfTestDataPath,
       "mcmescPortSelfTestResultTable": mcmescPortSelfTestResultTable,
       "mcmescPortSelfTestResultEntry": mcmescPortSelfTestResultEntry,
       "mcmescPortSelfTestLocation": mcmescPortSelfTestLocation,
       "mcmescPortSelfTestShelf": mcmescPortSelfTestShelf,
       "mcmescPortSelfTestSlot": mcmescPortSelfTestSlot,
       "mcmescPortSelfTestPort": mcmescPortSelfTestPort,
       "mcmescPortSelfTestTxI2c": mcmescPortSelfTestTxI2c,
       "mcmescPortSelfTestCdrI2c": mcmescPortSelfTestCdrI2c,
       "mcmescPortSelfTestTxDataPath": mcmescPortSelfTestTxDataPath,
       "mcmescPortSelfTestRxDataPath": mcmescPortSelfTestRxDataPath,
       "alarmLog": alarmLog,
       "alarmNumEvents": alarmNumEvents,
       "alarmLogTable": alarmLogTable,
       "alarmLogEntry": alarmLogEntry,
       "alarmFirstDateTime": alarmFirstDateTime,
       "alarmTag": alarmTag,
       "alarmLastDateTime": alarmLastDateTime,
       "alarmEventId": alarmEventId,
       "alarmSeverity": alarmSeverity,
       "alarmSource": alarmSource,
       "alarmDescr": alarmDescr,
       "alarmCnt": alarmCnt,
       "alarmAck": alarmAck,
       "alarmClear": alarmClear,
       "alarmLastChange": alarmLastChange,
       "security": security,
       "userSecMgmt": userSecMgmt,
       "usrNumUsers": usrNumUsers,
       "usrSecTable": usrSecTable,
       "usrSecEntry": usrSecEntry,
       "usrSecLogonId": usrSecLogonId,
       "usrSecPasswd": usrSecPasswd,
       "usrSecRole": usrSecRole,
       "usrSecFullName": usrSecFullName,
       "usrSecActDateTime": usrSecActDateTime,
       "usrSecLastDateTime": usrSecLastDateTime,
       "usrSecSetLastDateTime": usrSecSetLastDateTime,
       "systemSecMgmt": systemSecMgmt,
       "secNumRoles": secNumRoles,
       "secRoleTable": secRoleTable,
       "secRoleEntry": secRoleEntry,
       "secRole": secRole,
       "secRoleDescr": secRoleDescr,
       "secNumGroups": secNumGroups,
       "secGroupTable": secGroupTable,
       "secGroupEntry": secGroupEntry,
       "secGroup": secGroup,
       "secGroupRole": secGroupRole,
       "secNumElements": secNumElements,
       "secElementTable": secElementTable,
       "secElementEntry": secElementEntry,
       "secElement": secElement,
       "secElementAccess": secElementAccess,
       "secElementOID": secElementOID,
       "secElementType": secElementType,
       "secElementParent": secElementParent,
       "secNumElmntGrp": secNumElmntGrp,
       "secElmntGrpTable": secElmntGrpTable,
       "secElmntGrpEntry": secElmntGrpEntry,
       "elmntName": elmntName,
       "grpName": grpName,
       "elmntGrpAccess": elmntGrpAccess,
       "netSecMgmt": netSecMgmt,
       "radiusSecMgmt": radiusSecMgmt,
       "radiusAuthOrder": radiusAuthOrder,
       "radiusNasIdentifier": radiusNasIdentifier,
       "radiusDefaultRealm": radiusDefaultRealm,
       "radiusTimeout": radiusTimeout,
       "radiusRetries": radiusRetries,
       "radiusSecTable": radiusSecTable,
       "radiusSecEntry": radiusSecEntry,
       "radiusServerIndex": radiusServerIndex,
       "radiusServerAddress": radiusServerAddress,
       "radiusServerPort": radiusServerPort,
       "radiusServerSecret": radiusServerSecret,
       "radiusAddServer": radiusAddServer,
       "sshSecMgmt": sshSecMgmt,
       "sshMode": sshMode,
       "sshKeySize": sshKeySize,
       "sshMaxSessions": sshMaxSessions,
       "sshGenKey": sshGenKey,
       "accounting": accounting,
       "cpAcct": cpAcct,
       "acctCPTable": acctCPTable,
       "acctCPEntry": acctCPEntry,
       "acctCPShelf": acctCPShelf,
       "acctCPSlot": acctCPSlot,
       "acctCPDsgnAct": acctCPDsgnAct,
       "acctCPDsgnStdby": acctCPDsgnStdby,
       "acctCPActive": acctCPActive,
       "acctCPStandby": acctCPStandby,
       "acctCPUpTime": acctCPUpTime,
       "acctCPUnAvail": acctCPUnAvail,
       "acctCPResetCntrs": acctCPResetCntrs,
       "ccAcct": ccAcct,
       "acctCCTable": acctCCTable,
       "acctCCEntry": acctCCEntry,
       "acctCCLocation": acctCCLocation,
       "acctCCShelf": acctCCShelf,
       "acctCCSlot": acctCCSlot,
       "acctCCUpTime": acctCCUpTime,
       "acctCCUnAvail": acctCCUnAvail,
       "acctCCResetCntrs": acctCCResetCntrs,
       "mcmAcct": mcmAcct,
       "acctmcmTable": acctmcmTable,
       "acctmcmEntry": acctmcmEntry,
       "acctmcmLocation": acctmcmLocation,
       "acctmcmShelf": acctmcmShelf,
       "acctmcmSlot": acctmcmSlot,
       "acctmcmUpTime": acctmcmUpTime,
       "acctmcmUnAvail": acctmcmUnAvail,
       "acctmcmResetCntrs": acctmcmResetCntrs,
       "mcmescAcct": mcmescAcct,
       "acctmcmescTable": acctmcmescTable,
       "acctmcmescEntry": acctmcmescEntry,
       "acctmcmescLocation": acctmcmescLocation,
       "acctmcmescShelf": acctmcmescShelf,
       "acctmcmescSlot": acctmcmescSlot,
       "acctmcmescUpTime": acctmcmescUpTime,
       "acctmcmescUnAvail": acctmcmescUnAvail,
       "acctmcmescResetCntrs": acctmcmescResetCntrs}
)
